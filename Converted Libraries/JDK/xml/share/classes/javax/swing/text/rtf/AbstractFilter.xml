<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text.rtf">
        <import package="java.io"/>
        <import package="java.lang"/>
        <class name="AbstractFilter" line="4">
            <extends class="OutputStream"/>
            <javadoc line="4">
                A generic superclass for streams which read and parse text
                  consisting of runs of characters interspersed with occasional
                  ``specials&apos;&apos; (formatting characters).
                  &lt;p&gt; Most of the functionality
                  of this class would be redundant except that the
                  &lt;code&gt;ByteToChar&lt;/code&gt; converters
                  are suddenly private API. Presumably this class will disappear
                  when the API is made public again. (sigh) That will also let us handle
                  multibyte character sets...
                  &lt;P&gt; A subclass should override at least &lt;code&gt;write(char)&lt;/code&gt;
                  and &lt;code&gt;writeSpecial(int)&lt;/code&gt;. For efficiency&apos;s sake it&apos;s a
                  good idea to override &lt;code&gt;write(String)&lt;/code&gt; as well. The subclass&apos;
                  initializer may also install appropriate translation and specials tables.                
                <see>
                    OutputStream                    
                </see>
            </javadoc>
            <declaration name="translationTable" type="char" line="21"/>
            <javadoc line="21">
                A table mapping bytes to characters                
            </javadoc>
            <declaration name="specialsTable" type="boolean" line="25"/>
            <javadoc line="25">
                A table indicating which byte values should be interpreted as
                  characters and which should be treated as formatting codes                
            </javadoc>
            <declaration name="latin1TranslationTable" type="char" line="30"/>
            <javadoc line="30">
                A translation table which does ISO Latin-1 (trivial)                
            </javadoc>
            <declaration name="noSpecialsTable" type="boolean" line="34"/>
            <javadoc line="34">
                A specials table which indicates that no characters are special                
            </javadoc>
            <declaration name="allSpecialsTable" type="boolean" line="38"/>
            <javadoc line="38">
                A specials table which indicates that all characters are special                
            </javadoc>
            <scope line="42">
                <declaration name="i" type="int" line="43"/>
            </scope>
            <javadoc line="51">
                A convenience method that reads text from a FileInputStream
                  and writes it to the receiver.
                  The format in which the file
                  is read is determined by the concrete subclass of
                  AbstractFilter to which this method is sent.
                  &lt;p&gt;This method does not close the receiver after reaching EOF on
                  the input stream.
                  The user must call &lt;code&gt;close()&lt;/code&gt; to ensure that all
                  data are processed.                
                <param>
                    in      An InputStream providing text.                    
                </param>
            </javadoc>
            <method name="readFromStream" type="void" line="63">
                <params>
                    <param name="in" type="InputStream"/>
                </params>
                <declaration name="buf" type="byte" line="64"/>
                <declaration name="count" type="int" line="65"/>
                <scope line="67"/>
            </method>
            <method name="readFromReader" type="void" line="73">
                <params>
                    <param name="in" type="Reader"/>
                </params>
                <declaration name="buf" type="char" line="74"/>
                <declaration name="count" type="int" line="75"/>
                <scope line="77">
                    <scope line="80"/>
                </scope>
            </method>
            <method name="AbstractFilter" type="constructor" line="85"/>
            <javadoc line="89">
                Implements the abstract method of OutputStream, of which this class
                  is a subclass.                
            </javadoc>
            <method name="write" type="void" line="93">
                <params>
                    <param name="b" type="int"/>
                </params>
                <scope line="96">
                    <declaration name="ch" type="char" line="97"/>
                </scope>
            </method>
            <javadoc line="101">
                Implements the buffer-at-a-time write method for greater
                  efficiency.
                  &lt;p&gt; &lt;strong&gt;PENDING:&lt;/strong&gt; Does &lt;code&gt;write(byte[])&lt;/code&gt;
                  call &lt;code&gt;write(byte[], int, int)&lt;/code&gt; or is it the other way
                  around?                
            </javadoc>
            <method name="write" type="void" line="108">
                <params>
                    <param name="buf" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <declaration name="accumulator" type="StringBuilder" line="109"/>
                <scope line="110">
                    <declaration name="b" type="short" line="111"/>
                    <scope line="113">
                        <scope line="114"/>
                    </scope>
                    <scope line="120">
                        <declaration name="ch" type="char" line="121"/>
                        <scope line="122"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="132">
                Hopefully, all subclasses will override this method to accept strings
                  of text, but if they don&apos;t, AbstractFilter&apos;s implementation
                  will spoon-feed them via &lt;code&gt;write(char)&lt;/code&gt;.                
                <param>
                    s The string of non-special characters written to the
                      OutputStream.                    
                </param>
            </javadoc>
            <method name="write" type="void" line="139">
                <params>
                    <param name="s" type="String"/>
                </params>
                <declaration name="index" type="int" line="140"/>
                <scope line="142"/>
            </method>
            <method name="write" type="void" line="146"/>
            <javadoc line="146">
                Subclasses must provide an implementation of this method which
                  accepts a single (non-special) character.                
                <param>
                    ch The character written to the OutputStream.                    
                </param>
            </javadoc>
            <method name="writeSpecial" type="void" line="152"/>
            <javadoc line="152">
                Subclasses must provide an implementation of this method which
                  accepts a single special byte. No translation is performed
                  on specials.                
                <param>
                    b The byte written to the OutputStream.                    
                </param>
            </javadoc>
        </class>
    </source>