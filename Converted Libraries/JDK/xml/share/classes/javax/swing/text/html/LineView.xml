<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text.html">
        <import package="java.util.Enumeration"/>
        <import package="java.awt"/>
        <import package="javax.swing"/>
        <import package="javax.swing.border"/>
        <import package="javax.swing.event"/>
        <import package="javax.swing.text"/>
        <class name="LineView" line="8">
            <extends class="ParagraphView"/>
            <javadoc line="8">
                A view implementation to display an unwrapped
                  preformatted line.&lt;p&gt;
                  This subclasses ParagraphView, but this really only contains one
                  Row of text.                
                <author>
                    Timothy Prinzing                    
                </author>
            </javadoc>
            <declaration name="tabBase" type="int" line="16"/>
            <javadoc line="16">
                Last place painted at.                
            </javadoc>
            <javadoc line="20">
                Creates a LineView object.                
                <param>
                    elem the element to wrap in a view                    
                </param>
            </javadoc>
            <method name="LineView" type="constructor" line="24">
                <params>
                    <param name="elem" type="Element"/>
                </params>
            </method>
            <javadoc line="27">
                Preformatted lines are not suppressed if they
                  have only whitespace, so they are always visible.                
            </javadoc>
            <method name="isVisible" type="boolean" line="31"/>
            <javadoc line="34">
                Determines the minimum span for this view along an
                  axis.  The preformatted line should refuse to be
                  sized less than the preferred size.                
                <param>
                    axis may be either &lt;code&gt;View.X_AXIS&lt;/code&gt; or
                      &lt;code&gt;View.Y_AXIS&lt;/code&gt;                    
                </param>
                <return>
                    the minimum span the view can be rendered into                    
                </return>
                <see>
                    View#getPreferredSpan                    
                </see>
            </javadoc>
            <method name="getMinimumSpan" type="float" line="43">
                <params>
                    <param name="axis" type="int"/>
                </params>
            </method>
            <javadoc line="46">
                Gets the resize weight for the specified axis.                
                <param>
                    axis may be either X_AXIS or Y_AXIS                    
                </param>
                <return>
                    the weight                    
                </return>
            </javadoc>
            <method name="getResizeWeight" type="int" line="51">
                <params>
                    <param name="axis" type="int"/>
                </params>
            </method>
            <javadoc line="61">
                Gets the alignment for an axis.                
                <param>
                    axis may be either X_AXIS or Y_AXIS                    
                </param>
                <return>
                    the alignment                    
                </return>
            </javadoc>
            <method name="getAlignment" type="float" line="66">
                <params>
                    <param name="axis" type="int"/>
                </params>
                <scope line="67"/>
            </method>
            <javadoc line="72">
                Lays out the children.  If the layout span has changed,
                  the rows are rebuilt.  The superclass functionality
                  is called after checking and possibly rebuilding the
                  rows.  If the height has changed, the
                  &lt;code&gt;preferenceChanged&lt;/code&gt; method is called
                  on the parent since the vertical preference is
                  rigid.                
                <param>
                    width  the width to lay out against &gt;= 0.  This is
                      the width inside of the inset area.                    
                </param>
                <param>
                    height the height to lay out against &gt;= 0 (not used
                      by paragraph, but used by the superclass).  This
                      is the height inside of the inset area.                    
                </param>
            </javadoc>
            <method name="layout" type="void" line="86">
                <params>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <javadoc line="89">
                Returns the next tab stop position given a reference position.
                  This view implements the tab coordinate system, and calls
                  &lt;code&gt;getTabbedSpan&lt;/code&gt; on the logical children in the process
                  of layout to determine the desired span of the children.  The
                  logical children can delegate their tab expansion upward to
                  the paragraph which knows how to expand tabs.
                  &lt;code&gt;LabelView&lt;/code&gt; is an example of a view that delegates
                  its tab expansion needs upward to the paragraph.
                  &lt;p&gt;
                  This is implemented to try and locate a &lt;code&gt;TabSet&lt;/code&gt;
                  in the paragraph element&apos;s attribute set.  If one can be
                  found, its settings will be used, otherwise a default expansion
                  will be provided.  The base location for for tab expansion
                  is the left inset from the paragraphs most recent allocation
                  (which is what the layout of the children is based upon).                
                <param>
                    x the X reference position                    
                </param>
                <param>
                    tabOffset the position within the text stream
                      that the tab occurred at &gt;= 0.                    
                </param>
                <return>
                    the trailing end of the tab expansion &gt;= 0                    
                </return>
                <see>
                    TabSet                    
                </see>
                <see>
                    TabStop                    
                </see>
                <see>
                    LabelView                    
                </see>
            </javadoc>
            <method name="nextTabStop" type="float" line="113">
                <params>
                    <param name="x" type="float"/>
                    <param name="tabOffset" type="int"/>
                </params>
                <scope line="114"/>
            </method>
            <javadoc line="119">
                Returns the location for the tab.                
            </javadoc>
            <method name="getPreTab" type="float" line="122">
                <params>
                    <param name="x" type="float"/>
                    <param name="tabOffset" type="int"/>
                </params>
                <declaration name="d" type="Document" line="123"/>
                <declaration name="v" type="View" line="124"/>
                <scope line="125">
                    <declaration name="f" type="Font" line="126"/>
                    <declaration name="c" type="Container" line="127"/>
                    <declaration name="fm" type="FontMetrics" line="128"/>
                    <declaration name="width" type="int" line="129"/>
                    <declaration name="tb" type="int" line="130"/>
                </scope>
            </method>
            <javadoc line="135">
                @return number of characters per tab, 8.                
            </javadoc>
            <method name="getCharactersPerTab" type="int" line="138"/>
        </class>
    </source>