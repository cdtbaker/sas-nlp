<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text">
        <import package="java.awt"/>
        <import package="java.util.BitSet"/>
        <import package="java.util.Vector"/>
        <import package="javax.swing.SizeRequirements"/>
        <import package="javax.swing.event.DocumentEvent"/>
        <import package="javax.swing.text.html.HTML"/>
        <class name="TableView" line="35">
            <extends class="BoxView"/>
            <comment line="188">
                                
            </comment>
            <comment line="384">
                boolean shouldTrace() {
                AttributeSet a = getElement().getAttributes();
                Object o = a.getAttribute(HTML.Attribute.ID);
                if ((o != null) &amp;&amp; o.equals(&quot;debug&quot;)) {
                return true;
                }
                return false;
                }                
            </comment>
            <comment line="576">
                ---- variables ----------------------------------------------------                
            </comment>
            <javadoc line="35">
                &lt;p&gt;
                  Implements View interface for a table, that is composed of an
                  element structure where the child elements of the element
                  this view is responsible for represent rows and the child
                  elements of the row elements are cells.  The cell elements can
                  have an arbitrary element structure under them, which will
                  be built with the ViewFactory returned by the getViewFactory
                  method.
                  &lt;pre&gt;
                  &amp;nbsp;  TABLE
                  &amp;nbsp;    ROW
                  &amp;nbsp;      CELL
                  &amp;nbsp;      CELL
                  &amp;nbsp;    ROW
                  &amp;nbsp;      CELL
                  &amp;nbsp;      CELL
                  &lt;/pre&gt;
                  &lt;p&gt;
                  This is implemented as a hierarchy of boxes, the table itself
                  is a vertical box, the rows are horizontal boxes, and the cells
                  are vertical boxes.  The cells are allowed to span multiple
                  columns and rows.  By default, the table can be thought of as
                  being formed over a grid (i.e. somewhat like one would find in
                  gridbag layout), where table cells can request to span more
                  than one grid cell.  The default horizontal span of table cells
                  will be based upon this grid, but can be changed by reimplementing
                  the requested span of the cell (i.e. table cells can have independant
                  spans if desired).                
                <author>
                    Timothy Prinzing                    
                </author>
                <see>
                    View                    
                </see>
            </javadoc>
            <javadoc line="72">
                Constructs a TableView for the given element.                
                <param>
                    elem the element that this view is responsible for                    
                </param>
            </javadoc>
            <method name="TableView" type="constructor" line="77">
                <params>
                    <param name="elem" type="Element"/>
                </params>
            </method>
            <javadoc line="83">
                Creates a new table row.                
                <param>
                    elem an element                    
                </param>
                <return>
                    the row                    
                </return>
            </javadoc>
            <method name="createTableRow" type="TableRow" line="89">
                <params>
                    <param name="elem" type="Element"/>
                </params>
            </method>
            <javadoc line="93">
                @deprecated Table cells can now be any arbitrary
                  View implementation and should be produced by the
                  ViewFactory rather than the table.                
                <param>
                    elem an element                    
                </param>
                <return>
                    the cell                    
                </return>
            </javadoc>
            <method name="createTableCell" type="TableCell" line="102">
                <params>
                    <param name="elem" type="Element"/>
                </params>
            </method>
            <javadoc line="106">
                The number of columns in the table.                
            </javadoc>
            <method name="getColumnCount" type="int" line="109"/>
            <javadoc line="113">
                Fetches the span (width) of the given column.
                  This is used by the nested cells to query the
                  sizes of grid locations outside of themselves.                
            </javadoc>
            <method name="getColumnSpan" type="int" line="118">
                <params>
                    <param name="col" type="int"/>
                </params>
            </method>
            <javadoc line="122">
                The number of rows in the table.                
            </javadoc>
            <method name="getRowCount" type="int" line="125"/>
            <javadoc line="129">
                Fetches the span (height) of the given row.                
            </javadoc>
            <method name="getRowSpan" type="int" line="132">
                <params>
                    <param name="row" type="int"/>
                </params>
                <declaration name="rv" type="View" line="133"/>
                <scope line="134"/>
            </method>
            <method name="getRow" type="TableRow" line="140">
                <params>
                    <param name="row" type="int"/>
                </params>
                <scope line="141"/>
            </method>
            <javadoc line="147">
                Determines the number of columns occupied by
                  the table cell represented by given element.                
            </javadoc>
            <method name="getColumnsOccupied" type="int" line="151">
                <params>
                    <param name="v" type="View"/>
                </params>
                <comment line="152">
                                        
                </comment>
                <comment line="153">
                    PENDING(prinz) this code should be in the html
                     paragraph, but we can&apos;t add api to enable it.                    
                </comment>
                <comment line="161">
                    fall through to one column                    
                </comment>
                <declaration name="a" type="AttributeSet" line="154"/>
                <declaration name="s" type="String" line="155"/>
                <scope line="156">
                    <scope line="157"/>
                    <scope line="159"/>
                </scope>
            </method>
            <javadoc line="167">
                Determines the number of rows occupied by
                  the table cell represented by given element.                
            </javadoc>
            <method name="getRowsOccupied" type="int" line="171">
                <params>
                    <param name="v" type="View"/>
                </params>
                <comment line="172">
                                        
                </comment>
                <comment line="173">
                    PENDING(prinz) this code should be in the html
                     paragraph, but we can&apos;t add api to enable it.                    
                </comment>
                <comment line="181">
                    fall through to one row                    
                </comment>
                <declaration name="a" type="AttributeSet" line="174"/>
                <declaration name="s" type="String" line="175"/>
                <scope line="176">
                    <scope line="177"/>
                    <scope line="179"/>
                </scope>
            </method>
            <method name="invalidateGrid" type="void" line="187"/>
            <method name="forwardUpdate" type="void" line="192">
                <params>
                    <param name="ec" type="DocumentEvent.ElementChange"/>
                    <param name="e" type="DocumentEvent"/>
                    <param name="a" type="Shape"/>
                    <param name="f" type="ViewFactory"/>
                </params>
                <comment line="195">
                    A change in any of the table cells usually effects the whole table,
                     so redraw it all!                    
                </comment>
                <scope line="196">
                    <declaration name="c" type="Component" line="197"/>
                    <scope line="198">
                        <declaration name="alloc" type="Rectangle" line="199"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="206">
                Change the child views.  This is implemented to
                  provide the superclass behavior and invalidate the
                  grid so that rows and columns will be recalculated.                
            </javadoc>
            <method name="replace" type="void" line="211">
                <params>
                    <param name="offset" type="int"/>
                    <param name="length" type="int"/>
                    <param name="views" type="View[]"/>
                </params>
            </method>
            <javadoc line="216">
                Fill in the grid locations that are placeholders
                  for multi-column, multi-row, and missing grid
                  locations.                
            </javadoc>
            <method name="updateGrid" type="void" line="221">
                <comment line="224">
                    determine which views are table rows and clear out
                     grid points marked filled.                    
                </comment>
                <comment line="245">
                    advance to a free column                    
                </comment>
                <comment line="250">
                    fill in the overflow entries for this cell                    
                </comment>
                <comment line="268">
                    setup the column layout/requirements                    
                </comment>
                <scope line="222">
                    <declaration name="n" type="int" line="226"/>
                    <scope line="227">
                        <declaration name="v" type="View" line="228"/>
                        <scope line="229">
                            <declaration name="rv" type="TableRow" line="231"/>
                        </scope>
                    </scope>
                    <declaration name="maxColumns" type="int" line="237"/>
                    <declaration name="nrows" type="int" line="238"/>
                    <scope line="239">
                        <declaration name="rv" type="TableRow" line="240"/>
                        <declaration name="col" type="int" line="241"/>
                        <scope line="242">
                            <declaration name="cv" type="View" line="243"/>
                            <declaration name="rowSpan" type="int" line="246"/>
                            <declaration name="colSpan" type="int" line="247"/>
                            <scope line="248">
                                <declaration name="rowLimit" type="int" line="250"/>
                                <declaration name="colLimit" type="int" line="251"/>
                                <scope line="252">
                                    <scope line="253">
                                        <scope line="254"/>
                                    </scope>
                                </scope>
                                <scope line="259"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="271"/>
                </scope>
            </method>
            <javadoc line="278">
                Mark a grid location as filled in for a cells overflow.                
            </javadoc>
            <method name="addFill" type="void" line="281">
                <params>
                    <param name="row" type="int"/>
                    <param name="col" type="int"/>
                </params>
                <declaration name="rv" type="TableRow" line="282"/>
                <scope line="283"/>
            </method>
            <javadoc line="288">
                Lays out the columns to fit within the given target span.
                  Returns the results through {@code offsets} and {@code spans}.                
                <param>
                    targetSpan the given span for total of all the table
                      columns                    
                </param>
                <param>
                    reqs the requirements desired for each column.  This
                      is the column maximum of the cells minimum, preferred, and
                      maximum requested span                    
                </param>
                <param>
                    spans the return value of how much to allocated to
                      each column                    
                </param>
                <param>
                    offsets the return value of the offset from the
                      origin for each column                    
                </param>
            </javadoc>
            <method name="layoutColumns" type="void" line="303">
                <params>
                    <param name="targetSpan" type="int"/>
                    <param name="offsets" type="int[]"/>
                    <param name="spans" type="int[]"/>
                    <param name="reqs" type="SizeRequirements[]"/>
                </params>
                <comment line="305">
                    allocate using the convenience method on SizeRequirements                    
                </comment>
            </method>
            <javadoc line="309">
                Perform layout for the minor axis of the box (i.e. the
                  axis orthoginal to the axis that it represents).  The results
                  of the layout should be placed in the given arrays which represent
                  the allocations to the children along the minor axis.  This
                  is called by the superclass whenever the layout needs to be
                  updated along the minor axis.
                  &lt;p&gt;
                  This is implemented to call the{@link #layoutColumns layoutColumns} method, and then
                  forward to the superclass to actually carry out the layout
                  of the tables rows.                
                <param>
                    targetSpan the total span given to the view, which
                      whould be used to layout the children.                    
                </param>
                <param>
                    axis the axis being layed out.                    
                </param>
                <param>
                    offsets the offsets from the origin of the view for
                      each of the child views.  This is a return value and is
                      filled in by the implementation of this method.                    
                </param>
                <param>
                    spans the span of each child view.  This is a return
                      value and is filled in by the implementation of this method.                    
                </param>
            </javadoc>
            <method name="layoutMinorAxis" type="void" line="331">
                <params>
                    <param name="targetSpan" type="int"/>
                    <param name="axis" type="int"/>
                    <param name="offsets" type="int[]"/>
                    <param name="spans" type="int[]"/>
                </params>
                <comment line="333">
                    make grid is properly represented                    
                </comment>
                <comment line="336">
                    all of the row layouts are invalid, so mark them that way                    
                </comment>
                <comment line="343">
                    calculate column spans                    
                </comment>
                <comment line="346">
                    continue normal layout                    
                </comment>
                <declaration name="n" type="int" line="336"/>
                <scope line="337">
                    <declaration name="row" type="TableRow" line="338"/>
                </scope>
            </method>
            <javadoc line="349">
                Calculate the requirements for the minor axis.  This is called by
                  the superclass whenever the requirements need to be updated (i.e.
                  a preferenceChanged was messaged through this view).
                  &lt;p&gt;
                  This is implemented to calculate the requirements as the sum of the
                  requirements of the columns.                
            </javadoc>
            <method name="calculateMinorAxisRequirements" type="SizeRequirements" line="357">
                <params>
                    <param name="axis" type="int"/>
                    <param name="r" type="SizeRequirements"/>
                </params>
                <comment line="361">
                    calculate column requirements for each column                    
                </comment>
                <comment line="365">
                    the requirements are the sum of the columns.                    
                </comment>
                <scope line="365"/>
                <declaration name="min" type="long" line="368"/>
                <declaration name="pref" type="long" line="369"/>
                <declaration name="max" type="long" line="370"/>
                <scope line="371"/>
            </method>
            <javadoc line="394">
                Calculate the requirements for each column.  The calculation
                  is done as two passes over the table.  The table cells that
                  occupy a single column are scanned first to determine the
                  maximum of minimum, preferred, and maximum spans along the
                  give axis.  Table cells that span multiple columns are excluded
                  from the first pass.  A second pass is made to determine if
                  the cells that span multiple columns are satisfied.  If the
                  column requirements are not satisified, the needs of the
                  multi-column cell is mixed into the existing column requirements.
                  The calculation of the multi-column distribution is based upon
                  the proportions of the existing column requirements and taking
                  into consideration any constraining maximums.                
            </javadoc>
            <method name="calculateColumnRequirements" type="void" line="408">
                <params>
                    <param name="axis" type="int"/>
                </params>
                <comment line="410">
                    pass 1 - single column cells                    
                </comment>
                <comment line="419">
                    advance to a free column                    
                </comment>
                <comment line="431">
                    pass 2 - multi-column cells                    
                </comment>
                <comment line="439">
                    advance to a free column                    
                </comment>
                <comment line="449">
                    if (shouldTrace()) {
                    System.err.println(&quot;calc:&quot;);
                    for (int i = 0; i &lt; columnRequirements.length; i++) {
                    System.err.println(&quot; &quot; + i + &quot;: &quot; + columnRequirements[i]);
                    }
                    }                    
                </comment>
                <declaration name="hasMultiColumn" type="boolean" line="410"/>
                <declaration name="nrows" type="int" line="411"/>
                <scope line="412">
                    <declaration name="row" type="TableRow" line="413"/>
                    <declaration name="col" type="int" line="414"/>
                    <declaration name="ncells" type="int" line="415"/>
                    <scope line="416">
                        <declaration name="cv" type="View" line="417"/>
                        <declaration name="rowSpan" type="int" line="419"/>
                        <declaration name="colSpan" type="int" line="420"/>
                        <scope line="421"/>
                        <scope line="423"/>
                    </scope>
                </scope>
                <scope line="431">
                    <scope line="432">
                        <declaration name="row" type="TableRow" line="433"/>
                        <declaration name="col" type="int" line="434"/>
                        <declaration name="ncells" type="int" line="435"/>
                        <scope line="436">
                            <declaration name="cv" type="View" line="437"/>
                            <declaration name="colSpan" type="int" line="439"/>
                            <scope line="440"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="458">
                check the requirements of a table cell that spans a single column.                
            </javadoc>
            <method name="checkSingleColumnCell" type="void" line="461">
                <params>
                    <param name="axis" type="int"/>
                    <param name="col" type="int"/>
                    <param name="v" type="View"/>
                </params>
                <declaration name="req" type="SizeRequirements" line="462"/>
            </method>
            <javadoc line="468">
                check the requirements of a table cell that spans multiple
                  columns.                
            </javadoc>
            <method name="checkMultiColumnCell" type="void" line="472">
                <params>
                    <param name="axis" type="int"/>
                    <param name="col" type="int"/>
                    <param name="ncols" type="int"/>
                    <param name="v" type="View"/>
                </params>
                <comment line="474">
                    calculate the totals                    
                </comment>
                <comment line="485">
                    check if the minimum size needs adjustment.                    
                </comment>
                <comment line="488">
                    the columns that this cell spans need adjustment to fit
                     this table cell.... calculate the adjustments.  The
                     maximum for each cell is the maximum of the existing
                     maximum or the amount needed by the cell.                    
                </comment>
                <comment line="503">
                    apply the adjustments                    
                </comment>
                <comment line="512">
                    check if the preferred size needs adjustment.                    
                </comment>
                <comment line="515">
                    the columns that this cell spans need adjustment to fit
                     this table cell.... calculate the adjustments.  The
                     maximum for each cell is the maximum of the existing
                     maximum or the amount needed by the cell.                    
                </comment>
                <comment line="529">
                    apply the adjustments                    
                </comment>
                <declaration name="min" type="long" line="474"/>
                <declaration name="pref" type="long" line="475"/>
                <declaration name="max" type="long" line="476"/>
                <scope line="477">
                    <declaration name="req" type="SizeRequirements" line="478"/>
                </scope>
                <declaration name="cmin" type="int" line="485"/>
                <scope line="486">
                    <declaration name="reqs" type="SizeRequirements[]" line="493"/>
                    <scope line="494">
                        <declaration name="r" type="SizeRequirements" line="495"/>
                    </scope>
                    <declaration name="spans" type="int[]" line="498"/>
                    <declaration name="offsets" type="int[]" line="499"/>
                    <scope line="503">
                        <declaration name="req" type="SizeRequirements" line="504"/>
                    </scope>
                </scope>
                <declaration name="cpref" type="int" line="512"/>
                <scope line="513">
                    <declaration name="reqs" type="SizeRequirements[]" line="520"/>
                    <scope line="521">
                        <declaration name="r" type="SizeRequirements" line="522"/>
                    </scope>
                    <declaration name="spans" type="int[]" line="524"/>
                    <declaration name="offsets" type="int[]" line="525"/>
                    <scope line="529">
                        <declaration name="req" type="SizeRequirements" line="530"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="538">
                Fetches the child view that represents the given position in
                  the model.  This is implemented to walk through the children
                  looking for a range that contains the given position.  In this
                  view the children do not necessarily have a one to one mapping
                  with the child elements.                
                <param>
                    pos  the search position &gt;= 0                    
                </param>
                <param>
                    a  the allocation to the table on entry, and the
                      allocation of the view containing the position on exit                    
                </param>
                <return>
                    the view representing the given position, or
                      &lt;code&gt;null&lt;/code&gt; if there isn&apos;t one                    
                </return>
            </javadoc>
            <method name="getViewAtPosition" type="View" line="551">
                <params>
                    <param name="pos" type="int"/>
                    <param name="a" type="Rectangle"/>
                </params>
                <comment line="559">
                    it&apos;s in this view.                    
                </comment>
                <declaration name="n" type="int" line="552"/>
                <scope line="553">
                    <declaration name="v" type="View" line="554"/>
                    <declaration name="p0" type="int" line="555"/>
                    <declaration name="p1" type="int" line="556"/>
                    <scope line="557">
                        <scope line="559"/>
                    </scope>
                </scope>
                <scope line="565">
                    <declaration name="v" type="View" line="566"/>
                    <scope line="567"/>
                </scope>
            </method>
            <declaration name="columnSpans" type="int[]" line="577"/>
            <declaration name="columnOffsets" type="int[]" line="578"/>
            <declaration name="columnRequirements" type="SizeRequirements[]" line="579"/>
            <declaration name="rows" type="Vector&lt;TableRow&gt;" line="580"/>
            <declaration name="gridValid" type="boolean" line="581"/>
            <declaration name="EMPTY" type="BitSet" line="582"/>
            <class name="TableRow" line="584">
                <extends class="BoxView"/>
                <comment line="152">
                                        
                </comment>
                <comment line="172">
                                        
                </comment>
                <comment line="811">
                    --- GridCell methods -------------------------------------                    
                </comment>
                <javadoc line="584">
                    View of a row in a row-centric table.                    
                </javadoc>
                <javadoc line="589">
                    Constructs a TableView for the given element.                    
                    <param>
                        elem the element that this view is responsible for                        
                    </param>
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <method name="TableRow" type="constructor" line="595">
                    <params>
                        <param name="elem" type="Element"/>
                    </params>
                </method>
                <method name="clearFilledColumns" type="void" line="600"/>
                <method name="fillColumn" type="void" line="604">
                    <params>
                        <param name="col" type="int"/>
                    </params>
                </method>
                <method name="isFilled" type="boolean" line="608">
                    <params>
                        <param name="col" type="int"/>
                    </params>
                </method>
                <javadoc line="612">
                    get location in the overall set of rows                    
                </javadoc>
                <method name="getRow" type="int" line="613"/>
                <javadoc line="617">
                    set location in the overall set of rows, this is
                      set by the TableView.updateGrid() method.                    
                </javadoc>
                <method name="setRow" type="void" line="621">
                    <params>
                        <param name="row" type="int"/>
                    </params>
                </method>
                <javadoc line="625">
                    The number of columns present in this row.                    
                </javadoc>
                <method name="getColumnCount" type="int" line="628">
                    <declaration name="nfill" type="int" line="629"/>
                    <declaration name="n" type="int" line="630"/>
                    <scope line="631">
                        <scope line="632"/>
                    </scope>
                </method>
                <javadoc line="639">
                    Change the child views.  This is implemented to
                      provide the superclass behavior and invalidate the
                      grid so that rows and columns will be recalculated.                    
                </javadoc>
                <method name="replace" type="void" line="644">
                    <params>
                        <param name="offset" type="int"/>
                        <param name="length" type="int"/>
                        <param name="views" type="View[]"/>
                    </params>
                </method>
                <javadoc line="649">
                    Perform layout for the major axis of the box (i.e. the
                      axis that it represents).  The results of the layout should
                      be placed in the given arrays which represent the allocations
                      to the children along the major axis.
                      &lt;p&gt;
                      This is re-implemented to give each child the span of the column
                      width for the table, and to give cells that span multiple columns
                      the multi-column span.                    
                    <param>
                        targetSpan the total span given to the view, which
                          whould be used to layout the children.                        
                    </param>
                    <param>
                        axis the axis being layed out.                        
                    </param>
                    <param>
                        offsets the offsets from the origin of the view for
                          each of the child views.  This is a return value and is
                          filled in by the implementation of this method.                        
                    </param>
                    <param>
                        spans the span of each child view.  This is a return
                          value and is filled in by the implementation of this method.                        
                    </param>
                </javadoc>
                <method name="layoutMajorAxis" type="void" line="668">
                    <params>
                        <param name="targetSpan" type="int"/>
                        <param name="axis" type="int"/>
                        <param name="offsets" type="int[]"/>
                        <param name="spans" type="int[]"/>
                    </params>
                    <comment line="674">
                        advance to a free column                        
                    </comment>
                    <comment line="681">
                        Because the table may be only partially formed, some
                         of the columns may not yet exist.  Therefore we check
                         the bounds.                        
                    </comment>
                    <declaration name="col" type="int" line="669"/>
                    <declaration name="ncells" type="int" line="670"/>
                    <scope line="671">
                        <declaration name="cv" type="View" line="672"/>
                        <declaration name="colSpan" type="int" line="674"/>
                        <scope line="677">
                            <declaration name="n" type="int" line="678"/>
                            <scope line="679">
                                <scope line="683"/>
                            </scope>
                        </scope>
                    </scope>
                </method>
                <javadoc line="692">
                    Perform layout for the minor axis of the box (i.e. the
                      axis orthoginal to the axis that it represents).  The results
                      of the layout should be placed in the given arrays which represent
                      the allocations to the children along the minor axis.  This
                      is called by the superclass whenever the layout needs to be
                      updated along the minor axis.
                      &lt;p&gt;
                      This is implemented to delegate to the superclass, then adjust
                      the span for any cell that spans multiple rows.                    
                    <param>
                        targetSpan the total span given to the view, which
                          whould be used to layout the children.                        
                    </param>
                    <param>
                        axis the axis being layed out.                        
                    </param>
                    <param>
                        offsets the offsets from the origin of the view for
                          each of the child views.  This is a return value and is
                          filled in by the implementation of this method.                        
                    </param>
                    <param>
                        spans the span of each child view.  This is a return
                          value and is filled in by the implementation of this method.                        
                    </param>
                </javadoc>
                <method name="layoutMinorAxis" type="void" line="712">
                    <params>
                        <param name="targetSpan" type="int"/>
                        <param name="axis" type="int"/>
                        <param name="offsets" type="int[]"/>
                        <param name="spans" type="int[]"/>
                    </params>
                    <comment line="719">
                        advance to a free column                        
                    </comment>
                    <comment line="724">
                        test bounds of each row because it may not exist
                         either because of error or because the table isn&apos;t
                         fully loaded yet.                        
                    </comment>
                    <declaration name="col" type="int" line="714"/>
                    <declaration name="ncells" type="int" line="715"/>
                    <scope line="716">
                        <declaration name="cv" type="View" line="717"/>
                        <declaration name="colSpan" type="int" line="719"/>
                        <declaration name="rowSpan" type="int" line="720"/>
                        <scope line="721">
                            <scope line="722">
                                <declaration name="row" type="int" line="726"/>
                                <scope line="727">
                                    <declaration name="span" type="int" line="728"/>
                                </scope>
                            </scope>
                        </scope>
                        <scope line="733"/>
                    </scope>
                </method>
                <javadoc line="739">
                    Determines the resizability of the view along the
                      given axis.  A value of 0 or less is not resizable.                    
                    <param>
                        axis may be either View.X_AXIS or View.Y_AXIS                        
                    </param>
                    <return>
                        the resize weight                        
                    </return>
                    <exception>
                        IllegalArgumentException for an invalid axis                        
                    </exception>
                </javadoc>
                <method name="getResizeWeight" type="int" line="747">
                    <params>
                        <param name="axis" type="int"/>
                    </params>
                </method>
                <javadoc line="751">
                    Fetches the child view that represents the given position in
                      the model.  This is implemented to walk through the children
                      looking for a range that contains the given position.  In this
                      view the children do not necessarily have a one to one mapping
                      with the child elements.                    
                    <param>
                        pos  the search position &gt;= 0                        
                    </param>
                    <param>
                        a  the allocation to the table on entry, and the
                          allocation of the view containing the position on exit                        
                    </param>
                    <return>
                        the view representing the given position, or
                          &lt;code&gt;null&lt;/code&gt; if there isn&apos;t one                        
                    </return>
                </javadoc>
                <method name="getViewAtPosition" type="View" line="764">
                    <params>
                        <param name="pos" type="int"/>
                        <param name="a" type="Rectangle"/>
                    </params>
                    <comment line="772">
                        it&apos;s in this view.                        
                    </comment>
                    <declaration name="n" type="int" line="765"/>
                    <scope line="766">
                        <declaration name="v" type="View" line="767"/>
                        <declaration name="p0" type="int" line="768"/>
                        <declaration name="p1" type="int" line="769"/>
                        <scope line="770">
                            <scope line="772"/>
                        </scope>
                    </scope>
                    <scope line="778">
                        <declaration name="v" type="View" line="779"/>
                        <scope line="780"/>
                    </scope>
                </method>
                <declaration name="fillColumns" type="BitSet" line="788"/>
                <javadoc line="788">
                    columns filled by multi-column or multi-row cells                    
                </javadoc>
                <declaration name="row" type="int" line="790"/>
                <javadoc line="790">
                    the row within the overall grid                    
                </javadoc>
            </class>
            <class name="TableCell" line="794">
                <extends class="BoxView"/>
                <comment line="152">
                                        
                </comment>
                <comment line="172">
                                        
                </comment>
                <comment line="811">
                    --- GridCell methods -------------------------------------                    
                </comment>
                <implements interface="GridCell"/>
                <javadoc line="794">
                    @deprecated  A table cell can now be any View implementation.                    
                </javadoc>
                <javadoc line="800">
                    Constructs a TableCell for the given element.                    
                    <param>
                        elem the element that this view is responsible for                        
                    </param>
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <method name="TableCell" type="constructor" line="806">
                    <params>
                        <param name="elem" type="Element"/>
                    </params>
                </method>
                <javadoc line="812">
                    Gets the number of columns this cell spans (e.g. the
                      grid width).                    
                    <return>
                        the number of columns                        
                    </return>
                </javadoc>
                <method name="getColumnCount" type="int" line="818"/>
                <javadoc line="822">
                    Gets the number of rows this cell spans (that is, the
                      grid height).                    
                    <return>
                        the number of rows                        
                    </return>
                </javadoc>
                <method name="getRowCount" type="int" line="828"/>
                <javadoc line="833">
                    Sets the grid location.                    
                    <param>
                        row the row &gt;= 0                        
                    </param>
                    <param>
                        col the column &gt;= 0                        
                    </param>
                </javadoc>
                <method name="setGridLocation" type="void" line="839">
                    <params>
                        <param name="row" type="int"/>
                        <param name="col" type="int"/>
                    </params>
                </method>
                <javadoc line="844">
                    Gets the row of the grid location                    
                </javadoc>
                <method name="getGridRow" type="int" line="847"/>
                <javadoc line="851">
                    Gets the column of the grid location                    
                </javadoc>
                <method name="getGridColumn" type="int" line="854"/>
                <declaration name="row" type="int" line="858"/>
                <declaration name="col" type="int" line="859"/>
            </class>
            <interface name="GridCell">
                <comment line="152">
                                        
                </comment>
                <comment line="172">
                                        
                </comment>
                <comment line="811">
                    --- GridCell methods -------------------------------------                    
                </comment>
                <javadoc line="862">
                    &lt;em&gt;
                      THIS IS NO LONGER USED, AND WILL BE REMOVED IN THE
                      NEXT RELEASE.  THE JCK SIGNATURE TEST THINKS THIS INTERFACE
                      SHOULD EXIST
                      &lt;/em&gt;                    
                </javadoc>
                <method name="setGridLocation" type="void" line="871"/>
                <javadoc line="871">
                    Sets the grid location.                    
                    <param>
                        row the row &gt;= 0                        
                    </param>
                    <param>
                        col the column &gt;= 0                        
                    </param>
                </javadoc>
                <method name="getGridRow" type="int" line="879"/>
                <javadoc line="879">
                    Gets the row of the grid location                    
                </javadoc>
                <method name="getGridColumn" type="int" line="884"/>
                <javadoc line="884">
                    Gets the column of the grid location                    
                </javadoc>
                <method name="getColumnCount" type="int" line="889"/>
                <javadoc line="889">
                    Gets the number of columns this cell spans (e.g. the
                      grid width).                    
                    <return>
                        the number of columns                        
                    </return>
                </javadoc>
                <method name="getRowCount" type="int" line="897"/>
                <javadoc line="897">
                    Gets the number of rows this cell spans (that is, the
                      grid height).                    
                    <return>
                        the number of rows                        
                    </return>
                </javadoc>
            </interface>
        </class>
    </source>