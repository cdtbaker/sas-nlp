<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text">
        <import package="java.util.Enumeration"/>
        <interface name="AttributeSet">
            <javadoc line="29">
                A collection of unique attributes.  This is a read-only,
                  immutable interface.  An attribute is basically a key and
                  a value assigned to the key.  The collection may represent
                  something like a style run, a logical style, etc.  These
                  are generally used to describe features that will contribute
                  to some graphical representation such as a font.  The
                  set of possible keys is unbounded and can be anything.
                  Typically View implementations will respond to attribute
                  definitions and render something to represent the attributes.
                  &lt;p&gt;
                  Attributes can potentially resolve in a hierarchy.  If a
                  key doesn&apos;t resolve locally, and a resolving parent
                  exists, the key will be resolved through the parent.                
                <author>
                    Timothy Prinzing                    
                </author>
                <see>
                    MutableAttributeSet                    
                </see>
            </javadoc>
            <interface name="FontAttribute">
                <javadoc line="49">
                    This interface is the type signature that is expected
                      to be present on any attribute key that contributes to
                      the determination of what font to use to render some
                      text.  This is not considered to be a closed set, the
                      definition can change across version of the platform and can
                      be amended by additional user added entries that
                      correspond to logical settings that are specific to
                      some type of content.                    
                </javadoc>
            </interface>
            <interface name="ColorAttribute">
                <javadoc line="62">
                    This interface is the type signature that is expected
                      to be present on any attribute key that contributes to
                      presentation of color.                    
                </javadoc>
            </interface>
            <interface name="CharacterAttribute">
                <javadoc line="70">
                    This interface is the type signature that is expected
                      to be present on any attribute key that contributes to
                      character level presentation.  This would be any attribute
                      that applies to a so-called &lt;term&gt;run&lt;/term&gt; of
                      style.                    
                </javadoc>
            </interface>
            <interface name="ParagraphAttribute">
                <javadoc line="80">
                    This interface is the type signature that is expected
                      to be present on any attribute key that contributes to
                      the paragraph level presentation.                    
                </javadoc>
            </interface>
            <method name="getAttributeCount" type="int" line="88"/>
            <javadoc line="88">
                Returns the number of attributes that are defined locally in this set.
                  Attributes that are defined in the parent set are not included.                
                <return>
                    the number of attributes &gt;= 0                    
                </return>
            </javadoc>
            <method name="isDefined" type="boolean" line="96"/>
            <javadoc line="96">
                Checks whether the named attribute has a value specified in
                  the set without resolving through another attribute
                  set.                
                <param>
                    attrName the attribute name                    
                </param>
                <return>
                    true if the attribute has a value specified                    
                </return>
            </javadoc>
            <method name="isEqual" type="boolean" line="106"/>
            <javadoc line="106">
                Determines if the two attribute sets are equivalent.                
                <param>
                    attr an attribute set                    
                </param>
                <return>
                    true if the sets are equivalent                    
                </return>
            </javadoc>
            <method name="copyAttributes" type="AttributeSet" line="114"/>
            <javadoc line="114">
                Returns an attribute set that is guaranteed not
                  to change over time.                
                <return>
                    a copy of the attribute set                    
                </return>
            </javadoc>
            <method name="getAttribute" type="Object" line="122"/>
            <javadoc line="122">
                Fetches the value of the given attribute. If the value is not found
                  locally, the search is continued upward through the resolving
                  parent (if one exists) until the value is either
                  found or there are no more parents.  If the value is not found,
                  null is returned.                
                <param>
                    key the non-null key of the attribute binding                    
                </param>
                <return>
                    the value of the attribute, or {@code null} if not found                    
                </return>
            </javadoc>
            <method name="getAttributeNames" type="Enumeration<?>" line="134"/>
            <javadoc line="134">
                Returns an enumeration over the names of the attributes that are
                  defined locally in the set. Names of attributes defined in the
                  resolving parent, if any, are not included. The values of the
                  &lt;code&gt;Enumeration&lt;/code&gt; may be anything and are not constrained to
                  a particular &lt;code&gt;Object&lt;/code&gt; type.
                  &lt;p&gt;
                  This method never returns {@code null}. For a set with no attributes, it
                  returns an empty {@code Enumeration}.                
                <return>
                    the names                    
                </return>
            </javadoc>
            <method name="containsAttribute" type="boolean" line="148"/>
            <javadoc line="148">
                Returns {@code true} if this set defines an attribute with the same
                  name and an equal value. If such an attribute is not found locally,
                  it is searched through in the resolving parent hierarchy.                
                <param>
                    name the non-null attribute name                    
                </param>
                <param>
                    value the value                    
                </param>
                <return>
                    {@code true} if the set defines the attribute with an
                      equal value, either locally or through its resolving parent                    
                </return>
                <throws>
                    NullPointerException if either {@code name} or{@code value} is {@code null}                    
                </throws>
            </javadoc>
            <method name="containsAttributes" type="boolean" line="162"/>
            <javadoc line="162">
                Returns {@code true} if this set defines all the attributes from the
                  given set with equal values. If an attribute is not found locally,
                  it is searched through in the resolving parent hierarchy.                
                <param>
                    attributes the set of attributes to check against                    
                </param>
                <return>
                    {@code true} if this set defines all the attributes with equal
                      values, either locally or through its resolving parent                    
                </return>
                <throws>
                    NullPointerException if {@code attributes} is {@code null}                    
                </throws>
            </javadoc>
            <method name="getResolveParent" type="AttributeSet" line="174"/>
            <javadoc line="174">
                Gets the resolving parent.                
                <return>
                    the parent                    
                </return>
            </javadoc>
            <declaration name="NameAttribute" type="Object" line="181"/>
            <javadoc line="181">
                Attribute name used to name the collection of
                  attributes.                
            </javadoc>
            <declaration name="ResolveAttribute" type="Object" line="187"/>
            <javadoc line="187">
                Attribute name used to identify the resolving parent
                  set of attributes, if one is defined.                
            </javadoc>
        </interface>
    </source>