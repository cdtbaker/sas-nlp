<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text.html">
        <import package="java.net"/>
        <import package="java.io"/>
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="java.util"/>
        <import package="javax.swing"/>
        <import package="javax.swing.event"/>
        <import package="javax.swing.text"/>
        <class name="FormView" line="36">
            <extends class="ComponentView"/>
            <comment line="556">
                The following methods provide functionality required to
                 iterate over a the elements of the form and in the case
                 of a form submission, extract the data from each model
                 that is associated with each form element, and in the
                 case of reset, reinitialize the each model to its
                 initial state.                
            </comment>
            <implements interface="ActionListener"/>
            <javadoc line="36">
                Component decorator that implements the view interface
                  for form elements, &amp;lt;input&amp;gt;, &amp;lt;textarea&amp;gt;,
                  and &amp;lt;select&amp;gt;.  The model for the component is stored
                  as an attribute of the the element (using StyleConstants.ModelAttribute),
                  and is used to build the component of the view.  The type
                  of the model is assumed to of the type that would be set by
                  &lt;code&gt;HTMLDocument.HTMLReader.FormAction&lt;/code&gt;.  If there are
                  multiple views mapped over the document, they will share the
                  embedded component models.
                  &lt;p&gt;
                  The following table shows what components get built
                  by this view.
                  &lt;table summary=&quot;shows what components get built by this view&quot;&gt;
                  &lt;tr&gt;
                  &lt;th&gt;Element Type&lt;/th&gt;
                  &lt;th&gt;Component built&lt;/th&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;input, type button&lt;/td&gt;
                  &lt;td&gt;JButton&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;input, type checkbox&lt;/td&gt;
                  &lt;td&gt;JCheckBox&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;input, type image&lt;/td&gt;
                  &lt;td&gt;JButton&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;input, type password&lt;/td&gt;
                  &lt;td&gt;JPasswordField&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;input, type radio&lt;/td&gt;
                  &lt;td&gt;JRadioButton&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;input, type reset&lt;/td&gt;
                  &lt;td&gt;JButton&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;input, type submit&lt;/td&gt;
                  &lt;td&gt;JButton&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;input, type text&lt;/td&gt;
                  &lt;td&gt;JTextField&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;select, size &amp;gt; 1 or multiple attribute defined&lt;/td&gt;
                  &lt;td&gt;JList in a JScrollPane&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;select, size unspecified or 1&lt;/td&gt;
                  &lt;td&gt;JComboBox&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;textarea&lt;/td&gt;
                  &lt;td&gt;JTextArea in a JScrollPane&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;input, type file&lt;/td&gt;
                  &lt;td&gt;JTextField&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;                
                <author>
                    Timothy Prinzing                    
                </author>
                <author>
                    Sunita Mani                    
                </author>
            </javadoc>
            <declaration name="SUBMIT" type="String" line="109"/>
            <javadoc line="109">
                If a value attribute is not specified for a FORM input element
                  of type &quot;submit&quot;, then this default string is used.                
                <deprecated>
                    As of 1.3, value now comes from UIManager property
                      FormView.submitButtonText                    
                </deprecated>
            </javadoc>
            <declaration name="RESET" type="String" line="118"/>
            <javadoc line="118">
                If a value attribute is not specified for a FORM input element
                  of type &quot;reset&quot;, then this default string is used.                
                <deprecated>
                    As of 1.3, value comes from UIManager UIManager property
                      FormView.resetButtonText                    
                </deprecated>
            </javadoc>
            <declaration name="PostDataProperty" type="String" line="128"/>
            <javadoc line="128">
                Document attribute name for storing POST data. JEditorPane.getPostData()
                  uses the same name, should be kept in sync.                
            </javadoc>
            <declaration name="maxIsPreferred" type="short" line="134"/>
            <javadoc line="134">
                Used to indicate if the maximum span should be the same as the
                  preferred span. This is used so that the Component&apos;s size doesn&apos;t
                  change if there is extra room on a line. The first bit is used for
                  the X direction, and the second for the y direction.                
            </javadoc>
            <javadoc line="142">
                Creates a new FormView object.                
                <param>
                    elem the element to decorate                    
                </param>
            </javadoc>
            <method name="FormView" type="constructor" line="147">
                <params>
                    <param name="elem" type="Element"/>
                </params>
            </method>
            <javadoc line="151">
                Create the component.  This is basically a
                  big switch statement based upon the tag type
                  and html attributes of the associated element.                
            </javadoc>
            <method name="createComponent" type="Component" line="156">
                <declaration name="attr" type="AttributeSet" line="157"/>
                <declaration name="t" type="HTML.Tag" line="158"/>
                <declaration name="c" type="JComponent" line="160"/>
                <declaration name="model" type="Object" line="161"/>
                <scope line="162"/>
                <scope line="164">
                    <scope line="166">
                        <declaration name="list" type="JList" line="168"/>
                        <declaration name="size" type="int" line="169"/>
                    </scope>
                    <scope line="175"/>
                </scope>
                <scope line="179">
                    <declaration name="area" type="JTextArea" line="180"/>
                    <declaration name="rows" type="int" line="181"/>
                    <declaration name="cols" type="int" line="185"/>
                </scope>
                <scope line="195"/>
            </method>
            <javadoc line="202">
                Creates a component for an &amp;lt;INPUT&amp;gt; element based on the
                  value of the &quot;type&quot; attribute.                
                <param>
                    set of attributes associated with the &lt;INPUT&gt; element.                    
                </param>
                <param>
                    model the value of the StyleConstants.ModelAttribute                    
                </param>
                <return>
                    the component.                    
                </return>
            </javadoc>
            <method name="createInputComponent" type="JComponent" line="210">
                <params>
                    <param name="attr" type="AttributeSet"/>
                    <param name="model" type="Object"/>
                </params>
                <declaration name="c" type="JComponent" line="211"/>
                <declaration name="type" type="String" line="212"/>
                <scope line="214">
                    <declaration name="value" type="String" line="215"/>
                    <scope line="217">
                        <scope line="218"/>
                        <scope line="220"/>
                    </scope>
                    <declaration name="button" type="JButton" line="224"/>
                    <scope line="225"/>
                </scope>
                <scope line="231">
                    <declaration name="srcAtt" type="String" line="232"/>
                    <declaration name="button" type="JButton" line="233"/>
                    <scope line="234">
                        <declaration name="base" type="URL" line="235"/>
                        <declaration name="srcURL" type="URL" line="236"/>
                        <declaration name="icon" type="Icon" line="237"/>
                    </scope>
                    <scope line="239"/>
                    <scope line="242"/>
                </scope>
                <scope line="248">
                    <scope line="250"/>
                </scope>
                <scope line="254">
                    <scope line="256"/>
                </scope>
                <scope line="260">
                    <declaration name="size" type="int" line="261"/>
                    <declaration name="field" type="JTextField" line="264"/>
                    <scope line="265"/>
                    <scope line="269"/>
                    <scope line="274"/>
                </scope>
                <scope line="279">
                    <declaration name="field" type="JPasswordField" line="280"/>
                    <scope line="282"/>
                    <declaration name="size" type="int" line="285"/>
                </scope>
                <scope line="291">
                    <declaration name="field" type="JTextField" line="292"/>
                    <scope line="293"/>
                    <declaration name="size" type="int" line="296"/>
                    <declaration name="browseButton" type="JButton" line="299"/>
                    <declaration name="box" type="Box" line="301"/>
                </scope>
            </method>
            <javadoc line="314">
                Determines the maximum span for this view along an
                  axis. For certain components, the maximum and preferred span are the
                  same. For others this will return the value
                  returned by Component.getMaximumSize along the
                  axis of interest.                
                <param>
                    axis may be either View.X_AXIS or View.Y_AXIS                    
                </param>
                <return>
                    the span the view would like to be rendered into >= 0.
                      Typically the view is told to render into the span
                      that is returned, although there is no guarantee.
                      The parent may choose to resize or break the view.                    
                </return>
                <exception>
                    IllegalArgumentException for an invalid axis                    
                </exception>
            </javadoc>
            <method name="getMaximumSpan" type="float" line="328">
                <params>
                    <param name="axis" type="int"/>
                </params>
                <scope line="331"/>
                <scope line="337"/>
            </method>
            <javadoc line="349">
                Responsible for processeing the ActionEvent.
                  If the element associated with the FormView,
                  has a type of &quot;submit&quot;, &quot;reset&quot;, &quot;text&quot; or &quot;password&quot;
                  then the action is processed.  In the case of a &quot;submit&quot;
                  the form is submitted.  In the case of a &quot;reset&quot;
                  the form is reset to its original state.
                  In the case of &quot;text&quot; or &quot;password&quot;, if the
                  element is the last one of type &quot;text&quot; or &quot;password&quot;,
                  the form is submitted.  Otherwise, focus is transferred
                  to the next component in the form.                
                <param>
                    evt the ActionEvent.                    
                </param>
            </javadoc>
            <method name="actionPerformed" type="void" line="363">
                <params>
                    <param name="evt" type="ActionEvent"/>
                </params>
                <declaration name="element" type="Element" line="364"/>
                <declaration name="dataBuffer" type="StringBuilder" line="365"/>
                <declaration name="doc" type="HTMLDocument" line="366"/>
                <declaration name="attr" type="AttributeSet" line="367"/>
                <declaration name="type" type="String" line="369"/>
                <scope line="371"/>
                <scope line="374"/>
                <scope line="376">
                    <scope line="377"/>
                    <scope line="380"/>
                </scope>
            </method>
            <javadoc line="387">
                This method is responsible for submitting the form data.
                  A thread is forked to undertake the submission.                
            </javadoc>
            <method name="submitData" type="void" line="391">
                <params>
                    <param name="data" type="String"/>
                </params>
                <comment line="440">
                    setPage() may take significant time so schedule it to run later.                    
                </comment>
                <declaration name="form" type="Element" line="392"/>
                <declaration name="attrs" type="AttributeSet" line="393"/>
                <declaration name="doc" type="HTMLDocument" line="394"/>
                <declaration name="base" type="URL" line="395"/>
                <declaration name="target" type="String" line="397"/>
                <scope line="398"/>
                <declaration name="method" type="String" line="402"/>
                <scope line="403"/>
                <declaration name="isPostMethod" type="boolean" line="407"/>
                <scope line="408"/>
                <declaration name="action" type="String" line="412"/>
                <declaration name="actionURL" type="URL" line="413"/>
                <scope line="414">
                    <scope line="419">
                        <declaration name="query" type="String" line="420"/>
                    </scope>
                </scope>
                <scope line="423"/>
                <declaration name="c" type="JEditorPane" line="426"/>
                <declaration name="kit" type="HTMLEditorKit" line="427"/>
                <declaration name="formEvent" type="FormSubmitEvent" line="429"/>
                <scope line="430">
                    <declaration name="methodType" type="FormSubmitEvent.MethodType" line="431"/>
                </scope>
                <declaration name="fse" type="FormSubmitEvent" line="440"/>
                <declaration name="url" type="URL" line="441"/>
                <anonymous_class line="442">
                    <method name="run" type="void" line="443">
                        <scope line="444"/>
                        <scope line="446">
                            <scope line="447"/>
                            <scope line="449"/>
                        </scope>
                    </method>
                </anonymous_class>
            </method>
            <method name="storePostData" type="void" line="457">
                <params>
                    <param name="doc" type="HTMLDocument"/>
                    <param name="target" type="String"/>
                    <param name="data" type="String"/>
                </params>
                <comment line="460">
                    POST data is stored into the document property named by constant
                     PostDataProperty from where it is later retrieved by method
                     JEditorPane.getPostData().  If the current document is in a frame,
                     the data is initially put into the toplevel (frameset) document
                     property (named &lt;PostDataProperty&gt;.&lt;Target frame name&gt;).  It is the
                     responsibility of FrameView which updates the target frame
                     to move data from the frameset document property into the frame
                     document property.                    
                </comment>
                <comment line="474">
                    find the top-most JEditorPane holding the frameset view.                    
                </comment>
                <declaration name="propDoc" type="Document" line="469"/>
                <declaration name="propName" type="String" line="470"/>
                <scope line="472">
                    <declaration name="p" type="FrameView.FrameEditorPane" line="474"/>
                    <declaration name="v" type="FrameView" line="476"/>
                    <declaration name="c" type="JEditorPane" line="477"/>
                    <scope line="478"/>
                </scope>
            </method>
            <class name="MouseEventListener" line="487">
                <extends class="MouseAdapter"/>
                <javadoc line="487">
                    MouseEventListener class to handle form submissions when
                      an input with type equal to image is clicked on.
                      A MouseListener is necessary since along with the image
                      data the coordinates associated with the mouse click
                      need to be submitted.                    
                </javadoc>
                <method name="mouseReleased" type="void" line="496">
                    <params>
                        <param name="evt" type="MouseEvent"/>
                    </params>
                    <declaration name="imageData" type="String" line="497"/>
                </method>
            </class>
            <javadoc line="502">
                This method is called to submit a form in response
                  to a click on an image -- an &amp;lt;INPUT&amp;gt; form
                  element of type &quot;image&quot;.                
                <param>
                    imageData the mouse click coordinates.                    
                </param>
            </javadoc>
            <method name="imageSubmit" type="void" line="509">
                <params>
                    <param name="imageData" type="String"/>
                </params>
                <declaration name="dataBuffer" type="StringBuilder" line="511"/>
                <declaration name="elem" type="Element" line="512"/>
                <declaration name="hdoc" type="HTMLDocument" line="513"/>
                <scope line="515"/>
            </method>
            <javadoc line="523">
                Extracts the value of the name attribute
                  associated with the input element of type
                  image.  If name is defined it is encoded using
                  the URLEncoder.encode() method and the
                  image data is returned in the following format:
                  name + &quot;.x&quot; +&quot;=&quot;+ x +&quot;&amp;&quot;+ name +&quot;.y&quot;+&quot;=&quot;+ y
                  otherwise,
                  &quot;x=&quot;+ x +&quot;&amp;y=&quot;+ y                
                <param>
                    point associated with the mouse click.                    
                </param>
                <return>
                    the image data.                    
                </return>
            </javadoc>
            <method name="getImageData" type="String" line="536">
                <params>
                    <param name="point" type="Point"/>
                </params>
                <declaration name="mouseCoords" type="String" line="538"/>
                <declaration name="sep" type="int" line="539"/>
                <declaration name="x" type="String" line="540"/>
                <declaration name="y" type="String" line="541"/>
                <declaration name="name" type="String" line="542"/>
                <declaration name="data" type="String" line="544"/>
                <scope line="545"/>
                <scope line="547"/>
            </method>
            <javadoc line="565">
                Returns the Element representing the &lt;code&gt;FORM&lt;/code&gt;.                
            </javadoc>
            <method name="getFormElement" type="Element" line="568">
                <declaration name="elem" type="Element" line="569"/>
                <scope line="570">
                    <scope line="572"/>
                </scope>
            </method>
            <javadoc line="580">
                Iterates over the
                  element hierarchy, extracting data from the
                  models associated with the relevant form elements.
                  &quot;Relevant&quot; means the form elements that are part
                  of the same form whose element triggered the submit
                  action.                
                <param>
                    buffer        the buffer that contains that data to submit                    
                </param>
                <param>
                    targetElement the element that triggered the
                      form submission                    
                </param>
            </javadoc>
            <method name="getFormData" type="void" line="592">
                <params>
                    <param name="buffer" type="StringBuilder"/>
                </params>
                <comment line="606">
                    do nothing - this submit isnt the trigger                    
                </comment>
                <comment line="608">
                    images only result in data if they triggered
                     the submit and they require that the mouse click
                     coords be appended to the data.  Hence its
                     processing is handled by the view.                    
                </comment>
                <declaration name="formE" type="Element" line="593"/>
                <scope line="594">
                    <declaration name="it" type="ElementIterator" line="595"/>
                    <declaration name="next" type="Element" line="596"/>
                    <scope line="598">
                        <scope line="599">
                            <declaration name="type" type="String" line="600"/>
                            <scope line="604"/>
                            <scope line="606"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="618">
                Loads the data
                  associated with the element into the buffer.
                  The format in which data is appended depends
                  on the type of the form element.  Essentially
                  data is loaded in name/value pairs.                
            </javadoc>
            <method name="loadElementDataIntoBuffer" type="void" line="626">
                <params>
                    <param name="elem" type="Element"/>
                    <param name="buffer" type="StringBuilder"/>
                </params>
                <declaration name="attr" type="AttributeSet" line="628"/>
                <declaration name="name" type="String" line="629"/>
                <scope line="630"/>
                <declaration name="value" type="String" line="633"/>
                <declaration name="tag" type="HTML.Tag" line="634"/>
                <scope line="637"/>
                <scope line="639"/>
                <scope line="641"/>
                <scope line="645"/>
            </method>
            <javadoc line="651">
                Returns the data associated with an &amp;lt;INPUT&amp;gt; form
                  element.  The value of &quot;type&quot; attributes is
                  used to determine the type of the model associated
                  with the element and then the relevant data is
                  extracted.                
            </javadoc>
            <method name="getInputElementData" type="String" line="658">
                <params>
                    <param name="attr" type="AttributeSet"/>
                </params>
                <declaration name="model" type="Object" line="660"/>
                <declaration name="type" type="String" line="661"/>
                <declaration name="value" type="String" line="662"/>
                <scope line="664">
                    <declaration name="doc" type="Document" line="665"/>
                    <scope line="666"/>
                    <scope line="668"/>
                </scope>
                <scope line="671">
                    <scope line="673"/>
                </scope>
                <scope line="676">
                    <declaration name="m" type="ButtonModel" line="677"/>
                    <scope line="678">
                        <scope line="680"/>
                    </scope>
                </scope>
                <scope line="684">
                    <declaration name="doc" type="Document" line="685"/>
                    <declaration name="path" type="String" line="686"/>
                    <scope line="688"/>
                    <scope line="690"/>
                    <scope line="693"/>
                </scope>
            </method>
            <javadoc line="700">
                Returns the data associated with the &amp;lt;TEXTAREA&amp;gt; form
                  element.  This is done by getting the text stored in the
                  Document model.                
            </javadoc>
            <method name="getTextAreaData" type="String" line="705">
                <params>
                    <param name="attr" type="AttributeSet"/>
                </params>
                <declaration name="doc" type="Document" line="706"/>
                <scope line="707"/>
                <scope line="709"/>
            </method>
            <javadoc line="715">
                Loads the buffer with the data associated with the Select
                  form element.  Basically, only items that are selected
                  and have their name attribute set are added to the buffer.                
            </javadoc>
            <method name="loadSelectData" type="void" line="720">
                <params>
                    <param name="attr" type="AttributeSet"/>
                    <param name="buffer" type="StringBuilder"/>
                </params>
                <declaration name="name" type="String" line="722"/>
                <scope line="723"/>
                <declaration name="m" type="Object" line="726"/>
                <scope line="727">
                    <declaration name="model" type="OptionListModel" line="728"/>
                    <scope line="730">
                        <scope line="731">
                            <declaration name="option" type="Option" line="732"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="736">
                    <declaration name="model" type="ComboBoxModel" line="737"/>
                    <declaration name="option" type="Option" line="738"/>
                    <scope line="739"/>
                </scope>
            </method>
            <javadoc line="745">
                Appends name / value pairs into the
                  buffer.  Both names and values are encoded using the
                  URLEncoder.encode() method before being added to the
                  buffer.                
            </javadoc>
            <method name="appendBuffer" type="void" line="751">
                <params>
                    <param name="buffer" type="StringBuilder"/>
                    <param name="name" type="String"/>
                    <param name="value" type="String"/>
                </params>
                <scope line="752"/>
                <declaration name="encodedName" type="String" line="755"/>
                <declaration name="encodedValue" type="String" line="758"/>
            </method>
            <javadoc line="762">
                Returns true if the Element &lt;code&gt;elem&lt;/code&gt; represents a control.                
            </javadoc>
            <method name="isControl" type="boolean" line="765">
                <params>
                    <param name="elem" type="Element"/>
                </params>
            </method>
            <javadoc line="769">
                Iterates over the element hierarchy to determine if
                  the element parameter, which is assumed to be an
                  &amp;lt;INPUT&amp;gt; element of type password or text, is the last
                  one of either kind, in the form to which it belongs.                
            </javadoc>
            <method name="isLastTextOrPasswordField" type="boolean" line="775">
                <declaration name="parent" type="Element" line="776"/>
                <declaration name="elem" type="Element" line="777"/>
                <scope line="779">
                    <declaration name="it" type="ElementIterator" line="780"/>
                    <declaration name="next" type="Element" line="781"/>
                    <declaration name="found" type="boolean" line="782"/>
                    <scope line="784">
                        <scope line="785"/>
                        <scope line="788">
                            <declaration name="elemAttr" type="AttributeSet" line="789"/>
                            <scope line="792">
                                <declaration name="type" type="String" line="793"/>
                                <scope line="796"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="806">
                Resets the form
                  to its initial state by reinitializing the models
                  associated with each form element to their initial
                  values.
                  param elem the element that triggered the reset                
            </javadoc>
            <method name="resetForm" type="void" line="814">
                <declaration name="parent" type="Element" line="815"/>
                <scope line="817">
                    <declaration name="it" type="ElementIterator" line="818"/>
                    <declaration name="next" type="Element" line="819"/>
                    <scope line="821">
                        <scope line="822">
                            <declaration name="elemAttr" type="AttributeSet" line="823"/>
                            <declaration name="m" type="Object" line="824"/>
                            <scope line="826">
                                <declaration name="doc" type="TextAreaDocument" line="827"/>
                            </scope>
                            <scope line="829">
                                <scope line="830">
                                    <declaration name="doc" type="PlainDocument" line="831"/>
                                    <scope line="834">
                                        <declaration name="value" type="String" line="835"/>
                                        <scope line="837"/>
                                    </scope>
                                </scope>
                                <scope line="841"/>
                            </scope>
                            <scope line="843">
                                <declaration name="model" type="OptionListModel" line="844"/>
                                <declaration name="size" type="int" line="845"/>
                                <scope line="846"/>
                                <declaration name="selectionRange" type="BitSet" line="849"/>
                                <scope line="850">
                                    <scope line="851"/>
                                </scope>
                            </scope>
                            <scope line="855">
                                <declaration name="model" type="OptionComboBoxModel" line="856"/>
                                <declaration name="option" type="Option" line="857"/>
                                <scope line="858"/>
                            </scope>
                            <scope line="861">
                                <declaration name="checked" type="boolean" line="862"/>
                                <declaration name="model" type="JToggleButton.ToggleButtonModel" line="864"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <class name="BrowseFileAction" line="874">
                <implements interface="ActionListener"/>
                <javadoc line="874">
                    BrowseFileAction is used for input type == file. When the user
                      clicks the button a JFileChooser is brought up allowing the user
                      to select a file in the file system. The resulting path to the selected
                      file is set in the text field (actually an instance of Document).                    
                </javadoc>
                <declaration name="attrs" type="AttributeSet" line="881"/>
                <declaration name="model" type="Document" line="882"/>
                <method name="BrowseFileAction" type="constructor" line="884">
                    <params>
                        <param name="attrs" type="AttributeSet"/>
                        <param name="model" type="Document"/>
                    </params>
                </method>
                <method name="actionPerformed" type="void" line="889">
                    <params>
                        <param name="ae" type="ActionEvent"/>
                    </params>
                    <comment line="891">
                        PENDING: When mime support is added to JFileChooser use the
                         accept value of attrs.                        
                    </comment>
                    <declaration name="fc" type="JFileChooser" line="892"/>
                    <scope line="895">
                        <declaration name="selected" type="File" line="896"/>
                        <scope line="898">
                            <scope line="899">
                                <scope line="900"/>
                            </scope>
                            <scope line="904"/>
                        </scope>
                    </scope>
                </method>
            </class>
        </class>
    </source>