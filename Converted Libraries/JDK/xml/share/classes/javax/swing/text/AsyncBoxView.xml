<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text">
        <import package="java.util"/>
        <import package="java.util.List"/>
        <import package="java.awt"/>
        <import package="javax.swing.SwingUtilities"/>
        <import package="javax.swing.event.DocumentEvent"/>
        <class name="AsyncBoxView" line="7">
            <extends class="View"/>
            <javadoc line="7">
                A box that does layout asynchronously.  This
                  is useful to keep the GUI event thread moving by
                  not doing any layout on it.  The layout is done
                  on a granularity of operations on the child views.
                  After each child view is accessed for some part
                  of layout (a potentially time consuming operation)
                  the remaining tasks can be abandoned or a new higher
                  priority task (i.e. to service a synchronous request
                  or a visible area) can be taken on.
                  &lt;p&gt;
                  While the child view is being accessed
                  a read lock is aquired on the associated document
                  so that the model is stable while being accessed.                
                <author>
                    Timothy Prinzing                    
                </author>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <javadoc line="25">
                Construct a box view that does asynchronous layout.                
                <param>
                    elem the element of the model to represent                    
                </param>
                <param>
                    axis the axis to tile along.  This can be
                      either X_AXIS or Y_AXIS.                    
                </param>
            </javadoc>
            <method name="AsyncBoxView" type="constructor" line="31">
                <params>
                    <param name="elem" type="Element"/>
                    <param name="axis" type="int"/>
                </params>
            </method>
            <javadoc line="40">
                Fetch the major axis (the axis the children
                  are tiled along).  This will have a value of
                  either X_AXIS or Y_AXIS.                
            </javadoc>
            <method name="getMajorAxis" type="int" line="45"/>
            <javadoc line="48">
                Fetch the minor axis (the axis orthoginal
                  to the tiled axis).  This will have a value of
                  either X_AXIS or Y_AXIS.                
            </javadoc>
            <method name="getMinorAxis" type="int" line="53"/>
            <javadoc line="56">
                Get the top part of the margin around the view.                
            </javadoc>
            <method name="getTopInset" type="float" line="59"/>
            <javadoc line="62">
                Set the top part of the margin around the view.                
                <param>
                    i the value of the inset                    
                </param>
            </javadoc>
            <method name="setTopInset" type="void" line="66">
                <params>
                    <param name="i" type="float"/>
                </params>
            </method>
            <javadoc line="69">
                Get the bottom part of the margin around the view.                
            </javadoc>
            <method name="getBottomInset" type="float" line="72"/>
            <javadoc line="75">
                Set the bottom part of the margin around the view.                
                <param>
                    i the value of the inset                    
                </param>
            </javadoc>
            <method name="setBottomInset" type="void" line="79">
                <params>
                    <param name="i" type="float"/>
                </params>
            </method>
            <javadoc line="82">
                Get the left part of the margin around the view.                
            </javadoc>
            <method name="getLeftInset" type="float" line="85"/>
            <javadoc line="88">
                Set the left part of the margin around the view.                
                <param>
                    i the value of the inset                    
                </param>
            </javadoc>
            <method name="setLeftInset" type="void" line="92">
                <params>
                    <param name="i" type="float"/>
                </params>
            </method>
            <javadoc line="95">
                Get the right part of the margin around the view.                
            </javadoc>
            <method name="getRightInset" type="float" line="98"/>
            <javadoc line="101">
                Set the right part of the margin around the view.                
                <param>
                    i the value of the inset                    
                </param>
            </javadoc>
            <method name="setRightInset" type="void" line="105">
                <params>
                    <param name="i" type="float"/>
                </params>
            </method>
            <javadoc line="108">
                Fetch the span along an axis that is taken up by the insets.                
                <param>
                    axis the axis to determine the total insets along,
                      either X_AXIS or Y_AXIS.                    
                </param>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getInsetSpan" type="float" line="114">
                <params>
                    <param name="axis" type="int"/>
                </params>
                <declaration name="margin" type="float" line="115"/>
            </method>
            <javadoc line="118">
                Set the estimatedMajorSpan property that determines if the
                  major span should be treated as being estimated.  If this
                  property is true, the value of setSize along the major axis
                  will change the requirements along the major axis and incremental
                  changes will be ignored until all of the children have been updated
                  (which will cause the property to automatically be set to false).
                  If the property is false the value of the majorSpan will be
                  considered to be accurate and incremental changes will be
                  added into the total as they are calculated.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setEstimatedMajorSpan" type="void" line="130">
                <params>
                    <param name="isEstimated" type="boolean"/>
                </params>
            </method>
            <javadoc line="133">
                Is the major span currently estimated?                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getEstimatedMajorSpan" type="boolean" line="137"/>
            <javadoc line="140">
                Fetch the object representing the layout state of
                  of the child at the given index.                
                <param>
                    index the child index.  This should be a
                      value &gt;= 0 and &lt; getViewCount().                    
                </param>
            </javadoc>
            <method name="getChildState" type="ChildState" line="146">
                <params>
                    <param name="index" type="int"/>
                </params>
                <scope line="147">
                    <scope line="148"/>
                </scope>
            </method>
            <javadoc line="154">
                Fetch the queue to use for layout.                
            </javadoc>
            <method name="getLayoutQueue" type="LayoutQueue" line="157"/>
            <javadoc line="160">
                New ChildState records are created through
                  this method to allow subclasses the extend
                  the ChildState records to do/hold more                
            </javadoc>
            <method name="createChildState" type="ChildState" line="165">
                <params>
                    <param name="v" type="View"/>
                </params>
            </method>
            <javadoc line="168">
                Requirements changed along the major axis.
                  This is called by the thread doing layout for
                  the given ChildState object when it has completed
                  fetching the child views new preferences.
                  Typically this would be the layout thread, but
                  might be the event thread if it is trying to update
                  something immediately (such as to perform a
                  model/view translation).
                  &lt;p&gt;
                  This is implemented to mark the major axis as having
                  changed so that a future check to see if the requirements
                  need to be published to the parent view will consider
                  the major axis.  If the span along the major axis is
                  not estimated, it is updated by the given delta to reflect
                  the incremental change.  The delta is ignored if the
                  major span is estimated.                
            </javadoc>
            <method name="majorRequirementChange" type="void" line="186">
                <params>
                    <param name="cs" type="ChildState"/>
                    <param name="delta" type="float"/>
                </params>
                <scope line="187"/>
            </method>
            <javadoc line="192">
                Requirements changed along the minor axis.
                  This is called by the thread doing layout for
                  the given ChildState object when it has completed
                  fetching the child views new preferences.
                  Typically this would be the layout thread, but
                  might be the GUI thread if it is trying to update
                  something immediately (such as to perform a
                  model/view translation).                
            </javadoc>
            <method name="minorRequirementChange" type="void" line="202">
                <params>
                    <param name="cs" type="ChildState"/>
                </params>
            </method>
            <javadoc line="205">
                Publish the changes in preferences upward to the parent
                  view.  This is normally called by the layout thread.                
            </javadoc>
            <method name="flushRequirementChanges" type="void" line="209">
                <declaration name="doc" type="AbstractDocument" line="210"/>
                <scope line="211">
                    <declaration name="parent" type="View" line="213"/>
                    <declaration name="horizontal" type="boolean" line="214"/>
                    <declaration name="vertical" type="boolean" line="215"/>
                    <scope line="216">
                        <scope line="217">
                            <declaration name="n" type="int" line="218"/>
                            <scope line="219">
                                <declaration name="q" type="LayoutQueue" line="220"/>
                                <declaration name="min" type="ChildState" line="221"/>
                                <declaration name="pref" type="ChildState" line="222"/>
                                <declaration name="span" type="float" line="223"/>
                                <scope line="224">
                                    <declaration name="cs" type="ChildState" line="225"/>
                                    <scope line="226">
                                        <scope line="227"/>
                                        <scope line="230"/>
                                    </scope>
                                    <scope line="234"/>
                                </scope>
                                <scope line="238"/>
                                <scope line="242"/>
                            </scope>
                        </scope>
                        <scope line="249">
                            <scope line="251">
                                <scope line="252"/>
                                <scope line="256"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="265">
                        <declaration name="c" type="Component" line="267"/>
                        <scope line="268"/>
                    </scope>
                </scope>
                <scope line="273"/>
            </method>
            <javadoc line="277">
                Calls the superclass to update the child views, and
                  updates the status records for the children.  This
                  is expected to be called while a write lock is held
                  on the model so that interaction with the layout
                  thread will not happen (i.e. the layout thread
                  acquires a read lock before doing anything).                
                <param>
                    offset the starting offset into the child views &gt;= 0                    
                </param>
                <param>
                    length the number of existing views to replace &gt;= 0                    
                </param>
                <param>
                    views the child views to insert                    
                </param>
            </javadoc>
            <method name="replace" type="void" line="288">
                <params>
                    <param name="offset" type="int"/>
                    <param name="length" type="int"/>
                    <param name="views" type="View[]"/>
                </params>
                <scope line="289">
                    <scope line="290">
                        <declaration name="cs" type="ChildState" line="291"/>
                        <declaration name="csSpan" type="float" line="292"/>
                        <scope line="294"/>
                    </scope>
                    <declaration name="q" type="LayoutQueue" line="298"/>
                    <scope line="299">
                        <scope line="300">
                            <declaration name="s" type="ChildState" line="301"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="309">
                Loads all of the children to initialize the view.
                  This is called by the {@link #setParent setParent}method.  Subclasses can reimplement this to initialize
                  their child views in a different manner.  The default
                  implementation creates a child view for each
                  child element.
                  &lt;p&gt;
                  Normally a write-lock is held on the Document while
                  the children are being changed, which keeps the rendering
                  and layout threads safe.  The exception to this is when
                  the view is initialized to represent an existing element
                  (via this method), so it is synchronized to exclude
                  preferenceChanged while we are initializing.                
                <param>
                    f the view factory                    
                </param>
                <see>
                    #setParent                    
                </see>
            </javadoc>
            <method name="loadChildren" type="void" line="325">
                <params>
                    <param name="f" type="ViewFactory"/>
                </params>
                <declaration name="e" type="Element" line="326"/>
                <declaration name="n" type="int" line="327"/>
                <scope line="328">
                    <declaration name="added" type="View[]" line="329"/>
                    <scope line="330"/>
                </scope>
            </method>
            <javadoc line="336">
                Fetches the child view index representing the given position in
                  the model.  This is implemented to fetch the view in the case
                  where there is a child view for each child element.                
                <param>
                    pos the position &gt;= 0                    
                </param>
                <return>
                    index of the view representing the given position, or
                      -1 if no view represents that position                    
                </return>
            </javadoc>
            <method name="getViewIndexAtPosition" type="int" line="344">
                <params>
                    <param name="pos" type="int"/>
                    <param name="b" type="Position.Bias"/>
                </params>
                <declaration name="isBackward" type="boolean" line="345"/>
                <declaration name="elem" type="Element" line="347"/>
            </method>
            <javadoc line="350">
                Update the layout in response to receiving notification of
                  change from the model.  This is implemented to note the
                  change on the ChildLocator so that offsets of the children
                  will be correctly computed.                
                <param>
                    ec changes to the element this view is responsible
                      for (may be null if there were no changes).                    
                </param>
                <param>
                    e the change information from the associated document                    
                </param>
                <param>
                    a the current allocation of the view                    
                </param>
                <see>
                    #insertUpdate                    
                </see>
                <see>
                    #removeUpdate                    
                </see>
                <see>
                    #changedUpdate                    
                </see>
            </javadoc>
            <method name="updateLayout" type="void" line="363">
                <params>
                    <param name="ec" type="DocumentEvent.ElementChange"/>
                    <param name="e" type="DocumentEvent"/>
                    <param name="a" type="Shape"/>
                </params>
                <scope line="364">
                    <declaration name="index" type="int" line="365"/>
                    <declaration name="cs" type="ChildState" line="366"/>
                </scope>
            </method>
            <javadoc line="370">
                Sets the parent of the view.
                  This is reimplemented to provide the superclass
                  behavior as well as calling the &lt;code&gt;loadChildren&lt;/code&gt;
                  method if this view does not already have children.
                  The children should not be loaded in the
                  constructor because the act of setting the parent
                  may cause them to try to search up the hierarchy
                  (to get the hosting Container for example).
                  If this view has children (the view is being moved
                  from one place in the view hierarchy to another),
                  the &lt;code&gt;loadChildren&lt;/code&gt; method will not be called.                
                <param>
                    parent the parent of the view, null if none                    
                </param>
            </javadoc>
            <method name="setParent" type="void" line="384">
                <params>
                    <param name="parent" type="View"/>
                </params>
                <scope line="386">
                    <declaration name="f" type="ViewFactory" line="387"/>
                </scope>
            </method>
            <javadoc line="391">
                Child views can call this on the parent to indicate that
                  the preference has changed and should be reconsidered
                  for layout.  This is reimplemented to queue new work
                  on the layout thread.  This method gets messaged from
                  multiple threads via the children.                
                <param>
                    child the child view                    
                </param>
                <param>
                    width true if the width preference has changed                    
                </param>
                <param>
                    height true if the height preference has changed                    
                </param>
                <see>
                    javax.swing.JComponent#revalidate                    
                </see>
            </javadoc>
            <method name="preferenceChanged" type="void" line="402">
                <params>
                    <param name="child" type="View"/>
                    <param name="width" type="boolean"/>
                    <param name="height" type="boolean"/>
                </params>
                <scope line="403"/>
                <scope line="406">
                    <scope line="407">
                        <declaration name="cv" type="View" line="408"/>
                        <scope line="409"/>
                    </scope>
                    <declaration name="index" type="int" line="414"/>
                    <declaration name="cs" type="ChildState" line="415"/>
                    <declaration name="q" type="LayoutQueue" line="417"/>
                </scope>
            </method>
            <javadoc line="422">
                Sets the size of the view.  This should cause
                  layout of the view if the view caches any layout
                  information.
                  &lt;p&gt;
                  Since the major axis is updated asynchronously and should be
                  the sum of the tiled children the call is ignored for the major
                  axis.  Since the minor axis is flexible, work is queued to resize
                  the children if the minor span changes.                
                <param>
                    width the width &gt;= 0                    
                </param>
                <param>
                    height the height &gt;= 0                    
                </param>
            </javadoc>
            <method name="setSize" type="void" line="434">
                <params>
                    <param name="width" type="float"/>
                    <param name="height" type="float"/>
                </params>
            </method>
            <javadoc line="438">
                Retrieves the size of the view along an axis.                
                <param>
                    axis may be either &lt;code&gt;View.X_AXIS&lt;/code&gt; or
                      &lt;code&gt;View.Y_AXIS&lt;/code&gt;                    
                </param>
                <return>
                    the current span of the view along the given axis, &gt;= 0                    
                </return>
            </javadoc>
            <method name="getSpanOnAxis" type="float" line="444">
                <params>
                    <param name="axis" type="int"/>
                </params>
                <scope line="445"/>
            </method>
            <javadoc line="450">
                Sets the size of the view along an axis.  Since the major
                  axis is updated asynchronously and should be the sum of the
                  tiled children the call is ignored for the major axis.  Since
                  the minor axis is flexible, work is queued to resize the
                  children if the minor span changes.                
                <param>
                    axis may be either &lt;code&gt;View.X_AXIS&lt;/code&gt; or
                      &lt;code&gt;View.Y_AXIS&lt;/code&gt;                    
                </param>
                <param>
                    span the span to layout to &gt;= 0                    
                </param>
            </javadoc>
            <method name="setSpanOnAxis" type="void" line="460">
                <params>
                    <param name="axis" type="int"/>
                    <param name="span" type="float"/>
                </params>
                <declaration name="margin" type="float" line="461"/>
                <scope line="462">
                    <declaration name="targetSpan" type="float" line="463"/>
                    <scope line="464">
                        <declaration name="n" type="int" line="466"/>
                        <scope line="467">
                            <declaration name="q" type="LayoutQueue" line="468"/>
                            <scope line="469">
                                <declaration name="cs" type="ChildState" line="470"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="478">
                    <scope line="479"/>
                </scope>
            </method>
            <javadoc line="484">
                Render the view using the given allocation and
                  rendering surface.
                  &lt;p&gt;
                  This is implemented to determine whether or not the
                  desired region to be rendered (i.e. the unclipped
                  area) is up to date or not.  If up-to-date the children
                  are rendered.  If not up-to-date, a task to build
                  the desired area is placed on the layout queue as
                  a high priority task.  This keeps by event thread
                  moving by rendering if ready, and postponing until
                  a later time if not ready (since paint requests
                  can be rescheduled).                
                <param>
                    g the rendering surface to use                    
                </param>
                <param>
                    alloc the allocated region to render into                    
                </param>
                <see>
                    View#paint                    
                </see>
            </javadoc>
            <method name="paint" type="void" line="501">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="alloc" type="Shape"/>
                </params>
                <scope line="502"/>
            </method>
            <javadoc line="507">
                Determines the preferred span for this view along an
                  axis.                
                <param>
                    axis may be either View.X_AXIS or View.Y_AXIS                    
                </param>
                <return>
                    the span the view would like to be rendered into &gt;= 0.
                      Typically the view is told to render into the span
                      that is returned, although there is no guarantee.
                      The parent may choose to resize or break the view.                    
                </return>
                <exception>
                    IllegalArgumentException for an invalid axis type                    
                </exception>
            </javadoc>
            <method name="getPreferredSpan" type="float" line="517">
                <params>
                    <param name="axis" type="int"/>
                </params>
                <declaration name="margin" type="float" line="518"/>
                <scope line="519"/>
                <scope line="522">
                    <declaration name="child" type="View" line="523"/>
                </scope>
            </method>
            <javadoc line="528">
                Determines the minimum span for this view along an
                  axis.                
                <param>
                    axis may be either View.X_AXIS or View.Y_AXIS                    
                </param>
                <return>
                    the span the view would like to be rendered into &gt;= 0.
                      Typically the view is told to render into the span
                      that is returned, although there is no guarantee.
                      The parent may choose to resize or break the view.                    
                </return>
                <exception>
                    IllegalArgumentException for an invalid axis type                    
                </exception>
            </javadoc>
            <method name="getMinimumSpan" type="float" line="538">
                <params>
                    <param name="axis" type="int"/>
                </params>
                <scope line="539"/>
                <scope line="542">
                    <declaration name="child" type="View" line="543"/>
                </scope>
                <scope line="546"/>
                <scope line="549"/>
            </method>
            <javadoc line="553">
                Determines the maximum span for this view along an
                  axis.                
                <param>
                    axis may be either View.X_AXIS or View.Y_AXIS                    
                </param>
                <return>
                    the span the view would like to be rendered into &gt;= 0.
                      Typically the view is told to render into the span
                      that is returned, although there is no guarantee.
                      The parent may choose to resize or break the view.                    
                </return>
                <exception>
                    IllegalArgumentException for an invalid axis type                    
                </exception>
            </javadoc>
            <method name="getMaximumSpan" type="float" line="563">
                <params>
                    <param name="axis" type="int"/>
                </params>
                <scope line="564"/>
            </method>
            <javadoc line="569">
                Returns the number of views in this view.  Since
                  the default is to not be a composite view this
                  returns 0.                
                <return>
                    the number of views &gt;= 0                    
                </return>
                <see>
                    View#getViewCount                    
                </see>
            </javadoc>
            <method name="getViewCount" type="int" line="576">
                <scope line="577"/>
            </method>
            <javadoc line="581">
                Gets the nth child view.  Since there are no
                  children by default, this returns null.                
                <param>
                    n the number of the view to get, &gt;= 0 &amp;&amp; &lt; getViewCount()                    
                </param>
                <return>
                    the view                    
                </return>
            </javadoc>
            <method name="getView" type="View" line="587">
                <params>
                    <param name="n" type="int"/>
                </params>
                <declaration name="cs" type="ChildState" line="588"/>
                <scope line="589"/>
            </method>
            <javadoc line="594">
                Fetches the allocation for the given child view.
                  This enables finding out where various views
                  are located, without assuming the views store
                  their location.  This returns null since the
                  default is to not have any child views.                
                <param>
                    index the index of the child, &gt;= 0 &amp;&amp; &lt; getViewCount()                    
                </param>
                <param>
                    a  the allocation to this view.                    
                </param>
                <return>
                    the allocation to the child                    
                </return>
            </javadoc>
            <method name="getChildAllocation" type="Shape" line="604">
                <params>
                    <param name="index" type="int"/>
                    <param name="a" type="Shape"/>
                </params>
                <declaration name="ca" type="Shape" line="605"/>
            </method>
            <javadoc line="608">
                Returns the child view index representing the given position in
                  the model.  By default a view has no children so this is implemented
                  to return -1 to indicate there is no valid child index for any
                  position.                
                <param>
                    pos the position &gt;= 0                    
                </param>
                <return>
                    index of the view representing the given position, or
                      -1 if no view represents that position                    
                </return>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getViewIndex" type="int" line="618">
                <params>
                    <param name="pos" type="int"/>
                    <param name="b" type="Position.Bias"/>
                </params>
            </method>
            <javadoc line="621">
                Provides a mapping from the document model coordinate space
                  to the coordinate space of the view mapped to it.                
                <param>
                    pos the position to convert &gt;= 0                    
                </param>
                <param>
                    a the allocated region to render into                    
                </param>
                <param>
                    b the bias toward the previous character or the
                      next character represented by the offset, in case the
                      position is a boundary of two views.                    
                </param>
                <return>
                    the bounding box of the given position is returned                    
                </return>
                <exception>
                    BadLocationException  if the given position does
                      not represent a valid location in the associated document                    
                </exception>
                <exception>
                    IllegalArgumentException for an invalid bias argument                    
                </exception>
                <see>
                    View#viewToModel                    
                </see>
            </javadoc>
            <method name="modelToView" type="Shape" line="635">
                <params>
                    <param name="pos" type="int"/>
                    <param name="a" type="Shape"/>
                    <param name="b" type="Position.Bias"/>
                </params>
                <declaration name="index" type="int" line="636"/>
                <declaration name="ca" type="Shape" line="637"/>
                <declaration name="cs" type="ChildState" line="638"/>
                <scope line="639">
                    <declaration name="cv" type="View" line="640"/>
                    <declaration name="v" type="Shape" line="641"/>
                </scope>
            </method>
            <javadoc line="645">
                Provides a mapping from the view coordinate space to the logical
                  coordinate space of the model.  The biasReturn argument will be
                  filled in to indicate that the point given is closer to the next
                  character in the model or the previous character in the model.
                  &lt;p&gt;
                  This is expected to be called by the GUI thread, holding a
                  read-lock on the associated model.  It is implemented to
                  locate the child view and determine it&apos;s allocation with a
                  lock on the ChildLocator object, and to call viewToModel
                  on the child view with a lock on the ChildState object
                  to avoid interaction with the layout thread.                
                <param>
                    x the X coordinate &gt;= 0                    
                </param>
                <param>
                    y the Y coordinate &gt;= 0                    
                </param>
                <param>
                    a the allocated region to render into                    
                </param>
                <return>
                    the location within the model that best represents the
                      given point in the view &gt;= 0.  The biasReturn argument will be
                      filled in to indicate that the point given is closer to the next
                      character in the model or the previous character in the model.                    
                </return>
            </javadoc>
            <method name="viewToModel" type="int" line="665">
                <params>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                    <param name="a" type="Shape"/>
                    <param name="biasReturn" type="Position.Bias[]"/>
                </params>
                <declaration name="pos" type="int" line="666"/>
                <declaration name="index" type="int" line="667"/>
                <declaration name="ca" type="Shape" line="668"/>
                <scope line="669"/>
                <declaration name="cs" type="ChildState" line="673"/>
                <scope line="674">
                    <declaration name="v" type="View" line="675"/>
                </scope>
            </method>
            <javadoc line="680">
                Provides a way to determine the next visually represented model
                  location that one might place a caret.  Some views may not be visible,
                  they might not be in the same order found in the model, or they just
                  might not allow access to some of the locations in the model.                
                <param>
                    pos the position to convert &gt;= 0                    
                </param>
                <param>
                    a the allocated region to render into                    
                </param>
                <param>
                    direction the direction from the current position that can
                      be thought of as the arrow keys typically found on a keyboard;
                      this may be one of the following:
                      &lt;ul&gt;
                      &lt;code&gt;SwingConstants.WEST&lt;/code&gt;
                      &lt;code&gt;SwingConstants.EAST&lt;/code&gt;
                      &lt;code&gt;SwingConstants.NORTH&lt;/code&gt;
                      &lt;code&gt;SwingConstants.SOUTH&lt;/code&gt;
                      &lt;/ul&gt;                    
                </param>
                <param>
                    biasRet an array contain the bias that was checked                    
                </param>
                <return>
                    the location within the model that best represents the next
                      location visual position                    
                </return>
                <exception>
                    BadLocationException                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;direction&lt;/code&gt; is invalid                    
                </exception>
            </javadoc>
            <method name="getNextVisualPositionFrom" type="int" line="702">
                <params>
                    <param name="pos" type="int"/>
                    <param name="b" type="Position.Bias"/>
                    <param name="a" type="Shape"/>
                    <param name="direction" type="int"/>
                    <param name="biasRet" type="Position.Bias[]"/>
                </params>
            </method>
            <declaration name="axis" type="int" line="705"/>
            <javadoc line="705">
                The major axis against which the children are
                  tiled.                
            </javadoc>
            <declaration name="stats" type="List&amp;lt;ChildState&amp;gt;" line="710"/>
            <javadoc line="710">
                The children and their layout statistics.                
            </javadoc>
            <declaration name="majorSpan" type="float" line="714"/>
            <javadoc line="714">
                Current span along the major axis.  This
                  is also the value returned by getMinimumSize,
                  getPreferredSize, and getMaximumSize along
                  the major axis.                
            </javadoc>
            <declaration name="estimatedMajorSpan" type="boolean" line="721"/>
            <javadoc line="721">
                Is the span along the major axis estimated?                
            </javadoc>
            <declaration name="minorSpan" type="float" line="725"/>
            <javadoc line="725">
                Current span along the minor axis.  This
                  is what layout was done against (i.e. things
                  are flexible in this direction).                
            </javadoc>
            <declaration name="locator" type="ChildLocator" line="731"/>
            <javadoc line="731">
                Object that manages the offsets of the
                  children.  All locking for management of
                  child locations is on this object.                
            </javadoc>
            <declaration name="topInset" type="float" line="737"/>
            <declaration name="bottomInset" type="float" line="738"/>
            <declaration name="leftInset" type="float" line="739"/>
            <declaration name="rightInset" type="float" line="740"/>
            <declaration name="minRequest" type="ChildState" line="741"/>
            <declaration name="prefRequest" type="ChildState" line="742"/>
            <declaration name="majorChanged" type="boolean" line="743"/>
            <declaration name="minorChanged" type="boolean" line="744"/>
            <declaration name="flushTask" type="Runnable" line="745"/>
            <declaration name="changing" type="ChildState" line="746"/>
            <javadoc line="746">
                Child that is actively changing size.  This often
                  causes a preferenceChanged, so this is a cache to
                  possibly speed up the marking the state.  It also
                  helps flag an opportunity to avoid adding to flush
                  task to the layout queue.                
            </javadoc>
            <class name="ChildLocator" line="754">
                <javadoc line="754">
                    A class to manage the effective position of the
                      child views in a localized area while changes are
                      being made around the localized area.  The AsyncBoxView
                      may be continuously changing, but the visible area
                      needs to remain fairly stable until the layout thread
                      decides to publish an update to the parent.                    
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <javadoc line="764">
                    construct a child locator.                    
                </javadoc>
                <method name="ChildLocator" type="constructor" line="767"/>
                <javadoc line="771">
                    Notification that a child changed.  This can effect
                      whether or not new offset calculations are needed.
                      This is called by a ChildState object that has
                      changed it&apos;s major span.  This can therefore be
                      called by multiple threads.                    
                </javadoc>
                <method name="childChanged" type="void" line="778">
                    <params>
                        <param name="cs" type="ChildState"/>
                    </params>
                    <scope line="779"/>
                    <scope line="782"/>
                </method>
                <javadoc line="786">
                    Paint the children that intersect the clip area.                    
                </javadoc>
                <method name="paintChildren" type="void" line="789">
                    <params>
                        <param name="g" type="Graphics"/>
                    </params>
                    <declaration name="clip" type="Rectangle" line="790"/>
                    <declaration name="targetOffset" type="float" line="791"/>
                    <declaration name="index" type="int" line="792"/>
                    <declaration name="n" type="int" line="793"/>
                    <declaration name="offs" type="float" line="794"/>
                    <scope line="795">
                        <declaration name="cs" type="ChildState" line="796"/>
                        <declaration name="ca" type="Shape" line="798"/>
                        <scope line="799">
                            <scope line="800">
                                <declaration name="v" type="View" line="801"/>
                            </scope>
                        </scope>
                        <scope line="805"/>
                    </scope>
                </method>
                <javadoc line="811">
                    Fetch the allocation to use for a child view.
                      This will update the offsets for all children
                      not yet updated before the given index.                    
                </javadoc>
                <method name="getChildAllocation" type="Shape" line="816">
                    <params>
                        <param name="index" type="int"/>
                        <param name="a" type="Shape"/>
                    </params>
                    <scope line="817"/>
                    <declaration name="cs" type="ChildState" line="821"/>
                    <scope line="822"/>
                    <scope line="825"/>
                    <declaration name="ca" type="Shape" line="828"/>
                </method>
                <javadoc line="831">
                    Fetches the child view index at the given point.
                      This is called by the various View methods that
                      need to calculate which child to forward a message
                      to.  This should be called by a block synchronized
                      on this object, and would typically be followed
                      with one or more calls to getChildAllocation that
                      should also be in the synchronized block.                    
                    <param>
                        x the X coordinate &gt;= 0                        
                    </param>
                    <param>
                        y the Y coordinate &gt;= 0                        
                    </param>
                    <param>
                        a the allocation to the View                        
                    </param>
                    <return>
                        the nearest child index                        
                    </return>
                </javadoc>
                <method name="getViewIndexAtPoint" type="int" line="844">
                    <params>
                        <param name="x" type="float"/>
                        <param name="y" type="float"/>
                        <param name="a" type="Shape"/>
                    </params>
                    <declaration name="targetOffset" type="float" line="846"/>
                    <declaration name="index" type="int" line="847"/>
                </method>
                <javadoc line="850">
                    Fetch the allocation to use for a child view.
                      &lt;em&gt;This does not update the offsets in the ChildState
                      records.&lt;/em&gt;                    
                </javadoc>
                <method name="getChildAllocation" type="Shape" line="855">
                    <params>
                        <param name="index" type="int"/>
                    </params>
                    <declaration name="cs" type="ChildState" line="856"/>
                    <scope line="857"/>
                    <scope line="860"/>
                    <scope line="866"/>
                </method>
                <javadoc line="876">
                    Copy the currently allocated shape into the Rectangle
                      used to store the current allocation.  This would be
                      a floating point rectangle in a Java2D-specific implmentation.                    
                </javadoc>
                <method name="setAllocation" type="void" line="881">
                    <params>
                        <param name="a" type="Shape"/>
                    </params>
                    <scope line="882"/>
                    <scope line="885"/>
                </method>
                <javadoc line="890">
                    Locate the view responsible for an offset into the box
                      along the major axis.  Make sure that offsets are set
                      on the ChildState objects up to the given target span
                      past the desired offset.                    
                    <return>
                        index of the view representing the given visual
                          location (targetOffset), or -1 if no view represents
                          that location                        
                    </return>
                </javadoc>
                <method name="getViewIndexAtVisualOffset" type="int" line="899">
                    <params>
                        <param name="targetOffset" type="float"/>
                    </params>
                    <declaration name="n" type="int" line="900"/>
                    <scope line="901">
                        <declaration name="lastValid" type="boolean" line="902"/>
                        <scope line="903"/>
                        <scope line="906">
                            <scope line="907"/>
                            <declaration name="pos" type="int" line="910"/>
                            <declaration name="index" type="int" line="911"/>
                        </scope>
                        <scope line="914"/>
                        <scope line="917">
                            <declaration name="offs" type="float" line="918"/>
                            <scope line="919">
                                <declaration name="cs" type="ChildState" line="920"/>
                                <declaration name="nextOffs" type="float" line="921"/>
                                <scope line="922"/>
                            </scope>
                        </scope>
                    </scope>
                </method>
                <javadoc line="931">
                    Move the location of the last offset calculation forward
                      to the desired offset.                    
                </javadoc>
                <method name="updateChildOffsets" type="int" line="935">
                    <params>
                        <param name="targetOffset" type="float"/>
                    </params>
                    <declaration name="n" type="int" line="936"/>
                    <declaration name="targetIndex" type="int" line="937"/>
                    <declaration name="pos" type="int" line="938"/>
                    <declaration name="startIndex" type="int" line="939"/>
                    <declaration name="start" type="float" line="940"/>
                    <declaration name="lastOffset" type="float" line="941"/>
                    <scope line="942">
                        <declaration name="cs" type="ChildState" line="943"/>
                        <scope line="946"/>
                    </scope>
                </method>
                <javadoc line="954">
                    Move the location of the last offset calculation forward
                      to the desired index.                    
                </javadoc>
                <method name="updateChildOffsetsToIndex" type="void" line="958">
                    <params>
                        <param name="index" type="int"/>
                    </params>
                    <declaration name="pos" type="int" line="959"/>
                    <declaration name="startIndex" type="int" line="960"/>
                    <declaration name="lastOffset" type="float" line="961"/>
                    <scope line="962">
                        <declaration name="cs" type="ChildState" line="963"/>
                    </scope>
                </method>
                <method name="intersectsClip" type="boolean" line="968">
                    <params>
                        <param name="childAlloc" type="Shape"/>
                        <param name="clip" type="Rectangle"/>
                    </params>
                    <declaration name="cs" type="Rectangle" line="969"/>
                    <scope line="970"/>
                </method>
                <declaration name="lastValidOffset" type="ChildState" line="975"/>
                <javadoc line="975">
                    The location of the last offset calculation
                      that is valid.                    
                </javadoc>
                <declaration name="lastAlloc" type="Rectangle" line="980"/>
                <javadoc line="980">
                    The last seen allocation (for repainting when changes
                      are flushed upward).                    
                </javadoc>
                <declaration name="childAlloc" type="Rectangle" line="985"/>
                <javadoc line="985">
                    A shape to use for the child allocation to avoid
                      creating a lot of garbage.                    
                </javadoc>
            </class>
            <class name="ChildState" line="991">
                <implements interface="Runnable"/>
                <javadoc line="991">
                    A record representing the layout state of a
                      child view.  It is runnable as a task on another
                      thread.  All access to the child view that is
                      based upon a read-lock on the model should synchronize
                      on this object (i.e. The layout thread and the GUI
                      thread can both have a read lock on the model at the
                      same time and are not protected from each other).
                      Access to a child view hierarchy is serialized via
                      synchronization on the ChildState instance.                    
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <javadoc line="1004">
                    Construct a child status.  This needs to start
                      out as fairly large so we don&apos;t falsely begin with
                      the idea that all of the children are visible.                    
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <method name="ChildState" type="constructor" line="1010">
                    <params>
                        <param name="v" type="View"/>
                    </params>
                </method>
                <javadoc line="1017">
                    Fetch the child view this record represents                    
                </javadoc>
                <method name="getChildView" type="View" line="1020"/>
                <javadoc line="1023">
                    Update the child state.  This should be
                      called by the thread that desires to spend
                      time updating the child state (intended to
                      be the layout thread).
                      &lt;p&gt;
                      This aquires a read lock on the associated
                      document for the duration of the update to
                      ensure the model is not changed while it is
                      operating.  The first thing to do would be
                      to see if any work actually needs to be done.
                      The following could have conceivably happened
                      while the state was waiting to be updated:
                      &lt;ol&gt;
                      &lt;li&gt;The child may have been removed from the
                      view hierarchy.
                      &lt;li&gt;The child may have been updated by a
                      higher priority operation (i.e. the child
                      may have become visible).
                      &lt;/ol&gt;                    
                </javadoc>
                <method name="run" type="void" line="1044">
                    <declaration name="doc" type="AbstractDocument" line="1045"/>
                    <scope line="1046">
                        <scope line="1048"/>
                        <scope line="1051">
                            <scope line="1052"/>
                            <scope line="1056"/>
                        </scope>
                    </scope>
                    <scope line="1062"/>
                </method>
                <method name="updateChild" type="void" line="1066">
                    <declaration name="minorUpdated" type="boolean" line="1067"/>
                    <scope line="1068">
                        <scope line="1069">
                            <declaration name="minorAxis" type="int" line="1070"/>
                        </scope>
                    </scope>
                    <scope line="1078"/>
                    <declaration name="majorUpdated" type="boolean" line="1081"/>
                    <declaration name="delta" type="float" line="1082"/>
                    <scope line="1083">
                        <scope line="1084">
                            <declaration name="old" type="float" line="1085"/>
                        </scope>
                    </scope>
                    <scope line="1092"/>
                    <scope line="1096">
                        <scope line="1097">
                            <declaration name="w" type="float" line="1098"/>
                            <declaration name="h" type="float" line="1099"/>
                            <scope line="1100"/>
                            <scope line="1104"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="1113">
                    What is the span along the minor axis.                    
                </javadoc>
                <method name="getMinorSpan" type="float" line="1116">
                    <scope line="1117"/>
                </method>
                <javadoc line="1122">
                    What is the offset along the minor axis                    
                </javadoc>
                <method name="getMinorOffset" type="float" line="1125">
                    <scope line="1126">
                        <declaration name="align" type="float" line="1127"/>
                    </scope>
                </method>
                <javadoc line="1132">
                    What is the span along the major axis.                    
                </javadoc>
                <method name="getMajorSpan" type="float" line="1135"/>
                <javadoc line="1138">
                    Get the offset along the major axis                    
                </javadoc>
                <method name="getMajorOffset" type="float" line="1141"/>
                <javadoc line="1144">
                    This method should only be called by the ChildLocator,
                      it is simply a convenient place to hold the cached
                      location.                    
                </javadoc>
                <method name="setMajorOffset" type="void" line="1149">
                    <params>
                        <param name="offs" type="float"/>
                    </params>
                </method>
                <javadoc line="1152">
                    Mark preferences changed for this child.                    
                    <param>
                        width true if the width preference has changed                        
                    </param>
                    <param>
                        height true if the height preference has changed                        
                    </param>
                    <see>
                        javax.swing.JComponent#revalidate                        
                    </see>
                </javadoc>
                <method name="preferenceChanged" type="void" line="1158">
                    <params>
                        <param name="width" type="boolean"/>
                        <param name="height" type="boolean"/>
                    </params>
                    <scope line="1159">
                        <scope line="1160"/>
                        <scope line="1163"/>
                    </scope>
                    <scope line="1167">
                        <scope line="1168"/>
                        <scope line="1171"/>
                    </scope>
                </method>
                <javadoc line="1177">
                    Has the child view been laid out.                    
                </javadoc>
                <method name="isLayoutValid" type="boolean" line="1180"/>
                <declaration name="min" type="float" line="1183"/>
                <declaration name="pref" type="float" line="1184"/>
                <declaration name="max" type="float" line="1185"/>
                <declaration name="minorValid" type="boolean" line="1186"/>
                <declaration name="span" type="float" line="1187"/>
                <declaration name="offset" type="float" line="1188"/>
                <declaration name="majorValid" type="boolean" line="1189"/>
                <declaration name="child" type="View" line="1190"/>
                <declaration name="childSizeValid" type="boolean" line="1191"/>
            </class>
            <class name="FlushTask" line="1193">
                <implements interface="Runnable"/>
                <javadoc line="1193">
                    Task to flush requirement changes upward                    
                </javadoc>
                <method name="run" type="void" line="1197"/>
            </class>
        </class>
    </source>