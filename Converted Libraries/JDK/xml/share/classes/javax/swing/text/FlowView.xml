<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text">
        <import package="java.awt"/>
        <import package="java.util.Vector"/>
        <import package="javax.swing.event"/>
        <import package="javax.swing.SizeRequirements"/>
        <class name="FlowView" line="6">
            <extends class="BoxView"/>
            <javadoc line="6">
                A View that tries to flow it&apos;s children into some
                  partially constrained space.  This can be used to
                  build things like paragraphs, pages, etc.  The
                  flow is made up of the following pieces of functionality.
                  &lt;ul&gt;
                  &lt;li&gt;A logical set of child views, which as used as a
                  layout pool from which a physical view is formed.
                  &lt;li&gt;A strategy for translating the logical view to
                  a physical (flowed) view.
                  &lt;li&gt;Constraints for the strategy to work against.
                  &lt;li&gt;A physical structure, that represents the flow.
                  The children of this view are where the pieces of
                  of the logical views are placed to create the flow.
                  &lt;/ul&gt;                
                <author>
                    Timothy Prinzing                    
                </author>
                <see>
                    View                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <javadoc line="26">
                Constructs a FlowView for the given element.                
                <param>
                    elem the element that this view is responsible for                    
                </param>
                <param>
                    axis may be either View.X_AXIS or View.Y_AXIS                    
                </param>
            </javadoc>
            <method name="FlowView" type="constructor" line="31">
                <params>
                    <param name="elem" type="Element"/>
                    <param name="axis" type="int"/>
                </params>
            </method>
            <javadoc line="36">
                Fetches the axis along which views should be
                  flowed.  By default, this will be the axis
                  orthogonal to the axis along which the flow
                  rows are tiled (the axis of the default flow
                  rows themselves).  This is typically used
                  by the &lt;code&gt;FlowStrategy&lt;/code&gt;.                
            </javadoc>
            <method name="getFlowAxis" type="int" line="44">
                <scope line="45"/>
            </method>
            <javadoc line="50">
                Fetch the constraining span to flow against for
                  the given child index.  This is called by the
                  FlowStrategy while it is updating the flow.
                  A flow can be shaped by providing different values
                  for the row constraints.  By default, the entire
                  span inside of the insets along the flow axis
                  is returned.                
                <param>
                    index the index of the row being updated.
                      This should be a value &gt;= 0 and &lt; getViewCount().                    
                </param>
                <see>
                    #getFlowStart                    
                </see>
            </javadoc>
            <method name="getFlowSpan" type="int" line="62">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="65">
                Fetch the location along the flow axis that the
                  flow span will start at.  This is called by the
                  FlowStrategy while it is updating the flow.
                  A flow can be shaped by providing different values
                  for the row constraints.                
                <param>
                    index the index of the row being updated.
                      This should be a value &gt;= 0 and &lt; getViewCount().                    
                </param>
                <see>
                    #getFlowSpan                    
                </see>
            </javadoc>
            <method name="getFlowStart" type="int" line="75">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="createRow" type="View" line="78"/>
            <javadoc line="78">
                Create a View that should be used to hold a
                  a rows worth of children in a flow.  This is
                  called by the FlowStrategy when new children
                  are added or removed (i.e. rows are added or
                  removed) in the process of updating the flow.                
            </javadoc>
            <javadoc line="86">
                Loads all of the children to initialize the view.
                  This is called by the &lt;code&gt;setParent&lt;/code&gt; method.
                  This is reimplemented to not load any children directly
                  (as they are created in the process of formatting).
                  If the layoutPool variable is null, an instance of
                  LogicalView is created to represent the logical view
                  that is used in the process of formatting.                
                <param>
                    f the view factory                    
                </param>
            </javadoc>
            <method name="loadChildren" type="void" line="96">
                <params>
                    <param name="f" type="ViewFactory"/>
                </params>
                <scope line="97"/>
            </method>
            <javadoc line="103">
                Fetches the child view index representing the given position in
                  the model.                
                <param>
                    pos the position &gt;= 0                    
                </param>
                <return>
                    index of the view representing the given position, or
                      -1 if no view represents that position                    
                </return>
            </javadoc>
            <method name="getViewIndexAtPosition" type="int" line="110">
                <params>
                    <param name="pos" type="int"/>
                </params>
                <scope line="111">
                    <scope line="112">
                        <declaration name="v" type="View" line="113"/>
                        <scope line="114"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="121">
                Lays out the children.  If the span along the flow
                  axis has changed, layout is marked as invalid which
                  which will cause the superclass behavior to recalculate
                  the layout along the box axis.  The FlowStrategy.layout
                  method will be called to rebuild the flow rows as
                  appropriate.  If the height of this view changes
                  (determined by the perferred size along the box axis),
                  a preferenceChanged is called.  Following all of that,
                  the normal box layout of the superclass is performed.                
                <param>
                    width  the width to lay out against &gt;= 0.  This is
                      the width inside of the inset area.                    
                </param>
                <param>
                    height the height to lay out against &gt;= 0 This
                      is the height inside of the inset area.                    
                </param>
            </javadoc>
            <method name="layout" type="void" line="136">
                <params>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <declaration name="faxis" type="int" line="137"/>
                <declaration name="newSpan" type="int" line="138"/>
                <scope line="139"/>
                <scope line="142"/>
                <scope line="145"/>
                <scope line="150">
                    <declaration name="heightAxis" type="int" line="151"/>
                    <declaration name="oldFlowHeight" type="int" line="152"/>
                    <declaration name="newFlowHeight" type="int" line="154"/>
                    <scope line="155">
                        <declaration name="p" type="View" line="156"/>
                        <scope line="157"/>
                        <declaration name="host" type="Component" line="160"/>
                        <scope line="161"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="168">
                Calculate equirements along the minor axis.  This
                  is implemented to forward the request to the logical
                  view by calling getMinimumSpan, getPreferredSpan, and
                  getMaximumSpan on it.                
            </javadoc>
            <method name="calculateMinorAxisRequirements" type="SizeRequirements" line="174">
                <params>
                    <param name="axis" type="int"/>
                    <param name="r" type="SizeRequirements"/>
                </params>
                <scope line="175"/>
                <declaration name="pref" type="float" line="178"/>
                <declaration name="min" type="float" line="179"/>
            </method>
            <javadoc line="186">
                Gives notification that something was inserted into the document
                  in a location that this view is responsible for.                
                <param>
                    changes the change information from the associated document                    
                </param>
                <param>
                    a the current allocation of the view                    
                </param>
                <param>
                    f the factory to use to rebuild if the view has children                    
                </param>
                <see>
                    View#insertUpdate                    
                </see>
            </javadoc>
            <method name="insertUpdate" type="void" line="194">
                <params>
                    <param name="changes" type="DocumentEvent"/>
                    <param name="a" type="Shape"/>
                    <param name="f" type="ViewFactory"/>
                </params>
            </method>
            <javadoc line="198">
                Gives notification that something was removed from the document
                  in a location that this view is responsible for.                
                <param>
                    changes the change information from the associated document                    
                </param>
                <param>
                    a the current allocation of the view                    
                </param>
                <param>
                    f the factory to use to rebuild if the view has children                    
                </param>
                <see>
                    View#removeUpdate                    
                </see>
            </javadoc>
            <method name="removeUpdate" type="void" line="206">
                <params>
                    <param name="changes" type="DocumentEvent"/>
                    <param name="a" type="Shape"/>
                    <param name="f" type="ViewFactory"/>
                </params>
            </method>
            <javadoc line="210">
                Gives notification from the document that attributes were changed
                  in a location that this view is responsible for.                
                <param>
                    changes the change information from the associated document                    
                </param>
                <param>
                    a the current allocation of the view                    
                </param>
                <param>
                    f the factory to use to rebuild if the view has children                    
                </param>
                <see>
                    View#changedUpdate                    
                </see>
            </javadoc>
            <method name="changedUpdate" type="void" line="218">
                <params>
                    <param name="changes" type="DocumentEvent"/>
                    <param name="a" type="Shape"/>
                    <param name="f" type="ViewFactory"/>
                </params>
            </method>
            <javadoc line="222">
                {@inheritDoc}                
            </javadoc>
            <method name="setParent" type="void" line="225">
                <params>
                    <param name="parent" type="View"/>
                </params>
                <scope line="227"/>
            </method>
            <declaration name="layoutSpan" type="int" line="231"/>
            <javadoc line="231">
                Default constraint against which the flow is
                  created against.                
            </javadoc>
            <declaration name="layoutPool" type="View" line="236"/>
            <javadoc line="236">
                These are the views that represent the child elements
                  of the element this view represents (The logical view
                  to translate to a physical view).  These are not
                  directly children of this view.  These are either
                  placed into the rows directly or used for the purpose
                  of breaking into smaller chunks, to form the physical
                  view.                
            </javadoc>
            <declaration name="strategy" type="FlowStrategy" line="246"/>
            <javadoc line="246">
                The behavior for keeping the flow updated.  By
                  default this is a singleton shared by all instances
                  of FlowView (FlowStrategy is stateless).  Subclasses
                  can create an alternative strategy, which might keep
                  state.                
            </javadoc>
            <class name="FlowStrategy" line="254">
                <javadoc line="254">
                    Strategy for maintaining the physical form
                      of the flow.  The default implementation is
                      completely stateless, and recalculates the
                      entire flow if the layout is invalid on the
                      given FlowView.  Alternative strategies can
                      be implemented by subclassing, and might
                      perform incrementatal repair to the layout
                      or alternative breaking behavior.                    
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <declaration name="damageStart" type="Position" line="266"/>
                <declaration name="viewBuffer" type="Vector&amp;lt;View&amp;gt;" line="267"/>
                <method name="addDamage" type="void" line="268">
                    <params>
                        <param name="fv" type="FlowView"/>
                        <param name="offset" type="int"/>
                    </params>
                    <scope line="269">
                        <scope line="270">
                            <scope line="271"/>
                            <scope line="274"/>
                        </scope>
                    </scope>
                </method>
                <method name="unsetDamage" type="void" line="280"/>
                <javadoc line="283">
                    Gives notification that something was inserted into the document
                      in a location that the given flow view is responsible for.  The
                      strategy should update the appropriate changed region (which
                      depends upon the strategy used for repair).                    
                    <param>
                        e the change information from the associated document                        
                    </param>
                    <param>
                        alloc the current allocation of the view inside of the insets.
                          This value will be null if the view has not yet been displayed.                        
                    </param>
                    <see>
                        View#insertUpdate                        
                    </see>
                </javadoc>
                <method name="insertUpdate" type="void" line="293">
                    <params>
                        <param name="fv" type="FlowView"/>
                        <param name="e" type="DocumentEvent"/>
                        <param name="alloc" type="Rectangle"/>
                    </params>
                    <scope line="294"/>
                    <scope line="297">
                        <declaration name="host" type="Component" line="298"/>
                        <scope line="299"/>
                    </scope>
                    <scope line="303"/>
                </method>
                <javadoc line="307">
                    Gives notification that something was removed from the document
                      in a location that the given flow view is responsible for.                    
                    <param>
                        e the change information from the associated document                        
                    </param>
                    <param>
                        alloc the current allocation of the view inside of the insets.                        
                    </param>
                    <see>
                        View#removeUpdate                        
                    </see>
                </javadoc>
                <method name="removeUpdate" type="void" line="314">
                    <params>
                        <param name="fv" type="FlowView"/>
                        <param name="e" type="DocumentEvent"/>
                        <param name="alloc" type="Rectangle"/>
                    </params>
                    <scope line="316">
                        <declaration name="host" type="Component" line="317"/>
                        <scope line="318"/>
                    </scope>
                    <scope line="322"/>
                </method>
                <javadoc line="326">
                    Gives notification from the document that attributes were changed
                      in a location that this view is responsible for.                    
                    <param>
                        fv     the &lt;code&gt;FlowView&lt;/code&gt; containing the changes                        
                    </param>
                    <param>
                        e      the &lt;code&gt;DocumentEvent&lt;/code&gt; describing the changes
                          done to the Document                        
                    </param>
                    <param>
                        alloc  Bounds of the View                        
                    </param>
                    <see>
                        View#changedUpdate                        
                    </see>
                </javadoc>
                <method name="changedUpdate" type="void" line="335">
                    <params>
                        <param name="fv" type="FlowView"/>
                        <param name="e" type="DocumentEvent"/>
                        <param name="alloc" type="Rectangle"/>
                    </params>
                    <scope line="337">
                        <declaration name="host" type="Component" line="338"/>
                        <scope line="339"/>
                    </scope>
                    <scope line="343"/>
                </method>
                <javadoc line="347">
                    This method gives flow strategies access to the logical
                      view of the FlowView.                    
                </javadoc>
                <method name="getLogicalView" type="View" line="351">
                    <params>
                        <param name="fv" type="FlowView"/>
                    </params>
                </method>
                <javadoc line="354">
                    Update the flow on the given FlowView.  By default, this causes
                      all of the rows (child views) to be rebuilt to match the given
                      constraints for each row.  This is called by a FlowView.layout
                      to update the child views in the flow.                    
                    <param>
                        fv the view to reflow                        
                    </param>
                </javadoc>
                <method name="layout" type="void" line="361">
                    <params>
                        <param name="fv" type="FlowView"/>
                    </params>
                    <declaration name="pool" type="View" line="362"/>
                    <declaration name="rowIndex" type="int" line="363"/>
                    <declaration name="p1" type="int" line="364"/>
                    <scope line="365">
                        <scope line="366"/>
                        <declaration name="offset" type="int" line="369"/>
                        <scope line="370"/>
                        <scope line="373"/>
                    </scope>
                    <scope line="378"/>
                    <declaration name="rowCount" type="int" line="384"/>
                    <scope line="385">
                        <declaration name="row" type="View" line="386"/>
                        <scope line="387"/>
                        <scope line="391"/>
                    </scope>
                    <scope line="398"/>
                </method>
                <javadoc line="403">
                    Creates a row of views that will fit within the
                      layout span of the row.  This is called by the layout method.
                      This is implemented to fill the row by repeatedly calling
                      the createView method until the available span has been
                      exhausted, a forced break was encountered, or the createView
                      method returned null.  If the remaining span was exhaused,
                      the adjustRow method will be called to perform adjustments
                      to the row to try and make it fit into the given span.                    
                    <param>
                        rowIndex the index of the row to fill in with views.  The
                          row is assumed to be empty on entry.                        
                    </param>
                    <param>
                        pos  The current position in the children of
                          this views element from which to start.                        
                    </param>
                    <return>
                        the position to start the next row                        
                    </return>
                </javadoc>
                <method name="layoutRow" type="int" line="418">
                    <params>
                        <param name="fv" type="FlowView"/>
                        <param name="rowIndex" type="int"/>
                        <param name="pos" type="int"/>
                    </params>
                    <declaration name="row" type="View" line="419"/>
                    <declaration name="x" type="float" line="420"/>
                    <declaration name="spanLeft" type="float" line="421"/>
                    <declaration name="end" type="int" line="422"/>
                    <declaration name="te" type="TabExpander" line="423"/>
                    <declaration name="flowAxis" type="int" line="424"/>
                    <declaration name="breakWeight" type="int" line="425"/>
                    <declaration name="breakX" type="float" line="426"/>
                    <declaration name="breakSpan" type="float" line="427"/>
                    <declaration name="breakIndex" type="int" line="428"/>
                    <declaration name="n" type="int" line="429"/>
                    <scope line="431">
                        <declaration name="v" type="View" line="432"/>
                        <scope line="433"/>
                        <declaration name="bw" type="int" line="436"/>
                        <scope line="437">
                            <declaration name="w" type="View" line="438"/>
                            <scope line="439"/>
                            <scope line="442"/>
                        </scope>
                        <scope line="447"/>
                        <declaration name="chunkSpan" type="float" line="453"/>
                        <scope line="454"/>
                        <scope line="457"/>
                        <scope line="460">
                            <scope line="461"/>
                            <scope line="464"/>
                        </scope>
                    </scope>
                    <declaration name="views" type="View[]" line="475"/>
                </method>
                <javadoc line="480">
                    Adjusts the given row if possible to fit within the
                      layout span.  By default this will try to find the
                      highest break weight possible nearest the end of
                      the row.  If a forced break is encountered, the
                      break will be positioned there.                    
                    <param>
                        rowIndex the row to adjust to the current layout
                          span.                        
                    </param>
                    <param>
                        desiredSpan the current layout span &gt;= 0                        
                    </param>
                    <param>
                        x the location r starts at.                        
                    </param>
                </javadoc>
                <method name="adjustRow" type="void" line="491">
                    <params>
                        <param name="fv" type="FlowView"/>
                        <param name="rowIndex" type="int"/>
                        <param name="desiredSpan" type="int"/>
                        <param name="x" type="int"/>
                    </params>
                    <declaration name="flowAxis" type="int" line="492"/>
                    <declaration name="r" type="View" line="493"/>
                    <declaration name="n" type="int" line="494"/>
                    <declaration name="span" type="int" line="495"/>
                    <declaration name="bestWeight" type="int" line="496"/>
                    <declaration name="bestSpan" type="int" line="497"/>
                    <declaration name="bestIndex" type="int" line="498"/>
                    <declaration name="v" type="View" line="499"/>
                    <scope line="500">
                        <declaration name="spanLeft" type="int" line="502"/>
                        <declaration name="w" type="int" line="503"/>
                        <scope line="504">
                            <scope line="508"/>
                        </scope>
                    </scope>
                    <scope line="514"/>
                    <declaration name="spanLeft" type="int" line="517"/>
                    <declaration name="va" type="View[]" line="520"/>
                    <declaration name="lv" type="View" line="522"/>
                    <declaration name="p0" type="int" line="523"/>
                    <declaration name="p1" type="int" line="524"/>
                    <scope line="525">
                        <declaration name="tmpView" type="View" line="526"/>
                        <scope line="527"/>
                        <scope line="530"/>
                    </scope>
                </method>
                <method name="reparentViews" type="void" line="536">
                    <params>
                        <param name="pool" type="View"/>
                        <param name="startPos" type="int"/>
                    </params>
                    <declaration name="n" type="int" line="537"/>
                    <scope line="538">
                        <scope line="539"/>
                    </scope>
                </method>
                <javadoc line="544">
                    Creates a view that can be used to represent the current piece
                      of the flow.  This can be either an entire view from the
                      logical view, or a fragment of the logical view.                    
                    <param>
                        fv the view holding the flow                        
                    </param>
                    <param>
                        startOffset the start location for the view being created                        
                    </param>
                    <param>
                        spanLeft the about of span left to fill in the row                        
                    </param>
                    <param>
                        rowIndex the row the view will be placed into                        
                    </param>
                </javadoc>
                <method name="createView" type="View" line="553">
                    <params>
                        <param name="fv" type="FlowView"/>
                        <param name="startOffset" type="int"/>
                        <param name="spanLeft" type="int"/>
                        <param name="rowIndex" type="int"/>
                    </params>
                    <declaration name="lv" type="View" line="554"/>
                    <declaration name="childIndex" type="int" line="555"/>
                    <declaration name="v" type="View" line="556"/>
                    <scope line="557"/>
                </method>
            </class>
            <class name="LogicalView" line="564">
                <extends class="CompositeView"/>
                <javadoc line="564">
                    This class can be used to represent a logical view for
                      a flow.  It keeps the children updated to reflect the state
                      of the model, gives the logical child views access to the
                      view hierarchy, and calculates a preferred span.  It doesn&apos;t
                      do any rendering, layout, or model/view translation.                    
                </javadoc>
                <method name="LogicalView" type="constructor" line="572">
                    <params>
                        <param name="elem" type="Element"/>
                    </params>
                </method>
                <method name="getViewIndexAtPosition" type="int" line="575">
                    <params>
                        <param name="pos" type="int"/>
                    </params>
                    <declaration name="elem" type="Element" line="576"/>
                    <scope line="577"/>
                </method>
                <method name="loadChildren" type="void" line="582">
                    <params>
                        <param name="f" type="ViewFactory"/>
                    </params>
                    <declaration name="elem" type="Element" line="583"/>
                    <scope line="584">
                        <declaration name="v" type="View" line="585"/>
                    </scope>
                    <scope line="588"/>
                </method>
                <javadoc line="592">
                    Fetches the attributes to use when rendering.  This view
                      isn&apos;t directly responsible for an element so it returns
                      the outer classes attributes.                    
                </javadoc>
                <method name="getAttributes" type="AttributeSet" line="597">
                    <declaration name="p" type="View" line="598"/>
                </method>
                <javadoc line="601">
                    Determines the preferred span for this view along an
                      axis.                    
                    <param>
                        axis may be either View.X_AXIS or View.Y_AXIS                        
                    </param>
                    <return>
                        the span the view would like to be rendered into.
                          Typically the view is told to render into the span
                          that is returned, although there is no guarantee.
                          The parent may choose to resize or break the view.                        
                    </return>
                    <see>
                        View#getPreferredSpan                        
                    </see>
                </javadoc>
                <method name="getPreferredSpan" type="float" line="611">
                    <params>
                        <param name="axis" type="int"/>
                    </params>
                    <declaration name="maxpref" type="float" line="612"/>
                    <declaration name="pref" type="float" line="613"/>
                    <declaration name="n" type="int" line="614"/>
                    <scope line="615">
                        <declaration name="v" type="View" line="616"/>
                        <scope line="618"/>
                    </scope>
                </method>
                <javadoc line="626">
                    Determines the minimum span for this view along an
                      axis.  The is implemented to find the minimum unbreakable
                      span.                    
                    <param>
                        axis may be either View.X_AXIS or View.Y_AXIS                        
                    </param>
                    <return>
                        the span the view would like to be rendered into.
                          Typically the view is told to render into the span
                          that is returned, although there is no guarantee.
                          The parent may choose to resize or break the view.                        
                    </return>
                    <see>
                        View#getPreferredSpan                        
                    </see>
                </javadoc>
                <method name="getMinimumSpan" type="float" line="637">
                    <params>
                        <param name="axis" type="int"/>
                    </params>
                    <declaration name="maxmin" type="float" line="638"/>
                    <declaration name="min" type="float" line="639"/>
                    <declaration name="nowrap" type="boolean" line="640"/>
                    <declaration name="n" type="int" line="641"/>
                    <scope line="642">
                        <declaration name="v" type="View" line="643"/>
                        <scope line="644"/>
                        <scope line="648"/>
                        <scope line="653"/>
                    </scope>
                </method>
                <javadoc line="660">
                    Forward the DocumentEvent to the given child view.  This
                      is implemented to reparent the child to the logical view
                      (the children may have been parented by a row in the flow
                      if they fit without breaking) and then execute the superclass
                      behavior.                    
                    <param>
                        v the child view to forward the event to.                        
                    </param>
                    <param>
                        e the change information from the associated document                        
                    </param>
                    <param>
                        a the current allocation of the view                        
                    </param>
                    <param>
                        f the factory to use to rebuild if the view has children                        
                    </param>
                    <see>
                        #forwardUpdate                        
                    </see>
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <method name="forwardUpdateToView" type="void" line="673">
                    <params>
                        <param name="v" type="View"/>
                        <param name="e" type="DocumentEvent"/>
                        <param name="a" type="Shape"/>
                        <param name="f" type="ViewFactory"/>
                    </params>
                    <declaration name="parent" type="View" line="674"/>
                </method>
                <javadoc line="679">
                    Renders using the given rendering surface and area on that
                      surface.  This is implemented to do nothing, the logical
                      view is never visible.                    
                    <param>
                        g the rendering surface to use                        
                    </param>
                    <param>
                        allocation the allocated region to render into                        
                    </param>
                    <see>
                        View#paint                        
                    </see>
                </javadoc>
                <method name="paint" type="void" line="687">
                    <params>
                        <param name="g" type="Graphics"/>
                        <param name="allocation" type="Shape"/>
                    </params>
                </method>
                <javadoc line="689">
                    Tests whether a point lies before the rectangle range.
                      Implemented to return false, as hit detection is not
                      performed on the logical view.                    
                    <param>
                        x the X coordinate &gt;= 0                        
                    </param>
                    <param>
                        y the Y coordinate &gt;= 0                        
                    </param>
                    <param>
                        alloc the rectangle                        
                    </param>
                    <return>
                        true if the point is before the specified range                        
                    </return>
                </javadoc>
                <method name="isBefore" type="boolean" line="698">
                    <params>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                        <param name="alloc" type="Rectangle"/>
                    </params>
                </method>
                <javadoc line="701">
                    Tests whether a point lies after the rectangle range.
                      Implemented to return false, as hit detection is not
                      performed on the logical view.                    
                    <param>
                        x the X coordinate &gt;= 0                        
                    </param>
                    <param>
                        y the Y coordinate &gt;= 0                        
                    </param>
                    <param>
                        alloc the rectangle                        
                    </param>
                    <return>
                        true if the point is after the specified range                        
                    </return>
                </javadoc>
                <method name="isAfter" type="boolean" line="710">
                    <params>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                        <param name="alloc" type="Rectangle"/>
                    </params>
                </method>
                <javadoc line="713">
                    Fetches the child view at the given point.
                      Implemented to return null, as hit detection is not
                      performed on the logical view.                    
                    <param>
                        x the X coordinate &gt;= 0                        
                    </param>
                    <param>
                        y the Y coordinate &gt;= 0                        
                    </param>
                    <param>
                        alloc the parent&apos;s allocation on entry, which should
                          be changed to the child&apos;s allocation on exit                        
                    </param>
                    <return>
                        the child view                        
                    </return>
                </javadoc>
                <method name="getViewAtPoint" type="View" line="723">
                    <params>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                        <param name="alloc" type="Rectangle"/>
                    </params>
                </method>
                <javadoc line="726">
                    Returns the allocation for a given child.
                      Implemented to do nothing, as the logical view doesn&apos;t
                      perform layout on the children.                    
                    <param>
                        index the index of the child, &gt;= 0 &amp;&amp; &lt; getViewCount()                        
                    </param>
                    <param>
                        a  the allocation to the interior of the box on entry,
                          and the allocation of the child view at the index on exit.                        
                    </param>
                </javadoc>
                <method name="childAllocation" type="void" line="734">
                    <params>
                        <param name="index" type="int"/>
                        <param name="a" type="Rectangle"/>
                    </params>
                </method>
            </class>
        </class>
    </source>