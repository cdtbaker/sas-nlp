<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text">
        <import package="java.awt"/>
        <import package="java.text.BreakIterator"/>
        <import package="javax.swing.event"/>
        <import package="java.util.BitSet"/>
        <import package="java.util.Locale"/>
        <import package="javax.swing.UIManager"/>
        <import package="sun.swing.SwingUtilities2"/>
        <import package="sun.swing.SwingUtilities2.IMPLIED_CR"/>
        <class name="GlyphView" line="10">
            <extends class="View"/>
            <implements interface="TabableView"/>
            <implements interface="Cloneable"/>
            <javadoc line="10">
                A GlyphView is a styled chunk of text that represents a view
                  mapped over an element in the text model. This view is generally
                  responsible for displaying text glyphs using character level
                  attributes in some way.
                  An implementation of the GlyphPainter class is used to do the
                  actual rendering and model/view translations.  This separates
                  rendering from layout and management of the association with
                  the model.
                  &lt;p&gt;
                  The view supports breaking for the purpose of formatting.
                  The fragments produced by breaking share the view that has
                  primary responsibility for the element (i.e. they are nested
                  classes and carry only a small amount of state of their own)
                  so they can share its resources.
                  &lt;p&gt;
                  Since this view
                  represents text that may have tabs embedded in it, it implements the
                  &lt;code&gt;TabableView&lt;/code&gt; interface.  Tabs will only be
                  expanded if this view is embedded in a container that does
                  tab expansion.  ParagraphView is an example of a container
                  that does tab expansion.
                  &lt;p&gt;                
                <since>
                    1.3                    
                </since>
                <author>
                    Timothy Prinzing                    
                </author>
            </javadoc>
            <javadoc line="37">
                Constructs a new view wrapped on an element.                
                <param>
                    elem the element                    
                </param>
            </javadoc>
            <method name="GlyphView" type="constructor" line="41">
                <params>
                    <param name="elem" type="Element"/>
                </params>
                <declaration name="parent" type="Element" line="45"/>
                <declaration name="attr" type="AttributeSet" line="46"/>
            </method>
            <javadoc line="50">
                Creates a shallow copy.  This is used by the
                  createFragment and breakView methods.                
                <return>
                    the copy                    
                </return>
            </javadoc>
            <method name="clone" type="Object" line="55">
                <declaration name="o" type="Object" line="56"/>
                <scope line="57"/>
                <scope line="60"/>
            </method>
            <javadoc line="65">
                Fetch the currently installed glyph painter.
                  If a painter has not yet been installed, and
                  a default was not yet needed, null is returned.                
            </javadoc>
            <method name="getGlyphPainter" type="GlyphPainter" line="70"/>
            <javadoc line="73">
                Sets the painter to use for rendering glyphs.                
            </javadoc>
            <method name="setGlyphPainter" type="void" line="76">
                <params>
                    <param name="p" type="GlyphPainter"/>
                </params>
            </method>
            <javadoc line="79">
                Fetch a reference to the text that occupies
                  the given range.  This is normally used by
                  the GlyphPainter to determine what characters
                  it should render glyphs for.                
                <param>
                    p0  the starting document offset >= 0                    
                </param>
                <param>
                    p1  the ending document offset >= p0                    
                </param>
                <return>
                    the <code>Segment</code> containing the text                    
                </return>
            </javadoc>
            <method name="getText" type="Segment" line="88">
                <params>
                    <param name="p0" type="int"/>
                    <param name="p1" type="int"/>
                </params>
                <declaration name="text" type="Segment" line="89"/>
                <scope line="90">
                    <declaration name="doc" type="Document" line="91"/>
                </scope>
                <scope line="94"/>
            </method>
            <javadoc line="99">
                Fetch the background color to use to render the
                  glyphs.  If there is no background color, null should
                  be returned.  This is implemented to call
                  &lt;code&gt;StyledDocument.getBackground&lt;/code&gt; if the associated
                  document is a styled document, otherwise it returns null.                
            </javadoc>
            <method name="getBackground" type="Color" line="106">
                <declaration name="doc" type="Document" line="107"/>
                <scope line="108">
                    <declaration name="attr" type="AttributeSet" line="109"/>
                    <scope line="110"/>
                </scope>
            </method>
            <javadoc line="116">
                Fetch the foreground color to use to render the
                  glyphs.  If there is no foreground color, null should
                  be returned.  This is implemented to call
                  &lt;code&gt;StyledDocument.getBackground&lt;/code&gt; if the associated
                  document is a StyledDocument.  If the associated document
                  is not a StyledDocument, the associated components foreground
                  color is used.  If there is no associated component, null
                  is returned.                
            </javadoc>
            <method name="getForeground" type="Color" line="126">
                <declaration name="doc" type="Document" line="127"/>
                <scope line="128">
                    <declaration name="attr" type="AttributeSet" line="129"/>
                </scope>
                <declaration name="c" type="Component" line="132"/>
                <scope line="133"/>
            </method>
            <javadoc line="138">
                Fetch the font that the glyphs should be based
                  upon.  This is implemented to call
                  &lt;code&gt;StyledDocument.getFont&lt;/code&gt; if the associated
                  document is a StyledDocument.  If the associated document
                  is not a StyledDocument, the associated components font
                  is used.  If there is no associated component, null
                  is returned.                
            </javadoc>
            <method name="getFont" type="Font" line="147">
                <declaration name="doc" type="Document" line="148"/>
                <scope line="149">
                    <declaration name="attr" type="AttributeSet" line="150"/>
                </scope>
                <declaration name="c" type="Component" line="153"/>
                <scope line="154"/>
            </method>
            <javadoc line="159">
                Determine if the glyphs should be underlined.  If true,
                  an underline should be drawn through the baseline.                
            </javadoc>
            <method name="isUnderline" type="boolean" line="163">
                <declaration name="attr" type="AttributeSet" line="164"/>
            </method>
            <javadoc line="167">
                Determine if the glyphs should have a strikethrough
                  line.  If true, a line should be drawn through the center
                  of the glyphs.                
            </javadoc>
            <method name="isStrikeThrough" type="boolean" line="172">
                <declaration name="attr" type="AttributeSet" line="173"/>
            </method>
            <javadoc line="176">
                Determine if the glyphs should be rendered as superscript.                
            </javadoc>
            <method name="isSubscript" type="boolean" line="179">
                <declaration name="attr" type="AttributeSet" line="180"/>
            </method>
            <javadoc line="183">
                Determine if the glyphs should be rendered as subscript.                
            </javadoc>
            <method name="isSuperscript" type="boolean" line="186">
                <declaration name="attr" type="AttributeSet" line="187"/>
            </method>
            <javadoc line="190">
                Fetch the TabExpander to use if tabs are present in this view.                
            </javadoc>
            <method name="getTabExpander" type="TabExpander" line="193"/>
            <javadoc line="196">
                Check to see that a glyph painter exists.  If a painter
                  doesn&apos;t exist, a default glyph painter will be installed.                
            </javadoc>
            <method name="checkPainter" type="void" line="200">
                <scope line="201">
                    <scope line="202">
                        <declaration name="classname" type="String" line="203"/>
                        <scope line="204">
                            <declaration name="c" type="Class" line="205"/>
                            <declaration name="loader" type="ClassLoader" line="206"/>
                            <scope line="207"/>
                            <scope line="210"/>
                            <declaration name="o" type="Object" line="213"/>
                            <scope line="214"/>
                        </scope>
                        <scope line="218"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="225">
                Determines the desired span when using the given
                  tab expansion implementation.                
                <param>
                    x the position the view would be located
                      at for the purpose of tab expansion >= 0.                    
                </param>
                <param>
                    e how to expand the tabs when encountered.                    
                </param>
                <return>
                    the desired span >= 0                    
                </return>
                <see>
                    TabableView#getTabbedSpan                    
                </see>
            </javadoc>
            <method name="getTabbedSpan" type="float" line="234">
                <params>
                    <param name="x" type="float"/>
                    <param name="e" type="TabExpander"/>
                </params>
                <declaration name="old" type="TabExpander" line="236"/>
                <scope line="238"/>
                <declaration name="p0" type="int" line="242"/>
                <declaration name="p1" type="int" line="243"/>
                <declaration name="width" type="float" line="244"/>
            </method>
            <javadoc line="247">
                Determines the span along the same axis as tab
                  expansion for a portion of the view.  This is
                  intended for use by the TabExpander for cases
                  where the tab expansion involves aligning the
                  portion of text that doesn&apos;t have whitespace
                  relative to the tab stop.  There is therefore
                  an assumption that the range given does not
                  contain tabs.
                  &lt;p&gt;
                  This method can be called while servicing the
                  getTabbedSpan or getPreferredSize.  It has to
                  arrange for its own text buffer to make the
                  measurements.                
                <param>
                    p0 the starting document offset >= 0                    
                </param>
                <param>
                    p1 the ending document offset >= p0                    
                </param>
                <return>
                    the span >= 0                    
                </return>
            </javadoc>
            <method name="getPartialSpan" type="float" line="265">
                <params>
                    <param name="p0" type="int"/>
                    <param name="p1" type="int"/>
                </params>
                <declaration name="width" type="float" line="267"/>
            </method>
            <javadoc line="270">
                Fetches the portion of the model that this view is responsible for.                
                <return>
                    the starting offset into the model                    
                </return>
                <see>
                    View#getStartOffset                    
                </see>
            </javadoc>
            <method name="getStartOffset" type="int" line="275">
                <declaration name="e" type="Element" line="276"/>
            </method>
            <javadoc line="279">
                Fetches the portion of the model that this view is responsible for.                
                <return>
                    the ending offset into the model                    
                </return>
                <see>
                    View#getEndOffset                    
                </see>
            </javadoc>
            <method name="getEndOffset" type="int" line="284">
                <declaration name="e" type="Element" line="285"/>
            </method>
            <javadoc line="288">
                Lazily initializes the selections field                
            </javadoc>
            <method name="initSelections" type="void" line="291">
                <params>
                    <param name="p0" type="int"/>
                    <param name="p1" type="int"/>
                </params>
                <declaration name="viewPosCount" type="int" line="292"/>
                <scope line="293"/>
            </method>
            <javadoc line="299">
                Renders a portion of a text style run.                
                <param>
                    g the rendering surface to use                    
                </param>
                <param>
                    a the allocated region to render into                    
                </param>
            </javadoc>
            <method name="paint" type="void" line="304">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="a" type="Shape"/>
                </params>
                <declaration name="paintedText" type="boolean" line="306"/>
                <declaration name="c" type="Component" line="307"/>
                <declaration name="p0" type="int" line="308"/>
                <declaration name="p1" type="int" line="309"/>
                <declaration name="alloc" type="Rectangle" line="310"/>
                <declaration name="bg" type="Color" line="311"/>
                <declaration name="fg" type="Color" line="312"/>
                <scope line="313"/>
                <scope line="316"/>
                <scope line="320">
                    <declaration name="tc" type="JTextComponent" line="321"/>
                    <declaration name="h" type="Highlighter" line="322"/>
                    <scope line="323"/>
                </scope>
                <scope line="327"/>
                <scope line="331">
                    <declaration name="tc" type="JTextComponent" line="332"/>
                    <declaration name="selFG" type="Color" line="333"/>
                    <scope line="334">
                        <declaration name="h" type="Highlighter.Highlight[]" line="335"/>
                        <scope line="336">
                            <declaration name="initialized" type="boolean" line="337"/>
                            <declaration name="viewSelectionCount" type="int" line="338"/>
                            <scope line="339">
                                <declaration name="highlight" type="Highlighter.Highlight" line="340"/>
                                <declaration name="hStart" type="int" line="341"/>
                                <declaration name="hEnd" type="int" line="342"/>
                                <scope line="343"/>
                                <scope line="346"/>
                                <scope line="349"/>
                                <scope line="354"/>
                            </scope>
                            <scope line="365">
                                <declaration name="curPos" type="int" line="366"/>
                                <declaration name="startPos" type="int" line="367"/>
                                <declaration name="viewLen" type="int" line="368"/>
                                <scope line="369">
                                    <scope line="371"/>
                                    <declaration name="checkSum" type="int" line="374"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="385">
                Paints the specified region of text in the specified color.                
            </javadoc>
            <method name="paintTextUsingColor" type="void" line="388">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="a" type="Shape"/>
                    <param name="c" type="Color"/>
                    <param name="p0" type="int"/>
                    <param name="p1" type="int"/>
                </params>
                <declaration name="underline" type="boolean" line="391"/>
                <declaration name="strike" type="boolean" line="392"/>
                <scope line="393">
                    <declaration name="alloc" type="Rectangle" line="394"/>
                    <declaration name="parent" type="View" line="395"/>
                    <scope line="396">
                        <declaration name="s" type="Segment" line="397"/>
                        <scope line="398"/>
                    </scope>
                    <declaration name="x0" type="int" line="404"/>
                    <declaration name="p" type="int" line="405"/>
                    <scope line="406"/>
                    <declaration name="x1" type="int" line="409"/>
                    <declaration name="y" type="int" line="410"/>
                    <scope line="411">
                        <declaration name="yTmp" type="int" line="412"/>
                    </scope>
                    <scope line="415">
                        <declaration name="yTmp" type="int" line="416"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="421">
                Determines the minimum span for this view along an axis.
                  &lt;p&gt;This implementation returns the longest non-breakable area within
                  the view as a minimum span for {@code View.X_AXIS}.&lt;/p&gt;                
                <param>
                    axis  may be either {@code View.X_AXIS} or {@code View.Y_AXIS}                    
                </param>
                <return>
                    the minimum span the view can be rendered into                    
                </return>
                <throws>
                    IllegalArgumentException if the {@code axis} parameter is invalid                    
                </throws>
                <see>
                    javax.swing.text.View#getMinimumSpan                    
                </see>
            </javadoc>
            <method name="getMinimumSpan" type="float" line="430">
                <params>
                    <param name="axis" type="int"/>
                </params>
                <scope line="433">
                    <declaration name="p0" type="int" line="435"/>
                    <declaration name="p1" type="int" line="436"/>
                    <scope line="437">
                        <declaration name="breakSpot" type="int" line="438"/>
                        <scope line="439"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="453">
                Determines the preferred span for this view along an
                  axis.                
                <param>
                    axis may be either View.X_AXIS or View.Y_AXIS                    
                </param>
                <return>
                    the span the view would like to be rendered into >= 0.
                      Typically the view is told to render into the span
                      that is returned, although there is no guarantee.
                      The parent may choose to resize or break the view.                    
                </return>
            </javadoc>
            <method name="getPreferredSpan" type="float" line="462">
                <params>
                    <param name="axis" type="int"/>
                </params>
                <scope line="463"/>
                <declaration name="p0" type="int" line="467"/>
                <declaration name="p1" type="int" line="468"/>
                <scope line="471"/>
                <declaration name="h" type="float" line="476"/>
                <scope line="477"/>
            </method>
            <javadoc line="485">
                Determines the desired alignment for this view along an
                  axis.  For the label, the alignment is along the font
                  baseline for the y axis, and the superclasses alignment
                  along the x axis.                
                <param>
                    axis may be either View.X_AXIS or View.Y_AXIS                    
                </param>
                <return>
                    the desired alignment.  This should be a value
                      between 0.0 and 1.0 inclusive, where 0 indicates alignment at the
                      origin and 1.0 indicates alignment to the full span
                      away from the origin.  An alignment of 0.5 would be the
                      center of the view.                    
                </return>
            </javadoc>
            <method name="getAlignment" type="float" line="497">
                <params>
                    <param name="axis" type="int"/>
                </params>
                <scope line="499">
                    <declaration name="sup" type="boolean" line="500"/>
                    <declaration name="sub" type="boolean" line="501"/>
                    <declaration name="h" type="float" line="502"/>
                    <declaration name="d" type="float" line="503"/>
                    <declaration name="a" type="float" line="504"/>
                    <declaration name="align" type="float" line="505"/>
                    <scope line="506"/>
                    <scope line="509"/>
                    <scope line="512"/>
                </scope>
            </method>
            <javadoc line="519">
                Provides a mapping from the document model coordinate space
                  to the coordinate space of the view mapped to it.                
                <param>
                    pos the position to convert >= 0                    
                </param>
                <param>
                    a   the allocated region to render into                    
                </param>
                <param>
                    b   either <code>Position.Bias.Forward</code>
                      or <code>Position.Bias.Backward</code>                    
                </param>
                <return>
                    the bounding box of the given position                    
                </return>
                <exception>
                    BadLocationException  if the given position does not represent a
                      valid location in the associated document                    
                </exception>
                <see>
                    View#modelToView                    
                </see>
            </javadoc>
            <method name="modelToView" type="Shape" line="531">
                <params>
                    <param name="pos" type="int"/>
                    <param name="a" type="Shape"/>
                    <param name="b" type="Position.Bias"/>
                </params>
            </method>
            <javadoc line="535">
                Provides a mapping from the view coordinate space to the logical
                  coordinate space of the model.                
                <param>
                    x the X coordinate >= 0                    
                </param>
                <param>
                    y the Y coordinate >= 0                    
                </param>
                <param>
                    a the allocated region to render into                    
                </param>
                <param>
                    biasReturn either <code>Position.Bias.Forward</code>
                      or <code>Position.Bias.Backward</code> is returned as the
                      zero-th element of this array                    
                </param>
                <return>
                    the location within the model that best represents the
                      given point of view >= 0                    
                </return>
                <see>
                    View#viewToModel                    
                </see>
            </javadoc>
            <method name="viewToModel" type="int" line="548">
                <params>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                    <param name="a" type="Shape"/>
                    <param name="biasReturn" type="Position.Bias[]"/>
                </params>
            </method>
            <javadoc line="552">
                Determines how attractive a break opportunity in
                  this view is.  This can be used for determining which
                  view is the most attractive to call &lt;code&gt;breakView&lt;/code&gt;
                  on in the process of formatting.  The
                  higher the weight, the more attractive the break.  A
                  value equal to or lower than &lt;code&gt;View.BadBreakWeight&lt;/code&gt;
                  should not be considered for a break.  A value greater
                  than or equal to &lt;code&gt;View.ForcedBreakWeight&lt;/code&gt; should
                  be broken.
                  &lt;p&gt;
                  This is implemented to forward to the superclass for
                  the Y_AXIS.  Along the X_AXIS the following values
                  may be returned.
                  &lt;dl&gt;
                  &lt;dt&gt;&lt;b&gt;View.ExcellentBreakWeight&lt;/b&gt;
                  &lt;dd&gt;if there is whitespace proceeding the desired break
                  location.
                  &lt;dt&gt;&lt;b&gt;View.BadBreakWeight&lt;/b&gt;
                  &lt;dd&gt;if the desired break location results in a break
                  location of the starting offset.
                  &lt;dt&gt;&lt;b&gt;View.GoodBreakWeight&lt;/b&gt;
                  &lt;dd&gt;if the other conditions don&apos;t occur.
                  &lt;/dl&gt;
                  This will normally result in the behavior of breaking
                  on a whitespace location if one can be found, otherwise
                  breaking between characters.                
                <param>
                    axis may be either View.X_AXIS or View.Y_AXIS                    
                </param>
                <param>
                    pos the potential location of the start of the
                      broken view >= 0.  This may be useful for calculating tab
                      positions.                    
                </param>
                <param>
                    len specifies the relative length from <em>pos</em>
                      where a potential break is desired >= 0.                    
                </param>
                <return>
                    the weight, which should be a value between
                      View.ForcedBreakWeight and View.BadBreakWeight.                    
                </return>
                <see>
                    LabelView                    
                </see>
                <see>
                    ParagraphView                    
                </see>
                <see>
                    View#BadBreakWeight                    
                </see>
                <see>
                    View#GoodBreakWeight                    
                </see>
                <see>
                    View#ExcellentBreakWeight                    
                </see>
                <see>
                    View#ForcedBreakWeight                    
                </see>
            </javadoc>
            <method name="getBreakWeight" type="int" line="594">
                <params>
                    <param name="axis" type="int"/>
                    <param name="pos" type="float"/>
                    <param name="len" type="float"/>
                </params>
                <scope line="595">
                    <declaration name="p0" type="int" line="597"/>
                    <declaration name="p1" type="int" line="598"/>
                </scope>
            </method>
            <javadoc line="603">
                Breaks this view on the given axis at the given length.
                  This is implemented to attempt to break on a whitespace
                  location, and returns a fragment with the whitespace at
                  the end.  If a whitespace location can&apos;t be found, the
                  nearest character is used.                
                <param>
                    axis may be either View.X_AXIS or View.Y_AXIS                    
                </param>
                <param>
                    p0 the location in the model where the
                      fragment should start it's representation >= 0.                    
                </param>
                <param>
                    pos the position along the axis that the
                      broken view would occupy >= 0.  This may be useful for
                      things like tab calculations.                    
                </param>
                <param>
                    len specifies the distance along the axis
                      where a potential break is desired >= 0.                    
                </param>
                <return>
                    the fragment of the view that represents the
                      given span, if the view can be broken.  If the view
                      doesn't support breaking behavior, the view itself is
                      returned.                    
                </return>
                <see>
                    View#breakView                    
                </see>
            </javadoc>
            <method name="breakView" type="View" line="623">
                <params>
                    <param name="axis" type="int"/>
                    <param name="p0" type="int"/>
                    <param name="pos" type="float"/>
                    <param name="len" type="float"/>
                </params>
                <scope line="624">
                    <declaration name="p1" type="int" line="626"/>
                    <declaration name="breakSpot" type="int" line="627"/>
                    <scope line="628"/>
                    <scope line="631"/>
                    <declaration name="v" type="GlyphView" line="634"/>
                </scope>
            </method>
            <javadoc line="640">
                Returns a location to break at in the passed in region, or
                  BreakIterator.DONE if there isn&apos;t a good location to break at
                  in the specified region.                
            </javadoc>
            <method name="getBreakSpot" type="int" line="645">
                <params>
                    <param name="p0" type="int"/>
                    <param name="p1" type="int"/>
                </params>
                <scope line="646">
                    <declaration name="start" type="int" line="647"/>
                    <declaration name="end" type="int" line="648"/>
                    <declaration name="bs" type="int[]" line="649"/>
                    <declaration name="ix" type="int" line="650"/>
                    <declaration name="parent" type="Element" line="651"/>
                    <declaration name="pstart" type="int" line="652"/>
                    <declaration name="pend" type="int" line="653"/>
                    <declaration name="s" type="Segment" line="654"/>
                    <declaration name="breaker" type="BreakIterator" line="656"/>
                    <declaration name="startFrom" type="int" line="658"/>
                    <scope line="659">
                        <scope line="661"/>
                        <scope line="664"/>
                    </scope>
                </scope>
                <declaration name="breakSpot" type="int" line="672"/>
                <scope line="673">
                    <declaration name="bsp" type="int" line="674"/>
                    <scope line="675">
                        <scope line="676"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="684">
                Return break iterator appropriate for the current document.
                  For non-i18n documents a fast whitespace-based break iterator is used.                
            </javadoc>
            <method name="getBreaker" type="BreakIterator" line="688">
                <declaration name="doc" type="Document" line="689"/>
                <scope line="690">
                    <declaration name="c" type="Container" line="691"/>
                    <declaration name="locale" type="Locale" line="692"/>
                </scope>
                <scope line="695"/>
            </method>
            <javadoc line="699">
                Creates a view that represents a portion of the element.
                  This is potentially useful during formatting operations
                  for taking measurements of fragments of the view.  If
                  the view doesn&apos;t support fragmenting (the default), it
                  should return itself.
                  &lt;p&gt;
                  This view does support fragmenting.  It is implemented
                  to return a nested class that shares state in this view
                  representing only a portion of the view.                
                <param>
                    p0 the starting offset >= 0.  This should be a value
                      greater or equal to the element starting offset and
                      less than the element ending offset.                    
                </param>
                <param>
                    p1 the ending offset > p0.  This should be a value
                      less than or equal to the elements end offset and
                      greater than the elements starting offset.                    
                </param>
                <return>
                    the view fragment, or itself if the view doesn't
                      support breaking into fragments                    
                </return>
                <see>
                    LabelView                    
                </see>
            </javadoc>
            <method name="createFragment" type="View" line="719">
                <params>
                    <param name="p0" type="int"/>
                    <param name="p1" type="int"/>
                </params>
                <declaration name="elem" type="Element" line="721"/>
                <declaration name="v" type="GlyphView" line="722"/>
            </method>
            <javadoc line="729">
                Provides a way to determine the next visually represented model
                  location that one might place a caret.  Some views may not be
                  visible, they might not be in the same order found in the model, or
                  they just might not allow access to some of the locations in the
                  model.                
                <param>
                    pos the position to convert >= 0                    
                </param>
                <param>
                    a the allocated region to render into                    
                </param>
                <param>
                    direction the direction from the current position that can
                      be thought of as the arrow keys typically found on a keyboard.
                      This may be SwingConstants.WEST, SwingConstants.EAST,
                      SwingConstants.NORTH, or SwingConstants.SOUTH.                    
                </param>
                <return>
                    the location within the model that best represents the next
                      location visual position.                    
                </return>
                <exception>
                    BadLocationException                    
                </exception>
                <exception>
                    IllegalArgumentException for an invalid direction                    
                </exception>
            </javadoc>
            <method name="getNextVisualPositionFrom" type="int" line="746">
                <params>
                    <param name="pos" type="int"/>
                    <param name="b" type="Position.Bias"/>
                    <param name="a" type="Shape"/>
                    <param name="direction" type="int"/>
                    <param name="biasRet" type="Position.Bias[]"/>
                </params>
            </method>
            <javadoc line="749">
                Gives notification that something was inserted into
                  the document in a location that this view is responsible for.
                  This is implemented to call preferenceChanged along the
                  axis the glyphs are rendered.                
                <param>
                    e the change information from the associated document                    
                </param>
                <param>
                    a the current allocation of the view                    
                </param>
                <param>
                    f the factory to use to rebuild if the view has children                    
                </param>
                <see>
                    View#insertUpdate                    
                </see>
            </javadoc>
            <method name="insertUpdate" type="void" line="759">
                <params>
                    <param name="e" type="DocumentEvent"/>
                    <param name="a" type="Shape"/>
                    <param name="f" type="ViewFactory"/>
                </params>
            </method>
            <javadoc line="766">
                Gives notification that something was removed from the document
                  in a location that this view is responsible for.
                  This is implemented to call preferenceChanged along the
                  axis the glyphs are rendered.                
                <param>
                    e the change information from the associated document                    
                </param>
                <param>
                    a the current allocation of the view                    
                </param>
                <param>
                    f the factory to use to rebuild if the view has children                    
                </param>
                <see>
                    View#removeUpdate                    
                </see>
            </javadoc>
            <method name="removeUpdate" type="void" line="776">
                <params>
                    <param name="e" type="DocumentEvent"/>
                    <param name="a" type="Shape"/>
                    <param name="f" type="ViewFactory"/>
                </params>
            </method>
            <javadoc line="783">
                Gives notification from the document that attributes were changed
                  in a location that this view is responsible for.
                  This is implemented to call preferenceChanged along both the
                  horizontal and vertical axis.                
                <param>
                    e the change information from the associated document                    
                </param>
                <param>
                    a the current allocation of the view                    
                </param>
                <param>
                    f the factory to use to rebuild if the view has children                    
                </param>
                <see>
                    View#changedUpdate                    
                </see>
            </javadoc>
            <method name="changedUpdate" type="void" line="793">
                <params>
                    <param name="e" type="DocumentEvent"/>
                    <param name="a" type="Shape"/>
                    <param name="f" type="ViewFactory"/>
                </params>
            </method>
            <method name="syncCR" type="void" line="798">
                <scope line="799">
                    <declaration name="parent" type="Element" line="800"/>
                </scope>
            </method>
            <class name="JustificationInfo" line="804">
                <javadoc line="804">
                    Class to hold data needed to justify this GlyphView in a PargraphView.Row                    
                </javadoc>
                <declaration name="start" type="int" line="808"/>
                <declaration name="end" type="int" line="809"/>
                <declaration name="leadingSpaces" type="int" line="810"/>
                <declaration name="contentSpaces" type="int" line="811"/>
                <declaration name="trailingSpaces" type="int" line="812"/>
                <declaration name="hasTab" type="boolean" line="813"/>
                <declaration name="spaceMap" type="BitSet" line="814"/>
                <method name="JustificationInfo" type="constructor" line="815">
                    <params>
                        <param name="start" type="int"/>
                        <param name="end" type="int"/>
                        <param name="leadingSpaces" type="int"/>
                        <param name="contentSpaces" type="int"/>
                        <param name="trailingSpaces" type="int"/>
                        <param name="hasTab" type="boolean"/>
                        <param name="spaceMap" type="BitSet"/>
                    </params>
                </method>
            </class>
            <method name="getJustificationInfo" type="JustificationInfo" line="825">
                <params>
                    <param name="rowStartOffset" type="int"/>
                </params>
                <scope line="826"/>
                <declaration name="TRAILING" type="int" line="829"/>
                <declaration name="CONTENT" type="int" line="830"/>
                <declaration name="SPACES" type="int" line="831"/>
                <declaration name="startOffset" type="int" line="832"/>
                <declaration name="endOffset" type="int" line="833"/>
                <declaration name="segment" type="Segment" line="834"/>
                <declaration name="txtOffset" type="int" line="835"/>
                <declaration name="txtEnd" type="int" line="836"/>
                <declaration name="startContentPosition" type="int" line="837"/>
                <declaration name="endContentPosition" type="int" line="838"/>
                <declaration name="lastTabPosition" type="int" line="839"/>
                <declaration name="trailingSpaces" type="int" line="840"/>
                <declaration name="contentSpaces" type="int" line="841"/>
                <declaration name="leadingSpaces" type="int" line="842"/>
                <declaration name="hasTab" type="boolean" line="843"/>
                <declaration name="spaceMap" type="BitSet" line="844"/>
                <scope line="845">
                    <scope line="846">
                        <scope line="848"/>
                        <scope line="851"/>
                        <scope line="855"/>
                    </scope>
                    <scope line="859"/>
                    <scope line="863">
                        <scope line="864">
                            <scope line="865"/>
                        </scope>
                        <scope line="870"/>
                        <scope line="872"/>
                    </scope>
                </scope>
                <declaration name="startJustifiableContent" type="int" line="880"/>
                <scope line="881"/>
                <declaration name="endJustifiableContent" type="int" line="884"/>
                <scope line="885"/>
            </method>
            <declaration name="selections" type="byte[]" line="891"/>
            <javadoc line="891">
                Used by paint() to store highlighted view positions                
            </javadoc>
            <declaration name="offset" type="int" line="895"/>
            <declaration name="length" type="int" line="896"/>
            <declaration name="impliedCR" type="boolean" line="897"/>
            <declaration name="skipWidth" type="boolean" line="898"/>
            <declaration name="expander" type="TabExpander" line="899"/>
            <javadoc line="899">
                how to expand tabs                
            </javadoc>
            <declaration name="minimumSpan" type="float" line="903"/>
            <javadoc line="903">
                Cached minimum x-span value                
            </javadoc>
            <declaration name="breakSpots" type="int[]" line="907"/>
            <javadoc line="907">
                Cached breakpoints within the view                
            </javadoc>
            <declaration name="x" type="int" line="911"/>
            <javadoc line="911">
                location for determining tab expansion against.                
            </javadoc>
            <declaration name="painter" type="GlyphPainter" line="915"/>
            <javadoc line="915">
                Glyph rendering functionality.                
            </javadoc>
            <declaration name="defaultPainter" type="GlyphPainter" line="919"/>
            <javadoc line="919">
                The prototype painter used by default.                
            </javadoc>
            <declaration name="justificationInfo" type="JustificationInfo" line="923"/>
            <class name="GlyphPainter" line="924">
                <javadoc line="924">
                    A class to perform rendering of the glyphs.
                      This can be implemented to be stateless, or
                      to hold some information as a cache to
                      facilitate faster rendering and model/view
                      translation.  At a minimum, the GlyphPainter
                      allows a View implementation to perform its
                      duties independant of a particular version
                      of JVM and selection of capabilities (i.e.
                      shaping for i18n, etc).                    
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <method name="getSpan" type="float" line="937"/>
                <javadoc line="937">
                    Determine the span the glyphs given a start location
                      (for tab expansion).                    
                </javadoc>
                <method name="getHeight" type="float" line="942"/>
                <method name="getAscent" type="float" line="943"/>
                <method name="getDescent" type="float" line="944"/>
                <method name="paint" type="void" line="945"/>
                <javadoc line="945">
                    Paint the glyphs representing the given range.                    
                </javadoc>
                <method name="modelToView" type="Shape" line="949"/>
                <javadoc line="949">
                    Provides a mapping from the document model coordinate space
                      to the coordinate space of the view mapped to it.
                      This is shared by the broken views.                    
                    <param>
                        v     the <code>GlyphView</code> containing the
                          destination coordinate space                        
                    </param>
                    <param>
                        pos   the position to convert                        
                    </param>
                    <param>
                        bias  either <code>Position.Bias.Forward</code>
                          or <code>Position.Bias.Backward</code>                        
                    </param>
                    <param>
                        a     Bounds of the View                        
                    </param>
                    <return>
                        the bounding box of the given position                        
                    </return>
                    <exception>
                        BadLocationException  if the given position does not represent a
                          valid location in the associated document                        
                    </exception>
                    <see>
                        View#modelToView                        
                    </see>
                </javadoc>
                <method name="viewToModel" type="int" line="965"/>
                <javadoc line="965">
                    Provides a mapping from the view coordinate space to the logical
                      coordinate space of the model.                    
                    <param>
                        v          the <code>GlyphView</code> to provide a mapping for                        
                    </param>
                    <param>
                        x          the X coordinate                        
                    </param>
                    <param>
                        y          the Y coordinate                        
                    </param>
                    <param>
                        a          the allocated region to render into                        
                    </param>
                    <param>
                        biasReturn either <code>Position.Bias.Forward</code>
                          or <code>Position.Bias.Backward</code>
                          is returned as the zero-th element of this array                        
                    </param>
                    <return>
                        the location within the model that best represents the
                          given point of view                        
                    </return>
                    <see>
                        View#viewToModel                        
                    </see>
                </javadoc>
                <method name="getBoundedPosition" type="int" line="980"/>
                <javadoc line="980">
                    Determines the model location that represents the
                      maximum advance that fits within the given span.
                      This could be used to break the given view.  The result
                      should be a location just shy of the given advance.  This
                      differs from viewToModel which returns the closest
                      position which might be proud of the maximum advance.                    
                    <param>
                        v the view to find the model location to break at.                        
                    </param>
                    <param>
                        p0 the location in the model where the
                          fragment should start it's representation >= 0.                        
                    </param>
                    <param>
                        x  the graphic location along the axis that the
                          broken view would occupy >= 0.  This may be useful for
                          things like tab calculations.                        
                    </param>
                    <param>
                        len specifies the distance into the view
                          where a potential break is desired >= 0.                        
                    </param>
                    <return>
                        the maximum model location possible for a break.                        
                    </return>
                    <see>
                        View#breakView                        
                    </see>
                </javadoc>
                <javadoc line="999">
                    Create a painter to use for the given GlyphView.  If
                      the painter carries state it can create another painter
                      to represent a new GlyphView that is being created.  If
                      the painter doesn&apos;t hold any significant state, it can
                      return itself.  The default behavior is to return itself.                    
                    <param>
                        v  the <code>GlyphView</code> to provide a painter for                        
                    </param>
                    <param>
                        p0 the starting document offset >= 0                        
                    </param>
                    <param>
                        p1 the ending document offset >= p0                        
                    </param>
                </javadoc>
                <method name="getPainter" type="GlyphPainter" line="1009">
                    <params>
                        <param name="v" type="GlyphView"/>
                        <param name="p0" type="int"/>
                        <param name="p1" type="int"/>
                    </params>
                </method>
                <javadoc line="1012">
                    Provides a way to determine the next visually represented model
                      location that one might place a caret.  Some views may not be
                      visible, they might not be in the same order found in the model, or
                      they just might not allow access to some of the locations in the
                      model.                    
                    <param>
                        v the view to use                        
                    </param>
                    <param>
                        pos the position to convert >= 0                        
                    </param>
                    <param>
                        b   either <code>Position.Bias.Forward</code>
                          or <code>Position.Bias.Backward</code>                        
                    </param>
                    <param>
                        a the allocated region to render into                        
                    </param>
                    <param>
                        direction the direction from the current position that can
                          be thought of as the arrow keys typically found on a keyboard.
                          This may be SwingConstants.WEST, SwingConstants.EAST,
                          SwingConstants.NORTH, or SwingConstants.SOUTH.                        
                    </param>
                    <param>
                        biasRet  either <code>Position.Bias.Forward</code>
                          or <code>Position.Bias.Backward</code>
                          is returned as the zero-th element of this array                        
                    </param>
                    <return>
                        the location within the model that best represents the next
                          location visual position.                        
                    </return>
                    <exception>
                        BadLocationException                        
                    </exception>
                    <exception>
                        IllegalArgumentException for an invalid direction                        
                    </exception>
                </javadoc>
                <method name="getNextVisualPositionFrom" type="int" line="1035">
                    <params>
                        <param name="v" type="GlyphView"/>
                        <param name="pos" type="int"/>
                        <param name="b" type="Position.Bias"/>
                        <param name="a" type="Shape"/>
                        <param name="direction" type="int"/>
                        <param name="biasRet" type="Position.Bias[]"/>
                    </params>
                    <declaration name="startOffset" type="int" line="1036"/>
                    <declaration name="endOffset" type="int" line="1037"/>
                    <declaration name="text" type="Segment" line="1038"/>
                    <scope line="1042"/>
                    <declaration name="container" type="Container" line="1045"/>
                    <scope line="1046">
                        <declaration name="c" type="Caret" line="1047"/>
                        <declaration name="magicPoint" type="Point" line="1048"/>
                        <scope line="1050"/>
                        <declaration name="value" type="int" line="1054"/>
                    </scope>
                    <scope line="1059">
                        <scope line="1060"/>
                    </scope>
                    <scope line="1066"/>
                    <scope line="1070"/>
                    <scope line="1073"/>
                    <scope line="1076"/>
                    <scope line="1081">
                        <scope line="1082"/>
                    </scope>
                    <scope line="1088"/>
                    <scope line="1092"/>
                </method>
            </class>
        </class>
    </source>