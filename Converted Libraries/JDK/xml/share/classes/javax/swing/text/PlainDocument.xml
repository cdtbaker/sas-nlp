<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text">
        <import package="java.util.Vector"/>
        <class name="PlainDocument" line="29">
            <extends class="AbstractDocument"/>
            <comment line="285">
                                
            </comment>
            <comment line="286">
                Inserts the composed text of an input method. The line element                
            </comment>
            <comment line="287">
                where the composed text is inserted into becomes an branch element                
            </comment>
            <comment line="288">
                which contains leaf elements of the composed text and the text                
            </comment>
            <comment line="289">
                backing store.                
            </comment>
            <comment line="290">
                                
            </comment>
            <javadoc line="29">
                A plain document that maintains no character attributes.  The
                  default element structure for this document is a map of the lines in
                  the text.  The Element returned by getDefaultRootElement is
                  a map of the lines, and each child element represents a line.
                  This model does not maintain any character level attributes,
                  but each line can be tagged with an arbitrary set of attributes.
                  Line to offset, and offset to line translations can be quickly
                  performed using the default root element.  The structure information
                  of the DocumentEvent&apos;s fired by edits will indicate the line
                  structure changes.
                  &lt;p&gt;
                  The default content storage management is performed by a
                  gapped buffer implementation (GapContent).  It supports
                  editing reasonably large documents with good efficiency when
                  the edits are contiguous or clustered, as is typical.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <author>
                    Timothy Prinzing                    
                </author>
                <see>
                    Document                    
                </see>
                <see>
                    AbstractDocument                    
                </see>
            </javadoc>
            <declaration name="tabSizeAttribute" type="String" line="61"/>
            <javadoc line="61">
                Name of the attribute that specifies the tab
                  size for tabs contained in the content.  The
                  type for the value is Integer.                
            </javadoc>
            <declaration name="lineLimitAttribute" type="String" line="68"/>
            <javadoc line="68">
                Name of the attribute that specifies the maximum
                  length of a line, if there is a maximum length.
                  The type for the value is Integer.                
            </javadoc>
            <javadoc line="75">
                Constructs a plain text document.  A default model using
                  &lt;code&gt;GapContent&lt;/code&gt; is constructed and set.                
            </javadoc>
            <method name="PlainDocument" type="constructor" line="79"/>
            <javadoc line="83">
                Constructs a plain text document.  A default root element is created,
                  and the tab size set to 8.                
                <param>
                    c  the container for the content                    
                </param>
            </javadoc>
            <method name="PlainDocument" type="constructor" line="89">
                <params>
                    <param name="c" type="Content"/>
                </params>
            </method>
            <javadoc line="95">
                Inserts some content into the document.
                  Inserting content causes a write lock to be held while the
                  actual changes are taking place, followed by notification
                  to the observers on the thread that grabbed the write lock.
                  &lt;p&gt;
                  This method is thread safe, although most Swing methods
                  are not. Please see
                  &lt;A HREF=&quot;http://java.sun.com/docs/books/tutorial/uiswing/misc/threads.html&quot;&gt;How
                  to Use Threads&lt;/A&gt; for more information.                
                <param>
                    offs the starting offset >= 0                    
                </param>
                <param>
                    str the string to insert; does nothing with null/empty strings                    
                </param>
                <param>
                    a the attributes for the inserted content                    
                </param>
                <exception>
                    BadLocationException  the given insert position is not a valid
                      position within the document                    
                </exception>
                <see>
                    Document#insertString                    
                </see>
            </javadoc>
            <method name="insertString" type="void" line="113">
                <params>
                    <param name="offs" type="int"/>
                    <param name="str" type="String"/>
                    <param name="a" type="AttributeSet"/>
                </params>
                <comment line="114">
                    fields don&apos;t want to have multiple lines.  We may provide a field-specific                    
                </comment>
                <comment line="115">
                    model in the future in which case the filtering logic here will no longer                    
                </comment>
                <comment line="116">
                    be needed.                    
                </comment>
                <declaration name="filterNewlines" type="Object" line="117"/>
                <scope line="118">
                    <scope line="119">
                        <declaration name="filtered" type="StringBuilder" line="120"/>
                        <declaration name="n" type="int" line="121"/>
                        <scope line="122">
                            <scope line="123"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="133">
                Gets the default root element for the document model.                
                <return>
                    the root                    
                </return>
                <see>
                    Document#getDefaultRootElement                    
                </see>
            </javadoc>
            <method name="getDefaultRootElement" type="Element" line="139"/>
            <javadoc line="143">
                Creates the root element to be used to represent the
                  default document structure.                
                <return>
                    the element base                    
                </return>
            </javadoc>
            <method name="createDefaultRoot" type="AbstractElement" line="149">
                <declaration name="map" type="BranchElement" line="150"/>
                <declaration name="line" type="Element" line="151"/>
                <declaration name="lines" type="Element[]" line="152"/>
            </method>
            <javadoc line="158">
                Get the paragraph element containing the given position.  Since this
                  document only models lines, it returns the line instead.                
            </javadoc>
            <method name="getParagraphElement" type="Element" line="162">
                <params>
                    <param name="pos" type="int"/>
                </params>
                <declaration name="lineMap" type="Element" line="163"/>
            </method>
            <javadoc line="167">
                Updates document structure as a result of text insertion.  This
                  will happen within a write lock.  Since this document simply
                  maps out lines, we refresh the line map.                
                <param>
                    chng the change event describing the dit                    
                </param>
                <param>
                    attr the set of attributes for the inserted text                    
                </param>
            </javadoc>
            <method name="insertUpdate" type="void" line="175">
                <params>
                    <param name="chng" type="DefaultDocumentEvent"/>
                    <param name="attr" type="AttributeSet"/>
                </params>
                <declaration name="lineMap" type="BranchElement" line="178"/>
                <declaration name="offset" type="int" line="179"/>
                <declaration name="length" type="int" line="180"/>
                <scope line="181"/>
                <declaration name="index" type="int" line="185"/>
                <declaration name="rmCandidate" type="Element" line="186"/>
                <declaration name="rmOffs0" type="int" line="187"/>
                <declaration name="rmOffs1" type="int" line="188"/>
                <declaration name="lastOffset" type="int" line="189"/>
                <scope line="190">
                    <scope line="191"/>
                    <declaration name="hasBreaks" type="boolean" line="195"/>
                    <scope line="196">
                        <declaration name="c" type="char" line="197"/>
                        <scope line="198">
                            <declaration name="breakOffset" type="int" line="199"/>
                        </scope>
                    </scope>
                    <scope line="205">
                        <scope line="208">
                            <declaration name="e" type="Element" line="209"/>
                        </scope>
                        <scope line="213"/>
                        <declaration name="aelems" type="Element[]" line="217"/>
                        <declaration name="relems" type="Element[]" line="219"/>
                        <declaration name="ee" type="ElementEdit" line="221"/>
                    </scope>
                    <scope line="225"/>
                </scope>
                <scope line="228"/>
            </method>
            <javadoc line="234">
                Updates any document structure as a result of text removal.
                  This will happen within a write lock. Since the structure
                  represents a line map, this just checks to see if the
                  removal spans lines.  If it does, the two lines outside
                  of the removal area are joined together.                
                <param>
                    chng the change event describing the edit                    
                </param>
            </javadoc>
            <method name="removeUpdate" type="void" line="243">
                <params>
                    <param name="chng" type="DefaultDocumentEvent"/>
                </params>
                <comment line="251">
                    a line was removed                    
                </comment>
                <comment line="265">
                    Check for the composed text element                    
                </comment>
                <declaration name="map" type="BranchElement" line="245"/>
                <declaration name="offset" type="int" line="246"/>
                <declaration name="length" type="int" line="247"/>
                <declaration name="line0" type="int" line="248"/>
                <declaration name="line1" type="int" line="249"/>
                <scope line="250">
                    <scope line="252"/>
                    <declaration name="p0" type="int" line="255"/>
                    <declaration name="p1" type="int" line="256"/>
                    <declaration name="aelems" type="Element[]" line="257"/>
                    <declaration name="relems" type="Element[]" line="259"/>
                    <declaration name="ee" type="ElementEdit" line="261"/>
                </scope>
                <scope line="264">
                    <declaration name="line" type="Element" line="266"/>
                    <scope line="267">
                        <declaration name="leaf" type="Element" line="268"/>
                        <scope line="269">
                            <declaration name="aelem" type="Element[]" line="270"/>
                            <declaration name="relem" type="Element[]" line="273"/>
                            <declaration name="ee" type="ElementEdit" line="275"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="insertComposedTextUpdate" type="void" line="290">
                <params>
                    <param name="chng" type="DefaultDocumentEvent"/>
                    <param name="attr" type="AttributeSet"/>
                </params>
                <declaration name="lineMap" type="BranchElement" line="292"/>
                <declaration name="offset" type="int" line="293"/>
                <declaration name="length" type="int" line="294"/>
                <declaration name="index" type="int" line="295"/>
                <declaration name="elem" type="Element" line="296"/>
                <declaration name="elemStart" type="int" line="297"/>
                <declaration name="elemEnd" type="int" line="298"/>
                <declaration name="abelem" type="BranchElement[]" line="299"/>
                <declaration name="relem" type="Element[]" line="301"/>
                <declaration name="alelem" type="Element[]" line="308"/>
                <declaration name="ee" type="ElementEdit" line="310"/>
            </method>
            <declaration name="defaultRoot" type="AbstractElement" line="317"/>
            <declaration name="added" type="Vector&lt;Element&gt;" line="318"/>
            <declaration name="removed" type="Vector&lt;Element&gt;" line="319"/>
            <declaration name="s" type="Segment" line="320"/>
        </class>
    </source>