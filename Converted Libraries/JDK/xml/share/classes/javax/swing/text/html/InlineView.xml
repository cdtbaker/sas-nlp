<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text.html">
        <import package="java.awt"/>
        <import package="java.text.BreakIterator"/>
        <import package="javax.swing.event.DocumentEvent"/>
        <import package="javax.swing.text"/>
        <class name="InlineView" line="32">
            <extends class="LabelView"/>
            <javadoc line="32">
                Displays the &lt;dfn&gt;inline element&lt;/dfn&gt; styles
                  based upon css attributes.                
                <author>
                    Timothy Prinzing                    
                </author>
            </javadoc>
            <javadoc line="40">
                Constructs a new view wrapped on an element.                
                <param>
                    elem the element                    
                </param>
            </javadoc>
            <method name="InlineView" type="constructor" line="45">
                <params>
                    <param name="elem" type="Element"/>
                </params>
                <declaration name="sheet" type="StyleSheet" line="47"/>
            </method>
            <javadoc line="51">
                Gives notification that something was inserted into
                  the document in a location that this view is responsible for.
                  If either parameter is &lt;code&gt;null&lt;/code&gt;, behavior of this method is
                  implementation dependent.                
                <param>
                    e the change information from the associated document                    
                </param>
                <param>
                    a the current allocation of the view                    
                </param>
                <param>
                    f the factory to use to rebuild if the view has children                    
                </param>
                <since>
                    1.5                    
                </since>
                <see>
                    View#insertUpdate                    
                </see>
            </javadoc>
            <method name="insertUpdate" type="void" line="63">
                <params>
                    <param name="e" type="DocumentEvent"/>
                    <param name="a" type="Shape"/>
                    <param name="f" type="ViewFactory"/>
                </params>
            </method>
            <javadoc line="67">
                Gives notification that something was removed from the document
                  in a location that this view is responsible for.
                  If either parameter is &lt;code&gt;null&lt;/code&gt;, behavior of this method is
                  implementation dependent.                
                <param>
                    e the change information from the associated document                    
                </param>
                <param>
                    a the current allocation of the view                    
                </param>
                <param>
                    f the factory to use to rebuild if the view has children                    
                </param>
                <since>
                    1.5                    
                </since>
                <see>
                    View#removeUpdate                    
                </see>
            </javadoc>
            <method name="removeUpdate" type="void" line="79">
                <params>
                    <param name="e" type="DocumentEvent"/>
                    <param name="a" type="Shape"/>
                    <param name="f" type="ViewFactory"/>
                </params>
            </method>
            <javadoc line="83">
                Gives notification from the document that attributes were changed
                  in a location that this view is responsible for.                
                <param>
                    e the change information from the associated document                    
                </param>
                <param>
                    a the current allocation of the view                    
                </param>
                <param>
                    f the factory to use to rebuild if the view has children                    
                </param>
                <see>
                    View#changedUpdate                    
                </see>
            </javadoc>
            <method name="changedUpdate" type="void" line="92">
                <params>
                    <param name="e" type="DocumentEvent"/>
                    <param name="a" type="Shape"/>
                    <param name="f" type="ViewFactory"/>
                </params>
                <declaration name="sheet" type="StyleSheet" line="94"/>
            </method>
            <javadoc line="99">
                Fetches the attributes to use when rendering.  This is
                  implemented to multiplex the attributes specified in the
                  model with a StyleSheet.                
            </javadoc>
            <method name="getAttributes" type="AttributeSet" line="104"/>
            <javadoc line="108">
                Determines how attractive a break opportunity in
                  this view is.  This can be used for determining which
                  view is the most attractive to call &lt;code&gt;breakView&lt;/code&gt;
                  on in the process of formatting.  A view that represents
                  text that has whitespace in it might be more attractive
                  than a view that has no whitespace, for example.  The
                  higher the weight, the more attractive the break.  A
                  value equal to or lower than &lt;code&gt;BadBreakWeight&lt;/code&gt;
                  should not be considered for a break.  A value greater
                  than or equal to &lt;code&gt;ForcedBreakWeight&lt;/code&gt; should
                  be broken.
                  &lt;p&gt;
                  This is implemented to provide the default behavior
                  of returning &lt;code&gt;BadBreakWeight&lt;/code&gt; unless the length
                  is greater than the length of the view in which case the
                  entire view represents the fragment.  Unless a view has
                  been written to support breaking behavior, it is not
                  attractive to try and break the view.  An example of
                  a view that does support breaking is &lt;code&gt;LabelView&lt;/code&gt;.
                  An example of a view that uses break weight is
                  &lt;code&gt;ParagraphView&lt;/code&gt;.                
                <param>
                    axis may be either View.X_AXIS or View.Y_AXIS                    
                </param>
                <param>
                    pos the potential location of the start of the
                      broken view >= 0.  This may be useful for calculating tab
                      positions.                    
                </param>
                <param>
                    len specifies the relative length from <em>pos</em>
                      where a potential break is desired >= 0.                    
                </param>
                <return>
                    the weight, which should be a value between
                      ForcedBreakWeight and BadBreakWeight.                    
                </return>
                <see>
                    LabelView                    
                </see>
                <see>
                    ParagraphView                    
                </see>
                <see>
                    javax.swing.text.View#BadBreakWeight                    
                </see>
                <see>
                    javax.swing.text.View#GoodBreakWeight                    
                </see>
                <see>
                    javax.swing.text.View#ExcellentBreakWeight                    
                </see>
                <see>
                    javax.swing.text.View#ForcedBreakWeight                    
                </see>
            </javadoc>
            <method name="getBreakWeight" type="int" line="146">
                <params>
                    <param name="axis" type="int"/>
                    <param name="pos" type="float"/>
                    <param name="len" type="float"/>
                </params>
                <scope line="147"/>
            </method>
            <javadoc line="153">
                Tries to break this view on the given axis. Refer to{@link javax.swing.text.View#breakView} for a complete
                  description of this method.
                  &lt;p&gt;Behavior of this method is unspecified in case &lt;code&gt;axis&lt;/code&gt;
                  is neither &lt;code&gt;View.X_AXIS&lt;/code&gt; nor &lt;code&gt;View.Y_AXIS&lt;/code&gt;, and
                  in case &lt;code&gt;offset&lt;/code&gt;, &lt;code&gt;pos&lt;/code&gt;, or &lt;code&gt;len&lt;/code&gt;
                  is null.                
                <param>
                    axis may be either <code>View.X_AXIS</code> or
                      <code>View.Y_AXIS</code>                    
                </param>
                <param>
                    offset the location in the document model
                      that a broken fragment would occupy >= 0.  This
                      would be the starting offset of the fragment
                      returned                    
                </param>
                <param>
                    pos the position along the axis that the
                      broken view would occupy >= 0.  This may be useful for
                      things like tab calculations                    
                </param>
                <param>
                    len specifies the distance along the axis
                      where a potential break is desired >= 0                    
                </param>
                <return>
                    the fragment of the view that represents the
                      given span.                    
                </return>
                <since>
                    1.5                    
                </since>
                <see>
                    javax.swing.text.View#breakView                    
                </see>
            </javadoc>
            <method name="breakView" type="View" line="178">
                <params>
                    <param name="axis" type="int"/>
                    <param name="offset" type="int"/>
                    <param name="pos" type="float"/>
                    <param name="len" type="float"/>
                </params>
            </method>
            <javadoc line="183">
                Set the cached properties from the attributes.                
            </javadoc>
            <method name="setPropertiesFromAttributes" type="void" line="186">
                <comment line="211">
                    fetches background color from stylesheet if specified                    
                </comment>
                <declaration name="a" type="AttributeSet" line="188"/>
                <declaration name="decor" type="Object" line="189"/>
                <declaration name="u" type="boolean" line="190"/>
                <declaration name="s" type="boolean" line="193"/>
                <declaration name="vAlign" type="Object" line="196"/>
                <declaration name="whitespace" type="Object" line="202"/>
                <scope line="203"/>
                <scope line="205"/>
                <declaration name="doc" type="HTMLDocument" line="209"/>
                <declaration name="bg" type="Color" line="211"/>
                <scope line="212"/>
            </method>
            <method name="getStyleSheet" type="StyleSheet" line="218">
                <declaration name="doc" type="HTMLDocument" line="219"/>
            </method>
            <declaration name="nowrap" type="boolean" line="223"/>
            <declaration name="attr" type="AttributeSet" line="224"/>
        </class>
    </source>