<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text">
        <import package="java.awt.event"/>
        <import package="java.text"/>
        <import package="java.util"/>
        <import package="javax.swing"/>
        <import package="javax.swing.text"/>
        <class name="DateFormatter" line="33">
            <extends class="InternationalFormatter"/>
            <javadoc line="33">
                DateFormatter is an &lt;code&gt;InternationalFormatter&lt;/code&gt; that does its
                  formatting by way of an instance of &lt;code&gt;java.text.DateFormat&lt;/code&gt;.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <see>
                    java.text.DateFormat                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <javadoc line="51">
                This is shorthand for
                  &lt;code&gt;new DateFormatter(DateFormat.getDateInstance())&lt;/code&gt;.                
            </javadoc>
            <method name="DateFormatter" type="constructor" line="55"/>
            <javadoc line="59">
                Returns a DateFormatter configured with the specified
                  &lt;code&gt;Format&lt;/code&gt; instance.                
                <param>
                    format Format used to dictate legal values                    
                </param>
            </javadoc>
            <method name="DateFormatter" type="constructor" line="65">
                <params>
                    <param name="format" type="DateFormat"/>
                </params>
            </method>
            <javadoc line="70">
                Sets the format that dictates the legal values that can be edited
                  and displayed.
                  &lt;p&gt;
                  If you have used the nullary constructor the value of this property
                  will be determined for the current locale by way of the
                  &lt;code&gt;Dateformat.getDateInstance()&lt;/code&gt; method.                
                <param>
                    format DateFormat instance used for converting from/to Strings                    
                </param>
            </javadoc>
            <method name="setFormat" type="void" line="80">
                <params>
                    <param name="format" type="DateFormat"/>
                </params>
            </method>
            <javadoc line="84">
                Returns the Calendar that &lt;code&gt;DateFormat&lt;/code&gt; is associated with,
                  or if the &lt;code&gt;Format&lt;/code&gt; is not a &lt;code&gt;DateFormat&lt;/code&gt;
                  &lt;code&gt;Calendar.getInstance&lt;/code&gt; is returned.                
            </javadoc>
            <method name="getCalendar" type="Calendar" line="89">
                <declaration name="f" type="Format" line="90"/>
                <scope line="92"/>
            </method>
            <javadoc line="99">
                Returns true, as DateFormatterFilter will support
                  incrementing/decrementing of the value.                
            </javadoc>
            <method name="getSupportsIncrement" type="boolean" line="103"/>
            <javadoc line="107">
                Returns the field that will be adjusted by adjustValue.                
            </javadoc>
            <method name="getAdjustField" type="Object" line="110">
                <params>
                    <param name="start" type="int"/>
                    <param name="attributes" type="Map"/>
                </params>
                <declaration name="attrs" type="Iterator" line="111"/>
                <scope line="113">
                    <declaration name="key" type="Object" line="114"/>
                    <scope line="118"/>
                </scope>
            </method>
            <javadoc line="125">
                Adjusts the Date if FieldPosition identifies a known calendar
                  field.                
            </javadoc>
            <method name="adjustValue" type="Object" line="131">
                <params>
                    <param name="value" type="Object"/>
                    <param name="attributes" type="Map"/>
                    <param name="key" type="Object"/>
                    <param name="direction" type="int"/>
                </params>
                <comment line="136">
                    HOUR1 has no corresponding calendar field, thus, map
                     it to HOUR0 which will give the correct behavior.                    
                </comment>
                <scope line="132">
                    <declaration name="field" type="int" line="133"/>
                    <scope line="137"/>
                    <declaration name="calendar" type="Calendar" line="142"/>
                    <scope line="144">
                        <declaration name="fieldValue" type="int" line="147"/>
                        <scope line="149"/>
                        <scope line="152"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>