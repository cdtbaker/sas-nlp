<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text">
        <import package="java.lang.reflect.Method"/>
        <import package="java.awt.Component"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.Graphics"/>
        <import package="java.awt.FontMetrics"/>
        <import package="java.awt.Shape"/>
        <import package="java.awt.Toolkit"/>
        <import package="java.awt.Graphics2D"/>
        <import package="java.awt.font.FontRenderContext"/>
        <import package="java.awt.font.TextLayout"/>
        <import package="java.awt.font.TextAttribute"/>
        <import package="java.text"/>
        <import package="javax.swing.JComponent"/>
        <import package="javax.swing.SwingConstants"/>
        <import package="javax.swing.text.ParagraphView.Row"/>
        <import package="sun.swing.SwingUtilities2"/>
        <class name="Utilities" line="46">
            <comment line="110">
                In addition to the previous method it can extend spaces for
                 justification.
                
                 all params are the same as in the preious method except the last
                 one:
                 @param justificationData justificationData for the row.
                 if null not justification is needed                
            </comment>
            <comment line="213">
                In addition to the previous method it can extend spaces for
                 justification.
                
                 all params are the same as in the preious method except the last
                 one:
                 @param justificationData justificationData for the row.
                 if null not justification is needed                
            </comment>
            <comment line="323">
                In addition to the previous method it can extend spaces for
                 justification.
                
                 all params are the same as in the preious method except the last
                 one:
                 @param justificationData justificationData for the row.
                 if null not justification is needed                
            </comment>
            <comment line="952">
                Convenience function for determining ComponentOrientation.  Helps us
                 avoid having Munge directives throughout the code.                
            </comment>
            <javadoc line="46">
                A collection of methods to deal with various text
                  related activities.                
                <author>
                    Timothy Prinzing                    
                </author>
            </javadoc>
            <javadoc line="53">
                If &lt;code&gt;view&lt;/code&gt;&apos;s container is a &lt;code&gt;JComponent&lt;/code&gt; it
                  is returned, after casting.                
            </javadoc>
            <method name="getJComponent" type="JComponent" line="57">
                <params>
                    <param name="view" type="View"/>
                </params>
                <scope line="58">
                    <declaration name="component" type="Component" line="59"/>
                    <scope line="60"/>
                </scope>
            </method>
            <javadoc line="67">
                Draws the given text, expanding any tabs that are contained
                  using the given tab expansion technique.  This particular
                  implementation renders in a 1.1 style coordinate system
                  where ints are used and 72dpi is assumed.                
                <param>
                    s  the source of the text                    
                </param>
                <param>
                    x  the X origin &gt;= 0                    
                </param>
                <param>
                    y  the Y origin &gt;= 0                    
                </param>
                <param>
                    g  the graphics context                    
                </param>
                <param>
                    e  how to expand the tabs.  If this value is null,
                      tabs will be expanded as a space character.                    
                </param>
                <param>
                    startOffset starting offset of the text in the document &gt;= 0                    
                </param>
                <return>
                    the X location at the end of the rendered text                    
                </return>
            </javadoc>
            <method name="drawTabbedText" type="int" line="83">
                <params>
                    <param name="s" type="Segment"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="g" type="Graphics"/>
                    <param name="e" type="TabExpander"/>
                    <param name="startOffset" type="int"/>
                </params>
            </method>
            <javadoc line="87">
                Draws the given text, expanding any tabs that are contained
                  using the given tab expansion technique.  This particular
                  implementation renders in a 1.1 style coordinate system
                  where ints are used and 72dpi is assumed.                
                <param>
                    view View requesting rendering, may be null.                    
                </param>
                <param>
                    s  the source of the text                    
                </param>
                <param>
                    x  the X origin &gt;= 0                    
                </param>
                <param>
                    y  the Y origin &gt;= 0                    
                </param>
                <param>
                    g  the graphics context                    
                </param>
                <param>
                    e  how to expand the tabs.  If this value is null,
                      tabs will be expanded as a space character.                    
                </param>
                <param>
                    startOffset starting offset of the text in the document &gt;= 0                    
                </param>
                <return>
                    the X location at the end of the rendered text                    
                </return>
            </javadoc>
            <method name="drawTabbedText" type="int" line="105">
                <params>
                    <param name="view" type="View"/>
                    <param name="s" type="Segment"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="g" type="Graphics"/>
                    <param name="e" type="TabExpander"/>
                    <param name="startOffset" type="int"/>
                </params>
            </method>
            <method name="drawTabbedText" type="int" line="119">
                <params>
                    <param name="view" type="View"/>
                    <param name="s" type="Segment"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="g" type="Graphics"/>
                    <param name="e" type="TabExpander"/>
                    <param name="startOffset" type="int"/>
                    <param name="justificationData" type="int[]"/>
                </params>
                <declaration name="component" type="JComponent" line="120"/>
                <declaration name="metrics" type="FontMetrics" line="121"/>
                <declaration name="nextX" type="int" line="122"/>
                <declaration name="txt" type="char[]" line="123"/>
                <declaration name="txtOffset" type="int" line="124"/>
                <declaration name="flushLen" type="int" line="125"/>
                <declaration name="flushIndex" type="int" line="126"/>
                <declaration name="spaceAddon" type="int" line="127"/>
                <declaration name="spaceAddonLeftoverEnd" type="int" line="128"/>
                <declaration name="startJustifiableContent" type="int" line="129"/>
                <declaration name="endJustifiableContent" type="int" line="130"/>
                <scope line="131">
                    <declaration name="offset" type="int" line="132"/>
                    <declaration name="parent" type="View" line="133"/>
                    <scope line="135"/>
                </scope>
                <declaration name="n" type="int" line="147"/>
                <scope line="148">
                    <scope line="154">
                        <scope line="155"/>
                        <scope line="161">
                            <scope line="162"/>
                            <scope line="164"/>
                        </scope>
                        <scope line="167">
                            <scope line="169"/>
                        </scope>
                    </scope>
                    <scope line="174">
                        <scope line="175"/>
                    </scope>
                    <scope line="182"/>
                </scope>
                <scope line="186"/>
            </method>
            <javadoc line="193">
                Determines the width of the given segment of text taking tabs
                  into consideration.  This is implemented in a 1.1 style coordinate
                  system where ints are used and 72dpi is assumed.                
                <param>
                    s  the source of the text                    
                </param>
                <param>
                    metrics the font metrics to use for the calculation                    
                </param>
                <param>
                    x  the X origin &gt;= 0                    
                </param>
                <param>
                    e  how to expand the tabs.  If this value is null,
                      tabs will be expanded as a space character.                    
                </param>
                <param>
                    startOffset starting offset of the text in the document &gt;= 0                    
                </param>
                <return>
                    the width of the text                    
                </return>
            </javadoc>
            <method name="getTabbedTextWidth" type="int" line="207">
                <params>
                    <param name="s" type="Segment"/>
                    <param name="metrics" type="FontMetrics"/>
                    <param name="x" type="int"/>
                    <param name="e" type="TabExpander"/>
                    <param name="startOffset" type="int"/>
                </params>
            </method>
            <method name="getTabbedTextWidth" type="int" line="221">
                <params>
                    <param name="view" type="View"/>
                    <param name="s" type="Segment"/>
                    <param name="metrics" type="FontMetrics"/>
                    <param name="x" type="int"/>
                    <param name="e" type="TabExpander"/>
                    <param name="startOffset" type="int"/>
                    <param name="justificationData" type="int[]"/>
                </params>
                <comment line="272">
                    Ignore newlines, they take up space and we shouldn&apos;t be
                     counting them.                    
                </comment>
                <declaration name="nextX" type="int" line="222"/>
                <declaration name="txt" type="char[]" line="223"/>
                <declaration name="txtOffset" type="int" line="224"/>
                <declaration name="n" type="int" line="225"/>
                <declaration name="charCount" type="int" line="226"/>
                <declaration name="spaceAddon" type="int" line="227"/>
                <declaration name="spaceAddonLeftoverEnd" type="int" line="228"/>
                <declaration name="startJustifiableContent" type="int" line="229"/>
                <declaration name="endJustifiableContent" type="int" line="230"/>
                <scope line="231">
                    <declaration name="offset" type="int" line="232"/>
                    <declaration name="parent" type="View" line="233"/>
                    <scope line="235"/>
                </scope>
                <scope line="248">
                    <scope line="254">
                        <scope line="257">
                            <scope line="258"/>
                            <scope line="261"/>
                        </scope>
                        <scope line="264">
                            <scope line="266"/>
                        </scope>
                    </scope>
                    <scope line="270"/>
                    <scope line="275"/>
                </scope>
            </method>
            <javadoc line="283">
                Determines the relative offset into the given text that
                  best represents the given span in the view coordinate
                  system.  This is implemented in a 1.1 style coordinate
                  system where ints are used and 72dpi is assumed.                
                <param>
                    s  the source of the text                    
                </param>
                <param>
                    metrics the font metrics to use for the calculation                    
                </param>
                <param>
                    x0 the starting view location representing the start
                      of the given text &gt;= 0.                    
                </param>
                <param>
                    x  the target view location to translate to an
                      offset into the text &gt;= 0.                    
                </param>
                <param>
                    e  how to expand the tabs.  If this value is null,
                      tabs will be expanded as a space character.                    
                </param>
                <param>
                    startOffset starting offset of the text in the document &gt;= 0                    
                </param>
                <return>
                    the offset into the text &gt;= 0                    
                </return>
            </javadoc>
            <method name="getTabbedTextOffset" type="int" line="302">
                <params>
                    <param name="s" type="Segment"/>
                    <param name="metrics" type="FontMetrics"/>
                    <param name="x0" type="int"/>
                    <param name="x" type="int"/>
                    <param name="e" type="TabExpander"/>
                    <param name="startOffset" type="int"/>
                </params>
            </method>
            <method name="getTabbedTextOffset" type="int" line="309">
                <params>
                    <param name="view" type="View"/>
                    <param name="s" type="Segment"/>
                    <param name="metrics" type="FontMetrics"/>
                    <param name="x0" type="int"/>
                    <param name="x" type="int"/>
                    <param name="e" type="TabExpander"/>
                    <param name="startOffset" type="int"/>
                    <param name="justificationData" type="int[]"/>
                </params>
            </method>
            <method name="getTabbedTextOffset" type="int" line="318">
                <params>
                    <param name="s" type="Segment"/>
                    <param name="metrics" type="FontMetrics"/>
                    <param name="x0" type="int"/>
                    <param name="x" type="int"/>
                    <param name="e" type="TabExpander"/>
                    <param name="startOffset" type="int"/>
                    <param name="round" type="boolean"/>
                </params>
            </method>
            <method name="getTabbedTextOffset" type="int" line="335">
                <params>
                    <param name="view" type="View"/>
                    <param name="s" type="Segment"/>
                    <param name="metrics" type="FontMetrics"/>
                    <param name="x0" type="int"/>
                    <param name="x" type="int"/>
                    <param name="e" type="TabExpander"/>
                    <param name="startOffset" type="int"/>
                    <param name="round" type="boolean"/>
                    <param name="justificationData" type="int[]"/>
                </params>
                <comment line="338">
                    x before x0, return.                    
                </comment>
                <comment line="342">
                    s may be a shared segment, so it is copied prior to calling
                     the tab expander                    
                </comment>
                <comment line="392">
                    found the hit position... return the appropriate side                    
                </comment>
                <comment line="395">
                    the length of the string measured as a whole may differ from
                     the sum of individual character lengths, for example if
                     fractional metrics are enabled; and we must guard from this.                    
                </comment>
                <comment line="432">
                    didn&apos;t find, return end offset                    
                </comment>
                <scope line="336"/>
                <declaration name="nextX" type="int" line="340"/>
                <declaration name="txt" type="char[]" line="343"/>
                <declaration name="txtOffset" type="int" line="344"/>
                <declaration name="txtCount" type="int" line="345"/>
                <declaration name="spaceAddon" type="int" line="346"/>
                <declaration name="spaceAddonLeftoverEnd" type="int" line="347"/>
                <declaration name="startJustifiableContent" type="int" line="348"/>
                <declaration name="endJustifiableContent" type="int" line="349"/>
                <scope line="350">
                    <declaration name="offset" type="int" line="351"/>
                    <declaration name="parent" type="View" line="352"/>
                    <scope line="354"/>
                </scope>
                <declaration name="n" type="int" line="366"/>
                <scope line="367">
                    <scope line="373">
                        <scope line="374">
                            <scope line="375"/>
                            <scope line="378"/>
                        </scope>
                        <scope line="381">
                            <scope line="383"/>
                        </scope>
                    </scope>
                    <scope line="387"/>
                    <scope line="390">
                        <declaration name="offset" type="int" line="392"/>
                        <scope line="397">
                            <declaration name="width" type="int" line="400"/>
                            <declaration name="span" type="int" line="401"/>
                            <scope line="403">
                                <scope line="404">
                                    <declaration name="nextWidth" type="int" line="405"/>
                                    <scope line="407">
                                        <scope line="408"/>
                                    </scope>
                                </scope>
                            </scope>
                        </scope>
                        <scope line="419">
                            <scope line="422"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="435">
                Determine where to break the given text to fit
                  within the given span. This tries to find a word boundary.                
                <param>
                    s  the source of the text                    
                </param>
                <param>
                    metrics the font metrics to use for the calculation                    
                </param>
                <param>
                    x0 the starting view location representing the start
                      of the given text.                    
                </param>
                <param>
                    x  the target view location to translate to an
                      offset into the text.                    
                </param>
                <param>
                    e  how to expand the tabs.  If this value is null,
                      tabs will be expanded as a space character.                    
                </param>
                <param>
                    startOffset starting offset in the document of the text                    
                </param>
                <return>
                    the offset into the given text                    
                </return>
            </javadoc>
            <method name="getBreakLocation" type="int" line="451">
                <params>
                    <param name="s" type="Segment"/>
                    <param name="metrics" type="FontMetrics"/>
                    <param name="x0" type="int"/>
                    <param name="x" type="int"/>
                    <param name="e" type="TabExpander"/>
                    <param name="startOffset" type="int"/>
                </params>
                <comment line="466">
                    break on whitespace                    
                </comment>
                <comment line="472">
                    a multibyte char found; use BreakIterator to find line break                    
                </comment>
                <declaration name="txt" type="char[]" line="452"/>
                <declaration name="txtOffset" type="int" line="453"/>
                <declaration name="txtCount" type="int" line="454"/>
                <declaration name="index" type="int" line="455"/>
                <scope line="458"/>
                <scope line="462">
                    <declaration name="ch" type="char" line="463"/>
                    <scope line="464">
                        <scope line="466"/>
                    </scope>
                    <scope line="470">
                        <declaration name="bit" type="BreakIterator" line="472"/>
                        <declaration name="breakPos" type="int" line="474"/>
                        <scope line="475"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="484">
                Determines the starting row model position of the row that contains
                  the specified model position.  The component given must have a
                  size to compute the result.  If the component doesn&apos;t have a size
                  a value of -1 will be returned.                
                <param>
                    c the editor                    
                </param>
                <param>
                    offs the offset in the document &gt;= 0                    
                </param>
                <return>
                    the position &gt;= 0 if the request can be computed, otherwise
                      a value of -1 will be returned.                    
                </return>
                <exception>
                    BadLocationException if the offset is out of range                    
                </exception>
            </javadoc>
            <method name="getRowStart" type="int" line="496">
                <params>
                    <param name="c" type="JTextComponent"/>
                    <param name="offs" type="int"/>
                </params>
                <comment line="505">
                    Skip invisible elements                    
                </comment>
                <declaration name="r" type="Rectangle" line="497"/>
                <scope line="498"/>
                <declaration name="lastOffs" type="int" line="501"/>
                <declaration name="y" type="int" line="502"/>
                <scope line="503">
                    <scope line="505"/>
                </scope>
            </method>
            <javadoc line="514">
                Determines the ending row model position of the row that contains
                  the specified model position.  The component given must have a
                  size to compute the result.  If the component doesn&apos;t have a size
                  a value of -1 will be returned.                
                <param>
                    c the editor                    
                </param>
                <param>
                    offs the offset in the document &gt;= 0                    
                </param>
                <return>
                    the position &gt;= 0 if the request can be computed, otherwise
                      a value of -1 will be returned.                    
                </return>
                <exception>
                    BadLocationException if the offset is out of range                    
                </exception>
            </javadoc>
            <method name="getRowEnd" type="int" line="526">
                <params>
                    <param name="c" type="JTextComponent"/>
                    <param name="offs" type="int"/>
                </params>
                <comment line="536">
                    Skip invisible elements                    
                </comment>
                <declaration name="r" type="Rectangle" line="527"/>
                <scope line="528"/>
                <declaration name="n" type="int" line="531"/>
                <declaration name="lastOffs" type="int" line="532"/>
                <declaration name="y" type="int" line="533"/>
                <scope line="534">
                    <scope line="536"/>
                </scope>
            </method>
            <javadoc line="545">
                Determines the position in the model that is closest to the given
                  view location in the row above.  The component given must have a
                  size to compute the result.  If the component doesn&apos;t have a size
                  a value of -1 will be returned.                
                <param>
                    c the editor                    
                </param>
                <param>
                    offs the offset in the document &gt;= 0                    
                </param>
                <param>
                    x the X coordinate &gt;= 0                    
                </param>
                <return>
                    the position &gt;= 0 if the request can be computed, otherwise
                      a value of -1 will be returned.                    
                </return>
                <exception>
                    BadLocationException if the offset is out of range                    
                </exception>
            </javadoc>
            <method name="getPositionAbove" type="int" line="558">
                <params>
                    <param name="c" type="JTextComponent"/>
                    <param name="offs" type="int"/>
                    <param name="x" type="int"/>
                </params>
                <declaration name="lastOffs" type="int" line="559"/>
                <scope line="560"/>
                <declaration name="bestSpan" type="int" line="563"/>
                <declaration name="y" type="int" line="564"/>
                <declaration name="r" type="Rectangle" line="565"/>
                <scope line="566"/>
                <scope line="570">
                    <declaration name="span" type="int" line="571"/>
                    <scope line="572"/>
                </scope>
            </method>
            <javadoc line="582">
                Determines the position in the model that is closest to the given
                  view location in the row below.  The component given must have a
                  size to compute the result.  If the component doesn&apos;t have a size
                  a value of -1 will be returned.                
                <param>
                    c the editor                    
                </param>
                <param>
                    offs the offset in the document &gt;= 0                    
                </param>
                <param>
                    x the X coordinate &gt;= 0                    
                </param>
                <return>
                    the position &gt;= 0 if the request can be computed, otherwise
                      a value of -1 will be returned.                    
                </return>
                <exception>
                    BadLocationException if the offset is out of range                    
                </exception>
            </javadoc>
            <method name="getPositionBelow" type="int" line="595">
                <params>
                    <param name="c" type="JTextComponent"/>
                    <param name="offs" type="int"/>
                    <param name="x" type="int"/>
                </params>
                <declaration name="lastOffs" type="int" line="596"/>
                <scope line="597"/>
                <declaration name="bestSpan" type="int" line="600"/>
                <declaration name="n" type="int" line="601"/>
                <declaration name="y" type="int" line="602"/>
                <declaration name="r" type="Rectangle" line="603"/>
                <scope line="604"/>
                <scope line="608">
                    <declaration name="span" type="int" line="609"/>
                    <scope line="610"/>
                </scope>
            </method>
            <javadoc line="620">
                Determines the start of a word for the given model location.
                  Uses BreakIterator.getWordInstance() to actually get the words.                
                <param>
                    c the editor                    
                </param>
                <param>
                    offs the offset in the document &gt;= 0                    
                </param>
                <return>
                    the location in the model of the word start &gt;= 0                    
                </return>
                <exception>
                    BadLocationException if the offset is out of range                    
                </exception>
            </javadoc>
            <method name="getWordStart" type="int" line="629">
                <params>
                    <param name="c" type="JTextComponent"/>
                    <param name="offs" type="int"/>
                </params>
                <declaration name="doc" type="Document" line="630"/>
                <declaration name="line" type="Element" line="631"/>
                <scope line="632"/>
                <declaration name="lineStart" type="int" line="635"/>
                <declaration name="lineEnd" type="int" line="636"/>
                <declaration name="seg" type="Segment" line="638"/>
                <scope line="640">
                    <declaration name="words" type="BreakIterator" line="641"/>
                    <declaration name="wordPosition" type="int" line="643"/>
                    <scope line="644"/>
                </scope>
            </method>
            <javadoc line="654">
                Determines the end of a word for the given location.
                  Uses BreakIterator.getWordInstance() to actually get the words.                
                <param>
                    c the editor                    
                </param>
                <param>
                    offs the offset in the document &gt;= 0                    
                </param>
                <return>
                    the location in the model of the word end &gt;= 0                    
                </return>
                <exception>
                    BadLocationException if the offset is out of range                    
                </exception>
            </javadoc>
            <method name="getWordEnd" type="int" line="663">
                <params>
                    <param name="c" type="JTextComponent"/>
                    <param name="offs" type="int"/>
                </params>
                <declaration name="doc" type="Document" line="664"/>
                <declaration name="line" type="Element" line="665"/>
                <scope line="666"/>
                <declaration name="lineStart" type="int" line="669"/>
                <declaration name="lineEnd" type="int" line="670"/>
                <declaration name="seg" type="Segment" line="672"/>
                <scope line="674">
                    <declaration name="words" type="BreakIterator" line="675"/>
                    <declaration name="wordPosition" type="int" line="677"/>
                    <scope line="678"/>
                </scope>
            </method>
            <javadoc line="687">
                Determines the start of the next word for the given location.
                  Uses BreakIterator.getWordInstance() to actually get the words.                
                <param>
                    c the editor                    
                </param>
                <param>
                    offs the offset in the document &gt;= 0                    
                </param>
                <return>
                    the location in the model of the word start &gt;= 0                    
                </return>
                <exception>
                    BadLocationException if the offset is out of range                    
                </exception>
            </javadoc>
            <method name="getNextWord" type="int" line="696">
                <params>
                    <param name="c" type="JTextComponent"/>
                    <param name="offs" type="int"/>
                </params>
                <comment line="704">
                    didn&apos;t find in this line, try the next line                    
                </comment>
                <declaration name="nextWord" type="int" line="697"/>
                <declaration name="line" type="Element" line="698"/>
                <scope line="701"/>
            </method>
            <javadoc line="710">
                Finds the next word in the given elements text.  The first
                  parameter allows searching multiple paragraphs where even
                  the first offset is desired.
                  Returns the offset of the next word, or BreakIterator.DONE
                  if there are no more words in the element.                
            </javadoc>
            <method name="getNextWordInParagraph" type="int" line="717">
                <params>
                    <param name="c" type="JTextComponent"/>
                    <param name="line" type="Element"/>
                    <param name="offs" type="int"/>
                    <param name="first" type="boolean"/>
                </params>
                <comment line="740">
                    there are no more words on this line.                    
                </comment>
                <comment line="743">
                    if we haven&apos;t shot past the end... check to
                     see if the current boundary represents whitespace.
                     if so, we need to try again                    
                </comment>
                <comment line="751">
                    it was whitespace, try again.  The assumption
                     is that it must be a word start if the last
                     one had whitespace following it.                    
                </comment>
                <scope line="718"/>
                <declaration name="doc" type="Document" line="721"/>
                <declaration name="lineStart" type="int" line="722"/>
                <declaration name="lineEnd" type="int" line="723"/>
                <scope line="724"/>
                <declaration name="seg" type="Segment" line="727"/>
                <declaration name="words" type="BreakIterator" line="729"/>
                <scope line="732"/>
                <declaration name="wordPosition" type="int" line="736"/>
                <scope line="738"/>
                <declaration name="ch" type="char" line="745"/>
                <scope line="746"/>
                <scope line="754">
                    <scope line="756"/>
                </scope>
            </method>
            <javadoc line="765">
                Determine the start of the prev word for the given location.
                  Uses BreakIterator.getWordInstance() to actually get the words.                
                <param>
                    c the editor                    
                </param>
                <param>
                    offs the offset in the document &gt;= 0                    
                </param>
                <return>
                    the location in the model of the word start &gt;= 0                    
                </return>
                <exception>
                    BadLocationException if the offset is out of range                    
                </exception>
            </javadoc>
            <method name="getPreviousWord" type="int" line="774">
                <params>
                    <param name="c" type="JTextComponent"/>
                    <param name="offs" type="int"/>
                </params>
                <comment line="782">
                    didn&apos;t find in this line, try the prev line                    
                </comment>
                <declaration name="prevWord" type="int" line="775"/>
                <declaration name="line" type="Element" line="776"/>
                <scope line="779"/>
            </method>
            <javadoc line="788">
                Finds the previous word in the given elements text.  The first
                  parameter allows searching multiple paragraphs where even
                  the first offset is desired.
                  Returns the offset of the next word, or BreakIterator.DONE
                  if there are no more words in the element.                
            </javadoc>
            <method name="getPrevWordInParagraph" type="int" line="795">
                <params>
                    <param name="c" type="JTextComponent"/>
                    <param name="line" type="Element"/>
                    <param name="offs" type="int"/>
                </params>
                <comment line="819">
                    there are no more words on this line.                    
                </comment>
                <comment line="822">
                    if we haven&apos;t shot past the end... check to
                     see if the current boundary represents whitespace.
                     if so, we need to try again                    
                </comment>
                <comment line="830">
                    it was whitespace, try again.  The assumption
                     is that it must be a word start if the last
                     one had whitespace following it.                    
                </comment>
                <scope line="796"/>
                <declaration name="doc" type="Document" line="799"/>
                <declaration name="lineStart" type="int" line="800"/>
                <declaration name="lineEnd" type="int" line="801"/>
                <scope line="802"/>
                <declaration name="seg" type="Segment" line="805"/>
                <declaration name="words" type="BreakIterator" line="807"/>
                <scope line="809"/>
                <declaration name="wordPosition" type="int" line="812"/>
                <scope line="813"/>
                <scope line="817"/>
                <declaration name="ch" type="char" line="824"/>
                <scope line="825"/>
                <scope line="833"/>
            </method>
            <javadoc line="840">
                Determines the element to use for a paragraph/line.                
                <param>
                    c the editor                    
                </param>
                <param>
                    offs the starting offset in the document &gt;= 0                    
                </param>
                <return>
                    the element                    
                </return>
            </javadoc>
            <method name="getParagraphElement" type="Element" line="847">
                <params>
                    <param name="c" type="JTextComponent"/>
                    <param name="offs" type="int"/>
                </params>
                <declaration name="doc" type="Document" line="848"/>
                <scope line="849"/>
                <declaration name="map" type="Element" line="852"/>
                <declaration name="index" type="int" line="853"/>
                <declaration name="paragraph" type="Element" line="854"/>
                <scope line="855"/>
            </method>
            <method name="isComposedTextElement" type="boolean" line="861">
                <params>
                    <param name="doc" type="Document"/>
                    <param name="offset" type="int"/>
                </params>
                <declaration name="elem" type="Element" line="862"/>
                <scope line="863"/>
            </method>
            <method name="isComposedTextElement" type="boolean" line="869">
                <params>
                    <param name="elem" type="Element"/>
                </params>
                <declaration name="as" type="AttributeSet" line="870"/>
            </method>
            <method name="isComposedTextAttributeDefined" type="boolean" line="874">
                <params>
                    <param name="as" type="AttributeSet"/>
                </params>
            </method>
            <javadoc line="879">
                Draws the given composed text passed from an input method.                
                <param>
                    view View hosting text                    
                </param>
                <param>
                    attr the attributes containing the composed text                    
                </param>
                <param>
                    g  the graphics context                    
                </param>
                <param>
                    x  the X origin                    
                </param>
                <param>
                    y  the Y origin                    
                </param>
                <param>
                    p0 starting offset in the composed text to be rendered                    
                </param>
                <param>
                    p1 ending offset in the composed text to be rendered                    
                </param>
                <return>
                    the new insertion position                    
                </return>
            </javadoc>
            <method name="drawComposedText" type="int" line="893">
                <params>
                    <param name="view" type="View"/>
                    <param name="attr" type="AttributeSet"/>
                    <param name="g" type="Graphics"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="p0" type="int"/>
                    <param name="p1" type="int"/>
                </params>
                <declaration name="g2d" type="Graphics2D" line="894"/>
                <declaration name="as" type="AttributedString" line="895"/>
                <declaration name="aci" type="AttributedCharacterIterator" line="902"/>
            </method>
            <javadoc line="907">
                Paints the composed text in a GlyphView                
            </javadoc>
            <method name="paintComposedText" type="void" line="910">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="alloc" type="Rectangle"/>
                    <param name="v" type="GlyphView"/>
                </params>
                <comment line="923">
                    Add text attributes                    
                </comment>
                <comment line="945">
                    draw                    
                </comment>
                <scope line="911">
                    <declaration name="g2d" type="Graphics2D" line="912"/>
                    <declaration name="p0" type="int" line="913"/>
                    <declaration name="p1" type="int" line="914"/>
                    <declaration name="attrSet" type="AttributeSet" line="915"/>
                    <declaration name="as" type="AttributedString" line="916"/>
                    <declaration name="start" type="int" line="918"/>
                    <declaration name="y" type="int" line="919"/>
                    <declaration name="x" type="int" line="920"/>
                    <scope line="925"/>
                    <scope line="928"/>
                    <scope line="931"/>
                    <scope line="934"/>
                    <scope line="937"/>
                    <scope line="940"/>
                    <declaration name="aci" type="AttributedCharacterIterator" line="945"/>
                </scope>
            </method>
            <method name="isLeftToRight" type="boolean" line="955">
                <params>
                    <param name="c" type="java.awt.Component"/>
                </params>
            </method>
            <javadoc line="960">
                Provides a way to determine the next visually represented model
                  location that one might place a caret.  Some views may not be visible,
                  they might not be in the same order found in the model, or they just
                  might not allow access to some of the locations in the model.
                  &lt;p&gt;
                  This implementation assumes the views are layed out in a logical
                  manner. That is, that the view at index x + 1 is visually after
                  the View at index x, and that the View at index x - 1 is visually
                  before the View at x. There is support for reversing this behavior
                  only if the passed in &lt;code&gt;View&lt;/code&gt; is an instance of
                  &lt;code&gt;CompositeView&lt;/code&gt;. The &lt;code&gt;CompositeView&lt;/code&gt;
                  must then override the &lt;code&gt;flipEastAndWestAtEnds&lt;/code&gt; method.                
                <param>
                    v View to query                    
                </param>
                <param>
                    pos the position to convert &gt;= 0                    
                </param>
                <param>
                    a the allocated region to render into                    
                </param>
                <param>
                    direction the direction from the current position that can
                      be thought of as the arrow keys typically found on a keyboard;
                      this may be one of the following:
                      &lt;ul&gt;
                      &lt;li&gt;&lt;code&gt;SwingConstants.WEST&lt;/code&gt;
                      &lt;li&gt;&lt;code&gt;SwingConstants.EAST&lt;/code&gt;
                      &lt;li&gt;&lt;code&gt;SwingConstants.NORTH&lt;/code&gt;
                      &lt;li&gt;&lt;code&gt;SwingConstants.SOUTH&lt;/code&gt;
                      &lt;/ul&gt;                    
                </param>
                <param>
                    biasRet an array contain the bias that was checked                    
                </param>
                <return>
                    the location within the model that best represents the next
                      location visual position                    
                </return>
                <exception>
                    BadLocationException                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;direction&lt;/code&gt; is invalid                    
                </exception>
            </javadoc>
            <method name="getNextVisualPositionFrom" type="int" line="995">
                <params>
                    <param name="v" type="View"/>
                    <param name="pos" type="int"/>
                    <param name="b" type="Position.Bias"/>
                    <param name="alloc" type="Shape"/>
                    <param name="direction" type="int"/>
                    <param name="biasRet" type="Position.Bias[]"/>
                </params>
                <comment line="998">
                    Nothing to do.                    
                </comment>
                <comment line="1005">
                    Start from the first View.                    
                </comment>
                <comment line="1012">
                    Special case that should ONLY happen if first view
                     isn&apos;t valid (can happen when end position is put at
                     beginning of line.                    
                </comment>
                <comment line="1048">
                    If there is a bias change, it is a fake position
                     and we should skip it. This is usually the result
                     of two elements side be side flowing the same way.                    
                </comment>
                <comment line="1062">
                    Reached the end of a view, make sure the next view
                     is a different direction.                    
                </comment>
                <scope line="996"/>
                <declaration name="top" type="boolean" line="1000"/>
                <declaration name="retValue" type="int" line="1002"/>
                <scope line="1003">
                    <declaration name="childIndex" type="int" line="1005"/>
                    <declaration name="child" type="View" line="1006"/>
                    <declaration name="childBounds" type="Shape" line="1007"/>
                    <scope line="1010"/>
                </scope>
                <scope line="1021">
                    <declaration name="increment" type="int" line="1022"/>
                    <declaration name="childIndex" type="int" line="1023"/>
                    <scope line="1024"/>
                    <scope line="1027"/>
                    <declaration name="child" type="View" line="1030"/>
                    <declaration name="childBounds" type="Shape" line="1031"/>
                    <scope line="1037"/>
                    <scope line="1042">
                        <scope line="1050"/>
                    </scope>
                    <scope line="1060">
                        <declaration name="originalBias" type="Position.Bias" line="1065"/>
                        <declaration name="nextPos" type="int" line="1066"/>
                        <scope line="1068"/>
                        <scope line="1071"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>