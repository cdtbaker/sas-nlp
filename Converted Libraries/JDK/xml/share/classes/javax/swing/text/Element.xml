<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text">
        <interface name="Element">
            <javadoc line="27">
                Interface to describe a structural piece of a document.  It
                  is intended to capture the spirit of an SGML element.                
                <author>
                    Timothy Prinzing                    
                </author>
            </javadoc>
            <method name="getDocument" type="Document" line="35"/>
            <javadoc line="35">
                Fetches the document associated with this element.                
                <return>
                    the document                    
                </return>
            </javadoc>
            <method name="getParentElement" type="Element" line="42"/>
            <javadoc line="42">
                Fetches the parent element.  If the element is a root level
                  element returns &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    the parent element                    
                </return>
            </javadoc>
            <method name="getName" type="String" line="50"/>
            <javadoc line="50">
                Fetches the name of the element.  If the element is used to
                  represent some type of structure, this would be the type
                  name.                
                <return>
                    the element name                    
                </return>
            </javadoc>
            <method name="getAttributes" type="AttributeSet" line="59"/>
            <javadoc line="59">
                Fetches the collection of attributes this element contains.                
                <return>
                    the attributes for the element                    
                </return>
            </javadoc>
            <method name="getStartOffset" type="int" line="66"/>
            <javadoc line="66">
                Fetches the offset from the beginning of the document
                  that this element begins at.  If this element has
                  children, this will be the offset of the first child.
                  As a document position, there is an implied forward bias.                
                <return>
                    the starting offset >= 0 and < getEndOffset();                    
                </return>
                <see>
                    Document                    
                </see>
                <see>
                    AbstractDocument                    
                </see>
            </javadoc>
            <method name="getEndOffset" type="int" line="78"/>
            <javadoc line="78">
                Fetches the offset from the beginning of the document
                  that this element ends at.  If this element has
                  children, this will be the end offset of the last child.
                  As a document position, there is an implied backward bias.
                  &lt;p&gt;
                  All the default &lt;code&gt;Document&lt;/code&gt; implementations
                  descend from &lt;code&gt;AbstractDocument&lt;/code&gt;.
                  &lt;code&gt;AbstractDocument&lt;/code&gt; models an implied break at the end of
                  the document. As a result of this, it is possible for this to
                  return a value greater than the length of the document.                
                <return>
                    the ending offset > getStartOffset() and
                      <= getDocument().getLength() + 1                    
                </return>
                <see>
                    Document                    
                </see>
                <see>
                    AbstractDocument                    
                </see>
            </javadoc>
            <method name="getElementIndex" type="int" line="97"/>
            <javadoc line="97">
                Gets the child element index closest to the given offset.
                  The offset is specified relative to the beginning of the
                  document.  Returns &lt;code&gt;-1&lt;/code&gt; if the
                  &lt;code&gt;Element&lt;/code&gt; is a leaf, otherwise returns
                  the index of the &lt;code&gt;Element&lt;/code&gt; that best represents
                  the given location.  Returns &lt;code&gt;0&lt;/code&gt; if the location
                  is less than the start offset. Returns
                  &lt;code&gt;getElementCount() - 1&lt;/code&gt; if the location is
                  greater than or equal to the end offset.                
                <param>
                    offset the specified offset >= 0                    
                </param>
                <return>
                    the element index >= 0                    
                </return>
            </javadoc>
            <method name="getElementCount" type="int" line="113"/>
            <javadoc line="113">
                Gets the number of child elements contained by this element.
                  If this element is a leaf, a count of zero is returned.                
                <return>
                    the number of child elements >= 0                    
                </return>
            </javadoc>
            <method name="getElement" type="Element" line="121"/>
            <javadoc line="121">
                Fetches the child element at the given index.                
                <param>
                    index the specified index >= 0                    
                </param>
                <return>
                    the child element                    
                </return>
            </javadoc>
            <method name="isLeaf" type="boolean" line="129"/>
            <javadoc line="129">
                Is this element a leaf element? An element that
                  &lt;i&gt;may&lt;/i&gt; have children, even if it currently
                  has no children, would return &lt;code&gt;false&lt;/code&gt;.                
                <return>
                    true if a leaf element else false                    
                </return>
            </javadoc>
        </interface>
    </source>