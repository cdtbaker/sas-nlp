<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text.html.parser">
        <import package="sun.awt.AppContext"/>
        <import package="javax.swing.text.html.HTMLEditorKit"/>
        <import package="java.io.BufferedInputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.DataInputStream"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.Reader"/>
        <import package="java.io.Serializable"/>
        <class name="ParserDelegator" line="39">
            <extends class="HTMLEditorKit.Parser"/>
            <implements interface="Serializable"/>
            <javadoc line="39">
                Responsible for starting up a new DocumentParser
                  each time its parse method is invoked. Stores a
                  reference to the dtd.                
                <author>
                    Sunita Mani                    
                </author>
            </javadoc>
            <declaration name="DTD_KEY" type="Object" line="49"/>
            <method name="setDefaultDTD" type="void" line="51"/>
            <method name="getDefaultDTD" type="DTD" line="55">
                <comment line="62">
                    (PENDING) Hate having to hard code!                    
                </comment>
                <comment line="67">
                    (PENDING) UGLY!                    
                </comment>
                <declaration name="appContext" type="AppContext" line="56"/>
                <declaration name="dtd" type="DTD" line="58"/>
                <scope line="60">
                    <declaration name="_dtd" type="DTD" line="61"/>
                    <declaration name="nm" type="String" line="63"/>
                    <scope line="64"/>
                    <scope line="66"/>
                </scope>
            </method>
            <method name="createDTD" type="DTD" line="78">
                <params>
                    <param name="dtd" type="DTD"/>
                    <param name="name" type="String"/>
                </params>
                <declaration name="in" type="InputStream" line="80"/>
                <declaration name="debug" type="boolean" line="81"/>
                <scope line="82">
                    <declaration name="path" type="String" line="83"/>
                    <scope line="85"/>
                </scope>
                <scope line="89"/>
            </method>
            <method name="ParserDelegator" type="constructor" line="96"/>
            <method name="parse" type="void" line="100">
                <params>
                    <param name="r" type="Reader"/>
                    <param name="cb" type="HTMLEditorKit.ParserCallback"/>
                    <param name="ignoreCharSet" type="boolean"/>
                </params>
            </method>
            <javadoc line="104">
                Fetch a resource relative to the ParserDelegator classfile.
                  If this is called on 1.2 the loading will occur under the
                  protection of a doPrivileged call to allow the ParserDelegator
                  to function when used in an applet.                
                <param>
                    name the name of the resource, relative to the
                      ParserDelegator class.                    
                </param>
                <returns>
                    a stream representing the resource                    
                </returns>
            </javadoc>
            <method name="getResourceAsStream" type="InputStream" line="114">
                <params>
                    <param name="name" type="String"/>
                </params>
                <comment line="118">
                    If the class doesn&apos;t exist or we have some other                    
                </comment>
                <comment line="119">
                    problem we just try to call getResourceAsStream directly.                    
                </comment>
                <scope line="115"/>
                <scope line="117"/>
            </method>
            <method name="readObject" type="void" line="125">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
            </method>
        </class>
    </source>