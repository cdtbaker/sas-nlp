<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text.html">
        <import package="java.util.Enumeration"/>
        <import package="java.awt"/>
        <import package="javax.swing"/>
        <import package="javax.swing.text"/>
        <import package="java.beans"/>
        <import package="java.lang.reflect"/>
        <class name="ObjectView" line="8">
            <extends class="ComponentView"/>
            <javadoc line="8">
                Component decorator that implements the view interface
                  for &amp;lt;object&amp;gt; elements.
                  &lt;p&gt;
                  This view will try to load the class specified by the
                  &lt;code&gt;classid&lt;/code&gt; attribute.  If possible, the Classloader
                  used to load the associated Document is used.
                  This would typically be the same as the ClassLoader
                  used to load the EditorKit.  If the document&apos;s
                  ClassLoader is null, &lt;code&gt;Class.forName&lt;/code&gt; is used.
                  &lt;p&gt;
                  If the class can successfully be loaded, an attempt will
                  be made to create an instance of it by calling
                  &lt;code&gt;Class.newInstance&lt;/code&gt;.  An attempt will be made
                  to narrow the instance to type &lt;code&gt;java.awt.Component&lt;/code&gt;
                  to display the object.
                  &lt;p&gt;
                  This view can also manage a set of parameters with limitations.
                  The parameters to the &amp;lt;object&amp;gt; element are expected to
                  be present on the associated elements attribute set as simple
                  strings.  Each bean property will be queried as a key on
                  the AttributeSet, with the expectation that a non-null value
                  (of type String) will be present if there was a parameter
                  specification for the property.  Reflection is used to
                  set the parameter.  Currently, this is limited to a very
                  simple single parameter of type String.
                  &lt;p&gt;
                  A simple example HTML invocation is:
                  &lt;pre&gt;
                  &amp;lt;object classid=&quot;javax.swing.JLabel&quot;&amp;gt;
                  &amp;lt;param name=&quot;text&quot; value=&quot;sample text&quot;&amp;gt;
                  &amp;lt;/object&amp;gt;
                  &lt;/pre&gt;                
                <author>
                    Timothy Prinzing                    
                </author>
            </javadoc>
            <javadoc line="44">
                Creates a new ObjectView object.                
                <param>
                    elem the element to decorate                    
                </param>
            </javadoc>
            <method name="ObjectView" type="constructor" line="48">
                <params>
                    <param name="elem" type="Element"/>
                </params>
            </method>
            <javadoc line="51">
                Create the component.  The classid is used
                  as a specification of the classname, which
                  we try to load.                
            </javadoc>
            <method name="createComponent" type="Component" line="56">
                <declaration name="attr" type="AttributeSet" line="57"/>
                <declaration name="classname" type="String" line="58"/>
                <scope line="59">
                    <declaration name="c" type="Class" line="60"/>
                    <declaration name="o" type="Object" line="61"/>
                    <scope line="62">
                        <declaration name="comp" type="Component" line="63"/>
                    </scope>
                </scope>
                <scope line="68"/>
            </method>
            <javadoc line="72">
                Fetch a component that can be used to represent the
                  object if it can&apos;t be created.                
            </javadoc>
            <method name="getUnloadableRepresentation" type="Component" line="76">
                <declaration name="comp" type="Component" line="77"/>
            </method>
            <javadoc line="81">
                Get a Class object to use for loading the
                  classid.  If possible, the Classloader
                  used to load the associated Document is used.
                  This would typically be the same as the ClassLoader
                  used to load the EditorKit.  If the documents
                  ClassLoader is null,
                  &lt;code&gt;Class.forName&lt;/code&gt; is used.                
            </javadoc>
            <method name="getClass" type="Class" line="90">
                <params>
                    <param name="classname" type="String"/>
                </params>
                <declaration name="klass" type="Class" line="91"/>
                <declaration name="docClass" type="Class" line="92"/>
                <declaration name="loader" type="ClassLoader" line="93"/>
                <scope line="94"/>
                <scope line="97"/>
            </method>
            <javadoc line="102">
                Initialize this component according the KEY/VALUEs passed in
                  via the &amp;lt;param&amp;gt; elements in the corresponding
                  &amp;lt;object&amp;gt; element.                
            </javadoc>
            <method name="setParameters" type="void" line="107">
                <params>
                    <param name="comp" type="Component"/>
                    <param name="attr" type="AttributeSet"/>
                </params>
                <declaration name="k" type="Class" line="108"/>
                <declaration name="bi" type="BeanInfo" line="109"/>
                <scope line="110"/>
                <scope line="113"/>
                <declaration name="props" type="PropertyDescriptor" line="117"/>
                <scope line="118">
                    <declaration name="v" type="Object" line="119"/>
                    <scope line="120">
                        <declaration name="value" type="String" line="121"/>
                        <declaration name="writer" type="Method" line="122"/>
                        <scope line="123"/>
                        <declaration name="params" type="Class[]" line="126"/>
                        <scope line="127"/>
                        <declaration name="args" type="Object[]" line="130"/>
                        <scope line="131"/>
                        <scope line="134"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>