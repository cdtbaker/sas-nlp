<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text.html">
        <import package="java.io.Writer"/>
        <import package="java.io.IOException"/>
        <import package="java.util"/>
        <import package="java.awt.Color"/>
        <import package="javax.swing.text"/>
        <class name="MinimalHTMLWriter" line="7">
            <extends class="AbstractWriter"/>
            <javadoc line="7">
                MinimalHTMLWriter is a fallback writer used by the
                  HTMLEditorKit to write out HTML for a document that
                  is a not produced by the EditorKit.
                  The format for the document is:
                  &lt;pre&gt;
                  &amp;lt;html&amp;gt;
                  &amp;lt;head&amp;gt;
                  &amp;lt;style&amp;gt;
                  &amp;lt;!-- list of named styles
                  p.normal {
                  font-family: SansSerif;
                  margin-height: 0;
                  font-size: 14
                  }
                  --&amp;gt;
                  &amp;lt;/style&amp;gt;
                  &amp;lt;/head&amp;gt;
                  &amp;lt;body&amp;gt;
                  &amp;lt;p style=normal&amp;gt;
                  &lt;b&gt;Bold, italic, and underline attributes
                  of the run are emitted as HTML tags.
                  The remaining attributes are emitted as
                  part of the style attribute of a &amp;lt;span&amp;gt; tag.
                  The syntax is similar to inline styles.&lt;/b&gt;
                  &amp;lt;/p&amp;gt;
                  &amp;lt;/body&amp;gt;
                  &amp;lt;/html&amp;gt;
                  &lt;/pre&gt;                
                <author>
                    Sunita Mani                    
                </author>
            </javadoc>
            <declaration name="BOLD" type="int" line="39"/>
            <javadoc line="39">
                These static finals are used to
                  tweak and query the fontMask about which
                  of these tags need to be generated or
                  terminated.                
            </javadoc>
            <declaration name="ITALIC" type="int" line="46"/>
            <declaration name="UNDERLINE" type="int" line="47"/>
            <declaration name="css" type="CSS" line="48"/>
            <declaration name="fontMask" type="int" line="49"/>
            <declaration name="startOffset" type="int" line="50"/>
            <declaration name="endOffset" type="int" line="51"/>
            <declaration name="fontAttributes" type="AttributeSet" line="52"/>
            <javadoc line="52">
                Stores the attributes of the previous run.
                  Used to compare with the current run&apos;s
                  attributeset.  If identical, then a
                  &amp;lt;span&amp;gt; tag is not emitted.                
            </javadoc>
            <declaration name="styleNameMapping" type="Hashtable&amp;lt;String,String&amp;gt;" line="59"/>
            <javadoc line="59">
                Maps from style name as held by the Document, to the archived
                  style name (style name written out). These may differ.                
            </javadoc>
            <javadoc line="64">
                Creates a new MinimalHTMLWriter.                
                <param>
                    w  Writer                    
                </param>
                <param>
                    doc StyledDocument                    
                </param>
            </javadoc>
            <method name="MinimalHTMLWriter" type="constructor" line="69">
                <params>
                    <param name="w" type="Writer"/>
                    <param name="doc" type="StyledDocument"/>
                </params>
            </method>
            <javadoc line="72">
                Creates a new MinimalHTMLWriter.                
                <param>
                    w  Writer                    
                </param>
                <param>
                    doc StyledDocument                    
                </param>
                <param>
                    pos The location in the document to fetch the
                      content.                    
                </param>
                <param>
                    len The amount to write out.                    
                </param>
            </javadoc>
            <method name="MinimalHTMLWriter" type="constructor" line="80">
                <params>
                    <param name="w" type="Writer"/>
                    <param name="doc" type="StyledDocument"/>
                    <param name="pos" type="int"/>
                    <param name="len" type="int"/>
                </params>
            </method>
            <javadoc line="83">
                Generates HTML output
                  from a StyledDocument.                
                <exception>
                    IOException on any I/O error                    
                </exception>
                <exception>
                    BadLocationException if pos represents an invalid
                      location within the document.                    
                </exception>
            </javadoc>
            <method name="write" type="void" line="90"/>
            <javadoc line="97">
                Writes out all the attributes for the
                  following types:
                  StyleConstants.ParagraphConstants,
                  StyleConstants.CharacterConstants,
                  StyleConstants.FontConstants,
                  StyleConstants.ColorConstants.
                  The attribute name and value are separated by a colon.
                  Each pair is separated by a semicolon.                
                <exception>
                    IOException on any I/O error                    
                </exception>
            </javadoc>
            <method name="writeAttributes" type="void" line="108">
                <params>
                    <param name="attr" type="AttributeSet"/>
                </params>
                <declaration name="attributeNames" type="Enumeration" line="109"/>
                <scope line="110">
                    <declaration name="name" type="Object" line="111"/>
                    <scope line="112"/>
                </scope>
            </method>
            <javadoc line="122">
                Writes out text.                
                <exception>
                    IOException on any I/O error                    
                </exception>
            </javadoc>
            <method name="text" type="void" line="126">
                <params>
                    <param name="elem" type="Element"/>
                </params>
                <declaration name="contentStr" type="String" line="127"/>
                <scope line="128"/>
                <scope line="131"/>
            </method>
            <javadoc line="135">
                Writes out a start tag appropriately
                  indented.  Also increments the indent level.                
                <exception>
                    IOException on any I/O error                    
                </exception>
            </javadoc>
            <method name="writeStartTag" type="void" line="140">
                <params>
                    <param name="tag" type="String"/>
                </params>
            </method>
            <javadoc line="146">
                Writes out an end tag appropriately
                  indented.  Also decrements the indent level.                
                <exception>
                    IOException on any I/O error                    
                </exception>
            </javadoc>
            <method name="writeEndTag" type="void" line="151">
                <params>
                    <param name="endTag" type="String"/>
                </params>
            </method>
            <javadoc line="157">
                Writes out the &amp;lt;head&amp;gt; and &amp;lt;style&amp;gt;
                  tags, and then invokes writeStyles() to write
                  out all the named styles as the content of the
                  &amp;lt;style&amp;gt; tag.  The content is surrounded by
                  valid HTML comment markers to ensure that the
                  document is viewable in applications/browsers
                  that do not support the tag.                
                <exception>
                    IOException on any I/O error                    
                </exception>
            </javadoc>
            <method name="writeHeader" type="void" line="167"/>
            <javadoc line="176">
                Writes out all the named styles as the
                  content of the &amp;lt;style&amp;gt; tag.                
                <exception>
                    IOException on any I/O error                    
                </exception>
            </javadoc>
            <method name="writeStyles" type="void" line="181">
                <declaration name="styledDoc" type="DefaultStyledDocument" line="182"/>
                <declaration name="styleNames" type="Enumeration" line="183"/>
                <scope line="184">
                    <declaration name="s" type="Style" line="185"/>
                    <scope line="186"/>
                </scope>
            </method>
            <javadoc line="199">
                Iterates over the elements in the document
                  and processes elements based on whether they are
                  branch elements or leaf elements.  This method specially handles
                  leaf elements that are text.                
                <exception>
                    IOException on any I/O error                    
                </exception>
            </javadoc>
            <method name="writeBody" type="void" line="206">
                <declaration name="it" type="ElementIterator" line="207"/>
                <declaration name="next" type="Element" line="209"/>
                <declaration name="inContent" type="boolean" line="211"/>
                <scope line="212">
                    <scope line="213"/>
                    <scope line="216">
                        <scope line="217"/>
                    </scope>
                    <scope line="224"/>
                    <scope line="228"/>
                </scope>
                <scope line="233"/>
            </method>
            <javadoc line="238">
                Emits an end tag for a &amp;lt;p&amp;gt;
                  tag.  Before writing out the tag, this method ensures
                  that all other tags that have been opened are
                  appropriately closed off.                
                <exception>
                    IOException on any I/O error                    
                </exception>
            </javadoc>
            <method name="writeEndParagraph" type="void" line="245">
                <scope line="247"/>
                <scope line="250"/>
            </method>
            <javadoc line="255">
                Emits the start tag for a paragraph. If
                  the paragraph has a named style associated with it,
                  then this method also generates a class attribute for the
                  &amp;lt;p&amp;gt; tag and sets its value to be the name of the
                  style.                
                <exception>
                    IOException on any I/O error                    
                </exception>
            </javadoc>
            <method name="writeStartParagraph" type="void" line="263">
                <params>
                    <param name="elem" type="Element"/>
                </params>
                <declaration name="attr" type="AttributeSet" line="264"/>
                <declaration name="resolveAttr" type="Object" line="265"/>
                <scope line="266"/>
                <scope line="269"/>
            </method>
            <javadoc line="273">
                Responsible for writing out other non-text leaf
                  elements.                
                <exception>
                    IOException on any I/O error                    
                </exception>
            </javadoc>
            <method name="writeLeaf" type="void" line="278">
                <params>
                    <param name="elem" type="Element"/>
                </params>
                <scope line="280"/>
                <scope line="283"/>
            </method>
            <javadoc line="287">
                Responsible for handling Icon Elements;
                  deliberately unimplemented.  How to implement this method is
                  an issue of policy.  For example, if you&apos;re generating
                  an &amp;lt;img&amp;gt; tag, how should you
                  represent the src attribute (the location of the image)?
                  In certain cases it could be a URL, in others it could
                  be read from a stream.                
                <param>
                    elem element of type StyleConstants.IconElementName                    
                </param>
            </javadoc>
            <method name="writeImage" type="void" line="297">
                <params>
                    <param name="elem" type="Element"/>
                </params>
            </method>
            <javadoc line="299">
                Responsible for handling Component Elements;
                  deliberately unimplemented.
                  How this method is implemented is a matter of policy.                
            </javadoc>
            <method name="writeComponent" type="void" line="304">
                <params>
                    <param name="elem" type="Element"/>
                </params>
            </method>
            <javadoc line="306">
                Returns true if the element is a text element.                
            </javadoc>
            <method name="isText" type="boolean" line="309">
                <params>
                    <param name="elem" type="Element"/>
                </params>
            </method>
            <javadoc line="312">
                Writes out the attribute set
                  in an HTML-compliant manner.                
                <exception>
                    IOException on any I/O error                    
                </exception>
                <exception>
                    BadLocationException if pos represents an invalid
                      location within the document.                    
                </exception>
            </javadoc>
            <method name="writeContent" type="void" line="319">
                <params>
                    <param name="elem" type="Element"/>
                    <param name="needsIndenting" type="boolean"/>
                </params>
                <declaration name="attr" type="AttributeSet" line="320"/>
                <scope line="322"/>
            </method>
            <javadoc line="328">
                Generates
                  bold &amp;lt;b&amp;gt;, italic &amp;lt;i&amp;gt;, and &amp;lt;u&amp;gt; tags for the
                  text based on its attribute settings.                
                <exception>
                    IOException on any I/O error                    
                </exception>
            </javadoc>
            <method name="writeHTMLTags" type="void" line="334">
                <params>
                    <param name="attr" type="AttributeSet"/>
                </params>
                <declaration name="oldMask" type="int" line="335"/>
                <declaration name="endMask" type="int" line="337"/>
                <declaration name="startMask" type="int" line="338"/>
                <scope line="339">
                    <scope line="340"/>
                </scope>
                <scope line="344"/>
                <scope line="347">
                    <scope line="348"/>
                </scope>
                <scope line="352"/>
                <scope line="355">
                    <scope line="356"/>
                </scope>
                <scope line="360"/>
            </method>
            <javadoc line="366">
                Tweaks the appropriate bits of fontMask
                  to reflect whether the text is to be displayed in
                  bold, italic, and/or with an underline.                
            </javadoc>
            <method name="setFontMask" type="void" line="371">
                <params>
                    <param name="attr" type="AttributeSet"/>
                </params>
                <scope line="372"/>
                <scope line="375"/>
                <scope line="378"/>
            </method>
            <javadoc line="382">
                Writes out start tags &amp;lt;u&amp;gt;, &amp;lt;i&amp;gt;, and &amp;lt;b&amp;gt; based on
                  the mask settings.                
                <exception>
                    IOException on any I/O error                    
                </exception>
            </javadoc>
            <method name="writeStartMask" type="void" line="387">
                <params>
                    <param name="mask" type="int"/>
                </params>
                <scope line="388">
                    <scope line="389"/>
                    <scope line="392"/>
                    <scope line="395"/>
                </scope>
            </method>
            <javadoc line="400">
                Writes out end tags for &amp;lt;u&amp;gt;, &amp;lt;i&amp;gt;, and &amp;lt;b&amp;gt; based on
                  the mask settings.                
                <exception>
                    IOException on any I/O error                    
                </exception>
            </javadoc>
            <method name="writeEndMask" type="void" line="405">
                <params>
                    <param name="mask" type="int"/>
                </params>
                <scope line="406">
                    <scope line="407"/>
                    <scope line="410"/>
                    <scope line="413"/>
                </scope>
            </method>
            <javadoc line="418">
                Writes out the remaining
                  character-level attributes (attributes other than bold,
                  italic, and underline) in an HTML-compliant way.  Given that
                  attributes such as font family and font size have no direct
                  mapping to HTML tags, a &amp;lt;span&amp;gt; tag is generated and its
                  style attribute is set to contain the list of remaining
                  attributes just like inline styles.                
                <exception>
                    IOException on any I/O error                    
                </exception>
            </javadoc>
            <method name="writeNonHTMLAttributes" type="void" line="428">
                <params>
                    <param name="attr" type="AttributeSet"/>
                </params>
                <declaration name="style" type="String" line="429"/>
                <declaration name="separator" type="String" line="430"/>
                <scope line="431"/>
                <declaration name="first" type="boolean" line="434"/>
                <declaration name="color" type="Color" line="435"/>
                <scope line="436"/>
                <declaration name="size" type="Integer" line="440"/>
                <scope line="441">
                    <scope line="442"/>
                </scope>
                <declaration name="family" type="String" line="448"/>
                <scope line="449">
                    <scope line="450"/>
                </scope>
                <scope line="456">
                    <scope line="457"/>
                </scope>
                <scope line="464"/>
            </method>
            <javadoc line="470">
                Returns true if we are currently in a &amp;lt;font&amp;gt; tag.                
            </javadoc>
            <method name="inFontTag" type="boolean" line="473"/>
            <javadoc line="476">
                This is no longer used, instead &amp;lt;span&amp;gt; will be written out.
                  &lt;p&gt;
                  Writes out an end tag for the &amp;lt;font&amp;gt; tag.                
                <exception>
                    IOException on any I/O error                    
                </exception>
            </javadoc>
            <method name="endFontTag" type="void" line="482"/>
            <javadoc line="487">
                This is no longer used, instead &amp;lt;span&amp;gt; will be written out.
                  &lt;p&gt;
                  Writes out a start tag for the &amp;lt;font&amp;gt; tag.
                  Because font tags cannot be nested,
                  this method closes out
                  any enclosing font tag before writing out a
                  new start tag.                
                <exception>
                    IOException on any I/O error                    
                </exception>
            </javadoc>
            <method name="startFontTag" type="void" line="497">
                <params>
                    <param name="style" type="String"/>
                </params>
                <declaration name="callIndent" type="boolean" line="498"/>
                <scope line="499"/>
                <scope line="504"/>
            </method>
            <javadoc line="508">
                Writes out a start tag for the &amp;lt;font&amp;gt; tag.
                  Because font tags cannot be nested,
                  this method closes out
                  any enclosing font tag before writing out a
                  new start tag.                
                <exception>
                    IOException on any I/O error                    
                </exception>
            </javadoc>
            <method name="startSpanTag" type="void" line="516">
                <params>
                    <param name="style" type="String"/>
                </params>
                <declaration name="callIndent" type="boolean" line="517"/>
                <scope line="518"/>
                <scope line="523"/>
            </method>
            <javadoc line="527">
                Writes out an end tag for the &amp;lt;span&amp;gt; tag.                
                <exception>
                    IOException on any I/O error                    
                </exception>
            </javadoc>
            <method name="endSpanTag" type="void" line="531"/>
            <javadoc line="536">
                Adds the style named &lt;code&gt;style&lt;/code&gt; to the style mapping. This
                  returns the name that should be used when outputting. CSS does not
                  allow the full Unicode set to be used as a style name.                
            </javadoc>
            <method name="addStyleName" type="String" line="541">
                <params>
                    <param name="style" type="String"/>
                </params>
                <scope line="542"/>
                <declaration name="sb" type="StringBuilder" line="545"/>
                <scope line="546">
                    <scope line="547">
                        <scope line="548"/>
                    </scope>
                </scope>
                <declaration name="mappedName" type="String" line="554"/>
                <scope line="555"/>
            </method>
            <javadoc line="561">
                Returns the mapped style name corresponding to &lt;code&gt;style&lt;/code&gt;.                
            </javadoc>
            <method name="mapStyleName" type="String" line="564">
                <params>
                    <param name="style" type="String"/>
                </params>
                <scope line="565"/>
                <declaration name="retValue" type="String" line="568"/>
            </method>
            <method name="isValidCharacter" type="boolean" line="571">
                <params>
                    <param name="character" type="char"/>
                </params>
            </method>
        </class>
    </source>