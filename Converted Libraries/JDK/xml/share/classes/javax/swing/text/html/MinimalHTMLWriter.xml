<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text.html">
        <import package="java.io.Writer"/>
        <import package="java.io.IOException"/>
        <import package="java.util"/>
        <import package="java.awt.Color"/>
        <import package="javax.swing.text"/>
        <class name="MinimalHTMLWriter" line="34">
            <extends class="AbstractWriter"/>
            <comment line="81">
                Used to map StyleConstants to CSS.                
            </comment>
            <javadoc line="34">
                MinimalHTMLWriter is a fallback writer used by the
                  HTMLEditorKit to write out HTML for a document that
                  is a not produced by the EditorKit.
                  The format for the document is:
                  &lt;pre&gt;
                  &amp;lt;html&amp;gt;
                  &amp;lt;head&amp;gt;
                  &amp;lt;style&amp;gt;
                  &amp;lt;!-- list of named styles
                  p.normal {
                  font-family: SansSerif;
                  margin-height: 0;
                  font-size: 14
                  }
                  --&amp;gt;
                  &amp;lt;/style&amp;gt;
                  &amp;lt;/head&amp;gt;
                  &amp;lt;body&amp;gt;
                  &amp;lt;p style=normal&amp;gt;
                  &lt;b&gt;Bold, italic, and underline attributes
                  of the run are emitted as HTML tags.
                  The remaining attributes are emitted as
                  part of the style attribute of a &amp;lt;span&amp;gt; tag.
                  The syntax is similar to inline styles.&lt;/b&gt;
                  &amp;lt;/p&amp;gt;
                  &amp;lt;/body&amp;gt;
                  &amp;lt;/html&amp;gt;
                  &lt;/pre&gt;                
                <author>
                    Sunita Mani                    
                </author>
            </javadoc>
            <declaration name="BOLD" type="int" line="70"/>
            <javadoc line="70">
                These static finals are used to
                  tweak and query the fontMask about which
                  of these tags need to be generated or
                  terminated.                
            </javadoc>
            <declaration name="ITALIC" type="int" line="77"/>
            <declaration name="UNDERLINE" type="int" line="78"/>
            <declaration name="css" type="CSS" line="81"/>
            <declaration name="fontMask" type="int" line="83"/>
            <declaration name="startOffset" type="int" line="85"/>
            <declaration name="endOffset" type="int" line="86"/>
            <declaration name="fontAttributes" type="AttributeSet" line="88"/>
            <javadoc line="88">
                Stores the attributes of the previous run.
                  Used to compare with the current run&apos;s
                  attributeset.  If identical, then a
                  &amp;lt;span&amp;gt; tag is not emitted.                
            </javadoc>
            <declaration name="styleNameMapping" type="Hashtable&lt;String,String&gt;" line="96"/>
            <javadoc line="96">
                Maps from style name as held by the Document, to the archived
                  style name (style name written out). These may differ.                
            </javadoc>
            <javadoc line="102">
                Creates a new MinimalHTMLWriter.                
                <param>
                    w  Writer                    
                </param>
                <param>
                    doc StyledDocument                    
                </param>
            </javadoc>
            <method name="MinimalHTMLWriter" type="constructor" line="109">
                <params>
                    <param name="w" type="Writer"/>
                    <param name="doc" type="StyledDocument"/>
                </params>
            </method>
            <javadoc line="113">
                Creates a new MinimalHTMLWriter.                
                <param>
                    w  Writer                    
                </param>
                <param>
                    doc StyledDocument                    
                </param>
                <param>
                    pos The location in the document to fetch the
                      content.                    
                </param>
                <param>
                    len The amount to write out.                    
                </param>
            </javadoc>
            <method name="MinimalHTMLWriter" type="constructor" line="123">
                <params>
                    <param name="w" type="Writer"/>
                    <param name="doc" type="StyledDocument"/>
                    <param name="pos" type="int"/>
                    <param name="len" type="int"/>
                </params>
            </method>
            <javadoc line="127">
                Generates HTML output
                  from a StyledDocument.                
                <exception>
                    IOException on any I/O error                    
                </exception>
                <exception>
                    BadLocationException if pos represents an invalid
                      location within the document.                    
                </exception>
            </javadoc>
            <method name="write" type="void" line="136"/>
            <javadoc line="145">
                Writes out all the attributes for the
                  following types:
                  StyleConstants.ParagraphConstants,
                  StyleConstants.CharacterConstants,
                  StyleConstants.FontConstants,
                  StyleConstants.ColorConstants.
                  The attribute name and value are separated by a colon.
                  Each pair is separated by a semicolon.                
                <exception>
                    IOException on any I/O error                    
                </exception>
            </javadoc>
            <method name="writeAttributes" type="void" line="157">
                <params>
                    <param name="attr" type="AttributeSet"/>
                </params>
                <declaration name="attributeNames" type="Enumeration" line="158"/>
                <scope line="159">
                    <declaration name="name" type="Object" line="160"/>
                    <scope line="164"/>
                </scope>
            </method>
            <javadoc line="178">
                Writes out text.                
                <exception>
                    IOException on any I/O error                    
                </exception>
            </javadoc>
            <method name="text" type="void" line="183">
                <params>
                    <param name="elem" type="Element"/>
                </params>
                <declaration name="contentStr" type="String" line="184"/>
                <scope line="186"/>
                <scope line="189"/>
            </method>
            <javadoc line="194">
                Writes out a start tag appropriately
                  indented.  Also increments the indent level.                
                <exception>
                    IOException on any I/O error                    
                </exception>
            </javadoc>
            <method name="writeStartTag" type="void" line="200">
                <params>
                    <param name="tag" type="String"/>
                </params>
            </method>
            <javadoc line="208">
                Writes out an end tag appropriately
                  indented.  Also decrements the indent level.                
                <exception>
                    IOException on any I/O error                    
                </exception>
            </javadoc>
            <method name="writeEndTag" type="void" line="214">
                <params>
                    <param name="endTag" type="String"/>
                </params>
            </method>
            <javadoc line="222">
                Writes out the &amp;lt;head&amp;gt; and &amp;lt;style&amp;gt;
                  tags, and then invokes writeStyles() to write
                  out all the named styles as the content of the
                  &amp;lt;style&amp;gt; tag.  The content is surrounded by
                  valid HTML comment markers to ensure that the
                  document is viewable in applications/browsers
                  that do not support the tag.                
                <exception>
                    IOException on any I/O error                    
                </exception>
            </javadoc>
            <method name="writeHeader" type="void" line="233"/>
            <javadoc line="245">
                Writes out all the named styles as the
                  content of the &amp;lt;style&amp;gt; tag.                
                <exception>
                    IOException on any I/O error                    
                </exception>
            </javadoc>
            <method name="writeStyles" type="void" line="251">
                <comment line="253">
                    Access to DefaultStyledDocument done to workaround
                      a missing API in styled document to access the
                      stylenames.                    
                </comment>
                <comment line="264">
                    PENDING: Once the name attribute is removed                    
                </comment>
                <declaration name="styledDoc" type="DefaultStyledDocument" line="257"/>
                <declaration name="styleNames" type="Enumeration" line="258"/>
                <scope line="260">
                    <declaration name="s" type="Style" line="261"/>
                    <scope line="266"/>
                </scope>
            </method>
            <javadoc line="281">
                Iterates over the elements in the document
                  and processes elements based on whether they are
                  branch elements or leaf elements.  This method specially handles
                  leaf elements that are text.                
                <exception>
                    IOException on any I/O error                    
                </exception>
            </javadoc>
            <method name="writeBody" type="void" line="289">
                <comment line="293">
                    This will be a section element for a styled document.
                    We represent this element in HTML as the body tags.
                    Therefore we ignore it.                    
                </comment>
                <declaration name="it" type="ElementIterator" line="290"/>
                <declaration name="next" type="Element" line="299"/>
                <declaration name="inContent" type="boolean" line="303"/>
                <scope line="305">
                    <scope line="306"/>
                    <scope line="309">
                        <scope line="310"/>
                    </scope>
                    <scope line="316"/>
                    <scope line="319"/>
                </scope>
                <scope line="324"/>
            </method>
            <javadoc line="331">
                Emits an end tag for a &amp;lt;p&amp;gt;
                  tag.  Before writing out the tag, this method ensures
                  that all other tags that have been opened are
                  appropriately closed off.                
                <exception>
                    IOException on any I/O error                    
                </exception>
            </javadoc>
            <method name="writeEndParagraph" type="void" line="339">
                <scope line="341"/>
                <scope line="343"/>
            </method>
            <javadoc line="350">
                Emits the start tag for a paragraph. If
                  the paragraph has a named style associated with it,
                  then this method also generates a class attribute for the
                  &amp;lt;p&amp;gt; tag and sets its value to be the name of the
                  style.                
                <exception>
                    IOException on any I/O error                    
                </exception>
            </javadoc>
            <method name="writeStartParagraph" type="void" line="359">
                <params>
                    <param name="elem" type="Element"/>
                </params>
                <declaration name="attr" type="AttributeSet" line="360"/>
                <declaration name="resolveAttr" type="Object" line="361"/>
                <scope line="362"/>
                <scope line="364"/>
            </method>
            <javadoc line="370">
                Responsible for writing out other non-text leaf
                  elements.                
                <exception>
                    IOException on any I/O error                    
                </exception>
            </javadoc>
            <method name="writeLeaf" type="void" line="376">
                <params>
                    <param name="elem" type="Element"/>
                </params>
                <scope line="378"/>
                <scope line="380"/>
            </method>
            <javadoc line="386">
                Responsible for handling Icon Elements;
                  deliberately unimplemented.  How to implement this method is
                  an issue of policy.  For example, if you&apos;re generating
                  an &amp;lt;img&amp;gt; tag, how should you
                  represent the src attribute (the location of the image)?
                  In certain cases it could be a URL, in others it could
                  be read from a stream.                
                <param>
                    elem element of type StyleConstants.IconElementName                    
                </param>
            </javadoc>
            <method name="writeImage" type="void" line="397">
                <params>
                    <param name="elem" type="Element"/>
                </params>
            </method>
            <javadoc line="401">
                Responsible for handling Component Elements;
                  deliberately unimplemented.
                  How this method is implemented is a matter of policy.                
            </javadoc>
            <method name="writeComponent" type="void" line="406">
                <params>
                    <param name="elem" type="Element"/>
                </params>
            </method>
            <javadoc line="410">
                Returns true if the element is a text element.                
            </javadoc>
            <method name="isText" type="boolean" line="414">
                <params>
                    <param name="elem" type="Element"/>
                </params>
            </method>
            <javadoc line="419">
                Writes out the attribute set
                  in an HTML-compliant manner.                
                <exception>
                    IOException on any I/O error                    
                </exception>
                <exception>
                    BadLocationException if pos represents an invalid
                      location within the document.                    
                </exception>
            </javadoc>
            <method name="writeContent" type="void" line="428">
                <params>
                    <param name="elem" type="Element"/>
                    <param name="needsIndenting" type="boolean"/>
                </params>
                <declaration name="attr" type="AttributeSet" line="430"/>
                <scope line="432"/>
            </method>
            <javadoc line="440">
                Generates
                  bold &amp;lt;b&amp;gt;, italic &amp;lt;i&amp;gt;, and &amp;lt;u&amp;gt; tags for the
                  text based on its attribute settings.                
                <exception>
                    IOException on any I/O error                    
                </exception>
            </javadoc>
            <method name="writeHTMLTags" type="void" line="448">
                <params>
                    <param name="attr" type="AttributeSet"/>
                </params>
                <declaration name="oldMask" type="int" line="450"/>
                <declaration name="endMask" type="int" line="453"/>
                <declaration name="startMask" type="int" line="454"/>
                <scope line="455">
                    <scope line="456"/>
                </scope>
                <scope line="459"/>
                <scope line="463">
                    <scope line="464"/>
                </scope>
                <scope line="467"/>
                <scope line="471">
                    <scope line="472"/>
                </scope>
                <scope line="475"/>
            </method>
            <javadoc line="483">
                Tweaks the appropriate bits of fontMask
                  to reflect whether the text is to be displayed in
                  bold, italic, and/or with an underline.                
            </javadoc>
            <method name="setFontMask" type="void" line="489">
                <params>
                    <param name="attr" type="AttributeSet"/>
                </params>
                <scope line="490"/>
                <scope line="494"/>
                <scope line="498"/>
            </method>
            <javadoc line="506">
                Writes out start tags &amp;lt;u&amp;gt;, &amp;lt;i&amp;gt;, and &amp;lt;b&amp;gt; based on
                  the mask settings.                
                <exception>
                    IOException on any I/O error                    
                </exception>
            </javadoc>
            <method name="writeStartMask" type="void" line="512">
                <params>
                    <param name="mask" type="int"/>
                </params>
                <scope line="513">
                    <scope line="514"/>
                    <scope line="517"/>
                    <scope line="520"/>
                </scope>
            </method>
            <javadoc line="526">
                Writes out end tags for &amp;lt;u&amp;gt;, &amp;lt;i&amp;gt;, and &amp;lt;b&amp;gt; based on
                  the mask settings.                
                <exception>
                    IOException on any I/O error                    
                </exception>
            </javadoc>
            <method name="writeEndMask" type="void" line="532">
                <params>
                    <param name="mask" type="int"/>
                </params>
                <scope line="533">
                    <scope line="534"/>
                    <scope line="537"/>
                    <scope line="540"/>
                </scope>
            </method>
            <javadoc line="547">
                Writes out the remaining
                  character-level attributes (attributes other than bold,
                  italic, and underline) in an HTML-compliant way.  Given that
                  attributes such as font family and font size have no direct
                  mapping to HTML tags, a &amp;lt;span&amp;gt; tag is generated and its
                  style attribute is set to contain the list of remaining
                  attributes just like inline styles.                
                <exception>
                    IOException on any I/O error                    
                </exception>
            </javadoc>
            <method name="writeNonHTMLAttributes" type="void" line="558">
                <params>
                    <param name="attr" type="AttributeSet"/>
                </params>
                <declaration name="style" type="String" line="560"/>
                <declaration name="separator" type="String" line="561"/>
                <scope line="563"/>
                <declaration name="first" type="boolean" line="567"/>
                <declaration name="color" type="Color" line="568"/>
                <scope line="569"/>
                <declaration name="size" type="Integer" line="575"/>
                <scope line="576">
                    <scope line="577"/>
                </scope>
                <declaration name="family" type="String" line="584"/>
                <scope line="585">
                    <scope line="586"/>
                </scope>
                <scope line="593">
                    <scope line="594"/>
                </scope>
                <scope line="601"/>
            </method>
            <javadoc line="609">
                Returns true if we are currently in a &amp;lt;font&amp;gt; tag.                
            </javadoc>
            <method name="inFontTag" type="boolean" line="612"/>
            <javadoc line="616">
                This is no longer used, instead &amp;lt;span&amp;gt; will be written out.
                  &lt;p&gt;
                  Writes out an end tag for the &amp;lt;font&amp;gt; tag.                
                <exception>
                    IOException on any I/O error                    
                </exception>
            </javadoc>
            <method name="endFontTag" type="void" line="623"/>
            <javadoc line="630">
                This is no longer used, instead &amp;lt;span&amp;gt; will be written out.
                  &lt;p&gt;
                  Writes out a start tag for the &amp;lt;font&amp;gt; tag.
                  Because font tags cannot be nested,
                  this method closes out
                  any enclosing font tag before writing out a
                  new start tag.                
                <exception>
                    IOException on any I/O error                    
                </exception>
            </javadoc>
            <method name="startFontTag" type="void" line="641">
                <params>
                    <param name="style" type="String"/>
                </params>
                <declaration name="callIndent" type="boolean" line="642"/>
                <scope line="643"/>
                <scope line="648"/>
            </method>
            <javadoc line="653">
                Writes out a start tag for the &amp;lt;font&amp;gt; tag.
                  Because font tags cannot be nested,
                  this method closes out
                  any enclosing font tag before writing out a
                  new start tag.                
                <exception>
                    IOException on any I/O error                    
                </exception>
            </javadoc>
            <method name="startSpanTag" type="void" line="662">
                <params>
                    <param name="style" type="String"/>
                </params>
                <declaration name="callIndent" type="boolean" line="663"/>
                <scope line="664"/>
                <scope line="669"/>
            </method>
            <javadoc line="674">
                Writes out an end tag for the &amp;lt;span&amp;gt; tag.                
                <exception>
                    IOException on any I/O error                    
                </exception>
            </javadoc>
            <method name="endSpanTag" type="void" line="679"/>
            <javadoc line="685">
                Adds the style named &lt;code&gt;style&lt;/code&gt; to the style mapping. This
                  returns the name that should be used when outputting. CSS does not
                  allow the full Unicode set to be used as a style name.                
            </javadoc>
            <method name="addStyleName" type="String" line="690">
                <params>
                    <param name="style" type="String"/>
                </params>
                <scope line="691"/>
                <declaration name="sb" type="StringBuilder" line="694"/>
                <scope line="695">
                    <scope line="696">
                        <scope line="697"/>
                    </scope>
                </scope>
                <declaration name="mappedName" type="String" line="703"/>
                <scope line="704"/>
            </method>
            <javadoc line="711">
                Returns the mapped style name corresponding to &lt;code&gt;style&lt;/code&gt;.                
            </javadoc>
            <method name="mapStyleName" type="String" line="714">
                <params>
                    <param name="style" type="String"/>
                </params>
                <scope line="715"/>
                <declaration name="retValue" type="String" line="718"/>
            </method>
            <method name="isValidCharacter" type="boolean" line="722">
                <params>
                    <param name="character" type="char"/>
                </params>
            </method>
        </class>
    </source>