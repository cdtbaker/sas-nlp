<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text.html">
        <import package="javax.swing.text"/>
        <import package="java.awt"/>
        <class name="NoFramesView" line="30">
            <extends class="BlockView"/>
            <javadoc line="30">
                This is the view associated with the html tag NOFRAMES.
                  This view has been written to ignore the contents of the
                  NOFRAMES tag.  The contents of the tag will only be visible
                  when the JTextComponent the view is contained in is editable.                
                <author>
                    Sunita Mani                    
                </author>
            </javadoc>
            <javadoc line="40">
                Creates a new view that represents an
                  html box.  This can be used for a number
                  of elements.  By default this view is not
                  visible.                
                <param>
                    elem the element to create a view for                    
                </param>
                <param>
                    axis either View.X_AXIS or View.Y_AXIS                    
                </param>
            </javadoc>
            <method name="NoFramesView" type="constructor" line="49">
                <params>
                    <param name="elem" type="Element"/>
                    <param name="axis" type="int"/>
                </params>
            </method>
            <javadoc line="55">
                If this view is not visible, then it returns.
                  Otherwise it invokes the superclass.                
                <param>
                    g the rendering surface to use                    
                </param>
                <param>
                    allocation the allocated region to render into                    
                </param>
                <see>
                    #isVisible                    
                </see>
                <see>
                    text.ParagraphView#paint                    
                </see>
            </javadoc>
            <method name="paint" type="void" line="64">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="allocation" type="Shape"/>
                </params>
                <declaration name="host" type="Container" line="65"/>
                <scope line="67"/>
                <scope line="71"/>
            </method>
            <javadoc line="78">
                Determines if the JTextComponent that the view
                  is contained in is editable. If so, then this
                  view and all its child views are visible.
                  Once this has been determined, the superclass
                  is invoked to continue processing.                
                <param>
                    p the parent View.                    
                </param>
                <see>
                    BlockView#setParent                    
                </see>
            </javadoc>
            <method name="setParent" type="void" line="88">
                <params>
                    <param name="p" type="View"/>
                </params>
                <scope line="89">
                    <declaration name="host" type="Container" line="90"/>
                    <scope line="91"/>
                </scope>
            </method>
            <javadoc line="98">
                Returns a true/false value that represents
                  whether the view is visible or not.                
            </javadoc>
            <method name="isVisible" type="boolean" line="102"/>
            <javadoc line="107">
                Do nothing if the view is not visible, otherwise
                  invoke the superclass to perform layout.                
            </javadoc>
            <method name="layout" type="void" line="111">
                <params>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <scope line="112"/>
            </method>
            <javadoc line="118">
                Determines the preferred span for this view.  Returns
                  0 if the view is not visible, otherwise it calls the
                  superclass method to get the preferred span.
                  axis.                
                <param>
                    axis may be either View.X_AXIS or View.Y_AXIS                    
                </param>
                <return>
                    the span the view would like to be rendered into;
                      typically the view is told to render into the span
                      that is returned, although there is no guarantee;
                      the parent may choose to resize or break the view                    
                </return>
                <see>
                    text.ParagraphView#getPreferredSpan                    
                </see>
            </javadoc>
            <method name="getPreferredSpan" type="float" line="131">
                <params>
                    <param name="axis" type="int"/>
                </params>
                <scope line="132"/>
            </method>
            <javadoc line="138">
                Determines the minimum span for this view along an
                  axis.  Returns 0 if the view is not visible, otherwise
                  it calls the superclass method to get the minimum span.                
                <param>
                    axis may be either <code>View.X_AXIS</code> or
                      <code>View.Y_AXIS</code>                    
                </param>
                <return>
                    the minimum span the view can be rendered into                    
                </return>
                <see>
                    text.ParagraphView#getMinimumSpan                    
                </see>
            </javadoc>
            <method name="getMinimumSpan" type="float" line="148">
                <params>
                    <param name="axis" type="int"/>
                </params>
                <scope line="149"/>
            </method>
            <javadoc line="155">
                Determines the maximum span for this view along an
                  axis.  Returns 0 if the view is not visible, otherwise
                  it calls the superclass method ot get the maximum span.                
                <param>
                    axis may be either <code>View.X_AXIS</code> or
                      <code>View.Y_AXIS</code>                    
                </param>
                <return>
                    the maximum span the view can be rendered into                    
                </return>
                <see>
                    text.ParagraphView#getMaximumSpan                    
                </see>
            </javadoc>
            <method name="getMaximumSpan" type="float" line="165">
                <params>
                    <param name="axis" type="int"/>
                </params>
                <scope line="166"/>
            </method>
            <declaration name="visible" type="boolean" line="172"/>
        </class>
    </source>