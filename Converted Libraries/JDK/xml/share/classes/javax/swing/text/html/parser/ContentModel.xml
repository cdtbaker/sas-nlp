<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text.html.parser">
        <import package="java.util.Vector"/>
        <import package="java.util.Enumeration"/>
        <import package="java.io"/>
        <class name="ContentModel" line="33">
            <comment line="144">
                A cache used by first().  This cache was found to speed parsing
                 by about 10% (based on measurements of the 4-12 code base after
                 buffering was fixed).                
            </comment>
            <implements interface="Serializable"/>
            <javadoc line="33">
                A representation of a content model. A content model is
                  basically a restricted BNF expression. It is restricted in
                  the sense that it must be deterministic. This means that you
                  don&apos;t have to represent it as a finite state automata.&lt;p&gt;
                  See Annex H on page 556 of the SGML handbook for more information.                
                <author>
                    Arthur van Hoff                    
                </author>
            </javadoc>
            <declaration name="type" type="int" line="44"/>
            <javadoc line="44">
                Type. Either &apos;&apos;, &apos;?&apos;, &apos;+&apos;, &apos;,&apos;, &apos;|&apos;, &apos;&amp;&apos;.                
            </javadoc>
            <declaration name="content" type="Object" line="49"/>
            <javadoc line="49">
                The content. Either an Element or a ContentModel.                
            </javadoc>
            <declaration name="next" type="ContentModel" line="54"/>
            <javadoc line="54">
                The next content model (in a &apos;,&apos;, &apos;|&apos; or &apos;&amp;&apos; expression).                
            </javadoc>
            <method name="ContentModel" type="constructor" line="59"/>
            <javadoc line="62">
                Create a content model for an element.                
            </javadoc>
            <method name="ContentModel" type="constructor" line="65">
                <params>
                    <param name="content" type="Element"/>
                </params>
            </method>
            <javadoc line="69">
                Create a content model of a particular type.                
            </javadoc>
            <method name="ContentModel" type="constructor" line="72">
                <params>
                    <param name="type" type="int"/>
                    <param name="content" type="ContentModel"/>
                </params>
            </method>
            <javadoc line="76">
                Create a content model of a particular type.                
            </javadoc>
            <method name="ContentModel" type="constructor" line="79">
                <params>
                    <param name="type" type="int"/>
                    <param name="content" type="Object"/>
                    <param name="next" type="ContentModel"/>
                </params>
            </method>
            <javadoc line="85">
                Return true if the content model could
                  match an empty input stream.                
            </javadoc>
            <method name="empty" type="boolean" line="89">
                <scope line="97">
                    <scope line="98"/>
                </scope>
                <scope line="106">
                    <scope line="107"/>
                </scope>
            </method>
            <javadoc line="118">
                Update elemVec with the list of elements that are
                  part of the this contentModel.                
            </javadoc>
            <method name="getElements" type="void" line="122">
                <params>
                    <param name="elemVec" type="Vector<Element>"/>
                </params>
                <scope line="132"/>
            </method>
            <declaration name="valSet" type="boolean" line="141"/>
            <declaration name="val" type="boolean" line="142"/>
            <javadoc line="147">
                Return true if the token could potentially be the
                  first token in the input stream.                
            </javadoc>
            <method name="first" type="boolean" line="151">
                <params>
                    <param name="token" type="Object"/>
                </params>
                <comment line="176">
                    All Element instances are created before this ever executes                    
                </comment>
                <comment line="193">
                    PENDING: refer to comment in ContentModelState                    
                </comment>
                <comment line="194">
                    if (content == token) {
                    return true;
                    }
                    Element e = (Element)content;
                    if (e.omitStart() &amp;&amp; e.content != null) {
                    return e.content.first(token);
                    }
                    return false;                    
                </comment>
                <scope line="159">
                    <scope line="160"/>
                    <scope line="163"/>
                </scope>
                <scope line="170">
                    <declaration name="e" type="Element" line="171"/>
                    <scope line="172"/>
                    <scope line="177"/>
                    <scope line="180">
                        <scope line="181"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="206">
                Return the element that must be next.                
            </javadoc>
            <method name="first" type="Element" line="209"/>
            <javadoc line="226">
                Convert to a string.                
            </javadoc>
            <method name="toString" type="String" line="229">
                <declaration name="data" type="char" line="241"/>
                <declaration name="str" type="String" line="242"/>
                <scope line="243">
                    <scope line="245"/>
                </scope>
            </method>
        </class>
    </source>