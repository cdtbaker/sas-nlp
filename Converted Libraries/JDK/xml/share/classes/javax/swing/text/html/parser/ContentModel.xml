<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text.html.parser">
        <import package="java.util.Vector"/>
        <import package="java.util.Enumeration"/>
        <import package="java.io"/>
        <class name="ContentModel" line="5">
            <implements interface="Serializable"/>
            <javadoc line="5">
                A representation of a content model. A content model is
                  basically a restricted BNF expression. It is restricted in
                  the sense that it must be deterministic. This means that you
                  don&apos;t have to represent it as a finite state automata.&lt;p&gt;
                  See Annex H on page 556 of the SGML handbook for more information.                
                <author>
                    Arthur van Hoff                    
                </author>
            </javadoc>
            <declaration name="type" type="int" line="14"/>
            <javadoc line="14">
                Type. Either &apos;&apos;, &apos;?&apos;, &apos;+&apos;, &apos;,&apos;, &apos;|&apos;, &apos;&amp;&apos;.                
            </javadoc>
            <declaration name="content" type="Object" line="18"/>
            <javadoc line="18">
                The content. Either an Element or a ContentModel.                
            </javadoc>
            <declaration name="next" type="ContentModel" line="22"/>
            <javadoc line="22">
                The next content model (in a &apos;,&apos;, &apos;|&apos; or &apos;&amp;&apos; expression).                
            </javadoc>
            <method name="ContentModel" type="constructor" line="26"/>
            <javadoc line="28">
                Create a content model for an element.                
            </javadoc>
            <method name="ContentModel" type="constructor" line="31">
                <params>
                    <param name="content" type="Element"/>
                </params>
            </method>
            <javadoc line="34">
                Create a content model of a particular type.                
            </javadoc>
            <method name="ContentModel" type="constructor" line="37">
                <params>
                    <param name="type" type="int"/>
                    <param name="content" type="ContentModel"/>
                </params>
            </method>
            <javadoc line="40">
                Create a content model of a particular type.                
            </javadoc>
            <method name="ContentModel" type="constructor" line="43">
                <params>
                    <param name="type" type="int"/>
                    <param name="content" type="Object"/>
                    <param name="next" type="ContentModel"/>
                </params>
            </method>
            <javadoc line="48">
                Return true if the content model could
                  match an empty input stream.                
            </javadoc>
            <method name="empty" type="boolean" line="52">
                <scope line="59">
                    <scope line="60"/>
                </scope>
                <scope line="67">
                    <scope line="68"/>
                </scope>
            </method>
            <javadoc line="77">
                Update elemVec with the list of elements that are
                  part of the this contentModel.                
            </javadoc>
            <method name="getElements" type="void" line="81">
                <params>
                    <param name="elemVec" type="Vector&lt;Element&gt;"/>
                </params>
                <scope line="91"/>
            </method>
            <declaration name="valSet" type="boolean" line="99"/>
            <declaration name="val" type="boolean" line="100"/>
            <javadoc line="101">
                Return true if the token could potentially be the
                  first token in the input stream.                
            </javadoc>
            <method name="first" type="boolean" line="105">
                <params>
                    <param name="token" type="Object"/>
                </params>
                <scope line="112">
                    <scope line="113"/>
                    <scope line="116"/>
                </scope>
                <scope line="123">
                    <declaration name="e" type="Element" line="124"/>
                    <scope line="125"/>
                    <scope line="129"/>
                    <scope line="132">
                        <scope line="133"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="145">
                Return the element that must be next.                
            </javadoc>
            <method name="first" type="Element" line="148"/>
            <javadoc line="162">
                Convert to a string.                
            </javadoc>
            <method name="toString" type="String" line="165">
                <declaration name="data" type="char" line="176"/>
                <declaration name="str" type="String" line="177"/>
                <scope line="178">
                    <scope line="180"/>
                </scope>
            </method>
        </class>
    </source>