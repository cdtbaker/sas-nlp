<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text">
        <import package="java.awt.Graphics"/>
        <import package="java.awt.Point"/>
        <import package="javax.swing.Action"/>
        <import package="javax.swing.event.ChangeListener"/>
        <interface name="Caret">
            <javadoc line="6">
                A place within a document view that represents where
                  things can be inserted into the document model.  A caret
                  has a position in the document referred to as a dot.
                  The dot is where the caret is currently located in the
                  model.  There is
                  a second position maintained by the caret that represents
                  the other end of a selection called mark.  If there is
                  no selection the dot and mark will be equal.  If a selection
                  exists, the two values will be different.
                  &lt;p&gt;
                  The dot can be placed by either calling
                  &lt;code&gt;setDot&lt;/code&gt; or &lt;code&gt;moveDot&lt;/code&gt;.  Setting
                  the dot has the effect of removing any selection that may
                  have previously existed.  The dot and mark will be equal.
                  Moving the dot has the effect of creating a selection as
                  the mark is left at whatever position it previously had.                
                <author>
                    Timothy Prinzing                    
                </author>
            </javadoc>
            <method name="install" type="void" line="26"/>
            <javadoc line="26">
                Called when the UI is being installed into the
                  interface of a JTextComponent.  This can be used
                  to gain access to the model that is being navigated
                  by the implementation of this interface.                
                <param>
                    c the JTextComponent                    
                </param>
            </javadoc>
            <method name="deinstall" type="void" line="34"/>
            <javadoc line="34">
                Called when the UI is being removed from the
                  interface of a JTextComponent.  This is used to
                  unregister any listeners that were attached.                
                <param>
                    c the JTextComponent                    
                </param>
            </javadoc>
            <method name="paint" type="void" line="41"/>
            <javadoc line="41">
                Renders the caret. This method is called by UI classes.                
                <param>
                    g the graphics context                    
                </param>
            </javadoc>
            <method name="addChangeListener" type="void" line="46"/>
            <javadoc line="46">
                Adds a listener to track whenever the caret position
                  has been changed.                
                <param>
                    l the change listener                    
                </param>
            </javadoc>
            <method name="removeChangeListener" type="void" line="52"/>
            <javadoc line="52">
                Removes a listener that was tracking caret position changes.                
                <param>
                    l the change listener                    
                </param>
            </javadoc>
            <method name="isVisible" type="boolean" line="57"/>
            <javadoc line="57">
                Determines if the caret is currently visible.                
                <return>
                    true if the caret is visible else false                    
                </return>
            </javadoc>
            <method name="setVisible" type="void" line="62"/>
            <javadoc line="62">
                Sets the visibility of the caret.                
                <param>
                    v  true if the caret should be shown,
                      and false if the caret should be hidden                    
                </param>
            </javadoc>
            <method name="isSelectionVisible" type="boolean" line="68"/>
            <javadoc line="68">
                Determines if the selection is currently visible.                
                <return>
                    true if the caret is visible else false                    
                </return>
            </javadoc>
            <method name="setSelectionVisible" type="void" line="73"/>
            <javadoc line="73">
                Sets the visibility of the selection                
                <param>
                    v  true if the caret should be shown,
                      and false if the caret should be hidden                    
                </param>
            </javadoc>
            <method name="setMagicCaretPosition" type="void" line="79"/>
            <javadoc line="79">
                Set the current caret visual location.  This can be used when
                  moving between lines that have uneven end positions (such as
                  when caret up or down actions occur).  If text flows
                  left-to-right or right-to-left the x-coordinate will indicate
                  the desired navigation location for vertical movement.  If
                  the text flow is top-to-bottom, the y-coordinate will indicate
                  the desired navigation location for horizontal movement.                
                <param>
                    p  the Point to use for the saved position.  This
                      can be null to indicate there is no visual location.                    
                </param>
            </javadoc>
            <method name="getMagicCaretPosition" type="Point" line="91"/>
            <javadoc line="91">
                Gets the current caret visual location.                
                <return>
                    the visual position.                    
                </return>
                <see>
                    #setMagicCaretPosition                    
                </see>
            </javadoc>
            <method name="setBlinkRate" type="void" line="97"/>
            <javadoc line="97">
                Sets the blink rate of the caret.  This determines if
                  and how fast the caret blinks, commonly used as one
                  way to attract attention to the caret.                
                <param>
                    rate  the delay in milliseconds &gt;= 0.  If this is
                      zero the caret will not blink.                    
                </param>
            </javadoc>
            <method name="getBlinkRate" type="int" line="105"/>
            <javadoc line="105">
                Gets the blink rate of the caret.  This determines if
                  and how fast the caret blinks, commonly used as one
                  way to attract attention to the caret.                
                <return>
                    the delay in milliseconds &gt;= 0.  If this is
                      zero the caret will not blink.                    
                </return>
            </javadoc>
            <method name="getDot" type="int" line="113"/>
            <javadoc line="113">
                Fetches the current position of the caret.                
                <return>
                    the position &gt;= 0                    
                </return>
            </javadoc>
            <method name="getMark" type="int" line="118"/>
            <javadoc line="118">
                Fetches the current position of the mark.  If there
                  is a selection, the mark will not be the same as
                  the dot.                
                <return>
                    the position &gt;= 0                    
                </return>
            </javadoc>
            <method name="setDot" type="void" line="125"/>
            <javadoc line="125">
                Sets the caret position to some position.  This
                  causes the mark to become the same as the dot,
                  effectively setting the selection range to zero.
                  &lt;p&gt;
                  If the parameter is negative or beyond the length of the document,
                  the caret is placed at the beginning or at the end, respectively.                
                <param>
                    dot  the new position to set the caret to                    
                </param>
            </javadoc>
            <method name="moveDot" type="void" line="135"/>
            <javadoc line="135">
                Moves the caret position (dot) to some other position,
                  leaving behind the mark.  This is useful for
                  making selections.                
                <param>
                    dot  the new position to move the caret to &gt;= 0                    
                </param>
            </javadoc>
        </interface>
    </source>