<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text">
        <import package="java.io.Serializable"/>
        <import package="java.text.ParseException"/>
        <import package="javax.swing.JFormattedTextField"/>
        <class name="DefaultFormatterFactory" line="5">
            <extends class="JFormattedTextField.AbstractFormatterFactory"/>
            <implements interface="Serializable"/>
            <javadoc line="5">
                An implementation of
                  &lt;code&gt;JFormattedTextField.AbstractFormatterFactory&lt;/code&gt;.
                  &lt;code&gt;DefaultFormatterFactory&lt;/code&gt; allows specifying a number of
                  different &lt;code&gt;JFormattedTextField.AbstractFormatter&lt;/code&gt;s that are to
                  be used.
                  The most important one is the default one
                  (&lt;code&gt;setDefaultFormatter&lt;/code&gt;). The default formatter will be used
                  if a more specific formatter could not be found. The following process
                  is used to determine the appropriate formatter to use.
                  &lt;ol&gt;
                  &lt;li&gt;Is the passed in value null? Use the null formatter.
                  &lt;li&gt;Does the &lt;code&gt;JFormattedTextField&lt;/code&gt; have focus? Use the edit
                  formatter.
                  &lt;li&gt;Otherwise, use the display formatter.
                  &lt;li&gt;If a non-null &lt;code&gt;AbstractFormatter&lt;/code&gt; has not been found, use
                  the default formatter.
                  &lt;/ol&gt;
                  &lt;p&gt;
                  The following code shows how to configure a
                  &lt;code&gt;JFormattedTextField&lt;/code&gt; with two
                  &lt;code&gt;JFormattedTextField.AbstractFormatter&lt;/code&gt;s, one for display and
                  one for editing.
                  &lt;pre&gt;
                  JFormattedTextField.AbstractFormatter editFormatter = ...;
                  JFormattedTextField.AbstractFormatter displayFormatter = ...;
                  DefaultFormatterFactory factory = new DefaultFormatterFactory(
                  displayFormatter, displayFormatter, editFormatter);
                  JFormattedTextField tf = new JFormattedTextField(factory);
                  &lt;/pre&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <see>
                    javax.swing.JFormattedTextField                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="defaultFormat" type="JFormattedTextField.AbstractFormatter" line="48"/>
            <javadoc line="48">
                Default &lt;code&gt;AbstractFormatter&lt;/code&gt; to use if a more specific one has
                  not been specified.                
            </javadoc>
            <declaration name="displayFormat" type="JFormattedTextField.AbstractFormatter" line="53"/>
            <javadoc line="53">
                &lt;code&gt;JFormattedTextField.AbstractFormatter&lt;/code&gt; to use for display.                
            </javadoc>
            <declaration name="editFormat" type="JFormattedTextField.AbstractFormatter" line="57"/>
            <javadoc line="57">
                &lt;code&gt;JFormattedTextField.AbstractFormatter&lt;/code&gt; to use for editing.                
            </javadoc>
            <declaration name="nullFormat" type="JFormattedTextField.AbstractFormatter" line="61"/>
            <javadoc line="61">
                &lt;code&gt;JFormattedTextField.AbstractFormatter&lt;/code&gt; to use if the value
                  is null.                
            </javadoc>
            <method name="DefaultFormatterFactory" type="constructor" line="66"/>
            <javadoc line="68">
                Creates a &lt;code&gt;DefaultFormatterFactory&lt;/code&gt; with the specified
                  &lt;code&gt;JFormattedTextField.AbstractFormatter&lt;/code&gt;.                
                <param>
                    defaultFormat JFormattedTextField.AbstractFormatter to be used
                      if a more specific
                      JFormattedTextField.AbstractFormatter can not be
                      found.                    
                </param>
            </javadoc>
            <method name="DefaultFormatterFactory" type="constructor" line="76">
                <params>
                    <param name="defaultFormat" type="JFormattedTextField.AbstractFormatter"/>
                </params>
            </method>
            <javadoc line="79">
                Creates a &lt;code&gt;DefaultFormatterFactory&lt;/code&gt; with the specified
                  &lt;code&gt;JFormattedTextField.AbstractFormatter&lt;/code&gt;s.                
                <param>
                    defaultFormat JFormattedTextField.AbstractFormatter to be used
                      if a more specific
                      JFormattedTextField.AbstractFormatter can not be
                      found.                    
                </param>
                <param>
                    displayFormat JFormattedTextField.AbstractFormatter to be used
                      when the JFormattedTextField does not have focus.                    
                </param>
            </javadoc>
            <method name="DefaultFormatterFactory" type="constructor" line="89">
                <params>
                    <param name="defaultFormat" type="JFormattedTextField.AbstractFormatter"/>
                    <param name="displayFormat" type="JFormattedTextField.AbstractFormatter"/>
                </params>
            </method>
            <javadoc line="92">
                Creates a DefaultFormatterFactory with the specified
                  JFormattedTextField.AbstractFormatters.                
                <param>
                    defaultFormat JFormattedTextField.AbstractFormatter to be used
                      if a more specific
                      JFormattedTextField.AbstractFormatter can not be
                      found.                    
                </param>
                <param>
                    displayFormat JFormattedTextField.AbstractFormatter to be used
                      when the JFormattedTextField does not have focus.                    
                </param>
                <param>
                    editFormat    JFormattedTextField.AbstractFormatter to be used
                      when the JFormattedTextField has focus.                    
                </param>
            </javadoc>
            <method name="DefaultFormatterFactory" type="constructor" line="104">
                <params>
                    <param name="defaultFormat" type="JFormattedTextField.AbstractFormatter"/>
                    <param name="displayFormat" type="JFormattedTextField.AbstractFormatter"/>
                    <param name="editFormat" type="JFormattedTextField.AbstractFormatter"/>
                </params>
            </method>
            <javadoc line="107">
                Creates a DefaultFormatterFactory with the specified
                  JFormattedTextField.AbstractFormatters.                
                <param>
                    defaultFormat JFormattedTextField.AbstractFormatter to be used
                      if a more specific
                      JFormattedTextField.AbstractFormatter can not be
                      found.                    
                </param>
                <param>
                    displayFormat JFormattedTextField.AbstractFormatter to be used
                      when the JFormattedTextField does not have focus.                    
                </param>
                <param>
                    editFormat    JFormattedTextField.AbstractFormatter to be used
                      when the JFormattedTextField has focus.                    
                </param>
                <param>
                    nullFormat    JFormattedTextField.AbstractFormatter to be used
                      when the JFormattedTextField has a null value.                    
                </param>
            </javadoc>
            <method name="DefaultFormatterFactory" type="constructor" line="121">
                <params>
                    <param name="defaultFormat" type="JFormattedTextField.AbstractFormatter"/>
                    <param name="displayFormat" type="JFormattedTextField.AbstractFormatter"/>
                    <param name="editFormat" type="JFormattedTextField.AbstractFormatter"/>
                    <param name="nullFormat" type="JFormattedTextField.AbstractFormatter"/>
                </params>
            </method>
            <javadoc line="127">
                Sets the &lt;code&gt;JFormattedTextField.AbstractFormatter&lt;/code&gt; to use as
                  a last resort, eg in case a display, edit or null
                  &lt;code&gt;JFormattedTextField.AbstractFormatter&lt;/code&gt; has not been
                  specified.                
                <param>
                    atf JFormattedTextField.AbstractFormatter used if a more
                      specific is not specified                    
                </param>
            </javadoc>
            <method name="setDefaultFormatter" type="void" line="135">
                <params>
                    <param name="atf" type="JFormattedTextField.AbstractFormatter"/>
                </params>
            </method>
            <javadoc line="138">
                Returns the &lt;code&gt;JFormattedTextField.AbstractFormatter&lt;/code&gt; to use
                  as a last resort, eg in case a display, edit or null
                  &lt;code&gt;JFormattedTextField.AbstractFormatter&lt;/code&gt;
                  has not been specified.                
                <return>
                    JFormattedTextField.AbstractFormatter used if a more specific
                      one is not specified.                    
                </return>
            </javadoc>
            <method name="getDefaultFormatter" type="JFormattedTextField.AbstractFormatter" line="146"/>
            <javadoc line="149">
                Sets the &lt;code&gt;JFormattedTextField.AbstractFormatter&lt;/code&gt; to use if
                  the &lt;code&gt;JFormattedTextField&lt;/code&gt; is not being edited and either
                  the value is not-null, or the value is null and a null formatter has
                  has not been specified.                
                <param>
                    atf JFormattedTextField.AbstractFormatter to use when the
                      JFormattedTextField does not have focus                    
                </param>
            </javadoc>
            <method name="setDisplayFormatter" type="void" line="157">
                <params>
                    <param name="atf" type="JFormattedTextField.AbstractFormatter"/>
                </params>
            </method>
            <javadoc line="160">
                Returns the &lt;code&gt;JFormattedTextField.AbstractFormatter&lt;/code&gt; to use
                  if the &lt;code&gt;JFormattedTextField&lt;/code&gt; is not being edited and either
                  the value is not-null, or the value is null and a null formatter has
                  has not been specified.                
                <return>
                    JFormattedTextField.AbstractFormatter to use when the
                      JFormattedTextField does not have focus                    
                </return>
            </javadoc>
            <method name="getDisplayFormatter" type="JFormattedTextField.AbstractFormatter" line="168"/>
            <javadoc line="171">
                Sets the &lt;code&gt;JFormattedTextField.AbstractFormatter&lt;/code&gt; to use if
                  the &lt;code&gt;JFormattedTextField&lt;/code&gt; is being edited and either
                  the value is not-null, or the value is null and a null formatter has
                  has not been specified.                
                <param>
                    atf JFormattedTextField.AbstractFormatter to use when the
                      component has focus                    
                </param>
            </javadoc>
            <method name="setEditFormatter" type="void" line="179">
                <params>
                    <param name="atf" type="JFormattedTextField.AbstractFormatter"/>
                </params>
            </method>
            <javadoc line="182">
                Returns the &lt;code&gt;JFormattedTextField.AbstractFormatter&lt;/code&gt; to use
                  if the &lt;code&gt;JFormattedTextField&lt;/code&gt; is being edited and either
                  the value is not-null, or the value is null and a null formatter has
                  has not been specified.                
                <return>
                    JFormattedTextField.AbstractFormatter to use when the
                      component has focus                    
                </return>
            </javadoc>
            <method name="getEditFormatter" type="JFormattedTextField.AbstractFormatter" line="190"/>
            <javadoc line="193">
                Sets the formatter to use if the value of the JFormattedTextField is
                  null.                
                <param>
                    atf JFormattedTextField.AbstractFormatter to use when
                      the value of the JFormattedTextField is null.                    
                </param>
            </javadoc>
            <method name="setNullFormatter" type="void" line="199">
                <params>
                    <param name="atf" type="JFormattedTextField.AbstractFormatter"/>
                </params>
            </method>
            <javadoc line="202">
                Returns the formatter to use if the value is null.                
                <return>
                    JFormattedTextField.AbstractFormatter to use when the value is
                      null                    
                </return>
            </javadoc>
            <method name="getNullFormatter" type="JFormattedTextField.AbstractFormatter" line="207"/>
            <javadoc line="210">
                Returns either the default formatter, display formatter, editor
                  formatter or null formatter based on the state of the
                  JFormattedTextField.                
                <param>
                    source JFormattedTextField requesting
                      JFormattedTextField.AbstractFormatter                    
                </param>
                <return>
                    JFormattedTextField.AbstractFormatter to handle
                      formatting duties.                    
                </return>
            </javadoc>
            <method name="getFormatter" type="JFormattedTextField.AbstractFormatter" line="219">
                <params>
                    <param name="source" type="JFormattedTextField"/>
                </params>
                <declaration name="format" type="JFormattedTextField.AbstractFormatter" line="220"/>
                <scope line="221"/>
                <declaration name="value" type="Object" line="224"/>
                <scope line="225"/>
                <scope line="228">
                    <scope line="229"/>
                    <scope line="232"/>
                    <scope line="235"/>
                </scope>
            </method>
        </class>
    </source>