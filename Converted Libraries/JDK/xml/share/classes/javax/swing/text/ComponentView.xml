<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text">
        <import package="java.awt"/>
        <import package="java.beans.PropertyChangeEvent"/>
        <import package="java.beans.PropertyChangeListener"/>
        <import package="java.util.Set"/>
        <import package="javax.swing.SwingUtilities"/>
        <import package="javax.swing.event"/>
        <class name="ComponentView" line="34">
            <extends class="View"/>
            <comment line="103">
                --- View methods ---------------------------------------------                
            </comment>
            <comment line="365">
                --- member variables ------------------------------------------------                
            </comment>
            <javadoc line="34">
                Component decorator that implements the view interface.  The
                  entire element is used to represent the component.  This acts
                  as a gateway from the display-only View implementations to
                  interactive lightweight components (ie it allows components
                  to be embedded into the View hierarchy).
                  &lt;p&gt;
                  The component is placed relative to the text baseline
                  according to the value returned by
                  &lt;code&gt;Component.getAlignmentY&lt;/code&gt;.  For Swing components
                  this value can be conveniently set using the method
                  &lt;code&gt;JComponent.setAlignmentY&lt;/code&gt;.  For example, setting
                  a value of &lt;code&gt;0.75&lt;/code&gt; will cause 75 percent of the
                  component to be above the baseline, and 25 percent of the
                  component to be below the baseline.
                  &lt;p&gt;
                  This class is implemented to do the extra work necessary to
                  work properly in the presence of multiple threads (i.e. from
                  asynchronous notification of model changes for example) by
                  ensuring that all component access is done on the event thread.
                  &lt;p&gt;
                  The component used is determined by the return value of the
                  createComponent method.  The default implementation of this
                  method is to return the component held as an attribute of
                  the element (by calling StyleConstants.getComponent).  A
                  limitation of this behavior is that the component cannot
                  be used by more than one text component (i.e. with a shared
                  model).  Subclasses can remove this constraint by implementing
                  the createComponent to actually create a component based upon
                  some kind of specification contained in the attributes.  The
                  ObjectView class in the html package is an example of a
                  ComponentView implementation that supports multiple component
                  views of a shared model.                
                <author>
                    Timothy Prinzing                    
                </author>
            </javadoc>
            <javadoc line="72">
                Creates a new ComponentView object.                
                <param>
                    elem the element to decorate                    
                </param>
            </javadoc>
            <method name="ComponentView" type="constructor" line="77">
                <params>
                    <param name="elem" type="Element"/>
                </params>
            </method>
            <javadoc line="81">
                Create the component that is associated with
                  this view.  This will be called when it has
                  been determined that a new component is needed.
                  This would result from a call to setParent or
                  as a result of being notified that attributes
                  have changed.                
            </javadoc>
            <method name="createComponent" type="Component" line="89">
                <declaration name="attr" type="AttributeSet" line="90"/>
                <declaration name="comp" type="Component" line="91"/>
            </method>
            <javadoc line="95">
                Fetch the component associated with the view.                
            </javadoc>
            <method name="getComponent" type="Component" line="98"/>
            <javadoc line="104">
                The real paint behavior occurs naturally from the association
                  that the component has with its parent container (the same
                  container hosting this view).  This is implemented to do nothing.                
                <param>
                    g the graphics context                    
                </param>
                <param>
                    a the shape                    
                </param>
                <see>
                    View#paint                    
                </see>
            </javadoc>
            <method name="paint" type="void" line="113">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="a" type="Shape"/>
                </params>
                <scope line="114">
                    <declaration name="alloc" type="Rectangle" line="115"/>
                </scope>
            </method>
            <javadoc line="121">
                Determines the preferred span for this view along an
                  axis.  This is implemented to return the value
                  returned by Component.getPreferredSize along the
                  axis of interest.                
                <param>
                    axis may be either View.X_AXIS or View.Y_AXIS                    
                </param>
                <return>
                    the span the view would like to be rendered into >= 0.
                      Typically the view is told to render into the span
                      that is returned, although there is no guarantee.
                      The parent may choose to resize or break the view.                    
                </return>
                <exception>
                    IllegalArgumentException for an invalid axis                    
                </exception>
            </javadoc>
            <method name="getPreferredSpan" type="float" line="134">
                <params>
                    <param name="axis" type="int"/>
                </params>
                <scope line="135"/>
                <scope line="138">
                    <declaration name="size" type="Dimension" line="139"/>
                    <scope line="140"/>
                    <scope line="142"/>
                </scope>
            </method>
            <javadoc line="149">
                Determines the minimum span for this view along an
                  axis.  This is implemented to return the value
                  returned by Component.getMinimumSize along the
                  axis of interest.                
                <param>
                    axis may be either View.X_AXIS or View.Y_AXIS                    
                </param>
                <return>
                    the span the view would like to be rendered into >= 0.
                      Typically the view is told to render into the span
                      that is returned, although there is no guarantee.
                      The parent may choose to resize or break the view.                    
                </return>
                <exception>
                    IllegalArgumentException for an invalid axis                    
                </exception>
            </javadoc>
            <method name="getMinimumSpan" type="float" line="162">
                <params>
                    <param name="axis" type="int"/>
                </params>
                <scope line="163"/>
                <scope line="166">
                    <declaration name="size" type="Dimension" line="167"/>
                    <scope line="168"/>
                    <scope line="170"/>
                </scope>
            </method>
            <javadoc line="177">
                Determines the maximum span for this view along an
                  axis.  This is implemented to return the value
                  returned by Component.getMaximumSize along the
                  axis of interest.                
                <param>
                    axis may be either View.X_AXIS or View.Y_AXIS                    
                </param>
                <return>
                    the span the view would like to be rendered into >= 0.
                      Typically the view is told to render into the span
                      that is returned, although there is no guarantee.
                      The parent may choose to resize or break the view.                    
                </return>
                <exception>
                    IllegalArgumentException for an invalid axis                    
                </exception>
            </javadoc>
            <method name="getMaximumSpan" type="float" line="190">
                <params>
                    <param name="axis" type="int"/>
                </params>
                <scope line="191"/>
                <scope line="194">
                    <declaration name="size" type="Dimension" line="195"/>
                    <scope line="196"/>
                    <scope line="198"/>
                </scope>
            </method>
            <javadoc line="205">
                Determines the desired alignment for this view along an
                  axis.  This is implemented to give the alignment of the
                  embedded component.                
                <param>
                    axis may be either View.X_AXIS or View.Y_AXIS                    
                </param>
                <return>
                    the desired alignment.  This should be a value
                      between 0.0 and 1.0 where 0 indicates alignment at the
                      origin and 1.0 indicates alignment to the full span
                      away from the origin.  An alignment of 0.5 would be the
                      center of the view.                    
                </return>
            </javadoc>
            <method name="getAlignment" type="float" line="217">
                <params>
                    <param name="axis" type="int"/>
                </params>
                <scope line="218"/>
            </method>
            <javadoc line="229">
                Sets the parent for a child view.
                  The parent calls this on the child to tell it who its
                  parent is, giving the view access to things like
                  the hosting Container.  The superclass behavior is
                  executed, followed by a call to createComponent if
                  the parent view parameter is non-null and a component
                  has not yet been created. The embedded components parent
                  is then set to the value returned by &lt;code&gt;getContainer&lt;/code&gt;.
                  If the parent view parameter is null, this view is being
                  cleaned up, thus the component is removed from its parent.
                  &lt;p&gt;
                  The changing of the component hierarchy will
                  touch the component lock, which is the one thing
                  that is not safe from the View hierarchy.  Therefore,
                  this functionality is executed immediately if on the
                  event thread, or is queued on the event queue if
                  called from another thread (notification of change
                  from an asynchronous update).                
                <param>
                    p the parent                    
                </param>
            </javadoc>
            <method name="setParent" type="void" line="251">
                <params>
                    <param name="p" type="View"/>
                </params>
                <scope line="253"/>
                <scope line="255">
                    <anonymous_class line="256">
                        <method name="run" type="void" line="257">
                            <declaration name="doc" type="Document" line="258"/>
                            <scope line="259">
                                <scope line="260"/>
                                <declaration name="host" type="Container" line="264"/>
                                <scope line="265"/>
                            </scope>
                            <scope line="269">
                                <scope line="270"/>
                            </scope>
                        </method>
                    </anonymous_class>
                    <declaration name="callSetComponentParent" type="Runnable" line="256"/>
                </scope>
            </method>
            <javadoc line="280">
                Set the parent of the embedded component
                  with assurance that it is thread-safe.                
            </javadoc>
            <method name="setComponentParent" type="void" line="284">
                <comment line="290">
                    try to build a component                    
                </comment>
                <comment line="299">
                    components associated with the View tree are added                    
                </comment>
                <comment line="300">
                    to the hosting container with the View as a constraint.                    
                </comment>
                <comment line="310">
                    remove the component from its hosting container                    
                </comment>
                <declaration name="p" type="View" line="285"/>
                <scope line="286">
                    <declaration name="parent" type="Container" line="287"/>
                    <scope line="288">
                        <scope line="289">
                            <declaration name="comp" type="Component" line="291"/>
                            <scope line="292"/>
                        </scope>
                        <scope line="297">
                            <scope line="298"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="306">
                    <scope line="307">
                        <declaration name="parent" type="Container" line="308"/>
                        <scope line="309"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="318">
                Provides a mapping from the coordinate space of the model to
                  that of the view.                
                <param>
                    pos the position to convert >= 0                    
                </param>
                <param>
                    a the allocated region to render into                    
                </param>
                <return>
                    the bounding box of the given position is returned                    
                </return>
                <exception>
                    BadLocationException  if the given position does not
                      represent a valid location in the associated document                    
                </exception>
                <see>
                    View#modelToView                    
                </see>
            </javadoc>
            <method name="modelToView" type="Shape" line="329">
                <params>
                    <param name="pos" type="int"/>
                    <param name="a" type="Shape"/>
                    <param name="b" type="Position.Bias"/>
                </params>
                <declaration name="p0" type="int" line="330"/>
                <declaration name="p1" type="int" line="331"/>
                <scope line="332">
                    <declaration name="r" type="Rectangle" line="333"/>
                    <scope line="334"/>
                </scope>
            </method>
            <javadoc line="343">
                Provides a mapping from the view coordinate space to the logical
                  coordinate space of the model.                
                <param>
                    x the X coordinate >= 0                    
                </param>
                <param>
                    y the Y coordinate >= 0                    
                </param>
                <param>
                    a the allocated region to render into                    
                </param>
                <return>
                    the location within the model that best represents
                      the given point in the view                    
                </return>
                <see>
                    View#viewToModel                    
                </see>
            </javadoc>
            <method name="viewToModel" type="int" line="354">
                <params>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                    <param name="a" type="Shape"/>
                    <param name="bias" type="Position.Bias[]"/>
                </params>
                <declaration name="alloc" type="Rectangle" line="355"/>
                <scope line="356"/>
            </method>
            <declaration name="createdC" type="Component" line="366"/>
            <declaration name="c" type="Invalidator" line="367"/>
            <class name="Invalidator" line="369">
                <extends class="Container"/>
                <comment line="380">
                    NOTE: When we remove this class we are going to have to some                    
                </comment>
                <comment line="381">
                    how enforce setting of the focus traversal keys on the children                    
                </comment>
                <comment line="382">
                    so that they don&apos;t inherit them from the JEditorPane. We need                    
                </comment>
                <comment line="383">
                    to do this as JEditorPane has abnormal bindings (it is a focus cycle                    
                </comment>
                <comment line="384">
                    root) and the children typically don&apos;t want these bindings as well.                    
                </comment>
                <implements interface="PropertyChangeListener"/>
                <javadoc line="369">
                    This class feeds the invalidate back to the
                      hosting View.  This is needed to get the View
                      hierarchy to consider giving the component
                      a different size (i.e. layout may have been
                      cached between the associated view and the
                      container hosting this component).                    
                </javadoc>
                <method name="Invalidator" type="constructor" line="385">
                    <params>
                        <param name="child" type="Component"/>
                    </params>
                </method>
                <javadoc line="391">
                    The components invalid layout needs
                      to be propagated through the view hierarchy
                      so the views (which position the component)
                      can have their layout recomputed.                    
                </javadoc>
                <method name="invalidate" type="void" line="397">
                    <scope line="399"/>
                </method>
                <method name="doLayout" type="void" line="404"/>
                <method name="setBounds" type="void" line="408">
                    <params>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                        <param name="w" type="int"/>
                        <param name="h" type="int"/>
                    </params>
                    <scope line="410"/>
                </method>
                <method name="validateIfNecessary" type="void" line="416">
                    <scope line="417"/>
                </method>
                <method name="cacheChildSizes" type="void" line="422">
                    <scope line="423">
                        <declaration name="child" type="Component" line="424"/>
                    </scope>
                    <scope line="430"/>
                </method>
                <javadoc line="435">
                    Shows or hides this component depending on the value of parameter
                      &lt;code&gt;b&lt;/code&gt;.                    
                    <param>
                        b If <code>true</code>, shows this component;
                          otherwise, hides this component.                        
                    </param>
                    <see>
                        #isVisible                        
                    </see>
                    <since>
                        JDK1.1                        
                    </since>
                </javadoc>
                <method name="setVisible" type="void" line="443">
                    <params>
                        <param name="b" type="boolean"/>
                    </params>
                    <scope line="445"/>
                </method>
                <javadoc line="450">
                    Overridden to fix 4759054. Must return true so that content
                      is painted when inside a CellRendererPane which is normally
                      invisible.                    
                </javadoc>
                <method name="isShowing" type="boolean" line="455"/>
                <method name="getMinimumSize" type="Dimension" line="459"/>
                <method name="getPreferredSize" type="Dimension" line="464"/>
                <method name="getMaximumSize" type="Dimension" line="469"/>
                <method name="getAlignmentX" type="float" line="474"/>
                <method name="getAlignmentY" type="float" line="479"/>
                <method name="getFocusTraversalKeys" type="Set<AWTKeyStroke>" line="484">
                    <params>
                        <param name="id" type="int"/>
                    </params>
                </method>
                <method name="propertyChange" type="void" line="489">
                    <params>
                        <param name="ev" type="PropertyChangeEvent"/>
                    </params>
                    <declaration name="enable" type="Boolean" line="490"/>
                    <scope line="491"/>
                </method>
                <declaration name="min" type="Dimension" line="496"/>
                <declaration name="pref" type="Dimension" line="497"/>
                <declaration name="max" type="Dimension" line="498"/>
                <declaration name="yalign" type="float" line="499"/>
                <declaration name="xalign" type="float" line="500"/>
            </class>
        </class>
    </source>