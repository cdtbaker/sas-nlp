<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text.html">
        <import package="java.awt"/>
        <import package="javax.swing.event.DocumentEvent"/>
        <import package="javax.swing.text"/>
        <import package="java.util.Enumeration"/>
        <import package="java.lang.Integer"/>
        <class name="HRuleView" line="33">
            <extends class="View"/>
            <comment line="98">
                This will be removed and centralized at some point, need to unify this
                 and avoid private classes.                
            </comment>
            <comment line="106">
                --- View methods ---------------------------------------------                
            </comment>
            <comment line="306">
                --- variables ------------------------------------------------                
            </comment>
            <javadoc line="33">
                A view implementation to display an html horizontal
                  rule.                
                <author>
                    Timothy Prinzing                    
                </author>
                <author>
                    Sara Swanson                    
                </author>
            </javadoc>
            <javadoc line="42">
                Creates a new view that represents an &amp;lt;hr&amp;gt; element.                
                <param>
                    elem the element to create a view for                    
                </param>
            </javadoc>
            <method name="HRuleView" type="constructor" line="47">
                <params>
                    <param name="elem" type="Element"/>
                </params>
            </method>
            <javadoc line="52">
                Update any cached values that come from attributes.                
            </javadoc>
            <method name="setPropertiesFromAttributes" type="void" line="55">
                <comment line="67">
                    getAlignment() returns ALIGN_LEFT by default, and HR should
                     use ALIGN_CENTER by default, so we check if the alignment
                     attribute is actually defined                    
                </comment>
                <declaration name="sheet" type="StyleSheet" line="56"/>
                <declaration name="eAttr" type="AttributeSet" line="57"/>
                <scope line="65">
                    <scope line="69"/>
                    <declaration name="value" type="Object" line="74"/>
                    <scope line="75">
                        <scope line="76"/>
                        <scope line="78"/>
                    </scope>
                    <scope line="83"/>
                </scope>
                <scope line="91"/>
            </method>
            <method name="getLength" type="float" line="99">
                <params>
                    <param name="key" type="CSS.Attribute"/>
                    <param name="a" type="AttributeSet"/>
                </params>
                <declaration name="lv" type="CSS.LengthValue" line="100"/>
                <declaration name="len" type="float" line="101"/>
            </method>
            <javadoc line="107">
                Paints the view.                
                <param>
                    g the graphics context                    
                </param>
                <param>
                    a the allocation region for the view                    
                </param>
                <see>
                    View#paint                    
                </see>
            </javadoc>
            <method name="paint" type="void" line="114">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="a" type="Shape"/>
                </params>
                <comment line="129">
                    Align the rule horizontally.                    
                </comment>
                <comment line="143">
                    Paint either a shaded rule or a solid line.                    
                </comment>
                <declaration name="alloc" type="Rectangle" line="115"/>
                <declaration name="x" type="int" line="117"/>
                <declaration name="y" type="int" line="118"/>
                <declaration name="width" type="int" line="119"/>
                <scope line="120"/>
                <declaration name="height" type="int" line="123"/>
                <scope line="143"/>
                <scope line="147">
                    <declaration name="bg" type="Color" line="148"/>
                    <declaration name="bottom" type="Color" line="149"/>
                    <scope line="150"/>
                    <scope line="154"/>
                </scope>
            </method>
            <javadoc line="169">
                Calculates the desired shape of the rule... this is
                  basically the preferred size of the border.                
                <param>
                    axis may be either X_AXIS or Y_AXIS                    
                </param>
                <return>
                    the desired span                    
                </return>
                <see>
                    View#getPreferredSpan                    
                </see>
            </javadoc>
            <method name="getPreferredSpan" type="float" line="177">
                <params>
                    <param name="axis" type="int"/>
                </params>
                <scope line="182"/>
                <scope line="185">
                    <scope line="186"/>
                    <scope line="189"/>
                </scope>
            </method>
            <javadoc line="198">
                Gets the resize weight for the axis.
                  The rule is: rigid vertically and flexible horizontally.                
                <param>
                    axis may be either X_AXIS or Y_AXIS                    
                </param>
                <return>
                    the weight                    
                </return>
            </javadoc>
            <method name="getResizeWeight" type="int" line="205">
                <params>
                    <param name="axis" type="int"/>
                </params>
                <scope line="206"/>
                <scope line="208"/>
                <scope line="210"/>
            </method>
            <javadoc line="215">
                Determines how attractive a break opportunity in
                  this view is.  This is implemented to request a forced break.                
                <param>
                    axis may be either View.X_AXIS or View.Y_AXIS                    
                </param>
                <param>
                    pos the potential location of the start of the
                      broken view (greater than or equal to zero).
                      This may be useful for calculating tab
                      positions.                    
                </param>
                <param>
                    len specifies the relative length from <em>pos</em>
                      where a potential break is desired. The value must be greater
                      than or equal to zero.                    
                </param>
                <return>
                    the weight, which should be a value between
                      ForcedBreakWeight and BadBreakWeight.                    
                </return>
            </javadoc>
            <method name="getBreakWeight" type="int" line="230">
                <params>
                    <param name="axis" type="int"/>
                    <param name="pos" type="float"/>
                    <param name="len" type="float"/>
                </params>
                <scope line="231"/>
            </method>
            <method name="breakView" type="View" line="237">
                <params>
                    <param name="axis" type="int"/>
                    <param name="offset" type="int"/>
                    <param name="pos" type="float"/>
                    <param name="len" type="float"/>
                </params>
            </method>
            <javadoc line="241">
                Provides a mapping from the document model coordinate space
                  to the coordinate space of the view mapped to it.                
                <param>
                    pos the position to convert                    
                </param>
                <param>
                    a the allocated region to render into                    
                </param>
                <return>
                    the bounding box of the given position                    
                </return>
                <exception>
                    BadLocationException  if the given position does not
                      represent a valid location in the associated document                    
                </exception>
                <see>
                    View#modelToView                    
                </see>
            </javadoc>
            <method name="modelToView" type="Shape" line="252">
                <params>
                    <param name="pos" type="int"/>
                    <param name="a" type="Shape"/>
                    <param name="b" type="Position.Bias"/>
                </params>
                <declaration name="p0" type="int" line="253"/>
                <declaration name="p1" type="int" line="254"/>
                <scope line="255">
                    <declaration name="r" type="Rectangle" line="256"/>
                    <scope line="257"/>
                </scope>
            </method>
            <javadoc line="266">
                Provides a mapping from the view coordinate space to the logical
                  coordinate space of the model.                
                <param>
                    x the X coordinate                    
                </param>
                <param>
                    y the Y coordinate                    
                </param>
                <param>
                    a the allocated region to render into                    
                </param>
                <return>
                    the location within the model that best represents the
                      given point of view                    
                </return>
                <see>
                    View#viewToModel                    
                </see>
            </javadoc>
            <method name="viewToModel" type="int" line="277">
                <params>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                    <param name="a" type="Shape"/>
                    <param name="bias" type="Position.Bias[]"/>
                </params>
                <declaration name="alloc" type="Rectangle" line="278"/>
                <scope line="279"/>
            </method>
            <javadoc line="287">
                Fetches the attributes to use when rendering.  This is
                  implemented to multiplex the attributes specified in the
                  model with a StyleSheet.                
            </javadoc>
            <method name="getAttributes" type="AttributeSet" line="292"/>
            <method name="changedUpdate" type="void" line="296">
                <params>
                    <param name="changes" type="DocumentEvent"/>
                    <param name="a" type="Shape"/>
                    <param name="f" type="ViewFactory"/>
                </params>
                <declaration name="pos" type="int" line="298"/>
                <scope line="300"/>
            </method>
            <declaration name="topMargin" type="float" line="307"/>
            <declaration name="bottomMargin" type="float" line="308"/>
            <declaration name="leftMargin" type="float" line="309"/>
            <declaration name="rightMargin" type="float" line="310"/>
            <declaration name="alignment" type="int" line="311"/>
            <declaration name="noshade" type="String" line="312"/>
            <declaration name="size" type="int" line="313"/>
            <declaration name="widthValue" type="CSS.LengthValue" line="314"/>
            <declaration name="SPACE_ABOVE" type="int" line="316"/>
            <declaration name="SPACE_BELOW" type="int" line="317"/>
            <declaration name="attr" type="AttributeSet" line="319"/>
            <javadoc line="319">
                View Attributes.                
            </javadoc>
        </class>
    </source>