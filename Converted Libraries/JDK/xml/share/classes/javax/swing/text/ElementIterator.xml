<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text">
        <import package="java.util.Stack"/>
        <import package="java.util.Enumeration"/>
        <class name="ElementIterator" line="31">
            <comment line="353">
                Iterates through the element tree and prints
                out each element and its attributes.                
            </comment>
            <implements interface="Cloneable"/>
            <javadoc line="31">
                &lt;p&gt;
                  ElementIterator, as the name suggests, iteratates over the Element
                  tree.  The constructor can be invoked with either Document or an Element
                  as an argument.  If the constructor is invoked with a Document as an
                  argument then the root of the iteration is the return value of
                  document.getDefaultRootElement().
                  The iteration happens in a depth-first manner.  In terms of how
                  boundary conditions are handled:
                  a) if next() is called before first() or current(), the
                  root will be returned.
                  b) next() returns null to indicate the end of the list.
                  c) previous() returns null when the current element is the root
                  or next() has returned null.
                  The ElementIterator does no locking of the Element tree. This means
                  that it does not track any changes.  It is the responsibility of the
                  user of this class, to ensure that no changes happen during element
                  iteration.
                  Simple usage example:
                  public void iterate() {
                  ElementIterator it = new ElementIterator(root);
                  Element elem;
                  while (true) {
                  if ((elem = next()) != null) {
                  // process element
                  System.out.println(&quot;elem: &quot; + elem.getName());
                  } else {
                  break;
                  }
                  }
                  }                
                <author>
                    Sunita Mani                    
                </author>
            </javadoc>
            <declaration name="root" type="Element" line="74"/>
            <declaration name="elementStack" type="Stack&lt;StackItem&gt;" line="75"/>
            <class name="StackItem" line="77">
                <implements interface="Cloneable"/>
                <javadoc line="77">
                    The StackItem class stores the element
                      as well as a child index.  If the
                      index is -1, then the element represented
                      on the stack is the element itself.
                      Otherwise, the index functions as as index
                      into the vector of children of the element.
                      In this case, the item on the stack
                      represents the &quot;index&quot;th child of the element                    
                </javadoc>
                <declaration name="item" type="Element" line="89"/>
                <declaration name="childIndex" type="int" line="90"/>
                <method name="StackItem" type="constructor" line="92">
                    <params>
                        <param name="elem" type="Element"/>
                    </params>
                    <comment line="93">
                        -1 index implies a self reference,
                         as opposed to an index into its
                         list of children.                        
                    </comment>
                </method>
                <method name="incrementIndex" type="void" line="102"/>
                <method name="getElement" type="Element" line="106"/>
                <method name="getIndex" type="int" line="110"/>
                <method name="clone" type="Object" line="114"/>
            </class>
            <javadoc line="119">
                Creates a new ElementIterator. The
                  root element is taken to get the
                  default root element of the document.                
                <param>
                    document a Document.                    
                </param>
            </javadoc>
            <method name="ElementIterator" type="constructor" line="126">
                <params>
                    <param name="document" type="Document"/>
                </params>
            </method>
            <javadoc line="131">
                Creates a new ElementIterator.                
                <param>
                    root the root Element.                    
                </param>
            </javadoc>
            <method name="ElementIterator" type="constructor" line="136">
                <params>
                    <param name="root" type="Element"/>
                </params>
            </method>
            <javadoc line="141">
                Clones the ElementIterator.                
                <return>
                    a cloned ElementIterator Object.                    
                </return>
            </javadoc>
            <method name="clone" type="Object" line="146">
                <scope line="148">
                    <declaration name="it" type="ElementIterator" line="149"/>
                    <scope line="150">
                        <scope line="152">
                            <declaration name="item" type="StackItem" line="153"/>
                            <declaration name="clonee" type="StackItem" line="154"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="159"/>
            </method>
            <javadoc line="165">
                Fetches the first element.                
                <return>
                    an Element.                    
                </return>
            </javadoc>
            <method name="first" type="Element" line="170">
                <comment line="171">
                    just in case...                    
                </comment>
                <scope line="172"/>
                <scope line="177"/>
            </method>
            <javadoc line="183">
                Fetches the current depth of element tree.                
                <return>
                    the depth.                    
                </return>
            </javadoc>
            <method name="depth" type="int" line="188">
                <scope line="189"/>
            </method>
            <javadoc line="196">
                Fetches the current Element.                
                <return>
                    element on top of the stack or
                      <code>null</code> if the root element is <code>null</code>                    
                </return>
            </javadoc>
            <method name="current" type="Element" line="202">
                <comment line="208">
                    get a handle to the element on top of the stack.                    
                </comment>
                <comment line="215">
                    self reference                    
                </comment>
                <comment line="219">
                    return the child at location &quot;index&quot;.                    
                </comment>
                <scope line="204"/>
                <scope line="211">
                    <declaration name="item" type="StackItem" line="212"/>
                    <declaration name="elem" type="Element" line="213"/>
                    <declaration name="index" type="int" line="214"/>
                    <scope line="216"/>
                </scope>
            </method>
            <javadoc line="226">
                Fetches the next Element. The strategy
                  used to locate the next element is
                  a depth-first search.                
                <return>
                    the next element or <code>null</code>
                      at the end of the list.                    
                </return>
            </javadoc>
            <method name="next" type="Element" line="234">
                <comment line="236">
                    if current() has not been invoked
                    and next is invoked, the very first                    
                </comment>
                <comment line="243">
                    no more elements                    
                </comment>
                <comment line="248">
                    get a handle to the element on top of the stack                    
                </comment>
                <comment line="257">
                    In this case we merely want to increment
                    the child index of the item on top of the                    
                </comment>
                <comment line="262">
                    In this case we need to push the child(branch)
                    on the stack so that we can iterate over its                    
                </comment>
                <comment line="269">
                    No more children for the item on top of the                    
                </comment>
                <comment line="273">
                    Increment the child index for the item that                    
                </comment>
                <comment line="277">
                    We now want to return its next child, therefore                    
                </comment>
                <scope line="239"/>
                <scope line="244"/>
                <declaration name="item" type="StackItem" line="250"/>
                <declaration name="elem" type="Element" line="251"/>
                <declaration name="index" type="int" line="252"/>
                <scope line="254">
                    <declaration name="child" type="Element" line="255"/>
                    <scope line="256"/>
                    <scope line="261"/>
                </scope>
                <scope line="268">
                    <scope line="272">
                        <declaration name="top" type="StackItem" line="275"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="286">
                Fetches the previous Element. If howver the current
                  element is the last element, or the current element
                  is null, then null is returned.                
                <return>
                    previous <code>Element</code> if available                    
                </return>
            </javadoc>
            <method name="previous" type="Element" line="294">
                <comment line="301">
                    get a handle to the element on top of the stack                    
                </comment>
                <comment line="302">
                                        
                </comment>
                <comment line="308">
                                        
                </comment>
                <comment line="311">
                    this implies that current is the element&apos;s
                    first child, therefore previous is the                    
                </comment>
                <comment line="317">
                    current is the root, nothing before it.                    
                </comment>
                <comment line="320">
                    We need to return either the item
                    below the top item or one of the                    
                </comment>
                <comment line="326">
                    restore the top item.                    
                </comment>
                <comment line="333">
                    should never get here.                    
                </comment>
                <declaration name="stackSize" type="int" line="296"/>
                <scope line="297"/>
                <declaration name="item" type="StackItem" line="303"/>
                <declaration name="elem" type="Element" line="304"/>
                <declaration name="index" type="int" line="305"/>
                <scope line="307"/>
                <scope line="310"/>
                <scope line="315">
                    <scope line="316"/>
                    <declaration name="top" type="StackItem" line="323"/>
                </scope>
            </method>
            <javadoc line="337">
                Returns the last child of &lt;code&gt;parent&lt;/code&gt; that is a leaf. If the
                  last child is a not a leaf, this method is called with the last child.                
            </javadoc>
            <method name="getDeepestLeaf" type="Element" line="341">
                <params>
                    <param name="parent" type="Element"/>
                </params>
                <scope line="342"/>
                <declaration name="childCount" type="int" line="345"/>
                <scope line="346"/>
            </method>
            <method name="dumpTree" type="void" line="356">
                <comment line="369">
                    don&apos;t go recursive                    
                </comment>
                <declaration name="elem" type="Element" line="358"/>
                <scope line="359">
                    <scope line="360">
                        <declaration name="attr" type="AttributeSet" line="362"/>
                        <declaration name="s" type="String" line="363"/>
                        <declaration name="names" type="Enumeration" line="364"/>
                        <scope line="365">
                            <declaration name="key" type="Object" line="366"/>
                            <declaration name="value" type="Object" line="367"/>
                            <scope line="368"/>
                            <scope line="371"/>
                        </scope>
                    </scope>
                    <scope line="376"/>
                </scope>
            </method>
        </class>
    </source>