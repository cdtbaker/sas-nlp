<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text">
        <import package="java.util.Vector"/>
        <import package="java.util.Properties"/>
        <import package="java.awt"/>
        <import package="javax.swing.event"/>
        <class name="PlainView" line="32">
            <extends class="View"/>
            <comment line="215">
                ---- View methods ----------------------------------------------------                
            </comment>
            <comment line="494">
                --- TabExpander methods ------------------------------------------                
            </comment>
            <comment line="514">
                --- local methods ------------------------------------------------                
            </comment>
            <comment line="678">
                --- member variables -----------------------------------------------                
            </comment>
            <implements interface="TabExpander"/>
            <javadoc line="32">
                Implements View interface for a simple multi-line text view
                  that has text in one font and color.  The view represents each
                  child element as a line of text.                
                <author>
                    Timothy Prinzing                    
                </author>
                <see>
                    View                    
                </see>
            </javadoc>
            <javadoc line="42">
                Constructs a new PlainView wrapped on an element.                
                <param>
                    elem the element                    
                </param>
            </javadoc>
            <method name="PlainView" type="constructor" line="47">
                <params>
                    <param name="elem" type="Element"/>
                </params>
            </method>
            <javadoc line="51">
                Returns the tab size set for the document, defaulting to 8.                
                <return>
                    the tab size                    
                </return>
            </javadoc>
            <method name="getTabSize" type="int" line="56">
                <declaration name="i" type="Integer" line="57"/>
                <declaration name="size" type="int" line="58"/>
            </method>
            <javadoc line="62">
                Renders a line of text, suppressing whitespace at the end
                  and expanding any tabs.  This is implemented to make calls
                  to the methods &lt;code&gt;drawUnselectedText&lt;/code&gt; and
                  &lt;code&gt;drawSelectedText&lt;/code&gt; so that the way selected and
                  unselected text are rendered can be customized.                
                <param>
                    lineIndex the line to draw >= 0                    
                </param>
                <param>
                    g the <code>Graphics</code> context                    
                </param>
                <param>
                    x the starting X position >= 0                    
                </param>
                <param>
                    y the starting Y position >= 0                    
                </param>
                <see>
                    #drawUnselectedText                    
                </see>
                <see>
                    #drawSelectedText                    
                </see>
            </javadoc>
            <method name="drawLine" type="void" line="76">
                <params>
                    <param name="lineIndex" type="int"/>
                    <param name="g" type="Graphics"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <comment line="84">
                    this line contains the composed text.                    
                </comment>
                <declaration name="line" type="Element" line="77"/>
                <declaration name="elem" type="Element" line="78"/>
                <scope line="80">
                    <scope line="81"/>
                    <scope line="83">
                        <declaration name="count" type="int" line="85"/>
                        <scope line="86"/>
                    </scope>
                </scope>
                <scope line="91"/>
            </method>
            <method name="drawElement" type="int" line="96">
                <params>
                    <param name="lineIndex" type="int"/>
                    <param name="elem" type="Element"/>
                    <param name="g" type="Graphics"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <comment line="112">
                    no selection, or it is invisible                    
                </comment>
                <declaration name="p0" type="int" line="97"/>
                <declaration name="p1" type="int" line="98"/>
                <scope line="101"/>
                <declaration name="attr" type="AttributeSet" line="104"/>
                <scope line="105"/>
                <scope line="110">
                    <scope line="111"/>
                    <scope line="114"/>
                    <scope line="116">
                        <scope line="117"/>
                        <scope line="121"/>
                    </scope>
                    <scope line="125"/>
                    <scope line="128"/>
                </scope>
            </method>
            <javadoc line="136">
                Renders the given range in the model as normal unselected
                  text.  Uses the foreground or disabled color to render the text.                
                <param>
                    g the graphics context                    
                </param>
                <param>
                    x the starting X coordinate >= 0                    
                </param>
                <param>
                    y the starting Y coordinate >= 0                    
                </param>
                <param>
                    p0 the beginning position in the model >= 0                    
                </param>
                <param>
                    p1 the ending position in the model >= 0                    
                </param>
                <return>
                    the X location of the end of the range >= 0                    
                </return>
                <exception>
                    BadLocationException if the range is invalid                    
                </exception>
            </javadoc>
            <method name="drawUnselectedText" type="int" line="149">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="p0" type="int"/>
                    <param name="p1" type="int"/>
                </params>
                <declaration name="doc" type="Document" line="151"/>
                <declaration name="s" type="Segment" line="152"/>
                <declaration name="ret" type="int" line="154"/>
            </method>
            <javadoc line="159">
                Renders the given range in the model as selected text.  This
                  is implemented to render the text in the color specified in
                  the hosting component.  It assumes the highlighter will render
                  the selected background.                
                <param>
                    g the graphics context                    
                </param>
                <param>
                    x the starting X coordinate >= 0                    
                </param>
                <param>
                    y the starting Y coordinate >= 0                    
                </param>
                <param>
                    p0 the beginning position in the model >= 0                    
                </param>
                <param>
                    p1 the ending position in the model >= 0                    
                </param>
                <return>
                    the location of the end of the range                    
                </return>
                <exception>
                    BadLocationException if the range is invalid                    
                </exception>
            </javadoc>
            <method name="drawSelectedText" type="int" line="174">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="p0" type="int"/>
                    <param name="p1" type="int"/>
                </params>
                <declaration name="doc" type="Document" line="176"/>
                <declaration name="s" type="Segment" line="177"/>
                <declaration name="ret" type="int" line="179"/>
            </method>
            <javadoc line="184">
                Gives access to a buffer that can be used to fetch
                  text from the associated document.                
                <return>
                    the buffer                    
                </return>
            </javadoc>
            <method name="getLineBuffer" type="Segment" line="190">
                <scope line="191"/>
            </method>
            <javadoc line="197">
                Checks to see if the font metrics and longest line
                  are up-to-date.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="updateMetrics" type="void" line="203">
                <comment line="207">
                    The font changed, we need to recalculate the                    
                </comment>
                <comment line="208">
                    longest line.                    
                </comment>
                <declaration name="host" type="Component" line="204"/>
                <declaration name="f" type="Font" line="205"/>
                <scope line="206"/>
            </method>
            <javadoc line="216">
                Determines the preferred span for this view along an
                  axis.                
                <param>
                    axis may be either View.X_AXIS or View.Y_AXIS                    
                </param>
                <return>
                    the span the view would like to be rendered into >= 0.
                      Typically the view is told to render into the span
                      that is returned, although there is no guarantee.
                      The parent may choose to resize or break the view.                    
                </return>
                <exception>
                    IllegalArgumentException for an invalid axis                    
                </exception>
            </javadoc>
            <method name="getPreferredSpan" type="float" line="227">
                <params>
                    <param name="axis" type="int"/>
                </params>
            </method>
            <javadoc line="239">
                Renders using the given rendering surface and area on that surface.
                  The view may need to do layout and create child views to enable
                  itself to render into the given allocation.                
                <param>
                    g the rendering surface to use                    
                </param>
                <param>
                    a the allocated region to render into                    
                </param>
                <see>
                    View#paint                    
                </see>
            </javadoc>
            <method name="paint" type="void" line="249">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="a" type="Shape"/>
                </params>
                <comment line="266">
                    If the lines are clipped then we don&apos;t expend the effort to                    
                </comment>
                <comment line="267">
                    try and paint them.  Since all of the lines are the same height                    
                </comment>
                <comment line="268">
                    with this object, determination of what lines need to be repainted                    
                </comment>
                <comment line="269">
                    is quick.                    
                </comment>
                <comment line="287">
                    update the visible lines                    
                </comment>
                <comment line="314">
                    This should never really happen, in so far as if                    
                </comment>
                <comment line="315">
                    firstLineOffset is non 0, there should only be one                    
                </comment>
                <comment line="316">
                    line of text.                    
                </comment>
                <declaration name="originalA" type="Shape" line="250"/>
                <declaration name="alloc" type="Rectangle" line="252"/>
                <declaration name="host" type="JTextComponent" line="254"/>
                <declaration name="h" type="Highlighter" line="255"/>
                <declaration name="c" type="Caret" line="261"/>
                <declaration name="clip" type="Rectangle" line="270"/>
                <declaration name="fontHeight" type="int" line="271"/>
                <declaration name="heightBelow" type="int" line="272"/>
                <declaration name="heightAbove" type="int" line="273"/>
                <declaration name="linesBelow" type="int" line="274"/>
                <scope line="276">
                    <scope line="280"/>
                </scope>
                <scope line="283"/>
                <declaration name="lineArea" type="Rectangle" line="288"/>
                <declaration name="y" type="int" line="289"/>
                <declaration name="x" type="int" line="290"/>
                <declaration name="map" type="Element" line="291"/>
                <declaration name="lineCount" type="int" line="292"/>
                <declaration name="endLine" type="int" line="293"/>
                <declaration name="dh" type="LayeredHighlighter" line="295"/>
                <scope line="297">
                    <scope line="298">
                        <declaration name="lineElement" type="Element" line="299"/>
                        <scope line="300"/>
                        <scope line="305"/>
                    </scope>
                    <scope line="313"/>
                </scope>
            </method>
            <javadoc line="322">
                Should return a shape ideal for painting based on the passed in
                  Shape &lt;code&gt;a&lt;/code&gt;. This is useful if painting in a different
                  region. The default implementation returns &lt;code&gt;a&lt;/code&gt;.                
            </javadoc>
            <method name="adjustPaintRegion" type="Shape" line="327">
                <params>
                    <param name="a" type="Shape"/>
                </params>
            </method>
            <javadoc line="331">
                Provides a mapping from the document model coordinate space
                  to the coordinate space of the view mapped to it.                
                <param>
                    pos the position to convert >= 0                    
                </param>
                <param>
                    a the allocated region to render into                    
                </param>
                <return>
                    the bounding box of the given position                    
                </return>
                <exception>
                    BadLocationException  if the given position does not
                      represent a valid location in the associated document                    
                </exception>
                <see>
                    View#modelToView                    
                </see>
            </javadoc>
            <method name="modelToView" type="Shape" line="342">
                <params>
                    <param name="pos" type="int"/>
                    <param name="a" type="Shape"/>
                    <param name="b" type="Position.Bias"/>
                </params>
                <comment line="343">
                    line coordinates                    
                </comment>
                <comment line="352">
                    determine span from the start of the line                    
                </comment>
                <comment line="361">
                    fill in the results and return                    
                </comment>
                <declaration name="doc" type="Document" line="344"/>
                <declaration name="map" type="Element" line="345"/>
                <declaration name="lineIndex" type="int" line="346"/>
                <scope line="347"/>
                <declaration name="lineArea" type="Rectangle" line="350"/>
                <declaration name="line" type="Element" line="354"/>
                <declaration name="p0" type="int" line="355"/>
                <declaration name="s" type="Segment" line="356"/>
                <declaration name="xOffs" type="int" line="358"/>
            </method>
            <javadoc line="368">
                Provides a mapping from the view coordinate space to the logical
                  coordinate space of the model.                
                <param>
                    fx the X coordinate >= 0                    
                </param>
                <param>
                    fy the Y coordinate >= 0                    
                </param>
                <param>
                    a the allocated region to render into                    
                </param>
                <return>
                    the location within the model that best represents the
                      given point in the view >= 0                    
                </return>
                <see>
                    View#viewToModel                    
                </see>
            </javadoc>
            <method name="viewToModel" type="int" line="379">
                <params>
                    <param name="fx" type="float"/>
                    <param name="fy" type="float"/>
                    <param name="a" type="Shape"/>
                    <param name="bias" type="Position.Bias[]"/>
                </params>
                <comment line="380">
                    PENDING(prinz) properly calculate bias                    
                </comment>
                <comment line="388">
                    above the area covered by this icon, so the the position                    
                </comment>
                <comment line="389">
                    is assumed to be the start of the coverage for this view.                    
                </comment>
                <comment line="392">
                    below the area covered by this icon, so the the position                    
                </comment>
                <comment line="393">
                    is assumed to be the end of the coverage for this view.                    
                </comment>
                <comment line="396">
                    positioned within the coverage of this view vertically,                    
                </comment>
                <comment line="397">
                    so we figure out which line the point corresponds to.                    
                </comment>
                <comment line="398">
                    if the line is greater than the number of lines contained, then                    
                </comment>
                <comment line="399">
                    simply use the last line as it represents the last possible place                    
                </comment>
                <comment line="400">
                    we can position to.                    
                </comment>
                <comment line="416">
                    point is to the left of the line                    
                </comment>
                <comment line="419">
                    point is to the right of the line                    
                </comment>
                <comment line="422">
                    Determine the offset into the text                    
                </comment>
                <comment line="434">
                    should not happen                    
                </comment>
                <declaration name="alloc" type="Rectangle" line="383"/>
                <declaration name="doc" type="Document" line="384"/>
                <declaration name="x" type="int" line="385"/>
                <declaration name="y" type="int" line="386"/>
                <scope line="387"/>
                <scope line="391"/>
                <scope line="395">
                    <declaration name="map" type="Element" line="401"/>
                    <declaration name="fontHeight" type="int" line="402"/>
                    <declaration name="lineIndex" type="int" line="403"/>
                    <scope line="406"/>
                    <declaration name="line" type="Element" line="409"/>
                    <declaration name="dx" type="int" line="410"/>
                    <scope line="411"/>
                    <scope line="415"/>
                    <scope line="418"/>
                    <scope line="421">
                        <scope line="423">
                            <declaration name="p0" type="int" line="424"/>
                            <declaration name="p1" type="int" line="425"/>
                            <declaration name="s" type="Segment" line="426"/>
                            <declaration name="offs" type="int" line="429"/>
                        </scope>
                        <scope line="433"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="441">
                Gives notification that something was inserted into the document
                  in a location that this view is responsible for.                
                <param>
                    changes the change information from the associated document                    
                </param>
                <param>
                    a the current allocation of the view                    
                </param>
                <param>
                    f the factory to use to rebuild if the view has children                    
                </param>
                <see>
                    View#insertUpdate                    
                </see>
            </javadoc>
            <method name="insertUpdate" type="void" line="450">
                <params>
                    <param name="changes" type="DocumentEvent"/>
                    <param name="a" type="Shape"/>
                    <param name="f" type="ViewFactory"/>
                </params>
            </method>
            <javadoc line="454">
                Gives notification that something was removed from the document
                  in a location that this view is responsible for.                
                <param>
                    changes the change information from the associated document                    
                </param>
                <param>
                    a the current allocation of the view                    
                </param>
                <param>
                    f the factory to use to rebuild if the view has children                    
                </param>
                <see>
                    View#removeUpdate                    
                </see>
            </javadoc>
            <method name="removeUpdate" type="void" line="463">
                <params>
                    <param name="changes" type="DocumentEvent"/>
                    <param name="a" type="Shape"/>
                    <param name="f" type="ViewFactory"/>
                </params>
            </method>
            <javadoc line="467">
                Gives notification from the document that attributes were changed
                  in a location that this view is responsible for.                
                <param>
                    changes the change information from the associated document                    
                </param>
                <param>
                    a the current allocation of the view                    
                </param>
                <param>
                    f the factory to use to rebuild if the view has children                    
                </param>
                <see>
                    View#changedUpdate                    
                </see>
            </javadoc>
            <method name="changedUpdate" type="void" line="476">
                <params>
                    <param name="changes" type="DocumentEvent"/>
                    <param name="a" type="Shape"/>
                    <param name="f" type="ViewFactory"/>
                </params>
            </method>
            <javadoc line="480">
                Sets the size of the view.  This should cause
                  layout of the view along the given axis, if it
                  has any layout duties.                
                <param>
                    width the width >= 0                    
                </param>
                <param>
                    height the height >= 0                    
                </param>
            </javadoc>
            <method name="setSize" type="void" line="488">
                <params>
                    <param name="width" type="float"/>
                    <param name="height" type="float"/>
                </params>
            </method>
            <javadoc line="495">
                Returns the next tab stop position after a given reference position.
                  This implementation does not support things like centering so it
                  ignores the tabOffset argument.                
                <param>
                    x the current position >= 0                    
                </param>
                <param>
                    tabOffset the position within the text stream
                      that the tab occurred at >= 0.                    
                </param>
                <return>
                    the tab stop, measured in points >= 0                    
                </return>
            </javadoc>
            <method name="nextTabStop" type="float" line="505">
                <params>
                    <param name="x" type="float"/>
                    <param name="tabOffset" type="int"/>
                </params>
                <scope line="506"/>
                <declaration name="ntabs" type="int" line="509"/>
            </method>
            <javadoc line="515">
                Repaint the region of change covered by the given document
                  event.  Damages the line that begins the range to cover
                  the case when the insert/remove is only on one line.
                  If lines are added or removed, damages the whole
                  view.  The longest line is checked to see if it has
                  changed.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="updateDamage" type="void" line="525">
                <params>
                    <param name="changes" type="DocumentEvent"/>
                    <param name="a" type="Shape"/>
                    <param name="f" type="ViewFactory"/>
                </params>
                <comment line="535">
                    lines were added or removed...                    
                </comment>
                <comment line="561">
                    check to see if the line is longer than current                    
                </comment>
                <comment line="562">
                    longest line.                    
                </comment>
                <comment line="573">
                    removed from longest line... recalc                    
                </comment>
                <declaration name="host" type="Component" line="526"/>
                <declaration name="elem" type="Element" line="528"/>
                <declaration name="ec" type="DocumentEvent.ElementChange" line="529"/>
                <declaration name="added" type="Element[]" line="531"/>
                <declaration name="removed" type="Element[]" line="532"/>
                <scope line="534">
                    <scope line="536">
                        <declaration name="currWide" type="int" line="537"/>
                        <scope line="538">
                            <declaration name="w" type="int" line="539"/>
                            <scope line="540"/>
                        </scope>
                    </scope>
                    <scope line="546">
                        <scope line="547">
                            <scope line="548"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="556">
                    <declaration name="map" type="Element" line="557"/>
                    <declaration name="line" type="int" line="558"/>
                    <scope line="560">
                        <declaration name="w" type="int" line="563"/>
                        <declaration name="e" type="Element" line="564"/>
                        <scope line="565"/>
                        <scope line="567"/>
                    </scope>
                    <scope line="571">
                        <scope line="572"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="581">
                Repaint the given line range.                
                <param>
                    host the component hosting the view (used to call repaint)                    
                </param>
                <param>
                    a  the region allocated for the view to render into                    
                </param>
                <param>
                    line0 the starting line number to repaint.  This must
                      be a valid line number in the model.                    
                </param>
                <param>
                    line1 the ending line number to repaint.  This must
                      be a valid line number in the model.                    
                </param>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="damageLineRange" type="void" line="592">
                <params>
                    <param name="line0" type="int"/>
                    <param name="line1" type="int"/>
                    <param name="a" type="Shape"/>
                    <param name="host" type="Component"/>
                </params>
                <scope line="593">
                    <declaration name="area0" type="Rectangle" line="594"/>
                    <declaration name="area1" type="Rectangle" line="595"/>
                    <scope line="596">
                        <declaration name="damage" type="Rectangle" line="597"/>
                    </scope>
                    <scope line="599"/>
                </scope>
            </method>
            <javadoc line="605">
                Determine the rectangle that represents the given line.                
                <param>
                    a  the region allocated for the view to render into                    
                </param>
                <param>
                    line the line number to find the region of.  This must
                      be a valid line number in the model.                    
                </param>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="lineToRect" type="Rectangle" line="613">
                <params>
                    <param name="a" type="Shape"/>
                    <param name="line" type="int"/>
                </params>
                <declaration name="r" type="Rectangle" line="614"/>
                <scope line="616">
                    <declaration name="alloc" type="Rectangle" line="617"/>
                    <scope line="618"/>
                </scope>
            </method>
            <javadoc line="628">
                Iterate over the lines represented by the child elements
                  of the element this view represents, looking for the line
                  that is the longest.  The &lt;em&gt;longLine&lt;/em&gt; variable is updated to
                  represent the longest line contained.  The &lt;em&gt;font&lt;/em&gt; variable
                  is updated to indicate the font used to calculate the
                  longest line.                
            </javadoc>
            <method name="calculateLongestLine" type="void" line="636">
                <declaration name="c" type="Component" line="637"/>
                <declaration name="doc" type="Document" line="640"/>
                <declaration name="lines" type="Element" line="641"/>
                <declaration name="n" type="int" line="642"/>
                <declaration name="maxWidth" type="int" line="643"/>
                <scope line="644">
                    <declaration name="line" type="Element" line="645"/>
                    <declaration name="w" type="int" line="646"/>
                    <scope line="647"/>
                </scope>
            </method>
            <javadoc line="654">
                Calculate the width of the line represented by
                  the given element.  It is assumed that the font
                  and font metrics are up-to-date.                
            </javadoc>
            <method name="getLineWidth" type="int" line="659">
                <params>
                    <param name="line" type="Element"/>
                </params>
                <scope line="660"/>
                <declaration name="p0" type="int" line="663"/>
                <declaration name="p1" type="int" line="664"/>
                <declaration name="w" type="int" line="665"/>
                <declaration name="s" type="Segment" line="666"/>
                <scope line="667"/>
                <scope line="670"/>
            </method>
            <declaration name="metrics" type="FontMetrics" line="679"/>
            <javadoc line="679">
                Font metrics for the current font.                
            </javadoc>
            <declaration name="longLine" type="Element" line="684"/>
            <javadoc line="684">
                The current longest line.  This is used to calculate
                  the preferred width of the view.  Since the calculation
                  is potentially expensive we try to avoid it by stashing
                  which line is currently the longest.                
            </javadoc>
            <declaration name="font" type="Font" line="692"/>
            <javadoc line="692">
                Font used to calculate the longest line... if this
                  changes we need to recalculate the longest line                
            </javadoc>
            <declaration name="lineBuffer" type="Segment" line="698"/>
            <declaration name="tabSize" type="int" line="699"/>
            <declaration name="tabBase" type="int" line="700"/>
            <declaration name="sel0" type="int" line="702"/>
            <declaration name="sel1" type="int" line="703"/>
            <declaration name="unselected" type="Color" line="704"/>
            <declaration name="selected" type="Color" line="705"/>
            <declaration name="firstLineOffset" type="int" line="707"/>
            <javadoc line="707">
                Offset of where to draw the first character on the first line.
                  This is a hack and temporary until we can better address the problem
                  of text measuring. This field is actually never set directly in
                  PlainView, but by FieldView.                
            </javadoc>
        </class>
    </source>