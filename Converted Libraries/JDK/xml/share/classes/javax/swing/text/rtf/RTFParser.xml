<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text.rtf">
        <import package="java.io"/>
        <import package="java.lang"/>
        <class name="RTFParser" line="4">
            <extends class="AbstractFilter"/>
            <javadoc line="4">
                &lt;b&gt;RTFParser&lt;/b&gt; is a subclass of &lt;b&gt;AbstractFilter&lt;/b&gt; which understands basic RTF syntax
                  and passes a stream of control words, text, and begin/end group
                  indications to its subclass.
                  Normally programmers will only use &lt;b&gt;RTFFilter&lt;/b&gt;, a subclass of this class that knows what to
                  do with the tokens this class parses.                
                <see>
                    AbstractFilter                    
                </see>
                <see>
                    RTFFilter                    
                </see>
            </javadoc>
            <declaration name="level" type="int" line="14"/>
            <javadoc line="14">
                The current RTF group nesting level.                
            </javadoc>
            <declaration name="state" type="int" line="18"/>
            <declaration name="currentCharacters" type="StringBuffer" line="19"/>
            <declaration name="pendingKeyword" type="String" line="20"/>
            <declaration name="pendingCharacter" type="int" line="21"/>
            <declaration name="binaryBytesLeft" type="long" line="22"/>
            <declaration name="binaryBuf" type="ByteArrayOutputStream" line="23"/>
            <declaration name="savedSpecials" type="boolean[]" line="24"/>
            <declaration name="warnings" type="PrintStream" line="25"/>
            <javadoc line="25">
                A stream to which to write warnings and debugging information
                  while parsing. This is set to &lt;code&gt;System.out&lt;/code&gt; to log
                  any anomalous information to stdout.                
            </javadoc>
            <declaration name="S_text" type="int" line="31"/>
            <declaration name="S_backslashed" type="int" line="32"/>
            <declaration name="S_token" type="int" line="33"/>
            <declaration name="S_parameter" type="int" line="34"/>
            <declaration name="S_aftertick" type="int" line="35"/>
            <declaration name="S_aftertickc" type="int" line="36"/>
            <declaration name="S_inblob" type="int" line="37"/>
            <method name="handleKeyword" type="boolean" line="38"/>
            <javadoc line="38">
                Implemented by subclasses to interpret a parameter-less RTF keyword.
                  The keyword is passed without the leading &apos;/&apos; or any delimiting
                  whitespace.                
            </javadoc>
            <method name="handleKeyword" type="boolean" line="44"/>
            <javadoc line="44">
                Implemented by subclasses to interpret a keyword with a parameter.                
                <param>
                    keyword   The keyword, as with &lt;code&gt;handleKeyword(String)&lt;/code&gt;.                    
                </param>
                <param>
                    parameter The parameter following the keyword.                    
                </param>
            </javadoc>
            <method name="handleText" type="void" line="50"/>
            <javadoc line="50">
                Implemented by subclasses to interpret text from the RTF stream.                
            </javadoc>
            <method name="handleText" type="void" line="54">
                <params>
                    <param name="ch" type="char"/>
                </params>
            </method>
            <method name="handleBinaryBlob" type="void" line="57"/>
            <javadoc line="57">
                Implemented by subclasses to handle the contents of the \bin keyword.                
            </javadoc>
            <method name="begingroup" type="void" line="61"/>
            <javadoc line="61">
                Implemented by subclasses to react to an increase
                  in the nesting level.                
            </javadoc>
            <method name="endgroup" type="void" line="66"/>
            <javadoc line="66">
                Implemented by subclasses to react to the end of a group.                
            </javadoc>
            <declaration name="rtfSpecialsTable" type="boolean" line="70"/>
            <scope line="71"/>
            <method name="RTFParser" type="constructor" line="79"/>
            <method name="writeSpecial" type="void" line="86">
                <params>
                    <param name="b" type="int"/>
                </params>
            </method>
            <method name="warning" type="void" line="89">
                <params>
                    <param name="s" type="String"/>
                </params>
                <scope line="90"/>
            </method>
            <method name="write" type="void" line="94">
                <params>
                    <param name="s" type="String"/>
                </params>
                <scope line="95">
                    <declaration name="index" type="int" line="96"/>
                    <declaration name="length" type="int" line="97"/>
                    <scope line="98"/>
                </scope>
            </method>
            <method name="write" type="void" line="108">
                <params>
                    <param name="ch" type="char"/>
                </params>
                <declaration name="ok" type="boolean" line="109"/>
                <scope line="112"/>
                <scope line="115">
                    <scope line="116"/>
                </scope>
                <scope line="123">
                    <scope line="124"/>
                </scope>
                <scope line="132">
                    <scope line="133"/>
                </scope>
                <scope line="139"/>
                <scope line="144"/>
                <scope line="148">
                    <declaration name="newstring" type="char" line="149"/>
                    <scope line="151"/>
                </scope>
                <scope line="160"/>
                <scope line="163">
                    <scope line="166"/>
                    <scope line="170"/>
                </scope>
                <scope line="180"/>
                <scope line="183">
                    <scope line="184">
                        <declaration name="parameter" type="long" line="185"/>
                    </scope>
                    <declaration name="parameter" type="int" line="195"/>
                </scope>
                <scope line="206"/>
                <scope line="213"/>
                <scope line="222"/>
            </method>
            <javadoc line="231">
                Flushes any buffered but not yet written characters.
                  Subclasses which override this method should call this
                  method &lt;em&gt;before&lt;/em&gt; flushing
                  any of their own buffers.                
            </javadoc>
            <method name="flush" type="void" line="237">
                <scope line="239"/>
            </method>
            <javadoc line="244">
                Closes the parser. Currently, this simply does a &lt;code&gt;flush()&lt;/code&gt;,
                  followed by some minimal consistency checks.                
            </javadoc>
            <method name="close" type="void" line="248">
                <scope line="250">
                    <scope line="252"/>
                </scope>
            </method>
        </class>
    </source>