<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text.rtf">
        <import package="java.io"/>
        <import package="java.lang"/>
        <class name="RTFParser" line="30">
            <extends class="AbstractFilter"/>
            <comment line="49">
                where keywords go while we                
            </comment>
            <comment line="50">
                read their parameters                
            </comment>
            <comment line="51">
                for the \&apos;xx construct                
            </comment>
            <comment line="53">
                in a \bin blob?                
            </comment>
            <comment line="62">
                value for the &apos;state&apos; variable                
            </comment>
            <comment line="63">
                reading random text                
            </comment>
            <comment line="64">
                read a backslash, waiting for next                
            </comment>
            <comment line="65">
                reading a multicharacter token                
            </comment>
            <comment line="66">
                reading a token&apos;s parameter                
            </comment>
            <comment line="68">
                after reading \&apos;                
            </comment>
            <comment line="69">
                after reading \&apos;x                
            </comment>
            <comment line="71">
                in a \bin blob                
            </comment>
            <comment line="93">
                table of non-text characters in rtf                
            </comment>
            <comment line="115">
                TODO: Handle wrapup at end of file correctly.                
            </comment>
            <javadoc line="30">
                &lt;b&gt;RTFParser&lt;/b&gt; is a subclass of &lt;b&gt;AbstractFilter&lt;/b&gt; which understands basic RTF syntax
                  and passes a stream of control words, text, and begin/end group
                  indications to its subclass.
                  Normally programmers will only use &lt;b&gt;RTFFilter&lt;/b&gt;, a subclass of this class that knows what to
                  do with the tokens this class parses.                
                <see>
                    AbstractFilter                    
                </see>
                <see>
                    RTFFilter                    
                </see>
            </javadoc>
            <declaration name="level" type="int" line="43"/>
            <javadoc line="43">
                The current RTF group nesting level.                
            </javadoc>
            <declaration name="state" type="int" line="46"/>
            <declaration name="currentCharacters" type="StringBuffer" line="47"/>
            <declaration name="pendingKeyword" type="String" line="48"/>
            <declaration name="pendingCharacter" type="int" line="50"/>
            <declaration name="binaryBytesLeft" type="long" line="52"/>
            <declaration name="binaryBuf" type="ByteArrayOutputStream" line="53"/>
            <declaration name="savedSpecials" type="boolean[]" line="54"/>
            <declaration name="warnings" type="PrintStream" line="56"/>
            <javadoc line="56">
                A stream to which to write warnings and debugging information
                  while parsing. This is set to &lt;code&gt;System.out&lt;/code&gt; to log
                  any anomalous information to stdout.                
            </javadoc>
            <declaration name="S_text" type="int" line="62"/>
            <declaration name="S_backslashed" type="int" line="63"/>
            <declaration name="S_token" type="int" line="64"/>
            <declaration name="S_parameter" type="int" line="65"/>
            <declaration name="S_aftertick" type="int" line="67"/>
            <declaration name="S_aftertickc" type="int" line="68"/>
            <declaration name="S_inblob" type="int" line="70"/>
            <method name="handleKeyword" type="boolean" line="72"/>
            <javadoc line="72">
                Implemented by subclasses to interpret a parameter-less RTF keyword.
                  The keyword is passed without the leading &apos;/&apos; or any delimiting
                  whitespace.                
            </javadoc>
            <method name="handleKeyword" type="boolean" line="76"/>
            <javadoc line="76">
                Implemented by subclasses to interpret a keyword with a parameter.                
                <param>
                    keyword   The keyword, as with <code>handleKeyword(String)</code>.                    
                </param>
                <param>
                    parameter The parameter following the keyword.                    
                </param>
            </javadoc>
            <method name="handleText" type="void" line="80"/>
            <javadoc line="80">
                Implemented by subclasses to interpret text from the RTF stream.                
            </javadoc>
            <method name="handleText" type="void" line="83">
                <params>
                    <param name="ch" type="char"/>
                </params>
            </method>
            <method name="handleBinaryBlob" type="void" line="84"/>
            <javadoc line="84">
                Implemented by subclasses to handle the contents of the \bin keyword.                
            </javadoc>
            <method name="begingroup" type="void" line="86"/>
            <javadoc line="86">
                Implemented by subclasses to react to an increase
                  in the nesting level.                
            </javadoc>
            <method name="endgroup" type="void" line="89"/>
            <javadoc line="89">
                Implemented by subclasses to react to the end of a group.                
            </javadoc>
            <declaration name="rtfSpecialsTable" type="boolean" line="93"/>
            <scope line="94"/>
            <method name="RTFParser" type="constructor" line="104">
                <comment line="109">
                    warnings = System.out;                    
                </comment>
            </method>
            <method name="writeSpecial" type="void" line="118">
                <params>
                    <param name="b" type="int"/>
                </params>
            </method>
            <method name="warning" type="void" line="122">
                <params>
                    <param name="s" type="String"/>
                </params>
                <scope line="123"/>
            </method>
            <method name="write" type="void" line="130">
                <params>
                    <param name="s" type="String"/>
                </params>
                <scope line="131">
                    <declaration name="index" type="int" line="132"/>
                    <declaration name="length" type="int" line="133"/>
                    <scope line="134"/>
                </scope>
            </method>
            <method name="write" type="void" line="153">
                <params>
                    <param name="ch" type="char"/>
                </params>
                <comment line="160">
                    unadorned newlines are ignored                    
                </comment>
                <comment line="200">
                                        
                </comment>
                <comment line="205">
                                        
                </comment>
                <comment line="213">
                    Parameter following?                    
                </comment>
                <comment line="224">
                    Non-space delimiters get included in the text                    
                </comment>
                <comment line="234">
                                        
                </comment>
                <comment line="235">
                                        
                </comment>
                <comment line="258">
                    Delimiters here are interpreted as text too                    
                </comment>
                <declaration name="ok" type="boolean" line="154"/>
                <scope line="159"/>
                <scope line="161">
                    <scope line="162"/>
                </scope>
                <scope line="168">
                    <scope line="169"/>
                </scope>
                <scope line="177">
                    <scope line="178"/>
                </scope>
                <scope line="183"/>
                <scope line="188"/>
                <scope line="192">
                    <declaration name="newstring" type="char" line="193"/>
                    <scope line="195"/>
                </scope>
                <scope line="207"/>
                <scope line="209">
                    <scope line="214"/>
                    <scope line="217"/>
                </scope>
                <scope line="231"/>
                <scope line="233">
                    <scope line="235">
                        <declaration name="parameter" type="long" line="236"/>
                    </scope>
                    <declaration name="parameter" type="int" line="249"/>
                </scope>
                <scope line="266"/>
                <scope line="274"/>
                <scope line="284"/>
            </method>
            <javadoc line="294">
                Flushes any buffered but not yet written characters.
                  Subclasses which override this method should call this
                  method &lt;em&gt;before&lt;/em&gt; flushing
                  any of their own buffers.                
            </javadoc>
            <method name="flush" type="void" line="300">
                <scope line="303"/>
            </method>
            <javadoc line="309">
                Closes the parser. Currently, this simply does a &lt;code&gt;flush()&lt;/code&gt;,
                  followed by some minimal consistency checks.                
            </javadoc>
            <method name="close" type="void" line="313">
                <comment line="319">
                                        
                </comment>
                <comment line="320">
                                        
                </comment>
                <comment line="322">
                    this will cause subclasses to behave more reasonably                    
                </comment>
                <scope line="316">
                    <scope line="324"/>
                </scope>
            </method>
        </class>
    </source>