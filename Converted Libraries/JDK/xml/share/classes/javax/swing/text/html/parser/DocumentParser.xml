<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text.html.parser">
        <import package="javax.swing.text.SimpleAttributeSet"/>
        <import package="javax.swing.text.html.HTMLEditorKit"/>
        <import package="javax.swing.text.html.HTML"/>
        <import package="javax.swing.text.ChangedCharSetException"/>
        <import package="java.util"/>
        <import package="java.io"/>
        <import package="java.net"/>
        <class name="DocumentParser" line="37">
            <extends class="javax.swing.text.html.parser.Parser"/>
            <comment line="264">
                Error handling.                
            </comment>
            <comment line="276">
                debug messages                
            </comment>
            <javadoc line="37">
                A Parser for HTML Documents (actually, you can specify a DTD, but
                  you should really only use this class with the html dtd in swing).
                  Reads an InputStream of HTML and
                  invokes the appropriate methods in the ParserCallback class. This
                  is the default parser used by HTMLEditorKit to parse HTML url&apos;s.
                  &lt;p&gt;This will message the callback for all valid tags, as well as
                  tags that are implied but not explicitly specified. For example, the
                  html string (&amp;lt;p&amp;gt;blah) only has a p tag defined. The callback
                  will see the following methods:
                  &lt;ol&gt;&lt;li&gt;&lt;i&gt;handleStartTag(html, ...)&lt;/i&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;i&gt;handleStartTag(head, ...)&lt;/i&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;i&gt;handleEndTag(head)&lt;/i&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;i&gt;handleStartTag(body, ...)&lt;/i&gt;&lt;/li&gt;
                  &lt;li&gt;handleStartTag(p, ...)&lt;/i&gt;&lt;/li&gt;
                  &lt;li&gt;handleText(...)&lt;/li&gt;
                  &lt;li&gt;&lt;i&gt;handleEndTag(p)&lt;/i&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;i&gt;handleEndTag(body)&lt;/i&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;i&gt;handleEndTag(html)&lt;/i&gt;&lt;/li&gt;
                  &lt;/ol&gt;
                  The items in &lt;i&gt;italic&lt;/i&gt; are implied, that is, although they were not
                  explicitly specified, to be correct html they should have been present
                  (head isn&apos;t necessary, but it is still generated). For tags that
                  are implied, the AttributeSet argument will have a value of
                  &lt;code&gt;Boolean.TRUE&lt;/code&gt; for the key
                  &lt;code&gt;HTMLEditorKit.ParserCallback.IMPLIED&lt;/code&gt;.
                  &lt;p&gt;HTML.Attributes defines a type safe enumeration of html attributes.
                  If an attribute key of a tag is defined in HTML.Attribute, the
                  HTML.Attribute will be used as the key, otherwise a String will be used.
                  For example &amp;lt;p foo=bar class=neat&amp;gt; has two attributes. foo is
                  not defined in HTML.Attribute, where as class is, therefore the
                  AttributeSet will have two values in it, HTML.Attribute.CLASS with
                  a String value of &apos;neat&apos; and the String key &apos;foo&apos; with a String value of
                  &apos;bar&apos;.
                  &lt;p&gt;The position argument will indicate the start of the tag, comment
                  or text. Similiar to arrays, the first character in the stream has a
                  position of 0. For tags that are
                  implied the position will indicate
                  the location of the next encountered tag. In the first example,
                  the implied start body and html tags will have the same position as the
                  p tag, and the implied end p, html and body tags will all have the same
                  position.
                  &lt;p&gt;As html skips whitespace the position for text will be the position
                  of the first valid character, eg in the string &apos;\n\n\nblah&apos;
                  the text &apos;blah&apos; will have a position of 3, the newlines are skipped.
                  &lt;p&gt;
                  For attributes that do not have a value, eg in the html
                  string &lt;code&gt;&amp;lt;foo blah&amp;gt;&lt;/code&gt; the attribute &lt;code&gt;blah&lt;/code&gt;
                  does not have a value, there are two possible values that will be
                  placed in the AttributeSet&apos;s value:
                  &lt;ul&gt;
                  &lt;li&gt;If the DTD does not contain an definition for the element, or the
                  definition does not have an explicit value then the value in the
                  AttributeSet will be &lt;code&gt;HTML.NULL_ATTRIBUTE_VALUE&lt;/code&gt;.
                  &lt;li&gt;If the DTD contains an explicit value, as in:
                  &lt;code&gt;&amp;lt;!ATTLIST OPTION selected (selected) #IMPLIED&amp;gt;&lt;/code&gt;
                  this value from the dtd (in this case selected) will be used.
                  &lt;/ul&gt;
                  &lt;p&gt;
                  Once the stream has been parsed, the callback is notified of the most
                  likely end of line string. The end of line string will be one of
                  \n, \r or \r\n, which ever is encountered the most in parsing the
                  stream.                
                <author>
                    Sunita Mani                    
                </author>
            </javadoc>
            <declaration name="inbody" type="int" line="105"/>
            <declaration name="intitle" type="int" line="106"/>
            <declaration name="inhead" type="int" line="107"/>
            <declaration name="instyle" type="int" line="108"/>
            <declaration name="inscript" type="int" line="109"/>
            <declaration name="seentitle" type="boolean" line="110"/>
            <declaration name="callback" type="HTMLEditorKit.ParserCallback" line="111"/>
            <declaration name="ignoreCharSet" type="boolean" line="112"/>
            <declaration name="debugFlag" type="boolean" line="113"/>
            <method name="DocumentParser" type="constructor" line="115">
                <params>
                    <param name="dtd" type="DTD"/>
                </params>
            </method>
            <method name="parse" type="void" line="119">
                <params>
                    <param name="in" type="Reader"/>
                    <param name="callback" type="HTMLEditorKit.ParserCallback"/>
                    <param name="ignoreCharSet" type="boolean"/>
                </params>
                <comment line="123">
                    end of line                    
                </comment>
            </method>
            <javadoc line="127">
                Handle Start Tag.                
            </javadoc>
            <method name="handleStartTag" type="void" line="130">
                <params>
                    <param name="tag" type="TagElement"/>
                </params>
                <declaration name="elem" type="Element" line="132"/>
                <scope line="133"/>
                <scope line="135"/>
                <scope line="136"/>
                <scope line="138"/>
                <scope line="140"/>
                <scope line="142"/>
                <scope line="145">
                    <scope line="146"/>
                    <scope line="148"/>
                </scope>
                <scope line="153">
                    <declaration name="attrs" type="SimpleAttributeSet" line="154"/>
                </scope>
                <scope line="159"/>
            </method>
            <method name="handleComment" type="void" line="167">
                <params>
                    <param name="text" type="char"/>
                </params>
                <scope line="168"/>
            </method>
            <javadoc line="175">
                Handle Empty Tag.                
            </javadoc>
            <method name="handleEmptyTag" type="void" line="178">
                <params>
                    <param name="tag" type="TagElement"/>
                </params>
                <declaration name="elem" type="Element" line="180"/>
                <scope line="181">
                    <declaration name="atts" type="SimpleAttributeSet" line="182"/>
                    <scope line="183">
                        <declaration name="content" type="String" line="184"/>
                        <scope line="185">
                            <scope line="186">
                                <scope line="188"/>
                            </scope>
                            <scope line="191"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="197">
                    <scope line="198">
                        <scope line="199"/>
                        <scope line="201"/>
                    </scope>
                    <scope line="206">
                        <declaration name="attrs" type="SimpleAttributeSet" line="207"/>
                    </scope>
                    <scope line="212"/>
                </scope>
            </method>
            <javadoc line="220">
                Handle End Tag.                
            </javadoc>
            <method name="handleEndTag" type="void" line="223">
                <params>
                    <param name="tag" type="TagElement"/>
                </params>
                <declaration name="elem" type="Element" line="224"/>
                <scope line="225"/>
                <scope line="227"/>
                <scope line="230"/>
                <scope line="232"/>
                <scope line="234"/>
                <scope line="237"/>
            </method>
            <javadoc line="244">
                Handle Text.                
            </javadoc>
            <method name="handleText" type="void" line="247">
                <params>
                    <param name="data" type="char"/>
                </params>
                <scope line="248">
                    <scope line="249"/>
                    <scope line="254">
                        <scope line="255"/>
                    </scope>
                </scope>
            </method>
            <method name="handleError" type="void" line="266">
                <params>
                    <param name="ln" type="int"/>
                    <param name="errorMsg" type="String"/>
                </params>
                <comment line="270">
                                        
                </comment>
                <scope line="267"/>
            </method>
            <method name="debug" type="void" line="278">
                <params>
                    <param name="msg" type="String"/>
                </params>
            </method>
        </class>
    </source>