<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text">
        <import package="java.util.Vector"/>
        <import package="java.io.Serializable"/>
        <import package="javax.swing.undo"/>
        <import package="javax.swing.SwingUtilities"/>
        <class name="StringContent" line="6">
            <implements interface="AbstractDocument.Content"/>
            <implements interface="Serializable"/>
            <javadoc line="6">
                An implementation of the AbstractDocument.Content interface that is
                  a brute force implementation that is useful for relatively small
                  documents and/or debugging.  It manages the character content
                  as a simple character array.  It is also quite inefficient.
                  &lt;p&gt;
                  It is generally recommended that the gap buffer or piece table
                  implementations be used instead.  This buffer does not scale up
                  to large sizes.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <author>
                    Timothy Prinzing                    
                </author>
            </javadoc>
            <javadoc line="27">
                Creates a new StringContent object.  Initial size defaults to 10.                
            </javadoc>
            <method name="StringContent" type="constructor" line="30"/>
            <javadoc line="33">
                Creates a new StringContent object, with the initial
                  size specified.  If the length is &lt; 1, a size of 1 is used.                
                <param>
                    initialLength the initial size                    
                </param>
            </javadoc>
            <method name="StringContent" type="constructor" line="38">
                <params>
                    <param name="initialLength" type="int"/>
                </params>
                <scope line="39"/>
            </method>
            <javadoc line="46">
                Returns the length of the content.                
                <return>
                    the length >= 1                    
                </return>
                <see>
                    AbstractDocument.Content#length                    
                </see>
            </javadoc>
            <method name="length" type="int" line="51"/>
            <javadoc line="54">
                Inserts a string into the content.                
                <param>
                    where the starting position >= 0 && < length()                    
                </param>
                <param>
                    str the non-null string to insert                    
                </param>
                <return>
                    an UndoableEdit object for undoing                    
                </return>
                <exception>
                    BadLocationException if the specified position is invalid                    
                </exception>
                <see>
                    AbstractDocument.Content#insertString                    
                </see>
            </javadoc>
            <method name="insertString" type="UndoableEdit" line="62">
                <params>
                    <param name="where" type="int"/>
                    <param name="str" type="String"/>
                </params>
                <scope line="63"/>
                <declaration name="chars" type="char[]" line="66"/>
                <scope line="68"/>
            </method>
            <javadoc line="73">
                Removes part of the content.  where + nitems must be &lt; length().                
                <param>
                    where the starting position >= 0                    
                </param>
                <param>
                    nitems the number of characters to remove >= 0                    
                </param>
                <return>
                    an UndoableEdit object for undoing                    
                </return>
                <exception>
                    BadLocationException if the specified position is invalid                    
                </exception>
                <see>
                    AbstractDocument.Content#remove                    
                </see>
            </javadoc>
            <method name="remove" type="UndoableEdit" line="81">
                <params>
                    <param name="where" type="int"/>
                    <param name="nitems" type="int"/>
                </params>
                <scope line="82"/>
                <declaration name="removedString" type="String" line="85"/>
                <declaration name="edit" type="UndoableEdit" line="86"/>
                <scope line="88"/>
            </method>
            <javadoc line="93">
                Retrieves a portion of the content.  where + len must be &lt;= length().                
                <param>
                    where the starting position >= 0                    
                </param>
                <param>
                    len the length to retrieve >= 0                    
                </param>
                <return>
                    a string representing the content; may be empty                    
                </return>
                <exception>
                    BadLocationException if the specified position is invalid                    
                </exception>
                <see>
                    AbstractDocument.Content#getString                    
                </see>
            </javadoc>
            <method name="getString" type="String" line="101">
                <params>
                    <param name="where" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="102"/>
            </method>
            <javadoc line="107">
                Retrieves a portion of the content.  where + len must be &lt;= length()                
                <param>
                    where the starting position >= 0                    
                </param>
                <param>
                    len the number of characters to retrieve >= 0                    
                </param>
                <param>
                    chars the Segment object to return the characters in                    
                </param>
                <exception>
                    BadLocationException if the specified position is invalid                    
                </exception>
                <see>
                    AbstractDocument.Content#getChars                    
                </see>
            </javadoc>
            <method name="getChars" type="void" line="115">
                <params>
                    <param name="where" type="int"/>
                    <param name="len" type="int"/>
                    <param name="chars" type="Segment"/>
                </params>
                <scope line="116"/>
            </method>
            <javadoc line="123">
                Creates a position within the content that will
                  track change as the content is mutated.                
                <param>
                    offset the offset to create a position for >= 0                    
                </param>
                <return>
                    the position                    
                </return>
                <exception>
                    BadLocationException if the specified position is invalid                    
                </exception>
            </javadoc>
            <method name="createPosition" type="Position" line="130">
                <params>
                    <param name="offset" type="int"/>
                </params>
                <scope line="131"/>
            </method>
            <javadoc line="136">
                Replaces some of the characters in the array                
                <param>
                    offset  offset into the array to start the replace                    
                </param>
                <param>
                    length  number of characters to remove                    
                </param>
                <param>
                    replArray replacement array                    
                </param>
                <param>
                    replOffset offset into the replacement array                    
                </param>
                <param>
                    replLength number of character to use from the
                      replacement array.                    
                </param>
            </javadoc>
            <method name="replace" type="void" line="145">
                <params>
                    <param name="offset" type="int"/>
                    <param name="length" type="int"/>
                    <param name="replArray" type="char[]"/>
                    <param name="replOffset" type="int"/>
                    <param name="replLength" type="int"/>
                </params>
                <declaration name="delta" type="int" line="146"/>
                <declaration name="src" type="int" line="147"/>
                <declaration name="nmove" type="int" line="148"/>
                <declaration name="dest" type="int" line="149"/>
                <scope line="150">
                    <declaration name="newLength" type="int" line="151"/>
                    <declaration name="newData" type="char[]" line="152"/>
                </scope>
                <scope line="158"/>
            </method>
            <method name="resize" type="void" line="164">
                <params>
                    <param name="ncount" type="int"/>
                </params>
                <declaration name="ndata" type="char[]" line="165"/>
            </method>
            <method name="updateMarksForInsert" type="void" line="169">
                <params>
                    <param name="offset" type="int"/>
                    <param name="length" type="int"/>
                </params>
                <scope line="170"/>
                <declaration name="n" type="int" line="173"/>
                <scope line="174">
                    <declaration name="mark" type="PosRec" line="175"/>
                    <scope line="176"/>
                    <scope line="181"/>
                </scope>
            </method>
            <method name="updateMarksForRemove" type="void" line="186">
                <params>
                    <param name="offset" type="int"/>
                    <param name="length" type="int"/>
                </params>
                <declaration name="n" type="int" line="187"/>
                <scope line="188">
                    <declaration name="mark" type="PosRec" line="189"/>
                    <scope line="190"/>
                    <scope line="195"/>
                    <scope line="198"/>
                </scope>
            </method>
            <javadoc line="203">
                Returns a Vector containing instances of UndoPosRef for the
                  Positions in the range
                  &lt;code&gt;offset&lt;/code&gt; to &lt;code&gt;offset&lt;/code&gt; + &lt;code&gt;length&lt;/code&gt;.
                  If &lt;code&gt;v&lt;/code&gt; is not null the matching Positions are placed in
                  there. The vector with the resulting Positions are returned.
                  &lt;p&gt;
                  This is meant for internal usage, and is generally not of interest
                  to subclasses.                
                <param>
                    v the Vector to use, with a new one created on null                    
                </param>
                <param>
                    offset the starting offset >= 0                    
                </param>
                <param>
                    length the length >= 0                    
                </param>
                <return>
                    the set of instances                    
                </return>
            </javadoc>
            <method name="getPositionsInRange" type="Vector" line="217">
                <params>
                    <param name="v" type="Vector"/>
                    <param name="offset" type="int"/>
                    <param name="length" type="int"/>
                </params>
                <declaration name="n" type="int" line="218"/>
                <declaration name="end" type="int" line="219"/>
                <declaration name="placeIn" type="Vector" line="220"/>
                <scope line="221">
                    <declaration name="mark" type="PosRec" line="222"/>
                    <scope line="223"/>
                </scope>
            </method>
            <javadoc line="232">
                Resets the location for all the UndoPosRef instances
                  in &lt;code&gt;positions&lt;/code&gt;.
                  &lt;p&gt;
                  This is meant for internal usage, and is generally not of interest
                  to subclasses.                
                <param>
                    positions the positions of the instances                    
                </param>
            </javadoc>
            <method name="updateUndoPositions" type="void" line="240">
                <params>
                    <param name="positions" type="Vector"/>
                </params>
                <scope line="241">
                    <declaration name="ref" type="UndoPosRef" line="242"/>
                    <scope line="243"/>
                </scope>
            </method>
            <declaration name="empty" type="char[]" line="249"/>
            <declaration name="data" type="char[]" line="250"/>
            <declaration name="count" type="int" line="251"/>
            <declaration name="marks" type="Vector&lt;PosRec&gt;" line="252"/>
            <class name="PosRec" line="253">
                <javadoc line="253">
                    holds the data for a mark... separately from
                      the real mark so that the real mark can be
                      collected if there are no more references to
                      it.... the update table holds only a reference
                      to this grungy thing.                    
                </javadoc>
                <method name="PosRec" type="constructor" line="261">
                    <params>
                        <param name="offset" type="int"/>
                    </params>
                </method>
                <declaration name="offset" type="int" line="264"/>
                <declaration name="unused" type="boolean" line="265"/>
            </class>
            <class name="StickyPosition" line="267">
                <implements interface="Position"/>
                <javadoc line="267">
                    This really wants to be a weak reference but
                      in 1.1 we don&apos;t have a 100% pure solution for
                      this... so this class trys to hack a solution
                      to causing the marks to be collected.                    
                </javadoc>
                <method name="StickyPosition" type="constructor" line="274">
                    <params>
                        <param name="offset" type="int"/>
                    </params>
                </method>
                <method name="getOffset" type="int" line="278"/>
                <method name="finalize" type="void" line="281"/>
                <method name="toString" type="String" line="284"/>
                <declaration name="rec" type="PosRec" line="287"/>
            </class>
            <class name="UndoPosRef" line="289">
                <javadoc line="289">
                    Used to hold a reference to a Position that is being reset as the
                      result of removing from the content.                    
                </javadoc>
                <method name="UndoPosRef" type="constructor" line="294">
                    <params>
                        <param name="rec" type="PosRec"/>
                    </params>
                </method>
                <javadoc line="298">
                    Resets the location of the Position to the offset when the
                      receiver was instantiated.                    
                </javadoc>
                <method name="resetLocation" type="void" line="302"/>
                <declaration name="undoLocation" type="int" line="305"/>
                <javadoc line="305">
                    Location to reset to when resetLocatino is invoked.                    
                </javadoc>
                <declaration name="rec" type="PosRec" line="309"/>
                <javadoc line="309">
                    Position to reset offset.                    
                </javadoc>
            </class>
            <class name="InsertUndo" line="314">
                <extends class="AbstractUndoableEdit"/>
                <javadoc line="314">
                    UnoableEdit created for inserts.                    
                </javadoc>
                <method name="InsertUndo" type="constructor" line="318">
                    <params>
                        <param name="offset" type="int"/>
                        <param name="length" type="int"/>
                    </params>
                </method>
                <method name="undo" type="void" line="323">
                    <scope line="325">
                        <scope line="326"/>
                    </scope>
                    <scope line="332"/>
                </method>
                <method name="redo" type="void" line="336">
                    <scope line="338">
                        <scope line="339">
                            <scope line="342"/>
                        </scope>
                    </scope>
                    <scope line="348"/>
                </method>
                <declaration name="offset" type="int" line="352"/>
                <declaration name="length" type="int" line="353"/>
                <declaration name="string" type="String" line="354"/>
                <declaration name="posRefs" type="Vector" line="355"/>
            </class>
            <class name="RemoveUndo" line="357">
                <extends class="AbstractUndoableEdit"/>
                <javadoc line="357">
                    UndoableEdit created for removes.                    
                </javadoc>
                <method name="RemoveUndo" type="constructor" line="361">
                    <params>
                        <param name="offset" type="int"/>
                        <param name="string" type="String"/>
                    </params>
                </method>
                <method name="undo" type="void" line="368">
                    <scope line="370">
                        <scope line="371">
                            <scope line="373"/>
                        </scope>
                    </scope>
                    <scope line="380"/>
                </method>
                <method name="redo" type="void" line="384">
                    <scope line="386">
                        <scope line="387"/>
                    </scope>
                    <scope line="393"/>
                </method>
                <declaration name="offset" type="int" line="397"/>
                <declaration name="length" type="int" line="398"/>
                <declaration name="string" type="String" line="399"/>
                <declaration name="posRefs" type="Vector" line="400"/>
            </class>
        </class>
    </source>