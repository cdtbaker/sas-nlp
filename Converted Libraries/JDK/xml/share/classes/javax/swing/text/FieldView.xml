<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text">
        <import package="java.awt"/>
        <import package="javax.swing"/>
        <import package="javax.swing.event"/>
        <class name="FieldView" line="31">
            <extends class="PlainView"/>
            <comment line="174">
                --- View methods -------------------------------------------                
            </comment>
            <javadoc line="31">
                Extends the multi-line plain text view to be suitable
                  for a single-line editor view.  If the view is
                  allocated extra space, the field must adjust for it.
                  If the hosting component is a JTextField, this view
                  will manage the ranges of the associated BoundedRangeModel
                  and will adjust the horizontal allocation to match the
                  current visibility settings of the JTextField.                
                <author>
                    Timothy Prinzing                    
                </author>
                <see>
                    View                    
                </see>
            </javadoc>
            <javadoc line="45">
                Constructs a new FieldView wrapped on an element.                
                <param>
                    elem the element                    
                </param>
            </javadoc>
            <method name="FieldView" type="constructor" line="50">
                <params>
                    <param name="elem" type="Element"/>
                </params>
            </method>
            <javadoc line="54">
                Fetches the font metrics associated with the component hosting
                  this view.                
                <return>
                    the metrics                    
                </return>
            </javadoc>
            <method name="getFontMetrics" type="FontMetrics" line="60">
                <declaration name="c" type="Component" line="61"/>
            </method>
            <javadoc line="65">
                Adjusts the allocation given to the view
                  to be a suitable allocation for a text field.
                  If the view has been allocated more than the
                  preferred span vertically, the allocation is
                  changed to be centered vertically.  Horizontally
                  the view is adjusted according to the horizontal
                  alignment property set on the associated JTextField
                  (if that is the type of the hosting component).                
                <param>
                    a the allocation given to the view, which may need
                      to be adjusted.                    
                </param>
                <return>
                    the allocation that the superclass should use.                    
                </return>
            </javadoc>
            <method name="adjustAllocation" type="Shape" line="79">
                <params>
                    <param name="a" type="Shape"/>
                </params>
                <comment line="90">
                    horizontal adjustments                    
                </comment>
                <comment line="104">
                    horizontally align the interior                    
                </comment>
                <comment line="136">
                    adjust the allocation to match the bounded range.                    
                </comment>
                <scope line="80">
                    <declaration name="bounds" type="Rectangle" line="81"/>
                    <declaration name="vspan" type="int" line="82"/>
                    <declaration name="hspan" type="int" line="83"/>
                    <scope line="84">
                        <declaration name="slop" type="int" line="85"/>
                    </scope>
                    <declaration name="c" type="Component" line="91"/>
                    <scope line="92">
                        <declaration name="field" type="JTextField" line="93"/>
                        <declaration name="vis" type="BoundedRangeModel" line="94"/>
                        <declaration name="max" type="int" line="95"/>
                        <declaration name="value" type="int" line="96"/>
                        <declaration name="extent" type="int" line="97"/>
                        <scope line="98"/>
                        <scope line="103">
                            <declaration name="slop" type="int" line="105"/>
                            <declaration name="align" type="int" line="107"/>
                            <scope line="108">
                                <scope line="109"/>
                                <scope line="112"/>
                            </scope>
                            <scope line="116">
                                <scope line="117"/>
                                <scope line="120"/>
                            </scope>
                        </scope>
                        <scope line="135"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="146">
                Update the visibility model with the associated JTextField
                  (if there is one) to reflect the current visibility as a
                  result of changes to the document model.  The bounded
                  range properties are updated.  If the view hasn&apos;t yet been
                  shown the extent will be zero and we just set it to be full
                  until determined otherwise.                
            </javadoc>
            <method name="updateVisibilityModel" type="void" line="154">
                <declaration name="c" type="Component" line="155"/>
                <scope line="156">
                    <declaration name="field" type="JTextField" line="157"/>
                    <declaration name="vis" type="BoundedRangeModel" line="158"/>
                    <declaration name="hspan" type="int" line="159"/>
                    <declaration name="extent" type="int" line="160"/>
                    <declaration name="maximum" type="int" line="161"/>
                    <declaration name="value" type="int" line="163"/>
                    <declaration name="oldValue" type="int" line="164"/>
                    <scope line="165"/>
                </scope>
            </method>
            <javadoc line="175">
                Renders using the given rendering surface and area on that surface.
                  The view may need to do layout and create child views to enable
                  itself to render into the given allocation.                
                <param>
                    g the rendering surface to use                    
                </param>
                <param>
                    a the allocated region to render into                    
                </param>
                <see>
                    View#paint                    
                </see>
            </javadoc>
            <method name="paint" type="void" line="185">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="a" type="Shape"/>
                </params>
                <declaration name="r" type="Rectangle" line="186"/>
            </method>
            <javadoc line="191">
                Adjusts &lt;code&gt;a&lt;/code&gt; based on the visible region and returns it.                
            </javadoc>
            <method name="adjustPaintRegion" type="Shape" line="194">
                <params>
                    <param name="a" type="Shape"/>
                </params>
            </method>
            <javadoc line="198">
                Determines the preferred span for this view along an
                  axis.                
                <param>
                    axis may be either View.X_AXIS or View.Y_AXIS                    
                </param>
                <return>
                    the span the view would like to be rendered into >= 0.
                      Typically the view is told to render into the span
                      that is returned, although there is no guarantee.
                      The parent may choose to resize or break the view.                    
                </return>
            </javadoc>
            <method name="getPreferredSpan" type="float" line="208">
                <params>
                    <param name="axis" type="int"/>
                </params>
                <declaration name="buff" type="Segment" line="211"/>
                <declaration name="doc" type="Document" line="212"/>
                <declaration name="width" type="int" line="213"/>
                <scope line="214">
                    <declaration name="fm" type="FontMetrics" line="215"/>
                    <scope line="218">
                        <declaration name="c" type="Component" line="219"/>
                    </scope>
                    <scope line="226"/>
                </scope>
                <scope line="229"/>
            </method>
            <javadoc line="239">
                Determines the resizability of the view along the
                  given axis.  A value of 0 or less is not resizable.                
                <param>
                    axis View.X_AXIS or View.Y_AXIS                    
                </param>
                <return>
                    the weight -> 1 for View.X_AXIS, else 0                    
                </return>
            </javadoc>
            <method name="getResizeWeight" type="int" line="246">
                <params>
                    <param name="axis" type="int"/>
                </params>
                <scope line="247"/>
            </method>
            <javadoc line="253">
                Provides a mapping from the document model coordinate space
                  to the coordinate space of the view mapped to it.                
                <param>
                    pos the position to convert >= 0                    
                </param>
                <param>
                    a the allocated region to render into                    
                </param>
                <return>
                    the bounding box of the given position                    
                </return>
                <exception>
                    BadLocationException  if the given position does not
                      represent a valid location in the associated document                    
                </exception>
                <see>
                    View#modelToView                    
                </see>
            </javadoc>
            <method name="modelToView" type="Shape" line="264">
                <params>
                    <param name="pos" type="int"/>
                    <param name="a" type="Shape"/>
                    <param name="b" type="Position.Bias"/>
                </params>
            </method>
            <javadoc line="268">
                Provides a mapping from the view coordinate space to the logical
                  coordinate space of the model.                
                <param>
                    fx the X coordinate >= 0.0f                    
                </param>
                <param>
                    fy the Y coordinate >= 0.0f                    
                </param>
                <param>
                    a the allocated region to render into                    
                </param>
                <return>
                    the location within the model that best represents the
                      given point in the view                    
                </return>
                <see>
                    View#viewToModel                    
                </see>
            </javadoc>
            <method name="viewToModel" type="int" line="279">
                <params>
                    <param name="fx" type="float"/>
                    <param name="fy" type="float"/>
                    <param name="a" type="Shape"/>
                    <param name="bias" type="Position.Bias[]"/>
                </params>
            </method>
            <javadoc line="283">
                Gives notification that something was inserted into the document
                  in a location that this view is responsible for.                
                <param>
                    changes the change information from the associated document                    
                </param>
                <param>
                    a the current allocation of the view                    
                </param>
                <param>
                    f the factory to use to rebuild if the view has children                    
                </param>
                <see>
                    View#insertUpdate                    
                </see>
            </javadoc>
            <method name="insertUpdate" type="void" line="292">
                <params>
                    <param name="changes" type="DocumentEvent"/>
                    <param name="a" type="Shape"/>
                    <param name="f" type="ViewFactory"/>
                </params>
            </method>
            <javadoc line="297">
                Gives notification that something was removed from the document
                  in a location that this view is responsible for.                
                <param>
                    changes the change information from the associated document                    
                </param>
                <param>
                    a the current allocation of the view                    
                </param>
                <param>
                    f the factory to use to rebuild if the view has children                    
                </param>
                <see>
                    View#removeUpdate                    
                </see>
            </javadoc>
            <method name="removeUpdate" type="void" line="306">
                <params>
                    <param name="changes" type="DocumentEvent"/>
                    <param name="a" type="Shape"/>
                    <param name="f" type="ViewFactory"/>
                </params>
            </method>
        </class>
    </source>