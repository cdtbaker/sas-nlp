<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text">
        <import package="java.io.PrintStream"/>
        <import package="java.util.Vector"/>
        <import package="java.awt"/>
        <import package="javax.swing.event.DocumentEvent"/>
        <import package="javax.swing.SizeRequirements"/>
        <class name="BoxView" line="33">
            <extends class="CompositeView"/>
            <comment line="165">
                --- View methods ---------------------------------------------                
            </comment>
            <comment line="602">
                --- local methods ----------------------------------------------------                
            </comment>
            <comment line="1162">
                --- variables ------------------------------------------------                
            </comment>
            <comment line="1169">
                Request cache                
            </comment>
            <comment line="1177">
                Allocation cache                
            </comment>
            <javadoc line="33">
                A view that arranges its children into a box shape by tiling
                  its children along an axis.  The box is somewhat like that
                  found in TeX where there is alignment of the
                  children, flexibility of the children is considered, etc.
                  This is a building block that might be useful to represent
                  things like a collection of lines, paragraphs,
                  lists, columns, pages, etc.  The axis along which the children are tiled is
                  considered the major axis.  The orthoginal axis is the minor axis.
                  &lt;p&gt;
                  Layout for each axis is handled separately by the methods
                  &lt;code&gt;layoutMajorAxis&lt;/code&gt; and &lt;code&gt;layoutMinorAxis&lt;/code&gt;.
                  Subclasses can change the layout algorithm by
                  reimplementing these methods.    These methods will be called
                  as necessary depending upon whether or not there is cached
                  layout information and the cache is considered
                  valid.  These methods are typically called if the given size
                  along the axis changes, or if &lt;code&gt;layoutChanged&lt;/code&gt; is
                  called to force an updated layout.  The &lt;code&gt;layoutChanged&lt;/code&gt;
                  method invalidates cached layout information, if there is any.
                  The requirements published to the parent view are calculated by
                  the methods &lt;code&gt;calculateMajorAxisRequirements&lt;/code&gt;
                  and  &lt;code&gt;calculateMinorAxisRequirements&lt;/code&gt;.
                  If the layout algorithm is changed, these methods will
                  likely need to be reimplemented.                
                <author>
                    Timothy Prinzing                    
                </author>
            </javadoc>
            <javadoc line="63">
                Constructs a &lt;code&gt;BoxView&lt;/code&gt;.                
                <param>
                    elem the element this view is responsible for                    
                </param>
                <param>
                    axis either <code>View.X_AXIS</code> or <code>View.Y_AXIS</code>                    
                </param>
            </javadoc>
            <method name="BoxView" type="constructor" line="69">
                <params>
                    <param name="elem" type="Element"/>
                    <param name="axis" type="int"/>
                </params>
            </method>
            <javadoc line="84">
                Fetches the tile axis property.  This is the axis along which
                  the child views are tiled.                
                <return>
                    the major axis of the box, either
                      <code>View.X_AXIS</code> or <code>View.Y_AXIS</code>                    
                </return>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getAxis" type="int" line="93"/>
            <javadoc line="97">
                Sets the tile axis property.  This is the axis along which
                  the child views are tiled.                
                <param>
                    axis either <code>View.X_AXIS</code> or <code>View.Y_AXIS</code>                    
                </param>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="setAxis" type="void" line="105">
                <params>
                    <param name="axis" type="int"/>
                </params>
                <declaration name="axisChanged" type="boolean" line="106"/>
                <scope line="108"/>
            </method>
            <javadoc line="113">
                Invalidates the layout along an axis.  This happens
                  automatically if the preferences have changed for
                  any of the child views.  In some cases the layout
                  may need to be recalculated when the preferences
                  have not changed.  The layout can be marked as
                  invalid by calling this method.  The layout will
                  be updated the next time the &lt;code&gt;setSize&lt;/code&gt; method
                  is called on this view (typically in paint).                
                <param>
                    axis either <code>View.X_AXIS</code> or <code>View.Y_AXIS</code>                    
                </param>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="layoutChanged" type="void" line="127">
                <params>
                    <param name="axis" type="int"/>
                </params>
                <scope line="128"/>
                <scope line="130"/>
            </method>
            <javadoc line="135">
                Determines if the layout is valid along the given axis.                
                <param>
                    axis either <code>View.X_AXIS</code> or <code>View.Y_AXIS</code>                    
                </param>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isLayoutValid" type="boolean" line="142">
                <params>
                    <param name="axis" type="int"/>
                </params>
                <scope line="143"/>
                <scope line="145"/>
            </method>
            <javadoc line="150">
                Paints a child.  By default
                  that is all it does, but a subclass can use this to paint
                  things relative to the child.                
                <param>
                    g the graphics context                    
                </param>
                <param>
                    alloc the allocated region to paint into                    
                </param>
                <param>
                    index the child index, >= 0 && < getViewCount()                    
                </param>
            </javadoc>
            <method name="paintChild" type="void" line="159">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="alloc" type="Rectangle"/>
                    <param name="index" type="int"/>
                </params>
                <declaration name="child" type="View" line="160"/>
            </method>
            <javadoc line="166">
                Invalidates the layout and resizes the cache of
                  requests/allocations.  The child allocations can still
                  be accessed for the old layout, but the new children
                  will have an offset and span of 0.                
                <param>
                    index the starting index into the child views to insert
                      the new views; this should be a value >= 0 and <= getViewCount                    
                </param>
                <param>
                    length the number of existing child views to remove;
                      This should be a value >= 0 and <= (getViewCount() - offset)                    
                </param>
                <param>
                    elems the child views to add; this value can be
                      <code>null</code>to indicate no children are being added
                      (useful to remove)                    
                </param>
            </javadoc>
            <method name="replace" type="void" line="180">
                <params>
                    <param name="index" type="int"/>
                    <param name="length" type="int"/>
                    <param name="elems" type="View[]"/>
                </params>
                <comment line="183">
                    invalidate cache                    
                </comment>
                <declaration name="nInserted" type="int" line="184"/>
            </method>
            <javadoc line="195">
                Resizes the given layout array to match the new number of
                  child views.  The current number of child views are used to
                  produce the new array.  The contents of the old array are
                  inserted into the new array at the appropriate places so that
                  the old layout information is transferred to the new array.                
                <param>
                    oldArray the original layout array                    
                </param>
                <param>
                    offset location where new views will be inserted                    
                </param>
                <param>
                    nInserted the number of child views being inserted;
                      therefore the number of blank spaces to leave in the
                      new array at location <code>offset</code>                    
                </param>
                <return>
                    the new layout array                    
                </return>
            </javadoc>
            <method name="updateLayoutArray" type="int[]" line="209">
                <params>
                    <param name="oldArray" type="int[]"/>
                    <param name="offset" type="int"/>
                    <param name="nInserted" type="int"/>
                </params>
                <declaration name="n" type="int" line="210"/>
                <declaration name="newArray" type="int[]" line="211"/>
            </method>
            <javadoc line="219">
                Forwards the given &lt;code&gt;DocumentEvent&lt;/code&gt; to the child views
                  that need to be notified of the change to the model.
                  If a child changed its requirements and the allocation
                  was valid prior to forwarding the portion of the box
                  from the starting child to the end of the box will
                  be repainted.                
                <param>
                    ec changes to the element this view is responsible
                      for (may be <code>null</code> if there were no changes)                    
                </param>
                <param>
                    e the change information from the associated document                    
                </param>
                <param>
                    a the current allocation of the view                    
                </param>
                <param>
                    f the factory to use to rebuild if the view has children                    
                </param>
                <see>
                    #insertUpdate                    
                </see>
                <see>
                    #removeUpdate                    
                </see>
                <see>
                    #changedUpdate                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="forwardUpdate" type="void" line="238">
                <params>
                    <param name="ec" type="DocumentEvent.ElementChange"/>
                    <param name="e" type="DocumentEvent"/>
                    <param name="a" type="Shape"/>
                    <param name="f" type="ViewFactory"/>
                </params>
                <comment line="242">
                    determine if a repaint is needed                    
                </comment>
                <comment line="244">
                    Repaint is needed because one of the tiled children                    
                </comment>
                <comment line="245">
                    have changed their span along the major axis.  If there                    
                </comment>
                <comment line="246">
                    is a hosting component and an allocated shape we repaint.                    
                </comment>
                <declaration name="wasValid" type="boolean" line="239"/>
                <scope line="243">
                    <declaration name="c" type="Component" line="247"/>
                    <scope line="248">
                        <declaration name="pos" type="int" line="249"/>
                        <declaration name="index" type="int" line="250"/>
                        <declaration name="alloc" type="Rectangle" line="251"/>
                        <scope line="252"/>
                        <scope line="255"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="264">
                This is called by a child to indicate its
                  preferred span has changed.  This is implemented to
                  throw away cached layout information so that new
                  calculations will be done the next time the children
                  need an allocation.                
                <param>
                    child the child view                    
                </param>
                <param>
                    width true if the width preference should change                    
                </param>
                <param>
                    height true if the height preference should change                    
                </param>
            </javadoc>
            <method name="preferenceChanged" type="void" line="275">
                <params>
                    <param name="child" type="View"/>
                    <param name="width" type="boolean"/>
                    <param name="height" type="boolean"/>
                </params>
                <declaration name="majorChanged" type="boolean" line="276"/>
                <declaration name="minorChanged" type="boolean" line="277"/>
                <scope line="278"/>
                <scope line="282"/>
            </method>
            <javadoc line="289">
                Gets the resize weight.  A value of 0 or less is not resizable.                
                <param>
                    axis may be either <code>View.X_AXIS</code> or
                      <code>View.Y_AXIS</code>                    
                </param>
                <return>
                    the weight                    
                </return>
                <exception>
                    IllegalArgumentException for an invalid axis                    
                </exception>
            </javadoc>
            <method name="getResizeWeight" type="int" line="297">
                <params>
                    <param name="axis" type="int"/>
                </params>
                <scope line="299">
                    <scope line="301"/>
                </scope>
                <scope line="304">
                    <scope line="306"/>
                </scope>
            </method>
            <javadoc line="313">
                Sets the size of the view along an axis.  This should cause
                  layout of the view along the given axis.                
                <param>
                    axis may be either <code>View.X_AXIS</code> or
                      <code>View.Y_AXIS</code>                    
                </param>
                <param>
                    span the span to layout to >= 0                    
                </param>
            </javadoc>
            <method name="setSpanOnAxis" type="void" line="321">
                <params>
                    <param name="axis" type="int"/>
                    <param name="span" type="float"/>
                </params>
                <comment line="327">
                    layout the major axis                    
                </comment>
                <comment line="333">
                    flush changes to the children                    
                </comment>
                <comment line="341">
                    layout the minor axis                    
                </comment>
                <comment line="347">
                    flush changes to the children                    
                </comment>
                <scope line="322">
                    <scope line="323"/>
                    <scope line="326"/>
                </scope>
                <scope line="336">
                    <scope line="337"/>
                    <scope line="340"/>
                </scope>
            </method>
            <javadoc line="353">
                Propagates the current allocations to the child views.                
            </javadoc>
            <method name="updateChildSizes" type="void" line="356">
                <declaration name="n" type="int" line="357"/>
                <scope line="358">
                    <scope line="359">
                        <declaration name="v" type="View" line="360"/>
                    </scope>
                </scope>
                <scope line="363">
                    <scope line="364">
                        <declaration name="v" type="View" line="365"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="371">
                Returns the size of the view along an axis.  This is implemented
                  to return zero.                
                <param>
                    axis may be either <code>View.X_AXIS</code> or
                      <code>View.Y_AXIS</code>                    
                </param>
                <return>
                    the current span of the view along the given axis, >= 0                    
                </return>
            </javadoc>
            <method name="getSpanOnAxis" type="float" line="379">
                <params>
                    <param name="axis" type="int"/>
                </params>
                <scope line="380"/>
                <scope line="382"/>
            </method>
            <javadoc line="387">
                Sets the size of the view.  This should cause
                  layout of the view if the view caches any layout
                  information.  This is implemented to call the
                  layout method with the sizes inside of the insets.                
                <param>
                    width the width >= 0                    
                </param>
                <param>
                    height the height >= 0                    
                </param>
            </javadoc>
            <method name="setSize" type="void" line="396">
                <params>
                    <param name="width" type="float"/>
                    <param name="height" type="float"/>
                </params>
            </method>
            <javadoc line="401">
                Renders the &lt;code&gt;BoxView&lt;/code&gt; using the given
                  rendering surface and area
                  on that surface.  Only the children that intersect
                  the clip bounds of the given &lt;code&gt;Graphics&lt;/code&gt;
                  will be rendered.                
                <param>
                    g the rendering surface to use                    
                </param>
                <param>
                    allocation the allocated region to render into                    
                </param>
                <see>
                    View#paint                    
                </see>
            </javadoc>
            <method name="paint" type="void" line="412">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="allocation" type="Shape"/>
                </params>
                <comment line="428">
                    We should paint views that intersect with clipping region                    
                </comment>
                <comment line="429">
                    even if the intersection has no inside points (is a line).                    
                </comment>
                <comment line="430">
                    This is needed for supporting views that have zero width, like                    
                </comment>
                <comment line="431">
                    views that contain only combining marks.                    
                </comment>
                <declaration name="alloc" type="Rectangle" line="413"/>
                <declaration name="n" type="int" line="415"/>
                <declaration name="x" type="int" line="416"/>
                <declaration name="y" type="int" line="417"/>
                <declaration name="clip" type="Rectangle" line="418"/>
                <scope line="419">
                    <declaration name="trx0" type="int" line="424"/>
                    <declaration name="try0" type="int" line="425"/>
                    <declaration name="crx0" type="int" line="426"/>
                    <declaration name="cry0" type="int" line="427"/>
                    <scope line="432"/>
                </scope>
            </method>
            <javadoc line="438">
                Fetches the allocation for the given child view.
                  This enables finding out where various views
                  are located.  This is implemented to return
                  &lt;code&gt;null&lt;/code&gt; if the layout is invalid,
                  otherwise the superclass behavior is executed.                
                <param>
                    index the index of the child, >= 0 && < getViewCount()                    
                </param>
                <param>
                    a  the allocation to this view                    
                </param>
                <return>
                    the allocation to the child; or <code>null</code>
                      if <code>a</code> is <code>null</code>;
                      or <code>null</code> if the layout is invalid                    
                </return>
            </javadoc>
            <method name="getChildAllocation" type="Shape" line="451">
                <params>
                    <param name="index" type="int"/>
                    <param name="a" type="Shape"/>
                </params>
                <comment line="455">
                    The child allocation may not have been set yet.                    
                </comment>
                <scope line="452">
                    <declaration name="ca" type="Shape" line="453"/>
                    <scope line="454">
                        <declaration name="r" type="Rectangle" line="456"/>
                        <scope line="458"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="467">
                Provides a mapping from the document model coordinate space
                  to the coordinate space of the view mapped to it.  This makes
                  sure the allocation is valid before calling the superclass.                
                <param>
                    pos the position to convert >= 0                    
                </param>
                <param>
                    a the allocated region to render into                    
                </param>
                <return>
                    the bounding box of the given position                    
                </return>
                <exception>
                    BadLocationException  if the given position does
                      not represent a valid location in the associated document                    
                </exception>
                <see>
                    View#modelToView                    
                </see>
            </javadoc>
            <method name="modelToView" type="Shape" line="479">
                <params>
                    <param name="pos" type="int"/>
                    <param name="a" type="Shape"/>
                    <param name="b" type="Position.Bias"/>
                </params>
                <scope line="480">
                    <declaration name="alloc" type="Rectangle" line="481"/>
                </scope>
            </method>
            <javadoc line="487">
                Provides a mapping from the view coordinate space to the logical
                  coordinate space of the model.                
                <param>
                    x   x coordinate of the view location to convert >= 0                    
                </param>
                <param>
                    y   y coordinate of the view location to convert >= 0                    
                </param>
                <param>
                    a the allocated region to render into                    
                </param>
                <return>
                    the location within the model that best represents the
                      given point in the view >= 0                    
                </return>
                <see>
                    View#viewToModel                    
                </see>
            </javadoc>
            <method name="viewToModel" type="int" line="498">
                <params>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                    <param name="a" type="Shape"/>
                    <param name="bias" type="Position.Bias[]"/>
                </params>
                <scope line="499">
                    <declaration name="alloc" type="Rectangle" line="500"/>
                </scope>
            </method>
            <javadoc line="506">
                Determines the desired alignment for this view along an
                  axis.  This is implemented to give the total alignment
                  needed to position the children with the alignment points
                  lined up along the axis orthoginal to the axis that is
                  being tiled.  The axis being tiled will request to be
                  centered (i.e. 0.5f).                
                <param>
                    axis may be either <code>View.X_AXIS</code>
                      or <code>View.Y_AXIS</code>                    
                </param>
                <return>
                    the desired alignment >= 0.0f && <= 1.0f; this should
                      be a value between 0.0 and 1.0 where 0 indicates alignment at the
                      origin and 1.0 indicates alignment to the full span
                      away from the origin; an alignment of 0.5 would be the
                      center of the view                    
                </return>
                <exception>
                    IllegalArgumentException for an invalid axis                    
                </exception>
            </javadoc>
            <method name="getAlignment" type="float" line="523">
                <params>
                    <param name="axis" type="int"/>
                </params>
                <scope line="525"/>
                <scope line="527"/>
            </method>
            <javadoc line="532">
                Determines the preferred span for this view along an
                  axis.                
                <param>
                    axis may be either <code>View.X_AXIS</code>
                      or <code>View.Y_AXIS</code>                    
                </param>
                <return>
                    the span the view would like to be rendered into >= 0;
                      typically the view is told to render into the span
                      that is returned, although there is no guarantee;
                      the parent may choose to resize or break the view                    
                </return>
                <exception>
                    IllegalArgumentException for an invalid axis type                    
                </exception>
            </javadoc>
            <method name="getPreferredSpan" type="float" line="544">
                <params>
                    <param name="axis" type="int"/>
                </params>
                <declaration name="marginSpan" type="float" line="546"/>
                <scope line="548"/>
                <scope line="550"/>
            </method>
            <javadoc line="555">
                Determines the minimum span for this view along an
                  axis.                
                <param>
                    axis may be either <code>View.X_AXIS</code>
                      or <code>View.Y_AXIS</code>                    
                </param>
                <return>
                    the span the view would like to be rendered into >= 0;
                      typically the view is told to render into the span
                      that is returned, although there is no guarantee;
                      the parent may choose to resize or break the view                    
                </return>
                <exception>
                    IllegalArgumentException for an invalid axis type                    
                </exception>
            </javadoc>
            <method name="getMinimumSpan" type="float" line="567">
                <params>
                    <param name="axis" type="int"/>
                </params>
                <declaration name="marginSpan" type="float" line="569"/>
                <scope line="571"/>
                <scope line="573"/>
            </method>
            <javadoc line="578">
                Determines the maximum span for this view along an
                  axis.                
                <param>
                    axis may be either <code>View.X_AXIS</code>
                      or <code>View.Y_AXIS</code>                    
                </param>
                <return>
                    the span the view would like to be rendered into >= 0;
                      typically the view is told to render into the span
                      that is returned, although there is no guarantee;
                      the parent may choose to resize or break the view                    
                </return>
                <exception>
                    IllegalArgumentException for an invalid axis type                    
                </exception>
            </javadoc>
            <method name="getMaximumSpan" type="float" line="590">
                <params>
                    <param name="axis" type="int"/>
                </params>
                <declaration name="marginSpan" type="float" line="592"/>
                <scope line="594"/>
                <scope line="596"/>
            </method>
            <javadoc line="603">
                Are the allocations for the children still
                  valid?                
                <return>
                    true if allocations still valid                    
                </return>
            </javadoc>
            <method name="isAllocationValid" type="boolean" line="609"/>
            <javadoc line="613">
                Determines if a point falls before an allocated region.                
                <param>
                    x the X coordinate >= 0                    
                </param>
                <param>
                    y the Y coordinate >= 0                    
                </param>
                <param>
                    innerAlloc the allocated region; this is the area
                      inside of the insets                    
                </param>
                <return>
                    true if the point lies before the region else false                    
                </return>
            </javadoc>
            <method name="isBefore" type="boolean" line="622">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="innerAlloc" type="Rectangle"/>
                </params>
                <scope line="623"/>
                <scope line="625"/>
            </method>
            <javadoc line="630">
                Determines if a point falls after an allocated region.                
                <param>
                    x the X coordinate >= 0                    
                </param>
                <param>
                    y the Y coordinate >= 0                    
                </param>
                <param>
                    innerAlloc the allocated region; this is the area
                      inside of the insets                    
                </param>
                <return>
                    true if the point lies after the region else false                    
                </return>
            </javadoc>
            <method name="isAfter" type="boolean" line="639">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="innerAlloc" type="Rectangle"/>
                </params>
                <scope line="640"/>
                <scope line="642"/>
            </method>
            <javadoc line="647">
                Fetches the child view at the given coordinates.                
                <param>
                    x the X coordinate >= 0                    
                </param>
                <param>
                    y the Y coordinate >= 0                    
                </param>
                <param>
                    alloc the parents inner allocation on entry, which should
                      be changed to the childs allocation on exit                    
                </param>
                <return>
                    the view                    
                </return>
            </javadoc>
            <method name="getViewAtPoint" type="View" line="656">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="alloc" type="Rectangle"/>
                </params>
                <declaration name="n" type="int" line="657"/>
                <scope line="658">
                    <scope line="659"/>
                    <scope line="663">
                        <scope line="664"/>
                    </scope>
                </scope>
                <scope line="671">
                    <scope line="672"/>
                    <scope line="676">
                        <scope line="677"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="687">
                Allocates a region for a child view.                
                <param>
                    index the index of the child view to
                      allocate, >= 0 && < getViewCount()                    
                </param>
                <param>
                    alloc the allocated region                    
                </param>
            </javadoc>
            <method name="childAllocation" type="void" line="694">
                <params>
                    <param name="index" type="int"/>
                    <param name="alloc" type="Rectangle"/>
                </params>
            </method>
            <javadoc line="701">
                Perform layout on the box                
                <param>
                    width the width (inside of the insets) >= 0                    
                </param>
                <param>
                    height the height (inside of the insets) >= 0                    
                </param>
            </javadoc>
            <method name="layout" type="void" line="707">
                <params>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <javadoc line="712">
                Returns the current width of the box.  This is the width that
                  it was last allocated.                
                <return>
                    the current width of the box                    
                </return>
            </javadoc>
            <method name="getWidth" type="int" line="717">
                <declaration name="span" type="int" line="718"/>
                <scope line="719"/>
                <scope line="721"/>
            </method>
            <javadoc line="728">
                Returns the current height of the box.  This is the height that
                  it was last allocated.                
                <return>
                    the current height of the box                    
                </return>
            </javadoc>
            <method name="getHeight" type="int" line="733">
                <declaration name="span" type="int" line="734"/>
                <scope line="735"/>
                <scope line="737"/>
            </method>
            <javadoc line="744">
                Performs layout for the major axis of the box (i.e. the
                  axis that it represents). The results of the layout (the
                  offset and span for each children) are placed in the given
                  arrays which represent the allocations to the children
                  along the major axis.                
                <param>
                    targetSpan the total span given to the view, which
                      would be used to layout the children                    
                </param>
                <param>
                    axis the axis being layed out                    
                </param>
                <param>
                    offsets the offsets from the origin of the view for
                      each of the child views; this is a return value and is
                      filled in by the implementation of this method                    
                </param>
                <param>
                    spans the span of each child view; this is a return
                      value and is filled in by the implementation of this method                    
                </param>
            </javadoc>
            <method name="layoutMajorAxis" type="void" line="760">
                <params>
                    <param name="targetSpan" type="int"/>
                    <param name="axis" type="int"/>
                    <param name="offsets" type="int[]"/>
                    <param name="spans" type="int[]"/>
                </params>
                <comment line="761">
                    first pass, calculate the preferred sizes
                     and the flexibility to adjust the sizes.                    
                </comment>
                <comment line="773">
                    Second pass, expand or contract by as much as possible to reach
                     the target span.                    
                </comment>
                <comment line="778">
                    determine the adjustment to be made                    
                </comment>
                <comment line="805">
                    make the adjustments                    
                </comment>
                <declaration name="preferred" type="long" line="765"/>
                <declaration name="n" type="int" line="766"/>
                <scope line="767">
                    <declaration name="v" type="View" line="768"/>
                </scope>
                <declaration name="desiredAdjustment" type="long" line="779"/>
                <declaration name="adjustmentFactor" type="float" line="780"/>
                <declaration name="diffs" type="int[]" line="781"/>
                <scope line="783">
                    <declaration name="totalSpan" type="long" line="784"/>
                    <scope line="786">
                        <declaration name="v" type="View" line="787"/>
                        <declaration name="tmp" type="int" line="788"/>
                        <scope line="789"/>
                        <scope line="792"/>
                    </scope>
                    <declaration name="maximumAdjustment" type="float" line="799"/>
                </scope>
                <declaration name="totalOffset" type="int" line="806"/>
                <scope line="807">
                    <scope line="809">
                        <declaration name="adjF" type="float" line="810"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="817">
                Performs layout for the minor axis of the box (i.e. the
                  axis orthoginal to the axis that it represents). The results
                  of the layout (the offset and span for each children) are
                  placed in the given arrays which represent the allocations to
                  the children along the minor axis.                
                <param>
                    targetSpan the total span given to the view, which
                      would be used to layout the children                    
                </param>
                <param>
                    axis the axis being layed out                    
                </param>
                <param>
                    offsets the offsets from the origin of the view for
                      each of the child views; this is a return value and is
                      filled in by the implementation of this method                    
                </param>
                <param>
                    spans the span of each child view; this is a return
                      value and is filled in by the implementation of this method                    
                </param>
            </javadoc>
            <method name="layoutMinorAxis" type="void" line="833">
                <params>
                    <param name="targetSpan" type="int"/>
                    <param name="axis" type="int"/>
                    <param name="offsets" type="int[]"/>
                    <param name="spans" type="int[]"/>
                </params>
                <comment line="839">
                    can&apos;t make the child this wide, align it                    
                </comment>
                <comment line="844">
                    make it the target width, or as small as it can get.                    
                </comment>
                <declaration name="n" type="int" line="834"/>
                <scope line="835">
                    <declaration name="v" type="View" line="836"/>
                    <declaration name="max" type="int" line="837"/>
                    <scope line="838">
                        <declaration name="align" type="float" line="840"/>
                    </scope>
                    <scope line="843">
                        <declaration name="min" type="int" line="845"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="852">
                Calculates the size requirements for the major axis
                  &lt;code&gt;axis&lt;/code&gt;.                
                <param>
                    axis the axis being studied                    
                </param>
                <param>
                    r the <code>SizeRequirements</code> object;
                      if <code>null</code> one will be created                    
                </param>
                <return>
                    the newly initialized <code>SizeRequirements</code> object                    
                </return>
                <see>
                    javax.swing.SizeRequirements                    
                </see>
            </javadoc>
            <method name="calculateMajorAxisRequirements" type="SizeRequirements" line="862">
                <params>
                    <param name="axis" type="int"/>
                    <param name="r" type="SizeRequirements"/>
                </params>
                <comment line="863">
                    calculate tiled request                    
                </comment>
                <declaration name="min" type="float" line="864"/>
                <declaration name="pref" type="float" line="865"/>
                <declaration name="max" type="float" line="866"/>
                <declaration name="n" type="int" line="868"/>
                <scope line="869">
                    <declaration name="v" type="View" line="870"/>
                </scope>
                <scope line="876"/>
            </method>
            <javadoc line="886">
                Calculates the size requirements for the minor axis
                  &lt;code&gt;axis&lt;/code&gt;.                
                <param>
                    axis the axis being studied                    
                </param>
                <param>
                    r the <code>SizeRequirements</code> object;
                      if <code>null</code> one will be created                    
                </param>
                <return>
                    the newly initialized <code>SizeRequirements</code> object                    
                </return>
                <see>
                    javax.swing.SizeRequirements                    
                </see>
            </javadoc>
            <method name="calculateMinorAxisRequirements" type="SizeRequirements" line="896">
                <params>
                    <param name="axis" type="int"/>
                    <param name="r" type="SizeRequirements"/>
                </params>
                <declaration name="min" type="int" line="897"/>
                <declaration name="pref" type="long" line="898"/>
                <declaration name="max" type="int" line="899"/>
                <declaration name="n" type="int" line="900"/>
                <scope line="901">
                    <declaration name="v" type="View" line="902"/>
                </scope>
                <scope line="908"/>
            </method>
            <javadoc line="918">
                Checks the request cache and update if needed.                
                <param>
                    axis the axis being studied                    
                </param>
                <exception>
                    IllegalArgumentException if <code>axis</code> is
                      neither <code>View.X_AXIS</code> nor <code>View.Y_AXIS</code>                    
                </exception>
            </javadoc>
            <method name="checkRequests" type="void" line="924">
                <params>
                    <param name="axis" type="int"/>
                </params>
                <scope line="925"/>
                <scope line="928">
                    <scope line="929"/>
                </scope>
                <scope line="934"/>
            </method>
            <javadoc line="940">
                Computes the location and extent of each child view
                  in this &lt;code&gt;BoxView&lt;/code&gt; given the &lt;code&gt;targetSpan&lt;/code&gt;,
                  which is the width (or height) of the region we have to
                  work with.                
                <param>
                    targetSpan the total span given to the view, which
                      would be used to layout the children                    
                </param>
                <param>
                    axis the axis being studied, either
                      <code>View.X_AXIS</code> or <code>View.Y_AXIS</code>                    
                </param>
                <param>
                    offsets an empty array filled by this method with
                      values specifying the location  of each child view                    
                </param>
                <param>
                    spans  an empty array filled by this method with
                      values specifying the extent of each child view                    
                </param>
            </javadoc>
            <method name="baselineLayout" type="void" line="955">
                <params>
                    <param name="targetSpan" type="int"/>
                    <param name="axis" type="int"/>
                    <param name="offsets" type="int[]"/>
                    <param name="spans" type="int[]"/>
                </params>
                <comment line="967">
                    if resizable then resize to the best fit                    
                </comment>
                <comment line="969">
                    the smallest span possible                    
                </comment>
                <comment line="971">
                    the largest span possible                    
                </comment>
                <comment line="975">
                    if the alignment is 0 then we need to fit into the descent                    
                </comment>
                <comment line="978">
                    if the alignment is 1 then we need to fit into the ascent                    
                </comment>
                <comment line="981">
                    figure out the span that we must fit into                    
                </comment>
                <comment line="984">
                    fit into the calculated span                    
                </comment>
                <comment line="988">
                    otherwise use the preferred spans                    
                </comment>
                <declaration name="totalAscent" type="int" line="956"/>
                <declaration name="totalDescent" type="int" line="957"/>
                <declaration name="n" type="int" line="959"/>
                <scope line="961">
                    <declaration name="v" type="View" line="962"/>
                    <declaration name="align" type="float" line="963"/>
                    <declaration name="viewSpan" type="float" line="964"/>
                    <scope line="966">
                        <declaration name="minSpan" type="float" line="970"/>
                        <declaration name="maxSpan" type="float" line="972"/>
                        <scope line="974"/>
                        <scope line="977"/>
                        <scope line="980">
                            <declaration name="fitSpan" type="float" line="982"/>
                        </scope>
                    </scope>
                    <scope line="987"/>
                </scope>
            </method>
            <javadoc line="997">
                Calculates the size requirements for this &lt;code&gt;BoxView&lt;/code&gt;
                  by examining the size of each child view.                
                <param>
                    axis the axis being studied                    
                </param>
                <param>
                    r the <code>SizeRequirements</code> object;
                      if <code>null</code> one will be created                    
                </param>
                <return>
                    the newly initialized <code>SizeRequirements</code> object                    
                </return>
            </javadoc>
            <method name="baselineRequirements" type="SizeRequirements" line="1006">
                <params>
                    <param name="axis" type="int"/>
                    <param name="r" type="SizeRequirements"/>
                </params>
                <comment line="1018">
                    loop through all children calculating the max of all their ascents and                    
                </comment>
                <comment line="1019">
                    descents at minimum, preferred, and maximum sizes                    
                </comment>
                <comment line="1027">
                    find the maximum of the preferred ascents and descents                    
                </comment>
                <comment line="1035">
                    if the view is resizable then do the same for the minimum and                    
                </comment>
                <comment line="1036">
                    maximum ascents and descents                    
                </comment>
                <comment line="1049">
                    otherwise use the preferred                    
                </comment>
                <comment line="1057">
                    we now have an overall preferred, minimum, and maximum ascent and descent                    
                </comment>
                <comment line="1059">
                    calculate the preferred span as the sum of the preferred ascent and preferred descent                    
                </comment>
                <comment line="1063">
                    calculate the preferred alignment as the preferred ascent divided by the preferred span                    
                </comment>
                <comment line="1070">
                    if the preferred alignment is 0 then the minimum and maximum spans are simply                    
                </comment>
                <comment line="1071">
                    the minimum and maximum descents since there&apos;s nothing above the baseline                    
                </comment>
                <comment line="1075">
                    if the preferred alignment is 1 then the minimum and maximum spans are simply                    
                </comment>
                <comment line="1076">
                    the minimum and maximum ascents since there&apos;s nothing below the baseline                    
                </comment>
                <comment line="1080">
                    we want to honor the preferred alignment so we calculate two possible minimum                    
                </comment>
                <comment line="1081">
                    span values using 1) the minimum ascent and the alignment, and 2) the minimum                    
                </comment>
                <comment line="1082">
                    descent and the alignment. We&apos;ll choose the larger of these two numbers.                    
                </comment>
                <comment line="1085">
                    a similar calculation is made for the maximum but we choose the smaller number.                    
                </comment>
                <declaration name="totalAscent" type="SizeRequirements" line="1007"/>
                <declaration name="totalDescent" type="SizeRequirements" line="1008"/>
                <scope line="1010"/>
                <declaration name="n" type="int" line="1016"/>
                <scope line="1020">
                    <declaration name="v" type="View" line="1021"/>
                    <declaration name="align" type="float" line="1022"/>
                    <declaration name="span" type="float" line="1023"/>
                    <declaration name="ascent" type="int" line="1024"/>
                    <declaration name="descent" type="int" line="1025"/>
                    <scope line="1034"/>
                    <scope line="1048"/>
                </scope>
                <scope line="1064"/>
                <scope line="1069"/>
                <scope line="1074"/>
                <scope line="1079"/>
            </method>
            <javadoc line="1093">
                Fetches the offset of a particular child&apos;s current layout.                
                <param>
                    axis the axis being studied                    
                </param>
                <param>
                    childIndex the index of the requested child                    
                </param>
                <return>
                    the offset (location) for the specified child                    
                </return>
            </javadoc>
            <method name="getOffset" type="int" line="1099">
                <params>
                    <param name="axis" type="int"/>
                    <param name="childIndex" type="int"/>
                </params>
                <declaration name="offsets" type="int[]" line="1100"/>
            </method>
            <javadoc line="1104">
                Fetches the span of a particular childs current layout.                
                <param>
                    axis the axis being studied                    
                </param>
                <param>
                    childIndex the index of the requested child                    
                </param>
                <return>
                    the span (width or height) of the specified child                    
                </return>
            </javadoc>
            <method name="getSpan" type="int" line="1110">
                <params>
                    <param name="axis" type="int"/>
                    <param name="childIndex" type="int"/>
                </params>
                <declaration name="spans" type="int[]" line="1111"/>
            </method>
            <javadoc line="1115">
                Determines in which direction the next view lays.
                  Consider the View at index n. Typically the &lt;code&gt;View&lt;/code&gt;s
                  are layed out from left to right, so that the &lt;code&gt;View&lt;/code&gt;
                  to the EAST will be at index n + 1, and the &lt;code&gt;View&lt;/code&gt;
                  to the WEST will be at index n - 1. In certain situations,
                  such as with bidirectional text, it is possible
                  that the &lt;code&gt;View&lt;/code&gt; to EAST is not at index n + 1,
                  but rather at index n - 1, or that the &lt;code&gt;View&lt;/code&gt;
                  to the WEST is not at index n - 1, but index n + 1.
                  In this case this method would return true,
                  indicating the &lt;code&gt;View&lt;/code&gt;s are layed out in
                  descending order. Otherwise the method would return false
                  indicating the &lt;code&gt;View&lt;/code&gt;s are layed out in ascending order.
                  &lt;p&gt;
                  If the receiver is laying its &lt;code&gt;View&lt;/code&gt;s along the
                  &lt;code&gt;Y_AXIS&lt;/code&gt;, this will will return the value from
                  invoking the same method on the &lt;code&gt;View&lt;/code&gt;
                  responsible for rendering &lt;code&gt;position&lt;/code&gt; and
                  &lt;code&gt;bias&lt;/code&gt;. Otherwise this will return false.                
                <param>
                    position position into the model                    
                </param>
                <param>
                    bias either <code>Position.Bias.Forward</code> or
                      <code>Position.Bias.Backward</code>                    
                </param>
                <return>
                    true if the <code>View</code>s surrounding the
                      <code>View</code> responding for rendering
                      <code>position</code> and <code>bias</code>
                      are layed out in descending order; otherwise false                    
                </return>
            </javadoc>
            <method name="flipEastAndWestAtEnds" type="boolean" line="1145">
                <params>
                    <param name="position" type="int"/>
                    <param name="bias" type="Position.Bias"/>
                </params>
                <scope line="1146">
                    <declaration name="testPos" type="int" line="1147"/>
                    <declaration name="index" type="int" line="1149"/>
                    <scope line="1150">
                        <declaration name="v" type="View" line="1151"/>
                        <scope line="1152"/>
                    </scope>
                </scope>
            </method>
            <declaration name="majorAxis" type="int" line="1163"/>
            <declaration name="majorSpan" type="int" line="1165"/>
            <declaration name="minorSpan" type="int" line="1166"/>
            <declaration name="majorReqValid" type="boolean" line="1171"/>
            <declaration name="minorReqValid" type="boolean" line="1172"/>
            <declaration name="majorRequest" type="SizeRequirements" line="1173"/>
            <declaration name="minorRequest" type="SizeRequirements" line="1174"/>
            <declaration name="majorAllocValid" type="boolean" line="1179"/>
            <declaration name="majorOffsets" type="int[]" line="1180"/>
            <declaration name="majorSpans" type="int[]" line="1181"/>
            <declaration name="minorAllocValid" type="boolean" line="1182"/>
            <declaration name="minorOffsets" type="int[]" line="1183"/>
            <declaration name="minorSpans" type="int[]" line="1184"/>
            <declaration name="tempRect" type="Rectangle" line="1186"/>
            <javadoc line="1186">
                used in paint.                
            </javadoc>
        </class>
    </source>