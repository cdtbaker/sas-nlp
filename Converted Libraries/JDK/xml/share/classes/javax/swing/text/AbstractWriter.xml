<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text">
        <import package="java.io.Writer"/>
        <import package="java.io.IOException"/>
        <import package="java.util.Enumeration"/>
        <class name="AbstractWriter" line="5">
            <javadoc line="5">
                AbstractWriter is an abstract class that actually
                  does the work of writing out the element tree
                  including the attributes.  In terms of how much is
                  written out per line, the writer defaults to 100.
                  But this value can be set by subclasses.                
                <author>
                    Sunita Mani                    
                </author>
            </javadoc>
            <declaration name="it" type="ElementIterator" line="14"/>
            <declaration name="out" type="Writer" line="15"/>
            <declaration name="indentLevel" type="int" line="16"/>
            <declaration name="indentSpace" type="int" line="17"/>
            <declaration name="doc" type="Document" line="18"/>
            <declaration name="maxLineLength" type="int" line="19"/>
            <declaration name="currLength" type="int" line="20"/>
            <declaration name="startOffset" type="int" line="21"/>
            <declaration name="endOffset" type="int" line="22"/>
            <declaration name="offsetIndent" type="int" line="23"/>
            <declaration name="lineSeparator" type="String" line="24"/>
            <javadoc line="24">
                String used for end of line. If the Document has the property
                  EndOfLineStringProperty, it will be used for newlines. Otherwise
                  the System property line.separator will be used. The line separator
                  can also be set.                
            </javadoc>
            <declaration name="canWrapLines" type="boolean" line="31"/>
            <javadoc line="31">
                True indicates that when writing, the line can be split, false
                  indicates that even if the line is &gt; than max line length it should
                  not be split.                
            </javadoc>
            <declaration name="isLineEmpty" type="boolean" line="37"/>
            <javadoc line="37">
                True while the current line is empty. This will remain true after
                  indenting.                
            </javadoc>
            <declaration name="indentChars" type="char[]" line="42"/>
            <javadoc line="42">
                Used when indenting. Will contain the spaces.                
            </javadoc>
            <declaration name="tempChars" type="char[]" line="46"/>
            <javadoc line="46">
                Used when writing out a string.                
            </javadoc>
            <declaration name="newlineChars" type="char[]" line="50"/>
            <javadoc line="50">
                This is used in &lt;code&gt;writeLineSeparator&lt;/code&gt; instead of
                  tempChars. If tempChars were used it would mean write couldn&apos;t invoke
                  &lt;code&gt;writeLineSeparator&lt;/code&gt; as it might have been passed
                  tempChars.                
            </javadoc>
            <declaration name="segment" type="Segment" line="57"/>
            <javadoc line="57">
                Used for writing text.                
            </javadoc>
            <declaration name="NEWLINE" type="char" line="61"/>
            <javadoc line="61">
                How the text packages models newlines.                
                <see>
                    #getLineSeparator                    
                </see>
            </javadoc>
            <javadoc line="66">
                Creates a new AbstractWriter.
                  Initializes the ElementIterator with the default
                  root of the document.                
                <param>
                    w a Writer.                    
                </param>
                <param>
                    doc a Document                    
                </param>
            </javadoc>
            <method name="AbstractWriter" type="constructor" line="73">
                <params>
                    <param name="w" type="Writer"/>
                    <param name="doc" type="Document"/>
                </params>
            </method>
            <javadoc line="76">
                Creates a new AbstractWriter.
                  Initializes the ElementIterator with the
                  element passed in.                
                <param>
                    w a Writer                    
                </param>
                <param>
                    doc an Element                    
                </param>
                <param>
                    pos The location in the document to fetch the
                      content.                    
                </param>
                <param>
                    len The amount to write out.                    
                </param>
            </javadoc>
            <method name="AbstractWriter" type="constructor" line="86">
                <params>
                    <param name="w" type="Writer"/>
                    <param name="doc" type="Document"/>
                    <param name="pos" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <declaration name="docNewline" type="Object" line="92"/>
                <scope line="93"/>
                <scope line="96">
                    <declaration name="newline" type="String" line="97"/>
                    <scope line="98"/>
                    <scope line="101"/>
                    <scope line="103"/>
                </scope>
            </method>
            <javadoc line="110">
                Creates a new AbstractWriter.
                  Initializes the ElementIterator with the
                  element passed in.                
                <param>
                    w a Writer                    
                </param>
                <param>
                    root an Element                    
                </param>
            </javadoc>
            <method name="AbstractWriter" type="constructor" line="117">
                <params>
                    <param name="w" type="Writer"/>
                    <param name="root" type="Element"/>
                </params>
            </method>
            <javadoc line="120">
                Creates a new AbstractWriter.
                  Initializes the ElementIterator with the
                  element passed in.                
                <param>
                    w a Writer                    
                </param>
                <param>
                    root an Element                    
                </param>
                <param>
                    pos The location in the document to fetch the
                      content.                    
                </param>
                <param>
                    len The amount to write out.                    
                </param>
            </javadoc>
            <method name="AbstractWriter" type="constructor" line="130">
                <params>
                    <param name="w" type="Writer"/>
                    <param name="root" type="Element"/>
                    <param name="pos" type="int"/>
                    <param name="len" type="int"/>
                </params>
            </method>
            <javadoc line="138">
                Returns the first offset to be output.                
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getStartOffset" type="int" line="142"/>
            <javadoc line="145">
                Returns the last offset to be output.                
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getEndOffset" type="int" line="149"/>
            <javadoc line="152">
                Fetches the ElementIterator.                
                <return>
                    the ElementIterator.                    
                </return>
            </javadoc>
            <method name="getElementIterator" type="ElementIterator" line="156"/>
            <javadoc line="159">
                Returns the Writer that is used to output the content.                
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getWriter" type="Writer" line="163"/>
            <javadoc line="166">
                Fetches the document.                
                <return>
                    the Document.                    
                </return>
            </javadoc>
            <method name="getDocument" type="Document" line="170"/>
            <javadoc line="173">
                This method determines whether the current element
                  is in the range specified.  When no range is specified,
                  the range is initialized to be the entire document.
                  inRange() returns true if the range specified intersects
                  with the element&apos;s range.                
                <param>
                    next an Element.                    
                </param>
                <return>
                    boolean that indicates whether the element
                      is in the range.                    
                </return>
            </javadoc>
            <method name="inRange" type="boolean" line="183">
                <params>
                    <param name="next" type="Element"/>
                </params>
                <declaration name="startOffset" type="int" line="184"/>
                <declaration name="endOffset" type="int" line="185"/>
                <scope line="186"/>
            </method>
            <method name="write" type="void" line="191"/>
            <javadoc line="191">
                This abstract method needs to be implemented
                  by subclasses.  Its responsibility is to
                  iterate over the elements and use the write()
                  methods to generate output in the desired format.                
            </javadoc>
            <javadoc line="198">
                Returns the text associated with the element.
                  The assumption here is that the element is a
                  leaf element.  Throws a BadLocationException
                  when encountered.                
                <param>
                    elem an <code>Element</code>                    
                </param>
                <exception>
                    BadLocationException if pos represents an invalid
                      location within the document                    
                </exception>
                <return>
                    the text as a <code>String</code>                    
                </return>
            </javadoc>
            <method name="getText" type="String" line="208">
                <params>
                    <param name="elem" type="Element"/>
                </params>
            </method>
            <javadoc line="211">
                Writes out text.  If a range is specified when the constructor
                  is invoked, then only the appropriate range of text is written
                  out.                
                <param>
                    elem an Element.                    
                </param>
                <exception>
                    IOException on any I/O error                    
                </exception>
                <exception>
                    BadLocationException if pos represents an invalid
                      location within the document.                    
                </exception>
            </javadoc>
            <method name="text" type="void" line="220">
                <params>
                    <param name="elem" type="Element"/>
                </params>
                <declaration name="start" type="int" line="221"/>
                <declaration name="end" type="int" line="222"/>
                <scope line="223">
                    <scope line="224"/>
                    <scope line="228"/>
                </scope>
            </method>
            <javadoc line="233">
                Enables subclasses to set the number of characters they
                  want written per line.   The default is 100.                
                <param>
                    l the maximum line length.                    
                </param>
            </javadoc>
            <method name="setLineLength" type="void" line="238">
                <params>
                    <param name="l" type="int"/>
                </params>
            </method>
            <javadoc line="241">
                Returns the maximum line length.                
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getLineLength" type="int" line="245"/>
            <javadoc line="248">
                Sets the current line length.                
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="setCurrentLineLength" type="void" line="252">
                <params>
                    <param name="length" type="int"/>
                </params>
            </method>
            <javadoc line="256">
                Returns the current line length.                
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getCurrentLineLength" type="int" line="260"/>
            <javadoc line="263">
                Returns true if the current line should be considered empty. This
                  is true when &lt;code&gt;getCurrentLineLength&lt;/code&gt; == 0 ||
                  &lt;code&gt;indent&lt;/code&gt; has been invoked on an empty line.                
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="isLineEmpty" type="boolean" line="269"/>
            <javadoc line="272">
                Sets whether or not lines can be wrapped. This can be toggled
                  during the writing of lines. For example, outputting HTML might
                  set this to false when outputting a quoted string.                
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="setCanWrapLines" type="void" line="278">
                <params>
                    <param name="newValue" type="boolean"/>
                </params>
            </method>
            <javadoc line="281">
                Returns whether or not the lines can be wrapped. If this is false
                  no lineSeparator&apos;s will be output.                
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getCanWrapLines" type="boolean" line="286"/>
            <javadoc line="289">
                Enables subclasses to specify how many spaces an indent
                  maps to. When indentation takes place, the indent level
                  is multiplied by this mapping.  The default is 2.                
                <param>
                    space an int representing the space to indent mapping.                    
                </param>
            </javadoc>
            <method name="setIndentSpace" type="void" line="295">
                <params>
                    <param name="space" type="int"/>
                </params>
            </method>
            <javadoc line="298">
                Returns the amount of space to indent.                
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getIndentSpace" type="int" line="302"/>
            <javadoc line="305">
                Sets the String used to reprsent newlines. This is initialized
                  in the constructor from either the Document, or the System property
                  line.separator.                
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="setLineSeparator" type="void" line="311">
                <params>
                    <param name="value" type="String"/>
                </params>
            </method>
            <javadoc line="314">
                Returns the string used to represent newlines.                
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getLineSeparator" type="String" line="318"/>
            <javadoc line="321">
                Increments the indent level. If indenting would cause
                  &lt;code&gt;getIndentSpace()&lt;/code&gt; &lt;code&gt;getIndentLevel()&lt;/code&gt; to be &gt;
                  than &lt;code&gt;getLineLength()&lt;/code&gt; this will not cause an indent.                
            </javadoc>
            <method name="incrIndent" type="void" line="326">
                <scope line="327"/>
                <scope line="330">
                    <scope line="331"/>
                </scope>
            </method>
            <javadoc line="337">
                Decrements the indent level.                
            </javadoc>
            <method name="decrIndent" type="void" line="340">
                <scope line="341"/>
                <scope line="344"/>
            </method>
            <javadoc line="348">
                Returns the current indentation level. That is, the number of times
                  &lt;code&gt;incrIndent&lt;/code&gt; has been invoked minus the number of times
                  &lt;code&gt;decrIndent&lt;/code&gt; has been invoked.                
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getIndentLevel" type="int" line="354"/>
            <javadoc line="357">
                Does indentation. The number of spaces written
                  out is indent level times the space to map mapping. If the current
                  line is empty, this will not make it so that the current line is
                  still considered empty.                
                <exception>
                    IOException on any I/O error                    
                </exception>
            </javadoc>
            <method name="indent" type="void" line="364">
                <declaration name="max" type="int" line="365"/>
                <scope line="366">
                    <scope line="368"/>
                </scope>
                <declaration name="length" type="int" line="372"/>
                <declaration name="wasEmpty" type="boolean" line="373"/>
                <scope line="375"/>
            </method>
            <javadoc line="379">
                Writes out a character. This is implemented to invoke
                  the &lt;code&gt;write&lt;/code&gt; method that takes a char[].                
                <param>
                    ch a char.                    
                </param>
                <exception>
                    IOException on any I/O error                    
                </exception>
            </javadoc>
            <method name="write" type="void" line="385">
                <params>
                    <param name="ch" type="char"/>
                </params>
                <scope line="386"/>
            </method>
            <javadoc line="392">
                Writes out a string. This is implemented to invoke the
                  &lt;code&gt;write&lt;/code&gt; method that takes a char[].                
                <param>
                    content a String.                    
                </param>
                <exception>
                    IOException on any I/O error                    
                </exception>
            </javadoc>
            <method name="write" type="void" line="398">
                <params>
                    <param name="content" type="String"/>
                </params>
                <scope line="399"/>
                <declaration name="size" type="int" line="402"/>
                <scope line="403"/>
            </method>
            <javadoc line="409">
                Writes the line separator. This invokes &lt;code&gt;output&lt;/code&gt; directly
                  as well as setting the &lt;code&gt;lineLength&lt;/code&gt; to 0.                
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="writeLineSeparator" type="void" line="414">
                <declaration name="newline" type="String" line="415"/>
                <declaration name="length" type="int" line="416"/>
                <scope line="417"/>
            </method>
            <javadoc line="424">
                All write methods call into this one. If &lt;code&gt;getCanWrapLines()&lt;/code&gt;
                  returns false, this will call &lt;code&gt;output&lt;/code&gt; with each sequence
                  of &lt;code&gt;chars&lt;/code&gt; that doesn&apos;t contain a NEWLINE, followed
                  by a call to &lt;code&gt;writeLineSeparator&lt;/code&gt;. On the other hand,
                  if &lt;code&gt;getCanWrapLines()&lt;/code&gt; returns true, this will split the
                  string, as necessary, so &lt;code&gt;getLineLength&lt;/code&gt; is honored.
                  The only exception is if the current string contains no whitespace,
                  and won&apos;t fit in which case the line length will exceed
                  &lt;code&gt;getLineLength&lt;/code&gt;.                
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="write" type="void" line="436">
                <params>
                    <param name="chars" type="char[]"/>
                    <param name="startIndex" type="int"/>
                    <param name="length" type="int"/>
                </params>
                <scope line="437">
                    <declaration name="lastIndex" type="int" line="438"/>
                    <declaration name="endIndex" type="int" line="439"/>
                    <declaration name="newlineIndex" type="int" line="440"/>
                    <scope line="441">
                        <scope line="442"/>
                    </scope>
                    <scope line="449"/>
                </scope>
                <scope line="453">
                    <declaration name="lastIndex" type="int" line="454"/>
                    <declaration name="endIndex" type="int" line="455"/>
                    <declaration name="lineLength" type="int" line="456"/>
                    <declaration name="maxLength" type="int" line="457"/>
                    <scope line="458">
                        <declaration name="newlineIndex" type="int" line="459"/>
                        <declaration name="needsNewline" type="boolean" line="460"/>
                        <declaration name="forceNewLine" type="boolean" line="461"/>
                        <scope line="463">
                            <scope line="464"/>
                        </scope>
                        <scope line="470">
                            <scope line="471"/>
                        </scope>
                        <scope line="476">
                            <declaration name="breakPoint" type="int" line="477"/>
                            <declaration name="maxBreak" type="int" line="478"/>
                            <declaration name="counter" type="int" line="479"/>
                            <scope line="480">
                                <scope line="481"/>
                            </scope>
                            <scope line="486"/>
                            <scope line="492">
                                <scope line="495">
                                    <scope line="496"/>
                                </scope>
                                <scope line="502"/>
                                <scope line="506">
                                    <scope line="508"/>
                                    <scope line="512"/>
                                </scope>
                            </scope>
                        </scope>
                        <scope line="520">
                            <scope line="522"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="529">
                Writes out the set of attributes as &quot; &lt;name&gt;=&lt;value&gt;&quot;
                  pairs. It throws an IOException when encountered.                
                <param>
                    attr an AttributeSet.                    
                </param>
                <exception>
                    IOException on any I/O error                    
                </exception>
            </javadoc>
            <method name="writeAttributes" type="void" line="535">
                <params>
                    <param name="attr" type="AttributeSet"/>
                </params>
                <declaration name="names" type="Enumeration" line="536"/>
                <scope line="537">
                    <declaration name="name" type="Object" line="538"/>
                </scope>
            </method>
            <javadoc line="542">
                The last stop in writing out content. All the write methods eventually
                  make it to this method, which invokes &lt;code&gt;write&lt;/code&gt; on the
                  Writer.
                  &lt;p&gt;This method also updates the line length based on
                  &lt;code&gt;length&lt;/code&gt;. If this is invoked to output a newline, the
                  current line length will need to be reset as will no longer be
                  valid. If it is up to the caller to do this. Use
                  &lt;code&gt;writeLineSeparator&lt;/code&gt; to write out a newline, which will
                  property update the current line length.                
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="output" type="void" line="554">
                <params>
                    <param name="content" type="char[]"/>
                    <param name="start" type="int"/>
                    <param name="length" type="int"/>
                </params>
            </method>
            <javadoc line="558">
                Support method to locate an occurence of a particular character.                
            </javadoc>
            <method name="indexOf" type="int" line="561">
                <params>
                    <param name="chars" type="char[]"/>
                    <param name="sChar" type="char"/>
                    <param name="startIndex" type="int"/>
                    <param name="endIndex" type="int"/>
                </params>
                <scope line="562">
                    <scope line="563"/>
                </scope>
            </method>
        </class>
    </source>