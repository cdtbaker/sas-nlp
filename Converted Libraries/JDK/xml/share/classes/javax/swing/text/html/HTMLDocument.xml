<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text.html">
        <import package="java.awt.font.TextAttribute"/>
        <import package="java.util"/>
        <import package="java.net.URL"/>
        <import package="java.net.MalformedURLException"/>
        <import package="java.io"/>
        <import package="javax.swing"/>
        <import package="javax.swing.event"/>
        <import package="javax.swing.text"/>
        <import package="javax.swing.undo"/>
        <import package="sun.swing.SwingUtilities2"/>
        <import package="sun.swing.SwingUtilities2.IMPLIED_CR"/>
        <class name="HTMLDocument" line="13">
            <extends class="DefaultStyledDocument"/>
            <javadoc line="13">
                A document that models HTML.  The purpose of this model is to
                  support both browsing and editing.  As a result, the structure
                  described by an HTML document is not exactly replicated by default.
                  The element structure that is modeled by default, is built by the
                  class &lt;code&gt;HTMLDocument.HTMLReader&lt;/code&gt;, which implements the
                  &lt;code&gt;HTMLEditorKit.ParserCallback&lt;/code&gt; protocol that the parser
                  expects.  To change the structure one can subclass
                  &lt;code&gt;HTMLReader&lt;/code&gt;, and reimplement the method {@link #getReader(int)} to return the new reader implementation.  The
                  documentation for &lt;code&gt;HTMLReader&lt;/code&gt; should be consulted for
                  the details of the default structure created.  The intent is that
                  the document be non-lossy (although reproducing the HTML format may
                  result in a different format).
                  &lt;p&gt;The document models only HTML, and makes no attempt to store
                  view attributes in it.  The elements are identified by the
                  &lt;code&gt;StyleContext.NameAttribute&lt;/code&gt; attribute, which should
                  always have a value of type &lt;code&gt;HTML.Tag&lt;/code&gt; that identifies
                  the kind of element.  Some of the elements (such as comments) are
                  synthesized.  The &lt;code&gt;HTMLFactory&lt;/code&gt; uses this attribute to
                  determine what kind of view to build.&lt;/p&gt;
                  &lt;p&gt;This document supports incremental loading.  The
                  &lt;code&gt;TokenThreshold&lt;/code&gt; property controls how much of the parse
                  is buffered before trying to update the element structure of the
                  document.  This property is set by the &lt;code&gt;EditorKit&lt;/code&gt; so
                  that subclasses can disable it.&lt;/p&gt;
                  &lt;p&gt;The &lt;code&gt;Base&lt;/code&gt; property determines the URL against which
                  relative URLs are resolved.  By default, this will be the
                  &lt;code&gt;Document.StreamDescriptionProperty&lt;/code&gt; if the value of the
                  property is a URL.  If a &amp;lt;BASE&amp;gt; tag is encountered, the base
                  will become the URL specified by that tag.  Because the base URL is
                  a property, it can of course be set directly.&lt;/p&gt;
                  &lt;p&gt;The default content storage mechanism for this document is a gap
                  buffer (&lt;code&gt;GapContent&lt;/code&gt;).  Alternatives can be supplied by
                  using the constructor that takes a &lt;code&gt;Content&lt;/code&gt;
                  implementation.&lt;/p&gt;
                  &lt;h2&gt;Modifying HTMLDocument&lt;/h2&gt;
                  &lt;p&gt;In addition to the methods provided by Document and
                  StyledDocument for mutating an HTMLDocument, HTMLDocument provides
                  a number of convenience methods.  The following methods can be used
                  to insert HTML content into an existing document.&lt;/p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;{@link #setInnerHTML(Element,String)}&lt;/li&gt;
                  &lt;li&gt;{@link #setOuterHTML(Element,String)}&lt;/li&gt;
                  &lt;li&gt;{@link #insertBeforeStart(Element,String)}&lt;/li&gt;
                  &lt;li&gt;{@link #insertAfterStart(Element,String)}&lt;/li&gt;
                  &lt;li&gt;{@link #insertBeforeEnd(Element,String)}&lt;/li&gt;
                  &lt;li&gt;{@link #insertAfterEnd(Element,String)}&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;The following examples illustrate using these methods.  Each
                  example assumes the HTML document is initialized in the following
                  way:&lt;/p&gt;
                  &lt;pre&gt;
                  JEditorPane p = new JEditorPane();
                  p.setContentType(&quot;text/html&quot;);
                  p.setText(&quot;...&quot;); // Document text is provided below.
                  HTMLDocument d = (HTMLDocument) p.getDocument();
                  &lt;/pre&gt;
                  &lt;p&gt;With the following HTML content:&lt;/p&gt;
                  &lt;pre&gt;
                  &amp;lt;html&gt;
                  &amp;lt;head&gt;
                  &amp;lt;title&gt;An example HTMLDocument&amp;lt;/title&gt;
                  &amp;lt;style type=&quot;text/css&quot;&gt;
                  div { background-color: silver; }
                  ul { color: red; }
                  &amp;lt;/style&gt;
                  &amp;lt;/head&gt;
                  &amp;lt;body&gt;
                  &amp;lt;div id=&quot;BOX&quot;&gt;
                  &amp;lt;p&gt;Paragraph 1&amp;lt;/p&gt;
                  &amp;lt;p&gt;Paragraph 2&amp;lt;/p&gt;
                  &amp;lt;/div&gt;
                  &amp;lt;/body&gt;
                  &amp;lt;/html&gt;
                  &lt;/pre&gt;
                  &lt;p&gt;All the methods for modifying an HTML document require an {@link Element}.  Elements can be obtained from an HTML document by using
                  the method {@link #getElement(Element e,Object attribute,Object value)}.  It returns the first descendant element that contains the
                  specified attribute with the given value, in depth-first order.
                  For example, &lt;code&gt;d.getElement(d.getDefaultRootElement(),
                  StyleConstants.NameAttribute, HTML.Tag.P)&lt;/code&gt; returns the first
                  paragraph element.&lt;/p&gt;
                  &lt;p&gt;A convenient shortcut for locating elements is the method {@link #getElement(String)}; returns an element whose &lt;code&gt;ID&lt;/code&gt;
                  attribute matches the specified value.  For example,
                  &lt;code&gt;d.getElement(&quot;BOX&quot;)&lt;/code&gt; returns the &lt;code&gt;DIV&lt;/code&gt;
                  element.&lt;/p&gt;
                  &lt;p&gt;The {@link #getIterator(HTML.Tag t)} method can also be used for
                  finding all occurrences of the specified HTML tag in the
                  document.&lt;/p&gt;
                  &lt;h3&gt;Inserting elements&lt;/h3&gt;
                  &lt;p&gt;Elements can be inserted before or after the existing children
                  of any non-leaf element by using the methods
                  &lt;code&gt;insertAfterStart&lt;/code&gt; and &lt;code&gt;insertBeforeEnd&lt;/code&gt;.
                  For example, if &lt;code&gt;e&lt;/code&gt; is the &lt;code&gt;DIV&lt;/code&gt; element,
                  &lt;code&gt;d.insertAfterStart(e, &quot;&amp;lt;ul&gt;&amp;lt;li&gt;List
                  Item&amp;lt;/li&gt;&amp;lt;/ul&gt;&quot;)&lt;/code&gt; inserts the list before the first
                  paragraph, and &lt;code&gt;d.insertBeforeEnd(e, &quot;&amp;lt;ul&gt;&amp;lt;li&gt;List
                  Item&amp;lt;/li&gt;&amp;lt;/ul&gt;&quot;)&lt;/code&gt; inserts the list after the last
                  paragraph.  The &lt;code&gt;DIV&lt;/code&gt; block becomes the parent of the
                  newly inserted elements.&lt;/p&gt;
                  &lt;p&gt;Sibling elements can be inserted before or after any element by
                  using the methods &lt;code&gt;insertBeforeStart&lt;/code&gt; and
                  &lt;code&gt;insertAfterEnd&lt;/code&gt;.  For example, if &lt;code&gt;e&lt;/code&gt; is the
                  &lt;code&gt;DIV&lt;/code&gt; element, &lt;code&gt;d.insertBeforeStart(e,
                  &quot;&amp;lt;ul&gt;&amp;lt;li&gt;List Item&amp;lt;/li&gt;&amp;lt;/ul&gt;&quot;)&lt;/code&gt; inserts the list
                  before the &lt;code&gt;DIV&lt;/code&gt; element, and &lt;code&gt;d.insertAfterEnd(e,
                  &quot;&amp;lt;ul&gt;&amp;lt;li&gt;List Item&amp;lt;/li&gt;&amp;lt;/ul&gt;&quot;)&lt;/code&gt; inserts the list
                  after the &lt;code&gt;DIV&lt;/code&gt; element.  The newly inserted elements
                  become siblings of the &lt;code&gt;DIV&lt;/code&gt; element.&lt;/p&gt;
                  &lt;h3&gt;Replacing elements&lt;/h3&gt;
                  &lt;p&gt;Elements and all their descendants can be replaced by using the
                  methods &lt;code&gt;setInnerHTML&lt;/code&gt; and &lt;code&gt;setOuterHTML&lt;/code&gt;.
                  For example, if &lt;code&gt;e&lt;/code&gt; is the &lt;code&gt;DIV&lt;/code&gt; element,
                  &lt;code&gt;d.setInnerHTML(e, &quot;&amp;lt;ul&gt;&amp;lt;li&gt;List
                  Item&amp;lt;/li&gt;&amp;lt;/ul&gt;&quot;)&lt;/code&gt; replaces all children paragraphs with
                  the list, and &lt;code&gt;d.setOuterHTML(e, &quot;&amp;lt;ul&gt;&amp;lt;li&gt;List
                  Item&amp;lt;/li&gt;&amp;lt;/ul&gt;&quot;)&lt;/code&gt; replaces the &lt;code&gt;DIV&lt;/code&gt; element
                  itself.  In latter case the parent of the list is the
                  &lt;code&gt;BODY&lt;/code&gt; element.
                  &lt;h3&gt;Summary&lt;/h3&gt;
                  &lt;p&gt;The following table shows the example document and the results
                  of various methods described above.&lt;/p&gt;
                  &lt;table border=1 cellspacing=0&gt;
                  &lt;tr&gt;
                  &lt;th&gt;Example&lt;/th&gt;
                  &lt;th&gt;&lt;code&gt;insertAfterStart&lt;/code&gt;&lt;/th&gt;
                  &lt;th&gt;&lt;code&gt;insertBeforeEnd&lt;/code&gt;&lt;/th&gt;
                  &lt;th&gt;&lt;code&gt;insertBeforeStart&lt;/code&gt;&lt;/th&gt;
                  &lt;th&gt;&lt;code&gt;insertAfterEnd&lt;/code&gt;&lt;/th&gt;
                  &lt;th&gt;&lt;code&gt;setInnerHTML&lt;/code&gt;&lt;/th&gt;
                  &lt;th&gt;&lt;code&gt;setOuterHTML&lt;/code&gt;&lt;/th&gt;
                  &lt;/tr&gt;
                  &lt;tr valign=&quot;top&quot;&gt;
                  &lt;td nowrap=&quot;nowrap&quot;&gt;
                  &lt;div style=&quot;background-color: silver;&quot;&gt;
                  &lt;p&gt;Paragraph 1&lt;/p&gt;
                  &lt;p&gt;Paragraph 2&lt;/p&gt;
                  &lt;/div&gt;
                  &lt;/td&gt;
                  &lt;!--insertAfterStart--&gt;
                  &lt;td nowrap=&quot;nowrap&quot;&gt;
                  &lt;div style=&quot;background-color: silver;&quot;&gt;
                  &lt;ul style=&quot;color: red;&quot;&gt;
                  &lt;li&gt;List Item&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;Paragraph 1&lt;/p&gt;
                  &lt;p&gt;Paragraph 2&lt;/p&gt;
                  &lt;/div&gt;
                  &lt;/td&gt;
                  &lt;!--insertBeforeEnd--&gt;
                  &lt;td nowrap=&quot;nowrap&quot;&gt;
                  &lt;div style=&quot;background-color: silver;&quot;&gt;
                  &lt;p&gt;Paragraph 1&lt;/p&gt;
                  &lt;p&gt;Paragraph 2&lt;/p&gt;
                  &lt;ul style=&quot;color: red;&quot;&gt;
                  &lt;li&gt;List Item&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/div&gt;
                  &lt;/td&gt;
                  &lt;!--insertBeforeStart--&gt;
                  &lt;td nowrap=&quot;nowrap&quot;&gt;
                  &lt;ul style=&quot;color: red;&quot;&gt;
                  &lt;li&gt;List Item&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;div style=&quot;background-color: silver;&quot;&gt;
                  &lt;p&gt;Paragraph 1&lt;/p&gt;
                  &lt;p&gt;Paragraph 2&lt;/p&gt;
                  &lt;/div&gt;
                  &lt;/td&gt;
                  &lt;!--insertAfterEnd--&gt;
                  &lt;td nowrap=&quot;nowrap&quot;&gt;
                  &lt;div style=&quot;background-color: silver;&quot;&gt;
                  &lt;p&gt;Paragraph 1&lt;/p&gt;
                  &lt;p&gt;Paragraph 2&lt;/p&gt;
                  &lt;/div&gt;
                  &lt;ul style=&quot;color: red;&quot;&gt;
                  &lt;li&gt;List Item&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/td&gt;
                  &lt;!--setInnerHTML--&gt;
                  &lt;td nowrap=&quot;nowrap&quot;&gt;
                  &lt;div style=&quot;background-color: silver;&quot;&gt;
                  &lt;ul style=&quot;color: red;&quot;&gt;
                  &lt;li&gt;List Item&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/div&gt;
                  &lt;/td&gt;
                  &lt;!--setOuterHTML--&gt;
                  &lt;td nowrap=&quot;nowrap&quot;&gt;
                  &lt;ul style=&quot;color: red;&quot;&gt;
                  &lt;li&gt;List Item&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;
                  &lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; Serialized objects of this class will
                  not be compatible with future Swing releases. The current
                  serialization support is appropriate for short term storage or RMI
                  between applications running the same version of Swing.  As of 1.4,
                  support for long term storage of all JavaBeans&lt;sup&gt;&lt;font
                  size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt; has been added to the
                  &lt;code&gt;java.beans&lt;/code&gt; package.  Please see {@link java.beans.XMLEncoder}.&lt;/p&gt;                
                <author>
                    Timothy Prinzing                    
                </author>
                <author>
                    Scott Violet                    
                </author>
                <author>
                    Sunita Mani                    
                </author>
            </javadoc>
            <javadoc line="219">
                Constructs an HTML document using the default buffer size
                  and a default &lt;code&gt;StyleSheet&lt;/code&gt;.  This is a convenience
                  method for the constructor
                  &lt;code&gt;HTMLDocument(Content, StyleSheet)&lt;/code&gt;.                
            </javadoc>
            <method name="HTMLDocument" type="constructor" line="225"/>
            <javadoc line="228">
                Constructs an HTML document with the default content
                  storage implementation and the specified style/attribute
                  storage mechanism.  This is a convenience method for the
                  constructor
                  &lt;code&gt;HTMLDocument(Content, StyleSheet)&lt;/code&gt;.                
                <param>
                    styles  the styles                    
                </param>
            </javadoc>
            <method name="HTMLDocument" type="constructor" line="236">
                <params>
                    <param name="styles" type="StyleSheet"/>
                </params>
            </method>
            <javadoc line="239">
                Constructs an HTML document with the given content
                  storage implementation and the given style/attribute
                  storage mechanism.                
                <param>
                    c  the container for the content                    
                </param>
                <param>
                    styles the styles                    
                </param>
            </javadoc>
            <method name="HTMLDocument" type="constructor" line="246">
                <params>
                    <param name="c" type="Content"/>
                    <param name="styles" type="StyleSheet"/>
                </params>
            </method>
            <javadoc line="249">
                Fetches the reader for the parser to use when loading the document
                  with HTML.  This is implemented to return an instance of
                  &lt;code&gt;HTMLDocument.HTMLReader&lt;/code&gt;.
                  Subclasses can reimplement this
                  method to change how the document gets structured if desired.
                  (For example, to handle custom tags, or structurally represent character
                  style elements.)                
                <param>
                    pos the starting position                    
                </param>
                <return>
                    the reader used by the parser to load the document                    
                </return>
            </javadoc>
            <method name="getReader" type="HTMLEditorKit.ParserCallback" line="260">
                <params>
                    <param name="pos" type="int"/>
                </params>
                <declaration name="desc" type="Object" line="261"/>
                <scope line="262"/>
                <declaration name="reader" type="HTMLReader" line="265"/>
            </method>
            <javadoc line="268">
                Returns the reader for the parser to use to load the document
                  with HTML.  This is implemented to return an instance of
                  &lt;code&gt;HTMLDocument.HTMLReader&lt;/code&gt;.
                  Subclasses can reimplement this
                  method to change how the document gets structured if desired.
                  (For example, to handle custom tags, or structurally represent character
                  style elements.)
                  &lt;p&gt;This is a convenience method for
                  &lt;code&gt;getReader(int, int, int, HTML.Tag, TRUE)&lt;/code&gt;.                
                <param>
                    popDepth   the number of <code>ElementSpec.EndTagTypes</code>
                      to generate before inserting                    
                </param>
                <param>
                    pushDepth  the number of <code>ElementSpec.StartTagTypes</code>
                      with a direction of <code>ElementSpec.JoinNextDirection</code>
                      that should be generated before inserting,
                      but after the end tags have been generated                    
                </param>
                <param>
                    insertTag  the first tag to start inserting into document                    
                </param>
                <return>
                    the reader used by the parser to load the document                    
                </return>
            </javadoc>
            <method name="getReader" type="HTMLEditorKit.ParserCallback" line="287">
                <params>
                    <param name="pos" type="int"/>
                    <param name="popDepth" type="int"/>
                    <param name="pushDepth" type="int"/>
                    <param name="insertTag" type="HTML.Tag"/>
                </params>
            </method>
            <javadoc line="290">
                Fetches the reader for the parser to use to load the document
                  with HTML.  This is implemented to return an instance of
                  HTMLDocument.HTMLReader.  Subclasses can reimplement this
                  method to change how the document get structured if desired
                  (e.g. to handle custom tags, structurally represent character
                  style elements, etc.).                
                <param>
                    popDepth   the number of <code>ElementSpec.EndTagTypes</code>
                      to generate before inserting                    
                </param>
                <param>
                    pushDepth  the number of <code>ElementSpec.StartTagTypes</code>
                      with a direction of <code>ElementSpec.JoinNextDirection</code>
                      that should be generated before inserting,
                      but after the end tags have been generated                    
                </param>
                <param>
                    insertTag  the first tag to start inserting into document                    
                </param>
                <param>
                    insertInsertTag  false if all the Elements after insertTag should
                      be inserted; otherwise insertTag will be inserted                    
                </param>
                <return>
                    the reader used by the parser to load the document                    
                </return>
            </javadoc>
            <method name="getReader" type="HTMLEditorKit.ParserCallback" line="308">
                <params>
                    <param name="pos" type="int"/>
                    <param name="popDepth" type="int"/>
                    <param name="pushDepth" type="int"/>
                    <param name="insertTag" type="HTML.Tag"/>
                    <param name="insertInsertTag" type="boolean"/>
                </params>
                <declaration name="desc" type="Object" line="309"/>
                <scope line="310"/>
                <declaration name="reader" type="HTMLReader" line="313"/>
            </method>
            <javadoc line="316">
                Returns the location to resolve relative URLs against.  By
                  default this will be the document&apos;s URL if the document
                  was loaded from a URL.  If a base tag is found and
                  can be parsed, it will be used as the base location.                
                <return>
                    the base location                    
                </return>
            </javadoc>
            <method name="getBase" type="URL" line="323"/>
            <javadoc line="326">
                Sets the location to resolve relative URLs against.  By
                  default this will be the document&apos;s URL if the document
                  was loaded from a URL.  If a base tag is found and
                  can be parsed, it will be used as the base location.
                  &lt;p&gt;This also sets the base of the &lt;code&gt;StyleSheet&lt;/code&gt;
                  to be &lt;code&gt;u&lt;/code&gt; as well as the base of the document.                
                <param>
                    u  the desired base URL                    
                </param>
            </javadoc>
            <method name="setBase" type="void" line="335">
                <params>
                    <param name="u" type="URL"/>
                </params>
            </method>
            <javadoc line="339">
                Inserts new elements in bulk.  This is how elements get created
                  in the document.  The parsing determines what structure is needed
                  and creates the specification as a set of tokens that describe the
                  edit while leaving the document free of a write-lock.  This method
                  can then be called in bursts by the reader to acquire a write-lock
                  for a shorter duration (i.e. while the document is actually being
                  altered).                
                <param>
                    offset the starting offset                    
                </param>
                <param>
                    data the element data                    
                </param>
                <exception>
                    BadLocationException  if the given position does not
                      represent a valid location in the associated document.                    
                </exception>
            </javadoc>
            <method name="insert" type="void" line="352">
                <params>
                    <param name="offset" type="int"/>
                    <param name="data" type="ElementSpec[]"/>
                </params>
            </method>
            <javadoc line="355">
                Updates document structure as a result of text insertion.  This
                  will happen within a write lock.  This implementation simply
                  parses the inserted content for line breaks and builds up a set
                  of instructions for the element buffer.                
                <param>
                    chng a description of the document change                    
                </param>
                <param>
                    attr the attributes                    
                </param>
            </javadoc>
            <method name="insertUpdate" type="void" line="363">
                <params>
                    <param name="chng" type="DefaultDocumentEvent"/>
                    <param name="attr" type="AttributeSet"/>
                </params>
                <scope line="364"/>
                <scope line="367"/>
                <scope line="370"/>
            </method>
            <javadoc line="375">
                Replaces the contents of the document with the given
                  element specifications.  This is called before insert if
                  the loading is done in bursts.  This is the only method called
                  if loading the document entirely in one burst.                
                <param>
                    data  the new contents of the document                    
                </param>
            </javadoc>
            <method name="create" type="void" line="382">
                <params>
                    <param name="data" type="ElementSpec[]"/>
                </params>
            </method>
            <javadoc line="385">
                Sets attributes for a paragraph.
                  &lt;p&gt;
                  This method is thread safe, although most Swing methods
                  are not. Please see
                  &lt;A HREF=&quot;http://java.sun.com/docs/books/tutorial/uiswing/misc/threads.html&quot;&gt;How
                  to Use Threads&lt;/A&gt; for more information.                
                <param>
                    offset the offset into the paragraph (must be at least 0)                    
                </param>
                <param>
                    length the number of characters affected (must be at least 0)                    
                </param>
                <param>
                    s the attributes                    
                </param>
                <param>
                    replace whether to replace existing attributes, or merge them                    
                </param>
            </javadoc>
            <method name="setParagraphAttributes" type="void" line="397">
                <params>
                    <param name="offset" type="int"/>
                    <param name="length" type="int"/>
                    <param name="s" type="AttributeSet"/>
                    <param name="replace" type="boolean"/>
                </params>
                <scope line="398">
                    <declaration name="end" type="int" line="400"/>
                    <declaration name="e" type="Element" line="401"/>
                    <declaration name="changes" type="DefaultDocumentEvent" line="405"/>
                    <declaration name="sCopy" type="AttributeSet" line="406"/>
                    <declaration name="lastEnd" type="int" line="407"/>
                    <scope line="408">
                        <declaration name="paragraph" type="Element" line="409"/>
                        <scope line="410"/>
                        <scope line="413"/>
                        <declaration name="attr" type="MutableAttributeSet" line="416"/>
                        <scope line="418"/>
                    </scope>
                </scope>
                <scope line="427"/>
            </method>
            <javadoc line="431">
                Fetches the &lt;code&gt;StyleSheet&lt;/code&gt; with the document-specific display
                  rules (CSS) that were specified in the HTML document itself.                
                <return>
                    the <code>StyleSheet</code>                    
                </return>
            </javadoc>
            <method name="getStyleSheet" type="StyleSheet" line="436"/>
            <javadoc line="439">
                Fetches an iterator for the specified HTML tag.
                  This can be used for things like iterating over the
                  set of anchors contained, or iterating over the input
                  elements.                
                <param>
                    t the requested <code>HTML.Tag</code>                    
                </param>
                <return>
                    the <code>Iterator</code> for the given HTML tag                    
                </return>
                <see>
                    javax.swing.text.html.HTML.Tag                    
                </see>
            </javadoc>
            <method name="getIterator" type="Iterator" line="448">
                <params>
                    <param name="t" type="HTML.Tag"/>
                </params>
                <scope line="449"/>
            </method>
            <javadoc line="454">
                Creates a document leaf element that directly represents
                  text (doesn&apos;t have any children).  This is implemented
                  to return an element of type
                  &lt;code&gt;HTMLDocument.RunElement&lt;/code&gt;.                
                <param>
                    parent the parent element                    
                </param>
                <param>
                    a the attributes for the element                    
                </param>
                <param>
                    p0 the beginning of the range (must be at least 0)                    
                </param>
                <param>
                    p1 the end of the range (must be at least p0)                    
                </param>
                <return>
                    the new element                    
                </return>
            </javadoc>
            <method name="createLeafElement" type="Element" line="465">
                <params>
                    <param name="parent" type="Element"/>
                    <param name="a" type="AttributeSet"/>
                    <param name="p0" type="int"/>
                    <param name="p1" type="int"/>
                </params>
            </method>
            <javadoc line="468">
                Creates a document branch element, that can contain other elements.
                  This is implemented to return an element of type
                  &lt;code&gt;HTMLDocument.BlockElement&lt;/code&gt;.                
                <param>
                    parent the parent element                    
                </param>
                <param>
                    a the attributes                    
                </param>
                <return>
                    the element                    
                </return>
            </javadoc>
            <method name="createBranchElement" type="Element" line="476">
                <params>
                    <param name="parent" type="Element"/>
                    <param name="a" type="AttributeSet"/>
                </params>
            </method>
            <javadoc line="479">
                Creates the root element to be used to represent the
                  default document structure.                
                <return>
                    the element base                    
                </return>
            </javadoc>
            <method name="createDefaultRoot" type="AbstractElement" line="484">
                <declaration name="a" type="MutableAttributeSet" line="486"/>
                <declaration name="html" type="BlockElement" line="488"/>
                <declaration name="body" type="BlockElement" line="491"/>
                <declaration name="paragraph" type="BlockElement" line="495"/>
                <declaration name="brk" type="RunElement" line="498"/>
                <declaration name="buff" type="Element[]" line="499"/>
            </method>
            <javadoc line="509">
                Sets the number of tokens to buffer before trying to update
                  the documents element structure.                
                <param>
                    n  the number of tokens to buffer                    
                </param>
            </javadoc>
            <method name="setTokenThreshold" type="void" line="514">
                <params>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="517">
                Gets the number of tokens to buffer before trying to update
                  the documents element structure.  The default value is
                  &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt;.                
                <return>
                    the number of tokens to buffer                    
                </return>
            </javadoc>
            <method name="getTokenThreshold" type="int" line="523">
                <declaration name="i" type="Integer" line="524"/>
                <scope line="525"/>
            </method>
            <javadoc line="530">
                Determines how unknown tags are handled by the parser.
                  If set to true, unknown
                  tags are put in the model, otherwise they are dropped.                
                <param>
                    preservesTags  true if unknown tags should be
                      saved in the model, otherwise tags are dropped                    
                </param>
                <see>
                    javax.swing.text.html.HTML.Tag                    
                </see>
            </javadoc>
            <method name="setPreservesUnknownTags" type="void" line="538">
                <params>
                    <param name="preservesTags" type="boolean"/>
                </params>
            </method>
            <javadoc line="541">
                Returns the behavior the parser observes when encountering
                  unknown tags.                
                <see>
                    javax.swing.text.html.HTML.Tag                    
                </see>
                <return>
                    true if unknown tags are to be preserved when parsing                    
                </return>
            </javadoc>
            <method name="getPreservesUnknownTags" type="boolean" line="547"/>
            <javadoc line="550">
                Processes &lt;code&gt;HyperlinkEvents&lt;/code&gt; that
                  are generated by documents in an HTML frame.
                  The &lt;code&gt;HyperlinkEvent&lt;/code&gt; type, as the parameter suggests,
                  is &lt;code&gt;HTMLFrameHyperlinkEvent&lt;/code&gt;.
                  In addition to the typical information contained in a
                  &lt;code&gt;HyperlinkEvent&lt;/code&gt;,
                  this event contains the element that corresponds to the frame in
                  which the click happened (the source element) and the
                  target name.  The target name has 4 possible values:
                  &lt;ul&gt;
                  &lt;li&gt;  _self
                  &lt;li&gt;  _parent
                  &lt;li&gt;  _top
                  &lt;li&gt;  a named frame
                  &lt;/ul&gt;
                  If target is _self, the action is to change the value of the
                  &lt;code&gt;HTML.Attribute.SRC&lt;/code&gt; attribute and fires a
                  &lt;code&gt;ChangedUpdate&lt;/code&gt; event.
                  &lt;p&gt;
                  If the target is _parent, then it deletes the parent element,
                  which is a &amp;lt;FRAMESET&amp;gt; element, and inserts a new &amp;lt;FRAME&amp;gt;
                  element, and sets its &lt;code&gt;HTML.Attribute.SRC&lt;/code&gt; attribute
                  to have a value equal to the destination URL and fire a
                  &lt;code&gt;RemovedUpdate&lt;/code&gt; and &lt;code&gt;InsertUpdate&lt;/code&gt;.
                  &lt;p&gt;
                  If the target is _top, this method does nothing. In the implementation
                  of the view for a frame, namely the &lt;code&gt;FrameView&lt;/code&gt;,
                  the processing of _top is handled.  Given that _top implies
                  replacing the entire document, it made sense to handle this outside
                  of the document that it will replace.
                  &lt;p&gt;
                  If the target is a named frame, then the element hierarchy is searched
                  for an element with a name equal to the target, its
                  &lt;code&gt;HTML.Attribute.SRC&lt;/code&gt; attribute is updated and a
                  &lt;code&gt;ChangedUpdate&lt;/code&gt; event is fired.                
                <param>
                    e the event                    
                </param>
            </javadoc>
            <method name="processHTMLFrameHyperlinkEvent" type="void" line="588">
                <params>
                    <param name="e" type="HTMLFrameHyperlinkEvent"/>
                </params>
                <declaration name="frameName" type="String" line="589"/>
                <declaration name="element" type="Element" line="590"/>
                <declaration name="urlStr" type="String" line="591"/>
                <scope line="592"/>
                <scope line="595"/>
                <scope line="598">
                    <declaration name="targetElement" type="Element" line="599"/>
                    <scope line="600"/>
                </scope>
            </method>
            <javadoc line="605">
                Searches the element hierarchy for an FRAME element
                  that has its name attribute equal to the &lt;code&gt;frameName&lt;/code&gt;.                
                <param>
                    frameName                    
                </param>
                <return>
                    the element whose NAME attribute has a value of
                      <code>frameName</code>; returns <code>null</code>
                      if not found                    
                </return>
            </javadoc>
            <method name="findFrame" type="Element" line="613">
                <params>
                    <param name="frameName" type="String"/>
                </params>
                <declaration name="it" type="ElementIterator" line="614"/>
                <declaration name="next" type="Element" line="615"/>
                <scope line="616">
                    <declaration name="attr" type="AttributeSet" line="617"/>
                    <scope line="618">
                        <declaration name="frameTarget" type="String" line="619"/>
                        <scope line="620"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="627">
                Returns true if &lt;code&gt;StyleConstants.NameAttribute&lt;/code&gt; is
                  equal to the tag that is passed in as a parameter.                
                <param>
                    attr the attributes to be matched                    
                </param>
                <param>
                    tag the value to be matched                    
                </param>
                <return>
                    true if there is a match, false otherwise                    
                </return>
                <see>
                    javax.swing.text.html.HTML.Attribute                    
                </see>
            </javadoc>
            <method name="matchNameAttribute" type="boolean" line="635">
                <params>
                    <param name="attr" type="AttributeSet"/>
                    <param name="tag" type="HTML.Tag"/>
                </params>
                <declaration name="o" type="Object" line="636"/>
                <scope line="637">
                    <declaration name="name" type="HTML.Tag" line="638"/>
                    <scope line="639"/>
                </scope>
            </method>
            <javadoc line="645">
                Replaces a frameset branch Element with a frame leaf element.                
                <param>
                    element the frameset element to remove                    
                </param>
                <param>
                    url     the value for the SRC attribute for the
                      new frame that will replace the frameset                    
                </param>
            </javadoc>
            <method name="updateFrameSet" type="void" line="651">
                <params>
                    <param name="element" type="Element"/>
                    <param name="url" type="String"/>
                </params>
                <scope line="652">
                    <declaration name="startOffset" type="int" line="653"/>
                    <declaration name="endOffset" type="int" line="654"/>
                    <declaration name="html" type="String" line="655"/>
                    <scope line="656"/>
                </scope>
                <scope line="663"/>
                <scope line="665"/>
            </method>
            <javadoc line="668">
                Updates the Frame elements &lt;code&gt;HTML.Attribute.SRC attribute&lt;/code&gt;
                  and fires a &lt;code&gt;ChangedUpdate&lt;/code&gt; event.                
                <param>
                    element a FRAME element whose SRC attribute will be updated                    
                </param>
                <param>
                    url     a string specifying the new value for the SRC attribute                    
                </param>
            </javadoc>
            <method name="updateFrame" type="void" line="674">
                <params>
                    <param name="element" type="Element"/>
                    <param name="url" type="String"/>
                </params>
                <scope line="675">
                    <declaration name="changes" type="DefaultDocumentEvent" line="677"/>
                    <declaration name="sCopy" type="AttributeSet" line="678"/>
                    <declaration name="attr" type="MutableAttributeSet" line="679"/>
                </scope>
                <scope line="687"/>
            </method>
            <javadoc line="691">
                Returns true if the document will be viewed in a frame.                
                <return>
                    true if document will be viewed in a frame, otherwise false                    
                </return>
            </javadoc>
            <method name="isFrameDocument" type="boolean" line="695"/>
            <javadoc line="698">
                Sets a boolean state about whether the document will be
                  viewed in a frame.                
                <param>
                    frameDoc  true if the document will be viewed in a frame,
                      otherwise false                    
                </param>
            </javadoc>
            <method name="setFrameDocumentState" type="void" line="704">
                <params>
                    <param name="frameDoc" type="boolean"/>
                </params>
            </method>
            <javadoc line="707">
                Adds the specified map, this will remove a Map that has been
                  previously registered with the same name.                
                <param>
                    map  the <code>Map</code> to be registered                    
                </param>
            </javadoc>
            <method name="addMap" type="void" line="712">
                <params>
                    <param name="map" type="Map"/>
                </params>
                <declaration name="name" type="String" line="713"/>
                <scope line="714">
                    <declaration name="maps" type="Object" line="715"/>
                    <scope line="716"/>
                    <scope line="720"/>
                </scope>
            </method>
            <javadoc line="725">
                Removes a previously registered map.                
                <param>
                    map the <code>Map</code> to be removed                    
                </param>
            </javadoc>
            <method name="removeMap" type="void" line="729">
                <params>
                    <param name="map" type="Map"/>
                </params>
                <declaration name="name" type="String" line="730"/>
                <scope line="731">
                    <declaration name="maps" type="Object" line="732"/>
                    <scope line="733"/>
                </scope>
            </method>
            <javadoc line="738">
                Returns the Map associated with the given name.                
                <param>
                    name the name of the desired <code>Map</code>                    
                </param>
                <return>
                    the <code>Map</code> or <code>null</code> if it can't
                      be found, or if <code>name</code> is <code>null</code>                    
                </return>
            </javadoc>
            <method name="getMap" type="Map" line="744">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="745">
                    <declaration name="maps" type="Object" line="746"/>
                    <scope line="747"/>
                </scope>
            </method>
            <javadoc line="753">
                Returns an &lt;code&gt;Enumeration&lt;/code&gt; of the possible Maps.                
                <return>
                    the enumerated list of maps, or <code>null</code>
                      if the maps are not an instance of <code>Hashtable</code>                    
                </return>
            </javadoc>
            <method name="getMaps" type="Enumeration" line="758">
                <declaration name="maps" type="Object" line="759"/>
                <scope line="760"/>
            </method>
            <javadoc line="765">
                Sets the content type language used for style sheets that do not
                  explicitly specify the type. The default is text/css.                
                <param>
                    contentType  the content type language for the style sheets                    
                </param>
            </javadoc>
            <method name="setDefaultStyleSheetType" type="void" line="770">
                <params>
                    <param name="contentType" type="String"/>
                </params>
            </method>
            <javadoc line="773">
                Returns the content type language used for style sheets. The default
                  is text/css.                
                <return>
                    the content type language used for the style sheets                    
                </return>
            </javadoc>
            <method name="getDefaultStyleSheetType" type="String" line="778">
                <declaration name="retValue" type="String" line="779"/>
                <scope line="780"/>
            </method>
            <javadoc line="785">
                Sets the parser that is used by the methods that insert html
                  into the existing document, such as &lt;code&gt;setInnerHTML&lt;/code&gt;,
                  and &lt;code&gt;setOuterHTML&lt;/code&gt;.
                  &lt;p&gt;
                  &lt;code&gt;HTMLEditorKit.createDefaultDocument&lt;/code&gt; will set the parser
                  for you. If you create an &lt;code&gt;HTMLDocument&lt;/code&gt; by hand,
                  be sure and set the parser accordingly.                
                <param>
                    parser the parser to be used for text insertion                    
                </param>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="setParser" type="void" line="796">
                <params>
                    <param name="parser" type="HTMLEditorKit.Parser"/>
                </params>
            </method>
            <javadoc line="800">
                Returns the parser that is used when inserting HTML into the existing
                  document.                
                <return>
                    the parser used for text insertion                    
                </return>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getParser" type="HTMLEditorKit.Parser" line="806">
                <declaration name="p" type="Object" line="807"/>
                <scope line="808"/>
            </method>
            <javadoc line="813">
                Replaces the children of the given element with the contents
                  specified as an HTML string.
                  &lt;p&gt;This will be seen as at least two events, n inserts followed by
                  a remove.&lt;/p&gt;
                  &lt;p&gt;Consider the following structure (the &lt;code&gt;elem&lt;/code&gt;
                  parameter is &lt;b&gt;in bold&lt;/b&gt;).&lt;/p&gt;
                  &lt;pre&gt;
                  &amp;lt;body&gt;
                  |
                  &lt;b&gt;&amp;lt;div&gt;&lt;/b&gt;
                  /  \
                  &amp;lt;p&gt;   &amp;lt;p&gt;
                  &lt;/pre&gt;
                  &lt;p&gt;Invoking &lt;code&gt;setInnerHTML(elem, &quot;&amp;lt;ul&gt;&amp;lt;li&gt;&quot;)&lt;/code&gt;
                  results in the following structure (new elements are &lt;font
                  color=&quot;red&quot;&gt;in red&lt;/font&gt;).&lt;/p&gt;
                  &lt;pre&gt;
                  &amp;lt;body&gt;
                  |
                  &lt;b&gt;&amp;lt;div&gt;&lt;/b&gt;
                  \
                  &lt;font color=&quot;red&quot;&gt;&amp;lt;ul&gt;&lt;/font&gt;
                  \
                  &lt;font color=&quot;red&quot;&gt;&amp;lt;li&gt;&lt;/font&gt;
                  &lt;/pre&gt;
                  &lt;p&gt;Parameter &lt;code&gt;elem&lt;/code&gt; must not be a leaf element,
                  otherwise an &lt;code&gt;IllegalArgumentException&lt;/code&gt; is thrown.
                  If either &lt;code&gt;elem&lt;/code&gt; or &lt;code&gt;htmlText&lt;/code&gt; parameter
                  is &lt;code&gt;null&lt;/code&gt;, no changes are made to the document.&lt;/p&gt;
                  &lt;p&gt;For this to work correcty, the document must have an
                  &lt;code&gt;HTMLEditorKit.Parser&lt;/code&gt; set. This will be the case
                  if the document was created from an HTMLEditorKit via the
                  &lt;code&gt;createDefaultDocument&lt;/code&gt; method.&lt;/p&gt;                
                <param>
                    elem the branch element whose children will be replaced                    
                </param>
                <param>
                    htmlText the string to be parsed and assigned to <code>elem</code>                    
                </param>
                <throws>
                    IllegalArgumentException if <code>elem</code> is a leaf                    
                </throws>
                <throws>
                    IllegalStateException if an <code>HTMLEditorKit.Parser</code>
                      has not been defined                    
                </throws>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="setInnerHTML" type="void" line="854">
                <params>
                    <param name="elem" type="Element"/>
                    <param name="htmlText" type="String"/>
                </params>
                <scope line="856"/>
                <scope line="859">
                    <declaration name="oldCount" type="int" line="860"/>
                    <declaration name="insertPosition" type="int" line="861"/>
                    <scope line="863"/>
                </scope>
            </method>
            <javadoc line="868">
                Replaces the given element in the parent with the contents
                  specified as an HTML string.
                  &lt;p&gt;This will be seen as at least two events, n inserts followed by
                  a remove.&lt;/p&gt;
                  &lt;p&gt;When replacing a leaf this will attempt to make sure there is
                  a newline present if one is needed. This may result in an additional
                  element being inserted. Consider, if you were to replace a character
                  element that contained a newline with &amp;lt;img&amp;gt; this would create
                  two elements, one for the image, ane one for the newline.&lt;/p&gt;
                  &lt;p&gt;If you try to replace the element at length you will most
                  likely end up with two elements, eg
                  &lt;code&gt;setOuterHTML(getCharacterElement (getLength()),
                  &quot;blah&quot;)&lt;/code&gt; will result in two leaf elements at the end, one
                  representing &apos;blah&apos;, and the other representing the end
                  element.&lt;/p&gt;
                  &lt;p&gt;Consider the following structure (the &lt;code&gt;elem&lt;/code&gt;
                  parameter is &lt;b&gt;in bold&lt;/b&gt;).&lt;/p&gt;
                  &lt;pre&gt;
                  &amp;lt;body&gt;
                  |
                  &lt;b&gt;&amp;lt;div&gt;&lt;/b&gt;
                  /  \
                  &amp;lt;p&gt;   &amp;lt;p&gt;
                  &lt;/pre&gt;
                  &lt;p&gt;Invoking &lt;code&gt;setOuterHTML(elem, &quot;&amp;lt;ul&gt;&amp;lt;li&gt;&quot;)&lt;/code&gt;
                  results in the following structure (new elements are &lt;font
                  color=&quot;red&quot;&gt;in red&lt;/font&gt;).&lt;/p&gt;
                  &lt;pre&gt;
                  &amp;lt;body&gt;
                  |
                  &lt;font color=&quot;red&quot;&gt;&amp;lt;ul&gt;&lt;/font&gt;
                  \
                  &lt;font color=&quot;red&quot;&gt;&amp;lt;li&gt;&lt;/font&gt;
                  &lt;/pre&gt;
                  &lt;p&gt;If either &lt;code&gt;elem&lt;/code&gt; or &lt;code&gt;htmlText&lt;/code&gt;
                  parameter is &lt;code&gt;null&lt;/code&gt;, no changes are made to the
                  document.&lt;/p&gt;
                  &lt;p&gt;For this to work correcty, the document must have an
                  HTMLEditorKit.Parser set. This will be the case if the document
                  was created from an HTMLEditorKit via the
                  &lt;code&gt;createDefaultDocument&lt;/code&gt; method.&lt;/p&gt;                
                <param>
                    elem the element to replace                    
                </param>
                <param>
                    htmlText the string to be parsed and inserted in place of <code>elem</code>                    
                </param>
                <throws>
                    IllegalStateException if an HTMLEditorKit.Parser has not
                      been set                    
                </throws>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="setOuterHTML" type="void" line="916">
                <params>
                    <param name="elem" type="Element"/>
                    <param name="htmlText" type="String"/>
                </params>
                <scope line="918">
                    <declaration name="start" type="int" line="919"/>
                    <declaration name="end" type="int" line="920"/>
                    <declaration name="startLength" type="int" line="921"/>
                    <declaration name="wantsNewline" type="boolean" line="922"/>
                    <scope line="923"/>
                    <declaration name="parent" type="Element" line="926"/>
                    <declaration name="oldCount" type="int" line="927"/>
                    <declaration name="newLength" type="int" line="929"/>
                    <scope line="930">
                        <declaration name="removeIndex" type="int" line="931"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="936">
                Inserts the HTML specified as a string at the start
                  of the element.
                  &lt;p&gt;Consider the following structure (the &lt;code&gt;elem&lt;/code&gt;
                  parameter is &lt;b&gt;in bold&lt;/b&gt;).&lt;/p&gt;
                  &lt;pre&gt;
                  &amp;lt;body&gt;
                  |
                  &lt;b&gt;&amp;lt;div&gt;&lt;/b&gt;
                  /  \
                  &amp;lt;p&gt;   &amp;lt;p&gt;
                  &lt;/pre&gt;
                  &lt;p&gt;Invoking &lt;code&gt;insertAfterStart(elem,
                  &quot;&amp;lt;ul&gt;&amp;lt;li&gt;&quot;)&lt;/code&gt; results in the following structure
                  (new elements are &lt;font color=&quot;red&quot;&gt;in red&lt;/font&gt;).&lt;/p&gt;
                  &lt;pre&gt;
                  &amp;lt;body&gt;
                  |
                  &lt;b&gt;&amp;lt;div&gt;&lt;/b&gt;
                  /  |  \
                  &lt;font color=&quot;red&quot;&gt;&amp;lt;ul&gt;&lt;/font&gt; &amp;lt;p&gt; &amp;lt;p&gt;
                  /
                  &lt;font color=&quot;red&quot;&gt;&amp;lt;li&gt;&lt;/font&gt;
                  &lt;/pre&gt;
                  &lt;p&gt;Unlike the &lt;code&gt;insertBeforeStart&lt;/code&gt; method, new
                  elements become &lt;em&gt;children&lt;/em&gt; of the specified element,
                  not siblings.&lt;/p&gt;
                  &lt;p&gt;Parameter &lt;code&gt;elem&lt;/code&gt; must not be a leaf element,
                  otherwise an &lt;code&gt;IllegalArgumentException&lt;/code&gt; is thrown.
                  If either &lt;code&gt;elem&lt;/code&gt; or &lt;code&gt;htmlText&lt;/code&gt; parameter
                  is &lt;code&gt;null&lt;/code&gt;, no changes are made to the document.&lt;/p&gt;
                  &lt;p&gt;For this to work correcty, the document must have an
                  &lt;code&gt;HTMLEditorKit.Parser&lt;/code&gt; set. This will be the case
                  if the document was created from an HTMLEditorKit via the
                  &lt;code&gt;createDefaultDocument&lt;/code&gt; method.&lt;/p&gt;                
                <param>
                    elem the branch element to be the root for the new text                    
                </param>
                <param>
                    htmlText the string to be parsed and assigned to <code>elem</code>                    
                </param>
                <throws>
                    IllegalArgumentException if <code>elem</code> is a leaf                    
                </throws>
                <throws>
                    IllegalStateException if an HTMLEditorKit.Parser has not
                      been set on the document                    
                </throws>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="insertAfterStart" type="void" line="978">
                <params>
                    <param name="elem" type="Element"/>
                    <param name="htmlText" type="String"/>
                </params>
                <scope line="980"/>
            </method>
            <javadoc line="985">
                Inserts the HTML specified as a string at the end of
                  the element.
                  &lt;p&gt; If &lt;code&gt;elem&lt;/code&gt;&apos;s children are leaves, and the
                  character at a &lt;code&gt;elem.getEndOffset() - 1&lt;/code&gt; is a newline,
                  this will insert before the newline so that there isn&apos;t text after
                  the newline.&lt;/p&gt;
                  &lt;p&gt;Consider the following structure (the &lt;code&gt;elem&lt;/code&gt;
                  parameter is &lt;b&gt;in bold&lt;/b&gt;).&lt;/p&gt;
                  &lt;pre&gt;
                  &amp;lt;body&gt;
                  |
                  &lt;b&gt;&amp;lt;div&gt;&lt;/b&gt;
                  /  \
                  &amp;lt;p&gt;   &amp;lt;p&gt;
                  &lt;/pre&gt;
                  &lt;p&gt;Invoking &lt;code&gt;insertBeforeEnd(elem, &quot;&amp;lt;ul&gt;&amp;lt;li&gt;&quot;)&lt;/code&gt;
                  results in the following structure (new elements are &lt;font
                  color=&quot;red&quot;&gt;in red&lt;/font&gt;).&lt;/p&gt;
                  &lt;pre&gt;
                  &amp;lt;body&gt;
                  |
                  &lt;b&gt;&amp;lt;div&gt;&lt;/b&gt;
                  /  |  \
                  &amp;lt;p&gt; &amp;lt;p&gt; &lt;font color=&quot;red&quot;&gt;&amp;lt;ul&gt;&lt;/font&gt;
                  \
                  &lt;font color=&quot;red&quot;&gt;&amp;lt;li&gt;&lt;/font&gt;
                  &lt;/pre&gt;
                  &lt;p&gt;Unlike the &lt;code&gt;insertAfterEnd&lt;/code&gt; method, new elements
                  become &lt;em&gt;children&lt;/em&gt; of the specified element, not
                  siblings.&lt;/p&gt;
                  &lt;p&gt;Parameter &lt;code&gt;elem&lt;/code&gt; must not be a leaf element,
                  otherwise an &lt;code&gt;IllegalArgumentException&lt;/code&gt; is thrown.
                  If either &lt;code&gt;elem&lt;/code&gt; or &lt;code&gt;htmlText&lt;/code&gt; parameter
                  is &lt;code&gt;null&lt;/code&gt;, no changes are made to the document.&lt;/p&gt;
                  &lt;p&gt;For this to work correcty, the document must have an
                  &lt;code&gt;HTMLEditorKit.Parser&lt;/code&gt; set. This will be the case
                  if the document was created from an HTMLEditorKit via the
                  &lt;code&gt;createDefaultDocument&lt;/code&gt; method.&lt;/p&gt;                
                <param>
                    elem the element to be the root for the new text                    
                </param>
                <param>
                    htmlText the string to be parsed and assigned to <code>elem</code>                    
                </param>
                <throws>
                    IllegalArgumentException if <code>elem</code> is a leaf                    
                </throws>
                <throws>
                    IllegalStateException if an HTMLEditorKit.Parser has not
                      been set on the document                    
                </throws>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="insertBeforeEnd" type="void" line="1031">
                <params>
                    <param name="elem" type="Element"/>
                    <param name="htmlText" type="String"/>
                </params>
                <scope line="1033"/>
                <scope line="1036">
                    <declaration name="offset" type="int" line="1037"/>
                    <scope line="1038"/>
                </scope>
            </method>
            <javadoc line="1044">
                Inserts the HTML specified as a string before the start of
                  the given element.
                  &lt;p&gt;Consider the following structure (the &lt;code&gt;elem&lt;/code&gt;
                  parameter is &lt;b&gt;in bold&lt;/b&gt;).&lt;/p&gt;
                  &lt;pre&gt;
                  &amp;lt;body&gt;
                  |
                  &lt;b&gt;&amp;lt;div&gt;&lt;/b&gt;
                  /  \
                  &amp;lt;p&gt;   &amp;lt;p&gt;
                  &lt;/pre&gt;
                  &lt;p&gt;Invoking &lt;code&gt;insertBeforeStart(elem,
                  &quot;&amp;lt;ul&gt;&amp;lt;li&gt;&quot;)&lt;/code&gt; results in the following structure
                  (new elements are &lt;font color=&quot;red&quot;&gt;in red&lt;/font&gt;).&lt;/p&gt;
                  &lt;pre&gt;
                  &amp;lt;body&gt;
                  /  \
                  &lt;font color=&quot;red&quot;&gt;&amp;lt;ul&gt;&lt;/font&gt; &lt;b&gt;&amp;lt;div&gt;&lt;/b&gt;
                  /    /  \
                  &lt;font color=&quot;red&quot;&gt;&amp;lt;li&gt;&lt;/font&gt; &amp;lt;p&gt;  &amp;lt;p&gt;
                  &lt;/pre&gt;
                  &lt;p&gt;Unlike the &lt;code&gt;insertAfterStart&lt;/code&gt; method, new
                  elements become &lt;em&gt;siblings&lt;/em&gt; of the specified element, not
                  children.&lt;/p&gt;
                  &lt;p&gt;If either &lt;code&gt;elem&lt;/code&gt; or &lt;code&gt;htmlText&lt;/code&gt;
                  parameter is &lt;code&gt;null&lt;/code&gt;, no changes are made to the
                  document.&lt;/p&gt;
                  &lt;p&gt;For this to work correcty, the document must have an
                  &lt;code&gt;HTMLEditorKit.Parser&lt;/code&gt; set. This will be the case
                  if the document was created from an HTMLEditorKit via the
                  &lt;code&gt;createDefaultDocument&lt;/code&gt; method.&lt;/p&gt;                
                <param>
                    elem the element the content is inserted before                    
                </param>
                <param>
                    htmlText the string to be parsed and inserted before <code>elem</code>                    
                </param>
                <throws>
                    IllegalStateException if an HTMLEditorKit.Parser has not
                      been set on the document                    
                </throws>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="insertBeforeStart" type="void" line="1082">
                <params>
                    <param name="elem" type="Element"/>
                    <param name="htmlText" type="String"/>
                </params>
                <scope line="1084">
                    <declaration name="parent" type="Element" line="1085"/>
                    <scope line="1086"/>
                </scope>
            </method>
            <javadoc line="1091">
                Inserts the HTML specified as a string after the the end of the
                  given element.
                  &lt;p&gt;Consider the following structure (the &lt;code&gt;elem&lt;/code&gt;
                  parameter is &lt;b&gt;in bold&lt;/b&gt;).&lt;/p&gt;
                  &lt;pre&gt;
                  &amp;lt;body&gt;
                  |
                  &lt;b&gt;&amp;lt;div&gt;&lt;/b&gt;
                  /  \
                  &amp;lt;p&gt;   &amp;lt;p&gt;
                  &lt;/pre&gt;
                  &lt;p&gt;Invoking &lt;code&gt;insertAfterEnd(elem, &quot;&amp;lt;ul&gt;&amp;lt;li&gt;&quot;)&lt;/code&gt;
                  results in the following structure (new elements are &lt;font
                  color=&quot;red&quot;&gt;in red&lt;/font&gt;).&lt;/p&gt;
                  &lt;pre&gt;
                  &amp;lt;body&gt;
                  /  \
                  &lt;b&gt;&amp;lt;div&gt;&lt;/b&gt; &lt;font color=&quot;red&quot;&gt;&amp;lt;ul&gt;&lt;/font&gt;
                  / \    \
                  &amp;lt;p&gt; &amp;lt;p&gt;  &lt;font color=&quot;red&quot;&gt;&amp;lt;li&gt;&lt;/font&gt;
                  &lt;/pre&gt;
                  &lt;p&gt;Unlike the &lt;code&gt;insertBeforeEnd&lt;/code&gt; method, new elements
                  become &lt;em&gt;siblings&lt;/em&gt; of the specified element, not
                  children.&lt;/p&gt;
                  &lt;p&gt;If either &lt;code&gt;elem&lt;/code&gt; or &lt;code&gt;htmlText&lt;/code&gt;
                  parameter is &lt;code&gt;null&lt;/code&gt;, no changes are made to the
                  document.&lt;/p&gt;
                  &lt;p&gt;For this to work correcty, the document must have an
                  &lt;code&gt;HTMLEditorKit.Parser&lt;/code&gt; set. This will be the case
                  if the document was created from an HTMLEditorKit via the
                  &lt;code&gt;createDefaultDocument&lt;/code&gt; method.&lt;/p&gt;                
                <param>
                    elem the element the content is inserted after                    
                </param>
                <param>
                    htmlText the string to be parsed and inserted after <code>elem</code>                    
                </param>
                <throws>
                    IllegalStateException if an HTMLEditorKit.Parser has not
                      been set on the document                    
                </throws>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="insertAfterEnd" type="void" line="1129">
                <params>
                    <param name="elem" type="Element"/>
                    <param name="htmlText" type="String"/>
                </params>
                <scope line="1131">
                    <declaration name="parent" type="Element" line="1132"/>
                    <scope line="1133">
                        <declaration name="offset" type="int" line="1134"/>
                        <scope line="1135"/>
                        <scope line="1138"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1145">
                Returns the element that has the given id &lt;code&gt;Attribute&lt;/code&gt;.
                  If the element can&apos;t be found, &lt;code&gt;null&lt;/code&gt; is returned.
                  Note that this method works on an &lt;code&gt;Attribute&lt;/code&gt;,
                  &lt;i&gt;not&lt;/i&gt; a character tag.  In the following HTML snippet:
                  &lt;code&gt;&amp;lt;a id=&quot;HelloThere&quot;&amp;gt;&lt;/code&gt; the attribute is
                  &apos;id&apos; and the character tag is &apos;a&apos;.
                  This is a convenience method for
                  &lt;code&gt;getElement(RootElement, HTML.Attribute.id, id)&lt;/code&gt;.
                  This is not thread-safe.                
                <param>
                    id  the string representing the desired <code>Attribute</code>                    
                </param>
                <return>
                    the element with the specified <code>Attribute</code>
                      or <code>null</code> if it can't be found,
                      or <code>null</code> if <code>id</code> is <code>null</code>                    
                </return>
                <see>
                    javax.swing.text.html.HTML.Attribute                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getElement" type="Element" line="1162">
                <params>
                    <param name="id" type="String"/>
                </params>
                <scope line="1163"/>
            </method>
            <javadoc line="1168">
                Returns the child element of &lt;code&gt;e&lt;/code&gt; that contains the
                  attribute, &lt;code&gt;attribute&lt;/code&gt; with value &lt;code&gt;value&lt;/code&gt;, or
                  &lt;code&gt;null&lt;/code&gt; if one isn&apos;t found. This is not thread-safe.                
                <param>
                    e the root element where the search begins                    
                </param>
                <param>
                    attribute the desired <code>Attribute</code>                    
                </param>
                <param>
                    value the values for the specified <code>Attribute</code>                    
                </param>
                <return>
                    the element with the specified <code>Attribute</code>
                      and the specified <code>value</code>, or <code>null</code>
                      if it can't be found                    
                </return>
                <see>
                    javax.swing.text.html.HTML.Attribute                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getElement" type="Element" line="1181">
                <params>
                    <param name="e" type="Element"/>
                    <param name="attribute" type="Object"/>
                    <param name="value" type="Object"/>
                </params>
            </method>
            <javadoc line="1184">
                Returns the child element of &lt;code&gt;e&lt;/code&gt; that contains the
                  attribute, &lt;code&gt;attribute&lt;/code&gt; with value &lt;code&gt;value&lt;/code&gt;, or
                  &lt;code&gt;null&lt;/code&gt; if one isn&apos;t found. This is not thread-safe.
                  &lt;p&gt;
                  If &lt;code&gt;searchLeafAttributes&lt;/code&gt; is true, and &lt;code&gt;e&lt;/code&gt; is
                  a leaf, any attributes that are instances of &lt;code&gt;HTML.Tag&lt;/code&gt;
                  with a value that is an &lt;code&gt;AttributeSet&lt;/code&gt; will also be checked.                
                <param>
                    e the root element where the search begins                    
                </param>
                <param>
                    attribute the desired <code>Attribute</code>                    
                </param>
                <param>
                    value the values for the specified <code>Attribute</code>                    
                </param>
                <return>
                    the element with the specified <code>Attribute</code>
                      and the specified <code>value</code>, or <code>null</code>
                      if it can't be found                    
                </return>
                <see>
                    javax.swing.text.html.HTML.Attribute                    
                </see>
            </javadoc>
            <method name="getElement" type="Element" line="1200">
                <params>
                    <param name="e" type="Element"/>
                    <param name="attribute" type="Object"/>
                    <param name="value" type="Object"/>
                    <param name="searchLeafAttributes" type="boolean"/>
                </params>
                <declaration name="attr" type="AttributeSet" line="1201"/>
                <scope line="1202">
                    <scope line="1203"/>
                </scope>
                <scope line="1207">
                    <scope line="1208">
                        <declaration name="retValue" type="Element" line="1209"/>
                        <scope line="1210"/>
                    </scope>
                </scope>
                <scope line="1215">
                    <declaration name="names" type="Enumeration" line="1216"/>
                    <scope line="1217">
                        <scope line="1218">
                            <declaration name="name" type="Object" line="1219"/>
                            <scope line="1220">
                                <declaration name="check" type="AttributeSet" line="1221"/>
                                <scope line="1222"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="1231">
                Verifies the document has an &lt;code&gt;HTMLEditorKit.Parser&lt;/code&gt; set.
                  If &lt;code&gt;getParser&lt;/code&gt; returns &lt;code&gt;null&lt;/code&gt;, this will throw an
                  IllegalStateException.                
                <throws>
                    IllegalStateException if the document does not have a Parser                    
                </throws>
            </javadoc>
            <method name="verifyParser" type="void" line="1237">
                <scope line="1238"/>
            </method>
            <javadoc line="1242">
                Installs a default Parser if one has not been installed yet.                
            </javadoc>
            <method name="installParserIfNecessary" type="void" line="1245">
                <scope line="1246"/>
            </method>
            <javadoc line="1250">
                Inserts a string of HTML into the document at the given position.
                  &lt;code&gt;parent&lt;/code&gt; is used to identify the location to insert the
                  &lt;code&gt;html&lt;/code&gt;. If &lt;code&gt;parent&lt;/code&gt; is a leaf this can have
                  unexpected results.                
            </javadoc>
            <method name="insertHTML" type="void" line="1256">
                <params>
                    <param name="parent" type="Element"/>
                    <param name="offset" type="int"/>
                    <param name="html" type="String"/>
                    <param name="wantsTrailingNewline" type="boolean"/>
                </params>
                <scope line="1257">
                    <declaration name="parser" type="HTMLEditorKit.Parser" line="1258"/>
                    <scope line="1259">
                        <declaration name="lastOffset" type="int" line="1260"/>
                        <declaration name="charElement" type="Element" line="1261"/>
                        <declaration name="commonParent" type="Element" line="1262"/>
                        <declaration name="pop" type="int" line="1263"/>
                        <declaration name="push" type="int" line="1264"/>
                        <scope line="1265">
                            <scope line="1266"/>
                            <scope line="1270"/>
                        </scope>
                        <scope line="1274"/>
                        <scope line="1278">
                            <declaration name="reader" type="HTMLReader" line="1279"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="1286">
                Removes child Elements of the passed in Element &lt;code&gt;e&lt;/code&gt;. This
                  will do the necessary cleanup to ensure the element representing the
                  end character is correctly created.
                  &lt;p&gt;This is not a general purpose method, it assumes that &lt;code&gt;e&lt;/code&gt;
                  will still have at least one child after the remove, and it assumes
                  the character at &lt;code&gt;e.getStartOffset() - 1&lt;/code&gt; is a newline and
                  is of length 1.                
            </javadoc>
            <method name="removeElements" type="void" line="1295">
                <params>
                    <param name="e" type="Element"/>
                    <param name="index" type="int"/>
                    <param name="count" type="int"/>
                </params>
                <scope line="1297">
                    <declaration name="start" type="int" line="1298"/>
                    <declaration name="end" type="int" line="1299"/>
                    <scope line="1300"/>
                    <scope line="1303"/>
                </scope>
                <scope line="1307"/>
            </method>
            <javadoc line="1311">
                Called to remove child elements of &lt;code&gt;e&lt;/code&gt; when one of the
                  elements to remove is representing the end character.
                  &lt;p&gt;Since the Content will not allow a removal to the end character
                  this will do a remove from &lt;code&gt;start - 1&lt;/code&gt; to &lt;code&gt;end&lt;/code&gt;.
                  The end Element(s) will be removed, and the element representing
                  &lt;code&gt;start - 1&lt;/code&gt; to &lt;code&gt;start&lt;/code&gt; will be recreated. This
                  Element has to be recreated as after the content removal its offsets
                  become &lt;code&gt;start - 1&lt;/code&gt; to &lt;code&gt;start - 1&lt;/code&gt;.                
            </javadoc>
            <method name="removeElementsAtEnd" type="void" line="1321">
                <params>
                    <param name="e" type="Element"/>
                    <param name="index" type="int"/>
                    <param name="count" type="int"/>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                </params>
                <declaration name="isLeaf" type="boolean" line="1322"/>
                <declaration name="dde" type="DefaultDocumentEvent" line="1323"/>
                <scope line="1324">
                    <declaration name="endE" type="Element" line="1325"/>
                    <scope line="1327"/>
                    <scope line="1330"/>
                </scope>
                <scope line="1334">
                    <declaration name="newLineE" type="Element" line="1335"/>
                    <scope line="1336"/>
                </scope>
            </method>
            <javadoc line="1348">
                This is used by &lt;code&gt;removeElementsAtEnd&lt;/code&gt;, it removes
                  &lt;code&gt;count&lt;/code&gt; elements starting at &lt;code&gt;start&lt;/code&gt; from
                  &lt;code&gt;e&lt;/code&gt;.  If &lt;code&gt;remove&lt;/code&gt; is true text of length
                  &lt;code&gt;start - 1&lt;/code&gt; to &lt;code&gt;end - 1&lt;/code&gt; is removed.  If
                  &lt;code&gt;create&lt;/code&gt; is true a new leaf is created of length 1.                
            </javadoc>
            <method name="replace" type="void" line="1355">
                <params>
                    <param name="dde" type="DefaultDocumentEvent"/>
                    <param name="e" type="Element"/>
                    <param name="index" type="int"/>
                    <param name="count" type="int"/>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                    <param name="remove" type="boolean"/>
                    <param name="create" type="boolean"/>
                </params>
                <declaration name="added" type="Element[]" line="1356"/>
                <declaration name="attrs" type="AttributeSet" line="1357"/>
                <declaration name="removed" type="Element[]" line="1358"/>
                <scope line="1359"/>
                <scope line="1362">
                    <declaration name="u" type="UndoableEdit" line="1363"/>
                    <scope line="1364"/>
                </scope>
                <scope line="1368"/>
                <scope line="1372"/>
            </method>
            <javadoc line="1378">
                Called to remove child Elements when the end is not touched.                
            </javadoc>
            <method name="removeElements" type="void" line="1381">
                <params>
                    <param name="e" type="Element"/>
                    <param name="index" type="int"/>
                    <param name="count" type="int"/>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                </params>
                <declaration name="removed" type="Element[]" line="1382"/>
                <declaration name="added" type="Element[]" line="1383"/>
                <scope line="1384"/>
                <declaration name="dde" type="DefaultDocumentEvent" line="1387"/>
                <declaration name="u" type="UndoableEdit" line="1390"/>
                <scope line="1391"/>
                <scope line="1397"/>
            </method>
            <method name="obtainLock" type="void" line="1401"/>
            <method name="releaseLock" type="void" line="1404"/>
            <javadoc line="1407">
                Notifies all listeners that have registered interest for
                  notification on this event type.  The event instance
                  is lazily created using the parameters passed into
                  the fire method.                
                <param>
                    e the event                    
                </param>
                <see>
                    EventListenerList                    
                </see>
            </javadoc>
            <method name="fireChangedUpdate" type="void" line="1415">
                <params>
                    <param name="e" type="DocumentEvent"/>
                </params>
            </method>
            <javadoc line="1418">
                Notifies all listeners that have registered interest for
                  notification on this event type.  The event instance
                  is lazily created using the parameters passed into
                  the fire method.                
                <param>
                    e the event                    
                </param>
                <see>
                    EventListenerList                    
                </see>
            </javadoc>
            <method name="fireUndoableEditUpdate" type="void" line="1426">
                <params>
                    <param name="e" type="UndoableEditEvent"/>
                </params>
            </method>
            <method name="hasBaseTag" type="boolean" line="1429"/>
            <method name="getBaseTarget" type="String" line="1432"/>
            <declaration name="frameDocument" type="boolean" line="1435"/>
            <declaration name="preservesUnknownTags" type="boolean" line="1436"/>
            <declaration name="radioButtonGroupsMap" type="HashMap&lt;String,ButtonGroup&gt;" line="1437"/>
            <declaration name="TokenThreshold" type="String" line="1438"/>
            <javadoc line="1438">
                Document property for the number of tokens to buffer
                  before building an element subtree to represent them.                
            </javadoc>
            <declaration name="MaxThreshold" type="int" line="1443"/>
            <declaration name="StepThreshold" type="int" line="1444"/>
            <declaration name="AdditionalComments" type="String" line="1445"/>
            <javadoc line="1445">
                Document property key value. The value for the key will be a Vector
                  of Strings that are comments not found in the body.                
            </javadoc>
            <declaration name="StyleType" type="String" line="1450"/>
            <javadoc line="1450">
                Document property key value. The value for the key will be a
                  String indicating the default type of stylesheet links.                
            </javadoc>
            <declaration name="base" type="URL" line="1455"/>
            <javadoc line="1455">
                The location to resolve relative URLs against.  By
                  default this will be the document&apos;s URL if the document
                  was loaded from a URL.  If a base tag is found and
                  can be parsed, it will be used as the base location.                
            </javadoc>
            <declaration name="hasBaseTag" type="boolean" line="1462"/>
            <javadoc line="1462">
                does the document have base tag                
            </javadoc>
            <declaration name="baseTarget" type="String" line="1466"/>
            <javadoc line="1466">
                BASE tag&apos;s TARGET attribute value                
            </javadoc>
            <declaration name="parser" type="HTMLEditorKit.Parser" line="1470"/>
            <javadoc line="1470">
                The parser that is used when inserting html into the existing
                  document.                
            </javadoc>
            <declaration name="contentAttributeSet" type="AttributeSet" line="1475"/>
            <javadoc line="1475">
                Used for inserts when a null AttributeSet is supplied.                
            </javadoc>
            <declaration name="MAP_PROPERTY" type="String" line="1479"/>
            <javadoc line="1479">
                Property Maps are registered under, will be a Hashtable.                
            </javadoc>
            <declaration name="NEWLINE" type="char[]" line="1483"/>
            <declaration name="I18NProperty" type="String" line="1484"/>
            <javadoc line="1484">
                I18N property key.                
                <see>
                    AbstractDocument#I18NProperty                    
                </see>
            </javadoc>
            <scope line="1489"/>
            <class name="Iterator" line="1495">
                <javadoc line="1495">
                    An iterator to iterate over a particular type of
                      tag.  The iterator is not thread safe.  If reliable
                      access to the document is not already ensured by
                      the context under which the iterator is being used,
                      its use should be performed under the protection of
                      Document.render.                    
                </javadoc>
                <method name="getAttributes" type="AttributeSet" line="1504"/>
                <javadoc line="1504">
                    Return the attributes for this tag.                    
                    <return>
                        the <code>AttributeSet</code> for this tag, or
                          <code>null</code> if none can be found                        
                    </return>
                </javadoc>
                <method name="getStartOffset" type="int" line="1510"/>
                <javadoc line="1510">
                    Returns the start of the range for which the current occurrence of
                      the tag is defined and has the same attributes.                    
                    <return>
                        the start of the range, or -1 if it can't be found                        
                    </return>
                </javadoc>
                <method name="getEndOffset" type="int" line="1516"/>
                <javadoc line="1516">
                    Returns the end of the range for which the current occurrence of
                      the tag is defined and has the same attributes.                    
                    <return>
                        the end of the range                        
                    </return>
                </javadoc>
                <method name="next" type="void" line="1522"/>
                <javadoc line="1522">
                    Move the iterator forward to the next occurrence
                      of the tag it represents.                    
                </javadoc>
                <method name="isValid" type="boolean" line="1527"/>
                <javadoc line="1527">
                    Indicates if the iterator is currently
                      representing an occurrence of a tag.  If
                      false there are no more tags for this iterator.                    
                    <return>
                        true if the iterator is currently representing an
                          occurrence of a tag, otherwise returns false                        
                    </return>
                </javadoc>
                <method name="getTag" type="HTML.Tag" line="1535"/>
                <javadoc line="1535">
                    Type of tag this iterator represents.                    
                </javadoc>
            </class>
            <class name="LeafIterator" line="1540">
                <extends class="Iterator"/>
                <javadoc line="1540">
                    An iterator to iterate over a particular type of tag.                    
                </javadoc>
                <method name="LeafIterator" type="constructor" line="1544">
                    <params>
                        <param name="t" type="HTML.Tag"/>
                        <param name="doc" type="Document"/>
                    </params>
                </method>
                <javadoc line="1550">
                    Returns the attributes for this tag.                    
                    <return>
                        the <code>AttributeSet</code> for this tag,
                          or <code>null</code> if none can be found                        
                    </return>
                </javadoc>
                <method name="getAttributes" type="AttributeSet" line="1555">
                    <declaration name="elem" type="Element" line="1556"/>
                    <scope line="1557">
                        <declaration name="a" type="AttributeSet" line="1558"/>
                        <scope line="1559"/>
                    </scope>
                </method>
                <javadoc line="1566">
                    Returns the start of the range for which the current occurrence of
                      the tag is defined and has the same attributes.                    
                    <return>
                        the start of the range, or -1 if it can't be found                        
                    </return>
                </javadoc>
                <method name="getStartOffset" type="int" line="1571">
                    <declaration name="elem" type="Element" line="1572"/>
                    <scope line="1573"/>
                </method>
                <javadoc line="1578">
                    Returns the end of the range for which the current occurrence of
                      the tag is defined and has the same attributes.                    
                    <return>
                        the end of the range                        
                    </return>
                </javadoc>
                <method name="getEndOffset" type="int" line="1583"/>
                <javadoc line="1586">
                    Moves the iterator forward to the next occurrence
                      of the tag it represents.                    
                </javadoc>
                <method name="next" type="void" line="1590">
                    <scope line="1591">
                        <declaration name="elem" type="Element" line="1592"/>
                        <scope line="1593">
                            <declaration name="a" type="AttributeSet" line="1594"/>
                            <scope line="1595"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="1602">
                    Returns the type of tag this iterator represents.                    
                    <return>
                        the <code>HTML.Tag</code> that this iterator represents.                        
                    </return>
                    <see>
                        javax.swing.text.html.HTML.Tag                        
                    </see>
                </javadoc>
                <method name="getTag" type="HTML.Tag" line="1607"/>
                <javadoc line="1610">
                    Returns true if the current position is not &lt;code&gt;null&lt;/code&gt;.                    
                    <return>
                        true if current position is not <code>null</code>,
                          otherwise returns false                        
                    </return>
                </javadoc>
                <method name="isValid" type="boolean" line="1615"/>
                <javadoc line="1618">
                    Moves the given iterator to the next leaf element.                    
                    <param>
                        iter  the iterator to be scanned                        
                    </param>
                </javadoc>
                <method name="nextLeaf" type="void" line="1622">
                    <params>
                        <param name="iter" type="ElementIterator"/>
                    </params>
                    <scope line="1623">
                        <declaration name="e" type="Element" line="1624"/>
                        <scope line="1625"/>
                    </scope>
                </method>
                <javadoc line="1630">
                    Marches a cloned iterator forward to locate the end
                      of the run.  This sets the value of &lt;code&gt;endOffset&lt;/code&gt;.                    
                </javadoc>
                <method name="setEndOffset" type="void" line="1634">
                    <declaration name="a0" type="AttributeSet" line="1635"/>
                    <declaration name="fwd" type="ElementIterator" line="1637"/>
                    <scope line="1638">
                        <declaration name="e" type="Element" line="1639"/>
                        <declaration name="a1" type="AttributeSet" line="1640"/>
                        <scope line="1641"/>
                    </scope>
                </method>
                <declaration name="endOffset" type="int" line="1647"/>
                <declaration name="tag" type="HTML.Tag" line="1648"/>
                <declaration name="pos" type="ElementIterator" line="1649"/>
            </class>
            <class name="HTMLReader" line="1651">
                <extends class="HTMLEditorKit.ParserCallback"/>
                <javadoc line="1651">
                    An HTML reader to load an HTML document with an HTML
                      element structure.  This is a set of callbacks from
                      the parser, implemented to create a set of elements
                      tagged with attributes.  The parse builds up tokens
                      (ElementSpec) that describe the element subtree desired,
                      and burst it into the document under the protection of
                      a write lock using the insert method on the document
                      outer class.
                      &lt;p&gt;
                      The reader can be configured by registering actions
                      (of type &lt;code&gt;HTMLDocument.HTMLReader.TagAction&lt;/code&gt;)
                      that describe how to handle the action.  The idea behind
                      the actions provided is that the most natural text editing
                      operations can be provided if the element structure boils
                      down to paragraphs with runs of some kind of style
                      in them.  Some things are more naturally specified
                      structurally, so arbitrary structure should be allowed
                      above the paragraphs, but will need to be edited with structural
                      actions.  The implication of this is that some of the
                      HTML elements specified in the stream being parsed will
                      be collapsed into attributes, and in some cases paragraphs
                      will be synthesized.  When HTML elements have been
                      converted to attributes, the attribute key will be of
                      type HTML.Tag, and the value will be of type AttributeSet
                      so that no information is lost.  This enables many of the
                      existing actions to work so that the user can type input,
                      hit the return key, backspace, delete, etc and have a
                      reasonable result.  Selections can be created, and attributes
                      applied or removed, etc.  With this in mind, the work done
                      by the reader can be categorized into the following kinds
                      of tasks:
                      &lt;dl&gt;
                      &lt;dt&gt;Block
                      &lt;dd&gt;Build the structure like it&apos;s specified in the stream.
                      This produces elements that contain other elements.
                      &lt;dt&gt;Paragraph
                      &lt;dd&gt;Like block except that it&apos;s expected that the element
                      will be used with a paragraph view so a paragraph element
                      won&apos;t need to be synthesized.
                      &lt;dt&gt;Character
                      &lt;dd&gt;Contribute the element as an attribute that will start
                      and stop at arbitrary text locations.  This will ultimately
                      be mixed into a run of text, with all of the currently
                      flattened HTML character elements.
                      &lt;dt&gt;Special
                      &lt;dd&gt;Produce an embedded graphical element.
                      &lt;dt&gt;Form
                      &lt;dd&gt;Produce an element that is like the embedded graphical
                      element, except that it also has a component model associated
                      with it.
                      &lt;dt&gt;Hidden
                      &lt;dd&gt;Create an element that is hidden from view when the
                      document is being viewed read-only, and visible when the
                      document is being edited.  This is useful to keep the
                      model from losing information, and used to store things
                      like comments and unrecognized tags.
                      &lt;/dl&gt;
                      &lt;p&gt;
                      Currently, &amp;lt;APPLET&amp;gt;, &amp;lt;PARAM&amp;gt;, &amp;lt;MAP&amp;gt;, &amp;lt;AREA&amp;gt;, &amp;lt;LINK&amp;gt;,
                      &amp;lt;SCRIPT&amp;gt; and &amp;lt;STYLE&amp;gt; are unsupported.
                      &lt;p&gt;
                      The assignment of the actions described is shown in the
                      following table for the tags defined in &lt;code&gt;HTML.Tag&lt;/code&gt;.&lt;P&gt;
                      &lt;table border=1 summary=&quot;HTML tags and assigned actions&quot;&gt;
                      &lt;tr&gt;&lt;th&gt;Tag&lt;/th&gt;&lt;th&gt;Action&lt;/th&gt;&lt;/tr&gt;
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;HTML.Tag.A&lt;/code&gt;         &lt;td&gt;CharacterAction
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;HTML.Tag.ADDRESS&lt;/code&gt;   &lt;td&gt;CharacterAction
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;HTML.Tag.APPLET&lt;/code&gt;    &lt;td&gt;HiddenAction
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;HTML.Tag.AREA&lt;/code&gt;      &lt;td&gt;AreaAction
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;HTML.Tag.B&lt;/code&gt;         &lt;td&gt;CharacterAction
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;HTML.Tag.BASE&lt;/code&gt;      &lt;td&gt;BaseAction
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;HTML.Tag.BASEFONT&lt;/code&gt;  &lt;td&gt;CharacterAction
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;HTML.Tag.BIG&lt;/code&gt;       &lt;td&gt;CharacterAction
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;HTML.Tag.BLOCKQUOTE&lt;/code&gt;&lt;td&gt;BlockAction
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;HTML.Tag.BODY&lt;/code&gt;      &lt;td&gt;BlockAction
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;HTML.Tag.BR&lt;/code&gt;        &lt;td&gt;SpecialAction
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;HTML.Tag.CAPTION&lt;/code&gt;   &lt;td&gt;BlockAction
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;HTML.Tag.CENTER&lt;/code&gt;    &lt;td&gt;BlockAction
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;HTML.Tag.CITE&lt;/code&gt;      &lt;td&gt;CharacterAction
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;HTML.Tag.CODE&lt;/code&gt;      &lt;td&gt;CharacterAction
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;HTML.Tag.DD&lt;/code&gt;        &lt;td&gt;BlockAction
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;HTML.Tag.DFN&lt;/code&gt;       &lt;td&gt;CharacterAction
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;HTML.Tag.DIR&lt;/code&gt;       &lt;td&gt;BlockAction
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;HTML.Tag.DIV&lt;/code&gt;       &lt;td&gt;BlockAction
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;HTML.Tag.DL&lt;/code&gt;        &lt;td&gt;BlockAction
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;HTML.Tag.DT&lt;/code&gt;        &lt;td&gt;ParagraphAction
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;HTML.Tag.EM&lt;/code&gt;        &lt;td&gt;CharacterAction
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;HTML.Tag.FONT&lt;/code&gt;      &lt;td&gt;CharacterAction
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;HTML.Tag.FORM&lt;/code&gt;      &lt;td&gt;As of 1.4 a BlockAction
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;HTML.Tag.FRAME&lt;/code&gt;     &lt;td&gt;SpecialAction
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;HTML.Tag.FRAMESET&lt;/code&gt;  &lt;td&gt;BlockAction
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;HTML.Tag.H1&lt;/code&gt;        &lt;td&gt;ParagraphAction
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;HTML.Tag.H2&lt;/code&gt;        &lt;td&gt;ParagraphAction
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;HTML.Tag.H3&lt;/code&gt;        &lt;td&gt;ParagraphAction
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;HTML.Tag.H4&lt;/code&gt;        &lt;td&gt;ParagraphAction
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;HTML.Tag.H5&lt;/code&gt;        &lt;td&gt;ParagraphAction
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;HTML.Tag.H6&lt;/code&gt;        &lt;td&gt;ParagraphAction
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;HTML.Tag.HEAD&lt;/code&gt;      &lt;td&gt;HeadAction
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;HTML.Tag.HR&lt;/code&gt;        &lt;td&gt;SpecialAction
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;HTML.Tag.HTML&lt;/code&gt;      &lt;td&gt;BlockAction
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;HTML.Tag.I&lt;/code&gt;         &lt;td&gt;CharacterAction
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;HTML.Tag.IMG&lt;/code&gt;       &lt;td&gt;SpecialAction
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;HTML.Tag.INPUT&lt;/code&gt;     &lt;td&gt;FormAction
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;HTML.Tag.ISINDEX&lt;/code&gt;   &lt;td&gt;IsndexAction
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;HTML.Tag.KBD&lt;/code&gt;       &lt;td&gt;CharacterAction
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;HTML.Tag.LI&lt;/code&gt;        &lt;td&gt;BlockAction
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;HTML.Tag.LINK&lt;/code&gt;      &lt;td&gt;LinkAction
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;HTML.Tag.MAP&lt;/code&gt;       &lt;td&gt;MapAction
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;HTML.Tag.MENU&lt;/code&gt;      &lt;td&gt;BlockAction
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;HTML.Tag.META&lt;/code&gt;      &lt;td&gt;MetaAction
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;HTML.Tag.NOFRAMES&lt;/code&gt;  &lt;td&gt;BlockAction
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;HTML.Tag.OBJECT&lt;/code&gt;    &lt;td&gt;SpecialAction
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;HTML.Tag.OL&lt;/code&gt;        &lt;td&gt;BlockAction
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;HTML.Tag.OPTION&lt;/code&gt;    &lt;td&gt;FormAction
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;HTML.Tag.P&lt;/code&gt;         &lt;td&gt;ParagraphAction
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;HTML.Tag.PARAM&lt;/code&gt;     &lt;td&gt;HiddenAction
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;HTML.Tag.PRE&lt;/code&gt;       &lt;td&gt;PreAction
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;HTML.Tag.SAMP&lt;/code&gt;      &lt;td&gt;CharacterAction
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;HTML.Tag.SCRIPT&lt;/code&gt;    &lt;td&gt;HiddenAction
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;HTML.Tag.SELECT&lt;/code&gt;    &lt;td&gt;FormAction
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;HTML.Tag.SMALL&lt;/code&gt;     &lt;td&gt;CharacterAction
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;HTML.Tag.STRIKE&lt;/code&gt;    &lt;td&gt;CharacterAction
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;HTML.Tag.S&lt;/code&gt;         &lt;td&gt;CharacterAction
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;HTML.Tag.STRONG&lt;/code&gt;    &lt;td&gt;CharacterAction
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;HTML.Tag.STYLE&lt;/code&gt;     &lt;td&gt;StyleAction
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;HTML.Tag.SUB&lt;/code&gt;       &lt;td&gt;CharacterAction
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;HTML.Tag.SUP&lt;/code&gt;       &lt;td&gt;CharacterAction
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;HTML.Tag.TABLE&lt;/code&gt;     &lt;td&gt;BlockAction
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;HTML.Tag.TD&lt;/code&gt;        &lt;td&gt;BlockAction
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;HTML.Tag.TEXTAREA&lt;/code&gt;  &lt;td&gt;FormAction
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;HTML.Tag.TH&lt;/code&gt;        &lt;td&gt;BlockAction
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;HTML.Tag.TITLE&lt;/code&gt;     &lt;td&gt;TitleAction
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;HTML.Tag.TR&lt;/code&gt;        &lt;td&gt;BlockAction
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;HTML.Tag.TT&lt;/code&gt;        &lt;td&gt;CharacterAction
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;HTML.Tag.U&lt;/code&gt;         &lt;td&gt;CharacterAction
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;HTML.Tag.UL&lt;/code&gt;        &lt;td&gt;BlockAction
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;HTML.Tag.VAR&lt;/code&gt;       &lt;td&gt;CharacterAction
                      &lt;/table&gt;
                      &lt;p&gt;
                      Once &amp;lt;/html&gt; is encountered, the Actions are no longer notified.                    
                </javadoc>
                <method name="HTMLReader" type="constructor" line="1794">
                    <params>
                        <param name="offset" type="int"/>
                    </params>
                </method>
                <method name="HTMLReader" type="constructor" line="1797">
                    <params>
                        <param name="offset" type="int"/>
                        <param name="popDepth" type="int"/>
                        <param name="pushDepth" type="int"/>
                        <param name="insertTag" type="HTML.Tag"/>
                    </params>
                </method>
                <javadoc line="1800">
                    Generates a RuntimeException (will eventually generate
                      a BadLocationException when API changes are alloced) if inserting
                      into non empty document, &lt;code&gt;insertTag&lt;/code&gt; is
                      non-&lt;code&gt;null&lt;/code&gt;, and &lt;code&gt;offset&lt;/code&gt; is not in the body.                    
                </javadoc>
                <method name="HTMLReader" type="constructor" line="1806">
                    <params>
                        <param name="offset" type="int"/>
                        <param name="popDepth" type="int"/>
                        <param name="pushDepth" type="int"/>
                        <param name="insertTag" type="HTML.Tag"/>
                        <param name="insertInsertTag" type="boolean"/>
                        <param name="insertAfterImplied" type="boolean"/>
                        <param name="wantsTrailingNewline" type="boolean"/>
                    </params>
                    <declaration name="na" type="TagAction" line="1812"/>
                    <declaration name="ba" type="TagAction" line="1813"/>
                    <declaration name="pa" type="TagAction" line="1814"/>
                    <declaration name="ca" type="TagAction" line="1815"/>
                    <declaration name="sa" type="TagAction" line="1816"/>
                    <declaration name="fa" type="TagAction" line="1817"/>
                    <declaration name="ha" type="TagAction" line="1818"/>
                    <declaration name="conv" type="TagAction" line="1819"/>
                    <scope line="1894"/>
                    <scope line="1901"/>
                    <scope line="1904"/>
                    <scope line="1913">
                        <scope line="1915"/>
                    </scope>
                    <scope line="1919">
                        <declaration name="targetOffset" type="int" line="1920"/>
                        <declaration name="elem" type="Element" line="1921"/>
                        <scope line="1922"/>
                        <scope line="1925">
                            <declaration name="index" type="int" line="1926"/>
                        </scope>
                        <declaration name="attrs" type="AttributeSet" line="1929"/>
                        <scope line="1930">
                            <declaration name="tagToInsertInto" type="HTML.Tag" line="1931"/>
                            <scope line="1932"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="1938">
                    Generates an initial batch of end &lt;code&gt;ElementSpecs&lt;/code&gt;
                      in parseBuffer to position future inserts into the body.                    
                </javadoc>
                <method name="generateEndsSpecsForMidInsert" type="void" line="1942">
                    <declaration name="count" type="int" line="1943"/>
                    <declaration name="joinNext" type="boolean" line="1944"/>
                    <scope line="1945">
                        <scope line="1947"/>
                    </scope>
                    <scope line="1952"/>
                    <scope line="1955">
                        <scope line="1956">
                            <scope line="1957">
                                <declaration name="newAttrs" type="SimpleAttributeSet" line="1958"/>
                                <declaration name="spec" type="ElementSpec" line="1960"/>
                            </scope>
                        </scope>
                        <scope line="1964"/>
                        <scope line="1966"/>
                        <scope line="1969">
                            <declaration name="spec" type="ElementSpec" line="1970"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="1976">
                    @return number of parents to reach the child at offset.                    
                </javadoc>
                <method name="depthTo" type="int" line="1979">
                    <params>
                        <param name="offset" type="int"/>
                    </params>
                    <declaration name="e" type="Element" line="1980"/>
                    <declaration name="count" type="int" line="1981"/>
                    <scope line="1982"/>
                </method>
                <javadoc line="1988">
                    @return number of parents of the leaf at &lt;code&gt;offset&lt;/code&gt;
                      until a parent with name, &lt;code&gt;name&lt;/code&gt; has been
                      found. -1 indicates no matching parent with
                      &lt;code&gt;name&lt;/code&gt;.                    
                </javadoc>
                <method name="heightToElementWithName" type="int" line="1994">
                    <params>
                        <param name="name" type="Object"/>
                        <param name="offset" type="int"/>
                    </params>
                    <declaration name="e" type="Element" line="1995"/>
                    <declaration name="count" type="int" line="1996"/>
                    <scope line="1997"/>
                </method>
                <javadoc line="2003">
                    This will make sure there aren&apos;t two BODYs (the second is
                      typically created when you do a remove all, and then an insert).                    
                </javadoc>
                <method name="adjustEndElement" type="void" line="2007">
                    <declaration name="length" type="int" line="2008"/>
                    <scope line="2009"/>
                    <scope line="2013">
                        <declaration name="pPath" type="Element[]" line="2014"/>
                        <declaration name="pLength" type="int" line="2015"/>
                        <scope line="2016">
                            <declaration name="lastText" type="String" line="2017"/>
                            <declaration name="event" type="DefaultDocumentEvent" line="2018"/>
                            <declaration name="added" type="Element[]" line="2019"/>
                            <declaration name="removed" type="Element[]" line="2020"/>
                            <declaration name="index" type="int" line="2021"/>
                            <declaration name="firstEdit" type="ElementEdit" line="2027"/>
                            <declaration name="sas" type="SimpleAttributeSet" line="2028"/>
                            <scope line="2041">
                                <declaration name="u" type="UndoableEdit" line="2044"/>
                                <scope line="2045"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="2055"/>
                    <scope line="2057"/>
                </method>
                <method name="getPathTo" type="Element[]" line="2061">
                    <params>
                        <param name="offset" type="int"/>
                    </params>
                    <declaration name="elements" type="Stack&lt;Element&gt;" line="2062"/>
                    <declaration name="e" type="Element" line="2063"/>
                    <declaration name="index" type="int" line="2064"/>
                    <scope line="2065"/>
                    <declaration name="retValue" type="Element[]" line="2069"/>
                </method>
                <javadoc line="2073">
                    The last method called on the reader.  It allows
                      any pending changes to be flushed into the document.
                      Since this is currently loading synchronously, the entire
                      set of changes are pushed in at this point.                    
                </javadoc>
                <method name="flush" type="void" line="2079">
                    <scope line="2080">
                        <scope line="2081"/>
                    </scope>
                    <scope line="2086"/>
                </method>
                <javadoc line="2090">
                    Called by the parser to indicate a block of text was
                      encountered.                    
                </javadoc>
                <method name="handleText" type="void" line="2094">
                    <params>
                        <param name="data" type="char[]"/>
                        <param name="pos" type="int"/>
                    </params>
                    <scope line="2095"/>
                    <scope line="2098">
                        <declaration name="d" type="Object" line="2099"/>
                        <scope line="2100"/>
                        <scope line="2103">
                            <scope line="2104"/>
                        </scope>
                    </scope>
                    <scope line="2109"/>
                    <scope line="2112"/>
                    <scope line="2115"/>
                    <scope line="2118"/>
                    <scope line="2121">
                        <scope line="2122"/>
                    </scope>
                    <scope line="2126">
                        <scope line="2127"/>
                        <scope line="2132"/>
                    </scope>
                </method>
                <javadoc line="2137">
                    Callback from the parser.  Route to the appropriate
                      handler for the tag.                    
                </javadoc>
                <method name="handleStartTag" type="void" line="2141">
                    <params>
                        <param name="t" type="HTML.Tag"/>
                        <param name="a" type="MutableAttributeSet"/>
                        <param name="pos" type="int"/>
                    </params>
                    <scope line="2142"/>
                    <scope line="2145">
                        <scope line="2146"/>
                    </scope>
                    <scope line="2152"/>
                    <scope line="2155">
                        <declaration name="decl" type="String" line="2156"/>
                    </scope>
                    <scope line="2161"/>
                    <declaration name="action" type="TagAction" line="2164"/>
                    <scope line="2165"/>
                </method>
                <method name="handleComment" type="void" line="2169">
                    <params>
                        <param name="data" type="char[]"/>
                        <param name="pos" type="int"/>
                    </params>
                    <scope line="2170"/>
                    <scope line="2174">
                        <scope line="2175"/>
                    </scope>
                    <scope line="2179">
                        <scope line="2180"/>
                        <declaration name="sas" type="SimpleAttributeSet" line="2184"/>
                    </scope>
                    <declaration name="action" type="TagAction" line="2188"/>
                    <scope line="2189"/>
                </method>
                <javadoc line="2194">
                    Adds the comment &lt;code&gt;comment&lt;/code&gt; to the set of comments
                      maintained outside of the scope of elements.                    
                </javadoc>
                <method name="addExternalComment" type="void" line="2198">
                    <params>
                        <param name="comment" type="String"/>
                    </params>
                    <declaration name="comments" type="Object" line="2199"/>
                    <scope line="2200"/>
                    <scope line="2203"/>
                </method>
                <javadoc line="2209">
                    Callback from the parser.  Route to the appropriate
                      handler for the tag.                    
                </javadoc>
                <method name="handleEndTag" type="void" line="2213">
                    <params>
                        <param name="t" type="HTML.Tag"/>
                        <param name="pos" type="int"/>
                    </params>
                    <scope line="2214"/>
                    <scope line="2217"/>
                    <scope line="2220">
                        <scope line="2222"/>
                    </scope>
                    <declaration name="action" type="TagAction" line="2226"/>
                    <scope line="2227"/>
                </method>
                <javadoc line="2231">
                    Callback from the parser.  Route to the appropriate
                      handler for the tag.                    
                </javadoc>
                <method name="handleSimpleTag" type="void" line="2235">
                    <params>
                        <param name="t" type="HTML.Tag"/>
                        <param name="a" type="MutableAttributeSet"/>
                        <param name="pos" type="int"/>
                    </params>
                    <scope line="2236"/>
                    <scope line="2239">
                        <declaration name="decl" type="String" line="2240"/>
                    </scope>
                    <scope line="2245"/>
                    <declaration name="action" type="TagAction" line="2248"/>
                    <scope line="2249"/>
                    <scope line="2253"/>
                </method>
                <javadoc line="2257">
                    This is invoked after the stream has been parsed, but before
                      &lt;code&gt;flush&lt;/code&gt;. &lt;code&gt;eol&lt;/code&gt; will be one of \n, \r
                      or \r\n, which ever is encountered the most in parsing the
                      stream.                    
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <method name="handleEndOfLineString" type="void" line="2264">
                    <params>
                        <param name="eol" type="String"/>
                    </params>
                    <scope line="2265"/>
                </method>
                <javadoc line="2269">
                    Registers a handler for the given tag.  By default
                      all of the well-known tags will have been registered.
                      This can be used to change the handling of a particular
                      tag or to add support for custom tags.                    
                </javadoc>
                <method name="registerTag" type="void" line="2275">
                    <params>
                        <param name="t" type="HTML.Tag"/>
                        <param name="a" type="TagAction"/>
                    </params>
                </method>
                <class name="TagAction" line="2278">
                    <javadoc line="2278">
                        An action to be performed in response
                          to parsing a tag.  This allows customization
                          of how each tag is handled and avoids a large
                          switch statement.                        
                    </javadoc>
                    <javadoc line="2285">
                        Called when a start tag is seen for the
                          type of tag this action was registered
                          to.  The tag argument indicates the actual
                          tag for those actions that are shared across
                          many tags.  By default this does nothing and
                          completely ignores the tag.                        
                    </javadoc>
                    <method name="start" type="void" line="2293">
                        <params>
                            <param name="t" type="HTML.Tag"/>
                            <param name="a" type="MutableAttributeSet"/>
                        </params>
                    </method>
                    <javadoc line="2295">
                        Called when an end tag is seen for the
                          type of tag this action was registered
                          to.  The tag argument indicates the actual
                          tag for those actions that are shared across
                          many tags.  By default this does nothing and
                          completely ignores the tag.                        
                    </javadoc>
                    <method name="end" type="void" line="2303">
                        <params>
                            <param name="t" type="HTML.Tag"/>
                        </params>
                    </method>
                </class>
                <class name="BlockAction" line="2306">
                    <extends class="TagAction"/>
                    <method name="start" type="void" line="2307">
                        <params>
                            <param name="t" type="HTML.Tag"/>
                            <param name="attr" type="MutableAttributeSet"/>
                        </params>
                    </method>
                    <method name="end" type="void" line="2310">
                        <params>
                            <param name="t" type="HTML.Tag"/>
                        </params>
                    </method>
                </class>
                <class name="FormTagAction" line="2314">
                    <extends class="BlockAction"/>
                    <javadoc line="2314">
                        Action used for the actual element form tag. This is named such
                          as there was already a public class named FormAction.                        
                    </javadoc>
                    <method name="start" type="void" line="2319">
                        <params>
                            <param name="t" type="HTML.Tag"/>
                            <param name="attr" type="MutableAttributeSet"/>
                        </params>
                    </method>
                    <method name="end" type="void" line="2323">
                        <params>
                            <param name="t" type="HTML.Tag"/>
                        </params>
                    </method>
                </class>
                <class name="ParagraphAction" line="2328">
                    <extends class="BlockAction"/>
                    <method name="start" type="void" line="2329">
                        <params>
                            <param name="t" type="HTML.Tag"/>
                            <param name="a" type="MutableAttributeSet"/>
                        </params>
                    </method>
                    <method name="end" type="void" line="2333">
                        <params>
                            <param name="t" type="HTML.Tag"/>
                        </params>
                    </method>
                </class>
                <class name="SpecialAction" line="2338">
                    <extends class="TagAction"/>
                    <method name="start" type="void" line="2339">
                        <params>
                            <param name="t" type="HTML.Tag"/>
                            <param name="a" type="MutableAttributeSet"/>
                        </params>
                    </method>
                </class>
                <class name="IsindexAction" line="2343">
                    <extends class="TagAction"/>
                    <method name="start" type="void" line="2344">
                        <params>
                            <param name="t" type="HTML.Tag"/>
                            <param name="a" type="MutableAttributeSet"/>
                        </params>
                    </method>
                </class>
                <class name="HiddenAction" line="2350">
                    <extends class="TagAction"/>
                    <method name="start" type="void" line="2351">
                        <params>
                            <param name="t" type="HTML.Tag"/>
                            <param name="a" type="MutableAttributeSet"/>
                        </params>
                    </method>
                    <method name="end" type="void" line="2354">
                        <params>
                            <param name="t" type="HTML.Tag"/>
                        </params>
                        <scope line="2355">
                            <declaration name="a" type="MutableAttributeSet" line="2356"/>
                        </scope>
                    </method>
                    <method name="isEmpty" type="boolean" line="2361">
                        <params>
                            <param name="t" type="HTML.Tag"/>
                        </params>
                        <scope line="2362"/>
                    </method>
                </class>
                <class name="MetaAction" line="2368">
                    <extends class="HiddenAction"/>
                    <javadoc line="2368">
                        Subclass of HiddenAction to set the content type for style sheets,
                          and to set the name of the default style sheet.                        
                    </javadoc>
                    <method name="start" type="void" line="2373">
                        <params>
                            <param name="t" type="HTML.Tag"/>
                            <param name="a" type="MutableAttributeSet"/>
                        </params>
                        <declaration name="equiv" type="Object" line="2374"/>
                        <scope line="2375">
                            <scope line="2377">
                                <declaration name="value" type="String" line="2378"/>
                            </scope>
                            <scope line="2382"/>
                        </scope>
                    </method>
                    <method name="isEmpty" type="boolean" line="2388">
                        <params>
                            <param name="t" type="HTML.Tag"/>
                        </params>
                    </method>
                </class>
                <class name="HeadAction" line="2392">
                    <extends class="BlockAction"/>
                    <javadoc line="2392">
                        End if overridden to create the necessary stylesheets that
                          are referenced via the link tag. It is done in this manner
                          as the meta tag can be used to specify an alternate style sheet,
                          and is not guaranteed to come before the link tags.                        
                    </javadoc>
                    <method name="start" type="void" line="2399">
                        <params>
                            <param name="t" type="HTML.Tag"/>
                            <param name="a" type="MutableAttributeSet"/>
                        </params>
                        <scope line="2401"/>
                    </method>
                    <method name="end" type="void" line="2405">
                        <params>
                            <param name="t" type="HTML.Tag"/>
                        </params>
                        <scope line="2407">
                            <declaration name="isDefaultCSS" type="boolean" line="2408"/>
                            <scope line="2409">
                                <declaration name="value" type="Object" line="2410"/>
                                <scope line="2411"/>
                                <scope line="2415">
                                    <declaration name="type" type="String" line="2416"/>
                                    <declaration name="isCSS" type="boolean" line="2417"/>
                                    <scope line="2418">
                                        <scope line="2419"/>
                                    </scope>
                                </scope>
                            </scope>
                        </scope>
                        <scope line="2426"/>
                    </method>
                    <method name="isEmpty" type="boolean" line="2430">
                        <params>
                            <param name="t" type="HTML.Tag"/>
                        </params>
                    </method>
                    <method name="handleLink" type="void" line="2433">
                        <params>
                            <param name="attr" type="AttributeSet"/>
                        </params>
                        <declaration name="type" type="String" line="2434"/>
                        <scope line="2435"/>
                        <scope line="2438">
                            <declaration name="rel" type="String" line="2439"/>
                            <declaration name="title" type="String" line="2440"/>
                            <declaration name="media" type="String" line="2441"/>
                            <scope line="2442"/>
                            <scope line="2445"/>
                            <scope line="2448">
                                <scope line="2450"/>
                            </scope>
                        </scope>
                    </method>
                </class>
                <class name="LinkAction" line="2457">
                    <extends class="HiddenAction"/>
                    <javadoc line="2457">
                        A subclass to add the AttributeSet to styles if the
                          attributes contains an attribute for &apos;rel&apos; with value
                          &apos;stylesheet&apos; or &apos;alternate stylesheet&apos;.                        
                    </javadoc>
                    <method name="start" type="void" line="2463">
                        <params>
                            <param name="t" type="HTML.Tag"/>
                            <param name="a" type="MutableAttributeSet"/>
                        </params>
                        <declaration name="rel" type="String" line="2464"/>
                        <scope line="2465">
                            <scope line="2467">
                                <scope line="2468"/>
                            </scope>
                        </scope>
                    </method>
                </class>
                <class name="MapAction" line="2478">
                    <extends class="TagAction"/>
                    <method name="start" type="void" line="2479">
                        <params>
                            <param name="t" type="HTML.Tag"/>
                            <param name="a" type="MutableAttributeSet"/>
                        </params>
                    </method>
                    <method name="end" type="void" line="2483">
                        <params>
                            <param name="t" type="HTML.Tag"/>
                        </params>
                    </method>
                </class>
                <class name="AreaAction" line="2486">
                    <extends class="TagAction"/>
                    <method name="start" type="void" line="2487">
                        <params>
                            <param name="t" type="HTML.Tag"/>
                            <param name="a" type="MutableAttributeSet"/>
                        </params>
                        <scope line="2488"/>
                    </method>
                    <method name="end" type="void" line="2492">
                        <params>
                            <param name="t" type="HTML.Tag"/>
                        </params>
                    </method>
                </class>
                <class name="StyleAction" line="2495">
                    <extends class="TagAction"/>
                    <method name="start" type="void" line="2496">
                        <params>
                            <param name="t" type="HTML.Tag"/>
                            <param name="a" type="MutableAttributeSet"/>
                        </params>
                        <scope line="2497">
                            <scope line="2498"/>
                        </scope>
                    </method>
                    <method name="end" type="void" line="2506">
                        <params>
                            <param name="t" type="HTML.Tag"/>
                        </params>
                    </method>
                    <method name="isEmpty" type="boolean" line="2509">
                        <params>
                            <param name="t" type="HTML.Tag"/>
                        </params>
                    </method>
                </class>
                <class name="PreAction" line="2513">
                    <extends class="BlockAction"/>
                    <method name="start" type="void" line="2514">
                        <params>
                            <param name="t" type="HTML.Tag"/>
                            <param name="attr" type="MutableAttributeSet"/>
                        </params>
                    </method>
                    <method name="end" type="void" line="2520">
                        <params>
                            <param name="t" type="HTML.Tag"/>
                        </params>
                    </method>
                </class>
                <class name="CharacterAction" line="2526">
                    <extends class="TagAction"/>
                    <method name="start" type="void" line="2527">
                        <params>
                            <param name="t" type="HTML.Tag"/>
                            <param name="attr" type="MutableAttributeSet"/>
                        </params>
                        <scope line="2529">
                            <declaration name="insert" type="boolean" line="2530"/>
                            <scope line="2531">
                                <scope line="2532"/>
                            </scope>
                            <scope line="2536"/>
                        </scope>
                        <scope line="2540"/>
                        <scope line="2544"/>
                    </method>
                    <method name="end" type="void" line="2548">
                        <params>
                            <param name="t" type="HTML.Tag"/>
                        </params>
                    </method>
                </class>
                <class name="ConvertAction" line="2552">
                    <extends class="TagAction"/>
                    <javadoc line="2552">
                        Provides conversion of HTML tag/attribute
                          mappings that have a corresponding StyleConstants
                          and CSS mapping.  The conversion is to CSS attributes.                        
                    </javadoc>
                    <method name="start" type="void" line="2558">
                        <params>
                            <param name="t" type="HTML.Tag"/>
                            <param name="attr" type="MutableAttributeSet"/>
                        </params>
                        <scope line="2560">
                            <declaration name="insert" type="boolean" line="2561"/>
                            <scope line="2562">
                                <scope line="2563"/>
                            </scope>
                            <scope line="2567"/>
                        </scope>
                        <scope line="2571"/>
                        <scope line="2574"/>
                        <declaration name="sheet" type="StyleSheet" line="2578"/>
                        <scope line="2579"/>
                        <scope line="2582"/>
                        <scope line="2585">
                            <declaration name="v" type="Object" line="2586"/>
                            <declaration name="value" type="String" line="2587"/>
                        </scope>
                        <scope line="2591">
                            <declaration name="v" type="Object" line="2592"/>
                            <declaration name="value" type="String" line="2593"/>
                        </scope>
                        <scope line="2597">
                            <declaration name="v" type="Object" line="2598"/>
                            <declaration name="value" type="String" line="2599"/>
                        </scope>
                        <scope line="2603">
                            <declaration name="v" type="Object" line="2604"/>
                            <declaration name="value" type="String" line="2605"/>
                        </scope>
                        <scope line="2609">
                            <declaration name="color" type="String" line="2610"/>
                            <scope line="2611"/>
                            <declaration name="face" type="String" line="2614"/>
                            <scope line="2615"/>
                            <declaration name="size" type="String" line="2618"/>
                            <scope line="2619"/>
                        </scope>
                    </method>
                    <method name="end" type="void" line="2624">
                        <params>
                            <param name="t" type="HTML.Tag"/>
                        </params>
                    </method>
                </class>
                <class name="AnchorAction" line="2628">
                    <extends class="CharacterAction"/>
                    <method name="start" type="void" line="2629">
                        <params>
                            <param name="t" type="HTML.Tag"/>
                            <param name="attr" type="MutableAttributeSet"/>
                        </params>
                    </method>
                    <method name="end" type="void" line="2633">
                        <params>
                            <param name="t" type="HTML.Tag"/>
                        </params>
                        <scope line="2634">
                            <declaration name="one" type="char[]" line="2635"/>
                        </scope>
                    </method>
                </class>
                <class name="TitleAction" line="2642">
                    <extends class="HiddenAction"/>
                    <method name="start" type="void" line="2643">
                        <params>
                            <param name="t" type="HTML.Tag"/>
                            <param name="attr" type="MutableAttributeSet"/>
                        </params>
                    </method>
                    <method name="end" type="void" line="2647">
                        <params>
                            <param name="t" type="HTML.Tag"/>
                        </params>
                    </method>
                    <method name="isEmpty" type="boolean" line="2651">
                        <params>
                            <param name="t" type="HTML.Tag"/>
                        </params>
                    </method>
                </class>
                <class name="BaseAction" line="2655">
                    <extends class="TagAction"/>
                    <method name="start" type="void" line="2656">
                        <params>
                            <param name="t" type="HTML.Tag"/>
                            <param name="attr" type="MutableAttributeSet"/>
                        </params>
                        <declaration name="href" type="String" line="2657"/>
                        <scope line="2658">
                            <scope line="2659">
                                <declaration name="newBase" type="URL" line="2660"/>
                            </scope>
                            <scope line="2664"/>
                        </scope>
                    </method>
                </class>
                <class name="ObjectAction" line="2670">
                    <extends class="SpecialAction"/>
                    <method name="start" type="void" line="2671">
                        <params>
                            <param name="t" type="HTML.Tag"/>
                            <param name="a" type="MutableAttributeSet"/>
                        </params>
                        <scope line="2672"/>
                        <scope line="2675"/>
                    </method>
                    <method name="end" type="void" line="2679">
                        <params>
                            <param name="t" type="HTML.Tag"/>
                        </params>
                        <scope line="2680"/>
                    </method>
                    <method name="addParameter" type="void" line="2684">
                        <params>
                            <param name="a" type="AttributeSet"/>
                        </params>
                        <declaration name="name" type="String" line="2685"/>
                        <declaration name="value" type="String" line="2686"/>
                        <scope line="2687">
                            <declaration name="objSpec" type="ElementSpec" line="2688"/>
                            <declaration name="objAttr" type="MutableAttributeSet" line="2689"/>
                        </scope>
                    </method>
                </class>
                <class name="FormAction" line="2694">
                    <extends class="SpecialAction"/>
                    <javadoc line="2694">
                        Action to support forms by building all of the elements
                          used to represent form controls.  This will process
                          the &amp;lt;INPUT&amp;gt;, &amp;lt;TEXTAREA&amp;gt;, &amp;lt;SELECT&amp;gt;,
                          and &amp;lt;OPTION&amp;gt; tags.  The element created by
                          this action is expected to have the attribute
                          &lt;code&gt;StyleConstants.ModelAttribute&lt;/code&gt; set to
                          the model that holds the state for the form control.
                          This enables multiple views, and allows document to
                          be iterated over picking up the data of the form.
                          The following are the model assignments for the
                          various type of form elements.
                          &lt;table summary=&quot;model assignments for the various types of form elements&quot;&gt;
                          &lt;tr&gt;
                          &lt;th&gt;Element Type
                          &lt;th&gt;Model Type
                          &lt;tr&gt;
                          &lt;td&gt;input, type button
                          &lt;td&gt;{@link DefaultButtonModel}&lt;tr&gt;
                          &lt;td&gt;input, type checkbox
                          &lt;td&gt;{@link javax.swing.JToggleButton.ToggleButtonModel}&lt;tr&gt;
                          &lt;td&gt;input, type image
                          &lt;td&gt;{@link DefaultButtonModel}&lt;tr&gt;
                          &lt;td&gt;input, type password
                          &lt;td&gt;{@link PlainDocument}&lt;tr&gt;
                          &lt;td&gt;input, type radio
                          &lt;td&gt;{@link javax.swing.JToggleButton.ToggleButtonModel}&lt;tr&gt;
                          &lt;td&gt;input, type reset
                          &lt;td&gt;{@link DefaultButtonModel}&lt;tr&gt;
                          &lt;td&gt;input, type submit
                          &lt;td&gt;{@link DefaultButtonModel}&lt;tr&gt;
                          &lt;td&gt;input, type text or type is null.
                          &lt;td&gt;{@link PlainDocument}&lt;tr&gt;
                          &lt;td&gt;select
                          &lt;td&gt;{@link DefaultComboBoxModel} or an {@link DefaultListModel}, with an item type of Option
                          &lt;tr&gt;
                          &lt;td&gt;textarea
                          &lt;td&gt;{@link PlainDocument}&lt;/table&gt;                        
                    </javadoc>
                    <method name="start" type="void" line="2734">
                        <params>
                            <param name="t" type="HTML.Tag"/>
                            <param name="attr" type="MutableAttributeSet"/>
                        </params>
                        <scope line="2735">
                            <declaration name="type" type="String" line="2736"/>
                            <scope line="2737"/>
                        </scope>
                        <scope line="2743"/>
                        <scope line="2748">
                            <declaration name="size" type="int" line="2749"/>
                            <declaration name="multiple" type="boolean" line="2750"/>
                            <scope line="2751">
                                <declaration name="m" type="OptionListModel" line="2752"/>
                                <scope line="2753"/>
                            </scope>
                            <scope line="2758"/>
                        </scope>
                        <scope line="2763">
                            <scope line="2765">
                                <declaration name="m" type="OptionListModel" line="2766"/>
                                <scope line="2768"/>
                            </scope>
                            <scope line="2773">
                                <declaration name="m" type="OptionComboBoxModel" line="2774"/>
                                <scope line="2776"/>
                            </scope>
                        </scope>
                        <scope line="2783"/>
                    </method>
                    <method name="end" type="void" line="2787">
                        <params>
                            <param name="t" type="HTML.Tag"/>
                        </params>
                        <scope line="2788"/>
                        <scope line="2791">
                            <scope line="2792"/>
                            <scope line="2796"/>
                        </scope>
                    </method>
                    <method name="setModel" type="void" line="2803">
                        <params>
                            <param name="type" type="String"/>
                            <param name="attr" type="MutableAttributeSet"/>
                        </params>
                        <scope line="2804"/>
                        <scope line="2807">
                            <declaration name="maxLength" type="int" line="2808"/>
                            <declaration name="doc" type="Document" line="2809"/>
                            <scope line="2810"/>
                            <scope line="2813"/>
                            <declaration name="value" type="String" line="2816"/>
                            <scope line="2817"/>
                            <scope line="2820"/>
                        </scope>
                        <scope line="2824"/>
                        <scope line="2827">
                            <declaration name="model" type="JToggleButton.ToggleButtonModel" line="2828"/>
                            <scope line="2829">
                                <declaration name="name" type="String" line="2830"/>
                                <scope line="2831"/>
                                <declaration name="radioButtonGroup" type="ButtonGroup" line="2834"/>
                                <scope line="2835"/>
                            </scope>
                            <declaration name="checked" type="boolean" line="2841"/>
                        </scope>
                    </method>
                    <declaration name="selectModel" type="Object" line="2846"/>
                    <javadoc line="2846">
                        If a &amp;lt;SELECT&amp;gt; tag is being processed, this
                          model will be a reference to the model being filled
                          with the &amp;lt;OPTION&amp;gt; elements (which produce
                          objects of type &lt;code&gt;Option&lt;/code&gt;.                        
                    </javadoc>
                    <declaration name="optionCount" type="int" line="2853"/>
                </class>
                <javadoc line="2855">
                    Pushes the current character style on a stack in preparation
                      for forming a new nested character style.                    
                </javadoc>
                <method name="pushCharacterStyle" type="void" line="2859"/>
                <javadoc line="2862">
                    Pops a previously pushed character style off the stack
                      to return to a previous style.                    
                </javadoc>
                <method name="popCharacterStyle" type="void" line="2866">
                    <scope line="2867"/>
                </method>
                <javadoc line="2872">
                    Adds the given content to the textarea document.
                      This method gets called when we are in a textarea
                      context.  Therefore all text that is seen belongs
                      to the text area and is hence added to the
                      TextAreaDocument associated with the text area.                    
                </javadoc>
                <method name="textAreaContent" type="void" line="2879">
                    <params>
                        <param name="data" type="char[]"/>
                    </params>
                    <scope line="2880"/>
                    <scope line="2883"/>
                </method>
                <javadoc line="2886">
                    Adds the given content that was encountered in a
                      PRE element.  This synthesizes lines to hold the
                      runs of text, and makes calls to addContent to
                      actually add the text.                    
                </javadoc>
                <method name="preContent" type="void" line="2892">
                    <params>
                        <param name="data" type="char[]"/>
                    </params>
                    <declaration name="last" type="int" line="2893"/>
                    <scope line="2894">
                        <scope line="2895">
                            <declaration name="a" type="MutableAttributeSet" line="2898"/>
                        </scope>
                    </scope>
                    <scope line="2904"/>
                </method>
                <javadoc line="2908">
                    Adds an instruction to the parse buffer to create a
                      block element with the given attributes.                    
                </javadoc>
                <method name="blockOpen" type="void" line="2912">
                    <params>
                        <param name="t" type="HTML.Tag"/>
                        <param name="attr" type="MutableAttributeSet"/>
                    </params>
                    <scope line="2913"/>
                    <scope line="2917"/>
                    <scope line="2920"/>
                    <declaration name="es" type="ElementSpec" line="2925"/>
                </method>
                <javadoc line="2928">
                    Adds an instruction to the parse buffer to close out
                      a block element of the given type.                    
                </javadoc>
                <method name="blockClose" type="void" line="2932">
                    <params>
                        <param name="t" type="HTML.Tag"/>
                    </params>
                    <scope line="2934"/>
                    <scope line="2937"/>
                    <scope line="2944">
                        <scope line="2947"/>
                    </scope>
                    <declaration name="prev" type="ElementSpec" line="2951"/>
                    <scope line="2952">
                        <declaration name="one" type="char[]" line="2953"/>
                    </scope>
                    <declaration name="es" type="ElementSpec" line="2957"/>
                </method>
                <javadoc line="2960">
                    Adds some text with the current character attributes.                    
                    <param>
                        data the content to add                        
                    </param>
                    <param>
                        offs the initial offset                        
                    </param>
                    <param>
                        length the length                        
                    </param>
                </javadoc>
                <method name="addContent" type="void" line="2966">
                    <params>
                        <param name="data" type="char[]"/>
                        <param name="offs" type="int"/>
                        <param name="length" type="int"/>
                    </params>
                </method>
                <javadoc line="2969">
                    Adds some text with the current character attributes.                    
                    <param>
                        data the content to add                        
                    </param>
                    <param>
                        offs the initial offset                        
                    </param>
                    <param>
                        length the length                        
                    </param>
                    <param>
                        generateImpliedPIfNecessary whether to generate implied
                          paragraphs                        
                    </param>
                </javadoc>
                <method name="addContent" type="void" line="2977">
                    <params>
                        <param name="data" type="char[]"/>
                        <param name="offs" type="int"/>
                        <param name="length" type="int"/>
                        <param name="generateImpliedPIfNecessary" type="boolean"/>
                    </params>
                    <scope line="2978"/>
                    <scope line="2981"/>
                    <declaration name="a" type="AttributeSet" line="2988"/>
                    <declaration name="es" type="ElementSpec" line="2989"/>
                    <scope line="2991">
                        <scope line="2992"/>
                        <scope line="2995"/>
                        <scope line="2998"/>
                    </scope>
                    <scope line="3001"/>
                </method>
                <javadoc line="3005">
                    Adds content that is basically specified entirely
                      in the attribute set.                    
                </javadoc>
                <method name="addSpecialElement" type="void" line="3009">
                    <params>
                        <param name="t" type="HTML.Tag"/>
                        <param name="a" type="MutableAttributeSet"/>
                    </params>
                    <scope line="3010"/>
                    <scope line="3017"/>
                    <scope line="3020"/>
                    <declaration name="one" type="char[]" line="3026"/>
                    <declaration name="es" type="ElementSpec" line="3028"/>
                    <scope line="3030"/>
                </method>
                <javadoc line="3034">
                    Flushes the current parse buffer into the document.                    
                    <param>
                        endOfStream true if there is no more content to parser                        
                    </param>
                </javadoc>
                <method name="flushBuffer" type="void" line="3038">
                    <params>
                        <param name="endOfStream" type="boolean"/>
                    </params>
                    <declaration name="oldLength" type="int" line="3039"/>
                    <declaration name="size" type="int" line="3040"/>
                    <scope line="3041"/>
                    <declaration name="spec" type="ElementSpec[]" line="3045"/>
                    <scope line="3047"/>
                    <scope line="3050"/>
                </method>
                <javadoc line="3057">
                    This will be invoked for the last flush, if &lt;code&gt;insertTag&lt;/code&gt;
                      is non null.                    
                </javadoc>
                <method name="adjustEndSpecsForPartialInsert" type="void" line="3061">
                    <declaration name="size" type="int" line="3062"/>
                    <scope line="3063">
                        <declaration name="removeCounter" type="int" line="3064"/>
                        <scope line="3065"/>
                    </scope>
                    <scope line="3070">
                        <declaration name="index" type="int" line="3071"/>
                        <scope line="3072">
                            <scope line="3073"/>
                        </scope>
                        <declaration name="cCount" type="int" line="3078"/>
                        <declaration name="cStart" type="int" line="3079"/>
                        <scope line="3080"/>
                        <scope line="3084">
                            <scope line="3085"/>
                            <scope line="3088">
                                <declaration name="lastText" type="char[]" line="3089"/>
                                <scope line="3090">
                                    <scope line="3092"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="3099">
                        <scope line="3100">
                            <declaration name="spec" type="ElementSpec" line="3101"/>
                            <scope line="3102">
                                <scope line="3103">
                                    <declaration name="attrs" type="SimpleAttributeSet" line="3104"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </method>
                <javadoc line="3113">
                    Adds the CSS rules in &lt;code&gt;rules&lt;/code&gt;.                    
                </javadoc>
                <method name="addCSSRules" type="void" line="3116">
                    <params>
                        <param name="rules" type="String"/>
                    </params>
                    <declaration name="ss" type="StyleSheet" line="3117"/>
                </method>
                <javadoc line="3120">
                    Adds the CSS stylesheet at &lt;code&gt;href&lt;/code&gt; to the known list
                      of stylesheets.                    
                </javadoc>
                <method name="linkCSSStyleSheet" type="void" line="3124">
                    <params>
                        <param name="href" type="String"/>
                    </params>
                    <declaration name="url" type="URL" line="3125"/>
                    <scope line="3126"/>
                    <scope line="3129">
                        <scope line="3130"/>
                        <scope line="3133"/>
                    </scope>
                    <scope line="3137"/>
                </method>
                <javadoc line="3141">
                    Returns true if can insert starting at &lt;code&gt;t&lt;/code&gt;. This
                      will return false if the insert tag is set, and hasn&apos;t been found
                      yet.                    
                </javadoc>
                <method name="canInsertTag" type="boolean" line="3146">
                    <params>
                        <param name="t" type="HTML.Tag"/>
                        <param name="attr" type="AttributeSet"/>
                        <param name="isBlockTag" type="boolean"/>
                    </params>
                    <scope line="3147">
                        <declaration name="needPImplied" type="boolean" line="3148"/>
                        <scope line="3149">
                            <scope line="3150">
                                <declaration name="nextTagIsInsertTag" type="boolean" line="3151"/>
                                <scope line="3152"/>
                            </scope>
                        </scope>
                        <scope line="3157"/>
                        <scope line="3161"/>
                    </scope>
                </method>
                <method name="isInsertTag" type="boolean" line="3167">
                    <params>
                        <param name="tag" type="HTML.Tag"/>
                    </params>
                </method>
                <method name="foundInsertTag" type="void" line="3170">
                    <params>
                        <param name="isBlockTag" type="boolean"/>
                    </params>
                    <scope line="3172">
                        <scope line="3173">
                            <scope line="3174">
                                <declaration name="newAttrs" type="AttributeSet" line="3175"/>
                                <declaration name="joinP" type="boolean" line="3176"/>
                                <scope line="3177">
                                    <declaration name="charElement" type="Element" line="3178"/>
                                    <declaration name="attrs" type="AttributeSet" line="3179"/>
                                    <scope line="3180"/>
                                    <scope line="3183">
                                        <declaration name="name" type="Object" line="3184"/>
                                        <scope line="3185">
                                            <declaration name="tag" type="HTML.Tag" line="3186"/>
                                            <scope line="3187"/>
                                        </scope>
                                    </scope>
                                </scope>
                                <scope line="3193"/>
                                <declaration name="es" type="ElementSpec" line="3197"/>
                                <scope line="3198"/>
                            </scope>
                        </scope>
                        <scope line="3204"/>
                    </scope>
                    <scope line="3207"/>
                    <scope line="3210">
                        <declaration name="es" type="ElementSpec" line="3211"/>
                    </scope>
                    <scope line="3216"/>
                    <scope line="3219"/>
                </method>
                <declaration name="receivedEndHTML" type="boolean" line="3225"/>
                <javadoc line="3225">
                    This is set to true when and end is invoked for &lt;html&gt;.                    
                </javadoc>
                <declaration name="flushCount" type="int" line="3229"/>
                <javadoc line="3229">
                    Number of times &lt;code&gt;flushBuffer&lt;/code&gt; has been invoked.                    
                </javadoc>
                <declaration name="insertAfterImplied" type="boolean" line="3233"/>
                <javadoc line="3233">
                    If true, behavior is similiar to insertTag, but instead of
                      waiting for insertTag will wait for first Element without
                      an &apos;implied&apos; attribute and begin inserting then.                    
                </javadoc>
                <declaration name="wantsTrailingNewline" type="boolean" line="3239"/>
                <javadoc line="3239">
                    This is only used if insertAfterImplied is true. If false, only
                      inserting content, and there is a trailing newline it is removed.                    
                </javadoc>
                <declaration name="threshold" type="int" line="3244"/>
                <declaration name="offset" type="int" line="3245"/>
                <declaration name="inParagraph" type="boolean" line="3246"/>
                <declaration name="impliedP" type="boolean" line="3247"/>
                <declaration name="inPre" type="boolean" line="3248"/>
                <declaration name="inTextArea" type="boolean" line="3249"/>
                <declaration name="textAreaDocument" type="TextAreaDocument" line="3250"/>
                <declaration name="inTitle" type="boolean" line="3251"/>
                <declaration name="lastWasNewline" type="boolean" line="3252"/>
                <declaration name="emptyAnchor" type="boolean" line="3253"/>
                <declaration name="midInsert" type="boolean" line="3254"/>
                <javadoc line="3254">
                    True if (!emptyDocument &amp;&amp; insertTag == null), this is used so
                      much it is cached.                    
                </javadoc>
                <declaration name="inBody" type="boolean" line="3259"/>
                <javadoc line="3259">
                    True when the body has been encountered.                    
                </javadoc>
                <declaration name="insertTag" type="HTML.Tag" line="3263"/>
                <javadoc line="3263">
                    If non null, gives parent Tag that insert is to happen at.                    
                </javadoc>
                <declaration name="insertInsertTag" type="boolean" line="3267"/>
                <javadoc line="3267">
                    If true, the insertTag is inserted, otherwise elements after
                      the insertTag is found are inserted.                    
                </javadoc>
                <declaration name="foundInsertTag" type="boolean" line="3272"/>
                <javadoc line="3272">
                    Set to true when insertTag has been found.                    
                </javadoc>
                <declaration name="insertTagDepthDelta" type="int" line="3276"/>
                <javadoc line="3276">
                    When foundInsertTag is set to true, this will be updated to
                      reflect the delta between the two structures. That is, it
                      will be the depth the inserts are happening at minus the
                      depth of the tags being passed in. A value of 0 (the common
                      case) indicates the structures match, a value greater than 0 indicates
                      the insert is happening at a deeper depth than the stream is
                      parsing, and a value less than 0 indicates the insert is happening earlier
                      in the tree that the parser thinks and that we will need to remove
                      EndTagType specs in the flushBuffer method.                    
                </javadoc>
                <declaration name="popDepth" type="int" line="3288"/>
                <javadoc line="3288">
                    How many parents to ascend before insert new elements.                    
                </javadoc>
                <declaration name="pushDepth" type="int" line="3292"/>
                <javadoc line="3292">
                    How many parents to descend (relative to popDepth) before
                      inserting.                    
                </javadoc>
                <declaration name="lastMap" type="Map" line="3297"/>
                <javadoc line="3297">
                    Last Map that was encountered.                    
                </javadoc>
                <declaration name="inStyle" type="boolean" line="3301"/>
                <javadoc line="3301">
                    Set to true when a style element is encountered.                    
                </javadoc>
                <declaration name="defaultStyle" type="String" line="3305"/>
                <javadoc line="3305">
                    Name of style to use. Obtained from Meta tag.                    
                </javadoc>
                <declaration name="styles" type="Vector&lt;Object&gt;" line="3309"/>
                <javadoc line="3309">
                    Vector describing styles that should be include. Will consist
                      of a bunch of HTML.Tags, which will either be:
                      &lt;p&gt;LINK: in which case it is followed by an AttributeSet
                      &lt;p&gt;STYLE: in which case the following element is a String
                      indicating the type (may be null), and the elements following
                      it until the next HTML.Tag are the rules as Strings.                    
                </javadoc>
                <declaration name="inHead" type="boolean" line="3318"/>
                <javadoc line="3318">
                    True if inside the head tag.                    
                </javadoc>
                <declaration name="isStyleCSS" type="boolean" line="3322"/>
                <javadoc line="3322">
                    Set to true if the style language is text/css. Since this is
                      used alot, it is cached.                    
                </javadoc>
                <declaration name="emptyDocument" type="boolean" line="3327"/>
                <javadoc line="3327">
                    True if inserting into an empty document.                    
                </javadoc>
                <declaration name="styleAttributes" type="AttributeSet" line="3331"/>
                <javadoc line="3331">
                    Attributes from a style Attribute.                    
                </javadoc>
                <declaration name="option" type="Option" line="3335"/>
                <javadoc line="3335">
                    Current option, if in an option element (needed to
                      load the label.                    
                </javadoc>
                <declaration name="parseBuffer" type="Vector&lt;ElementSpec&gt;" line="3340"/>
                <declaration name="charAttr" type="MutableAttributeSet" line="3341"/>
                <declaration name="charAttrStack" type="Stack&lt;AttributeSet&gt;" line="3342"/>
                <declaration name="tagMap" type="Hashtable&lt;HTML.Tag,TagAction&gt;" line="3343"/>
                <declaration name="inBlock" type="int" line="3344"/>
                <declaration name="nextTagAfterPImplied" type="HTML.Tag" line="3345"/>
                <javadoc line="3345">
                    This attribute is sometimes used to refer to next tag
                      to be handled after p-implied when the latter is
                      the current tag which is being handled.                    
                </javadoc>
            </class>
            <class name="TaggedAttributeSet" line="3352">
                <extends class="SimpleAttributeSet"/>
                <javadoc line="3352">
                    Used by StyleSheet to determine when to avoid removing HTML.Tags
                      matching StyleConstants.                    
                </javadoc>
                <method name="TaggedAttributeSet" type="constructor" line="3357"/>
            </class>
            <class name="RunElement" line="3361">
                <extends class="LeafElement"/>
                <javadoc line="3361">
                    An element that represents a chunk of text that has
                      a set of HTML character level attributes assigned to
                      it.                    
                </javadoc>
                <javadoc line="3367">
                    Constructs an element that represents content within the
                      document (has no children).                    
                    <param>
                        parent  the parent element                        
                    </param>
                    <param>
                        a       the element attributes                        
                    </param>
                    <param>
                        offs0   the start offset (must be at least 0)                        
                    </param>
                    <param>
                        offs1   the end offset (must be at least offs0)                        
                    </param>
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <method name="RunElement" type="constructor" line="3376">
                    <params>
                        <param name="parent" type="Element"/>
                        <param name="a" type="AttributeSet"/>
                        <param name="offs0" type="int"/>
                        <param name="offs1" type="int"/>
                    </params>
                </method>
                <javadoc line="3379">
                    Gets the name of the element.                    
                    <return>
                        the name, null if none                        
                    </return>
                </javadoc>
                <method name="getName" type="String" line="3383">
                    <declaration name="o" type="Object" line="3384"/>
                    <scope line="3385"/>
                </method>
                <javadoc line="3390">
                    Gets the resolving parent.  HTML attributes are not inherited
                      at the model level so we override this to return null.                    
                    <return>
                        null, there are none                        
                    </return>
                    <see>
                        AttributeSet#getResolveParent                        
                    </see>
                </javadoc>
                <method name="getResolveParent" type="AttributeSet" line="3396"/>
            </class>
            <class name="BlockElement" line="3400">
                <extends class="BranchElement"/>
                <javadoc line="3400">
                    An element that represents a structural &lt;em&gt;block&lt;/em&gt; of
                      HTML.                    
                </javadoc>
                <javadoc line="3405">
                    Constructs a composite element that initially contains
                      no children.                    
                    <param>
                        parent  the parent element                        
                    </param>
                    <param>
                        a       the attributes for the element                        
                    </param>
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <method name="BlockElement" type="constructor" line="3412">
                    <params>
                        <param name="parent" type="Element"/>
                        <param name="a" type="AttributeSet"/>
                    </params>
                </method>
                <javadoc line="3415">
                    Gets the name of the element.                    
                    <return>
                        the name, null if none                        
                    </return>
                </javadoc>
                <method name="getName" type="String" line="3419">
                    <declaration name="o" type="Object" line="3420"/>
                    <scope line="3421"/>
                </method>
                <javadoc line="3426">
                    Gets the resolving parent.  HTML attributes are not inherited
                      at the model level so we override this to return null.                    
                    <return>
                        null, there are none                        
                    </return>
                    <see>
                        AttributeSet#getResolveParent                        
                    </see>
                </javadoc>
                <method name="getResolveParent" type="AttributeSet" line="3432"/>
            </class>
            <class name="FixedLengthDocument" line="3436">
                <extends class="PlainDocument"/>
                <javadoc line="3436">
                    Document that allows you to set the maximum length of the text.                    
                </javadoc>
                <declaration name="maxLength" type="int" line="3440"/>
                <method name="FixedLengthDocument" type="constructor" line="3441">
                    <params>
                        <param name="maxLength" type="int"/>
                    </params>
                </method>
                <method name="insertString" type="void" line="3444">
                    <params>
                        <param name="offset" type="int"/>
                        <param name="str" type="String"/>
                        <param name="a" type="AttributeSet"/>
                    </params>
                    <scope line="3445"/>
                </method>
            </class>
        </class>
    </source>