<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text.rtf">
        <import package="java.lang"/>
        <import package="java.util"/>
        <import package="java.io"/>
        <import package="java.awt.Font"/>
        <import package="java.awt.Color"/>
        <import package="javax.swing.text"/>
        <class name="RTFReader" line="35">
            <extends class="RTFParser"/>
            <comment line="58">
                                
            </comment>
            <comment line="97">
                                
            </comment>
            <comment line="129">
                                
            </comment>
            <comment line="139">
                                
            </comment>
            <javadoc line="35">
                Takes a sequence of RTF tokens and text and appends the text
                  described by the RTF to a &lt;code&gt;StyledDocument&lt;/code&gt; (the &lt;em&gt;target&lt;/em&gt;).
                  The RTF is lexed
                  from the character stream by the &lt;code&gt;RTFParser&lt;/code&gt; which is this class&apos;s
                  superclass.
                  This class is an indirect subclass of OutputStream. It must be closed
                  in order to guarantee that all of the text has been sent to
                  the text acceptor.                
                <see>
                    RTFParser                    
                </see>
                <see>
                    java.io.OutputStream                    
                </see>
            </javadoc>
            <declaration name="target" type="StyledDocument" line="51"/>
            <javadoc line="51">
                The object to which the parsed text is sent.                
            </javadoc>
            <declaration name="parserState" type="Dictionary&lt;Object,Object&gt;" line="54"/>
            <javadoc line="54">
                Miscellaneous information about the parser&apos;s state. This
                  dictionary is saved and restored when an RTF group begins
                  or ends.                
            </javadoc>
            <declaration name="rtfDestination" type="Destination" line="58"/>
            <javadoc line="58">
                This is the &quot;dst&quot; item from parserState. rtfDestination
                  is the current rtf destination. It is cached in an instance
                  variable for speed.                
            </javadoc>
            <declaration name="documentAttributes" type="MutableAttributeSet" line="62"/>
            <javadoc line="62">
                This holds the current document attributes.                
            </javadoc>
            <declaration name="fontTable" type="Dictionary&lt;Integer,String&gt;" line="65"/>
            <javadoc line="65">
                This Dictionary maps Integer font numbers to String font names.                
            </javadoc>
            <declaration name="colorTable" type="Color[]" line="67"/>
            <javadoc line="67">
                This array maps color indices to Color objects.                
            </javadoc>
            <declaration name="characterStyles" type="Style[]" line="69"/>
            <javadoc line="69">
                This array maps character style numbers to Style objects.                
            </javadoc>
            <declaration name="paragraphStyles" type="Style[]" line="71"/>
            <javadoc line="71">
                This array maps paragraph style numbers to Style objects.                
            </javadoc>
            <declaration name="sectionStyles" type="Style[]" line="73"/>
            <javadoc line="73">
                This array maps section style numbers to Style objects.                
            </javadoc>
            <declaration name="rtfversion" type="int" line="76"/>
            <javadoc line="76">
                This is the RTF version number, extracted from the \rtf keyword.
                  The version information is currently not used.                
            </javadoc>
            <declaration name="ignoreGroupIfUnknownKeyword" type="boolean" line="80"/>
            <javadoc line="80">
                &lt;code&gt;true&lt;/code&gt; to indicate that if the next keyword is unknown,
                  the containing group should be ignored.                
            </javadoc>
            <declaration name="skippingCharacters" type="int" line="84"/>
            <javadoc line="84">
                The parameter of the most recently parsed \\ucN keyword,
                  used for skipping alternative representations after a
                  Unicode character.                
            </javadoc>
            <declaration name="straightforwardAttributes" type="Dictionary&lt;String,RTFAttribute&gt;" line="89"/>
            <scope line="90"/>
            <declaration name="mockery" type="MockAttributeSet" line="94"/>
            <declaration name="textKeywords" type="Dictionary&lt;String,String&gt;" line="97"/>
            <javadoc line="97">
                textKeywords maps RTF keywords to single-character strings,
                  for those keywords which simply insert some text.                
            </javadoc>
            <scope line="100"/>
            <declaration name="TabAlignmentKey" type="String" line="129"/>
            <declaration name="TabLeaderKey" type="String" line="130"/>
            <declaration name="characterSets" type="Dictionary&lt;String,char[]&gt;" line="132"/>
            <declaration name="useNeXTForAnsi" type="boolean" line="133"/>
            <scope line="134"/>
            <javadoc line="140">
                Creates a new RTFReader instance. Text will be sent to
                  the specified TextAcceptor.                
                <param>
                    destination The TextAcceptor which is to receive the text.                    
                </param>
            </javadoc>
            <method name="RTFReader" type="constructor" line="147">
                <params>
                    <param name="destination" type="StyledDocument"/>
                </params>
                <declaration name="i" type="int" line="148"/>
            </method>
            <javadoc line="160">
                Called when the RTFParser encounters a bin keyword in the
                  RTF stream.                
                <see>
                    RTFParser                    
                </see>
            </javadoc>
            <method name="handleBinaryBlob" type="void" line="166">
                <params>
                    <param name="data" type="byte[]"/>
                </params>
                <comment line="168">
                                        
                </comment>
                <comment line="173">
                                        
                </comment>
                <scope line="167"/>
            </method>
            <javadoc line="177">
                Handles any pure text (containing no control characters) in the input
                  stream. Called by the superclass.                
            </javadoc>
            <method name="handleText" type="void" line="181">
                <params>
                    <param name="text" type="String"/>
                </params>
                <scope line="182">
                    <scope line="183"/>
                    <scope line="186"/>
                </scope>
                <scope line="192"/>
            </method>
            <javadoc line="200">
                The default color for text which has no specified color.                
            </javadoc>
            <method name="defaultColor" type="Color" line="202"/>
            <javadoc line="206">
                Called by the superclass when a new RTF group is begun.
                  This implementation saves the current &lt;code&gt;parserState&lt;/code&gt;, and gives
                  the current destination a chance to save its own state.                
                <see>
                    RTFParser#begingroup                    
                </see>
            </javadoc>
            <method name="begingroup" type="void" line="212">
                <comment line="214">
                                        
                </comment>
                <comment line="218">
                    we do this little dance to avoid cloning the entire state stack and                    
                </comment>
                <scope line="213"/>
                <declaration name="oldSaveState" type="Object" line="220"/>
                <declaration name="saveState" type="Dictionary&lt;String,Object&gt;" line="223"/>
            </method>
            <javadoc line="232">
                Called by the superclass when the current RTF group is closed.
                  This restores the parserState saved by &lt;code&gt;begingroup()&lt;/code&gt;
                  as well as invoking the endgroup method of the current
                  destination.                
                <see>
                    RTFParser#endgroup                    
                </see>
            </javadoc>
            <method name="endgroup" type="void" line="239">
                <comment line="241">
                                        
                </comment>
                <comment line="248">
                                        
                </comment>
                <scope line="240"/>
                <declaration name="restoredState" type="Dictionary&lt;Object,Object&gt;" line="245"/>
                <declaration name="restoredDestination" type="Destination" line="246"/>
                <scope line="247"/>
                <declaration name="oldParserState" type="Dictionary" line="251"/>
            </method>
            <method name="setRTFDestination" type="void" line="258">
                <params>
                    <param name="newDestination" type="Destination"/>
                </params>
                <comment line="259">
                    Check that setting the destination won&apos;t close the                    
                </comment>
                <declaration name="previousState" type="Dictionary" line="261"/>
                <scope line="262">
                    <scope line="263"/>
                </scope>
            </method>
            <javadoc line="272">
                Called by the user when there is no more input (&lt;i&gt;i.e.&lt;/i&gt;,
                  at the end of the RTF file.)                
                <see>
                    OutputStream#close                    
                </see>
            </javadoc>
            <method name="close" type="void" line="279">
                <comment line="287">
                                        
                </comment>
                <declaration name="docProps" type="Enumeration" line="280"/>
                <scope line="281">
                    <declaration name="propName" type="Object" line="282"/>
                </scope>
            </method>
            <javadoc line="294">
                Handles a parameterless RTF keyword. This is called by the superclass
                  (RTFParser) when a keyword is found in the input stream.                
                <returns>
                    <code>true</code> if the keyword is recognized and handled;
                      <code>false</code> otherwise                    
                </returns>
                <see>
                    RTFParser#handleKeyword                    
                </see>
            </javadoc>
            <method name="handleKeyword" type="boolean" line="303">
                <params>
                    <param name="keyword" type="String"/>
                </params>
                <comment line="358">
                                        
                </comment>
                <comment line="363">
                                        
                </comment>
                <comment line="377">
                                        
                </comment>
                <comment line="379">
                                        
                </comment>
                <declaration name="item" type="String" line="304"/>
                <declaration name="ignoreGroupIfUnknownKeywordSave" type="boolean" line="305"/>
                <scope line="307"/>
                <scope line="314"/>
                <scope line="319"/>
                <scope line="324"/>
                <scope line="329"/>
                <scope line="334"/>
                <scope line="339"/>
                <scope line="344"/>
                <scope line="352"/>
                <scope line="357"/>
                <scope line="362"/>
                <scope line="367"/>
                <scope line="372"/>
                <scope line="428"/>
                <scope line="432"/>
            </method>
            <javadoc line="439">
                Handles an RTF keyword and its integer parameter.
                  This is called by the superclass
                  (RTFParser) when a keyword is found in the input stream.                
                <returns>
                    <code>true</code> if the keyword is recognized and handled;
                      <code>false</code> otherwise                    
                </returns>
                <see>
                    RTFParser#handleKeyword                    
                </see>
            </javadoc>
            <method name="handleKeyword" type="boolean" line="449">
                <params>
                    <param name="keyword" type="String"/>
                    <param name="parameter" type="int"/>
                </params>
                <comment line="460">
                                        
                </comment>
                <comment line="492">
                                        
                </comment>
                <declaration name="ignoreGroupIfUnknownKeywordSave" type="boolean" line="450"/>
                <scope line="452"/>
                <scope line="459"/>
                <scope line="464">
                    <declaration name="skip" type="Number" line="468"/>
                    <scope line="469"/>
                    <scope line="471"/>
                </scope>
                <scope line="477"/>
                <scope line="487"/>
                <scope line="494"/>
            </method>
            <method name="setTargetAttribute" type="void" line="502">
                <params>
                    <param name="name" type="String"/>
                    <param name="value" type="Object"/>
                </params>
                <comment line="503">
                    target.changeAttributes(new LFDictionary(LFArray.arrayWithObject(value), LFArray.arrayWithObject(name)));                    
                </comment>
            </method>
            <javadoc line="506">
                setCharacterSet sets the current translation table to correspond with
                  the named character set. The character set is loaded if necessary.                
                <see>
                    AbstractFilter                    
                </see>
            </javadoc>
            <method name="setCharacterSet" type="void" line="513">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="set" type="Object" line="514"/>
                <scope line="516"/>
                <scope line="518"/>
                <scope line="523"/>
                <scope line="525">
                    <scope line="527">
                        <scope line="528"/>
                        <scope line="530"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="539">
                Adds a character set to the RTFReader&apos;s list
                  of known character sets                
            </javadoc>
            <method name="defineCharacterSet" type="void" line="543">
                <params>
                    <param name="name" type="String"/>
                    <param name="table" type="char[]"/>
                </params>
            </method>
            <javadoc line="549">
                Looks up a named character set. A character set is a 256-entry
                  array of characters, mapping unsigned byte values to their Unicode
                  equivalents. The character set is loaded if necessary.                
                <returns>
                    the character set                    
                </returns>
            </javadoc>
            <method name="getCharacterSet" type="Object" line="558">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="set" type="char[]" line="559"/>
                <scope line="560">
                    <declaration name="charsetStream" type="InputStream" line="561"/>
                    <anonymous_class line="563">
                        <method name="run" type="InputStream" line="564"/>
                    </anonymous_class>
                </scope>
            </method>
            <javadoc line="575">
                Parses a character set from an InputStream. The character set
                  must contain 256 decimal integers, separated by whitespace, with
                  no punctuation. B- and C- style comments are allowed.                
                <returns>
                    the newly read character set                    
                </returns>
            </javadoc>
            <method name="readCharset" type="char[]" line="583">
                <params>
                    <param name="strm" type="InputStream"/>
                </params>
                <comment line="603">
                    System.out.println(&quot;Bad token: type=&quot; + ttype + &quot; tok=&quot; + in.sval);                    
                </comment>
                <comment line="605">
                    continue;                    
                </comment>
                <declaration name="values" type="char[]" line="584"/>
                <declaration name="i" type="int" line="585"/>
                <declaration name="in" type="StreamTokenizer" line="586"/>
                <scope line="595">
                    <declaration name="ttype" type="int" line="596"/>
                    <scope line="597"/>
                    <scope line="599"/>
                    <scope line="602"/>
                </scope>
            </method>
            <method name="readCharset" type="char[]" line="616">
                <params>
                    <param name="href" type="java.net.URL"/>
                </params>
            </method>
            <interface name="Destination">
                <comment line="740">
                                        
                </comment>
                <comment line="744">
                    currently, the only thing we do when the font table ends is                    
                </comment>
                <comment line="807">
                                        
                </comment>
                <comment line="810">
                                        
                </comment>
                <comment line="814">
                                        
                </comment>
                <javadoc line="620">
                    An interface (could be an entirely abstract class) describing
                      a destination. The RTF reader always has a current destination
                      which is where text is sent.                    
                    <see>
                        RTFReader                        
                    </see>
                </javadoc>
                <method name="handleBinaryBlob" type="void" line="627"/>
                <method name="handleText" type="void" line="628"/>
                <method name="handleKeyword" type="boolean" line="629"/>
                <method name="handleKeyword" type="boolean" line="630"/>
                <method name="begingroup" type="void" line="632"/>
                <method name="endgroup" type="void" line="633"/>
                <method name="close" type="void" line="635"/>
            </interface>
            <class name="DiscardingDestination" line="638">
                <comment line="740">
                                        
                </comment>
                <comment line="744">
                    currently, the only thing we do when the font table ends is                    
                </comment>
                <comment line="807">
                                        
                </comment>
                <comment line="810">
                                        
                </comment>
                <comment line="814">
                                        
                </comment>
                <implements interface="Destination"/>
                <javadoc line="638">
                    This data-sink class is used to implement ignored destinations
                      (e.g. {\\blegga blah blah blah} )
                      It accepts all keywords and text but does nothing with them.                    
                </javadoc>
                <method name="handleBinaryBlob" type="void" line="644">
                    <params>
                        <param name="data" type="byte[]"/>
                    </params>
                    <comment line="645">
                                                
                    </comment>
                </method>
                <method name="handleText" type="void" line="649">
                    <params>
                        <param name="text" type="String"/>
                    </params>
                    <comment line="650">
                                                
                    </comment>
                </method>
                <method name="handleKeyword" type="boolean" line="654">
                    <params>
                        <param name="text" type="String"/>
                    </params>
                    <comment line="655">
                                                
                    </comment>
                </method>
                <method name="handleKeyword" type="boolean" line="660">
                    <params>
                        <param name="text" type="String"/>
                        <param name="parameter" type="int"/>
                    </params>
                    <comment line="661">
                                                
                    </comment>
                </method>
                <method name="begingroup" type="void" line="666">
                    <comment line="667">
                        Ignore groups --- the RTFReader will keep track of the                        
                    </comment>
                </method>
                <method name="endgroup" type="void" line="672">
                    <params>
                        <param name="oldState" type="Dictionary"/>
                    </params>
                    <comment line="673">
                                                
                    </comment>
                </method>
                <method name="close" type="void" line="677">
                    <comment line="678">
                                                
                    </comment>
                </method>
            </class>
            <class name="FonttblDestination" line="682">
                <comment line="740">
                                        
                </comment>
                <comment line="744">
                    currently, the only thing we do when the font table ends is                    
                </comment>
                <comment line="807">
                                        
                </comment>
                <comment line="810">
                                        
                </comment>
                <comment line="814">
                                        
                </comment>
                <implements interface="Destination"/>
                <javadoc line="682">
                    Reads the fonttbl group, inserting fonts into the RTFReader&apos;s
                      fontTable dictionary.                    
                </javadoc>
                <declaration name="nextFontNumber" type="int" line="686"/>
                <declaration name="fontNumberKey" type="Integer" line="687"/>
                <declaration name="nextFontFamily" type="String" line="688"/>
                <method name="handleBinaryBlob" type="void" line="691">
                    <params>
                        <param name="data" type="byte[]"/>
                    </params>
                </method>
                <method name="handleText" type="void" line="694">
                    <params>
                        <param name="text" type="String"/>
                    </params>
                    <comment line="704">
                                                
                    </comment>
                    <comment line="708">
                        font name might be broken across multiple calls                        
                    </comment>
                    <declaration name="semicolon" type="int" line="695"/>
                    <declaration name="fontName" type="String" line="696"/>
                    <scope line="707"/>
                    <scope line="710"/>
                </method>
                <method name="handleKeyword" type="boolean" line="720">
                    <params>
                        <param name="keyword" type="String"/>
                    </params>
                    <scope line="721"/>
                </method>
                <method name="handleKeyword" type="boolean" line="730">
                    <params>
                        <param name="keyword" type="String"/>
                        <param name="parameter" type="int"/>
                    </params>
                    <scope line="731"/>
                </method>
                <method name="begingroup" type="void" line="740"/>
                <method name="endgroup" type="void" line="741">
                    <params>
                        <param name="oldState" type="Dictionary"/>
                    </params>
                </method>
                <method name="close" type="void" line="746">
                    <declaration name="nums" type="Enumeration&lt;Integer&gt;" line="747"/>
                    <scope line="749">
                        <declaration name="num" type="Integer" line="750"/>
                    </scope>
                </method>
            </class>
            <class name="ColortblDestination" line="756">
                <comment line="740">
                                        
                </comment>
                <comment line="744">
                    currently, the only thing we do when the font table ends is                    
                </comment>
                <comment line="807">
                                        
                </comment>
                <comment line="810">
                                        
                </comment>
                <comment line="814">
                                        
                </comment>
                <implements interface="Destination"/>
                <javadoc line="756">
                    Reads the colortbl group. Upon end-of-group, the RTFReader&apos;s
                      color table is set to an array containing the read colors.                    
                </javadoc>
                <declaration name="red" type="int" line="760"/>
                <declaration name="proTemTable" type="Vector&lt;Color&gt;" line="761"/>
                <method name="ColortblDestination" type="constructor" line="764"/>
                <method name="handleText" type="void" line="772">
                    <params>
                        <param name="text" type="String"/>
                    </params>
                    <declaration name="index" type="int" line="773"/>
                    <scope line="775">
                        <scope line="776">
                            <declaration name="newColor" type="Color" line="777"/>
                        </scope>
                    </scope>
                </method>
                <method name="close" type="void" line="785">
                    <declaration name="count" type="int" line="786"/>
                </method>
                <method name="handleKeyword" type="boolean" line="793">
                    <params>
                        <param name="keyword" type="String"/>
                        <param name="parameter" type="int"/>
                    </params>
                </method>
                <method name="handleKeyword" type="boolean" line="807">
                    <params>
                        <param name="keyword" type="String"/>
                    </params>
                </method>
                <method name="begingroup" type="void" line="810"/>
                <method name="endgroup" type="void" line="811">
                    <params>
                        <param name="oldState" type="Dictionary"/>
                    </params>
                </method>
                <method name="handleBinaryBlob" type="void" line="814">
                    <params>
                        <param name="data" type="byte[]"/>
                    </params>
                </method>
            </class>
            <class name="StylesheetDestination" line="817">
                <extends class="DiscardingDestination"/>
                <comment line="740">
                                        
                </comment>
                <comment line="744">
                    currently, the only thing we do when the font table ends is                    
                </comment>
                <comment line="807">
                                        
                </comment>
                <comment line="810">
                                        
                </comment>
                <comment line="814">
                                        
                </comment>
                <implements interface="Destination"/>
                <javadoc line="817">
                    Handles the stylesheet keyword. Styles are read and sorted
                      into the three style arrays in the RTFReader.                    
                </javadoc>
                <declaration name="definedStyles" type="Dictionary&lt;Integer,StyleDefiningDestination&gt;" line="823"/>
                <method name="StylesheetDestination" type="constructor" line="826"/>
                <method name="begingroup" type="void" line="831"/>
                <method name="close" type="void" line="836">
                    <comment line="876">
                        (old debugging code)
                        int i, m;
                        if (characterStyles != null) {
                        m = characterStyles.length;
                        for(i=0;i&lt;m;i++)
                        warnings.println(&quot;chrStyle[&quot;+i+&quot;]=&quot;+characterStyles[i]);
                        } else warnings.println(&quot;No character styles.&quot;);
                        if (paragraphStyles != null) {
                        m = paragraphStyles.length;
                        for(i=0;i&lt;m;i++)
                        warnings.println(&quot;pgfStyle[&quot;+i+&quot;]=&quot;+paragraphStyles[i]);
                        } else warnings.println(&quot;No paragraph styles.&quot;);
                        if (sectionStyles != null) {
                        m = characterStyles.length;
                        for(i=0;i&lt;m;i++)
                        warnings.println(&quot;secStyle[&quot;+i+&quot;]=&quot;+sectionStyles[i]);
                        } else warnings.println(&quot;No section styles.&quot;);                        
                    </comment>
                    <declaration name="chrStyles" type="Vector&lt;Style&gt;" line="837"/>
                    <declaration name="pgfStyles" type="Vector&lt;Style&gt;" line="838"/>
                    <declaration name="secStyles" type="Vector&lt;Style&gt;" line="839"/>
                    <declaration name="styles" type="Enumeration&lt;StyleDefiningDestination&gt;" line="840"/>
                    <scope line="841">
                        <declaration name="style" type="StyleDefiningDestination" line="842"/>
                        <declaration name="defined" type="Style" line="843"/>
                        <declaration name="stype" type="String" line="847"/>
                        <declaration name="toSet" type="Vector&lt;Style&gt;" line="848"/>
                        <scope line="849"/>
                        <scope line="851"/>
                        <scope line="853"/>
                    </scope>
                    <scope line="860">
                        <declaration name="styleArray" type="Style[]" line="861"/>
                    </scope>
                    <scope line="865">
                        <declaration name="styleArray" type="Style[]" line="866"/>
                    </scope>
                    <scope line="870">
                        <declaration name="styleArray" type="Style[]" line="871"/>
                    </scope>
                </method>
                <class name="StyleDefiningDestination" line="896">
                    <extends class="AttributeTrackingDestination"/>
                    <implements interface="Destination"/>
                    <javadoc line="896">
                        This subclass handles an individual style                        
                    </javadoc>
                    <declaration name="STYLENUMBER_NONE" type="int" line="901"/>
                    <declaration name="additive" type="boolean" line="902"/>
                    <declaration name="characterStyle" type="boolean" line="903"/>
                    <declaration name="sectionStyle" type="boolean" line="904"/>
                    <declaration name="styleName" type="String" line="905"/>
                    <declaration name="number" type="int" line="906"/>
                    <declaration name="basedOn" type="int" line="907"/>
                    <declaration name="nextStyle" type="int" line="908"/>
                    <declaration name="hidden" type="boolean" line="909"/>
                    <declaration name="realizedStyle" type="Style" line="911"/>
                    <method name="StyleDefiningDestination" type="constructor" line="914"/>
                    <method name="handleText" type="void" line="926">
                        <params>
                            <param name="text" type="String"/>
                        </params>
                    </method>
                    <method name="close" type="void" line="933">
                        <declaration name="semicolon" type="int" line="934"/>
                    </method>
                    <method name="handleKeyword" type="boolean" line="942">
                        <params>
                            <param name="keyword" type="String"/>
                        </params>
                        <scope line="943"/>
                        <scope line="947"/>
                    </method>
                    <method name="handleKeyword" type="boolean" line="955">
                        <params>
                            <param name="keyword" type="String"/>
                            <param name="parameter" type="int"/>
                        </params>
                        <scope line="956"/>
                        <scope line="960"/>
                        <scope line="964"/>
                        <scope line="968"/>
                        <scope line="970"/>
                        <scope line="972"/>
                    </method>
                    <method name="realize" type="Style" line="979">
                        <comment line="994">
                            NB: Swing StyleContext doesn&apos;t allow distinct styles with
                            the same name; RTF apparently does. This may confuse the                            
                        </comment>
                        <comment line="1007">
                                                        
                        </comment>
                        <declaration name="basis" type="Style" line="980"/>
                        <declaration name="next" type="Style" line="981"/>
                        <scope line="986">
                            <declaration name="styleDest" type="StyleDefiningDestination" line="987"/>
                            <scope line="989"/>
                        </scope>
                        <scope line="999"/>
                        <scope line="1003"/>
                        <scope line="1007"/>
                        <scope line="1013">
                            <declaration name="styleDest" type="StyleDefiningDestination" line="1014"/>
                            <scope line="1016"/>
                        </scope>
                    </method>
                </class>
            </class>
            <class name="InfoDestination" line="1033">
                <extends class="DiscardingDestination"/>
                <comment line="740">
                                        
                </comment>
                <comment line="744">
                    currently, the only thing we do when the font table ends is                    
                </comment>
                <comment line="807">
                                        
                </comment>
                <comment line="810">
                                        
                </comment>
                <comment line="814">
                                        
                </comment>
                <implements interface="Destination"/>
                <javadoc line="1033">
                    Handles the info group. Currently no info keywords are recognized
                      so this is a subclass of DiscardingDestination.                    
                </javadoc>
            </class>
            <class name="AttributeTrackingDestination" line="1041">
                <comment line="740">
                                        
                </comment>
                <comment line="744">
                    currently, the only thing we do when the font table ends is                    
                </comment>
                <comment line="807">
                                        
                </comment>
                <comment line="810">
                                        
                </comment>
                <comment line="814">
                                        
                </comment>
                <implements interface="Destination"/>
                <javadoc line="1041">
                    RTFReader.TextHandlingDestination is an abstract RTF destination
                      which simply tracks the attributes specified by the RTF control words
                      in internal form and can produce acceptable AttributeSets for the
                      current character, paragraph, and section attributes. It is up
                      to the subclasses to determine what is done with the actual text.                    
                </javadoc>
                <declaration name="characterAttributes" type="MutableAttributeSet" line="1048"/>
                <javadoc line="1048">
                    This is the &quot;chr&quot; element of parserState, cached for
                      more efficient use                    
                </javadoc>
                <declaration name="paragraphAttributes" type="MutableAttributeSet" line="1051"/>
                <javadoc line="1051">
                    This is the &quot;pgf&quot; element of parserState, cached for
                      more efficient use                    
                </javadoc>
                <declaration name="sectionAttributes" type="MutableAttributeSet" line="1054"/>
                <javadoc line="1054">
                    This is the &quot;sec&quot; element of parserState, cached for
                      more efficient use                    
                </javadoc>
                <method name="AttributeTrackingDestination" type="constructor" line="1059"/>
                <method name="handleText" type="void" line="1068"/>
                <method name="handleBinaryBlob" type="void" line="1071">
                    <params>
                        <param name="data" type="byte[]"/>
                    </params>
                    <comment line="1072">
                        This should really be in TextHandlingDestination, but
                         since nobody does anything with binary blobs, this                        
                    </comment>
                </method>
                <method name="begingroup" type="void" line="1079">
                    <comment line="1084">
                        It would probably be more efficient to use the
                         resolver property of the attributes set for
                         implementing rtf groups,                        
                    </comment>
                    <comment line="1089">
                                                
                    </comment>
                    <declaration name="characterParent" type="AttributeSet" line="1080"/>
                    <declaration name="paragraphParent" type="AttributeSet" line="1081"/>
                    <declaration name="sectionParent" type="AttributeSet" line="1082"/>
                </method>
                <method name="endgroup" type="void" line="1104">
                    <params>
                        <param name="oldState" type="Dictionary"/>
                    </params>
                </method>
                <method name="close" type="void" line="1111"/>
                <method name="handleKeyword" type="boolean" line="1115">
                    <params>
                        <param name="keyword" type="String"/>
                    </params>
                    <comment line="1144">
                                                
                    </comment>
                    <scope line="1116"/>
                    <scope line="1120">
                        <declaration name="attr" type="RTFAttribute" line="1121"/>
                        <scope line="1122">
                            <declaration name="ok" type="boolean" line="1123"/>
                        </scope>
                    </scope>
                    <scope line="1154"/>
                    <scope line="1159"/>
                    <scope line="1164"/>
                </method>
                <method name="handleKeyword" type="boolean" line="1173">
                    <params>
                        <param name="keyword" type="String"/>
                        <param name="parameter" type="int"/>
                    </params>
                    <comment line="1177">
                                                
                    </comment>
                    <comment line="1212">
                                                
                    </comment>
                    <comment line="1226">
                                                
                    </comment>
                    <comment line="1229">
                                                
                    </comment>
                    <comment line="1232">
                        TODO: The RTF sl attribute has special meaning if it&apos;s
                        negative. Make sure that SwingText has the same special
                        meaning, or find a way to imitate that. When SwingText                        
                    </comment>
                    <comment line="1242">
                                                
                    </comment>
                    <declaration name="booleanParameter" type="boolean" line="1174"/>
                    <scope line="1179"/>
                    <scope line="1183"/>
                    <scope line="1188">
                        <declaration name="attr" type="RTFAttribute" line="1189"/>
                        <scope line="1190">
                            <declaration name="ok" type="boolean" line="1191"/>
                        </scope>
                    </scope>
                    <scope line="1221"/>
                    <scope line="1228">
                        <scope line="1229"/>
                        <scope line="1231"/>
                    </scope>
                    <scope line="1244">
                        <declaration name="tabPosition" type="float" line="1245"/>
                        <declaration name="tabAlignment" type="int" line="1246"/>
                        <declaration name="item" type="Number" line="1247"/>
                        <declaration name="newStop" type="TabStop" line="1263"/>
                        <declaration name="tabs" type="Dictionary&lt;Object,Object&gt;" line="1264"/>
                        <declaration name="stopCount" type="Integer" line="1265"/>
                        <scope line="1268"/>
                        <scope line="1272"/>
                    </scope>
                    <scope line="1284"/>
                    <scope line="1290"/>
                    <scope line="1296"/>
                </method>
                <javadoc line="1304">
                    Returns a new MutableAttributeSet containing the
                      default character attributes                    
                </javadoc>
                <method name="rootCharacterAttributes" type="MutableAttributeSet" line="1307">
                    <comment line="1310">
                                                
                    </comment>
                    <declaration name="set" type="MutableAttributeSet" line="1308"/>
                </method>
                <javadoc line="1320">
                    Returns a new MutableAttributeSet containing the
                      default paragraph attributes                    
                </javadoc>
                <method name="rootParagraphAttributes" type="MutableAttributeSet" line="1323">
                    <comment line="1330">
                                                
                    </comment>
                    <declaration name="set" type="MutableAttributeSet" line="1324"/>
                </method>
                <javadoc line="1336">
                    Returns a new MutableAttributeSet containing the
                      default section attributes                    
                </javadoc>
                <method name="rootSectionAttributes" type="MutableAttributeSet" line="1339">
                    <declaration name="set" type="MutableAttributeSet" line="1340"/>
                </method>
                <javadoc line="1345">
                    Calculates the current text (character) attributes in a form suitable
                      for SwingText from the current parser state.                    
                    <returns>
                        a new MutableAttributeSet containing the text attributes.                        
                    </returns>
                </javadoc>
                <method name="currentTextAttributes" type="MutableAttributeSet" line="1352">
                    <comment line="1358">
                                                
                    </comment>
                    <comment line="1359">
                        TODO: catch exceptions for undefined attributes,
                        bad font indices, etc.? (as it stands, it is the caller&apos;s                        
                    </comment>
                    <comment line="1363">
                                                
                    </comment>
                    <comment line="1380">
                                                
                    </comment>
                    <comment line="1392">
                                                
                    </comment>
                    <comment line="1401">
                                                
                    </comment>
                    <declaration name="attributes" type="MutableAttributeSet" line="1353"/>
                    <declaration name="fontnum" type="Integer" line="1355"/>
                    <declaration name="stateItem" type="Integer" line="1356"/>
                    <declaration name="fontFamily" type="String" line="1364"/>
                    <scope line="1374">
                        <scope line="1376">
                            <declaration name="fg" type="Color" line="1377"/>
                        </scope>
                        <scope line="1379"/>
                    </scope>
                    <scope line="1385">
                        <scope line="1387">
                            <declaration name="bg" type="Color" line="1388"/>
                        </scope>
                        <scope line="1391"/>
                    </scope>
                    <declaration name="characterStyle" type="Style" line="1397"/>
                </method>
                <javadoc line="1406">
                    Calculates the current paragraph attributes (with keys
                      as given in StyleConstants) from the current parser state.                    
                    <returns>
                        a newly created MutableAttributeSet.                        
                    </returns>
                    <see>
                        StyleConstants                        
                    </see>
                </javadoc>
                <method name="currentParagraphAttributes" type="MutableAttributeSet" line="1414">
                    <comment line="1415">
                                                
                    </comment>
                    <comment line="1420">
                                                
                    </comment>
                    <declaration name="bld" type="MutableAttributeSet" line="1416"/>
                    <declaration name="stateItem" type="Integer" line="1418"/>
                    <declaration name="tabs" type="TabStop" line="1421"/>
                    <scope line="1424">
                        <declaration name="workingTabs" type="Dictionary" line="1425"/>
                        <scope line="1426">
                            <declaration name="count" type="int" line="1427"/>
                        </scope>
                    </scope>
                    <declaration name="paragraphStyle" type="Style" line="1437"/>
                </method>
                <javadoc line="1444">
                    Calculates the current section attributes
                      from the current parser state.                    
                    <returns>
                        a newly created MutableAttributeSet.                        
                    </returns>
                </javadoc>
                <method name="currentSectionAttributes" type="AttributeSet" line="1451">
                    <declaration name="attributes" type="MutableAttributeSet" line="1452"/>
                    <declaration name="sectionStyle" type="Style" line="1454"/>
                </method>
                <javadoc line="1461">
                    Resets the filter&apos;s internal notion of the current character
                      attributes to their default values. Invoked to handle the
                      \plain keyword.                    
                </javadoc>
                <method name="resetCharacterAttributes" type="void" line="1465">
                    <comment line="1469">
                                                
                    </comment>
                    <declaration name="attributes" type="Enumeration&lt;RTFAttribute&gt;" line="1471"/>
                    <scope line="1472">
                        <declaration name="attr" type="RTFAttribute" line="1473"/>
                    </scope>
                </method>
                <javadoc line="1483">
                    Resets the filter&apos;s internal notion of the current paragraph&apos;s
                      attributes to their default values. Invoked to handle the
                      \pard keyword.                    
                </javadoc>
                <method name="resetParagraphAttributes" type="void" line="1487">
                    <declaration name="attributes" type="Enumeration&lt;RTFAttribute&gt;" line="1495"/>
                    <scope line="1496">
                        <declaration name="attr" type="RTFAttribute" line="1497"/>
                    </scope>
                </method>
                <javadoc line="1503">
                    Resets the filter&apos;s internal notion of the current section&apos;s
                      attributes to their default values. Invoked to handle the
                      \sectd keyword.                    
                </javadoc>
                <method name="resetSectionAttributes" type="void" line="1507">
                    <declaration name="attributes" type="Enumeration&lt;RTFAttribute&gt;" line="1508"/>
                    <scope line="1509">
                        <declaration name="attr" type="RTFAttribute" line="1510"/>
                    </scope>
                </method>
            </class>
            <class name="TextHandlingDestination" line="1519">
                <extends class="AttributeTrackingDestination"/>
                <comment line="740">
                                        
                </comment>
                <comment line="744">
                    currently, the only thing we do when the font table ends is                    
                </comment>
                <comment line="807">
                                        
                </comment>
                <comment line="810">
                                        
                </comment>
                <comment line="814">
                                        
                </comment>
                <implements interface="Destination"/>
                <javadoc line="1519">
                    RTFReader.TextHandlingDestination provides basic text handling
                      functionality. Subclasses must implement: &lt;dl&gt;
                      &lt;dt&gt;deliverText()&lt;dd&gt;to handle a run of text with the same
                      attributes
                      &lt;dt&gt;finishParagraph()&lt;dd&gt;to end the current paragraph and
                      set the paragraph&apos;s attributes
                      &lt;dt&gt;endSection()&lt;dd&gt;to end the current section
                      &lt;/dl&gt;                    
                </javadoc>
                <declaration name="inParagraph" type="boolean" line="1532"/>
                <javadoc line="1532">
                    &lt;code&gt;true&lt;/code&gt; if the reader has not just finished
                      a paragraph; false upon startup                    
                </javadoc>
                <method name="TextHandlingDestination" type="constructor" line="1537"/>
                <method name="handleText" type="void" line="1543">
                    <params>
                        <param name="text" type="String"/>
                    </params>
                </method>
                <method name="deliverText" type="void" line="1550"/>
                <method name="close" type="void" line="1553"/>
                <method name="handleKeyword" type="boolean" line="1561">
                    <params>
                        <param name="keyword" type="String"/>
                    </params>
                    <comment line="1567">
                        warnings.println(&quot;Ending paragraph.&quot;);                        
                    </comment>
                    <comment line="1573">
                        warnings.println(&quot;Ending section.&quot;);                        
                    </comment>
                    <scope line="1562"/>
                    <scope line="1566"/>
                    <scope line="1572"/>
                </method>
                <method name="beginParagraph" type="void" line="1582"/>
                <method name="endParagraph" type="void" line="1587">
                    <declaration name="pgfAttributes" type="AttributeSet" line="1588"/>
                    <declaration name="chrAttributes" type="AttributeSet" line="1589"/>
                </method>
                <method name="finishParagraph" type="void" line="1594"/>
                <method name="endSection" type="void" line="1596"/>
            </class>
            <class name="DocumentDestination" line="1599">
                <extends class="TextHandlingDestination"/>
                <comment line="740">
                                        
                </comment>
                <comment line="744">
                    currently, the only thing we do when the font table ends is                    
                </comment>
                <comment line="807">
                                        
                </comment>
                <comment line="810">
                                        
                </comment>
                <comment line="814">
                                        
                </comment>
                <implements interface="Destination"/>
                <javadoc line="1599">
                    RTFReader.DocumentDestination is a concrete subclass of
                      TextHandlingDestination which appends the text to the
                      StyledDocument given by the &lt;code&gt;target&lt;/code&gt; ivar of the
                      containing RTFReader.                    
                </javadoc>
                <method name="deliverText" type="void" line="1609">
                    <params>
                        <param name="text" type="String"/>
                        <param name="characterAttributes" type="AttributeSet"/>
                    </params>
                    <comment line="1615">
                                                
                    </comment>
                    <comment line="1616">
                                                
                    </comment>
                    <scope line="1610"/>
                    <scope line="1614"/>
                </method>
                <method name="finishParagraph" type="void" line="1623">
                    <params>
                        <param name="pgfAttributes" type="AttributeSet"/>
                        <param name="chrAttributes" type="AttributeSet"/>
                    </params>
                    <comment line="1629">
                                                
                    </comment>
                    <comment line="1630">
                                                
                    </comment>
                    <declaration name="pgfEndPosition" type="int" line="1624"/>
                    <scope line="1625"/>
                    <scope line="1628"/>
                </method>
                <method name="endSection" type="void" line="1636">
                    <comment line="1637">
                                                
                    </comment>
                </method>
            </class>
        </class>
    </source>