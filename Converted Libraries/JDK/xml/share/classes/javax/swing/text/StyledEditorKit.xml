<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text">
        <import package="java.io"/>
        <import package="java.awt"/>
        <import package="java.awt.event.ActionEvent"/>
        <import package="java.beans.PropertyChangeEvent"/>
        <import package="java.beans.PropertyChangeListener"/>
        <import package="javax.swing.event"/>
        <import package="javax.swing.Action"/>
        <import package="javax.swing.JEditorPane"/>
        <import package="javax.swing.KeyStroke"/>
        <import package="javax.swing.UIManager"/>
        <class name="StyledEditorKit" line="12">
            <extends class="DefaultEditorKit"/>
            <javadoc line="12">
                This is the set of things needed by a text component
                  to be a reasonably functioning editor for some &lt;em&gt;type&lt;/em&gt;
                  of text document.  This implementation provides a default
                  implementation which treats text as styled text and
                  provides a minimal set of actions for editing styled text.                
                <author>
                    Timothy Prinzing                    
                </author>
            </javadoc>
            <javadoc line="21">
                Creates a new EditorKit used for styled documents.                
            </javadoc>
            <method name="StyledEditorKit" type="constructor" line="24"/>
            <javadoc line="28">
                Gets the input attributes for the pane.  When
                  the caret moves and there is no selection, the
                  input attributes are automatically mutated to
                  reflect the character attributes of the current
                  caret location.  The styled editing actions
                  use the input attributes to carry out their
                  actions.                
                <return>
                    the attribute set                    
                </return>
            </javadoc>
            <method name="getInputAttributes" type="MutableAttributeSet" line="38"/>
            <javadoc line="41">
                Fetches the element representing the current
                  run of character attributes for the caret.                
                <return>
                    the element                    
                </return>
            </javadoc>
            <method name="getCharacterAttributeRun" type="Element" line="46"/>
            <javadoc line="49">
                Fetches the command list for the editor.  This is
                  the list of commands supported by the superclass
                  augmented by the collection of commands defined
                  locally for style operations.                
                <return>
                    the command list                    
                </return>
            </javadoc>
            <method name="getActions" type="Action[]" line="56"/>
            <javadoc line="59">
                Creates an uninitialized text storage model
                  that is appropriate for this type of editor.                
                <return>
                    the model                    
                </return>
            </javadoc>
            <method name="createDefaultDocument" type="Document" line="64"/>
            <javadoc line="67">
                Called when the kit is being installed into
                  a JEditorPane.                
                <param>
                    c the JEditorPane                    
                </param>
            </javadoc>
            <method name="install" type="void" line="72">
                <params>
                    <param name="c" type="JEditorPane"/>
                </params>
                <declaration name="caret" type="Caret" line="75"/>
                <scope line="76"/>
            </method>
            <javadoc line="80">
                Called when the kit is being removed from the
                  JEditorPane.  This is used to unregister any
                  listeners that were attached.                
                <param>
                    c the JEditorPane                    
                </param>
            </javadoc>
            <method name="deinstall" type="void" line="86">
                <params>
                    <param name="c" type="JEditorPane"/>
                </params>
            </method>
            <javadoc line="92">
                Fetches a factory that is suitable for producing
                  views of any models that are produced by this
                  kit.  This is implemented to return View implementations
                  for the following kinds of elements:
                  &lt;ul&gt;
                  &lt;li&gt;AbstractDocument.ContentElementName
                  &lt;li&gt;AbstractDocument.ParagraphElementName
                  &lt;li&gt;AbstractDocument.SectionElementName
                  &lt;li&gt;StyleConstants.ComponentElementName
                  &lt;li&gt;StyleConstants.IconElementName
                  &lt;/ul&gt;                
                <return>
                    the factory                    
                </return>
            </javadoc>
            <method name="getViewFactory" type="ViewFactory" line="106"/>
            <javadoc line="109">
                Creates a copy of the editor kit.                
                <return>
                    the copy                    
                </return>
            </javadoc>
            <method name="clone" type="Object" line="113">
                <declaration name="o" type="StyledEditorKit" line="114"/>
            </method>
            <javadoc line="120">
                Creates the AttributeSet used for the selection.                
            </javadoc>
            <method name="createInputAttributes" type="void" line="123">
                <anonymous_class line="124">
                    <method name="getResolveParent" type="AttributeSet" line="125"/>
                    <method name="clone" type="Object" line="128"/>
                </anonymous_class>
            </method>
            <javadoc line="134">
                Creates a new &lt;code&gt;AttributeTracker&lt;/code&gt;.                
            </javadoc>
            <method name="createInputAttributeUpdated" type="void" line="137"/>
            <declaration name="defaultFactory" type="ViewFactory" line="140"/>
            <declaration name="currentRun" type="Element" line="141"/>
            <declaration name="currentParagraph" type="Element" line="142"/>
            <declaration name="inputAttributes" type="MutableAttributeSet" line="143"/>
            <javadoc line="143">
                This is the set of attributes used to store the
                  input attributes.                
            </javadoc>
            <declaration name="inputAttributeUpdater" type="AttributeTracker" line="148"/>
            <javadoc line="148">
                This listener will be attached to the caret of
                  the text component that the EditorKit gets installed
                  into.  This should keep the input attributes updated
                  for use by the styled actions.                
            </javadoc>
            <class name="AttributeTracker" line="155">
                <implements interface="CaretListener"/>
                <implements interface="PropertyChangeListener"/>
                <implements interface="Serializable"/>
                <javadoc line="155">
                    Tracks caret movement and keeps the input attributes set
                      to reflect the current set of attribute definitions at the
                      caret position.
                      &lt;p&gt;This implements PropertyChangeListener to update the
                      input attributes when the Document changes, as if the Document
                      changes the attributes will almost certainly change.                    
                </javadoc>
                <javadoc line="164">
                    Updates the attributes. &lt;code&gt;dot&lt;/code&gt; and &lt;code&gt;mark&lt;/code&gt;
                      mark give the positions of the selection in &lt;code&gt;c&lt;/code&gt;.                    
                </javadoc>
                <method name="updateInputAttributes" type="void" line="168">
                    <params>
                        <param name="dot" type="int"/>
                        <param name="mark" type="int"/>
                        <param name="c" type="JTextComponent"/>
                    </params>
                    <declaration name="aDoc" type="Document" line="169"/>
                    <scope line="170"/>
                    <declaration name="start" type="int" line="173"/>
                    <declaration name="doc" type="StyledDocument" line="174"/>
                    <declaration name="run" type="Element" line="175"/>
                    <scope line="177"/>
                    <scope line="180"/>
                    <scope line="183"/>
                </method>
                <method name="propertyChange" type="void" line="188">
                    <params>
                        <param name="evt" type="PropertyChangeEvent"/>
                    </params>
                    <declaration name="newValue" type="Object" line="189"/>
                    <declaration name="source" type="Object" line="190"/>
                    <scope line="191"/>
                </method>
                <method name="caretUpdate" type="void" line="195">
                    <params>
                        <param name="e" type="CaretEvent"/>
                    </params>
                </method>
            </class>
            <javadoc line="199">
                Copies the key/values in &lt;code&gt;element&lt;/code&gt;s AttributeSet into
                  &lt;code&gt;set&lt;/code&gt;. This does not copy component, icon, or element
                  names attributes. Subclasses may wish to refine what is and what
                  isn&apos;t copied here. But be sure to first remove all the attributes that
                  are in &lt;code&gt;set&lt;/code&gt;.&lt;p&gt;
                  This is called anytime the caret moves over a different location.                
            </javadoc>
            <method name="createInputAttributes" type="void" line="207">
                <params>
                    <param name="element" type="Element"/>
                    <param name="set" type="MutableAttributeSet"/>
                </params>
                <scope line="208"/>
            </method>
            <class name="StyledViewFactory" line="217">
                <implements interface="ViewFactory"/>
                <method name="create" type="View" line="218">
                    <params>
                        <param name="elem" type="Element"/>
                    </params>
                    <declaration name="kind" type="String" line="219"/>
                    <scope line="220">
                        <scope line="221"/>
                        <scope line="224"/>
                        <scope line="227"/>
                        <scope line="230"/>
                        <scope line="233"/>
                    </scope>
                </method>
            </class>
            <declaration name="defaultActions" type="Action[]" line="240"/>
            <class name="StyledTextAction" line="241">
                <extends class="TextAction"/>
                <javadoc line="241">
                    An action that assumes it&apos;s being fired on a JEditorPane
                      with a StyledEditorKit (or subclass) installed.  This has
                      some convenience methods for causing character or paragraph
                      level attribute changes.  The convenience methods will
                      throw an IllegalArgumentException if the assumption of
                      a StyledDocument, a JEditorPane, or a StyledEditorKit
                      fail to be true.
                      &lt;p&gt;
                      The component that gets acted upon by the action
                      will be the source of the ActionEvent if the source
                      can be narrowed to a JEditorPane type.  If the source
                      can&apos;t be narrowed, the most recently focused text
                      component is changed.  If neither of these are the
                      case, the action cannot be performed.
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      Serialized objects of this class will not be compatible with
                      future Swing releases. The current serialization support is
                      appropriate for short term storage or RMI between applications running
                      the same version of Swing.  As of 1.4, support for long term storage
                      of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                      has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                      Please see {@link java.beans.XMLEncoder}.                    
                </javadoc>
                <javadoc line="267">
                    Creates a new StyledTextAction from a string action name.                    
                    <param>
                        nm the name of the action                        
                    </param>
                </javadoc>
                <method name="StyledTextAction" type="constructor" line="271">
                    <params>
                        <param name="nm" type="String"/>
                    </params>
                </method>
                <javadoc line="274">
                    Gets the target editor for an action.                    
                    <param>
                        e the action event                        
                    </param>
                    <return>
                        the editor                        
                    </return>
                </javadoc>
                <method name="getEditor" type="JEditorPane" line="279">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                    <declaration name="tcomp" type="JTextComponent" line="280"/>
                    <scope line="281"/>
                </method>
                <javadoc line="286">
                    Gets the document associated with an editor pane.                    
                    <param>
                        e the editor                        
                    </param>
                    <return>
                        the document                        
                    </return>
                    <exception>
                        IllegalArgumentException for the wrong document type                        
                    </exception>
                </javadoc>
                <method name="getStyledDocument" type="StyledDocument" line="292">
                    <params>
                        <param name="e" type="JEditorPane"/>
                    </params>
                    <declaration name="d" type="Document" line="293"/>
                    <scope line="294"/>
                </method>
                <javadoc line="299">
                    Gets the editor kit associated with an editor pane.                    
                    <param>
                        e the editor pane                        
                    </param>
                    <return>
                        the kit                        
                    </return>
                    <exception>
                        IllegalArgumentException for the wrong document type                        
                    </exception>
                </javadoc>
                <method name="getStyledEditorKit" type="StyledEditorKit" line="305">
                    <params>
                        <param name="e" type="JEditorPane"/>
                    </params>
                    <declaration name="k" type="EditorKit" line="306"/>
                    <scope line="307"/>
                </method>
                <javadoc line="312">
                    Applies the given attributes to character
                      content.  If there is a selection, the attributes
                      are applied to the selection range.  If there
                      is no selection, the attributes are applied to
                      the input attribute set which defines the attributes
                      for any new text that gets inserted.                    
                    <param>
                        editor the editor                        
                    </param>
                    <param>
                        attr the attributes                        
                    </param>
                    <param>
                        replace   if true, then replace the existing attributes first                        
                    </param>
                </javadoc>
                <method name="setCharacterAttributes" type="void" line="323">
                    <params>
                        <param name="editor" type="JEditorPane"/>
                        <param name="attr" type="AttributeSet"/>
                        <param name="replace" type="boolean"/>
                    </params>
                    <declaration name="p0" type="int" line="324"/>
                    <declaration name="p1" type="int" line="325"/>
                    <scope line="326">
                        <declaration name="doc" type="StyledDocument" line="327"/>
                    </scope>
                    <declaration name="k" type="StyledEditorKit" line="330"/>
                    <declaration name="inputAttributes" type="MutableAttributeSet" line="331"/>
                    <scope line="332"/>
                </method>
                <javadoc line="337">
                    Applies the given attributes to paragraphs.  If
                      there is a selection, the attributes are applied
                      to the paragraphs that intersect the selection.
                      if there is no selection, the attributes are applied
                      to the paragraph at the current caret position.                    
                    <param>
                        editor the editor                        
                    </param>
                    <param>
                        attr the attributes                        
                    </param>
                    <param>
                        replace   if true, replace the existing attributes first                        
                    </param>
                </javadoc>
                <method name="setParagraphAttributes" type="void" line="347">
                    <params>
                        <param name="editor" type="JEditorPane"/>
                        <param name="attr" type="AttributeSet"/>
                        <param name="replace" type="boolean"/>
                    </params>
                    <declaration name="p0" type="int" line="348"/>
                    <declaration name="p1" type="int" line="349"/>
                    <declaration name="doc" type="StyledDocument" line="350"/>
                </method>
            </class>
            <class name="FontFamilyAction" line="354">
                <extends class="StyledTextAction"/>
                <javadoc line="354">
                    An action to set the font family in the associated
                      JEditorPane.  This will use the family specified as
                      the command string on the ActionEvent if there is one,
                      otherwise the family that was initialized with will be used.
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      Serialized objects of this class will not be compatible with
                      future Swing releases. The current serialization support is
                      appropriate for short term storage or RMI between applications running
                      the same version of Swing.  As of 1.4, support for long term storage
                      of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                      has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                      Please see {@link java.beans.XMLEncoder}.                    
                </javadoc>
                <javadoc line="370">
                    Creates a new FontFamilyAction.                    
                    <param>
                        nm the action name                        
                    </param>
                    <param>
                        family the font family                        
                    </param>
                </javadoc>
                <method name="FontFamilyAction" type="constructor" line="375">
                    <params>
                        <param name="nm" type="String"/>
                        <param name="family" type="String"/>
                    </params>
                </method>
                <javadoc line="379">
                    Sets the font family.                    
                    <param>
                        e the event                        
                    </param>
                </javadoc>
                <method name="actionPerformed" type="void" line="383">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                    <declaration name="editor" type="JEditorPane" line="384"/>
                    <scope line="385">
                        <declaration name="family" type="String" line="386"/>
                        <scope line="387">
                            <declaration name="s" type="String" line="388"/>
                            <scope line="389"/>
                        </scope>
                        <scope line="393">
                            <declaration name="attr" type="MutableAttributeSet" line="394"/>
                        </scope>
                        <scope line="398"/>
                    </scope>
                </method>
                <declaration name="family" type="String" line="403"/>
            </class>
            <class name="FontSizeAction" line="405">
                <extends class="StyledTextAction"/>
                <javadoc line="405">
                    An action to set the font size in the associated
                      JEditorPane.  This will use the size specified as
                      the command string on the ActionEvent if there is one,
                      otherwise the size that was initialized with will be used.
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      Serialized objects of this class will not be compatible with
                      future Swing releases. The current serialization support is
                      appropriate for short term storage or RMI between applications running
                      the same version of Swing.  As of 1.4, support for long term storage
                      of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                      has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                      Please see {@link java.beans.XMLEncoder}.                    
                </javadoc>
                <javadoc line="421">
                    Creates a new FontSizeAction.                    
                    <param>
                        nm the action name                        
                    </param>
                    <param>
                        size the font size                        
                    </param>
                </javadoc>
                <method name="FontSizeAction" type="constructor" line="426">
                    <params>
                        <param name="nm" type="String"/>
                        <param name="size" type="int"/>
                    </params>
                </method>
                <javadoc line="430">
                    Sets the font size.                    
                    <param>
                        e the action event                        
                    </param>
                </javadoc>
                <method name="actionPerformed" type="void" line="434">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                    <declaration name="editor" type="JEditorPane" line="435"/>
                    <scope line="436">
                        <declaration name="size" type="int" line="437"/>
                        <scope line="438">
                            <declaration name="s" type="String" line="439"/>
                            <scope line="440"/>
                            <scope line="443"/>
                        </scope>
                        <scope line="446">
                            <declaration name="attr" type="MutableAttributeSet" line="447"/>
                        </scope>
                        <scope line="451"/>
                    </scope>
                </method>
                <declaration name="size" type="int" line="456"/>
            </class>
            <class name="ForegroundAction" line="458">
                <extends class="StyledTextAction"/>
                <javadoc line="458">
                    An action to set foreground color.  This sets the
                      &lt;code&gt;StyleConstants.Foreground&lt;/code&gt; attribute for the
                      currently selected range of the target JEditorPane.
                      This is done by calling
                      &lt;code&gt;StyledDocument.setCharacterAttributes&lt;/code&gt;
                      on the styled document associated with the target
                      JEditorPane.
                      &lt;p&gt;
                      If the target text component is specified as the
                      source of the ActionEvent and there is a command string,
                      the command string will be interpreted as the foreground
                      color.  It will be interpreted by called
                      &lt;code&gt;Color.decode&lt;/code&gt;, and should therefore be
                      legal input for that method.
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      Serialized objects of this class will not be compatible with
                      future Swing releases. The current serialization support is
                      appropriate for short term storage or RMI between applications running
                      the same version of Swing.  As of 1.4, support for long term storage
                      of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                      has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                      Please see {@link java.beans.XMLEncoder}.                    
                </javadoc>
                <javadoc line="484">
                    Creates a new ForegroundAction.                    
                    <param>
                        nm the action name                        
                    </param>
                    <param>
                        fg the foreground color                        
                    </param>
                </javadoc>
                <method name="ForegroundAction" type="constructor" line="489">
                    <params>
                        <param name="nm" type="String"/>
                        <param name="fg" type="Color"/>
                    </params>
                </method>
                <javadoc line="493">
                    Sets the foreground color.                    
                    <param>
                        e the action event                        
                    </param>
                </javadoc>
                <method name="actionPerformed" type="void" line="497">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                    <declaration name="editor" type="JEditorPane" line="498"/>
                    <scope line="499">
                        <declaration name="fg" type="Color" line="500"/>
                        <scope line="501">
                            <declaration name="s" type="String" line="502"/>
                            <scope line="503"/>
                            <scope line="506"/>
                        </scope>
                        <scope line="509">
                            <declaration name="attr" type="MutableAttributeSet" line="510"/>
                        </scope>
                        <scope line="514"/>
                    </scope>
                </method>
                <declaration name="fg" type="Color" line="519"/>
            </class>
            <class name="AlignmentAction" line="521">
                <extends class="StyledTextAction"/>
                <javadoc line="521">
                    An action to set paragraph alignment.  This sets the
                      &lt;code&gt;StyleConstants.Alignment&lt;/code&gt; attribute for the
                      currently selected range of the target JEditorPane.
                      This is done by calling
                      &lt;code&gt;StyledDocument.setParagraphAttributes&lt;/code&gt;
                      on the styled document associated with the target
                      JEditorPane.
                      &lt;p&gt;
                      If the target text component is specified as the
                      source of the ActionEvent and there is a command string,
                      the command string will be interpreted as an integer
                      that should be one of the legal values for the
                      &lt;code&gt;StyleConstants.Alignment&lt;/code&gt; attribute.
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      Serialized objects of this class will not be compatible with
                      future Swing releases. The current serialization support is
                      appropriate for short term storage or RMI between applications running
                      the same version of Swing.  As of 1.4, support for long term storage
                      of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                      has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                      Please see {@link java.beans.XMLEncoder}.                    
                </javadoc>
                <javadoc line="546">
                    Creates a new AlignmentAction.                    
                    <param>
                        nm the action name                        
                    </param>
                    <param>
                        a the alignment >= 0                        
                    </param>
                </javadoc>
                <method name="AlignmentAction" type="constructor" line="551">
                    <params>
                        <param name="nm" type="String"/>
                        <param name="a" type="int"/>
                    </params>
                </method>
                <javadoc line="555">
                    Sets the alignment.                    
                    <param>
                        e the action event                        
                    </param>
                </javadoc>
                <method name="actionPerformed" type="void" line="559">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                    <declaration name="editor" type="JEditorPane" line="560"/>
                    <scope line="561">
                        <declaration name="a" type="int" line="562"/>
                        <scope line="563">
                            <declaration name="s" type="String" line="564"/>
                            <scope line="565"/>
                            <scope line="568"/>
                        </scope>
                        <declaration name="attr" type="MutableAttributeSet" line="571"/>
                    </scope>
                </method>
                <declaration name="a" type="int" line="576"/>
            </class>
            <class name="BoldAction" line="578">
                <extends class="StyledTextAction"/>
                <javadoc line="578">
                    An action to toggle the bold attribute.
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      Serialized objects of this class will not be compatible with
                      future Swing releases. The current serialization support is
                      appropriate for short term storage or RMI between applications running
                      the same version of Swing.  As of 1.4, support for long term storage
                      of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                      has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                      Please see {@link java.beans.XMLEncoder}.                    
                </javadoc>
                <javadoc line="591">
                    Constructs a new BoldAction.                    
                </javadoc>
                <method name="BoldAction" type="constructor" line="594"/>
                <javadoc line="597">
                    Toggles the bold attribute.                    
                    <param>
                        e the action event                        
                    </param>
                </javadoc>
                <method name="actionPerformed" type="void" line="601">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                    <declaration name="editor" type="JEditorPane" line="602"/>
                    <scope line="603">
                        <declaration name="kit" type="StyledEditorKit" line="604"/>
                        <declaration name="attr" type="MutableAttributeSet" line="605"/>
                        <declaration name="bold" type="boolean" line="606"/>
                        <declaration name="sas" type="SimpleAttributeSet" line="607"/>
                    </scope>
                </method>
            </class>
            <class name="ItalicAction" line="613">
                <extends class="StyledTextAction"/>
                <javadoc line="613">
                    An action to toggle the italic attribute.
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      Serialized objects of this class will not be compatible with
                      future Swing releases. The current serialization support is
                      appropriate for short term storage or RMI between applications running
                      the same version of Swing.  As of 1.4, support for long term storage
                      of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                      has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                      Please see {@link java.beans.XMLEncoder}.                    
                </javadoc>
                <javadoc line="626">
                    Constructs a new ItalicAction.                    
                </javadoc>
                <method name="ItalicAction" type="constructor" line="629"/>
                <javadoc line="632">
                    Toggles the italic attribute.                    
                    <param>
                        e the action event                        
                    </param>
                </javadoc>
                <method name="actionPerformed" type="void" line="636">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                    <declaration name="editor" type="JEditorPane" line="637"/>
                    <scope line="638">
                        <declaration name="kit" type="StyledEditorKit" line="639"/>
                        <declaration name="attr" type="MutableAttributeSet" line="640"/>
                        <declaration name="italic" type="boolean" line="641"/>
                        <declaration name="sas" type="SimpleAttributeSet" line="642"/>
                    </scope>
                </method>
            </class>
            <class name="UnderlineAction" line="648">
                <extends class="StyledTextAction"/>
                <javadoc line="648">
                    An action to toggle the underline attribute.
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      Serialized objects of this class will not be compatible with
                      future Swing releases. The current serialization support is
                      appropriate for short term storage or RMI between applications running
                      the same version of Swing.  As of 1.4, support for long term storage
                      of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                      has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                      Please see {@link java.beans.XMLEncoder}.                    
                </javadoc>
                <javadoc line="661">
                    Constructs a new UnderlineAction.                    
                </javadoc>
                <method name="UnderlineAction" type="constructor" line="664"/>
                <javadoc line="667">
                    Toggles the Underline attribute.                    
                    <param>
                        e the action event                        
                    </param>
                </javadoc>
                <method name="actionPerformed" type="void" line="671">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                    <declaration name="editor" type="JEditorPane" line="672"/>
                    <scope line="673">
                        <declaration name="kit" type="StyledEditorKit" line="674"/>
                        <declaration name="attr" type="MutableAttributeSet" line="675"/>
                        <declaration name="underline" type="boolean" line="676"/>
                        <declaration name="sas" type="SimpleAttributeSet" line="677"/>
                    </scope>
                </method>
            </class>
            <class name="StyledInsertBreakAction" line="683">
                <extends class="StyledTextAction"/>
                <javadoc line="683">
                    StyledInsertBreakAction has similar behavior to that of
                      &lt;code&gt;DefaultEditorKit.InsertBreakAction&lt;/code&gt;. That is when
                      its &lt;code&gt;actionPerformed&lt;/code&gt; method is invoked, a newline
                      is inserted. Beyond that, this will reset the input attributes to
                      what they were before the newline was inserted.                    
                </javadoc>
                <declaration name="tempSet" type="SimpleAttributeSet" line="691"/>
                <method name="StyledInsertBreakAction" type="constructor" line="692"/>
                <method name="actionPerformed" type="void" line="695">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                    <declaration name="target" type="JEditorPane" line="696"/>
                    <scope line="697">
                        <scope line="698"/>
                        <declaration name="sek" type="StyledEditorKit" line="702"/>
                        <scope line="703"/>
                        <scope line="706"/>
                        <declaration name="ia" type="MutableAttributeSet" line="711"/>
                    </scope>
                    <scope line="716">
                        <declaration name="text" type="JTextComponent" line="717"/>
                        <scope line="718">
                            <scope line="719"/>
                        </scope>
                    </scope>
                </method>
            </class>
        </class>
    </source>