<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text.html">
        <import package="java.awt"/>
        <import package="java.awt.image.ImageObserver"/>
        <import package="java.net"/>
        <import package="java.util.Dictionary"/>
        <import package="javax.swing"/>
        <import package="javax.swing.text"/>
        <import package="javax.swing.event"/>
        <class name="ImageView" line="35">
            <extends class="View"/>
            <comment line="77">
                Height/width to use before we know the real size, these should at least                
            </comment>
            <comment line="78">
                the size of &lt;code&gt;sMissingImageIcon&lt;/code&gt; and                
            </comment>
            <comment line="79">
                &lt;code&gt;sPendingImageIcon&lt;/code&gt;                
            </comment>
            <comment line="88">
                Bitmask values                
            </comment>
            <comment line="109">
                Size of the border, the insets contains this valid. For example, if                
            </comment>
            <comment line="110">
                the HSPACE attribute was 4 and BORDER 2, leftInset would be 6.                
            </comment>
            <comment line="112">
                Insets, obtained from the painter.                
            </comment>
            <javadoc line="35">
                View of an Image, intended to support the HTML &amp;lt;IMG&amp;gt; tag.
                  Supports scaling via the HEIGHT and WIDTH attributes of the tag.
                  If the image is unable to be loaded any text specified via the
                  &lt;code&gt;ALT&lt;/code&gt; attribute will be rendered.
                  &lt;p&gt;
                  While this class has been part of swing for a while now, it is public
                  as of 1.4.                
                <author>
                    Scott Violet                    
                </author>
                <see>
                    IconView                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="sIsInc" type="boolean" line="49"/>
            <javadoc line="49">
                If true, when some of the bits are available a repaint is done.
                  &lt;p&gt;
                  This is set to false as swing does not offer a repaint that takes a
                  delay. If this were true, a bunch of immediate repaints would get
                  generated that end up significantly delaying the loading of the image
                  (or anything else going on for that matter).                
            </javadoc>
            <declaration name="sIncRate" type="int" line="58"/>
            <javadoc line="58">
                Repaint delay when some of the bits are available.                
            </javadoc>
            <declaration name="PENDING_IMAGE" type="String" line="62"/>
            <javadoc line="62">
                Property name for pending image icon                
            </javadoc>
            <declaration name="MISSING_IMAGE" type="String" line="66"/>
            <javadoc line="66">
                Property name for missing image icon                
            </javadoc>
            <declaration name="IMAGE_CACHE_PROPERTY" type="String" line="71"/>
            <javadoc line="71">
                Document property for image cache.                
            </javadoc>
            <declaration name="DEFAULT_WIDTH" type="int" line="79"/>
            <declaration name="DEFAULT_HEIGHT" type="int" line="80"/>
            <declaration name="DEFAULT_BORDER" type="int" line="82"/>
            <javadoc line="82">
                Default border to use if one is not specified.                
            </javadoc>
            <declaration name="LOADING_FLAG" type="int" line="88"/>
            <declaration name="LINK_FLAG" type="int" line="89"/>
            <declaration name="WIDTH_FLAG" type="int" line="90"/>
            <declaration name="HEIGHT_FLAG" type="int" line="91"/>
            <declaration name="RELOAD_FLAG" type="int" line="92"/>
            <declaration name="RELOAD_IMAGE_FLAG" type="int" line="93"/>
            <declaration name="SYNC_LOAD_FLAG" type="int" line="94"/>
            <declaration name="attr" type="AttributeSet" line="96"/>
            <declaration name="image" type="Image" line="97"/>
            <declaration name="disabledImage" type="Image" line="98"/>
            <declaration name="width" type="int" line="99"/>
            <declaration name="height" type="int" line="100"/>
            <declaration name="state" type="int" line="101"/>
            <javadoc line="101">
                Bitmask containing some of the above bitmask values. Because the
                  image loading notification can happen on another thread access to
                  this is synchronized (at least for modifying it).                
            </javadoc>
            <declaration name="container" type="Container" line="105"/>
            <declaration name="fBounds" type="Rectangle" line="106"/>
            <declaration name="borderColor" type="Color" line="107"/>
            <declaration name="borderSize" type="short" line="110"/>
            <declaration name="leftInset" type="short" line="112"/>
            <declaration name="rightInset" type="short" line="113"/>
            <declaration name="topInset" type="short" line="114"/>
            <declaration name="bottomInset" type="short" line="115"/>
            <declaration name="imageObserver" type="ImageObserver" line="116"/>
            <javadoc line="116">
                We don&apos;t directly implement ImageObserver, instead we use an instance
                  that calls back to us.                
            </javadoc>
            <declaration name="altView" type="View" line="121"/>
            <javadoc line="121">
                Used for alt text. Will be non-null if the image couldn&apos;t be found,
                  and there is valid alt text.                
            </javadoc>
            <declaration name="vAlign" type="float" line="126"/>
            <javadoc line="126">
                Alignment along the vertical (Y) axis.                
            </javadoc>
            <javadoc line="131">
                Creates a new view that represents an IMG element.                
                <param>
                    elem the element to create a view for                    
                </param>
            </javadoc>
            <method name="ImageView" type="constructor" line="136">
                <params>
                    <param name="elem" type="Element"/>
                </params>
            </method>
            <javadoc line="143">
                Returns the text to display if the image can&apos;t be loaded. This is
                  obtained from the Elements attribute set with the attribute name
                  &lt;code&gt;HTML.Attribute.ALT&lt;/code&gt;.                
            </javadoc>
            <method name="getAltText" type="String" line="148"/>
            <javadoc line="153">
                Return a URL for the image source,
                  or null if it could not be determined.                
            </javadoc>
            <method name="getImageURL" type="URL" line="157">
                <declaration name="src" type="String" line="158"/>
                <scope line="160"/>
                <declaration name="reference" type="URL" line="164"/>
                <scope line="165">
                    <declaration name="u" type="URL" line="166"/>
                </scope>
                <scope line="168"/>
            </method>
            <javadoc line="173">
                Returns the icon to use if the image couldn&apos;t be found.                
            </javadoc>
            <method name="getNoImageIcon" type="Icon" line="176"/>
            <javadoc line="180">
                Returns the icon to use while in the process of loading the image.                
            </javadoc>
            <method name="getLoadingImageIcon" type="Icon" line="183"/>
            <javadoc line="187">
                Returns the image to render.                
            </javadoc>
            <method name="getImage" type="Image" line="190"/>
            <method name="getImage" type="Image" line="195">
                <params>
                    <param name="enabled" type="boolean"/>
                </params>
                <declaration name="img" type="Image" line="196"/>
                <scope line="197">
                    <scope line="198"/>
                </scope>
            </method>
            <javadoc line="206">
                Sets how the image is loaded. If &lt;code&gt;newValue&lt;/code&gt; is true,
                  the image we be loaded when first asked for, otherwise it will
                  be loaded asynchronously. The default is to not load synchronously,
                  that is to load the image asynchronously.                
            </javadoc>
            <method name="setLoadsSynchronously" type="void" line="212">
                <params>
                    <param name="newValue" type="boolean"/>
                </params>
                <scope line="213">
                    <scope line="214"/>
                    <scope line="217"/>
                </scope>
            </method>
            <javadoc line="223">
                Returns true if the image should be loaded when first asked for.                
            </javadoc>
            <method name="getLoadsSynchronously" type="boolean" line="226"/>
            <javadoc line="230">
                Convenience method to get the StyleSheet.                
            </javadoc>
            <method name="getStyleSheet" type="StyleSheet" line="233">
                <declaration name="doc" type="HTMLDocument" line="234"/>
            </method>
            <javadoc line="238">
                Fetches the attributes to use when rendering.  This is
                  implemented to multiplex the attributes specified in the
                  model with a StyleSheet.                
            </javadoc>
            <method name="getAttributes" type="AttributeSet" line="243"/>
            <javadoc line="248">
                For images the tooltip text comes from text specified with the
                  &lt;code&gt;ALT&lt;/code&gt; attribute. This is overriden to return
                  &lt;code&gt;getAltText&lt;/code&gt;.                
                <see>
                    JTextComponent#getToolTipText                    
                </see>
            </javadoc>
            <method name="getToolTipText" type="String" line="255">
                <params>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                    <param name="allocation" type="Shape"/>
                </params>
            </method>
            <javadoc line="259">
                Update any cached values that come from attributes.                
            </javadoc>
            <method name="setPropertiesFromAttributes" type="void" line="262">
                <comment line="266">
                    Gutters                    
                </comment>
                <comment line="280">
                    Alignment.                    
                </comment>
                <comment line="281">
                    PENDING: This needs to be changed to support the CSS versions                    
                </comment>
                <comment line="282">
                    when conversion from ALIGN to VERTICAL_ALIGN is complete.                    
                </comment>
                <declaration name="sheet" type="StyleSheet" line="263"/>
                <declaration name="attr" type="AttributeSet" line="278"/>
                <declaration name="alignment" type="Object" line="283"/>
                <scope line="286">
                    <scope line="288"/>
                    <scope line="291"/>
                </scope>
                <declaration name="anchorAttr" type="AttributeSet" line="296"/>
                <scope line="298">
                    <scope line="299"/>
                </scope>
                <scope line="303">
                    <scope line="304"/>
                </scope>
            </method>
            <javadoc line="310">
                Establishes the parent view for this view.
                  Seize this moment to cache the AWT Container I&apos;m in.                
            </javadoc>
            <method name="setParent" type="void" line="314">
                <params>
                    <param name="parent" type="View"/>
                </params>
                <declaration name="oldParent" type="View" line="315"/>
                <scope line="318">
                    <scope line="319"/>
                </scope>
            </method>
            <javadoc line="325">
                Invoked when the Elements attributes have changed. Recreates the image.                
            </javadoc>
            <method name="changedUpdate" type="void" line="328">
                <params>
                    <param name="e" type="DocumentEvent"/>
                    <param name="a" type="Shape"/>
                    <param name="f" type="ViewFactory"/>
                </params>
                <comment line="335">
                    Assume the worst.                    
                </comment>
                <scope line="331"/>
            </method>
            <javadoc line="339">
                Paints the View.                
                <param>
                    g the rendering surface to use                    
                </param>
                <param>
                    a the allocated region to render into                    
                </param>
                <see>
                    View#paint                    
                </see>
            </javadoc>
            <method name="paint" type="void" line="346">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="a" type="Shape"/>
                </params>
                <comment line="366">
                    No pixels yet, use the default                    
                </comment>
                <comment line="374">
                    Draw the image                    
                </comment>
                <comment line="386">
                    Paint the view representing the alt text, if its non-null                    
                </comment>
                <comment line="389">
                    Assume layout along the y direction                    
                </comment>
                <comment line="399">
                    Reset clip.                    
                </comment>
                <declaration name="rect" type="Rectangle" line="349"/>
                <declaration name="clip" type="Rectangle" line="351"/>
                <scope line="356"/>
                <declaration name="host" type="Container" line="362"/>
                <declaration name="img" type="Image" line="363"/>
                <scope line="364">
                    <scope line="365">
                        <declaration name="icon" type="Icon" line="367"/>
                        <scope line="368"/>
                    </scope>
                    <scope line="373"/>
                </scope>
                <scope line="379">
                    <declaration name="icon" type="Icon" line="380"/>
                    <scope line="381"/>
                    <declaration name="view" type="View" line="385"/>
                    <scope line="388">
                        <declaration name="altRect" type="Rectangle" line="390"/>
                    </scope>
                </scope>
                <scope line="398"/>
            </method>
            <method name="paintHighlights" type="void" line="404">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="shape" type="Shape"/>
                </params>
                <scope line="405">
                    <declaration name="tc" type="JTextComponent" line="406"/>
                    <declaration name="h" type="Highlighter" line="407"/>
                    <scope line="408"/>
                </scope>
            </method>
            <method name="paintBorder" type="void" line="415">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="rect" type="Rectangle"/>
                </params>
                <declaration name="color" type="Color" line="416"/>
                <scope line="418">
                    <declaration name="xOffset" type="int" line="419"/>
                    <declaration name="yOffset" type="int" line="420"/>
                    <declaration name="n" type="int" line="422"/>
                    <scope line="423"/>
                </scope>
            </method>
            <javadoc line="432">
                Determines the preferred span for this view along an
                  axis.                
                <param>
                    axis may be either X_AXIS or Y_AXIS                    
                </param>
                <return>
                    the span the view would like to be rendered into;
                      typically the view is told to render into the span
                      that is returned, although there is no guarantee;
                      the parent may choose to resize or break the view                    
                </return>
            </javadoc>
            <method name="getPreferredSpan" type="float" line="442">
                <params>
                    <param name="axis" type="int"/>
                </params>
                <comment line="445">
                    If the attributes specified a width/height, always use it!                    
                </comment>
                <scope line="446"/>
                <scope line="450"/>
                <declaration name="image" type="Image" line="455"/>
                <scope line="457"/>
                <scope line="467">
                    <declaration name="view" type="View" line="468"/>
                    <declaration name="retValue" type="float" line="469"/>
                    <scope line="471"/>
                </scope>
            </method>
            <javadoc line="485">
                Determines the desired alignment for this view along an
                  axis.  This is implemented to give the alignment to the
                  bottom of the icon along the y axis, and the default
                  along the x axis.                
                <param>
                    axis may be either X_AXIS or Y_AXIS                    
                </param>
                <return>
                    the desired alignment; this should be a value
                      between 0.0 and 1.0 where 0 indicates alignment at the
                      origin and 1.0 indicates alignment to the full span
                      away from the origin; an alignment of 0.5 would be the
                      center of the view                    
                </return>
            </javadoc>
            <method name="getAlignment" type="float" line="498">
                <params>
                    <param name="axis" type="int"/>
                </params>
            </method>
            <javadoc line="507">
                Provides a mapping from the document model coordinate space
                  to the coordinate space of the view mapped to it.                
                <param>
                    pos the position to convert                    
                </param>
                <param>
                    a the allocated region to render into                    
                </param>
                <return>
                    the bounding box of the given position                    
                </return>
                <exception>
                    BadLocationException  if the given position does not represent a
                      valid location in the associated document                    
                </exception>
                <see>
                    View#modelToView                    
                </see>
            </javadoc>
            <method name="modelToView" type="Shape" line="518">
                <params>
                    <param name="pos" type="int"/>
                    <param name="a" type="Shape"/>
                    <param name="b" type="Position.Bias"/>
                </params>
                <declaration name="p0" type="int" line="519"/>
                <declaration name="p1" type="int" line="520"/>
                <scope line="521">
                    <declaration name="r" type="Rectangle" line="522"/>
                    <scope line="523"/>
                </scope>
            </method>
            <javadoc line="532">
                Provides a mapping from the view coordinate space to the logical
                  coordinate space of the model.                
                <param>
                    x the X coordinate                    
                </param>
                <param>
                    y the Y coordinate                    
                </param>
                <param>
                    a the allocated region to render into                    
                </param>
                <return>
                    the location within the model that best represents the
                      given point of view                    
                </return>
                <see>
                    View#viewToModel                    
                </see>
            </javadoc>
            <method name="viewToModel" type="int" line="543">
                <params>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                    <param name="a" type="Shape"/>
                    <param name="bias" type="Position.Bias[]"/>
                </params>
                <declaration name="alloc" type="Rectangle" line="544"/>
                <scope line="545"/>
            </method>
            <javadoc line="553">
                Sets the size of the view.  This should cause
                  layout of the view if it has any layout duties.                
                <param>
                    width the width >= 0                    
                </param>
                <param>
                    height the height >= 0                    
                </param>
            </javadoc>
            <method name="setSize" type="void" line="560">
                <params>
                    <param name="width" type="float"/>
                    <param name="height" type="float"/>
                </params>
                <scope line="563">
                    <declaration name="view" type="View" line="564"/>
                    <scope line="566"/>
                </scope>
            </method>
            <javadoc line="573">
                Returns true if this image within a link?                
            </javadoc>
            <method name="isLink" type="boolean" line="576"/>
            <javadoc line="580">
                Returns true if the passed in image has a non-zero width and height.                
            </javadoc>
            <method name="hasPixels" type="boolean" line="583">
                <params>
                    <param name="image" type="Image"/>
                </params>
            </method>
            <javadoc line="589">
                Returns the preferred span of the View used to display the alt text,
                  or 0 if the view does not exist.                
            </javadoc>
            <method name="getPreferredSpanFromAltView" type="float" line="593">
                <params>
                    <param name="axis" type="int"/>
                </params>
                <scope line="594">
                    <declaration name="view" type="View" line="595"/>
                    <scope line="597"/>
                </scope>
            </method>
            <javadoc line="604">
                Request that this view be repainted.
                  Assumes the view is still at its last-drawn location.                
            </javadoc>
            <method name="repaint" type="void" line="608">
                <params>
                    <param name="delay" type="long"/>
                </params>
                <scope line="609"/>
            </method>
            <javadoc line="615">
                Convenience method for getting an integer attribute from the elements
                  AttributeSet.                
            </javadoc>
            <method name="getIntAttr" type="int" line="619">
                <params>
                    <param name="name" type="HTML.Attribute"/>
                    <param name="deflt" type="int"/>
                </params>
                <comment line="621">
                    does not check parents!                    
                </comment>
                <declaration name="attr" type="AttributeSet" line="620"/>
                <scope line="621">
                    <declaration name="i" type="int" line="622"/>
                    <declaration name="val" type="String" line="623"/>
                    <scope line="624"/>
                    <scope line="627">
                        <scope line="628"/>
                        <scope line="630"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="639">
                Makes sure the necessary properties and image is loaded.                
            </javadoc>
            <method name="sync" type="void" line="642">
                <declaration name="s" type="int" line="643"/>
                <scope line="644"/>
                <scope line="648">
                    <scope line="649"/>
                </scope>
            </method>
            <javadoc line="656">
                Loads the image and updates the size accordingly. This should be
                  invoked instead of invoking &lt;code&gt;loadImage&lt;/code&gt; or
                  &lt;code&gt;updateImageSize&lt;/code&gt; directly.                
            </javadoc>
            <method name="refreshImage" type="void" line="661">
                <comment line="663">
                    clear out width/height/realoadimage flag and set loading flag                    
                </comment>
                <comment line="672">
                    Load the image                    
                </comment>
                <comment line="675">
                    And update the size params                    
                </comment>
                <comment line="680">
                    Clear out state in case someone threw an exception.                    
                </comment>
                <scope line="662"/>
                <scope line="671"/>
                <scope line="678">
                    <scope line="679"/>
                </scope>
            </method>
            <javadoc line="686">
                Loads the image from the URL &lt;code&gt;getImageURL&lt;/code&gt;. This should
                  only be invoked from &lt;code&gt;refreshImage&lt;/code&gt;.                
            </javadoc>
            <method name="loadImage" type="void" line="690">
                <comment line="702">
                    Force the image to be loaded by using an ImageIcon.                    
                </comment>
                <declaration name="src" type="URL" line="691"/>
                <declaration name="newImage" type="Image" line="692"/>
                <scope line="693">
                    <declaration name="cache" type="Dictionary" line="694"/>
                    <scope line="696"/>
                    <scope line="699">
                        <scope line="701">
                            <declaration name="ii" type="ImageIcon" line="703"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="711">
                Recreates and reloads the image.  This should
                  only be invoked from &lt;code&gt;refreshImage&lt;/code&gt;.                
            </javadoc>
            <method name="updateImageSize" type="void" line="715">
                <comment line="725">
                    Get the width/height and set the state ivar before calling                    
                </comment>
                <comment line="726">
                    anything that might cause the image to be loaded, and thus the                    
                </comment>
                <comment line="727">
                    ImageHandler to be called.                    
                </comment>
                <comment line="751">
                    Make sure the image starts loading:                    
                </comment>
                <comment line="764">
                    If imageloading failed, other thread may have called                    
                </comment>
                <comment line="765">
                    ImageLoader which will null out image, hence we check                    
                </comment>
                <comment line="766">
                    for it.                    
                </comment>
                <comment line="789">
                    Only reset if this thread determined image is null                    
                </comment>
                <declaration name="newWidth" type="int" line="716"/>
                <declaration name="newHeight" type="int" line="717"/>
                <declaration name="newState" type="int" line="718"/>
                <declaration name="newImage" type="Image" line="719"/>
                <scope line="721">
                    <declaration name="elem" type="Element" line="722"/>
                    <declaration name="attr" type="AttributeSet" line="723"/>
                    <scope line="729"/>
                    <scope line="733"/>
                    <scope line="737">
                        <scope line="739"/>
                    </scope>
                    <scope line="744">
                        <scope line="746"/>
                    </scope>
                    <scope line="752"/>
                    <scope line="757"/>
                    <declaration name="createText" type="boolean" line="762"/>
                    <scope line="763">
                        <scope line="767">
                            <scope line="768"/>
                            <scope line="772"/>
                        </scope>
                        <scope line="776">
                            <scope line="778"/>
                            <scope line="781"/>
                        </scope>
                    </scope>
                    <scope line="788"/>
                </scope>
                <scope line="793"/>
            </method>
            <javadoc line="799">
                Updates the view representing the alt text.                
            </javadoc>
            <method name="updateAltTextView" type="void" line="802">
                <declaration name="text" type="String" line="803"/>
                <scope line="805">
                    <declaration name="newView" type="ImageLabelView" line="806"/>
                    <scope line="809"/>
                </scope>
            </method>
            <javadoc line="815">
                Returns the view to use for alternate text. This may be null.                
            </javadoc>
            <method name="getAltView" type="View" line="818">
                <declaration name="view" type="View" line="819"/>
                <scope line="821"/>
                <scope line="824"/>
            </method>
            <javadoc line="830">
                Invokes &lt;code&gt;preferenceChanged&lt;/code&gt; on the event displatching
                  thread.                
            </javadoc>
            <method name="safePreferenceChanged" type="void" line="834">
                <scope line="835">
                    <declaration name="doc" type="Document" line="836"/>
                    <scope line="837"/>
                    <scope line="841"/>
                </scope>
                <scope line="845">
                    <anonymous_class line="846">
                        <method name="run" type="void" line="847"/>
                    </anonymous_class>
                </scope>
            </method>
            <class name="ImageHandler" line="854">
                <comment line="860">
                    This can come on any thread. If we are in the process of reloading                    
                </comment>
                <comment line="861">
                    the image and determining our state (loading == true) we don&apos;t fire                    
                </comment>
                <comment line="862">
                    preference changed, or repaint, we just reset the fWidth/fHeight as                    
                </comment>
                <comment line="863">
                    necessary and return. This is ok as we know when loading finishes                    
                </comment>
                <comment line="864">
                    it will pick up the new height/width, if necessary.                    
                </comment>
                <implements interface="ImageObserver"/>
                <javadoc line="854">
                    ImageHandler implements the ImageObserver to correctly update the
                      display as new parts of the image become available.                    
                </javadoc>
                <method name="imageUpdate" type="boolean" line="865">
                    <params>
                        <param name="img" type="Image"/>
                        <param name="flags" type="int"/>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                        <param name="newWidth" type="int"/>
                        <param name="newHeight" type="int"/>
                    </params>
                    <comment line="872">
                        Bail out if there was an error:                        
                    </comment>
                    <comment line="877">
                        Be sure image hasn&apos;t changed since we don&apos;t                        
                    </comment>
                    <comment line="878">
                        initialy synchronize                        
                    </comment>
                    <comment line="890">
                        No need to resize or repaint, still in the process                        
                    </comment>
                    <comment line="891">
                        of loading.                        
                    </comment>
                    <comment line="901">
                        Resize image if necessary:                        
                    </comment>
                    <comment line="920">
                        No need to resize or repaint, still in the process of                        
                    </comment>
                    <comment line="921">
                        loading.                        
                    </comment>
                    <comment line="926">
                        May need to resize myself, asynchronously:                        
                    </comment>
                    <comment line="932">
                        Repaint when done or when new pixels arrive:                        
                    </comment>
                    <scope line="867"/>
                    <scope line="873">
                        <scope line="875">
                            <scope line="876">
                                <scope line="880"/>
                                <scope line="883"/>
                            </scope>
                            <scope line="886"/>
                            <scope line="889"/>
                        </scope>
                    </scope>
                    <scope line="900">
                        <declaration name="changed" type="short" line="902"/>
                        <scope line="904"/>
                        <scope line="908"/>
                        <scope line="912">
                            <scope line="913"/>
                            <scope line="916"/>
                            <scope line="919"/>
                        </scope>
                        <scope line="925"/>
                    </scope>
                    <scope line="933"/>
                    <scope line="936"/>
                </method>
            </class>
            <class name="ImageLabelView" line="944">
                <extends class="InlineView"/>
                <comment line="860">
                    This can come on any thread. If we are in the process of reloading                    
                </comment>
                <comment line="861">
                    the image and determining our state (loading == true) we don&apos;t fire                    
                </comment>
                <comment line="862">
                    preference changed, or repaint, we just reset the fWidth/fHeight as                    
                </comment>
                <comment line="863">
                    necessary and return. This is ok as we know when loading finishes                    
                </comment>
                <comment line="864">
                    it will pick up the new height/width, if necessary.                    
                </comment>
                <javadoc line="944">
                    ImageLabelView is used if the image can&apos;t be loaded, and
                      the attribute specified an alt attribute. It overriden a handle of
                      methods as the text is hardcoded and does not come from the document.                    
                </javadoc>
                <declaration name="segment" type="Segment" line="950"/>
                <declaration name="fg" type="Color" line="951"/>
                <method name="ImageLabelView" type="constructor" line="953">
                    <params>
                        <param name="e" type="Element"/>
                        <param name="text" type="String"/>
                    </params>
                </method>
                <method name="reset" type="void" line="958">
                    <params>
                        <param name="text" type="String"/>
                    </params>
                </method>
                <method name="paint" type="void" line="962">
                    <params>
                        <param name="g" type="Graphics"/>
                        <param name="a" type="Shape"/>
                    </params>
                    <comment line="963">
                        Don&apos;t use supers paint, otherwise selection will be wrong                        
                    </comment>
                    <comment line="964">
                        as our start/end offsets are fake.                        
                    </comment>
                    <declaration name="painter" type="GlyphPainter" line="965"/>
                    <scope line="967"/>
                </method>
                <method name="getText" type="Segment" line="973">
                    <params>
                        <param name="p0" type="int"/>
                        <param name="p1" type="int"/>
                    </params>
                    <scope line="974"/>
                </method>
                <method name="getStartOffset" type="int" line="982"/>
                <method name="getEndOffset" type="int" line="986"/>
                <method name="breakView" type="View" line="990">
                    <params>
                        <param name="axis" type="int"/>
                        <param name="p0" type="int"/>
                        <param name="pos" type="float"/>
                        <param name="len" type="float"/>
                    </params>
                    <comment line="991">
                        Don&apos;t allow a break                        
                    </comment>
                </method>
                <method name="getForeground" type="Color" line="995">
                    <declaration name="parent" type="View" line="996"/>
                    <scope line="997">
                        <declaration name="doc" type="Document" line="998"/>
                        <declaration name="attr" type="AttributeSet" line="999"/>
                        <scope line="1001"/>
                    </scope>
                </method>
            </class>
        </class>
    </source>