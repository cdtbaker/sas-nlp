<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text.html">
        <import package="java.awt"/>
        <import package="java.awt.image.ImageObserver"/>
        <import package="java.net"/>
        <import package="java.util.Dictionary"/>
        <import package="javax.swing"/>
        <import package="javax.swing.text"/>
        <import package="javax.swing.event"/>
        <class name="ImageView" line="9">
            <extends class="View"/>
            <javadoc line="9">
                View of an Image, intended to support the HTML &amp;lt;IMG&amp;gt; tag.
                  Supports scaling via the HEIGHT and WIDTH attributes of the tag.
                  If the image is unable to be loaded any text specified via the
                  &lt;code&gt;ALT&lt;/code&gt; attribute will be rendered.
                  &lt;p&gt;
                  While this class has been part of swing for a while now, it is public
                  as of 1.4.                
                <author>
                    Scott Violet                    
                </author>
                <see>
                    IconView                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="sIsInc" type="boolean" line="22"/>
            <javadoc line="22">
                If true, when some of the bits are available a repaint is done.
                  &lt;p&gt;
                  This is set to false as swing does not offer a repaint that takes a
                  delay. If this were true, a bunch of immediate repaints would get
                  generated that end up significantly delaying the loading of the image
                  (or anything else going on for that matter).                
            </javadoc>
            <declaration name="sIncRate" type="int" line="31"/>
            <javadoc line="31">
                Repaint delay when some of the bits are available.                
            </javadoc>
            <declaration name="PENDING_IMAGE" type="String" line="35"/>
            <javadoc line="35">
                Property name for pending image icon                
            </javadoc>
            <declaration name="MISSING_IMAGE" type="String" line="39"/>
            <javadoc line="39">
                Property name for missing image icon                
            </javadoc>
            <declaration name="IMAGE_CACHE_PROPERTY" type="String" line="43"/>
            <javadoc line="43">
                Document property for image cache.                
            </javadoc>
            <declaration name="DEFAULT_WIDTH" type="int" line="47"/>
            <declaration name="DEFAULT_HEIGHT" type="int" line="48"/>
            <declaration name="DEFAULT_BORDER" type="int" line="49"/>
            <javadoc line="49">
                Default border to use if one is not specified.                
            </javadoc>
            <declaration name="LOADING_FLAG" type="int" line="53"/>
            <declaration name="LINK_FLAG" type="int" line="54"/>
            <declaration name="WIDTH_FLAG" type="int" line="55"/>
            <declaration name="HEIGHT_FLAG" type="int" line="56"/>
            <declaration name="RELOAD_FLAG" type="int" line="57"/>
            <declaration name="RELOAD_IMAGE_FLAG" type="int" line="58"/>
            <declaration name="SYNC_LOAD_FLAG" type="int" line="59"/>
            <declaration name="attr" type="AttributeSet" line="60"/>
            <declaration name="image" type="Image" line="61"/>
            <declaration name="disabledImage" type="Image" line="62"/>
            <declaration name="width" type="int" line="63"/>
            <declaration name="height" type="int" line="64"/>
            <declaration name="state" type="int" line="65"/>
            <javadoc line="65">
                Bitmask containing some of the above bitmask values. Because the
                  image loading notification can happen on another thread access to
                  this is synchronized (at least for modifying it).                
            </javadoc>
            <declaration name="container" type="Container" line="71"/>
            <declaration name="fBounds" type="Rectangle" line="72"/>
            <declaration name="borderColor" type="Color" line="73"/>
            <declaration name="borderSize" type="short" line="74"/>
            <declaration name="leftInset" type="short" line="75"/>
            <declaration name="rightInset" type="short" line="76"/>
            <declaration name="topInset" type="short" line="77"/>
            <declaration name="bottomInset" type="short" line="78"/>
            <declaration name="imageObserver" type="ImageObserver" line="79"/>
            <javadoc line="79">
                We don&apos;t directly implement ImageObserver, instead we use an instance
                  that calls back to us.                
            </javadoc>
            <declaration name="altView" type="View" line="84"/>
            <javadoc line="84">
                Used for alt text. Will be non-null if the image couldn&apos;t be found,
                  and there is valid alt text.                
            </javadoc>
            <declaration name="vAlign" type="float" line="89"/>
            <javadoc line="89">
                Alignment along the vertical (Y) axis.                
            </javadoc>
            <javadoc line="93">
                Creates a new view that represents an IMG element.                
                <param>
                    elem the element to create a view for                    
                </param>
            </javadoc>
            <method name="ImageView" type="constructor" line="97">
                <params>
                    <param name="elem" type="Element"/>
                </params>
            </method>
            <javadoc line="103">
                Returns the text to display if the image can&apos;t be loaded. This is
                  obtained from the Elements attribute set with the attribute name
                  &lt;code&gt;HTML.Attribute.ALT&lt;/code&gt;.                
            </javadoc>
            <method name="getAltText" type="String" line="108"/>
            <javadoc line="111">
                Return a URL for the image source,
                  or null if it could not be determined.                
            </javadoc>
            <method name="getImageURL" type="URL" line="115">
                <declaration name="src" type="String" line="116"/>
                <scope line="117"/>
                <declaration name="reference" type="URL" line="120"/>
                <scope line="121">
                    <declaration name="u" type="URL" line="122"/>
                </scope>
                <scope line="125"/>
            </method>
            <javadoc line="129">
                Returns the icon to use if the image couldn&apos;t be found.                
            </javadoc>
            <method name="getNoImageIcon" type="Icon" line="132"/>
            <javadoc line="135">
                Returns the icon to use while in the process of loading the image.                
            </javadoc>
            <method name="getLoadingImageIcon" type="Icon" line="138"/>
            <javadoc line="141">
                Returns the image to render.                
            </javadoc>
            <method name="getImage" type="Image" line="144"/>
            <method name="getImage" type="Image" line="148">
                <params>
                    <param name="enabled" type="boolean"/>
                </params>
                <declaration name="img" type="Image" line="149"/>
                <scope line="150">
                    <scope line="151"/>
                </scope>
            </method>
            <javadoc line="158">
                Sets how the image is loaded. If &lt;code&gt;newValue&lt;/code&gt; is true,
                  the image we be loaded when first asked for, otherwise it will
                  be loaded asynchronously. The default is to not load synchronously,
                  that is to load the image asynchronously.                
            </javadoc>
            <method name="setLoadsSynchronously" type="void" line="164">
                <params>
                    <param name="newValue" type="boolean"/>
                </params>
                <scope line="165">
                    <scope line="166"/>
                    <scope line="169"/>
                </scope>
            </method>
            <javadoc line="174">
                Returns true if the image should be loaded when first asked for.                
            </javadoc>
            <method name="getLoadsSynchronously" type="boolean" line="177"/>
            <javadoc line="180">
                Convenience method to get the StyleSheet.                
            </javadoc>
            <method name="getStyleSheet" type="StyleSheet" line="183">
                <declaration name="doc" type="HTMLDocument" line="184"/>
            </method>
            <javadoc line="187">
                Fetches the attributes to use when rendering.  This is
                  implemented to multiplex the attributes specified in the
                  model with a StyleSheet.                
            </javadoc>
            <method name="getAttributes" type="AttributeSet" line="192"/>
            <javadoc line="196">
                For images the tooltip text comes from text specified with the
                  &lt;code&gt;ALT&lt;/code&gt; attribute. This is overriden to return
                  &lt;code&gt;getAltText&lt;/code&gt;.                
                <see>
                    JTextComponent#getToolTipText                    
                </see>
            </javadoc>
            <method name="getToolTipText" type="String" line="202">
                <params>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                    <param name="allocation" type="Shape"/>
                </params>
            </method>
            <javadoc line="205">
                Update any cached values that come from attributes.                
            </javadoc>
            <method name="setPropertiesFromAttributes" type="void" line="208">
                <declaration name="sheet" type="StyleSheet" line="209"/>
                <declaration name="attr" type="AttributeSet" line="215"/>
                <declaration name="alignment" type="Object" line="216"/>
                <scope line="218">
                    <scope line="220"/>
                    <scope line="223"/>
                </scope>
                <declaration name="anchorAttr" type="AttributeSet" line="227"/>
                <scope line="228">
                    <scope line="229"/>
                </scope>
                <scope line="233">
                    <scope line="234"/>
                </scope>
            </method>
            <javadoc line="239">
                Establishes the parent view for this view.
                  Seize this moment to cache the AWT Container I&apos;m in.                
            </javadoc>
            <method name="setParent" type="void" line="243">
                <params>
                    <param name="parent" type="View"/>
                </params>
                <declaration name="oldParent" type="View" line="244"/>
                <scope line="247">
                    <scope line="248"/>
                </scope>
            </method>
            <javadoc line="253">
                Invoked when the Elements attributes have changed. Recreates the image.                
            </javadoc>
            <method name="changedUpdate" type="void" line="256">
                <params>
                    <param name="e" type="DocumentEvent"/>
                    <param name="a" type="Shape"/>
                    <param name="f" type="ViewFactory"/>
                </params>
                <scope line="258"/>
            </method>
            <javadoc line="263">
                Paints the View.                
                <param>
                    g the rendering surface to use                    
                </param>
                <param>
                    a the allocated region to render into                    
                </param>
                <see>
                    View#paint                    
                </see>
            </javadoc>
            <method name="paint" type="void" line="269">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="a" type="Shape"/>
                </params>
                <declaration name="rect" type="Rectangle" line="271"/>
                <declaration name="clip" type="Rectangle" line="272"/>
                <scope line="276"/>
                <declaration name="host" type="Container" line="279"/>
                <declaration name="img" type="Image" line="280"/>
                <scope line="281">
                    <scope line="282">
                        <declaration name="icon" type="Icon" line="283"/>
                        <scope line="284"/>
                    </scope>
                    <scope line="288"/>
                </scope>
                <scope line="292">
                    <declaration name="icon" type="Icon" line="293"/>
                    <scope line="294"/>
                    <declaration name="view" type="View" line="297"/>
                    <scope line="298">
                        <declaration name="altRect" type="Rectangle" line="299"/>
                    </scope>
                </scope>
                <scope line="303"/>
            </method>
            <method name="paintHighlights" type="void" line="307">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="shape" type="Shape"/>
                </params>
                <scope line="308">
                    <declaration name="tc" type="JTextComponent" line="309"/>
                    <declaration name="h" type="Highlighter" line="310"/>
                    <scope line="311"/>
                </scope>
            </method>
            <method name="paintBorder" type="void" line="316">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="rect" type="Rectangle"/>
                </params>
                <declaration name="color" type="Color" line="317"/>
                <scope line="318">
                    <declaration name="xOffset" type="int" line="319"/>
                    <declaration name="yOffset" type="int" line="320"/>
                    <declaration name="n" type="int" line="322"/>
                    <scope line="323"/>
                </scope>
            </method>
            <javadoc line="328">
                Determines the preferred span for this view along an
                  axis.                
                <param>
                    axis may be either X_AXIS or Y_AXIS                    
                </param>
                <return>
                    the span the view would like to be rendered into;
                      typically the view is told to render into the span
                      that is returned, although there is no guarantee;
                      the parent may choose to resize or break the view                    
                </return>
            </javadoc>
            <method name="getPreferredSpan" type="float" line="337">
                <params>
                    <param name="axis" type="int"/>
                </params>
                <scope line="339"/>
                <scope line="343"/>
                <declaration name="image" type="Image" line="347"/>
                <scope line="348"/>
                <scope line="358">
                    <declaration name="view" type="View" line="359"/>
                    <declaration name="retValue" type="float" line="360"/>
                    <scope line="361"/>
                </scope>
            </method>
            <javadoc line="374">
                Determines the desired alignment for this view along an
                  axis.  This is implemented to give the alignment to the
                  bottom of the icon along the y axis, and the default
                  along the x axis.                
                <param>
                    axis may be either X_AXIS or Y_AXIS                    
                </param>
                <return>
                    the desired alignment; this should be a value
                      between 0.0 and 1.0 where 0 indicates alignment at the
                      origin and 1.0 indicates alignment to the full span
                      away from the origin; an alignment of 0.5 would be the
                      center of the view                    
                </return>
            </javadoc>
            <method name="getAlignment" type="float" line="386">
                <params>
                    <param name="axis" type="int"/>
                </params>
            </method>
            <javadoc line="394">
                Provides a mapping from the document model coordinate space
                  to the coordinate space of the view mapped to it.                
                <param>
                    pos the position to convert                    
                </param>
                <param>
                    a the allocated region to render into                    
                </param>
                <return>
                    the bounding box of the given position                    
                </return>
                <exception>
                    BadLocationException  if the given position does not represent a
                      valid location in the associated document                    
                </exception>
                <see>
                    View#modelToView                    
                </see>
            </javadoc>
            <method name="modelToView" type="Shape" line="404">
                <params>
                    <param name="pos" type="int"/>
                    <param name="a" type="Shape"/>
                    <param name="b" type="Position.Bias"/>
                </params>
                <declaration name="p0" type="int" line="405"/>
                <declaration name="p1" type="int" line="406"/>
                <scope line="407">
                    <declaration name="r" type="Rectangle" line="408"/>
                    <scope line="409"/>
                </scope>
            </method>
            <javadoc line="417">
                Provides a mapping from the view coordinate space to the logical
                  coordinate space of the model.                
                <param>
                    x the X coordinate                    
                </param>
                <param>
                    y the Y coordinate                    
                </param>
                <param>
                    a the allocated region to render into                    
                </param>
                <return>
                    the location within the model that best represents the
                      given point of view                    
                </return>
                <see>
                    View#viewToModel                    
                </see>
            </javadoc>
            <method name="viewToModel" type="int" line="427">
                <params>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                    <param name="a" type="Shape"/>
                    <param name="bias" type="Position.Bias[]"/>
                </params>
                <declaration name="alloc" type="Rectangle" line="428"/>
                <scope line="429"/>
            </method>
            <javadoc line="436">
                Sets the size of the view.  This should cause
                  layout of the view if it has any layout duties.                
                <param>
                    width the width >= 0                    
                </param>
                <param>
                    height the height >= 0                    
                </param>
            </javadoc>
            <method name="setSize" type="void" line="442">
                <params>
                    <param name="width" type="float"/>
                    <param name="height" type="float"/>
                </params>
                <scope line="444">
                    <declaration name="view" type="View" line="445"/>
                    <scope line="446"/>
                </scope>
            </method>
            <javadoc line="451">
                Returns true if this image within a link?                
            </javadoc>
            <method name="isLink" type="boolean" line="454"/>
            <javadoc line="457">
                Returns true if the passed in image has a non-zero width and height.                
            </javadoc>
            <method name="hasPixels" type="boolean" line="460">
                <params>
                    <param name="image" type="Image"/>
                </params>
            </method>
            <javadoc line="463">
                Returns the preferred span of the View used to display the alt text,
                  or 0 if the view does not exist.                
            </javadoc>
            <method name="getPreferredSpanFromAltView" type="float" line="467">
                <params>
                    <param name="axis" type="int"/>
                </params>
                <scope line="468">
                    <declaration name="view" type="View" line="469"/>
                    <scope line="470"/>
                </scope>
            </method>
            <javadoc line="476">
                Request that this view be repainted.
                  Assumes the view is still at its last-drawn location.                
            </javadoc>
            <method name="repaint" type="void" line="480">
                <params>
                    <param name="delay" type="long"/>
                </params>
                <scope line="481"/>
            </method>
            <javadoc line="485">
                Convenience method for getting an integer attribute from the elements
                  AttributeSet.                
            </javadoc>
            <method name="getIntAttr" type="int" line="489">
                <params>
                    <param name="name" type="HTML.Attribute"/>
                    <param name="deflt" type="int"/>
                </params>
                <declaration name="attr" type="AttributeSet" line="490"/>
                <scope line="491">
                    <declaration name="i" type="int" line="492"/>
                    <declaration name="val" type="String" line="493"/>
                    <scope line="494"/>
                    <scope line="497">
                        <scope line="498"/>
                        <scope line="501"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="509">
                Makes sure the necessary properties and image is loaded.                
            </javadoc>
            <method name="sync" type="void" line="512">
                <declaration name="s" type="int" line="513"/>
                <scope line="514"/>
                <scope line="518">
                    <scope line="519"/>
                </scope>
            </method>
            <javadoc line="525">
                Loads the image and updates the size accordingly. This should be
                  invoked instead of invoking &lt;code&gt;loadImage&lt;/code&gt; or
                  &lt;code&gt;updateImageSize&lt;/code&gt; directly.                
            </javadoc>
            <method name="refreshImage" type="void" line="530">
                <scope line="531"/>
                <scope line="536"/>
                <scope line="540">
                    <scope line="541"/>
                </scope>
            </method>
            <javadoc line="546">
                Loads the image from the URL &lt;code&gt;getImageURL&lt;/code&gt;. This should
                  only be invoked from &lt;code&gt;refreshImage&lt;/code&gt;.                
            </javadoc>
            <method name="loadImage" type="void" line="550">
                <declaration name="src" type="URL" line="551"/>
                <declaration name="newImage" type="Image" line="552"/>
                <scope line="553">
                    <declaration name="cache" type="Dictionary" line="554"/>
                    <scope line="555"/>
                    <scope line="558">
                        <scope line="560">
                            <declaration name="ii" type="ImageIcon" line="561"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="568">
                Recreates and reloads the image.  This should
                  only be invoked from &lt;code&gt;refreshImage&lt;/code&gt;.                
            </javadoc>
            <method name="updateImageSize" type="void" line="572">
                <declaration name="newWidth" type="int" line="573"/>
                <declaration name="newHeight" type="int" line="574"/>
                <declaration name="newState" type="int" line="575"/>
                <declaration name="newImage" type="Image" line="576"/>
                <scope line="577">
                    <declaration name="elem" type="Element" line="578"/>
                    <declaration name="attr" type="AttributeSet" line="579"/>
                    <scope line="581"/>
                    <scope line="585"/>
                    <scope line="588">
                        <scope line="590"/>
                    </scope>
                    <scope line="594">
                        <scope line="596"/>
                    </scope>
                    <scope line="600"/>
                    <scope line="603"/>
                    <declaration name="createText" type="boolean" line="606"/>
                    <scope line="607">
                        <scope line="608">
                            <scope line="609"/>
                            <scope line="612"/>
                        </scope>
                        <scope line="616">
                            <scope line="618"/>
                            <scope line="621"/>
                        </scope>
                    </scope>
                    <scope line="628"/>
                </scope>
                <scope line="632"/>
            </method>
            <javadoc line="637">
                Updates the view representing the alt text.                
            </javadoc>
            <method name="updateAltTextView" type="void" line="640">
                <declaration name="text" type="String" line="641"/>
                <scope line="642">
                    <declaration name="newView" type="ImageLabelView" line="643"/>
                    <scope line="645"/>
                </scope>
            </method>
            <javadoc line="650">
                Returns the view to use for alternate text. This may be null.                
            </javadoc>
            <method name="getAltView" type="View" line="653">
                <declaration name="view" type="View" line="654"/>
                <scope line="655"/>
                <scope line="658"/>
            </method>
            <javadoc line="663">
                Invokes &lt;code&gt;preferenceChanged&lt;/code&gt; on the event displatching
                  thread.                
            </javadoc>
            <method name="safePreferenceChanged" type="void" line="667">
                <scope line="668">
                    <declaration name="doc" type="Document" line="669"/>
                    <scope line="670"/>
                    <scope line="674"/>
                </scope>
                <scope line="678">
                    <anonymous_class line="679">
                        <method name="run" type="void" line="680"/>
                    </anonymous_class>
                </scope>
            </method>
            <class name="ImageHandler" line="687">
                <implements interface="ImageObserver"/>
                <javadoc line="687">
                    ImageHandler implements the ImageObserver to correctly update the
                      display as new parts of the image become available.                    
                </javadoc>
                <method name="imageUpdate" type="boolean" line="692">
                    <params>
                        <param name="img" type="Image"/>
                        <param name="flags" type="int"/>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                        <param name="newWidth" type="int"/>
                        <param name="newHeight" type="int"/>
                    </params>
                    <scope line="693"/>
                    <scope line="696">
                        <scope line="698">
                            <scope line="699">
                                <scope line="701"/>
                                <scope line="704"/>
                            </scope>
                            <scope line="708"/>
                            <scope line="711"/>
                        </scope>
                    </scope>
                    <scope line="719">
                        <declaration name="changed" type="short" line="720"/>
                        <scope line="721"/>
                        <scope line="724"/>
                        <scope line="727">
                            <scope line="728"/>
                            <scope line="731"/>
                            <scope line="734"/>
                        </scope>
                        <scope line="738"/>
                    </scope>
                    <scope line="743"/>
                    <scope line="746"/>
                </method>
            </class>
            <class name="ImageLabelView" line="752">
                <extends class="InlineView"/>
                <javadoc line="752">
                    ImageLabelView is used if the image can&apos;t be loaded, and
                      the attribute specified an alt attribute. It overriden a handle of
                      methods as the text is hardcoded and does not come from the document.                    
                </javadoc>
                <declaration name="segment" type="Segment" line="758"/>
                <declaration name="fg" type="Color" line="759"/>
                <method name="ImageLabelView" type="constructor" line="760">
                    <params>
                        <param name="e" type="Element"/>
                        <param name="text" type="String"/>
                    </params>
                </method>
                <method name="reset" type="void" line="764">
                    <params>
                        <param name="text" type="String"/>
                    </params>
                </method>
                <method name="paint" type="void" line="767">
                    <params>
                        <param name="g" type="Graphics"/>
                        <param name="a" type="Shape"/>
                    </params>
                    <declaration name="painter" type="GlyphPainter" line="768"/>
                    <scope line="769"/>
                </method>
                <method name="getText" type="Segment" line="774">
                    <params>
                        <param name="p0" type="int"/>
                        <param name="p1" type="int"/>
                    </params>
                    <scope line="775"/>
                </method>
                <method name="getStartOffset" type="int" line="782"/>
                <method name="getEndOffset" type="int" line="785"/>
                <method name="breakView" type="View" line="788">
                    <params>
                        <param name="axis" type="int"/>
                        <param name="p0" type="int"/>
                        <param name="pos" type="float"/>
                        <param name="len" type="float"/>
                    </params>
                </method>
                <method name="getForeground" type="Color" line="791">
                    <declaration name="parent" type="View" line="792"/>
                    <scope line="793">
                        <declaration name="doc" type="Document" line="794"/>
                        <declaration name="attr" type="AttributeSet" line="795"/>
                        <scope line="796"/>
                    </scope>
                </method>
            </class>
        </class>
    </source>