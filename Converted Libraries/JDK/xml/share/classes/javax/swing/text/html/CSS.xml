<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text.html">
        <import package="java.awt.Color"/>
        <import package="java.awt.Font"/>
        <import package="java.awt.GraphicsEnvironment"/>
        <import package="java.awt.Toolkit"/>
        <import package="java.awt.HeadlessException"/>
        <import package="java.awt.Image"/>
        <import package="java.io"/>
        <import package="java.lang.reflect.Method"/>
        <import package="java.net.URL"/>
        <import package="java.net.MalformedURLException"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.Vector"/>
        <import package="java.util.Locale"/>
        <import package="javax.swing.ImageIcon"/>
        <import package="javax.swing.SizeRequirements"/>
        <import package="javax.swing.text"/>
        <class name="CSS" line="45">
            <comment line="1067">
                Conversion related methods/classes                
            </comment>
            <comment line="3304">
                Serialization support                
            </comment>
            <comment line="3363">
                we need StyleSheet for resolving lenght units. (see
                 isW3CLengthUnits)
                 we can not pass stylesheet for handling relative sizes. (do not
                 think changing public API is necessary)
                 CSS is not likely to be accessed from more then one thread.
                 Having local storage for StyleSheet for resolving relative
                 sizes is safe
                
                 idk 08302004                
            </comment>
            <comment line="3380">
                Instance variables                
            </comment>
            <implements interface="Serializable"/>
            <javadoc line="45">
                Defines a set of
                  &lt;a href=&quot;http://www.w3.org/TR/REC-CSS1&quot;&gt;CSS attributes&lt;/a&gt;
                  as a typesafe enumeration.  The HTML View implementations use
                  CSS attributes to determine how they will render. This also defines
                  methods to map between CSS/HTML/StyleConstants. Any shorthand
                  properties, such as font, are mapped to the intrinsic properties.
                  &lt;p&gt;The following describes the CSS properties that are suppored by the
                  rendering engine:
                  &lt;ul&gt;&lt;li&gt;font-family
                  &lt;li&gt;font-style
                  &lt;li&gt;font-size (supports relative units)
                  &lt;li&gt;font-weight
                  &lt;li&gt;font
                  &lt;li&gt;color
                  &lt;li&gt;background-color (with the exception of transparent)
                  &lt;li&gt;background-image
                  &lt;li&gt;background-repeat
                  &lt;li&gt;background-position
                  &lt;li&gt;background
                  &lt;li&gt;text-decoration (with the exception of blink and overline)
                  &lt;li&gt;vertical-align (only sup and super)
                  &lt;li&gt;text-align (justify is treated as center)
                  &lt;li&gt;margin-top
                  &lt;li&gt;margin-right
                  &lt;li&gt;margin-bottom
                  &lt;li&gt;margin-left
                  &lt;li&gt;margin
                  &lt;li&gt;padding-top
                  &lt;li&gt;padding-right
                  &lt;li&gt;padding-bottom
                  &lt;li&gt;padding-left
                  &lt;li&gt;padding
                  &lt;li&gt;border-top-style
                  &lt;li&gt;border-right-style
                  &lt;li&gt;border-bottom-style
                  &lt;li&gt;border-left-style
                  &lt;li&gt;border-style (only supports inset, outset and none)
                  &lt;li&gt;border-top-color
                  &lt;li&gt;border-right-color
                  &lt;li&gt;border-bottom-color
                  &lt;li&gt;border-left-color
                  &lt;li&gt;border-color
                  &lt;li&gt;list-style-image
                  &lt;li&gt;list-style-type
                  &lt;li&gt;list-style-position
                  &lt;/ul&gt;
                  The following are modeled, but currently not rendered.
                  &lt;ul&gt;&lt;li&gt;font-variant
                  &lt;li&gt;background-attachment (background always treated as scroll)
                  &lt;li&gt;word-spacing
                  &lt;li&gt;letter-spacing
                  &lt;li&gt;text-indent
                  &lt;li&gt;text-transform
                  &lt;li&gt;line-height
                  &lt;li&gt;border-top-width (this is used to indicate if a border should be used)
                  &lt;li&gt;border-right-width
                  &lt;li&gt;border-bottom-width
                  &lt;li&gt;border-left-width
                  &lt;li&gt;border-width
                  &lt;li&gt;border-top
                  &lt;li&gt;border-right
                  &lt;li&gt;border-bottom
                  &lt;li&gt;border-left
                  &lt;li&gt;border
                  &lt;li&gt;width
                  &lt;li&gt;height
                  &lt;li&gt;float
                  &lt;li&gt;clear
                  &lt;li&gt;display
                  &lt;li&gt;white-space
                  &lt;li&gt;list-style
                  &lt;/ul&gt;
                  &lt;p&gt;&lt;b&gt;Note: for the time being we do not fully support relative units,
                  unless noted, so that
                  p { margin-top: 10% } will be treated as if no margin-top was specified.                
                <author>
                    Timothy Prinzing                    
                </author>
                <author>
                    Scott Violet                    
                </author>
                <see>
                    StyleSheet                    
                </see>
            </javadoc>
            <class name="Attribute" line="128">
                <comment line="315">
                    made up css attributes to describe orientation depended
                     margins. used for &lt;dir&gt;, &lt;menu&gt;, &lt;ul&gt; etc. see
                     5088268 for more details                    
                </comment>
                <comment line="379">
                                        
                </comment>
                <comment line="382">
                                        
                </comment>
                <comment line="385">
                    All possible CSS attribute keys.                    
                </comment>
                <comment line="449">
                    Lists.                    
                </comment>
                <comment line="458">
                    background-repeat                    
                </comment>
                <comment line="463">
                    background-attachment                    
                </comment>
                <comment line="1757">
                    Used by ViewAttributeSet                    
                </comment>
                <comment line="2224">
                    CSS.Values are static, don&apos;t archive it.                    
                </comment>
                <comment line="2430">
                    bitmask: bit 0, horizontal relative, bit 1 horizontal relative to
                     font size, 2 vertical relative to size, 3 vertical relative to
                     font size.                    
                </comment>
                <comment line="2586">
                    PENDING: this base is wrong for linked style sheets.                    
                </comment>
                <comment line="2727">
                    0 - value indicates real value
                     1 - % value, value relative to depends upon key.
                         50% will have a value = .5
                     2 - add value to parent value.
                     3 - em/ex relative to font size of element (except for
                         font-size, which is relative to parent).                    
                </comment>
                <comment line="3292">
                    0 is the best weight WorstAdjustmentWeight is a worst one                    
                </comment>
                <comment line="3294">
                    float getAlignment();                    
                </comment>
                <javadoc line="128">
                    Definitions to be used as a key on AttributeSet&apos;s
                      that might hold CSS attributes.  Since this is a
                      closed set (i.e. defined exactly by the specification),
                      it is final and cannot be extended.                    
                </javadoc>
                <method name="Attribute" type="constructor" line="136">
                    <params>
                        <param name="name" type="String"/>
                        <param name="defaultValue" type="String"/>
                        <param name="inherited" type="boolean"/>
                    </params>
                </method>
                <javadoc line="142">
                    The string representation of the attribute.  This
                      should exactly match the string specified in the
                      CSS specification.                    
                </javadoc>
                <method name="toString" type="String" line="147"/>
                <javadoc line="151">
                    Fetch the default value for the attribute.
                      If there is no default value (such as for
                      composite attributes), null will be returned.                    
                </javadoc>
                <method name="getDefaultValue" type="String" line="156"/>
                <javadoc line="160">
                    Indicates if the attribute should be inherited
                      from the parent or not.                    
                </javadoc>
                <method name="isInherited" type="boolean" line="164"/>
                <declaration name="name" type="String" line="168"/>
                <declaration name="defaultValue" type="String" line="169"/>
                <declaration name="inherited" type="boolean" line="170"/>
                <declaration name="BACKGROUND" type="Attribute" line="173"/>
                <declaration name="BACKGROUND_ATTACHMENT" type="Attribute" line="176"/>
                <declaration name="BACKGROUND_COLOR" type="Attribute" line="179"/>
                <declaration name="BACKGROUND_IMAGE" type="Attribute" line="182"/>
                <declaration name="BACKGROUND_POSITION" type="Attribute" line="185"/>
                <declaration name="BACKGROUND_REPEAT" type="Attribute" line="188"/>
                <declaration name="BORDER" type="Attribute" line="191"/>
                <declaration name="BORDER_BOTTOM" type="Attribute" line="194"/>
                <declaration name="BORDER_BOTTOM_COLOR" type="Attribute" line="197"/>
                <declaration name="BORDER_BOTTOM_STYLE" type="Attribute" line="200"/>
                <declaration name="BORDER_BOTTOM_WIDTH" type="Attribute" line="203"/>
                <declaration name="BORDER_COLOR" type="Attribute" line="206"/>
                <declaration name="BORDER_LEFT" type="Attribute" line="209"/>
                <declaration name="BORDER_LEFT_COLOR" type="Attribute" line="212"/>
                <declaration name="BORDER_LEFT_STYLE" type="Attribute" line="215"/>
                <declaration name="BORDER_LEFT_WIDTH" type="Attribute" line="218"/>
                <declaration name="BORDER_RIGHT" type="Attribute" line="221"/>
                <declaration name="BORDER_RIGHT_COLOR" type="Attribute" line="224"/>
                <declaration name="BORDER_RIGHT_STYLE" type="Attribute" line="227"/>
                <declaration name="BORDER_RIGHT_WIDTH" type="Attribute" line="230"/>
                <declaration name="BORDER_STYLE" type="Attribute" line="233"/>
                <declaration name="BORDER_TOP" type="Attribute" line="236"/>
                <declaration name="BORDER_TOP_COLOR" type="Attribute" line="239"/>
                <declaration name="BORDER_TOP_STYLE" type="Attribute" line="242"/>
                <declaration name="BORDER_TOP_WIDTH" type="Attribute" line="245"/>
                <declaration name="BORDER_WIDTH" type="Attribute" line="248"/>
                <declaration name="CLEAR" type="Attribute" line="251"/>
                <declaration name="COLOR" type="Attribute" line="254"/>
                <declaration name="DISPLAY" type="Attribute" line="257"/>
                <declaration name="FLOAT" type="Attribute" line="260"/>
                <declaration name="FONT" type="Attribute" line="263"/>
                <declaration name="FONT_FAMILY" type="Attribute" line="266"/>
                <declaration name="FONT_SIZE" type="Attribute" line="269"/>
                <declaration name="FONT_STYLE" type="Attribute" line="272"/>
                <declaration name="FONT_VARIANT" type="Attribute" line="275"/>
                <declaration name="FONT_WEIGHT" type="Attribute" line="278"/>
                <declaration name="HEIGHT" type="Attribute" line="281"/>
                <declaration name="LETTER_SPACING" type="Attribute" line="284"/>
                <declaration name="LINE_HEIGHT" type="Attribute" line="287"/>
                <declaration name="LIST_STYLE" type="Attribute" line="290"/>
                <declaration name="LIST_STYLE_IMAGE" type="Attribute" line="293"/>
                <declaration name="LIST_STYLE_POSITION" type="Attribute" line="296"/>
                <declaration name="LIST_STYLE_TYPE" type="Attribute" line="299"/>
                <declaration name="MARGIN" type="Attribute" line="302"/>
                <declaration name="MARGIN_BOTTOM" type="Attribute" line="305"/>
                <declaration name="MARGIN_LEFT" type="Attribute" line="308"/>
                <declaration name="MARGIN_RIGHT" type="Attribute" line="311"/>
                <declaration name="MARGIN_LEFT_LTR" type="Attribute" line="319"/>
                <declaration name="MARGIN_LEFT_RTL" type="Attribute" line="323"/>
                <declaration name="MARGIN_RIGHT_LTR" type="Attribute" line="327"/>
                <declaration name="MARGIN_RIGHT_RTL" type="Attribute" line="331"/>
                <declaration name="MARGIN_TOP" type="Attribute" line="336"/>
                <declaration name="PADDING" type="Attribute" line="339"/>
                <declaration name="PADDING_BOTTOM" type="Attribute" line="342"/>
                <declaration name="PADDING_LEFT" type="Attribute" line="345"/>
                <declaration name="PADDING_RIGHT" type="Attribute" line="348"/>
                <declaration name="PADDING_TOP" type="Attribute" line="351"/>
                <declaration name="TEXT_ALIGN" type="Attribute" line="354"/>
                <declaration name="TEXT_DECORATION" type="Attribute" line="357"/>
                <declaration name="TEXT_INDENT" type="Attribute" line="360"/>
                <declaration name="TEXT_TRANSFORM" type="Attribute" line="363"/>
                <declaration name="VERTICAL_ALIGN" type="Attribute" line="366"/>
                <declaration name="WORD_SPACING" type="Attribute" line="369"/>
                <declaration name="WHITE_SPACE" type="Attribute" line="372"/>
                <declaration name="WIDTH" type="Attribute" line="375"/>
                <declaration name="BORDER_SPACING" type="Attribute" line="378"/>
                <declaration name="CAPTION_SIDE" type="Attribute" line="381"/>
                <declaration name="allAttributes" type="Attribute[]" line="385"/>
                <declaration name="ALL_MARGINS" type="Attribute[]" line="406"/>
                <declaration name="ALL_PADDING" type="Attribute[]" line="408"/>
                <declaration name="ALL_BORDER_WIDTHS" type="Attribute[]" line="410"/>
                <declaration name="ALL_BORDER_STYLES" type="Attribute[]" line="413"/>
                <declaration name="ALL_BORDER_COLORS" type="Attribute[]" line="416"/>
            </class>
            <class name="Value" line="422">
                <comment line="315">
                    made up css attributes to describe orientation depended
                     margins. used for &lt;dir&gt;, &lt;menu&gt;, &lt;ul&gt; etc. see
                     5088268 for more details                    
                </comment>
                <comment line="379">
                                        
                </comment>
                <comment line="382">
                                        
                </comment>
                <comment line="385">
                    All possible CSS attribute keys.                    
                </comment>
                <comment line="449">
                    Lists.                    
                </comment>
                <comment line="458">
                    background-repeat                    
                </comment>
                <comment line="463">
                    background-attachment                    
                </comment>
                <comment line="1757">
                    Used by ViewAttributeSet                    
                </comment>
                <comment line="2224">
                    CSS.Values are static, don&apos;t archive it.                    
                </comment>
                <comment line="2430">
                    bitmask: bit 0, horizontal relative, bit 1 horizontal relative to
                     font size, 2 vertical relative to size, 3 vertical relative to
                     font size.                    
                </comment>
                <comment line="2586">
                    PENDING: this base is wrong for linked style sheets.                    
                </comment>
                <comment line="2727">
                    0 - value indicates real value
                     1 - % value, value relative to depends upon key.
                         50% will have a value = .5
                     2 - add value to parent value.
                     3 - em/ex relative to font size of element (except for
                         font-size, which is relative to parent).                    
                </comment>
                <comment line="3292">
                    0 is the best weight WorstAdjustmentWeight is a worst one                    
                </comment>
                <comment line="3294">
                    float getAlignment();                    
                </comment>
                <method name="Value" type="constructor" line="424">
                    <params>
                        <param name="name" type="String"/>
                    </params>
                </method>
                <javadoc line="428">
                    The string representation of the attribute.  This
                      should exactly match the string specified in the
                      CSS specification.                    
                </javadoc>
                <method name="toString" type="String" line="433"/>
                <declaration name="INHERITED" type="Value" line="437"/>
                <declaration name="NONE" type="Value" line="438"/>
                <declaration name="HIDDEN" type="Value" line="439"/>
                <declaration name="DOTTED" type="Value" line="440"/>
                <declaration name="DASHED" type="Value" line="441"/>
                <declaration name="SOLID" type="Value" line="442"/>
                <declaration name="DOUBLE" type="Value" line="443"/>
                <declaration name="GROOVE" type="Value" line="444"/>
                <declaration name="RIDGE" type="Value" line="445"/>
                <declaration name="INSET" type="Value" line="446"/>
                <declaration name="OUTSET" type="Value" line="447"/>
                <declaration name="DISC" type="Value" line="449"/>
                <declaration name="CIRCLE" type="Value" line="450"/>
                <declaration name="SQUARE" type="Value" line="451"/>
                <declaration name="DECIMAL" type="Value" line="452"/>
                <declaration name="LOWER_ROMAN" type="Value" line="453"/>
                <declaration name="UPPER_ROMAN" type="Value" line="454"/>
                <declaration name="LOWER_ALPHA" type="Value" line="455"/>
                <declaration name="UPPER_ALPHA" type="Value" line="456"/>
                <declaration name="BACKGROUND_NO_REPEAT" type="Value" line="458"/>
                <declaration name="BACKGROUND_REPEAT" type="Value" line="459"/>
                <declaration name="BACKGROUND_REPEAT_X" type="Value" line="460"/>
                <declaration name="BACKGROUND_REPEAT_Y" type="Value" line="461"/>
                <declaration name="BACKGROUND_SCROLL" type="Value" line="463"/>
                <declaration name="BACKGROUND_FIXED" type="Value" line="464"/>
                <declaration name="name" type="String" line="466"/>
                <declaration name="allValues" type="Value[]" line="468"/>
            </class>
            <method name="CSS" type="constructor" line="478">
                <comment line="481">
                    setup the css conversion table                    
                </comment>
                <declaration name="bs" type="Object" line="485"/>
                <declaration name="cv" type="Object" line="490"/>
                <declaration name="lv" type="Object" line="497"/>
                <declaration name="bv" type="Object" line="510"/>
                <declaration name="nlv" type="Object" line="515"/>
                <declaration name="sv" type="Object" line="520"/>
                <declaration name="valueMapper" type="Object" line="525"/>
                <declaration name="generic" type="Object" line="536"/>
                <declaration name="n" type="int" line="537"/>
                <scope line="538">
                    <declaration name="key" type="CSS.Attribute" line="539"/>
                    <scope line="540"/>
                </scope>
            </method>
            <javadoc line="546">
                Sets the base font size. &lt;code&gt;sz&lt;/code&gt; is a CSS value, and is
                  not necessarily the point size. Use getPointSize to determine the
                  point size corresponding to &lt;code&gt;sz&lt;/code&gt;.                
            </javadoc>
            <method name="setBaseFontSize" type="void" line="551">
                <params>
                    <param name="sz" type="int"/>
                </params>
            </method>
            <javadoc line="560">
                Sets the base font size from the passed in string.                
            </javadoc>
            <method name="setBaseFontSize" type="void" line="563">
                <params>
                    <param name="size" type="String"/>
                </params>
                <declaration name="relSize" type="int" line="564"/>
                <scope line="566">
                    <scope line="567"/>
                    <scope line="570"/>
                    <scope line="573"/>
                </scope>
            </method>
            <javadoc line="579">
                Returns the base font size.                
            </javadoc>
            <method name="getBaseFontSize" type="int" line="582"/>
            <javadoc line="586">
                Parses the CSS property &lt;code&gt;key&lt;/code&gt; with value
                  &lt;code&gt;value&lt;/code&gt; placing the result in &lt;code&gt;att&lt;/code&gt;.                
            </javadoc>
            <method name="addInternalCSSValue" type="void" line="591">
                <params>
                    <param name="attr" type="MutableAttributeSet"/>
                    <param name="key" type="CSS.Attribute"/>
                    <param name="value" type="String"/>
                </params>
                <scope line="592"/>
                <scope line="595"/>
                <scope line="599"/>
                <scope line="603"/>
                <scope line="607"/>
                <scope line="611"/>
                <scope line="615"/>
                <scope line="623"/>
                <scope line="626">
                    <declaration name="iValue" type="Object" line="627"/>
                    <scope line="628"/>
                </scope>
            </method>
            <javadoc line="634">
                Gets the internal CSS representation of &lt;code&gt;value&lt;/code&gt; which is
                  a CSS value of the CSS attribute named &lt;code&gt;key&lt;/code&gt;. The receiver
                  should not modify &lt;code&gt;value&lt;/code&gt;, and the first &lt;code&gt;count&lt;/code&gt;
                  strings are valid.                
            </javadoc>
            <method name="getInternalCSSValue" type="Object" line="640">
                <params>
                    <param name="key" type="CSS.Attribute"/>
                    <param name="value" type="String"/>
                </params>
                <declaration name="conv" type="CssValue" line="641"/>
                <declaration name="r" type="Object" line="642"/>
            </method>
            <javadoc line="646">
                Maps from a StyleConstants to a CSS Attribute.                
            </javadoc>
            <method name="styleConstantsKeyToCSSKey" type="Attribute" line="649">
                <params>
                    <param name="sc" type="StyleConstants"/>
                </params>
            </method>
            <javadoc line="653">
                Maps from a StyleConstants value to a CSS value.                
            </javadoc>
            <method name="styleConstantsValueToCSSValue" type="Object" line="657">
                <params>
                    <param name="sc" type="StyleConstants"/>
                    <param name="styleValue" type="Object"/>
                </params>
                <declaration name="cssKey" type="Attribute" line="658"/>
                <scope line="659">
                    <declaration name="conv" type="CssValue" line="660"/>
                </scope>
            </method>
            <javadoc line="666">
                Converts the passed in CSS value to a StyleConstants value.
                  &lt;code&gt;key&lt;/code&gt; identifies the CSS attribute being mapped.                
            </javadoc>
            <method name="cssValueToStyleConstantsValue" type="Object" line="670">
                <params>
                    <param name="key" type="StyleConstants"/>
                    <param name="value" type="Object"/>
                </params>
                <scope line="671"/>
            </method>
            <javadoc line="677">
                Returns the font for the values in the passed in AttributeSet.
                  It is assumed the keys will be CSS.Attribute keys.
                  &lt;code&gt;sc&lt;/code&gt; is the StyleContext that will be messaged to get
                  the font once the size, name and style have been determined.                
            </javadoc>
            <method name="getFont" type="Font" line="683">
                <params>
                    <param name="sc" type="StyleContext"/>
                    <param name="a" type="AttributeSet"/>
                    <param name="defaultSize" type="int"/>
                    <param name="ss" type="StyleSheet"/>
                </params>
                <comment line="688">
                    If the vertical alignment is set to either superscirpt or
                     subscript we reduce the font size by 2 points.                    
                </comment>
                <declaration name="size" type="int" line="685"/>
                <declaration name="vAlignV" type="StringValue" line="691"/>
                <scope line="693">
                    <declaration name="vAlign" type="String" line="694"/>
                    <scope line="696"/>
                </scope>
                <declaration name="familyValue" type="FontFamily" line="701"/>
                <declaration name="family" type="String" line="703"/>
                <declaration name="style" type="int" line="705"/>
                <declaration name="weightValue" type="FontWeight" line="706"/>
                <scope line="708"/>
                <declaration name="fs" type="Object" line="711"/>
                <scope line="712"/>
                <scope line="715"/>
                <declaration name="f" type="Font" line="718"/>
                <scope line="721"/>
            </method>
            <method name="getFontSize" type="int" line="728">
                <params>
                    <param name="attr" type="AttributeSet"/>
                    <param name="defaultSize" type="int"/>
                    <param name="ss" type="StyleSheet"/>
                </params>
                <comment line="730">
                    PENDING(prinz) this is a 1.1 based implementation, need to also
                     have a 1.2 version.                    
                </comment>
                <declaration name="sizeValue" type="FontSize" line="731"/>
            </method>
            <javadoc line="738">
                Takes a set of attributes and turn it into a color
                  specification.  This might be used to specify things
                  like brighter, more hue, etc.
                  This will return null if there is no value for &lt;code&gt;key&lt;/code&gt;.                
                <param>
                    key CSS.Attribute identifying where color is stored.                    
                </param>
                <param>
                    a the set of attributes                    
                </param>
                <return>
                    the color                    
                </return>
            </javadoc>
            <method name="getColor" type="Color" line="748">
                <params>
                    <param name="a" type="AttributeSet"/>
                    <param name="key" type="CSS.Attribute"/>
                </params>
                <declaration name="cv" type="ColorValue" line="749"/>
                <scope line="750"/>
            </method>
            <javadoc line="756">
                Returns the size of a font from the passed in string.                
                <param>
                    size CSS string describing font size                    
                </param>
                <param>
                    baseFontSize size to use for relative units.                    
                </param>
            </javadoc>
            <method name="getPointSize" type="float" line="762">
                <params>
                    <param name="size" type="String"/>
                    <param name="ss" type="StyleSheet"/>
                </params>
                <declaration name="relSize" type="int" line="763"/>
                <scope line="765">
                    <scope line="766"/>
                    <scope line="769"/>
                    <scope line="772"/>
                </scope>
            </method>
            <javadoc line="780">
                Returns the length of the attribute in &lt;code&gt;a&lt;/code&gt; with
                  key &lt;code&gt;key&lt;/code&gt;.                
            </javadoc>
            <method name="getLength" type="float" line="784">
                <params>
                    <param name="a" type="AttributeSet"/>
                    <param name="key" type="CSS.Attribute"/>
                    <param name="ss" type="StyleSheet"/>
                </params>
                <declaration name="lv" type="LengthValue" line="786"/>
                <declaration name="isW3CLengthUnits" type="boolean" line="787"/>
                <declaration name="len" type="float" line="788"/>
            </method>
            <javadoc line="792">
                Convert a set of HTML attributes to an equivalent
                  set of CSS attributes.                
                <param>
                    htmlAttrSet AttributeSet containing the HTML attributes.                    
                </param>
                <return>
                    AttributeSet containing the corresponding CSS attributes.
                      The AttributeSet will be empty if there are no mapping
                      CSS attributes.                    
                </return>
            </javadoc>
            <method name="translateHTMLToCSS" type="AttributeSet" line="801">
                <params>
                    <param name="htmlAttrSet" type="AttributeSet"/>
                </params>
                <comment line="807">
                    translate border width into the cells, if it has non-zero value.                    
                </comment>
                <comment line="837">
                    Navigator uses ALIGN for caption placement and IE uses VALIGN.                    
                </comment>
                <declaration name="cssAttrSet" type="MutableAttributeSet" line="802"/>
                <declaration name="elem" type="Element" line="803"/>
                <declaration name="tag" type="HTML.Tag" line="804"/>
                <scope line="805">
                    <declaration name="tableAttr" type="AttributeSet" line="807"/>
                    <declaration name="borderWidth" type="int" line="809"/>
                    <scope line="810"/>
                    <scope line="813"/>
                    <scope line="816"/>
                    <declaration name="pad" type="String" line="819"/>
                    <scope line="820">
                        <declaration name="v" type="LengthValue" line="821"/>
                    </scope>
                </scope>
                <scope line="830"/>
                <scope line="832"/>
                <scope line="835">
                    <declaration name="v" type="Object" line="839"/>
                    <scope line="840"/>
                    <scope line="843">
                        <scope line="845"/>
                    </scope>
                </scope>
            </method>
            <declaration name="attributeMap" type="Hashtable&lt;String,Attribute&gt;" line="853"/>
            <declaration name="valueMap" type="Hashtable&lt;String,Value&gt;" line="854"/>
            <declaration name="htmlAttrToCssAttrMap" type="Hashtable&lt;HTML.Attribute,CSS.Attribute[]&gt;" line="856"/>
            <javadoc line="856">
                The hashtable and the static initalization block below,
                  set up a mapping from well-known HTML attributes to
                  CSS attributes.  For the most part, there is a 1-1 mapping
                  between the two.  However in the case of certain HTML
                  attributes for example HTML.Attribute.VSPACE or
                  HTML.Attribute.HSPACE, end up mapping to two CSS.Attribute&apos;s.
                  Therefore, the value associated with each HTML.Attribute.
                  key ends up being an array of CSS.Attribute. objects.                
            </javadoc>
            <declaration name="styleConstantToCssMap" type="Hashtable&lt;Object,Attribute&gt;" line="868"/>
            <javadoc line="868">
                The hashtable and static initialization that follows sets
                  up a translation from StyleConstants (i.e. the &lt;em&gt;well known&lt;/em&gt;
                  attributes) to the associated CSS attributes.                
            </javadoc>
            <declaration name="htmlValueToCssValueMap" type="Hashtable&lt;String,CSS.Value&gt;" line="874"/>
            <javadoc line="874">
                Maps from HTML value to a CSS value. Used in internal mapping.                
            </javadoc>
            <declaration name="cssValueToInternalValueMap" type="Hashtable&lt;String,CSS.Value&gt;" line="876"/>
            <javadoc line="876">
                Maps from CSS value (string) to internal value.                
            </javadoc>
            <scope line="879">
                <scope line="881"/>
                <scope line="886"/>
                <declaration name="keys" type="Object[]" line="1005"/>
                <scope line="1006">
                    <scope line="1007"/>
                </scope>
                <scope line="1010"/>
                <scope line="1016">
                    <scope line="1017"/>
                </scope>
                <scope line="1020"/>
            </scope>
            <javadoc line="1025">
                Return the set of all possible CSS attribute keys.                
            </javadoc>
            <method name="getAllAttributeKeys" type="Attribute[]" line="1028">
                <declaration name="keys" type="Attribute[]" line="1029"/>
            </method>
            <javadoc line="1034">
                Translates a string to a &lt;code&gt;CSS.Attribute&lt;/code&gt; object.
                  This will return &lt;code&gt;null&lt;/code&gt; if there is no attribute
                  by the given name.                
                <param>
                    name the name of the CSS attribute to fetch the
                      typesafe enumeration for                    
                </param>
                <return>
                    the <code>CSS.Attribute</code> object,
                      or <code>null</code> if the string
                      doesn't represent a valid attribute key                    
                </return>
            </javadoc>
            <method name="getAttribute" type="Attribute" line="1045">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="1049">
                Translates a string to a &lt;code&gt;CSS.Value&lt;/code&gt; object.
                  This will return &lt;code&gt;null&lt;/code&gt; if there is no value
                  by the given name.                
                <param>
                    name the name of the CSS value to fetch the
                      typesafe enumeration for                    
                </param>
                <return>
                    the <code>CSS.Value</code> object,
                      or <code>null</code> if the string
                      doesn't represent a valid CSS value name; this does
                      not mean that it doesn't represent a valid CSS value                    
                </return>
            </javadoc>
            <method name="getValue" type="Value" line="1061">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="1070">
                Returns a URL for the given CSS url string. If relative,
                  &lt;code&gt;base&lt;/code&gt; is used as the parent. If a valid URL can not
                  be found, this will not throw a MalformedURLException, instead
                  null will be returned.                
            </javadoc>
            <method name="getURL" type="URL" line="1076">
                <params>
                    <param name="base" type="URL"/>
                    <param name="cssString" type="String"/>
                </params>
                <comment line="1085">
                    Absolute first                    
                </comment>
                <comment line="1093">
                    Then relative                    
                </comment>
                <comment line="1095">
                    Relative URL, try from base                    
                </comment>
                <scope line="1077"/>
                <scope line="1081"/>
                <scope line="1085">
                    <declaration name="url" type="URL" line="1086"/>
                    <scope line="1087"/>
                </scope>
                <scope line="1090"/>
                <scope line="1093">
                    <scope line="1095">
                        <declaration name="url" type="URL" line="1096"/>
                    </scope>
                    <scope line="1099"/>
                </scope>
            </method>
            <javadoc line="1105">
                Converts a type Color to a hex string
                  in the format &quot;#RRGGBB&quot;                
            </javadoc>
            <method name="colorToHex" type="String" line="1109">
                <params>
                    <param name="color" type="Color"/>
                </params>
                <comment line="1114">
                    Red                    
                </comment>
                <comment line="1123">
                    Green                    
                </comment>
                <comment line="1132">
                    Blue                    
                </comment>
                <declaration name="colorstr" type="String" line="1111"/>
                <declaration name="str" type="String" line="1114"/>
            </method>
            <javadoc line="1143">
                Convert a &quot;#FFFFFF&quot; hex string to a Color.
                  If the color specification is bad, an attempt
                  will be made to fix it up.                
            </javadoc>
            <method name="hexToColor" type="Color" line="1148">
                <params>
                    <param name="value" type="String"/>
                </params>
                <declaration name="digits" type="String" line="1149"/>
                <declaration name="n" type="int" line="1150"/>
                <scope line="1151"/>
                <scope line="1153"/>
                <declaration name="hstr" type="String" line="1156"/>
                <declaration name="c" type="Color" line="1157"/>
                <scope line="1158"/>
                <scope line="1160"/>
            </method>
            <javadoc line="1166">
                Convert a color string such as &quot;RED&quot; or &quot;#NNNNNN&quot; or &quot;rgb(r, g, b)&quot;
                  to a Color.                
            </javadoc>
            <method name="stringToColor" type="Color" line="1170">
                <params>
                    <param name="str" type="String"/>
                </params>
                <comment line="1219">
                    sometimes get specified without leading #                    
                </comment>
                <declaration name="color" type="Color" line="1171"/>
                <scope line="1173"/>
                <scope line="1178"/>
            </method>
            <javadoc line="1222">
                Parses a String in the format &lt;code&gt;rgb(r, g, b)&lt;/code&gt; where
                  each of the Color components is either an integer, or a floating number
                  with a % after indicating a percentage value of 255. Values are
                  constrained to fit with 0-255. The resulting Color is returned.                
            </javadoc>
            <method name="parseRGB" type="Color" line="1228">
                <params>
                    <param name="string" type="String"/>
                </params>
                <comment line="1230">
                    Find the next numeric char                    
                </comment>
                <declaration name="index" type="int[]" line="1230"/>
                <declaration name="red" type="int" line="1233"/>
                <declaration name="green" type="int" line="1234"/>
                <declaration name="blue" type="int" line="1235"/>
            </method>
            <javadoc line="1240">
                Returns the next integer value from &lt;code&gt;string&lt;/code&gt; starting
                  at &lt;code&gt;index[0]&lt;/code&gt;. The value can either can an integer, or
                  a percentage (floating number ending with %), in which case it is
                  multiplied by 255.                
            </javadoc>
            <method name="getColorComponent" type="int" line="1246">
                <params>
                    <param name="string" type="String"/>
                    <param name="index" type="int[]"/>
                </params>
                <comment line="1251">
                    Skip non-decimal chars                    
                </comment>
                <comment line="1267">
                    Decimal value                    
                </comment>
                <comment line="1285">
                    Treat as 0                    
                </comment>
                <declaration name="length" type="int" line="1247"/>
                <declaration name="aChar" type="char" line="1248"/>
                <scope line="1252"/>
                <declaration name="start" type="int" line="1256"/>
                <scope line="1258"/>
                <scope line="1262"/>
                <scope line="1265">
                    <scope line="1269"/>
                </scope>
                <scope line="1273">
                    <scope line="1274">
                        <declaration name="value" type="float" line="1275"/>
                        <scope line="1278"/>
                    </scope>
                    <scope line="1283"/>
                </scope>
            </method>
            <method name="getIndexOfSize" type="int" line="1290">
                <params>
                    <param name="pt" type="float"/>
                    <param name="sizeMap" type="int[]"/>
                </params>
            </method>
            <method name="getIndexOfSize" type="int" line="1297">
                <params>
                    <param name="pt" type="float"/>
                    <param name="ss" type="StyleSheet"/>
                </params>
                <declaration name="sizeMap" type="int[]" line="1298"/>
            </method>
            <javadoc line="1304">
                @return an array of all the strings in &lt;code&gt;value&lt;/code&gt;
                  that are separated by whitespace.                
            </javadoc>
            <method name="parseStrings" type="String[]" line="1308">
                <params>
                    <param name="value" type="String"/>
                </params>
                <comment line="1316">
                    Skip ws                    
                </comment>
                <declaration name="current" type="int" line="1309"/>
                <declaration name="length" type="int" line="1310"/>
                <declaration name="temp" type="Vector&lt;String&gt;" line="1311"/>
                <scope line="1314">
                    <scope line="1317"/>
                    <scope line="1322"/>
                    <scope line="1325"/>
                </scope>
                <declaration name="retValue" type="String[]" line="1330"/>
            </method>
            <javadoc line="1335">
                Return the point size, given a size index. Legal HTML index sizes
                  are 1-7.                
            </javadoc>
            <method name="getPointSize" type="float" line="1339">
                <params>
                    <param name="index" type="int"/>
                    <param name="ss" type="StyleSheet"/>
                </params>
                <declaration name="sizeMap" type="int[]" line="1341"/>
            </method>
            <method name="translateEmbeddedAttributes" type="void" line="1354">
                <params>
                    <param name="htmlAttrSet" type="AttributeSet"/>
                    <param name="cssAttrSet" type="MutableAttributeSet"/>
                </params>
                <comment line="1359">
                    HR needs special handling due to us treating it as a leaf.                    
                </comment>
                <declaration name="keys" type="Enumeration" line="1355"/>
                <scope line="1357"/>
                <scope line="1361">
                    <declaration name="key" type="Object" line="1362"/>
                    <scope line="1363">
                        <declaration name="tag" type="HTML.Tag" line="1364"/>
                        <declaration name="o" type="Object" line="1365"/>
                        <scope line="1366"/>
                    </scope>
                    <scope line="1369"/>
                </scope>
            </method>
            <method name="translateAttributes" type="void" line="1377">
                <params>
                    <param name="tag" type="HTML.Tag"/>
                    <param name="htmlAttrSet" type="AttributeSet"/>
                    <param name="cssAttrSet" type="MutableAttributeSet"/>
                </params>
                <comment line="1386">
                    HTML.Attribute.ALIGN needs special processing.
                     It can map to to 1 of many(3) possible CSS attributes
                     depending on the nature of the tag the attribute is
                     part off and depending on the value of the attribute.                    
                </comment>
                <comment line="1405">
                    The html size attribute has a mapping in the CSS world only
                     if it is par of a font or base font tag.                    
                </comment>
                <declaration name="names" type="Enumeration" line="1378"/>
                <scope line="1379">
                    <declaration name="name" type="Object" line="1380"/>
                    <scope line="1382">
                        <declaration name="key" type="HTML.Attribute" line="1383"/>
                        <scope line="1391">
                            <declaration name="htmlAttrValue" type="String" line="1392"/>
                            <scope line="1393">
                                <declaration name="cssAttr" type="CSS.Attribute" line="1394"/>
                                <scope line="1395">
                                    <declaration name="o" type="Object" line="1396"/>
                                    <scope line="1397"/>
                                </scope>
                            </scope>
                        </scope>
                        <scope line="1402">
                            <scope line="1409"/>
                        </scope>
                    </scope>
                    <scope line="1415"/>
                </scope>
            </method>
            <method name="translateAttribute" type="void" line="1423">
                <params>
                    <param name="key" type="HTML.Attribute"/>
                    <param name="htmlAttrSet" type="AttributeSet"/>
                    <param name="cssAttrSet" type="MutableAttributeSet"/>
                </params>
                <comment line="1425">
                    In the case of all remaining HTML.Attribute&apos;s they
                     map to 1 or more CCS.Attribute.                    
                </comment>
                <declaration name="cssAttrList" type="CSS.Attribute[]" line="1428"/>
                <declaration name="htmlAttrValue" type="String" line="1430"/>
                <scope line="1432"/>
                <scope line="1435">
                    <declaration name="o" type="Object" line="1436"/>
                    <scope line="1437"/>
                </scope>
            </method>
            <javadoc line="1443">
                Given a CSS.Attribute object and its corresponding HTML.Attribute&apos;s
                  value, this method returns a CssValue object to associate with the
                  CSS attribute.                
                <param>
                    the CSS.Attribute                    
                </param>
                <param>
                    a String containing the value associated HTML.Attribtue.                    
                </param>
            </javadoc>
            <method name="getCssValue" type="Object" line="1451">
                <params>
                    <param name="cssAttr" type="CSS.Attribute"/>
                    <param name="htmlAttrValue" type="String"/>
                </params>
                <declaration name="value" type="CssValue" line="1452"/>
                <declaration name="o" type="Object" line="1453"/>
            </method>
            <javadoc line="1457">
                Maps an HTML.Attribute object to its appropriate CSS.Attributes.                
                <param>
                    HTML.Attribute                    
                </param>
                <return>
                    CSS.Attribute[]                    
                </return>
            </javadoc>
            <method name="getCssAttribute" type="CSS.Attribute[]" line="1463">
                <params>
                    <param name="hAttr" type="HTML.Attribute"/>
                </params>
            </method>
            <javadoc line="1467">
                Maps HTML.Attribute.ALIGN to either:
                  CSS.Attribute.TEXT_ALIGN
                  CSS.Attribute.FLOAT
                  CSS.Attribute.VERTICAL_ALIGN
                  based on the tag associated with the attribute and the
                  value of the attribute.                
                <param>
                    AttributeSet containing HTML attributes.                    
                </param>
                <return>
                    CSS.Attribute mapping for HTML.Attribute.ALIGN.                    
                </return>
            </javadoc>
            <method name="getCssAlignAttribute" type="CSS.Attribute" line="1479">
                <params>
                    <param name="tag" type="HTML.Tag"/>
                    <param name="htmlAttrSet" type="AttributeSet"/>
                </params>
                <comment line="1482">
                    String htmlAttrValue = (String)htmlAttrSet.getAttribute(HTML.Attribute.ALIGN);
                    CSS.Attribute cssAttr = CSS.Attribute.TEXT_ALIGN;
                    if (htmlAttrValue != null &amp;&amp; htmlAttrSet instanceof Element) {
                    Element elem = (Element)htmlAttrSet;
                    if (!elem.isLeaf() &amp;&amp; tag.isBlock() &amp;&amp; validTextAlignValue(htmlAttrValue)) {
                    return CSS.Attribute.TEXT_ALIGN;
                    } else if (isFloater(htmlAttrValue)) {
                    return CSS.Attribute.FLOAT;
                    } else if (elem.isLeaf()) {
                    return CSS.Attribute.VERTICAL_ALIGN;
                    }
                    }
                    return null;                    
                </comment>
            </method>
            <javadoc line="1498">
                Fetches the tag associated with the HTML AttributeSet.                
                <param>
                    AttributeSet containing the HTML attributes.                    
                </param>
                <return>
                    HTML.Tag                    
                </return>
            </javadoc>
            <method name="getHTMLTag" type="HTML.Tag" line="1504">
                <params>
                    <param name="htmlAttrSet" type="AttributeSet"/>
                </params>
                <declaration name="o" type="Object" line="1505"/>
                <scope line="1506">
                    <declaration name="tag" type="HTML.Tag" line="1507"/>
                </scope>
            </method>
            <method name="isHTMLFontTag" type="boolean" line="1514">
                <params>
                    <param name="tag" type="HTML.Tag"/>
                </params>
            </method>
            <method name="isFloater" type="boolean" line="1519">
                <params>
                    <param name="alignValue" type="String"/>
                </params>
            </method>
            <method name="validTextAlignValue" type="boolean" line="1523">
                <params>
                    <param name="alignValue" type="String"/>
                </params>
            </method>
            <class name="CssValue" line="1527">
                <comment line="315">
                    made up css attributes to describe orientation depended
                     margins. used for &lt;dir&gt;, &lt;menu&gt;, &lt;ul&gt; etc. see
                     5088268 for more details                    
                </comment>
                <comment line="379">
                                        
                </comment>
                <comment line="382">
                                        
                </comment>
                <comment line="385">
                    All possible CSS attribute keys.                    
                </comment>
                <comment line="449">
                    Lists.                    
                </comment>
                <comment line="458">
                    background-repeat                    
                </comment>
                <comment line="463">
                    background-attachment                    
                </comment>
                <comment line="1757">
                    Used by ViewAttributeSet                    
                </comment>
                <comment line="2224">
                    CSS.Values are static, don&apos;t archive it.                    
                </comment>
                <comment line="2430">
                    bitmask: bit 0, horizontal relative, bit 1 horizontal relative to
                     font size, 2 vertical relative to size, 3 vertical relative to
                     font size.                    
                </comment>
                <comment line="2586">
                    PENDING: this base is wrong for linked style sheets.                    
                </comment>
                <comment line="2727">
                    0 - value indicates real value
                     1 - % value, value relative to depends upon key.
                         50% will have a value = .5
                     2 - add value to parent value.
                     3 - em/ex relative to font size of element (except for
                         font-size, which is relative to parent).                    
                </comment>
                <comment line="3292">
                    0 is the best weight WorstAdjustmentWeight is a worst one                    
                </comment>
                <comment line="3294">
                    float getAlignment();                    
                </comment>
                <implements interface="Serializable"/>
                <javadoc line="1527">
                    Base class to CSS values in the attribute sets.  This
                      is intended to act as a convertor to/from other attribute
                      formats.
                      &lt;p&gt;
                      The CSS parser uses the parseCssValue method to convert
                      a string to whatever format is appropriate a given key
                      (i.e. these convertors are stored in a map using the
                      CSS.Attribute as a key and the CssValue as the value).
                      &lt;p&gt;
                      The HTML to CSS conversion process first converts the
                      HTML.Attribute to a CSS.Attribute, and then calls
                      the parseHtmlValue method on the value of the HTML
                      attribute to produce the corresponding CSS value.
                      &lt;p&gt;
                      The StyleConstants to CSS conversion process first
                      converts the StyleConstants attribute to a
                      CSS.Attribute, and then calls the fromStyleConstants
                      method to convert the StyleConstants value to a
                      CSS value.
                      &lt;p&gt;
                      The CSS to StyleConstants conversion process first
                      converts the StyleConstants attribute to a
                      CSS.Attribute, and then calls the toStyleConstants
                      method to convert the CSS value to a StyleConstants
                      value.                    
                </javadoc>
                <javadoc line="1556">
                    Convert a CSS value string to the internal format
                      (for fast processing) used in the attribute sets.
                      The fallback storage for any value that we don&apos;t
                      have a special binary format for is a String.                    
                </javadoc>
                <method name="parseCssValue" type="Object" line="1562">
                    <params>
                        <param name="value" type="String"/>
                    </params>
                </method>
                <javadoc line="1566">
                    Convert an HTML attribute value to a CSS attribute
                      value.  If there is no conversion, return null.
                      This is implemented to simply forward to the CSS
                      parsing by default (since some of the attribute
                      values are the same).  If the attribute value
                      isn&apos;t recognized as a CSS value it is generally
                      returned as null.                    
                </javadoc>
                <method name="parseHtmlValue" type="Object" line="1575">
                    <params>
                        <param name="value" type="String"/>
                    </params>
                </method>
                <javadoc line="1579">
                    Converts a &lt;code&gt;StyleConstants&lt;/code&gt; attribute value to
                      a CSS attribute value.  If there is no conversion,
                      returns &lt;code&gt;null&lt;/code&gt;.  By default, there is no conversion.                    
                    <param>
                        key the <code>StyleConstants</code> attribute                        
                    </param>
                    <param>
                        value the value of a <code>StyleConstants</code>
                          attribute to be converted                        
                    </param>
                    <return>
                        the CSS value that represents the
                          <code>StyleConstants</code> value                        
                    </return>
                </javadoc>
                <method name="fromStyleConstants" type="Object" line="1590">
                    <params>
                        <param name="key" type="StyleConstants"/>
                        <param name="value" type="Object"/>
                    </params>
                </method>
                <javadoc line="1594">
                    Converts a CSS attribute value to a
                      &lt;code&gt;StyleConstants&lt;/code&gt;
                      value.  If there is no conversion, returns
                      &lt;code&gt;null&lt;/code&gt;.
                      By default, there is no conversion.                    
                    <param>
                        key the <code>StyleConstants</code> attribute                        
                    </param>
                    <param>
                        v the view containing <code>AttributeSet</code>                        
                    </param>
                    <return>
                        the <code>StyleConstants</code> attribute value that
                          represents the CSS attribute value                        
                    </return>
                </javadoc>
                <method name="toStyleConstants" type="Object" line="1606">
                    <params>
                        <param name="key" type="StyleConstants"/>
                        <param name="v" type="View"/>
                    </params>
                </method>
                <javadoc line="1610">
                    Return the CSS format of the value                    
                </javadoc>
                <method name="toString" type="String" line="1613"/>
                <declaration name="svalue" type="String" line="1617"/>
                <javadoc line="1617">
                    The value as a string... before conversion to a
                      binary format.                    
                </javadoc>
            </class>
            <class name="StringValue" line="1624">
                <extends class="CssValue"/>
                <comment line="315">
                    made up css attributes to describe orientation depended
                     margins. used for &lt;dir&gt;, &lt;menu&gt;, &lt;ul&gt; etc. see
                     5088268 for more details                    
                </comment>
                <comment line="379">
                                        
                </comment>
                <comment line="382">
                                        
                </comment>
                <comment line="385">
                    All possible CSS attribute keys.                    
                </comment>
                <comment line="449">
                    Lists.                    
                </comment>
                <comment line="458">
                    background-repeat                    
                </comment>
                <comment line="463">
                    background-attachment                    
                </comment>
                <comment line="1757">
                    Used by ViewAttributeSet                    
                </comment>
                <comment line="2224">
                    CSS.Values are static, don&apos;t archive it.                    
                </comment>
                <comment line="2430">
                    bitmask: bit 0, horizontal relative, bit 1 horizontal relative to
                     font size, 2 vertical relative to size, 3 vertical relative to
                     font size.                    
                </comment>
                <comment line="2586">
                    PENDING: this base is wrong for linked style sheets.                    
                </comment>
                <comment line="2727">
                    0 - value indicates real value
                     1 - % value, value relative to depends upon key.
                         50% will have a value = .5
                     2 - add value to parent value.
                     3 - em/ex relative to font size of element (except for
                         font-size, which is relative to parent).                    
                </comment>
                <comment line="3292">
                    0 is the best weight WorstAdjustmentWeight is a worst one                    
                </comment>
                <comment line="3294">
                    float getAlignment();                    
                </comment>
                <javadoc line="1624">
                    By default CSS attributes are represented as simple
                      strings.  They also have no conversion to/from
                      StyleConstants by default. This class represents the
                      value as a string (via the superclass), but
                      provides StyleConstants conversion support for the
                      CSS attributes that are held as strings.                    
                </javadoc>
                <javadoc line="1634">
                    Convert a CSS value string to the internal format
                      (for fast processing) used in the attribute sets.
                      This produces a StringValue, so that it can be
                      used to convert from CSS to StyleConstants values.                    
                </javadoc>
                <method name="parseCssValue" type="Object" line="1640">
                    <params>
                        <param name="value" type="String"/>
                    </params>
                    <declaration name="sv" type="StringValue" line="1641"/>
                </method>
                <javadoc line="1646">
                    Converts a &lt;code&gt;StyleConstants&lt;/code&gt; attribute value to
                      a CSS attribute value.  If there is no conversion
                      returns &lt;code&gt;null&lt;/code&gt;.                    
                    <param>
                        key the <code>StyleConstants</code> attribute                        
                    </param>
                    <param>
                        value the value of a <code>StyleConstants</code>
                          attribute to be converted                        
                    </param>
                    <return>
                        the CSS value that represents the
                          <code>StyleConstants</code> value                        
                    </return>
                </javadoc>
                <method name="fromStyleConstants" type="Object" line="1657">
                    <params>
                        <param name="key" type="StyleConstants"/>
                        <param name="value" type="Object"/>
                    </params>
                    <scope line="1658">
                        <scope line="1659"/>
                    </scope>
                    <scope line="1663">
                        <scope line="1664"/>
                    </scope>
                    <scope line="1668">
                        <declaration name="align" type="int" line="1669"/>
                        <declaration name="ta" type="String" line="1670"/>
                    </scope>
                    <scope line="1688">
                        <scope line="1689"/>
                    </scope>
                    <scope line="1693">
                        <scope line="1694"/>
                    </scope>
                    <scope line="1698">
                        <scope line="1699"/>
                    </scope>
                </method>
                <javadoc line="1707">
                    Converts a CSS attribute value to a
                      &lt;code&gt;StyleConstants&lt;/code&gt; value.
                      If there is no conversion, returns &lt;code&gt;null&lt;/code&gt;.
                      By default, there is no conversion.                    
                    <param>
                        key the <code>StyleConstants</code> attribute                        
                    </param>
                    <return>
                        the <code>StyleConstants</code> attribute value that
                          represents the CSS attribute value                        
                    </return>
                </javadoc>
                <method name="toStyleConstants" type="Object" line="1717">
                    <params>
                        <param name="key" type="StyleConstants"/>
                        <param name="v" type="View"/>
                    </params>
                    <scope line="1718">
                        <scope line="1719"/>
                    </scope>
                    <scope line="1723">
                        <scope line="1724"/>
                    </scope>
                    <scope line="1728">
                        <scope line="1729"/>
                        <scope line="1731"/>
                        <scope line="1733"/>
                    </scope>
                    <scope line="1737">
                        <scope line="1738"/>
                    </scope>
                    <scope line="1742">
                        <scope line="1743"/>
                    </scope>
                    <scope line="1747">
                        <scope line="1748"/>
                    </scope>
                </method>
                <method name="isItalic" type="boolean" line="1757"/>
                <method name="isStrike" type="boolean" line="1761"/>
                <method name="isUnderline" type="boolean" line="1765"/>
                <method name="isSub" type="boolean" line="1769"/>
                <method name="isSup" type="boolean" line="1773"/>
            </class>
            <class name="FontSize" line="1778">
                <extends class="CssValue"/>
                <comment line="315">
                    made up css attributes to describe orientation depended
                     margins. used for &lt;dir&gt;, &lt;menu&gt;, &lt;ul&gt; etc. see
                     5088268 for more details                    
                </comment>
                <comment line="379">
                                        
                </comment>
                <comment line="382">
                                        
                </comment>
                <comment line="385">
                    All possible CSS attribute keys.                    
                </comment>
                <comment line="449">
                    Lists.                    
                </comment>
                <comment line="458">
                    background-repeat                    
                </comment>
                <comment line="463">
                    background-attachment                    
                </comment>
                <comment line="1757">
                    Used by ViewAttributeSet                    
                </comment>
                <comment line="2224">
                    CSS.Values are static, don&apos;t archive it.                    
                </comment>
                <comment line="2430">
                    bitmask: bit 0, horizontal relative, bit 1 horizontal relative to
                     font size, 2 vertical relative to size, 3 vertical relative to
                     font size.                    
                </comment>
                <comment line="2586">
                    PENDING: this base is wrong for linked style sheets.                    
                </comment>
                <comment line="2727">
                    0 - value indicates real value
                     1 - % value, value relative to depends upon key.
                         50% will have a value = .5
                     2 - add value to parent value.
                     3 - em/ex relative to font size of element (except for
                         font-size, which is relative to parent).                    
                </comment>
                <comment line="3292">
                    0 is the best weight WorstAdjustmentWeight is a worst one                    
                </comment>
                <comment line="3294">
                    float getAlignment();                    
                </comment>
                <javadoc line="1778">
                    Represents a value for the CSS.FONT_SIZE attribute.
                      The binary format of the value can be one of several
                      types.  If the type is Float,
                      the value is specified in terms of point or
                      percentage, depending upon the ending of the
                      associated string.
                      If the type is Integer, the value is specified
                      in terms of a size index.                    
                </javadoc>
                <javadoc line="1790">
                    Returns the size in points.  This is ultimately
                      what we need for the purpose of creating/fetching
                      a Font object.                    
                    <param>
                        a the attribute set the value is being
                          requested from.  We may need to walk up the
                          resolve hierarchy if it's relative.                        
                    </param>
                </javadoc>
                <method name="getValue" type="int" line="1799">
                    <params>
                        <param name="a" type="AttributeSet"/>
                        <param name="ss" type="StyleSheet"/>
                    </params>
                    <comment line="1803">
                        it&apos;s an index, translate from size table                        
                    </comment>
                    <comment line="1830">
                        a is null, or no resolve parent.                        
                    </comment>
                    <scope line="1801"/>
                    <scope line="1805"/>
                    <scope line="1808">
                        <scope line="1809">
                            <declaration name="isW3CLengthUnits" type="boolean" line="1810"/>
                        </scope>
                        <scope line="1813">
                            <declaration name="resolveParent" type="AttributeSet" line="1814"/>
                            <scope line="1816">
                                <declaration name="pValue" type="int" line="1817"/>
                                <declaration name="retValue" type="float" line="1819"/>
                                <scope line="1820"/>
                                <scope line="1823"/>
                            </scope>
                        </scope>
                    </scope>
                </method>
                <method name="parseCssValue" type="Object" line="1834">
                    <params>
                        <param name="value" type="String"/>
                    </params>
                    <comment line="1863">
                        relative sizes, larger | smaller (adjust from parent by
                         1.5 pixels)
                         em, ex refer to parent sizes
                         lengths: pt, mm, cm, pc, in, px
                                  em (font height 3em would be 3 times font height)
                                  ex (height of X)
                         lengths are (+/-) followed by a number and two letter
                         unit identifier                        
                    </comment>
                    <declaration name="fs" type="FontSize" line="1835"/>
                    <scope line="1837">
                        <scope line="1838"/>
                        <scope line="1841"/>
                        <scope line="1844"/>
                        <scope line="1847"/>
                        <scope line="1850"/>
                        <scope line="1853"/>
                        <scope line="1856"/>
                        <scope line="1859"/>
                    </scope>
                    <scope line="1870"/>
                </method>
                <method name="parseHtmlValue" type="Object" line="1876">
                    <params>
                        <param name="value" type="String"/>
                    </params>
                    <comment line="1885">
                        relative sizes in the size attribute are relative
                         to the &lt;basefont&gt;&apos;s size.                        
                    </comment>
                    <scope line="1877"/>
                    <declaration name="fs" type="FontSize" line="1880"/>
                    <scope line="1883">
                        <declaration name="baseFontSize" type="int" line="1888"/>
                        <scope line="1889">
                            <declaration name="relSize" type="int" line="1890"/>
                        </scope>
                        <scope line="1893">
                            <declaration name="relSize" type="int" line="1894"/>
                        </scope>
                        <scope line="1897">
                            <scope line="1899"/>
                            <scope line="1901"/>
                        </scope>
                    </scope>
                    <scope line="1907"/>
                </method>
                <javadoc line="1913">
                    Converts a &lt;code&gt;StyleConstants&lt;/code&gt; attribute value to
                      a CSS attribute value.  If there is no conversion
                      returns &lt;code&gt;null&lt;/code&gt;.  By default, there is no conversion.                    
                    <param>
                        key the <code>StyleConstants</code> attribute                        
                    </param>
                    <param>
                        value the value of a <code>StyleConstants</code>
                          attribute to be converted                        
                    </param>
                    <return>
                        the CSS value that represents the
                          <code>StyleConstants</code> value                        
                    </return>
                </javadoc>
                <method name="fromStyleConstants" type="Object" line="1924">
                    <params>
                        <param name="key" type="StyleConstants"/>
                        <param name="value" type="Object"/>
                    </params>
                    <scope line="1925">
                        <declaration name="fs" type="FontSize" line="1926"/>
                    </scope>
                </method>
                <javadoc line="1936">
                    Converts a CSS attribute value to a &lt;code&gt;StyleConstants&lt;/code&gt;
                      value.  If there is no conversion, returns &lt;code&gt;null&lt;/code&gt;.
                      By default, there is no conversion.                    
                    <param>
                        key the <code>StyleConstants</code> attribute                        
                    </param>
                    <return>
                        the <code>StyleConstants</code> attribute value that
                          represents the CSS attribute value                        
                    </return>
                </javadoc>
                <method name="toStyleConstants" type="Object" line="1945">
                    <params>
                        <param name="key" type="StyleConstants"/>
                        <param name="v" type="View"/>
                    </params>
                    <scope line="1946"/>
                </method>
                <declaration name="value" type="float" line="1952"/>
                <declaration name="index" type="boolean" line="1953"/>
                <declaration name="lu" type="LengthUnit" line="1954"/>
            </class>
            <class name="FontFamily" line="1957">
                <extends class="CssValue"/>
                <comment line="315">
                    made up css attributes to describe orientation depended
                     margins. used for &lt;dir&gt;, &lt;menu&gt;, &lt;ul&gt; etc. see
                     5088268 for more details                    
                </comment>
                <comment line="379">
                                        
                </comment>
                <comment line="382">
                                        
                </comment>
                <comment line="385">
                    All possible CSS attribute keys.                    
                </comment>
                <comment line="449">
                    Lists.                    
                </comment>
                <comment line="458">
                    background-repeat                    
                </comment>
                <comment line="463">
                    background-attachment                    
                </comment>
                <comment line="1757">
                    Used by ViewAttributeSet                    
                </comment>
                <comment line="2224">
                    CSS.Values are static, don&apos;t archive it.                    
                </comment>
                <comment line="2430">
                    bitmask: bit 0, horizontal relative, bit 1 horizontal relative to
                     font size, 2 vertical relative to size, 3 vertical relative to
                     font size.                    
                </comment>
                <comment line="2586">
                    PENDING: this base is wrong for linked style sheets.                    
                </comment>
                <comment line="2727">
                    0 - value indicates real value
                     1 - % value, value relative to depends upon key.
                         50% will have a value = .5
                     2 - add value to parent value.
                     3 - em/ex relative to font size of element (except for
                         font-size, which is relative to parent).                    
                </comment>
                <comment line="3292">
                    0 is the best weight WorstAdjustmentWeight is a worst one                    
                </comment>
                <comment line="3294">
                    float getAlignment();                    
                </comment>
                <javadoc line="1959">
                    Returns the font family to use.                    
                </javadoc>
                <method name="getValue" type="String" line="1962"/>
                <method name="parseCssValue" type="Object" line="1966">
                    <params>
                        <param name="value" type="String"/>
                    </params>
                    <comment line="1982">
                        skip ws.                        
                    </comment>
                    <comment line="1986">
                        Find next &apos;,&apos;                        
                    </comment>
                    <declaration name="cIndex" type="int" line="1967"/>
                    <declaration name="ff" type="FontFamily" line="1968"/>
                    <scope line="1972"/>
                    <scope line="1975">
                        <declaration name="done" type="boolean" line="1976"/>
                        <declaration name="lastIndex" type="int" line="1977"/>
                        <declaration name="length" type="int" line="1978"/>
                        <scope line="1980">
                            <scope line="1988"/>
                            <scope line="1991">
                                <scope line="1992">
                                    <declaration name="lastCharIndex" type="int" line="1993"/>
                                    <scope line="1994"/>
                                </scope>
                            </scope>
                            <scope line="2003"/>
                        </scope>
                    </scope>
                    <scope line="2008"/>
                </method>
                <method name="setFontName" type="void" line="2014">
                    <params>
                        <param name="ff" type="FontFamily"/>
                        <param name="fontName" type="String"/>
                    </params>
                </method>
                <method name="parseHtmlValue" type="Object" line="2018">
                    <params>
                        <param name="value" type="String"/>
                    </params>
                    <comment line="2020">
                        TBD                        
                    </comment>
                </method>
                <javadoc line="2023">
                    Converts a &lt;code&gt;StyleConstants&lt;/code&gt; attribute value to
                      a CSS attribute value.  If there is no conversion
                      returns &lt;code&gt;null&lt;/code&gt;.  By default, there is no conversion.                    
                    <param>
                        key the <code>StyleConstants</code> attribute                        
                    </param>
                    <param>
                        value the value of a <code>StyleConstants</code>
                          attribute to be converted                        
                    </param>
                    <return>
                        the CSS value that represents the
                          <code>StyleConstants</code> value                        
                    </return>
                </javadoc>
                <method name="fromStyleConstants" type="Object" line="2034">
                    <params>
                        <param name="key" type="StyleConstants"/>
                        <param name="value" type="Object"/>
                    </params>
                </method>
                <javadoc line="2038">
                    Converts a CSS attribute value to a &lt;code&gt;StyleConstants&lt;/code&gt;
                      value.  If there is no conversion, returns &lt;code&gt;null&lt;/code&gt;.
                      By default, there is no conversion.                    
                    <param>
                        key the <code>StyleConstants</code> attribute                        
                    </param>
                    <return>
                        the <code>StyleConstants</code> attribute value that
                          represents the CSS attribute value                        
                    </return>
                </javadoc>
                <method name="toStyleConstants" type="Object" line="2047">
                    <params>
                        <param name="key" type="StyleConstants"/>
                        <param name="v" type="View"/>
                    </params>
                </method>
                <declaration name="family" type="String" line="2051"/>
            </class>
            <class name="FontWeight" line="2054">
                <extends class="CssValue"/>
                <comment line="315">
                    made up css attributes to describe orientation depended
                     margins. used for &lt;dir&gt;, &lt;menu&gt;, &lt;ul&gt; etc. see
                     5088268 for more details                    
                </comment>
                <comment line="379">
                                        
                </comment>
                <comment line="382">
                                        
                </comment>
                <comment line="385">
                    All possible CSS attribute keys.                    
                </comment>
                <comment line="449">
                    Lists.                    
                </comment>
                <comment line="458">
                    background-repeat                    
                </comment>
                <comment line="463">
                    background-attachment                    
                </comment>
                <comment line="1757">
                    Used by ViewAttributeSet                    
                </comment>
                <comment line="2224">
                    CSS.Values are static, don&apos;t archive it.                    
                </comment>
                <comment line="2430">
                    bitmask: bit 0, horizontal relative, bit 1 horizontal relative to
                     font size, 2 vertical relative to size, 3 vertical relative to
                     font size.                    
                </comment>
                <comment line="2586">
                    PENDING: this base is wrong for linked style sheets.                    
                </comment>
                <comment line="2727">
                    0 - value indicates real value
                     1 - % value, value relative to depends upon key.
                         50% will have a value = .5
                     2 - add value to parent value.
                     3 - em/ex relative to font size of element (except for
                         font-size, which is relative to parent).                    
                </comment>
                <comment line="3292">
                    0 is the best weight WorstAdjustmentWeight is a worst one                    
                </comment>
                <comment line="3294">
                    float getAlignment();                    
                </comment>
                <method name="getValue" type="int" line="2056"/>
                <method name="parseCssValue" type="Object" line="2060">
                    <params>
                        <param name="value" type="String"/>
                    </params>
                    <comment line="2069">
                        PENDING(prinz) add support for relative values                        
                    </comment>
                    <declaration name="fw" type="FontWeight" line="2061"/>
                    <scope line="2063"/>
                    <scope line="2065"/>
                    <scope line="2067">
                        <scope line="2069"/>
                        <scope line="2071"/>
                    </scope>
                </method>
                <javadoc line="2078">
                    Converts a &lt;code&gt;StyleConstants&lt;/code&gt; attribute value to
                      a CSS attribute value.  If there is no conversion
                      returns &lt;code&gt;null&lt;/code&gt;.  By default, there is no conversion.                    
                    <param>
                        key the <code>StyleConstants</code> attribute                        
                    </param>
                    <param>
                        value the value of a <code>StyleConstants</code>
                          attribute to be converted                        
                    </param>
                    <return>
                        the CSS value that represents the
                          <code>StyleConstants</code> value                        
                    </return>
                </javadoc>
                <method name="fromStyleConstants" type="Object" line="2089">
                    <params>
                        <param name="key" type="StyleConstants"/>
                        <param name="value" type="Object"/>
                    </params>
                    <scope line="2090"/>
                </method>
                <javadoc line="2096">
                    Converts a CSS attribute value to a &lt;code&gt;StyleConstants&lt;/code&gt;
                      value.  If there is no conversion, returns &lt;code&gt;null&lt;/code&gt;.
                      By default, there is no conversion.                    
                    <param>
                        key the <code>StyleConstants</code> attribute                        
                    </param>
                    <return>
                        the <code>StyleConstants</code> attribute value that
                          represents the CSS attribute value                        
                    </return>
                </javadoc>
                <method name="toStyleConstants" type="Object" line="2105">
                    <params>
                        <param name="key" type="StyleConstants"/>
                        <param name="v" type="View"/>
                    </params>
                </method>
                <method name="isBold" type="boolean" line="2109"/>
                <declaration name="weight" type="int" line="2113"/>
            </class>
            <class name="ColorValue" line="2116">
                <extends class="CssValue"/>
                <comment line="315">
                    made up css attributes to describe orientation depended
                     margins. used for &lt;dir&gt;, &lt;menu&gt;, &lt;ul&gt; etc. see
                     5088268 for more details                    
                </comment>
                <comment line="379">
                                        
                </comment>
                <comment line="382">
                                        
                </comment>
                <comment line="385">
                    All possible CSS attribute keys.                    
                </comment>
                <comment line="449">
                    Lists.                    
                </comment>
                <comment line="458">
                    background-repeat                    
                </comment>
                <comment line="463">
                    background-attachment                    
                </comment>
                <comment line="1757">
                    Used by ViewAttributeSet                    
                </comment>
                <comment line="2224">
                    CSS.Values are static, don&apos;t archive it.                    
                </comment>
                <comment line="2430">
                    bitmask: bit 0, horizontal relative, bit 1 horizontal relative to
                     font size, 2 vertical relative to size, 3 vertical relative to
                     font size.                    
                </comment>
                <comment line="2586">
                    PENDING: this base is wrong for linked style sheets.                    
                </comment>
                <comment line="2727">
                    0 - value indicates real value
                     1 - % value, value relative to depends upon key.
                         50% will have a value = .5
                     2 - add value to parent value.
                     3 - em/ex relative to font size of element (except for
                         font-size, which is relative to parent).                    
                </comment>
                <comment line="3292">
                    0 is the best weight WorstAdjustmentWeight is a worst one                    
                </comment>
                <comment line="3294">
                    float getAlignment();                    
                </comment>
                <javadoc line="2118">
                    Returns the color to use.                    
                </javadoc>
                <method name="getValue" type="Color" line="2121"/>
                <method name="parseCssValue" type="Object" line="2125">
                    <params>
                        <param name="value" type="String"/>
                    </params>
                    <declaration name="c" type="Color" line="2127"/>
                    <scope line="2128">
                        <declaration name="cv" type="ColorValue" line="2129"/>
                    </scope>
                </method>
                <method name="parseHtmlValue" type="Object" line="2137">
                    <params>
                        <param name="value" type="String"/>
                    </params>
                </method>
                <javadoc line="2141">
                    Converts a &lt;code&gt;StyleConstants&lt;/code&gt; attribute value to
                      a CSS attribute value.  If there is no conversion
                      returns &lt;code&gt;null&lt;/code&gt;.  By default, there is no conversion.                    
                    <param>
                        key the <code>StyleConstants</code> attribute                        
                    </param>
                    <param>
                        value the value of a <code>StyleConstants</code>
                          attribute to be converted                        
                    </param>
                    <return>
                        the CSS value that represents the
                          <code>StyleConstants</code> value                        
                    </return>
                </javadoc>
                <method name="fromStyleConstants" type="Object" line="2152">
                    <params>
                        <param name="key" type="StyleConstants"/>
                        <param name="value" type="Object"/>
                    </params>
                    <declaration name="colorValue" type="ColorValue" line="2153"/>
                </method>
                <javadoc line="2159">
                    Converts a CSS attribute value to a &lt;code&gt;StyleConstants&lt;/code&gt;
                      value.  If there is no conversion, returns &lt;code&gt;null&lt;/code&gt;.
                      By default, there is no conversion.                    
                    <param>
                        key the <code>StyleConstants</code> attribute                        
                    </param>
                    <return>
                        the <code>StyleConstants</code> attribute value that
                          represents the CSS attribute value                        
                    </return>
                </javadoc>
                <method name="toStyleConstants" type="Object" line="2168">
                    <params>
                        <param name="key" type="StyleConstants"/>
                        <param name="v" type="View"/>
                    </params>
                </method>
                <declaration name="c" type="Color" line="2172"/>
            </class>
            <class name="BorderStyle" line="2175">
                <extends class="CssValue"/>
                <comment line="315">
                    made up css attributes to describe orientation depended
                     margins. used for &lt;dir&gt;, &lt;menu&gt;, &lt;ul&gt; etc. see
                     5088268 for more details                    
                </comment>
                <comment line="379">
                                        
                </comment>
                <comment line="382">
                                        
                </comment>
                <comment line="385">
                    All possible CSS attribute keys.                    
                </comment>
                <comment line="449">
                    Lists.                    
                </comment>
                <comment line="458">
                    background-repeat                    
                </comment>
                <comment line="463">
                    background-attachment                    
                </comment>
                <comment line="1757">
                    Used by ViewAttributeSet                    
                </comment>
                <comment line="2224">
                    CSS.Values are static, don&apos;t archive it.                    
                </comment>
                <comment line="2430">
                    bitmask: bit 0, horizontal relative, bit 1 horizontal relative to
                     font size, 2 vertical relative to size, 3 vertical relative to
                     font size.                    
                </comment>
                <comment line="2586">
                    PENDING: this base is wrong for linked style sheets.                    
                </comment>
                <comment line="2727">
                    0 - value indicates real value
                     1 - % value, value relative to depends upon key.
                         50% will have a value = .5
                     2 - add value to parent value.
                     3 - em/ex relative to font size of element (except for
                         font-size, which is relative to parent).                    
                </comment>
                <comment line="3292">
                    0 is the best weight WorstAdjustmentWeight is a worst one                    
                </comment>
                <comment line="3294">
                    float getAlignment();                    
                </comment>
                <method name="getValue" type="CSS.Value" line="2177"/>
                <method name="parseCssValue" type="Object" line="2181">
                    <params>
                        <param name="value" type="String"/>
                    </params>
                    <declaration name="cssv" type="CSS.Value" line="2182"/>
                    <scope line="2183">
                        <scope line="2192">
                            <declaration name="bs" type="BorderStyle" line="2194"/>
                        </scope>
                    </scope>
                </method>
                <method name="writeObject" type="void" line="2204">
                    <params>
                        <param name="s" type="java.io.ObjectOutputStream"/>
                    </params>
                    <scope line="2206"/>
                    <scope line="2209"/>
                </method>
                <method name="readObject" type="void" line="2215">
                    <params>
                        <param name="s" type="ObjectInputStream"/>
                    </params>
                    <declaration name="value" type="Object" line="2217"/>
                    <scope line="2218"/>
                </method>
                <declaration name="style" type="CSS.Value" line="2224"/>
            </class>
            <class name="LengthValue" line="2227">
                <extends class="CssValue"/>
                <comment line="315">
                    made up css attributes to describe orientation depended
                     margins. used for &lt;dir&gt;, &lt;menu&gt;, &lt;ul&gt; etc. see
                     5088268 for more details                    
                </comment>
                <comment line="379">
                                        
                </comment>
                <comment line="382">
                                        
                </comment>
                <comment line="385">
                    All possible CSS attribute keys.                    
                </comment>
                <comment line="449">
                    Lists.                    
                </comment>
                <comment line="458">
                    background-repeat                    
                </comment>
                <comment line="463">
                    background-attachment                    
                </comment>
                <comment line="1757">
                    Used by ViewAttributeSet                    
                </comment>
                <comment line="2224">
                    CSS.Values are static, don&apos;t archive it.                    
                </comment>
                <comment line="2430">
                    bitmask: bit 0, horizontal relative, bit 1 horizontal relative to
                     font size, 2 vertical relative to size, 3 vertical relative to
                     font size.                    
                </comment>
                <comment line="2586">
                    PENDING: this base is wrong for linked style sheets.                    
                </comment>
                <comment line="2727">
                    0 - value indicates real value
                     1 - % value, value relative to depends upon key.
                         50% will have a value = .5
                     2 - add value to parent value.
                     3 - em/ex relative to font size of element (except for
                         font-size, which is relative to parent).                    
                </comment>
                <comment line="3292">
                    0 is the best weight WorstAdjustmentWeight is a worst one                    
                </comment>
                <comment line="3294">
                    float getAlignment();                    
                </comment>
                <declaration name="mayBeNegative" type="boolean" line="2229"/>
                <javadoc line="2229">
                    if this length value may be negative.                    
                </javadoc>
                <method name="LengthValue" type="constructor" line="2234"/>
                <method name="LengthValue" type="constructor" line="2238">
                    <params>
                        <param name="mayBeNegative" type="boolean"/>
                    </params>
                </method>
                <javadoc line="2242">
                    Returns the length (span) to use.                    
                </javadoc>
                <method name="getValue" type="float" line="2245"/>
                <method name="getValue" type="float" line="2249">
                    <params>
                        <param name="isW3CLengthUnits" type="boolean"/>
                    </params>
                </method>
                <javadoc line="2253">
                    Returns the length (span) to use. If the value represents
                      a percentage, it is scaled based on &lt;code&gt;currentValue&lt;/code&gt;.                    
                </javadoc>
                <method name="getValue" type="float" line="2257">
                    <params>
                        <param name="currentValue" type="float"/>
                    </params>
                </method>
                <method name="getValue" type="float" line="2260">
                    <params>
                        <param name="currentValue" type="float"/>
                        <param name="isW3CLengthUnits" type="boolean"/>
                    </params>
                    <scope line="2261"/>
                </method>
                <javadoc line="2267">
                    Returns true if the length represents a percentage of the
                      containing box.                    
                </javadoc>
                <method name="isPercentage" type="boolean" line="2271"/>
                <method name="parseCssValue" type="Object" line="2275">
                    <params>
                        <param name="value" type="String"/>
                    </params>
                    <comment line="2279">
                        Assume pixels                        
                    </comment>
                    <comment line="2284">
                        Not pixels, use LengthUnit                        
                    </comment>
                    <comment line="2289">
                        PENDING: currently, we only support absolute values and
                         percentages.                        
                    </comment>
                    <comment line="2293">
                        Absolute                        
                    </comment>
                    <comment line="2300">
                        %                        
                    </comment>
                    <declaration name="lv" type="LengthValue" line="2276"/>
                    <scope line="2277">
                        <declaration name="absolute" type="float" line="2279"/>
                    </scope>
                    <scope line="2282">
                        <declaration name="lu" type="LengthUnit" line="2284"/>
                    </scope>
                </method>
                <method name="parseHtmlValue" type="Object" line="2312">
                    <params>
                        <param name="value" type="String"/>
                    </params>
                    <scope line="2313"/>
                </method>
                <javadoc line="2318">
                    Converts a &lt;code&gt;StyleConstants&lt;/code&gt; attribute value to
                      a CSS attribute value.  If there is no conversion,
                      returns &lt;code&gt;null&lt;/code&gt;.  By default, there is no conversion.                    
                    <param>
                        key the <code>StyleConstants</code> attribute                        
                    </param>
                    <param>
                        value the value of a <code>StyleConstants</code>
                          attribute to be converted                        
                    </param>
                    <return>
                        the CSS value that represents the
                          <code>StyleConstants</code> value                        
                    </return>
                </javadoc>
                <method name="fromStyleConstants" type="Object" line="2329">
                    <params>
                        <param name="key" type="StyleConstants"/>
                        <param name="value" type="Object"/>
                    </params>
                    <declaration name="v" type="LengthValue" line="2330"/>
                </method>
                <javadoc line="2336">
                    Converts a CSS attribute value to a &lt;code&gt;StyleConstants&lt;/code&gt;
                      value.  If there is no conversion, returns &lt;code&gt;null&lt;/code&gt;.
                      By default, there is no conversion.                    
                    <param>
                        key the <code>StyleConstants</code> attribute                        
                    </param>
                    <return>
                        the <code>StyleConstants</code> attribute value that
                          represents the CSS attribute value                        
                    </return>
                </javadoc>
                <method name="toStyleConstants" type="Object" line="2345">
                    <params>
                        <param name="key" type="StyleConstants"/>
                        <param name="v" type="View"/>
                    </params>
                </method>
                <declaration name="percentage" type="boolean" line="2349"/>
                <javadoc line="2349">
                    If true, span is a percentage value, and that to determine
                      the length another value needs to be passed in.                    
                </javadoc>
                <declaration name="span" type="float" line="2352"/>
                <javadoc line="2352">
                    Either the absolute value (percentage == false) or
                      a percentage value.                    
                </javadoc>
                <declaration name="units" type="String" line="2356"/>
            </class>
            <class name="BorderWidthValue" line="2360">
                <extends class="LengthValue"/>
                <comment line="315">
                    made up css attributes to describe orientation depended
                     margins. used for &lt;dir&gt;, &lt;menu&gt;, &lt;ul&gt; etc. see
                     5088268 for more details                    
                </comment>
                <comment line="379">
                                        
                </comment>
                <comment line="382">
                                        
                </comment>
                <comment line="385">
                    All possible CSS attribute keys.                    
                </comment>
                <comment line="449">
                    Lists.                    
                </comment>
                <comment line="458">
                    background-repeat                    
                </comment>
                <comment line="463">
                    background-attachment                    
                </comment>
                <comment line="1757">
                    Used by ViewAttributeSet                    
                </comment>
                <comment line="2224">
                    CSS.Values are static, don&apos;t archive it.                    
                </comment>
                <comment line="2430">
                    bitmask: bit 0, horizontal relative, bit 1 horizontal relative to
                     font size, 2 vertical relative to size, 3 vertical relative to
                     font size.                    
                </comment>
                <comment line="2586">
                    PENDING: this base is wrong for linked style sheets.                    
                </comment>
                <comment line="2727">
                    0 - value indicates real value
                     1 - % value, value relative to depends upon key.
                         50% will have a value = .5
                     2 - add value to parent value.
                     3 - em/ex relative to font size of element (except for
                         font-size, which is relative to parent).                    
                </comment>
                <comment line="3292">
                    0 is the best weight WorstAdjustmentWeight is a worst one                    
                </comment>
                <comment line="3294">
                    float getAlignment();                    
                </comment>
                <javadoc line="2360">
                    BorderWidthValue is used to model BORDER_XXX_WIDTH and adds support
                      for the thin/medium/thick values.                    
                </javadoc>
                <method name="BorderWidthValue" type="constructor" line="2365">
                    <params>
                        <param name="svalue" type="String"/>
                        <param name="index" type="int"/>
                    </params>
                </method>
                <method name="parseCssValue" type="Object" line="2371">
                    <params>
                        <param name="value" type="String"/>
                    </params>
                    <comment line="2384">
                        Assume its a length.                        
                    </comment>
                    <scope line="2372">
                        <scope line="2373"/>
                        <scope line="2376"/>
                        <scope line="2379"/>
                    </scope>
                </method>
                <method name="parseHtmlValue" type="Object" line="2387">
                    <params>
                        <param name="value" type="String"/>
                    </params>
                    <scope line="2388"/>
                </method>
                <declaration name="values" type="float[]" line="2394"/>
                <javadoc line="2394">
                    Values used to represent border width.                    
                </javadoc>
            </class>
            <class name="CssValueMapper" line="2399">
                <extends class="CssValue"/>
                <comment line="315">
                    made up css attributes to describe orientation depended
                     margins. used for &lt;dir&gt;, &lt;menu&gt;, &lt;ul&gt; etc. see
                     5088268 for more details                    
                </comment>
                <comment line="379">
                                        
                </comment>
                <comment line="382">
                                        
                </comment>
                <comment line="385">
                    All possible CSS attribute keys.                    
                </comment>
                <comment line="449">
                    Lists.                    
                </comment>
                <comment line="458">
                    background-repeat                    
                </comment>
                <comment line="463">
                    background-attachment                    
                </comment>
                <comment line="1757">
                    Used by ViewAttributeSet                    
                </comment>
                <comment line="2224">
                    CSS.Values are static, don&apos;t archive it.                    
                </comment>
                <comment line="2430">
                    bitmask: bit 0, horizontal relative, bit 1 horizontal relative to
                     font size, 2 vertical relative to size, 3 vertical relative to
                     font size.                    
                </comment>
                <comment line="2586">
                    PENDING: this base is wrong for linked style sheets.                    
                </comment>
                <comment line="2727">
                    0 - value indicates real value
                     1 - % value, value relative to depends upon key.
                         50% will have a value = .5
                     2 - add value to parent value.
                     3 - em/ex relative to font size of element (except for
                         font-size, which is relative to parent).                    
                </comment>
                <comment line="3292">
                    0 is the best weight WorstAdjustmentWeight is a worst one                    
                </comment>
                <comment line="3294">
                    float getAlignment();                    
                </comment>
                <javadoc line="2399">
                    Handles uniquing of CSS values, like lists, and background image
                      repeating.                    
                </javadoc>
                <method name="parseCssValue" type="Object" line="2404">
                    <params>
                        <param name="value" type="String"/>
                    </params>
                    <declaration name="retValue" type="Object" line="2405"/>
                    <scope line="2406"/>
                </method>
                <method name="parseHtmlValue" type="Object" line="2413">
                    <params>
                        <param name="value" type="String"/>
                    </params>
                    <declaration name="retValue" type="Object" line="2414"/>
                    <scope line="2415"/>
                </method>
            </class>
            <class name="BackgroundPosition" line="2423">
                <extends class="CssValue"/>
                <comment line="315">
                    made up css attributes to describe orientation depended
                     margins. used for &lt;dir&gt;, &lt;menu&gt;, &lt;ul&gt; etc. see
                     5088268 for more details                    
                </comment>
                <comment line="379">
                                        
                </comment>
                <comment line="382">
                                        
                </comment>
                <comment line="385">
                    All possible CSS attribute keys.                    
                </comment>
                <comment line="449">
                    Lists.                    
                </comment>
                <comment line="458">
                    background-repeat                    
                </comment>
                <comment line="463">
                    background-attachment                    
                </comment>
                <comment line="1757">
                    Used by ViewAttributeSet                    
                </comment>
                <comment line="2224">
                    CSS.Values are static, don&apos;t archive it.                    
                </comment>
                <comment line="2430">
                    bitmask: bit 0, horizontal relative, bit 1 horizontal relative to
                     font size, 2 vertical relative to size, 3 vertical relative to
                     font size.                    
                </comment>
                <comment line="2586">
                    PENDING: this base is wrong for linked style sheets.                    
                </comment>
                <comment line="2727">
                    0 - value indicates real value
                     1 - % value, value relative to depends upon key.
                         50% will have a value = .5
                     2 - add value to parent value.
                     3 - em/ex relative to font size of element (except for
                         font-size, which is relative to parent).                    
                </comment>
                <comment line="3292">
                    0 is the best weight WorstAdjustmentWeight is a worst one                    
                </comment>
                <comment line="3294">
                    float getAlignment();                    
                </comment>
                <javadoc line="2423">
                    Used for background images, to represent the position.                    
                </javadoc>
                <declaration name="horizontalPosition" type="float" line="2427"/>
                <declaration name="verticalPosition" type="float" line="2428"/>
                <declaration name="relative" type="short" line="2433"/>
                <method name="parseCssValue" type="Object" line="2435">
                    <params>
                        <param name="value" type="String"/>
                    </params>
                    <comment line="2437">
                        &apos;top left&apos; and &apos;left top&apos; both mean the same as &apos;0% 0%&apos;.
                         &apos;top&apos;, &apos;top center&apos; and &apos;center top&apos; mean the same as &apos;50% 0%&apos;.
                         &apos;right top&apos; and &apos;top right&apos; mean the same as &apos;100% 0%&apos;.
                         &apos;left&apos;, &apos;left center&apos; and &apos;center left&apos; mean the same as
                                &apos;0% 50%&apos;.
                         &apos;center&apos; and &apos;center center&apos; mean the same as &apos;50% 50%&apos;.
                         &apos;right&apos;, &apos;right center&apos; and &apos;center right&apos; mean the same as
                                &apos;100% 50%&apos;.
                         &apos;bottom left&apos; and &apos;left bottom&apos; mean the same as &apos;0% 100%&apos;.
                         &apos;bottom&apos;, &apos;bottom center&apos; and &apos;center bottom&apos; mean the same as
                                &apos;50% 100%&apos;.
                         &apos;bottom right&apos; and &apos;right bottom&apos; mean the same as &apos;100% 100%&apos;.                        
                    </comment>
                    <comment line="2456">
                        bit 0 for vert, 1 hor, 2 for center                        
                    </comment>
                    <comment line="2460">
                        First, check for keywords                        
                    </comment>
                    <comment line="2492">
                        vert and no horiz.                        
                    </comment>
                    <comment line="2497">
                        horiz and no vert.                        
                    </comment>
                    <comment line="2501">
                        no horiz, no vert, but center                        
                    </comment>
                    <comment line="2506">
                        Assume lengths                        
                    </comment>
                    <declaration name="strings" type="String[]" line="2448"/>
                    <declaration name="count" type="int" line="2449"/>
                    <declaration name="bp" type="BackgroundPosition" line="2450"/>
                    <scope line="2454">
                        <declaration name="found" type="short" line="2456"/>
                        <declaration name="index" type="int" line="2457"/>
                        <scope line="2458">
                            <declaration name="string" type="String" line="2460"/>
                            <scope line="2461"/>
                            <scope line="2465">
                                <scope line="2466">
                                    <scope line="2467"/>
                                    <scope line="2470"/>
                                </scope>
                                <scope line="2476">
                                    <scope line="2477"/>
                                    <scope line="2481"/>
                                </scope>
                            </scope>
                        </scope>
                        <scope line="2488">
                            <scope line="2489">
                                <scope line="2490"/>
                            </scope>
                            <scope line="2495"/>
                            <scope line="2499"/>
                        </scope>
                        <scope line="2504">
                            <declaration name="lu" type="LengthUnit" line="2506"/>
                            <scope line="2508"/>
                            <scope line="2512"/>
                            <scope line="2515"/>
                            <scope line="2519">
                                <scope line="2522"/>
                                <scope line="2526"/>
                                <scope line="2529"/>
                            </scope>
                            <scope line="2534"/>
                        </scope>
                    </scope>
                </method>
                <method name="isHorizontalPositionRelativeToSize" type="boolean" line="2542"/>
                <method name="isHorizontalPositionRelativeToFontSize" type="boolean" line="2546"/>
                <method name="getHorizontalPosition" type="float" line="2550"/>
                <method name="isVerticalPositionRelativeToSize" type="boolean" line="2554"/>
                <method name="isVerticalPositionRelativeToFontSize" type="boolean" line="2558"/>
                <method name="getVerticalPosition" type="float" line="2562"/>
            </class>
            <class name="BackgroundImage" line="2568">
                <extends class="CssValue"/>
                <comment line="315">
                    made up css attributes to describe orientation depended
                     margins. used for &lt;dir&gt;, &lt;menu&gt;, &lt;ul&gt; etc. see
                     5088268 for more details                    
                </comment>
                <comment line="379">
                                        
                </comment>
                <comment line="382">
                                        
                </comment>
                <comment line="385">
                    All possible CSS attribute keys.                    
                </comment>
                <comment line="449">
                    Lists.                    
                </comment>
                <comment line="458">
                    background-repeat                    
                </comment>
                <comment line="463">
                    background-attachment                    
                </comment>
                <comment line="1757">
                    Used by ViewAttributeSet                    
                </comment>
                <comment line="2224">
                    CSS.Values are static, don&apos;t archive it.                    
                </comment>
                <comment line="2430">
                    bitmask: bit 0, horizontal relative, bit 1 horizontal relative to
                     font size, 2 vertical relative to size, 3 vertical relative to
                     font size.                    
                </comment>
                <comment line="2586">
                    PENDING: this base is wrong for linked style sheets.                    
                </comment>
                <comment line="2727">
                    0 - value indicates real value
                     1 - % value, value relative to depends upon key.
                         50% will have a value = .5
                     2 - add value to parent value.
                     3 - em/ex relative to font size of element (except for
                         font-size, which is relative to parent).                    
                </comment>
                <comment line="3292">
                    0 is the best weight WorstAdjustmentWeight is a worst one                    
                </comment>
                <comment line="3294">
                    float getAlignment();                    
                </comment>
                <javadoc line="2568">
                    Used for BackgroundImages.                    
                </javadoc>
                <declaration name="loadedImage" type="boolean" line="2572"/>
                <declaration name="image" type="ImageIcon" line="2573"/>
                <method name="parseCssValue" type="Object" line="2575">
                    <params>
                        <param name="value" type="String"/>
                    </params>
                    <declaration name="retValue" type="BackgroundImage" line="2576"/>
                </method>
                <method name="parseHtmlValue" type="Object" line="2581">
                    <params>
                        <param name="value" type="String"/>
                    </params>
                </method>
                <method name="getImage" type="ImageIcon" line="2586">
                    <params>
                        <param name="base" type="URL"/>
                    </params>
                    <scope line="2587">
                        <scope line="2588">
                            <scope line="2589">
                                <declaration name="url" type="URL" line="2590"/>
                                <scope line="2592">
                                    <declaration name="tmpImg" type="Image" line="2594"/>
                                    <scope line="2595"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </method>
            </class>
            <class name="LengthUnit" line="2606">
                <comment line="315">
                    made up css attributes to describe orientation depended
                     margins. used for &lt;dir&gt;, &lt;menu&gt;, &lt;ul&gt; etc. see
                     5088268 for more details                    
                </comment>
                <comment line="379">
                                        
                </comment>
                <comment line="382">
                                        
                </comment>
                <comment line="385">
                    All possible CSS attribute keys.                    
                </comment>
                <comment line="449">
                    Lists.                    
                </comment>
                <comment line="458">
                    background-repeat                    
                </comment>
                <comment line="463">
                    background-attachment                    
                </comment>
                <comment line="1757">
                    Used by ViewAttributeSet                    
                </comment>
                <comment line="2224">
                    CSS.Values are static, don&apos;t archive it.                    
                </comment>
                <comment line="2430">
                    bitmask: bit 0, horizontal relative, bit 1 horizontal relative to
                     font size, 2 vertical relative to size, 3 vertical relative to
                     font size.                    
                </comment>
                <comment line="2586">
                    PENDING: this base is wrong for linked style sheets.                    
                </comment>
                <comment line="2727">
                    0 - value indicates real value
                     1 - % value, value relative to depends upon key.
                         50% will have a value = .5
                     2 - add value to parent value.
                     3 - em/ex relative to font size of element (except for
                         font-size, which is relative to parent).                    
                </comment>
                <comment line="3292">
                    0 is the best weight WorstAdjustmentWeight is a worst one                    
                </comment>
                <comment line="3294">
                    float getAlignment();                    
                </comment>
                <implements interface="Serializable"/>
                <javadoc line="2606">
                    Parses a length value, this is used internally, and never added
                      to an AttributeSet or returned to the developer.                    
                </javadoc>
                <declaration name="lengthMapping" type="Hashtable&lt;String,Float&gt;" line="2611"/>
                <declaration name="w3cLengthMapping" type="Hashtable&lt;String,Float&gt;" line="2612"/>
                <scope line="2613">
                    <declaration name="res" type="int" line="2621"/>
                    <scope line="2622"/>
                    <scope line="2624"/>
                </scope>
                <method name="LengthUnit" type="constructor" line="2635">
                    <params>
                        <param name="value" type="String"/>
                        <param name="defaultType" type="short"/>
                        <param name="defaultValue" type="float"/>
                    </params>
                </method>
                <method name="parse" type="void" line="2639">
                    <params>
                        <param name="value" type="String"/>
                        <param name="defaultType" type="short"/>
                        <param name="defaultValue" type="float"/>
                    </params>
                    <comment line="2682">
                        treat like points.                        
                    </comment>
                    <comment line="2690">
                        treat like points.                        
                    </comment>
                    <declaration name="length" type="int" line="2643"/>
                    <scope line="2644">
                        <scope line="2645"/>
                        <scope line="2650"/>
                    </scope>
                    <scope line="2652">
                        <declaration name="scale" type="Float" line="2654"/>
                        <scope line="2655">
                            <scope line="2656"/>
                            <scope line="2661"/>
                        </scope>
                        <scope line="2664">
                            <scope line="2665"/>
                            <scope line="2670"/>
                        </scope>
                        <scope line="2672"/>
                        <scope line="2676"/>
                        <scope line="2680">
                            <scope line="2682"/>
                            <scope line="2685"/>
                        </scope>
                    </scope>
                    <scope line="2688">
                        <scope line="2690"/>
                        <scope line="2693"/>
                    </scope>
                </method>
                <method name="getValue" type="float" line="2697">
                    <params>
                        <param name="w3cLengthUnits" type="boolean"/>
                    </params>
                    <declaration name="mapping" type="Hashtable&lt;String,Float&gt;" line="2698"/>
                    <declaration name="scale" type="float" line="2699"/>
                    <scope line="2700">
                        <declaration name="scaleFloat" type="Float" line="2701"/>
                        <scope line="2702"/>
                    </scope>
                </method>
                <method name="getValue" type="float" line="2710">
                    <params>
                        <param name="value" type="float"/>
                        <param name="units" type="String"/>
                        <param name="w3cLengthUnits" type="Boolean"/>
                    </params>
                    <declaration name="mapping" type="Hashtable&lt;String,Float&gt;" line="2711"/>
                    <declaration name="scale" type="float" line="2712"/>
                    <scope line="2713">
                        <declaration name="scaleFloat" type="Float" line="2714"/>
                        <scope line="2715"/>
                    </scope>
                </method>
                <method name="toString" type="String" line="2722"/>
                <declaration name="type" type="short" line="2732"/>
                <declaration name="value" type="float" line="2733"/>
                <declaration name="units" type="String" line="2734"/>
                <declaration name="UNINITALIZED_LENGTH" type="short" line="2737"/>
            </class>
            <class name="ShorthandFontParser" line="2741">
                <comment line="315">
                    made up css attributes to describe orientation depended
                     margins. used for &lt;dir&gt;, &lt;menu&gt;, &lt;ul&gt; etc. see
                     5088268 for more details                    
                </comment>
                <comment line="379">
                                        
                </comment>
                <comment line="382">
                                        
                </comment>
                <comment line="385">
                    All possible CSS attribute keys.                    
                </comment>
                <comment line="449">
                    Lists.                    
                </comment>
                <comment line="458">
                    background-repeat                    
                </comment>
                <comment line="463">
                    background-attachment                    
                </comment>
                <comment line="1757">
                    Used by ViewAttributeSet                    
                </comment>
                <comment line="2224">
                    CSS.Values are static, don&apos;t archive it.                    
                </comment>
                <comment line="2430">
                    bitmask: bit 0, horizontal relative, bit 1 horizontal relative to
                     font size, 2 vertical relative to size, 3 vertical relative to
                     font size.                    
                </comment>
                <comment line="2586">
                    PENDING: this base is wrong for linked style sheets.                    
                </comment>
                <comment line="2727">
                    0 - value indicates real value
                     1 - % value, value relative to depends upon key.
                         50% will have a value = .5
                     2 - add value to parent value.
                     3 - em/ex relative to font size of element (except for
                         font-size, which is relative to parent).                    
                </comment>
                <comment line="3292">
                    0 is the best weight WorstAdjustmentWeight is a worst one                    
                </comment>
                <comment line="3294">
                    float getAlignment();                    
                </comment>
                <javadoc line="2741">
                    Class used to parse font property. The font property is shorthand
                      for the other font properties. This expands the properties, placing
                      them in the attributeset.                    
                </javadoc>
                <javadoc line="2747">
                    Parses the shorthand font string &lt;code&gt;value&lt;/code&gt;, placing the
                      result in &lt;code&gt;attr&lt;/code&gt;.                    
                </javadoc>
                <method name="parseShorthandFont" type="void" line="2752">
                    <params>
                        <param name="css" type="CSS"/>
                        <param name="value" type="String"/>
                        <param name="attr" type="MutableAttributeSet"/>
                    </params>
                    <comment line="2754">
                        font is of the form:
                         [ &lt;font-style&gt; || &lt;font-variant&gt; || &lt;font-weight&gt; ]? &lt;font-size&gt;
                           [ / &lt;line-height&gt; ]? &lt;font-family&gt;                        
                    </comment>
                    <comment line="2760">
                        bitmask, 1 for style, 2 for variant, 3 for weight                        
                    </comment>
                    <comment line="2764">
                        Check for font-style font-variant font-weight                        
                    </comment>
                    <comment line="2801">
                        string at index should be the font-size                        
                    </comment>
                    <comment line="2821">
                        Check for line height                        
                    </comment>
                    <comment line="2832">
                        line height                        
                    </comment>
                    <comment line="2847">
                        remainder of strings are font-family                        
                    </comment>
                    <declaration name="strings" type="String[]" line="2756"/>
                    <declaration name="count" type="int" line="2757"/>
                    <declaration name="index" type="int" line="2758"/>
                    <declaration name="found" type="short" line="2760"/>
                    <declaration name="maxC" type="int" line="2761"/>
                    <scope line="2764">
                        <scope line="2765"/>
                        <scope line="2770"/>
                        <scope line="2775"/>
                        <scope line="2780"/>
                        <scope line="2783"/>
                    </scope>
                    <scope line="2787"/>
                    <scope line="2791"/>
                    <scope line="2795"/>
                    <scope line="2801">
                        <declaration name="fontSize" type="String" line="2802"/>
                        <declaration name="slashIndex" type="int" line="2803"/>
                        <scope line="2805"/>
                        <scope line="2809"/>
                    </scope>
                    <scope line="2815"/>
                    <scope line="2821">
                        <declaration name="lineHeight" type="String" line="2822"/>
                        <scope line="2823">
                            <scope line="2824"/>
                        </scope>
                        <scope line="2828"/>
                        <scope line="2832"/>
                        <scope line="2836"/>
                    </scope>
                    <scope line="2841"/>
                    <scope line="2847">
                        <declaration name="family" type="String" line="2848"/>
                        <scope line="2850"/>
                    </scope>
                    <scope line="2856"/>
                </method>
                <method name="isFontStyle" type="boolean" line="2862">
                    <params>
                        <param name="string" type="String"/>
                    </params>
                </method>
                <method name="isFontVariant" type="boolean" line="2867">
                    <params>
                        <param name="string" type="String"/>
                    </params>
                </method>
                <method name="isFontWeight" type="boolean" line="2871">
                    <params>
                        <param name="string" type="String"/>
                    </params>
                    <comment line="2877">
                        test for 100-900                        
                    </comment>
                    <scope line="2873"/>
                </method>
            </class>
            <class name="ShorthandBackgroundParser" line="2885">
                <comment line="315">
                    made up css attributes to describe orientation depended
                     margins. used for &lt;dir&gt;, &lt;menu&gt;, &lt;ul&gt; etc. see
                     5088268 for more details                    
                </comment>
                <comment line="379">
                                        
                </comment>
                <comment line="382">
                                        
                </comment>
                <comment line="385">
                    All possible CSS attribute keys.                    
                </comment>
                <comment line="449">
                    Lists.                    
                </comment>
                <comment line="458">
                    background-repeat                    
                </comment>
                <comment line="463">
                    background-attachment                    
                </comment>
                <comment line="1757">
                    Used by ViewAttributeSet                    
                </comment>
                <comment line="2224">
                    CSS.Values are static, don&apos;t archive it.                    
                </comment>
                <comment line="2430">
                    bitmask: bit 0, horizontal relative, bit 1 horizontal relative to
                     font size, 2 vertical relative to size, 3 vertical relative to
                     font size.                    
                </comment>
                <comment line="2586">
                    PENDING: this base is wrong for linked style sheets.                    
                </comment>
                <comment line="2727">
                    0 - value indicates real value
                     1 - % value, value relative to depends upon key.
                         50% will have a value = .5
                     2 - add value to parent value.
                     3 - em/ex relative to font size of element (except for
                         font-size, which is relative to parent).                    
                </comment>
                <comment line="3292">
                    0 is the best weight WorstAdjustmentWeight is a worst one                    
                </comment>
                <comment line="3294">
                    float getAlignment();                    
                </comment>
                <javadoc line="2885">
                    Parses the background property into its intrinsic values.                    
                </javadoc>
                <javadoc line="2889">
                    Parses the shorthand font string &lt;code&gt;value&lt;/code&gt;, placing the
                      result in &lt;code&gt;attr&lt;/code&gt;.                    
                </javadoc>
                <method name="parseShorthandBackground" type="void" line="2894">
                    <params>
                        <param name="css" type="CSS"/>
                        <param name="value" type="String"/>
                        <param name="attr" type="MutableAttributeSet"/>
                    </params>
                    <comment line="2899">
                        bitmask: 0 for image, 1 repeat, 2 attachment, 3 position,
                                  4 color                        
                    </comment>
                    <comment line="2955">
                        Currently, there is no good way to express this.                        
                    </comment>
                    <comment line="2956">
                        if ((found &amp; 16) == 0) {
                        css.addInternalCSSValue(attr, CSS.Attribute.BACKGROUND_COLOR,
                        null);
                        }                        
                    </comment>
                    <declaration name="strings" type="String[]" line="2895"/>
                    <declaration name="count" type="int" line="2896"/>
                    <declaration name="index" type="int" line="2897"/>
                    <declaration name="found" type="short" line="2900"/>
                    <scope line="2902">
                        <declaration name="string" type="String" line="2903"/>
                        <scope line="2904"/>
                        <scope line="2909"/>
                        <scope line="2914"/>
                        <scope line="2919">
                            <scope line="2920"/>
                            <scope line="2926"/>
                        </scope>
                        <scope line="2932"/>
                    </scope>
                    <scope line="2938"/>
                    <scope line="2942"/>
                    <scope line="2946"/>
                    <scope line="2950"/>
                </method>
                <method name="isImage" type="boolean" line="2963">
                    <params>
                        <param name="string" type="String"/>
                    </params>
                </method>
                <method name="isRepeat" type="boolean" line="2967">
                    <params>
                        <param name="string" type="String"/>
                    </params>
                </method>
                <method name="isAttachment" type="boolean" line="2972">
                    <params>
                        <param name="string" type="String"/>
                    </params>
                </method>
                <method name="isPosition" type="boolean" line="2976">
                    <params>
                        <param name="string" type="String"/>
                    </params>
                </method>
                <method name="isColor" type="boolean" line="2984">
                    <params>
                        <param name="string" type="String"/>
                    </params>
                </method>
            </class>
            <class name="ShorthandMarginParser" line="2990">
                <comment line="315">
                    made up css attributes to describe orientation depended
                     margins. used for &lt;dir&gt;, &lt;menu&gt;, &lt;ul&gt; etc. see
                     5088268 for more details                    
                </comment>
                <comment line="379">
                                        
                </comment>
                <comment line="382">
                                        
                </comment>
                <comment line="385">
                    All possible CSS attribute keys.                    
                </comment>
                <comment line="449">
                    Lists.                    
                </comment>
                <comment line="458">
                    background-repeat                    
                </comment>
                <comment line="463">
                    background-attachment                    
                </comment>
                <comment line="1757">
                    Used by ViewAttributeSet                    
                </comment>
                <comment line="2224">
                    CSS.Values are static, don&apos;t archive it.                    
                </comment>
                <comment line="2430">
                    bitmask: bit 0, horizontal relative, bit 1 horizontal relative to
                     font size, 2 vertical relative to size, 3 vertical relative to
                     font size.                    
                </comment>
                <comment line="2586">
                    PENDING: this base is wrong for linked style sheets.                    
                </comment>
                <comment line="2727">
                    0 - value indicates real value
                     1 - % value, value relative to depends upon key.
                         50% will have a value = .5
                     2 - add value to parent value.
                     3 - em/ex relative to font size of element (except for
                         font-size, which is relative to parent).                    
                </comment>
                <comment line="3292">
                    0 is the best weight WorstAdjustmentWeight is a worst one                    
                </comment>
                <comment line="3294">
                    float getAlignment();                    
                </comment>
                <javadoc line="2990">
                    Used to parser margin and padding.                    
                </javadoc>
                <javadoc line="2994">
                    Parses the shorthand margin/padding/border string
                      &lt;code&gt;value&lt;/code&gt;, placing the result in &lt;code&gt;attr&lt;/code&gt;.
                      &lt;code&gt;names&lt;/code&gt; give the 4 instrinsic property names.                    
                </javadoc>
                <method name="parseShorthandMargin" type="void" line="3001">
                    <params>
                        <param name="css" type="CSS"/>
                        <param name="value" type="String"/>
                        <param name="attr" type="MutableAttributeSet"/>
                        <param name="names" type="CSS.Attribute[]"/>
                    </params>
                    <comment line="3008">
                        empty string                        
                    </comment>
                    <comment line="3011">
                        Identifies all values.                        
                    </comment>
                    <comment line="3017">
                        0 &amp; 2 = strings[0], 1 &amp; 3 = strings[1]                        
                    </comment>
                    <declaration name="strings" type="String[]" line="3002"/>
                    <declaration name="count" type="int" line="3003"/>
                    <declaration name="index" type="int" line="3004"/>
                    <scope line="3011"/>
                    <scope line="3029"/>
                </method>
            </class>
            <class name="ShorthandBorderParser" line="3038">
                <comment line="315">
                    made up css attributes to describe orientation depended
                     margins. used for &lt;dir&gt;, &lt;menu&gt;, &lt;ul&gt; etc. see
                     5088268 for more details                    
                </comment>
                <comment line="379">
                                        
                </comment>
                <comment line="382">
                                        
                </comment>
                <comment line="385">
                    All possible CSS attribute keys.                    
                </comment>
                <comment line="449">
                    Lists.                    
                </comment>
                <comment line="458">
                    background-repeat                    
                </comment>
                <comment line="463">
                    background-attachment                    
                </comment>
                <comment line="1757">
                    Used by ViewAttributeSet                    
                </comment>
                <comment line="2224">
                    CSS.Values are static, don&apos;t archive it.                    
                </comment>
                <comment line="2430">
                    bitmask: bit 0, horizontal relative, bit 1 horizontal relative to
                     font size, 2 vertical relative to size, 3 vertical relative to
                     font size.                    
                </comment>
                <comment line="2586">
                    PENDING: this base is wrong for linked style sheets.                    
                </comment>
                <comment line="2727">
                    0 - value indicates real value
                     1 - % value, value relative to depends upon key.
                         50% will have a value = .5
                     2 - add value to parent value.
                     3 - em/ex relative to font size of element (except for
                         font-size, which is relative to parent).                    
                </comment>
                <comment line="3292">
                    0 is the best weight WorstAdjustmentWeight is a worst one                    
                </comment>
                <comment line="3294">
                    float getAlignment();                    
                </comment>
                <declaration name="keys" type="Attribute[]" line="3039"/>
                <method name="parseShorthandBorder" type="void" line="3045">
                    <params>
                        <param name="attributes" type="MutableAttributeSet"/>
                        <param name="key" type="CSS.Attribute"/>
                        <param name="value" type="String"/>
                    </params>
                    <comment line="3062">
                        Part is non-parseable or occured more than once.                        
                    </comment>
                    <comment line="3067">
                        Unspecified parts get default values.                        
                    </comment>
                    <comment line="3074">
                        Dispatch collected values to individual properties.                        
                    </comment>
                    <declaration name="parts" type="Object[]" line="3046"/>
                    <declaration name="strings" type="String[]" line="3047"/>
                    <scope line="3048">
                        <declaration name="valid" type="boolean" line="3049"/>
                        <scope line="3050">
                            <declaration name="v" type="Object" line="3051"/>
                            <scope line="3052">
                                <scope line="3053"/>
                            </scope>
                        </scope>
                        <scope line="3060"/>
                    </scope>
                    <scope line="3067">
                        <scope line="3068"/>
                    </scope>
                    <scope line="3074">
                        <scope line="3075">
                            <scope line="3076"/>
                        </scope>
                    </scope>
                </method>
            </class>
            <javadoc line="3085">
                Calculate the requirements needed to tile the requirements
                  given by the iterator that would be tiled.  The calculation
                  takes into consideration margin and border spacing.                
            </javadoc>
            <method name="calculateTiledRequirements" type="SizeRequirements" line="3090">
                <params>
                    <param name="iter" type="LayoutIterator"/>
                    <param name="r" type="SizeRequirements"/>
                </params>
                <comment line="3112">
                    adjust for the spacing area                    
                </comment>
                <comment line="3117">
                    set return value                    
                </comment>
                <declaration name="minimum" type="long" line="3091"/>
                <declaration name="maximum" type="long" line="3092"/>
                <declaration name="preferred" type="long" line="3093"/>
                <declaration name="lastMargin" type="int" line="3094"/>
                <declaration name="totalSpacing" type="int" line="3095"/>
                <declaration name="n" type="int" line="3096"/>
                <scope line="3097">
                    <declaration name="margin0" type="int" line="3099"/>
                    <declaration name="margin1" type="int" line="3100"/>
                </scope>
                <scope line="3117"/>
            </method>
            <javadoc line="3126">
                Calculate a tiled layout for the given iterator.
                  This should be done collapsing the neighboring
                  margins to be a total of the maximum of the two
                  neighboring margin areas as described in the CSS spec.                
            </javadoc>
            <method name="calculateTiledLayout" type="void" line="3132">
                <params>
                    <param name="iter" type="LayoutIterator"/>
                    <param name="targetSpan" type="int"/>
                </params>
                <comment line="3135">
                    first pass, calculate the preferred sizes, adjustments needed because
                     of margin collapsing, and the flexibility to adjust the sizes.                    
                </comment>
                <comment line="3145">
                    max gain we can get adjusting elements with adjustmentWeight &lt;= i                    
                </comment>
                <comment line="3147">
                    max loss we can get adjusting elements with adjustmentWeight &lt;= i                    
                </comment>
                <comment line="3178">
                    Second pass, expand or contract by as much as possible to reach
                     the target span.  This takes the margin collapsing into account
                     prior to adjusting the span.                    
                </comment>
                <comment line="3184">
                    determine the adjustment to be made                    
                </comment>
                <comment line="3192">
                    adjustmentsArray[] is sorted. I do not bother about
                     binary search though                    
                </comment>
                <comment line="3211">
                    make the adjustments                    
                </comment>
                <comment line="3236">
                    while rounding we could lose several pixels.                    
                </comment>
                <comment line="3245">
                    check for infinite loop                    
                </comment>
                <comment line="3248">
                    try to distribute roundError. one pixel per cell                    
                </comment>
                <declaration name="preferred" type="long" line="3138"/>
                <declaration name="currentPreferred" type="long" line="3139"/>
                <declaration name="lastMargin" type="int" line="3140"/>
                <declaration name="totalSpacing" type="int" line="3141"/>
                <declaration name="n" type="int" line="3142"/>
                <declaration name="adjustmentWeightsCount" type="int" line="3143"/>
                <declaration name="gain" type="long" line="3145"/>
                <declaration name="loss" type="long" line="3147"/>
                <scope line="3149"/>
                <scope line="3152">
                    <declaration name="margin0" type="int" line="3154"/>
                    <declaration name="margin1" type="int" line="3155"/>
                </scope>
                <scope line="3172"/>
                <declaration name="allocated" type="int" line="3184"/>
                <declaration name="desiredAdjustment" type="long" line="3185"/>
                <declaration name="adjustmentsArray" type="long" line="3186"/>
                <declaration name="adjustmentLevel" type="int" line="3188"/>
                <scope line="3190">
                    <scope line="3193"/>
                </scope>
                <declaration name="adjustmentFactor" type="float" line="3197"/>
                <scope line="3198">
                    <scope line="3201">
                        <declaration name="maximumAdjustment" type="float" line="3202"/>
                    </scope>
                </scope>
                <declaration name="totalOffset" type="int" line="3211"/>
                <scope line="3212">
                    <scope line="3215"/>
                    <scope line="3222">
                        <declaration name="availableSpan" type="int" line="3223"/>
                        <declaration name="adj" type="int" line="3226"/>
                    </scope>
                </scope>
                <declaration name="roundError" type="int" line="3236"/>
                <declaration name="adj" type="int" line="3239"/>
                <declaration name="canAdjust" type="boolean" line="3242"/>
                <scope line="3243">
                    <declaration name="offsetAdjust" type="int" line="3246"/>
                    <scope line="3248">
                        <declaration name="curSpan" type="int" line="3251"/>
                        <scope line="3252">
                            <declaration name="boundGap" type="int" line="3253"/>
                            <scope line="3256"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <interface name="LayoutIterator">
                <comment line="315">
                    made up css attributes to describe orientation depended
                     margins. used for &lt;dir&gt;, &lt;menu&gt;, &lt;ul&gt; etc. see
                     5088268 for more details                    
                </comment>
                <comment line="379">
                                        
                </comment>
                <comment line="382">
                                        
                </comment>
                <comment line="385">
                    All possible CSS attribute keys.                    
                </comment>
                <comment line="449">
                    Lists.                    
                </comment>
                <comment line="458">
                    background-repeat                    
                </comment>
                <comment line="463">
                    background-attachment                    
                </comment>
                <comment line="1757">
                    Used by ViewAttributeSet                    
                </comment>
                <comment line="2224">
                    CSS.Values are static, don&apos;t archive it.                    
                </comment>
                <comment line="2430">
                    bitmask: bit 0, horizontal relative, bit 1 horizontal relative to
                     font size, 2 vertical relative to size, 3 vertical relative to
                     font size.                    
                </comment>
                <comment line="2586">
                    PENDING: this base is wrong for linked style sheets.                    
                </comment>
                <comment line="2727">
                    0 - value indicates real value
                     1 - % value, value relative to depends upon key.
                         50% will have a value = .5
                     2 - add value to parent value.
                     3 - em/ex relative to font size of element (except for
                         font-size, which is relative to parent).                    
                </comment>
                <comment line="3292">
                    0 is the best weight WorstAdjustmentWeight is a worst one                    
                </comment>
                <comment line="3294">
                    float getAlignment();                    
                </comment>
                <javadoc line="3267">
                    An iterator to express the requirements to use when computing
                      layout.                    
                </javadoc>
                <method name="setOffset" type="void" line="3273"/>
                <method name="getOffset" type="int" line="3275"/>
                <method name="setSpan" type="void" line="3277"/>
                <method name="getSpan" type="int" line="3279"/>
                <method name="getCount" type="int" line="3281"/>
                <method name="setIndex" type="void" line="3283"/>
                <method name="getMinimumSpan" type="float" line="3285"/>
                <method name="getPreferredSpan" type="float" line="3287"/>
                <method name="getMaximumSpan" type="float" line="3289"/>
                <method name="getAdjustmentWeight" type="int" line="3291"/>
                <method name="getBorderWidth" type="float" line="3295"/>
                <method name="getLeadingCollapseSpan" type="float" line="3297"/>
                <method name="getTrailingCollapseSpan" type="float" line="3299"/>
                <declaration name="WorstAdjustmentWeight" type="int" line="3300"/>
            </interface>
            <method name="writeObject" type="void" line="3309">
                <params>
                    <param name="s" type="java.io.ObjectOutputStream"/>
                </params>
                <comment line="3313">
                    Determine what values in valueConvertor need to be written out.                    
                </comment>
                <comment line="3322">
                    Should we throw an exception here?                    
                </comment>
                <comment line="3328">
                    Should we throw an exception here?                    
                </comment>
                <declaration name="keys" type="Enumeration" line="3313"/>
                <scope line="3315">
                    <scope line="3316">
                        <declaration name="key" type="Object" line="3317"/>
                        <declaration name="value" type="Object" line="3318"/>
                        <scope line="3320"/>
                        <scope line="3326"/>
                    </scope>
                </scope>
            </method>
            <method name="readObject" type="void" line="3339">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
                <comment line="3342">
                    Reconstruct the hashtable.                    
                </comment>
                <declaration name="numValues" type="int" line="3342"/>
                <scope line="3344">
                    <declaration name="key" type="Object" line="3345"/>
                    <declaration name="value" type="Object" line="3346"/>
                    <declaration name="staticKey" type="Object" line="3347"/>
                    <scope line="3348"/>
                    <declaration name="staticValue" type="Object" line="3351"/>
                    <scope line="3352"/>
                    <scope line="3355"/>
                </scope>
            </method>
            <method name="getStyleSheet" type="StyleSheet" line="3373">
                <params>
                    <param name="ss" type="StyleSheet"/>
                </params>
                <scope line="3374"/>
            </method>
            <declaration name="valueConvertor" type="Hashtable&lt;Object,Object&gt;" line="3383"/>
            <javadoc line="3383">
                Maps from CSS key to CssValue.                
            </javadoc>
            <declaration name="baseFontSize" type="int" line="3386"/>
            <javadoc line="3386">
                Size used for relative units.                
            </javadoc>
            <declaration name="styleSheet" type="StyleSheet" line="3389"/>
            <declaration name="baseFontSizeIndex" type="int" line="3391"/>
        </class>
    </source>