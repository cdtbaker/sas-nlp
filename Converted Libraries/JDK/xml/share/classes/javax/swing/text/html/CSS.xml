<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text.html">
        <import package="java.awt.Color"/>
        <import package="java.awt.Font"/>
        <import package="java.awt.GraphicsEnvironment"/>
        <import package="java.awt.Toolkit"/>
        <import package="java.awt.HeadlessException"/>
        <import package="java.awt.Image"/>
        <import package="java.io"/>
        <import package="java.lang.reflect.Method"/>
        <import package="java.net.URL"/>
        <import package="java.net.MalformedURLException"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.Vector"/>
        <import package="java.util.Locale"/>
        <import package="javax.swing.ImageIcon"/>
        <import package="javax.swing.SizeRequirements"/>
        <import package="javax.swing.text"/>
        <class name="CSS" line="19">
            <implements interface="Serializable"/>
            <javadoc line="19">
                Defines a set of
                  &lt;a href=&quot;http://www.w3.org/TR/REC-CSS1&quot;&gt;CSS attributes&lt;/a&gt;
                  as a typesafe enumeration.  The HTML View implementations use
                  CSS attributes to determine how they will render. This also defines
                  methods to map between CSS/HTML/StyleConstants. Any shorthand
                  properties, such as font, are mapped to the intrinsic properties.
                  &lt;p&gt;The following describes the CSS properties that are suppored by the
                  rendering engine:
                  &lt;ul&gt;&lt;li&gt;font-family
                  &lt;li&gt;font-style
                  &lt;li&gt;font-size (supports relative units)
                  &lt;li&gt;font-weight
                  &lt;li&gt;font
                  &lt;li&gt;color
                  &lt;li&gt;background-color (with the exception of transparent)
                  &lt;li&gt;background-image
                  &lt;li&gt;background-repeat
                  &lt;li&gt;background-position
                  &lt;li&gt;background
                  &lt;li&gt;text-decoration (with the exception of blink and overline)
                  &lt;li&gt;vertical-align (only sup and super)
                  &lt;li&gt;text-align (justify is treated as center)
                  &lt;li&gt;margin-top
                  &lt;li&gt;margin-right
                  &lt;li&gt;margin-bottom
                  &lt;li&gt;margin-left
                  &lt;li&gt;margin
                  &lt;li&gt;padding-top
                  &lt;li&gt;padding-right
                  &lt;li&gt;padding-bottom
                  &lt;li&gt;padding-left
                  &lt;li&gt;padding
                  &lt;li&gt;border-top-style
                  &lt;li&gt;border-right-style
                  &lt;li&gt;border-bottom-style
                  &lt;li&gt;border-left-style
                  &lt;li&gt;border-style (only supports inset, outset and none)
                  &lt;li&gt;border-top-color
                  &lt;li&gt;border-right-color
                  &lt;li&gt;border-bottom-color
                  &lt;li&gt;border-left-color
                  &lt;li&gt;border-color
                  &lt;li&gt;list-style-image
                  &lt;li&gt;list-style-type
                  &lt;li&gt;list-style-position
                  &lt;/ul&gt;
                  The following are modeled, but currently not rendered.
                  &lt;ul&gt;&lt;li&gt;font-variant
                  &lt;li&gt;background-attachment (background always treated as scroll)
                  &lt;li&gt;word-spacing
                  &lt;li&gt;letter-spacing
                  &lt;li&gt;text-indent
                  &lt;li&gt;text-transform
                  &lt;li&gt;line-height
                  &lt;li&gt;border-top-width (this is used to indicate if a border should be used)
                  &lt;li&gt;border-right-width
                  &lt;li&gt;border-bottom-width
                  &lt;li&gt;border-left-width
                  &lt;li&gt;border-width
                  &lt;li&gt;border-top
                  &lt;li&gt;border-right
                  &lt;li&gt;border-bottom
                  &lt;li&gt;border-left
                  &lt;li&gt;border
                  &lt;li&gt;width
                  &lt;li&gt;height
                  &lt;li&gt;float
                  &lt;li&gt;clear
                  &lt;li&gt;display
                  &lt;li&gt;white-space
                  &lt;li&gt;list-style
                  &lt;/ul&gt;
                  &lt;p&gt;&lt;b&gt;Note: for the time being we do not fully support relative units,
                  unless noted, so that
                  p { margin-top: 10% } will be treated as if no margin-top was specified.                
                <author>
                    Timothy Prinzing                    
                </author>
                <author>
                    Scott Violet                    
                </author>
                <see>
                    StyleSheet                    
                </see>
            </javadoc>
            <class name="Attribute" line="100">
                <javadoc line="100">
                    Definitions to be used as a key on AttributeSet&apos;s
                      that might hold CSS attributes.  Since this is a
                      closed set (i.e. defined exactly by the specification),
                      it is final and cannot be extended.                    
                </javadoc>
                <method name="Attribute" type="constructor" line="107">
                    <params>
                        <param name="name" type="String"/>
                        <param name="defaultValue" type="String"/>
                        <param name="inherited" type="boolean"/>
                    </params>
                </method>
                <javadoc line="112">
                    The string representation of the attribute.  This
                      should exactly match the string specified in the
                      CSS specification.                    
                </javadoc>
                <method name="toString" type="String" line="117"/>
                <javadoc line="120">
                    Fetch the default value for the attribute.
                      If there is no default value (such as for
                      composite attributes), null will be returned.                    
                </javadoc>
                <method name="getDefaultValue" type="String" line="125"/>
                <javadoc line="128">
                    Indicates if the attribute should be inherited
                      from the parent or not.                    
                </javadoc>
                <method name="isInherited" type="boolean" line="132"/>
                <declaration name="name" type="String" line="135"/>
                <declaration name="defaultValue" type="String" line="136"/>
                <declaration name="inherited" type="boolean" line="137"/>
                <declaration name="BACKGROUND" type="Attribute" line="138"/>
                <declaration name="BACKGROUND_ATTACHMENT" type="Attribute" line="139"/>
                <declaration name="BACKGROUND_COLOR" type="Attribute" line="140"/>
                <declaration name="BACKGROUND_IMAGE" type="Attribute" line="141"/>
                <declaration name="BACKGROUND_POSITION" type="Attribute" line="142"/>
                <declaration name="BACKGROUND_REPEAT" type="Attribute" line="143"/>
                <declaration name="BORDER" type="Attribute" line="144"/>
                <declaration name="BORDER_BOTTOM" type="Attribute" line="145"/>
                <declaration name="BORDER_BOTTOM_COLOR" type="Attribute" line="146"/>
                <declaration name="BORDER_BOTTOM_STYLE" type="Attribute" line="147"/>
                <declaration name="BORDER_BOTTOM_WIDTH" type="Attribute" line="148"/>
                <declaration name="BORDER_COLOR" type="Attribute" line="149"/>
                <declaration name="BORDER_LEFT" type="Attribute" line="150"/>
                <declaration name="BORDER_LEFT_COLOR" type="Attribute" line="151"/>
                <declaration name="BORDER_LEFT_STYLE" type="Attribute" line="152"/>
                <declaration name="BORDER_LEFT_WIDTH" type="Attribute" line="153"/>
                <declaration name="BORDER_RIGHT" type="Attribute" line="154"/>
                <declaration name="BORDER_RIGHT_COLOR" type="Attribute" line="155"/>
                <declaration name="BORDER_RIGHT_STYLE" type="Attribute" line="156"/>
                <declaration name="BORDER_RIGHT_WIDTH" type="Attribute" line="157"/>
                <declaration name="BORDER_STYLE" type="Attribute" line="158"/>
                <declaration name="BORDER_TOP" type="Attribute" line="159"/>
                <declaration name="BORDER_TOP_COLOR" type="Attribute" line="160"/>
                <declaration name="BORDER_TOP_STYLE" type="Attribute" line="161"/>
                <declaration name="BORDER_TOP_WIDTH" type="Attribute" line="162"/>
                <declaration name="BORDER_WIDTH" type="Attribute" line="163"/>
                <declaration name="CLEAR" type="Attribute" line="164"/>
                <declaration name="COLOR" type="Attribute" line="165"/>
                <declaration name="DISPLAY" type="Attribute" line="166"/>
                <declaration name="FLOAT" type="Attribute" line="167"/>
                <declaration name="FONT" type="Attribute" line="168"/>
                <declaration name="FONT_FAMILY" type="Attribute" line="169"/>
                <declaration name="FONT_SIZE" type="Attribute" line="170"/>
                <declaration name="FONT_STYLE" type="Attribute" line="171"/>
                <declaration name="FONT_VARIANT" type="Attribute" line="172"/>
                <declaration name="FONT_WEIGHT" type="Attribute" line="173"/>
                <declaration name="HEIGHT" type="Attribute" line="174"/>
                <declaration name="LETTER_SPACING" type="Attribute" line="175"/>
                <declaration name="LINE_HEIGHT" type="Attribute" line="176"/>
                <declaration name="LIST_STYLE" type="Attribute" line="177"/>
                <declaration name="LIST_STYLE_IMAGE" type="Attribute" line="178"/>
                <declaration name="LIST_STYLE_POSITION" type="Attribute" line="179"/>
                <declaration name="LIST_STYLE_TYPE" type="Attribute" line="180"/>
                <declaration name="MARGIN" type="Attribute" line="181"/>
                <declaration name="MARGIN_BOTTOM" type="Attribute" line="182"/>
                <declaration name="MARGIN_LEFT" type="Attribute" line="183"/>
                <declaration name="MARGIN_RIGHT" type="Attribute" line="184"/>
                <declaration name="MARGIN_LEFT_LTR" type="Attribute" line="185"/>
                <declaration name="MARGIN_LEFT_RTL" type="Attribute" line="186"/>
                <declaration name="MARGIN_RIGHT_LTR" type="Attribute" line="187"/>
                <declaration name="MARGIN_RIGHT_RTL" type="Attribute" line="188"/>
                <declaration name="MARGIN_TOP" type="Attribute" line="189"/>
                <declaration name="PADDING" type="Attribute" line="190"/>
                <declaration name="PADDING_BOTTOM" type="Attribute" line="191"/>
                <declaration name="PADDING_LEFT" type="Attribute" line="192"/>
                <declaration name="PADDING_RIGHT" type="Attribute" line="193"/>
                <declaration name="PADDING_TOP" type="Attribute" line="194"/>
                <declaration name="TEXT_ALIGN" type="Attribute" line="195"/>
                <declaration name="TEXT_DECORATION" type="Attribute" line="196"/>
                <declaration name="TEXT_INDENT" type="Attribute" line="197"/>
                <declaration name="TEXT_TRANSFORM" type="Attribute" line="198"/>
                <declaration name="VERTICAL_ALIGN" type="Attribute" line="199"/>
                <declaration name="WORD_SPACING" type="Attribute" line="200"/>
                <declaration name="WHITE_SPACE" type="Attribute" line="201"/>
                <declaration name="WIDTH" type="Attribute" line="202"/>
                <declaration name="BORDER_SPACING" type="Attribute" line="203"/>
                <declaration name="CAPTION_SIDE" type="Attribute" line="204"/>
                <declaration name="allAttributes" type="Attribute[]" line="205"/>
                <declaration name="ALL_MARGINS" type="Attribute[]" line="206"/>
                <declaration name="ALL_PADDING" type="Attribute[]" line="207"/>
                <declaration name="ALL_BORDER_WIDTHS" type="Attribute[]" line="208"/>
                <declaration name="ALL_BORDER_STYLES" type="Attribute[]" line="209"/>
                <declaration name="ALL_BORDER_COLORS" type="Attribute[]" line="210"/>
            </class>
            <class name="Value" line="212">
                <method name="Value" type="constructor" line="213">
                    <params>
                        <param name="name" type="String"/>
                    </params>
                </method>
                <javadoc line="216">
                    The string representation of the attribute.  This
                      should exactly match the string specified in the
                      CSS specification.                    
                </javadoc>
                <method name="toString" type="String" line="221"/>
                <declaration name="INHERITED" type="Value" line="224"/>
                <declaration name="NONE" type="Value" line="225"/>
                <declaration name="HIDDEN" type="Value" line="226"/>
                <declaration name="DOTTED" type="Value" line="227"/>
                <declaration name="DASHED" type="Value" line="228"/>
                <declaration name="SOLID" type="Value" line="229"/>
                <declaration name="DOUBLE" type="Value" line="230"/>
                <declaration name="GROOVE" type="Value" line="231"/>
                <declaration name="RIDGE" type="Value" line="232"/>
                <declaration name="INSET" type="Value" line="233"/>
                <declaration name="OUTSET" type="Value" line="234"/>
                <declaration name="DISC" type="Value" line="235"/>
                <declaration name="CIRCLE" type="Value" line="236"/>
                <declaration name="SQUARE" type="Value" line="237"/>
                <declaration name="DECIMAL" type="Value" line="238"/>
                <declaration name="LOWER_ROMAN" type="Value" line="239"/>
                <declaration name="UPPER_ROMAN" type="Value" line="240"/>
                <declaration name="LOWER_ALPHA" type="Value" line="241"/>
                <declaration name="UPPER_ALPHA" type="Value" line="242"/>
                <declaration name="BACKGROUND_NO_REPEAT" type="Value" line="243"/>
                <declaration name="BACKGROUND_REPEAT" type="Value" line="244"/>
                <declaration name="BACKGROUND_REPEAT_X" type="Value" line="245"/>
                <declaration name="BACKGROUND_REPEAT_Y" type="Value" line="246"/>
                <declaration name="BACKGROUND_SCROLL" type="Value" line="247"/>
                <declaration name="BACKGROUND_FIXED" type="Value" line="248"/>
                <declaration name="name" type="String" line="249"/>
                <declaration name="allValues" type="Value[]" line="250"/>
            </class>
            <method name="CSS" type="constructor" line="252">
                <declaration name="bs" type="Object" line="258"/>
                <declaration name="cv" type="Object" line="263"/>
                <declaration name="lv" type="Object" line="270"/>
                <declaration name="bv" type="Object" line="283"/>
                <declaration name="nlv" type="Object" line="288"/>
                <declaration name="sv" type="Object" line="293"/>
                <declaration name="valueMapper" type="Object" line="298"/>
                <declaration name="generic" type="Object" line="304"/>
                <declaration name="n" type="int" line="305"/>
                <scope line="306">
                    <declaration name="key" type="CSS.Attribute" line="307"/>
                    <scope line="308"/>
                </scope>
            </method>
            <javadoc line="313">
                Sets the base font size. &lt;code&gt;sz&lt;/code&gt; is a CSS value, and is
                  not necessarily the point size. Use getPointSize to determine the
                  point size corresponding to &lt;code&gt;sz&lt;/code&gt;.                
            </javadoc>
            <method name="setBaseFontSize" type="void" line="318">
                <params>
                    <param name="sz" type="int"/>
                </params>
            </method>
            <javadoc line="323">
                Sets the base font size from the passed in string.                
            </javadoc>
            <method name="setBaseFontSize" type="void" line="326">
                <params>
                    <param name="size" type="String"/>
                </params>
                <declaration name="relSize" type="int" line="327"/>
                <scope line="328">
                    <scope line="329"/>
                    <scope line="333"/>
                    <scope line="337"/>
                </scope>
            </method>
            <javadoc line="342">
                Returns the base font size.                
            </javadoc>
            <method name="getBaseFontSize" type="int" line="345"/>
            <javadoc line="348">
                Parses the CSS property &lt;code&gt;key&lt;/code&gt; with value
                  &lt;code&gt;value&lt;/code&gt; placing the result in &lt;code&gt;att&lt;/code&gt;.                
            </javadoc>
            <method name="addInternalCSSValue" type="void" line="352">
                <params>
                    <param name="attr" type="MutableAttributeSet"/>
                    <param name="key" type="CSS.Attribute"/>
                    <param name="value" type="String"/>
                </params>
                <scope line="353"/>
                <scope line="356"/>
                <scope line="359"/>
                <scope line="362"/>
                <scope line="365"/>
                <scope line="368"/>
                <scope line="371"/>
                <scope line="374"/>
                <scope line="377">
                    <declaration name="iValue" type="Object" line="378"/>
                    <scope line="379"/>
                </scope>
            </method>
            <javadoc line="384">
                Gets the internal CSS representation of &lt;code&gt;value&lt;/code&gt; which is
                  a CSS value of the CSS attribute named &lt;code&gt;key&lt;/code&gt;. The receiver
                  should not modify &lt;code&gt;value&lt;/code&gt;, and the first &lt;code&gt;count&lt;/code&gt;
                  strings are valid.                
            </javadoc>
            <method name="getInternalCSSValue" type="Object" line="390">
                <params>
                    <param name="key" type="CSS.Attribute"/>
                    <param name="value" type="String"/>
                </params>
                <declaration name="conv" type="CssValue" line="391"/>
                <declaration name="r" type="Object" line="392"/>
            </method>
            <javadoc line="395">
                Maps from a StyleConstants to a CSS Attribute.                
            </javadoc>
            <method name="styleConstantsKeyToCSSKey" type="Attribute" line="398">
                <params>
                    <param name="sc" type="StyleConstants"/>
                </params>
            </method>
            <javadoc line="401">
                Maps from a StyleConstants value to a CSS value.                
            </javadoc>
            <method name="styleConstantsValueToCSSValue" type="Object" line="404">
                <params>
                    <param name="sc" type="StyleConstants"/>
                    <param name="styleValue" type="Object"/>
                </params>
                <declaration name="cssKey" type="Attribute" line="405"/>
                <scope line="406">
                    <declaration name="conv" type="CssValue" line="407"/>
                </scope>
            </method>
            <javadoc line="412">
                Converts the passed in CSS value to a StyleConstants value.
                  &lt;code&gt;key&lt;/code&gt; identifies the CSS attribute being mapped.                
            </javadoc>
            <method name="cssValueToStyleConstantsValue" type="Object" line="416">
                <params>
                    <param name="key" type="StyleConstants"/>
                    <param name="value" type="Object"/>
                </params>
                <scope line="417"/>
            </method>
            <javadoc line="422">
                Returns the font for the values in the passed in AttributeSet.
                  It is assumed the keys will be CSS.Attribute keys.
                  &lt;code&gt;sc&lt;/code&gt; is the StyleContext that will be messaged to get
                  the font once the size, name and style have been determined.                
            </javadoc>
            <method name="getFont" type="Font" line="428">
                <params>
                    <param name="sc" type="StyleContext"/>
                    <param name="a" type="AttributeSet"/>
                    <param name="defaultSize" type="int"/>
                    <param name="ss" type="StyleSheet"/>
                </params>
                <declaration name="size" type="int" line="430"/>
                <declaration name="vAlignV" type="StringValue" line="431"/>
                <scope line="432">
                    <declaration name="vAlign" type="String" line="433"/>
                    <scope line="434"/>
                </scope>
                <declaration name="familyValue" type="FontFamily" line="438"/>
                <declaration name="family" type="String" line="439"/>
                <declaration name="style" type="int" line="440"/>
                <declaration name="weightValue" type="FontWeight" line="441"/>
                <scope line="442"/>
                <declaration name="fs" type="Object" line="445"/>
                <scope line="446"/>
                <scope line="449"/>
                <declaration name="f" type="Font" line="452"/>
                <scope line="453"/>
            </method>
            <method name="getFontSize" type="int" line="459">
                <params>
                    <param name="attr" type="AttributeSet"/>
                    <param name="defaultSize" type="int"/>
                    <param name="ss" type="StyleSheet"/>
                </params>
                <declaration name="sizeValue" type="FontSize" line="460"/>
            </method>
            <javadoc line="463">
                Takes a set of attributes and turn it into a color
                  specification.  This might be used to specify things
                  like brighter, more hue, etc.
                  This will return null if there is no value for &lt;code&gt;key&lt;/code&gt;.                
                <param>
                    key CSS.Attribute identifying where color is stored.                    
                </param>
                <param>
                    a the set of attributes                    
                </param>
                <return>
                    the color                    
                </return>
            </javadoc>
            <method name="getColor" type="Color" line="472">
                <params>
                    <param name="a" type="AttributeSet"/>
                    <param name="key" type="CSS.Attribute"/>
                </params>
                <declaration name="cv" type="ColorValue" line="473"/>
                <scope line="474"/>
            </method>
            <javadoc line="479">
                Returns the size of a font from the passed in string.                
                <param>
                    size CSS string describing font size                    
                </param>
                <param>
                    baseFontSize size to use for relative units.                    
                </param>
            </javadoc>
            <method name="getPointSize" type="float" line="484">
                <params>
                    <param name="size" type="String"/>
                    <param name="ss" type="StyleSheet"/>
                </params>
                <declaration name="relSize" type="int" line="485"/>
                <scope line="487">
                    <scope line="488"/>
                    <scope line="492"/>
                    <scope line="496"/>
                </scope>
            </method>
            <javadoc line="503">
                Returns the length of the attribute in &lt;code&gt;a&lt;/code&gt; with
                  key &lt;code&gt;key&lt;/code&gt;.                
            </javadoc>
            <method name="getLength" type="float" line="507">
                <params>
                    <param name="a" type="AttributeSet"/>
                    <param name="key" type="CSS.Attribute"/>
                    <param name="ss" type="StyleSheet"/>
                </params>
                <declaration name="lv" type="LengthValue" line="509"/>
                <declaration name="isW3CLengthUnits" type="boolean" line="510"/>
                <declaration name="len" type="float" line="511"/>
            </method>
            <javadoc line="514">
                Convert a set of HTML attributes to an equivalent
                  set of CSS attributes.                
                <param>
                    htmlAttrSet AttributeSet containing the HTML attributes.                    
                </param>
                <return>
                    AttributeSet containing the corresponding CSS attributes.
                      The AttributeSet will be empty if there are no mapping
                      CSS attributes.                    
                </return>
            </javadoc>
            <method name="translateHTMLToCSS" type="AttributeSet" line="522">
                <params>
                    <param name="htmlAttrSet" type="AttributeSet"/>
                </params>
                <declaration name="cssAttrSet" type="MutableAttributeSet" line="523"/>
                <declaration name="elem" type="Element" line="524"/>
                <declaration name="tag" type="HTML.Tag" line="525"/>
                <scope line="526">
                    <declaration name="tableAttr" type="AttributeSet" line="527"/>
                    <declaration name="borderWidth" type="int" line="528"/>
                    <scope line="529"/>
                    <scope line="532"/>
                    <scope line="535"/>
                    <declaration name="pad" type="String" line="538"/>
                    <scope line="539">
                        <declaration name="v" type="LengthValue" line="540"/>
                    </scope>
                </scope>
                <scope line="548"/>
                <scope line="551"/>
                <scope line="554">
                    <declaration name="v" type="Object" line="555"/>
                    <scope line="556"/>
                    <scope line="560">
                        <scope line="562"/>
                    </scope>
                </scope>
            </method>
            <declaration name="attributeMap" type="Hashtable&lt;String,Attribute&gt;" line="569"/>
            <declaration name="valueMap" type="Hashtable&lt;String,Value&gt;" line="570"/>
            <declaration name="htmlAttrToCssAttrMap" type="Hashtable&lt;HTML.Attribute,CSS.Attribute[]&gt;" line="571"/>
            <javadoc line="571">
                The hashtable and the static initalization block below,
                  set up a mapping from well-known HTML attributes to
                  CSS attributes.  For the most part, there is a 1-1 mapping
                  between the two.  However in the case of certain HTML
                  attributes for example HTML.Attribute.VSPACE or
                  HTML.Attribute.HSPACE, end up mapping to two CSS.Attribute&apos;s.
                  Therefore, the value associated with each HTML.Attribute.
                  key ends up being an array of CSS.Attribute. objects.                
            </javadoc>
            <declaration name="styleConstantToCssMap" type="Hashtable&lt;Object,Attribute&gt;" line="582"/>
            <javadoc line="582">
                The hashtable and static initialization that follows sets
                  up a translation from StyleConstants (i.e. the &lt;em&gt;well known&lt;/em&gt;
                  attributes) to the associated CSS attributes.                
            </javadoc>
            <declaration name="htmlValueToCssValueMap" type="Hashtable&lt;String,CSS.Value&gt;" line="588"/>
            <javadoc line="588">
                Maps from HTML value to a CSS value. Used in internal mapping.                
            </javadoc>
            <declaration name="cssValueToInternalValueMap" type="Hashtable&lt;String,CSS.Value&gt;" line="592"/>
            <javadoc line="592">
                Maps from CSS value (string) to internal value.                
            </javadoc>
            <scope line="596">
                <scope line="597"/>
                <scope line="600"/>
                <declaration name="keys" type="Object[]" line="662"/>
                <scope line="663">
                    <scope line="664"/>
                </scope>
                <scope line="668"/>
                <scope line="672">
                    <scope line="673"/>
                </scope>
                <scope line="677"/>
            </scope>
            <javadoc line="681">
                Return the set of all possible CSS attribute keys.                
            </javadoc>
            <method name="getAllAttributeKeys" type="Attribute[]" line="684">
                <declaration name="keys" type="Attribute[]" line="685"/>
            </method>
            <javadoc line="689">
                Translates a string to a &lt;code&gt;CSS.Attribute&lt;/code&gt; object.
                  This will return &lt;code&gt;null&lt;/code&gt; if there is no attribute
                  by the given name.                
                <param>
                    name the name of the CSS attribute to fetch the
                      typesafe enumeration for                    
                </param>
                <return>
                    the <code>CSS.Attribute</code> object,
                      or <code>null</code> if the string
                      doesn't represent a valid attribute key                    
                </return>
            </javadoc>
            <method name="getAttribute" type="Attribute" line="699">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="702">
                Translates a string to a &lt;code&gt;CSS.Value&lt;/code&gt; object.
                  This will return &lt;code&gt;null&lt;/code&gt; if there is no value
                  by the given name.                
                <param>
                    name the name of the CSS value to fetch the
                      typesafe enumeration for                    
                </param>
                <return>
                    the <code>CSS.Value</code> object,
                      or <code>null</code> if the string
                      doesn't represent a valid CSS value name; this does
                      not mean that it doesn't represent a valid CSS value                    
                </return>
            </javadoc>
            <method name="getValue" type="Value" line="713">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="716">
                Returns a URL for the given CSS url string. If relative,
                  &lt;code&gt;base&lt;/code&gt; is used as the parent. If a valid URL can not
                  be found, this will not throw a MalformedURLException, instead
                  null will be returned.                
            </javadoc>
            <method name="getURL" type="URL" line="722">
                <params>
                    <param name="base" type="URL"/>
                    <param name="cssString" type="String"/>
                </params>
                <scope line="723"/>
                <scope line="726"/>
                <scope line="729">
                    <declaration name="url" type="URL" line="730"/>
                    <scope line="731"/>
                </scope>
                <scope line="735"/>
                <scope line="737">
                    <scope line="738">
                        <declaration name="url" type="URL" line="739"/>
                    </scope>
                    <scope line="742"/>
                </scope>
            </method>
            <javadoc line="747">
                Converts a type Color to a hex string
                  in the format &quot;#RRGGBB&quot;                
            </javadoc>
            <method name="colorToHex" type="String" line="751">
                <params>
                    <param name="color" type="Color"/>
                </params>
                <declaration name="colorstr" type="String" line="752"/>
                <declaration name="str" type="String" line="753"/>
            </method>
            <javadoc line="767">
                Convert a &quot;#FFFFFF&quot; hex string to a Color.
                  If the color specification is bad, an attempt
                  will be made to fix it up.                
            </javadoc>
            <method name="hexToColor" type="Color" line="772">
                <params>
                    <param name="value" type="String"/>
                </params>
                <declaration name="digits" type="String" line="773"/>
                <declaration name="n" type="int" line="774"/>
                <scope line="775"/>
                <scope line="778"/>
                <declaration name="hstr" type="String" line="781"/>
                <declaration name="c" type="Color" line="782"/>
                <scope line="783"/>
                <scope line="786"/>
            </method>
            <javadoc line="791">
                Convert a color string such as &quot;RED&quot; or &quot;#NNNNNN&quot; or &quot;rgb(r, g, b)&quot;
                  to a Color.                
            </javadoc>
            <method name="stringToColor" type="Color" line="795">
                <params>
                    <param name="str" type="String"/>
                </params>
                <declaration name="color" type="Color" line="796"/>
                <scope line="797"/>
                <scope line="801"/>
            </method>
            <javadoc line="825">
                Parses a String in the format &lt;code&gt;rgb(r, g, b)&lt;/code&gt; where
                  each of the Color components is either an integer, or a floating number
                  with a % after indicating a percentage value of 255. Values are
                  constrained to fit with 0-255. The resulting Color is returned.                
            </javadoc>
            <method name="parseRGB" type="Color" line="831">
                <params>
                    <param name="string" type="String"/>
                </params>
                <declaration name="index" type="int[]" line="832"/>
                <declaration name="red" type="int" line="834"/>
                <declaration name="green" type="int" line="835"/>
                <declaration name="blue" type="int" line="836"/>
            </method>
            <javadoc line="839">
                Returns the next integer value from &lt;code&gt;string&lt;/code&gt; starting
                  at &lt;code&gt;index[0]&lt;/code&gt;. The value can either can an integer, or
                  a percentage (floating number ending with %), in which case it is
                  multiplied by 255.                
            </javadoc>
            <method name="getColorComponent" type="int" line="845">
                <params>
                    <param name="string" type="String"/>
                    <param name="index" type="int[]"/>
                </params>
                <declaration name="length" type="int" line="846"/>
                <declaration name="aChar" type="char" line="847"/>
                <scope line="848"/>
                <declaration name="start" type="int" line="851"/>
                <scope line="852"/>
                <scope line="855"/>
                <scope line="858">
                    <scope line="860"/>
                </scope>
                <scope line="864">
                    <scope line="865">
                        <declaration name="value" type="float" line="866"/>
                        <scope line="867"/>
                    </scope>
                    <scope line="873"/>
                </scope>
            </method>
            <method name="getIndexOfSize" type="int" line="878">
                <params>
                    <param name="pt" type="float"/>
                    <param name="sizeMap" type="int[]"/>
                </params>
            </method>
            <method name="getIndexOfSize" type="int" line="882">
                <params>
                    <param name="pt" type="float"/>
                    <param name="ss" type="StyleSheet"/>
                </params>
                <declaration name="sizeMap" type="int[]" line="883"/>
            </method>
            <javadoc line="886">
                @return an array of all the strings in &lt;code&gt;value&lt;/code&gt;
                  that are separated by whitespace.                
            </javadoc>
            <method name="parseStrings" type="String[]" line="890">
                <params>
                    <param name="value" type="String"/>
                </params>
                <declaration name="current" type="int" line="891"/>
                <declaration name="length" type="int" line="892"/>
                <declaration name="temp" type="Vector&lt;String&gt;" line="893"/>
                <scope line="895">
                    <scope line="896"/>
                    <scope line="900"/>
                    <scope line="903"/>
                </scope>
                <declaration name="retValue" type="String[]" line="908"/>
            </method>
            <javadoc line="912">
                Return the point size, given a size index. Legal HTML index sizes
                  are 1-7.                
            </javadoc>
            <method name="getPointSize" type="float" line="916">
                <params>
                    <param name="index" type="int"/>
                    <param name="ss" type="StyleSheet"/>
                </params>
                <declaration name="sizeMap" type="int[]" line="918"/>
            </method>
            <method name="translateEmbeddedAttributes" type="void" line="924">
                <params>
                    <param name="htmlAttrSet" type="AttributeSet"/>
                    <param name="cssAttrSet" type="MutableAttributeSet"/>
                </params>
                <declaration name="keys" type="Enumeration" line="925"/>
                <scope line="926"/>
                <scope line="929">
                    <declaration name="key" type="Object" line="930"/>
                    <scope line="931">
                        <declaration name="tag" type="HTML.Tag" line="932"/>
                        <declaration name="o" type="Object" line="933"/>
                        <scope line="934"/>
                    </scope>
                    <scope line="938"/>
                </scope>
            </method>
            <method name="translateAttributes" type="void" line="943">
                <params>
                    <param name="tag" type="HTML.Tag"/>
                    <param name="htmlAttrSet" type="AttributeSet"/>
                    <param name="cssAttrSet" type="MutableAttributeSet"/>
                </params>
                <declaration name="names" type="Enumeration" line="944"/>
                <scope line="945">
                    <declaration name="name" type="Object" line="946"/>
                    <scope line="947">
                        <declaration name="key" type="HTML.Attribute" line="948"/>
                        <scope line="949">
                            <declaration name="htmlAttrValue" type="String" line="950"/>
                            <scope line="951">
                                <declaration name="cssAttr" type="CSS.Attribute" line="952"/>
                                <scope line="953">
                                    <declaration name="o" type="Object" line="954"/>
                                    <scope line="955"/>
                                </scope>
                            </scope>
                        </scope>
                        <scope line="961">
                            <scope line="962"/>
                        </scope>
                    </scope>
                    <scope line="968"/>
                </scope>
            </method>
            <method name="translateAttribute" type="void" line="973">
                <params>
                    <param name="key" type="HTML.Attribute"/>
                    <param name="htmlAttrSet" type="AttributeSet"/>
                    <param name="cssAttrSet" type="MutableAttributeSet"/>
                </params>
                <declaration name="cssAttrList" type="CSS.Attribute[]" line="974"/>
                <declaration name="htmlAttrValue" type="String" line="975"/>
                <scope line="976"/>
                <scope line="979">
                    <declaration name="o" type="Object" line="980"/>
                    <scope line="981"/>
                </scope>
            </method>
            <javadoc line="986">
                Given a CSS.Attribute object and its corresponding HTML.Attribute&apos;s
                  value, this method returns a CssValue object to associate with the
                  CSS attribute.                
                <param>
                    the CSS.Attribute                    
                </param>
                <param>
                    a String containing the value associated HTML.Attribtue.                    
                </param>
            </javadoc>
            <method name="getCssValue" type="Object" line="993">
                <params>
                    <param name="cssAttr" type="CSS.Attribute"/>
                    <param name="htmlAttrValue" type="String"/>
                </params>
                <declaration name="value" type="CssValue" line="994"/>
                <declaration name="o" type="Object" line="995"/>
            </method>
            <javadoc line="998">
                Maps an HTML.Attribute object to its appropriate CSS.Attributes.                
                <param>
                    HTML.Attribute                    
                </param>
                <return>
                    CSS.Attribute[]                    
                </return>
            </javadoc>
            <method name="getCssAttribute" type="CSS.Attribute[]" line="1003">
                <params>
                    <param name="hAttr" type="HTML.Attribute"/>
                </params>
            </method>
            <javadoc line="1006">
                Maps HTML.Attribute.ALIGN to either:
                  CSS.Attribute.TEXT_ALIGN
                  CSS.Attribute.FLOAT
                  CSS.Attribute.VERTICAL_ALIGN
                  based on the tag associated with the attribute and the
                  value of the attribute.                
                <param>
                    AttributeSet containing HTML attributes.                    
                </param>
                <return>
                    CSS.Attribute mapping for HTML.Attribute.ALIGN.                    
                </return>
            </javadoc>
            <method name="getCssAlignAttribute" type="CSS.Attribute" line="1016">
                <params>
                    <param name="tag" type="HTML.Tag"/>
                    <param name="htmlAttrSet" type="AttributeSet"/>
                </params>
            </method>
            <javadoc line="1019">
                Fetches the tag associated with the HTML AttributeSet.                
                <param>
                    AttributeSet containing the HTML attributes.                    
                </param>
                <return>
                    HTML.Tag                    
                </return>
            </javadoc>
            <method name="getHTMLTag" type="HTML.Tag" line="1024">
                <params>
                    <param name="htmlAttrSet" type="AttributeSet"/>
                </params>
                <declaration name="o" type="Object" line="1025"/>
                <scope line="1026">
                    <declaration name="tag" type="HTML.Tag" line="1027"/>
                </scope>
            </method>
            <method name="isHTMLFontTag" type="boolean" line="1032">
                <params>
                    <param name="tag" type="HTML.Tag"/>
                </params>
            </method>
            <method name="isFloater" type="boolean" line="1035">
                <params>
                    <param name="alignValue" type="String"/>
                </params>
            </method>
            <method name="validTextAlignValue" type="boolean" line="1038">
                <params>
                    <param name="alignValue" type="String"/>
                </params>
            </method>
            <class name="CssValue" line="1041">
                <implements interface="Serializable"/>
                <javadoc line="1041">
                    Base class to CSS values in the attribute sets.  This
                      is intended to act as a convertor to/from other attribute
                      formats.
                      &lt;p&gt;
                      The CSS parser uses the parseCssValue method to convert
                      a string to whatever format is appropriate a given key
                      (i.e. these convertors are stored in a map using the
                      CSS.Attribute as a key and the CssValue as the value).
                      &lt;p&gt;
                      The HTML to CSS conversion process first converts the
                      HTML.Attribute to a CSS.Attribute, and then calls
                      the parseHtmlValue method on the value of the HTML
                      attribute to produce the corresponding CSS value.
                      &lt;p&gt;
                      The StyleConstants to CSS conversion process first
                      converts the StyleConstants attribute to a
                      CSS.Attribute, and then calls the fromStyleConstants
                      method to convert the StyleConstants value to a
                      CSS value.
                      &lt;p&gt;
                      The CSS to StyleConstants conversion process first
                      converts the StyleConstants attribute to a
                      CSS.Attribute, and then calls the toStyleConstants
                      method to convert the CSS value to a StyleConstants
                      value.                    
                </javadoc>
                <javadoc line="1069">
                    Convert a CSS value string to the internal format
                      (for fast processing) used in the attribute sets.
                      The fallback storage for any value that we don&apos;t
                      have a special binary format for is a String.                    
                </javadoc>
                <method name="parseCssValue" type="Object" line="1075">
                    <params>
                        <param name="value" type="String"/>
                    </params>
                </method>
                <javadoc line="1078">
                    Convert an HTML attribute value to a CSS attribute
                      value.  If there is no conversion, return null.
                      This is implemented to simply forward to the CSS
                      parsing by default (since some of the attribute
                      values are the same).  If the attribute value
                      isn&apos;t recognized as a CSS value it is generally
                      returned as null.                    
                </javadoc>
                <method name="parseHtmlValue" type="Object" line="1087">
                    <params>
                        <param name="value" type="String"/>
                    </params>
                </method>
                <javadoc line="1090">
                    Converts a &lt;code&gt;StyleConstants&lt;/code&gt; attribute value to
                      a CSS attribute value.  If there is no conversion,
                      returns &lt;code&gt;null&lt;/code&gt;.  By default, there is no conversion.                    
                    <param>
                        key the <code>StyleConstants</code> attribute                        
                    </param>
                    <param>
                        value the value of a <code>StyleConstants</code>
                          attribute to be converted                        
                    </param>
                    <return>
                        the CSS value that represents the
                          <code>StyleConstants</code> value                        
                    </return>
                </javadoc>
                <method name="fromStyleConstants" type="Object" line="1100">
                    <params>
                        <param name="key" type="StyleConstants"/>
                        <param name="value" type="Object"/>
                    </params>
                </method>
                <javadoc line="1103">
                    Converts a CSS attribute value to a
                      &lt;code&gt;StyleConstants&lt;/code&gt;
                      value.  If there is no conversion, returns
                      &lt;code&gt;null&lt;/code&gt;.
                      By default, there is no conversion.                    
                    <param>
                        key the <code>StyleConstants</code> attribute                        
                    </param>
                    <param>
                        v the view containing <code>AttributeSet</code>                        
                    </param>
                    <return>
                        the <code>StyleConstants</code> attribute value that
                          represents the CSS attribute value                        
                    </return>
                </javadoc>
                <method name="toStyleConstants" type="Object" line="1114">
                    <params>
                        <param name="key" type="StyleConstants"/>
                        <param name="v" type="View"/>
                    </params>
                </method>
                <javadoc line="1117">
                    Return the CSS format of the value                    
                </javadoc>
                <method name="toString" type="String" line="1120"/>
                <declaration name="svalue" type="String" line="1123"/>
                <javadoc line="1123">
                    The value as a string... before conversion to a
                      binary format.                    
                </javadoc>
            </class>
            <class name="StringValue" line="1129">
                <extends class="CssValue"/>
                <javadoc line="1129">
                    By default CSS attributes are represented as simple
                      strings.  They also have no conversion to/from
                      StyleConstants by default. This class represents the
                      value as a string (via the superclass), but
                      provides StyleConstants conversion support for the
                      CSS attributes that are held as strings.                    
                </javadoc>
                <javadoc line="1138">
                    Convert a CSS value string to the internal format
                      (for fast processing) used in the attribute sets.
                      This produces a StringValue, so that it can be
                      used to convert from CSS to StyleConstants values.                    
                </javadoc>
                <method name="parseCssValue" type="Object" line="1144">
                    <params>
                        <param name="value" type="String"/>
                    </params>
                    <declaration name="sv" type="StringValue" line="1145"/>
                </method>
                <javadoc line="1149">
                    Converts a &lt;code&gt;StyleConstants&lt;/code&gt; attribute value to
                      a CSS attribute value.  If there is no conversion
                      returns &lt;code&gt;null&lt;/code&gt;.                    
                    <param>
                        key the <code>StyleConstants</code> attribute                        
                    </param>
                    <param>
                        value the value of a <code>StyleConstants</code>
                          attribute to be converted                        
                    </param>
                    <return>
                        the CSS value that represents the
                          <code>StyleConstants</code> value                        
                    </return>
                </javadoc>
                <method name="fromStyleConstants" type="Object" line="1159">
                    <params>
                        <param name="key" type="StyleConstants"/>
                        <param name="value" type="Object"/>
                    </params>
                    <scope line="1160">
                        <scope line="1161"/>
                    </scope>
                    <scope line="1166">
                        <scope line="1167"/>
                    </scope>
                    <scope line="1172">
                        <declaration name="align" type="int" line="1173"/>
                        <declaration name="ta" type="String" line="1174"/>
                    </scope>
                    <scope line="1193">
                        <scope line="1194"/>
                    </scope>
                    <scope line="1199">
                        <scope line="1200"/>
                    </scope>
                    <scope line="1205">
                        <scope line="1206"/>
                    </scope>
                </method>
                <javadoc line="1213">
                    Converts a CSS attribute value to a
                      &lt;code&gt;StyleConstants&lt;/code&gt; value.
                      If there is no conversion, returns &lt;code&gt;null&lt;/code&gt;.
                      By default, there is no conversion.                    
                    <param>
                        key the <code>StyleConstants</code> attribute                        
                    </param>
                    <return>
                        the <code>StyleConstants</code> attribute value that
                          represents the CSS attribute value                        
                    </return>
                </javadoc>
                <method name="toStyleConstants" type="Object" line="1222">
                    <params>
                        <param name="key" type="StyleConstants"/>
                        <param name="v" type="View"/>
                    </params>
                    <scope line="1223">
                        <scope line="1224"/>
                    </scope>
                    <scope line="1229">
                        <scope line="1230"/>
                    </scope>
                    <scope line="1235">
                        <scope line="1236"/>
                        <scope line="1239"/>
                        <scope line="1242"/>
                    </scope>
                    <scope line="1247">
                        <scope line="1248"/>
                    </scope>
                    <scope line="1253">
                        <scope line="1254"/>
                    </scope>
                    <scope line="1259">
                        <scope line="1260"/>
                    </scope>
                </method>
                <method name="isItalic" type="boolean" line="1267"/>
                <method name="isStrike" type="boolean" line="1270"/>
                <method name="isUnderline" type="boolean" line="1273"/>
                <method name="isSub" type="boolean" line="1276"/>
                <method name="isSup" type="boolean" line="1279"/>
            </class>
            <class name="FontSize" line="1283">
                <extends class="CssValue"/>
                <javadoc line="1283">
                    Represents a value for the CSS.FONT_SIZE attribute.
                      The binary format of the value can be one of several
                      types.  If the type is Float,
                      the value is specified in terms of point or
                      percentage, depending upon the ending of the
                      associated string.
                      If the type is Integer, the value is specified
                      in terms of a size index.                    
                </javadoc>
                <javadoc line="1294">
                    Returns the size in points.  This is ultimately
                      what we need for the purpose of creating/fetching
                      a Font object.                    
                    <param>
                        a the attribute set the value is being
                          requested from.  We may need to walk up the
                          resolve hierarchy if it's relative.                        
                    </param>
                </javadoc>
                <method name="getValue" type="int" line="1302">
                    <params>
                        <param name="a" type="AttributeSet"/>
                        <param name="ss" type="StyleSheet"/>
                    </params>
                    <scope line="1304"/>
                    <scope line="1307"/>
                    <scope line="1310">
                        <scope line="1311">
                            <declaration name="isW3CLengthUnits" type="boolean" line="1312"/>
                        </scope>
                        <scope line="1315">
                            <declaration name="resolveParent" type="AttributeSet" line="1316"/>
                            <scope line="1317">
                                <declaration name="pValue" type="int" line="1318"/>
                                <declaration name="retValue" type="float" line="1319"/>
                                <scope line="1320"/>
                                <scope line="1323"/>
                            </scope>
                        </scope>
                    </scope>
                </method>
                <method name="parseCssValue" type="Object" line="1332">
                    <params>
                        <param name="value" type="String"/>
                    </params>
                    <declaration name="fs" type="FontSize" line="1333"/>
                    <scope line="1335">
                        <scope line="1336"/>
                        <scope line="1340"/>
                        <scope line="1344"/>
                        <scope line="1348"/>
                        <scope line="1352"/>
                        <scope line="1356"/>
                        <scope line="1360"/>
                        <scope line="1364"/>
                    </scope>
                    <scope line="1368"/>
                </method>
                <method name="parseHtmlValue" type="Object" line="1373">
                    <params>
                        <param name="value" type="String"/>
                    </params>
                    <scope line="1374"/>
                    <declaration name="fs" type="FontSize" line="1377"/>
                    <scope line="1379">
                        <declaration name="baseFontSize" type="int" line="1380"/>
                        <scope line="1381">
                            <declaration name="relSize" type="int" line="1382"/>
                        </scope>
                        <scope line="1386">
                            <declaration name="relSize" type="int" line="1387"/>
                        </scope>
                        <scope line="1391">
                            <scope line="1393"/>
                            <scope line="1396"/>
                        </scope>
                    </scope>
                    <scope line="1402"/>
                </method>
                <javadoc line="1407">
                    Converts a &lt;code&gt;StyleConstants&lt;/code&gt; attribute value to
                      a CSS attribute value.  If there is no conversion
                      returns &lt;code&gt;null&lt;/code&gt;.  By default, there is no conversion.                    
                    <param>
                        key the <code>StyleConstants</code> attribute                        
                    </param>
                    <param>
                        value the value of a <code>StyleConstants</code>
                          attribute to be converted                        
                    </param>
                    <return>
                        the CSS value that represents the
                          <code>StyleConstants</code> value                        
                    </return>
                </javadoc>
                <method name="fromStyleConstants" type="Object" line="1417">
                    <params>
                        <param name="key" type="StyleConstants"/>
                        <param name="value" type="Object"/>
                    </params>
                    <scope line="1418">
                        <declaration name="fs" type="FontSize" line="1419"/>
                    </scope>
                </method>
                <javadoc line="1427">
                    Converts a CSS attribute value to a &lt;code&gt;StyleConstants&lt;/code&gt;
                      value.  If there is no conversion, returns &lt;code&gt;null&lt;/code&gt;.
                      By default, there is no conversion.                    
                    <param>
                        key the <code>StyleConstants</code> attribute                        
                    </param>
                    <return>
                        the <code>StyleConstants</code> attribute value that
                          represents the CSS attribute value                        
                    </return>
                </javadoc>
                <method name="toStyleConstants" type="Object" line="1435">
                    <params>
                        <param name="key" type="StyleConstants"/>
                        <param name="v" type="View"/>
                    </params>
                    <scope line="1436"/>
                </method>
                <declaration name="value" type="float" line="1441"/>
                <declaration name="index" type="boolean" line="1442"/>
                <declaration name="lu" type="LengthUnit" line="1443"/>
            </class>
            <class name="FontFamily" line="1445">
                <extends class="CssValue"/>
                <javadoc line="1446">
                    Returns the font family to use.                    
                </javadoc>
                <method name="getValue" type="String" line="1449"/>
                <method name="parseCssValue" type="Object" line="1452">
                    <params>
                        <param name="value" type="String"/>
                    </params>
                    <declaration name="cIndex" type="int" line="1453"/>
                    <declaration name="ff" type="FontFamily" line="1454"/>
                    <scope line="1457"/>
                    <scope line="1460">
                        <declaration name="done" type="boolean" line="1461"/>
                        <declaration name="lastIndex" type="int" line="1462"/>
                        <declaration name="length" type="int" line="1463"/>
                        <scope line="1465">
                            <scope line="1469"/>
                            <scope line="1472">
                                <scope line="1473">
                                    <declaration name="lastCharIndex" type="int" line="1474"/>
                                    <scope line="1475"/>
                                </scope>
                            </scope>
                            <scope line="1483"/>
                        </scope>
                    </scope>
                    <scope line="1488"/>
                </method>
                <method name="setFontName" type="void" line="1493">
                    <params>
                        <param name="ff" type="FontFamily"/>
                        <param name="fontName" type="String"/>
                    </params>
                </method>
                <method name="parseHtmlValue" type="Object" line="1496">
                    <params>
                        <param name="value" type="String"/>
                    </params>
                </method>
                <javadoc line="1499">
                    Converts a &lt;code&gt;StyleConstants&lt;/code&gt; attribute value to
                      a CSS attribute value.  If there is no conversion
                      returns &lt;code&gt;null&lt;/code&gt;.  By default, there is no conversion.                    
                    <param>
                        key the <code>StyleConstants</code> attribute                        
                    </param>
                    <param>
                        value the value of a <code>StyleConstants</code>
                          attribute to be converted                        
                    </param>
                    <return>
                        the CSS value that represents the
                          <code>StyleConstants</code> value                        
                    </return>
                </javadoc>
                <method name="fromStyleConstants" type="Object" line="1509">
                    <params>
                        <param name="key" type="StyleConstants"/>
                        <param name="value" type="Object"/>
                    </params>
                </method>
                <javadoc line="1512">
                    Converts a CSS attribute value to a &lt;code&gt;StyleConstants&lt;/code&gt;
                      value.  If there is no conversion, returns &lt;code&gt;null&lt;/code&gt;.
                      By default, there is no conversion.                    
                    <param>
                        key the <code>StyleConstants</code> attribute                        
                    </param>
                    <return>
                        the <code>StyleConstants</code> attribute value that
                          represents the CSS attribute value                        
                    </return>
                </javadoc>
                <method name="toStyleConstants" type="Object" line="1520">
                    <params>
                        <param name="key" type="StyleConstants"/>
                        <param name="v" type="View"/>
                    </params>
                </method>
                <declaration name="family" type="String" line="1523"/>
            </class>
            <class name="FontWeight" line="1525">
                <extends class="CssValue"/>
                <method name="getValue" type="int" line="1526"/>
                <method name="parseCssValue" type="Object" line="1529">
                    <params>
                        <param name="value" type="String"/>
                    </params>
                    <declaration name="fw" type="FontWeight" line="1530"/>
                    <scope line="1532"/>
                    <scope line="1535"/>
                    <scope line="1538">
                        <scope line="1539"/>
                        <scope line="1542"/>
                    </scope>
                </method>
                <javadoc line="1548">
                    Converts a &lt;code&gt;StyleConstants&lt;/code&gt; attribute value to
                      a CSS attribute value.  If there is no conversion
                      returns &lt;code&gt;null&lt;/code&gt;.  By default, there is no conversion.                    
                    <param>
                        key the <code>StyleConstants</code> attribute                        
                    </param>
                    <param>
                        value the value of a <code>StyleConstants</code>
                          attribute to be converted                        
                    </param>
                    <return>
                        the CSS value that represents the
                          <code>StyleConstants</code> value                        
                    </return>
                </javadoc>
                <method name="fromStyleConstants" type="Object" line="1558">
                    <params>
                        <param name="key" type="StyleConstants"/>
                        <param name="value" type="Object"/>
                    </params>
                    <scope line="1559"/>
                </method>
                <javadoc line="1564">
                    Converts a CSS attribute value to a &lt;code&gt;StyleConstants&lt;/code&gt;
                      value.  If there is no conversion, returns &lt;code&gt;null&lt;/code&gt;.
                      By default, there is no conversion.                    
                    <param>
                        key the <code>StyleConstants</code> attribute                        
                    </param>
                    <return>
                        the <code>StyleConstants</code> attribute value that
                          represents the CSS attribute value                        
                    </return>
                </javadoc>
                <method name="toStyleConstants" type="Object" line="1572">
                    <params>
                        <param name="key" type="StyleConstants"/>
                        <param name="v" type="View"/>
                    </params>
                </method>
                <method name="isBold" type="boolean" line="1575"/>
                <declaration name="weight" type="int" line="1578"/>
            </class>
            <class name="ColorValue" line="1580">
                <extends class="CssValue"/>
                <javadoc line="1581">
                    Returns the color to use.                    
                </javadoc>
                <method name="getValue" type="Color" line="1584"/>
                <method name="parseCssValue" type="Object" line="1587">
                    <params>
                        <param name="value" type="String"/>
                    </params>
                    <declaration name="c" type="Color" line="1588"/>
                    <scope line="1589">
                        <declaration name="cv" type="ColorValue" line="1590"/>
                    </scope>
                </method>
                <method name="parseHtmlValue" type="Object" line="1597">
                    <params>
                        <param name="value" type="String"/>
                    </params>
                </method>
                <javadoc line="1600">
                    Converts a &lt;code&gt;StyleConstants&lt;/code&gt; attribute value to
                      a CSS attribute value.  If there is no conversion
                      returns &lt;code&gt;null&lt;/code&gt;.  By default, there is no conversion.                    
                    <param>
                        key the <code>StyleConstants</code> attribute                        
                    </param>
                    <param>
                        value the value of a <code>StyleConstants</code>
                          attribute to be converted                        
                    </param>
                    <return>
                        the CSS value that represents the
                          <code>StyleConstants</code> value                        
                    </return>
                </javadoc>
                <method name="fromStyleConstants" type="Object" line="1610">
                    <params>
                        <param name="key" type="StyleConstants"/>
                        <param name="value" type="Object"/>
                    </params>
                    <declaration name="colorValue" type="ColorValue" line="1611"/>
                </method>
                <javadoc line="1616">
                    Converts a CSS attribute value to a &lt;code&gt;StyleConstants&lt;/code&gt;
                      value.  If there is no conversion, returns &lt;code&gt;null&lt;/code&gt;.
                      By default, there is no conversion.                    
                    <param>
                        key the <code>StyleConstants</code> attribute                        
                    </param>
                    <return>
                        the <code>StyleConstants</code> attribute value that
                          represents the CSS attribute value                        
                    </return>
                </javadoc>
                <method name="toStyleConstants" type="Object" line="1624">
                    <params>
                        <param name="key" type="StyleConstants"/>
                        <param name="v" type="View"/>
                    </params>
                </method>
                <declaration name="c" type="Color" line="1627"/>
            </class>
            <class name="BorderStyle" line="1629">
                <extends class="CssValue"/>
                <method name="getValue" type="CSS.Value" line="1630"/>
                <method name="parseCssValue" type="Object" line="1633">
                    <params>
                        <param name="value" type="String"/>
                    </params>
                    <declaration name="cssv" type="CSS.Value" line="1634"/>
                    <scope line="1635">
                        <scope line="1636">
                            <declaration name="bs" type="BorderStyle" line="1637"/>
                        </scope>
                    </scope>
                </method>
                <method name="writeObject" type="void" line="1645">
                    <params>
                        <param name="s" type="java.io.ObjectOutputStream"/>
                    </params>
                    <scope line="1647"/>
                    <scope line="1650"/>
                </method>
                <method name="readObject" type="void" line="1654">
                    <params>
                        <param name="s" type="ObjectInputStream"/>
                    </params>
                    <declaration name="value" type="Object" line="1656"/>
                    <scope line="1657"/>
                </method>
                <declaration name="style" type="CSS.Value" line="1661"/>
            </class>
            <class name="LengthValue" line="1663">
                <extends class="CssValue"/>
                <declaration name="mayBeNegative" type="boolean" line="1664"/>
                <javadoc line="1664">
                    if this length value may be negative.                    
                </javadoc>
                <method name="LengthValue" type="constructor" line="1668"/>
                <method name="LengthValue" type="constructor" line="1671">
                    <params>
                        <param name="mayBeNegative" type="boolean"/>
                    </params>
                </method>
                <javadoc line="1674">
                    Returns the length (span) to use.                    
                </javadoc>
                <method name="getValue" type="float" line="1677"/>
                <method name="getValue" type="float" line="1680">
                    <params>
                        <param name="isW3CLengthUnits" type="boolean"/>
                    </params>
                </method>
                <javadoc line="1683">
                    Returns the length (span) to use. If the value represents
                      a percentage, it is scaled based on &lt;code&gt;currentValue&lt;/code&gt;.                    
                </javadoc>
                <method name="getValue" type="float" line="1687">
                    <params>
                        <param name="currentValue" type="float"/>
                    </params>
                </method>
                <method name="getValue" type="float" line="1690">
                    <params>
                        <param name="currentValue" type="float"/>
                        <param name="isW3CLengthUnits" type="boolean"/>
                    </params>
                    <scope line="1691"/>
                </method>
                <javadoc line="1696">
                    Returns true if the length represents a percentage of the
                      containing box.                    
                </javadoc>
                <method name="isPercentage" type="boolean" line="1700"/>
                <method name="parseCssValue" type="Object" line="1703">
                    <params>
                        <param name="value" type="String"/>
                    </params>
                    <declaration name="lv" type="LengthValue" line="1704"/>
                    <scope line="1705">
                        <declaration name="absolute" type="float" line="1706"/>
                    </scope>
                    <scope line="1710">
                        <declaration name="lu" type="LengthUnit" line="1711"/>
                    </scope>
                </method>
                <method name="parseHtmlValue" type="Object" line="1730">
                    <params>
                        <param name="value" type="String"/>
                    </params>
                    <scope line="1731"/>
                </method>
                <javadoc line="1736">
                    Converts a &lt;code&gt;StyleConstants&lt;/code&gt; attribute value to
                      a CSS attribute value.  If there is no conversion,
                      returns &lt;code&gt;null&lt;/code&gt;.  By default, there is no conversion.                    
                    <param>
                        key the <code>StyleConstants</code> attribute                        
                    </param>
                    <param>
                        value the value of a <code>StyleConstants</code>
                          attribute to be converted                        
                    </param>
                    <return>
                        the CSS value that represents the
                          <code>StyleConstants</code> value                        
                    </return>
                </javadoc>
                <method name="fromStyleConstants" type="Object" line="1746">
                    <params>
                        <param name="key" type="StyleConstants"/>
                        <param name="value" type="Object"/>
                    </params>
                    <declaration name="v" type="LengthValue" line="1747"/>
                </method>
                <javadoc line="1752">
                    Converts a CSS attribute value to a &lt;code&gt;StyleConstants&lt;/code&gt;
                      value.  If there is no conversion, returns &lt;code&gt;null&lt;/code&gt;.
                      By default, there is no conversion.                    
                    <param>
                        key the <code>StyleConstants</code> attribute                        
                    </param>
                    <return>
                        the <code>StyleConstants</code> attribute value that
                          represents the CSS attribute value                        
                    </return>
                </javadoc>
                <method name="toStyleConstants" type="Object" line="1760">
                    <params>
                        <param name="key" type="StyleConstants"/>
                        <param name="v" type="View"/>
                    </params>
                </method>
                <declaration name="percentage" type="boolean" line="1763"/>
                <javadoc line="1763">
                    If true, span is a percentage value, and that to determine
                      the length another value needs to be passed in.                    
                </javadoc>
                <declaration name="span" type="float" line="1768"/>
                <javadoc line="1768">
                    Either the absolute value (percentage == false) or
                      a percentage value.                    
                </javadoc>
                <declaration name="units" type="String" line="1773"/>
            </class>
            <class name="BorderWidthValue" line="1775">
                <extends class="LengthValue"/>
                <javadoc line="1775">
                    BorderWidthValue is used to model BORDER_XXX_WIDTH and adds support
                      for the thin/medium/thick values.                    
                </javadoc>
                <method name="BorderWidthValue" type="constructor" line="1780">
                    <params>
                        <param name="svalue" type="String"/>
                        <param name="index" type="int"/>
                    </params>
                </method>
                <method name="parseCssValue" type="Object" line="1785">
                    <params>
                        <param name="value" type="String"/>
                    </params>
                    <scope line="1786">
                        <scope line="1787"/>
                        <scope line="1790"/>
                        <scope line="1793"/>
                    </scope>
                </method>
                <method name="parseHtmlValue" type="Object" line="1799">
                    <params>
                        <param name="value" type="String"/>
                    </params>
                    <scope line="1800"/>
                </method>
                <declaration name="values" type="float[]" line="1805"/>
                <javadoc line="1805">
                    Values used to represent border width.                    
                </javadoc>
            </class>
            <class name="CssValueMapper" line="1810">
                <extends class="CssValue"/>
                <javadoc line="1810">
                    Handles uniquing of CSS values, like lists, and background image
                      repeating.                    
                </javadoc>
                <method name="parseCssValue" type="Object" line="1815">
                    <params>
                        <param name="value" type="String"/>
                    </params>
                    <declaration name="retValue" type="Object" line="1816"/>
                    <scope line="1817"/>
                </method>
                <method name="parseHtmlValue" type="Object" line="1822">
                    <params>
                        <param name="value" type="String"/>
                    </params>
                    <declaration name="retValue" type="Object" line="1823"/>
                    <scope line="1824"/>
                </method>
            </class>
            <class name="BackgroundPosition" line="1830">
                <extends class="CssValue"/>
                <javadoc line="1830">
                    Used for background images, to represent the position.                    
                </javadoc>
                <declaration name="horizontalPosition" type="float" line="1834"/>
                <declaration name="verticalPosition" type="float" line="1835"/>
                <declaration name="relative" type="short" line="1836"/>
                <method name="parseCssValue" type="Object" line="1837">
                    <params>
                        <param name="value" type="String"/>
                    </params>
                    <declaration name="strings" type="String[]" line="1838"/>
                    <declaration name="count" type="int" line="1839"/>
                    <declaration name="bp" type="BackgroundPosition" line="1840"/>
                    <scope line="1843">
                        <declaration name="found" type="short" line="1844"/>
                        <declaration name="index" type="int" line="1845"/>
                        <scope line="1846">
                            <declaration name="string" type="String" line="1847"/>
                            <scope line="1848"/>
                            <scope line="1852">
                                <scope line="1853">
                                    <scope line="1854"/>
                                    <scope line="1857"/>
                                </scope>
                                <scope line="1863">
                                    <scope line="1864"/>
                                    <scope line="1868"/>
                                </scope>
                            </scope>
                        </scope>
                        <scope line="1875">
                            <scope line="1876">
                                <scope line="1877"/>
                            </scope>
                            <scope line="1881"/>
                            <scope line="1884"/>
                        </scope>
                        <scope line="1888">
                            <declaration name="lu" type="LengthUnit" line="1889"/>
                            <scope line="1890"/>
                            <scope line="1894"/>
                            <scope line="1897"/>
                            <scope line="1901">
                                <scope line="1903"/>
                                <scope line="1907"/>
                                <scope line="1910"/>
                            </scope>
                            <scope line="1915"/>
                        </scope>
                    </scope>
                </method>
                <method name="isHorizontalPositionRelativeToSize" type="boolean" line="1922"/>
                <method name="isHorizontalPositionRelativeToFontSize" type="boolean" line="1925"/>
                <method name="getHorizontalPosition" type="float" line="1928"/>
                <method name="isVerticalPositionRelativeToSize" type="boolean" line="1931"/>
                <method name="isVerticalPositionRelativeToFontSize" type="boolean" line="1934"/>
                <method name="getVerticalPosition" type="float" line="1937"/>
            </class>
            <class name="BackgroundImage" line="1941">
                <extends class="CssValue"/>
                <javadoc line="1941">
                    Used for BackgroundImages.                    
                </javadoc>
                <declaration name="loadedImage" type="boolean" line="1945"/>
                <declaration name="image" type="ImageIcon" line="1946"/>
                <method name="parseCssValue" type="Object" line="1947">
                    <params>
                        <param name="value" type="String"/>
                    </params>
                    <declaration name="retValue" type="BackgroundImage" line="1948"/>
                </method>
                <method name="parseHtmlValue" type="Object" line="1952">
                    <params>
                        <param name="value" type="String"/>
                    </params>
                </method>
                <method name="getImage" type="ImageIcon" line="1955">
                    <params>
                        <param name="base" type="URL"/>
                    </params>
                    <scope line="1956">
                        <scope line="1957">
                            <scope line="1958">
                                <declaration name="url" type="URL" line="1959"/>
                                <scope line="1961">
                                    <declaration name="tmpImg" type="Image" line="1963"/>
                                    <scope line="1964"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </method>
            </class>
            <class name="LengthUnit" line="1974">
                <implements interface="Serializable"/>
                <javadoc line="1974">
                    Parses a length value, this is used internally, and never added
                      to an AttributeSet or returned to the developer.                    
                </javadoc>
                <declaration name="lengthMapping" type="Hashtable&lt;String,Float&gt;" line="1979"/>
                <declaration name="w3cLengthMapping" type="Hashtable&lt;String,Float&gt;" line="1980"/>
                <scope line="1981">
                    <declaration name="res" type="int" line="1988"/>
                    <scope line="1989"/>
                    <scope line="1992"/>
                </scope>
                <method name="LengthUnit" type="constructor" line="2001">
                    <params>
                        <param name="value" type="String"/>
                        <param name="defaultType" type="short"/>
                        <param name="defaultValue" type="float"/>
                    </params>
                </method>
                <method name="parse" type="void" line="2004">
                    <params>
                        <param name="value" type="String"/>
                        <param name="defaultType" type="short"/>
                        <param name="defaultValue" type="float"/>
                    </params>
                    <declaration name="length" type="int" line="2007"/>
                    <scope line="2008">
                        <scope line="2009"/>
                        <scope line="2013"/>
                    </scope>
                    <scope line="2016">
                        <declaration name="scale" type="Float" line="2018"/>
                        <scope line="2019">
                            <scope line="2020"/>
                            <scope line="2024"/>
                        </scope>
                        <scope line="2027">
                            <scope line="2028"/>
                            <scope line="2032"/>
                        </scope>
                        <scope line="2035"/>
                        <scope line="2039"/>
                        <scope line="2043">
                            <scope line="2044"/>
                            <scope line="2048"/>
                        </scope>
                    </scope>
                    <scope line="2052">
                        <scope line="2053"/>
                        <scope line="2057"/>
                    </scope>
                </method>
                <method name="getValue" type="float" line="2061">
                    <params>
                        <param name="w3cLengthUnits" type="boolean"/>
                    </params>
                    <declaration name="mapping" type="Hashtable&lt;String,Float&gt;" line="2062"/>
                    <declaration name="scale" type="float" line="2063"/>
                    <scope line="2064">
                        <declaration name="scaleFloat" type="Float" line="2065"/>
                        <scope line="2066"/>
                    </scope>
                </method>
                <method name="getValue" type="float" line="2072">
                    <params>
                        <param name="value" type="float"/>
                        <param name="units" type="String"/>
                        <param name="w3cLengthUnits" type="Boolean"/>
                    </params>
                    <declaration name="mapping" type="Hashtable&lt;String,Float&gt;" line="2073"/>
                    <declaration name="scale" type="float" line="2074"/>
                    <scope line="2075">
                        <declaration name="scaleFloat" type="Float" line="2076"/>
                        <scope line="2077"/>
                    </scope>
                </method>
                <method name="toString" type="String" line="2083"/>
                <declaration name="type" type="short" line="2086"/>
                <declaration name="value" type="float" line="2087"/>
                <declaration name="units" type="String" line="2088"/>
                <declaration name="UNINITALIZED_LENGTH" type="short" line="2089"/>
            </class>
            <class name="ShorthandFontParser" line="2091">
                <javadoc line="2091">
                    Class used to parse font property. The font property is shorthand
                      for the other font properties. This expands the properties, placing
                      them in the attributeset.                    
                </javadoc>
                <javadoc line="2097">
                    Parses the shorthand font string &lt;code&gt;value&lt;/code&gt;, placing the
                      result in &lt;code&gt;attr&lt;/code&gt;.                    
                </javadoc>
                <method name="parseShorthandFont" type="void" line="2101">
                    <params>
                        <param name="css" type="CSS"/>
                        <param name="value" type="String"/>
                        <param name="attr" type="MutableAttributeSet"/>
                    </params>
                    <declaration name="strings" type="String[]" line="2102"/>
                    <declaration name="count" type="int" line="2103"/>
                    <declaration name="index" type="int" line="2104"/>
                    <declaration name="found" type="short" line="2105"/>
                    <declaration name="maxC" type="int" line="2106"/>
                    <scope line="2107">
                        <scope line="2108"/>
                        <scope line="2112"/>
                        <scope line="2116"/>
                        <scope line="2120"/>
                        <scope line="2123"/>
                    </scope>
                    <scope line="2127"/>
                    <scope line="2130"/>
                    <scope line="2133"/>
                    <scope line="2136">
                        <declaration name="fontSize" type="String" line="2137"/>
                        <declaration name="slashIndex" type="int" line="2138"/>
                        <scope line="2139"/>
                        <scope line="2143"/>
                    </scope>
                    <scope line="2148"/>
                    <scope line="2151">
                        <declaration name="lineHeight" type="String" line="2152"/>
                        <scope line="2153">
                            <scope line="2154"/>
                        </scope>
                        <scope line="2158"/>
                        <scope line="2161"/>
                        <scope line="2164"/>
                    </scope>
                    <scope line="2168"/>
                    <scope line="2171">
                        <declaration name="family" type="String" line="2172"/>
                        <scope line="2173"/>
                    </scope>
                    <scope line="2178"/>
                </method>
                <method name="isFontStyle" type="boolean" line="2182">
                    <params>
                        <param name="string" type="String"/>
                    </params>
                </method>
                <method name="isFontVariant" type="boolean" line="2185">
                    <params>
                        <param name="string" type="String"/>
                    </params>
                </method>
                <method name="isFontWeight" type="boolean" line="2188">
                    <params>
                        <param name="string" type="String"/>
                    </params>
                    <scope line="2189"/>
                </method>
            </class>
            <class name="ShorthandBackgroundParser" line="2195">
                <javadoc line="2195">
                    Parses the background property into its intrinsic values.                    
                </javadoc>
                <javadoc line="2199">
                    Parses the shorthand font string &lt;code&gt;value&lt;/code&gt;, placing the
                      result in &lt;code&gt;attr&lt;/code&gt;.                    
                </javadoc>
                <method name="parseShorthandBackground" type="void" line="2203">
                    <params>
                        <param name="css" type="CSS"/>
                        <param name="value" type="String"/>
                        <param name="attr" type="MutableAttributeSet"/>
                    </params>
                    <declaration name="strings" type="String[]" line="2204"/>
                    <declaration name="count" type="int" line="2205"/>
                    <declaration name="index" type="int" line="2206"/>
                    <declaration name="found" type="short" line="2207"/>
                    <scope line="2208">
                        <declaration name="string" type="String" line="2209"/>
                        <scope line="2210"/>
                        <scope line="2214"/>
                        <scope line="2218"/>
                        <scope line="2222">
                            <scope line="2223"/>
                            <scope line="2226"/>
                        </scope>
                        <scope line="2231"/>
                    </scope>
                    <scope line="2236"/>
                    <scope line="2239"/>
                    <scope line="2242"/>
                    <scope line="2245"/>
                </method>
                <method name="isImage" type="boolean" line="2249">
                    <params>
                        <param name="string" type="String"/>
                    </params>
                </method>
                <method name="isRepeat" type="boolean" line="2252">
                    <params>
                        <param name="string" type="String"/>
                    </params>
                </method>
                <method name="isAttachment" type="boolean" line="2255">
                    <params>
                        <param name="string" type="String"/>
                    </params>
                </method>
                <method name="isPosition" type="boolean" line="2258">
                    <params>
                        <param name="string" type="String"/>
                    </params>
                </method>
                <method name="isColor" type="boolean" line="2261">
                    <params>
                        <param name="string" type="String"/>
                    </params>
                </method>
            </class>
            <class name="ShorthandMarginParser" line="2265">
                <javadoc line="2265">
                    Used to parser margin and padding.                    
                </javadoc>
                <javadoc line="2269">
                    Parses the shorthand margin/padding/border string
                      &lt;code&gt;value&lt;/code&gt;, placing the result in &lt;code&gt;attr&lt;/code&gt;.
                      &lt;code&gt;names&lt;/code&gt; give the 4 instrinsic property names.                    
                </javadoc>
                <method name="parseShorthandMargin" type="void" line="2274">
                    <params>
                        <param name="css" type="CSS"/>
                        <param name="value" type="String"/>
                        <param name="attr" type="MutableAttributeSet"/>
                        <param name="names" type="CSS.Attribute[]"/>
                    </params>
                    <declaration name="strings" type="String[]" line="2275"/>
                    <declaration name="count" type="int" line="2276"/>
                    <declaration name="index" type="int" line="2277"/>
                    <scope line="2282"/>
                    <scope line="2299"/>
                </method>
            </class>
            <class name="ShorthandBorderParser" line="2306">
                <declaration name="keys" type="Attribute[]" line="2307"/>
                <method name="parseShorthandBorder" type="void" line="2308">
                    <params>
                        <param name="attributes" type="MutableAttributeSet"/>
                        <param name="key" type="CSS.Attribute"/>
                        <param name="value" type="String"/>
                    </params>
                    <declaration name="parts" type="Object[]" line="2309"/>
                    <declaration name="strings" type="String[]" line="2310"/>
                    <scope line="2311">
                        <declaration name="valid" type="boolean" line="2312"/>
                        <scope line="2313">
                            <declaration name="v" type="Object" line="2314"/>
                            <scope line="2315">
                                <scope line="2316"/>
                            </scope>
                        </scope>
                        <scope line="2323"/>
                    </scope>
                    <scope line="2327">
                        <scope line="2328"/>
                    </scope>
                    <scope line="2332">
                        <scope line="2333">
                            <scope line="2334"/>
                        </scope>
                    </scope>
                </method>
            </class>
            <javadoc line="2341">
                Calculate the requirements needed to tile the requirements
                  given by the iterator that would be tiled.  The calculation
                  takes into consideration margin and border spacing.                
            </javadoc>
            <method name="calculateTiledRequirements" type="SizeRequirements" line="2346">
                <params>
                    <param name="iter" type="LayoutIterator"/>
                    <param name="r" type="SizeRequirements"/>
                </params>
                <declaration name="minimum" type="long" line="2347"/>
                <declaration name="maximum" type="long" line="2348"/>
                <declaration name="preferred" type="long" line="2349"/>
                <declaration name="lastMargin" type="int" line="2350"/>
                <declaration name="totalSpacing" type="int" line="2351"/>
                <declaration name="n" type="int" line="2352"/>
                <scope line="2353">
                    <declaration name="margin0" type="int" line="2355"/>
                    <declaration name="margin1" type="int" line="2356"/>
                </scope>
                <scope line="2368"/>
            </method>
            <javadoc line="2376">
                Calculate a tiled layout for the given iterator.
                  This should be done collapsing the neighboring
                  margins to be a total of the maximum of the two
                  neighboring margin areas as described in the CSS spec.                
            </javadoc>
            <method name="calculateTiledLayout" type="void" line="2382">
                <params>
                    <param name="iter" type="LayoutIterator"/>
                    <param name="targetSpan" type="int"/>
                </params>
                <declaration name="preferred" type="long" line="2383"/>
                <declaration name="currentPreferred" type="long" line="2384"/>
                <declaration name="lastMargin" type="int" line="2385"/>
                <declaration name="totalSpacing" type="int" line="2386"/>
                <declaration name="n" type="int" line="2387"/>
                <declaration name="adjustmentWeightsCount" type="int" line="2388"/>
                <declaration name="gain" type="long" line="2389"/>
                <declaration name="loss" type="long" line="2390"/>
                <scope line="2391"/>
                <scope line="2394">
                    <declaration name="margin0" type="int" line="2396"/>
                    <declaration name="margin1" type="int" line="2397"/>
                </scope>
                <scope line="2409"/>
                <declaration name="allocated" type="int" line="2413"/>
                <declaration name="desiredAdjustment" type="long" line="2414"/>
                <declaration name="adjustmentsArray" type="long" line="2415"/>
                <declaration name="adjustmentLevel" type="int" line="2417"/>
                <scope line="2418">
                    <scope line="2419"/>
                </scope>
                <declaration name="adjustmentFactor" type="float" line="2423"/>
                <scope line="2424">
                    <scope line="2426">
                        <declaration name="maximumAdjustment" type="float" line="2427"/>
                    </scope>
                </scope>
                <declaration name="totalOffset" type="int" line="2431"/>
                <scope line="2432">
                    <scope line="2435"/>
                    <scope line="2438">
                        <declaration name="availableSpan" type="int" line="2439"/>
                        <declaration name="adj" type="int" line="2440"/>
                    </scope>
                </scope>
                <declaration name="roundError" type="int" line="2445"/>
                <declaration name="adj" type="int" line="2446"/>
                <declaration name="canAdjust" type="boolean" line="2448"/>
                <scope line="2449">
                    <declaration name="offsetAdjust" type="int" line="2451"/>
                    <scope line="2452">
                        <declaration name="curSpan" type="int" line="2455"/>
                        <scope line="2456">
                            <declaration name="boundGap" type="int" line="2457"/>
                            <scope line="2458"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <interface name="LayoutIterator">
                <javadoc line="2468">
                    An iterator to express the requirements to use when computing
                      layout.                    
                </javadoc>
                <method name="setOffset" type="void" line="2473"/>
                <method name="getOffset" type="int" line="2474"/>
                <method name="setSpan" type="void" line="2475"/>
                <method name="getSpan" type="int" line="2476"/>
                <method name="getCount" type="int" line="2477"/>
                <method name="setIndex" type="void" line="2478"/>
                <method name="getMinimumSpan" type="float" line="2479"/>
                <method name="getPreferredSpan" type="float" line="2480"/>
                <method name="getMaximumSpan" type="float" line="2481"/>
                <method name="getAdjustmentWeight" type="int" line="2482"/>
                <method name="getBorderWidth" type="float" line="2483"/>
                <method name="getLeadingCollapseSpan" type="float" line="2484"/>
                <method name="getTrailingCollapseSpan" type="float" line="2485"/>
                <declaration name="WorstAdjustmentWeight" type="int" line="2486"/>
            </interface>
            <method name="writeObject" type="void" line="2488">
                <params>
                    <param name="s" type="java.io.ObjectOutputStream"/>
                </params>
                <declaration name="keys" type="Enumeration" line="2490"/>
                <scope line="2492">
                    <scope line="2493">
                        <declaration name="key" type="Object" line="2494"/>
                        <declaration name="value" type="Object" line="2495"/>
                        <scope line="2496"/>
                        <scope line="2500"/>
                    </scope>
                </scope>
            </method>
            <method name="readObject" type="void" line="2509">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
                <declaration name="numValues" type="int" line="2511"/>
                <scope line="2513">
                    <declaration name="key" type="Object" line="2514"/>
                    <declaration name="value" type="Object" line="2515"/>
                    <declaration name="staticKey" type="Object" line="2516"/>
                    <scope line="2517"/>
                    <declaration name="staticValue" type="Object" line="2520"/>
                    <scope line="2521"/>
                    <scope line="2524"/>
                </scope>
            </method>
            <method name="getStyleSheet" type="StyleSheet" line="2529">
                <params>
                    <param name="ss" type="StyleSheet"/>
                </params>
                <scope line="2530"/>
            </method>
            <declaration name="valueConvertor" type="Hashtable&lt;Object,Object&gt;" line="2535"/>
            <javadoc line="2535">
                Maps from CSS key to CssValue.                
            </javadoc>
            <declaration name="baseFontSize" type="int" line="2539"/>
            <javadoc line="2539">
                Size used for relative units.                
            </javadoc>
            <declaration name="styleSheet" type="StyleSheet" line="2543"/>
            <declaration name="baseFontSizeIndex" type="int" line="2544"/>
        </class>
    </source>