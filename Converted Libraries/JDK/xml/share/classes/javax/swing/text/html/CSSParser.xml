<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text.html">
        <import package="java.io"/>
        <class name="CSSParser" line="3">
            <javadoc line="3">
                A CSS parser. This works by way of a delegate that implements the
                  CSSParserCallback interface. The delegate is notified of the following
                  events:
                  &lt;ul&gt;
                  &lt;li&gt;Import statement: &lt;code&gt;handleImport&lt;/code&gt;
                  &lt;li&gt;Selectors &lt;code&gt;handleSelector&lt;/code&gt;. This is invoked for each
                  string. For example if the Reader contained p, bar , a {}, the delegate
                  would be notified 4 times, for &apos;p,&apos; &apos;bar&apos; &apos;,&apos; and &apos;a&apos;.
                  &lt;li&gt;When a rule starts, &lt;code&gt;startRule&lt;/code&gt;
                  &lt;li&gt;Properties in the rule via the &lt;code&gt;handleProperty&lt;/code&gt;. This
                  is invoked one per property/value key, eg font size: foo;, would
                  cause the delegate to be notified once with a value of &apos;font size&apos;.
                  &lt;li&gt;Values in the rule via the &lt;code&gt;handleValue&lt;/code&gt;, this is notified
                  for the total value.
                  &lt;li&gt;When a rule ends, &lt;code&gt;endRule&lt;/code&gt;
                  &lt;/ul&gt;
                  This will parse much more than CSS 1, and loosely implements the
                  recommendation for &lt;i&gt;Forward-compatible parsing&lt;/i&gt; in section
                  7.1 of the CSS spec found at:
                  &lt;a href=http://www.w3.org/TR/REC-CSS1&gt;http://www.w3.org/TR/REC-CSS1&lt;/a&gt;.
                  If an error results in parsing, a RuntimeException will be thrown.
                  &lt;p&gt;
                  This will preserve case. If the callback wishes to treat certain poritions
                  case insensitively (such as selectors), it should use toLowerCase, or
                  something similar.                
                <author>
                    Scott Violet                    
                </author>
            </javadoc>
            <declaration name="IDENTIFIER" type="int" line="32"/>
            <declaration name="BRACKET_OPEN" type="int" line="33"/>
            <declaration name="BRACKET_CLOSE" type="int" line="34"/>
            <declaration name="BRACE_OPEN" type="int" line="35"/>
            <declaration name="BRACE_CLOSE" type="int" line="36"/>
            <declaration name="PAREN_OPEN" type="int" line="37"/>
            <declaration name="PAREN_CLOSE" type="int" line="38"/>
            <declaration name="END" type="int" line="39"/>
            <declaration name="charMapping" type="char[]" line="40"/>
            <declaration name="didPushChar" type="boolean" line="41"/>
            <javadoc line="41">
                Set to true if one character has been read ahead.                
            </javadoc>
            <declaration name="pushedChar" type="int" line="45"/>
            <javadoc line="45">
                The read ahead character.                
            </javadoc>
            <declaration name="unitBuffer" type="StringBuffer" line="49"/>
            <javadoc line="49">
                Temporary place to hold identifiers.                
            </javadoc>
            <declaration name="unitStack" type="int[]" line="53"/>
            <javadoc line="53">
                Used to indicate blocks.                
            </javadoc>
            <declaration name="stackCount" type="int" line="57"/>
            <javadoc line="57">
                Number of valid blocks.                
            </javadoc>
            <declaration name="reader" type="Reader" line="61"/>
            <javadoc line="61">
                Holds the incoming CSS rules.                
            </javadoc>
            <declaration name="encounteredRuleSet" type="boolean" line="65"/>
            <javadoc line="65">
                Set to true when the first non @ rule is encountered.                
            </javadoc>
            <declaration name="callback" type="CSSParserCallback" line="69"/>
            <javadoc line="69">
                Notified of state.                
            </javadoc>
            <declaration name="tokenBuffer" type="char[]" line="73"/>
            <javadoc line="73">
                nextToken() inserts the string here.                
            </javadoc>
            <declaration name="tokenBufferLength" type="int" line="77"/>
            <javadoc line="77">
                Current number of chars in tokenBufferLength.                
            </javadoc>
            <declaration name="readWS" type="boolean" line="81"/>
            <javadoc line="81">
                Set to true if any whitespace is read.                
            </javadoc>
            <interface name="CSSParserCallback">
                <method name="handleImport" type="void" line="86"/>
                <javadoc line="86">
                    Called when an @import is encountered.                    
                </javadoc>
                <method name="handleSelector" type="void" line="90"/>
                <method name="startRule" type="void" line="91"/>
                <method name="handleProperty" type="void" line="92"/>
                <method name="handleValue" type="void" line="93"/>
                <method name="endRule" type="void" line="94"/>
            </interface>
            <method name="CSSParser" type="constructor" line="96"/>
            <method name="parse" type="void" line="101">
                <params>
                    <param name="reader" type="Reader"/>
                    <param name="callback" type="CSSParserCallback"/>
                    <param name="inRule" type="boolean"/>
                </params>
                <scope line="106">
                    <scope line="107"/>
                    <scope line="110"/>
                </scope>
                <scope line="114"/>
            </method>
            <javadoc line="119">
                Gets the next statement, returning false if the end is reached. A
                  statement is either an @rule, or a ruleset.                
            </javadoc>
            <method name="getNextStatement" type="boolean" line="123">
                <declaration name="token" type="int" line="125"/>
                <scope line="128">
                    <scope line="129"/>
                    <scope line="132"/>
                </scope>
            </method>
            <javadoc line="152">
                Parses an @ rule, stopping at a matching brace pair, or ;.                
            </javadoc>
            <method name="parseAtRule" type="void" line="155">
                <declaration name="done" type="boolean" line="156"/>
                <declaration name="isImport" type="boolean" line="157"/>
                <scope line="159">
                    <declaration name="nextToken" type="int" line="160"/>
                    <scope line="163"/>
                    <scope line="167">
                        <scope line="168"/>
                    </scope>
                    <scope line="175"/>
                    <scope line="181">
                        <declaration name="nextChar" type="int" line="182"/>
                        <scope line="183"/>
                    </scope>
                </scope>
                <scope line="202"/>
            </method>
            <javadoc line="206">
                Parses the next rule set, which is a selector followed by a
                  declaration block.                
            </javadoc>
            <method name="parseRuleSet" type="void" line="210">
                <scope line="211"/>
            </method>
            <javadoc line="217">
                Parses a set of selectors, returning false if the end of the stream
                  is reached.                
            </javadoc>
            <method name="parseSelectors" type="boolean" line="221">
                <declaration name="nextToken" type="int" line="222"/>
                <scope line="223"/>
                <scope line="227">
                    <scope line="228">
                        <scope line="229"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="250">
                Parses a declaration block. Which a number of declarations followed
                  by a })].                
            </javadoc>
            <method name="parseDeclarationBlock" type="void" line="254">
                <scope line="255">
                    <declaration name="token" type="int" line="256"/>
                </scope>
            </method>
            <javadoc line="269">
                Parses a single declaration, which is an identifier a : and another
                  identifier. This returns the last token seen.                
            </javadoc>
            <method name="parseDeclaration" type="int" line="273">
                <declaration name="token" type="int" line="274"/>
                <scope line="275"/>
                <scope line="278"/>
            </method>
            <javadoc line="286">
                Parses identifiers until &lt;code&gt;extraChar&lt;/code&gt; is encountered,
                  returning the ending token, which will be IDENTIFIER if extraChar
                  is found.                
            </javadoc>
            <method name="parseIdentifiers" type="int" line="291">
                <params>
                    <param name="extraChar" type="char"/>
                    <param name="wantsBlocks" type="boolean"/>
                </params>
                <declaration name="nextToken" type="int" line="292"/>
                <declaration name="ubl" type="int" line="293"/>
                <scope line="295">
                    <scope line="299">
                        <scope line="300">
                            <scope line="301">
                                <scope line="302"/>
                            </scope>
                        </scope>
                        <scope line="309"/>
                    </scope>
                    <scope line="319"/>
                    <scope line="323"/>
                </scope>
            </method>
            <javadoc line="335">
                Parses till a matching block close is encountered. This is only
                  appropriate to be called at the top level (no nesting).                
            </javadoc>
            <method name="parseTillClosed" type="void" line="339">
                <params>
                    <param name="openToken" type="int"/>
                </params>
                <declaration name="nextToken" type="int" line="340"/>
                <declaration name="done" type="boolean" line="341"/>
                <scope line="343">
                    <scope line="347"/>
                    <scope line="350"/>
                    <scope line="357"/>
                    <scope line="366"/>
                    <scope line="371"/>
                </scope>
            </method>
            <javadoc line="380">
                Fetches the next token.                
            </javadoc>
            <method name="nextToken" type="int" line="383">
                <params>
                    <param name="idChar" type="char"/>
                </params>
                <declaration name="nextChar" type="int" line="385"/>
                <scope line="389"/>
                <scope line="395"/>
            </method>
            <javadoc line="419">
                Gets an identifier, returning true if the length of the string is greater than 0,
                  stopping when &lt;code&gt;stopChar&lt;/code&gt;, whitespace, or one of {}()[] is
                  hit.                
            </javadoc>
            <method name="getIdentifier" type="boolean" line="424">
                <params>
                    <param name="stopChar" type="char"/>
                </params>
                <declaration name="lastWasEscape" type="boolean" line="425"/>
                <declaration name="done" type="boolean" line="426"/>
                <declaration name="escapeCount" type="int" line="427"/>
                <declaration name="escapeChar" type="int" line="428"/>
                <declaration name="nextChar" type="int" line="429"/>
                <declaration name="intStopChar" type="int" line="430"/>
                <declaration name="type" type="short" line="431"/>
                <declaration name="escapeOffset" type="int" line="432"/>
                <scope line="434">
                    <scope line="496">
                        <scope line="497">
                            <scope line="499"/>
                        </scope>
                        <scope line="504">
                            <scope line="506"/>
                            <scope line="510"/>
                        </scope>
                    </scope>
                    <scope line="515">
                        <scope line="516"/>
                        <scope line="520"/>
                        <scope line="524">
                            <scope line="526"/>
                            <scope line="531">
                                <scope line="533"/>
                                <scope line="536"/>
                            </scope>
                        </scope>
                        <scope line="541">
                            <scope line="543"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="551">
                Reads till a &lt;code&gt;stopChar&lt;/code&gt; is encountered, escaping characters
                  as necessary.                
            </javadoc>
            <method name="readTill" type="void" line="555">
                <params>
                    <param name="stopChar" type="char"/>
                </params>
                <declaration name="lastWasEscape" type="boolean" line="556"/>
                <declaration name="escapeCount" type="int" line="557"/>
                <declaration name="escapeChar" type="int" line="558"/>
                <declaration name="nextChar" type="int" line="559"/>
                <declaration name="done" type="boolean" line="560"/>
                <declaration name="intStopChar" type="int" line="561"/>
                <declaration name="type" type="short" line="562"/>
                <declaration name="escapeOffset" type="int" line="563"/>
                <scope line="565">
                    <scope line="608">
                        <scope line="609">
                            <scope line="611"/>
                        </scope>
                        <scope line="616">
                            <scope line="617">
                                <scope line="619"/>
                                <scope line="623">
                                    <scope line="624"/>
                                </scope>
                            </scope>
                            <scope line="631"/>
                        </scope>
                    </scope>
                    <scope line="637"/>
                    <scope line="641">
                        <scope line="642"/>
                    </scope>
                </scope>
            </method>
            <method name="append" type="void" line="649">
                <params>
                    <param name="character" type="char"/>
                </params>
                <scope line="650">
                    <declaration name="newBuffer" type="char[]" line="651"/>
                </scope>
            </method>
            <javadoc line="657">
                Parses a comment block.                
            </javadoc>
            <method name="readComment" type="void" line="660">
                <declaration name="nextChar" type="int" line="661"/>
                <scope line="662">
                    <scope line="669"/>
                    <scope line="672"/>
                    <scope line="675"/>
                </scope>
            </method>
            <javadoc line="684">
                Called when a block start is encountered ({[.                
            </javadoc>
            <method name="startBlock" type="void" line="687">
                <params>
                    <param name="startToken" type="int"/>
                </params>
                <scope line="688">
                    <declaration name="newUS" type="int[]" line="689"/>
                </scope>
            </method>
            <javadoc line="695">
                Called when an end block is encountered )]}                
            </javadoc>
            <method name="endBlock" type="void" line="698">
                <params>
                    <param name="endToken" type="int"/>
                </params>
                <declaration name="startToken" type="int" line="699"/>
                <scope line="714"/>
                <scope line="717"/>
            </method>
            <javadoc line="721">
                @return true if currently in a block.                
            </javadoc>
            <method name="inBlock" type="boolean" line="724"/>
            <javadoc line="727">
                Skips any white space, returning the character after the white space.                
            </javadoc>
            <method name="readWS" type="int" line="730">
                <declaration name="nextChar" type="int" line="731"/>
                <scope line="732"/>
            </method>
            <javadoc line="737">
                Reads a character from the stream.                
            </javadoc>
            <method name="readChar" type="int" line="740">
                <scope line="741"/>
            </method>
            <javadoc line="747">
                Supports one character look ahead, this will throw if called twice
                  in a row.                
            </javadoc>
            <method name="pushChar" type="void" line="751">
                <params>
                    <param name="tempChar" type="int"/>
                </params>
                <scope line="752"/>
            </method>
        </class>
    </source>