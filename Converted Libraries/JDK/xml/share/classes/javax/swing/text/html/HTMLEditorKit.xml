<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text.html">
        <import package="sun.awt.AppContext"/>
        <import package="java.lang.reflect.Method"/>
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="java.io"/>
        <import package="java.net.MalformedURLException"/>
        <import package="java.net.URL"/>
        <import package="javax.swing.text"/>
        <import package="javax.swing"/>
        <import package="javax.swing.border"/>
        <import package="javax.swing.event"/>
        <import package="javax.swing.plaf.TextUI"/>
        <import package="java.util"/>
        <import package="javax.accessibility"/>
        <import package="java.lang.ref"/>
        <class name="HTMLEditorKit" line="44">
            <extends class="StyledEditorKit"/>
            <comment line="603">
                ----- Accessibility support -----                
            </comment>
            <comment line="623">
                --- variables ------------------------------------------                
            </comment>
            <comment line="1373">
                --- Action implementations ------------------------------                
            </comment>
            <comment line="1474">
                link navigation support                
            </comment>
            <comment line="1856">
                Returns the object in an AttributeSet matching a key                
            </comment>
            <comment line="1876">
                Action to move the focus on the next or previous hypertext link
                 or object. TODO: This method relies on support from the
                 javax.accessibility package.  The text package should support
                 keyboard navigation of text elements directly.                
            </comment>
            <comment line="2085">
                Action to activate the hypertext link that has focus.
                 TODO: This method relies on support from the
                 javax.accessibility package.  The text package should support
                 keyboard navigation of text elements directly.                
            </comment>
            <comment line="2259">
                Move the caret to the beginning of the document.
                 @see DefaultEditorKit#beginAction
                 @see HTMLEditorKit#getActions                
            </comment>
            <implements interface="Accessible"/>
            <javadoc line="44">
                The Swing JEditorPane text component supports different kinds
                  of content via a plug-in mechanism called an EditorKit.  Because
                  HTML is a very popular format of content, some support is provided
                  by default.  The default support is provided by this class, which
                  supports HTML version 3.2 (with some extensions), and is migrating
                  toward version 4.0.
                  The &amp;lt;applet&amp;gt; tag is not supported, but some support is provided
                  for the &amp;lt;object&amp;gt; tag.
                  &lt;p&gt;
                  There are several goals of the HTML EditorKit provided, that have
                  an effect upon the way that HTML is modeled.  These
                  have influenced its design in a substantial way.
                  &lt;dl&gt;
                  &lt;p&gt;
                  &lt;dt&gt;
                  Support editing
                  &lt;dd&gt;
                  It might seem fairly obvious that a plug-in for JEditorPane
                  should provide editing support, but that fact has several
                  design considerations.  There are a substantial number of HTML
                  documents that don&apos;t properly conform to an HTML specification.
                  These must be normalized somewhat into a correct form if one
                  is to edit them.  Additionally, users don&apos;t like to be presented
                  with an excessive amount of structure editing, so using traditional
                  text editing gestures is preferred over using the HTML structure
                  exactly as defined in the HTML document.
                  &lt;p&gt;
                  The modeling of HTML is provided by the class &lt;code&gt;HTMLDocument&lt;/code&gt;.
                  Its documention describes the details of how the HTML is modeled.
                  The editing support leverages heavily off of the text package.
                  &lt;p&gt;
                  &lt;dt&gt;
                  Extendable/Scalable
                  &lt;dd&gt;
                  To maximize the usefulness of this kit, a great deal of effort
                  has gone into making it extendable.  These are some of the
                  features.
                  &lt;ol&gt;
                  &lt;li&gt;
                  The parser is replacable.  The default parser is the Hot Java
                  parser which is DTD based.  A different DTD can be used, or an
                  entirely different parser can be used.  To change the parser,
                  reimplement the getParser method.  The default parser is
                  dynamically loaded when first asked for, so the class files
                  will never be loaded if an alternative parser is used.  The
                  default parser is in a separate package called parser below
                  this package.
                  &lt;li&gt;
                  The parser drives the ParserCallback, which is provided by
                  HTMLDocument.  To change the callback, subclass HTMLDocument
                  and reimplement the createDefaultDocument method to return
                  document that produces a different reader.  The reader controls
                  how the document is structured.  Although the Document provides
                  HTML support by default, there is nothing preventing support of
                  non-HTML tags that result in alternative element structures.
                  &lt;li&gt;
                  The default view of the models are provided as a hierarchy of
                  View implementations, so one can easily customize how a particular
                  element is displayed or add capabilities for new kinds of elements
                  by providing new View implementations.  The default set of views
                  are provided by the &lt;code&gt;HTMLFactory&lt;/code&gt; class.  This can
                  be easily changed by subclassing or replacing the HTMLFactory
                  and reimplementing the getViewFactory method to return the alternative
                  factory.
                  &lt;li&gt;
                  The View implementations work primarily off of CSS attributes,
                  which are kept in the views.  This makes it possible to have
                  multiple views mapped over the same model that appear substantially
                  different.  This can be especially useful for printing.  For
                  most HTML attributes, the HTML attributes are converted to CSS
                  attributes for display.  This helps make the View implementations
                  more general purpose
                  &lt;/ol&gt;
                  &lt;p&gt;
                  &lt;dt&gt;
                  Asynchronous Loading
                  &lt;dd&gt;
                  Larger documents involve a lot of parsing and take some time
                  to load.  By default, this kit produces documents that will be
                  loaded asynchronously if loaded using &lt;code&gt;JEditorPane.setPage&lt;/code&gt;.
                  This is controlled by a property on the document.  The method{@link #createDefaultDocument createDefaultDocument} can
                  be overriden to change this.  The batching of work is done
                  by the &lt;code&gt;HTMLDocument.HTMLReader&lt;/code&gt; class.  The actual
                  work is done by the &lt;code&gt;DefaultStyledDocument&lt;/code&gt; and
                  &lt;code&gt;AbstractDocument&lt;/code&gt; classes in the text package.
                  &lt;p&gt;
                  &lt;dt&gt;
                  Customization from current LAF
                  &lt;dd&gt;
                  HTML provides a well known set of features without exactly
                  specifying the display characteristics.  Swing has a theme
                  mechanism for its look-and-feel implementations.  It is desirable
                  for the look-and-feel to feed display characteristics into the
                  HTML views.  An user with poor vision for example would want
                  high contrast and larger than typical fonts.
                  &lt;p&gt;
                  The support for this is provided by the &lt;code&gt;StyleSheet&lt;/code&gt;
                  class.  The presentation of the HTML can be heavily influenced
                  by the setting of the StyleSheet property on the EditorKit.
                  &lt;p&gt;
                  &lt;dt&gt;
                  Not lossy
                  &lt;dd&gt;
                  An EditorKit has the ability to be read and save documents.
                  It is generally the most pleasing to users if there is no loss
                  of data between the two operation.  The policy of the HTMLEditorKit
                  will be to store things not recognized or not necessarily visible
                  so they can be subsequently written out.  The model of the HTML document
                  should therefore contain all information discovered while reading the
                  document.  This is constrained in some ways by the need to support
                  editing (i.e. incorrect documents sometimes must be normalized).
                  The guiding principle is that information shouldn&apos;t be lost, but
                  some might be synthesized to produce a more correct model or it might
                  be rearranged.
                  &lt;/dl&gt;                
                <author>
                    Timothy Prinzing                    
                </author>
            </javadoc>
            <declaration name="theEditor" type="JEditorPane" line="166"/>
            <javadoc line="168">
                Constructs an HTMLEditorKit, creates a StyleContext,
                  and loads the style sheet.                
            </javadoc>
            <method name="HTMLEditorKit" type="constructor" line="172"/>
            <javadoc line="176">
                Get the MIME type of the data that this
                  kit represents support for.  This kit supports
                  the type &lt;code&gt;text/html&lt;/code&gt;.                
                <return>
                    the type                    
                </return>
            </javadoc>
            <method name="getContentType" type="String" line="183"/>
            <javadoc line="187">
                Fetch a factory that is suitable for producing
                  views of any models that are produced by this
                  kit.                
                <return>
                    the factory                    
                </return>
            </javadoc>
            <method name="getViewFactory" type="ViewFactory" line="194"/>
            <javadoc line="198">
                Create an uninitialized text storage model
                  that is appropriate for this type of editor.                
                <return>
                    the model                    
                </return>
            </javadoc>
            <method name="createDefaultDocument" type="Document" line="204">
                <declaration name="styles" type="StyleSheet" line="205"/>
                <declaration name="ss" type="StyleSheet" line="206"/>
                <declaration name="doc" type="HTMLDocument" line="210"/>
            </method>
            <javadoc line="217">
                Try to get an HTML parser from the document.  If no parser is set for
                  the document, return the editor kit&apos;s default parser.  It is an error
                  if no parser could be obtained from the editor kit.                
            </javadoc>
            <method name="ensureParser" type="Parser" line="222">
                <params>
                    <param name="doc" type="HTMLDocument"/>
                </params>
                <declaration name="p" type="Parser" line="223"/>
                <scope line="224"/>
                <scope line="227"/>
            </method>
            <javadoc line="233">
                Inserts content from the given stream. If &lt;code&gt;doc&lt;/code&gt; is
                  an instance of HTMLDocument, this will read
                  HTML 3.2 text. Inserting HTML into a non-empty document must be inside
                  the body Element, if you do not insert into the body an exception will
                  be thrown. When inserting into a non-empty document all tags outside
                  of the body (head, title) will be dropped.                
                <param>
                    in  the stream to read from                    
                </param>
                <param>
                    doc the destination for the insertion                    
                </param>
                <param>
                    pos the location in the document to place the
                      content                    
                </param>
                <exception>
                    IOException on any I/O error                    
                </exception>
                <exception>
                    BadLocationException if pos represents an invalid
                      location within the document                    
                </exception>
                <exception>
                    RuntimeException (will eventually be a BadLocationException)
                      if pos is invalid                    
                </exception>
            </javadoc>
            <method name="read" type="void" line="251">
                <params>
                    <param name="in" type="Reader"/>
                    <param name="doc" type="Document"/>
                    <param name="pos" type="int"/>
                </params>
                <scope line="253">
                    <declaration name="hdoc" type="HTMLDocument" line="254"/>
                    <scope line="255"/>
                    <declaration name="p" type="Parser" line="259"/>
                    <declaration name="receiver" type="ParserCallback" line="260"/>
                    <declaration name="ignoreCharset" type="Boolean" line="261"/>
                </scope>
                <scope line="264"/>
            </method>
            <javadoc line="269">
                Inserts HTML into an existing document.                
                <param>
                    doc       the document to insert into                    
                </param>
                <param>
                    offset    the offset to insert HTML at                    
                </param>
                <param>
                    popDepth  the number of ElementSpec.EndTagTypes to generate before
                      inserting                    
                </param>
                <param>
                    pushDepth the number of ElementSpec.StartTagTypes with a direction
                      of ElementSpec.JoinNextDirection that should be generated
                      before inserting, but after the end tags have been generated                    
                </param>
                <param>
                    insertTag the first tag to start inserting into document                    
                </param>
                <exception>
                    RuntimeException (will eventually be a BadLocationException)
                      if pos is invalid                    
                </exception>
            </javadoc>
            <method name="insertHTML" type="void" line="286">
                <params>
                    <param name="doc" type="HTMLDocument"/>
                    <param name="offset" type="int"/>
                    <param name="html" type="String"/>
                    <param name="popDepth" type="int"/>
                    <param name="pushDepth" type="int"/>
                    <param name="insertTag" type="HTML.Tag"/>
                </params>
                <scope line="287"/>
                <declaration name="p" type="Parser" line="291"/>
                <declaration name="receiver" type="ParserCallback" line="292"/>
                <declaration name="ignoreCharset" type="Boolean" line="294"/>
            </method>
            <javadoc line="301">
                Write content from a document to the given stream
                  in a format appropriate for this kind of content handler.                
                <param>
                    out  the stream to write to                    
                </param>
                <param>
                    doc  the source for the write                    
                </param>
                <param>
                    pos  the location in the document to fetch the
                      content                    
                </param>
                <param>
                    len  the amount to write out                    
                </param>
                <exception>
                    IOException on any I/O error                    
                </exception>
                <exception>
                    BadLocationException if pos represents an invalid
                      location within the document                    
                </exception>
            </javadoc>
            <method name="write" type="void" line="315">
                <params>
                    <param name="out" type="Writer"/>
                    <param name="doc" type="Document"/>
                    <param name="pos" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="317">
                    <declaration name="w" type="HTMLWriter" line="318"/>
                </scope>
                <scope line="320">
                    <declaration name="w" type="MinimalHTMLWriter" line="321"/>
                </scope>
                <scope line="323"/>
            </method>
            <javadoc line="328">
                Called when the kit is being installed into the
                  a JEditorPane.                
                <param>
                    c the JEditorPane                    
                </param>
            </javadoc>
            <method name="install" type="void" line="334">
                <params>
                    <param name="c" type="JEditorPane"/>
                </params>
            </method>
            <javadoc line="342">
                Called when the kit is being removed from the
                  JEditorPane.  This is used to unregister any
                  listeners that were attached.                
                <param>
                    c the JEditorPane                    
                </param>
            </javadoc>
            <method name="deinstall" type="void" line="349">
                <params>
                    <param name="c" type="JEditorPane"/>
                </params>
            </method>
            <declaration name="DEFAULT_CSS" type="String" line="357"/>
            <javadoc line="357">
                Default Cascading Style Sheet file that sets
                  up the tag views.                
            </javadoc>
            <javadoc line="363">
                Set the set of styles to be used to render the various
                  HTML elements.  These styles are specified in terms of
                  CSS specifications.  Each document produced by the kit
                  will have a copy of the sheet which it can add the
                  document specific styles to.  By default, the StyleSheet
                  specified is shared by all HTMLEditorKit instances.
                  This should be reimplemented to provide a finer granularity
                  if desired.                
            </javadoc>
            <method name="setStyleSheet" type="void" line="373">
                <params>
                    <param name="s" type="StyleSheet"/>
                </params>
                <scope line="374"/>
                <scope line="376"/>
            </method>
            <javadoc line="381">
                Get the set of styles currently being used to render the
                  HTML elements.  By default the resource specified by
                  DEFAULT_CSS gets loaded, and is shared by all HTMLEditorKit
                  instances.                
            </javadoc>
            <method name="getStyleSheet" type="StyleSheet" line="387">
                <comment line="402">
                    on error we simply have no styles... the html
                     will look mighty wrong but still function.                    
                </comment>
                <declaration name="appContext" type="AppContext" line="388"/>
                <declaration name="defaultStyles" type="StyleSheet" line="389"/>
                <scope line="391">
                    <scope line="394">
                        <declaration name="is" type="InputStream" line="395"/>
                        <declaration name="r" type="Reader" line="396"/>
                    </scope>
                    <scope line="400"/>
                </scope>
            </method>
            <javadoc line="408">
                Fetch a resource relative to the HTMLEditorKit classfile.
                  If this is called on 1.2 the loading will occur under the
                  protection of a doPrivileged call to allow the HTMLEditorKit
                  to function when used in an applet.                
                <param>
                    name the name of the resource, relative to the
                      HTMLEditorKit class                    
                </param>
                <return>
                    a stream representing the resource                    
                </return>
            </javadoc>
            <method name="getResourceAsStream" type="InputStream" line="418">
                <params>
                    <param name="name" type="String"/>
                </params>
                <comment line="423">
                    If the class doesn&apos;t exist or we have some other
                     problem we just try to call getResourceAsStream directly.                    
                </comment>
                <scope line="419"/>
                <scope line="421"/>
            </method>
            <javadoc line="428">
                Fetches the command list for the editor.  This is
                  the list of commands supported by the superclass
                  augmented by the collection of commands defined
                  locally for style operations.                
                <return>
                    the command list                    
                </return>
            </javadoc>
            <method name="getActions" type="Action[]" line="436"/>
            <javadoc line="440">
                Copies the key/values in &lt;code&gt;element&lt;/code&gt;s AttributeSet into
                  &lt;code&gt;set&lt;/code&gt;. This does not copy component, icon, or element
                  names attributes. Subclasses may wish to refine what is and what
                  isn&apos;t copied here. But be sure to first remove all the attributes that
                  are in &lt;code&gt;set&lt;/code&gt;.&lt;p&gt;
                  This is called anytime the caret moves over a different location.                
            </javadoc>
            <method name="createInputAttributes" type="void" line="450">
                <params>
                    <param name="element" type="Element"/>
                    <param name="set" type="MutableAttributeSet"/>
                </params>
                <comment line="459">
                    PENDING: we need a better way to express what shouldn&apos;t be
                     copied when editing...                    
                </comment>
                <comment line="462">
                    Remove the related image attributes, src, width, height                    
                </comment>
                <comment line="470">
                    Don&apos;t copy HRs or BRs either.                    
                </comment>
                <comment line="475">
                    Don&apos;t copy COMMENTs either                    
                </comment>
                <comment line="481">
                    or INPUT either                    
                </comment>
                <comment line="487">
                    Don&apos;t copy unknowns either:(                    
                </comment>
                <declaration name="o" type="Object" line="455"/>
                <scope line="456">
                    <declaration name="tag" type="HTML.Tag" line="457"/>
                    <scope line="460"/>
                    <scope line="468"/>
                    <scope line="473"/>
                    <scope line="479"/>
                    <scope line="485"/>
                </scope>
            </method>
            <javadoc line="494">
                Gets the input attributes used for the styled
                  editing actions.                
                <return>
                    the attribute set                    
                </return>
            </javadoc>
            <method name="getInputAttributes" type="MutableAttributeSet" line="500">
                <scope line="501"/>
            </method>
            <javadoc line="507">
                Sets the default cursor.                
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="setDefaultCursor" type="void" line="512">
                <params>
                    <param name="cursor" type="Cursor"/>
                </params>
            </method>
            <javadoc line="516">
                Returns the default cursor.                
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getDefaultCursor" type="Cursor" line="521"/>
            <javadoc line="525">
                Sets the cursor to use over links.                
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="setLinkCursor" type="void" line="530">
                <params>
                    <param name="cursor" type="Cursor"/>
                </params>
            </method>
            <javadoc line="534">
                Returns the cursor to use over hyper links.                
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getLinkCursor" type="Cursor" line="538"/>
            <javadoc line="542">
                Indicates whether an html form submission is processed automatically
                  or only &lt;code&gt;FormSubmitEvent&lt;/code&gt; is fired.                
                <return>
                    true  if html form submission is processed automatically,
                      false otherwise.                    
                </return>
                <see>
                    #setAutoFormSubmission                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="isAutoFormSubmission" type="boolean" line="552"/>
            <javadoc line="556">
                Specifies if an html form submission is processed
                  automatically or only &lt;code&gt;FormSubmitEvent&lt;/code&gt; is fired.
                  By default it is set to true.                
                <see>
                    #isAutoFormSubmission()                    
                </see>
                <see>
                    FormSubmitEvent                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="setAutoFormSubmission" type="void" line="565">
                <params>
                    <param name="isAuto" type="boolean"/>
                </params>
            </method>
            <javadoc line="569">
                Creates a copy of the editor kit.                
                <return>
                    the copy                    
                </return>
            </javadoc>
            <method name="clone" type="Object" line="574">
                <declaration name="o" type="HTMLEditorKit" line="575"/>
                <scope line="576"/>
            </method>
            <javadoc line="583">
                Fetch the parser to use for reading HTML streams.
                  This can be reimplemented to provide a different
                  parser.  The default implementation is loaded dynamically
                  to avoid the overhead of loading the default parser if
                  it&apos;s not used.  The default parser is the HotJava parser
                  using an HTML 3.2 DTD.                
            </javadoc>
            <method name="getParser" type="Parser" line="591">
                <scope line="592">
                    <scope line="593">
                        <declaration name="c" type="Class" line="594"/>
                    </scope>
                    <scope line="596"/>
                </scope>
            </method>
            <declaration name="accessibleContext" type="AccessibleContext" line="603"/>
            <javadoc line="605">
                returns the AccessibleContext associated with this editor kit                
                <return>
                    the AccessibleContext associated with this editor kit                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getAccessibleContext" type="AccessibleContext" line="611">
                <scope line="612"/>
                <scope line="615">
                    <declaration name="a" type="AccessibleHTML" line="616"/>
                </scope>
            </method>
            <declaration name="MoveCursor" type="Cursor" line="624"/>
            <declaration name="DefaultCursor" type="Cursor" line="626"/>
            <declaration name="defaultFactory" type="ViewFactory" line="629"/>
            <javadoc line="629">
                Shared factory for creating HTML Views.                
            </javadoc>
            <declaration name="input" type="MutableAttributeSet" line="632"/>
            <declaration name="DEFAULT_STYLES_KEY" type="Object" line="633"/>
            <declaration name="linkHandler" type="LinkController" line="634"/>
            <declaration name="defaultParser" type="Parser" line="635"/>
            <declaration name="defaultCursor" type="Cursor" line="636"/>
            <declaration name="linkCursor" type="Cursor" line="637"/>
            <declaration name="isAutoFormSubmission" type="boolean" line="638"/>
            <class name="LinkController" line="640">
                <extends class="MouseAdapter"/>
                <comment line="682">
                    ignore the drags                    
                </comment>
                <comment line="686">
                    track the moving of the mouse.                    
                </comment>
                <comment line="1612">
                                        
                </comment>
                <comment line="1888">
                    Create this action with the appropriate identifier.                    
                </comment>
                <comment line="1919">
                    The operation to perform when this action is triggered.                    
                </comment>
                <comment line="1986">
                    Moves the caret from mark to dot                    
                </comment>
                <comment line="2100">
                    activates the hyperlink at offset                    
                </comment>
                <comment line="2118">
                    Invokes default action on the object in an element                    
                </comment>
                <comment line="2137">
                    Returns the root view for a document                    
                </comment>
                <comment line="2144">
                    Returns a view associated with an element                    
                </comment>
                <comment line="2173">
                    If possible acquires a lock on the Document.  If a lock has been
                     obtained a key will be retured that should be passed to
                     &lt;code&gt;unlock&lt;code&gt;.                    
                </comment>
                <comment line="2188">
                    Releases a lock previously obtained via &lt;code&gt;lock&lt;code&gt;.                    
                </comment>
                <comment line="2197">
                    The operation to perform when this action is triggered.                    
                </comment>
                <comment line="2267">
                                        
                </comment>
                <implements interface="MouseMotionListener"/>
                <implements interface="Serializable"/>
                <javadoc line="640">
                    Class to watch the associated component and fire
                      hyperlink events on it when appropriate.                    
                </javadoc>
                <declaration name="curElem" type="Element" line="645"/>
                <declaration name="curElemImage" type="boolean" line="646"/>
                <javadoc line="646">
                    If true, the current element (curElem) represents an image.                    
                </javadoc>
                <declaration name="href" type="String" line="650"/>
                <declaration name="bias" type="Position.Bias[]" line="651"/>
                <javadoc line="651">
                    This is used by viewToModel to avoid allocing a new array each
                      time.                    
                </javadoc>
                <declaration name="curOffset" type="int" line="654"/>
                <javadoc line="654">
                    Current offset.                    
                </javadoc>
                <javadoc line="659">
                    Called for a mouse click event.
                      If the component is read-only (ie a browser) then
                      the clicked event is used to drive an attempt to
                      follow the reference specified by a link.                    
                    <param>
                        e the mouse event                        
                    </param>
                    <see>
                        MouseListener#mouseClicked                        
                    </see>
                </javadoc>
                <method name="mouseClicked" type="void" line="668">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                    <declaration name="editor" type="JEditorPane" line="669"/>
                    <scope line="672">
                        <declaration name="pt" type="Point" line="673"/>
                        <declaration name="pos" type="int" line="674"/>
                        <scope line="675"/>
                    </scope>
                </method>
                <method name="mouseDragged" type="void" line="682">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
                <method name="mouseMoved" type="void" line="686">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                    <comment line="733">
                        reference changed, fire event(s)                        
                    </comment>
                    <declaration name="editor" type="JEditorPane" line="687"/>
                    <scope line="688"/>
                    <declaration name="kit" type="HTMLEditorKit" line="692"/>
                    <declaration name="adjustCursor" type="boolean" line="693"/>
                    <declaration name="newCursor" type="Cursor" line="694"/>
                    <scope line="695">
                        <declaration name="pt" type="Point" line="696"/>
                        <declaration name="pos" type="int" line="697"/>
                        <scope line="698"/>
                        <scope line="701">
                            <declaration name="hdoc" type="HTMLDocument" line="702"/>
                            <declaration name="elem" type="Element" line="703"/>
                            <scope line="705"/>
                            <scope line="708">
                                <declaration name="lastElem" type="Element" line="709"/>
                                <declaration name="href" type="String" line="711"/>
                                <scope line="713">
                                    <declaration name="a" type="AttributeSet" line="714"/>
                                    <declaration name="anchor" type="AttributeSet" line="715"/>
                                    <scope line="717">
                                        <scope line="720"/>
                                    </scope>
                                    <scope line="725"/>
                                </scope>
                                <scope line="731">
                                    <scope line="735"/>
                                </scope>
                                <scope line="739"/>
                            </scope>
                            <scope line="743"/>
                        </scope>
                    </scope>
                    <scope line="749"/>
                </method>
                <javadoc line="754">
                    Returns a string anchor if the passed in element has a
                      USEMAP that contains the passed in location.                    
                </javadoc>
                <method name="getMapHREF" type="String" line="760">
                    <params>
                        <param name="html" type="JEditorPane"/>
                        <param name="hdoc" type="HTMLDocument"/>
                        <param name="elem" type="Element"/>
                        <param name="attr" type="AttributeSet"/>
                        <param name="offset" type="int"/>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                    </params>
                    <declaration name="useMap" type="Object" line="761"/>
                    <scope line="762">
                        <declaration name="m" type="Map" line="763"/>
                        <scope line="764">
                            <declaration name="bounds" type="Rectangle" line="765"/>
                            <declaration name="ui" type="TextUI" line="766"/>
                            <scope line="767">
                                <declaration name="lBounds" type="Shape" line="768"/>
                                <declaration name="rBounds" type="Shape" line="770"/>
                            </scope>
                            <scope line="775"/>
                            <scope line="778">
                                <declaration name="area" type="AttributeSet" line="779"/>
                                <scope line="783"/>
                            </scope>
                        </scope>
                    </scope>
                </method>
                <javadoc line="793">
                    Returns true if the View representing &lt;code&gt;e&lt;/code&gt; contains
                      the location &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;. &lt;code&gt;offset&lt;/code&gt;
                      gives the offset into the Document to check for.                    
                </javadoc>
                <method name="doesElementContainLocation" type="boolean" line="800">
                    <params>
                        <param name="editor" type="JEditorPane"/>
                        <param name="e" type="Element"/>
                        <param name="offset" type="int"/>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                    </params>
                    <scope line="801">
                        <scope line="802">
                            <declaration name="ui" type="TextUI" line="803"/>
                            <declaration name="s1" type="Shape" line="804"/>
                            <scope line="806"/>
                            <declaration name="r1" type="Rectangle" line="809"/>
                            <declaration name="s2" type="Shape" line="811"/>
                            <scope line="813">
                                <declaration name="r2" type="Rectangle" line="814"/>
                            </scope>
                        </scope>
                        <scope line="819"/>
                    </scope>
                </method>
                <javadoc line="825">
                    Calls linkActivated on the associated JEditorPane
                      if the given position represents a link.&lt;p&gt;This is implemented
                      to forward to the method with the same name, but with the following
                      args both == -1.                    
                    <param>
                        pos the position                        
                    </param>
                    <param>
                        editor the editor pane                        
                    </param>
                </javadoc>
                <method name="activateLink" type="void" line="834">
                    <params>
                        <param name="pos" type="int"/>
                        <param name="editor" type="JEditorPane"/>
                    </params>
                </method>
                <javadoc line="838">
                    Calls linkActivated on the associated JEditorPane
                      if the given position represents a link. If this was the result
                      of a mouse click, &lt;code&gt;x&lt;/code&gt; and
                      &lt;code&gt;y&lt;/code&gt; will give the location of the mouse, otherwise
                      they will be &lt; 0.                    
                    <param>
                        pos the position                        
                    </param>
                    <param>
                        html the editor pane                        
                    </param>
                </javadoc>
                <method name="activateLink" type="void" line="848">
                    <params>
                        <param name="pos" type="int"/>
                        <param name="html" type="JEditorPane"/>
                        <param name="mouseEvent" type="MouseEvent"/>
                    </params>
                    <declaration name="doc" type="Document" line="849"/>
                    <scope line="850">
                        <declaration name="hdoc" type="HTMLDocument" line="851"/>
                        <declaration name="e" type="Element" line="852"/>
                        <declaration name="a" type="AttributeSet" line="853"/>
                        <declaration name="anchor" type="AttributeSet" line="854"/>
                        <declaration name="linkEvent" type="HyperlinkEvent" line="855"/>
                        <declaration name="description" type="String" line="856"/>
                        <declaration name="x" type="int" line="857"/>
                        <declaration name="y" type="int" line="858"/>
                        <scope line="860"/>
                        <scope line="865"/>
                        <scope line="868"/>
                        <scope line="872"/>
                        <scope line="876"/>
                    </scope>
                </method>
                <javadoc line="882">
                    Creates and returns a new instance of HyperlinkEvent. If
                      &lt;code&gt;hdoc&lt;/code&gt; is a frame document a HTMLFrameHyperlinkEvent
                      will be created.                    
                </javadoc>
                <method name="createHyperlinkEvent" type="HyperlinkEvent" line="891">
                    <params>
                        <param name="html" type="JEditorPane"/>
                        <param name="hdoc" type="HTMLDocument"/>
                        <param name="href" type="String"/>
                        <param name="anchor" type="AttributeSet"/>
                        <param name="element" type="Element"/>
                        <param name="mouseEvent" type="MouseEvent"/>
                    </params>
                    <comment line="897">
                        Following is a workaround for 1.2, in which
                         new URL(&quot;file:...&quot;, &quot;#...&quot;) causes the filename to
                         be lost.                        
                    </comment>
                    <declaration name="u" type="URL" line="892"/>
                    <scope line="893">
                        <declaration name="base" type="URL" line="894"/>
                        <scope line="900">
                            <declaration name="baseFile" type="String" line="901"/>
                            <declaration name="newFile" type="String" line="902"/>
                            <scope line="904"/>
                        </scope>
                    </scope>
                    <scope line="908"/>
                    <declaration name="linkEvent" type="HyperlinkEvent" line="911"/>
                    <scope line="913"/>
                    <scope line="917">
                        <declaration name="target" type="String" line="918"/>
                        <scope line="920"/>
                        <scope line="923"/>
                    </scope>
                </method>
                <method name="fireEvents" type="void" line="934">
                    <params>
                        <param name="editor" type="JEditorPane"/>
                        <param name="doc" type="HTMLDocument"/>
                        <param name="href" type="String"/>
                        <param name="lastElem" type="Element"/>
                        <param name="mouseEvent" type="MouseEvent"/>
                    </params>
                    <comment line="937">
                        fire an exited event on the old link                        
                    </comment>
                    <comment line="950">
                        fire an entered event on the new link                        
                    </comment>
                    <scope line="935">
                        <declaration name="u" type="URL" line="937"/>
                        <scope line="938"/>
                        <scope line="940"/>
                        <declaration name="exit" type="HyperlinkEvent" line="943"/>
                    </scope>
                    <scope line="948">
                        <declaration name="u" type="URL" line="950"/>
                        <scope line="951"/>
                        <scope line="953"/>
                        <declaration name="entered" type="HyperlinkEvent" line="956"/>
                    </scope>
                </method>
            </class>
            <class name="Parser" line="964">
                <comment line="682">
                    ignore the drags                    
                </comment>
                <comment line="686">
                    track the moving of the mouse.                    
                </comment>
                <comment line="1612">
                                        
                </comment>
                <comment line="1888">
                    Create this action with the appropriate identifier.                    
                </comment>
                <comment line="1919">
                    The operation to perform when this action is triggered.                    
                </comment>
                <comment line="1986">
                    Moves the caret from mark to dot                    
                </comment>
                <comment line="2100">
                    activates the hyperlink at offset                    
                </comment>
                <comment line="2118">
                    Invokes default action on the object in an element                    
                </comment>
                <comment line="2137">
                    Returns the root view for a document                    
                </comment>
                <comment line="2144">
                    Returns a view associated with an element                    
                </comment>
                <comment line="2173">
                    If possible acquires a lock on the Document.  If a lock has been
                     obtained a key will be retured that should be passed to
                     &lt;code&gt;unlock&lt;code&gt;.                    
                </comment>
                <comment line="2188">
                    Releases a lock previously obtained via &lt;code&gt;lock&lt;code&gt;.                    
                </comment>
                <comment line="2197">
                    The operation to perform when this action is triggered.                    
                </comment>
                <comment line="2267">
                                        
                </comment>
                <javadoc line="964">
                    Interface to be supported by the parser.  This enables
                      providing a different parser while reusing some of the
                      implementation provided by this editor kit.                    
                </javadoc>
                <method name="parse" type="void" line="970"/>
                <javadoc line="970">
                    Parse the given stream and drive the given callback
                      with the results of the parse.  This method should
                      be implemented to be thread-safe.                    
                </javadoc>
            </class>
            <class name="ParserCallback" line="979">
                <comment line="682">
                    ignore the drags                    
                </comment>
                <comment line="686">
                    track the moving of the mouse.                    
                </comment>
                <comment line="1612">
                                        
                </comment>
                <comment line="1888">
                    Create this action with the appropriate identifier.                    
                </comment>
                <comment line="1919">
                    The operation to perform when this action is triggered.                    
                </comment>
                <comment line="1986">
                    Moves the caret from mark to dot                    
                </comment>
                <comment line="2100">
                    activates the hyperlink at offset                    
                </comment>
                <comment line="2118">
                    Invokes default action on the object in an element                    
                </comment>
                <comment line="2137">
                    Returns the root view for a document                    
                </comment>
                <comment line="2144">
                    Returns a view associated with an element                    
                </comment>
                <comment line="2173">
                    If possible acquires a lock on the Document.  If a lock has been
                     obtained a key will be retured that should be passed to
                     &lt;code&gt;unlock&lt;code&gt;.                    
                </comment>
                <comment line="2188">
                    Releases a lock previously obtained via &lt;code&gt;lock&lt;code&gt;.                    
                </comment>
                <comment line="2197">
                    The operation to perform when this action is triggered.                    
                </comment>
                <comment line="2267">
                                        
                </comment>
                <javadoc line="979">
                    The result of parsing drives these callback methods.
                      The open and close actions should be balanced.  The
                      &lt;code&gt;flush&lt;/code&gt; method will be the last method
                      called, to give the receiver a chance to flush any
                      pending data into the document.
                      &lt;p&gt;Refer to DocumentParser, the default parser used, for further
                      information on the contents of the AttributeSets, the positions, and
                      other info.                    
                    <see>
                        javax.swing.text.html.parser.DocumentParser                        
                    </see>
                </javadoc>
                <declaration name="IMPLIED" type="Object" line="992"/>
                <javadoc line="992">
                    This is passed as an attribute in the attributeset to indicate
                      the element is implied eg, the string &apos;&amp;lt;&amp;gt;foo&amp;lt;\t&amp;gt;&apos;
                      contains an implied html element and an implied body element.                    
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <method name="flush" type="void" line="1002"/>
                <method name="handleText" type="void" line="1005">
                    <params>
                        <param name="data" type="char[]"/>
                        <param name="pos" type="int"/>
                    </params>
                </method>
                <method name="handleComment" type="void" line="1008">
                    <params>
                        <param name="data" type="char[]"/>
                        <param name="pos" type="int"/>
                    </params>
                </method>
                <method name="handleStartTag" type="void" line="1011">
                    <params>
                        <param name="t" type="HTML.Tag"/>
                        <param name="a" type="MutableAttributeSet"/>
                        <param name="pos" type="int"/>
                    </params>
                </method>
                <method name="handleEndTag" type="void" line="1014">
                    <params>
                        <param name="t" type="HTML.Tag"/>
                        <param name="pos" type="int"/>
                    </params>
                </method>
                <method name="handleSimpleTag" type="void" line="1017">
                    <params>
                        <param name="t" type="HTML.Tag"/>
                        <param name="a" type="MutableAttributeSet"/>
                        <param name="pos" type="int"/>
                    </params>
                </method>
                <method name="handleError" type="void" line="1020">
                    <params>
                        <param name="errorMsg" type="String"/>
                        <param name="pos" type="int"/>
                    </params>
                </method>
                <javadoc line="1023">
                    This is invoked after the stream has been parsed, but before
                      &lt;code&gt;flush&lt;/code&gt;. &lt;code&gt;eol&lt;/code&gt; will be one of \n, \r
                      or \r\n, which ever is encountered the most in parsing the
                      stream.                    
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <method name="handleEndOfLineString" type="void" line="1031">
                    <params>
                        <param name="eol" type="String"/>
                    </params>
                </method>
            </class>
            <class name="HTMLFactory" line="1035">
                <comment line="682">
                    ignore the drags                    
                </comment>
                <comment line="686">
                    track the moving of the mouse.                    
                </comment>
                <comment line="1612">
                                        
                </comment>
                <comment line="1888">
                    Create this action with the appropriate identifier.                    
                </comment>
                <comment line="1919">
                    The operation to perform when this action is triggered.                    
                </comment>
                <comment line="1986">
                    Moves the caret from mark to dot                    
                </comment>
                <comment line="2100">
                    activates the hyperlink at offset                    
                </comment>
                <comment line="2118">
                    Invokes default action on the object in an element                    
                </comment>
                <comment line="2137">
                    Returns the root view for a document                    
                </comment>
                <comment line="2144">
                    Returns a view associated with an element                    
                </comment>
                <comment line="2173">
                    If possible acquires a lock on the Document.  If a lock has been
                     obtained a key will be retured that should be passed to
                     &lt;code&gt;unlock&lt;code&gt;.                    
                </comment>
                <comment line="2188">
                    Releases a lock previously obtained via &lt;code&gt;lock&lt;code&gt;.                    
                </comment>
                <comment line="2197">
                    The operation to perform when this action is triggered.                    
                </comment>
                <comment line="2267">
                                        
                </comment>
                <implements interface="ViewFactory"/>
                <javadoc line="1035">
                    A factory to build views for HTML.  The following
                      table describes what this factory will build by
                      default.
                      &lt;table summary=&quot;Describes the tag and view created by this factory by default&quot;&gt;
                      &lt;tr&gt;
                      &lt;th align=left&gt;Tag&lt;th align=left&gt;View created
                      &lt;/tr&gt;&lt;tr&gt;
                      &lt;td&gt;HTML.Tag.CONTENT&lt;td&gt;InlineView
                      &lt;/tr&gt;&lt;tr&gt;
                      &lt;td&gt;HTML.Tag.IMPLIED&lt;td&gt;javax.swing.text.html.ParagraphView
                      &lt;/tr&gt;&lt;tr&gt;
                      &lt;td&gt;HTML.Tag.P&lt;td&gt;javax.swing.text.html.ParagraphView
                      &lt;/tr&gt;&lt;tr&gt;
                      &lt;td&gt;HTML.Tag.H1&lt;td&gt;javax.swing.text.html.ParagraphView
                      &lt;/tr&gt;&lt;tr&gt;
                      &lt;td&gt;HTML.Tag.H2&lt;td&gt;javax.swing.text.html.ParagraphView
                      &lt;/tr&gt;&lt;tr&gt;
                      &lt;td&gt;HTML.Tag.H3&lt;td&gt;javax.swing.text.html.ParagraphView
                      &lt;/tr&gt;&lt;tr&gt;
                      &lt;td&gt;HTML.Tag.H4&lt;td&gt;javax.swing.text.html.ParagraphView
                      &lt;/tr&gt;&lt;tr&gt;
                      &lt;td&gt;HTML.Tag.H5&lt;td&gt;javax.swing.text.html.ParagraphView
                      &lt;/tr&gt;&lt;tr&gt;
                      &lt;td&gt;HTML.Tag.H6&lt;td&gt;javax.swing.text.html.ParagraphView
                      &lt;/tr&gt;&lt;tr&gt;
                      &lt;td&gt;HTML.Tag.DT&lt;td&gt;javax.swing.text.html.ParagraphView
                      &lt;/tr&gt;&lt;tr&gt;
                      &lt;td&gt;HTML.Tag.MENU&lt;td&gt;ListView
                      &lt;/tr&gt;&lt;tr&gt;
                      &lt;td&gt;HTML.Tag.DIR&lt;td&gt;ListView
                      &lt;/tr&gt;&lt;tr&gt;
                      &lt;td&gt;HTML.Tag.UL&lt;td&gt;ListView
                      &lt;/tr&gt;&lt;tr&gt;
                      &lt;td&gt;HTML.Tag.OL&lt;td&gt;ListView
                      &lt;/tr&gt;&lt;tr&gt;
                      &lt;td&gt;HTML.Tag.LI&lt;td&gt;BlockView
                      &lt;/tr&gt;&lt;tr&gt;
                      &lt;td&gt;HTML.Tag.DL&lt;td&gt;BlockView
                      &lt;/tr&gt;&lt;tr&gt;
                      &lt;td&gt;HTML.Tag.DD&lt;td&gt;BlockView
                      &lt;/tr&gt;&lt;tr&gt;
                      &lt;td&gt;HTML.Tag.BODY&lt;td&gt;BlockView
                      &lt;/tr&gt;&lt;tr&gt;
                      &lt;td&gt;HTML.Tag.HTML&lt;td&gt;BlockView
                      &lt;/tr&gt;&lt;tr&gt;
                      &lt;td&gt;HTML.Tag.CENTER&lt;td&gt;BlockView
                      &lt;/tr&gt;&lt;tr&gt;
                      &lt;td&gt;HTML.Tag.DIV&lt;td&gt;BlockView
                      &lt;/tr&gt;&lt;tr&gt;
                      &lt;td&gt;HTML.Tag.BLOCKQUOTE&lt;td&gt;BlockView
                      &lt;/tr&gt;&lt;tr&gt;
                      &lt;td&gt;HTML.Tag.PRE&lt;td&gt;BlockView
                      &lt;/tr&gt;&lt;tr&gt;
                      &lt;td&gt;HTML.Tag.BLOCKQUOTE&lt;td&gt;BlockView
                      &lt;/tr&gt;&lt;tr&gt;
                      &lt;td&gt;HTML.Tag.PRE&lt;td&gt;BlockView
                      &lt;/tr&gt;&lt;tr&gt;
                      &lt;td&gt;HTML.Tag.IMG&lt;td&gt;ImageView
                      &lt;/tr&gt;&lt;tr&gt;
                      &lt;td&gt;HTML.Tag.HR&lt;td&gt;HRuleView
                      &lt;/tr&gt;&lt;tr&gt;
                      &lt;td&gt;HTML.Tag.BR&lt;td&gt;BRView
                      &lt;/tr&gt;&lt;tr&gt;
                      &lt;td&gt;HTML.Tag.TABLE&lt;td&gt;javax.swing.text.html.TableView
                      &lt;/tr&gt;&lt;tr&gt;
                      &lt;td&gt;HTML.Tag.INPUT&lt;td&gt;FormView
                      &lt;/tr&gt;&lt;tr&gt;
                      &lt;td&gt;HTML.Tag.SELECT&lt;td&gt;FormView
                      &lt;/tr&gt;&lt;tr&gt;
                      &lt;td&gt;HTML.Tag.TEXTAREA&lt;td&gt;FormView
                      &lt;/tr&gt;&lt;tr&gt;
                      &lt;td&gt;HTML.Tag.OBJECT&lt;td&gt;ObjectView
                      &lt;/tr&gt;&lt;tr&gt;
                      &lt;td&gt;HTML.Tag.FRAMESET&lt;td&gt;FrameSetView
                      &lt;/tr&gt;&lt;tr&gt;
                      &lt;td&gt;HTML.Tag.FRAME&lt;td&gt;FrameView
                      &lt;/tr&gt;
                      &lt;/table&gt;                    
                </javadoc>
                <javadoc line="1118">
                    Creates a view from an element.                    
                    <param>
                        elem the element                        
                    </param>
                    <return>
                        the view                        
                    </return>
                </javadoc>
                <method name="create" type="View" line="1124">
                    <params>
                        <param name="elem" type="Element"/>
                    </params>
                    <comment line="1150">
                        paragraph                        
                    </comment>
                    <comment line="1169">
                        vertical box                        
                    </comment>
                    <comment line="1204">
                        Make the head never visible, and never load its
                         children. For Cursor positioning,
                         getNextVisualPositionFrom is overriden to always return
                         the end offset of the element.                        
                    </comment>
                    <comment line="1242">
                        If we get here, it&apos;s either an element we don&apos;t know about
                         or something from StyledDocument that doesn&apos;t have a mapping to HTML.                        
                    </comment>
                    <comment line="1260">
                        default to text display                        
                    </comment>
                    <declaration name="attrs" type="AttributeSet" line="1125"/>
                    <declaration name="elementName" type="Object" line="1126"/>
                    <declaration name="o" type="Object" line="1128"/>
                    <scope line="1130">
                        <declaration name="kind" type="HTML.Tag" line="1131"/>
                        <scope line="1132"/>
                        <scope line="1134">
                            <declaration name="ws" type="String" line="1135"/>
                            <scope line="1137"/>
                        </scope>
                        <scope line="1148"/>
                        <scope line="1154"/>
                        <scope line="1156"/>
                        <scope line="1158"/>
                        <scope line="1167"/>
                        <scope line="1170"/>
                        <scope line="1172"/>
                        <scope line="1174"/>
                        <scope line="1176"/>
                        <scope line="1178"/>
                        <scope line="1180"/>
                        <scope line="1184"/>
                        <scope line="1186"/>
                        <scope line="1188">
                            <scope line="1189"/>
                            <scope line="1191"/>
                        </scope>
                        <scope line="1196"/>
                        <scope line="1198"/>
                        <scope line="1200"/>
                        <scope line="1202">
                            <anonymous_class line="1207">
                                <method name="getPreferredSpan" type="float" line="1208">
                                    <params>
                                        <param name="axis" type="int"/>
                                    </params>
                                </method>
                                <method name="getMinimumSpan" type="float" line="1211">
                                    <params>
                                        <param name="axis" type="int"/>
                                    </params>
                                </method>
                                <method name="getMaximumSpan" type="float" line="1214">
                                    <params>
                                        <param name="axis" type="int"/>
                                    </params>
                                </method>
                                <method name="loadChildren" type="void" line="1217">
                                    <params>
                                        <param name="f" type="ViewFactory"/>
                                    </params>
                                </method>
                                <method name="modelToView" type="Shape" line="1220">
                                    <params>
                                        <param name="pos" type="int"/>
                                        <param name="a" type="Shape"/>
                                        <param name="b" type="Position.Bias"/>
                                    </params>
                                </method>
                                <method name="getNextVisualPositionFrom" type="int" line="1225">
                                    <params>
                                        <param name="pos" type="int"/>
                                        <param name="b" type="Position.Bias"/>
                                        <param name="a" type="Shape"/>
                                        <param name="direction" type="int"/>
                                        <param name="biasRet" type="Position.Bias[]"/>
                                    </params>
                                </method>
                            </anonymous_class>
                        </scope>
                        <scope line="1237"/>
                    </scope>
                    <declaration name="nm" type="String" line="1243"/>
                    <scope line="1245">
                        <scope line="1246"/>
                        <scope line="1248"/>
                        <scope line="1250"/>
                        <scope line="1252"/>
                        <scope line="1254"/>
                    </scope>
                </method>
                <class name="BodyBlockView" line="1263">
                    <extends class="BlockView"/>
                    <comment line="1268">
                        reimplement major axis requirements to indicate that the
                         block is flexible for the body element... so that it can
                         be stretched to fill the background properly.                        
                    </comment>
                    <comment line="1359">
                        we keep weak reference to viewPort if and only if BodyBoxView is listening for ComponentEvents
                         only in that case cachedViewPort is not equal to null.
                         we need to keep this reference in order to remove BodyBoxView from viewPort listeners.                        
                    </comment>
                    <implements interface="ComponentListener"/>
                    <method name="BodyBlockView" type="constructor" line="1264">
                        <params>
                            <param name="elem" type="Element"/>
                        </params>
                    </method>
                    <method name="calculateMajorAxisRequirements" type="SizeRequirements" line="1270">
                        <params>
                            <param name="axis" type="int"/>
                            <param name="r" type="SizeRequirements"/>
                        </params>
                    </method>
                    <method name="layoutMinorAxis" type="void" line="1276">
                        <params>
                            <param name="targetSpan" type="int"/>
                            <param name="axis" type="int"/>
                            <param name="offsets" type="int[]"/>
                            <param name="spans" type="int[]"/>
                        </params>
                        <comment line="1304">
                            try to use viewVisibleWidth if it is smaller than targetSpan                            
                        </comment>
                        <declaration name="container" type="Container" line="1277"/>
                        <declaration name="parentContainer" type="Container" line="1278"/>
                        <scope line="1282">
                            <declaration name="viewPort" type="JViewport" line="1283"/>
                            <scope line="1284">
                                <declaration name="cachedObject" type="JViewport" line="1285"/>
                                <scope line="1286">
                                    <scope line="1287"/>
                                </scope>
                                <scope line="1290"/>
                            </scope>
                            <scope line="1294"/>
                            <scope line="1300">
                                <declaration name="insets" type="Insets" line="1301"/>
                            </scope>
                        </scope>
                        <scope line="1306">
                            <scope line="1307">
                                <declaration name="cachedObject" type="JViewport" line="1308"/>
                                <scope line="1309"/>
                            </scope>
                        </scope>
                    </method>
                    <method name="setParent" type="void" line="1318">
                        <params>
                            <param name="parent" type="View"/>
                        </params>
                        <comment line="1320">
                            if parent == null unregister component listener                            
                        </comment>
                        <scope line="1320">
                            <scope line="1321">
                                <declaration name="cachedObject" type="Object" line="1322"/>
                                <scope line="1323"/>
                            </scope>
                        </scope>
                    </method>
                    <method name="componentResized" type="void" line="1332">
                        <params>
                            <param name="e" type="ComponentEvent"/>
                        </params>
                        <scope line="1333"/>
                        <declaration name="viewPort" type="JViewport" line="1336"/>
                        <scope line="1337">
                            <declaration name="doc" type="Document" line="1338"/>
                            <scope line="1339">
                                <declaration name="document" type="AbstractDocument" line="1340"/>
                                <scope line="1342"/>
                                <scope line="1345"/>
                            </scope>
                        </scope>
                    </method>
                    <method name="componentHidden" type="void" line="1352">
                        <params>
                            <param name="e" type="ComponentEvent"/>
                        </params>
                    </method>
                    <method name="componentMoved" type="void" line="1354">
                        <params>
                            <param name="e" type="ComponentEvent"/>
                        </params>
                    </method>
                    <method name="componentShown" type="void" line="1356">
                        <params>
                            <param name="e" type="ComponentEvent"/>
                        </params>
                    </method>
                    <declaration name="cachedViewPort" type="Reference&lt;JViewport&gt;" line="1364"/>
                    <declaration name="isListening" type="boolean" line="1365"/>
                    <declaration name="viewVisibleWidth" type="int" line="1366"/>
                    <declaration name="componentVisibleWidth" type="int" line="1367"/>
                </class>
            </class>
            <declaration name="BOLD_ACTION" type="String" line="1374"/>
            <javadoc line="1374">
                The bold action identifier                
            </javadoc>
            <declaration name="ITALIC_ACTION" type="String" line="1377"/>
            <javadoc line="1377">
                The italic action identifier                
            </javadoc>
            <declaration name="PARA_INDENT_LEFT" type="String" line="1380"/>
            <javadoc line="1380">
                The paragraph left indent action identifier                
            </javadoc>
            <declaration name="PARA_INDENT_RIGHT" type="String" line="1383"/>
            <javadoc line="1383">
                The paragraph right indent action identifier                
            </javadoc>
            <declaration name="FONT_CHANGE_BIGGER" type="String" line="1386"/>
            <javadoc line="1386">
                The  font size increase to next value action identifier                
            </javadoc>
            <declaration name="FONT_CHANGE_SMALLER" type="String" line="1389"/>
            <javadoc line="1389">
                The font size decrease to next value action identifier                
            </javadoc>
            <declaration name="COLOR_ACTION" type="String" line="1392"/>
            <javadoc line="1392">
                The Color choice action identifier
                  The color is passed as an argument                
            </javadoc>
            <declaration name="LOGICAL_STYLE_ACTION" type="String" line="1396"/>
            <javadoc line="1396">
                The logical style choice action identifier
                  The logical style is passed in as an argument                
            </javadoc>
            <declaration name="IMG_ALIGN_TOP" type="String" line="1400"/>
            <javadoc line="1400">
                Align images at the top.                
            </javadoc>
            <declaration name="IMG_ALIGN_MIDDLE" type="String" line="1405"/>
            <javadoc line="1405">
                Align images in the middle.                
            </javadoc>
            <declaration name="IMG_ALIGN_BOTTOM" type="String" line="1410"/>
            <javadoc line="1410">
                Align images at the bottom.                
            </javadoc>
            <declaration name="IMG_BORDER" type="String" line="1415"/>
            <javadoc line="1415">
                Align images at the border.                
            </javadoc>
            <declaration name="INSERT_TABLE_HTML" type="String" line="1421"/>
            <javadoc line="1421">
                HTML used when inserting tables.                
            </javadoc>
            <declaration name="INSERT_UL_HTML" type="String" line="1424"/>
            <javadoc line="1424">
                HTML used when inserting unordered lists.                
            </javadoc>
            <declaration name="INSERT_OL_HTML" type="String" line="1427"/>
            <javadoc line="1427">
                HTML used when inserting ordered lists.                
            </javadoc>
            <declaration name="INSERT_HR_HTML" type="String" line="1430"/>
            <javadoc line="1430">
                HTML used when inserting hr.                
            </javadoc>
            <declaration name="INSERT_PRE_HTML" type="String" line="1433"/>
            <javadoc line="1433">
                HTML used when inserting pre.                
            </javadoc>
            <declaration name="nextLinkAction" type="NavigateLinkAction" line="1436"/>
            <declaration name="previousLinkAction" type="NavigateLinkAction" line="1439"/>
            <declaration name="activateLinkAction" type="ActivateLinkAction" line="1442"/>
            <declaration name="defaultActions" type="Action[]" line="1445"/>
            <declaration name="foundLink" type="boolean" line="1474"/>
            <declaration name="prevHypertextOffset" type="int" line="1475"/>
            <declaration name="linkNavigationTag" type="Object" line="1476"/>
            <class name="HTMLTextAction" line="1479">
                <extends class="StyledTextAction"/>
                <comment line="682">
                    ignore the drags                    
                </comment>
                <comment line="686">
                    track the moving of the mouse.                    
                </comment>
                <comment line="1612">
                                        
                </comment>
                <comment line="1888">
                    Create this action with the appropriate identifier.                    
                </comment>
                <comment line="1919">
                    The operation to perform when this action is triggered.                    
                </comment>
                <comment line="1986">
                    Moves the caret from mark to dot                    
                </comment>
                <comment line="2100">
                    activates the hyperlink at offset                    
                </comment>
                <comment line="2118">
                    Invokes default action on the object in an element                    
                </comment>
                <comment line="2137">
                    Returns the root view for a document                    
                </comment>
                <comment line="2144">
                    Returns a view associated with an element                    
                </comment>
                <comment line="2173">
                    If possible acquires a lock on the Document.  If a lock has been
                     obtained a key will be retured that should be passed to
                     &lt;code&gt;unlock&lt;code&gt;.                    
                </comment>
                <comment line="2188">
                    Releases a lock previously obtained via &lt;code&gt;lock&lt;code&gt;.                    
                </comment>
                <comment line="2197">
                    The operation to perform when this action is triggered.                    
                </comment>
                <comment line="2267">
                                        
                </comment>
                <javadoc line="1479">
                    An abstract Action providing some convenience methods that may
                      be useful in inserting HTML into an existing document.
                      &lt;p&gt;NOTE: None of the convenience methods obtain a lock on the
                      document. If you have another thread modifying the text these
                      methods may have inconsistent behavior, or return the wrong thing.                    
                </javadoc>
                <method name="HTMLTextAction" type="constructor" line="1487">
                    <params>
                        <param name="name" type="String"/>
                    </params>
                </method>
                <javadoc line="1491">
                    @return HTMLDocument of &lt;code&gt;e&lt;/code&gt;.                    
                </javadoc>
                <method name="getHTMLDocument" type="HTMLDocument" line="1494">
                    <params>
                        <param name="e" type="JEditorPane"/>
                    </params>
                    <declaration name="d" type="Document" line="1495"/>
                    <scope line="1496"/>
                </method>
                <javadoc line="1502">
                    @return HTMLEditorKit for &lt;code&gt;e&lt;/code&gt;.                    
                </javadoc>
                <method name="getHTMLEditorKit" type="HTMLEditorKit" line="1505">
                    <params>
                        <param name="e" type="JEditorPane"/>
                    </params>
                    <declaration name="k" type="EditorKit" line="1506"/>
                    <scope line="1507"/>
                </method>
                <javadoc line="1513">
                    Returns an array of the Elements that contain &lt;code&gt;offset&lt;/code&gt;.
                      The first elements corresponds to the root.                    
                </javadoc>
                <method name="getElementsAt" type="Element[]" line="1517">
                    <params>
                        <param name="doc" type="HTMLDocument"/>
                        <param name="offset" type="int"/>
                    </params>
                </method>
                <javadoc line="1521">
                    Recursive method used by getElementsAt.                    
                </javadoc>
                <method name="getElementsAt" type="Element[]" line="1525">
                    <params>
                        <param name="parent" type="Element"/>
                        <param name="offset" type="int"/>
                        <param name="depth" type="int"/>
                    </params>
                    <scope line="1526">
                        <declaration name="retValue" type="Element[]" line="1527"/>
                    </scope>
                    <declaration name="retValue" type="Element[]" line="1531"/>
                </method>
                <javadoc line="1537">
                    Returns number of elements, starting at the deepest leaf, needed
                      to get to an element representing &lt;code&gt;tag&lt;/code&gt;. This will
                      return -1 if no elements is found representing &lt;code&gt;tag&lt;/code&gt;,
                      or 0 if the parent of the leaf at &lt;code&gt;offset&lt;/code&gt; represents
                      &lt;code&gt;tag&lt;/code&gt;.                    
                </javadoc>
                <method name="elementCountToTag" type="int" line="1545">
                    <params>
                        <param name="doc" type="HTMLDocument"/>
                        <param name="offset" type="int"/>
                        <param name="tag" type="HTML.Tag"/>
                    </params>
                    <declaration name="depth" type="int" line="1546"/>
                    <declaration name="e" type="Element" line="1547"/>
                    <scope line="1549"/>
                    <scope line="1553"/>
                </method>
                <javadoc line="1559">
                    Returns the deepest element at &lt;code&gt;offset&lt;/code&gt; matching
                      &lt;code&gt;tag&lt;/code&gt;.                    
                </javadoc>
                <method name="findElementMatchingTag" type="Element" line="1564">
                    <params>
                        <param name="doc" type="HTMLDocument"/>
                        <param name="offset" type="int"/>
                        <param name="tag" type="HTML.Tag"/>
                    </params>
                    <declaration name="e" type="Element" line="1565"/>
                    <declaration name="lastMatch" type="Element" line="1566"/>
                    <scope line="1567">
                        <scope line="1569"/>
                    </scope>
                </method>
            </class>
            <class name="InsertHTMLTextAction" line="1579">
                <extends class="HTMLTextAction"/>
                <comment line="682">
                    ignore the drags                    
                </comment>
                <comment line="686">
                    track the moving of the mouse.                    
                </comment>
                <comment line="1612">
                                        
                </comment>
                <comment line="1888">
                    Create this action with the appropriate identifier.                    
                </comment>
                <comment line="1919">
                    The operation to perform when this action is triggered.                    
                </comment>
                <comment line="1986">
                    Moves the caret from mark to dot                    
                </comment>
                <comment line="2100">
                    activates the hyperlink at offset                    
                </comment>
                <comment line="2118">
                    Invokes default action on the object in an element                    
                </comment>
                <comment line="2137">
                    Returns the root view for a document                    
                </comment>
                <comment line="2144">
                    Returns a view associated with an element                    
                </comment>
                <comment line="2173">
                    If possible acquires a lock on the Document.  If a lock has been
                     obtained a key will be retured that should be passed to
                     &lt;code&gt;unlock&lt;code&gt;.                    
                </comment>
                <comment line="2188">
                    Releases a lock previously obtained via &lt;code&gt;lock&lt;code&gt;.                    
                </comment>
                <comment line="2197">
                    The operation to perform when this action is triggered.                    
                </comment>
                <comment line="2267">
                                        
                </comment>
                <javadoc line="1579">
                    InsertHTMLTextAction can be used to insert an arbitrary string of HTML
                      into an existing HTML document. At least two HTML.Tags need to be
                      supplied. The first Tag, parentTag, identifies the parent in
                      the document to add the elements to. The second tag, addTag,
                      identifies the first tag that should be added to the document as
                      seen in the HTML string. One important thing to remember, is that
                      the parser is going to generate all the appropriate tags, even if
                      they aren&apos;t in the HTML string passed in.&lt;p&gt;
                      For example, lets say you wanted to create an action to insert
                      a table into the body. The parentTag would be HTML.Tag.BODY,
                      addTag would be HTML.Tag.TABLE, and the string could be something
                      like &amp;lt;table&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;/table&amp;gt;.
                      &lt;p&gt;There is also an option to supply an alternate parentTag and
                      addTag. These will be checked for if there is no parentTag at
                      offset.                    
                </javadoc>
                <method name="InsertHTMLTextAction" type="constructor" line="1598">
                    <params>
                        <param name="name" type="String"/>
                        <param name="html" type="String"/>
                        <param name="parentTag" type="HTML.Tag"/>
                        <param name="addTag" type="HTML.Tag"/>
                    </params>
                </method>
                <method name="InsertHTMLTextAction" type="constructor" line="1606">
                    <params>
                        <param name="name" type="String"/>
                        <param name="html" type="String"/>
                        <param name="parentTag" type="HTML.Tag"/>
                        <param name="addTag" type="HTML.Tag"/>
                        <param name="alternateParentTag" type="HTML.Tag"/>
                        <param name="alternateAddTag" type="HTML.Tag"/>
                    </params>
                </method>
                <method name="InsertHTMLTextAction" type="constructor" line="1617">
                    <params>
                        <param name="name" type="String"/>
                        <param name="html" type="String"/>
                        <param name="parentTag" type="HTML.Tag"/>
                        <param name="addTag" type="HTML.Tag"/>
                        <param name="alternateParentTag" type="HTML.Tag"/>
                        <param name="alternateAddTag" type="HTML.Tag"/>
                        <param name="adjustSelection" type="boolean"/>
                    </params>
                </method>
                <javadoc line="1627">
                    A cover for HTMLEditorKit.insertHTML. If an exception it
                      thrown it is wrapped in a RuntimeException and thrown.                    
                </javadoc>
                <method name="insertHTML" type="void" line="1633">
                    <params>
                        <param name="editor" type="JEditorPane"/>
                        <param name="doc" type="HTMLDocument"/>
                        <param name="offset" type="int"/>
                        <param name="html" type="String"/>
                        <param name="popDepth" type="int"/>
                        <param name="pushDepth" type="int"/>
                        <param name="addTag" type="HTML.Tag"/>
                    </params>
                    <scope line="1634"/>
                    <scope line="1638"/>
                    <scope line="1640"/>
                </method>
                <javadoc line="1645">
                    This is invoked when inserting at a boundary. It determines
                      the number of pops, and then the number of pushes that need
                      to be performed, and then invokes insertHTML.                    
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <method name="insertAtBoundary" type="void" line="1654">
                    <params>
                        <param name="editor" type="JEditorPane"/>
                        <param name="doc" type="HTMLDocument"/>
                        <param name="offset" type="int"/>
                        <param name="insertElement" type="Element"/>
                        <param name="html" type="String"/>
                        <param name="parentTag" type="HTML.Tag"/>
                        <param name="addTag" type="HTML.Tag"/>
                    </params>
                </method>
                <javadoc line="1659">
                    This is invoked when inserting at a boundary. It determines
                      the number of pops, and then the number of pushes that need
                      to be performed, and then invokes insertHTML.                    
                    <deprecated>
                        As of Java 2 platform v1.3, use insertAtBoundary                        
                    </deprecated>
                </javadoc>
                <method name="insertAtBoundry" type="void" line="1669">
                    <params>
                        <param name="editor" type="JEditorPane"/>
                        <param name="doc" type="HTMLDocument"/>
                        <param name="offset" type="int"/>
                        <param name="insertElement" type="Element"/>
                        <param name="html" type="String"/>
                        <param name="parentTag" type="HTML.Tag"/>
                        <param name="addTag" type="HTML.Tag"/>
                    </params>
                    <comment line="1671">
                        Find the common parent.                        
                    </comment>
                    <comment line="1685">
                        If inserting at the origin, the common parent is the
                         insertElement.                        
                    </comment>
                    <comment line="1690">
                        Determine how many pops to do.                        
                    </comment>
                    <comment line="1708">
                        And how many pushes                        
                    </comment>
                    <comment line="1718">
                        And insert!                        
                    </comment>
                    <declaration name="e" type="Element" line="1671"/>
                    <declaration name="commonParent" type="Element" line="1672"/>
                    <declaration name="isFirst" type="boolean" line="1673"/>
                    <scope line="1675">
                        <scope line="1678"/>
                    </scope>
                    <scope line="1683"/>
                    <scope line="1688">
                        <declaration name="pops" type="int" line="1690"/>
                        <declaration name="pushes" type="int" line="1691"/>
                        <scope line="1692">
                            <scope line="1694"/>
                        </scope>
                        <scope line="1699">
                            <scope line="1702"/>
                            <scope line="1710"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="1722">
                    If there is an Element with name &lt;code&gt;tag&lt;/code&gt; at
                      &lt;code&gt;offset&lt;/code&gt;, this will invoke either insertAtBoundary
                      or &lt;code&gt;insertHTML&lt;/code&gt;. This returns true if there is
                      a match, and one of the inserts is invoked.                    
                </javadoc>
                <method name="insertIntoTag" type="boolean" line="1730">
                    <params>
                        <param name="editor" type="JEditorPane"/>
                        <param name="doc" type="HTMLDocument"/>
                        <param name="offset" type="int"/>
                        <param name="tag" type="HTML.Tag"/>
                        <param name="addTag" type="HTML.Tag"/>
                    </params>
                    <comment line="1729">
                                                
                    </comment>
                    <declaration name="e" type="Element" line="1731"/>
                    <scope line="1732"/>
                    <scope line="1737">
                        <declaration name="depth" type="int" line="1738"/>
                        <scope line="1739"/>
                    </scope>
                </method>
                <javadoc line="1747">
                    Called after an insertion to adjust the selection.                    
                </javadoc>
                <method name="adjustSelection" type="void" line="1752">
                    <params>
                        <param name="pane" type="JEditorPane"/>
                        <param name="doc" type="HTMLDocument"/>
                        <param name="startOffset" type="int"/>
                        <param name="oldLength" type="int"/>
                    </params>
                    <comment line="1751">
                                                
                    </comment>
                    <declaration name="newLength" type="int" line="1753"/>
                    <scope line="1754">
                        <scope line="1755">
                            <declaration name="text" type="String" line="1756"/>
                            <scope line="1757"/>
                            <scope line="1759"/>
                            <scope line="1763"/>
                            <scope line="1766"/>
                        </scope>
                        <scope line="1770"/>
                    </scope>
                </method>
                <javadoc line="1776">
                    Inserts the HTML into the document.                    
                    <param>
                        ae the event                        
                    </param>
                </javadoc>
                <method name="actionPerformed" type="void" line="1781">
                    <params>
                        <param name="ae" type="ActionEvent"/>
                    </params>
                    <comment line="1789">
                        Try first choice                        
                    </comment>
                    <comment line="1792">
                        Then alternate.                        
                    </comment>
                    <declaration name="editor" type="JEditorPane" line="1782"/>
                    <scope line="1783">
                        <declaration name="doc" type="HTMLDocument" line="1784"/>
                        <declaration name="offset" type="int" line="1785"/>
                        <declaration name="length" type="int" line="1786"/>
                        <declaration name="inserted" type="boolean" line="1787"/>
                        <scope line="1790"/>
                        <scope line="1796"/>
                        <scope line="1799"/>
                    </scope>
                </method>
                <declaration name="html" type="String" line="1805"/>
                <javadoc line="1805">
                    HTML to insert.                    
                </javadoc>
                <declaration name="parentTag" type="HTML.Tag" line="1807"/>
                <javadoc line="1807">
                    Tag to check for in the document.                    
                </javadoc>
                <declaration name="addTag" type="HTML.Tag" line="1809"/>
                <javadoc line="1809">
                    Tag in HTML to start adding tags from.                    
                </javadoc>
                <declaration name="alternateParentTag" type="HTML.Tag" line="1811"/>
                <javadoc line="1811">
                    Alternate Tag to check for in the document if parentTag is
                      not found.                    
                </javadoc>
                <declaration name="alternateAddTag" type="HTML.Tag" line="1814"/>
                <javadoc line="1814">
                    Alternate tag in HTML to start adding tags from if parentTag
                      is not found and alternateParentTag is found.                    
                </javadoc>
                <declaration name="adjustSelection" type="boolean" line="1817"/>
                <javadoc line="1817">
                    True indicates the selection should be adjusted after an insert.                    
                </javadoc>
            </class>
            <class name="InsertHRAction" line="1822">
                <extends class="InsertHTMLTextAction"/>
                <comment line="682">
                    ignore the drags                    
                </comment>
                <comment line="686">
                    track the moving of the mouse.                    
                </comment>
                <comment line="1612">
                                        
                </comment>
                <comment line="1888">
                    Create this action with the appropriate identifier.                    
                </comment>
                <comment line="1919">
                    The operation to perform when this action is triggered.                    
                </comment>
                <comment line="1986">
                    Moves the caret from mark to dot                    
                </comment>
                <comment line="2100">
                    activates the hyperlink at offset                    
                </comment>
                <comment line="2118">
                    Invokes default action on the object in an element                    
                </comment>
                <comment line="2137">
                    Returns the root view for a document                    
                </comment>
                <comment line="2144">
                    Returns a view associated with an element                    
                </comment>
                <comment line="2173">
                    If possible acquires a lock on the Document.  If a lock has been
                     obtained a key will be retured that should be passed to
                     &lt;code&gt;unlock&lt;code&gt;.                    
                </comment>
                <comment line="2188">
                    Releases a lock previously obtained via &lt;code&gt;lock&lt;code&gt;.                    
                </comment>
                <comment line="2197">
                    The operation to perform when this action is triggered.                    
                </comment>
                <comment line="2267">
                                        
                </comment>
                <javadoc line="1822">
                    InsertHRAction is special, at actionPerformed time it will determine
                      the parent HTML.Tag based on the paragraph element at the selection
                      start.                    
                </javadoc>
                <method name="InsertHRAction" type="constructor" line="1828"/>
                <javadoc line="1833">
                    Inserts the HTML into the document.                    
                    <param>
                        ae the event                        
                    </param>
                </javadoc>
                <method name="actionPerformed" type="void" line="1838">
                    <params>
                        <param name="ae" type="ActionEvent"/>
                    </params>
                    <declaration name="editor" type="JEditorPane" line="1839"/>
                    <scope line="1840">
                        <declaration name="doc" type="HTMLDocument" line="1841"/>
                        <declaration name="offset" type="int" line="1842"/>
                        <declaration name="paragraph" type="Element" line="1843"/>
                        <scope line="1844"/>
                    </scope>
                </method>
            </class>
            <method name="getAttrValue" type="Object" line="1858">
                <params>
                    <param name="attr" type="AttributeSet"/>
                    <param name="key" type="HTML.Attribute"/>
                </params>
                <declaration name="names" type="Enumeration" line="1859"/>
                <scope line="1860">
                    <declaration name="nextKey" type="Object" line="1861"/>
                    <declaration name="nextVal" type="Object" line="1862"/>
                    <scope line="1863">
                        <declaration name="value" type="Object" line="1864"/>
                        <scope line="1865"/>
                    </scope>
                    <scope line="1868"/>
                </scope>
            </method>
            <class name="NavigateLinkAction" line="1881">
                <extends class="TextAction"/>
                <comment line="682">
                    ignore the drags                    
                </comment>
                <comment line="686">
                    track the moving of the mouse.                    
                </comment>
                <comment line="1612">
                                        
                </comment>
                <comment line="1888">
                    Create this action with the appropriate identifier.                    
                </comment>
                <comment line="1919">
                    The operation to perform when this action is triggered.                    
                </comment>
                <comment line="1986">
                    Moves the caret from mark to dot                    
                </comment>
                <comment line="2100">
                    activates the hyperlink at offset                    
                </comment>
                <comment line="2118">
                    Invokes default action on the object in an element                    
                </comment>
                <comment line="2137">
                    Returns the root view for a document                    
                </comment>
                <comment line="2144">
                    Returns a view associated with an element                    
                </comment>
                <comment line="2173">
                    If possible acquires a lock on the Document.  If a lock has been
                     obtained a key will be retured that should be passed to
                     &lt;code&gt;unlock&lt;code&gt;.                    
                </comment>
                <comment line="2188">
                    Releases a lock previously obtained via &lt;code&gt;lock&lt;code&gt;.                    
                </comment>
                <comment line="2197">
                    The operation to perform when this action is triggered.                    
                </comment>
                <comment line="2267">
                                        
                </comment>
                <implements interface="CaretListener"/>
                <declaration name="focusPainter" type="FocusHighlightPainter" line="1883"/>
                <declaration name="focusBack" type="boolean" line="1885"/>
                <method name="NavigateLinkAction" type="constructor" line="1890">
                    <params>
                        <param name="actionName" type="String"/>
                    </params>
                </method>
                <javadoc line="1895">
                    Called when the caret position is updated.                    
                    <param>
                        e the caret event                        
                    </param>
                </javadoc>
                <method name="caretUpdate" type="void" line="1900">
                    <params>
                        <param name="e" type="CaretEvent"/>
                    </params>
                    <comment line="1908">
                        TODO: The AccessibleContext for the editor should register
                         as a listener for CaretEvents and forward the events to
                         assistive technologies listening for such events.                        
                    </comment>
                    <declaration name="src" type="Object" line="1901"/>
                    <scope line="1902">
                        <declaration name="comp" type="JTextComponent" line="1903"/>
                        <declaration name="kit" type="HTMLEditorKit" line="1904"/>
                        <scope line="1905"/>
                    </scope>
                </method>
                <method name="actionPerformed" type="void" line="1921">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                    <comment line="1934">
                        TODO: Should start successive iterations from the
                         current caret position.                        
                    </comment>
                    <comment line="1941">
                        highlight the next link or object after the current caret position                        
                    </comment>
                    <comment line="1964">
                        focus forward                        
                    </comment>
                    <declaration name="comp" type="JTextComponent" line="1922"/>
                    <scope line="1923"/>
                    <declaration name="doc" type="Document" line="1927"/>
                    <declaration name="kit" type="HTMLEditorKit" line="1928"/>
                    <scope line="1929"/>
                    <declaration name="ei" type="ElementIterator" line="1935"/>
                    <declaration name="currentOffset" type="int" line="1936"/>
                    <declaration name="prevStartOffset" type="int" line="1937"/>
                    <declaration name="prevEndOffset" type="int" line="1938"/>
                    <declaration name="nextElement" type="Element" line="1941"/>
                    <scope line="1942">
                        <declaration name="name" type="String" line="1943"/>
                        <declaration name="attr" type="AttributeSet" line="1944"/>
                        <declaration name="href" type="Object" line="1946"/>
                        <scope line="1947"/>
                        <declaration name="elementOffset" type="int" line="1951"/>
                        <scope line="1952">
                            <scope line="1954"/>
                        </scope>
                        <scope line="1963">
                            <scope line="1964"/>
                        </scope>
                    </scope>
                    <scope line="1977"/>
                </method>
                <method name="moveCaretPosition" type="void" line="1989">
                    <params>
                        <param name="comp" type="JTextComponent"/>
                        <param name="kit" type="HTMLEditorKit"/>
                        <param name="mark" type="int"/>
                        <param name="dot" type="int"/>
                    </params>
                    <declaration name="h" type="Highlighter" line="1990"/>
                    <scope line="1991">
                        <declaration name="p0" type="int" line="1992"/>
                        <declaration name="p1" type="int" line="1993"/>
                        <scope line="1994">
                            <scope line="1995"/>
                            <scope line="1997"/>
                        </scope>
                        <scope line="2001"/>
                    </scope>
                </method>
                <method name="getHTMLEditorKit" type="HTMLEditorKit" line="2006">
                    <params>
                        <param name="comp" type="JTextComponent"/>
                    </params>
                    <scope line="2007">
                        <declaration name="kit" type="EditorKit" line="2008"/>
                        <scope line="2009"/>
                    </scope>
                </method>
                <class name="FocusHighlightPainter" line="2016">
                    <extends class="DefaultHighlighter.DefaultHighlightPainter"/>
                    <javadoc line="2016">
                        A highlight painter that draws a one-pixel border around
                          the highlighted area.                        
                    </javadoc>
                    <method name="FocusHighlightPainter" type="constructor" line="2023">
                        <params>
                            <param name="color" type="Color"/>
                        </params>
                    </method>
                    <javadoc line="2027">
                        Paints a portion of a highlight.                        
                        <param>
                            g the graphics context                            
                        </param>
                        <param>
                            offs0 the starting model offset &gt;= 0                            
                        </param>
                        <param>
                            offs1 the ending model offset &gt;= offs1                            
                        </param>
                        <param>
                            bounds the bounding box of the view, which is not
                              necessarily the region to paint.                            
                        </param>
                        <param>
                            c the editor                            
                        </param>
                        <param>
                            view View painting for                            
                        </param>
                        <return>
                            region in which drawing occurred                            
                        </return>
                    </javadoc>
                    <method name="paintLayer" type="Shape" line="2040">
                        <params>
                            <param name="g" type="Graphics"/>
                            <param name="offs0" type="int"/>
                            <param name="offs1" type="int"/>
                            <param name="bounds" type="Shape"/>
                            <param name="c" type="JTextComponent"/>
                            <param name="view" type="View"/>
                        </params>
                        <comment line="2053">
                            Contained in view, can just use bounds.                            
                        </comment>
                        <comment line="2065">
                            Should only render part of View.                            
                        </comment>
                        <comment line="2067">
                            --- determine locations ---                            
                        </comment>
                        <comment line="2076">
                            can&apos;t render                            
                        </comment>
                        <comment line="2079">
                            Only if exception                            
                        </comment>
                        <declaration name="color" type="Color" line="2042"/>
                        <scope line="2044"/>
                        <scope line="2047"/>
                        <scope line="2051">
                            <declaration name="alloc" type="Rectangle" line="2053"/>
                            <scope line="2054"/>
                            <scope line="2057"/>
                        </scope>
                        <scope line="2063">
                            <scope line="2065">
                                <declaration name="shape" type="Shape" line="2067"/>
                                <declaration name="r" type="Rectangle" line="2070"/>
                            </scope>
                            <scope line="2074"/>
                        </scope>
                    </method>
                </class>
            </class>
            <class name="ActivateLinkAction" line="2090">
                <extends class="TextAction"/>
                <comment line="682">
                    ignore the drags                    
                </comment>
                <comment line="686">
                    track the moving of the mouse.                    
                </comment>
                <comment line="1612">
                                        
                </comment>
                <comment line="1888">
                    Create this action with the appropriate identifier.                    
                </comment>
                <comment line="1919">
                    The operation to perform when this action is triggered.                    
                </comment>
                <comment line="1986">
                    Moves the caret from mark to dot                    
                </comment>
                <comment line="2100">
                    activates the hyperlink at offset                    
                </comment>
                <comment line="2118">
                    Invokes default action on the object in an element                    
                </comment>
                <comment line="2137">
                    Returns the root view for a document                    
                </comment>
                <comment line="2144">
                    Returns a view associated with an element                    
                </comment>
                <comment line="2173">
                    If possible acquires a lock on the Document.  If a lock has been
                     obtained a key will be retured that should be passed to
                     &lt;code&gt;unlock&lt;code&gt;.                    
                </comment>
                <comment line="2188">
                    Releases a lock previously obtained via &lt;code&gt;lock&lt;code&gt;.                    
                </comment>
                <comment line="2197">
                    The operation to perform when this action is triggered.                    
                </comment>
                <comment line="2267">
                                        
                </comment>
                <javadoc line="2092">
                    Create this action with the appropriate identifier.                    
                </javadoc>
                <method name="ActivateLinkAction" type="constructor" line="2095">
                    <params>
                        <param name="actionName" type="String"/>
                    </params>
                </method>
                <method name="activateLink" type="void" line="2103">
                    <params>
                        <param name="href" type="String"/>
                        <param name="doc" type="HTMLDocument"/>
                        <param name="editor" type="JEditorPane"/>
                        <param name="offset" type="int"/>
                    </params>
                    <scope line="2104">
                        <declaration name="page" type="URL" line="2105"/>
                        <declaration name="url" type="URL" line="2107"/>
                        <declaration name="linkEvent" type="HyperlinkEvent" line="2108"/>
                    </scope>
                    <scope line="2113"/>
                </method>
                <method name="doObjectAction" type="void" line="2120">
                    <params>
                        <param name="editor" type="JEditorPane"/>
                        <param name="elem" type="Element"/>
                    </params>
                    <declaration name="view" type="View" line="2121"/>
                    <scope line="2122">
                        <declaration name="comp" type="Component" line="2123"/>
                        <scope line="2124">
                            <declaration name="ac" type="AccessibleContext" line="2125"/>
                            <scope line="2126">
                                <declaration name="aa" type="AccessibleAction" line="2127"/>
                                <scope line="2128"/>
                            </scope>
                        </scope>
                    </scope>
                </method>
                <method name="getRootView" type="View" line="2139">
                    <params>
                        <param name="editor" type="JEditorPane"/>
                    </params>
                </method>
                <method name="getView" type="View" line="2146">
                    <params>
                        <param name="editor" type="JEditorPane"/>
                        <param name="elem" type="Element"/>
                    </params>
                    <declaration name="lock" type="Object" line="2147"/>
                    <scope line="2148">
                        <declaration name="rootView" type="View" line="2149"/>
                        <declaration name="start" type="int" line="2150"/>
                        <scope line="2151"/>
                    </scope>
                    <scope line="2155"/>
                </method>
                <method name="getView" type="View" line="2160">
                    <params>
                        <param name="parent" type="View"/>
                        <param name="elem" type="Element"/>
                        <param name="start" type="int"/>
                    </params>
                    <scope line="2161"/>
                    <declaration name="index" type="int" line="2164"/>
                    <scope line="2166"/>
                </method>
                <method name="lock" type="Object" line="2177">
                    <params>
                        <param name="editor" type="JEditorPane"/>
                    </params>
                    <declaration name="document" type="Document" line="2178"/>
                    <scope line="2180"/>
                </method>
                <method name="unlock" type="void" line="2190">
                    <params>
                        <param name="key" type="Object"/>
                    </params>
                    <scope line="2191"/>
                </method>
                <method name="actionPerformed" type="void" line="2199">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                    <comment line="2217">
                        invoke the next link or object action                        
                    </comment>
                    <declaration name="c" type="JTextComponent" line="2201"/>
                    <scope line="2202"/>
                    <declaration name="editor" type="JEditorPane" line="2205"/>
                    <declaration name="d" type="Document" line="2207"/>
                    <scope line="2208"/>
                    <declaration name="doc" type="HTMLDocument" line="2211"/>
                    <declaration name="ei" type="ElementIterator" line="2213"/>
                    <declaration name="currentOffset" type="int" line="2214"/>
                    <declaration name="urlString" type="String" line="2217"/>
                    <declaration name="objString" type="String" line="2218"/>
                    <declaration name="currentElement" type="Element" line="2219"/>
                    <scope line="2220">
                        <declaration name="name" type="String" line="2221"/>
                        <declaration name="attr" type="AttributeSet" line="2222"/>
                        <declaration name="href" type="Object" line="2224"/>
                        <scope line="2225">
                            <scope line="2227"/>
                        </scope>
                        <scope line="2232">
                            <declaration name="obj" type="Object" line="2233"/>
                            <scope line="2234">
                                <scope line="2236"/>
                            </scope>
                        </scope>
                    </scope>
                </method>
            </class>
            <method name="getBodyElementStart" type="int" line="2247">
                <params>
                    <param name="comp" type="JTextComponent"/>
                </params>
                <declaration name="rootElement" type="Element" line="2248"/>
                <scope line="2249">
                    <declaration name="currElement" type="Element" line="2250"/>
                    <scope line="2251"/>
                </scope>
            </method>
            <class name="BeginAction" line="2264">
                <extends class="TextAction"/>
                <comment line="682">
                    ignore the drags                    
                </comment>
                <comment line="686">
                    track the moving of the mouse.                    
                </comment>
                <comment line="1612">
                                        
                </comment>
                <comment line="1888">
                    Create this action with the appropriate identifier.                    
                </comment>
                <comment line="1919">
                    The operation to perform when this action is triggered.                    
                </comment>
                <comment line="1986">
                    Moves the caret from mark to dot                    
                </comment>
                <comment line="2100">
                    activates the hyperlink at offset                    
                </comment>
                <comment line="2118">
                    Invokes default action on the object in an element                    
                </comment>
                <comment line="2137">
                    Returns the root view for a document                    
                </comment>
                <comment line="2144">
                    Returns a view associated with an element                    
                </comment>
                <comment line="2173">
                    If possible acquires a lock on the Document.  If a lock has been
                     obtained a key will be retured that should be passed to
                     &lt;code&gt;unlock&lt;code&gt;.                    
                </comment>
                <comment line="2188">
                    Releases a lock previously obtained via &lt;code&gt;lock&lt;code&gt;.                    
                </comment>
                <comment line="2197">
                    The operation to perform when this action is triggered.                    
                </comment>
                <comment line="2267">
                                        
                </comment>
                <method name="BeginAction" type="constructor" line="2267">
                    <params>
                        <param name="nm" type="String"/>
                        <param name="select" type="boolean"/>
                    </params>
                </method>
                <javadoc line="2272">
                    The operation to perform when this action is triggered.                    
                </javadoc>
                <method name="actionPerformed" type="void" line="2273">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                    <declaration name="target" type="JTextComponent" line="2274"/>
                    <declaration name="bodyStart" type="int" line="2275"/>
                    <scope line="2277">
                        <scope line="2278"/>
                        <scope line="2280"/>
                    </scope>
                </method>
                <declaration name="select" type="boolean" line="2286"/>
            </class>
        </class>
    </source>