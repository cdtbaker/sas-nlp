<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text">
        <import package="java.awt"/>
        <import package="java.util"/>
        <import package="java.io"/>
        <import package="javax.swing.SwingUtilities"/>
        <import package="javax.swing.event.ChangeListener"/>
        <import package="javax.swing.event.EventListenerList"/>
        <import package="javax.swing.event.ChangeEvent"/>
        <import package="java.lang.ref.WeakReference"/>
        <import package="java.util.WeakHashMap"/>
        <import package="sun.font.FontUtilities"/>
        <class name="StyleContext" line="40">
            <comment line="288">
                --- AttributeContext methods --------------------                
            </comment>
            <comment line="462">
                --- local methods -----------------------------------------------                
            </comment>
            <comment line="556">
                --- serialization ---------------------------------------------                
            </comment>
            <comment line="724">
                --- variables ---------------------------------------------------                
            </comment>
            <implements interface="Serializable"/>
            <implements interface="AbstractDocument.AttributeContext"/>
            <javadoc line="40">
                A pool of styles and their associated resources.  This class determines
                  the lifetime of a group of resources by being a container that holds
                  caches for various resources such as font and color that get reused
                  by the various style definitions.  This can be shared by multiple
                  documents if desired to maximize the sharing of related resources.
                  &lt;p&gt;
                  This class also provides efficient support for small sets of attributes
                  and compresses them by sharing across uses and taking advantage of
                  their immutable nature.  Since many styles are replicated, the potential
                  for sharing is significant, and copies can be extremely cheap.
                  Larger sets reduce the possibility of sharing, and therefore revert
                  automatically to a less space-efficient implementation.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <author>
                    Timothy Prinzing                    
                </author>
            </javadoc>
            <javadoc line="67">
                Returns default AttributeContext shared by all documents that
                  don&apos;t bother to define/supply their own context.                
                <return>
                    the context                    
                </return>
            </javadoc>
            <method name="getDefaultStyleContext" type="StyleContext" line="73">
                <scope line="74"/>
            </method>
            <declaration name="defaultContext" type="StyleContext" line="80"/>
            <javadoc line="82">
                Creates a new StyleContext object.                
            </javadoc>
            <method name="StyleContext" type="constructor" line="85"/>
            <javadoc line="90">
                Adds a new style into the style hierarchy.  Style attributes
                  resolve from bottom up so an attribute specified in a child
                  will override an attribute specified in the parent.                
                <param>
                    nm   the name of the style (must be unique within the
                      collection of named styles in the document).  The name may
                      be null if the style is unnamed, but the caller is responsible
                      for managing the reference returned as an unnamed style can't
                      be fetched by name.  An unnamed style may be useful for things
                      like character attribute overrides such as found in a style
                      run.                    
                </param>
                <param>
                    parent the parent style.  This may be null if unspecified
                      attributes need not be resolved in some other style.                    
                </param>
                <return>
                    the created style                    
                </return>
            </javadoc>
            <method name="addStyle" type="Style" line="106">
                <params>
                    <param name="nm" type="String"/>
                    <param name="parent" type="Style"/>
                </params>
                <comment line="110">
                    add a named style, a class of attributes                    
                </comment>
                <declaration name="style" type="Style" line="107"/>
                <scope line="108"/>
            </method>
            <javadoc line="115">
                Removes a named style previously added to the document.                
                <param>
                    nm  the name of the style to remove                    
                </param>
            </javadoc>
            <method name="removeStyle" type="void" line="120">
                <params>
                    <param name="nm" type="String"/>
                </params>
            </method>
            <javadoc line="124">
                Fetches a named style previously added to the document                
                <param>
                    nm  the name of the style                    
                </param>
                <return>
                    the style                    
                </return>
            </javadoc>
            <method name="getStyle" type="Style" line="130">
                <params>
                    <param name="nm" type="String"/>
                </params>
            </method>
            <javadoc line="134">
                Fetches the names of the styles defined.                
                <return>
                    the list of names as an enumeration                    
                </return>
            </javadoc>
            <method name="getStyleNames" type="Enumeration<?>" line="139"/>
            <javadoc line="143">
                Adds a listener to track when styles are added
                  or removed.                
                <param>
                    l the change listener                    
                </param>
            </javadoc>
            <method name="addChangeListener" type="void" line="149">
                <params>
                    <param name="l" type="ChangeListener"/>
                </params>
            </method>
            <javadoc line="153">
                Removes a listener that was tracking styles being
                  added or removed.                
                <param>
                    l the change listener                    
                </param>
            </javadoc>
            <method name="removeChangeListener" type="void" line="159">
                <params>
                    <param name="l" type="ChangeListener"/>
                </params>
            </method>
            <javadoc line="163">
                Returns an array of all the &lt;code&gt;ChangeListener&lt;/code&gt;s added
                  to this StyleContext with addChangeListener().                
                <return>
                    all of the <code>ChangeListener</code>s added or an empty
                      array if no listeners have been added                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getChangeListeners" type="ChangeListener[]" line="171"/>
            <javadoc line="175">
                Gets the font from an attribute set.  This is
                  implemented to try and fetch a cached font
                  for the given AttributeSet, and if that fails
                  the font features are resolved and the
                  font is fetched from the low-level font cache.                
                <param>
                    attr the attribute set                    
                </param>
                <return>
                    the font                    
                </return>
            </javadoc>
            <method name="getFont" type="Font" line="185">
                <params>
                    <param name="attr" type="AttributeSet"/>
                </params>
                <comment line="187">
                    PENDING(prinz) add cache behavior                    
                </comment>
                <comment line="198">
                    if either superscript or subscript is
                     is set, we need to reduce the font size
                     by 2.                    
                </comment>
                <declaration name="style" type="int" line="187"/>
                <scope line="188"/>
                <scope line="191"/>
                <declaration name="family" type="String" line="194"/>
                <declaration name="size" type="int" line="195"/>
                <scope line="203"/>
            </method>
            <javadoc line="210">
                Takes a set of attributes and turn it into a foreground color
                  specification.  This might be used to specify things
                  like brighter, more hue, etc.  By default it simply returns
                  the value specified by the StyleConstants.Foreground attribute.                
                <param>
                    attr the set of attributes                    
                </param>
                <return>
                    the color                    
                </return>
            </javadoc>
            <method name="getForeground" type="Color" line="219">
                <params>
                    <param name="attr" type="AttributeSet"/>
                </params>
            </method>
            <javadoc line="223">
                Takes a set of attributes and turn it into a background color
                  specification.  This might be used to specify things
                  like brighter, more hue, etc.  By default it simply returns
                  the value specified by the StyleConstants.Background attribute.                
                <param>
                    attr the set of attributes                    
                </param>
                <return>
                    the color                    
                </return>
            </javadoc>
            <method name="getBackground" type="Color" line="232">
                <params>
                    <param name="attr" type="AttributeSet"/>
                </params>
            </method>
            <javadoc line="236">
                Gets a new font.  This returns a Font from a cache
                  if a cached font exists.  If not, a Font is added to
                  the cache.  This is basically a low-level cache for
                  1.1 font features.                
                <param>
                    family the font family (such as "Monospaced")                    
                </param>
                <param>
                    style the style of the font (such as Font.PLAIN)                    
                </param>
                <param>
                    size the point size >= 1                    
                </param>
                <return>
                    the new font                    
                </return>
            </javadoc>
            <method name="getFont" type="Font" line="247">
                <params>
                    <param name="family" type="String"/>
                    <param name="style" type="int"/>
                    <param name="size" type="int"/>
                </params>
                <comment line="252">
                    haven&apos;t seen this one yet.                    
                </comment>
                <declaration name="f" type="Font" line="249"/>
                <scope line="250">
                    <declaration name="defaultStyle" type="Style" line="252"/>
                    <scope line="254">
                        <declaration name="FONT_ATTRIBUTE_KEY" type="String" line="255"/>
                        <declaration name="defaultFont" type="Font" line="256"/>
                        <scope line="259"/>
                    </scope>
                    <scope line="263"/>
                    <scope line="266"/>
                    <declaration name="key" type="FontKey" line="269"/>
                </scope>
            </method>
            <javadoc line="275">
                Returns font metrics for a font.                
                <param>
                    f the font                    
                </param>
                <return>
                    the metrics                    
                </return>
            </javadoc>
            <method name="getFontMetrics" type="FontMetrics" line="281">
                <params>
                    <param name="f" type="Font"/>
                </params>
                <comment line="283">
                    The Toolkit implementations cache, so we just forward
                     to the default toolkit.                    
                </comment>
            </method>
            <javadoc line="289">
                Adds an attribute to the given set, and returns
                  the new representative set.
                  &lt;p&gt;
                  This method is thread safe, although most Swing methods
                  are not. Please see
                  &lt;A HREF=&quot;http://java.sun.com/docs/books/tutorial/uiswing/misc/threads.html&quot;&gt;How
                  to Use Threads&lt;/A&gt; for more information.                
                <param>
                    old the old attribute set                    
                </param>
                <param>
                    name the non-null attribute name                    
                </param>
                <param>
                    value the attribute value                    
                </param>
                <return>
                    the updated attribute set                    
                </return>
                <see>
                    MutableAttributeSet#addAttribute                    
                </see>
            </javadoc>
            <method name="addAttribute" type="AttributeSet" line="304">
                <params>
                    <param name="old" type="AttributeSet"/>
                    <param name="name" type="Object"/>
                    <param name="value" type="Object"/>
                </params>
                <comment line="307">
                    build a search key and find/create an immutable and unique
                     set.                    
                </comment>
                <scope line="305"/>
                <declaration name="ma" type="MutableAttributeSet" line="314"/>
            </method>
            <javadoc line="319">
                Adds a set of attributes to the element.
                  &lt;p&gt;
                  This method is thread safe, although most Swing methods
                  are not. Please see
                  &lt;A HREF=&quot;http://java.sun.com/docs/books/tutorial/uiswing/misc/threads.html&quot;&gt;How
                  to Use Threads&lt;/A&gt; for more information.                
                <param>
                    old the old attribute set                    
                </param>
                <param>
                    attr the attributes to add                    
                </param>
                <return>
                    the updated attribute set                    
                </return>
                <see>
                    MutableAttributeSet#addAttribute                    
                </see>
            </javadoc>
            <method name="addAttributes" type="AttributeSet" line="332">
                <params>
                    <param name="old" type="AttributeSet"/>
                    <param name="attr" type="AttributeSet"/>
                </params>
                <comment line="335">
                    build a search key and find/create an immutable and unique
                     set.                    
                </comment>
                <scope line="333"/>
                <declaration name="ma" type="MutableAttributeSet" line="342"/>
            </method>
            <javadoc line="347">
                Removes an attribute from the set.
                  &lt;p&gt;
                  This method is thread safe, although most Swing methods
                  are not. Please see
                  &lt;A HREF=&quot;http://java.sun.com/docs/books/tutorial/uiswing/misc/threads.html&quot;&gt;How
                  to Use Threads&lt;/A&gt; for more information.                
                <param>
                    old the old set of attributes                    
                </param>
                <param>
                    name the non-null attribute name                    
                </param>
                <return>
                    the updated attribute set                    
                </return>
                <see>
                    MutableAttributeSet#removeAttribute                    
                </see>
            </javadoc>
            <method name="removeAttribute" type="AttributeSet" line="360">
                <params>
                    <param name="old" type="AttributeSet"/>
                    <param name="name" type="Object"/>
                </params>
                <comment line="363">
                    build a search key and find/create an immutable and unique
                     set.                    
                </comment>
                <scope line="361"/>
                <declaration name="ma" type="MutableAttributeSet" line="370"/>
            </method>
            <javadoc line="375">
                Removes a set of attributes for the element.
                  &lt;p&gt;
                  This method is thread safe, although most Swing methods
                  are not. Please see
                  &lt;A HREF=&quot;http://java.sun.com/docs/books/tutorial/uiswing/misc/threads.html&quot;&gt;How
                  to Use Threads&lt;/A&gt; for more information.                
                <param>
                    old the old attribute set                    
                </param>
                <param>
                    names the attribute names                    
                </param>
                <return>
                    the updated attribute set                    
                </return>
                <see>
                    MutableAttributeSet#removeAttributes                    
                </see>
            </javadoc>
            <method name="removeAttributes" type="AttributeSet" line="388">
                <params>
                    <param name="old" type="AttributeSet"/>
                    <param name="names" type="Enumeration<?>"/>
                </params>
                <comment line="391">
                    build a search key and find/create an immutable and unique
                     set.                    
                </comment>
                <scope line="389"/>
                <declaration name="ma" type="MutableAttributeSet" line="398"/>
            </method>
            <javadoc line="403">
                Removes a set of attributes for the element.
                  &lt;p&gt;
                  This method is thread safe, although most Swing methods
                  are not. Please see
                  &lt;A HREF=&quot;http://java.sun.com/docs/books/tutorial/uiswing/misc/threads.html&quot;&gt;How
                  to Use Threads&lt;/A&gt; for more information.                
                <param>
                    old the old attribute set                    
                </param>
                <param>
                    attrs the attributes                    
                </param>
                <return>
                    the updated attribute set                    
                </return>
                <see>
                    MutableAttributeSet#removeAttributes                    
                </see>
            </javadoc>
            <method name="removeAttributes" type="AttributeSet" line="416">
                <params>
                    <param name="old" type="AttributeSet"/>
                    <param name="attrs" type="AttributeSet"/>
                </params>
                <comment line="419">
                    build a search key and find/create an immutable and unique
                     set.                    
                </comment>
                <scope line="417"/>
                <declaration name="ma" type="MutableAttributeSet" line="426"/>
            </method>
            <javadoc line="431">
                Fetches an empty AttributeSet.                
                <return>
                    the set                    
                </return>
            </javadoc>
            <method name="getEmptySet" type="AttributeSet" line="436"/>
            <javadoc line="440">
                Returns a set no longer needed by the MutableAttributeSet implmentation.
                  This is useful for operation under 1.1 where there are no weak
                  references.  This would typically be called by the finalize method
                  of the MutableAttributeSet implementation.
                  &lt;p&gt;
                  This method is thread safe, although most Swing methods
                  are not. Please see
                  &lt;A HREF=&quot;http://java.sun.com/docs/books/tutorial/uiswing/misc/threads.html&quot;&gt;How
                  to Use Threads&lt;/A&gt; for more information.                
                <param>
                    a the set to reclaim                    
                </param>
            </javadoc>
            <method name="reclaim" type="void" line="453">
                <params>
                    <param name="a" type="AttributeSet"/>
                </params>
                <comment line="456">
                    force WeakHashMap to expunge stale entries                    
                </comment>
                <comment line="458">
                    if current thread is not event dispatching thread
                     do not bother with expunging stale entries.                    
                </comment>
                <scope line="454"/>
            </method>
            <javadoc line="463">
                Returns the maximum number of key/value pairs to try and
                  compress into unique/immutable sets.  Any sets above this
                  limit will use hashtables and be a MutableAttributeSet.                
                <return>
                    the threshold                    
                </return>
            </javadoc>
            <method name="getCompressionThreshold" type="int" line="470"/>
            <javadoc line="474">
                Create a compact set of attributes that might be shared.
                  This is a hook for subclasses that want to alter the
                  behavior of SmallAttributeSet.  This can be reimplemented
                  to return an AttributeSet that provides some sort of
                  attribute conversion.                
                <param>
                    a The set of attributes to be represented in the
                      the compact form.                    
                </param>
            </javadoc>
            <method name="createSmallAttributeSet" type="SmallAttributeSet" line="484">
                <params>
                    <param name="a" type="AttributeSet"/>
                </params>
            </method>
            <javadoc line="488">
                Create a large set of attributes that should trade off
                  space for time.  This set will not be shared.  This is
                  a hook for subclasses that want to alter the behavior
                  of the larger attribute storage format (which is
                  SimpleAttributeSet by default).   This can be reimplemented
                  to return a MutableAttributeSet that provides some sort of
                  attribute conversion.                
                <param>
                    a The set of attributes to be represented in the
                      the larger form.                    
                </param>
            </javadoc>
            <method name="createLargeAttributeSet" type="MutableAttributeSet" line="500">
                <params>
                    <param name="a" type="AttributeSet"/>
                </params>
            </method>
            <javadoc line="504">
                Clean the unused immutable sets out of the hashtable.                
            </javadoc>
            <method name="removeUnusedSets" type="void" line="507">
                <comment line="509">
                    force WeakHashMap to expunge stale entries                    
                </comment>
            </method>
            <javadoc line="511">
                Search for an existing attribute set using the current search
                  parameters.  If a matching set is found, return it.  If a match
                  is not found, we create a new set and add it to the pool.                
            </javadoc>
            <method name="getImmutableUniqueSet" type="AttributeSet" line="516">
                <comment line="518">
                    PENDING(prinz) should consider finding a alternative to
                     generating extra garbage on search key.                    
                </comment>
                <declaration name="key" type="SmallAttributeSet" line="519"/>
                <declaration name="reference" type="WeakReference&lt;SmallAttributeSet&gt;" line="520"/>
                <declaration name="a" type="SmallAttributeSet" line="521"/>
                <scope line="522"/>
            </method>
            <javadoc line="529">
                Creates a mutable attribute set to hand out because the current
                  needs are too big to try and use a shared version.                
            </javadoc>
            <method name="getMutableAttributeSet" type="MutableAttributeSet" line="533">
                <params>
                    <param name="a" type="AttributeSet"/>
                </params>
                <scope line="535"/>
            </method>
            <javadoc line="541">
                Converts a StyleContext to a String.                
                <return>
                    the string                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="546">
                <declaration name="s" type="String" line="548"/>
                <scope line="549"/>
            </method>
            <javadoc line="557">
                Context-specific handling of writing out attributes                
            </javadoc>
            <method name="writeAttributes" type="void" line="561">
                <params>
                    <param name="out" type="ObjectOutputStream"/>
                    <param name="a" type="AttributeSet"/>
                </params>
            </method>
            <javadoc line="565">
                Context-specific handling of reading in attributes                
            </javadoc>
            <method name="readAttributes" type="void" line="569">
                <params>
                    <param name="in" type="ObjectInputStream"/>
                    <param name="a" type="MutableAttributeSet"/>
                </params>
            </method>
            <javadoc line="573">
                Writes a set of attributes to the given object stream
                  for the purpose of serialization.  This will take
                  special care to deal with static attribute keys that
                  have been registered wit the
                  &lt;code&gt;registerStaticAttributeKey&lt;/code&gt; method.
                  Any attribute key not regsitered as a static key
                  will be serialized directly.  All values are expected
                  to be serializable.                
                <param>
                    out the output stream                    
                </param>
                <param>
                    a the attribute set                    
                </param>
                <exception>
                    IOException on any I/O error                    
                </exception>
            </javadoc>
            <method name="writeAttributeSet" type="void" line="588">
                <params>
                    <param name="out" type="ObjectOutputStream"/>
                    <param name="a" type="AttributeSet"/>
                </params>
                <declaration name="n" type="int" line="589"/>
                <declaration name="keys" type="Enumeration" line="591"/>
                <scope line="592">
                    <declaration name="key" type="Object" line="593"/>
                    <scope line="594"/>
                    <scope line="596">
                        <declaration name="ioFmt" type="Object" line="597"/>
                        <scope line="598"/>
                    </scope>
                    <declaration name="value" type="Object" line="604"/>
                    <declaration name="ioFmt" type="Object" line="605"/>
                    <scope line="606"/>
                    <scope line="608">
                        <scope line="609"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="618">
                Reads a set of attributes from the given object input
                  stream that have been previously written out with
                  &lt;code&gt;writeAttributeSet&lt;/code&gt;.  This will try to restore
                  keys that were static objects to the static objects in
                  the current virtual machine considering only those keys
                  that have been registered with the
                  &lt;code&gt;registerStaticAttributeKey&lt;/code&gt; method.
                  The attributes retrieved from the stream will be placed
                  into the given mutable set.                
                <param>
                    in the object stream to read the attribute data from.                    
                </param>
                <param>
                    a  the attribute set to place the attribute
                      definitions in.                    
                </param>
                <exception>
                    ClassNotFoundException passed upward if encountered
                      when reading the object stream.                    
                </exception>
                <exception>
                    IOException passed upward if encountered when
                      reading the object stream.                    
                </exception>
            </javadoc>
            <method name="readAttributeSet" type="void" line="638">
                <params>
                    <param name="in" type="ObjectInputStream"/>
                    <param name="a" type="MutableAttributeSet"/>
                </params>
                <declaration name="n" type="int" line="640"/>
                <scope line="641">
                    <declaration name="key" type="Object" line="642"/>
                    <declaration name="value" type="Object" line="643"/>
                    <scope line="644">
                        <declaration name="staticKey" type="Object" line="645"/>
                        <scope line="646"/>
                        <declaration name="staticValue" type="Object" line="649"/>
                        <scope line="650"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="658">
                Registers an object as a static object that is being
                  used as a key in attribute sets.  This allows the key
                  to be treated specially for serialization.
                  &lt;p&gt;
                  For operation under a 1.1 virtual machine, this
                  uses the value returned by &lt;code&gt;toString&lt;/code&gt;
                  concatenated to the classname.  The value returned
                  by toString should not have the class reference
                  in it (ie it should be reimplemented from the
                  definition in Object) in order to be the same when
                  recomputed later.                
                <param>
                    key the non-null object key                    
                </param>
            </javadoc>
            <method name="registerStaticAttributeKey" type="void" line="673">
                <params>
                    <param name="key" type="Object"/>
                </params>
                <declaration name="ioFmt" type="String" line="674"/>
                <scope line="675"/>
            </method>
            <javadoc line="683">
                Returns the object previously registered with
                  &lt;code&gt;registerStaticAttributeKey&lt;/code&gt;.                
            </javadoc>
            <method name="getStaticAttribute" type="Object" line="687">
                <params>
                    <param name="key" type="Object"/>
                </params>
                <scope line="688"/>
            </method>
            <javadoc line="694">
                Returns the String that &lt;code&gt;key&lt;/code&gt; will be registered with                
                <see>
                    #getStaticAttribute                    
                </see>
                <see>
                    #registerStaticAttributeKey                    
                </see>
            </javadoc>
            <method name="getStaticAttributeKey" type="Object" line="699">
                <params>
                    <param name="key" type="Object"/>
                </params>
            </method>
            <method name="writeObject" type="void" line="705">
                <params>
                    <param name="s" type="java.io.ObjectOutputStream"/>
                </params>
                <comment line="707">
                    clean out unused sets before saving                    
                </comment>
            </method>
            <method name="readObject" type="void" line="714">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
            </method>
            <declaration name="DEFAULT_STYLE" type="String" line="725"/>
            <javadoc line="725">
                The name given to the default logical style attached
                  to paragraphs.                
            </javadoc>
            <declaration name="freezeKeyMap" type="Hashtable&lt;Object,String&gt;" line="731"/>
            <declaration name="thawKeyMap" type="Hashtable&lt;String,Object&gt;" line="732"/>
            <declaration name="styles" type="Style" line="734"/>
            <declaration name="fontSearch" type="FontKey" line="735"/>
            <declaration name="fontTable" type="Hashtable&lt;FontKey,Font&gt;" line="736"/>
            <declaration name="attributesPool" type="Map&lt;SmallAttributeSet,WeakReference&lt;SmallAttributeSet&gt;&gt;" line="738"/>
            <declaration name="search" type="MutableAttributeSet" line="740"/>
            <declaration name="unusedSets" type="int" line="742"/>
            <javadoc line="742">
                Number of immutable sets that are not currently
                  being used.  This helps indicate when the sets need
                  to be cleaned out of the hashtable they are stored
                  in.                
            </javadoc>
            <declaration name="THRESHOLD" type="int" line="750"/>
            <javadoc line="750">
                The threshold for no longer sharing the set of attributes
                  in an immutable table.                
            </javadoc>
            <class name="SmallAttributeSet" line="756">
                <comment line="809">
                    --- Object methods -------------------------                    
                </comment>
                <comment line="869">
                    --- AttributeSet methods ----------------------------                    
                </comment>
                <comment line="994">
                    --- variables -----------------------------------------                    
                </comment>
                <comment line="997">
                    This is also stored in attributes                    
                </comment>
                <comment line="1385">
                    --- AttributeSet ----------------------------
                     delegated to the immutable field &quot;attributes&quot;                    
                </comment>
                <comment line="1489">
                    --- MutableAttributeSet ----------------------------------
                     should fetch a new immutable record for the field
                     &quot;attributes&quot;.                    
                </comment>
                <comment line="1572">
                    --- serialization ---------------------------------------------                    
                </comment>
                <comment line="1587">
                    --- member variables -----------------------------------------------                    
                </comment>
                <implements interface="AttributeSet"/>
                <javadoc line="756">
                    This class holds a small number of attributes in an array.
                      The storage format is key, value, key, value, etc.  The size
                      of the set is the length of the array divided by two.  By
                      default, this is the class that will be used to store attributes
                      when held in the compact sharable form.                    
                </javadoc>
                <method name="SmallAttributeSet" type="constructor" line="765">
                    <params>
                        <param name="attributes" type="Object[]"/>
                    </params>
                </method>
                <method name="SmallAttributeSet" type="constructor" line="770">
                    <params>
                        <param name="attrs" type="AttributeSet"/>
                    </params>
                    <declaration name="n" type="int" line="771"/>
                    <declaration name="tbl" type="Object[]" line="772"/>
                    <declaration name="names" type="Enumeration" line="773"/>
                    <declaration name="i" type="int" line="774"/>
                    <scope line="775"/>
                </method>
                <method name="updateResolveParent" type="void" line="784">
                    <declaration name="tbl" type="Object[]" line="786"/>
                    <scope line="787">
                        <scope line="788"/>
                    </scope>
                </method>
                <method name="getLocalAttribute" type="Object" line="795">
                    <params>
                        <param name="nm" type="Object"/>
                    </params>
                    <scope line="796"/>
                    <declaration name="tbl" type="Object[]" line="799"/>
                    <scope line="800">
                        <scope line="801"/>
                    </scope>
                </method>
                <javadoc line="810">
                    Returns a string showing the key/value pairs                    
                </javadoc>
                <method name="toString" type="String" line="813">
                    <comment line="819">
                        don&apos;t recurse                        
                    </comment>
                    <declaration name="s" type="String" line="814"/>
                    <declaration name="tbl" type="Object[]" line="815"/>
                    <scope line="816">
                        <scope line="817"/>
                        <scope line="820"/>
                    </scope>
                </method>
                <javadoc line="828">
                    Returns a hashcode for this set of attributes.                    
                    <return>
                        a hashcode value for this set of attributes.                        
                    </return>
                </javadoc>
                <method name="hashCode" type="int" line="832">
                    <declaration name="code" type="int" line="833"/>
                    <declaration name="tbl" type="Object[]" line="834"/>
                    <scope line="835"/>
                </method>
                <javadoc line="841">
                    Compares this object to the specifed object.
                      The result is &lt;code&gt;true&lt;/code&gt; if the object is an equivalent
                      set of attributes.                    
                    <param>
                        obj   the object to compare with.                        
                    </param>
                    <return>
                        <code>true</code> if the objects are equal;
                          <code>false</code> otherwise.                        
                    </return>
                </javadoc>
                <method name="equals" type="boolean" line="849">
                    <params>
                        <param name="obj" type="Object"/>
                    </params>
                    <scope line="850">
                        <declaration name="attrs" type="AttributeSet" line="851"/>
                    </scope>
                </method>
                <javadoc line="858">
                    Clones a set of attributes.  Since the set is immutable, a
                      clone is basically the same set.                    
                    <return>
                        the set of attributes                        
                    </return>
                </javadoc>
                <method name="clone" type="Object" line="864"/>
                <javadoc line="870">
                    Gets the number of attributes that are defined.                    
                    <return>
                        the number of attributes                        
                    </return>
                    <see>
                        AttributeSet#getAttributeCount                        
                    </see>
                </javadoc>
                <method name="getAttributeCount" type="int" line="876"/>
                <javadoc line="880">
                    Checks whether a given attribute is defined.                    
                    <param>
                        key the attribute key                        
                    </param>
                    <return>
                        true if the attribute is defined                        
                    </return>
                    <see>
                        AttributeSet#isDefined                        
                    </see>
                </javadoc>
                <method name="isDefined" type="boolean" line="887">
                    <params>
                        <param name="key" type="Object"/>
                    </params>
                    <declaration name="a" type="Object[]" line="888"/>
                    <declaration name="n" type="int" line="889"/>
                    <scope line="890">
                        <scope line="891"/>
                    </scope>
                </method>
                <javadoc line="898">
                    Checks whether two attribute sets are equal.                    
                    <param>
                        attr the attribute set to check against                        
                    </param>
                    <return>
                        true if the same                        
                    </return>
                    <see>
                        AttributeSet#isEqual                        
                    </see>
                </javadoc>
                <method name="isEqual" type="boolean" line="905">
                    <params>
                        <param name="attr" type="AttributeSet"/>
                    </params>
                    <scope line="906"/>
                </method>
                <javadoc line="913">
                    Copies a set of attributes.                    
                    <return>
                        the copy                        
                    </return>
                    <see>
                        AttributeSet#copyAttributes                        
                    </see>
                </javadoc>
                <method name="copyAttributes" type="AttributeSet" line="919"/>
                <javadoc line="923">
                    Gets the value of an attribute.                    
                    <param>
                        key the attribute name                        
                    </param>
                    <return>
                        the attribute value                        
                    </return>
                    <see>
                        AttributeSet#getAttribute                        
                    </see>
                </javadoc>
                <method name="getAttribute" type="Object" line="930">
                    <params>
                        <param name="key" type="Object"/>
                    </params>
                    <declaration name="value" type="Object" line="931"/>
                    <scope line="932">
                        <declaration name="parent" type="AttributeSet" line="933"/>
                    </scope>
                </method>
                <javadoc line="940">
                    Gets the names of all attributes.                    
                    <return>
                        the attribute names                        
                    </return>
                    <see>
                        AttributeSet#getAttributeNames                        
                    </see>
                </javadoc>
                <method name="getAttributeNames" type="Enumeration<?>" line="946"/>
                <javadoc line="950">
                    Checks whether a given attribute name/value is defined.                    
                    <param>
                        name the attribute name                        
                    </param>
                    <param>
                        value the attribute value                        
                    </param>
                    <return>
                        true if the name/value is defined                        
                    </return>
                    <see>
                        AttributeSet#containsAttribute                        
                    </see>
                </javadoc>
                <method name="containsAttribute" type="boolean" line="958">
                    <params>
                        <param name="name" type="Object"/>
                        <param name="value" type="Object"/>
                    </params>
                </method>
                <javadoc line="962">
                    Checks whether the attribute set contains all of
                      the given attributes.                    
                    <param>
                        attrs the attributes to check                        
                    </param>
                    <return>
                        true if the element contains all the attributes                        
                    </return>
                    <see>
                        AttributeSet#containsAttributes                        
                    </see>
                </javadoc>
                <method name="containsAttributes" type="boolean" line="970">
                    <params>
                        <param name="attrs" type="AttributeSet"/>
                    </params>
                    <declaration name="result" type="boolean" line="971"/>
                    <declaration name="names" type="Enumeration" line="973"/>
                    <scope line="974">
                        <declaration name="name" type="Object" line="975"/>
                    </scope>
                </method>
                <javadoc line="982">
                    If not overriden, the resolving parent defaults to
                      the parent element.                    
                    <return>
                        the attributes from the parent                        
                    </return>
                    <see>
                        AttributeSet#getResolveParent                        
                    </see>
                </javadoc>
                <method name="getResolveParent" type="AttributeSet" line="989"/>
                <declaration name="attributes" type="Object[]" line="995"/>
                <declaration name="resolveParent" type="AttributeSet" line="997"/>
            </class>
            <class name="KeyEnumeration" line="1000">
                <comment line="809">
                    --- Object methods -------------------------                    
                </comment>
                <comment line="869">
                    --- AttributeSet methods ----------------------------                    
                </comment>
                <comment line="994">
                    --- variables -----------------------------------------                    
                </comment>
                <comment line="997">
                    This is also stored in attributes                    
                </comment>
                <comment line="1385">
                    --- AttributeSet ----------------------------
                     delegated to the immutable field &quot;attributes&quot;                    
                </comment>
                <comment line="1489">
                    --- MutableAttributeSet ----------------------------------
                     should fetch a new immutable record for the field
                     &quot;attributes&quot;.                    
                </comment>
                <comment line="1572">
                    --- serialization ---------------------------------------------                    
                </comment>
                <comment line="1587">
                    --- member variables -----------------------------------------------                    
                </comment>
                <implements interface="Enumeration">
                    <type_params>
                        <type_param name="Object"/>
                    </type_params>
                </implements>
                <javadoc line="1000">
                    An enumeration of the keys in a SmallAttributeSet.                    
                </javadoc>
                <method name="KeyEnumeration" type="constructor" line="1005">
                    <params>
                        <param name="attr" type="Object[]"/>
                    </params>
                </method>
                <javadoc line="1010">
                    Tests if this enumeration contains more elements.                    
                    <return>
                        <code>true</code> if this enumeration contains more elements;
                          <code>false</code> otherwise.                        
                    </return>
                    <since>
                        JDK1.0                        
                    </since>
                </javadoc>
                <method name="hasMoreElements" type="boolean" line="1017"/>
                <javadoc line="1021">
                    Returns the next element of this enumeration.                    
                    <return>
                        the next element of this enumeration.                        
                    </return>
                    <exception>
                        NoSuchElementException  if no more elements exist.                        
                    </exception>
                    <since>
                        JDK1.0                        
                    </since>
                </javadoc>
                <method name="nextElement" type="Object" line="1028">
                    <scope line="1029">
                        <declaration name="o" type="Object" line="1030"/>
                    </scope>
                </method>
                <declaration name="attr" type="Object[]" line="1037"/>
                <declaration name="i" type="int" line="1038"/>
            </class>
            <class name="KeyBuilder" line="1041">
                <comment line="809">
                    --- Object methods -------------------------                    
                </comment>
                <comment line="869">
                    --- AttributeSet methods ----------------------------                    
                </comment>
                <comment line="994">
                    --- variables -----------------------------------------                    
                </comment>
                <comment line="997">
                    This is also stored in attributes                    
                </comment>
                <comment line="1385">
                    --- AttributeSet ----------------------------
                     delegated to the immutable field &quot;attributes&quot;                    
                </comment>
                <comment line="1489">
                    --- MutableAttributeSet ----------------------------------
                     should fetch a new immutable record for the field
                     &quot;attributes&quot;.                    
                </comment>
                <comment line="1572">
                    --- serialization ---------------------------------------------                    
                </comment>
                <comment line="1587">
                    --- member variables -----------------------------------------------                    
                </comment>
                <javadoc line="1041">
                    Sorts the key strings so that they can be very quickly compared
                      in the attribute set searchs.                    
                </javadoc>
                <method name="initialize" type="void" line="1047">
                    <params>
                        <param name="a" type="AttributeSet"/>
                    </params>
                    <scope line="1048"/>
                    <scope line="1050">
                        <declaration name="names" type="Enumeration" line="1053"/>
                        <scope line="1054">
                            <declaration name="name" type="Object" line="1055"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="1061">
                    Initialize with a set of already sorted
                      keys (data from an existing SmallAttributeSet).                    
                </javadoc>
                <method name="initialize" type="void" line="1065">
                    <params>
                        <param name="sorted" type="Object[]"/>
                    </params>
                    <declaration name="n" type="int" line="1068"/>
                    <scope line="1069"/>
                </method>
                <javadoc line="1075">
                    Creates a table of sorted key/value entries
                      suitable for creation of an instance of
                      SmallAttributeSet.                    
                </javadoc>
                <method name="createTable" type="Object[]" line="1080">
                    <declaration name="n" type="int" line="1081"/>
                    <declaration name="tbl" type="Object[]" line="1082"/>
                    <scope line="1083">
                        <declaration name="offs" type="int" line="1084"/>
                    </scope>
                </method>
                <javadoc line="1091">
                    The number of key/value pairs contained
                      in the current key being forged.                    
                </javadoc>
                <method name="getCount" type="int" line="1095"/>
                <javadoc line="1099">
                    Adds a key/value to the set.                    
                </javadoc>
                <method name="addAttribute" type="void" line="1102">
                    <params>
                        <param name="key" type="Object"/>
                        <param name="value" type="Object"/>
                    </params>
                </method>
                <javadoc line="1107">
                    Adds a set of key/value pairs to the set.                    
                </javadoc>
                <method name="addAttributes" type="void" line="1110">
                    <params>
                        <param name="attr" type="AttributeSet"/>
                    </params>
                    <comment line="1113">
                        avoid searching the keys, they are already interned.                        
                    </comment>
                    <scope line="1111">
                        <declaration name="tbl" type="Object[]" line="1113"/>
                        <declaration name="n" type="int" line="1114"/>
                        <scope line="1115"/>
                    </scope>
                    <scope line="1118">
                        <declaration name="names" type="Enumeration" line="1119"/>
                        <scope line="1120">
                            <declaration name="name" type="Object" line="1121"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="1127">
                    Removes the given name from the set.                    
                </javadoc>
                <method name="removeAttribute" type="void" line="1130">
                    <params>
                        <param name="key" type="Object"/>
                    </params>
                    <declaration name="n" type="int" line="1131"/>
                    <scope line="1132">
                        <scope line="1133"/>
                    </scope>
                </method>
                <javadoc line="1141">
                    Removes the set of keys from the set.                    
                </javadoc>
                <method name="removeAttributes" type="void" line="1144">
                    <params>
                        <param name="names" type="Enumeration"/>
                    </params>
                    <scope line="1145">
                        <declaration name="name" type="Object" line="1146"/>
                    </scope>
                </method>
                <javadoc line="1151">
                    Removes the set of matching attributes from the set.                    
                </javadoc>
                <method name="removeAttributes" type="void" line="1154">
                    <params>
                        <param name="attr" type="AttributeSet"/>
                    </params>
                    <declaration name="names" type="Enumeration" line="1155"/>
                    <scope line="1156">
                        <declaration name="name" type="Object" line="1157"/>
                        <declaration name="value" type="Object" line="1158"/>
                    </scope>
                </method>
                <method name="removeSearchAttribute" type="void" line="1163">
                    <params>
                        <param name="ikey" type="Object"/>
                        <param name="value" type="Object"/>
                    </params>
                    <declaration name="n" type="int" line="1164"/>
                    <scope line="1165">
                        <scope line="1166">
                            <scope line="1167"/>
                        </scope>
                    </scope>
                </method>
                <declaration name="keys" type="Vector&lt;Object&gt;" line="1176"/>
                <declaration name="data" type="Vector&lt;Object&gt;" line="1177"/>
            </class>
            <class name="FontKey" line="1180">
                <comment line="809">
                    --- Object methods -------------------------                    
                </comment>
                <comment line="869">
                    --- AttributeSet methods ----------------------------                    
                </comment>
                <comment line="994">
                    --- variables -----------------------------------------                    
                </comment>
                <comment line="997">
                    This is also stored in attributes                    
                </comment>
                <comment line="1385">
                    --- AttributeSet ----------------------------
                     delegated to the immutable field &quot;attributes&quot;                    
                </comment>
                <comment line="1489">
                    --- MutableAttributeSet ----------------------------------
                     should fetch a new immutable record for the field
                     &quot;attributes&quot;.                    
                </comment>
                <comment line="1572">
                    --- serialization ---------------------------------------------                    
                </comment>
                <comment line="1587">
                    --- member variables -----------------------------------------------                    
                </comment>
                <javadoc line="1180">
                    key for a font table                    
                </javadoc>
                <declaration name="family" type="String" line="1185"/>
                <declaration name="style" type="int" line="1186"/>
                <declaration name="size" type="int" line="1187"/>
                <javadoc line="1189">
                    Constructs a font key.                    
                </javadoc>
                <method name="FontKey" type="constructor" line="1192">
                    <params>
                        <param name="family" type="String"/>
                        <param name="style" type="int"/>
                        <param name="size" type="int"/>
                    </params>
                </method>
                <method name="setValue" type="void" line="1196">
                    <params>
                        <param name="family" type="String"/>
                        <param name="style" type="int"/>
                        <param name="size" type="int"/>
                    </params>
                </method>
                <javadoc line="1202">
                    Returns a hashcode for this font.                    
                    <return>
                        a hashcode value for this font.                        
                    </return>
                </javadoc>
                <method name="hashCode" type="int" line="1206">
                    <declaration name="fhash" type="int" line="1207"/>
                </method>
                <javadoc line="1211">
                    Compares this object to the specifed object.
                      The result is &lt;code&gt;true&lt;/code&gt; if and only if the argument is not
                      &lt;code&gt;null&lt;/code&gt; and is a &lt;code&gt;Font&lt;/code&gt; object with the same
                      name, style, and point size as this font.                    
                    <param>
                        obj   the object to compare this font with.                        
                    </param>
                    <return>
                        <code>true</code> if the objects are equal;
                          <code>false</code> otherwise.                        
                    </return>
                </javadoc>
                <method name="equals" type="boolean" line="1220">
                    <params>
                        <param name="obj" type="Object"/>
                    </params>
                    <scope line="1221">
                        <declaration name="font" type="FontKey" line="1222"/>
                    </scope>
                </method>
            </class>
            <class name="NamedStyle" line="1230">
                <comment line="809">
                    --- Object methods -------------------------                    
                </comment>
                <comment line="869">
                    --- AttributeSet methods ----------------------------                    
                </comment>
                <comment line="994">
                    --- variables -----------------------------------------                    
                </comment>
                <comment line="997">
                    This is also stored in attributes                    
                </comment>
                <comment line="1385">
                    --- AttributeSet ----------------------------
                     delegated to the immutable field &quot;attributes&quot;                    
                </comment>
                <comment line="1489">
                    --- MutableAttributeSet ----------------------------------
                     should fetch a new immutable record for the field
                     &quot;attributes&quot;.                    
                </comment>
                <comment line="1572">
                    --- serialization ---------------------------------------------                    
                </comment>
                <comment line="1587">
                    --- member variables -----------------------------------------------                    
                </comment>
                <implements interface="Style"/>
                <implements interface="Serializable"/>
                <javadoc line="1230">
                    A collection of attributes, typically used to represent
                      character and paragraph styles.  This is an implementation
                      of MutableAttributeSet that can be observed if desired.
                      These styles will take advantage of immutability while
                      the sets are small enough, and may be substantially more
                      efficient than something like SimpleAttributeSet.
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      Serialized objects of this class will not be compatible with
                      future Swing releases. The current serialization support is
                      appropriate for short term storage or RMI between applications running
                      the same version of Swing.  As of 1.4, support for long term storage
                      of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                      has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                      Please see {@link java.beans.XMLEncoder}.                    
                </javadoc>
                <javadoc line="1249">
                    Creates a new named style.                    
                    <param>
                        name the style name, null for unnamed                        
                    </param>
                    <param>
                        parent the parent style, null if none                        
                    </param>
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <method name="NamedStyle" type="constructor" line="1256">
                    <params>
                        <param name="name" type="String"/>
                        <param name="parent" type="Style"/>
                    </params>
                    <scope line="1258"/>
                    <scope line="1261"/>
                </method>
                <javadoc line="1266">
                    Creates a new named style.                    
                    <param>
                        parent the parent style, null if none                        
                    </param>
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <method name="NamedStyle" type="constructor" line="1272">
                    <params>
                        <param name="parent" type="Style"/>
                    </params>
                </method>
                <javadoc line="1276">
                    Creates a new named style, with a null name and parent.                    
                </javadoc>
                <method name="NamedStyle" type="constructor" line="1279"/>
                <javadoc line="1283">
                    Converts the style to a string.                    
                    <return>
                        the string                        
                    </return>
                </javadoc>
                <method name="toString" type="String" line="1288"/>
                <javadoc line="1292">
                    Fetches the name of the style.   A style is not required to be named,
                      so null is returned if there is no name associated with the style.                    
                    <return>
                        the name                        
                    </return>
                </javadoc>
                <method name="getName" type="String" line="1298">
                    <scope line="1299"/>
                </method>
                <javadoc line="1305">
                    Changes the name of the style.  Does nothing with a null name.                    
                    <param>
                        name the new name                        
                    </param>
                </javadoc>
                <method name="setName" type="void" line="1310">
                    <params>
                        <param name="name" type="String"/>
                    </params>
                    <scope line="1311"/>
                </method>
                <javadoc line="1316">
                    Adds a change listener.                    
                    <param>
                        l the change listener                        
                    </param>
                </javadoc>
                <method name="addChangeListener" type="void" line="1321">
                    <params>
                        <param name="l" type="ChangeListener"/>
                    </params>
                </method>
                <javadoc line="1325">
                    Removes a change listener.                    
                    <param>
                        l the change listener                        
                    </param>
                </javadoc>
                <method name="removeChangeListener" type="void" line="1330">
                    <params>
                        <param name="l" type="ChangeListener"/>
                    </params>
                </method>
                <javadoc line="1335">
                    Returns an array of all the &lt;code&gt;ChangeListener&lt;/code&gt;s added
                      to this NamedStyle with addChangeListener().                    
                    <return>
                        all of the <code>ChangeListener</code>s added or an empty
                          array if no listeners have been added                        
                    </return>
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <method name="getChangeListeners" type="ChangeListener[]" line="1343"/>
                <javadoc line="1348">
                    Notifies all listeners that have registered interest for
                      notification on this event type.  The event instance
                      is lazily created using the parameters passed into
                      the fire method.                    
                    <see>
                        EventListenerList                        
                    </see>
                </javadoc>
                <method name="fireStateChanged" type="void" line="1356">
                    <comment line="1358">
                        Guaranteed to return a non-null array                        
                    </comment>
                    <comment line="1360">
                        Process the listeners last to first, notifying
                         those that are interested in this event                        
                    </comment>
                    <comment line="1364">
                        Lazily create the event:                        
                    </comment>
                    <declaration name="listeners" type="Object[]" line="1358"/>
                    <scope line="1361">
                        <scope line="1362"/>
                    </scope>
                </method>
                <javadoc line="1371">
                    Return an array of all the listeners of the given type that
                      were added to this model.                    
                    <return>
                        all of the objects receiving <em>listenerType</em> notifications
                          from this model                        
                    </return>
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <method name="getListeners" type="T[]" line="1380">
                    <params>
                        <param name="listenerType" type="Class<T>"/>
                    </params>
                </method>
                <javadoc line="1387">
                    Gets the number of attributes that are defined.                    
                    <return>
                        the number of attributes >= 0                        
                    </return>
                    <see>
                        AttributeSet#getAttributeCount                        
                    </see>
                </javadoc>
                <method name="getAttributeCount" type="int" line="1393"/>
                <javadoc line="1397">
                    Checks whether a given attribute is defined.                    
                    <param>
                        attrName the non-null attribute name                        
                    </param>
                    <return>
                        true if the attribute is defined                        
                    </return>
                    <see>
                        AttributeSet#isDefined                        
                    </see>
                </javadoc>
                <method name="isDefined" type="boolean" line="1404">
                    <params>
                        <param name="attrName" type="Object"/>
                    </params>
                </method>
                <javadoc line="1408">
                    Checks whether two attribute sets are equal.                    
                    <param>
                        attr the attribute set to check against                        
                    </param>
                    <return>
                        true if the same                        
                    </return>
                    <see>
                        AttributeSet#isEqual                        
                    </see>
                </javadoc>
                <method name="isEqual" type="boolean" line="1415">
                    <params>
                        <param name="attr" type="AttributeSet"/>
                    </params>
                </method>
                <javadoc line="1419">
                    Copies a set of attributes.                    
                    <return>
                        the copy                        
                    </return>
                    <see>
                        AttributeSet#copyAttributes                        
                    </see>
                </javadoc>
                <method name="copyAttributes" type="AttributeSet" line="1425">
                    <declaration name="a" type="NamedStyle" line="1426"/>
                </method>
                <javadoc line="1431">
                    Gets the value of an attribute.                    
                    <param>
                        attrName the non-null attribute name                        
                    </param>
                    <return>
                        the attribute value                        
                    </return>
                    <see>
                        AttributeSet#getAttribute                        
                    </see>
                </javadoc>
                <method name="getAttribute" type="Object" line="1438">
                    <params>
                        <param name="attrName" type="Object"/>
                    </params>
                </method>
                <javadoc line="1442">
                    Gets the names of all attributes.                    
                    <return>
                        the attribute names as an enumeration                        
                    </return>
                    <see>
                        AttributeSet#getAttributeNames                        
                    </see>
                </javadoc>
                <method name="getAttributeNames" type="Enumeration<?>" line="1448"/>
                <javadoc line="1452">
                    Checks whether a given attribute name/value is defined.                    
                    <param>
                        name the non-null attribute name                        
                    </param>
                    <param>
                        value the attribute value                        
                    </param>
                    <return>
                        true if the name/value is defined                        
                    </return>
                    <see>
                        AttributeSet#containsAttribute                        
                    </see>
                </javadoc>
                <method name="containsAttribute" type="boolean" line="1460">
                    <params>
                        <param name="name" type="Object"/>
                        <param name="value" type="Object"/>
                    </params>
                </method>
                <javadoc line="1465">
                    Checks whether the element contains all the attributes.                    
                    <param>
                        attrs the attributes to check                        
                    </param>
                    <return>
                        true if the element contains all the attributes                        
                    </return>
                    <see>
                        AttributeSet#containsAttributes                        
                    </see>
                </javadoc>
                <method name="containsAttributes" type="boolean" line="1472">
                    <params>
                        <param name="attrs" type="AttributeSet"/>
                    </params>
                </method>
                <javadoc line="1476">
                    Gets attributes from the parent.
                      If not overriden, the resolving parent defaults to
                      the parent element.                    
                    <return>
                        the attributes from the parent                        
                    </return>
                    <see>
                        AttributeSet#getResolveParent                        
                    </see>
                </javadoc>
                <method name="getResolveParent" type="AttributeSet" line="1484"/>
                <javadoc line="1492">
                    Adds an attribute.                    
                    <param>
                        name the non-null attribute name                        
                    </param>
                    <param>
                        value the attribute value                        
                    </param>
                    <see>
                        MutableAttributeSet#addAttribute                        
                    </see>
                </javadoc>
                <method name="addAttribute" type="void" line="1499">
                    <params>
                        <param name="name" type="Object"/>
                        <param name="value" type="Object"/>
                    </params>
                    <declaration name="context" type="StyleContext" line="1500"/>
                </method>
                <javadoc line="1505">
                    Adds a set of attributes to the element.                    
                    <param>
                        attr the attributes to add                        
                    </param>
                    <see>
                        MutableAttributeSet#addAttribute                        
                    </see>
                </javadoc>
                <method name="addAttributes" type="void" line="1511">
                    <params>
                        <param name="attr" type="AttributeSet"/>
                    </params>
                    <declaration name="context" type="StyleContext" line="1512"/>
                </method>
                <javadoc line="1517">
                    Removes an attribute from the set.                    
                    <param>
                        name the non-null attribute name                        
                    </param>
                    <see>
                        MutableAttributeSet#removeAttribute                        
                    </see>
                </javadoc>
                <method name="removeAttribute" type="void" line="1523">
                    <params>
                        <param name="name" type="Object"/>
                    </params>
                    <declaration name="context" type="StyleContext" line="1524"/>
                </method>
                <javadoc line="1529">
                    Removes a set of attributes for the element.                    
                    <param>
                        names the attribute names                        
                    </param>
                    <see>
                        MutableAttributeSet#removeAttributes                        
                    </see>
                </javadoc>
                <method name="removeAttributes" type="void" line="1535">
                    <params>
                        <param name="names" type="Enumeration<?>"/>
                    </params>
                    <declaration name="context" type="StyleContext" line="1536"/>
                </method>
                <javadoc line="1541">
                    Removes a set of attributes for the element.                    
                    <param>
                        attrs the attributes                        
                    </param>
                    <see>
                        MutableAttributeSet#removeAttributes                        
                    </see>
                </javadoc>
                <method name="removeAttributes" type="void" line="1547">
                    <params>
                        <param name="attrs" type="AttributeSet"/>
                    </params>
                    <declaration name="context" type="StyleContext" line="1548"/>
                    <scope line="1549"/>
                    <scope line="1551"/>
                </method>
                <javadoc line="1557">
                    Sets the resolving parent.                    
                    <param>
                        parent the parent, null if none                        
                    </param>
                    <see>
                        MutableAttributeSet#setResolveParent                        
                    </see>
                </javadoc>
                <method name="setResolveParent" type="void" line="1563">
                    <params>
                        <param name="parent" type="AttributeSet"/>
                    </params>
                    <scope line="1564"/>
                    <scope line="1566"/>
                </method>
                <method name="writeObject" type="void" line="1573">
                    <params>
                        <param name="s" type="ObjectOutputStream"/>
                    </params>
                </method>
                <method name="readObject" type="void" line="1580">
                    <params>
                        <param name="s" type="ObjectInputStream"/>
                    </params>
                </method>
                <declaration name="listenerList" type="EventListenerList" line="1588"/>
                <javadoc line="1588">
                    The change listeners for the model.                    
                </javadoc>
                <declaration name="changeEvent" type="ChangeEvent" line="1593"/>
                <javadoc line="1593">
                    Only one ChangeEvent is needed per model instance since the
                      event&apos;s only (read-only) state is the source property.  The source
                      of events generated here is always &quot;this&quot;.                    
                </javadoc>
                <declaration name="attributes" type="AttributeSet" line="1600"/>
                <javadoc line="1600">
                    Inner AttributeSet implementation, which may be an
                      immutable unique set being shared.                    
                </javadoc>
            </class>
            <scope line="1608">
                <scope line="1610">
                    <declaration name="n" type="int" line="1611"/>
                    <scope line="1612"/>
                </scope>
                <scope line="1615"/>
            </scope>
        </class>
    </source>