<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text">
        <import package="java.awt.Color"/>
        <import package="java.awt.Font"/>
        <import package="java.awt.font.TextAttribute"/>
        <import package="java.lang.ref.ReferenceQueue"/>
        <import package="java.lang.ref.WeakReference"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.List"/>
        <import package="java.util.Map"/>
        <import package="java.util.Stack"/>
        <import package="java.util.Vector"/>
        <import package="java.util.ArrayList"/>
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.Serializable"/>
        <import package="javax.swing.event"/>
        <import package="javax.swing.undo.AbstractUndoableEdit"/>
        <import package="javax.swing.undo.CannotRedoException"/>
        <import package="javax.swing.undo.CannotUndoException"/>
        <import package="javax.swing.undo.UndoableEdit"/>
        <import package="javax.swing.SwingUtilities"/>
        <import package="sun.swing.SwingUtilities2.IMPLIED_CR"/>
        <class name="DefaultStyledDocument" line="24">
            <extends class="AbstractDocument"/>
            <implements interface="StyledDocument"/>
            <javadoc line="24">
                A document that can be marked up with character and paragraph
                  styles in a manner similar to the Rich Text Format.  The element
                  structure for this document represents style crossings for
                  style runs.  These style runs are mapped into a paragraph element
                  structure (which may reside in some other structure).  The
                  style runs break at paragraph boundaries since logical styles are
                  assigned to paragraph boundaries.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <author>
                    Timothy Prinzing                    
                </author>
                <see>
                    Document                    
                </see>
                <see>
                    AbstractDocument                    
                </see>
            </javadoc>
            <javadoc line="46">
                Constructs a styled document.                
                <param>
                    c  the container for the content                    
                </param>
                <param>
                    styles resources and style definitions which may
                      be shared across documents                    
                </param>
            </javadoc>
            <method name="DefaultStyledDocument" type="constructor" line="52">
                <params>
                    <param name="c" type="Content"/>
                    <param name="styles" type="StyleContext"/>
                </params>
                <declaration name="defaultStyle" type="Style" line="56"/>
            </method>
            <javadoc line="59">
                Constructs a styled document with the default content
                  storage implementation and a shared set of styles.                
                <param>
                    styles the styles                    
                </param>
            </javadoc>
            <method name="DefaultStyledDocument" type="constructor" line="64">
                <params>
                    <param name="styles" type="StyleContext"/>
                </params>
            </method>
            <javadoc line="67">
                Constructs a default styled document.  This buffers
                  input content by a size of &lt;em&gt;BUFFER_SIZE_DEFAULT&lt;/em&gt;
                  and has a style context that is scoped by the lifetime
                  of the document and is not shared with other documents.                
            </javadoc>
            <method name="DefaultStyledDocument" type="constructor" line="73"/>
            <javadoc line="76">
                Gets the default root element.                
                <return>
                    the root                    
                </return>
                <see>
                    Document#getDefaultRootElement                    
                </see>
            </javadoc>
            <method name="getDefaultRootElement" type="Element" line="81"/>
            <javadoc line="84">
                Initialize the document to reflect the given element
                  structure (i.e. the structure reported by the
                  &lt;code&gt;getDefaultRootElement&lt;/code&gt; method.  If the
                  document contained any data it will first be removed.                
            </javadoc>
            <method name="create" type="void" line="90">
                <params>
                    <param name="data" type="ElementSpec[]"/>
                </params>
                <scope line="91">
                    <scope line="92"/>
                    <declaration name="c" type="Content" line="96"/>
                    <declaration name="n" type="int" line="97"/>
                    <declaration name="sb" type="StringBuilder" line="98"/>
                    <scope line="99">
                        <declaration name="es" type="ElementSpec" line="100"/>
                        <scope line="101"/>
                    </scope>
                    <declaration name="cEdit" type="UndoableEdit" line="105"/>
                    <declaration name="length" type="int" line="106"/>
                    <declaration name="evnt" type="DefaultDocumentEvent" line="107"/>
                </scope>
                <scope line="115"/>
                <scope line="118"/>
            </method>
            <javadoc line="122">
                Inserts new elements in bulk.  This is useful to allow
                  parsing with the document in an unlocked state and
                  prepare an element structure modification.  This method
                  takes an array of tokens that describe how to update an
                  element structure so the time within a write lock can
                  be greatly reduced in an asynchronous update situation.
                  &lt;p&gt;
                  This method is thread safe, although most Swing methods
                  are not. Please see
                  &lt;A HREF=&quot;http://java.sun.com/docs/books/tutorial/uiswing/misc/threads.html&quot;&gt;How
                  to Use Threads&lt;/A&gt; for more information.                
                <param>
                    offset the starting offset >= 0                    
                </param>
                <param>
                    data the element data                    
                </param>
                <exception>
                    BadLocationException for an invalid starting offset                    
                </exception>
            </javadoc>
            <method name="insert" type="void" line="138">
                <params>
                    <param name="offset" type="int"/>
                    <param name="data" type="ElementSpec[]"/>
                </params>
                <scope line="139"/>
                <scope line="142">
                    <declaration name="c" type="Content" line="144"/>
                    <declaration name="n" type="int" line="145"/>
                    <declaration name="sb" type="StringBuilder" line="146"/>
                    <scope line="147">
                        <declaration name="es" type="ElementSpec" line="148"/>
                        <scope line="149"/>
                    </scope>
                    <scope line="153"/>
                    <declaration name="cEdit" type="UndoableEdit" line="156"/>
                    <declaration name="length" type="int" line="157"/>
                    <declaration name="evnt" type="DefaultDocumentEvent" line="158"/>
                </scope>
                <scope line="166"/>
            </method>
            <javadoc line="170">
                Removes an element from this document.
                  &lt;p&gt;The element is removed from its parent element, as well as
                  the text in the range identified by the element.  If the
                  element isn&apos;t associated with the document, {@codeIllegalArgumentException} is thrown.&lt;/p&gt;
                  &lt;p&gt;As empty branch elements are not allowed in the document, if the
                  element is the sole child, its parent element is removed as well,
                  recursively.  This means that when replacing all the children of a
                  particular element, new children should be added &lt;em&gt;before&lt;/em&gt;
                  removing old children.
                  &lt;p&gt;Element removal results in two events being fired, the{@code DocumentEvent} for changes in element structure and {@codeUndoableEditEvent} for changes in document content.&lt;/p&gt;
                  &lt;p&gt;If the element contains end-of-content mark (the last {@code&quot;\n&quot;} character in document), this character is not removed;
                  instead, preceding leaf element is extended to cover the
                  character.  If the last leaf already ends with {@code &quot;\n&quot;,} it is
                  included in content removal.&lt;/p&gt;
                  &lt;p&gt;If the element is {@code null,} {@code NullPointerException} is
                  thrown.  If the element structure would become invalid after the removal,
                  for example if the element is the document root element, {@codeIllegalArgumentException} is thrown.  If the current element structure is
                  invalid, {@code IllegalStateException} is thrown.&lt;/p&gt;                
                <param>
                    elem                      the element to remove                    
                </param>
                <throws>
                    NullPointerException      if the element is {@code null}                    
                </throws>
                <throws>
                    IllegalArgumentException  if the element could not be removed                    
                </throws>
                <throws>
                    IllegalStateException     if the element structure is invalid                    
                </throws>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="removeElement" type="void" line="195">
                <params>
                    <param name="elem" type="Element"/>
                </params>
                <scope line="196"/>
                <scope line="200"/>
            </method>
            <method name="removeElementImpl" type="void" line="204">
                <params>
                    <param name="elem" type="Element"/>
                </params>
                <scope line="205"/>
                <declaration name="parent" type="BranchElement" line="208"/>
                <scope line="209"/>
                <declaration name="startOffset" type="int" line="212"/>
                <declaration name="removeFrom" type="int" line="213"/>
                <declaration name="endOffset" type="int" line="214"/>
                <declaration name="removeTo" type="int" line="215"/>
                <declaration name="lastEndOffset" type="int" line="216"/>
                <declaration name="content" type="Content" line="217"/>
                <declaration name="atEnd" type="boolean" line="218"/>
                <declaration name="isComposedText" type="boolean" line="219"/>
                <scope line="220">
                    <scope line="221"/>
                    <scope line="225">
                        <scope line="226"/>
                    </scope>
                    <scope line="230"/>
                </scope>
                <declaration name="length" type="int" line="235"/>
                <declaration name="dde" type="DefaultDocumentEvent" line="236"/>
                <declaration name="ue" type="UndoableEdit" line="237"/>
                <scope line="238">
                    <scope line="241"/>
                </scope>
                <declaration name="removed" type="Element[]" line="245"/>
                <declaration name="added" type="Element[]" line="246"/>
                <declaration name="index" type="int" line="247"/>
                <scope line="250">
                    <scope line="251">
                        <scope line="253"/>
                    </scope>
                    <scope line="257"/>
                </scope>
                <scope line="262">
                    <declaration name="prevLeaf" type="Element" line="263"/>
                    <scope line="264"/>
                    <scope line="267"/>
                    <declaration name="prevStartOffset" type="int" line="270"/>
                    <declaration name="prevParent" type="BranchElement" line="271"/>
                    <declaration name="prevIndex" type="int" line="272"/>
                    <declaration name="newElem" type="Element" line="273"/>
                    <declaration name="prevRemoved" type="Element[]" line="275"/>
                    <declaration name="prevAdded" type="Element[]" line="276"/>
                </scope>
                <scope line="283"/>
            </method>
            <javadoc line="287">
                Adds a new style into the logical style hierarchy.  Style attributes
                  resolve from bottom up so an attribute specified in a child
                  will override an attribute specified in the parent.                
                <param>
                    nm   the name of the style (must be unique within the
                      collection of named styles).  The name may be null if the style
                      is unnamed, but the caller is responsible
                      for managing the reference returned as an unnamed style can't
                      be fetched by name.  An unnamed style may be useful for things
                      like character attribute overrides such as found in a style
                      run.                    
                </param>
                <param>
                    parent the parent style.  This may be null if unspecified
                      attributes need not be resolved in some other style.                    
                </param>
                <return>
                    the style                    
                </return>
            </javadoc>
            <method name="addStyle" type="Style" line="302">
                <params>
                    <param name="nm" type="String"/>
                    <param name="parent" type="Style"/>
                </params>
                <declaration name="styles" type="StyleContext" line="303"/>
            </method>
            <javadoc line="306">
                Removes a named style previously added to the document.                
                <param>
                    nm  the name of the style to remove                    
                </param>
            </javadoc>
            <method name="removeStyle" type="void" line="310">
                <params>
                    <param name="nm" type="String"/>
                </params>
                <declaration name="styles" type="StyleContext" line="311"/>
            </method>
            <javadoc line="314">
                Fetches a named style previously added.                
                <param>
                    nm  the name of the style                    
                </param>
                <return>
                    the style                    
                </return>
            </javadoc>
            <method name="getStyle" type="Style" line="319">
                <params>
                    <param name="nm" type="String"/>
                </params>
                <declaration name="styles" type="StyleContext" line="320"/>
            </method>
            <javadoc line="323">
                Fetches the list of of style names.                
                <return>
                    all the style names                    
                </return>
            </javadoc>
            <method name="getStyleNames" type="Enumeration<?>" line="327"/>
            <javadoc line="330">
                Sets the logical style to use for the paragraph at the
                  given position.  If attributes aren&apos;t explicitly set
                  for character and paragraph attributes they will resolve
                  through the logical style assigned to the paragraph, which
                  in turn may resolve through some hierarchy completely
                  independent of the element hierarchy in the document.
                  &lt;p&gt;
                  This method is thread safe, although most Swing methods
                  are not. Please see
                  &lt;A HREF=&quot;http://java.sun.com/docs/books/tutorial/uiswing/misc/threads.html&quot;&gt;How
                  to Use Threads&lt;/A&gt; for more information.                
                <param>
                    pos the offset from the start of the document >= 0                    
                </param>
                <param>
                    s  the logical style to assign to the paragraph, null if none                    
                </param>
            </javadoc>
            <method name="setLogicalStyle" type="void" line="345">
                <params>
                    <param name="pos" type="int"/>
                    <param name="s" type="Style"/>
                </params>
                <declaration name="paragraph" type="Element" line="346"/>
                <scope line="347">
                    <scope line="348">
                        <declaration name="edit" type="StyleChangeUndoableEdit" line="350"/>
                        <declaration name="p0" type="int" line="352"/>
                        <declaration name="p1" type="int" line="353"/>
                        <declaration name="e" type="DefaultDocumentEvent" line="354"/>
                    </scope>
                    <scope line="360"/>
                </scope>
            </method>
            <javadoc line="365">
                Fetches the logical style assigned to the paragraph
                  represented by the given position.                
                <param>
                    p the location to translate to a paragraph
                      and determine the logical style assigned >= 0.  This
                      is an offset from the start of the document.                    
                </param>
                <return>
                    the style, null if none                    
                </return>
            </javadoc>
            <method name="getLogicalStyle" type="Style" line="373">
                <params>
                    <param name="p" type="int"/>
                </params>
                <declaration name="s" type="Style" line="374"/>
                <declaration name="paragraph" type="Element" line="375"/>
                <scope line="376">
                    <declaration name="a" type="AttributeSet" line="377"/>
                    <declaration name="parent" type="AttributeSet" line="378"/>
                    <scope line="379"/>
                </scope>
            </method>
            <javadoc line="385">
                Sets attributes for some part of the document.
                  A write lock is held by this operation while changes
                  are being made, and a DocumentEvent is sent to the listeners
                  after the change has been successfully completed.
                  &lt;p&gt;
                  This method is thread safe, although most Swing methods
                  are not. Please see
                  &lt;A HREF=&quot;http://java.sun.com/docs/books/tutorial/uiswing/misc/threads.html&quot;&gt;How
                  to Use Threads&lt;/A&gt; for more information.                
                <param>
                    offset the offset in the document >= 0                    
                </param>
                <param>
                    length the length >= 0                    
                </param>
                <param>
                    s the attributes                    
                </param>
                <param>
                    replace true if the previous attributes should be replaced
                      before setting the new attributes                    
                </param>
            </javadoc>
            <method name="setCharacterAttributes" type="void" line="401">
                <params>
                    <param name="offset" type="int"/>
                    <param name="length" type="int"/>
                    <param name="s" type="AttributeSet"/>
                    <param name="replace" type="boolean"/>
                </params>
                <scope line="402"/>
                <scope line="405">
                    <declaration name="changes" type="DefaultDocumentEvent" line="407"/>
                    <declaration name="sCopy" type="AttributeSet" line="409"/>
                    <declaration name="lastEnd" type="int" line="410"/>
                    <scope line="411">
                        <declaration name="run" type="Element" line="412"/>
                        <scope line="414"/>
                        <declaration name="attr" type="MutableAttributeSet" line="417"/>
                        <scope line="419"/>
                    </scope>
                </scope>
                <scope line="428"/>
            </method>
            <javadoc line="432">
                Sets attributes for a paragraph.
                  &lt;p&gt;
                  This method is thread safe, although most Swing methods
                  are not. Please see
                  &lt;A HREF=&quot;http://java.sun.com/docs/books/tutorial/uiswing/misc/threads.html&quot;&gt;How
                  to Use Threads&lt;/A&gt; for more information.                
                <param>
                    offset the offset into the paragraph >= 0                    
                </param>
                <param>
                    length the number of characters affected >= 0                    
                </param>
                <param>
                    s the attributes                    
                </param>
                <param>
                    replace whether to replace existing attributes, or merge them                    
                </param>
            </javadoc>
            <method name="setParagraphAttributes" type="void" line="444">
                <params>
                    <param name="offset" type="int"/>
                    <param name="length" type="int"/>
                    <param name="s" type="AttributeSet"/>
                    <param name="replace" type="boolean"/>
                </params>
                <scope line="445">
                    <declaration name="changes" type="DefaultDocumentEvent" line="447"/>
                    <declaration name="sCopy" type="AttributeSet" line="448"/>
                    <declaration name="section" type="Element" line="449"/>
                    <declaration name="index0" type="int" line="450"/>
                    <declaration name="index1" type="int" line="451"/>
                    <declaration name="isI18N" type="boolean" line="452"/>
                    <declaration name="hasRuns" type="boolean" line="453"/>
                    <scope line="454">
                        <declaration name="paragraph" type="Element" line="455"/>
                        <declaration name="attr" type="MutableAttributeSet" line="456"/>
                        <scope line="458"/>
                        <scope line="462"/>
                    </scope>
                    <scope line="466"/>
                </scope>
                <scope line="473"/>
            </method>
            <javadoc line="477">
                Gets the paragraph element at the offset &lt;code&gt;pos&lt;/code&gt;.
                  A paragraph consists of at least one child Element, which is usually
                  a leaf.                
                <param>
                    pos the starting offset >= 0                    
                </param>
                <return>
                    the element                    
                </return>
            </javadoc>
            <method name="getParagraphElement" type="Element" line="484">
                <params>
                    <param name="pos" type="int"/>
                </params>
                <declaration name="e" type="Element" line="485"/>
                <scope line="486">
                    <declaration name="index" type="int" line="487"/>
                </scope>
            </method>
            <javadoc line="493">
                Gets a character element based on a position.                
                <param>
                    pos the position in the document >= 0                    
                </param>
                <return>
                    the element                    
                </return>
            </javadoc>
            <method name="getCharacterElement" type="Element" line="498">
                <params>
                    <param name="pos" type="int"/>
                </params>
                <declaration name="e" type="Element" line="499"/>
                <scope line="500">
                    <declaration name="index" type="int" line="501"/>
                </scope>
            </method>
            <javadoc line="506">
                Updates document structure as a result of text insertion.  This
                  will happen within a write lock.  This implementation simply
                  parses the inserted content for line breaks and builds up a set
                  of instructions for the element buffer.                
                <param>
                    chng a description of the document change                    
                </param>
                <param>
                    attr the attributes                    
                </param>
            </javadoc>
            <method name="insertUpdate" type="void" line="514">
                <params>
                    <param name="chng" type="DefaultDocumentEvent"/>
                    <param name="attr" type="AttributeSet"/>
                </params>
                <declaration name="offset" type="int" line="515"/>
                <declaration name="length" type="int" line="516"/>
                <scope line="517"/>
                <declaration name="paragraph" type="Element" line="520"/>
                <declaration name="pattr" type="AttributeSet" line="521"/>
                <declaration name="pParagraph" type="Element" line="522"/>
                <declaration name="run" type="Element" line="523"/>
                <declaration name="endOffset" type="int" line="524"/>
                <declaration name="insertingAtBoundry" type="boolean" line="525"/>
                <declaration name="cattr" type="AttributeSet" line="526"/>
                <scope line="527">
                    <declaration name="s" type="Segment" line="528"/>
                    <declaration name="parseBuffer" type="Vector&lt;ElementSpec&gt;" line="529"/>
                    <declaration name="lastStartSpec" type="ElementSpec" line="530"/>
                    <declaration name="insertingAfterNewline" type="boolean" line="531"/>
                    <declaration name="lastStartDirection" type="short" line="532"/>
                    <scope line="533">
                        <scope line="535">
                            <scope line="538">
                                <declaration name="spec" type="ElementSpec" line="539"/>
                                <scope line="540"/>
                            </scope>
                        </scope>
                    </scope>
                    <declaration name="txt" type="char[]" line="549"/>
                    <declaration name="n" type="int" line="550"/>
                    <declaration name="lastOffset" type="int" line="551"/>
                    <scope line="552">
                        <scope line="553">
                            <declaration name="breakOffset" type="int" line="554"/>
                        </scope>
                    </scope>
                    <scope line="562"/>
                    <declaration name="first" type="ElementSpec" line="565"/>
                    <declaration name="docLength" type="int" line="566"/>
                    <scope line="567"/>
                    <scope line="570">
                        <scope line="571"/>
                        <scope line="574"/>
                        <scope line="577">
                            <declaration name="parent" type="Element" line="578"/>
                            <declaration name="pParagraphIndex" type="int" line="579"/>
                            <scope line="580"/>
                        </scope>
                    </scope>
                    <scope line="585">
                        <declaration name="last" type="ElementSpec" line="586"/>
                        <scope line="587">
                            <declaration name="nextRun" type="Element" line="588"/>
                            <scope line="589"/>
                        </scope>
                    </scope>
                    <scope line="594">
                        <declaration name="last" type="ElementSpec" line="595"/>
                        <scope line="596"/>
                    </scope>
                    <scope line="600">
                        <declaration name="mattr" type="MutableAttributeSet" line="601"/>
                        <scope line="605"/>
                    </scope>
                    <declaration name="spec" type="ElementSpec[]" line="609"/>
                </scope>
                <scope line="613"/>
            </method>
            <javadoc line="617">
                This is called by insertUpdate when inserting after a new line.
                  It generates, in &lt;code&gt;parseBuffer&lt;/code&gt;, ElementSpecs that will
                  position the stack in &lt;code&gt;paragraph&lt;/code&gt;.&lt;p&gt;
                  It returns the direction the last StartSpec should have (this don&apos;t
                  necessarily create the last start spec).                
            </javadoc>
            <method name="createSpecsForInsertAfterNewline" type="short" line="624">
                <params>
                    <param name="paragraph" type="Element"/>
                    <param name="pParagraph" type="Element"/>
                    <param name="pattr" type="AttributeSet"/>
                    <param name="parseBuffer" type="Vector<ElementSpec>"/>
                    <param name="offset" type="int"/>
                    <param name="endOffset" type="int"/>
                </params>
                <scope line="625">
                    <declaration name="spec" type="ElementSpec" line="626"/>
                    <declaration name="parent" type="Element" line="631"/>
                </scope>
                <scope line="634">
                    <declaration name="leftParents" type="Vector&lt;Element&gt;" line="635"/>
                    <declaration name="rightParents" type="Vector&lt;Element&gt;" line="636"/>
                    <declaration name="e" type="Element" line="637"/>
                    <scope line="638"/>
                    <declaration name="leftIndex" type="int" line="643"/>
                    <scope line="644"/>
                    <scope line="648">
                        <scope line="649"/>
                        <declaration name="spec" type="ElementSpec" line="652"/>
                        <scope line="653"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="664">
                Updates document structure as a result of text removal.                
                <param>
                    chng a description of the document change                    
                </param>
            </javadoc>
            <method name="removeUpdate" type="void" line="668">
                <params>
                    <param name="chng" type="DefaultDocumentEvent"/>
                </params>
            </method>
            <javadoc line="672">
                Creates the root element to be used to represent the
                  default document structure.                
                <return>
                    the element base                    
                </return>
            </javadoc>
            <method name="createDefaultRoot" type="AbstractElement" line="677">
                <declaration name="section" type="BranchElement" line="679"/>
                <declaration name="paragraph" type="BranchElement" line="680"/>
                <declaration name="brk" type="LeafElement" line="681"/>
                <declaration name="buff" type="Element[]" line="682"/>
            </method>
            <javadoc line="690">
                Gets the foreground color from an attribute set.                
                <param>
                    attr the attribute set                    
                </param>
                <return>
                    the color                    
                </return>
            </javadoc>
            <method name="getForeground" type="Color" line="695">
                <params>
                    <param name="attr" type="AttributeSet"/>
                </params>
                <declaration name="styles" type="StyleContext" line="696"/>
            </method>
            <javadoc line="699">
                Gets the background color from an attribute set.                
                <param>
                    attr the attribute set                    
                </param>
                <return>
                    the color                    
                </return>
            </javadoc>
            <method name="getBackground" type="Color" line="704">
                <params>
                    <param name="attr" type="AttributeSet"/>
                </params>
                <declaration name="styles" type="StyleContext" line="705"/>
            </method>
            <javadoc line="708">
                Gets the font from an attribute set.                
                <param>
                    attr the attribute set                    
                </param>
                <return>
                    the font                    
                </return>
            </javadoc>
            <method name="getFont" type="Font" line="713">
                <params>
                    <param name="attr" type="AttributeSet"/>
                </params>
                <declaration name="styles" type="StyleContext" line="714"/>
            </method>
            <javadoc line="717">
                Called when any of this document&apos;s styles have changed.
                  Subclasses may wish to be intelligent about what gets damaged.                
                <param>
                    style The Style that has changed.                    
                </param>
            </javadoc>
            <method name="styleChanged" type="void" line="722">
                <params>
                    <param name="style" type="Style"/>
                </params>
                <scope line="723">
                    <scope line="724"/>
                    <scope line="727">
                        <scope line="728"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="735">
                Adds a document listener for notification of any changes.                
                <param>
                    listener the listener                    
                </param>
                <see>
                    Document#addDocumentListener                    
                </see>
            </javadoc>
            <method name="addDocumentListener" type="void" line="740">
                <params>
                    <param name="listener" type="DocumentListener"/>
                </params>
                <scope line="741">
                    <declaration name="oldDLCount" type="int" line="742"/>
                    <scope line="744">
                        <scope line="745"/>
                        <scope line="748">
                            <declaration name="styles" type="StyleContext" line="749"/>
                            <declaration name="staleListeners" type="List&lt;ChangeListener&gt;" line="750"/>
                            <scope line="751"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="760">
                Removes a document listener.                
                <param>
                    listener the listener                    
                </param>
                <see>
                    Document#removeDocumentListener                    
                </see>
            </javadoc>
            <method name="removeDocumentListener" type="void" line="765">
                <params>
                    <param name="listener" type="DocumentListener"/>
                </params>
                <scope line="766">
                    <scope line="768">
                        <scope line="769"/>
                        <scope line="773">
                            <declaration name="styles" type="StyleContext" line="774"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="780">
                Returns a new instance of StyleChangeHandler.                
            </javadoc>
            <method name="createStyleChangeListener" type="ChangeListener" line="783"/>
            <javadoc line="786">
                Returns a new instance of StyleContextChangeHandler.                
            </javadoc>
            <method name="createStyleContextChangeListener" type="ChangeListener" line="789"/>
            <javadoc line="792">
                Adds a ChangeListener to new styles, and removes ChangeListener from
                  old styles.                
            </javadoc>
            <method name="updateStylesListeningTo" type="void" line="796">
                <scope line="797">
                    <declaration name="styles" type="StyleContext" line="798"/>
                    <scope line="799"/>
                    <scope line="802">
                        <declaration name="styleNames" type="Enumeration" line="803"/>
                        <declaration name="v" type="Vector" line="804"/>
                        <declaration name="staleListeners" type="List&lt;ChangeListener&gt;" line="806"/>
                        <scope line="807">
                            <declaration name="name" type="String" line="808"/>
                            <declaration name="aStyle" type="Style" line="809"/>
                            <declaration name="index" type="int" line="810"/>
                            <scope line="812">
                                <scope line="813"/>
                            </scope>
                            <scope line="818"/>
                        </scope>
                        <scope line="822">
                            <declaration name="aStyle" type="Style" line="823"/>
                        </scope>
                        <scope line="826"/>
                    </scope>
                </scope>
            </method>
            <method name="readObject" type="void" line="832">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
                <scope line="835">
                    <scope line="837">
                        <declaration name="styles" type="StyleContext" line="838"/>
                    </scope>
                </scope>
            </method>
            <declaration name="BUFFER_SIZE_DEFAULT" type="int" line="844"/>
            <javadoc line="844">
                The default size of the initial content buffer.                
            </javadoc>
            <declaration name="buffer" type="ElementBuffer" line="848"/>
            <declaration name="listeningStyles" type="Vector&lt;Style&gt;" line="849"/>
            <javadoc line="849">
                Styles listening to.                
            </javadoc>
            <declaration name="styleChangeListener" type="ChangeListener" line="853"/>
            <javadoc line="853">
                Listens to Styles.                
            </javadoc>
            <declaration name="styleContextChangeListener" type="ChangeListener" line="857"/>
            <javadoc line="857">
                Listens to Styles.                
            </javadoc>
            <declaration name="updateRunnable" type="ChangeUpdateRunnable" line="861"/>
            <javadoc line="861">
                Run to create a change event for the document                
            </javadoc>
            <class name="SectionElement" line="865">
                <extends class="BranchElement"/>
                <javadoc line="865">
                    Default root element for a document... maps out the
                      paragraphs/lines contained.
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      Serialized objects of this class will not be compatible with
                      future Swing releases. The current serialization support is
                      appropriate for short term storage or RMI between applications running
                      the same version of Swing.  As of 1.4, support for long term storage
                      of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                      has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                      Please see {@link java.beans.XMLEncoder}.                    
                </javadoc>
                <javadoc line="879">
                    Creates a new SectionElement.                    
                </javadoc>
                <method name="SectionElement" type="constructor" line="882"/>
                <javadoc line="885">
                    Gets the name of the element.                    
                    <return>
                        the name                        
                    </return>
                </javadoc>
                <method name="getName" type="String" line="889"/>
            </class>
            <class name="ElementSpec" line="893">
                <javadoc line="893">
                    Specification for building elements.
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      Serialized objects of this class will not be compatible with
                      future Swing releases. The current serialization support is
                      appropriate for short term storage or RMI between applications running
                      the same version of Swing.  As of 1.4, support for long term storage
                      of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                      has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                      Please see {@link java.beans.XMLEncoder}.                    
                </javadoc>
                <declaration name="StartTagType" type="short" line="906"/>
                <javadoc line="906">
                    A possible value for getType.  This specifies
                      that this record type is a start tag and
                      represents markup that specifies the start
                      of an element.                    
                </javadoc>
                <declaration name="EndTagType" type="short" line="913"/>
                <javadoc line="913">
                    A possible value for getType.  This specifies
                      that this record type is a end tag and
                      represents markup that specifies the end
                      of an element.                    
                </javadoc>
                <declaration name="ContentType" type="short" line="920"/>
                <javadoc line="920">
                    A possible value for getType.  This specifies
                      that this record type represents content.                    
                </javadoc>
                <declaration name="JoinPreviousDirection" type="short" line="925"/>
                <javadoc line="925">
                    A possible value for getDirection.  This specifies
                      that the data associated with this record should
                      be joined to what precedes it.                    
                </javadoc>
                <declaration name="JoinNextDirection" type="short" line="931"/>
                <javadoc line="931">
                    A possible value for getDirection.  This specifies
                      that the data associated with this record should
                      be joined to what follows it.                    
                </javadoc>
                <declaration name="OriginateDirection" type="short" line="937"/>
                <javadoc line="937">
                    A possible value for getDirection.  This specifies
                      that the data associated with this record should
                      be used to originate a new element.  This would be
                      the normal value.                    
                </javadoc>
                <declaration name="JoinFractureDirection" type="short" line="944"/>
                <javadoc line="944">
                    A possible value for getDirection.  This specifies
                      that the data associated with this record should
                      be joined to the fractured element.                    
                </javadoc>
                <javadoc line="950">
                    Constructor useful for markup when the markup will not
                      be stored in the document.                    
                    <param>
                        a the attributes for the element                        
                    </param>
                    <param>
                        type the type of the element (StartTagType, EndTagType,
                          ContentType)                        
                    </param>
                </javadoc>
                <method name="ElementSpec" type="constructor" line="957">
                    <params>
                        <param name="a" type="AttributeSet"/>
                        <param name="type" type="short"/>
                    </params>
                </method>
                <javadoc line="960">
                    Constructor for parsing inside the document when
                      the data has already been added, but len information
                      is needed.                    
                    <param>
                        a the attributes for the element                        
                    </param>
                    <param>
                        type the type of the element (StartTagType, EndTagType,
                          ContentType)                        
                    </param>
                    <param>
                        len the length >= 0                        
                    </param>
                </javadoc>
                <method name="ElementSpec" type="constructor" line="969">
                    <params>
                        <param name="a" type="AttributeSet"/>
                        <param name="type" type="short"/>
                        <param name="len" type="int"/>
                    </params>
                </method>
                <javadoc line="972">
                    Constructor for creating a spec externally for batch
                      input of content and markup into the document.                    
                    <param>
                        a the attributes for the element                        
                    </param>
                    <param>
                        type the type of the element (StartTagType, EndTagType,
                          ContentType)                        
                    </param>
                    <param>
                        txt the text for the element                        
                    </param>
                    <param>
                        offs the offset into the text >= 0                        
                    </param>
                    <param>
                        len the length of the text >= 0                        
                    </param>
                </javadoc>
                <method name="ElementSpec" type="constructor" line="982">
                    <params>
                        <param name="a" type="AttributeSet"/>
                        <param name="type" type="short"/>
                        <param name="txt" type="char[]"/>
                        <param name="offs" type="int"/>
                        <param name="len" type="int"/>
                    </params>
                </method>
                <javadoc line="990">
                    Sets the element type.                    
                    <param>
                        type the type of the element (StartTagType, EndTagType,
                          ContentType)                        
                    </param>
                </javadoc>
                <method name="setType" type="void" line="995">
                    <params>
                        <param name="type" type="short"/>
                    </params>
                </method>
                <javadoc line="998">
                    Gets the element type.                    
                    <return>
                        the type of the element (StartTagType, EndTagType,
                          ContentType)                        
                    </return>
                </javadoc>
                <method name="getType" type="short" line="1003"/>
                <javadoc line="1006">
                    Sets the direction.                    
                    <param>
                        direction the direction (JoinPreviousDirection,
                          JoinNextDirection)                        
                    </param>
                </javadoc>
                <method name="setDirection" type="void" line="1011">
                    <params>
                        <param name="direction" type="short"/>
                    </params>
                </method>
                <javadoc line="1014">
                    Gets the direction.                    
                    <return>
                        the direction (JoinPreviousDirection, JoinNextDirection)                        
                    </return>
                </javadoc>
                <method name="getDirection" type="short" line="1018"/>
                <javadoc line="1021">
                    Gets the element attributes.                    
                    <return>
                        the attribute set                        
                    </return>
                </javadoc>
                <method name="getAttributes" type="AttributeSet" line="1025"/>
                <javadoc line="1028">
                    Gets the array of characters.                    
                    <return>
                        the array                        
                    </return>
                </javadoc>
                <method name="getArray" type="char[]" line="1032"/>
                <javadoc line="1035">
                    Gets the starting offset.                    
                    <return>
                        the offset >= 0                        
                    </return>
                </javadoc>
                <method name="getOffset" type="int" line="1039"/>
                <javadoc line="1042">
                    Gets the length.                    
                    <return>
                        the length >= 0                        
                    </return>
                </javadoc>
                <method name="getLength" type="int" line="1046"/>
                <javadoc line="1049">
                    Converts the element to a string.                    
                    <return>
                        the string                        
                    </return>
                </javadoc>
                <method name="toString" type="String" line="1053">
                    <declaration name="tlbl" type="String" line="1054"/>
                    <declaration name="plbl" type="String" line="1055"/>
                </method>
                <declaration name="attr" type="AttributeSet" line="1083"/>
                <declaration name="len" type="int" line="1084"/>
                <declaration name="type" type="short" line="1085"/>
                <declaration name="direction" type="short" line="1086"/>
                <declaration name="offs" type="int" line="1087"/>
                <declaration name="data" type="char[]" line="1088"/>
            </class>
            <class name="ElementBuffer" line="1090">
                <implements interface="Serializable"/>
                <javadoc line="1090">
                    Class to manage changes to the element
                      hierarchy.
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      Serialized objects of this class will not be compatible with
                      future Swing releases. The current serialization support is
                      appropriate for short term storage or RMI between applications running
                      the same version of Swing.  As of 1.4, support for long term storage
                      of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                      has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                      Please see {@link java.beans.XMLEncoder}.                    
                </javadoc>
                <javadoc line="1104">
                    Creates a new ElementBuffer.                    
                    <param>
                        root the root element                        
                    </param>
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <method name="ElementBuffer" type="constructor" line="1109">
                    <params>
                        <param name="root" type="Element"/>
                    </params>
                </method>
                <javadoc line="1114">
                    Gets the root element.                    
                    <return>
                        the root element                        
                    </return>
                </javadoc>
                <method name="getRootElement" type="Element" line="1118"/>
                <javadoc line="1121">
                    Inserts new content.                    
                    <param>
                        offset the starting offset >= 0                        
                    </param>
                    <param>
                        length the length >= 0                        
                    </param>
                    <param>
                        data the data to insert                        
                    </param>
                    <param>
                        de the event capturing this edit                        
                    </param>
                </javadoc>
                <method name="insert" type="void" line="1128">
                    <params>
                        <param name="offset" type="int"/>
                        <param name="length" type="int"/>
                        <param name="data" type="ElementSpec[]"/>
                        <param name="de" type="DefaultDocumentEvent"/>
                    </params>
                    <scope line="1129"/>
                </method>
                <method name="create" type="void" line="1138">
                    <params>
                        <param name="length" type="int"/>
                        <param name="data" type="ElementSpec[]"/>
                        <param name="de" type="DefaultDocumentEvent"/>
                    </params>
                    <declaration name="elem" type="Element" line="1141"/>
                    <declaration name="index" type="int" line="1142"/>
                    <scope line="1143">
                        <declaration name="child" type="Element" line="1144"/>
                    </scope>
                    <declaration name="ec" type="ElemChanges" line="1149"/>
                    <declaration name="child" type="Element" line="1150"/>
                    <scope line="1153"/>
                    <declaration name="n" type="int" line="1156"/>
                    <declaration name="newAttrs" type="AttributeSet" line="1157"/>
                    <scope line="1158"/>
                    <scope line="1161"/>
                    <declaration name="attr" type="MutableAttributeSet" line="1164"/>
                    <scope line="1168"/>
                    <scope line="1171"/>
                </method>
                <javadoc line="1177">
                    Removes content.                    
                    <param>
                        offset the starting offset >= 0                        
                    </param>
                    <param>
                        length the length >= 0                        
                    </param>
                    <param>
                        de the event capturing this edit                        
                    </param>
                </javadoc>
                <method name="remove" type="void" line="1183">
                    <params>
                        <param name="offset" type="int"/>
                        <param name="length" type="int"/>
                        <param name="de" type="DefaultDocumentEvent"/>
                    </params>
                </method>
                <javadoc line="1188">
                    Changes content.                    
                    <param>
                        offset the starting offset >= 0                        
                    </param>
                    <param>
                        length the length >= 0                        
                    </param>
                    <param>
                        de the event capturing this edit                        
                    </param>
                </javadoc>
                <method name="change" type="void" line="1194">
                    <params>
                        <param name="offset" type="int"/>
                        <param name="length" type="int"/>
                        <param name="de" type="DefaultDocumentEvent"/>
                    </params>
                </method>
                <javadoc line="1199">
                    Inserts an update into the document.                    
                    <param>
                        data the elements to insert                        
                    </param>
                </javadoc>
                <method name="insertUpdate" type="void" line="1203">
                    <params>
                        <param name="data" type="ElementSpec[]"/>
                    </params>
                    <declaration name="elem" type="Element" line="1204"/>
                    <declaration name="index" type="int" line="1205"/>
                    <scope line="1206">
                        <declaration name="child" type="Element" line="1207"/>
                    </scope>
                    <declaration name="i" type="int" line="1215"/>
                    <scope line="1217"/>
                    <scope line="1222"/>
                    <declaration name="n" type="int" line="1226"/>
                    <scope line="1227"/>
                    <scope line="1231"/>
                    <scope line="1234"/>
                    <scope line="1237">
                        <declaration name="change" type="ElemChanges" line="1238"/>
                        <scope line="1240"/>
                    </scope>
                    <scope line="1244">
                        <declaration name="counter" type="int" line="1245"/>
                        <scope line="1246"/>
                        <declaration name="change" type="ElemChanges" line="1249"/>
                    </scope>
                </method>
                <javadoc line="1253">
                    Updates the element structure in response to a removal from the
                      associated sequence in the document.  Any elements consumed by the
                      span of the removal are removed.                    
                </javadoc>
                <method name="removeUpdate" type="void" line="1258"/>
                <javadoc line="1261">
                    Updates the element structure in response to a change in the
                      document.                    
                </javadoc>
                <method name="changeUpdate" type="void" line="1265">
                    <declaration name="didEnd" type="boolean" line="1266"/>
                    <scope line="1267">
                        <scope line="1268"/>
                    </scope>
                    <scope line="1273"/>
                </method>
                <method name="split" type="boolean" line="1277">
                    <params>
                        <param name="offs" type="int"/>
                        <param name="len" type="int"/>
                    </params>
                    <declaration name="splitEnd" type="boolean" line="1278"/>
                    <declaration name="e" type="Element" line="1279"/>
                    <declaration name="index" type="int" line="1280"/>
                    <scope line="1281"/>
                    <declaration name="ec" type="ElemChanges" line="1286"/>
                    <declaration name="child" type="Element" line="1287"/>
                    <scope line="1288">
                        <declaration name="index0" type="int" line="1289"/>
                        <declaration name="index1" type="int" line="1290"/>
                        <scope line="1291">
                            <scope line="1293"/>
                            <scope line="1303">
                                <scope line="1305"/>
                            </scope>
                        </scope>
                        <scope line="1318"/>
                        <scope line="1323"/>
                    </scope>
                </method>
                <javadoc line="1335">
                    Creates the UndoableEdit record for the edits made
                      in the buffer.                    
                </javadoc>
                <method name="endEdits" type="void" line="1339">
                    <params>
                        <param name="de" type="DefaultDocumentEvent"/>
                    </params>
                    <declaration name="n" type="int" line="1340"/>
                    <scope line="1341">
                        <declaration name="ec" type="ElemChanges" line="1342"/>
                        <declaration name="removed" type="Element[]" line="1343"/>
                        <declaration name="added" type="Element[]" line="1345"/>
                        <declaration name="index" type="int" line="1347"/>
                        <declaration name="ee" type="ElementEdit" line="1349"/>
                    </scope>
                </method>
                <javadoc line="1355">
                    Initialize the buffer                    
                </javadoc>
                <method name="beginEdits" type="void" line="1358">
                    <params>
                        <param name="offset" type="int"/>
                        <param name="length" type="int"/>
                    </params>
                    <scope line="1363"/>
                    <scope line="1366"/>
                    <scope line="1369"/>
                    <scope line="1372"/>
                </method>
                <javadoc line="1379">
                    Pushes a new element onto the stack that represents
                      the current path.                    
                    <param>
                        record Whether or not the push should be
                          recorded as an element change or not.                        
                    </param>
                    <param>
                        isFracture true if pushing on an element that was created
                          as the result of a fracture.                        
                    </param>
                </javadoc>
                <method name="push" type="void" line="1387">
                    <params>
                        <param name="e" type="Element"/>
                        <param name="index" type="int"/>
                        <param name="isFracture" type="boolean"/>
                    </params>
                    <declaration name="ec" type="ElemChanges" line="1388"/>
                </method>
                <method name="push" type="void" line="1391">
                    <params>
                        <param name="e" type="Element"/>
                        <param name="index" type="int"/>
                    </params>
                </method>
                <method name="pop" type="void" line="1394">
                    <declaration name="ec" type="ElemChanges" line="1395"/>
                    <scope line="1397"/>
                    <scope line="1400">
                        <declaration name="e" type="Element" line="1401"/>
                        <scope line="1402"/>
                    </scope>
                </method>
                <javadoc line="1408">
                    move the current offset forward by n.                    
                </javadoc>
                <method name="advance" type="void" line="1411">
                    <params>
                        <param name="n" type="int"/>
                    </params>
                </method>
                <method name="insertElement" type="void" line="1414">
                    <params>
                        <param name="es" type="ElementSpec"/>
                    </params>
                    <declaration name="ec" type="ElemChanges" line="1415"/>
                    <declaration name="parent" type="Element" line="1420"/>
                    <scope line="1421"/>
                    <scope line="1428"/>
                    <scope line="1431"/>
                    <declaration name="belem" type="Element" line="1437"/>
                    <declaration name="len" type="int" line="1447"/>
                    <scope line="1448">
                        <declaration name="leaf" type="Element" line="1449"/>
                    </scope>
                    <scope line="1452">
                        <scope line="1453">
                            <declaration name="first" type="Element" line="1454"/>
                            <scope line="1455">
                                <scope line="1456">
                                    <scope line="1457"/>
                                </scope>
                            </scope>
                            <declaration name="leaf" type="Element" line="1464"/>
                        </scope>
                        <scope line="1468">
                            <declaration name="first" type="Element" line="1469"/>
                            <declaration name="leaf" type="Element" line="1470"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="1479">
                    Remove the elements from &lt;code&gt;elem&lt;/code&gt; in range
                      &lt;code&gt;rmOffs0&lt;/code&gt;, &lt;code&gt;rmOffs1&lt;/code&gt;. This uses
                      &lt;code&gt;canJoin&lt;/code&gt; and &lt;code&gt;join&lt;/code&gt; to handle joining
                      the endpoints of the insertion.                    
                    <return>
                        true if elem will no longer have any elements.                        
                    </return>
                </javadoc>
                <method name="removeElements" type="boolean" line="1486">
                    <params>
                        <param name="elem" type="Element"/>
                        <param name="rmOffs0" type="int"/>
                        <param name="rmOffs1" type="int"/>
                    </params>
                    <scope line="1487">
                        <declaration name="index0" type="int" line="1488"/>
                        <declaration name="index1" type="int" line="1489"/>
                        <declaration name="ec" type="ElemChanges" line="1491"/>
                        <scope line="1492">
                            <declaration name="child0" type="Element" line="1493"/>
                            <scope line="1494"/>
                            <scope line="1497"/>
                        </scope>
                        <scope line="1501">
                            <declaration name="child0" type="Element" line="1502"/>
                            <declaration name="child1" type="Element" line="1503"/>
                            <declaration name="containsOffs1" type="boolean" line="1504"/>
                            <scope line="1505">
                                <scope line="1506"/>
                                <declaration name="e" type="Element" line="1509"/>
                            </scope>
                            <scope line="1512">
                                <declaration name="rmIndex0" type="int" line="1513"/>
                                <declaration name="rmIndex1" type="int" line="1514"/>
                                <scope line="1515"/>
                                <scope line="1519"/>
                                <scope line="1523"/>
                                <scope line="1526"/>
                                <scope line="1529"/>
                                <scope line="1532">
                                    <scope line="1533"/>
                                </scope>
                                <scope line="1538">
                                    <scope line="1539"/>
                                </scope>
                            </scope>
                        </scope>
                        <scope line="1546"/>
                    </scope>
                </method>
                <javadoc line="1552">
                    Can the two given elements be coelesced together
                      into one element?                    
                </javadoc>
                <method name="canJoin" type="boolean" line="1556">
                    <params>
                        <param name="e0" type="Element"/>
                        <param name="e1" type="Element"/>
                    </params>
                    <scope line="1557"/>
                    <declaration name="leaf0" type="boolean" line="1560"/>
                    <declaration name="leaf1" type="boolean" line="1561"/>
                    <scope line="1562"/>
                    <scope line="1565"/>
                    <declaration name="name0" type="String" line="1568"/>
                    <declaration name="name1" type="String" line="1569"/>
                    <scope line="1570"/>
                    <scope line="1573"/>
                </method>
                <javadoc line="1578">
                    Joins the two elements carving out a hole for the
                      given removed range.                    
                </javadoc>
                <method name="join" type="Element" line="1582">
                    <params>
                        <param name="p" type="Element"/>
                        <param name="left" type="Element"/>
                        <param name="right" type="Element"/>
                        <param name="rmOffs0" type="int"/>
                        <param name="rmOffs1" type="int"/>
                    </params>
                    <scope line="1583"/>
                    <scope line="1586">
                        <declaration name="to" type="Element" line="1587"/>
                        <declaration name="ljIndex" type="int" line="1588"/>
                        <declaration name="rjIndex" type="int" line="1589"/>
                        <declaration name="lj" type="Element" line="1590"/>
                        <scope line="1591"/>
                        <declaration name="rj" type="Element" line="1594"/>
                        <scope line="1595"/>
                        <declaration name="children" type="Vector&lt;Element&gt;" line="1598"/>
                        <scope line="1599"/>
                        <scope line="1602">
                            <declaration name="e" type="Element" line="1603"/>
                        </scope>
                        <scope line="1606">
                            <scope line="1607"/>
                            <scope line="1610"/>
                        </scope>
                        <declaration name="n" type="int" line="1614"/>
                        <scope line="1615"/>
                        <declaration name="c" type="Element[]" line="1618"/>
                    </scope>
                    <scope line="1623"/>
                </method>
                <javadoc line="1627">
                    Creates a copy of this element, with a different
                      parent.                    
                    <param>
                        parent the parent element                        
                    </param>
                    <param>
                        clonee the element to be cloned                        
                    </param>
                    <return>
                        the copy                        
                    </return>
                </javadoc>
                <method name="clone" type="Element" line="1634">
                    <params>
                        <param name="parent" type="Element"/>
                        <param name="clonee" type="Element"/>
                    </params>
                    <scope line="1635"/>
                    <declaration name="e" type="Element" line="1638"/>
                    <declaration name="n" type="int" line="1639"/>
                    <declaration name="children" type="Element[]" line="1640"/>
                    <scope line="1641"/>
                </method>
                <javadoc line="1647">
                    Creates a copy of this element, with a different
                      parent. Children of this element included in the
                      removal range will be discarded.                    
                </javadoc>
                <method name="cloneAsNecessary" type="Element" line="1652">
                    <params>
                        <param name="parent" type="Element"/>
                        <param name="clonee" type="Element"/>
                        <param name="rmOffs0" type="int"/>
                        <param name="rmOffs1" type="int"/>
                    </params>
                    <scope line="1653"/>
                    <declaration name="e" type="Element" line="1656"/>
                    <declaration name="n" type="int" line="1657"/>
                    <declaration name="childrenList" type="ArrayList&lt;Element&gt;" line="1658"/>
                    <scope line="1659">
                        <declaration name="elem" type="Element" line="1660"/>
                        <scope line="1661"/>
                    </scope>
                    <declaration name="children" type="Element[]" line="1665"/>
                </method>
                <javadoc line="1670">
                    Determines if a fracture needs to be performed. A fracture
                      can be thought of as moving the right part of a tree to a
                      new location, where the right part is determined by what has
                      been inserted. &lt;code&gt;depth&lt;/code&gt; is used to indicate a
                      JoinToFracture is needed to an element at a depth
                      of &lt;code&gt;depth&lt;/code&gt;. Where the root is 0, 1 is the children
                      of the root...
                      &lt;p&gt;This will invoke &lt;code&gt;fractureFrom&lt;/code&gt; if it is determined
                      a fracture needs to happen.                    
                </javadoc>
                <method name="fracture" type="void" line="1681">
                    <params>
                        <param name="depth" type="int"/>
                    </params>
                    <declaration name="cLength" type="int" line="1682"/>
                    <declaration name="lastIndex" type="int" line="1683"/>
                    <declaration name="needRecreate" type="boolean" line="1684"/>
                    <declaration name="lastChange" type="ElemChanges" line="1685"/>
                    <declaration name="childAltered" type="boolean" line="1686"/>
                    <declaration name="deepestAlteredIndex" type="int" line="1687"/>
                    <declaration name="lastAlteredIndex" type="int" line="1688"/>
                    <scope line="1690">
                        <declaration name="change" type="ElemChanges" line="1691"/>
                        <scope line="1692">
                            <scope line="1694"/>
                        </scope>
                        <scope line="1699"/>
                    </scope>
                    <scope line="1704"/>
                </method>
                <javadoc line="1709">
                    Recreates the elements to the right of the insertion point.
                      This starts at &lt;code&gt;startIndex&lt;/code&gt; in &lt;code&gt;changed&lt;/code&gt;,
                      and calls duplicate to duplicate existing elements.
                      This will also duplicate the elements along the insertion
                      point, until a depth of &lt;code&gt;endFractureIndex&lt;/code&gt; is
                      reached, at which point only the elements to the right of
                      the insertion point are duplicated.                    
                </javadoc>
                <method name="fractureFrom" type="void" line="1718">
                    <params>
                        <param name="changed" type="ElemChanges[]"/>
                        <param name="startIndex" type="int"/>
                        <param name="endFractureIndex" type="int"/>
                    </params>
                    <declaration name="change" type="ElemChanges" line="1719"/>
                    <declaration name="child" type="Element" line="1720"/>
                    <declaration name="newChild" type="Element" line="1721"/>
                    <declaration name="changeLength" type="int" line="1722"/>
                    <scope line="1725"/>
                    <scope line="1728"/>
                    <declaration name="parent" type="Element" line="1733"/>
                    <scope line="1734">
                        <declaration name="isEnd" type="boolean" line="1735"/>
                        <declaration name="isEndLeaf" type="boolean" line="1736"/>
                        <scope line="1738"/>
                        <scope line="1742"/>
                        <scope line="1745">
                            <scope line="1746"/>
                            <scope line="1749"/>
                        </scope>
                        <declaration name="kidsToMove" type="int" line="1754"/>
                        <declaration name="kids" type="Element[]" line="1755"/>
                        <declaration name="moveStartIndex" type="int" line="1756"/>
                        <declaration name="kidStartIndex" type="int" line="1757"/>
                        <scope line="1758">
                            <scope line="1759"/>
                            <scope line="1763"/>
                        </scope>
                        <scope line="1769">
                            <scope line="1770"/>
                            <scope line="1774"/>
                        </scope>
                        <scope line="1780">
                            <declaration name="toMove" type="Element" line="1781"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="1789">
                    Recreates &lt;code&gt;toDuplicate&lt;/code&gt;. This is called when an
                      element needs to be created as the result of an insertion. This
                      will recurse and create all the children. This is similiar to
                      &lt;code&gt;clone&lt;/code&gt;, but deteremines the offsets differently.                    
                </javadoc>
                <method name="recreateFracturedElement" type="Element" line="1795">
                    <params>
                        <param name="parent" type="Element"/>
                        <param name="toDuplicate" type="Element"/>
                    </params>
                    <scope line="1796"/>
                    <declaration name="newParent" type="Element" line="1799"/>
                    <declaration name="childCount" type="int" line="1800"/>
                    <declaration name="newKids" type="Element[]" line="1801"/>
                    <scope line="1802"/>
                </method>
                <javadoc line="1808">
                    Splits the bottommost leaf in &lt;code&gt;path&lt;/code&gt;.
                      This is called from insert when the first element is NOT content.                    
                </javadoc>
                <method name="fractureDeepestLeaf" type="void" line="1812">
                    <params>
                        <param name="specs" type="ElementSpec[]"/>
                    </params>
                    <declaration name="ec" type="ElemChanges" line="1813"/>
                    <declaration name="child" type="Element" line="1814"/>
                    <scope line="1815">
                        <declaration name="newChild" type="Element" line="1816"/>
                    </scope>
                </method>
                <javadoc line="1823">
                    Inserts the first content. This needs to be separate to handle
                      joining.                    
                </javadoc>
                <method name="insertFirstContent" type="void" line="1827">
                    <params>
                        <param name="specs" type="ElementSpec[]"/>
                    </params>
                    <declaration name="firstSpec" type="ElementSpec" line="1828"/>
                    <declaration name="ec" type="ElemChanges" line="1829"/>
                    <declaration name="child" type="Element" line="1830"/>
                    <declaration name="firstEndOffset" type="int" line="1831"/>
                    <declaration name="isOnlyContent" type="boolean" line="1832"/>
                    <scope line="1835">
                        <declaration name="newE" type="Element" line="1836"/>
                    </scope>
                    <scope line="1842"/>
                    <scope line="1848">
                        <declaration name="newE" type="Element" line="1849"/>
                        <declaration name="nextChild" type="Element" line="1851"/>
                    </scope>
                    <scope line="1860">
                        <declaration name="newE" type="Element" line="1861"/>
                    </scope>
                    <declaration name="newE" type="Element" line="1865"/>
                    <scope line="1867"/>
                    <scope line="1870"/>
                </method>
                <declaration name="root" type="Element" line="1876"/>
                <declaration name="pos" type="int" line="1877"/>
                <declaration name="offset" type="int" line="1878"/>
                <declaration name="length" type="int" line="1879"/>
                <declaration name="endOffset" type="int" line="1880"/>
                <declaration name="changes" type="Vector&lt;ElemChanges&gt;" line="1881"/>
                <declaration name="path" type="Stack&lt;ElemChanges&gt;" line="1882"/>
                <declaration name="insertOp" type="boolean" line="1883"/>
                <declaration name="recreateLeafs" type="boolean" line="1884"/>
                <declaration name="insertPath" type="ElemChanges[]" line="1885"/>
                <javadoc line="1885">
                    For insert, path to inserted elements.                    
                </javadoc>
                <declaration name="createdFracture" type="boolean" line="1889"/>
                <javadoc line="1889">
                    Only for insert, set to true when the fracture has been created.                    
                </javadoc>
                <declaration name="fracturedParent" type="Element" line="1893"/>
                <javadoc line="1893">
                    Parent that contains the fractured child.                    
                </javadoc>
                <declaration name="fracturedChild" type="Element" line="1897"/>
                <javadoc line="1897">
                    Fractured child.                    
                </javadoc>
                <declaration name="offsetLastIndex" type="boolean" line="1901"/>
                <javadoc line="1901">
                    Used to indicate when fracturing that the last leaf should be
                      skipped.                    
                </javadoc>
                <declaration name="offsetLastIndexOnReplace" type="boolean" line="1906"/>
                <javadoc line="1906">
                    Used to indicate that the parent of the deepest leaf should
                      offset the index by 1 when adding/removing elements in an
                      insert.                    
                </javadoc>
                <class name="ElemChanges" line="1912">
                    <method name="ElemChanges" type="constructor" line="1913">
                        <params>
                            <param name="parent" type="Element"/>
                            <param name="index" type="int"/>
                            <param name="isFracture" type="boolean"/>
                        </params>
                    </method>
                    <method name="toString" type="String" line="1920"/>
                    <declaration name="parent" type="Element" line="1923"/>
                    <declaration name="index" type="int" line="1924"/>
                    <declaration name="added" type="Vector&lt;Element&gt;" line="1925"/>
                    <declaration name="removed" type="Vector&lt;Element&gt;" line="1926"/>
                    <declaration name="isFracture" type="boolean" line="1927"/>
                </class>
            </class>
            <class name="AttributeUndoableEdit" line="1930">
                <extends class="AbstractUndoableEdit"/>
                <javadoc line="1930">
                    An UndoableEdit used to remember AttributeSet changes to an
                      Element.                    
                </javadoc>
                <method name="AttributeUndoableEdit" type="constructor" line="1935">
                    <params>
                        <param name="element" type="Element"/>
                        <param name="newAttributes" type="AttributeSet"/>
                        <param name="isReplacing" type="boolean"/>
                    </params>
                </method>
                <javadoc line="1942">
                    Redoes a change.                    
                    <exception>
                        CannotRedoException if the change cannot be redone                        
                    </exception>
                </javadoc>
                <method name="redo" type="void" line="1946">
                    <declaration name="as" type="MutableAttributeSet" line="1948"/>
                </method>
                <javadoc line="1952">
                    Undoes a change.                    
                    <exception>
                        CannotUndoException if the change cannot be undone                        
                    </exception>
                </javadoc>
                <method name="undo" type="void" line="1956">
                    <declaration name="as" type="MutableAttributeSet" line="1958"/>
                </method>
                <declaration name="newAttributes" type="AttributeSet" line="1962"/>
                <declaration name="copy" type="AttributeSet" line="1963"/>
                <declaration name="isReplacing" type="boolean" line="1964"/>
                <declaration name="element" type="Element" line="1965"/>
            </class>
            <class name="StyleChangeUndoableEdit" line="1967">
                <extends class="AbstractUndoableEdit"/>
                <javadoc line="1967">
                    UndoableEdit for changing the resolve parent of an Element.                    
                </javadoc>
                <method name="StyleChangeUndoableEdit" type="constructor" line="1971">
                    <params>
                        <param name="element" type="AbstractElement"/>
                        <param name="newStyle" type="Style"/>
                    </params>
                </method>
                <javadoc line="1977">
                    Redoes a change.                    
                    <exception>
                        CannotRedoException if the change cannot be redone                        
                    </exception>
                </javadoc>
                <method name="redo" type="void" line="1981"/>
                <javadoc line="1985">
                    Undoes a change.                    
                    <exception>
                        CannotUndoException if the change cannot be undone                        
                    </exception>
                </javadoc>
                <method name="undo" type="void" line="1989"/>
                <declaration name="element" type="AbstractElement" line="1993"/>
                <javadoc line="1993">
                    Element to change resolve parent of.                    
                </javadoc>
                <declaration name="newStyle" type="Style" line="1997"/>
                <javadoc line="1997">
                    New style.                    
                </javadoc>
                <declaration name="oldStyle" type="AttributeSet" line="2001"/>
                <javadoc line="2001">
                    Old style, before setting newStyle.                    
                </javadoc>
            </class>
            <class name="AbstractChangeHandler" line="2006">
                <implements interface="ChangeListener"/>
                <javadoc line="2006">
                    Base class for style change handlers with support for stale objects detection.                    
                </javadoc>
                <class name="DocReference" line="2010">
                    <extends class="WeakReference">
                        <type_params>
                            <type_param name="DefaultStyledDocument"/>
                        </type_params>
                    </extends>
                    <method name="DocReference" type="constructor" line="2011">
                        <params>
                            <param name="d" type="DefaultStyledDocument"/>
                            <param name="q" type="ReferenceQueue<DefaultStyledDocument>"/>
                        </params>
                    </method>
                    <javadoc line="2014">
                        Return a reference to the style change handler object.                        
                    </javadoc>
                    <method name="getListener" type="ChangeListener" line="2017"/>
                </class>
                <declaration name="queueMap" type="Map&lt;Class,ReferenceQueue&lt;DefaultStyledDocument&gt;&gt;" line="2021"/>
                <javadoc line="2021">
                    Class-specific reference queues.                    
                </javadoc>
                <declaration name="doc" type="DocReference" line="2025"/>
                <javadoc line="2025">
                    A weak reference to the document object.                    
                </javadoc>
                <method name="AbstractChangeHandler" type="constructor" line="2029">
                    <params>
                        <param name="d" type="DefaultStyledDocument"/>
                    </params>
                    <declaration name="c" type="Class" line="2030"/>
                    <declaration name="q" type="ReferenceQueue&lt;DefaultStyledDocument&gt;" line="2031"/>
                    <scope line="2032">
                        <scope line="2034"/>
                    </scope>
                </method>
                <javadoc line="2041">
                    Return a list of stale change listeners.
                      A change listener becomes &quot;stale&quot; when its document is cleaned by GC.                    
                </javadoc>
                <method name="getStaleListeners" type="List<ChangeListener>" line="2045">
                    <params>
                        <param name="l" type="ChangeListener"/>
                    </params>
                    <declaration name="staleListeners" type="List&lt;ChangeListener&gt;" line="2046"/>
                    <declaration name="q" type="ReferenceQueue&lt;DefaultStyledDocument&gt;" line="2047"/>
                    <scope line="2048">
                        <declaration name="r" type="DocReference" line="2049"/>
                        <scope line="2050">
                            <scope line="2051"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="2058">
                    The ChangeListener wrapper which guards against dead documents.                    
                </javadoc>
                <method name="stateChanged" type="void" line="2061">
                    <params>
                        <param name="e" type="ChangeEvent"/>
                    </params>
                    <declaration name="d" type="DefaultStyledDocument" line="2062"/>
                    <scope line="2063"/>
                </method>
                <method name="fireStateChanged" type="void" line="2067"/>
                <javadoc line="2067">
                    Run the actual class-specific stateChanged() method.                    
                </javadoc>
            </class>
            <class name="StyleChangeHandler" line="2072">
                <extends class="AbstractChangeHandler"/>
                <javadoc line="2072">
                    Added to all the Styles. When instances of this receive a
                      stateChanged method, styleChanged is invoked.                    
                </javadoc>
                <method name="StyleChangeHandler" type="constructor" line="2077">
                    <params>
                        <param name="d" type="DefaultStyledDocument"/>
                    </params>
                </method>
                <method name="fireStateChanged" type="void" line="2080">
                    <params>
                        <param name="d" type="DefaultStyledDocument"/>
                        <param name="e" type="ChangeEvent"/>
                    </params>
                    <declaration name="source" type="Object" line="2081"/>
                    <scope line="2082"/>
                    <scope line="2085"/>
                </method>
            </class>
            <class name="StyleContextChangeHandler" line="2090">
                <extends class="AbstractChangeHandler"/>
                <javadoc line="2090">
                    Added to the StyleContext. When the StyleContext changes, this invokes
                      &lt;code&gt;updateStylesListeningTo&lt;/code&gt;.                    
                </javadoc>
                <method name="StyleContextChangeHandler" type="constructor" line="2095">
                    <params>
                        <param name="d" type="DefaultStyledDocument"/>
                    </params>
                </method>
                <method name="fireStateChanged" type="void" line="2098">
                    <params>
                        <param name="d" type="DefaultStyledDocument"/>
                        <param name="e" type="ChangeEvent"/>
                    </params>
                </method>
            </class>
            <class name="ChangeUpdateRunnable" line="2102">
                <implements interface="Runnable"/>
                <javadoc line="2102">
                    When run this creates a change event for the complete document
                      and fires it.                    
                </javadoc>
                <declaration name="isPending" type="boolean" line="2107"/>
                <method name="run" type="void" line="2108">
                    <scope line="2109"/>
                    <scope line="2112">
                        <declaration name="dde" type="DefaultDocumentEvent" line="2114"/>
                    </scope>
                    <scope line="2118"/>
                </method>
            </class>
        </class>
    </source>