<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text">
        <import package="java.awt.Color"/>
        <import package="java.awt.Font"/>
        <import package="java.awt.font.TextAttribute"/>
        <import package="java.lang.ref.ReferenceQueue"/>
        <import package="java.lang.ref.WeakReference"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.List"/>
        <import package="java.util.Map"/>
        <import package="java.util.Stack"/>
        <import package="java.util.Vector"/>
        <import package="java.util.ArrayList"/>
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.Serializable"/>
        <import package="javax.swing.event"/>
        <import package="javax.swing.undo.AbstractUndoableEdit"/>
        <import package="javax.swing.undo.CannotRedoException"/>
        <import package="javax.swing.undo.CannotUndoException"/>
        <import package="javax.swing.undo.UndoableEdit"/>
        <import package="javax.swing.SwingUtilities"/>
        <import package="sun.swing.SwingUtilities2.IMPLIED_CR"/>
        <class name="DefaultStyledDocument" line="50">
            <extends class="AbstractDocument"/>
            <comment line="622">
                --- local methods -------------------------------------------------                
            </comment>
            <comment line="1098">
                --- member variables -----------------------------------------------------------                
            </comment>
            <implements interface="StyledDocument"/>
            <javadoc line="50">
                A document that can be marked up with character and paragraph
                  styles in a manner similar to the Rich Text Format.  The element
                  structure for this document represents style crossings for
                  style runs.  These style runs are mapped into a paragraph element
                  structure (which may reside in some other structure).  The
                  style runs break at paragraph boundaries since logical styles are
                  assigned to paragraph boundaries.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <author>
                    Timothy Prinzing                    
                </author>
                <see>
                    Document                    
                </see>
                <see>
                    AbstractDocument                    
                </see>
            </javadoc>
            <javadoc line="74">
                Constructs a styled document.                
                <param>
                    c  the container for the content                    
                </param>
                <param>
                    styles resources and style definitions which may
                      be shared across documents                    
                </param>
            </javadoc>
            <method name="DefaultStyledDocument" type="constructor" line="81">
                <params>
                    <param name="c" type="Content"/>
                    <param name="styles" type="StyleContext"/>
                </params>
                <declaration name="defaultStyle" type="Style" line="85"/>
            </method>
            <javadoc line="89">
                Constructs a styled document with the default content
                  storage implementation and a shared set of styles.                
                <param>
                    styles the styles                    
                </param>
            </javadoc>
            <method name="DefaultStyledDocument" type="constructor" line="95">
                <params>
                    <param name="styles" type="StyleContext"/>
                </params>
            </method>
            <javadoc line="99">
                Constructs a default styled document.  This buffers
                  input content by a size of &lt;em&gt;BUFFER_SIZE_DEFAULT&lt;/em&gt;
                  and has a style context that is scoped by the lifetime
                  of the document and is not shared with other documents.                
            </javadoc>
            <method name="DefaultStyledDocument" type="constructor" line="105"/>
            <javadoc line="109">
                Gets the default root element.                
                <return>
                    the root                    
                </return>
                <see>
                    Document#getDefaultRootElement                    
                </see>
            </javadoc>
            <method name="getDefaultRootElement" type="Element" line="115"/>
            <javadoc line="119">
                Initialize the document to reflect the given element
                  structure (i.e. the structure reported by the
                  &lt;code&gt;getDefaultRootElement&lt;/code&gt; method.  If the
                  document contained any data it will first be removed.                
            </javadoc>
            <method name="create" type="void" line="125">
                <params>
                    <param name="data" type="ElementSpec[]"/>
                </params>
                <comment line="132">
                    install the content                    
                </comment>
                <comment line="144">
                    build the event and element structure                    
                </comment>
                <comment line="151">
                    update bidi (possibly)                    
                </comment>
                <comment line="154">
                    notify the listeners                    
                </comment>
                <scope line="126">
                    <scope line="127"/>
                    <declaration name="c" type="Content" line="133"/>
                    <declaration name="n" type="int" line="134"/>
                    <declaration name="sb" type="StringBuilder" line="135"/>
                    <scope line="136">
                        <declaration name="es" type="ElementSpec" line="137"/>
                        <scope line="138"/>
                    </scope>
                    <declaration name="cEdit" type="UndoableEdit" line="142"/>
                    <declaration name="length" type="int" line="145"/>
                    <declaration name="evnt" type="DefaultDocumentEvent" line="146"/>
                </scope>
                <scope line="158"/>
                <scope line="160"/>
            </method>
            <javadoc line="166">
                Inserts new elements in bulk.  This is useful to allow
                  parsing with the document in an unlocked state and
                  prepare an element structure modification.  This method
                  takes an array of tokens that describe how to update an
                  element structure so the time within a write lock can
                  be greatly reduced in an asynchronous update situation.
                  &lt;p&gt;
                  This method is thread safe, although most Swing methods
                  are not. Please see
                  &lt;A HREF=&quot;http://java.sun.com/docs/books/tutorial/uiswing/misc/threads.html&quot;&gt;How
                  to Use Threads&lt;/A&gt; for more information.                
                <param>
                    offset the starting offset >= 0                    
                </param>
                <param>
                    data the element data                    
                </param>
                <exception>
                    BadLocationException for an invalid starting offset                    
                </exception>
            </javadoc>
            <method name="insert" type="void" line="183">
                <params>
                    <param name="offset" type="int"/>
                    <param name="data" type="ElementSpec[]"/>
                </params>
                <comment line="191">
                    install the content                    
                </comment>
                <comment line="202">
                    Nothing to insert, bail.                    
                </comment>
                <comment line="207">
                    create event and build the element structure                    
                </comment>
                <comment line="214">
                    update bidi (possibly)                    
                </comment>
                <comment line="217">
                    notify the listeners                    
                </comment>
                <scope line="184"/>
                <scope line="188">
                    <declaration name="c" type="Content" line="192"/>
                    <declaration name="n" type="int" line="193"/>
                    <declaration name="sb" type="StringBuilder" line="194"/>
                    <scope line="195">
                        <declaration name="es" type="ElementSpec" line="196"/>
                        <scope line="197"/>
                    </scope>
                    <scope line="201"/>
                    <declaration name="cEdit" type="UndoableEdit" line="205"/>
                    <declaration name="length" type="int" line="208"/>
                    <declaration name="evnt" type="DefaultDocumentEvent" line="209"/>
                </scope>
                <scope line="221"/>
            </method>
            <javadoc line="226">
                Removes an element from this document.
                  &lt;p&gt;The element is removed from its parent element, as well as
                  the text in the range identified by the element.  If the
                  element isn&apos;t associated with the document, {@codeIllegalArgumentException} is thrown.&lt;/p&gt;
                  &lt;p&gt;As empty branch elements are not allowed in the document, if the
                  element is the sole child, its parent element is removed as well,
                  recursively.  This means that when replacing all the children of a
                  particular element, new children should be added &lt;em&gt;before&lt;/em&gt;
                  removing old children.
                  &lt;p&gt;Element removal results in two events being fired, the{@code DocumentEvent} for changes in element structure and {@codeUndoableEditEvent} for changes in document content.&lt;/p&gt;
                  &lt;p&gt;If the element contains end-of-content mark (the last {@code&quot;\n&quot;} character in document), this character is not removed;
                  instead, preceding leaf element is extended to cover the
                  character.  If the last leaf already ends with {@code &quot;\n&quot;,} it is
                  included in content removal.&lt;/p&gt;
                  &lt;p&gt;If the element is {@code null,} {@code NullPointerException} is
                  thrown.  If the element structure would become invalid after the removal,
                  for example if the element is the document root element, {@codeIllegalArgumentException} is thrown.  If the current element structure is
                  invalid, {@code IllegalStateException} is thrown.&lt;/p&gt;                
                <param>
                    elem                      the element to remove                    
                </param>
                <throws>
                    NullPointerException      if the element is {@code null}                    
                </throws>
                <throws>
                    IllegalArgumentException  if the element could not be removed                    
                </throws>
                <throws>
                    IllegalStateException     if the element structure is invalid                    
                </throws>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="removeElement" type="void" line="263">
                <params>
                    <param name="elem" type="Element"/>
                </params>
                <scope line="264"/>
                <scope line="267"/>
            </method>
            <method name="removeElementImpl" type="void" line="272">
                <params>
                    <param name="elem" type="Element"/>
                </params>
                <comment line="291">
                    element includes the last &quot;\n&quot; character, needs special handling                    
                </comment>
                <comment line="295">
                    last &quot;\n&quot; must not be removed                    
                </comment>
                <comment line="298">
                    preceding leaf ends with &quot;\n&quot;, remove it                    
                </comment>
                <comment line="300">
                    can&apos;t happen                    
                </comment>
                <comment line="310">
                    do not leave empty branch elements                    
                </comment>
                <comment line="314">
                    shouldn&apos;t happen                    
                </comment>
                <comment line="330">
                    can only happen if the element structure is severely broken                    
                </comment>
                <comment line="337">
                    preceding leaf element should be extended to cover orphaned &quot;\n&quot;                    
                </comment>
                <comment line="342">
                    shouldn&apos;t happen                    
                </comment>
                <comment line="362">
                    do not fire UndoabeEdit event for composed text edit (unsupported)                    
                </comment>
                <scope line="273"/>
                <declaration name="parent" type="BranchElement" line="276"/>
                <scope line="277"/>
                <declaration name="startOffset" type="int" line="281"/>
                <declaration name="removeFrom" type="int" line="282"/>
                <declaration name="endOffset" type="int" line="283"/>
                <declaration name="removeTo" type="int" line="284"/>
                <declaration name="lastEndOffset" type="int" line="285"/>
                <declaration name="content" type="Content" line="286"/>
                <declaration name="atEnd" type="boolean" line="287"/>
                <declaration name="isComposedText" type="boolean" line="288"/>
                <scope line="290">
                    <scope line="292"/>
                    <scope line="296">
                        <scope line="297"/>
                    </scope>
                    <scope line="300"/>
                </scope>
                <declaration name="length" type="int" line="305"/>
                <declaration name="dde" type="DefaultDocumentEvent" line="307"/>
                <declaration name="ue" type="UndoableEdit" line="309"/>
                <scope line="311">
                    <scope line="314"/>
                </scope>
                <declaration name="removed" type="Element[]" line="318"/>
                <declaration name="added" type="Element[]" line="319"/>
                <declaration name="index" type="int" line="320"/>
                <scope line="323">
                    <scope line="324">
                        <scope line="326"/>
                    </scope>
                    <scope line="329"/>
                </scope>
                <scope line="336">
                    <declaration name="prevLeaf" type="Element" line="338"/>
                    <scope line="339"/>
                    <scope line="342"/>
                    <declaration name="prevStartOffset" type="int" line="345"/>
                    <declaration name="prevParent" type="BranchElement" line="346"/>
                    <declaration name="prevIndex" type="int" line="347"/>
                    <declaration name="newElem" type="Element" line="348"/>
                    <declaration name="prevRemoved" type="Element[]" line="351"/>
                    <declaration name="prevAdded" type="Element[]" line="352"/>
                </scope>
                <scope line="361"/>
            </method>
            <javadoc line="367">
                Adds a new style into the logical style hierarchy.  Style attributes
                  resolve from bottom up so an attribute specified in a child
                  will override an attribute specified in the parent.                
                <param>
                    nm   the name of the style (must be unique within the
                      collection of named styles).  The name may be null if the style
                      is unnamed, but the caller is responsible
                      for managing the reference returned as an unnamed style can't
                      be fetched by name.  An unnamed style may be useful for things
                      like character attribute overrides such as found in a style
                      run.                    
                </param>
                <param>
                    parent the parent style.  This may be null if unspecified
                      attributes need not be resolved in some other style.                    
                </param>
                <return>
                    the style                    
                </return>
            </javadoc>
            <method name="addStyle" type="Style" line="383">
                <params>
                    <param name="nm" type="String"/>
                    <param name="parent" type="Style"/>
                </params>
                <declaration name="styles" type="StyleContext" line="384"/>
            </method>
            <javadoc line="388">
                Removes a named style previously added to the document.                
                <param>
                    nm  the name of the style to remove                    
                </param>
            </javadoc>
            <method name="removeStyle" type="void" line="393">
                <params>
                    <param name="nm" type="String"/>
                </params>
                <declaration name="styles" type="StyleContext" line="394"/>
            </method>
            <javadoc line="398">
                Fetches a named style previously added.                
                <param>
                    nm  the name of the style                    
                </param>
                <return>
                    the style                    
                </return>
            </javadoc>
            <method name="getStyle" type="Style" line="404">
                <params>
                    <param name="nm" type="String"/>
                </params>
                <declaration name="styles" type="StyleContext" line="405"/>
            </method>
            <javadoc line="410">
                Fetches the list of of style names.                
                <return>
                    all the style names                    
                </return>
            </javadoc>
            <method name="getStyleNames" type="Enumeration<?>" line="415"/>
            <javadoc line="419">
                Sets the logical style to use for the paragraph at the
                  given position.  If attributes aren&apos;t explicitly set
                  for character and paragraph attributes they will resolve
                  through the logical style assigned to the paragraph, which
                  in turn may resolve through some hierarchy completely
                  independent of the element hierarchy in the document.
                  &lt;p&gt;
                  This method is thread safe, although most Swing methods
                  are not. Please see
                  &lt;A HREF=&quot;http://java.sun.com/docs/books/tutorial/uiswing/misc/threads.html&quot;&gt;How
                  to Use Threads&lt;/A&gt; for more information.                
                <param>
                    pos the offset from the start of the document >= 0                    
                </param>
                <param>
                    s  the logical style to assign to the paragraph, null if none                    
                </param>
            </javadoc>
            <method name="setLogicalStyle" type="void" line="435">
                <params>
                    <param name="pos" type="int"/>
                    <param name="s" type="Style"/>
                </params>
                <declaration name="paragraph" type="Element" line="436"/>
                <scope line="437">
                    <scope line="438">
                        <declaration name="edit" type="StyleChangeUndoableEdit" line="440"/>
                        <declaration name="p0" type="int" line="442"/>
                        <declaration name="p1" type="int" line="443"/>
                        <declaration name="e" type="DefaultDocumentEvent" line="444"/>
                    </scope>
                    <scope line="450"/>
                </scope>
            </method>
            <javadoc line="456">
                Fetches the logical style assigned to the paragraph
                  represented by the given position.                
                <param>
                    p the location to translate to a paragraph
                      and determine the logical style assigned >= 0.  This
                      is an offset from the start of the document.                    
                </param>
                <return>
                    the style, null if none                    
                </return>
            </javadoc>
            <method name="getLogicalStyle" type="Style" line="465">
                <params>
                    <param name="p" type="int"/>
                </params>
                <declaration name="s" type="Style" line="466"/>
                <declaration name="paragraph" type="Element" line="467"/>
                <scope line="468">
                    <declaration name="a" type="AttributeSet" line="469"/>
                    <declaration name="parent" type="AttributeSet" line="470"/>
                    <scope line="471"/>
                </scope>
            </method>
            <javadoc line="478">
                Sets attributes for some part of the document.
                  A write lock is held by this operation while changes
                  are being made, and a DocumentEvent is sent to the listeners
                  after the change has been successfully completed.
                  &lt;p&gt;
                  This method is thread safe, although most Swing methods
                  are not. Please see
                  &lt;A HREF=&quot;http://java.sun.com/docs/books/tutorial/uiswing/misc/threads.html&quot;&gt;How
                  to Use Threads&lt;/A&gt; for more information.                
                <param>
                    offset the offset in the document >= 0                    
                </param>
                <param>
                    length the length >= 0                    
                </param>
                <param>
                    s the attributes                    
                </param>
                <param>
                    replace true if the previous attributes should be replaced
                      before setting the new attributes                    
                </param>
            </javadoc>
            <method name="setCharacterAttributes" type="void" line="495">
                <params>
                    <param name="offset" type="int"/>
                    <param name="length" type="int"/>
                    <param name="s" type="AttributeSet"/>
                    <param name="replace" type="boolean"/>
                </params>
                <comment line="504">
                    split elements that need it                    
                </comment>
                <comment line="509">
                    PENDING(prinz) - this isn&apos;t a very efficient way to iterate                    
                </comment>
                <comment line="515">
                    offset + length beyond length of document, bail.                    
                </comment>
                <scope line="496"/>
                <scope line="499">
                    <declaration name="changes" type="DefaultDocumentEvent" line="501"/>
                    <declaration name="sCopy" type="AttributeSet" line="507"/>
                    <declaration name="lastEnd" type="int" line="510"/>
                    <scope line="511">
                        <declaration name="run" type="Element" line="512"/>
                        <scope line="514"/>
                        <declaration name="attr" type="MutableAttributeSet" line="518"/>
                        <scope line="520"/>
                    </scope>
                </scope>
                <scope line="528"/>
            </method>
            <javadoc line="534">
                Sets attributes for a paragraph.
                  &lt;p&gt;
                  This method is thread safe, although most Swing methods
                  are not. Please see
                  &lt;A HREF=&quot;http://java.sun.com/docs/books/tutorial/uiswing/misc/threads.html&quot;&gt;How
                  to Use Threads&lt;/A&gt; for more information.                
                <param>
                    offset the offset into the paragraph >= 0                    
                </param>
                <param>
                    length the number of characters affected >= 0                    
                </param>
                <param>
                    s the attributes                    
                </param>
                <param>
                    replace whether to replace existing attributes, or merge them                    
                </param>
            </javadoc>
            <method name="setParagraphAttributes" type="void" line="548">
                <params>
                    <param name="offset" type="int"/>
                    <param name="length" type="int"/>
                    <param name="s" type="AttributeSet"/>
                    <param name="replace" type="boolean"/>
                </params>
                <comment line="556">
                    PENDING(prinz) - this assumes a particular element structure                    
                </comment>
                <scope line="549">
                    <declaration name="changes" type="DefaultDocumentEvent" line="551"/>
                    <declaration name="sCopy" type="AttributeSet" line="554"/>
                    <declaration name="section" type="Element" line="557"/>
                    <declaration name="index0" type="int" line="558"/>
                    <declaration name="index1" type="int" line="559"/>
                    <declaration name="isI18N" type="boolean" line="560"/>
                    <declaration name="hasRuns" type="boolean" line="561"/>
                    <scope line="562">
                        <declaration name="paragraph" type="Element" line="563"/>
                        <declaration name="attr" type="MutableAttributeSet" line="564"/>
                        <scope line="566"/>
                        <scope line="570"/>
                    </scope>
                    <scope line="575"/>
                </scope>
                <scope line="582"/>
            </method>
            <javadoc line="587">
                Gets the paragraph element at the offset &lt;code&gt;pos&lt;/code&gt;.
                  A paragraph consists of at least one child Element, which is usually
                  a leaf.                
                <param>
                    pos the starting offset >= 0                    
                </param>
                <return>
                    the element                    
                </return>
            </javadoc>
            <method name="getParagraphElement" type="Element" line="595">
                <params>
                    <param name="pos" type="int"/>
                </params>
                <declaration name="e" type="Element" line="596"/>
                <scope line="597">
                    <declaration name="index" type="int" line="598"/>
                </scope>
            </method>
            <javadoc line="606">
                Gets a character element based on a position.                
                <param>
                    pos the position in the document >= 0                    
                </param>
                <return>
                    the element                    
                </return>
            </javadoc>
            <method name="getCharacterElement" type="Element" line="612">
                <params>
                    <param name="pos" type="int"/>
                </params>
                <declaration name="e" type="Element" line="613"/>
                <scope line="614">
                    <declaration name="index" type="int" line="615"/>
                </scope>
            </method>
            <javadoc line="623">
                Updates document structure as a result of text insertion.  This
                  will happen within a write lock.  This implementation simply
                  parses the inserted content for line breaks and builds up a set
                  of instructions for the element buffer.                
                <param>
                    chng a description of the document change                    
                </param>
                <param>
                    attr the attributes                    
                </param>
            </javadoc>
            <method name="insertUpdate" type="void" line="632">
                <params>
                    <param name="chng" type="DefaultDocumentEvent"/>
                    <param name="attr" type="AttributeSet"/>
                </params>
                <comment line="639">
                    Paragraph attributes should come from point after insertion.                    
                </comment>
                <comment line="640">
                    You really only notice this when inserting at a paragraph                    
                </comment>
                <comment line="641">
                    boundary.                    
                </comment>
                <comment line="644">
                    Character attributes should come from actual insertion point.                    
                </comment>
                <comment line="658">
                    Check if the previous character was a newline.                    
                </comment>
                <comment line="662">
                    Inserting after a newline.                    
                </comment>
                <comment line="677">
                    If not inserting after a new line, pull the attributes for                    
                </comment>
                <comment line="678">
                    new paragraphs from the paragraph under the insertion point.                    
                </comment>
                <comment line="711">
                    Check for join previous of first content.                    
                </comment>
                <comment line="717">
                    Do a join fracture/next for last start spec if necessary.                    
                </comment>
                <comment line="722">
                    Join to the fracture if NOT inserting at the end                    
                </comment>
                <comment line="723">
                    (fracture only happens when not inserting at end of                    
                </comment>
                <comment line="724">
                    paragraph).                    
                </comment>
                <comment line="729">
                    Join to next if parent of pParagraph has another                    
                </comment>
                <comment line="730">
                    element after pParagraph, and it isn&apos;t a leaf.                    
                </comment>
                <comment line="742">
                    Do a JoinNext for last spec if it is content, it doesn&apos;t                    
                </comment>
                <comment line="743">
                    already have a direction set, no new paragraphs have been                    
                </comment>
                <comment line="744">
                    inserted or a new paragraph has been inserted and its join                    
                </comment>
                <comment line="745">
                    direction isn&apos;t originate, and the element at endOffset                    
                </comment>
                <comment line="746">
                    is a leaf.                    
                </comment>
                <comment line="757">
                    Don&apos;t try joining to a branch!                    
                </comment>
                <comment line="764">
                    If not inserting at boundary and there is going to be a                    
                </comment>
                <comment line="765">
                    fracture, then can join next on last content if cattr                    
                </comment>
                <comment line="766">
                    matches the new attributes.                    
                </comment>
                <comment line="778">
                    Check for the composed text element. If it is, merge the character attributes                    
                </comment>
                <comment line="779">
                    into this element as well.                    
                </comment>
                <comment line="786">
                    Assure that the composed text element is named properly                    
                </comment>
                <comment line="787">
                    and doesn&apos;t have the CR attribute defined.                    
                </comment>
                <declaration name="offset" type="int" line="633"/>
                <declaration name="length" type="int" line="634"/>
                <scope line="635"/>
                <declaration name="paragraph" type="Element" line="642"/>
                <declaration name="pattr" type="AttributeSet" line="643"/>
                <declaration name="pParagraph" type="Element" line="645"/>
                <declaration name="run" type="Element" line="646"/>
                <declaration name="endOffset" type="int" line="648"/>
                <declaration name="insertingAtBoundry" type="boolean" line="649"/>
                <declaration name="cattr" type="AttributeSet" line="650"/>
                <scope line="652">
                    <declaration name="s" type="Segment" line="653"/>
                    <declaration name="parseBuffer" type="Vector&lt;ElementSpec&gt;" line="654"/>
                    <declaration name="lastStartSpec" type="ElementSpec" line="655"/>
                    <declaration name="insertingAfterNewline" type="boolean" line="656"/>
                    <declaration name="lastStartDirection" type="short" line="657"/>
                    <scope line="659">
                        <scope line="661">
                            <scope line="668">
                                <declaration name="spec" type="ElementSpec" line="669"/>
                                <scope line="670"/>
                            </scope>
                        </scope>
                    </scope>
                    <declaration name="txt" type="char[]" line="683"/>
                    <declaration name="n" type="int" line="684"/>
                    <declaration name="lastOffset" type="int" line="685"/>
                    <scope line="687">
                        <scope line="688">
                            <declaration name="breakOffset" type="int" line="689"/>
                        </scope>
                    </scope>
                    <scope line="701"/>
                    <declaration name="first" type="ElementSpec" line="707"/>
                    <declaration name="docLength" type="int" line="709"/>
                    <scope line="713"/>
                    <scope line="718">
                        <scope line="719"/>
                        <scope line="725"/>
                        <scope line="731">
                            <declaration name="parent" type="Element" line="732"/>
                            <declaration name="pParagraphIndex" type="int" line="733"/>
                            <scope line="735"/>
                        </scope>
                    </scope>
                    <scope line="747">
                        <declaration name="last" type="ElementSpec" line="748"/>
                        <scope line="754">
                            <declaration name="nextRun" type="Element" line="755"/>
                            <scope line="759"/>
                        </scope>
                    </scope>
                    <scope line="769">
                        <declaration name="last" type="ElementSpec" line="770"/>
                        <scope line="773"/>
                    </scope>
                    <scope line="780">
                        <declaration name="mattr" type="MutableAttributeSet" line="781"/>
                        <scope line="790"/>
                    </scope>
                    <declaration name="spec" type="ElementSpec[]" line="795"/>
                </scope>
                <scope line="798"/>
            </method>
            <javadoc line="804">
                This is called by insertUpdate when inserting after a new line.
                  It generates, in &lt;code&gt;parseBuffer&lt;/code&gt;, ElementSpecs that will
                  position the stack in &lt;code&gt;paragraph&lt;/code&gt;.&lt;p&gt;
                  It returns the direction the last StartSpec should have (this don&apos;t
                  necessarily create the last start spec).                
            </javadoc>
            <method name="createSpecsForInsertAfterNewline" type="short" line="813">
                <params>
                    <param name="paragraph" type="Element"/>
                    <param name="pParagraph" type="Element"/>
                    <param name="pattr" type="AttributeSet"/>
                    <param name="parseBuffer" type="Vector<ElementSpec>"/>
                    <param name="offset" type="int"/>
                    <param name="endOffset" type="int"/>
                </params>
                <comment line="814">
                    Need to find the common parent of pParagraph and paragraph.                    
                </comment>
                <comment line="816">
                    The simple (and common) case that pParagraph and                    
                </comment>
                <comment line="817">
                    paragraph have the same parent.                    
                </comment>
                <comment line="830">
                    Will only happen for text with more than 2 levels.                    
                </comment>
                <comment line="831">
                    Find the common parent of a paragraph and pParagraph                    
                </comment>
                <comment line="846">
                    e identifies the common parent.                    
                </comment>
                <comment line="847">
                    Build the ends.                    
                </comment>
                <comment line="853">
                    And the starts.                    
                </comment>
                <comment line="863">
                    If there are right parents, then we generated starts                    
                </comment>
                <comment line="864">
                    down the right subtree and there will be an element to                    
                </comment>
                <comment line="865">
                    join to.                    
                </comment>
                <comment line="868">
                    No right subtree, e.getElement(endOffset) is a                    
                </comment>
                <comment line="869">
                    leaf. There will be a facture.                    
                </comment>
                <comment line="872">
                    else: Could throw an exception here, but should never get here!                    
                </comment>
                <scope line="815">
                    <declaration name="spec" type="ElementSpec" line="818"/>
                    <declaration name="parent" type="Element" line="825"/>
                </scope>
                <scope line="829">
                    <declaration name="leftParents" type="Vector&lt;Element&gt;" line="832"/>
                    <declaration name="rightParents" type="Vector&lt;Element&gt;" line="833"/>
                    <declaration name="e" type="Element" line="834"/>
                    <scope line="835"/>
                    <declaration name="leftIndex" type="int" line="840"/>
                    <scope line="841"/>
                    <scope line="845">
                        <scope line="849"/>
                        <declaration name="spec" type="ElementSpec" line="854"/>
                        <scope line="856"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="877">
                Updates document structure as a result of text removal.                
                <param>
                    chng a description of the document change                    
                </param>
            </javadoc>
            <method name="removeUpdate" type="void" line="882">
                <params>
                    <param name="chng" type="DefaultDocumentEvent"/>
                </params>
            </method>
            <javadoc line="887">
                Creates the root element to be used to represent the
                  default document structure.                
                <return>
                    the element base                    
                </return>
            </javadoc>
            <method name="createDefaultRoot" type="AbstractElement" line="893">
                <comment line="894">
                    grabs a write-lock for this initialization and                    
                </comment>
                <comment line="895">
                    abandon it during initialization so in normal                    
                </comment>
                <comment line="896">
                    operation we can detect an illegitimate attempt                    
                </comment>
                <comment line="897">
                    to mutate attributes.                    
                </comment>
                <declaration name="section" type="BranchElement" line="899"/>
                <declaration name="paragraph" type="BranchElement" line="900"/>
                <declaration name="brk" type="LeafElement" line="902"/>
                <declaration name="buff" type="Element[]" line="903"/>
            </method>
            <javadoc line="913">
                Gets the foreground color from an attribute set.                
                <param>
                    attr the attribute set                    
                </param>
                <return>
                    the color                    
                </return>
            </javadoc>
            <method name="getForeground" type="Color" line="919">
                <params>
                    <param name="attr" type="AttributeSet"/>
                </params>
                <declaration name="styles" type="StyleContext" line="920"/>
            </method>
            <javadoc line="924">
                Gets the background color from an attribute set.                
                <param>
                    attr the attribute set                    
                </param>
                <return>
                    the color                    
                </return>
            </javadoc>
            <method name="getBackground" type="Color" line="930">
                <params>
                    <param name="attr" type="AttributeSet"/>
                </params>
                <declaration name="styles" type="StyleContext" line="931"/>
            </method>
            <javadoc line="935">
                Gets the font from an attribute set.                
                <param>
                    attr the attribute set                    
                </param>
                <return>
                    the font                    
                </return>
            </javadoc>
            <method name="getFont" type="Font" line="941">
                <params>
                    <param name="attr" type="AttributeSet"/>
                </params>
                <declaration name="styles" type="StyleContext" line="942"/>
            </method>
            <javadoc line="946">
                Called when any of this document&apos;s styles have changed.
                  Subclasses may wish to be intelligent about what gets damaged.                
                <param>
                    style The Style that has changed.                    
                </param>
            </javadoc>
            <method name="styleChanged" type="void" line="952">
                <params>
                    <param name="style" type="Style"/>
                </params>
                <comment line="953">
                    Only propagate change updated if have content                    
                </comment>
                <comment line="955">
                    lazily create a ChangeUpdateRunnable                    
                </comment>
                <comment line="960">
                    We may get a whole batch of these at once, so only                    
                </comment>
                <comment line="961">
                    queue the runnable if it is not already pending                    
                </comment>
                <scope line="954">
                    <scope line="956"/>
                    <scope line="962">
                        <scope line="963"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="971">
                Adds a document listener for notification of any changes.                
                <param>
                    listener the listener                    
                </param>
                <see>
                    Document#addDocumentListener                    
                </see>
            </javadoc>
            <method name="addDocumentListener" type="void" line="977">
                <params>
                    <param name="listener" type="DocumentListener"/>
                </params>
                <scope line="978">
                    <declaration name="oldDLCount" type="int" line="979"/>
                    <scope line="982">
                        <scope line="983"/>
                        <scope line="987">
                            <declaration name="styles" type="StyleContext" line="988"/>
                            <declaration name="staleListeners" type="List&lt;ChangeListener&gt;" line="989"/>
                            <scope line="991"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="1001">
                Removes a document listener.                
                <param>
                    listener the listener                    
                </param>
                <see>
                    Document#removeDocumentListener                    
                </see>
            </javadoc>
            <method name="removeDocumentListener" type="void" line="1007">
                <params>
                    <param name="listener" type="DocumentListener"/>
                </params>
                <scope line="1008">
                    <scope line="1010">
                        <scope line="1012"/>
                        <scope line="1017">
                            <declaration name="styles" type="StyleContext" line="1018"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="1025">
                Returns a new instance of StyleChangeHandler.                
            </javadoc>
            <method name="createStyleChangeListener" type="ChangeListener" line="1028"/>
            <javadoc line="1032">
                Returns a new instance of StyleContextChangeHandler.                
            </javadoc>
            <method name="createStyleContextChangeListener" type="ChangeListener" line="1035"/>
            <javadoc line="1039">
                Adds a ChangeListener to new styles, and removes ChangeListener from
                  old styles.                
            </javadoc>
            <method name="updateStylesListeningTo" type="void" line="1043">
                <scope line="1044">
                    <declaration name="styles" type="StyleContext" line="1045"/>
                    <scope line="1046"/>
                    <scope line="1049">
                        <declaration name="styleNames" type="Enumeration" line="1050"/>
                        <declaration name="v" type="Vector" line="1051"/>
                        <declaration name="staleListeners" type="List&lt;ChangeListener&gt;" line="1053"/>
                        <scope line="1055">
                            <declaration name="name" type="String" line="1056"/>
                            <declaration name="aStyle" type="Style" line="1057"/>
                            <declaration name="index" type="int" line="1058"/>
                            <scope line="1060">
                                <scope line="1061"/>
                            </scope>
                            <scope line="1066"/>
                        </scope>
                        <scope line="1070">
                            <declaration name="aStyle" type="Style" line="1071"/>
                        </scope>
                        <scope line="1074"/>
                    </scope>
                </scope>
            </method>
            <method name="readObject" type="void" line="1082">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
                <comment line="1085">
                    Reinstall style listeners.                    
                </comment>
                <scope line="1087">
                    <scope line="1089">
                        <declaration name="styles" type="StyleContext" line="1090"/>
                    </scope>
                </scope>
            </method>
            <declaration name="BUFFER_SIZE_DEFAULT" type="int" line="1099"/>
            <javadoc line="1099">
                The default size of the initial content buffer.                
            </javadoc>
            <declaration name="buffer" type="ElementBuffer" line="1104"/>
            <declaration name="listeningStyles" type="Vector&lt;Style&gt;" line="1106"/>
            <javadoc line="1106">
                Styles listening to.                
            </javadoc>
            <declaration name="styleChangeListener" type="ChangeListener" line="1109"/>
            <javadoc line="1109">
                Listens to Styles.                
            </javadoc>
            <declaration name="styleContextChangeListener" type="ChangeListener" line="1112"/>
            <javadoc line="1112">
                Listens to Styles.                
            </javadoc>
            <declaration name="updateRunnable" type="ChangeUpdateRunnable" line="1115"/>
            <javadoc line="1115">
                Run to create a change event for the document                
            </javadoc>
            <class name="SectionElement" line="1118">
                <extends class="BranchElement"/>
                <comment line="2465">
                    current position                    
                </comment>
                <comment line="2473">
                    For insert.                    
                </comment>
                <comment line="2491">
                    Internal record used to hold element change specifications                    
                </comment>
                <comment line="2559">
                    AttributeSet containing additional entries, must be non-mutable!                    
                </comment>
                <comment line="2561">
                    Copy of the AttributeSet the Element contained.                    
                </comment>
                <comment line="2563">
                    true if all the attributes in the element were removed first.                    
                </comment>
                <comment line="2565">
                    Efected Element.                    
                </comment>
                <comment line="2614">
                                        
                </comment>
                <javadoc line="1118">
                    Default root element for a document... maps out the
                      paragraphs/lines contained.
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      Serialized objects of this class will not be compatible with
                      future Swing releases. The current serialization support is
                      appropriate for short term storage or RMI between applications running
                      the same version of Swing.  As of 1.4, support for long term storage
                      of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                      has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                      Please see {@link java.beans.XMLEncoder}.                    
                </javadoc>
                <javadoc line="1133">
                    Creates a new SectionElement.                    
                </javadoc>
                <method name="SectionElement" type="constructor" line="1136"/>
                <javadoc line="1140">
                    Gets the name of the element.                    
                    <return>
                        the name                        
                    </return>
                </javadoc>
                <method name="getName" type="String" line="1145"/>
            </class>
            <class name="ElementSpec" line="1150">
                <comment line="2465">
                    current position                    
                </comment>
                <comment line="2473">
                    For insert.                    
                </comment>
                <comment line="2491">
                    Internal record used to hold element change specifications                    
                </comment>
                <comment line="2559">
                    AttributeSet containing additional entries, must be non-mutable!                    
                </comment>
                <comment line="2561">
                    Copy of the AttributeSet the Element contained.                    
                </comment>
                <comment line="2563">
                    true if all the attributes in the element were removed first.                    
                </comment>
                <comment line="2565">
                    Efected Element.                    
                </comment>
                <comment line="2614">
                                        
                </comment>
                <javadoc line="1150">
                    Specification for building elements.
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      Serialized objects of this class will not be compatible with
                      future Swing releases. The current serialization support is
                      appropriate for short term storage or RMI between applications running
                      the same version of Swing.  As of 1.4, support for long term storage
                      of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                      has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                      Please see {@link java.beans.XMLEncoder}.                    
                </javadoc>
                <declaration name="StartTagType" type="short" line="1164"/>
                <javadoc line="1164">
                    A possible value for getType.  This specifies
                      that this record type is a start tag and
                      represents markup that specifies the start
                      of an element.                    
                </javadoc>
                <declaration name="EndTagType" type="short" line="1172"/>
                <javadoc line="1172">
                    A possible value for getType.  This specifies
                      that this record type is a end tag and
                      represents markup that specifies the end
                      of an element.                    
                </javadoc>
                <declaration name="ContentType" type="short" line="1180"/>
                <javadoc line="1180">
                    A possible value for getType.  This specifies
                      that this record type represents content.                    
                </javadoc>
                <declaration name="JoinPreviousDirection" type="short" line="1186"/>
                <javadoc line="1186">
                    A possible value for getDirection.  This specifies
                      that the data associated with this record should
                      be joined to what precedes it.                    
                </javadoc>
                <declaration name="JoinNextDirection" type="short" line="1193"/>
                <javadoc line="1193">
                    A possible value for getDirection.  This specifies
                      that the data associated with this record should
                      be joined to what follows it.                    
                </javadoc>
                <declaration name="OriginateDirection" type="short" line="1200"/>
                <javadoc line="1200">
                    A possible value for getDirection.  This specifies
                      that the data associated with this record should
                      be used to originate a new element.  This would be
                      the normal value.                    
                </javadoc>
                <declaration name="JoinFractureDirection" type="short" line="1208"/>
                <javadoc line="1208">
                    A possible value for getDirection.  This specifies
                      that the data associated with this record should
                      be joined to the fractured element.                    
                </javadoc>
                <javadoc line="1216">
                    Constructor useful for markup when the markup will not
                      be stored in the document.                    
                    <param>
                        a the attributes for the element                        
                    </param>
                    <param>
                        type the type of the element (StartTagType, EndTagType,
                          ContentType)                        
                    </param>
                </javadoc>
                <method name="ElementSpec" type="constructor" line="1224">
                    <params>
                        <param name="a" type="AttributeSet"/>
                        <param name="type" type="short"/>
                    </params>
                </method>
                <javadoc line="1228">
                    Constructor for parsing inside the document when
                      the data has already been added, but len information
                      is needed.                    
                    <param>
                        a the attributes for the element                        
                    </param>
                    <param>
                        type the type of the element (StartTagType, EndTagType,
                          ContentType)                        
                    </param>
                    <param>
                        len the length >= 0                        
                    </param>
                </javadoc>
                <method name="ElementSpec" type="constructor" line="1238">
                    <params>
                        <param name="a" type="AttributeSet"/>
                        <param name="type" type="short"/>
                        <param name="len" type="int"/>
                    </params>
                </method>
                <javadoc line="1242">
                    Constructor for creating a spec externally for batch
                      input of content and markup into the document.                    
                    <param>
                        a the attributes for the element                        
                    </param>
                    <param>
                        type the type of the element (StartTagType, EndTagType,
                          ContentType)                        
                    </param>
                    <param>
                        txt the text for the element                        
                    </param>
                    <param>
                        offs the offset into the text >= 0                        
                    </param>
                    <param>
                        len the length of the text >= 0                        
                    </param>
                </javadoc>
                <method name="ElementSpec" type="constructor" line="1254">
                    <params>
                        <param name="a" type="AttributeSet"/>
                        <param name="type" type="short"/>
                        <param name="txt" type="char[]"/>
                        <param name="offs" type="int"/>
                        <param name="len" type="int"/>
                    </params>
                </method>
                <javadoc line="1263">
                    Sets the element type.                    
                    <param>
                        type the type of the element (StartTagType, EndTagType,
                          ContentType)                        
                    </param>
                </javadoc>
                <method name="setType" type="void" line="1269">
                    <params>
                        <param name="type" type="short"/>
                    </params>
                </method>
                <javadoc line="1273">
                    Gets the element type.                    
                    <return>
                        the type of the element (StartTagType, EndTagType,
                          ContentType)                        
                    </return>
                </javadoc>
                <method name="getType" type="short" line="1279"/>
                <javadoc line="1283">
                    Sets the direction.                    
                    <param>
                        direction the direction (JoinPreviousDirection,
                          JoinNextDirection)                        
                    </param>
                </javadoc>
                <method name="setDirection" type="void" line="1289">
                    <params>
                        <param name="direction" type="short"/>
                    </params>
                </method>
                <javadoc line="1293">
                    Gets the direction.                    
                    <return>
                        the direction (JoinPreviousDirection, JoinNextDirection)                        
                    </return>
                </javadoc>
                <method name="getDirection" type="short" line="1298"/>
                <javadoc line="1302">
                    Gets the element attributes.                    
                    <return>
                        the attribute set                        
                    </return>
                </javadoc>
                <method name="getAttributes" type="AttributeSet" line="1307"/>
                <javadoc line="1311">
                    Gets the array of characters.                    
                    <return>
                        the array                        
                    </return>
                </javadoc>
                <method name="getArray" type="char[]" line="1316"/>
                <javadoc line="1321">
                    Gets the starting offset.                    
                    <return>
                        the offset >= 0                        
                    </return>
                </javadoc>
                <method name="getOffset" type="int" line="1326"/>
                <javadoc line="1330">
                    Gets the length.                    
                    <return>
                        the length >= 0                        
                    </return>
                </javadoc>
                <method name="getLength" type="int" line="1335"/>
                <javadoc line="1339">
                    Converts the element to a string.                    
                    <return>
                        the string                        
                    </return>
                </javadoc>
                <method name="toString" type="String" line="1344">
                    <declaration name="tlbl" type="String" line="1345"/>
                    <declaration name="plbl" type="String" line="1346"/>
                </method>
                <declaration name="attr" type="AttributeSet" line="1375"/>
                <declaration name="len" type="int" line="1376"/>
                <declaration name="type" type="short" line="1377"/>
                <declaration name="direction" type="short" line="1378"/>
                <declaration name="offs" type="int" line="1380"/>
                <declaration name="data" type="char[]" line="1381"/>
            </class>
            <class name="ElementBuffer" line="1384">
                <comment line="2465">
                    current position                    
                </comment>
                <comment line="2473">
                    For insert.                    
                </comment>
                <comment line="2491">
                    Internal record used to hold element change specifications                    
                </comment>
                <comment line="2559">
                    AttributeSet containing additional entries, must be non-mutable!                    
                </comment>
                <comment line="2561">
                    Copy of the AttributeSet the Element contained.                    
                </comment>
                <comment line="2563">
                    true if all the attributes in the element were removed first.                    
                </comment>
                <comment line="2565">
                    Efected Element.                    
                </comment>
                <comment line="2614">
                                        
                </comment>
                <implements interface="Serializable"/>
                <javadoc line="1384">
                    Class to manage changes to the element
                      hierarchy.
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      Serialized objects of this class will not be compatible with
                      future Swing releases. The current serialization support is
                      appropriate for short term storage or RMI between applications running
                      the same version of Swing.  As of 1.4, support for long term storage
                      of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                      has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                      Please see {@link java.beans.XMLEncoder}.                    
                </javadoc>
                <javadoc line="1399">
                    Creates a new ElementBuffer.                    
                    <param>
                        root the root element                        
                    </param>
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <method name="ElementBuffer" type="constructor" line="1405">
                    <params>
                        <param name="root" type="Element"/>
                    </params>
                </method>
                <javadoc line="1411">
                    Gets the root element.                    
                    <return>
                        the root element                        
                    </return>
                </javadoc>
                <method name="getRootElement" type="Element" line="1416"/>
                <javadoc line="1420">
                    Inserts new content.                    
                    <param>
                        offset the starting offset >= 0                        
                    </param>
                    <param>
                        length the length >= 0                        
                    </param>
                    <param>
                        data the data to insert                        
                    </param>
                    <param>
                        de the event capturing this edit                        
                    </param>
                </javadoc>
                <method name="insert" type="void" line="1429">
                    <params>
                        <param name="offset" type="int"/>
                        <param name="length" type="int"/>
                        <param name="data" type="ElementSpec[]"/>
                        <param name="de" type="DefaultDocumentEvent"/>
                    </params>
                    <comment line="1431">
                        Nothing was inserted, no structure change.                        
                    </comment>
                    <scope line="1430"/>
                </method>
                <method name="create" type="void" line="1442">
                    <params>
                        <param name="length" type="int"/>
                        <param name="data" type="ElementSpec[]"/>
                        <param name="de" type="DefaultDocumentEvent"/>
                    </params>
                    <comment line="1446">
                        PENDING(prinz) this needs to be fixed to create a new                        
                    </comment>
                    <comment line="1447">
                        root element as well, but requires changes to the                        
                    </comment>
                    <comment line="1448">
                        DocumentEvent to inform the views that there is a new                        
                    </comment>
                    <comment line="1449">
                        root element.                        
                    </comment>
                    <comment line="1451">
                        Recreate the ending fake element to have the correct offsets.                        
                    </comment>
                    <comment line="1472">
                        Reset the root elements attributes.                        
                    </comment>
                    <comment line="1486">
                        fold in the specified subtree                        
                    </comment>
                    <comment line="1491">
                        pop the remaining path                        
                    </comment>
                    <declaration name="elem" type="Element" line="1452"/>
                    <declaration name="index" type="int" line="1453"/>
                    <scope line="1454">
                        <declaration name="child" type="Element" line="1455"/>
                    </scope>
                    <declaration name="ec" type="ElemChanges" line="1460"/>
                    <declaration name="child" type="Element" line="1461"/>
                    <scope line="1466"/>
                    <declaration name="n" type="int" line="1470"/>
                    <declaration name="newAttrs" type="AttributeSet" line="1473"/>
                    <scope line="1474"/>
                    <scope line="1477"/>
                    <declaration name="attr" type="MutableAttributeSet" line="1480"/>
                    <scope line="1487"/>
                    <scope line="1492"/>
                </method>
                <javadoc line="1500">
                    Removes content.                    
                    <param>
                        offset the starting offset >= 0                        
                    </param>
                    <param>
                        length the length >= 0                        
                    </param>
                    <param>
                        de the event capturing this edit                        
                    </param>
                </javadoc>
                <method name="remove" type="void" line="1507">
                    <params>
                        <param name="offset" type="int"/>
                        <param name="length" type="int"/>
                        <param name="de" type="DefaultDocumentEvent"/>
                    </params>
                </method>
                <javadoc line="1513">
                    Changes content.                    
                    <param>
                        offset the starting offset >= 0                        
                    </param>
                    <param>
                        length the length >= 0                        
                    </param>
                    <param>
                        de the event capturing this edit                        
                    </param>
                </javadoc>
                <method name="change" type="void" line="1520">
                    <params>
                        <param name="offset" type="int"/>
                        <param name="length" type="int"/>
                        <param name="de" type="DefaultDocumentEvent"/>
                    </params>
                </method>
                <javadoc line="1526">
                    Inserts an update into the document.                    
                    <param>
                        data the elements to insert                        
                    </param>
                </javadoc>
                <method name="insertUpdate" type="void" line="1531">
                    <params>
                        <param name="data" type="ElementSpec[]"/>
                    </params>
                    <comment line="1532">
                        push the path                        
                    </comment>
                    <comment line="1542">
                        Build a copy of the original path.                        
                    </comment>
                    <comment line="1546">
                        Haven&apos;t created the fracture yet.                        
                    </comment>
                    <comment line="1549">
                        Insert the first content.                        
                    </comment>
                    <comment line="1563">
                        fold in the specified subtree                        
                    </comment>
                    <comment line="1569">
                        Fracture, if we haven&apos;t yet.                        
                    </comment>
                    <comment line="1573">
                        pop the remaining path                        
                    </comment>
                    <comment line="1578">
                        Offset the last index if necessary.                        
                    </comment>
                    <comment line="1583">
                        Make sure an edit is going to be created for each of the                        
                    </comment>
                    <comment line="1584">
                        original path items that have a change.                        
                    </comment>
                    <comment line="1592">
                        PENDING(sky): Do I need to worry about order here?                        
                    </comment>
                    <comment line="1597">
                        An insert at 0 with an initial end implies some elements                        
                    </comment>
                    <comment line="1598">
                        will have no children (the bottomost leaf would have length 0)                        
                    </comment>
                    <comment line="1599">
                        this will find what element need to be removed and remove it.                        
                    </comment>
                    <declaration name="elem" type="Element" line="1533"/>
                    <declaration name="index" type="int" line="1534"/>
                    <scope line="1535">
                        <declaration name="child" type="Element" line="1536"/>
                    </scope>
                    <declaration name="i" type="int" line="1550"/>
                    <scope line="1553"/>
                    <scope line="1558"/>
                    <declaration name="n" type="int" line="1564"/>
                    <scope line="1565"/>
                    <scope line="1574"/>
                    <scope line="1579"/>
                    <scope line="1586">
                        <declaration name="change" type="ElemChanges" line="1587"/>
                        <scope line="1591"/>
                    </scope>
                    <scope line="1601">
                        <declaration name="counter" type="int" line="1602"/>
                        <scope line="1604"/>
                        <declaration name="change" type="ElemChanges" line="1607"/>
                    </scope>
                </method>
                <javadoc line="1614">
                    Updates the element structure in response to a removal from the
                      associated sequence in the document.  Any elements consumed by the
                      span of the removal are removed.                    
                </javadoc>
                <method name="removeUpdate" type="void" line="1619"/>
                <javadoc line="1623">
                    Updates the element structure in response to a change in the
                      document.                    
                </javadoc>
                <method name="changeUpdate" type="void" line="1627">
                    <comment line="1630">
                        need to do the other end                        
                    </comment>
                    <declaration name="didEnd" type="boolean" line="1628"/>
                    <scope line="1629">
                        <scope line="1631"/>
                    </scope>
                    <scope line="1636"/>
                </method>
                <method name="split" type="boolean" line="1641">
                    <params>
                        <param name="offs" type="int"/>
                        <param name="len" type="int"/>
                    </params>
                    <comment line="1643">
                        push the path                        
                    </comment>
                    <comment line="1654">
                        make sure there is something to do... if the                        
                    </comment>
                    <comment line="1655">
                        offset is already at a boundary then there is                        
                    </comment>
                    <comment line="1656">
                        nothing to do.                        
                    </comment>
                    <comment line="1658">
                        we need to split, now see if the other end is within                        
                    </comment>
                    <comment line="1659">
                        the same parent.                        
                    </comment>
                    <comment line="1663">
                        it&apos;s a range split in the same parent                        
                    </comment>
                    <comment line="1666">
                        it&apos;s a three-way split                        
                    </comment>
                    <comment line="1681">
                        end is already on a boundary                        
                    </comment>
                    <comment line="1688">
                        split the first location                        
                    </comment>
                    <comment line="1699">
                        pick up things in the middle                        
                    </comment>
                    <declaration name="splitEnd" type="boolean" line="1642"/>
                    <declaration name="e" type="Element" line="1644"/>
                    <declaration name="index" type="int" line="1645"/>
                    <scope line="1646"/>
                    <declaration name="ec" type="ElemChanges" line="1652"/>
                    <declaration name="child" type="Element" line="1653"/>
                    <scope line="1657">
                        <declaration name="index0" type="int" line="1660"/>
                        <declaration name="index1" type="int" line="1661"/>
                        <scope line="1662">
                            <scope line="1665"/>
                            <scope line="1678">
                                <scope line="1680"/>
                            </scope>
                        </scope>
                        <scope line="1700"/>
                        <scope line="1706"/>
                    </scope>
                </method>
                <javadoc line="1721">
                    Creates the UndoableEdit record for the edits made
                      in the buffer.                    
                </javadoc>
                <method name="endEdits" type="void" line="1725">
                    <params>
                        <param name="de" type="DefaultDocumentEvent"/>
                    </params>
                    <comment line="1742">
                        for (int i = 0; i &lt; n; i++) {
                        ElemChanges ec = (ElemChanges) changes.elementAt(i);
                        System.err.print(&quot;edited: &quot; + ec.parent + &quot; at: &quot; + ec.index +
                        &quot; removed &quot; + ec.removed.size());
                        if (ec.removed.size() &gt; 0) {
                        int r0 = ((Element) ec.removed.firstElement()).getStartOffset();
                        int r1 = ((Element) ec.removed.lastElement()).getEndOffset();
                        System.err.print(&quot;[&quot; + r0 + &quot;,&quot; + r1 + &quot;]&quot;);
                        }
                        System.err.print(&quot; added &quot; + ec.added.size());
                        if (ec.added.size() &gt; 0) {
                        int p0 = ((Element) ec.added.firstElement()).getStartOffset();
                        int p1 = ((Element) ec.added.lastElement()).getEndOffset();
                        System.err.print(&quot;[&quot; + p0 + &quot;,&quot; + p1 + &quot;]&quot;);
                        }
                        System.err.println(&quot;&quot;);
                        }                        
                    </comment>
                    <declaration name="n" type="int" line="1726"/>
                    <scope line="1727">
                        <declaration name="ec" type="ElemChanges" line="1728"/>
                        <declaration name="removed" type="Element[]" line="1729"/>
                        <declaration name="added" type="Element[]" line="1731"/>
                        <declaration name="index" type="int" line="1733"/>
                        <declaration name="ee" type="ElementEdit" line="1735"/>
                    </scope>
                </method>
                <javadoc line="1763">
                    Initialize the buffer                    
                </javadoc>
                <method name="beginEdits" type="void" line="1766">
                    <params>
                        <param name="offset" type="int"/>
                        <param name="length" type="int"/>
                    </params>
                    <scope line="1771"/>
                    <scope line="1773"/>
                    <scope line="1776"/>
                    <scope line="1778"/>
                </method>
                <javadoc line="1786">
                    Pushes a new element onto the stack that represents
                      the current path.                    
                    <param>
                        record Whether or not the push should be
                          recorded as an element change or not.                        
                    </param>
                    <param>
                        isFracture true if pushing on an element that was created
                          as the result of a fracture.                        
                    </param>
                </javadoc>
                <method name="push" type="void" line="1794">
                    <params>
                        <param name="e" type="Element"/>
                        <param name="index" type="int"/>
                        <param name="isFracture" type="boolean"/>
                    </params>
                    <declaration name="ec" type="ElemChanges" line="1795"/>
                </method>
                <method name="push" type="void" line="1799">
                    <params>
                        <param name="e" type="Element"/>
                        <param name="index" type="int"/>
                    </params>
                </method>
                <method name="pop" type="void" line="1803">
                    <comment line="1811">
                        if we pushed a branch element that didn&apos;t get                        
                    </comment>
                    <comment line="1812">
                        used, make sure its not marked as having been added.                        
                    </comment>
                    <declaration name="ec" type="ElemChanges" line="1804"/>
                    <scope line="1806"/>
                    <scope line="1808">
                        <declaration name="e" type="Element" line="1809"/>
                        <scope line="1810"/>
                    </scope>
                </method>
                <javadoc line="1819">
                    move the current offset forward by n.                    
                </javadoc>
                <method name="advance" type="void" line="1822">
                    <params>
                        <param name="n" type="int"/>
                    </params>
                </method>
                <method name="insertElement" type="void" line="1826">
                    <params>
                        <param name="es" type="ElementSpec"/>
                    </params>
                    <comment line="1832">
                        Don&apos;t create a new element, use the existing one                        
                    </comment>
                    <comment line="1833">
                        at the specified location.                        
                    </comment>
                    <comment line="1837">
                        This happens if inserting into a leaf, followed                        
                    </comment>
                    <comment line="1838">
                        by a join next where next sibling is not a leaf.                        
                    </comment>
                    <comment line="1844">
                        Not really a fracture, but need to treat it like                        
                    </comment>
                    <comment line="1845">
                        one so that content join next will work correctly.                        
                    </comment>
                    <comment line="1846">
                        We can do this because there will never be a join                        
                    </comment>
                    <comment line="1847">
                        next followed by a join fracture.                        
                    </comment>
                    <comment line="1852">
                        Should always be something on the stack!                        
                    </comment>
                    <comment line="1855">
                        If parent isn&apos;t a fracture, fracture will be                        
                    </comment>
                    <comment line="1856">
                        fracturedChild.                        
                    </comment>
                    <comment line="1861">
                        Parent is a fracture, use 1st element.                        
                    </comment>
                    <comment line="1883">
                        JoinNext on tail is only applicable if last element                        
                    </comment>
                    <comment line="1884">
                        and attributes come from that of first element.                        
                    </comment>
                    <comment line="1885">
                        With a little extra testing it would be possible                        
                    </comment>
                    <comment line="1886">
                        to NOT due this again, as more than likely fracture()                        
                    </comment>
                    <comment line="1887">
                        created this element.                        
                    </comment>
                    <comment line="1908">
                        Parent was fractured element.                        
                    </comment>
                    <declaration name="ec" type="ElemChanges" line="1827"/>
                    <declaration name="parent" type="Element" line="1834"/>
                    <scope line="1836"/>
                    <scope line="1851"/>
                    <scope line="1857"/>
                    <declaration name="belem" type="Element" line="1865"/>
                    <declaration name="len" type="int" line="1876"/>
                    <scope line="1877">
                        <declaration name="leaf" type="Element" line="1878"/>
                    </scope>
                    <scope line="1882">
                        <scope line="1888">
                            <declaration name="first" type="Element" line="1889"/>
                            <scope line="1890">
                                <scope line="1892">
                                    <scope line="1893"/>
                                </scope>
                            </scope>
                            <declaration name="leaf" type="Element" line="1902"/>
                        </scope>
                        <scope line="1907">
                            <declaration name="first" type="Element" line="1909"/>
                            <declaration name="leaf" type="Element" line="1910"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="1921">
                    Remove the elements from &lt;code&gt;elem&lt;/code&gt; in range
                      &lt;code&gt;rmOffs0&lt;/code&gt;, &lt;code&gt;rmOffs1&lt;/code&gt;. This uses
                      &lt;code&gt;canJoin&lt;/code&gt; and &lt;code&gt;join&lt;/code&gt; to handle joining
                      the endpoints of the insertion.                    
                    <return>
                        true if elem will no longer have any elements.                        
                    </return>
                </javadoc>
                <method name="removeElements" type="boolean" line="1929">
                    <params>
                        <param name="elem" type="Element"/>
                        <param name="rmOffs0" type="int"/>
                        <param name="rmOffs1" type="int"/>
                    </params>
                    <comment line="1931">
                        update path for changes                        
                    </comment>
                    <comment line="1937">
                        if the range is contained by one element,                        
                    </comment>
                    <comment line="1938">
                        we just forward the request                        
                    </comment>
                    <comment line="1943">
                        Element totally removed.                        
                    </comment>
                    <comment line="1950">
                        the removal range spans elements.  If we can join                        
                    </comment>
                    <comment line="1951">
                        the two endpoints, do it.  Otherwise we remove the                        
                    </comment>
                    <comment line="1952">
                        interior and forward to the endpoints.                        
                    </comment>
                    <comment line="1957">
                        remove and join                        
                    </comment>
                    <comment line="1964">
                        remove interior and forward                        
                    </comment>
                    <comment line="1971">
                        start element completely consumed                        
                    </comment>
                    <comment line="1980">
                        end element not touched                        
                    </comment>
                    <comment line="2003">
                        publish changes                        
                    </comment>
                    <comment line="2006">
                        Return true if we no longer have any children.                        
                    </comment>
                    <scope line="1930">
                        <declaration name="index0" type="int" line="1932"/>
                        <declaration name="index1" type="int" line="1933"/>
                        <declaration name="ec" type="ElemChanges" line="1935"/>
                        <scope line="1939">
                            <declaration name="child0" type="Element" line="1940"/>
                            <scope line="1942"/>
                            <scope line="1946"/>
                        </scope>
                        <scope line="1949">
                            <declaration name="child0" type="Element" line="1953"/>
                            <declaration name="child1" type="Element" line="1954"/>
                            <declaration name="containsOffs1" type="boolean" line="1955"/>
                            <scope line="1956">
                                <scope line="1958"/>
                                <declaration name="e" type="Element" line="1961"/>
                            </scope>
                            <scope line="1963">
                                <declaration name="rmIndex0" type="int" line="1965"/>
                                <declaration name="rmIndex1" type="int" line="1966"/>
                                <scope line="1970"/>
                                <scope line="1975"/>
                                <scope line="1979"/>
                                <scope line="1983"/>
                                <scope line="1986"/>
                                <scope line="1989">
                                    <scope line="1990"/>
                                </scope>
                                <scope line="1995">
                                    <scope line="1996"/>
                                </scope>
                            </scope>
                        </scope>
                        <scope line="2008"/>
                    </scope>
                </method>
                <javadoc line="2015">
                    Can the two given elements be coelesced together
                      into one element?                    
                </javadoc>
                <method name="canJoin" type="boolean" line="2019">
                    <params>
                        <param name="e0" type="Element"/>
                        <param name="e1" type="Element"/>
                    </params>
                    <comment line="2023">
                        Don&apos;t join a leaf to a branch.                        
                    </comment>
                    <comment line="2030">
                        Only join leaves if the attributes match, otherwise                        
                    </comment>
                    <comment line="2031">
                        style information will be lost.                        
                    </comment>
                    <comment line="2034">
                        Only join non-leafs if the names are equal. This may result                        
                    </comment>
                    <comment line="2035">
                        in loss of style information, but this is typically acceptable                        
                    </comment>
                    <comment line="2036">
                        for non-leafs.                        
                    </comment>
                    <comment line="2045">
                        Both names null, treat as equal.                        
                    </comment>
                    <scope line="2020"/>
                    <declaration name="leaf0" type="boolean" line="2024"/>
                    <declaration name="leaf1" type="boolean" line="2025"/>
                    <scope line="2026"/>
                    <scope line="2029"/>
                    <declaration name="name0" type="String" line="2037"/>
                    <declaration name="name1" type="String" line="2038"/>
                    <scope line="2039"/>
                    <scope line="2042"/>
                </method>
                <javadoc line="2049">
                    Joins the two elements carving out a hole for the
                      given removed range.                    
                </javadoc>
                <method name="join" type="Element" line="2053">
                    <params>
                        <param name="p" type="Element"/>
                        <param name="left" type="Element"/>
                        <param name="right" type="Element"/>
                        <param name="rmOffs0" type="int"/>
                        <param name="rmOffs1" type="int"/>
                    </params>
                    <comment line="2058">
                        join two branch elements.  This copies the children before                        
                    </comment>
                    <comment line="2059">
                        the removal range on the left element, and after the removal                        
                    </comment>
                    <comment line="2060">
                        range on the right element.  The two elements on the edge                        
                    </comment>
                    <comment line="2061">
                        are joined if possible and needed.                        
                    </comment>
                    <comment line="2075">
                        transfer the left                        
                    </comment>
                    <comment line="2080">
                        transfer the join/middle                        
                    </comment>
                    <comment line="2093">
                        transfer the right                        
                    </comment>
                    <comment line="2099">
                        install the children                        
                    </comment>
                    <scope line="2054"/>
                    <scope line="2057">
                        <declaration name="to" type="Element" line="2062"/>
                        <declaration name="ljIndex" type="int" line="2063"/>
                        <declaration name="rjIndex" type="int" line="2064"/>
                        <declaration name="lj" type="Element" line="2065"/>
                        <scope line="2066"/>
                        <declaration name="rj" type="Element" line="2069"/>
                        <scope line="2070"/>
                        <declaration name="children" type="Vector&lt;Element&gt;" line="2073"/>
                        <scope line="2076"/>
                        <scope line="2081">
                            <declaration name="e" type="Element" line="2082"/>
                        </scope>
                        <scope line="2084">
                            <scope line="2085"/>
                            <scope line="2088"/>
                        </scope>
                        <declaration name="n" type="int" line="2094"/>
                        <scope line="2095"/>
                        <declaration name="c" type="Element[]" line="2100"/>
                    </scope>
                    <scope line="2104"/>
                </method>
                <javadoc line="2110">
                    Creates a copy of this element, with a different
                      parent.                    
                    <param>
                        parent the parent element                        
                    </param>
                    <param>
                        clonee the element to be cloned                        
                    </param>
                    <return>
                        the copy                        
                    </return>
                </javadoc>
                <method name="clone" type="Element" line="2118">
                    <params>
                        <param name="parent" type="Element"/>
                        <param name="clonee" type="Element"/>
                    </params>
                    <scope line="2119"/>
                    <declaration name="e" type="Element" line="2124"/>
                    <declaration name="n" type="int" line="2125"/>
                    <declaration name="children" type="Element[]" line="2126"/>
                    <scope line="2127"/>
                </method>
                <javadoc line="2134">
                    Creates a copy of this element, with a different
                      parent. Children of this element included in the
                      removal range will be discarded.                    
                </javadoc>
                <method name="cloneAsNecessary" type="Element" line="2139">
                    <params>
                        <param name="parent" type="Element"/>
                        <param name="clonee" type="Element"/>
                        <param name="rmOffs0" type="int"/>
                        <param name="rmOffs1" type="int"/>
                    </params>
                    <scope line="2140"/>
                    <declaration name="e" type="Element" line="2145"/>
                    <declaration name="n" type="int" line="2146"/>
                    <declaration name="childrenList" type="ArrayList&lt;Element&gt;" line="2147"/>
                    <scope line="2148">
                        <declaration name="elem" type="Element" line="2149"/>
                        <scope line="2150"/>
                    </scope>
                    <declaration name="children" type="Element[]" line="2154"/>
                </method>
                <javadoc line="2160">
                    Determines if a fracture needs to be performed. A fracture
                      can be thought of as moving the right part of a tree to a
                      new location, where the right part is determined by what has
                      been inserted. &lt;code&gt;depth&lt;/code&gt; is used to indicate a
                      JoinToFracture is needed to an element at a depth
                      of &lt;code&gt;depth&lt;/code&gt;. Where the root is 0, 1 is the children
                      of the root...
                      &lt;p&gt;This will invoke &lt;code&gt;fractureFrom&lt;/code&gt; if it is determined
                      a fracture needs to happen.                    
                </javadoc>
                <method name="fracture" type="void" line="2171">
                    <params>
                        <param name="depth" type="int"/>
                    </params>
                    <comment line="2176">
                        Use childAltered to determine when a child has been altered,                        
                    </comment>
                    <comment line="2177">
                        that is the point of insertion is less than the element count.                        
                    </comment>
                    <comment line="2184">
                        Determine where to start recreating from.                        
                    </comment>
                    <comment line="2185">
                        Start at - 2, as first one is indicated by recreateLeafs and                        
                    </comment>
                    <comment line="2186">
                        childAltered.                        
                    </comment>
                    <comment line="2204">
                        Recreate all children to right of parent starting                        
                    </comment>
                    <comment line="2205">
                        at lastIndex.                        
                    </comment>
                    <declaration name="cLength" type="int" line="2172"/>
                    <declaration name="lastIndex" type="int" line="2173"/>
                    <declaration name="needRecreate" type="boolean" line="2174"/>
                    <declaration name="lastChange" type="ElemChanges" line="2175"/>
                    <declaration name="childAltered" type="boolean" line="2178"/>
                    <declaration name="deepestAlteredIndex" type="int" line="2180"/>
                    <declaration name="lastAlteredIndex" type="int" line="2181"/>
                    <scope line="2187">
                        <declaration name="change" type="ElemChanges" line="2188"/>
                        <scope line="2189">
                            <scope line="2191"/>
                        </scope>
                        <scope line="2198"/>
                    </scope>
                    <scope line="2203"/>
                </method>
                <javadoc line="2212">
                    Recreates the elements to the right of the insertion point.
                      This starts at &lt;code&gt;startIndex&lt;/code&gt; in &lt;code&gt;changed&lt;/code&gt;,
                      and calls duplicate to duplicate existing elements.
                      This will also duplicate the elements along the insertion
                      point, until a depth of &lt;code&gt;endFractureIndex&lt;/code&gt; is
                      reached, at which point only the elements to the right of
                      the insertion point are duplicated.                    
                </javadoc>
                <method name="fractureFrom" type="void" line="2222">
                    <params>
                        <param name="changed" type="ElemChanges[]"/>
                        <param name="startIndex" type="int"/>
                        <param name="endFractureIndex" type="int"/>
                    </params>
                    <comment line="2223">
                        Recreate the element representing the inserted index.                        
                    </comment>
                    <comment line="2245">
                        Recreate all the elements to the right of the                        
                    </comment>
                    <comment line="2246">
                        insertion point.                        
                    </comment>
                    <comment line="2253">
                        Create the newChild, a duplicate of the elment at                        
                    </comment>
                    <comment line="2254">
                        index. This isn&apos;t done if isEnd and offsetLastIndex are true                        
                    </comment>
                    <comment line="2255">
                        indicating a join previous was done.                        
                    </comment>
                    <comment line="2258">
                        Determine the child to duplicate, won&apos;t have to duplicate                        
                    </comment>
                    <comment line="2259">
                        if at end of fracture, or offseting index.                        
                    </comment>
                    <comment line="2269">
                        Duplicate it.                        
                    </comment>
                    <comment line="2284">
                        Recreate the remaining children (there may be none).                        
                    </comment>
                    <comment line="2292">
                        Last part of fracture.                        
                    </comment>
                    <comment line="2305">
                        Branch.                        
                    </comment>
                    <comment line="2310">
                        Last leaf, need to recreate part of it.                        
                    </comment>
                    <declaration name="change" type="ElemChanges" line="2224"/>
                    <declaration name="child" type="Element" line="2225"/>
                    <declaration name="newChild" type="Element" line="2226"/>
                    <declaration name="changeLength" type="int" line="2227"/>
                    <scope line="2233"/>
                    <scope line="2238"/>
                    <declaration name="parent" type="Element" line="2247"/>
                    <scope line="2249">
                        <declaration name="isEnd" type="boolean" line="2250"/>
                        <declaration name="isEndLeaf" type="boolean" line="2251"/>
                        <scope line="2260"/>
                        <scope line="2266"/>
                        <scope line="2270">
                            <scope line="2271"/>
                            <scope line="2276"/>
                        </scope>
                        <declaration name="kidsToMove" type="int" line="2285"/>
                        <declaration name="kids" type="Element[]" line="2287"/>
                        <declaration name="moveStartIndex" type="int" line="2288"/>
                        <declaration name="kidStartIndex" type="int" line="2289"/>
                        <scope line="2291">
                            <scope line="2293"/>
                            <scope line="2297"/>
                        </scope>
                        <scope line="2303">
                            <scope line="2304"/>
                            <scope line="2309"/>
                        </scope>
                        <scope line="2318">
                            <declaration name="toMove" type="Element" line="2319"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="2328">
                    Recreates &lt;code&gt;toDuplicate&lt;/code&gt;. This is called when an
                      element needs to be created as the result of an insertion. This
                      will recurse and create all the children. This is similiar to
                      &lt;code&gt;clone&lt;/code&gt;, but deteremines the offsets differently.                    
                </javadoc>
                <method name="recreateFracturedElement" type="Element" line="2334">
                    <params>
                        <param name="parent" type="Element"/>
                        <param name="toDuplicate" type="Element"/>
                    </params>
                    <comment line="2341">
                        Not a leaf                        
                    </comment>
                    <scope line="2335"/>
                    <declaration name="newParent" type="Element" line="2342"/>
                    <declaration name="childCount" type="int" line="2344"/>
                    <declaration name="newKids" type="Element[]" line="2345"/>
                    <scope line="2346"/>
                </method>
                <javadoc line="2354">
                    Splits the bottommost leaf in &lt;code&gt;path&lt;/code&gt;.
                      This is called from insert when the first element is NOT content.                    
                </javadoc>
                <method name="fractureDeepestLeaf" type="void" line="2358">
                    <params>
                        <param name="specs" type="ElementSpec[]"/>
                    </params>
                    <comment line="2359">
                        Split the bottommost leaf. It will be recreated elsewhere.                        
                    </comment>
                    <comment line="2362">
                        Inserts at offset 0 do not need to recreate child (it would                        
                    </comment>
                    <comment line="2363">
                        have a length of 0!).                        
                    </comment>
                    <declaration name="ec" type="ElemChanges" line="2360"/>
                    <declaration name="child" type="Element" line="2361"/>
                    <scope line="2364">
                        <declaration name="newChild" type="Element" line="2365"/>
                    </scope>
                </method>
                <javadoc line="2379">
                    Inserts the first content. This needs to be separate to handle
                      joining.                    
                </javadoc>
                <method name="insertFirstContent" type="void" line="2383">
                    <params>
                        <param name="specs" type="ElementSpec[]"/>
                    </params>
                    <comment line="2394">
                        Create the left split part containing new content.                        
                    </comment>
                    <comment line="2400">
                        Remainder will be created later.                        
                    </comment>
                    <comment line="2410">
                        else Inserted at end, and is total length.                        
                    </comment>
                    <comment line="2411">
                        Update index incase something added/removed.                        
                    </comment>
                    <comment line="2415">
                        Recreate the first element, its offset will have                        
                    </comment>
                    <comment line="2416">
                        changed.                        
                    </comment>
                    <comment line="2421">
                        Recreate the second, merge part. We do no checking                        
                    </comment>
                    <comment line="2422">
                        to see if JoinNextDirection is valid here!                        
                    </comment>
                    <comment line="2434">
                        else nothin to do.                        
                    </comment>
                    <comment line="2435">
                        PENDING: if !isOnlyContent could raise here!                        
                    </comment>
                    <comment line="2438">
                        Inserted into middle, need to recreate split left                        
                    </comment>
                    <comment line="2439">
                        new content, and split right.                        
                    </comment>
                    <comment line="2447">
                        new content                        
                    </comment>
                    <comment line="2453">
                        Signals need to recreate right split later.                        
                    </comment>
                    <declaration name="firstSpec" type="ElementSpec" line="2384"/>
                    <declaration name="ec" type="ElemChanges" line="2385"/>
                    <declaration name="child" type="Element" line="2386"/>
                    <declaration name="firstEndOffset" type="int" line="2387"/>
                    <declaration name="isOnlyContent" type="boolean" line="2388"/>
                    <scope line="2393">
                        <declaration name="newE" type="Element" line="2395"/>
                    </scope>
                    <scope line="2406"/>
                    <scope line="2414">
                        <declaration name="newE" type="Element" line="2417"/>
                        <declaration name="nextChild" type="Element" line="2423"/>
                    </scope>
                    <scope line="2440">
                        <declaration name="newE" type="Element" line="2441"/>
                    </scope>
                    <declaration name="newE" type="Element" line="2448"/>
                    <scope line="2452"/>
                    <scope line="2456"/>
                </method>
                <declaration name="root" type="Element" line="2463"/>
                <declaration name="pos" type="int" line="2464"/>
                <declaration name="offset" type="int" line="2465"/>
                <declaration name="length" type="int" line="2466"/>
                <declaration name="endOffset" type="int" line="2467"/>
                <declaration name="changes" type="Vector&lt;ElemChanges&gt;" line="2468"/>
                <declaration name="path" type="Stack&lt;ElemChanges&gt;" line="2469"/>
                <declaration name="insertOp" type="boolean" line="2470"/>
                <declaration name="recreateLeafs" type="boolean" line="2472"/>
                <declaration name="insertPath" type="ElemChanges[]" line="2474"/>
                <javadoc line="2474">
                    For insert, path to inserted elements.                    
                </javadoc>
                <declaration name="createdFracture" type="boolean" line="2476"/>
                <javadoc line="2476">
                    Only for insert, set to true when the fracture has been created.                    
                </javadoc>
                <declaration name="fracturedParent" type="Element" line="2478"/>
                <javadoc line="2478">
                    Parent that contains the fractured child.                    
                </javadoc>
                <declaration name="fracturedChild" type="Element" line="2480"/>
                <javadoc line="2480">
                    Fractured child.                    
                </javadoc>
                <declaration name="offsetLastIndex" type="boolean" line="2482"/>
                <javadoc line="2482">
                    Used to indicate when fracturing that the last leaf should be
                      skipped.                    
                </javadoc>
                <declaration name="offsetLastIndexOnReplace" type="boolean" line="2485"/>
                <javadoc line="2485">
                    Used to indicate that the parent of the deepest leaf should
                      offset the index by 1 when adding/removing elements in an
                      insert.                    
                </javadoc>
                <class name="ElemChanges" line="2493">
                    <method name="ElemChanges" type="constructor" line="2495">
                        <params>
                            <param name="parent" type="Element"/>
                            <param name="index" type="int"/>
                            <param name="isFracture" type="boolean"/>
                        </params>
                    </method>
                    <method name="toString" type="String" line="2503"/>
                    <declaration name="parent" type="Element" line="2507"/>
                    <declaration name="index" type="int" line="2508"/>
                    <declaration name="added" type="Vector&lt;Element&gt;" line="2509"/>
                    <declaration name="removed" type="Vector&lt;Element&gt;" line="2510"/>
                    <declaration name="isFracture" type="boolean" line="2511"/>
                </class>
            </class>
            <class name="AttributeUndoableEdit" line="2516">
                <extends class="AbstractUndoableEdit"/>
                <comment line="2465">
                    current position                    
                </comment>
                <comment line="2473">
                    For insert.                    
                </comment>
                <comment line="2491">
                    Internal record used to hold element change specifications                    
                </comment>
                <comment line="2559">
                    AttributeSet containing additional entries, must be non-mutable!                    
                </comment>
                <comment line="2561">
                    Copy of the AttributeSet the Element contained.                    
                </comment>
                <comment line="2563">
                    true if all the attributes in the element were removed first.                    
                </comment>
                <comment line="2565">
                    Efected Element.                    
                </comment>
                <comment line="2614">
                                        
                </comment>
                <javadoc line="2516">
                    An UndoableEdit used to remember AttributeSet changes to an
                      Element.                    
                </javadoc>
                <method name="AttributeUndoableEdit" type="constructor" line="2522">
                    <params>
                        <param name="element" type="Element"/>
                        <param name="newAttributes" type="AttributeSet"/>
                        <param name="isReplacing" type="boolean"/>
                    </params>
                    <comment line="2527">
                        If not replacing, it may be more efficient to only copy the                        
                    </comment>
                    <comment line="2528">
                        changed values...                        
                    </comment>
                </method>
                <javadoc line="2532">
                    Redoes a change.                    
                    <exception>
                        CannotRedoException if the change cannot be redone                        
                    </exception>
                </javadoc>
                <method name="redo" type="void" line="2537">
                    <declaration name="as" type="MutableAttributeSet" line="2539"/>
                </method>
                <javadoc line="2546">
                    Undoes a change.                    
                    <exception>
                        CannotUndoException if the change cannot be undone                        
                    </exception>
                </javadoc>
                <method name="undo" type="void" line="2551">
                    <declaration name="as" type="MutableAttributeSet" line="2553"/>
                </method>
                <declaration name="newAttributes" type="AttributeSet" line="2559"/>
                <declaration name="copy" type="AttributeSet" line="2561"/>
                <declaration name="isReplacing" type="boolean" line="2563"/>
                <declaration name="element" type="Element" line="2565"/>
            </class>
            <class name="StyleChangeUndoableEdit" line="2568">
                <extends class="AbstractUndoableEdit"/>
                <comment line="2465">
                    current position                    
                </comment>
                <comment line="2473">
                    For insert.                    
                </comment>
                <comment line="2491">
                    Internal record used to hold element change specifications                    
                </comment>
                <comment line="2559">
                    AttributeSet containing additional entries, must be non-mutable!                    
                </comment>
                <comment line="2561">
                    Copy of the AttributeSet the Element contained.                    
                </comment>
                <comment line="2563">
                    true if all the attributes in the element were removed first.                    
                </comment>
                <comment line="2565">
                    Efected Element.                    
                </comment>
                <comment line="2614">
                                        
                </comment>
                <javadoc line="2568">
                    UndoableEdit for changing the resolve parent of an Element.                    
                </javadoc>
                <method name="StyleChangeUndoableEdit" type="constructor" line="2573">
                    <params>
                        <param name="element" type="AbstractElement"/>
                        <param name="newStyle" type="Style"/>
                    </params>
                </method>
                <javadoc line="2580">
                    Redoes a change.                    
                    <exception>
                        CannotRedoException if the change cannot be redone                        
                    </exception>
                </javadoc>
                <method name="redo" type="void" line="2585"/>
                <javadoc line="2590">
                    Undoes a change.                    
                    <exception>
                        CannotUndoException if the change cannot be undone                        
                    </exception>
                </javadoc>
                <method name="undo" type="void" line="2595"/>
                <declaration name="element" type="AbstractElement" line="2600"/>
                <javadoc line="2600">
                    Element to change resolve parent of.                    
                </javadoc>
                <declaration name="newStyle" type="Style" line="2602"/>
                <javadoc line="2602">
                    New style.                    
                </javadoc>
                <declaration name="oldStyle" type="AttributeSet" line="2604"/>
                <javadoc line="2604">
                    Old style, before setting newStyle.                    
                </javadoc>
            </class>
            <class name="AbstractChangeHandler" line="2608">
                <comment line="2465">
                    current position                    
                </comment>
                <comment line="2473">
                    For insert.                    
                </comment>
                <comment line="2491">
                    Internal record used to hold element change specifications                    
                </comment>
                <comment line="2559">
                    AttributeSet containing additional entries, must be non-mutable!                    
                </comment>
                <comment line="2561">
                    Copy of the AttributeSet the Element contained.                    
                </comment>
                <comment line="2563">
                    true if all the attributes in the element were removed first.                    
                </comment>
                <comment line="2565">
                    Efected Element.                    
                </comment>
                <comment line="2614">
                                        
                </comment>
                <implements interface="ChangeListener"/>
                <javadoc line="2608">
                    Base class for style change handlers with support for stale objects detection.                    
                </javadoc>
                <class name="DocReference" line="2614">
                    <extends class="WeakReference">
                        <type_params>
                            <type_param name="DefaultStyledDocument"/>
                        </type_params>
                    </extends>
                    <method name="DocReference" type="constructor" line="2616">
                        <params>
                            <param name="d" type="DefaultStyledDocument"/>
                            <param name="q" type="ReferenceQueue<DefaultStyledDocument>"/>
                        </params>
                    </method>
                    <javadoc line="2620">
                        Return a reference to the style change handler object.                        
                    </javadoc>
                    <method name="getListener" type="ChangeListener" line="2623"/>
                </class>
                <declaration name="queueMap" type="Map&lt;Class,ReferenceQueue&lt;DefaultStyledDocument&gt;&gt;" line="2628"/>
                <javadoc line="2628">
                    Class-specific reference queues.                    
                </javadoc>
                <declaration name="doc" type="DocReference" line="2632"/>
                <javadoc line="2632">
                    A weak reference to the document object.                    
                </javadoc>
                <method name="AbstractChangeHandler" type="constructor" line="2635">
                    <params>
                        <param name="d" type="DefaultStyledDocument"/>
                    </params>
                    <declaration name="c" type="Class" line="2636"/>
                    <declaration name="q" type="ReferenceQueue&lt;DefaultStyledDocument&gt;" line="2637"/>
                    <scope line="2638">
                        <scope line="2640"/>
                    </scope>
                </method>
                <javadoc line="2648">
                    Return a list of stale change listeners.
                      A change listener becomes &quot;stale&quot; when its document is cleaned by GC.                    
                </javadoc>
                <method name="getStaleListeners" type="List<ChangeListener>" line="2653">
                    <params>
                        <param name="l" type="ChangeListener"/>
                    </params>
                    <declaration name="staleListeners" type="List&lt;ChangeListener&gt;" line="2654"/>
                    <declaration name="q" type="ReferenceQueue&lt;DefaultStyledDocument&gt;" line="2655"/>
                    <scope line="2657">
                        <declaration name="r" type="DocReference" line="2658"/>
                        <scope line="2659">
                            <scope line="2660"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="2669">
                    The ChangeListener wrapper which guards against dead documents.                    
                </javadoc>
                <method name="stateChanged" type="void" line="2672">
                    <params>
                        <param name="e" type="ChangeEvent"/>
                    </params>
                    <declaration name="d" type="DefaultStyledDocument" line="2673"/>
                    <scope line="2674"/>
                </method>
                <method name="fireStateChanged" type="void" line="2679"/>
                <javadoc line="2679">
                    Run the actual class-specific stateChanged() method.                    
                </javadoc>
            </class>
            <class name="StyleChangeHandler" line="2683">
                <extends class="AbstractChangeHandler"/>
                <comment line="2465">
                    current position                    
                </comment>
                <comment line="2473">
                    For insert.                    
                </comment>
                <comment line="2491">
                    Internal record used to hold element change specifications                    
                </comment>
                <comment line="2559">
                    AttributeSet containing additional entries, must be non-mutable!                    
                </comment>
                <comment line="2561">
                    Copy of the AttributeSet the Element contained.                    
                </comment>
                <comment line="2563">
                    true if all the attributes in the element were removed first.                    
                </comment>
                <comment line="2565">
                    Efected Element.                    
                </comment>
                <comment line="2614">
                                        
                </comment>
                <javadoc line="2683">
                    Added to all the Styles. When instances of this receive a
                      stateChanged method, styleChanged is invoked.                    
                </javadoc>
                <method name="StyleChangeHandler" type="constructor" line="2689">
                    <params>
                        <param name="d" type="DefaultStyledDocument"/>
                    </params>
                </method>
                <method name="fireStateChanged" type="void" line="2693">
                    <params>
                        <param name="d" type="DefaultStyledDocument"/>
                        <param name="e" type="ChangeEvent"/>
                    </params>
                    <declaration name="source" type="Object" line="2694"/>
                    <scope line="2695"/>
                    <scope line="2697"/>
                </method>
            </class>
            <class name="StyleContextChangeHandler" line="2704">
                <extends class="AbstractChangeHandler"/>
                <comment line="2465">
                    current position                    
                </comment>
                <comment line="2473">
                    For insert.                    
                </comment>
                <comment line="2491">
                    Internal record used to hold element change specifications                    
                </comment>
                <comment line="2559">
                    AttributeSet containing additional entries, must be non-mutable!                    
                </comment>
                <comment line="2561">
                    Copy of the AttributeSet the Element contained.                    
                </comment>
                <comment line="2563">
                    true if all the attributes in the element were removed first.                    
                </comment>
                <comment line="2565">
                    Efected Element.                    
                </comment>
                <comment line="2614">
                                        
                </comment>
                <javadoc line="2704">
                    Added to the StyleContext. When the StyleContext changes, this invokes
                      &lt;code&gt;updateStylesListeningTo&lt;/code&gt;.                    
                </javadoc>
                <method name="StyleContextChangeHandler" type="constructor" line="2710">
                    <params>
                        <param name="d" type="DefaultStyledDocument"/>
                    </params>
                </method>
                <method name="fireStateChanged" type="void" line="2714">
                    <params>
                        <param name="d" type="DefaultStyledDocument"/>
                        <param name="e" type="ChangeEvent"/>
                    </params>
                </method>
            </class>
            <class name="ChangeUpdateRunnable" line="2720">
                <comment line="2465">
                    current position                    
                </comment>
                <comment line="2473">
                    For insert.                    
                </comment>
                <comment line="2491">
                    Internal record used to hold element change specifications                    
                </comment>
                <comment line="2559">
                    AttributeSet containing additional entries, must be non-mutable!                    
                </comment>
                <comment line="2561">
                    Copy of the AttributeSet the Element contained.                    
                </comment>
                <comment line="2563">
                    true if all the attributes in the element were removed first.                    
                </comment>
                <comment line="2565">
                    Efected Element.                    
                </comment>
                <comment line="2614">
                                        
                </comment>
                <implements interface="Runnable"/>
                <javadoc line="2720">
                    When run this creates a change event for the complete document
                      and fires it.                    
                </javadoc>
                <declaration name="isPending" type="boolean" line="2725"/>
                <method name="run" type="void" line="2727">
                    <scope line="2728"/>
                    <scope line="2732">
                        <declaration name="dde" type="DefaultDocumentEvent" line="2734"/>
                    </scope>
                    <scope line="2739"/>
                </method>
            </class>
        </class>
    </source>