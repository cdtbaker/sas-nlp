<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text">
        <import package="java.awt.event.ActionEvent"/>
        <import package="java.io"/>
        <import package="java.text"/>
        <import package="java.text.AttributedCharacterIterator.Attribute"/>
        <import package="java.util"/>
        <import package="javax.swing"/>
        <class name="InternationalFormatter" line="8">
            <extends class="DefaultFormatter"/>
            <javadoc line="8">
                &lt;code&gt;InternationalFormatter&lt;/code&gt; extends &lt;code&gt;DefaultFormatter&lt;/code&gt;,
                  using an instance of &lt;code&gt;java.text.Format&lt;/code&gt; to handle the
                  conversion to a String, and the conversion from a String.
                  &lt;p&gt;
                  If &lt;code&gt;getAllowsInvalid()&lt;/code&gt; is false, this will ask the
                  &lt;code&gt;Format&lt;/code&gt; to format the current text on every edit.
                  &lt;p&gt;
                  You can specify a minimum and maximum value by way of the
                  &lt;code&gt;setMinimum&lt;/code&gt; and &lt;code&gt;setMaximum&lt;/code&gt; methods. In order
                  for this to work the values returned from &lt;code&gt;stringToValue&lt;/code&gt; must be
                  comparable to the min/max values by way of the &lt;code&gt;Comparable&lt;/code&gt;
                  interface.
                  &lt;p&gt;
                  Be careful how you configure the &lt;code&gt;Format&lt;/code&gt; and the
                  &lt;code&gt;InternationalFormatter&lt;/code&gt;, as it is possible to create a
                  situation where certain values can not be input. Consider the date
                  format &apos;M/d/yy&apos;, an &lt;code&gt;InternationalFormatter&lt;/code&gt; that is always
                  valid (&lt;code&gt;setAllowsInvalid(false)&lt;/code&gt;), is in overwrite mode
                  (&lt;code&gt;setOverwriteMode(true)&lt;/code&gt;) and the date 7/1/99. In this
                  case the user will not be able to enter a two digit month or day of
                  month. To avoid this, the format should be &apos;MM/dd/yy&apos;.
                  &lt;p&gt;
                  If &lt;code&gt;InternationalFormatter&lt;/code&gt; is configured to only allow valid
                  values (&lt;code&gt;setAllowsInvalid(false)&lt;/code&gt;), every valid edit will result
                  in the text of the &lt;code&gt;JFormattedTextField&lt;/code&gt; being completely reset
                  from the &lt;code&gt;Format&lt;/code&gt;.
                  The cursor position will also be adjusted as literal characters are
                  added/removed from the resulting String.
                  &lt;p&gt;
                  &lt;code&gt;InternationalFormatter&lt;/code&gt;&apos;s behavior of
                  &lt;code&gt;stringToValue&lt;/code&gt; is  slightly different than that of
                  &lt;code&gt;DefaultTextFormatter&lt;/code&gt;, it does the following:
                  &lt;ol&gt;
                  &lt;li&gt;&lt;code&gt;parseObject&lt;/code&gt; is invoked on the &lt;code&gt;Format&lt;/code&gt;
                  specified by &lt;code&gt;setFormat&lt;/code&gt;
                  &lt;li&gt;If a Class has been set for the values (&lt;code&gt;setValueClass&lt;/code&gt;),
                  supers implementation is invoked to convert the value returned
                  from &lt;code&gt;parseObject&lt;/code&gt; to the appropriate class.
                  &lt;li&gt;If a &lt;code&gt;ParseException&lt;/code&gt; has not been thrown, and the value
                  is outside the min/max a &lt;code&gt;ParseException&lt;/code&gt; is thrown.
                  &lt;li&gt;The value is returned.
                  &lt;/ol&gt;
                  &lt;code&gt;InternationalFormatter&lt;/code&gt; implements &lt;code&gt;stringToValue&lt;/code&gt;
                  in this manner so that you can specify an alternate Class than
                  &lt;code&gt;Format&lt;/code&gt; may return.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <see>
                    java.text.Format                    
                </see>
                <see>
                    java.lang.Comparable                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="EMPTY_FIELD_ARRAY" type="Format.Field[]" line="68"/>
            <javadoc line="68">
                Used by &lt;code&gt;getFields&lt;/code&gt;.                
            </javadoc>
            <declaration name="format" type="Format" line="72"/>
            <javadoc line="72">
                Object used to handle the conversion.                
            </javadoc>
            <declaration name="max" type="Comparable" line="76"/>
            <javadoc line="76">
                Can be used to impose a maximum value.                
            </javadoc>
            <declaration name="min" type="Comparable" line="80"/>
            <javadoc line="80">
                Can be used to impose a minimum value.                
            </javadoc>
            <declaration name="literalMask" type="BitSet" line="84"/>
            <javadoc line="84">
                A bit is set for every index identified in the
                  AttributedCharacterIterator that is not considered decoration.
                  This should only be used if validMask is true.                
            </javadoc>
            <declaration name="iterator" type="AttributedCharacterIterator" line="90"/>
            <javadoc line="90">
                Used to iterate over characters.                
            </javadoc>
            <declaration name="validMask" type="boolean" line="94"/>
            <javadoc line="94">
                True if the Format was able to convert the value to a String and
                  back.                
            </javadoc>
            <declaration name="string" type="String" line="99"/>
            <javadoc line="99">
                Current value being displayed.                
            </javadoc>
            <declaration name="ignoreDocumentMutate" type="boolean" line="103"/>
            <javadoc line="103">
                If true, DocumentFilter methods are unconditionally allowed,
                  and no checking is done on their values. This is used when
                  incrementing/decrementing via the actions.                
            </javadoc>
            <javadoc line="109">
                Creates an &lt;code&gt;InternationalFormatter&lt;/code&gt; with no
                  &lt;code&gt;Format&lt;/code&gt; specified.                
            </javadoc>
            <method name="InternationalFormatter" type="constructor" line="113"/>
            <javadoc line="116">
                Creates an &lt;code&gt;InternationalFormatter&lt;/code&gt; with the specified
                  &lt;code&gt;Format&lt;/code&gt; instance.                
                <param>
                    format Format instance used for converting from/to Strings                    
                </param>
            </javadoc>
            <method name="InternationalFormatter" type="constructor" line="121">
                <params>
                    <param name="format" type="Format"/>
                </params>
            </method>
            <javadoc line="125">
                Sets the format that dictates the legal values that can be edited
                  and displayed.                
                <param>
                    format &lt;code&gt;Format&lt;/code&gt; instance used for converting
                      from/to Strings                    
                </param>
            </javadoc>
            <method name="setFormat" type="void" line="131">
                <params>
                    <param name="format" type="Format"/>
                </params>
            </method>
            <javadoc line="134">
                Returns the format that dictates the legal values that can be edited
                  and displayed.                
                <return>
                    Format instance used for converting from/to Strings                    
                </return>
            </javadoc>
            <method name="getFormat" type="Format" line="139"/>
            <javadoc line="142">
                Sets the minimum permissible value. If the &lt;code&gt;valueClass&lt;/code&gt; has
                  not been specified, and &lt;code&gt;minimum&lt;/code&gt; is non null, the
                  &lt;code&gt;valueClass&lt;/code&gt; will be set to that of the class of
                  &lt;code&gt;minimum&lt;/code&gt;.                
                <param>
                    minimum Minimum legal value that can be input                    
                </param>
                <see>
                    #setValueClass                    
                </see>
            </javadoc>
            <method name="setMinimum" type="void" line="150">
                <params>
                    <param name="minimum" type="Comparable"/>
                </params>
                <scope line="151"/>
            </method>
            <javadoc line="156">
                Returns the minimum permissible value.                
                <return>
                    Minimum legal value that can be input                    
                </return>
            </javadoc>
            <method name="getMinimum" type="Comparable" line="160"/>
            <javadoc line="163">
                Sets the maximum permissible value. If the &lt;code&gt;valueClass&lt;/code&gt; has
                  not been specified, and &lt;code&gt;max&lt;/code&gt; is non null, the
                  &lt;code&gt;valueClass&lt;/code&gt; will be set to that of the class of
                  &lt;code&gt;max&lt;/code&gt;.                
                <param>
                    max Maximum legal value that can be input                    
                </param>
                <see>
                    #setValueClass                    
                </see>
            </javadoc>
            <method name="setMaximum" type="void" line="171">
                <params>
                    <param name="max" type="Comparable"/>
                </params>
                <scope line="172"/>
            </method>
            <javadoc line="177">
                Returns the maximum permissible value.                
                <return>
                    Maximum legal value that can be input                    
                </return>
            </javadoc>
            <method name="getMaximum" type="Comparable" line="181"/>
            <javadoc line="184">
                Installs the &lt;code&gt;DefaultFormatter&lt;/code&gt; onto a particular
                  &lt;code&gt;JFormattedTextField&lt;/code&gt;.
                  This will invoke &lt;code&gt;valueToString&lt;/code&gt; to convert the
                  current value from the &lt;code&gt;JFormattedTextField&lt;/code&gt; to
                  a String. This will then install the &lt;code&gt;Action&lt;/code&gt;s from
                  &lt;code&gt;getActions&lt;/code&gt;, the &lt;code&gt;DocumentFilter&lt;/code&gt;
                  returned from &lt;code&gt;getDocumentFilter&lt;/code&gt; and the
                  &lt;code&gt;NavigationFilter&lt;/code&gt; returned from
                  &lt;code&gt;getNavigationFilter&lt;/code&gt; onto the
                  &lt;code&gt;JFormattedTextField&lt;/code&gt;.
                  &lt;p&gt;
                  Subclasses will typically only need to override this if they
                  wish to install additional listeners on the
                  &lt;code&gt;JFormattedTextField&lt;/code&gt;.
                  &lt;p&gt;
                  If there is a &lt;code&gt;ParseException&lt;/code&gt; in converting the
                  current value to a String, this will set the text to an empty
                  String, and mark the &lt;code&gt;JFormattedTextField&lt;/code&gt; as being
                  in an invalid state.
                  &lt;p&gt;
                  While this is a public method, this is typically only useful
                  for subclassers of &lt;code&gt;JFormattedTextField&lt;/code&gt;.
                  &lt;code&gt;JFormattedTextField&lt;/code&gt; will invoke this method at
                  the appropriate times when the value changes, or its internal
                  state changes.                
                <param>
                    ftf JFormattedTextField to format for, may be null indicating
                      uninstall from current JFormattedTextField.                    
                </param>
            </javadoc>
            <method name="install" type="void" line="213">
                <params>
                    <param name="ftf" type="JFormattedTextField"/>
                </params>
            </method>
            <javadoc line="218">
                Returns a String representation of the Object &lt;code&gt;value&lt;/code&gt;.
                  This invokes &lt;code&gt;format&lt;/code&gt; on the current &lt;code&gt;Format&lt;/code&gt;.                
                <throws>
                    ParseException if there is an error in the conversion                    
                </throws>
                <param>
                    value Value to convert                    
                </param>
                <return>
                    String representation of value                    
                </return>
            </javadoc>
            <method name="valueToString" type="String" line="225">
                <params>
                    <param name="value" type="Object"/>
                </params>
                <scope line="226"/>
                <declaration name="f" type="Format" line="229"/>
                <scope line="230"/>
            </method>
            <javadoc line="235">
                Returns the &lt;code&gt;Object&lt;/code&gt; representation of the
                  &lt;code&gt;String&lt;/code&gt; &lt;code&gt;text&lt;/code&gt;.                
                <param>
                    text &lt;code&gt;String&lt;/code&gt; to convert                    
                </param>
                <return>
                    &lt;code&gt;Object&lt;/code&gt; representation of text                    
                </return>
                <throws>
                    ParseException if there is an error in the conversion                    
                </throws>
            </javadoc>
            <method name="stringToValue" type="Object" line="242">
                <params>
                    <param name="text" type="String"/>
                </params>
                <declaration name="value" type="Object" line="243"/>
                <scope line="244"/>
                <scope line="247">
                    <scope line="248"/>
                </scope>
                <scope line="252"/>
            </method>
            <javadoc line="257">
                Returns the &lt;code&gt;Format.Field&lt;/code&gt; constants associated with
                  the text at &lt;code&gt;offset&lt;/code&gt;. If &lt;code&gt;offset&lt;/code&gt; is not
                  a valid location into the current text, this will return an
                  empty array.                
                <param>
                    offset offset into text to be examined                    
                </param>
                <return>
                    Format.Field constants associated with the text at the
                      given position.                    
                </return>
            </javadoc>
            <method name="getFields" type="Format.Field[]" line="266">
                <params>
                    <param name="offset" type="int"/>
                </params>
                <scope line="267"/>
                <declaration name="attrs" type="Map&amp;lt;Attribute,Object&amp;gt;" line="270"/>
                <scope line="271">
                    <declaration name="al" type="ArrayList&amp;lt;Attribute&amp;gt;" line="272"/>
                </scope>
            </method>
            <javadoc line="278">
                Creates a copy of the DefaultFormatter.                
                <return>
                    copy of the DefaultFormatter                    
                </return>
            </javadoc>
            <method name="clone" type="Object" line="282">
                <declaration name="formatter" type="InternationalFormatter" line="283"/>
            </method>
            <javadoc line="290">
                If &lt;code&gt;getSupportsIncrement&lt;/code&gt; returns true, this returns
                  two Actions suitable for incrementing/decrementing the value.                
            </javadoc>
            <method name="getActions" type="Action[]" line="294">
                <scope line="295"/>
            </method>
            <javadoc line="300">
                Invokes &lt;code&gt;parseObject&lt;/code&gt; on &lt;code&gt;f&lt;/code&gt;, returning
                  its value.                
            </javadoc>
            <method name="stringToValue" type="Object" line="304">
                <params>
                    <param name="text" type="String"/>
                    <param name="f" type="Format"/>
                </params>
                <scope line="305"/>
            </method>
            <javadoc line="310">
                Returns true if &lt;code&gt;value&lt;/code&gt; is between the min/max.                
                <param>
                    wantsCCE If false, and a ClassCastException is thrown in
                      comparing the values, the exception is consumed and
                      false is returned.                    
                </param>
            </javadoc>
            <method name="isValidValue" type="boolean" line="316">
                <params>
                    <param name="value" type="Object"/>
                    <param name="wantsCCE" type="boolean"/>
                </params>
                <declaration name="min" type="Comparable" line="317"/>
                <scope line="318">
                    <scope line="319"/>
                </scope>
                <scope line="323">
                    <scope line="324"/>
                </scope>
                <declaration name="max" type="Comparable" line="329"/>
                <scope line="330">
                    <scope line="331"/>
                </scope>
                <scope line="335">
                    <scope line="336"/>
                </scope>
            </method>
            <javadoc line="343">
                Returns a Set of the attribute identifiers at &lt;code&gt;index&lt;/code&gt;.                
            </javadoc>
            <method name="getAttributes" type="Map&lt;Attribute,Object&gt;" line="346">
                <params>
                    <param name="index" type="int"/>
                </params>
                <scope line="347">
                    <declaration name="iterator" type="AttributedCharacterIterator" line="348"/>
                    <scope line="349"/>
                </scope>
            </method>
            <javadoc line="356">
                Returns the start of the first run that contains the attribute
                  &lt;code&gt;id&lt;/code&gt;. This will return &lt;code&gt;-1&lt;/code&gt; if the attribute
                  can not be found.                
            </javadoc>
            <method name="getAttributeStart" type="int" line="361">
                <params>
                    <param name="id" type="AttributedCharacterIterator.Attribute"/>
                </params>
                <scope line="362">
                    <declaration name="iterator" type="AttributedCharacterIterator" line="363"/>
                    <scope line="365">
                        <scope line="366"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="374">
                Returns the &lt;code&gt;AttributedCharacterIterator&lt;/code&gt; used to
                  format the last value.                
            </javadoc>
            <method name="getIterator" type="AttributedCharacterIterator" line="378"/>
            <javadoc line="381">
                Updates the AttributedCharacterIterator and bitset, if necessary.                
            </javadoc>
            <method name="updateMaskIfNecessary" type="void" line="384">
                <scope line="385">
                    <scope line="386"/>
                    <scope line="389">
                        <declaration name="newString" type="String" line="390"/>
                        <scope line="391"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="397">
                Updates the AttributedCharacterIterator by invoking
                  &lt;code&gt;formatToCharacterIterator&lt;/code&gt; on the &lt;code&gt;Format&lt;/code&gt;.
                  If this is successful,
                  &lt;code&gt;updateMask(AttributedCharacterIterator)&lt;/code&gt;
                  is then invoked to update the internal bitmask.                
            </javadoc>
            <method name="updateMask" type="void" line="404">
                <scope line="405">
                    <declaration name="doc" type="Document" line="406"/>
                    <scope line="408">
                        <scope line="409"/>
                        <scope line="412"/>
                        <scope line="415">
                            <scope line="416">
                                <declaration name="value" type="Object" line="417"/>
                                <declaration name="iterator" type="AttributedCharacterIterator" line="418"/>
                            </scope>
                            <scope line="421"/>
                            <scope line="423"/>
                            <scope line="425"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="431">
                Returns the number of literal characters before &lt;code&gt;index&lt;/code&gt;.                
            </javadoc>
            <method name="getLiteralCountTo" type="int" line="434">
                <params>
                    <param name="index" type="int"/>
                </params>
                <declaration name="lCount" type="int" line="435"/>
                <scope line="436">
                    <scope line="437"/>
                </scope>
            </method>
            <javadoc line="443">
                Returns true if the character at index is a literal, that is
                  not editable.                
            </javadoc>
            <method name="isLiteral" type="boolean" line="447">
                <params>
                    <param name="index" type="int"/>
                </params>
                <scope line="448"/>
            </method>
            <javadoc line="453">
                Returns the literal character at index.                
            </javadoc>
            <method name="getLiteral" type="char" line="456">
                <params>
                    <param name="index" type="int"/>
                </params>
                <scope line="457"/>
            </method>
            <javadoc line="462">
                Returns true if the character at offset is navigatable too. This
                  is implemented in terms of &lt;code&gt;isLiteral&lt;/code&gt;, subclasses
                  may wish to provide different behavior.                
            </javadoc>
            <method name="isNavigatable" type="boolean" line="467">
                <params>
                    <param name="offset" type="int"/>
                </params>
            </method>
            <javadoc line="470">
                Overriden to update the mask after invoking supers implementation.                
            </javadoc>
            <method name="updateValue" type="void" line="473">
                <params>
                    <param name="value" type="Object"/>
                </params>
            </method>
            <javadoc line="477">
                Overriden to unconditionally allow the replace if
                  ignoreDocumentMutate is true.                
            </javadoc>
            <method name="replace" type="void" line="481">
                <params>
                    <param name="fb" type="DocumentFilter.FilterBypass"/>
                    <param name="offset" type="int"/>
                    <param name="length" type="int"/>
                    <param name="text" type="String"/>
                    <param name="attrs" type="AttributeSet"/>
                </params>
                <scope line="482"/>
            </method>
            <javadoc line="488">
                Returns the index of the next non-literal character starting at
                  index. If index is not a literal, it will be returned.                
                <param>
                    direction Amount to increment looking for non-literal                    
                </param>
            </javadoc>
            <method name="getNextNonliteralIndex" type="int" line="493">
                <params>
                    <param name="index" type="int"/>
                    <param name="direction" type="int"/>
                </params>
                <declaration name="max" type="int" line="494"/>
                <scope line="495">
                    <scope line="496"/>
                    <scope line="499"/>
                </scope>
            </method>
            <javadoc line="505">
                Overriden in an attempt to honor the literals.
                  &lt;p&gt;If we do not allow invalid values and are in overwrite mode, this{@code rh.length} is corrected as to preserve trailing literals.
                  If not in overwrite mode, and there is text to insert it is
                  inserted at the next non literal index going forward.  If there
                  is only text to remove, it is removed from the next non literal
                  index going backward.                
            </javadoc>
            <method name="canReplace" type="boolean" line="513">
                <params>
                    <param name="rh" type="ReplaceHolder"/>
                </params>
                <scope line="514">
                    <declaration name="text" type="String" line="515"/>
                    <declaration name="tl" type="int" line="516"/>
                    <declaration name="c" type="JTextComponent" line="517"/>
                    <scope line="518"/>
                    <scope line="521">
                        <declaration name="pos" type="int" line="522"/>
                        <declaration name="textPos" type="int" line="523"/>
                        <declaration name="overflown" type="boolean" line="524"/>
                        <scope line="525">
                            <scope line="527"/>
                        </scope>
                        <scope line="534"/>
                    </scope>
                    <scope line="538"/>
                    <scope line="541"/>
                </scope>
                <scope line="547"/>
                <declaration name="can" type="boolean" line="551"/>
                <scope line="552"/>
            </method>
            <javadoc line="557">
                When in !allowsInvalid mode the text is reset on every edit, thus
                  supers implementation will position the cursor at the wrong position.
                  As such, this invokes supers implementation and then invokes
                  &lt;code&gt;repositionCursor&lt;/code&gt; to correctly reset the cursor.                
            </javadoc>
            <method name="replace" type="boolean" line="563">
                <params>
                    <param name="rh" type="ReplaceHolder"/>
                </params>
                <declaration name="start" type="int" line="564"/>
                <declaration name="direction" type="int" line="565"/>
                <declaration name="literalCount" type="int" line="566"/>
                <scope line="567"/>
                <scope line="570">
                    <scope line="571"/>
                    <scope line="574"/>
                </scope>
                <scope line="579">
                    <scope line="580">
                        <declaration name="end" type="int" line="581"/>
                    </scope>
                    <scope line="585">
                        <scope line="587"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="596">
                Repositions the cursor. &lt;code&gt;startLiteralCount&lt;/code&gt; gives
                  the number of literals to the start of the deleted range, end
                  gives the ending location to adjust from, direction gives
                  the direction relative to &lt;code&gt;end&lt;/code&gt; to position the
                  cursor from.                
            </javadoc>
            <method name="repositionCursor" type="void" line="603">
                <params>
                    <param name="startLiteralCount" type="int"/>
                    <param name="end" type="int"/>
                    <param name="direction" type="int"/>
                </params>
                <declaration name="endLiteralCount" type="int" line="604"/>
                <scope line="605">
                    <scope line="607">
                        <scope line="608"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="615">
                Returns the character from the mask that has been buffered
                  at &lt;code&gt;index&lt;/code&gt;.                
            </javadoc>
            <method name="getBufferedChar" type="char" line="619">
                <params>
                    <param name="index" type="int"/>
                </params>
                <scope line="620">
                    <scope line="621"/>
                </scope>
            </method>
            <javadoc line="627">
                Returns true if the current mask is valid.                
            </javadoc>
            <method name="isValidMask" type="boolean" line="630"/>
            <javadoc line="633">
                Returns true if &lt;code&gt;attributes&lt;/code&gt; is null or empty.                
            </javadoc>
            <method name="isLiteral" type="boolean" line="636">
                <params>
                    <param name="attributes" type="Map"/>
                </params>
            </method>
            <javadoc line="639">
                Updates the interal bitset from &lt;code&gt;iterator&lt;/code&gt;. This will
                  set &lt;code&gt;validMask&lt;/code&gt; to true if &lt;code&gt;iterator&lt;/code&gt; is
                  non-null.                
            </javadoc>
            <method name="updateMask" type="void" line="644">
                <params>
                    <param name="iterator" type="AttributedCharacterIterator"/>
                </params>
                <scope line="645">
                    <scope line="648"/>
                    <scope line="651">
                        <scope line="652"/>
                    </scope>
                    <scope line="657">
                        <declaration name="attributes" type="Map" line="658"/>
                        <declaration name="set" type="boolean" line="659"/>
                        <declaration name="start" type="int" line="660"/>
                        <declaration name="end" type="int" line="661"/>
                        <scope line="662">
                            <scope line="663"/>
                            <scope line="666"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="675">
                Returns true if &lt;code&gt;field&lt;/code&gt; is non-null.
                  Subclasses that wish to allow incrementing to happen outside of
                  the known fields will need to override this.                
            </javadoc>
            <method name="canIncrement" type="boolean" line="680">
                <params>
                    <param name="field" type="Object"/>
                    <param name="cursorPosition" type="int"/>
                </params>
            </method>
            <javadoc line="683">
                Selects the fields identified by &lt;code&gt;attributes&lt;/code&gt;.                
            </javadoc>
            <method name="selectField" type="void" line="686">
                <params>
                    <param name="f" type="Object"/>
                    <param name="count" type="int"/>
                </params>
                <declaration name="iterator" type="AttributedCharacterIterator" line="687"/>
                <scope line="688">
                    <declaration name="field" type="AttributedCharacterIterator.Attribute" line="689"/>
                    <scope line="691">
                        <scope line="693">
                            <declaration name="limit" type="int" line="694"/>
                            <scope line="695"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="705">
                Returns the field that will be adjusted by adjustValue.                
            </javadoc>
            <method name="getAdjustField" type="Object" line="708">
                <params>
                    <param name="start" type="int"/>
                    <param name="attributes" type="Map"/>
                </params>
            </method>
            <javadoc line="711">
                Returns the number of occurences of &lt;code&gt;f&lt;/code&gt; before
                  the location &lt;code&gt;start&lt;/code&gt; in the current
                  &lt;code&gt;AttributedCharacterIterator&lt;/code&gt;.                
            </javadoc>
            <method name="getFieldTypeCountTo" type="int" line="716">
                <params>
                    <param name="f" type="Object"/>
                    <param name="start" type="int"/>
                </params>
                <declaration name="iterator" type="AttributedCharacterIterator" line="717"/>
                <declaration name="count" type="int" line="718"/>
                <scope line="719">
                    <declaration name="field" type="AttributedCharacterIterator.Attribute" line="720"/>
                    <scope line="722">
                        <scope line="724"/>
                        <scope line="729"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="736">
                Subclasses supporting incrementing must override this to handle
                  the actual incrementing. &lt;code&gt;value&lt;/code&gt; is the current value,
                  &lt;code&gt;attributes&lt;/code&gt; gives the field the cursor is in (may be
                  null depending upon &lt;code&gt;canIncrement&lt;/code&gt;) and
                  &lt;code&gt;direction&lt;/code&gt; is the amount to increment by.                
            </javadoc>
            <method name="adjustValue" type="Object" line="743">
                <params>
                    <param name="value" type="Object"/>
                    <param name="attributes" type="Map"/>
                    <param name="field" type="Object"/>
                    <param name="direction" type="int"/>
                </params>
            </method>
            <javadoc line="746">
                Returns false, indicating InternationalFormatter does not allow
                  incrementing of the value. Subclasses that wish to support
                  incrementing/decrementing the value should override this and
                  return true. Subclasses should also override
                  &lt;code&gt;adjustValue&lt;/code&gt;.                
            </javadoc>
            <method name="getSupportsIncrement" type="boolean" line="753"/>
            <javadoc line="756">
                Resets the value of the JFormattedTextField to be
                  &lt;code&gt;value&lt;/code&gt;.                
            </javadoc>
            <method name="resetValue" type="void" line="760">
                <params>
                    <param name="value" type="Object"/>
                </params>
                <declaration name="doc" type="Document" line="761"/>
                <declaration name="string" type="String" line="762"/>
                <scope line="763"/>
                <scope line="768"/>
            </method>
            <javadoc line="773">
                Subclassed to update the internal representation of the mask after
                  the default read operation has completed.                
            </javadoc>
            <method name="readObject" type="void" line="777">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
            </method>
            <javadoc line="781">
                Overriden to return an instance of &lt;code&gt;ExtendedReplaceHolder&lt;/code&gt;.                
            </javadoc>
            <method name="getReplaceHolder" type="ReplaceHolder" line="784">
                <params>
                    <param name="fb" type="DocumentFilter.FilterBypass"/>
                    <param name="offset" type="int"/>
                    <param name="length" type="int"/>
                    <param name="text" type="String"/>
                    <param name="attrs" type="AttributeSet"/>
                </params>
                <scope line="785"/>
            </method>
            <class name="ExtendedReplaceHolder" line="790">
                <extends class="ReplaceHolder"/>
                <javadoc line="790">
                    As InternationalFormatter replaces the complete text on every edit,
                      ExtendedReplaceHolder keeps track of the offset and length passed
                      into canReplace.                    
                </javadoc>
                <declaration name="endOffset" type="int" line="796"/>
                <javadoc line="796">
                    Offset of the insert/remove. This may differ from offset in
                      that if !allowsInvalid the text is replaced on every edit.                    
                </javadoc>
                <declaration name="endTextLength" type="int" line="801"/>
                <javadoc line="801">
                    Length of the text. This may differ from text.length in
                      that if !allowsInvalid the text is replaced on every edit.                    
                </javadoc>
                <javadoc line="806">
                    Resets the region to delete to be the complete document and
                      the text from invoking valueToString on the current value.                    
                </javadoc>
                <method name="resetFromValue" type="void" line="810">
                    <params>
                        <param name="formatter" type="InternationalFormatter"/>
                    </params>
                    <scope line="812"/>
                    <scope line="815"/>
                </method>
            </class>
            <class name="IncrementAction" line="821">
                <extends class="AbstractAction"/>
                <javadoc line="821">
                    IncrementAction is used to increment the value by a certain amount.
                      It calls into &lt;code&gt;adjustValue&lt;/code&gt; to handle the actual
                      incrementing of the value.                    
                </javadoc>
                <declaration name="direction" type="int" line="827"/>
                <method name="IncrementAction" type="constructor" line="828">
                    <params>
                        <param name="name" type="String"/>
                        <param name="direction" type="int"/>
                    </params>
                </method>
                <method name="actionPerformed" type="void" line="832">
                    <params>
                        <param name="ae" type="ActionEvent"/>
                    </params>
                    <scope line="833">
                        <scope line="834"/>
                        <declaration name="validEdit" type="boolean" line="837"/>
                        <scope line="838">
                            <declaration name="start" type="int" line="839"/>
                            <scope line="840">
                                <declaration name="iterator" type="AttributedCharacterIterator" line="841"/>
                                <declaration name="attributes" type="Map" line="843"/>
                                <declaration name="field" type="Object" line="844"/>
                                <scope line="845">
                                    <scope line="846">
                                        <declaration name="value" type="Object" line="847"/>
                                        <declaration name="fieldTypeCount" type="int" line="848"/>
                                        <scope line="850">
                                            <scope line="853"/>
                                        </scope>
                                    </scope>
                                    <scope line="859"/>
                                    <scope line="861"/>
                                </scope>
                            </scope>
                        </scope>
                        <scope line="866"/>
                    </scope>
                </method>
            </class>
        </class>
    </source>