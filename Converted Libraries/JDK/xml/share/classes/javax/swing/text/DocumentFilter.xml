<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text">
        <class name="DocumentFilter" line="27">
            <javadoc line="27">
                &lt;code&gt;DocumentFilter&lt;/code&gt;, as the name implies, is a filter for the
                  &lt;code&gt;Document&lt;/code&gt; mutation methods. When a &lt;code&gt;Document&lt;/code&gt;
                  containing a &lt;code&gt;DocumentFilter&lt;/code&gt; is modified (either through
                  &lt;code&gt;insert&lt;/code&gt; or &lt;code&gt;remove&lt;/code&gt;), it forwards the appropriate
                  method invocation to the &lt;code&gt;DocumentFilter&lt;/code&gt;. The
                  default implementation allows the modification to
                  occur. Subclasses can filter the modifications by conditionally invoking
                  methods on the superclass, or invoking the necessary methods on
                  the passed in &lt;code&gt;FilterBypass&lt;/code&gt;. Subclasses should NOT call back
                  into the Document for the modification
                  instead call into the superclass or the &lt;code&gt;FilterBypass&lt;/code&gt;.
                  &lt;p&gt;
                  When &lt;code&gt;remove&lt;/code&gt; or &lt;code&gt;insertString&lt;/code&gt; is invoked
                  on the &lt;code&gt;DocumentFilter&lt;/code&gt;, the &lt;code&gt;DocumentFilter&lt;/code&gt;
                  may callback into the
                  &lt;code&gt;FilterBypass&lt;/code&gt; multiple times, or for different regions, but
                  it should not callback into the &lt;code&gt;FilterBypass&lt;/code&gt; after returning
                  from the &lt;code&gt;remove&lt;/code&gt; or &lt;code&gt;insertString&lt;/code&gt; method.
                  &lt;p&gt;
                  By default, text related document mutation methods such as
                  &lt;code&gt;insertString&lt;/code&gt;, &lt;code&gt;replace&lt;/code&gt; and &lt;code&gt;remove&lt;/code&gt;
                  in &lt;code&gt;AbstractDocument&lt;/code&gt; use &lt;code&gt;DocumentFilter&lt;/code&gt; when
                  available, and &lt;code&gt;Element&lt;/code&gt; related mutation methods such as
                  &lt;code&gt;create&lt;/code&gt;, &lt;code&gt;insert&lt;/code&gt; and &lt;code&gt;removeElement&lt;/code&gt; in
                  &lt;code&gt;DefaultStyledDocument&lt;/code&gt; do not use &lt;code&gt;DocumentFilter&lt;/code&gt;.
                  If a method doesn&apos;t follow these defaults, this must be explicitly stated
                  in the method documentation.                
                <see>
                    javax.swing.text.Document                    
                </see>
                <see>
                    javax.swing.text.AbstractDocument                    
                </see>
                <see>
                    javax.swing.text.DefaultStyledDocument                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <javadoc line="63">
                Invoked prior to removal of the specified region in the
                  specified Document. Subclasses that want to conditionally allow
                  removal should override this and only call supers implementation as
                  necessary, or call directly into the &lt;code&gt;FilterBypass&lt;/code&gt; as
                  necessary.                
                <param>
                    fb FilterBypass that can be used to mutate Document                    
                </param>
                <param>
                    offset the offset from the beginning >= 0                    
                </param>
                <param>
                    length the number of characters to remove >= 0                    
                </param>
                <exception>
                    BadLocationException  some portion of the removal range
                      was not a valid part of the document.  The location in the exception
                      is the first bad position encountered.                    
                </exception>
            </javadoc>
            <method name="remove" type="void" line="78">
                <params>
                    <param name="fb" type="FilterBypass"/>
                    <param name="offset" type="int"/>
                    <param name="length" type="int"/>
                </params>
            </method>
            <javadoc line="82">
                Invoked prior to insertion of text into the
                  specified Document. Subclasses that want to conditionally allow
                  insertion should override this and only call supers implementation as
                  necessary, or call directly into the FilterBypass.                
                <param>
                    fb FilterBypass that can be used to mutate Document                    
                </param>
                <param>
                    offset  the offset into the document to insert the content >= 0.
                      All positions that track change at or after the given location
                      will move.                    
                </param>
                <param>
                    string the string to insert                    
                </param>
                <param>
                    attr      the attributes to associate with the inserted
                      content.  This may be null if there are no attributes.                    
                </param>
                <exception>
                    BadLocationException  the given insert position is not a
                      valid position within the document                    
                </exception>
            </javadoc>
            <method name="insertString" type="void" line="99">
                <params>
                    <param name="fb" type="FilterBypass"/>
                    <param name="offset" type="int"/>
                    <param name="string" type="String"/>
                    <param name="attr" type="AttributeSet"/>
                </params>
            </method>
            <javadoc line="103">
                Invoked prior to replacing a region of text in the
                  specified Document. Subclasses that want to conditionally allow
                  replace should override this and only call supers implementation as
                  necessary, or call directly into the FilterBypass.                
                <param>
                    fb FilterBypass that can be used to mutate Document                    
                </param>
                <param>
                    offset Location in Document                    
                </param>
                <param>
                    length Length of text to delete                    
                </param>
                <param>
                    text Text to insert, null indicates no text to insert                    
                </param>
                <param>
                    attrs AttributeSet indicating attributes of inserted text,
                      null is legal.                    
                </param>
                <exception>
                    BadLocationException  the given insert position is not a
                      valid position within the document                    
                </exception>
            </javadoc>
            <method name="replace" type="void" line="119">
                <params>
                    <param name="fb" type="FilterBypass"/>
                    <param name="offset" type="int"/>
                    <param name="length" type="int"/>
                    <param name="text" type="String"/>
                    <param name="attrs" type="AttributeSet"/>
                </params>
            </method>
            <class name="FilterBypass" line="124">
                <javadoc line="124">
                    Used as a way to circumvent calling back into the Document to
                      change it. Document implementations that wish to support
                      a DocumentFilter must provide an implementation that will
                      not callback into the DocumentFilter when the following methods
                      are invoked from the DocumentFilter.                    
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <method name="getDocument" type="Document" line="133"/>
                <javadoc line="133">
                    Returns the Document the mutation is occuring on.                    
                    <return>
                        Document that remove/insertString will operate on                        
                    </return>
                </javadoc>
                <method name="remove" type="void" line="140"/>
                <javadoc line="140">
                    Removes the specified region of text, bypassing the
                      DocumentFilter.                    
                    <param>
                        offset the offset from the beginning >= 0                        
                    </param>
                    <param>
                        length the number of characters to remove >= 0                        
                    </param>
                    <exception>
                        BadLocationException some portion of the removal range
                          was not a valid part of the document.  The location in the
                          exception is the first bad position encountered.                        
                    </exception>
                </javadoc>
                <method name="insertString" type="void" line="153"/>
                <javadoc line="153">
                    Inserts the specified text, bypassing the
                      DocumentFilter.                    
                    <param>
                        offset  the offset into the document to insert the
                          content >= 0. All positions that track change at or after the
                          given location will move.                        
                    </param>
                    <param>
                        string the string to insert                        
                    </param>
                    <param>
                        attr the attributes to associate with the inserted
                          content.  This may be null if there are no attributes.                        
                    </param>
                    <exception>
                        BadLocationException  the given insert position is not a
                          valid position within the document                        
                    </exception>
                </javadoc>
                <method name="replace" type="void" line="169"/>
                <javadoc line="169">
                    Deletes the region of text from &lt;code&gt;offset&lt;/code&gt; to
                      &lt;code&gt;offset + length&lt;/code&gt;, and replaces it with
                      &lt;code&gt;text&lt;/code&gt;.                    
                    <param>
                        offset Location in Document                        
                    </param>
                    <param>
                        length Length of text to delete                        
                    </param>
                    <param>
                        string Text to insert, null indicates no text to insert                        
                    </param>
                    <param>
                        attrs AttributeSet indicating attributes of inserted text,
                          null is legal.                        
                    </param>
                    <exception>
                        BadLocationException  the given insert is not a
                          valid position within the document                        
                    </exception>
                </javadoc>
            </class>
        </class>
    </source>