<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text.html">
        <import package="java.awt"/>
        <import package="javax.swing.SizeRequirements"/>
        <import package="javax.swing.event.DocumentEvent"/>
        <import package="javax.swing.text.Document"/>
        <import package="javax.swing.text.Element"/>
        <import package="javax.swing.text.AttributeSet"/>
        <import package="javax.swing.text.StyleConstants"/>
        <import package="javax.swing.text.View"/>
        <import package="javax.swing.text.ViewFactory"/>
        <import package="javax.swing.text.BadLocationException"/>
        <import package="javax.swing.text.JTextComponent"/>
        <class name="ParagraphView" line="39">
            <extends class="javax.swing.text.ParagraphView"/>
            <javadoc line="39">
                Displays the a paragraph, and uses css attributes for its
                  configuration.                
                <author>
                    Timothy Prinzing                    
                </author>
            </javadoc>
            <javadoc line="48">
                Constructs a ParagraphView for the given element.                
                <param>
                    elem the element that this view is responsible for                    
                </param>
            </javadoc>
            <method name="ParagraphView" type="constructor" line="53">
                <params>
                    <param name="elem" type="Element"/>
                </params>
            </method>
            <javadoc line="57">
                Establishes the parent view for this view.  This is
                  guaranteed to be called before any other methods if the
                  parent view is functioning properly.
                  &lt;p&gt;
                  This is implemented
                  to forward to the superclass as well as call the{@link #setPropertiesFromAttributes setPropertiesFromAttributes}method to set the paragraph properties from the css
                  attributes.  The call is made at this time to ensure
                  the ability to resolve upward through the parents
                  view attributes.                
                <param>
                    parent the new parent, or null if the view is
                      being removed from a parent it was previously added
                      to                    
                </param>
            </javadoc>
            <method name="setParent" type="void" line="74">
                <params>
                    <param name="parent" type="View"/>
                </params>
                <scope line="76"/>
            </method>
            <javadoc line="81">
                Fetches the attributes to use when rendering.  This is
                  implemented to multiplex the attributes specified in the
                  model with a StyleSheet.                
            </javadoc>
            <method name="getAttributes" type="AttributeSet" line="86">
                <scope line="87">
                    <declaration name="sheet" type="StyleSheet" line="88"/>
                </scope>
            </method>
            <javadoc line="94">
                Sets up the paragraph from css attributes instead of
                  the values found in StyleConstants (i.e. which are used
                  by the superclass).  Since                
            </javadoc>
            <method name="setPropertiesFromAttributes" type="void" line="99">
                <comment line="111">
                    set horizontal alignment                    
                </comment>
                <comment line="123">
                    Get the width/height                    
                </comment>
                <declaration name="sheet" type="StyleSheet" line="100"/>
                <scope line="103">
                    <declaration name="o" type="Object" line="109"/>
                    <scope line="110">
                        <declaration name="ta" type="String" line="112"/>
                        <scope line="113"/>
                        <scope line="115"/>
                        <scope line="117"/>
                        <scope line="119"/>
                    </scope>
                </scope>
            </method>
            <method name="getStyleSheet" type="StyleSheet" line="131">
                <declaration name="doc" type="HTMLDocument" line="132"/>
            </method>
            <javadoc line="137">
                Calculate the needs for the paragraph along the minor axis.
                  &lt;p&gt;If size requirements are explicitly specified for the paragraph,
                  use that requirements.  Otherwise, use the requirements of the
                  superclass {@link javax.swing.text.ParagraphView}.&lt;/p&gt;
                  &lt;p&gt;If the {@code axis} parameter is neither {@code View.X_AXIS} nor{@code View.Y_AXIS}, {@link IllegalArgumentException} is thrown.  If the{@code r} parameter is {@code null,} a new {@code SizeRequirements}object is created, otherwise the supplied {@code SizeRequirements}object is returned.&lt;/p&gt;                
                <param>
                    axis  the minor axis                    
                </param>
                <param>
                    r     the input {@code SizeRequirements} object                    
                </param>
                <return>
                    the new or adjusted {@code SizeRequirements} object                    
                </return>
                <throws>
                    IllegalArgumentException  if the {@code axis} parameter is invalid                    
                </throws>
            </javadoc>
            <method name="calculateMinorAxisRequirements" type="SizeRequirements" line="156">
                <params>
                    <param name="axis" type="int"/>
                    <param name="r" type="SizeRequirements"/>
                </params>
                <comment line="160">
                    Offset by the margins so that pref/min/max return the                    
                </comment>
                <comment line="161">
                    right value.                    
                </comment>
                <scope line="159">
                    <declaration name="margin" type="int" line="162"/>
                </scope>
            </method>
            <javadoc line="172">
                Indicates whether or not this view should be
                  displayed.  If none of the children wish to be
                  displayed and the only visible child is the
                  break that ends the paragraph, the paragraph
                  will not be considered visible.  Otherwise,
                  it will be considered visible and return true.                
                <return>
                    true if the paragraph should be displayed                    
                </return>
            </javadoc>
            <method name="isVisible" type="boolean" line="182">
                <comment line="197">
                    If it&apos;s the last paragraph and not editable, it shouldn&apos;t                    
                </comment>
                <comment line="198">
                    be visible.                    
                </comment>
                <declaration name="n" type="int" line="184"/>
                <scope line="185">
                    <declaration name="v" type="View" line="186"/>
                    <scope line="187"/>
                </scope>
                <scope line="191">
                    <declaration name="v" type="View" line="192"/>
                    <scope line="193"/>
                </scope>
                <scope line="199">
                    <declaration name="editable" type="boolean" line="200"/>
                    <declaration name="c" type="Component" line="201"/>
                    <scope line="202"/>
                    <scope line="205"/>
                </scope>
            </method>
            <javadoc line="212">
                Renders using the given rendering surface and area on that
                  surface.  This is implemented to delgate to the superclass
                  after stashing the base coordinate for tab calculations.                
                <param>
                    g the rendering surface to use                    
                </param>
                <param>
                    a the allocated region to render into                    
                </param>
                <see>
                    View#paint                    
                </see>
            </javadoc>
            <method name="paint" type="void" line="221">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="a" type="Shape"/>
                </params>
                <scope line="222"/>
                <declaration name="r" type="Rectangle" line="226"/>
                <scope line="227"/>
                <scope line="229"/>
            </method>
            <javadoc line="236">
                Determines the preferred span for this view.  Returns
                  0 if the view is not visible, otherwise it calls the
                  superclass method to get the preferred span.
                  axis.                
                <param>
                    axis may be either View.X_AXIS or View.Y_AXIS                    
                </param>
                <return>
                    the span the view would like to be rendered into;
                      typically the view is told to render into the span
                      that is returned, although there is no guarantee;
                      the parent may choose to resize or break the view                    
                </return>
                <see>
                    javax.swing.text.ParagraphView#getPreferredSpan                    
                </see>
            </javadoc>
            <method name="getPreferredSpan" type="float" line="249">
                <params>
                    <param name="axis" type="int"/>
                </params>
                <scope line="250"/>
            </method>
            <javadoc line="256">
                Determines the minimum span for this view along an
                  axis.  Returns 0 if the view is not visible, otherwise
                  it calls the superclass method to get the minimum span.                
                <param>
                    axis may be either <code>View.X_AXIS</code> or
                      <code>View.Y_AXIS</code>                    
                </param>
                <return>
                    the minimum span the view can be rendered into                    
                </return>
                <see>
                    javax.swing.text.ParagraphView#getMinimumSpan                    
                </see>
            </javadoc>
            <method name="getMinimumSpan" type="float" line="266">
                <params>
                    <param name="axis" type="int"/>
                </params>
                <scope line="267"/>
            </method>
            <javadoc line="273">
                Determines the maximum span for this view along an
                  axis.  Returns 0 if the view is not visible, otherwise
                  it calls the superclass method ot get the maximum span.                
                <param>
                    axis may be either <code>View.X_AXIS</code> or
                      <code>View.Y_AXIS</code>                    
                </param>
                <return>
                    the maximum span the view can be rendered into                    
                </return>
                <see>
                    javax.swing.text.ParagraphView#getMaximumSpan                    
                </see>
            </javadoc>
            <method name="getMaximumSpan" type="float" line="283">
                <params>
                    <param name="axis" type="int"/>
                </params>
                <scope line="284"/>
            </method>
            <declaration name="attr" type="AttributeSet" line="290"/>
            <declaration name="painter" type="StyleSheet.BoxPainter" line="291"/>
            <declaration name="cssWidth" type="CSS.LengthValue" line="292"/>
            <declaration name="cssHeight" type="CSS.LengthValue" line="293"/>
        </class>
    </source>