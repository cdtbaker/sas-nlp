<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text">
        <import package="java.awt.Shape"/>
        <class name="NavigationFilter" line="29">
            <javadoc line="29">
                &lt;code&gt;NavigationFilter&lt;/code&gt; can be used to restrict where the cursor can
                  be positioned. When the default cursor positioning actions attempt to
                  reposition the cursor they will call into the
                  &lt;code&gt;NavigationFilter&lt;/code&gt;, assuming
                  the &lt;code&gt;JTextComponent&lt;/code&gt; has a non-null
                  &lt;code&gt;NavigationFilter&lt;/code&gt; set. In this manner
                  the &lt;code&gt;NavigationFilter&lt;/code&gt; can effectively restrict where the
                  cursor can be positioned. Similarly &lt;code&gt;DefaultCaret&lt;/code&gt; will call
                  into the &lt;code&gt;NavigationFilter&lt;/code&gt; when the user is changing the
                  selection to further restrict where the cursor can be positioned.
                  &lt;p&gt;
                  Subclasses can conditionally call into supers implementation to restrict
                  where the cursor can be placed, or call directly into the
                  &lt;code&gt;FilterBypass&lt;/code&gt;.                
                <see>
                    javax.swing.text.Caret                    
                </see>
                <see>
                    javax.swing.text.DefaultCaret                    
                </see>
                <see>
                    javax.swing.text.View                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <javadoc line="52">
                Invoked prior to the Caret setting the dot. The default implementation
                  calls directly into the &lt;code&gt;FilterBypass&lt;/code&gt; with the passed
                  in arguments. Subclasses may wish to conditionally
                  call super with a different location, or invoke the necessary method
                  on the &lt;code&gt;FilterBypass&lt;/code&gt;                
                <param>
                    fb FilterBypass that can be used to mutate caret position                    
                </param>
                <param>
                    dot the position >= 0                    
                </param>
                <param>
                    bias Bias to place the dot at                    
                </param>
            </javadoc>
            <method name="setDot" type="void" line="63">
                <params>
                    <param name="fb" type="FilterBypass"/>
                    <param name="dot" type="int"/>
                    <param name="bias" type="Position.Bias"/>
                </params>
            </method>
            <javadoc line="67">
                Invoked prior to the Caret moving the dot. The default implementation
                  calls directly into the &lt;code&gt;FilterBypass&lt;/code&gt; with the passed
                  in arguments. Subclasses may wish to conditionally
                  call super with a different location, or invoke the necessary
                  methods on the &lt;code&gt;FilterBypass&lt;/code&gt;.                
                <param>
                    fb FilterBypass that can be used to mutate caret position                    
                </param>
                <param>
                    dot the position >= 0                    
                </param>
                <param>
                    bias Bias for new location                    
                </param>
            </javadoc>
            <method name="moveDot" type="void" line="78">
                <params>
                    <param name="fb" type="FilterBypass"/>
                    <param name="dot" type="int"/>
                    <param name="bias" type="Position.Bias"/>
                </params>
            </method>
            <javadoc line="82">
                Returns the next visual position to place the caret at from an
                  existing position. The default implementation simply forwards the
                  method to the root View. Subclasses may wish to further restrict the
                  location based on additional criteria.                
                <param>
                    text JTextComponent containing text                    
                </param>
                <param>
                    pos Position used in determining next position                    
                </param>
                <param>
                    bias Bias used in determining next position                    
                </param>
                <param>
                    direction the direction from the current position that can
                      be thought of as the arrow keys typically found on a keyboard.
                      This will be one of the following values:
                      <ul>
                      <li>SwingConstants.WEST
                      <li>SwingConstants.EAST
                      <li>SwingConstants.NORTH
                      <li>SwingConstants.SOUTH
                      </ul>                    
                </param>
                <param>
                    biasRet Used to return resulting Bias of next position                    
                </param>
                <return>
                    the location within the model that best represents the next
                      location visual position                    
                </return>
                <exception>
                    BadLocationException                    
                </exception>
                <exception>
                    IllegalArgumentException if <code>direction</code>
                      doesn't have one of the legal values above                    
                </exception>
            </javadoc>
            <method name="getNextVisualPositionFrom" type="int" line="110">
                <params>
                    <param name="text" type="JTextComponent"/>
                    <param name="pos" type="int"/>
                    <param name="bias" type="Position.Bias"/>
                    <param name="direction" type="int"/>
                    <param name="biasRet" type="Position.Bias[]"/>
                </params>
            </method>
            <class name="FilterBypass" line="116">
                <javadoc line="116">
                    Used as a way to circumvent calling back into the caret to
                      position the cursor. Caret implementations that wish to support
                      a NavigationFilter must provide an implementation that will
                      not callback into the NavigationFilter.                    
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <method name="getCaret" type="Caret" line="124"/>
                <javadoc line="124">
                    Returns the Caret that is changing.                    
                    <return>
                        Caret that is changing                        
                    </return>
                </javadoc>
                <method name="setDot" type="void" line="131"/>
                <javadoc line="131">
                    Sets the caret location, bypassing the NavigationFilter.                    
                    <param>
                        dot the position >= 0                        
                    </param>
                    <param>
                        bias Bias to place the dot at                        
                    </param>
                </javadoc>
                <method name="moveDot" type="void" line="139"/>
                <javadoc line="139">
                    Moves the caret location, bypassing the NavigationFilter.                    
                    <param>
                        dot the position >= 0                        
                    </param>
                    <param>
                        bias Bias for new location                        
                    </param>
                </javadoc>
            </class>
        </class>
    </source>