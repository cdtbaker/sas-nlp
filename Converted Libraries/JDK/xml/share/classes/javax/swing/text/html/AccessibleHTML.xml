<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text.html">
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="java.beans"/>
        <import package="java.util"/>
        <import package="javax.swing"/>
        <import package="javax.swing.event"/>
        <import package="javax.swing.text"/>
        <import package="javax.accessibility"/>
        <import package="java.text.BreakIterator"/>
        <class name="AccessibleHTML" line="11">
            <implements interface="Accessible"/>
            <declaration name="editor" type="JEditorPane" line="12"/>
            <javadoc line="12">
                The editor.                
            </javadoc>
            <declaration name="model" type="Document" line="16"/>
            <javadoc line="16">
                Current model.                
            </javadoc>
            <declaration name="docListener" type="DocumentListener" line="20"/>
            <javadoc line="20">
                DocumentListener installed on the current model.                
            </javadoc>
            <declaration name="propChangeListener" type="PropertyChangeListener" line="24"/>
            <javadoc line="24">
                PropertyChangeListener installed on the editor                
            </javadoc>
            <declaration name="rootElementInfo" type="ElementInfo" line="28"/>
            <javadoc line="28">
                The root ElementInfo for the document                
            </javadoc>
            <declaration name="rootHTMLAccessibleContext" type="RootHTMLAccessibleContext" line="32"/>
            <method name="AccessibleHTML" type="constructor" line="33">
                <params>
                    <param name="pane" type="JEditorPane"/>
                </params>
            </method>
            <javadoc line="39">
                Sets the document.                
            </javadoc>
            <method name="setDocument" type="void" line="42">
                <params>
                    <param name="document" type="Document"/>
                </params>
                <scope line="43"/>
                <scope line="46"/>
                <scope line="50">
                    <scope line="51"/>
                </scope>
                <scope line="57"/>
                <scope line="60"/>
            </method>
            <javadoc line="64">
                Returns the Document currently presenting information for.                
            </javadoc>
            <method name="getDocument" type="Document" line="67"/>
            <javadoc line="70">
                Returns the JEditorPane providing information for.                
            </javadoc>
            <method name="getTextComponent" type="JEditorPane" line="73"/>
            <javadoc line="76">
                Returns the ElementInfo representing the root Element.                
            </javadoc>
            <method name="getRootInfo" type="ElementInfo" line="79"/>
            <javadoc line="82">
                Returns the root &lt;code&gt;View&lt;/code&gt; associated with the current text
                  component.                
            </javadoc>
            <method name="getRootView" type="View" line="86"/>
            <javadoc line="89">
                Returns the bounds the root View will be rendered in.                
            </javadoc>
            <method name="getRootEditorRect" type="Rectangle" line="92">
                <declaration name="alloc" type="Rectangle" line="93"/>
                <scope line="94">
                    <declaration name="insets" type="Insets" line="96"/>
                </scope>
            </method>
            <javadoc line="105">
                If possible acquires a lock on the Document.  If a lock has been
                  obtained a key will be retured that should be passed to
                  &lt;code&gt;unlock&lt;/code&gt;.                
            </javadoc>
            <method name="lock" type="Object" line="110">
                <declaration name="document" type="Document" line="111"/>
                <scope line="112"/>
            </method>
            <javadoc line="118">
                Releases a lock previously obtained via &lt;code&gt;lock&lt;/code&gt;.                
            </javadoc>
            <method name="unlock" type="void" line="121">
                <params>
                    <param name="key" type="Object"/>
                </params>
                <scope line="122"/>
            </method>
            <javadoc line="126">
                Rebuilds the information from the current info.                
            </javadoc>
            <method name="buildInfo" type="void" line="129">
                <declaration name="lock" type="Object" line="130"/>
                <scope line="131">
                    <declaration name="doc" type="Document" line="132"/>
                    <declaration name="root" type="Element" line="133"/>
                </scope>
                <scope line="137"/>
            </method>
            <method name="createElementInfo" type="ElementInfo" line="141">
                <params>
                    <param name="e" type="Element"/>
                    <param name="parent" type="ElementInfo"/>
                </params>
                <declaration name="attrs" type="AttributeSet" line="142"/>
                <scope line="143">
                    <declaration name="name" type="Object" line="144"/>
                    <scope line="145"/>
                    <scope line="148"/>
                    <scope line="151"/>
                </scope>
            </method>
            <javadoc line="157">
                Returns the root AccessibleContext for the document                
            </javadoc>
            <method name="getAccessibleContext" type="AccessibleContext" line="160">
                <scope line="161"/>
            </method>
            <class name="RootHTMLAccessibleContext" line="166">
                <extends class="HTMLAccessibleContext"/>
                <method name="RootHTMLAccessibleContext" type="constructor" line="167">
                    <params>
                        <param name="elementInfo" type="ElementInfo"/>
                    </params>
                </method>
                <javadoc line="170">
                    Gets the accessibleName property of this object.  The accessibleName
                      property of an object is a localized String that designates the purpose
                      of the object.  For example, the accessibleName property of a label
                      or button might be the text of the label or button itself.  In the
                      case of an object that doesn&apos;t display its name, the accessibleName
                      should still be set.  For example, in the case of a text field used
                      to enter the name of a city, the accessibleName for the en_US locale
                      could be &apos;city.&apos;                    
                    <return>
                        the localized name of the object; null if this
                          object does not have a name                        
                    </return>
                    <see>
                        #setAccessibleName                        
                    </see>
                </javadoc>
                <method name="getAccessibleName" type="String" line="183">
                    <scope line="184"/>
                    <scope line="187"/>
                </method>
                <javadoc line="191">
                    Gets the accessibleDescription property of this object.  If this
                      property isn&apos;t set, returns the content type of this
                      &lt;code&gt;JEditorPane&lt;/code&gt; instead (e.g. &quot;plain/text&quot;, &quot;html/text&quot;).                    
                    <return>
                        the localized description of the object; <code>null</code>
                          if this object does not have a description                        
                    </return>
                    <see>
                        #setAccessibleName                        
                    </see>
                </javadoc>
                <method name="getAccessibleDescription" type="String" line="199"/>
                <javadoc line="202">
                    Gets the role of this object.  The role of the object is the generic
                      purpose or use of the class of this object.  For example, the role
                      of a push button is AccessibleRole.PUSH_BUTTON.  The roles in
                      AccessibleRole are provided so component developers can pick from
                      a set of predefined roles.  This enables assistive technologies to
                      provide a consistent interface to various tweaked subclasses of
                      components (e.g., use AccessibleRole.PUSH_BUTTON for all components
                      that act like a push button) as well as distinguish between sublasses
                      that behave differently (e.g., AccessibleRole.CHECK_BOX for check boxes
                      and AccessibleRole.RADIO_BUTTON for radio buttons).
                      &lt;p&gt;Note that the AccessibleRole class is also extensible, so
                      custom component developers can define their own AccessibleRole&apos;s
                      if the set of predefined roles is inadequate.                    
                    <return>
                        an instance of AccessibleRole describing the role of the object                        
                    </return>
                    <see>
                        AccessibleRole                        
                    </see>
                </javadoc>
                <method name="getAccessibleRole" type="AccessibleRole" line="219"/>
            </class>
            <class name="HTMLAccessibleContext" line="223">
                <extends class="AccessibleContext"/>
                <implements interface="Accessible"/>
                <implements interface="AccessibleComponent"/>
                <declaration name="elementInfo" type="ElementInfo" line="224"/>
                <method name="HTMLAccessibleContext" type="constructor" line="225">
                    <params>
                        <param name="elementInfo" type="ElementInfo"/>
                    </params>
                </method>
                <method name="getAccessibleContext" type="AccessibleContext" line="228"/>
                <javadoc line="231">
                    Gets the state set of this object.                    
                    <return>
                        an instance of AccessibleStateSet describing the states
                          of the object                        
                    </return>
                    <see>
                        AccessibleStateSet                        
                    </see>
                </javadoc>
                <method name="getAccessibleStateSet" type="AccessibleStateSet" line="237">
                    <declaration name="states" type="AccessibleStateSet" line="238"/>
                    <declaration name="comp" type="Component" line="239"/>
                    <scope line="240"/>
                    <scope line="243"/>
                    <scope line="247"/>
                    <scope line="250"/>
                </method>
                <javadoc line="255">
                    Gets the 0-based index of this object in its accessible parent.                    
                    <return>
                        the 0-based index of this object in its parent; -1 if this
                          object does not have an accessible parent.                        
                    </return>
                    <see>
                        #getAccessibleParent                        
                    </see>
                    <see>
                        #getAccessibleChildrenCount                        
                    </see>
                    <see>
                        #getAccessibleChild                        
                    </see>
                </javadoc>
                <method name="getAccessibleIndexInParent" type="int" line="263"/>
                <javadoc line="266">
                    Returns the number of accessible children of the object.                    
                    <return>
                        the number of accessible children of the object.                        
                    </return>
                </javadoc>
                <method name="getAccessibleChildrenCount" type="int" line="270"/>
                <javadoc line="273">
                    Returns the specified Accessible child of the object.  The Accessible
                      children of an Accessible object are zero-based, so the first child
                      of an Accessible child is at index 0, the second child is at index 1,
                      and so on.                    
                    <param>
                        i zero-based index of child                        
                    </param>
                    <return>
                        the Accessible child of the object                        
                    </return>
                    <see>
                        #getAccessibleChildrenCount                        
                    </see>
                </javadoc>
                <method name="getAccessibleChild" type="Accessible" line="282">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                    <declaration name="childInfo" type="ElementInfo" line="283"/>
                    <scope line="284"/>
                    <scope line="287"/>
                </method>
                <javadoc line="291">
                    Gets the locale of the component. If the component does not have a
                      locale, then the locale of its parent is returned.                    
                    <return>
                        this component's locale.  If this component does not have
                          a locale, the locale of its parent is returned.                        
                    </return>
                    <exception>
                        IllegalComponentStateExceptionIf the Component does not have its own locale and has not yet been
                          added to a containment hierarchy such that the locale can be
                          determined from the containing parent.                        
                    </exception>
                </javadoc>
                <method name="getLocale" type="Locale" line="300"/>
                <method name="getAccessibleComponent" type="AccessibleComponent" line="303"/>
                <javadoc line="306">
                    Gets the background color of this object.                    
                    <return>
                        the background color, if supported, of the object;
                          otherwise, null                        
                    </return>
                    <see>
                        #setBackground                        
                    </see>
                </javadoc>
                <method name="getBackground" type="Color" line="312"/>
                <javadoc line="315">
                    Sets the background color of this object.                    
                    <param>
                        c the new Color for the background                        
                    </param>
                    <see>
                        #setBackground                        
                    </see>
                </javadoc>
                <method name="setBackground" type="void" line="320">
                    <params>
                        <param name="c" type="Color"/>
                    </params>
                </method>
                <javadoc line="323">
                    Gets the foreground color of this object.                    
                    <return>
                        the foreground color, if supported, of the object;
                          otherwise, null                        
                    </return>
                    <see>
                        #setForeground                        
                    </see>
                </javadoc>
                <method name="getForeground" type="Color" line="329"/>
                <javadoc line="332">
                    Sets the foreground color of this object.                    
                    <param>
                        c the new Color for the foreground                        
                    </param>
                    <see>
                        #getForeground                        
                    </see>
                </javadoc>
                <method name="setForeground" type="void" line="337">
                    <params>
                        <param name="c" type="Color"/>
                    </params>
                </method>
                <javadoc line="340">
                    Gets the Cursor of this object.                    
                    <return>
                        the Cursor, if supported, of the object; otherwise, null                        
                    </return>
                    <see>
                        #setCursor                        
                    </see>
                </javadoc>
                <method name="getCursor" type="Cursor" line="345"/>
                <javadoc line="348">
                    Sets the Cursor of this object.                    
                    <param>
                        cursor the new Cursor for the object                        
                    </param>
                    <see>
                        #getCursor                        
                    </see>
                </javadoc>
                <method name="setCursor" type="void" line="353">
                    <params>
                        <param name="cursor" type="Cursor"/>
                    </params>
                </method>
                <javadoc line="356">
                    Gets the Font of this object.                    
                    <return>
                        the Font,if supported, for the object; otherwise, null                        
                    </return>
                    <see>
                        #setFont                        
                    </see>
                </javadoc>
                <method name="getFont" type="Font" line="361"/>
                <javadoc line="364">
                    Sets the Font of this object.                    
                    <param>
                        f the new Font for the object                        
                    </param>
                    <see>
                        #getFont                        
                    </see>
                </javadoc>
                <method name="setFont" type="void" line="369">
                    <params>
                        <param name="f" type="Font"/>
                    </params>
                </method>
                <javadoc line="372">
                    Gets the FontMetrics of this object.                    
                    <param>
                        f the Font                        
                    </param>
                    <return>
                        the FontMetrics, if supported, the object; otherwise, null                        
                    </return>
                    <see>
                        #getFont                        
                    </see>
                </javadoc>
                <method name="getFontMetrics" type="FontMetrics" line="378">
                    <params>
                        <param name="f" type="Font"/>
                    </params>
                </method>
                <javadoc line="381">
                    Determines if the object is enabled.  Objects that are enabled
                      will also have the AccessibleState.ENABLED state set in their
                      AccessibleStateSets.                    
                    <return>
                        true if object is enabled; otherwise, false                        
                    </return>
                    <see>
                        #setEnabled                        
                    </see>
                    <see>
                        AccessibleContext#getAccessibleStateSet                        
                    </see>
                    <see>
                        AccessibleState#ENABLED                        
                    </see>
                    <see>
                        AccessibleStateSet                        
                    </see>
                </javadoc>
                <method name="isEnabled" type="boolean" line="391"/>
                <javadoc line="394">
                    Sets the enabled state of the object.                    
                    <param>
                        b if true, enables this object; otherwise, disables it                        
                    </param>
                    <see>
                        #isEnabled                        
                    </see>
                </javadoc>
                <method name="setEnabled" type="void" line="399">
                    <params>
                        <param name="b" type="boolean"/>
                    </params>
                </method>
                <javadoc line="402">
                    Determines if the object is visible.  Note: this means that the
                      object intends to be visible; however, it may not be
                      showing on the screen because one of the objects that this object
                      is contained by is currently not visible.  To determine if an object
                      is showing on the screen, use isShowing().
                      &lt;p&gt;Objects that are visible will also have the
                      AccessibleState.VISIBLE state set in their AccessibleStateSets.                    
                    <return>
                        true if object is visible; otherwise, false                        
                    </return>
                    <see>
                        #setVisible                        
                    </see>
                    <see>
                        AccessibleContext#getAccessibleStateSet                        
                    </see>
                    <see>
                        AccessibleState#VISIBLE                        
                    </see>
                    <see>
                        AccessibleStateSet                        
                    </see>
                </javadoc>
                <method name="isVisible" type="boolean" line="416"/>
                <javadoc line="419">
                    Sets the visible state of the object.                    
                    <param>
                        b if true, shows this object; otherwise, hides it                        
                    </param>
                    <see>
                        #isVisible                        
                    </see>
                </javadoc>
                <method name="setVisible" type="void" line="424">
                    <params>
                        <param name="b" type="boolean"/>
                    </params>
                </method>
                <javadoc line="427">
                    Determines if the object is showing.  This is determined by checking
                      the visibility of the object and its ancestors.
                      Note: this
                      will return true even if the object is obscured by another (for
                      example, it is underneath a menu that was pulled down).                    
                    <return>
                        true if object is showing; otherwise, false                        
                    </return>
                </javadoc>
                <method name="isShowing" type="boolean" line="435"/>
                <javadoc line="438">
                    Checks whether the specified point is within this object&apos;s bounds,
                      where the point&apos;s x and y coordinates are defined to be relative
                      to the coordinate system of the object.                    
                    <param>
                        p the Point relative to the coordinate system of the object                        
                    </param>
                    <return>
                        true if object contains Point; otherwise false                        
                    </return>
                    <see>
                        #getBounds                        
                    </see>
                </javadoc>
                <method name="contains" type="boolean" line="446">
                    <params>
                        <param name="p" type="Point"/>
                    </params>
                    <declaration name="r" type="Rectangle" line="447"/>
                    <scope line="448"/>
                    <scope line="451"/>
                </method>
                <javadoc line="455">
                    Returns the location of the object on the screen.                    
                    <return>
                        the location of the object on screen; null if this object
                          is not on the screen                        
                    </return>
                    <see>
                        #getBounds                        
                    </see>
                    <see>
                        #getLocation                        
                    </see>
                </javadoc>
                <method name="getLocationOnScreen" type="Point" line="462">
                    <declaration name="editorLocation" type="Point" line="463"/>
                    <declaration name="r" type="Rectangle" line="464"/>
                    <scope line="465"/>
                    <scope line="468"/>
                </method>
                <javadoc line="472">
                    Gets the location of the object relative to the parent in the form
                      of a point specifying the object&apos;s top-left corner in the screen&apos;s
                      coordinate space.                    
                    <return>
                        An instance of Point representing the top-left corner of the
                          object's bounds in the coordinate space of the screen; null if
                          this object or its parent are not on the screen                        
                    </return>
                    <see>
                        #getBounds                        
                    </see>
                    <see>
                        #getLocationOnScreen                        
                    </see>
                </javadoc>
                <method name="getLocation" type="Point" line="482">
                    <declaration name="r" type="Rectangle" line="483"/>
                    <scope line="484"/>
                    <scope line="487"/>
                </method>
                <javadoc line="491">
                    Sets the location of the object relative to the parent.                    
                    <param>
                        p the new position for the top-left corner                        
                    </param>
                    <see>
                        #getLocation                        
                    </see>
                </javadoc>
                <method name="setLocation" type="void" line="496">
                    <params>
                        <param name="p" type="Point"/>
                    </params>
                </method>
                <javadoc line="498">
                    Gets the bounds of this object in the form of a Rectangle object.
                      The bounds specify this object&apos;s width, height, and location
                      relative to its parent.                    
                    <return>
                        A rectangle indicating this component's bounds; null if
                          this object is not on the screen.                        
                    </return>
                    <see>
                        #contains                        
                    </see>
                </javadoc>
                <method name="getBounds" type="Rectangle" line="506"/>
                <javadoc line="509">
                    Sets the bounds of this object in the form of a Rectangle object.
                      The bounds specify this object&apos;s width, height, and location
                      relative to its parent.                    
                    <param>
                        r rectangle indicating this component's bounds                        
                    </param>
                    <see>
                        #getBounds                        
                    </see>
                </javadoc>
                <method name="setBounds" type="void" line="516">
                    <params>
                        <param name="r" type="Rectangle"/>
                    </params>
                </method>
                <javadoc line="518">
                    Returns the size of this object in the form of a Dimension object.
                      The height field of the Dimension object contains this object&apos;s
                      height, and the width field of the Dimension object contains this
                      object&apos;s width.                    
                    <return>
                        A Dimension object that indicates the size of this component;
                          null if this object is not on the screen                        
                    </return>
                    <see>
                        #setSize                        
                    </see>
                </javadoc>
                <method name="getSize" type="Dimension" line="527">
                    <declaration name="r" type="Rectangle" line="528"/>
                    <scope line="529"/>
                    <scope line="532"/>
                </method>
                <javadoc line="536">
                    Resizes this object so that it has width and height.                    
                    <param>
                        d The dimension specifying the new size of the object.                        
                    </param>
                    <see>
                        #getSize                        
                    </see>
                </javadoc>
                <method name="setSize" type="void" line="541">
                    <params>
                        <param name="d" type="Dimension"/>
                    </params>
                    <declaration name="comp" type="Component" line="542"/>
                </method>
                <javadoc line="545">
                    Returns the Accessible child, if one exists, contained at the local
                      coordinate Point.                    
                    <param>
                        p The point relative to the coordinate system of this object.                        
                    </param>
                    <return>
                        the Accessible, if it exists, at the specified location;
                          otherwise null                        
                    </return>
                </javadoc>
                <method name="getAccessibleAt" type="Accessible" line="552">
                    <params>
                        <param name="p" type="Point"/>
                    </params>
                    <declaration name="innerMostElement" type="ElementInfo" line="553"/>
                    <scope line="554"/>
                    <scope line="557"/>
                </method>
                <method name="getElementInfoAt" type="ElementInfo" line="561">
                    <params>
                        <param name="elementInfo" type="ElementInfo"/>
                        <param name="p" type="Point"/>
                    </params>
                    <scope line="562"/>
                    <scope line="565"/>
                    <scope line="568">
                        <scope line="569">
                            <declaration name="captionInfo" type="ElementInfo" line="570"/>
                            <scope line="571">
                                <declaration name="bounds" type="Rectangle" line="572"/>
                                <scope line="573"/>
                            </scope>
                        </scope>
                        <scope line="578">
                            <declaration name="childInfo" type="ElementInfo" line="579"/>
                            <declaration name="retValue" type="ElementInfo" line="580"/>
                            <scope line="581"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="588">
                    Returns whether this object can accept focus or not.   Objects that
                      can accept focus will also have the AccessibleState.FOCUSABLE state
                      set in their AccessibleStateSets.                    
                    <return>
                        true if object can accept focus; otherwise false                        
                    </return>
                    <see>
                        AccessibleContext#getAccessibleStateSet                        
                    </see>
                    <see>
                        AccessibleState#FOCUSABLE                        
                    </see>
                    <see>
                        AccessibleState#FOCUSED                        
                    </see>
                    <see>
                        AccessibleStateSet                        
                    </see>
                </javadoc>
                <method name="isFocusTraversable" type="boolean" line="598">
                    <declaration name="comp" type="Component" line="599"/>
                    <scope line="600">
                        <scope line="601"/>
                    </scope>
                </method>
                <javadoc line="607">
                    Requests focus for this object.  If this object cannot accept focus,
                      nothing will happen.  Otherwise, the object will attempt to take
                      focus.                    
                    <see>
                        #isFocusTraversable                        
                    </see>
                </javadoc>
                <method name="requestFocus" type="void" line="613">
                    <scope line="614"/>
                    <declaration name="comp" type="Component" line="617"/>
                    <scope line="618">
                        <scope line="620">
                            <scope line="621">
                                <declaration name="elem" type="Element" line="622"/>
                                <declaration name="ac" type="AccessibleContext" line="624"/>
                                <declaration name="pce" type="PropertyChangeEvent" line="625"/>
                            </scope>
                        </scope>
                        <scope line="629"/>
                    </scope>
                </method>
                <javadoc line="633">
                    Adds the specified focus listener to receive focus events from this
                      component.                    
                    <param>
                        l the focus listener                        
                    </param>
                    <see>
                        #removeFocusListener                        
                    </see>
                </javadoc>
                <method name="addFocusListener" type="void" line="639">
                    <params>
                        <param name="l" type="FocusListener"/>
                    </params>
                </method>
                <javadoc line="642">
                    Removes the specified focus listener so it no longer receives focus
                      events from this component.                    
                    <param>
                        l the focus listener                        
                    </param>
                    <see>
                        #addFocusListener                        
                    </see>
                </javadoc>
                <method name="removeFocusListener" type="void" line="648">
                    <params>
                        <param name="l" type="FocusListener"/>
                    </params>
                </method>
            </class>
            <class name="TextElementInfo" line="652">
                <extends class="ElementInfo"/>
                <implements interface="Accessible"/>
                <method name="TextElementInfo" type="constructor" line="653">
                    <params>
                        <param name="element" type="Element"/>
                        <param name="parent" type="ElementInfo"/>
                    </params>
                </method>
                <declaration name="accessibleContext" type="AccessibleContext" line="656"/>
                <method name="getAccessibleContext" type="AccessibleContext" line="657">
                    <scope line="658"/>
                </method>
                <class name="TextAccessibleContext" line="663">
                    <extends class="HTMLAccessibleContext"/>
                    <implements interface="AccessibleText"/>
                    <method name="TextAccessibleContext" type="constructor" line="664">
                        <params>
                            <param name="elementInfo" type="ElementInfo"/>
                        </params>
                    </method>
                    <method name="getAccessibleText" type="AccessibleText" line="667"/>
                    <javadoc line="670">
                        Gets the accessibleName property of this object.  The accessibleName
                          property of an object is a localized String that designates the purpose
                          of the object.  For example, the accessibleName property of a label
                          or button might be the text of the label or button itself.  In the
                          case of an object that doesn&apos;t display its name, the accessibleName
                          should still be set.  For example, in the case of a text field used
                          to enter the name of a city, the accessibleName for the en_US locale
                          could be &apos;city.&apos;                        
                        <return>
                            the localized name of the object; null if this
                              object does not have a name                            
                        </return>
                        <see>
                            #setAccessibleName                            
                        </see>
                    </javadoc>
                    <method name="getAccessibleName" type="String" line="683">
                        <scope line="684"/>
                        <scope line="687"/>
                    </method>
                    <javadoc line="691">
                        Gets the accessibleDescription property of this object.  If this
                          property isn&apos;t set, returns the content type of this
                          &lt;code&gt;JEditorPane&lt;/code&gt; instead (e.g. &quot;plain/text&quot;, &quot;html/text&quot;).                        
                        <return>
                            the localized description of the object; <code>null</code>
                              if this object does not have a description                            
                        </return>
                        <see>
                            #setAccessibleName                            
                        </see>
                    </javadoc>
                    <method name="getAccessibleDescription" type="String" line="699"/>
                    <javadoc line="702">
                        Gets the role of this object.  The role of the object is the generic
                          purpose or use of the class of this object.  For example, the role
                          of a push button is AccessibleRole.PUSH_BUTTON.  The roles in
                          AccessibleRole are provided so component developers can pick from
                          a set of predefined roles.  This enables assistive technologies to
                          provide a consistent interface to various tweaked subclasses of
                          components (e.g., use AccessibleRole.PUSH_BUTTON for all components
                          that act like a push button) as well as distinguish between sublasses
                          that behave differently (e.g., AccessibleRole.CHECK_BOX for check boxes
                          and AccessibleRole.RADIO_BUTTON for radio buttons).
                          &lt;p&gt;Note that the AccessibleRole class is also extensible, so
                          custom component developers can define their own AccessibleRole&apos;s
                          if the set of predefined roles is inadequate.                        
                        <return>
                            an instance of AccessibleRole describing the role of the object                            
                        </return>
                        <see>
                            AccessibleRole                            
                        </see>
                    </javadoc>
                    <method name="getAccessibleRole" type="AccessibleRole" line="719"/>
                    <javadoc line="722">
                        Given a point in local coordinates, return the zero-based index
                          of the character under that Point.  If the point is invalid,
                          this method returns -1.                        
                        <param>
                            p the Point in local coordinates                            
                        </param>
                        <return>
                            the zero-based index of the character under Point p; if
                              Point is invalid returns -1.                            
                        </return>
                    </javadoc>
                    <method name="getIndexAtPoint" type="int" line="730">
                        <params>
                            <param name="p" type="Point"/>
                        </params>
                        <declaration name="v" type="View" line="731"/>
                        <scope line="732"/>
                        <scope line="735"/>
                    </method>
                    <javadoc line="739">
                        Determine the bounding box of the character at the given
                          index into the string.  The bounds are returned in local
                          coordinates.  If the index is invalid an empty rectangle is
                          returned.                        
                        <param>
                            i the index into the String                            
                        </param>
                        <return>
                            the screen coordinates of the character's the bounding box,
                              if index is invalid returns an empty rectangle.                            
                        </return>
                    </javadoc>
                    <method name="getCharacterBounds" type="Rectangle" line="748">
                        <params>
                            <param name="i" type="int"/>
                        </params>
                        <scope line="749"/>
                        <scope line="752"/>
                    </method>
                    <javadoc line="756">
                        Return the number of characters (valid indicies)                        
                        <return>
                            the number of characters                            
                        </return>
                    </javadoc>
                    <method name="getCharCount" type="int" line="760">
                        <scope line="761">
                            <declaration name="elem" type="Element" line="762"/>
                        </scope>
                    </method>
                    <javadoc line="767">
                        Return the zero-based offset of the caret.
                          Note: That to the right of the caret will have the same index
                          value as the offset (the caret is between two characters).                        
                        <return>
                            the zero-based offset of the caret.                            
                        </return>
                    </javadoc>
                    <method name="getCaretPosition" type="int" line="773">
                        <declaration name="v" type="View" line="774"/>
                        <scope line="775"/>
                        <declaration name="c" type="Container" line="778"/>
                        <scope line="779"/>
                        <scope line="782"/>
                        <scope line="785"/>
                    </method>
                    <class name="IndexedSegment" line="789">
                        <extends class="Segment"/>
                        <javadoc line="789">
                            IndexedSegment extends Segment adding the offset into the
                              the model the &lt;code&gt;Segment&lt;/code&gt; was asked for.                            
                        </javadoc>
                        <declaration name="modelOffset" type="int" line="794"/>
                        <javadoc line="794">
                            Offset into the model that the position represents.                            
                        </javadoc>
                    </class>
                    <method name="getAtIndex" type="String" line="799">
                        <params>
                            <param name="part" type="int"/>
                            <param name="index" type="int"/>
                        </params>
                    </method>
                    <method name="getAfterIndex" type="String" line="802">
                        <params>
                            <param name="part" type="int"/>
                            <param name="index" type="int"/>
                        </params>
                    </method>
                    <method name="getBeforeIndex" type="String" line="805">
                        <params>
                            <param name="part" type="int"/>
                            <param name="index" type="int"/>
                        </params>
                    </method>
                    <javadoc line="808">
                        Gets the word, sentence, or character at &lt;code&gt;index&lt;/code&gt;.
                          If &lt;code&gt;direction&lt;/code&gt; is non-null this will find the
                          next/previous word/sentence/character.                        
                    </javadoc>
                    <method name="getAtIndex" type="String" line="813">
                        <params>
                            <param name="part" type="int"/>
                            <param name="index" type="int"/>
                            <param name="direction" type="int"/>
                        </params>
                        <scope line="814"/>
                        <scope line="817">
                            <scope line="818"/>
                            <scope line="823"/>
                            <declaration name="seg" type="IndexedSegment" line="829"/>
                            <scope line="830">
                                <scope line="831">
                                    <declaration name="next" type="int" line="832"/>
                                    <scope line="833"/>
                                    <scope line="836"/>
                                    <scope line="839"/>
                                    <scope line="842"/>
                                </scope>
                                <scope line="846"/>
                            </scope>
                        </scope>
                        <scope line="855"/>
                        <scope line="857">
                            <scope line="858"/>
                        </scope>
                    </method>
                    <method name="getParagraphElement" type="Element" line="864">
                        <params>
                            <param name="index" type="int"/>
                        </params>
                        <scope line="865">
                            <declaration name="sdoc" type="PlainDocument" line="866"/>
                        </scope>
                        <scope line="869">
                            <declaration name="sdoc" type="StyledDocument" line="870"/>
                        </scope>
                        <scope line="873">
                            <declaration name="para" type="Element" line="874"/>
                            <scope line="875">
                                <declaration name="pos" type="int" line="876"/>
                            </scope>
                            <scope line="879"/>
                        </scope>
                    </method>
                    <method name="getParagraphElementText" type="IndexedSegment" line="885">
                        <params>
                            <param name="index" type="int"/>
                        </params>
                        <declaration name="para" type="Element" line="886"/>
                        <scope line="887">
                            <declaration name="segment" type="IndexedSegment" line="888"/>
                            <scope line="889">
                                <declaration name="length" type="int" line="890"/>
                            </scope>
                            <scope line="893"/>
                        </scope>
                    </method>
                    <javadoc line="901">
                        Returns the Segment at &lt;code&gt;index&lt;/code&gt; representing either
                          the paragraph or sentence as identified by &lt;code&gt;part&lt;/code&gt;, or
                          null if a valid paragraph/sentence can&apos;t be found. The offset
                          will point to the start of the word/sentence in the array, and
                          the modelOffset will point to the location of the word/sentence
                          in the model.                        
                    </javadoc>
                    <method name="getSegmentAt" type="IndexedSegment" line="909">
                        <params>
                            <param name="part" type="int"/>
                            <param name="index" type="int"/>
                        </params>
                        <declaration name="seg" type="IndexedSegment" line="910"/>
                        <scope line="911"/>
                        <declaration name="iterator" type="BreakIterator" line="914"/>
                        <declaration name="end" type="int" line="927"/>
                        <scope line="928"/>
                        <scope line="931"/>
                        <declaration name="begin" type="int" line="934"/>
                        <scope line="935"/>
                    </method>
                    <javadoc line="943">
                        Return the AttributeSet for a given character at a given index                        
                        <param>
                            i the zero-based index into the text                            
                        </param>
                        <return>
                            the AttributeSet of the character                            
                        </return>
                    </javadoc>
                    <method name="getCharacterAttribute" type="AttributeSet" line="948">
                        <params>
                            <param name="i" type="int"/>
                        </params>
                        <scope line="949">
                            <declaration name="doc" type="StyledDocument" line="950"/>
                            <declaration name="elem" type="Element" line="951"/>
                            <scope line="952"/>
                        </scope>
                    </method>
                    <javadoc line="958">
                        Returns the start offset within the selected text.
                          If there is no selection, but there is
                          a caret, the start and end offsets will be the same.                        
                        <return>
                            the index into the text of the start of the selection                            
                        </return>
                    </javadoc>
                    <method name="getSelectionStart" type="int" line="964"/>
                    <javadoc line="967">
                        Returns the end offset within the selected text.
                          If there is no selection, but there is
                          a caret, the start and end offsets will be the same.                        
                        <return>
                            the index into teh text of the end of the selection                            
                        </return>
                    </javadoc>
                    <method name="getSelectionEnd" type="int" line="973"/>
                    <javadoc line="976">
                        Returns the portion of the text that is selected.                        
                        <return>
                            the String portion of the text that is selected                            
                        </return>
                    </javadoc>
                    <method name="getSelectedText" type="String" line="980"/>
                    <method name="getText" type="String" line="983">
                        <params>
                            <param name="offset" type="int"/>
                            <param name="length" type="int"/>
                        </params>
                        <scope line="984">
                            <declaration name="doc" type="StyledDocument" line="985"/>
                        </scope>
                        <scope line="988"/>
                    </method>
                </class>
            </class>
            <class name="IconElementInfo" line="994">
                <extends class="ElementInfo"/>
                <implements interface="Accessible"/>
                <declaration name="width" type="int" line="995"/>
                <declaration name="height" type="int" line="996"/>
                <method name="IconElementInfo" type="constructor" line="997">
                    <params>
                        <param name="element" type="Element"/>
                        <param name="parent" type="ElementInfo"/>
                    </params>
                </method>
                <method name="invalidate" type="void" line="1000">
                    <params>
                        <param name="first" type="boolean"/>
                    </params>
                </method>
                <method name="getImageSize" type="int" line="1004">
                    <params>
                        <param name="key" type="Object"/>
                    </params>
                    <scope line="1005">
                        <declaration name="size" type="int" line="1006"/>
                        <scope line="1007">
                            <declaration name="v" type="View" line="1008"/>
                            <scope line="1010">
                                <declaration name="img" type="Image" line="1011"/>
                                <scope line="1012">
                                    <scope line="1013"/>
                                    <scope line="1016"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </method>
                <declaration name="accessibleContext" type="AccessibleContext" line="1026"/>
                <method name="getAccessibleContext" type="AccessibleContext" line="1027">
                    <scope line="1028"/>
                </method>
                <class name="IconAccessibleContext" line="1033">
                    <extends class="HTMLAccessibleContext"/>
                    <implements interface="AccessibleIcon"/>
                    <method name="IconAccessibleContext" type="constructor" line="1034">
                        <params>
                            <param name="elementInfo" type="ElementInfo"/>
                        </params>
                    </method>
                    <javadoc line="1037">
                        Gets the accessibleName property of this object.  The accessibleName
                          property of an object is a localized String that designates the purpose
                          of the object.  For example, the accessibleName property of a label
                          or button might be the text of the label or button itself.  In the
                          case of an object that doesn&apos;t display its name, the accessibleName
                          should still be set.  For example, in the case of a text field used
                          to enter the name of a city, the accessibleName for the en_US locale
                          could be &apos;city.&apos;                        
                        <return>
                            the localized name of the object; null if this
                              object does not have a name                            
                        </return>
                        <see>
                            #setAccessibleName                            
                        </see>
                    </javadoc>
                    <method name="getAccessibleName" type="String" line="1050"/>
                    <javadoc line="1053">
                        Gets the accessibleDescription property of this object.  If this
                          property isn&apos;t set, returns the content type of this
                          &lt;code&gt;JEditorPane&lt;/code&gt; instead (e.g. &quot;plain/text&quot;, &quot;html/text&quot;).                        
                        <return>
                            the localized description of the object; <code>null</code>
                              if this object does not have a description                            
                        </return>
                        <see>
                            #setAccessibleName                            
                        </see>
                    </javadoc>
                    <method name="getAccessibleDescription" type="String" line="1061"/>
                    <javadoc line="1064">
                        Gets the role of this object.  The role of the object is the generic
                          purpose or use of the class of this object.  For example, the role
                          of a push button is AccessibleRole.PUSH_BUTTON.  The roles in
                          AccessibleRole are provided so component developers can pick from
                          a set of predefined roles.  This enables assistive technologies to
                          provide a consistent interface to various tweaked subclasses of
                          components (e.g., use AccessibleRole.PUSH_BUTTON for all components
                          that act like a push button) as well as distinguish between sublasses
                          that behave differently (e.g., AccessibleRole.CHECK_BOX for check boxes
                          and AccessibleRole.RADIO_BUTTON for radio buttons).
                          &lt;p&gt;Note that the AccessibleRole class is also extensible, so
                          custom component developers can define their own AccessibleRole&apos;s
                          if the set of predefined roles is inadequate.                        
                        <return>
                            an instance of AccessibleRole describing the role of the object                            
                        </return>
                        <see>
                            AccessibleRole                            
                        </see>
                    </javadoc>
                    <method name="getAccessibleRole" type="AccessibleRole" line="1081"/>
                    <method name="getAccessibleIcon" type="AccessibleIcon[]" line="1084">
                        <declaration name="icons" type="AccessibleIcon[]" line="1085"/>
                    </method>
                    <javadoc line="1089">
                        Gets the description of the icon.  This is meant to be a brief
                          textual description of the object.  For example, it might be
                          presented to a blind user to give an indication of the purpose
                          of the icon.                        
                        <return>
                            the description of the icon                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleIconDescription" type="String" line="1096"/>
                    <javadoc line="1099">
                        Sets the description of the icon.  This is meant to be a brief
                          textual description of the object.  For example, it might be
                          presented to a blind user to give an indication of the purpose
                          of the icon.                        
                        <param>
                            description the description of the icon                            
                        </param>
                    </javadoc>
                    <method name="setAccessibleIconDescription" type="void" line="1106">
                        <params>
                            <param name="description" type="String"/>
                        </params>
                    </method>
                    <javadoc line="1108">
                        Gets the width of the icon                        
                        <return>
                            the width of the icon.                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleIconWidth" type="int" line="1112">
                        <scope line="1113"/>
                    </method>
                    <javadoc line="1118">
                        Gets the height of the icon                        
                        <return>
                            the height of the icon.                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleIconHeight" type="int" line="1122">
                        <scope line="1123"/>
                    </method>
                </class>
            </class>
            <class name="TableElementInfo" line="1130">
                <extends class="ElementInfo"/>
                <implements interface="Accessible"/>
                <javadoc line="1130">
                    TableElementInfo encapsulates information about a HTML.Tag.TABLE.
                      To make access fast it crates a grid containing the children to
                      allow for access by row, column. TableElementInfo will contain
                      TableRowElementInfos, which will contain TableCellElementInfos.
                      Any time one of the rows or columns becomes invalid the table is
                      invalidated.  This is because any time one of the child attributes
                      changes the size of the grid may have changed.                    
                </javadoc>
                <declaration name="caption" type="ElementInfo" line="1140"/>
                <declaration name="grid" type="TableCellElementInfo[][]" line="1141"/>
                <javadoc line="1141">
                    Allocation of the table by row x column. There may be holes (eg
                      nulls) depending upon the html, any cell that has a rowspan/colspan
                      &gt; 1 will be contained multiple times in the grid.                    
                </javadoc>
                <method name="TableElementInfo" type="constructor" line="1147">
                    <params>
                        <param name="e" type="Element"/>
                        <param name="parent" type="ElementInfo"/>
                    </params>
                </method>
                <method name="getCaptionInfo" type="ElementInfo" line="1150"/>
                <javadoc line="1153">
                    Overriden to update the grid when validating.                    
                </javadoc>
                <method name="validate" type="void" line="1156"/>
                <javadoc line="1160">
                    Overriden to only alloc instances of TableRowElementInfos.                    
                </javadoc>
                <method name="loadChildren" type="void" line="1163">
                    <params>
                        <param name="e" type="Element"/>
                    </params>
                    <scope line="1164">
                        <declaration name="child" type="Element" line="1165"/>
                        <declaration name="attrs" type="AttributeSet" line="1166"/>
                        <scope line="1167"/>
                        <scope line="1170"/>
                    </scope>
                </method>
                <javadoc line="1175">
                    Updates the grid.                    
                </javadoc>
                <method name="updateGrid" type="void" line="1178">
                    <declaration name="delta" type="int" line="1179"/>
                    <declaration name="maxCols" type="int" line="1180"/>
                    <declaration name="rows" type="int" line="1181"/>
                    <scope line="1182">
                        <declaration name="row" type="TableRowElementInfo" line="1183"/>
                        <declaration name="prev" type="int" line="1184"/>
                        <scope line="1185"/>
                    </scope>
                    <scope line="1194"/>
                    <scope line="1197"/>
                </method>
                <javadoc line="1201">
                    Returns the TableCellElementInfo at the specified index.                    
                </javadoc>
                <method name="getRow" type="TableRowElementInfo" line="1204">
                    <params>
                        <param name="index" type="int"/>
                    </params>
                </method>
                <javadoc line="1207">
                    Returns the TableCellElementInfo by row and column.                    
                </javadoc>
                <method name="getCell" type="TableCellElementInfo" line="1210">
                    <params>
                        <param name="r" type="int"/>
                        <param name="c" type="int"/>
                    </params>
                    <scope line="1211"/>
                </method>
                <javadoc line="1216">
                    Returns the rowspan of the specified entry.                    
                </javadoc>
                <method name="getRowExtentAt" type="int" line="1219">
                    <params>
                        <param name="r" type="int"/>
                        <param name="c" type="int"/>
                    </params>
                    <declaration name="cell" type="TableCellElementInfo" line="1220"/>
                    <scope line="1221">
                        <declaration name="rows" type="int" line="1222"/>
                        <declaration name="delta" type="int" line="1223"/>
                        <scope line="1224"/>
                    </scope>
                </method>
                <javadoc line="1231">
                    Returns the colspan of the specified entry.                    
                </javadoc>
                <method name="getColumnExtentAt" type="int" line="1234">
                    <params>
                        <param name="r" type="int"/>
                        <param name="c" type="int"/>
                    </params>
                    <declaration name="cell" type="TableCellElementInfo" line="1235"/>
                    <scope line="1236">
                        <declaration name="cols" type="int" line="1237"/>
                        <declaration name="delta" type="int" line="1238"/>
                        <scope line="1239"/>
                    </scope>
                </method>
                <javadoc line="1246">
                    Returns the number of rows in the table.                    
                </javadoc>
                <method name="getRowCount" type="int" line="1249">
                    <scope line="1250"/>
                </method>
                <javadoc line="1255">
                    Returns the number of columns in the table.                    
                </javadoc>
                <method name="getColumnCount" type="int" line="1258">
                    <scope line="1259"/>
                </method>
                <declaration name="accessibleContext" type="AccessibleContext" line="1264"/>
                <method name="getAccessibleContext" type="AccessibleContext" line="1265">
                    <scope line="1266"/>
                </method>
                <class name="TableAccessibleContext" line="1271">
                    <extends class="HTMLAccessibleContext"/>
                    <implements interface="AccessibleTable"/>
                    <declaration name="rowHeadersTable" type="AccessibleHeadersTable" line="1272"/>
                    <method name="TableAccessibleContext" type="constructor" line="1273">
                        <params>
                            <param name="elementInfo" type="ElementInfo"/>
                        </params>
                    </method>
                    <javadoc line="1276">
                        Gets the accessibleName property of this object.  The accessibleName
                          property of an object is a localized String that designates the purpose
                          of the object.  For example, the accessibleName property of a label
                          or button might be the text of the label or button itself.  In the
                          case of an object that doesn&apos;t display its name, the accessibleName
                          should still be set.  For example, in the case of a text field used
                          to enter the name of a city, the accessibleName for the en_US locale
                          could be &apos;city.&apos;                        
                        <return>
                            the localized name of the object; null if this
                              object does not have a name                            
                        </return>
                        <see>
                            #setAccessibleName                            
                        </see>
                    </javadoc>
                    <method name="getAccessibleName" type="String" line="1289"/>
                    <javadoc line="1292">
                        Gets the accessibleDescription property of this object.  If this
                          property isn&apos;t set, returns the content type of this
                          &lt;code&gt;JEditorPane&lt;/code&gt; instead (e.g. &quot;plain/text&quot;, &quot;html/text&quot;).                        
                        <return>
                            the localized description of the object; <code>null</code>
                              if this object does not have a description                            
                        </return>
                        <see>
                            #setAccessibleName                            
                        </see>
                    </javadoc>
                    <method name="getAccessibleDescription" type="String" line="1300"/>
                    <javadoc line="1303">
                        Gets the role of this object.  The role of the object is the generic
                          purpose or use of the class of this object.  For example, the role
                          of a push button is AccessibleRole.PUSH_BUTTON.  The roles in
                          AccessibleRole are provided so component developers can pick from
                          a set of predefined roles.  This enables assistive technologies to
                          provide a consistent interface to various tweaked subclasses of
                          components (e.g., use AccessibleRole.PUSH_BUTTON for all components
                          that act like a push button) as well as distinguish between sublasses
                          that behave differently (e.g., AccessibleRole.CHECK_BOX for check boxes
                          and AccessibleRole.RADIO_BUTTON for radio buttons).
                          &lt;p&gt;Note that the AccessibleRole class is also extensible, so
                          custom component developers can define their own AccessibleRole&apos;s
                          if the set of predefined roles is inadequate.                        
                        <return>
                            an instance of AccessibleRole describing the role of the object                            
                        </return>
                        <see>
                            AccessibleRole                            
                        </see>
                    </javadoc>
                    <method name="getAccessibleRole" type="AccessibleRole" line="1320"/>
                    <javadoc line="1323">
                        Gets the 0-based index of this object in its accessible parent.                        
                        <return>
                            the 0-based index of this object in its parent; -1 if this
                              object does not have an accessible parent.                            
                        </return>
                        <see>
                            #getAccessibleParent                            
                        </see>
                        <see>
                            #getAccessibleChildrenCount                            
                        </see>
                        <gsee>
                            #getAccessibleChild                            
                        </gsee>
                    </javadoc>
                    <method name="getAccessibleIndexInParent" type="int" line="1331"/>
                    <javadoc line="1334">
                        Returns the number of accessible children of the object.                        
                        <return>
                            the number of accessible children of the object.                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleChildrenCount" type="int" line="1338"/>
                    <javadoc line="1341">
                        Returns the specified Accessible child of the object.  The Accessible
                          children of an Accessible object are zero-based, so the first child
                          of an Accessible child is at index 0, the second child is at index 1,
                          and so on.                        
                        <param>
                            i zero-based index of child                            
                        </param>
                        <return>
                            the Accessible child of the object                            
                        </return>
                        <see>
                            #getAccessibleChildrenCount                            
                        </see>
                    </javadoc>
                    <method name="getAccessibleChild" type="Accessible" line="1350">
                        <params>
                            <param name="i" type="int"/>
                        </params>
                        <declaration name="rowCount" type="int" line="1351"/>
                        <declaration name="columnCount" type="int" line="1352"/>
                        <declaration name="r" type="int" line="1353"/>
                        <declaration name="c" type="int" line="1354"/>
                        <scope line="1355"/>
                        <scope line="1358"/>
                    </method>
                    <method name="getAccessibleTable" type="AccessibleTable" line="1362"/>
                    <javadoc line="1365">
                        Returns the caption for the table.                        
                        <return>
                            the caption for the table                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleCaption" type="Accessible" line="1369">
                        <declaration name="captionInfo" type="ElementInfo" line="1370"/>
                        <scope line="1371"/>
                        <scope line="1374"/>
                    </method>
                    <javadoc line="1378">
                        Sets the caption for the table.                        
                        <param>
                            a the caption for the table                            
                        </param>
                    </javadoc>
                    <method name="setAccessibleCaption" type="void" line="1382">
                        <params>
                            <param name="a" type="Accessible"/>
                        </params>
                    </method>
                    <javadoc line="1384">
                        Returns the summary description of the table.                        
                        <return>
                            the summary description of the table                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleSummary" type="Accessible" line="1388"/>
                    <javadoc line="1391">
                        Sets the summary description of the table                        
                        <param>
                            a the summary description of the table                            
                        </param>
                    </javadoc>
                    <method name="setAccessibleSummary" type="void" line="1395">
                        <params>
                            <param name="a" type="Accessible"/>
                        </params>
                    </method>
                    <javadoc line="1397">
                        Returns the number of rows in the table.                        
                        <return>
                            the number of rows in the table                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleRowCount" type="int" line="1401"/>
                    <javadoc line="1404">
                        Returns the number of columns in the table.                        
                        <return>
                            the number of columns in the table                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleColumnCount" type="int" line="1408"/>
                    <javadoc line="1411">
                        Returns the Accessible at a specified row and column
                          in the table.                        
                        <param>
                            r zero-based row of the table                            
                        </param>
                        <param>
                            c zero-based column of the table                            
                        </param>
                        <return>
                            the Accessible at the specified row and column                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleAt" type="Accessible" line="1418">
                        <params>
                            <param name="r" type="int"/>
                            <param name="c" type="int"/>
                        </params>
                        <declaration name="cellInfo" type="TableCellElementInfo" line="1419"/>
                        <scope line="1420"/>
                        <scope line="1423"/>
                    </method>
                    <javadoc line="1427">
                        Returns the number of rows occupied by the Accessible at
                          a specified row and column in the table.                        
                        <return>
                            the number of rows occupied by the Accessible at a
                              given specified (row, column)                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleRowExtentAt" type="int" line="1433">
                        <params>
                            <param name="r" type="int"/>
                            <param name="c" type="int"/>
                        </params>
                    </method>
                    <javadoc line="1436">
                        Returns the number of columns occupied by the Accessible at
                          a specified row and column in the table.                        
                        <return>
                            the number of columns occupied by the Accessible at a
                              given specified row and column                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleColumnExtentAt" type="int" line="1442">
                        <params>
                            <param name="r" type="int"/>
                            <param name="c" type="int"/>
                        </params>
                    </method>
                    <javadoc line="1445">
                        Returns the row headers as an AccessibleTable.                        
                        <return>
                            an AccessibleTable representing the row
                              headers                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleRowHeader" type="AccessibleTable" line="1450"/>
                    <javadoc line="1453">
                        Sets the row headers.                        
                        <param>
                            table an AccessibleTable representing the
                              row headers                            
                        </param>
                    </javadoc>
                    <method name="setAccessibleRowHeader" type="void" line="1458">
                        <params>
                            <param name="table" type="AccessibleTable"/>
                        </params>
                    </method>
                    <javadoc line="1460">
                        Returns the column headers as an AccessibleTable.                        
                        <return>
                            an AccessibleTable representing the column
                              headers                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleColumnHeader" type="AccessibleTable" line="1465"/>
                    <javadoc line="1468">
                        Sets the column headers.                        
                        <param>
                            table an AccessibleTable representing the
                              column headers                            
                        </param>
                    </javadoc>
                    <method name="setAccessibleColumnHeader" type="void" line="1473">
                        <params>
                            <param name="table" type="AccessibleTable"/>
                        </params>
                    </method>
                    <javadoc line="1475">
                        Returns the description of the specified row in the table.                        
                        <param>
                            r zero-based row of the table                            
                        </param>
                        <return>
                            the description of the row                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleRowDescription" type="Accessible" line="1480">
                        <params>
                            <param name="r" type="int"/>
                        </params>
                    </method>
                    <javadoc line="1483">
                        Sets the description text of the specified row of the table.                        
                        <param>
                            r zero-based row of the table                            
                        </param>
                        <param>
                            a the description of the row                            
                        </param>
                    </javadoc>
                    <method name="setAccessibleRowDescription" type="void" line="1488">
                        <params>
                            <param name="r" type="int"/>
                            <param name="a" type="Accessible"/>
                        </params>
                    </method>
                    <javadoc line="1490">
                        Returns the description text of the specified column in the table.                        
                        <param>
                            c zero-based column of the table                            
                        </param>
                        <return>
                            the text description of the column                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleColumnDescription" type="Accessible" line="1495">
                        <params>
                            <param name="c" type="int"/>
                        </params>
                    </method>
                    <javadoc line="1498">
                        Sets the description text of the specified column in the table.                        
                        <param>
                            c zero-based column of the table                            
                        </param>
                        <param>
                            a the text description of the column                            
                        </param>
                    </javadoc>
                    <method name="setAccessibleColumnDescription" type="void" line="1503">
                        <params>
                            <param name="c" type="int"/>
                            <param name="a" type="Accessible"/>
                        </params>
                    </method>
                    <javadoc line="1505">
                        Returns a boolean value indicating whether the accessible at
                          a specified row and column is selected.                        
                        <param>
                            r zero-based row of the table                            
                        </param>
                        <param>
                            c zero-based column of the table                            
                        </param>
                        <return>
                            the boolean value true if the accessible at the
                              row and column is selected. Otherwise, the boolean value
                              false                            
                        </return>
                    </javadoc>
                    <method name="isAccessibleSelected" type="boolean" line="1514">
                        <params>
                            <param name="r" type="int"/>
                            <param name="c" type="int"/>
                        </params>
                        <scope line="1515">
                            <scope line="1516"/>
                            <declaration name="cell" type="TableCellElementInfo" line="1519"/>
                            <scope line="1520">
                                <declaration name="elem" type="Element" line="1521"/>
                                <declaration name="start" type="int" line="1522"/>
                                <declaration name="end" type="int" line="1523"/>
                            </scope>
                        </scope>
                    </method>
                    <javadoc line="1529">
                        Returns a boolean value indicating whether the specified row
                          is selected.                        
                        <param>
                            r zero-based row of the table                            
                        </param>
                        <return>
                            the boolean value true if the specified row is selected.
                              Otherwise, false.                            
                        </return>
                    </javadoc>
                    <method name="isAccessibleRowSelected" type="boolean" line="1536">
                        <params>
                            <param name="r" type="int"/>
                        </params>
                        <scope line="1537">
                            <scope line="1538"/>
                            <declaration name="nColumns" type="int" line="1541"/>
                            <declaration name="startCell" type="TableCellElementInfo" line="1542"/>
                            <scope line="1543"/>
                            <declaration name="start" type="int" line="1546"/>
                            <declaration name="endCell" type="TableCellElementInfo" line="1547"/>
                            <scope line="1548"/>
                            <declaration name="end" type="int" line="1551"/>
                        </scope>
                    </method>
                    <javadoc line="1556">
                        Returns a boolean value indicating whether the specified column
                          is selected.                        
                        <param>
                            c zero-based column of the table                            
                        </param>
                        <return>
                            the boolean value true if the specified column is selected.
                              Otherwise, false.                            
                        </return>
                    </javadoc>
                    <method name="isAccessibleColumnSelected" type="boolean" line="1563">
                        <params>
                            <param name="c" type="int"/>
                        </params>
                        <scope line="1564">
                            <scope line="1565"/>
                            <declaration name="nRows" type="int" line="1568"/>
                            <declaration name="startCell" type="TableCellElementInfo" line="1569"/>
                            <scope line="1570"/>
                            <declaration name="start" type="int" line="1573"/>
                            <declaration name="endCell" type="TableCellElementInfo" line="1574"/>
                            <scope line="1575"/>
                            <declaration name="end" type="int" line="1578"/>
                        </scope>
                    </method>
                    <javadoc line="1583">
                        Returns the selected rows in a table.                        
                        <return>
                            an array of selected rows where each element is a
                              zero-based row of the table                            
                        </return>
                    </javadoc>
                    <method name="getSelectedAccessibleRows" type="int[]" line="1588">
                        <scope line="1589">
                            <declaration name="nRows" type="int" line="1590"/>
                            <declaration name="vec" type="Vector&lt;Integer&gt;" line="1591"/>
                            <scope line="1592">
                                <scope line="1593"/>
                            </scope>
                            <declaration name="retval" type="int" line="1597"/>
                            <scope line="1598"/>
                        </scope>
                    </method>
                    <javadoc line="1605">
                        Returns the selected columns in a table.                        
                        <return>
                            an array of selected columns where each element is a
                              zero-based column of the table                            
                        </return>
                    </javadoc>
                    <method name="getSelectedAccessibleColumns" type="int[]" line="1610">
                        <scope line="1611">
                            <declaration name="nColumns" type="int" line="1612"/>
                            <declaration name="vec" type="Vector&lt;Integer&gt;" line="1613"/>
                            <scope line="1614">
                                <scope line="1615"/>
                            </scope>
                            <declaration name="retval" type="int" line="1619"/>
                            <scope line="1620"/>
                        </scope>
                    </method>
                    <javadoc line="1627">
                        Returns the row number of an index in the table.                        
                        <param>
                            index the zero-based index in the table                            
                        </param>
                        <return>
                            the zero-based row of the table if one exists;
                              otherwise -1.                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleRow" type="int" line="1633">
                        <params>
                            <param name="index" type="int"/>
                        </params>
                        <scope line="1634">
                            <declaration name="numCells" type="int" line="1635"/>
                            <scope line="1636"/>
                            <scope line="1639"/>
                        </scope>
                    </method>
                    <javadoc line="1645">
                        Returns the column number of an index in the table.                        
                        <param>
                            index the zero-based index in the table                            
                        </param>
                        <return>
                            the zero-based column of the table if one exists;
                              otherwise -1.                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleColumn" type="int" line="1651">
                        <params>
                            <param name="index" type="int"/>
                        </params>
                        <scope line="1652">
                            <declaration name="numCells" type="int" line="1653"/>
                            <scope line="1654"/>
                            <scope line="1657"/>
                        </scope>
                    </method>
                    <javadoc line="1663">
                        Returns the index at a row and column in the table.                        
                        <param>
                            r zero-based row of the table                            
                        </param>
                        <param>
                            c zero-based column of the table                            
                        </param>
                        <return>
                            the zero-based index in the table if one exists;
                              otherwise -1.                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleIndex" type="int" line="1670">
                        <params>
                            <param name="r" type="int"/>
                            <param name="c" type="int"/>
                        </params>
                        <scope line="1671">
                            <scope line="1672"/>
                            <scope line="1675"/>
                        </scope>
                    </method>
                    <javadoc line="1681">
                        Returns the row header at a row in a table.                        
                        <param>
                            r zero-based row of the table                            
                        </param>
                        <return>
                            a String representing the row header
                              if one exists; otherwise null.                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleRowHeader" type="String" line="1687">
                        <params>
                            <param name="r" type="int"/>
                        </params>
                        <scope line="1688">
                            <declaration name="cellInfo" type="TableCellElementInfo" line="1689"/>
                            <scope line="1690">
                                <declaration name="v" type="View" line="1691"/>
                                <scope line="1692">
                                    <scope line="1693"/>
                                    <scope line="1696"/>
                                </scope>
                            </scope>
                        </scope>
                    </method>
                    <javadoc line="1704">
                        Returns the column header at a column in a table.                        
                        <param>
                            c zero-based column of the table                            
                        </param>
                        <return>
                            a String representing the column header
                              if one exists; otherwise null.                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleColumnHeader" type="String" line="1710">
                        <params>
                            <param name="c" type="int"/>
                        </params>
                        <scope line="1711">
                            <declaration name="cellInfo" type="TableCellElementInfo" line="1712"/>
                            <scope line="1713">
                                <declaration name="v" type="View" line="1714"/>
                                <scope line="1715">
                                    <scope line="1716"/>
                                    <scope line="1719"/>
                                </scope>
                            </scope>
                        </scope>
                    </method>
                    <method name="addRowHeader" type="void" line="1727">
                        <params>
                            <param name="cellInfo" type="TableCellElementInfo"/>
                            <param name="rowNumber" type="int"/>
                        </params>
                        <scope line="1728"/>
                    </method>
                    <class name="AccessibleHeadersTable" line="1733">
                        <implements interface="AccessibleTable"/>
                        <declaration name="headers" type="Hashtable&lt;Integer,ArrayList&lt;TableCellElementInfo&gt;&gt;" line="1734"/>
                        <declaration name="rowCount" type="int" line="1735"/>
                        <declaration name="columnCount" type="int" line="1736"/>
                        <method name="addHeader" type="void" line="1737">
                            <params>
                                <param name="cellInfo" type="TableCellElementInfo"/>
                                <param name="rowNumber" type="int"/>
                            </params>
                            <declaration name="rowInteger" type="Integer" line="1738"/>
                            <declaration name="list" type="ArrayList&lt;TableCellElementInfo&gt;" line="1739"/>
                            <scope line="1740"/>
                        </method>
                        <javadoc line="1746">
                            Returns the caption for the table.                            
                            <return>
                                the caption for the table                                
                            </return>
                        </javadoc>
                        <method name="getAccessibleCaption" type="Accessible" line="1750"/>
                        <javadoc line="1753">
                            Sets the caption for the table.                            
                            <param>
                                a the caption for the table                                
                            </param>
                        </javadoc>
                        <method name="setAccessibleCaption" type="void" line="1757">
                            <params>
                                <param name="a" type="Accessible"/>
                            </params>
                        </method>
                        <javadoc line="1759">
                            Returns the summary description of the table.                            
                            <return>
                                the summary description of the table                                
                            </return>
                        </javadoc>
                        <method name="getAccessibleSummary" type="Accessible" line="1763"/>
                        <javadoc line="1766">
                            Sets the summary description of the table                            
                            <param>
                                a the summary description of the table                                
                            </param>
                        </javadoc>
                        <method name="setAccessibleSummary" type="void" line="1770">
                            <params>
                                <param name="a" type="Accessible"/>
                            </params>
                        </method>
                        <javadoc line="1772">
                            Returns the number of rows in the table.                            
                            <return>
                                the number of rows in the table                                
                            </return>
                        </javadoc>
                        <method name="getAccessibleRowCount" type="int" line="1776"/>
                        <javadoc line="1779">
                            Returns the number of columns in the table.                            
                            <return>
                                the number of columns in the table                                
                            </return>
                        </javadoc>
                        <method name="getAccessibleColumnCount" type="int" line="1783"/>
                        <method name="getElementInfoAt" type="TableCellElementInfo" line="1786">
                            <params>
                                <param name="r" type="int"/>
                                <param name="c" type="int"/>
                            </params>
                            <declaration name="list" type="ArrayList&lt;TableCellElementInfo&gt;" line="1787"/>
                            <scope line="1788"/>
                            <scope line="1791"/>
                        </method>
                        <javadoc line="1795">
                            Returns the Accessible at a specified row and column
                              in the table.                            
                            <param>
                                r zero-based row of the table                                
                            </param>
                            <param>
                                c zero-based column of the table                                
                            </param>
                            <return>
                                the Accessible at the specified row and column                                
                            </return>
                        </javadoc>
                        <method name="getAccessibleAt" type="Accessible" line="1802">
                            <params>
                                <param name="r" type="int"/>
                                <param name="c" type="int"/>
                            </params>
                            <declaration name="elementInfo" type="ElementInfo" line="1803"/>
                            <scope line="1804"/>
                            <scope line="1807"/>
                        </method>
                        <javadoc line="1811">
                            Returns the number of rows occupied by the Accessible at
                              a specified row and column in the table.                            
                            <return>
                                the number of rows occupied by the Accessible at a
                                  given specified (row, column)                                
                            </return>
                        </javadoc>
                        <method name="getAccessibleRowExtentAt" type="int" line="1817">
                            <params>
                                <param name="r" type="int"/>
                                <param name="c" type="int"/>
                            </params>
                            <declaration name="elementInfo" type="TableCellElementInfo" line="1818"/>
                            <scope line="1819"/>
                            <scope line="1822"/>
                        </method>
                        <javadoc line="1826">
                            Returns the number of columns occupied by the Accessible at
                              a specified row and column in the table.                            
                            <return>
                                the number of columns occupied by the Accessible at a
                                  given specified row and column                                
                            </return>
                        </javadoc>
                        <method name="getAccessibleColumnExtentAt" type="int" line="1832">
                            <params>
                                <param name="r" type="int"/>
                                <param name="c" type="int"/>
                            </params>
                            <declaration name="elementInfo" type="TableCellElementInfo" line="1833"/>
                            <scope line="1834"/>
                            <scope line="1837"/>
                        </method>
                        <javadoc line="1841">
                            Returns the row headers as an AccessibleTable.                            
                            <return>
                                an AccessibleTable representing the row
                                  headers                                
                            </return>
                        </javadoc>
                        <method name="getAccessibleRowHeader" type="AccessibleTable" line="1846"/>
                        <javadoc line="1849">
                            Sets the row headers.                            
                            <param>
                                table an AccessibleTable representing the
                                  row headers                                
                            </param>
                        </javadoc>
                        <method name="setAccessibleRowHeader" type="void" line="1854">
                            <params>
                                <param name="table" type="AccessibleTable"/>
                            </params>
                        </method>
                        <javadoc line="1856">
                            Returns the column headers as an AccessibleTable.                            
                            <return>
                                an AccessibleTable representing the column
                                  headers                                
                            </return>
                        </javadoc>
                        <method name="getAccessibleColumnHeader" type="AccessibleTable" line="1861"/>
                        <javadoc line="1864">
                            Sets the column headers.                            
                            <param>
                                table an AccessibleTable representing the
                                  column headers                                
                            </param>
                        </javadoc>
                        <method name="setAccessibleColumnHeader" type="void" line="1869">
                            <params>
                                <param name="table" type="AccessibleTable"/>
                            </params>
                        </method>
                        <javadoc line="1871">
                            Returns the description of the specified row in the table.                            
                            <param>
                                r zero-based row of the table                                
                            </param>
                            <return>
                                the description of the row                                
                            </return>
                        </javadoc>
                        <method name="getAccessibleRowDescription" type="Accessible" line="1876">
                            <params>
                                <param name="r" type="int"/>
                            </params>
                        </method>
                        <javadoc line="1879">
                            Sets the description text of the specified row of the table.                            
                            <param>
                                r zero-based row of the table                                
                            </param>
                            <param>
                                a the description of the row                                
                            </param>
                        </javadoc>
                        <method name="setAccessibleRowDescription" type="void" line="1884">
                            <params>
                                <param name="r" type="int"/>
                                <param name="a" type="Accessible"/>
                            </params>
                        </method>
                        <javadoc line="1886">
                            Returns the description text of the specified column in the table.                            
                            <param>
                                c zero-based column of the table                                
                            </param>
                            <return>
                                the text description of the column                                
                            </return>
                        </javadoc>
                        <method name="getAccessibleColumnDescription" type="Accessible" line="1891">
                            <params>
                                <param name="c" type="int"/>
                            </params>
                        </method>
                        <javadoc line="1894">
                            Sets the description text of the specified column in the table.                            
                            <param>
                                c zero-based column of the table                                
                            </param>
                            <param>
                                a the text description of the column                                
                            </param>
                        </javadoc>
                        <method name="setAccessibleColumnDescription" type="void" line="1899">
                            <params>
                                <param name="c" type="int"/>
                                <param name="a" type="Accessible"/>
                            </params>
                        </method>
                        <javadoc line="1901">
                            Returns a boolean value indicating whether the accessible at
                              a specified row and column is selected.                            
                            <param>
                                r zero-based row of the table                                
                            </param>
                            <param>
                                c zero-based column of the table                                
                            </param>
                            <return>
                                the boolean value true if the accessible at the
                                  row and column is selected. Otherwise, the boolean value
                                  false                                
                            </return>
                        </javadoc>
                        <method name="isAccessibleSelected" type="boolean" line="1910">
                            <params>
                                <param name="r" type="int"/>
                                <param name="c" type="int"/>
                            </params>
                        </method>
                        <javadoc line="1913">
                            Returns a boolean value indicating whether the specified row
                              is selected.                            
                            <param>
                                r zero-based row of the table                                
                            </param>
                            <return>
                                the boolean value true if the specified row is selected.
                                  Otherwise, false.                                
                            </return>
                        </javadoc>
                        <method name="isAccessibleRowSelected" type="boolean" line="1920">
                            <params>
                                <param name="r" type="int"/>
                            </params>
                        </method>
                        <javadoc line="1923">
                            Returns a boolean value indicating whether the specified column
                              is selected.                            
                            <param>
                                c zero-based column of the table                                
                            </param>
                            <return>
                                the boolean value true if the specified column is selected.
                                  Otherwise, false.                                
                            </return>
                        </javadoc>
                        <method name="isAccessibleColumnSelected" type="boolean" line="1930">
                            <params>
                                <param name="c" type="int"/>
                            </params>
                        </method>
                        <javadoc line="1933">
                            Returns the selected rows in a table.                            
                            <return>
                                an array of selected rows where each element is a
                                  zero-based row of the table                                
                            </return>
                        </javadoc>
                        <method name="getSelectedAccessibleRows" type="int[]" line="1938"/>
                        <javadoc line="1941">
                            Returns the selected columns in a table.                            
                            <return>
                                an array of selected columns where each element is a
                                  zero-based column of the table                                
                            </return>
                        </javadoc>
                        <method name="getSelectedAccessibleColumns" type="int[]" line="1946"/>
                    </class>
                </class>
                <class name="TableRowElementInfo" line="1951">
                    <extends class="ElementInfo"/>
                    <declaration name="parent" type="TableElementInfo" line="1952"/>
                    <declaration name="rowNumber" type="int" line="1953"/>
                    <method name="TableRowElementInfo" type="constructor" line="1954">
                        <params>
                            <param name="e" type="Element"/>
                            <param name="parent" type="TableElementInfo"/>
                            <param name="rowNumber" type="int"/>
                        </params>
                    </method>
                    <method name="loadChildren" type="void" line="1959">
                        <params>
                            <param name="e" type="Element"/>
                        </params>
                        <scope line="1960">
                            <declaration name="attrs" type="AttributeSet" line="1961"/>
                            <scope line="1962">
                                <declaration name="headerElementInfo" type="TableCellElementInfo" line="1963"/>
                                <declaration name="at" type="AccessibleTable" line="1965"/>
                                <declaration name="tableElement" type="TableAccessibleContext" line="1966"/>
                            </scope>
                            <scope line="1969"/>
                        </scope>
                    </method>
                    <javadoc line="1974">
                        Returns the max of the rowspans of the cells in this row.                        
                    </javadoc>
                    <method name="getRowCount" type="int" line="1977">
                        <declaration name="rowCount" type="int" line="1978"/>
                        <scope line="1979">
                            <scope line="1980">
                                <declaration name="cell" type="TableCellElementInfo" line="1981"/>
                                <scope line="1982"/>
                            </scope>
                        </scope>
                    </method>
                    <javadoc line="1989">
                        Returns the sum of the column spans of the individual
                          cells in this row.                        
                    </javadoc>
                    <method name="getColumnCount" type="int" line="1993">
                        <declaration name="colCount" type="int" line="1994"/>
                        <scope line="1995">
                            <scope line="1996">
                                <declaration name="cell" type="TableCellElementInfo" line="1997"/>
                                <scope line="1998"/>
                            </scope>
                        </scope>
                    </method>
                    <javadoc line="2005">
                        Overriden to invalidate the table as well as
                          TableRowElementInfo.                        
                    </javadoc>
                    <method name="invalidate" type="void" line="2009">
                        <params>
                            <param name="first" type="boolean"/>
                        </params>
                    </method>
                    <javadoc line="2013">
                        Places the TableCellElementInfos for this element in
                          the grid.                        
                    </javadoc>
                    <method name="updateGrid" type="void" line="2017">
                        <params>
                            <param name="row" type="int"/>
                        </params>
                        <scope line="2018">
                            <declaration name="emptyRow" type="boolean" line="2019"/>
                            <scope line="2020">
                                <scope line="2021">
                                    <scope line="2022"/>
                                </scope>
                                <scope line="2027"/>
                            </scope>
                            <scope line="2031">
                                <declaration name="cell" type="TableCellElementInfo" line="2032"/>
                                <scope line="2033"/>
                                <scope line="2036">
                                    <scope line="2037"/>
                                </scope>
                            </scope>
                        </scope>
                    </method>
                    <javadoc line="2045">
                        Returns the column count of the number of columns that have
                          a rowcount &gt;= rowspan.                        
                    </javadoc>
                    <method name="getColumnCount" type="int" line="2049">
                        <params>
                            <param name="rowspan" type="int"/>
                        </params>
                        <scope line="2050">
                            <declaration name="cols" type="int" line="2051"/>
                            <scope line="2052">
                                <declaration name="cell" type="TableCellElementInfo" line="2053"/>
                                <scope line="2054"/>
                            </scope>
                        </scope>
                    </method>
                </class>
                <class name="TableCellElementInfo" line="2063">
                    <extends class="ElementInfo"/>
                    <javadoc line="2063">
                        TableCellElementInfo is used to represents the cells of
                          the table.                        
                    </javadoc>
                    <declaration name="accessible" type="Accessible" line="2068"/>
                    <declaration name="isHeaderCell" type="boolean" line="2069"/>
                    <method name="TableCellElementInfo" type="constructor" line="2070">
                        <params>
                            <param name="e" type="Element"/>
                            <param name="parent" type="ElementInfo"/>
                        </params>
                    </method>
                    <method name="TableCellElementInfo" type="constructor" line="2074">
                        <params>
                            <param name="e" type="Element"/>
                            <param name="parent" type="ElementInfo"/>
                            <param name="isHeaderCell" type="boolean"/>
                        </params>
                    </method>
                    <method name="isHeaderCell" type="boolean" line="2078"/>
                    <method name="getAccessible" type="Accessible" line="2081"/>
                    <method name="getAccessible" type="void" line="2086">
                        <params>
                            <param name="elementInfo" type="ElementInfo"/>
                        </params>
                        <scope line="2087"/>
                        <scope line="2090">
                            <scope line="2091"/>
                        </scope>
                    </method>
                    <javadoc line="2096">
                        Returns the rowspan attribute.                        
                    </javadoc>
                    <method name="getRowCount" type="int" line="2099">
                        <scope line="2100"/>
                    </method>
                    <javadoc line="2105">
                        Returns the colspan attribute.                        
                    </javadoc>
                    <method name="getColumnCount" type="int" line="2108">
                        <scope line="2109"/>
                    </method>
                    <javadoc line="2114">
                        Overriden to invalidate the TableRowElementInfo as well as
                          the TableCellElementInfo.                        
                    </javadoc>
                    <method name="invalidate" type="void" line="2118">
                        <params>
                            <param name="first" type="boolean"/>
                        </params>
                    </method>
                </class>
            </class>
            <class name="ElementInfo" line="2124">
                <javadoc line="2124">
                    ElementInfo provides a slim down view of an Element.  Each ElementInfo
                      can have any number of child ElementInfos that are not necessarily
                      direct children of the Element. As the Document changes various
                      ElementInfos become invalidated. Before accessing a particular portion
                      of an ElementInfo you should make sure it is valid by invoking
                      &lt;code&gt;validateIfNecessary&lt;/code&gt;, this will return true if
                      successful, on the other hand a false return value indicates the
                      ElementInfo is not valid and can never become valid again (usually
                      the result of the Element the ElementInfo encapsulates being removed).                    
                </javadoc>
                <declaration name="children" type="ArrayList&lt;ElementInfo&gt;" line="2136"/>
                <javadoc line="2136">
                    The children of this ElementInfo.                    
                </javadoc>
                <declaration name="element" type="Element" line="2140"/>
                <javadoc line="2140">
                    The Element this ElementInfo is providing information for.                    
                </javadoc>
                <declaration name="parent" type="ElementInfo" line="2144"/>
                <javadoc line="2144">
                    The parent ElementInfo, will be null for the root.                    
                </javadoc>
                <declaration name="isValid" type="boolean" line="2148"/>
                <javadoc line="2148">
                    Indicates the validity of the ElementInfo.                    
                </javadoc>
                <declaration name="canBeValid" type="boolean" line="2152"/>
                <javadoc line="2152">
                    Indicates if the ElementInfo can become valid.                    
                </javadoc>
                <javadoc line="2156">
                    Creates the root ElementInfo.                    
                </javadoc>
                <method name="ElementInfo" type="constructor" line="2159">
                    <params>
                        <param name="element" type="Element"/>
                    </params>
                </method>
                <javadoc line="2162">
                    Creates an ElementInfo representing &lt;code&gt;element&lt;/code&gt; with
                      the specified parent.                    
                </javadoc>
                <method name="ElementInfo" type="constructor" line="2166">
                    <params>
                        <param name="element" type="Element"/>
                        <param name="parent" type="ElementInfo"/>
                    </params>
                </method>
                <javadoc line="2172">
                    Validates the receiver. This recreates the children as well. This
                      will be invoked within a &lt;code&gt;readLock&lt;/code&gt;. If this is overriden
                      it MUST invoke supers implementation first!                    
                </javadoc>
                <method name="validate" type="void" line="2177"/>
                <javadoc line="2181">
                    Recreates the direct children of &lt;code&gt;info&lt;/code&gt;.                    
                </javadoc>
                <method name="loadChildren" type="void" line="2184">
                    <params>
                        <param name="parent" type="Element"/>
                    </params>
                    <scope line="2185">
                        <scope line="2186">
                            <declaration name="e" type="Element" line="2187"/>
                            <declaration name="childInfo" type="ElementInfo" line="2188"/>
                            <scope line="2189"/>
                            <scope line="2192"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="2198">
                    Returns the index of the child in the parent, or -1 for the
                      root or if the parent isn&apos;t valid.                    
                </javadoc>
                <method name="getIndexInParent" type="int" line="2202">
                    <scope line="2203"/>
                </method>
                <javadoc line="2208">
                    Returns the Element this &lt;code&gt;ElementInfo&lt;/code&gt; represents.                    
                </javadoc>
                <method name="getElement" type="Element" line="2211"/>
                <javadoc line="2214">
                    Returns the parent of this Element, or null for the root.                    
                </javadoc>
                <method name="getParent" type="ElementInfo" line="2217"/>
                <javadoc line="2220">
                    Returns the index of the specified child, or -1 if
                      &lt;code&gt;child&lt;/code&gt; isn&apos;t a valid child.                    
                </javadoc>
                <method name="indexOf" type="int" line="2224">
                    <params>
                        <param name="child" type="ElementInfo"/>
                    </params>
                    <declaration name="children" type="ArrayList" line="2225"/>
                    <scope line="2226"/>
                </method>
                <javadoc line="2231">
                    Returns the child ElementInfo at &lt;code&gt;index&lt;/code&gt;, or null
                      if &lt;code&gt;index&lt;/code&gt; isn&apos;t a valid index.                    
                </javadoc>
                <method name="getChild" type="ElementInfo" line="2235">
                    <params>
                        <param name="index" type="int"/>
                    </params>
                    <scope line="2236">
                        <declaration name="children" type="ArrayList&lt;ElementInfo&gt;" line="2237"/>
                        <scope line="2238"/>
                    </scope>
                </method>
                <javadoc line="2244">
                    Returns the number of children the ElementInfo contains.                    
                </javadoc>
                <method name="getChildCount" type="int" line="2247"/>
                <javadoc line="2251">
                    Adds a new child to this ElementInfo.                    
                </javadoc>
                <method name="addChild" type="void" line="2254">
                    <params>
                        <param name="child" type="ElementInfo"/>
                    </params>
                    <scope line="2255"/>
                </method>
                <javadoc line="2260">
                    Returns the View corresponding to this ElementInfo, or null
                      if the ElementInfo can&apos;t be validated.                    
                </javadoc>
                <method name="getView" type="View" line="2264">
                    <scope line="2265"/>
                    <declaration name="lock" type="Object" line="2268"/>
                    <scope line="2269">
                        <declaration name="rootView" type="View" line="2270"/>
                        <declaration name="e" type="Element" line="2271"/>
                        <declaration name="start" type="int" line="2272"/>
                        <scope line="2273"/>
                    </scope>
                    <scope line="2278"/>
                </method>
                <javadoc line="2282">
                    Returns the Bounds for this ElementInfo, or null
                      if the ElementInfo can&apos;t be validated.                    
                </javadoc>
                <method name="getBounds" type="Rectangle" line="2286">
                    <scope line="2287"/>
                    <declaration name="lock" type="Object" line="2290"/>
                    <scope line="2291">
                        <declaration name="bounds" type="Rectangle" line="2292"/>
                        <declaration name="rootView" type="View" line="2293"/>
                        <declaration name="e" type="Element" line="2294"/>
                        <scope line="2295">
                            <scope line="2296"/>
                            <scope line="2299"/>
                        </scope>
                    </scope>
                    <scope line="2303"/>
                </method>
                <javadoc line="2308">
                    Returns true if this ElementInfo is valid.                    
                </javadoc>
                <method name="isValid" type="boolean" line="2311"/>
                <javadoc line="2314">
                    Returns the AttributeSet associated with the Element, this will
                      return null if the ElementInfo can&apos;t be validated.                    
                </javadoc>
                <method name="getAttributes" type="AttributeSet" line="2318">
                    <scope line="2319"/>
                </method>
                <javadoc line="2324">
                    Returns the AttributeSet associated with the View that is
                      representing this Element, this will
                      return null if the ElementInfo can&apos;t be validated.                    
                </javadoc>
                <method name="getViewAttributes" type="AttributeSet" line="2329">
                    <scope line="2330">
                        <declaration name="view" type="View" line="2331"/>
                        <scope line="2332"/>
                    </scope>
                </method>
                <javadoc line="2339">
                    Convenience method for getting an integer attribute from the passed
                      in AttributeSet.                    
                </javadoc>
                <method name="getIntAttr" type="int" line="2343">
                    <params>
                        <param name="attrs" type="AttributeSet"/>
                        <param name="key" type="Object"/>
                        <param name="deflt" type="int"/>
                    </params>
                    <scope line="2344">
                        <declaration name="i" type="int" line="2345"/>
                        <declaration name="val" type="String" line="2346"/>
                        <scope line="2347"/>
                        <scope line="2350">
                            <scope line="2351"/>
                            <scope line="2354"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="2362">
                    Validates the ElementInfo if necessary.  Some ElementInfos may
                      never be valid again.  You should check &lt;code&gt;isValid&lt;/code&gt; before
                      using one.  This will reload the children and invoke
                      &lt;code&gt;validate&lt;/code&gt; if the ElementInfo is invalid and can become
                      valid again. This will return true if the receiver is valid.                    
                </javadoc>
                <method name="validateIfNecessary" type="boolean" line="2369">
                    <scope line="2370">
                        <declaration name="lock" type="Object" line="2372"/>
                        <scope line="2373"/>
                        <scope line="2376"/>
                    </scope>
                </method>
                <javadoc line="2382">
                    Invalidates the ElementInfo. Subclasses should override this
                      if they need to reset state once invalid.                    
                </javadoc>
                <method name="invalidate" type="void" line="2386">
                    <params>
                        <param name="first" type="boolean"/>
                    </params>
                    <scope line="2387">
                        <scope line="2388"/>
                    </scope>
                    <scope line="2395">
                        <scope line="2396"/>
                    </scope>
                </method>
                <method name="getView" type="View" line="2402">
                    <params>
                        <param name="parent" type="View"/>
                        <param name="e" type="Element"/>
                        <param name="start" type="int"/>
                    </params>
                    <scope line="2403"/>
                    <declaration name="index" type="int" line="2406"/>
                    <scope line="2407"/>
                </method>
                <method name="getClosestInfoIndex" type="int" line="2412">
                    <params>
                        <param name="index" type="int"/>
                    </params>
                    <scope line="2413">
                        <declaration name="info" type="ElementInfo" line="2414"/>
                        <scope line="2415"/>
                    </scope>
                </method>
                <method name="update" type="void" line="2421">
                    <params>
                        <param name="e" type="DocumentEvent"/>
                    </params>
                    <scope line="2422"/>
                    <declaration name="parent" type="ElementInfo" line="2425"/>
                    <declaration name="element" type="Element" line="2426"/>
                    <scope line="2427">
                        <declaration name="ec" type="DocumentEvent.ElementChange" line="2428"/>
                        <scope line="2429">
                            <scope line="2430"/>
                            <scope line="2433"/>
                        </scope>
                    </scope>
                    <scope line="2441">
                        <declaration name="elem" type="Element" line="2442"/>
                        <declaration name="pos" type="int" line="2443"/>
                        <declaration name="index0" type="int" line="2444"/>
                        <scope line="2445"/>
                        <declaration name="info" type="ElementInfo" line="2448"/>
                        <scope line="2449"/>
                        <declaration name="index1" type="int" line="2452"/>
                        <scope line="2453">
                            <scope line="2455"/>
                        </scope>
                        <scope line="2459">
                            <scope line="2461"/>
                        </scope>
                        <scope line="2466"/>
                    </scope>
                </method>
            </class>
            <class name="DocumentHandler" line="2472">
                <implements interface="DocumentListener"/>
                <javadoc line="2472">
                    DocumentListener installed on the current Document.  Will invoke
                      &lt;code&gt;update&lt;/code&gt; on the &lt;code&gt;RootInfo&lt;/code&gt; in response to
                      any event.                    
                </javadoc>
                <method name="insertUpdate" type="void" line="2478">
                    <params>
                        <param name="e" type="DocumentEvent"/>
                    </params>
                </method>
                <method name="removeUpdate" type="void" line="2481">
                    <params>
                        <param name="e" type="DocumentEvent"/>
                    </params>
                </method>
                <method name="changedUpdate" type="void" line="2484">
                    <params>
                        <param name="e" type="DocumentEvent"/>
                    </params>
                </method>
            </class>
            <class name="PropertyChangeHandler" line="2488">
                <implements interface="PropertyChangeListener"/>
                <method name="propertyChange" type="void" line="2489">
                    <params>
                        <param name="evt" type="PropertyChangeEvent"/>
                    </params>
                    <scope line="2490"/>
                </method>
            </class>
        </class>
    </source>