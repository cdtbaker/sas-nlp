<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text">
        <import package="java.util.ArrayList"/>
        <import package="java.util.List"/>
        <class name="SegmentCache" line="4">
            <javadoc line="4">
                SegmentCache caches &lt;code&gt;Segment&lt;/code&gt;s to avoid continually creating
                  and destroying of &lt;code&gt;Segment&lt;/code&gt;s. A common use of this class would
                  be:
                  &lt;pre&gt;
                  Segment segment = segmentCache.getSegment();
                  // do something with segment
                  ...
                  segmentCache.releaseSegment(segment);
                  &lt;/pre&gt;                
            </javadoc>
            <declaration name="sharedCache" type="SegmentCache" line="16"/>
            <javadoc line="16">
                A global cache.                
            </javadoc>
            <declaration name="segments" type="List&amp;lt;Segment&amp;gt;" line="20"/>
            <javadoc line="20">
                A list of the currently unused Segments.                
            </javadoc>
            <javadoc line="24">
                Returns the shared SegmentCache.                
            </javadoc>
            <method name="getSharedInstance" type="SegmentCache" line="27"/>
            <javadoc line="30">
                A convenience method to get a Segment from the shared
                  &lt;code&gt;SegmentCache&lt;/code&gt;.                
            </javadoc>
            <method name="getSharedSegment" type="Segment" line="34"/>
            <javadoc line="37">
                A convenience method to release a Segment to the shared
                  &lt;code&gt;SegmentCache&lt;/code&gt;.                
            </javadoc>
            <method name="releaseSharedSegment" type="void" line="41">
                <params>
                    <param name="segment" type="Segment"/>
                </params>
            </method>
            <javadoc line="44">
                Creates and returns a SegmentCache.                
            </javadoc>
            <method name="SegmentCache" type="constructor" line="47"/>
            <javadoc line="50">
                Returns a &lt;code&gt;Segment&lt;/code&gt;. When done, the &lt;code&gt;Segment&lt;/code&gt;
                  should be recycled by invoking &lt;code&gt;releaseSegment&lt;/code&gt;.                
            </javadoc>
            <method name="getSegment" type="Segment" line="54">
                <scope line="55">
                    <declaration name="size" type="int" line="56"/>
                    <scope line="57"/>
                </scope>
            </method>
            <javadoc line="63">
                Releases a Segment. You should not use a Segment after you release it,
                  and you should NEVER release the same Segment more than once, eg:
                  &lt;pre&gt;
                  segmentCache.releaseSegment(segment);
                  segmentCache.releaseSegment(segment);
                  &lt;/pre&gt;
                  Will likely result in very bad things happening!                
            </javadoc>
            <method name="releaseSegment" type="void" line="72">
                <params>
                    <param name="segment" type="Segment"/>
                </params>
                <scope line="73">
                    <scope line="74"/>
                </scope>
            </method>
            <class name="CachedSegment" line="81">
                <extends class="Segment"/>
                <javadoc line="81">
                    CachedSegment is used as a tagging interface to determine if
                      a Segment can successfully be shared.                    
                </javadoc>
            </class>
        </class>
    </source>