<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text">
        <import package="java.util.ArrayList"/>
        <import package="java.util.List"/>
        <class name="SegmentCache" line="30">
            <javadoc line="30">
                SegmentCache caches &lt;code&gt;Segment&lt;/code&gt;s to avoid continually creating
                  and destroying of &lt;code&gt;Segment&lt;/code&gt;s. A common use of this class would
                  be:
                  &lt;pre&gt;
                  Segment segment = segmentCache.getSegment();
                  // do something with segment
                  ...
                  segmentCache.releaseSegment(segment);
                  &lt;/pre&gt;                
            </javadoc>
            <declaration name="sharedCache" type="SegmentCache" line="43"/>
            <javadoc line="43">
                A global cache.                
            </javadoc>
            <declaration name="segments" type="List&lt;Segment&gt;" line="48"/>
            <javadoc line="48">
                A list of the currently unused Segments.                
            </javadoc>
            <javadoc line="54">
                Returns the shared SegmentCache.                
            </javadoc>
            <method name="getSharedInstance" type="SegmentCache" line="57"/>
            <javadoc line="61">
                A convenience method to get a Segment from the shared
                  &lt;code&gt;SegmentCache&lt;/code&gt;.                
            </javadoc>
            <method name="getSharedSegment" type="Segment" line="65"/>
            <javadoc line="69">
                A convenience method to release a Segment to the shared
                  &lt;code&gt;SegmentCache&lt;/code&gt;.                
            </javadoc>
            <method name="releaseSharedSegment" type="void" line="73">
                <params>
                    <param name="segment" type="Segment"/>
                </params>
            </method>
            <javadoc line="79">
                Creates and returns a SegmentCache.                
            </javadoc>
            <method name="SegmentCache" type="constructor" line="82"/>
            <javadoc line="86">
                Returns a &lt;code&gt;Segment&lt;/code&gt;. When done, the &lt;code&gt;Segment&lt;/code&gt;
                  should be recycled by invoking &lt;code&gt;releaseSegment&lt;/code&gt;.                
            </javadoc>
            <method name="getSegment" type="Segment" line="90">
                <scope line="91">
                    <declaration name="size" type="int" line="92"/>
                    <scope line="94"/>
                </scope>
            </method>
            <javadoc line="101">
                Releases a Segment. You should not use a Segment after you release it,
                  and you should NEVER release the same Segment more than once, eg:
                  &lt;pre&gt;
                  segmentCache.releaseSegment(segment);
                  segmentCache.releaseSegment(segment);
                  &lt;/pre&gt;
                  Will likely result in very bad things happening!                
            </javadoc>
            <method name="releaseSegment" type="void" line="110">
                <params>
                    <param name="segment" type="Segment"/>
                </params>
                <scope line="111">
                    <scope line="112"/>
                </scope>
            </method>
            <class name="CachedSegment" line="121">
                <extends class="Segment"/>
                <javadoc line="121">
                    CachedSegment is used as a tagging interface to determine if
                      a Segment can successfully be shared.                    
                </javadoc>
            </class>
        </class>
    </source>