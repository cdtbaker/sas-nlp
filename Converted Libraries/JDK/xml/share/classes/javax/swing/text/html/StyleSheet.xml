<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text.html">
        <import package="sun.swing.SwingUtilities2"/>
        <import package="java.util"/>
        <import package="java.awt"/>
        <import package="java.io"/>
        <import package="java.net"/>
        <import package="javax.swing.Icon"/>
        <import package="javax.swing.ImageIcon"/>
        <import package="javax.swing.UIManager"/>
        <import package="javax.swing.border"/>
        <import package="javax.swing.event.ChangeListener"/>
        <import package="javax.swing.text"/>
        <class name="StyleSheet" line="39">
            <extends class="StyleContext"/>
            <comment line="132">
                As the javadoc states, this class maintains a mapping between                
            </comment>
            <comment line="133">
                a CSS selector (such as p.bar) and a Style.                
            </comment>
            <comment line="134">
                This consists of a number of parts:                
            </comment>
            <comment line="135">
                . Each selector is broken down into its constituent simple selectors,                
            </comment>
            <comment line="136">
                and stored in an inverted graph, for example:                
            </comment>
            <comment line="137">
                p { color: red } ol p { font-size: 10pt } ul p { font-size: 12pt }                
            </comment>
            <comment line="138">
                results in the graph:                
            </comment>
            <comment line="139">
                root                
            </comment>
            <comment line="140">
                |                
            </comment>
            <comment line="141">
                p                
            </comment>
            <comment line="142">
                / \                
            </comment>
            <comment line="143">
                ol ul                
            </comment>
            <comment line="144">
                each node (an instance of SelectorMapping) has an associated                
            </comment>
            <comment line="145">
                specificity and potentially a Style.                
            </comment>
            <comment line="146">
                . Every rule that is asked for (either by way of getRule(String) or                
            </comment>
            <comment line="147">
                getRule(HTML.Tag, Element)) results in a unique instance of                
            </comment>
            <comment line="148">
                ResolvedStyle. ResolvedStyles contain the AttributeSets from the                
            </comment>
            <comment line="149">
                SelectorMapping.                
            </comment>
            <comment line="150">
                . When a new rule is created it is inserted into the graph, and                
            </comment>
            <comment line="151">
                the AttributeSets of each ResolvedStyles are updated appropriately.                
            </comment>
            <comment line="152">
                . This class creates special AttributeSets, LargeConversionSet and                
            </comment>
            <comment line="153">
                SmallConversionSet, that maintain a mapping between StyleConstants                
            </comment>
            <comment line="154">
                and CSS so that developers that wish to use the StyleConstants                
            </comment>
            <comment line="155">
                methods can do so.                
            </comment>
            <comment line="156">
                . When one of the AttributeSets is mutated by way of a                
            </comment>
            <comment line="157">
                StyleConstants key, all the associated CSS keys are removed. This is                
            </comment>
            <comment line="158">
                done so that the two representations don&apos;t get out of sync. For                
            </comment>
            <comment line="159">
                example, if the developer adds StyleConsants.BOLD, FALSE to an                
            </comment>
            <comment line="160">
                AttributeSet that contains HTML.Tag.B, the HTML.Tag.B entry will                
            </comment>
            <comment line="161">
                be removed.                
            </comment>
            <comment line="430">
                                
            </comment>
            <comment line="431">
                The following is used to import style sheets.                
            </comment>
            <comment line="432">
                                
            </comment>
            <comment line="523">
                ---- Conversion functionality ---------------------------------                
            </comment>
            <comment line="879">
                ---- Resource handling ----------------------------------------                
            </comment>
            <comment line="1038">
                                
            </comment>
            <comment line="1039">
                The following gaggle of methods is used in maintaing the rules from                
            </comment>
            <comment line="1040">
                the sheet.                
            </comment>
            <comment line="1041">
                                
            </comment>
            <comment line="3127">
                ---- Variables ---------------------------------------------                
            </comment>
            <javadoc line="39">
                Support for defining the visual characteristics of
                  HTML views being rendered.  The StyleSheet is used to
                  translate the HTML model into visual characteristics.
                  This enables views to be customized by a look-and-feel,
                  multiple views over the same model can be rendered
                  differently, etc.  This can be thought of as a CSS
                  rule repository.  The key for CSS attributes is an
                  object of type CSS.Attribute.  The type of the value
                  is up to the StyleSheet implementation, but the
                  &lt;code&gt;toString&lt;/code&gt; method is required
                  to return a string representation of CSS value.
                  &lt;p&gt;
                  The primary entry point for HTML View implementations
                  to get their attributes is the{@link #getViewAttributes getViewAttributes}method.  This should be implemented to establish the
                  desired policy used to associate attributes with the view.
                  Each HTMLEditorKit (i.e. and therefore each associated
                  JEditorPane) can have its own StyleSheet, but by default one
                  sheet will be shared by all of the HTMLEditorKit instances.
                  HTMLDocument instance can also have a StyleSheet, which
                  holds the document-specific CSS specifications.
                  &lt;p&gt;
                  In order for Views to store less state and therefore be
                  more lightweight, the StyleSheet can act as a factory for
                  painters that handle some of the rendering tasks.  This allows
                  implementations to determine what they want to cache
                  and have the sharing potentially at the level that a
                  selector is common to multiple views.  Since the StyleSheet
                  may be used by views over multiple documents and typically
                  the HTML attributes don&apos;t effect the selector being used,
                  the potential for sharing is significant.
                  &lt;p&gt;
                  The rules are stored as named styles, and other information
                  is stored to translate the context of an element to a
                  rule quickly.  The following code fragment will display
                  the named styles, and therefore the CSS rules contained.
                  &lt;code&gt;&lt;pre&gt;
                  &amp;nbsp;
                  &amp;nbsp; import java.util.;
                  &amp;nbsp; import javax.swing.text.;
                  &amp;nbsp; import javax.swing.text.html.;
                  &amp;nbsp;
                  &amp;nbsp; public class ShowStyles {
                  &amp;nbsp;
                  &amp;nbsp;     public static void main(String[] args) {
                  &amp;nbsp;       HTMLEditorKit kit = new HTMLEditorKit();
                  &amp;nbsp;       HTMLDocument doc = (HTMLDocument) kit.createDefaultDocument();
                  &amp;nbsp;       StyleSheet styles = doc.getStyleSheet();
                  &amp;nbsp;
                  &amp;nbsp;       Enumeration rules = styles.getStyleNames();
                  &amp;nbsp;       while (rules.hasMoreElements()) {
                  &amp;nbsp;           String name = (String) rules.nextElement();
                  &amp;nbsp;           Style rule = styles.getStyle(name);
                  &amp;nbsp;           System.out.println(rule.toString());
                  &amp;nbsp;       }
                  &amp;nbsp;       System.exit(0);
                  &amp;nbsp;     }
                  &amp;nbsp; }
                  &amp;nbsp;
                  &lt;/pre&gt;&lt;/code&gt;
                  &lt;p&gt;
                  The semantics for when a CSS style should overide visual attributes
                  defined by an element are not well defined. For example, the html
                  &lt;code&gt;&amp;lt;body bgcolor=red&amp;gt;&lt;/code&gt; makes the body have a red
                  background. But if the html file also contains the CSS rule
                  &lt;code&gt;body { background: blue }&lt;/code&gt; it becomes less clear as to
                  what color the background of the body should be. The current
                  implemention gives visual attributes defined in the element the
                  highest precedence, that is they are always checked before any styles.
                  Therefore, in the previous example the background would have a
                  red color as the body element defines the background color to be red.
                  &lt;p&gt;
                  As already mentioned this supports CSS. We don&apos;t support the full CSS
                  spec. Refer to the javadoc of the CSS class to see what properties
                  we support. The two major CSS parsing related
                  concepts we do not currently
                  support are pseudo selectors, such as &lt;code&gt;A:link { color: red }&lt;/code&gt;,
                  and the &lt;code&gt;important&lt;/code&gt; modifier.
                  &lt;p&gt;
                  &lt;font color=&quot;red&quot;&gt;Note: This implementation is currently
                  incomplete.  It can be replaced with alternative implementations
                  that are complete.  Future versions of this class will provide
                  better CSS support.&lt;/font&gt;                
                <author>
                    Timothy Prinzing                    
                </author>
                <author>
                    Sunita Mani                    
                </author>
                <author>
                    Sara Swanson                    
                </author>
                <author>
                    Jill Nakata                    
                </author>
            </javadoc>
            <javadoc line="162">
                Construct a StyleSheet                
            </javadoc>
            <method name="StyleSheet" type="constructor" line="165">
                <scope line="169"/>
            </method>
            <javadoc line="174">
                Fetches the style to use to render the given type
                  of HTML tag.  The element given is representing
                  the tag and can be used to determine the nesting
                  for situations where the attributes will differ
                  if nesting inside of elements.                
                <param>
                    t the type to translate to visual attributes                    
                </param>
                <param>
                    e the element representing the tag; the element
                      can be used to determine the nesting for situations where
                      the attributes will differ if nested inside of other
                      elements                    
                </param>
                <return>
                    the set of CSS attributes to use to render
                      the tag                    
                </return>
            </javadoc>
            <method name="getRule" type="Style" line="189">
                <params>
                    <param name="t" type="HTML.Tag"/>
                    <param name="e" type="Element"/>
                </params>
                <comment line="193">
                    Build an array of all the parent elements.                    
                </comment>
                <comment line="200">
                    Build a fully qualified selector.                    
                </comment>
                <comment line="207">
                    &gt;= 1 as the HTML.Tag for the 0th element is passed in.                    
                </comment>
                <comment line="232">
                    For leafs, we use the second tier attributes.                    
                </comment>
                <declaration name="sb" type="SearchBuffer" line="190"/>
                <scope line="192">
                    <declaration name="searchContext" type="Vector&lt;Element&gt;" line="194"/>
                    <scope line="196"/>
                    <declaration name="n" type="int" line="201"/>
                    <declaration name="cacheLookup" type="StringBuffer" line="202"/>
                    <declaration name="attr" type="AttributeSet" line="203"/>
                    <declaration name="eName" type="String" line="204"/>
                    <declaration name="name" type="Object" line="205"/>
                    <scope line="208">
                        <scope line="214">
                            <scope line="215"/>
                            <scope line="220"/>
                        </scope>
                    </scope>
                    <scope line="231">
                        <declaration name="testAttr" type="Object" line="233"/>
                        <scope line="234"/>
                        <scope line="237"/>
                    </scope>
                    <scope line="241">
                        <scope line="242"/>
                        <scope line="246"/>
                    </scope>
                    <declaration name="style" type="Style" line="253"/>
                </scope>
                <scope line="257"/>
            </method>
            <javadoc line="262">
                Fetches the rule that best matches the selector given
                  in string form. Where &lt;code&gt;selector&lt;/code&gt; is a space separated
                  String of the element names. For example, &lt;code&gt;selector&lt;/code&gt;
                  might be &apos;html body tr td&apos;&apos;&lt;p&gt;
                  The attributes of the returned Style will change
                  as rules are added and removed. That is if you to ask for a rule
                  with a selector &quot;table p&quot; and a new rule was added with a selector
                  of &quot;p&quot; the returned Style would include the new attributes from
                  the rule &quot;p&quot;.                
            </javadoc>
            <method name="getRule" type="Style" line="273">
                <params>
                    <param name="selector" type="String"/>
                </params>
                <scope line="275">
                    <declaration name="style" type="Style" line="276"/>
                </scope>
            </method>
            <javadoc line="282">
                Adds a set of rules to the sheet.  The rules are expected to
                  be in valid CSS format.  Typically this would be called as
                  a result of parsing a &amp;lt;style&amp;gt; tag.                
            </javadoc>
            <method name="addRule" type="void" line="287">
                <params>
                    <param name="rule" type="String"/>
                </params>
                <comment line="289">
                    tweaks to control display properties                    
                </comment>
                <comment line="290">
                    see BasicEditorPaneUI                    
                </comment>
                <scope line="288">
                    <declaration name="baseUnitsDisable" type="String" line="291"/>
                    <declaration name="baseUnits" type="String" line="292"/>
                    <declaration name="w3cLengthUnitsEnable" type="String" line="293"/>
                    <declaration name="w3cLengthUnitsDisable" type="String" line="294"/>
                    <scope line="295"/>
                    <scope line="297"/>
                    <scope line="300"/>
                    <scope line="302"/>
                    <scope line="304">
                        <declaration name="parser" type="CssParser" line="305"/>
                        <scope line="306"/>
                        <scope line="308"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="313">
                Translates a CSS declaration to an AttributeSet that represents
                  the CSS declaration.  Typically this would be called as a
                  result of encountering an HTML style attribute.                
            </javadoc>
            <method name="getDeclaration" type="AttributeSet" line="318">
                <params>
                    <param name="decl" type="String"/>
                </params>
                <scope line="319"/>
                <declaration name="parser" type="CssParser" line="322"/>
            </method>
            <javadoc line="326">
                Loads a set of rules that have been specified in terms of
                  CSS1 grammar.  If there are collisions with existing rules,
                  the newly specified rule will win.                
                <param>
                    in the stream to read the CSS grammar from                    
                </param>
                <param>
                    ref the reference URL.  This value represents the
                      location of the stream and may be null.  All relative
                      URLs specified in the stream will be based upon this
                      parameter.                    
                </param>
            </javadoc>
            <method name="loadRules" type="void" line="337">
                <params>
                    <param name="in" type="Reader"/>
                    <param name="ref" type="URL"/>
                </params>
                <declaration name="parser" type="CssParser" line="338"/>
            </method>
            <javadoc line="342">
                Fetches a set of attributes to use in the view for
                  displaying.  This is basically a set of attributes that
                  can be used for View.getAttributes.                
            </javadoc>
            <method name="getViewAttributes" type="AttributeSet" line="347">
                <params>
                    <param name="v" type="View"/>
                </params>
            </method>
            <javadoc line="351">
                Removes a named style previously added to the document.                
                <param>
                    nm  the name of the style to remove                    
                </param>
            </javadoc>
            <method name="removeStyle" type="void" line="356">
                <params>
                    <param name="nm" type="String"/>
                </params>
                <declaration name="aStyle" type="Style" line="357"/>
                <scope line="359">
                    <declaration name="selector" type="String" line="360"/>
                    <declaration name="selectors" type="String[]" line="361"/>
                    <scope line="362">
                        <declaration name="mapping" type="SelectorMapping" line="363"/>
                        <scope line="364"/>
                        <declaration name="rule" type="Style" line="368"/>
                        <scope line="369">
                            <scope line="371">
                                <declaration name="values" type="Enumeration&lt;ResolvedStyle&gt;" line="372"/>
                                <scope line="373">
                                    <declaration name="style" type="ResolvedStyle" line="374"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="384">
                Adds the rules from the StyleSheet &lt;code&gt;ss&lt;/code&gt; to those of
                  the receiver. &lt;code&gt;ss&apos;s&lt;/code&gt; rules will override the rules of
                  any previously added style sheets. An added StyleSheet will never
                  override the rules of the receiving style sheet.                
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="addStyleSheet" type="void" line="392">
                <params>
                    <param name="ss" type="StyleSheet"/>
                </params>
                <scope line="393">
                    <scope line="394"/>
                    <scope line="397">
                        <declaration name="index" type="int" line="398"/>
                        <scope line="400"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="409">
                Removes the StyleSheet &lt;code&gt;ss&lt;/code&gt; from those of the receiver.                
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="removeStyleSheet" type="void" line="414">
                <params>
                    <param name="ss" type="StyleSheet"/>
                </params>
                <scope line="415">
                    <scope line="416">
                        <declaration name="index" type="int" line="417"/>
                        <scope line="418">
                            <scope line="421"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="433">
                Returns an array of the linked StyleSheets. Will return null
                  if there are no linked StyleSheets.                
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getStyleSheets" type="StyleSheet[]" line="439">
                <declaration name="retValue" type="StyleSheet[]" line="440"/>
                <scope line="442">
                    <scope line="443"/>
                    <scope line="447"/>
                </scope>
            </method>
            <javadoc line="454">
                Imports a style sheet from &lt;code&gt;url&lt;/code&gt;. The resulting rules
                  are directly added to the receiver. If you do not want the rules
                  to become part of the receiver, create a new StyleSheet and use
                  addStyleSheet to link it in.                
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="importStyleSheet" type="void" line="462">
                <params>
                    <param name="url" type="URL"/>
                </params>
                <comment line="473">
                    on error we simply have no styles... the html                    
                </comment>
                <comment line="474">
                    will look mighty wrong but still function.                    
                </comment>
                <scope line="463">
                    <declaration name="is" type="InputStream" line="464"/>
                    <declaration name="r" type="Reader" line="467"/>
                    <declaration name="parser" type="CssParser" line="468"/>
                </scope>
                <scope line="472"/>
            </method>
            <javadoc line="478">
                Sets the base. All import statements that are relative, will be
                  relative to &lt;code&gt;base&lt;/code&gt;.                
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="setBase" type="void" line="484">
                <params>
                    <param name="base" type="URL"/>
                </params>
            </method>
            <javadoc line="488">
                Returns the base.                
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getBase" type="URL" line="493"/>
            <javadoc line="497">
                Adds a CSS attribute to the given set.                
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="addCSSAttribute" type="void" line="503">
                <params>
                    <param name="attr" type="MutableAttributeSet"/>
                    <param name="key" type="CSS.Attribute"/>
                    <param name="value" type="String"/>
                </params>
            </method>
            <javadoc line="507">
                Adds a CSS attribute to the given set.                
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="addCSSAttributeFromHTML" type="boolean" line="513">
                <params>
                    <param name="attr" type="MutableAttributeSet"/>
                    <param name="key" type="CSS.Attribute"/>
                    <param name="value" type="String"/>
                </params>
                <declaration name="iValue" type="Object" line="514"/>
                <scope line="515"/>
            </method>
            <javadoc line="524">
                Converts a set of HTML attributes to an equivalent
                  set of CSS attributes.                
                <param>
                    htmlAttrSet AttributeSet containing the HTML attributes.                    
                </param>
            </javadoc>
            <method name="translateHTMLToCSS" type="AttributeSet" line="530">
                <params>
                    <param name="htmlAttrSet" type="AttributeSet"/>
                </params>
                <declaration name="cssAttrSet" type="AttributeSet" line="531"/>
                <declaration name="cssStyleSet" type="MutableAttributeSet" line="533"/>
            </method>
            <javadoc line="539">
                Adds an attribute to the given set, and returns
                  the new representative set.  This is reimplemented to
                  convert StyleConstant attributes to CSS prior to forwarding
                  to the superclass behavior.  The StyleConstants attribute
                  has no corresponding CSS entry, the StyleConstants attribute
                  is stored (but will likely be unused).                
                <param>
                    old the old attribute set                    
                </param>
                <param>
                    key the non-null attribute key                    
                </param>
                <param>
                    value the attribute value                    
                </param>
                <return>
                    the updated attribute set                    
                </return>
                <see>
                    MutableAttributeSet#addAttribute                    
                </see>
            </javadoc>
            <method name="addAttribute" type="AttributeSet" line="554">
                <params>
                    <param name="old" type="AttributeSet"/>
                    <param name="key" type="Object"/>
                    <param name="value" type="Object"/>
                </params>
                <comment line="556">
                    supers constructor will call this before returning,                    
                </comment>
                <comment line="557">
                    and we need to make sure CSS is non null.                    
                </comment>
                <scope line="555"/>
                <scope line="560">
                    <declaration name="tag" type="HTML.Tag" line="561"/>
                    <scope line="564"/>
                    <declaration name="cssValue" type="Object" line="568"/>
                    <scope line="570">
                        <declaration name="cssKey" type="Object" line="571"/>
                        <scope line="573"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="581">
                Adds a set of attributes to the element.  If any of these attributes
                  are StyleConstants attributes, they will be converted to CSS prior
                  to forwarding to the superclass behavior.                
                <param>
                    old the old attribute set                    
                </param>
                <param>
                    attr the attributes to add                    
                </param>
                <return>
                    the updated attribute set                    
                </return>
                <see>
                    MutableAttributeSet#addAttribute                    
                </see>
            </javadoc>
            <method name="addAttributes" type="AttributeSet" line="591">
                <params>
                    <param name="old" type="AttributeSet"/>
                    <param name="attr" type="AttributeSet"/>
                </params>
                <scope line="592"/>
            </method>
            <javadoc line="598">
                Removes an attribute from the set.  If the attribute is a StyleConstants
                  attribute, the request will be converted to a CSS attribute prior to
                  forwarding to the superclass behavior.                
                <param>
                    old the old set of attributes                    
                </param>
                <param>
                    key the non-null attribute name                    
                </param>
                <return>
                    the updated attribute set                    
                </return>
                <see>
                    MutableAttributeSet#removeAttribute                    
                </see>
            </javadoc>
            <method name="removeAttribute" type="AttributeSet" line="608">
                <params>
                    <param name="old" type="AttributeSet"/>
                    <param name="key" type="Object"/>
                </params>
                <scope line="609">
                    <declaration name="tag" type="HTML.Tag" line="610"/>
                    <scope line="612"/>
                    <declaration name="cssKey" type="Object" line="616"/>
                    <scope line="617"/>
                </scope>
            </method>
            <javadoc line="624">
                Removes a set of attributes for the element.  If any of the attributes
                  is a StyleConstants attribute, the request will be converted to a CSS
                  attribute prior to forwarding to the superclass behavior.                
                <param>
                    old the old attribute set                    
                </param>
                <param>
                    names the attribute names                    
                </param>
                <return>
                    the updated attribute set                    
                </return>
                <see>
                    MutableAttributeSet#removeAttributes                    
                </see>
            </javadoc>
            <method name="removeAttributes" type="AttributeSet" line="634">
                <params>
                    <param name="old" type="AttributeSet"/>
                    <param name="names" type="Enumeration<?>"/>
                </params>
                <comment line="635">
                    PENDING: Should really be doing something similar to                    
                </comment>
                <comment line="636">
                    removeHTMLTags here, but it is rather expensive to have to                    
                </comment>
                <comment line="637">
                    clone names                    
                </comment>
            </method>
            <javadoc line="641">
                Removes a set of attributes. If any of the attributes
                  is a StyleConstants attribute, the request will be converted to a CSS
                  attribute prior to forwarding to the superclass behavior.                
                <param>
                    old the old attribute set                    
                </param>
                <param>
                    attrs the attributes                    
                </param>
                <return>
                    the updated attribute set                    
                </return>
                <see>
                    MutableAttributeSet#removeAttributes                    
                </see>
            </javadoc>
            <method name="removeAttributes" type="AttributeSet" line="651">
                <params>
                    <param name="old" type="AttributeSet"/>
                    <param name="attrs" type="AttributeSet"/>
                </params>
                <scope line="652"/>
            </method>
            <javadoc line="658">
                Creates a compact set of attributes that might be shared.
                  This is a hook for subclasses that want to alter the
                  behavior of SmallAttributeSet.  This can be reimplemented
                  to return an AttributeSet that provides some sort of
                  attribute conversion.                
                <param>
                    a The set of attributes to be represented in the
                      the compact form.                    
                </param>
            </javadoc>
            <method name="createSmallAttributeSet" type="SmallAttributeSet" line="668">
                <params>
                    <param name="a" type="AttributeSet"/>
                </params>
            </method>
            <javadoc line="672">
                Creates a large set of attributes that should trade off
                  space for time.  This set will not be shared.  This is
                  a hook for subclasses that want to alter the behavior
                  of the larger attribute storage format (which is
                  SimpleAttributeSet by default).   This can be reimplemented
                  to return a MutableAttributeSet that provides some sort of
                  attribute conversion.                
                <param>
                    a The set of attributes to be represented in the
                      the larger form.                    
                </param>
            </javadoc>
            <method name="createLargeAttributeSet" type="MutableAttributeSet" line="684">
                <params>
                    <param name="a" type="AttributeSet"/>
                </params>
            </method>
            <javadoc line="688">
                For any StyleConstants key in attr that has an associated HTML.Tag,
                  it is removed from old. The resulting AttributeSet is then returned.                
            </javadoc>
            <method name="removeHTMLTags" type="AttributeSet" line="692">
                <params>
                    <param name="old" type="AttributeSet"/>
                    <param name="attr" type="AttributeSet"/>
                </params>
                <scope line="694">
                    <declaration name="names" type="Enumeration" line="695"/>
                    <scope line="697">
                        <declaration name="key" type="Object" line="698"/>
                        <scope line="700">
                            <declaration name="tag" type="HTML.Tag" line="701"/>
                            <scope line="704"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="713">
                Converts a set of attributes (if necessary) so that
                  any attributes that were specified as StyleConstants
                  attributes and have a CSS mapping, will be converted
                  to CSS attributes.                
            </javadoc>
            <method name="convertAttributeSet" type="AttributeSet" line="719">
                <params>
                    <param name="a" type="AttributeSet"/>
                </params>
                <comment line="722">
                    known to be converted.                    
                </comment>
                <comment line="725">
                    in most cases, there are no StyleConstants attributes                    
                </comment>
                <comment line="726">
                    so we iterate the collection of keys to avoid creating                    
                </comment>
                <comment line="727">
                    a new set.                    
                </comment>
                <comment line="732">
                    we really need to do a conversion, iterate again                    
                </comment>
                <comment line="733">
                    building a new set.                    
                </comment>
                <comment line="740">
                    convert the StyleConstants attribute if possible                    
                </comment>
                <scope line="721"/>
                <declaration name="names" type="Enumeration" line="728"/>
                <scope line="729">
                    <declaration name="name" type="Object" line="730"/>
                    <scope line="731">
                        <declaration name="converted" type="MutableAttributeSet" line="734"/>
                        <declaration name="keys" type="Enumeration" line="735"/>
                        <scope line="736">
                            <declaration name="key" type="Object" line="737"/>
                            <declaration name="cssValue" type="Object" line="738"/>
                            <scope line="739">
                                <declaration name="cssKey" type="Object" line="741"/>
                                <scope line="743">
                                    <declaration name="value" type="Object" line="744"/>
                                    <scope line="747"/>
                                </scope>
                            </scope>
                            <scope line="752"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <class name="LargeConversionSet" line="762">
                <extends class="SimpleAttributeSet"/>
                <comment line="1076">
                                        
                </comment>
                <comment line="1109">
                                        
                </comment>
                <comment line="1208">
                                        
                </comment>
                <comment line="1684">
                    A set of temporary variables that can be used in whatever way.                    
                </comment>
                <comment line="1931">
                    only certain tags are concerned about orientation
                     &lt;dir&gt;, &lt;menu&gt;, &lt;ul&gt;, &lt;ol&gt;
                     for all others we return true. It is implemented this way
                     for performance purposes                    
                </comment>
                <comment line="2005">
                    Bitmask, used to indicate what margins are relative:                    
                </comment>
                <comment line="2006">
                    bit 0 for top, 1 for bottom, 2 for left and 3 for right.                    
                </comment>
                <comment line="2377">
                                        
                </comment>
                <comment line="2456">
                    bit mask: 0 for repeat x, 1 for repeat y, 2 for horiz relative,                    
                </comment>
                <comment line="2457">
                    3 for vert relative                    
                </comment>
                <comment line="2459">
                    These are used when painting, updatePaintCoordinates updates them.                    
                </comment>
                <comment line="2689">
                    --- AttributeSet methods ----------------------------                    
                </comment>
                <comment line="2779">
                    PENDING(sky): Decide what to do with this. Either make it                    
                </comment>
                <comment line="2780">
                    contain a SimpleAttributeSet that modify methods are delegated to,                    
                </comment>
                <comment line="2781">
                    or change getRule to return an AttributeSet and then don&apos;t make this                    
                </comment>
                <comment line="2782">
                    implement Style.                    
                </comment>
                <comment line="3191">
                                        
                </comment>
                <comment line="3192">
                    CSSParserCallback methods, public to implement the interface.                    
                </comment>
                <comment line="3193">
                                        
                </comment>
                <javadoc line="762">
                    Large set of attributes that does conversion of requests
                      for attributes of type StyleConstants.                    
                </javadoc>
                <javadoc line="768">
                    Creates a new attribute set based on a supplied set of attributes.                    
                    <param>
                        source the set of attributes                        
                    </param>
                </javadoc>
                <method name="LargeConversionSet" type="constructor" line="773">
                    <params>
                        <param name="source" type="AttributeSet"/>
                    </params>
                </method>
                <method name="LargeConversionSet" type="constructor" line="777"/>
                <javadoc line="781">
                    Checks whether a given attribute is defined.                    
                    <param>
                        key the attribute key                        
                    </param>
                    <return>
                        true if the attribute is defined                        
                    </return>
                    <see>
                        AttributeSet#isDefined                        
                    </see>
                </javadoc>
                <method name="isDefined" type="boolean" line="788">
                    <params>
                        <param name="key" type="Object"/>
                    </params>
                    <scope line="789">
                        <declaration name="cssKey" type="Object" line="790"/>
                        <scope line="792"/>
                    </scope>
                </method>
                <javadoc line="799">
                    Gets the value of an attribute.                    
                    <param>
                        key the attribute name                        
                    </param>
                    <return>
                        the attribute value                        
                    </return>
                    <see>
                        AttributeSet#getAttribute                        
                    </see>
                </javadoc>
                <method name="getAttribute" type="Object" line="806">
                    <params>
                        <param name="key" type="Object"/>
                    </params>
                    <scope line="807">
                        <declaration name="cssKey" type="Object" line="808"/>
                        <scope line="810">
                            <declaration name="value" type="Object" line="811"/>
                            <scope line="812"/>
                        </scope>
                    </scope>
                </method>
            </class>
            <class name="SmallConversionSet" line="822">
                <extends class="SmallAttributeSet"/>
                <comment line="1076">
                                        
                </comment>
                <comment line="1109">
                                        
                </comment>
                <comment line="1208">
                                        
                </comment>
                <comment line="1684">
                    A set of temporary variables that can be used in whatever way.                    
                </comment>
                <comment line="1931">
                    only certain tags are concerned about orientation
                     &lt;dir&gt;, &lt;menu&gt;, &lt;ul&gt;, &lt;ol&gt;
                     for all others we return true. It is implemented this way
                     for performance purposes                    
                </comment>
                <comment line="2005">
                    Bitmask, used to indicate what margins are relative:                    
                </comment>
                <comment line="2006">
                    bit 0 for top, 1 for bottom, 2 for left and 3 for right.                    
                </comment>
                <comment line="2377">
                                        
                </comment>
                <comment line="2456">
                    bit mask: 0 for repeat x, 1 for repeat y, 2 for horiz relative,                    
                </comment>
                <comment line="2457">
                    3 for vert relative                    
                </comment>
                <comment line="2459">
                    These are used when painting, updatePaintCoordinates updates them.                    
                </comment>
                <comment line="2689">
                    --- AttributeSet methods ----------------------------                    
                </comment>
                <comment line="2779">
                    PENDING(sky): Decide what to do with this. Either make it                    
                </comment>
                <comment line="2780">
                    contain a SimpleAttributeSet that modify methods are delegated to,                    
                </comment>
                <comment line="2781">
                    or change getRule to return an AttributeSet and then don&apos;t make this                    
                </comment>
                <comment line="2782">
                    implement Style.                    
                </comment>
                <comment line="3191">
                                        
                </comment>
                <comment line="3192">
                    CSSParserCallback methods, public to implement the interface.                    
                </comment>
                <comment line="3193">
                                        
                </comment>
                <javadoc line="822">
                    Small set of attributes that does conversion of requests
                      for attributes of type StyleConstants.                    
                </javadoc>
                <javadoc line="828">
                    Creates a new attribute set based on a supplied set of attributes.                    
                    <param>
                        attrs the set of attributes                        
                    </param>
                </javadoc>
                <method name="SmallConversionSet" type="constructor" line="833">
                    <params>
                        <param name="attrs" type="AttributeSet"/>
                    </params>
                </method>
                <javadoc line="837">
                    Checks whether a given attribute is defined.                    
                    <param>
                        key the attribute key                        
                    </param>
                    <return>
                        true if the attribute is defined                        
                    </return>
                    <see>
                        AttributeSet#isDefined                        
                    </see>
                </javadoc>
                <method name="isDefined" type="boolean" line="844">
                    <params>
                        <param name="key" type="Object"/>
                    </params>
                    <scope line="845">
                        <declaration name="cssKey" type="Object" line="846"/>
                        <scope line="848"/>
                    </scope>
                </method>
                <javadoc line="855">
                    Gets the value of an attribute.                    
                    <param>
                        key the attribute name                        
                    </param>
                    <return>
                        the attribute value                        
                    </return>
                    <see>
                        AttributeSet#getAttribute                        
                    </see>
                </javadoc>
                <method name="getAttribute" type="Object" line="862">
                    <params>
                        <param name="key" type="Object"/>
                    </params>
                    <scope line="863">
                        <declaration name="cssKey" type="Object" line="864"/>
                        <scope line="866">
                            <declaration name="value" type="Object" line="867"/>
                            <scope line="868"/>
                        </scope>
                    </scope>
                </method>
            </class>
            <javadoc line="880">
                Fetches the font to use for the given set of attributes.                
            </javadoc>
            <method name="getFont" type="Font" line="883">
                <params>
                    <param name="a" type="AttributeSet"/>
                </params>
            </method>
            <javadoc line="887">
                Takes a set of attributes and turn it into a foreground color
                  specification.  This might be used to specify things
                  like brighter, more hue, etc.                
                <param>
                    a the set of attributes                    
                </param>
                <return>
                    the color                    
                </return>
            </javadoc>
            <method name="getForeground" type="Color" line="895">
                <params>
                    <param name="a" type="AttributeSet"/>
                </params>
                <declaration name="c" type="Color" line="896"/>
                <scope line="897"/>
            </method>
            <javadoc line="903">
                Takes a set of attributes and turn it into a background color
                  specification.  This might be used to specify things
                  like brighter, more hue, etc.                
                <param>
                    a the set of attributes                    
                </param>
                <return>
                    the color                    
                </return>
            </javadoc>
            <method name="getBackground" type="Color" line="911">
                <params>
                    <param name="a" type="AttributeSet"/>
                </params>
            </method>
            <javadoc line="915">
                Fetches the box formatter to use for the given set
                  of CSS attributes.                
            </javadoc>
            <method name="getBoxPainter" type="BoxPainter" line="919">
                <params>
                    <param name="a" type="AttributeSet"/>
                </params>
            </method>
            <javadoc line="923">
                Fetches the list formatter to use for the given set
                  of CSS attributes.                
            </javadoc>
            <method name="getListPainter" type="ListPainter" line="927">
                <params>
                    <param name="a" type="AttributeSet"/>
                </params>
            </method>
            <javadoc line="931">
                Sets the base font size, with valid values between 1 and 7.                
            </javadoc>
            <method name="setBaseFontSize" type="void" line="934">
                <params>
                    <param name="sz" type="int"/>
                </params>
            </method>
            <javadoc line="938">
                Sets the base font size from the passed in String. The string
                  can either identify a specific font size, with legal values between
                  1 and 7, or identifiy a relative font size such as +1 or -2.                
            </javadoc>
            <method name="setBaseFontSize" type="void" line="943">
                <params>
                    <param name="size" type="String"/>
                </params>
            </method>
            <method name="getIndexOfSize" type="int" line="947">
                <params>
                    <param name="pt" type="float"/>
                </params>
            </method>
            <javadoc line="951">
                Returns the point size, given a size index.                
            </javadoc>
            <method name="getPointSize" type="float" line="954">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="958">
                Given a string such as &quot;+2&quot;, &quot;-2&quot;, or &quot;2&quot;,
                  returns a point size value.                
            </javadoc>
            <method name="getPointSize" type="float" line="962">
                <params>
                    <param name="size" type="String"/>
                </params>
            </method>
            <javadoc line="966">
                Converts a color string such as &quot;RED&quot; or &quot;#NNNNNN&quot; to a Color.
                  Note: This will only convert the HTML3.2 color strings
                  or a string of length 7;
                  otherwise, it will return null.                
            </javadoc>
            <method name="stringToColor" type="Color" line="972">
                <params>
                    <param name="string" type="String"/>
                </params>
            </method>
            <javadoc line="976">
                Returns the ImageIcon to draw in the background for
                  &lt;code&gt;attr&lt;/code&gt;.                
            </javadoc>
            <method name="getBackgroundImage" type="ImageIcon" line="980">
                <params>
                    <param name="attr" type="AttributeSet"/>
                </params>
                <declaration name="value" type="Object" line="981"/>
                <scope line="983"/>
            </method>
            <javadoc line="989">
                Adds a rule into the StyleSheet.                
                <param>
                    selector the selector to use for the rule.
                      This will be a set of simple selectors, and must
                      be a length of 1 or greater.                    
                </param>
                <param>
                    declaration the set of CSS attributes that
                      make up the rule.                    
                </param>
            </javadoc>
            <method name="addRule" type="void" line="999">
                <params>
                    <param name="selector" type="String[]"/>
                    <param name="declaration" type="AttributeSet"/>
                    <param name="isLinked" type="boolean"/>
                </params>
                <comment line="1010">
                    Notice how the rule is first created, and it not part of                    
                </comment>
                <comment line="1011">
                    the synchronized block. It is done like this as creating                    
                </comment>
                <comment line="1012">
                    a new rule will fire a ChangeEvent. We do not want to be                    
                </comment>
                <comment line="1013">
                    holding the lock when calling to other objects, it can                    
                </comment>
                <comment line="1014">
                    result in deadlock.                    
                </comment>
                <declaration name="n" type="int" line="1000"/>
                <declaration name="sb" type="StringBuilder" line="1001"/>
                <scope line="1003"/>
                <declaration name="selectorName" type="String" line="1007"/>
                <declaration name="rule" type="Style" line="1008"/>
                <scope line="1009">
                    <declaration name="altRule" type="Style" line="1015"/>
                    <scope line="1016">
                        <declaration name="mapping" type="SelectorMapping" line="1017"/>
                        <scope line="1018"/>
                        <scope line="1023"/>
                    </scope>
                </scope>
                <scope line="1031"/>
            </method>
            <javadoc line="1042">
                Updates the attributes of the rules to reference any related
                  rules in &lt;code&gt;ss&lt;/code&gt;.                
            </javadoc>
            <method name="linkStyleSheetAt" type="void" line="1046">
                <params>
                    <param name="ss" type="StyleSheet"/>
                    <param name="index" type="int"/>
                </params>
                <scope line="1047">
                    <declaration name="values" type="Enumeration&lt;ResolvedStyle&gt;" line="1048"/>
                    <scope line="1049">
                        <declaration name="rule" type="ResolvedStyle" line="1050"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1057">
                Removes references to the rules in &lt;code&gt;ss&lt;/code&gt;.
                  &lt;code&gt;index&lt;/code&gt; gives the index the StyleSheet was at, that is
                  how many StyleSheets had been added before it.                
            </javadoc>
            <method name="unlinkStyleSheet" type="void" line="1062">
                <params>
                    <param name="ss" type="StyleSheet"/>
                    <param name="index" type="int"/>
                </params>
                <scope line="1063">
                    <declaration name="values" type="Enumeration&lt;ResolvedStyle&gt;" line="1064"/>
                    <scope line="1065">
                        <declaration name="rule" type="ResolvedStyle" line="1066"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1072">
                Returns the simple selectors that comprise selector.                
            </javadoc>
            <method name="getSimpleSelectors" type="String[]" line="1076">
                <params>
                    <param name="selector" type="String"/>
                </params>
                <comment line="1075">
                                        
                </comment>
                <declaration name="sb" type="SearchBuffer" line="1078"/>
                <declaration name="selectors" type="Vector&lt;String&gt;" line="1079"/>
                <declaration name="lastIndex" type="int" line="1080"/>
                <declaration name="length" type="int" line="1081"/>
                <scope line="1082">
                    <declaration name="newIndex" type="int" line="1083"/>
                    <scope line="1084">
                        <scope line="1086"/>
                        <scope line="1089"/>
                    </scope>
                    <scope line="1093"/>
                </scope>
                <declaration name="retValue" type="String[]" line="1098"/>
            </method>
            <javadoc line="1104">
                Returns a string that only has one space between simple selectors,
                  which may be the passed in String.                
            </javadoc>
            <method name="cleanSelectorString" type="String" line="1108">
                <params>
                    <param name="selector" type="String"/>
                </params>
                <comment line="1108">
                                        
                </comment>
                <comment line="1130">
                    It was fine.                    
                </comment>
                <declaration name="lastWasSpace" type="boolean" line="1109"/>
                <scope line="1111">
                    <scope line="1114"/>
                </scope>
                <scope line="1127"/>
            </method>
            <javadoc line="1134">
                Returns a new String that contains only one space between non
                  white space characters.                
            </javadoc>
            <method name="_cleanSelectorString" type="String" line="1138">
                <params>
                    <param name="selector" type="String"/>
                </params>
                <comment line="1178">
                    Remove last space.                    
                </comment>
                <declaration name="sb" type="SearchBuffer" line="1139"/>
                <declaration name="buff" type="StringBuffer" line="1140"/>
                <declaration name="lastWasSpace" type="boolean" line="1141"/>
                <declaration name="lastIndex" type="int" line="1142"/>
                <declaration name="chars" type="char[]" line="1143"/>
                <declaration name="numChars" type="int" line="1144"/>
                <declaration name="retValue" type="String" line="1145"/>
                <scope line="1146">
                    <scope line="1147">
                        <scope line="1150">
                            <scope line="1152"/>
                        </scope>
                        <scope line="1162">
                            <scope line="1164"/>
                        </scope>
                    </scope>
                    <scope line="1177"/>
                    <scope line="1181"/>
                </scope>
                <scope line="1186"/>
            </method>
            <javadoc line="1192">
                Returns the root selector mapping that all selectors are relative
                  to. This is an inverted graph of the selectors.                
            </javadoc>
            <method name="getRootSelectorMapping" type="SelectorMapping" line="1196"/>
            <javadoc line="1200">
                Returns the specificity of the passed in String. It assumes the
                  passed in string doesn&apos;t contain junk, that is each selector is
                  separated by a space and each selector at most contains one . or one
                  #. A simple selector has a weight of 1, an id selector has a weight
                  of 100, and a class selector has a weight of 10000.                
            </javadoc>
            <method name="getSpecificity" type="int" line="1207">
                <params>
                    <param name="selector" type="String"/>
                </params>
                <comment line="1207">
                                        
                </comment>
                <declaration name="specificity" type="int" line="1208"/>
                <declaration name="lastWasSpace" type="boolean" line="1209"/>
                <scope line="1212">
                    <scope line="1224"/>
                </scope>
            </method>
            <javadoc line="1233">
                Returns the style that linked attributes should be added to. This
                  will create the style if necessary.                
            </javadoc>
            <method name="getLinkedStyle" type="Style" line="1237">
                <params>
                    <param name="localStyle" type="Style"/>
                </params>
                <comment line="1238">
                    NOTE: This is not synchronized, and the caller of this does                    
                </comment>
                <comment line="1239">
                    not synchronize. There is the chance for one of the callers to                    
                </comment>
                <comment line="1240">
                    overwrite the existing resolved parent, but it is quite rare.                    
                </comment>
                <comment line="1241">
                    The reason this is left like this is because setResolveParent                    
                </comment>
                <comment line="1242">
                    will fire a ChangeEvent. It is really, REALLY bad for us to                    
                </comment>
                <comment line="1243">
                    hold a lock when calling outside of us, it may cause a deadlock.                    
                </comment>
                <declaration name="retStyle" type="Style" line="1244"/>
                <scope line="1245"/>
            </method>
            <javadoc line="1252">
                Returns the resolved style for &lt;code&gt;selector&lt;/code&gt;. This will
                  create the resolved style, if necessary.                
            </javadoc>
            <method name="getResolvedStyle" type="Style" line="1258">
                <params>
                    <param name="selector" type="String"/>
                    <param name="elements" type="Vector"/>
                    <param name="t" type="HTML.Tag"/>
                </params>
                <declaration name="retStyle" type="Style" line="1259"/>
                <scope line="1260"/>
            </method>
            <javadoc line="1266">
                Returns the resolved style for &lt;code&gt;selector&lt;/code&gt;. This will
                  create the resolved style, if necessary.                
            </javadoc>
            <method name="getResolvedStyle" type="Style" line="1270">
                <params>
                    <param name="selector" type="String"/>
                </params>
                <declaration name="retStyle" type="Style" line="1271"/>
                <scope line="1272"/>
            </method>
            <javadoc line="1278">
                Adds &lt;code&gt;mapping&lt;/code&gt; to &lt;code&gt;elements&lt;/code&gt;. It is added
                  such that &lt;code&gt;elements&lt;/code&gt; will remain ordered by
                  specificity.                
            </javadoc>
            <method name="addSortedStyle" type="void" line="1283">
                <params>
                    <param name="mapping" type="SelectorMapping"/>
                    <param name="elements" type="Vector<SelectorMapping>"/>
                </params>
                <declaration name="size" type="int" line="1284"/>
                <scope line="1286">
                    <declaration name="specificity" type="int" line="1287"/>
                    <scope line="1289">
                        <scope line="1290"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1299">
                Adds &lt;code&gt;parentMapping&lt;/code&gt; to &lt;code&gt;styles&lt;/code&gt;, and
                  recursively calls this method if &lt;code&gt;parentMapping&lt;/code&gt; has
                  any child mappings for any of the Elements in &lt;code&gt;elements&lt;/code&gt;.                
            </javadoc>
            <method name="getStyles" type="void" line="1308">
                <params>
                    <param name="parentMapping" type="SelectorMapping"/>
                    <param name="styles" type="Vector<SelectorMapping>"/>
                    <param name="tags" type="String[]"/>
                    <param name="ids" type="String[]"/>
                    <param name="classes" type="String[]"/>
                    <param name="index" type="int"/>
                    <param name="numElements" type="int"/>
                    <param name="alreadyChecked" type="Hashtable<SelectorMapping,SelectorMapping>"/>
                </params>
                <comment line="1309">
                    Avoid desending the same mapping twice.                    
                </comment>
                <scope line="1310"/>
                <declaration name="style" type="Style" line="1314"/>
                <scope line="1315"/>
                <scope line="1318">
                    <declaration name="tagString" type="String" line="1319"/>
                    <scope line="1320">
                        <declaration name="childMapping" type="SelectorMapping" line="1321"/>
                        <scope line="1323"/>
                        <scope line="1327">
                            <declaration name="className" type="String" line="1328"/>
                            <scope line="1331"/>
                            <scope line="1337"/>
                        </scope>
                        <scope line="1342">
                            <declaration name="idName" type="String" line="1343"/>
                            <scope line="1346"/>
                            <scope line="1352"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="1361">
                Creates and returns a Style containing all the rules that match
                  &lt;code&gt;selector&lt;/code&gt;.                
            </javadoc>
            <method name="createResolvedStyle" type="Style" line="1367">
                <params>
                    <param name="selector" type="String"/>
                    <param name="tags" type="String[]"/>
                    <param name="ids" type="String[]"/>
                    <param name="classes" type="String[]"/>
                </params>
                <comment line="1371">
                    Determine all the Styles that are appropriate, placing them                    
                </comment>
                <comment line="1372">
                    in tempVector                    
                </comment>
                <comment line="1413">
                    Create a new Style that will delegate to all the matching                    
                </comment>
                <comment line="1414">
                    Styles.                    
                </comment>
                <comment line="1422">
                    Get the AttributeSet from linked style sheets.                    
                </comment>
                <declaration name="sb" type="SearchBuffer" line="1368"/>
                <declaration name="tempVector" type="Vector&lt;SelectorMapping&gt;" line="1369"/>
                <declaration name="tempHashtable" type="Hashtable&lt;SelectorMapping,SelectorMapping&gt;" line="1370"/>
                <scope line="1373">
                    <declaration name="mapping" type="SelectorMapping" line="1374"/>
                    <declaration name="numElements" type="int" line="1375"/>
                    <declaration name="tagString" type="String" line="1376"/>
                    <declaration name="childMapping" type="SelectorMapping" line="1377"/>
                    <scope line="1379"/>
                    <scope line="1383">
                        <declaration name="className" type="String" line="1384"/>
                        <scope line="1387"/>
                        <scope line="1393"/>
                    </scope>
                    <scope line="1398">
                        <declaration name="idName" type="String" line="1399"/>
                        <scope line="1402"/>
                        <scope line="1408"/>
                    </scope>
                    <declaration name="numLinkedSS" type="int" line="1415"/>
                    <declaration name="numStyles" type="int" line="1417"/>
                    <declaration name="attrs" type="AttributeSet[]" line="1418"/>
                    <scope line="1419"/>
                    <scope line="1423">
                        <declaration name="attr" type="AttributeSet" line="1424"/>
                        <scope line="1425"/>
                        <scope line="1428"/>
                    </scope>
                    <declaration name="retStyle" type="ResolvedStyle" line="1432"/>
                </scope>
                <scope line="1437"/>
            </method>
            <javadoc line="1442">
                Creates and returns a Style containing all the rules that
                  matches &lt;code&gt;selector&lt;/code&gt;.                
                <param>
                    elements  a Vector of all the Elements
                      the style is being asked for. The
                      first Element is the deepest Element, with the last Element
                      representing the root.                    
                </param>
                <param>
                    t         the Tag to use for
                      the first Element in <code>elements</code>                    
                </param>
            </javadoc>
            <method name="createResolvedStyle" type="Style" line="1454">
                <params>
                    <param name="selector" type="String"/>
                    <param name="elements" type="Vector"/>
                    <param name="t" type="HTML.Tag"/>
                </params>
                <comment line="1456">
                    Build three arrays, one for tags, one for class&apos;s, and one for                    
                </comment>
                <comment line="1457">
                    id&apos;s                    
                </comment>
                <comment line="1465">
                    For leafs, we use the second tier attributes.                    
                </comment>
                <declaration name="numElements" type="int" line="1455"/>
                <declaration name="tags" type="String" line="1458"/>
                <declaration name="ids" type="String" line="1459"/>
                <declaration name="classes" type="String" line="1460"/>
                <scope line="1461">
                    <declaration name="e" type="Element" line="1462"/>
                    <declaration name="attr" type="AttributeSet" line="1463"/>
                    <scope line="1464">
                        <declaration name="testAttr" type="Object" line="1466"/>
                        <scope line="1467"/>
                        <scope line="1470"/>
                    </scope>
                    <scope line="1474">
                        <declaration name="tag" type="HTML.Tag" line="1475"/>
                        <scope line="1477"/>
                        <scope line="1480"/>
                        <scope line="1483"/>
                        <scope line="1487"/>
                        <scope line="1490"/>
                        <scope line="1494"/>
                    </scope>
                    <scope line="1498"/>
                </scope>
            </method>
            <javadoc line="1506">
                Creates and returns a Style containing all the rules that match
                  &lt;code&gt;selector&lt;/code&gt;. It is assumed that each simple selector
                  in &lt;code&gt;selector&lt;/code&gt; is separated by a space.                
            </javadoc>
            <method name="createResolvedStyle" type="Style" line="1511">
                <params>
                    <param name="selector" type="String"/>
                </params>
                <comment line="1513">
                    Will contain the tags, ids, and classes, in that order.                    
                </comment>
                <comment line="1536">
                    #.                    
                </comment>
                <comment line="1560">
                    .#                    
                </comment>
                <comment line="1586">
                    .                    
                </comment>
                <comment line="1605">
                    #                    
                </comment>
                <comment line="1624">
                    id                    
                </comment>
                <comment line="1632">
                    Create the tag, id, and class arrays.                    
                </comment>
                <declaration name="sb" type="SearchBuffer" line="1512"/>
                <declaration name="elements" type="Vector&lt;String&gt;" line="1514"/>
                <scope line="1515">
                    <declaration name="done" type="boolean" line="1516"/>
                    <declaration name="dotIndex" type="int" line="1517"/>
                    <declaration name="spaceIndex" type="int" line="1518"/>
                    <declaration name="poundIndex" type="int" line="1519"/>
                    <declaration name="lastIndex" type="int" line="1520"/>
                    <declaration name="length" type="int" line="1521"/>
                    <scope line="1522">
                        <scope line="1523"/>
                        <scope line="1526"/>
                        <scope line="1530"/>
                        <scope line="1534">
                            <scope line="1535">
                                <scope line="1537"/>
                                <scope line="1540"/>
                                <scope line="1544"/>
                                <scope line="1548"/>
                                <scope line="1551"/>
                                <scope line="1554"/>
                            </scope>
                            <scope line="1559">
                                <scope line="1561"/>
                                <scope line="1564"/>
                                <scope line="1568"/>
                                <scope line="1572"/>
                                <scope line="1575"/>
                                <scope line="1578"/>
                            </scope>
                        </scope>
                        <scope line="1585">
                            <scope line="1587"/>
                            <scope line="1590"/>
                            <scope line="1594"/>
                            <scope line="1597"/>
                        </scope>
                        <scope line="1604">
                            <scope line="1606"/>
                            <scope line="1609"/>
                            <scope line="1614"/>
                            <scope line="1617"/>
                        </scope>
                        <scope line="1623"/>
                    </scope>
                    <declaration name="total" type="int" line="1633"/>
                    <declaration name="numTags" type="int" line="1634"/>
                    <declaration name="tags" type="String[]" line="1635"/>
                    <declaration name="ids" type="String[]" line="1636"/>
                    <declaration name="classes" type="String[]" line="1637"/>
                    <scope line="1639"/>
                </scope>
                <scope line="1646"/>
            </method>
            <javadoc line="1651">
                Should be invoked when a new rule is added that did not previously
                  exist. Goes through and refreshes the necessary resolved
                  rules.                
            </javadoc>
            <method name="refreshResolvedRules" type="void" line="1659">
                <params>
                    <param name="selectorName" type="String"/>
                    <param name="selector" type="String[]"/>
                    <param name="newStyle" type="Style"/>
                    <param name="specificity" type="int"/>
                </params>
                <scope line="1660">
                    <declaration name="values" type="Enumeration&lt;ResolvedStyle&gt;" line="1661"/>
                    <scope line="1662">
                        <declaration name="style" type="ResolvedStyle" line="1663"/>
                        <scope line="1664"/>
                    </scope>
                </scope>
            </method>
            <class name="SearchBuffer" line="1672">
                <comment line="1076">
                                        
                </comment>
                <comment line="1109">
                                        
                </comment>
                <comment line="1208">
                                        
                </comment>
                <comment line="1684">
                    A set of temporary variables that can be used in whatever way.                    
                </comment>
                <comment line="1931">
                    only certain tags are concerned about orientation
                     &lt;dir&gt;, &lt;menu&gt;, &lt;ul&gt;, &lt;ol&gt;
                     for all others we return true. It is implemented this way
                     for performance purposes                    
                </comment>
                <comment line="2005">
                    Bitmask, used to indicate what margins are relative:                    
                </comment>
                <comment line="2006">
                    bit 0 for top, 1 for bottom, 2 for left and 3 for right.                    
                </comment>
                <comment line="2377">
                                        
                </comment>
                <comment line="2456">
                    bit mask: 0 for repeat x, 1 for repeat y, 2 for horiz relative,                    
                </comment>
                <comment line="2457">
                    3 for vert relative                    
                </comment>
                <comment line="2459">
                    These are used when painting, updatePaintCoordinates updates them.                    
                </comment>
                <comment line="2689">
                    --- AttributeSet methods ----------------------------                    
                </comment>
                <comment line="2779">
                    PENDING(sky): Decide what to do with this. Either make it                    
                </comment>
                <comment line="2780">
                    contain a SimpleAttributeSet that modify methods are delegated to,                    
                </comment>
                <comment line="2781">
                    or change getRule to return an AttributeSet and then don&apos;t make this                    
                </comment>
                <comment line="2782">
                    implement Style.                    
                </comment>
                <comment line="3191">
                                        
                </comment>
                <comment line="3192">
                    CSSParserCallback methods, public to implement the interface.                    
                </comment>
                <comment line="3193">
                                        
                </comment>
                <javadoc line="1672">
                    A temporary class used to hold a Vector, a StringBuffer and a
                      Hashtable. This is used to avoid allocing a lot of garbage when
                      searching for rules. Use the static method obtainSearchBuffer and
                      releaseSearchBuffer to get a SearchBuffer, and release it when
                      done.                    
                </javadoc>
                <declaration name="searchBuffers" type="Stack&lt;SearchBuffer&gt;" line="1680"/>
                <javadoc line="1680">
                    A stack containing instances of SearchBuffer. Used in getting
                      rules.                    
                </javadoc>
                <declaration name="vector" type="Vector" line="1684"/>
                <declaration name="stringBuffer" type="StringBuffer" line="1685"/>
                <declaration name="hashtable" type="Hashtable" line="1686"/>
                <javadoc line="1688">
                    Returns an instance of SearchBuffer. Be sure and issue
                      a releaseSearchBuffer when done with it.                    
                </javadoc>
                <method name="obtainSearchBuffer" type="SearchBuffer" line="1692">
                    <declaration name="sb" type="SearchBuffer" line="1693"/>
                    <scope line="1694">
                        <scope line="1695"/>
                        <scope line="1697"/>
                    </scope>
                    <scope line="1700"/>
                </method>
                <javadoc line="1706">
                    Adds &lt;code&gt;sb&lt;/code&gt; to the stack of SearchBuffers that can
                      be used.                    
                </javadoc>
                <method name="releaseSearchBuffer" type="void" line="1710">
                    <params>
                        <param name="sb" type="SearchBuffer"/>
                    </params>
                </method>
                <method name="getStringBuffer" type="StringBuffer" line="1715">
                    <scope line="1716"/>
                </method>
                <method name="getVector" type="Vector" line="1722">
                    <scope line="1723"/>
                </method>
                <method name="getHashtable" type="Hashtable" line="1729">
                    <scope line="1730"/>
                </method>
                <method name="empty" type="void" line="1736">
                    <scope line="1737"/>
                    <scope line="1740"/>
                    <scope line="1743"/>
                </method>
            </class>
            <declaration name="noBorder" type="Border" line="1750"/>
            <class name="BoxPainter" line="1752">
                <comment line="1076">
                                        
                </comment>
                <comment line="1109">
                                        
                </comment>
                <comment line="1208">
                                        
                </comment>
                <comment line="1684">
                    A set of temporary variables that can be used in whatever way.                    
                </comment>
                <comment line="1931">
                    only certain tags are concerned about orientation
                     &lt;dir&gt;, &lt;menu&gt;, &lt;ul&gt;, &lt;ol&gt;
                     for all others we return true. It is implemented this way
                     for performance purposes                    
                </comment>
                <comment line="2005">
                    Bitmask, used to indicate what margins are relative:                    
                </comment>
                <comment line="2006">
                    bit 0 for top, 1 for bottom, 2 for left and 3 for right.                    
                </comment>
                <comment line="2377">
                                        
                </comment>
                <comment line="2456">
                    bit mask: 0 for repeat x, 1 for repeat y, 2 for horiz relative,                    
                </comment>
                <comment line="2457">
                    3 for vert relative                    
                </comment>
                <comment line="2459">
                    These are used when painting, updatePaintCoordinates updates them.                    
                </comment>
                <comment line="2689">
                    --- AttributeSet methods ----------------------------                    
                </comment>
                <comment line="2779">
                    PENDING(sky): Decide what to do with this. Either make it                    
                </comment>
                <comment line="2780">
                    contain a SimpleAttributeSet that modify methods are delegated to,                    
                </comment>
                <comment line="2781">
                    or change getRule to return an AttributeSet and then don&apos;t make this                    
                </comment>
                <comment line="2782">
                    implement Style.                    
                </comment>
                <comment line="3191">
                                        
                </comment>
                <comment line="3192">
                    CSSParserCallback methods, public to implement the interface.                    
                </comment>
                <comment line="3193">
                                        
                </comment>
                <implements interface="Serializable"/>
                <javadoc line="1752">
                    Class to carry out some of the duties of
                      CSS formatting.  Implementations of this
                      class enable views to present the CSS formatting
                      while not knowing anything about how the CSS values
                      are being cached.
                      &lt;p&gt;
                      As a delegate of Views, this object is responsible for
                      the insets of a View and making sure the background
                      is maintained according to the CSS attributes.                    
                </javadoc>
                <method name="BoxPainter" type="constructor" line="1765">
                    <params>
                        <param name="a" type="AttributeSet"/>
                        <param name="css" type="CSS"/>
                        <param name="ss" type="StyleSheet"/>
                    </params>
                    <scope line="1775"/>
                </method>
                <javadoc line="1780">
                    Fetches a border to render for the given attributes.
                      PENDING(prinz) This is pretty badly hacked at the
                      moment.                    
                </javadoc>
                <method name="getBorder" type="Border" line="1785">
                    <params>
                        <param name="a" type="AttributeSet"/>
                    </params>
                </method>
                <javadoc line="1789">
                    Fetches the color to use for borders.  This will either be
                      the value specified by the border-color attribute (which
                      is not inherited), or it will default to the color attribute
                      (which is inherited).                    
                </javadoc>
                <method name="getBorderColor" type="Color" line="1795">
                    <params>
                        <param name="a" type="AttributeSet"/>
                    </params>
                    <declaration name="color" type="Color" line="1796"/>
                    <scope line="1797">
                        <scope line="1799"/>
                    </scope>
                </method>
                <javadoc line="1806">
                    Fetches the inset needed on a given side to
                      account for the margin, border, and padding.                    
                    <param>
                        side The size of the box to fetch the
                          inset for.  This can be View.TOP,
                          View.LEFT, View.BOTTOM, or View.RIGHT.                        
                    </param>
                    <param>
                        v the view making the request.  This is
                          used to get the AttributeSet, and may be used to
                          resolve percentage arguments.                        
                    </param>
                    <exception>
                        IllegalArgumentException for an invalid direction                        
                    </exception>
                </javadoc>
                <method name="getInset" type="float" line="1818">
                    <params>
                        <param name="side" type="int"/>
                        <param name="v" type="View"/>
                    </params>
                    <declaration name="a" type="AttributeSet" line="1819"/>
                    <declaration name="inset" type="float" line="1820"/>
                </method>
                <javadoc line="1850">
                    Paints the CSS box according to the attributes
                      given.  This should paint the border, padding,
                      and background.                    
                    <param>
                        g the rendering surface.                        
                    </param>
                    <param>
                        x the x coordinate of the allocated area to
                          render into.                        
                    </param>
                    <param>
                        y the y coordinate of the allocated area to
                          render into.                        
                    </param>
                    <param>
                        w the width of the allocated area to render into.                        
                    </param>
                    <param>
                        h the height of the allocated area to render into.                        
                    </param>
                    <param>
                        v the view making the request.  This is
                          used to get the AttributeSet, and may be used to
                          resolve percentage arguments.                        
                    </param>
                </javadoc>
                <method name="paint" type="void" line="1866">
                    <params>
                        <param name="g" type="Graphics"/>
                        <param name="x" type="float"/>
                        <param name="y" type="float"/>
                        <param name="w" type="float"/>
                        <param name="h" type="float"/>
                        <param name="v" type="View"/>
                    </params>
                    <comment line="1867">
                        PENDING(prinz) implement real rendering... which would                        
                    </comment>
                    <comment line="1868">
                        do full set of border and background capabilities.                        
                    </comment>
                    <comment line="1869">
                        remove margin                        
                    </comment>
                    <comment line="1904">
                        BevelBorder does not support border width                        
                    </comment>
                    <declaration name="dx" type="float" line="1871"/>
                    <declaration name="dy" type="float" line="1872"/>
                    <declaration name="dw" type="float" line="1873"/>
                    <declaration name="dh" type="float" line="1874"/>
                    <declaration name="a" type="AttributeSet" line="1875"/>
                    <declaration name="isLeftToRight" type="boolean" line="1876"/>
                    <declaration name="localLeftMargin" type="float" line="1877"/>
                    <declaration name="localRightMargin" type="float" line="1880"/>
                    <scope line="1883"/>
                    <scope line="1889"/>
                    <scope line="1896"/>
                    <scope line="1903">
                        <declaration name="bw" type="int" line="1905"/>
                        <scope line="1906"/>
                    </scope>
                    <scope line="1910"/>
                </method>
                <method name="getLength" type="float" line="1915">
                    <params>
                        <param name="key" type="CSS.Attribute"/>
                        <param name="a" type="AttributeSet"/>
                    </params>
                </method>
                <method name="isLeftToRight" type="boolean" line="1919">
                    <params>
                        <param name="v" type="View"/>
                    </params>
                    <declaration name="ret" type="boolean" line="1920"/>
                    <scope line="1921">
                        <declaration name="container" type="Container" line="1922"/>
                        <scope line="1923"/>
                    </scope>
                </method>
                <method name="isOrientationAware" type="boolean" line="1936">
                    <params>
                        <param name="v" type="View"/>
                    </params>
                    <declaration name="ret" type="boolean" line="1937"/>
                    <declaration name="attr" type="AttributeSet" line="1938"/>
                    <declaration name="obj" type="Object" line="1939"/>
                    <scope line="1946"/>
                </method>
                <javadoc line="1955">
                    for &lt;dir&gt;, &lt;menu&gt;, &lt;ul&gt; etc.
                      margins are Left-To-Right/Right-To-Left depended.
                      see 5088268 for more details
                      margin-(left|right)-(ltr|rtl) were introduced to describe it
                      if margin-(left|right) is present we are to use it.                    
                    <param>
                        side The horizontal side to fetch margin for
                          This can be HorizontalMargin.LEFT or HorizontalMargin.RIGHT                        
                    </param>
                    <param>
                        cssMargin margin from css                        
                    </param>
                    <param>
                        a AttributeSet for the View we getting margin for                        
                    </param>
                    <param>
                        isLeftToRight                        
                    </param>
                    <return>
                        orientation depended margin                        
                    </return>
                </javadoc>
                <method name="getOrientationMargin" type="float" line="1970">
                    <params>
                        <param name="side" type="HorizontalMargin"/>
                        <param name="cssMargin" type="float"/>
                        <param name="a" type="AttributeSet"/>
                        <param name="isLeftToRight" type="boolean"/>
                    </params>
                    <declaration name="margin" type="float" line="1971"/>
                    <declaration name="orientationMargin" type="float" line="1972"/>
                    <declaration name="cssMarginValue" type="Object" line="1973"/>
                    <scope line="1976"/>
                    <scope line="1984"/>
                    <scope line="1994"/>
                </method>
                <declaration name="topMargin" type="float" line="2000"/>
                <declaration name="bottomMargin" type="float" line="2001"/>
                <declaration name="leftMargin" type="float" line="2002"/>
                <declaration name="rightMargin" type="float" line="2003"/>
                <declaration name="marginFlags" type="short" line="2006"/>
                <declaration name="border" type="Border" line="2007"/>
                <declaration name="binsets" type="Insets" line="2008"/>
                <declaration name="css" type="CSS" line="2009"/>
                <declaration name="ss" type="StyleSheet" line="2010"/>
                <declaration name="bg" type="Color" line="2011"/>
                <declaration name="bgPainter" type="BackgroundImagePainter" line="2012"/>
            </class>
            <class name="ListPainter" line="2015">
                <comment line="1076">
                                        
                </comment>
                <comment line="1109">
                                        
                </comment>
                <comment line="1208">
                                        
                </comment>
                <comment line="1684">
                    A set of temporary variables that can be used in whatever way.                    
                </comment>
                <comment line="1931">
                    only certain tags are concerned about orientation
                     &lt;dir&gt;, &lt;menu&gt;, &lt;ul&gt;, &lt;ol&gt;
                     for all others we return true. It is implemented this way
                     for performance purposes                    
                </comment>
                <comment line="2005">
                    Bitmask, used to indicate what margins are relative:                    
                </comment>
                <comment line="2006">
                    bit 0 for top, 1 for bottom, 2 for left and 3 for right.                    
                </comment>
                <comment line="2377">
                                        
                </comment>
                <comment line="2456">
                    bit mask: 0 for repeat x, 1 for repeat y, 2 for horiz relative,                    
                </comment>
                <comment line="2457">
                    3 for vert relative                    
                </comment>
                <comment line="2459">
                    These are used when painting, updatePaintCoordinates updates them.                    
                </comment>
                <comment line="2689">
                    --- AttributeSet methods ----------------------------                    
                </comment>
                <comment line="2779">
                    PENDING(sky): Decide what to do with this. Either make it                    
                </comment>
                <comment line="2780">
                    contain a SimpleAttributeSet that modify methods are delegated to,                    
                </comment>
                <comment line="2781">
                    or change getRule to return an AttributeSet and then don&apos;t make this                    
                </comment>
                <comment line="2782">
                    implement Style.                    
                </comment>
                <comment line="3191">
                                        
                </comment>
                <comment line="3192">
                    CSSParserCallback methods, public to implement the interface.                    
                </comment>
                <comment line="3193">
                                        
                </comment>
                <implements interface="Serializable"/>
                <javadoc line="2015">
                    Class to carry out some of the duties of CSS list
                      formatting.  Implementations of this
                      class enable views to present the CSS formatting
                      while not knowing anything about how the CSS values
                      are being cached.                    
                </javadoc>
                <method name="ListPainter" type="constructor" line="2024">
                    <params>
                        <param name="attr" type="AttributeSet"/>
                        <param name="ss" type="StyleSheet"/>
                    </params>
                    <comment line="2026">
                                                
                    </comment>
                    <comment line="2055">
                                                
                    </comment>
                    <declaration name="imgstr" type="String" line="2027"/>
                    <scope line="2030">
                        <declaration name="tmpstr" type="String" line="2031"/>
                        <scope line="2032">
                            <declaration name="st" type="StringTokenizer" line="2033"/>
                            <declaration name="u" type="URL" line="2038"/>
                        </scope>
                        <scope line="2040">
                            <scope line="2041">
                                <scope line="2042">
                                    <declaration name="u" type="URL" line="2043"/>
                                </scope>
                                <scope line="2045"/>
                            </scope>
                            <scope line="2049"/>
                        </scope>
                    </scope>
                    <scope line="2056"/>
                </method>
                <javadoc line="2065">
                    Returns a string that represents the value
                      of the HTML.Attribute.TYPE attribute.
                      If this attributes is not defined, then
                      then the type defaults to &quot;disc&quot; unless
                      the tag is on Ordered list.  In the case
                      of the latter, the default type is &quot;decimal&quot;.                    
                </javadoc>
                <method name="getChildType" type="CSS.Value" line="2073">
                    <params>
                        <param name="childView" type="View"/>
                    </params>
                    <comment line="2079">
                        Parent view.                        
                    </comment>
                    <declaration name="childtype" type="CSS.Value" line="2074"/>
                    <scope line="2077">
                        <scope line="2078">
                            <declaration name="v" type="View" line="2080"/>
                            <declaration name="doc" type="HTMLDocument" line="2081"/>
                            <scope line="2083"/>
                            <scope line="2085"/>
                        </scope>
                        <scope line="2088"/>
                    </scope>
                </method>
                <javadoc line="2095">
                    Obtains the starting index from &lt;code&gt;parent&lt;/code&gt;.                    
                </javadoc>
                <method name="getStart" type="void" line="2098">
                    <params>
                        <param name="parent" type="View"/>
                    </params>
                    <declaration name="element" type="Element" line="2100"/>
                    <scope line="2101">
                        <declaration name="attr" type="AttributeSet" line="2102"/>
                        <declaration name="startValue" type="Object" line="2103"/>
                        <scope line="2107">
                            <scope line="2109"/>
                            <scope line="2112"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="2117">
                    Returns an integer that should be used to render the child at
                      &lt;code&gt;childIndex&lt;/code&gt; with. The retValue will usually be
                      &lt;code&gt;childIndex&lt;/code&gt; + 1, unless &lt;code&gt;parentView&lt;/code&gt;
                      has some Views that do not represent LI&apos;s, or one of the views
                      has a HTML.Attribute.START specified.                    
                </javadoc>
                <method name="getRenderIndex" type="int" line="2124">
                    <params>
                        <param name="parentView" type="View"/>
                        <param name="childIndex" type="int"/>
                    </params>
                    <scope line="2125"/>
                    <declaration name="retIndex" type="int" line="2128"/>
                    <scope line="2129">
                        <declaration name="as" type="AttributeSet" line="2130"/>
                        <scope line="2133"/>
                        <scope line="2135">
                            <declaration name="value" type="Object" line="2136"/>
                            <scope line="2138">
                                <scope line="2139">
                                    <declaration name="iValue" type="int" line="2140"/>
                                </scope>
                                <scope line="2143"/>
                            </scope>
                        </scope>
                    </scope>
                </method>
                <javadoc line="2150">
                    Paints the CSS list decoration according to the
                      attributes given.                    
                    <param>
                        g the rendering surface.                        
                    </param>
                    <param>
                        x the x coordinate of the list item allocation                        
                    </param>
                    <param>
                        y the y coordinate of the list item allocation                        
                    </param>
                    <param>
                        w the width of the list item allocation                        
                    </param>
                    <param>
                        h the height of the list item allocation                        
                    </param>
                    <param>
                        v the allocated area to paint into.                        
                    </param>
                    <param>
                        item which list item is being painted.  This
                          is a number greater than or equal to 0.                        
                    </param>
                </javadoc>
                <method name="paint" type="void" line="2163">
                    <params>
                        <param name="g" type="Graphics"/>
                        <param name="x" type="float"/>
                        <param name="y" type="float"/>
                        <param name="w" type="float"/>
                        <param name="h" type="float"/>
                        <param name="v" type="View"/>
                        <param name="item" type="int"/>
                    </params>
                    <comment line="2168">
                        Only draw something if the View is a list item. This won&apos;t                        
                    </comment>
                    <comment line="2169">
                        be the case for comments.                        
                    </comment>
                    <comment line="2174">
                        deside on what side draw bullets, etc.                        
                    </comment>
                    <comment line="2178">
                        How the list indicator is aligned is not specified, it is                        
                    </comment>
                    <comment line="2179">
                        left up to the UA. IE and NS differ on this behavior.                        
                    </comment>
                    <comment line="2180">
                        This is closer to NS where we align to the first line of text.                        
                    </comment>
                    <comment line="2181">
                        If the child is not text we draw the indicator at the                        
                    </comment>
                    <comment line="2182">
                        origin (0).                        
                    </comment>
                    <comment line="2204">
                        set the color of a decoration                        
                    </comment>
                    <declaration name="cv" type="View" line="2164"/>
                    <declaration name="host" type="Container" line="2165"/>
                    <declaration name="name" type="Object" line="2166"/>
                    <scope line="2171"/>
                    <declaration name="align" type="float" line="2183"/>
                    <scope line="2184">
                        <declaration name="pView" type="View" line="2185"/>
                        <declaration name="cName" type="Object" line="2186"/>
                        <scope line="2189">
                            <declaration name="shape" type="Shape" line="2191"/>
                            <scope line="2193">
                                <declaration name="rect" type="Rectangle" line="2194"/>
                            </scope>
                        </scope>
                    </scope>
                    <declaration name="c" type="Color" line="2205"/>
                    <scope line="2212"/>
                    <declaration name="childtype" type="CSS.Value" line="2216"/>
                    <declaration name="font" type="Font" line="2217"/>
                    <scope line="2219"/>
                    <scope line="2223"/>
                    <scope line="2226"/>
                    <scope line="2229"/>
                    <scope line="2232"/>
                    <scope line="2235"/>
                    <scope line="2238"/>
                </method>
                <javadoc line="2244">
                    Draws the bullet icon specified by the list-style-image argument.                    
                    <param>
                        g     the graphics context                        
                    </param>
                    <param>
                        ax    x coordinate to place the bullet                        
                    </param>
                    <param>
                        ay    y coordinate to place the bullet                        
                    </param>
                    <param>
                        aw    width of the container the bullet is placed in                        
                    </param>
                    <param>
                        ah    height of the container the bullet is placed in                        
                    </param>
                    <param>
                        align preferred alignment factor for the child view                        
                    </param>
                </javadoc>
                <method name="drawIcon" type="void" line="2255">
                    <params>
                        <param name="g" type="Graphics"/>
                        <param name="ax" type="int"/>
                        <param name="ay" type="int"/>
                        <param name="aw" type="int"/>
                        <param name="ah" type="int"/>
                        <param name="align" type="float"/>
                        <param name="c" type="Component"/>
                    </params>
                    <comment line="2256">
                        Align to bottom of icon.                        
                    </comment>
                    <declaration name="gap" type="int" line="2257"/>
                    <declaration name="x" type="int" line="2259"/>
                    <declaration name="y" type="int" line="2260"/>
                </method>
                <javadoc line="2265">
                    Draws the graphical bullet item specified by the type argument.                    
                    <param>
                        g     the graphics context                        
                    </param>
                    <param>
                        type  type of bullet to draw (circle, square, disc)                        
                    </param>
                    <param>
                        ax    x coordinate to place the bullet                        
                    </param>
                    <param>
                        ay    y coordinate to place the bullet                        
                    </param>
                    <param>
                        aw    width of the container the bullet is placed in                        
                    </param>
                    <param>
                        ah    height of the container the bullet is placed in                        
                    </param>
                    <param>
                        align preferred alignment factor for the child view                        
                    </param>
                </javadoc>
                <method name="drawShape" type="void" line="2277">
                    <params>
                        <param name="g" type="Graphics"/>
                        <param name="type" type="CSS.Value"/>
                        <param name="ax" type="int"/>
                        <param name="ay" type="int"/>
                        <param name="aw" type="int"/>
                        <param name="ah" type="int"/>
                        <param name="align" type="float"/>
                    </params>
                    <comment line="2278">
                        Align to bottom of shape.                        
                    </comment>
                    <declaration name="gap" type="int" line="2279"/>
                    <declaration name="x" type="int" line="2280"/>
                    <declaration name="y" type="int" line="2281"/>
                    <scope line="2283"/>
                    <scope line="2285"/>
                    <scope line="2287"/>
                </method>
                <javadoc line="2292">
                    Draws the letter or number for an ordered list.                    
                    <param>
                        g     the graphics context                        
                    </param>
                    <param>
                        letter type of ordered list to draw                        
                    </param>
                    <param>
                        ax    x coordinate to place the bullet                        
                    </param>
                    <param>
                        ay    y coordinate to place the bullet                        
                    </param>
                    <param>
                        aw    width of the container the bullet is placed in                        
                    </param>
                    <param>
                        ah    height of the container the bullet is placed in                        
                    </param>
                    <param>
                        index position of the list item in the list                        
                    </param>
                </javadoc>
                <method name="drawLetter" type="void" line="2304">
                    <params>
                        <param name="g" type="Graphics"/>
                        <param name="letter" type="char"/>
                        <param name="ax" type="int"/>
                        <param name="ay" type="int"/>
                        <param name="aw" type="int"/>
                        <param name="ah" type="int"/>
                        <param name="align" type="float"/>
                        <param name="index" type="int"/>
                    </params>
                    <declaration name="str" type="String" line="2305"/>
                    <declaration name="fm" type="FontMetrics" line="2307"/>
                    <declaration name="stringwidth" type="int" line="2308"/>
                    <declaration name="gap" type="int" line="2309"/>
                    <declaration name="x" type="int" line="2311"/>
                    <declaration name="y" type="int" line="2312"/>
                </method>
                <javadoc line="2316">
                    Converts the item number into the ordered list number
                      (i.e.  1 2 3, i ii iii, a b c, etc.                    
                    <param>
                        itemNum number to format                        
                    </param>
                    <param>
                        type    type of ordered list                        
                    </param>
                </javadoc>
                <method name="formatItemNum" type="String" line="2323">
                    <params>
                        <param name="itemNum" type="int"/>
                        <param name="type" type="char"/>
                    </params>
                    <comment line="2338">
                        fall through                        
                    </comment>
                    <comment line="2345">
                        fall through                        
                    </comment>
                    <declaration name="numStyle" type="String" line="2324"/>
                    <declaration name="uppercase" type="boolean" line="2326"/>
                    <declaration name="formattedNum" type="String" line="2328"/>
                    <scope line="2350"/>
                </method>
                <javadoc line="2357">
                    Converts the item number into an alphabetic character                    
                    <param>
                        itemNum number to format                        
                    </param>
                </javadoc>
                <method name="formatAlphaNumerals" type="String" line="2362">
                    <params>
                        <param name="itemNum" type="int"/>
                    </params>
                    <comment line="2369">
                        -1 because item is 1 based.                        
                    </comment>
                    <declaration name="result" type="String" line="2363"/>
                    <scope line="2365"/>
                    <scope line="2368"/>
                </method>
                <declaration name="romanChars" type="char" line="2377"/>
                <javadoc line="2384">
                    Converts the item number into a roman numeral                    
                    <param>
                        num  number to format                        
                    </param>
                </javadoc>
                <method name="formatRomanNumerals" type="String" line="2389">
                    <params>
                        <param name="num" type="int"/>
                    </params>
                </method>
                <javadoc line="2393">
                    Converts the item number into a roman numeral                    
                    <param>
                        num  number to format                        
                    </param>
                </javadoc>
                <method name="formatRomanNumerals" type="String" line="2398">
                    <params>
                        <param name="level" type="int"/>
                        <param name="num" type="int"/>
                    </params>
                    <scope line="2399"/>
                    <scope line="2401"/>
                </method>
                <javadoc line="2408">
                    Converts the item number into a roman numeral                    
                    <param>
                        level position                        
                    </param>
                    <param>
                        digit digit to format                        
                    </param>
                </javadoc>
                <method name="formatRomanDigit" type="String" line="2414">
                    <params>
                        <param name="level" type="int"/>
                        <param name="digit" type="int"/>
                    </params>
                    <declaration name="result" type="String" line="2415"/>
                    <scope line="2416"/>
                    <scope line="2420"/>
                    <scope line="2424"/>
                    <scope line="2429"/>
                </method>
                <declaration name="paintRect" type="Rectangle" line="2436"/>
                <declaration name="checkedForStart" type="boolean" line="2437"/>
                <declaration name="start" type="int" line="2438"/>
                <declaration name="type" type="CSS.Value" line="2439"/>
                <declaration name="imageurl" type="URL" line="2440"/>
                <declaration name="ss" type="StyleSheet" line="2441"/>
                <declaration name="img" type="Icon" line="2442"/>
                <declaration name="bulletgap" type="int" line="2443"/>
                <declaration name="isLeftToRight" type="boolean" line="2444"/>
            </class>
            <class name="BackgroundImagePainter" line="2448">
                <comment line="1076">
                                        
                </comment>
                <comment line="1109">
                                        
                </comment>
                <comment line="1208">
                                        
                </comment>
                <comment line="1684">
                    A set of temporary variables that can be used in whatever way.                    
                </comment>
                <comment line="1931">
                    only certain tags are concerned about orientation
                     &lt;dir&gt;, &lt;menu&gt;, &lt;ul&gt;, &lt;ol&gt;
                     for all others we return true. It is implemented this way
                     for performance purposes                    
                </comment>
                <comment line="2005">
                    Bitmask, used to indicate what margins are relative:                    
                </comment>
                <comment line="2006">
                    bit 0 for top, 1 for bottom, 2 for left and 3 for right.                    
                </comment>
                <comment line="2377">
                                        
                </comment>
                <comment line="2456">
                    bit mask: 0 for repeat x, 1 for repeat y, 2 for horiz relative,                    
                </comment>
                <comment line="2457">
                    3 for vert relative                    
                </comment>
                <comment line="2459">
                    These are used when painting, updatePaintCoordinates updates them.                    
                </comment>
                <comment line="2689">
                    --- AttributeSet methods ----------------------------                    
                </comment>
                <comment line="2779">
                    PENDING(sky): Decide what to do with this. Either make it                    
                </comment>
                <comment line="2780">
                    contain a SimpleAttributeSet that modify methods are delegated to,                    
                </comment>
                <comment line="2781">
                    or change getRule to return an AttributeSet and then don&apos;t make this                    
                </comment>
                <comment line="2782">
                    implement Style.                    
                </comment>
                <comment line="3191">
                                        
                </comment>
                <comment line="3192">
                    CSSParserCallback methods, public to implement the interface.                    
                </comment>
                <comment line="3193">
                                        
                </comment>
                <implements interface="Serializable"/>
                <javadoc line="2448">
                    Paints the background image.                    
                </javadoc>
                <declaration name="backgroundImage" type="ImageIcon" line="2452"/>
                <declaration name="hPosition" type="float" line="2453"/>
                <declaration name="vPosition" type="float" line="2454"/>
                <declaration name="flags" type="short" line="2457"/>
                <declaration name="paintX" type="int" line="2459"/>
                <declaration name="paintY" type="int" line="2460"/>
                <declaration name="paintMaxX" type="int" line="2461"/>
                <declaration name="paintMaxY" type="int" line="2462"/>
                <method name="BackgroundImagePainter" type="constructor" line="2464">
                    <params>
                        <param name="a" type="AttributeSet"/>
                        <param name="css" type="CSS"/>
                        <param name="ss" type="StyleSheet"/>
                    </params>
                    <comment line="2466">
                        Determine the position.                        
                    </comment>
                    <comment line="2485">
                        Determine any repeating values.                        
                    </comment>
                    <declaration name="pos" type="CSS.BackgroundPosition" line="2467"/>
                    <scope line="2469">
                        <scope line="2472"/>
                        <scope line="2475"/>
                        <scope line="2478"/>
                        <scope line="2481"/>
                    </scope>
                    <declaration name="repeats" type="CSS.Value" line="2486"/>
                    <scope line="2488"/>
                    <scope line="2491"/>
                    <scope line="2494"/>
                </method>
                <method name="paint" type="void" line="2499">
                    <params>
                        <param name="g" type="Graphics"/>
                        <param name="x" type="float"/>
                        <param name="y" type="float"/>
                        <param name="w" type="float"/>
                        <param name="h" type="float"/>
                        <param name="v" type="View"/>
                    </params>
                    <comment line="2502">
                        Constrain the clip so that images don&apos;t draw outside the                        
                    </comment>
                    <comment line="2503">
                        legal bounds.                        
                    </comment>
                    <comment line="2507">
                        no repeating                        
                    </comment>
                    <comment line="2554">
                        Reset clip.                        
                    </comment>
                    <declaration name="clip" type="Rectangle" line="2500"/>
                    <scope line="2501"/>
                    <scope line="2506">
                        <declaration name="width" type="int" line="2508"/>
                        <declaration name="height" type="int" line="2509"/>
                        <scope line="2510"/>
                        <scope line="2514"/>
                        <scope line="2517"/>
                        <scope line="2521"/>
                        <scope line="2528"/>
                    </scope>
                    <scope line="2532">
                        <declaration name="width" type="int" line="2533"/>
                        <declaration name="height" type="int" line="2534"/>
                        <scope line="2535">
                            <scope line="2540">
                                <scope line="2541">
                                    <declaration name="ySpot" type="int" line="2542"/>
                                    <scope line="2543"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="2553"/>
                </method>
                <method name="updatePaintCoordinates" type="boolean" line="2560">
                    <params>
                        <param name="clip" type="Rectangle"/>
                        <param name="width" type="int"/>
                        <param name="height" type="int"/>
                    </params>
                    <comment line="2570">
                        not visible.                        
                    </comment>
                    <comment line="2575">
                        not visible.                        
                    </comment>
                    <comment line="2607">
                        Valid                        
                    </comment>
                    <scope line="2561"/>
                    <scope line="2564"/>
                    <scope line="2567">
                        <scope line="2569"/>
                        <scope line="2574"/>
                        <scope line="2578">
                            <scope line="2579">
                                <scope line="2580"/>
                                <scope line="2583"/>
                            </scope>
                            <scope line="2588"/>
                        </scope>
                        <scope line="2592">
                            <scope line="2593">
                                <scope line="2594"/>
                                <scope line="2597"/>
                            </scope>
                            <scope line="2602"/>
                        </scope>
                    </scope>
                </method>
            </class>
            <class name="ViewAttributeSet" line="2613">
                <extends class="MuxingAttributeSet"/>
                <comment line="1076">
                                        
                </comment>
                <comment line="1109">
                                        
                </comment>
                <comment line="1208">
                                        
                </comment>
                <comment line="1684">
                    A set of temporary variables that can be used in whatever way.                    
                </comment>
                <comment line="1931">
                    only certain tags are concerned about orientation
                     &lt;dir&gt;, &lt;menu&gt;, &lt;ul&gt;, &lt;ol&gt;
                     for all others we return true. It is implemented this way
                     for performance purposes                    
                </comment>
                <comment line="2005">
                    Bitmask, used to indicate what margins are relative:                    
                </comment>
                <comment line="2006">
                    bit 0 for top, 1 for bottom, 2 for left and 3 for right.                    
                </comment>
                <comment line="2377">
                                        
                </comment>
                <comment line="2456">
                    bit mask: 0 for repeat x, 1 for repeat y, 2 for horiz relative,                    
                </comment>
                <comment line="2457">
                    3 for vert relative                    
                </comment>
                <comment line="2459">
                    These are used when painting, updatePaintCoordinates updates them.                    
                </comment>
                <comment line="2689">
                    --- AttributeSet methods ----------------------------                    
                </comment>
                <comment line="2779">
                    PENDING(sky): Decide what to do with this. Either make it                    
                </comment>
                <comment line="2780">
                    contain a SimpleAttributeSet that modify methods are delegated to,                    
                </comment>
                <comment line="2781">
                    or change getRule to return an AttributeSet and then don&apos;t make this                    
                </comment>
                <comment line="2782">
                    implement Style.                    
                </comment>
                <comment line="3191">
                                        
                </comment>
                <comment line="3192">
                    CSSParserCallback methods, public to implement the interface.                    
                </comment>
                <comment line="3193">
                                        
                </comment>
                <javadoc line="2613">
                    A subclass of MuxingAttributeSet that translates between
                      CSS and HTML and StyleConstants. The AttributeSets used are
                      the CSS rules that match the Views Elements.                    
                </javadoc>
                <method name="ViewAttributeSet" type="constructor" line="2619">
                    <params>
                        <param name="v" type="View"/>
                    </params>
                    <comment line="2622">
                        PENDING(prinz) fix this up to be a more realistic                        
                    </comment>
                    <comment line="2623">
                        implementation.                        
                    </comment>
                    <comment line="2644">
                        In the case of an A tag, the css rules
                        apply only for tags that have their
                        href attribute defined and not for
                        anchors that only have their name attributes
                        defined, i.e anchors that function as
                        destinations.  Hence we do not add the
                        attributes for that latter kind of
                        anchors.  When CSS2 support is added,
                        it will be possible to specificity this
                        kind of conditional behaviour in the
                        stylesheet.                        
                    </comment>
                    <declaration name="doc" type="Document" line="2624"/>
                    <declaration name="sb" type="SearchBuffer" line="2625"/>
                    <declaration name="muxList" type="Vector&lt;AttributeSet&gt;" line="2626"/>
                    <scope line="2627">
                        <scope line="2628">
                            <declaration name="styles" type="StyleSheet" line="2629"/>
                            <declaration name="elem" type="Element" line="2630"/>
                            <declaration name="a" type="AttributeSet" line="2631"/>
                            <declaration name="htmlAttr" type="AttributeSet" line="2632"/>
                            <scope line="2634"/>
                            <scope line="2637">
                                <declaration name="keys" type="Enumeration" line="2638"/>
                                <scope line="2639">
                                    <declaration name="key" type="Object" line="2640"/>
                                    <scope line="2641">
                                        <scope line="2642">
                                            <declaration name="o" type="Object" line="2643"/>
                                            <scope line="2657">
                                                <declaration name="attr" type="AttributeSet" line="2658"/>
                                                <scope line="2659"/>
                                            </scope>
                                        </scope>
                                        <declaration name="cssRule" type="AttributeSet" line="2664"/>
                                        <scope line="2665"/>
                                    </scope>
                                </scope>
                            </scope>
                            <scope line="2670">
                                <declaration name="t" type="HTML.Tag" line="2671"/>
                                <declaration name="cssRule" type="AttributeSet" line="2673"/>
                                <scope line="2674"/>
                            </scope>
                        </scope>
                        <declaration name="attrs" type="AttributeSet[]" line="2679"/>
                    </scope>
                    <scope line="2683"/>
                </method>
                <javadoc line="2690">
                    Checks whether a given attribute is defined.
                      This will convert the key over to CSS if the
                      key is a StyleConstants key that has a CSS
                      mapping.                    
                    <param>
                        key the attribute key                        
                    </param>
                    <return>
                        true if the attribute is defined                        
                    </return>
                    <see>
                        AttributeSet#isDefined                        
                    </see>
                </javadoc>
                <method name="isDefined" type="boolean" line="2700">
                    <params>
                        <param name="key" type="Object"/>
                    </params>
                    <scope line="2701">
                        <declaration name="cssKey" type="Object" line="2702"/>
                        <scope line="2704"/>
                    </scope>
                </method>
                <javadoc line="2711">
                    Gets the value of an attribute.  If the requested
                      attribute is a StyleConstants attribute that has
                      a CSS mapping, the request will be converted.                    
                    <param>
                        key the attribute name                        
                    </param>
                    <return>
                        the attribute value                        
                    </return>
                    <see>
                        AttributeSet#getAttribute                        
                    </see>
                </javadoc>
                <method name="getAttribute" type="Object" line="2720">
                    <params>
                        <param name="key" type="Object"/>
                    </params>
                    <scope line="2721">
                        <declaration name="cssKey" type="Object" line="2722"/>
                        <scope line="2724">
                            <declaration name="value" type="Object" line="2725"/>
                            <scope line="2726"/>
                        </scope>
                    </scope>
                </method>
                <method name="doGetAttribute" type="Object" line="2735">
                    <params>
                        <param name="key" type="Object"/>
                    </params>
                    <comment line="2740">
                        didn&apos;t find it... try parent if it&apos;s a css attribute                        
                    </comment>
                    <comment line="2741">
                        that is inherited.                        
                    </comment>
                    <declaration name="retValue" type="Object" line="2736"/>
                    <scope line="2737"/>
                    <scope line="2742">
                        <declaration name="css" type="CSS.Attribute" line="2743"/>
                        <scope line="2744">
                            <declaration name="parent" type="AttributeSet" line="2745"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="2753">
                    If not overriden, the resolving parent defaults to
                      the parent element.                    
                    <return>
                        the attributes from the parent                        
                    </return>
                    <see>
                        AttributeSet#getResolveParent                        
                    </see>
                </javadoc>
                <method name="getResolveParent" type="AttributeSet" line="2760">
                    <scope line="2761"/>
                    <declaration name="parent" type="View" line="2764"/>
                </method>
                <declaration name="host" type="View" line="2768"/>
                <javadoc line="2768">
                    View created for.                    
                </javadoc>
            </class>
            <class name="ResolvedStyle" line="2773">
                <extends class="MuxingAttributeSet"/>
                <comment line="1076">
                                        
                </comment>
                <comment line="1109">
                                        
                </comment>
                <comment line="1208">
                                        
                </comment>
                <comment line="1684">
                    A set of temporary variables that can be used in whatever way.                    
                </comment>
                <comment line="1931">
                    only certain tags are concerned about orientation
                     &lt;dir&gt;, &lt;menu&gt;, &lt;ul&gt;, &lt;ol&gt;
                     for all others we return true. It is implemented this way
                     for performance purposes                    
                </comment>
                <comment line="2005">
                    Bitmask, used to indicate what margins are relative:                    
                </comment>
                <comment line="2006">
                    bit 0 for top, 1 for bottom, 2 for left and 3 for right.                    
                </comment>
                <comment line="2377">
                                        
                </comment>
                <comment line="2456">
                    bit mask: 0 for repeat x, 1 for repeat y, 2 for horiz relative,                    
                </comment>
                <comment line="2457">
                    3 for vert relative                    
                </comment>
                <comment line="2459">
                    These are used when painting, updatePaintCoordinates updates them.                    
                </comment>
                <comment line="2689">
                    --- AttributeSet methods ----------------------------                    
                </comment>
                <comment line="2779">
                    PENDING(sky): Decide what to do with this. Either make it                    
                </comment>
                <comment line="2780">
                    contain a SimpleAttributeSet that modify methods are delegated to,                    
                </comment>
                <comment line="2781">
                    or change getRule to return an AttributeSet and then don&apos;t make this                    
                </comment>
                <comment line="2782">
                    implement Style.                    
                </comment>
                <comment line="3191">
                                        
                </comment>
                <comment line="3192">
                    CSSParserCallback methods, public to implement the interface.                    
                </comment>
                <comment line="3193">
                                        
                </comment>
                <implements interface="Serializable"/>
                <implements interface="Style"/>
                <javadoc line="2773">
                    A subclass of MuxingAttributeSet that implements Style. Currently
                      the MutableAttributeSet methods are unimplemented, that is they
                      do nothing.                    
                </javadoc>
                <method name="ResolvedStyle" type="constructor" line="2784">
                    <params>
                        <param name="name" type="String"/>
                        <param name="attrs" type="AttributeSet[]"/>
                        <param name="extendedIndex" type="int"/>
                    </params>
                </method>
                <javadoc line="2790">
                    Inserts a Style into the receiver so that the styles the
                      receiver represents are still ordered by specificity.
                      &lt;code&gt;style&lt;/code&gt; will be added before any extended styles, that
                      is before extendedIndex.                    
                </javadoc>
                <method name="insertStyle" type="void" line="2796">
                    <params>
                        <param name="style" type="Style"/>
                        <param name="specificity" type="int"/>
                    </params>
                    <declaration name="attrs" type="AttributeSet[]" line="2797"/>
                    <declaration name="maxCounter" type="int" line="2798"/>
                    <declaration name="counter" type="int" line="2799"/>
                    <scope line="2800">
                        <scope line="2802"/>
                    </scope>
                </method>
                <javadoc line="2810">
                    Removes a previously added style. This will do nothing if
                      &lt;code&gt;style&lt;/code&gt; is not referenced by the receiver.                    
                </javadoc>
                <method name="removeStyle" type="void" line="2814">
                    <params>
                        <param name="style" type="Style"/>
                    </params>
                    <declaration name="attrs" type="AttributeSet[]" line="2815"/>
                    <scope line="2817">
                        <scope line="2818">
                            <scope line="2820"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="2828">
                    Adds &lt;code&gt;s&lt;/code&gt; as one of the Attributesets to look up
                      attributes in.                    
                </javadoc>
                <method name="insertExtendedStyleAt" type="void" line="2832">
                    <params>
                        <param name="attr" type="Style"/>
                        <param name="index" type="int"/>
                    </params>
                </method>
                <javadoc line="2836">
                    Adds &lt;code&gt;s&lt;/code&gt; as one of the AttributeSets to look up
                      attributes in. It will be the AttributeSet last checked.                    
                </javadoc>
                <method name="addExtendedStyle" type="void" line="2840">
                    <params>
                        <param name="attr" type="Style"/>
                    </params>
                </method>
                <javadoc line="2844">
                    Removes the style at &lt;code&gt;index&lt;/code&gt; +
                      &lt;code&gt;extendedIndex&lt;/code&gt;.                    
                </javadoc>
                <method name="removeExtendedStyleAt" type="void" line="2848">
                    <params>
                        <param name="index" type="int"/>
                    </params>
                </method>
                <javadoc line="2852">
                    Returns true if the receiver matches &lt;code&gt;selector&lt;/code&gt;, where
                      a match is defined by the CSS rule matching.
                      Each simple selector must be separated by a single space.                    
                </javadoc>
                <method name="matches" type="boolean" line="2857">
                    <params>
                        <param name="selector" type="String"/>
                    </params>
                    <declaration name="sLast" type="int" line="2858"/>
                    <scope line="2860"/>
                    <declaration name="thisLast" type="int" line="2863"/>
                    <declaration name="sCurrent" type="int" line="2864"/>
                    <declaration name="thisCurrent" type="int" line="2865"/>
                    <scope line="2866"/>
                    <scope line="2869"/>
                    <scope line="2872"/>
                    <scope line="2875">
                        <scope line="2878"/>
                        <declaration name="match" type="boolean" line="2881"/>
                        <scope line="2882">
                            <scope line="2885"/>
                        </scope>
                        <scope line="2891"/>
                    </scope>
                </method>
                <javadoc line="2898">
                    Returns true if the substring of the receiver, in the range
                      thisCurrent, thisLast matches the substring of selector in
                      the ranme sCurrent to sLast based on CSS selector matching.                    
                </javadoc>
                <method name="matches" type="boolean" line="2904">
                    <params>
                        <param name="selector" type="String"/>
                        <param name="sCurrent" type="int"/>
                        <param name="sLast" type="int"/>
                        <param name="thisCurrent" type="int"/>
                        <param name="thisLast" type="int"/>
                    </params>
                    <comment line="2914">
                        Selector has a &apos;.&apos;, which indicates name must match it,                        
                    </comment>
                    <comment line="2915">
                        or if the &apos;.&apos; starts the selector than name must have                        
                    </comment>
                    <comment line="2916">
                        the same class (doesn&apos;t matter what element name).                        
                    </comment>
                    <comment line="2928">
                        Has to fully match.                        
                    </comment>
                    <comment line="2938">
                        Selector has a &apos;#&apos;, which indicates name must match it,                        
                    </comment>
                    <comment line="2939">
                        or if the &apos;#&apos; starts the selector than name must have                        
                    </comment>
                    <comment line="2940">
                        the same id (doesn&apos;t matter what element name).                        
                    </comment>
                    <comment line="2952">
                        Has to fully match.                        
                    </comment>
                    <comment line="2962">
                        Reciever references a class, just check element name.                        
                    </comment>
                    <comment line="2968">
                        Reciever references an id, just check element name.                        
                    </comment>
                    <comment line="2973">
                        Fail through, no classes or ides, just check string.                        
                    </comment>
                    <declaration name="thisDotIndex" type="int" line="2907"/>
                    <declaration name="thisPoundIndex" type="int" line="2909"/>
                    <declaration name="sDotIndex" type="int" line="2911"/>
                    <declaration name="sPoundIndex" type="int" line="2912"/>
                    <scope line="2913">
                        <scope line="2917"/>
                        <scope line="2920">
                            <scope line="2923"/>
                        </scope>
                        <scope line="2927">
                            <scope line="2931"/>
                        </scope>
                    </scope>
                    <scope line="2937">
                        <scope line="2941"/>
                        <scope line="2944">
                            <scope line="2947"/>
                        </scope>
                        <scope line="2951">
                            <scope line="2955"/>
                        </scope>
                    </scope>
                    <scope line="2961"/>
                    <scope line="2967"/>
                </method>
                <javadoc line="2979">
                    Similiar to String.indexOf, but allows an upper bound
                      (this is slower in that it will still check string starting at
                      start.                    
                </javadoc>
                <method name="boundedIndexOf" type="int" line="2985">
                    <params>
                        <param name="string" type="String"/>
                        <param name="search" type="char"/>
                        <param name="start" type="int"/>
                        <param name="end" type="int"/>
                    </params>
                    <declaration name="retValue" type="int" line="2986"/>
                    <scope line="2987"/>
                </method>
                <method name="addAttribute" type="void" line="2993">
                    <params>
                        <param name="name" type="Object"/>
                        <param name="value" type="Object"/>
                    </params>
                </method>
                <method name="addAttributes" type="void" line="2994">
                    <params>
                        <param name="attributes" type="AttributeSet"/>
                    </params>
                </method>
                <method name="removeAttribute" type="void" line="2995">
                    <params>
                        <param name="name" type="Object"/>
                    </params>
                </method>
                <method name="removeAttributes" type="void" line="2996">
                    <params>
                        <param name="names" type="Enumeration<?>"/>
                    </params>
                </method>
                <method name="removeAttributes" type="void" line="2997">
                    <params>
                        <param name="attributes" type="AttributeSet"/>
                    </params>
                </method>
                <method name="setResolveParent" type="void" line="2998">
                    <params>
                        <param name="parent" type="AttributeSet"/>
                    </params>
                </method>
                <method name="getName" type="String" line="2999"/>
                <method name="addChangeListener" type="void" line="3000">
                    <params>
                        <param name="l" type="ChangeListener"/>
                    </params>
                </method>
                <method name="removeChangeListener" type="void" line="3001">
                    <params>
                        <param name="l" type="ChangeListener"/>
                    </params>
                </method>
                <method name="getChangeListeners" type="ChangeListener[]" line="3002"/>
                <declaration name="name" type="String" line="3006"/>
                <javadoc line="3006">
                    The name of the Style, which is the selector.
                      This will NEVER change!                    
                </javadoc>
                <declaration name="extendedIndex" type="int" line="3010"/>
                <javadoc line="3010">
                    Start index of styles coming from other StyleSheets.                    
                </javadoc>
            </class>
            <class name="SelectorMapping" line="3015">
                <comment line="1076">
                                        
                </comment>
                <comment line="1109">
                                        
                </comment>
                <comment line="1208">
                                        
                </comment>
                <comment line="1684">
                    A set of temporary variables that can be used in whatever way.                    
                </comment>
                <comment line="1931">
                    only certain tags are concerned about orientation
                     &lt;dir&gt;, &lt;menu&gt;, &lt;ul&gt;, &lt;ol&gt;
                     for all others we return true. It is implemented this way
                     for performance purposes                    
                </comment>
                <comment line="2005">
                    Bitmask, used to indicate what margins are relative:                    
                </comment>
                <comment line="2006">
                    bit 0 for top, 1 for bottom, 2 for left and 3 for right.                    
                </comment>
                <comment line="2377">
                                        
                </comment>
                <comment line="2456">
                    bit mask: 0 for repeat x, 1 for repeat y, 2 for horiz relative,                    
                </comment>
                <comment line="2457">
                    3 for vert relative                    
                </comment>
                <comment line="2459">
                    These are used when painting, updatePaintCoordinates updates them.                    
                </comment>
                <comment line="2689">
                    --- AttributeSet methods ----------------------------                    
                </comment>
                <comment line="2779">
                    PENDING(sky): Decide what to do with this. Either make it                    
                </comment>
                <comment line="2780">
                    contain a SimpleAttributeSet that modify methods are delegated to,                    
                </comment>
                <comment line="2781">
                    or change getRule to return an AttributeSet and then don&apos;t make this                    
                </comment>
                <comment line="2782">
                    implement Style.                    
                </comment>
                <comment line="3191">
                                        
                </comment>
                <comment line="3192">
                    CSSParserCallback methods, public to implement the interface.                    
                </comment>
                <comment line="3193">
                                        
                </comment>
                <implements interface="Serializable"/>
                <javadoc line="3015">
                    SelectorMapping contains a specifitiy, as an integer, and an associated
                      Style. It can also reference children &lt;code&gt;SelectorMapping&lt;/code&gt;s,
                      so that it behaves like a tree.
                      &lt;p&gt;
                      This is not thread safe, it is assumed the caller will take the
                      necessary precations if this is to be used in a threaded environment.                    
                </javadoc>
                <method name="SelectorMapping" type="constructor" line="3024">
                    <params>
                        <param name="specificity" type="int"/>
                    </params>
                </method>
                <javadoc line="3028">
                    Returns the specificity this mapping represents.                    
                </javadoc>
                <method name="getSpecificity" type="int" line="3031"/>
                <javadoc line="3035">
                    Sets the Style associated with this mapping.                    
                </javadoc>
                <method name="setStyle" type="void" line="3038">
                    <params>
                        <param name="style" type="Style"/>
                    </params>
                </method>
                <javadoc line="3042">
                    Returns the Style associated with this mapping.                    
                </javadoc>
                <method name="getStyle" type="Style" line="3045"/>
                <javadoc line="3049">
                    Returns the child mapping identified by the simple selector
                      &lt;code&gt;selector&lt;/code&gt;. If a child mapping does not exist for
                      &lt;code&gt;selector&lt;/code&gt;, and &lt;code&gt;create&lt;/code&gt; is true, a new
                      one will be created.                    
                </javadoc>
                <method name="getChildSelectorMapping" type="SelectorMapping" line="3056">
                    <params>
                        <param name="selector" type="String"/>
                        <param name="create" type="boolean"/>
                    </params>
                    <declaration name="retValue" type="SelectorMapping" line="3057"/>
                    <scope line="3059"/>
                    <scope line="3062"/>
                    <scope line="3065">
                        <declaration name="specificity" type="int" line="3066"/>
                    </scope>
                </method>
                <javadoc line="3074">
                    Creates a child &lt;code&gt;SelectorMapping&lt;/code&gt; with the specified
                      &lt;code&gt;specificity&lt;/code&gt;.                    
                </javadoc>
                <method name="createChildSelectorMapping" type="SelectorMapping" line="3078">
                    <params>
                        <param name="specificity" type="int"/>
                    </params>
                </method>
                <javadoc line="3082">
                    Returns the specificity for the child selector
                      &lt;code&gt;selector&lt;/code&gt;.                    
                </javadoc>
                <method name="getChildSpecificity" type="int" line="3086">
                    <params>
                        <param name="selector" type="String"/>
                    </params>
                    <comment line="3087">
                        class (.) 100                        
                    </comment>
                    <comment line="3088">
                        id (#)    10000                        
                    </comment>
                    <declaration name="firstChar" type="char" line="3089"/>
                    <declaration name="specificity" type="int" line="3090"/>
                    <scope line="3092"/>
                    <scope line="3095"/>
                    <scope line="3098">
                        <scope line="3100"/>
                        <scope line="3103"/>
                    </scope>
                </method>
                <declaration name="specificity" type="int" line="3110"/>
                <javadoc line="3110">
                    The specificity for this selector.                    
                </javadoc>
                <declaration name="style" type="Style" line="3114"/>
                <javadoc line="3114">
                    Style for this selector.                    
                </javadoc>
                <declaration name="children" type="HashMap&lt;String,SelectorMapping&gt;" line="3118"/>
                <javadoc line="3118">
                    Any sub selectors. Key will be String, and value will be
                      another SelectorMapping.                    
                </javadoc>
            </class>
            <declaration name="DEFAULT_FONT_SIZE" type="int" line="3128"/>
            <declaration name="css" type="CSS" line="3130"/>
            <declaration name="selectorMapping" type="SelectorMapping" line="3132"/>
            <javadoc line="3132">
                An inverted graph of the selectors.                
            </javadoc>
            <declaration name="resolvedStyles" type="Hashtable&lt;String,ResolvedStyle&gt;" line="3137"/>
            <javadoc line="3137">
                Maps from selector (as a string) to Style that includes all
                  relevant styles.                
            </javadoc>
            <declaration name="linkedStyleSheets" type="Vector&lt;StyleSheet&gt;" line="3141"/>
            <javadoc line="3141">
                Vector of StyleSheets that the rules are to reference.                
            </javadoc>
            <declaration name="base" type="URL" line="3145"/>
            <javadoc line="3145">
                Where the style sheet was found. Used for relative imports.                
            </javadoc>
            <class name="CssParser" line="3149">
                <comment line="1076">
                                        
                </comment>
                <comment line="1109">
                                        
                </comment>
                <comment line="1208">
                                        
                </comment>
                <comment line="1684">
                    A set of temporary variables that can be used in whatever way.                    
                </comment>
                <comment line="1931">
                    only certain tags are concerned about orientation
                     &lt;dir&gt;, &lt;menu&gt;, &lt;ul&gt;, &lt;ol&gt;
                     for all others we return true. It is implemented this way
                     for performance purposes                    
                </comment>
                <comment line="2005">
                    Bitmask, used to indicate what margins are relative:                    
                </comment>
                <comment line="2006">
                    bit 0 for top, 1 for bottom, 2 for left and 3 for right.                    
                </comment>
                <comment line="2377">
                                        
                </comment>
                <comment line="2456">
                    bit mask: 0 for repeat x, 1 for repeat y, 2 for horiz relative,                    
                </comment>
                <comment line="2457">
                    3 for vert relative                    
                </comment>
                <comment line="2459">
                    These are used when painting, updatePaintCoordinates updates them.                    
                </comment>
                <comment line="2689">
                    --- AttributeSet methods ----------------------------                    
                </comment>
                <comment line="2779">
                    PENDING(sky): Decide what to do with this. Either make it                    
                </comment>
                <comment line="2780">
                    contain a SimpleAttributeSet that modify methods are delegated to,                    
                </comment>
                <comment line="2781">
                    or change getRule to return an AttributeSet and then don&apos;t make this                    
                </comment>
                <comment line="2782">
                    implement Style.                    
                </comment>
                <comment line="3191">
                                        
                </comment>
                <comment line="3192">
                    CSSParserCallback methods, public to implement the interface.                    
                </comment>
                <comment line="3193">
                                        
                </comment>
                <implements interface="CSSParser.CSSParserCallback"/>
                <javadoc line="3149">
                    Default parser for CSS specifications that get loaded into
                      the StyleSheet.&lt;p&gt;
                      This class is NOT thread safe, do not ask it to parse while it is
                      in the middle of parsing.                    
                </javadoc>
                <javadoc line="3157">
                    Parses the passed in CSS declaration into an AttributeSet.                    
                </javadoc>
                <method name="parseDeclaration" type="AttributeSet" line="3160">
                    <params>
                        <param name="string" type="String"/>
                    </params>
                    <scope line="3161"/>
                    <scope line="3163"/>
                </method>
                <javadoc line="3167">
                    Parses the passed in CSS declaration into an AttributeSet.                    
                </javadoc>
                <method name="parseDeclaration" type="AttributeSet" line="3170">
                    <params>
                        <param name="r" type="Reader"/>
                    </params>
                </method>
                <javadoc line="3175">
                    Parse the given CSS stream                    
                </javadoc>
                <method name="parse" type="void" line="3179">
                    <params>
                        <param name="base" type="URL"/>
                        <param name="r" type="Reader"/>
                        <param name="parseDeclaration" type="boolean"/>
                        <param name="isLink" type="boolean"/>
                    </params>
                </method>
                <javadoc line="3194">
                    Invoked when a valid @import is encountered, will call
                      &lt;code&gt;importStyleSheet&lt;/code&gt; if a
                      &lt;code&gt;MalformedURLException&lt;/code&gt; is not thrown in creating
                      the URL.                    
                </javadoc>
                <method name="handleImport" type="void" line="3200">
                    <params>
                        <param name="importString" type="String"/>
                    </params>
                    <declaration name="url" type="URL" line="3201"/>
                    <scope line="3202"/>
                </method>
                <javadoc line="3207">
                    A selector has been encountered.                    
                </javadoc>
                <method name="handleSelector" type="void" line="3210">
                    <params>
                        <param name="selector" type="String"/>
                    </params>
                    <comment line="3211">
                        class and index selectors are case sensitive                        
                    </comment>
                    <scope line="3213"/>
                    <declaration name="length" type="int" line="3216"/>
                    <scope line="3218">
                        <scope line="3219"/>
                    </scope>
                    <scope line="3225"/>
                </method>
                <javadoc line="3230">
                    Invoked when the start of a rule is encountered.                    
                </javadoc>
                <method name="startRule" type="void" line="3233">
                    <scope line="3234"/>
                </method>
                <javadoc line="3240">
                    Invoked when a property name is encountered.                    
                </javadoc>
                <method name="handleProperty" type="void" line="3243">
                    <params>
                        <param name="property" type="String"/>
                    </params>
                </method>
                <javadoc line="3247">
                    Invoked when a property value is encountered.                    
                </javadoc>
                <method name="handleValue" type="void" line="3250">
                    <params>
                        <param name="value" type="String"/>
                    </params>
                    <comment line="3254">
                        There is currently no mechanism to determine real                        
                    </comment>
                    <comment line="3255">
                        base that style sheet was loaded from. For the time                        
                    </comment>
                    <comment line="3256">
                        being, this maps for LIST_STYLE_IMAGE, which appear                        
                    </comment>
                    <comment line="3257">
                        to be the only one that currently matters. A more                        
                    </comment>
                    <comment line="3258">
                        general mechanism is definately needed.                        
                    </comment>
                    <scope line="3251">
                        <declaration name="cssKey" type="CSS.Attribute" line="3252"/>
                        <scope line="3253">
                            <scope line="3259">
                                <scope line="3260">
                                    <declaration name="url" type="URL" line="3261"/>
                                    <scope line="3263"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </method>
                <javadoc line="3274">
                    Invoked when the end of a rule is encountered.                    
                </javadoc>
                <method name="endRule" type="void" line="3277">
                    <declaration name="n" type="int" line="3278"/>
                    <scope line="3279">
                        <declaration name="selector" type="String[]" line="3280"/>
                        <scope line="3281"/>
                    </scope>
                </method>
                <method name="addSelector" type="void" line="3289">
                    <declaration name="selector" type="String[]" line="3290"/>
                </method>
                <declaration name="selectors" type="Vector&lt;String[]&gt;" line="3297"/>
                <declaration name="selectorTokens" type="Vector&lt;String&gt;" line="3298"/>
                <declaration name="propertyName" type="String" line="3299"/>
                <javadoc line="3299">
                    Name of the current property.                    
                </javadoc>
                <declaration name="declaration" type="MutableAttributeSet" line="3301"/>
                <declaration name="parsingDeclaration" type="boolean" line="3302"/>
                <javadoc line="3302">
                    True if parsing a declaration, that is the Reader will not
                      contain a selector.                    
                </javadoc>
                <declaration name="isLink" type="boolean" line="3305"/>
                <javadoc line="3305">
                    True if the attributes are coming from a linked/imported style.                    
                </javadoc>
                <declaration name="base" type="URL" line="3307"/>
                <javadoc line="3307">
                    Where the CSS stylesheet lives.                    
                </javadoc>
                <declaration name="parser" type="CSSParser" line="3309"/>
            </class>
            <method name="rebaseSizeMap" type="void" line="3312">
                <params>
                    <param name="base" type="int"/>
                </params>
                <declaration name="minimalFontSize" type="int" line="3313"/>
                <scope line="3315"/>
            </method>
            <method name="getSizeMap" type="int[]" line="3323"/>
            <method name="isW3CLengthUnits" type="boolean" line="3326"/>
            <declaration name="sizeMapDefault" type="int" line="3330"/>
            <javadoc line="3330">
                The HTML/CSS size model has seven slots
                  that one can assign sizes to.                
            </javadoc>
            <declaration name="sizeMap" type="int" line="3336"/>
            <declaration name="w3cLengthUnits" type="boolean" line="3337"/>
        </class>
    </source>