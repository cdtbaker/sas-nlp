<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text">
        <import package="java.awt"/>
        <class name="GlyphPainter1" line="3">
            <extends class="GlyphView.GlyphPainter"/>
            <javadoc line="3">
                A class to perform rendering of the glyphs.
                  This can be implemented to be stateless, or
                  to hold some information as a cache to
                  facilitate faster rendering and model/view
                  translation.  At a minimum, the GlyphPainter
                  allows a View implementation to perform its
                  duties independent of a particular version
                  of JVM and selection of capabilities (i.e.
                  shaping for i18n, etc).
                  &lt;p&gt;
                  This implementation is intended for operation
                  under the JDK1.1 API of the Java Platform.
                  Since the JDK is backward compatible with
                  JDK1.1 API, this class will also function on
                  Java 2.  The JDK introduces improved
                  API for rendering text however, so the GlyphPainter2
                  is recommended for the DK.                
                <author>
                    Timothy Prinzing                    
                </author>
                <see>
                    GlyphView                    
                </see>
            </javadoc>
            <javadoc line="25">
                Determine the span the glyphs given a start location
                  (for tab expansion).                
            </javadoc>
            <method name="getSpan" type="float" line="29">
                <params>
                    <param name="v" type="GlyphView"/>
                    <param name="p0" type="int"/>
                    <param name="p1" type="int"/>
                    <param name="e" type="TabExpander"/>
                    <param name="x" type="float"/>
                </params>
                <declaration name="text" type="Segment" line="31"/>
                <declaration name="justificationData" type="int[]" line="32"/>
                <declaration name="width" type="int" line="33"/>
            </method>
            <method name="getHeight" type="float" line="37">
                <params>
                    <param name="v" type="GlyphView"/>
                </params>
            </method>
            <javadoc line="41">
                Fetches the ascent above the baseline for the glyphs
                  corresponding to the given range in the model.                
            </javadoc>
            <method name="getAscent" type="float" line="45">
                <params>
                    <param name="v" type="GlyphView"/>
                </params>
            </method>
            <javadoc line="49">
                Fetches the descent below the baseline for the glyphs
                  corresponding to the given range in the model.                
            </javadoc>
            <method name="getDescent" type="float" line="53">
                <params>
                    <param name="v" type="GlyphView"/>
                </params>
            </method>
            <javadoc line="57">
                Paints the glyphs representing the given range.                
            </javadoc>
            <method name="paint" type="void" line="60">
                <params>
                    <param name="v" type="GlyphView"/>
                    <param name="g" type="Graphics"/>
                    <param name="a" type="Shape"/>
                    <param name="p0" type="int"/>
                    <param name="p1" type="int"/>
                </params>
                <declaration name="text" type="Segment" line="62"/>
                <declaration name="expander" type="TabExpander" line="63"/>
                <declaration name="alloc" type="Rectangle" line="64"/>
                <declaration name="x" type="int" line="65"/>
                <declaration name="p" type="int" line="66"/>
                <declaration name="justificationData" type="int[]" line="67"/>
                <scope line="68">
                    <declaration name="width" type="int" line="70"/>
                </scope>
                <declaration name="y" type="int" line="74"/>
            </method>
            <method name="modelToView" type="Shape" line="80">
                <params>
                    <param name="v" type="GlyphView"/>
                    <param name="pos" type="int"/>
                    <param name="bias" type="Position.Bias"/>
                    <param name="a" type="Shape"/>
                </params>
                <declaration name="alloc" type="Rectangle" line="82"/>
                <declaration name="p0" type="int" line="83"/>
                <declaration name="p1" type="int" line="84"/>
                <declaration name="expander" type="TabExpander" line="85"/>
                <declaration name="text" type="Segment" line="86"/>
                <scope line="87"/>
                <scope line="90">
                    <declaration name="justificationData" type="int[]" line="92"/>
                    <declaration name="width" type="int" line="93"/>
                </scope>
            </method>
            <javadoc line="99">
                Provides a mapping from the view coordinate space to the logical
                  coordinate space of the model.                
                <param>
                    v the view containing the view coordinates                    
                </param>
                <param>
                    x the X coordinate                    
                </param>
                <param>
                    y the Y coordinate                    
                </param>
                <param>
                    a the allocated region to render into                    
                </param>
                <param>
                    biasReturn always returns &lt;code&gt;Position.Bias.Forward&lt;/code&gt;
                      as the zero-th element of this array                    
                </param>
                <return>
                    the location within the model that best represents the
                      given point in the view                    
                </return>
                <see>
                    View#viewToModel                    
                </see>
            </javadoc>
            <method name="viewToModel" type="int" line="112">
                <params>
                    <param name="v" type="GlyphView"/>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                    <param name="a" type="Shape"/>
                    <param name="biasReturn" type="Position.Bias[]"/>
                </params>
                <declaration name="alloc" type="Rectangle" line="114"/>
                <declaration name="p0" type="int" line="115"/>
                <declaration name="p1" type="int" line="116"/>
                <declaration name="expander" type="TabExpander" line="117"/>
                <declaration name="text" type="Segment" line="118"/>
                <declaration name="justificationData" type="int[]" line="119"/>
                <declaration name="offs" type="int" line="120"/>
                <declaration name="retValue" type="int" line="122"/>
                <scope line="123"/>
            </method>
            <javadoc line="129">
                Determines the best location (in the model) to break
                  the given view.
                  This method attempts to break on a whitespace
                  location.  If a whitespace location can&apos;t be found, the
                  nearest character location is returned.                
                <param>
                    v the view                    
                </param>
                <param>
                    p0 the location in the model where the
                      fragment should start its representation &gt;= 0                    
                </param>
                <param>
                    pos the graphic location along the axis that the
                      broken view would occupy &gt;= 0; this may be useful for
                      things like tab calculations                    
                </param>
                <param>
                    len specifies the distance into the view
                      where a potential break is desired &gt;= 0                    
                </param>
                <return>
                    the model location desired for a break                    
                </return>
                <see>
                    View#breakView                    
                </see>
            </javadoc>
            <method name="getBoundedPosition" type="int" line="146">
                <params>
                    <param name="v" type="GlyphView"/>
                    <param name="p0" type="int"/>
                    <param name="x" type="float"/>
                    <param name="len" type="float"/>
                </params>
                <declaration name="expander" type="TabExpander" line="148"/>
                <declaration name="s" type="Segment" line="149"/>
                <declaration name="justificationData" type="int[]" line="150"/>
                <declaration name="index" type="int" line="151"/>
                <declaration name="p1" type="int" line="153"/>
            </method>
            <method name="sync" type="void" line="156">
                <params>
                    <param name="v" type="GlyphView"/>
                </params>
                <declaration name="f" type="Font" line="157"/>
                <scope line="158">
                    <declaration name="c" type="Container" line="159"/>
                </scope>
            </method>
            <javadoc line="163">
                @return justificationData from the ParagraphRow this GlyphView
                  is in or {@code null} if no justification is needed                
            </javadoc>
            <method name="getJustificationData" type="int[]" line="167">
                <params>
                    <param name="v" type="GlyphView"/>
                </params>
                <declaration name="parent" type="View" line="168"/>
                <declaration name="ret" type="int[]" line="169"/>
                <scope line="170">
                    <declaration name="row" type="ParagraphView.Row" line="171"/>
                </scope>
            </method>
            <declaration name="metrics" type="FontMetrics" line="176"/>
        </class>
    </source>