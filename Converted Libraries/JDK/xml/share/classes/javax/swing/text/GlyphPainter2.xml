<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text">
        <import package="java.text"/>
        <import package="java.awt"/>
        <import package="java.awt.font"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <class name="GlyphPainter2" line="6">
            <extends class="GlyphView.GlyphPainter"/>
            <javadoc line="6">
                A class to perform rendering of the glyphs.
                  This can be implemented to be stateless, or
                  to hold some information as a cache to
                  facilitate faster rendering and model/view
                  translation.  At a minimum, the GlyphPainter
                  allows a View implementation to perform its
                  duties independent of a particular version
                  of JVM and selection of capabilities (i.e.
                  shaping for i18n, etc).
                  &lt;p&gt;
                  This implementation is intended for operation
                  under the JDK.  It uses the
                  java.awt.font.TextLayout class to do i18n capable
                  rendering.                
                <author>
                    Timothy Prinzing                    
                </author>
                <see>
                    GlyphView                    
                </see>
            </javadoc>
            <method name="GlyphPainter2" type="constructor" line="25">
                <params>
                    <param name="layout" type="TextLayout"/>
                </params>
            </method>
            <javadoc line="28">
                Create a painter to use for the given GlyphView.                
            </javadoc>
            <method name="getPainter" type="GlyphView.GlyphPainter" line="31">
                <params>
                    <param name="v" type="GlyphView"/>
                    <param name="p0" type="int"/>
                    <param name="p1" type="int"/>
                </params>
            </method>
            <javadoc line="34">
                Determine the span the glyphs given a start location
                  (for tab expansion).  This implementation assumes it
                  has no tabs (i.e. TextLayout doesn&apos;t deal with tab
                  expansion).                
            </javadoc>
            <method name="getSpan" type="float" line="40">
                <params>
                    <param name="v" type="GlyphView"/>
                    <param name="p0" type="int"/>
                    <param name="p1" type="int"/>
                    <param name="e" type="TabExpander"/>
                    <param name="x" type="float"/>
                </params>
                <scope line="41"/>
                <declaration name="p" type="int" line="44"/>
                <declaration name="index0" type="int" line="45"/>
                <declaration name="index1" type="int" line="46"/>
                <declaration name="hit0" type="TextHitInfo" line="47"/>
                <declaration name="hit1" type="TextHitInfo" line="48"/>
                <declaration name="locs" type="float[]" line="49"/>
                <declaration name="x0" type="float" line="50"/>
                <declaration name="x1" type="float" line="52"/>
            </method>
            <method name="getHeight" type="float" line="55">
                <params>
                    <param name="v" type="GlyphView"/>
                </params>
            </method>
            <javadoc line="58">
                Fetch the ascent above the baseline for the glyphs
                  corresponding to the given range in the model.                
            </javadoc>
            <method name="getAscent" type="float" line="62">
                <params>
                    <param name="v" type="GlyphView"/>
                </params>
            </method>
            <javadoc line="65">
                Fetch the descent below the baseline for the glyphs
                  corresponding to the given range in the model.                
            </javadoc>
            <method name="getDescent" type="float" line="69">
                <params>
                    <param name="v" type="GlyphView"/>
                </params>
            </method>
            <javadoc line="72">
                Paint the glyphs for the given view.  This is implemented
                  to only render if the Graphics is of type Graphics2D which
                  is required by TextLayout (and this should be the case if
                  running on the JDK).                
            </javadoc>
            <method name="paint" type="void" line="78">
                <params>
                    <param name="v" type="GlyphView"/>
                    <param name="g" type="Graphics"/>
                    <param name="a" type="Shape"/>
                    <param name="p0" type="int"/>
                    <param name="p1" type="int"/>
                </params>
                <scope line="79">
                    <declaration name="alloc" type="Rectangle2D" line="80"/>
                    <declaration name="g2d" type="Graphics2D" line="81"/>
                    <declaration name="y" type="float" line="82"/>
                    <declaration name="x" type="float" line="83"/>
                    <scope line="84">
                        <scope line="85">
                            <declaration name="s" type="Shape" line="86"/>
                            <declaration name="savedClip" type="Shape" line="87"/>
                        </scope>
                        <scope line="92"/>
                    </scope>
                    <scope line="95"/>
                </scope>
            </method>
            <method name="modelToView" type="Shape" line="100">
                <params>
                    <param name="v" type="GlyphView"/>
                    <param name="pos" type="int"/>
                    <param name="bias" type="Position.Bias"/>
                    <param name="a" type="Shape"/>
                </params>
                <declaration name="offs" type="int" line="101"/>
                <declaration name="alloc" type="Rectangle2D" line="102"/>
                <declaration name="hit" type="TextHitInfo" line="103"/>
                <declaration name="locs" type="float[]" line="104"/>
            </method>
            <javadoc line="108">
                Provides a mapping from the view coordinate space to the logical
                  coordinate space of the model.                
                <param>
                    v the view containing the view coordinates                    
                </param>
                <param>
                    x the X coordinate                    
                </param>
                <param>
                    y the Y coordinate                    
                </param>
                <param>
                    a the allocated region to render into                    
                </param>
                <param>
                    biasReturn either <code>Position.Bias.Forward</code>
                      or <code>Position.Bias.Backward</code> is returned as the
                      zero-th element of this array                    
                </param>
                <return>
                    the location within the model that best represents the
                      given point of view                    
                </return>
                <see>
                    View#viewToModel                    
                </see>
            </javadoc>
            <method name="viewToModel" type="int" line="122">
                <params>
                    <param name="v" type="GlyphView"/>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                    <param name="a" type="Shape"/>
                    <param name="biasReturn" type="Position.Bias[]"/>
                </params>
                <declaration name="alloc" type="Rectangle2D" line="123"/>
                <declaration name="hit" type="TextHitInfo" line="124"/>
                <declaration name="pos" type="int" line="125"/>
                <scope line="126"/>
            </method>
            <javadoc line="132">
                Determines the model location that represents the
                  maximum advance that fits within the given span.
                  This could be used to break the given view.  The result
                  should be a location just shy of the given advance.  This
                  differs from viewToModel which returns the closest
                  position which might be proud of the maximum advance.                
                <param>
                    v the view to find the model location to break at.                    
                </param>
                <param>
                    p0 the location in the model where the
                      fragment should start it's representation >= 0.                    
                </param>
                <param>
                    pos the graphic location along the axis that the
                      broken view would occupy >= 0.  This may be useful for
                      things like tab calculations.                    
                </param>
                <param>
                    len specifies the distance into the view
                      where a potential break is desired >= 0.                    
                </param>
                <return>
                    the maximum model location possible for a break.                    
                </return>
                <see>
                    View#breakView                    
                </see>
            </javadoc>
            <method name="getBoundedPosition" type="int" line="150">
                <params>
                    <param name="v" type="GlyphView"/>
                    <param name="p0" type="int"/>
                    <param name="x" type="float"/>
                    <param name="len" type="float"/>
                </params>
                <declaration name="hit" type="TextHitInfo" line="152"/>
                <scope line="153"/>
                <scope line="156"/>
            </method>
            <javadoc line="161">
                Provides a way to determine the next visually represented model
                  location that one might place a caret.  Some views may not be
                  visible, they might not be in the same order found in the model, or
                  they just might not allow access to some of the locations in the
                  model.                
                <param>
                    v the view to use                    
                </param>
                <param>
                    pos the position to convert >= 0                    
                </param>
                <param>
                    a the allocated region to render into                    
                </param>
                <param>
                    direction the direction from the current position that can
                      be thought of as the arrow keys typically found on a keyboard.
                      This may be SwingConstants.WEST, SwingConstants.EAST,
                      SwingConstants.NORTH, or SwingConstants.SOUTH.                    
                </param>
                <return>
                    the location within the model that best represents the next
                      location visual position.                    
                </return>
                <exception>
                    BadLocationException                    
                </exception>
                <exception>
                    IllegalArgumentException for an invalid direction                    
                </exception>
            </javadoc>
            <method name="getNextVisualPositionFrom" type="int" line="179">
                <params>
                    <param name="v" type="GlyphView"/>
                    <param name="pos" type="int"/>
                    <param name="b" type="Position.Bias"/>
                    <param name="a" type="Shape"/>
                    <param name="direction" type="int"/>
                    <param name="biasRet" type="Position.Bias[]"/>
                </params>
                <declaration name="startOffset" type="int" line="180"/>
                <declaration name="endOffset" type="int" line="181"/>
                <declaration name="text" type="Segment" line="182"/>
                <declaration name="doc" type="AbstractDocument" line="183"/>
                <declaration name="viewIsLeftToRight" type="boolean" line="184"/>
                <declaration name="currentHit" type="TextHitInfo" line="185"/>
                <scope line="194">
                    <scope line="195"/>
                </scope>
                <scope line="201">
                    <scope line="202"/>
                    <scope line="206">
                        <declaration name="c" type="char" line="208"/>
                        <scope line="210"/>
                    </scope>
                </scope>
                <scope line="221"/>
                <scope line="224"/>
                <scope line="228">
                    <declaration name="c" type="char" line="230"/>
                    <scope line="232"/>
                </scope>
                <scope line="237"/>
                <scope line="244">
                    <scope line="245"/>
                </scope>
                <scope line="251">
                    <scope line="252">
                        <declaration name="c" type="char" line="254"/>
                        <scope line="256"/>
                    </scope>
                    <scope line="263"/>
                </scope>
                <scope line="271"/>
                <scope line="274"/>
                <scope line="278">
                    <declaration name="c" type="char" line="280"/>
                    <scope line="282"/>
                </scope>
                <scope line="287"/>
            </method>
            <declaration name="layout" type="TextLayout" line="296"/>
        </class>
    </source>