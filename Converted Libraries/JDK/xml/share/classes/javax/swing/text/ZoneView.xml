<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text">
        <import package="java.util.Vector"/>
        <import package="java.awt"/>
        <import package="javax.swing.event"/>
        <class name="ZoneView" line="5">
            <extends class="BoxView"/>
            <javadoc line="5">
                ZoneView is a View implementation that creates zones for which
                  the child views are not created or stored until they are needed
                  for display or model/view translations.  This enables a substantial
                  reduction in memory consumption for situations where the model
                  being represented is very large, by building view objects only for
                  the region being actively viewed/edited.  The size of the children
                  can be estimated in some way, or calculated asynchronously with
                  only the result being saved.
                  &lt;p&gt;
                  ZoneView extends BoxView to provide a box that implements
                  zones for its children.  The zones are special View implementations
                  (the children of an instance of this class) that represent only a
                  portion of the model that an instance of ZoneView is responsible
                  for.  The zones don&apos;t create child views until an attempt is made
                  to display them. A box shaped view is well suited to this because:
                  &lt;ul&gt;
                  &lt;li&gt;
                  Boxes are a heavily used view, and having a box that
                  provides this behavior gives substantial opportunity
                  to plug the behavior into a view hierarchy from the
                  view factory.
                  &lt;li&gt;
                  Boxes are tiled in one direction, so it is easy to
                  divide them into zones in a reliable way.
                  &lt;li&gt;
                  Boxes typically have a simple relationship to the model (i.e. they
                  create child views that directly represent the child elements).
                  &lt;li&gt;
                  Boxes are easier to estimate the size of than some other shapes.
                  &lt;/ul&gt;
                  &lt;p&gt;
                  The default behavior is controled by two properties, maxZoneSize
                  and maxZonesLoaded.  Setting maxZoneSize to Integer.MAX_VALUE would
                  have the effect of causing only one zone to be created.  This would
                  effectively turn the view into an implementation of the decorator
                  pattern.  Setting maxZonesLoaded to a value of Integer.MAX_VALUE would
                  cause zones to never be unloaded.  For simplicity, zones are created on
                  boundaries represented by the child elements of the element the view is
                  responsible for.  The zones can be any View implementation, but the
                  default implementation is based upon AsyncBoxView which supports fairly
                  large zones efficiently.                
                <author>
                    Timothy Prinzing                    
                </author>
                <see>
                    View                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <declaration name="maxZoneSize" type="int" line="52"/>
            <declaration name="maxZonesLoaded" type="int" line="53"/>
            <declaration name="loadedZones" type="Vector&lt;View&gt;" line="54"/>
            <javadoc line="55">
                Constructs a ZoneView.                
                <param>
                    elem the element this view is responsible for                    
                </param>
                <param>
                    axis either View.X_AXIS or View.Y_AXIS                    
                </param>
            </javadoc>
            <method name="ZoneView" type="constructor" line="60">
                <params>
                    <param name="elem" type="Element"/>
                    <param name="axis" type="int"/>
                </params>
            </method>
            <javadoc line="64">
                Get the current maximum zone size.                
            </javadoc>
            <method name="getMaximumZoneSize" type="int" line="67"/>
            <javadoc line="70">
                Set the desired maximum zone size.  A
                  zone may get larger than this size if
                  a single child view is larger than this
                  size since zones are formed on child view
                  boundaries.                
                <param>
                    size the number of characters the zone
                      may represent before attempting to break
                      the zone into a smaller size.                    
                </param>
            </javadoc>
            <method name="setMaximumZoneSize" type="void" line="80">
                <params>
                    <param name="size" type="int"/>
                </params>
            </method>
            <javadoc line="83">
                Get the current setting of the number of zones
                  allowed to be loaded at the same time.                
            </javadoc>
            <method name="getMaxZonesLoaded" type="int" line="87"/>
            <javadoc line="90">
                Sets the current setting of the number of zones
                  allowed to be loaded at the same time. This will throw an
                  &lt;code&gt;IllegalArgumentException&lt;/code&gt; if &lt;code&gt;mzl&lt;/code&gt; is less
                  than 1.                
                <param>
                    mzl the desired maximum number of zones
                      to be actively loaded, must be greater than 0                    
                </param>
                <exception>
                    IllegalArgumentException if <code>mzl</code> is < 1                    
                </exception>
            </javadoc>
            <method name="setMaxZonesLoaded" type="void" line="99">
                <params>
                    <param name="mzl" type="int"/>
                </params>
                <scope line="100"/>
            </method>
            <javadoc line="106">
                Called by a zone when it gets loaded.  This happens when
                  an attempt is made to display or perform a model/view
                  translation on a zone that was in an unloaded state.
                  This is imlemented to check if the maximum number of
                  zones was reached and to unload the oldest zone if so.                
                <param>
                    zone the child view that was just loaded.                    
                </param>
            </javadoc>
            <method name="zoneWasLoaded" type="void" line="114">
                <params>
                    <param name="zone" type="View"/>
                </params>
            </method>
            <method name="unloadOldZones" type="void" line="118">
                <scope line="119">
                    <declaration name="zone" type="View" line="120"/>
                </scope>
            </method>
            <javadoc line="125">
                Unload a zone (Convert the zone to its memory saving state).
                  The zones are expected to represent a subset of the
                  child elements of the element this view is responsible for.
                  Therefore, the default implementation is to simple remove
                  all the children.                
                <param>
                    zone the child view desired to be set to an
                      unloaded state.                    
                </param>
            </javadoc>
            <method name="unloadZone" type="void" line="134">
                <params>
                    <param name="zone" type="View"/>
                </params>
            </method>
            <javadoc line="137">
                Determine if a zone is in the loaded state.
                  The zones are expected to represent a subset of the
                  child elements of the element this view is responsible for.
                  Therefore, the default implementation is to return
                  true if the view has children.                
            </javadoc>
            <method name="isZoneLoaded" type="boolean" line="144">
                <params>
                    <param name="zone" type="View"/>
                </params>
            </method>
            <javadoc line="147">
                Create a view to represent a zone for the given
                  range within the model (which should be within
                  the range of this objects responsibility).  This
                  is called by the zone management logic to create
                  new zones.  Subclasses can provide a different
                  implementation for a zone by changing this method.                
                <param>
                    p0 the start of the desired zone.  This should
                      be >= getStartOffset() and < getEndOffset().  This
                      value should also be < p1.                    
                </param>
                <param>
                    p1 the end of the desired zone.  This should
                      be > getStartOffset() and <= getEndOffset().  This
                      value should also be > p0.                    
                </param>
            </javadoc>
            <method name="createZone" type="View" line="161">
                <params>
                    <param name="p0" type="int"/>
                    <param name="p1" type="int"/>
                </params>
                <declaration name="doc" type="Document" line="162"/>
                <declaration name="zone" type="View" line="163"/>
                <scope line="164"/>
                <scope line="167"/>
            </method>
            <javadoc line="172">
                Loads all of the children to initialize the view.
                  This is called by the &lt;code&gt;setParent&lt;/code&gt; method.
                  This is reimplemented to not load any children directly
                  (as they are created by the zones).  This method creates
                  the initial set of zones.  Zones don&apos;t actually get
                  populated however until an attempt is made to display
                  them or to do model/view coordinate translation.                
                <param>
                    f the view factory                    
                </param>
            </javadoc>
            <method name="loadChildren" type="void" line="182">
                <params>
                    <param name="f" type="ViewFactory"/>
                </params>
                <declaration name="doc" type="Document" line="183"/>
                <declaration name="offs0" type="int" line="184"/>
                <declaration name="offs1" type="int" line="185"/>
            </method>
            <javadoc line="189">
                Returns the child view index representing the given position in
                  the model.                
                <param>
                    pos the position >= 0                    
                </param>
                <return>
                    index of the view representing the given position, or
                      -1 if no view represents that position                    
                </return>
            </javadoc>
            <method name="getViewIndexAtPosition" type="int" line="196">
                <params>
                    <param name="pos" type="int"/>
                </params>
                <declaration name="n" type="int" line="197"/>
                <scope line="198"/>
                <scope line="201">
                    <declaration name="v" type="View" line="202"/>
                    <scope line="203"/>
                </scope>
            </method>
            <method name="handleInsert" type="void" line="209">
                <params>
                    <param name="pos" type="int"/>
                    <param name="length" type="int"/>
                </params>
                <declaration name="index" type="int" line="210"/>
                <declaration name="v" type="View" line="211"/>
                <declaration name="offs0" type="int" line="212"/>
                <declaration name="offs1" type="int" line="213"/>
                <scope line="214"/>
            </method>
            <method name="handleRemove" type="void" line="218">
                <params>
                    <param name="pos" type="int"/>
                    <param name="length" type="int"/>
                </params>
            </method>
            <javadoc line="220">
                Break up the zone at the given index into pieces
                  of an acceptable size.                
            </javadoc>
            <method name="splitZone" type="void" line="224">
                <params>
                    <param name="index" type="int"/>
                    <param name="offs0" type="int"/>
                    <param name="offs1" type="int"/>
                </params>
                <declaration name="elem" type="Element" line="225"/>
                <declaration name="doc" type="Document" line="226"/>
                <declaration name="zones" type="Vector&lt;View&gt;" line="227"/>
                <declaration name="offs" type="int" line="228"/>
                <scope line="229"/>
                <declaration name="oldZone" type="View" line="235"/>
                <declaration name="newZones" type="View[]" line="236"/>
            </method>
            <javadoc line="240">
                Returns the zone position to use for the
                  end of a zone that starts at the given
                  position.  By default this returns something
                  close to half the max zone size.                
            </javadoc>
            <method name="getDesiredZoneEnd" type="int" line="246">
                <params>
                    <param name="pos" type="int"/>
                </params>
                <declaration name="elem" type="Element" line="247"/>
                <declaration name="index" type="int" line="248"/>
                <declaration name="child" type="Element" line="249"/>
                <declaration name="offs0" type="int" line="250"/>
                <declaration name="offs1" type="int" line="251"/>
                <scope line="252">
                    <scope line="253"/>
                </scope>
            </method>
            <javadoc line="259">
                The superclass behavior will try to update the child views
                  which is not desired in this case, since the children are
                  zones and not directly effected by the changes to the
                  associated element.  This is reimplemented to do nothing
                  and return false.                
            </javadoc>
            <method name="updateChildren" type="boolean" line="266">
                <params>
                    <param name="ec" type="DocumentEvent.ElementChange"/>
                    <param name="e" type="DocumentEvent"/>
                    <param name="f" type="ViewFactory"/>
                </params>
            </method>
            <javadoc line="269">
                Gives notification that something was inserted into the document
                  in a location that this view is responsible for.  This is largely
                  delegated to the superclass, but is reimplemented to update the
                  relevant zone (i.e. determine if a zone needs to be split into a
                  set of 2 or more zones).                
                <param>
                    changes the change information from the associated document                    
                </param>
                <param>
                    a the current allocation of the view                    
                </param>
                <param>
                    f the factory to use to rebuild if the view has children                    
                </param>
                <see>
                    View#insertUpdate                    
                </see>
            </javadoc>
            <method name="insertUpdate" type="void" line="280">
                <params>
                    <param name="changes" type="DocumentEvent"/>
                    <param name="a" type="Shape"/>
                    <param name="f" type="ViewFactory"/>
                </params>
            </method>
            <javadoc line="284">
                Gives notification that something was removed from the document
                  in a location that this view is responsible for.  This is largely
                  delegated to the superclass, but is reimplemented to update the
                  relevant zones (i.e. determine if zones need to be removed or
                  joined with another zone).                
                <param>
                    changes the change information from the associated document                    
                </param>
                <param>
                    a the current allocation of the view                    
                </param>
                <param>
                    f the factory to use to rebuild if the view has children                    
                </param>
                <see>
                    View#removeUpdate                    
                </see>
            </javadoc>
            <method name="removeUpdate" type="void" line="295">
                <params>
                    <param name="changes" type="DocumentEvent"/>
                    <param name="a" type="Shape"/>
                    <param name="f" type="ViewFactory"/>
                </params>
            </method>
            <class name="Zone" line="299">
                <extends class="AsyncBoxView"/>
                <javadoc line="299">
                    Internally created view that has the purpose of holding
                      the views that represent the children of the ZoneView
                      that have been arranged in a zone.                    
                </javadoc>
                <declaration name="start" type="Position" line="305"/>
                <declaration name="end" type="Position" line="306"/>
                <method name="Zone" type="constructor" line="307">
                    <params>
                        <param name="elem" type="Element"/>
                        <param name="start" type="Position"/>
                        <param name="end" type="Position"/>
                    </params>
                </method>
                <javadoc line="312">
                    Creates the child views and populates the
                      zone with them.  This is done by translating
                      the positions to child element index locations
                      and building views to those elements.  If the
                      zone is already loaded, this does nothing.                    
                </javadoc>
                <method name="load" type="void" line="319">
                    <scope line="320">
                        <declaration name="e" type="Element" line="322"/>
                        <declaration name="f" type="ViewFactory" line="323"/>
                        <declaration name="index0" type="int" line="324"/>
                        <declaration name="index1" type="int" line="325"/>
                        <declaration name="added" type="View[]" line="326"/>
                        <scope line="327"/>
                    </scope>
                </method>
                <javadoc line="334">
                    Removes the child views and returns to a
                      state of unloaded.                    
                </javadoc>
                <method name="unload" type="void" line="338"/>
                <javadoc line="342">
                    Determines if the zone is in the loaded state
                      or not.                    
                </javadoc>
                <method name="isLoaded" type="boolean" line="346"/>
                <javadoc line="349">
                    This method is reimplemented to not build the children
                      since the children are created when the zone is loaded
                      rather then when it is placed in the view hierarchy.
                      The major span is estimated at this point by building
                      the first child (but not storing it), and calling
                      setEstimatedMajorSpan(true) followed by setSpan for
                      the major axis with the estimated span.                    
                </javadoc>
                <method name="loadChildren" type="void" line="358">
                    <params>
                        <param name="f" type="ViewFactory"/>
                    </params>
                    <declaration name="elem" type="Element" line="360"/>
                    <declaration name="index0" type="int" line="361"/>
                    <declaration name="index1" type="int" line="362"/>
                    <declaration name="nChildren" type="int" line="363"/>
                    <declaration name="first" type="View" line="364"/>
                    <declaration name="w" type="float" line="366"/>
                    <declaration name="h" type="float" line="367"/>
                    <scope line="368"/>
                    <scope line="371"/>
                </method>
                <javadoc line="376">
                    Publish the changes in preferences upward to the parent
                      view.
                      &lt;p&gt;
                      This is reimplemented to stop the superclass behavior
                      if the zone has not yet been loaded.  If the zone is
                      unloaded for example, the last seen major span is the
                      best estimate and a calculated span for no children
                      is undesirable.                    
                </javadoc>
                <method name="flushRequirementChanges" type="void" line="386">
                    <scope line="387"/>
                </method>
                <javadoc line="391">
                    Returns the child view index representing the given position in
                      the model.  Since the zone contains a cluster of the overall
                      set of child elements, we can determine the index fairly
                      quickly from the model by subtracting the index of the
                      start offset from the index of the position given.                    
                    <param>
                        pos the position >= 0                        
                    </param>
                    <return>
                        index of the view representing the given position, or
                          -1 if no view represents that position                        
                    </return>
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <method name="getViewIndex" type="int" line="402">
                    <params>
                        <param name="pos" type="int"/>
                        <param name="b" type="Position.Bias"/>
                    </params>
                    <declaration name="isBackward" type="boolean" line="403"/>
                    <declaration name="elem" type="Element" line="405"/>
                    <declaration name="index1" type="int" line="406"/>
                    <declaration name="index0" type="int" line="407"/>
                </method>
                <method name="updateChildren" type="boolean" line="410">
                    <params>
                        <param name="ec" type="DocumentEvent.ElementChange"/>
                        <param name="e" type="DocumentEvent"/>
                        <param name="f" type="ViewFactory"/>
                    </params>
                    <declaration name="removedElems" type="Element[]" line="411"/>
                    <declaration name="addedElems" type="Element[]" line="412"/>
                    <declaration name="elem" type="Element" line="413"/>
                    <declaration name="index0" type="int" line="414"/>
                    <declaration name="index1" type="int" line="415"/>
                    <declaration name="index" type="int" line="416"/>
                    <scope line="417">
                        <declaration name="replaceIndex" type="int" line="418"/>
                        <declaration name="nadd" type="int" line="419"/>
                        <declaration name="nremove" type="int" line="420"/>
                        <declaration name="added" type="View[]" line="421"/>
                        <scope line="422"/>
                    </scope>
                </method>
                <javadoc line="429">
                    Fetches the attributes to use when rendering.  This view
                      isn&apos;t directly responsible for an element so it returns
                      the outer classes attributes.                    
                </javadoc>
                <method name="getAttributes" type="AttributeSet" line="434"/>
                <javadoc line="437">
                    Renders using the given rendering surface and area on that
                      surface.  This is implemented to load the zone if its not
                      already loaded, and then perform the superclass behavior.                    
                    <param>
                        g the rendering surface to use                        
                    </param>
                    <param>
                        a the allocated region to render into                        
                    </param>
                    <see>
                        View#paint                        
                    </see>
                </javadoc>
                <method name="paint" type="void" line="445">
                    <params>
                        <param name="g" type="Graphics"/>
                        <param name="a" type="Shape"/>
                    </params>
                </method>
                <javadoc line="449">
                    Provides a mapping from the view coordinate space to the logical
                      coordinate space of the model.  This is implemented to first
                      make sure the zone is loaded before providing the superclass
                      behavior.                    
                    <param>
                        x   x coordinate of the view location to convert >= 0                        
                    </param>
                    <param>
                        y   y coordinate of the view location to convert >= 0                        
                    </param>
                    <param>
                        a the allocated region to render into                        
                    </param>
                    <return>
                        the location within the model that best represents the
                          given point in the view >= 0                        
                    </return>
                    <see>
                        View#viewToModel                        
                    </see>
                </javadoc>
                <method name="viewToModel" type="int" line="461">
                    <params>
                        <param name="x" type="float"/>
                        <param name="y" type="float"/>
                        <param name="a" type="Shape"/>
                        <param name="bias" type="Position.Bias[]"/>
                    </params>
                </method>
                <javadoc line="465">
                    Provides a mapping from the document model coordinate space
                      to the coordinate space of the view mapped to it.  This is
                      implemented to provide the superclass behavior after first
                      making sure the zone is loaded (The zone must be loaded to
                      make this calculation).                    
                    <param>
                        pos the position to convert                        
                    </param>
                    <param>
                        a the allocated region to render into                        
                    </param>
                    <return>
                        the bounding box of the given position                        
                    </return>
                    <exception>
                        BadLocationException  if the given position does not represent a
                          valid location in the associated document                        
                    </exception>
                    <see>
                        View#modelToView                        
                    </see>
                </javadoc>
                <method name="modelToView" type="Shape" line="478">
                    <params>
                        <param name="pos" type="int"/>
                        <param name="a" type="Shape"/>
                        <param name="b" type="Position.Bias"/>
                    </params>
                </method>
                <javadoc line="482">
                    Start of the zones range.                    
                    <see>
                        View#getStartOffset                        
                    </see>
                </javadoc>
                <method name="getStartOffset" type="int" line="486"/>
                <javadoc line="489">
                    End of the zones range.                    
                </javadoc>
                <method name="getEndOffset" type="int" line="492"/>
                <javadoc line="495">
                    Gives notification that something was inserted into
                      the document in a location that this view is responsible for.
                      If the zone has been loaded, the superclass behavior is
                      invoked, otherwise this does nothing.                    
                    <param>
                        e the change information from the associated document                        
                    </param>
                    <param>
                        a the current allocation of the view                        
                    </param>
                    <param>
                        f the factory to use to rebuild if the view has children                        
                    </param>
                    <see>
                        View#insertUpdate                        
                    </see>
                </javadoc>
                <method name="insertUpdate" type="void" line="505">
                    <params>
                        <param name="e" type="DocumentEvent"/>
                        <param name="a" type="Shape"/>
                        <param name="f" type="ViewFactory"/>
                    </params>
                    <scope line="506"/>
                </method>
                <javadoc line="510">
                    Gives notification that something was removed from the document
                      in a location that this view is responsible for.
                      If the zone has been loaded, the superclass behavior is
                      invoked, otherwise this does nothing.                    
                    <param>
                        e the change information from the associated document                        
                    </param>
                    <param>
                        a the current allocation of the view                        
                    </param>
                    <param>
                        f the factory to use to rebuild if the view has children                        
                    </param>
                    <see>
                        View#removeUpdate                        
                    </see>
                </javadoc>
                <method name="removeUpdate" type="void" line="520">
                    <params>
                        <param name="e" type="DocumentEvent"/>
                        <param name="a" type="Shape"/>
                        <param name="f" type="ViewFactory"/>
                    </params>
                    <scope line="521"/>
                </method>
                <javadoc line="525">
                    Gives notification from the document that attributes were changed
                      in a location that this view is responsible for.
                      If the zone has been loaded, the superclass behavior is
                      invoked, otherwise this does nothing.                    
                    <param>
                        e the change information from the associated document                        
                    </param>
                    <param>
                        a the current allocation of the view                        
                    </param>
                    <param>
                        f the factory to use to rebuild if the view has children                        
                    </param>
                    <see>
                        View#removeUpdate                        
                    </see>
                </javadoc>
                <method name="changedUpdate" type="void" line="535">
                    <params>
                        <param name="e" type="DocumentEvent"/>
                        <param name="a" type="Shape"/>
                        <param name="f" type="ViewFactory"/>
                    </params>
                    <scope line="536"/>
                </method>
            </class>
        </class>
    </source>