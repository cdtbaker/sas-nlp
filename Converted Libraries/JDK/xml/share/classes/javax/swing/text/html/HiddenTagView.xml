<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text.html">
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="java.io"/>
        <import package="java.net.MalformedURLException"/>
        <import package="java.net.URL"/>
        <import package="javax.swing.text"/>
        <import package="javax.swing"/>
        <import package="javax.swing.border"/>
        <import package="javax.swing.event"/>
        <import package="java.util"/>
        <class name="HiddenTagView" line="12">
            <extends class="EditableView"/>
            <implements interface="DocumentListener"/>
            <javadoc line="12">
                HiddenTagView subclasses EditableView to contain a JTextField showing
                  the element name. When the textfield is edited the element name is
                  reset. As this inherits from EditableView if the JTextComponent is
                  not editable, the textfield will not be visible.                
                <author>
                    Scott Violet                    
                </author>
            </javadoc>
            <method name="HiddenTagView" type="constructor" line="20">
                <params>
                    <param name="e" type="Element"/>
                </params>
            </method>
            <method name="createComponent" type="Component" line="24">
                <declaration name="tf" type="JTextField" line="25"/>
                <declaration name="doc" type="Document" line="26"/>
                <declaration name="font" type="Font" line="27"/>
                <scope line="28"/>
                <scope line="32"/>
                <declaration name="panel" type="JPanel" line="37"/>
                <scope line="39"/>
                <scope line="42"/>
            </method>
            <method name="getAlignment" type="float" line="48">
                <params>
                    <param name="axis" type="int"/>
                </params>
                <scope line="49"/>
            </method>
            <method name="getMinimumSpan" type="float" line="54">
                <params>
                    <param name="axis" type="int"/>
                </params>
                <scope line="55"/>
            </method>
            <method name="getPreferredSpan" type="float" line="60">
                <params>
                    <param name="axis" type="int"/>
                </params>
                <scope line="61"/>
            </method>
            <method name="getMaximumSpan" type="float" line="66">
                <params>
                    <param name="axis" type="int"/>
                </params>
                <scope line="67"/>
            </method>
            <method name="insertUpdate" type="void" line="72">
                <params>
                    <param name="e" type="DocumentEvent"/>
                </params>
            </method>
            <method name="removeUpdate" type="void" line="75">
                <params>
                    <param name="e" type="DocumentEvent"/>
                </params>
            </method>
            <method name="changedUpdate" type="void" line="78">
                <params>
                    <param name="e" type="DocumentEvent"/>
                </params>
            </method>
            <method name="changedUpdate" type="void" line="81">
                <params>
                    <param name="e" type="DocumentEvent"/>
                    <param name="a" type="Shape"/>
                    <param name="f" type="ViewFactory"/>
                </params>
                <scope line="82"/>
            </method>
            <method name="updateYAlign" type="void" line="86">
                <params>
                    <param name="font" type="Font"/>
                </params>
                <declaration name="c" type="Container" line="87"/>
                <declaration name="fm" type="FontMetrics" line="88"/>
                <declaration name="h" type="float" line="89"/>
                <declaration name="d" type="float" line="90"/>
            </method>
            <method name="resetBorder" type="void" line="93">
                <declaration name="comp" type="Component" line="94"/>
                <scope line="95">
                    <scope line="96"/>
                    <scope line="99"/>
                </scope>
            </method>
            <javadoc line="104">
                This resets the text on the text component we created to match
                  that of the AttributeSet for the Element we represent.
                  &lt;p&gt;If this is invoked on the event dispatching thread, this
                  directly invokes &lt;code&gt;_setTextFromModel&lt;/code&gt;, otherwise
                  &lt;code&gt;SwingUtilities.invokeLater&lt;/code&gt; is used to schedule execution
                  of &lt;code&gt;_setTextFromModel&lt;/code&gt;.                
            </javadoc>
            <method name="setTextFromModel" type="void" line="112">
                <scope line="113"/>
                <scope line="116">
                    <anonymous_class line="117">
                        <method name="run" type="void" line="118"/>
                    </anonymous_class>
                </scope>
            </method>
            <javadoc line="125">
                This resets the text on the text component we created to match
                  that of the AttributeSet for the Element we represent.                
            </javadoc>
            <method name="_setTextFromModel" type="void" line="129">
                <declaration name="doc" type="Document" line="130"/>
                <scope line="131">
                    <scope line="133"/>
                    <declaration name="text" type="JTextComponent" line="136"/>
                    <scope line="137">
                        <declaration name="host" type="Container" line="140"/>
                        <scope line="141"/>
                    </scope>
                </scope>
                <scope line="147">
                    <scope line="149"/>
                </scope>
            </method>
            <javadoc line="154">
                This copies the text from the text component we&apos;ve created
                  to the Element&apos;s AttributeSet we represent.
                  &lt;p&gt;If this is invoked on the event dispatching thread, this
                  directly invokes &lt;code&gt;_updateModelFromText&lt;/code&gt;, otherwise
                  &lt;code&gt;SwingUtilities.invokeLater&lt;/code&gt; is used to schedule execution
                  of &lt;code&gt;_updateModelFromText&lt;/code&gt;.                
            </javadoc>
            <method name="updateModelFromText" type="void" line="162">
                <scope line="163">
                    <scope line="164"/>
                    <scope line="167">
                        <anonymous_class line="168">
                            <method name="run" type="void" line="169"/>
                        </anonymous_class>
                    </scope>
                </scope>
            </method>
            <javadoc line="177">
                This copies the text from the text component we&apos;ve created
                  to the Element&apos;s AttributeSet we represent.                
            </javadoc>
            <method name="_updateModelFromText" type="void" line="181">
                <declaration name="doc" type="Document" line="182"/>
                <declaration name="name" type="Object" line="183"/>
                <scope line="184">
                    <declaration name="sas" type="SimpleAttributeSet" line="185"/>
                    <declaration name="textComponent" type="JTextComponent" line="186"/>
                    <scope line="187">
                        <declaration name="text" type="String" line="188"/>
                        <scope line="190"/>
                        <scope line="194"/>
                    </scope>
                </scope>
            </method>
            <method name="getTextComponent" type="JTextComponent" line="200">
                <declaration name="comp" type="Component" line="201"/>
            </method>
            <method name="getRepresentedText" type="String" line="204">
                <declaration name="retValue" type="String" line="205"/>
            </method>
            <method name="isEndTag" type="boolean" line="208">
                <declaration name="as" type="AttributeSet" line="209"/>
                <scope line="210">
                    <declaration name="end" type="Object" line="211"/>
                    <scope line="212"/>
                </scope>
            </method>
            <declaration name="yAlign" type="float" line="218"/>
            <javadoc line="218">
                Alignment along the y axis, based on the font of the textfield.                
            </javadoc>
            <declaration name="isSettingAttributes" type="boolean" line="222"/>
            <javadoc line="222">
                Set to true when setting attributes.                
            </javadoc>
            <declaration name="circleR" type="int" line="226"/>
            <declaration name="circleD" type="int" line="227"/>
            <declaration name="tagSize" type="int" line="228"/>
            <declaration name="padding" type="int" line="229"/>
            <declaration name="UnknownTagBorderColor" type="Color" line="230"/>
            <declaration name="StartBorder" type="Border" line="231"/>
            <declaration name="EndBorder" type="Border" line="232"/>
            <class name="StartTagBorder" line="233">
                <implements interface="Border"/>
                <implements interface="Serializable"/>
                <method name="paintBorder" type="void" line="234">
                    <params>
                        <param name="c" type="Component"/>
                        <param name="g" type="Graphics"/>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                        <param name="width" type="int"/>
                        <param name="height" type="int"/>
                    </params>
                </method>
                <method name="getBorderInsets" type="Insets" line="246">
                    <params>
                        <param name="c" type="Component"/>
                    </params>
                </method>
                <method name="isBorderOpaque" type="boolean" line="249"/>
            </class>
            <class name="EndTagBorder" line="253">
                <implements interface="Border"/>
                <implements interface="Serializable"/>
                <method name="paintBorder" type="void" line="254">
                    <params>
                        <param name="c" type="Component"/>
                        <param name="g" type="Graphics"/>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                        <param name="width" type="int"/>
                        <param name="height" type="int"/>
                    </params>
                </method>
                <method name="getBorderInsets" type="Insets" line="266">
                    <params>
                        <param name="c" type="Component"/>
                    </params>
                </method>
                <method name="isBorderOpaque" type="boolean" line="269"/>
            </class>
        </class>
    </source>