<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text">
        <import package="java.io"/>
        <import package="javax.swing.Action"/>
        <import package="javax.swing.JEditorPane"/>
        <class name="EditorKit" line="31">
            <implements interface="Cloneable"/>
            <implements interface="Serializable"/>
            <javadoc line="31">
                Establishes the set of things needed by a text component
                  to be a reasonably functioning editor for some &lt;em&gt;type&lt;/em&gt;
                  of text content.  The EditorKit acts as a factory for some
                  kind of policy.  For example, an implementation
                  of html and rtf can be provided that is replaceable
                  with other implementations.
                  &lt;p&gt;
                  A kit can safely store editing state as an instance
                  of the kit will be dedicated to a text component.
                  New kits will normally be created by cloning a
                  prototype kit.  The kit will have it&apos;s
                  &lt;code&gt;setComponent&lt;/code&gt; method called to establish
                  it&apos;s relationship with a JTextComponent.                
                <author>
                    Timothy Prinzing                    
                </author>
            </javadoc>
            <javadoc line="50">
                Construct an EditorKit.                
            </javadoc>
            <method name="EditorKit" type="constructor" line="53"/>
            <javadoc line="56">
                Creates a copy of the editor kit.  This is implemented
                  to use Object.clone&lt;/em&gt;.  If the kit cannot be cloned,
                  null is returned.                
                <return>
                    the copy                    
                </return>
            </javadoc>
            <method name="clone" type="Object" line="63">
                <declaration name="o" type="Object" line="64"/>
                <scope line="65"/>
                <scope line="67"/>
            </method>
            <javadoc line="73">
                Called when the kit is being installed into the
                  a JEditorPane.                
                <param>
                    c the JEditorPane                    
                </param>
            </javadoc>
            <method name="install" type="void" line="79">
                <params>
                    <param name="c" type="JEditorPane"/>
                </params>
            </method>
            <javadoc line="82">
                Called when the kit is being removed from the
                  JEditorPane.  This is used to unregister any
                  listeners that were attached.                
                <param>
                    c the JEditorPane                    
                </param>
            </javadoc>
            <method name="deinstall" type="void" line="89">
                <params>
                    <param name="c" type="JEditorPane"/>
                </params>
            </method>
            <method name="getContentType" type="String" line="92"/>
            <javadoc line="92">
                Gets the MIME type of the data that this
                  kit represents support for.                
                <return>
                    the type                    
                </return>
            </javadoc>
            <method name="getViewFactory" type="ViewFactory" line="100"/>
            <javadoc line="100">
                Fetches a factory that is suitable for producing
                  views of any models that are produced by this
                  kit.                
                <return>
                    the factory                    
                </return>
            </javadoc>
            <method name="getActions" type="Action[]" line="109"/>
            <javadoc line="109">
                Fetches the set of commands that can be used
                  on a text component that is using a model and
                  view produced by this kit.                
                <return>
                    the set of actions                    
                </return>
            </javadoc>
            <method name="createCaret" type="Caret" line="118"/>
            <javadoc line="118">
                Fetches a caret that can navigate through views
                  produced by the associated ViewFactory.                
                <return>
                    the caret                    
                </return>
            </javadoc>
            <method name="createDefaultDocument" type="Document" line="126"/>
            <javadoc line="126">
                Creates an uninitialized text storage model
                  that is appropriate for this type of editor.                
                <return>
                    the model                    
                </return>
            </javadoc>
            <method name="read" type="void" line="134"/>
            <javadoc line="134">
                Inserts content from the given stream which is expected
                  to be in a format appropriate for this kind of content
                  handler.                
                <param>
                    in  The stream to read from                    
                </param>
                <param>
                    doc The destination for the insertion.                    
                </param>
                <param>
                    pos The location in the document to place the
                      content >= 0.                    
                </param>
                <exception>
                    IOException on any I/O error                    
                </exception>
                <exception>
                    BadLocationException if pos represents an invalid
                      location within the document.                    
                </exception>
            </javadoc>
            <method name="write" type="void" line="150"/>
            <javadoc line="150">
                Writes content from a document to the given stream
                  in a format appropriate for this kind of content handler.                
                <param>
                    out  The stream to write to                    
                </param>
                <param>
                    doc The source for the write.                    
                </param>
                <param>
                    pos The location in the document to fetch the
                      content from >= 0.                    
                </param>
                <param>
                    len The amount to write out >= 0.                    
                </param>
                <exception>
                    IOException on any I/O error                    
                </exception>
                <exception>
                    BadLocationException if pos represents an invalid
                      location within the document.                    
                </exception>
            </javadoc>
            <method name="read" type="void" line="166"/>
            <javadoc line="166">
                Inserts content from the given stream which is expected
                  to be in a format appropriate for this kind of content
                  handler.
                  &lt;p&gt;
                  Since actual text editing is unicode based, this would
                  generally be the preferred way to read in the data.
                  Some types of content are stored in an 8-bit form however,
                  and will favor the InputStream.                
                <param>
                    in  The stream to read from                    
                </param>
                <param>
                    doc The destination for the insertion.                    
                </param>
                <param>
                    pos The location in the document to place the
                      content >= 0.                    
                </param>
                <exception>
                    IOException on any I/O error                    
                </exception>
                <exception>
                    BadLocationException if pos represents an invalid
                      location within the document.                    
                </exception>
            </javadoc>
            <method name="write" type="void" line="187"/>
            <javadoc line="187">
                Writes content from a document to the given stream
                  in a format appropriate for this kind of content handler.
                  &lt;p&gt;
                  Since actual text editing is unicode based, this would
                  generally be the preferred way to write the data.
                  Some types of content are stored in an 8-bit form however,
                  and will favor the OutputStream.                
                <param>
                    out  The stream to write to                    
                </param>
                <param>
                    doc The source for the write.                    
                </param>
                <param>
                    pos The location in the document to fetch the
                      content >= 0.                    
                </param>
                <param>
                    len The amount to write out >= 0.                    
                </param>
                <exception>
                    IOException on any I/O error                    
                </exception>
                <exception>
                    BadLocationException if pos represents an invalid
                      location within the document.                    
                </exception>
            </javadoc>
        </class>
    </source>