<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text.html.parser">
        <import package="sun.awt.AppContext"/>
        <import package="java.io.PrintStream"/>
        <import package="java.io.File"/>
        <import package="java.io.FileInputStream"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.FileNotFoundException"/>
        <import package="java.io.BufferedInputStream"/>
        <import package="java.io.DataInputStream"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.Vector"/>
        <import package="java.util.BitSet"/>
        <import package="java.util.StringTokenizer"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.Properties"/>
        <import package="java.net.URL"/>
        <class name="DTD" line="46">
            <implements interface="DTDConstants"/>
            <javadoc line="46">
                The representation of an SGML DTD.  DTD describes a document
                  syntax and is used in parsing of HTML documents.  It contains
                  a list of elements and their attributes as well as a list of
                  entities defined in the DTD.                
                <see>
                    Element                    
                </see>
                <see>
                    AttributeList                    
                </see>
                <see>
                    ContentModel                    
                </see>
                <see>
                    Parser                    
                </see>
                <author>
                    Arthur van Hoff                    
                </author>
            </javadoc>
            <declaration name="name" type="String" line="60"/>
            <declaration name="elements" type="Vector&lt;Element&gt;" line="61"/>
            <declaration name="elementHash" type="Hashtable&lt;String,Element&gt;" line="62"/>
            <declaration name="entityHash" type="Hashtable&lt;Object,Entity&gt;" line="64"/>
            <declaration name="pcdata" type="Element" line="66"/>
            <declaration name="html" type="Element" line="67"/>
            <declaration name="meta" type="Element" line="68"/>
            <declaration name="base" type="Element" line="69"/>
            <declaration name="isindex" type="Element" line="70"/>
            <declaration name="head" type="Element" line="71"/>
            <declaration name="body" type="Element" line="72"/>
            <declaration name="applet" type="Element" line="73"/>
            <declaration name="param" type="Element" line="74"/>
            <declaration name="p" type="Element" line="75"/>
            <declaration name="title" type="Element" line="76"/>
            <declaration name="style" type="Element" line="77"/>
            <declaration name="link" type="Element" line="78"/>
            <declaration name="script" type="Element" line="79"/>
            <declaration name="FILE_VERSION" type="int" line="81"/>
            <javadoc line="83">
                Creates a new DTD with the specified name.                
                <param>
                    name the name, as a <code>String</code> of the new DTD                    
                </param>
            </javadoc>
            <method name="DTD" type="constructor" line="87">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="95">
                Gets the name of the DTD.                
                <return>
                    the name of the DTD                    
                </return>
            </javadoc>
            <method name="getName" type="String" line="99"/>
            <javadoc line="103">
                Gets an entity by name.                
                <return>
                    the <code>Entity</code> corresponding to the
                      <code>name</code> <code>String</code>                    
                </return>
            </javadoc>
            <method name="getEntity" type="Entity" line="108">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="112">
                Gets a character entity.                
                <return>
                    the <code>Entity</code> corresponding to the
                      <code>ch</code> character                    
                </return>
            </javadoc>
            <method name="getEntity" type="Entity" line="117">
                <params>
                    <param name="ch" type="int"/>
                </params>
            </method>
            <javadoc line="121">
                Returns &lt;code&gt;true&lt;/code&gt; if the element is part of the DTD,
                  otherwise returns &lt;code&gt;false&lt;/code&gt;.                
                <param>
                    name the requested <code>String</code>                    
                </param>
                <return>
                    <code>true</code> if <code>name</code> exists as
                      part of the DTD, otherwise returns <code>false</code>                    
                </return>
            </javadoc>
            <method name="elementExists" type="boolean" line="129">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="133">
                Gets an element by name. A new element is
                  created if the element doesn&apos;t exist.                
                <param>
                    name the requested <code>String</code>                    
                </param>
                <return>
                    the <code>Element</code> corresponding to
                      <code>name</code>, which may be newly created                    
                </return>
            </javadoc>
            <method name="getElement" type="Element" line="141">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="e" type="Element" line="142"/>
                <scope line="143"/>
            </method>
            <javadoc line="151">
                Gets an element by index.                
                <param>
                    index the requested index                    
                </param>
                <return>
                    the <code>Element</code> corresponding to
                      <code>index</code>                    
                </return>
            </javadoc>
            <method name="getElement" type="Element" line="158">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="162">
                Defines an entity.  If the &lt;code&gt;Entity&lt;/code&gt; specified
                  by &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;type&lt;/code&gt;, and &lt;code&gt;data&lt;/code&gt;
                  exists, it is returned; otherwise a new &lt;code&gt;Entity&lt;/code&gt;
                  is created and is returned.                
                <param>
                    name the name of the <code>Entity</code> as a <code>String</code>                    
                </param>
                <param>
                    type the type of the <code>Entity</code>                    
                </param>
                <param>
                    data the <code>Entity</code>'s data                    
                </param>
                <return>
                    the <code>Entity</code> requested or a new <code>Entity</code>
                      if not found                    
                </return>
            </javadoc>
            <method name="defineEntity" type="Entity" line="174">
                <params>
                    <param name="name" type="String"/>
                    <param name="type" type="int"/>
                    <param name="data" type="char"/>
                </params>
                <declaration name="ent" type="Entity" line="175"/>
                <scope line="176">
                    <scope line="179"/>
                </scope>
            </method>
            <javadoc line="191">
                Returns the &lt;code&gt;Element&lt;/code&gt; which matches the
                  specified parameters.  If one doesn&apos;t exist, a new
                  one is created and returned.                
                <param>
                    name the name of the <code>Element</code>                    
                </param>
                <param>
                    type the type of the <code>Element</code>                    
                </param>
                <param>
                    omitStart <code>true</code> if start should be omitted                    
                </param>
                <param>
                    omitEnd  <code>true</code> if end should be omitted                    
                </param>
                <param>
                    content  the <code>ContentModel</code>                    
                </param>
                <param>
                    atts the <code>AttributeList</code> specifying the
                      <code>Element</code>                    
                </param>
                <return>
                    the <code>Element</code> specified                    
                </return>
            </javadoc>
            <method name="defineElement" type="Element" line="207">
                <params>
                    <param name="name" type="String"/>
                    <param name="type" type="int"/>
                    <param name="omitStart" type="boolean"/>
                    <param name="omitEnd" type="boolean"/>
                    <param name="content" type="ContentModel"/>
                    <param name="exclusions" type="BitSet"/>
                    <param name="inclusions" type="BitSet"/>
                    <param name="atts" type="AttributeList"/>
                </params>
                <declaration name="e" type="Element" line="208"/>
            </method>
            <javadoc line="219">
                Defines attributes for an {@code Element}.                
                <param>
                    name the name of the <code>Element</code>                    
                </param>
                <param>
                    atts the <code>AttributeList</code> specifying the
                      <code>Element</code>                    
                </param>
            </javadoc>
            <method name="defineAttributes" type="void" line="226">
                <params>
                    <param name="name" type="String"/>
                    <param name="atts" type="AttributeList"/>
                </params>
                <declaration name="e" type="Element" line="227"/>
            </method>
            <javadoc line="231">
                Creates and returns a character &lt;code&gt;Entity&lt;/code&gt;.                
                <param>
                    name the entity's name                    
                </param>
                <return>
                    the new character <code>Entity</code>                    
                </return>
            </javadoc>
            <method name="defEntity" type="Entity" line="236">
                <params>
                    <param name="name" type="String"/>
                    <param name="type" type="int"/>
                    <param name="ch" type="int"/>
                </params>
                <declaration name="data" type="char" line="237"/>
            </method>
            <javadoc line="241">
                Creates and returns an &lt;code&gt;Entity&lt;/code&gt;.                
                <param>
                    name the entity's name                    
                </param>
                <return>
                    the new <code>Entity</code>                    
                </return>
            </javadoc>
            <method name="defEntity" type="Entity" line="246">
                <params>
                    <param name="name" type="String"/>
                    <param name="type" type="int"/>
                    <param name="str" type="String"/>
                </params>
                <declaration name="len" type="int" line="247"/>
                <declaration name="data" type="char" line="248"/>
            </method>
            <javadoc line="253">
                Creates and returns an &lt;code&gt;Element&lt;/code&gt;.                
                <param>
                    name the element's name                    
                </param>
                <return>
                    the new <code>Element</code>                    
                </return>
            </javadoc>
            <method name="defElement" type="Element" line="260">
                <params>
                    <param name="name" type="String"/>
                    <param name="type" type="int"/>
                    <param name="omitStart" type="boolean"/>
                    <param name="omitEnd" type="boolean"/>
                    <param name="content" type="ContentModel"/>
                    <param name="exclusions" type="String[]"/>
                    <param name="inclusions" type="String[]"/>
                    <param name="atts" type="AttributeList"/>
                </params>
                <declaration name="excl" type="BitSet" line="261"/>
                <scope line="262">
                    <scope line="264">
                        <scope line="265"/>
                    </scope>
                </scope>
                <declaration name="incl" type="BitSet" line="270"/>
                <scope line="271">
                    <scope line="273">
                        <scope line="274"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="282">
                Creates and returns an &lt;code&gt;AttributeList&lt;/code&gt;.                
                <param>
                    name the attribute list's name                    
                </param>
                <return>
                    the new <code>AttributeList</code>                    
                </return>
            </javadoc>
            <method name="defAttributeList" type="AttributeList" line="287">
                <params>
                    <param name="name" type="String"/>
                    <param name="type" type="int"/>
                    <param name="modifier" type="int"/>
                    <param name="value" type="String"/>
                    <param name="values" type="String"/>
                    <param name="atts" type="AttributeList"/>
                </params>
                <declaration name="vals" type="Vector&lt;String&gt;" line="288"/>
                <scope line="289">
                    <scope line="291">
                        <declaration name="str" type="String" line="292"/>
                        <scope line="293"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="301">
                Creates and returns a new content model.                
                <param>
                    type the type of the new content model                    
                </param>
                <return>
                    the new <code>ContentModel</code>                    
                </return>
            </javadoc>
            <method name="defContentModel" type="ContentModel" line="306">
                <params>
                    <param name="type" type="int"/>
                    <param name="obj" type="Object"/>
                    <param name="next" type="ContentModel"/>
                </params>
            </method>
            <javadoc line="310">
                Returns a string representation of this DTD.                
                <return>
                    the string representation of this DTD                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="314"/>
            <declaration name="DTD_HASH_KEY" type="Object" line="318"/>
            <javadoc line="318">
                The hashtable key of DTDs in AppContext.                
            </javadoc>
            <method name="putDTDHash" type="void" line="323">
                <params>
                    <param name="name" type="String"/>
                    <param name="dtd" type="DTD"/>
                </params>
            </method>
            <javadoc line="327">
                Returns a DTD with the specified &lt;code&gt;name&lt;/code&gt;.  If
                  a DTD with that name doesn&apos;t exist, one is created
                  and returned.  Any uppercase characters in the name
                  are converted to lowercase.                
                <param>
                    name the name of the DTD                    
                </param>
                <return>
                    the DTD which corresponds to <code>name</code>                    
                </return>
            </javadoc>
            <method name="getDTD" type="DTD" line="336">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="dtd" type="DTD" line="338"/>
            </method>
            <method name="getDtdHash" type="Hashtable<String,DTD>" line="345">
                <declaration name="appContext" type="AppContext" line="346"/>
                <declaration name="result" type="Hashtable&lt;String,DTD&gt;" line="348"/>
                <scope line="350"/>
            </method>
            <javadoc line="359">
                Recreates a DTD from an archived format.                
                <param>
                    in  the <code>DataInputStream</code> to read from                    
                </param>
            </javadoc>
            <method name="read" type="void" line="363">
                <params>
                    <param name="in" type="DataInputStream"/>
                </params>
                <comment line="367">
                                        
                </comment>
                <comment line="368">
                    Read the list of names                    
                </comment>
                <comment line="369">
                                        
                </comment>
                <comment line="376">
                                        
                </comment>
                <comment line="377">
                    Read the entities                    
                </comment>
                <comment line="378">
                                        
                </comment>
                <comment line="387">
                    Read the elements                    
                </comment>
                <comment line="388">
                                        
                </comment>
                <scope line="364"/>
                <declaration name="names" type="String[]" line="370"/>
                <scope line="371"/>
                <declaration name="num" type="int" line="379"/>
                <scope line="380">
                    <declaration name="nameId" type="short" line="381"/>
                    <declaration name="type" type="int" line="382"/>
                    <declaration name="name" type="String" line="383"/>
                </scope>
                <scope line="390">
                    <declaration name="nameId" type="short" line="391"/>
                    <declaration name="type" type="int" line="392"/>
                    <declaration name="flags" type="byte" line="393"/>
                    <declaration name="m" type="ContentModel" line="394"/>
                    <declaration name="exclusions" type="String[]" line="395"/>
                    <declaration name="inclusions" type="String[]" line="396"/>
                    <declaration name="atts" type="AttributeList" line="397"/>
                </scope>
            </method>
            <method name="readContentModel" type="ContentModel" line="405">
                <params>
                    <param name="in" type="DataInputStream"/>
                    <param name="names" type="String[]"/>
                </params>
                <comment line="408">
                    null                    
                </comment>
                <comment line="410">
                    content_c                    
                </comment>
                <comment line="416">
                    content_e                    
                </comment>
                <declaration name="flag" type="byte" line="406"/>
                <scope line="410">
                    <declaration name="type" type="int" line="411"/>
                    <declaration name="m" type="ContentModel" line="412"/>
                    <declaration name="next" type="ContentModel" line="413"/>
                </scope>
                <scope line="416">
                    <declaration name="type" type="int" line="417"/>
                    <declaration name="el" type="Element" line="418"/>
                    <declaration name="next" type="ContentModel" line="419"/>
                </scope>
            </method>
            <method name="readNameArray" type="String[]" line="428">
                <params>
                    <param name="in" type="DataInputStream"/>
                    <param name="names" type="String[]"/>
                </params>
                <declaration name="num" type="int" line="429"/>
                <scope line="430"/>
                <declaration name="result" type="String[]" line="433"/>
                <scope line="434"/>
            </method>
            <method name="readAttributeList" type="AttributeList" line="442">
                <params>
                    <param name="in" type="DataInputStream"/>
                    <param name="names" type="String[]"/>
                </params>
                <comment line="460">
                    We reverse the order of the linked list by doing this, but                    
                </comment>
                <comment line="461">
                    that order isn&apos;t important.                    
                </comment>
                <declaration name="result" type="AttributeList" line="443"/>
                <scope line="444">
                    <declaration name="nameId" type="short" line="445"/>
                    <declaration name="type" type="int" line="446"/>
                    <declaration name="modifier" type="int" line="447"/>
                    <declaration name="valueId" type="short" line="448"/>
                    <declaration name="value" type="String" line="449"/>
                    <declaration name="values" type="Vector&lt;String&gt;" line="450"/>
                    <declaration name="numValues" type="short" line="451"/>
                    <scope line="452">
                        <scope line="454"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>