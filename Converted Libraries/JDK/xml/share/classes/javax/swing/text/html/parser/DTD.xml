<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text.html.parser">
        <import package="sun.awt.AppContext"/>
        <import package="java.io.PrintStream"/>
        <import package="java.io.File"/>
        <import package="java.io.FileInputStream"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.FileNotFoundException"/>
        <import package="java.io.BufferedInputStream"/>
        <import package="java.io.DataInputStream"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.Vector"/>
        <import package="java.util.BitSet"/>
        <import package="java.util.StringTokenizer"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.Properties"/>
        <import package="java.net.URL"/>
        <class name="DTD" line="18">
            <implements interface="DTDConstants"/>
            <javadoc line="18">
                The representation of an SGML DTD.  DTD describes a document
                  syntax and is used in parsing of HTML documents.  It contains
                  a list of elements and their attributes as well as a list of
                  entities defined in the DTD.                
                <see>
                    Element                    
                </see>
                <see>
                    AttributeList                    
                </see>
                <see>
                    ContentModel                    
                </see>
                <see>
                    Parser                    
                </see>
                <author>
                    Arthur van Hoff                    
                </author>
            </javadoc>
            <declaration name="name" type="String" line="30"/>
            <declaration name="elements" type="Vector&lt;Element&gt;" line="31"/>
            <declaration name="elementHash" type="Hashtable&lt;String,Element&gt;" line="32"/>
            <declaration name="entityHash" type="Hashtable&lt;Object,Entity&gt;" line="33"/>
            <declaration name="pcdata" type="Element" line="34"/>
            <declaration name="html" type="Element" line="35"/>
            <declaration name="meta" type="Element" line="36"/>
            <declaration name="base" type="Element" line="37"/>
            <declaration name="isindex" type="Element" line="38"/>
            <declaration name="head" type="Element" line="39"/>
            <declaration name="body" type="Element" line="40"/>
            <declaration name="applet" type="Element" line="41"/>
            <declaration name="param" type="Element" line="42"/>
            <declaration name="p" type="Element" line="43"/>
            <declaration name="title" type="Element" line="44"/>
            <declaration name="style" type="Element" line="45"/>
            <declaration name="link" type="Element" line="46"/>
            <declaration name="script" type="Element" line="47"/>
            <declaration name="FILE_VERSION" type="int" line="48"/>
            <javadoc line="49">
                Creates a new DTD with the specified name.                
                <param>
                    name the name, as a <code>String</code> of the new DTD                    
                </param>
            </javadoc>
            <method name="DTD" type="constructor" line="53">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="60">
                Gets the name of the DTD.                
                <return>
                    the name of the DTD                    
                </return>
            </javadoc>
            <method name="getName" type="String" line="64"/>
            <javadoc line="67">
                Gets an entity by name.                
                <return>
                    the <code>Entity</code> corresponding to the
                      <code>name</code> <code>String</code>                    
                </return>
            </javadoc>
            <method name="getEntity" type="Entity" line="72">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="75">
                Gets a character entity.                
                <return>
                    the <code>Entity</code> corresponding to the
                      <code>ch</code> character                    
                </return>
            </javadoc>
            <method name="getEntity" type="Entity" line="80">
                <params>
                    <param name="ch" type="int"/>
                </params>
            </method>
            <javadoc line="83">
                Returns &lt;code&gt;true&lt;/code&gt; if the element is part of the DTD,
                  otherwise returns &lt;code&gt;false&lt;/code&gt;.                
                <param>
                    name the requested <code>String</code>                    
                </param>
                <return>
                    <code>true</code> if <code>name</code> exists as
                      part of the DTD, otherwise returns <code>false</code>                    
                </return>
            </javadoc>
            <method name="elementExists" type="boolean" line="90">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="93">
                Gets an element by name. A new element is
                  created if the element doesn&apos;t exist.                
                <param>
                    name the requested <code>String</code>                    
                </param>
                <return>
                    the <code>Element</code> corresponding to
                      <code>name</code>, which may be newly created                    
                </return>
            </javadoc>
            <method name="getElement" type="Element" line="100">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="e" type="Element" line="101"/>
                <scope line="102"/>
            </method>
            <javadoc line="109">
                Gets an element by index.                
                <param>
                    index the requested index                    
                </param>
                <return>
                    the <code>Element</code> corresponding to
                      <code>index</code>                    
                </return>
            </javadoc>
            <method name="getElement" type="Element" line="115">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="118">
                Defines an entity.  If the &lt;code&gt;Entity&lt;/code&gt; specified
                  by &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;type&lt;/code&gt;, and &lt;code&gt;data&lt;/code&gt;
                  exists, it is returned; otherwise a new &lt;code&gt;Entity&lt;/code&gt;
                  is created and is returned.                
                <param>
                    name the name of the <code>Entity</code> as a <code>String</code>                    
                </param>
                <param>
                    type the type of the <code>Entity</code>                    
                </param>
                <param>
                    data the <code>Entity</code>'s data                    
                </param>
                <return>
                    the <code>Entity</code> requested or a new <code>Entity</code>
                      if not found                    
                </return>
            </javadoc>
            <method name="defineEntity" type="Entity" line="129">
                <params>
                    <param name="name" type="String"/>
                    <param name="type" type="int"/>
                    <param name="data" type="char"/>
                </params>
                <declaration name="ent" type="Entity" line="130"/>
                <scope line="131">
                    <scope line="134"/>
                </scope>
            </method>
            <javadoc line="145">
                Returns the &lt;code&gt;Element&lt;/code&gt; which matches the
                  specified parameters.  If one doesn&apos;t exist, a new
                  one is created and returned.                
                <param>
                    name the name of the <code>Element</code>                    
                </param>
                <param>
                    type the type of the <code>Element</code>                    
                </param>
                <param>
                    omitStart <code>true</code> if start should be omitted                    
                </param>
                <param>
                    omitEnd  <code>true</code> if end should be omitted                    
                </param>
                <param>
                    content  the <code>ContentModel</code>                    
                </param>
                <param>
                    atts the <code>AttributeList</code> specifying the
                      <code>Element</code>                    
                </param>
                <return>
                    the <code>Element</code> specified                    
                </return>
            </javadoc>
            <method name="defineElement" type="Element" line="158">
                <params>
                    <param name="name" type="String"/>
                    <param name="type" type="int"/>
                    <param name="omitStart" type="boolean"/>
                    <param name="omitEnd" type="boolean"/>
                    <param name="content" type="ContentModel"/>
                    <param name="exclusions" type="BitSet"/>
                    <param name="inclusions" type="BitSet"/>
                    <param name="atts" type="AttributeList"/>
                </params>
                <declaration name="e" type="Element" line="159"/>
            </method>
            <javadoc line="169">
                Defines attributes for an {@code Element}.                
                <param>
                    name the name of the <code>Element</code>                    
                </param>
                <param>
                    atts the <code>AttributeList</code> specifying the
                      <code>Element</code>                    
                </param>
            </javadoc>
            <method name="defineAttributes" type="void" line="175">
                <params>
                    <param name="name" type="String"/>
                    <param name="atts" type="AttributeList"/>
                </params>
                <declaration name="e" type="Element" line="176"/>
            </method>
            <javadoc line="179">
                Creates and returns a character &lt;code&gt;Entity&lt;/code&gt;.                
                <param>
                    name the entity's name                    
                </param>
                <return>
                    the new character <code>Entity</code>                    
                </return>
            </javadoc>
            <method name="defEntity" type="Entity" line="184">
                <params>
                    <param name="name" type="String"/>
                    <param name="type" type="int"/>
                    <param name="ch" type="int"/>
                </params>
                <declaration name="data" type="char" line="185"/>
            </method>
            <javadoc line="188">
                Creates and returns an &lt;code&gt;Entity&lt;/code&gt;.                
                <param>
                    name the entity's name                    
                </param>
                <return>
                    the new <code>Entity</code>                    
                </return>
            </javadoc>
            <method name="defEntity" type="Entity" line="193">
                <params>
                    <param name="name" type="String"/>
                    <param name="type" type="int"/>
                    <param name="str" type="String"/>
                </params>
                <declaration name="len" type="int" line="194"/>
                <declaration name="data" type="char" line="195"/>
            </method>
            <javadoc line="199">
                Creates and returns an &lt;code&gt;Element&lt;/code&gt;.                
                <param>
                    name the element's name                    
                </param>
                <return>
                    the new <code>Element</code>                    
                </return>
            </javadoc>
            <method name="defElement" type="Element" line="204">
                <params>
                    <param name="name" type="String"/>
                    <param name="type" type="int"/>
                    <param name="omitStart" type="boolean"/>
                    <param name="omitEnd" type="boolean"/>
                    <param name="content" type="ContentModel"/>
                    <param name="exclusions" type="String[]"/>
                    <param name="inclusions" type="String[]"/>
                    <param name="atts" type="AttributeList"/>
                </params>
                <declaration name="excl" type="BitSet" line="205"/>
                <scope line="206">
                    <scope line="208">
                        <scope line="209"/>
                    </scope>
                </scope>
                <declaration name="incl" type="BitSet" line="214"/>
                <scope line="215">
                    <scope line="217">
                        <scope line="218"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="225">
                Creates and returns an &lt;code&gt;AttributeList&lt;/code&gt;.                
                <param>
                    name the attribute list's name                    
                </param>
                <return>
                    the new <code>AttributeList</code>                    
                </return>
            </javadoc>
            <method name="defAttributeList" type="AttributeList" line="230">
                <params>
                    <param name="name" type="String"/>
                    <param name="type" type="int"/>
                    <param name="modifier" type="int"/>
                    <param name="value" type="String"/>
                    <param name="values" type="String"/>
                    <param name="atts" type="AttributeList"/>
                </params>
                <declaration name="vals" type="Vector&lt;String&gt;" line="231"/>
                <scope line="232">
                    <scope line="234">
                        <declaration name="str" type="String" line="235"/>
                        <scope line="236"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="243">
                Creates and returns a new content model.                
                <param>
                    type the type of the new content model                    
                </param>
                <return>
                    the new <code>ContentModel</code>                    
                </return>
            </javadoc>
            <method name="defContentModel" type="ContentModel" line="248">
                <params>
                    <param name="type" type="int"/>
                    <param name="obj" type="Object"/>
                    <param name="next" type="ContentModel"/>
                </params>
            </method>
            <javadoc line="251">
                Returns a string representation of this DTD.                
                <return>
                    the string representation of this DTD                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="255"/>
            <declaration name="DTD_HASH_KEY" type="Object" line="258"/>
            <javadoc line="258">
                The hashtable key of DTDs in AppContext.                
            </javadoc>
            <method name="putDTDHash" type="void" line="262">
                <params>
                    <param name="name" type="String"/>
                    <param name="dtd" type="DTD"/>
                </params>
            </method>
            <javadoc line="265">
                Returns a DTD with the specified &lt;code&gt;name&lt;/code&gt;.  If
                  a DTD with that name doesn&apos;t exist, one is created
                  and returned.  Any uppercase characters in the name
                  are converted to lowercase.                
                <param>
                    name the name of the DTD                    
                </param>
                <return>
                    the DTD which corresponds to <code>name</code>                    
                </return>
            </javadoc>
            <method name="getDTD" type="DTD" line="273">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="dtd" type="DTD" line="275"/>
            </method>
            <method name="getDtdHash" type="Hashtable<String,DTD>" line="279">
                <declaration name="appContext" type="AppContext" line="280"/>
                <declaration name="result" type="Hashtable&lt;String,DTD&gt;" line="281"/>
                <scope line="282"/>
            </method>
            <javadoc line="288">
                Recreates a DTD from an archived format.                
                <param>
                    in  the <code>DataInputStream</code> to read from                    
                </param>
            </javadoc>
            <method name="read" type="void" line="292">
                <params>
                    <param name="in" type="DataInputStream"/>
                </params>
                <scope line="293"/>
                <declaration name="names" type="String[]" line="295"/>
                <scope line="296"/>
                <declaration name="num" type="int" line="299"/>
                <scope line="300">
                    <declaration name="nameId" type="short" line="301"/>
                    <declaration name="type" type="int" line="302"/>
                    <declaration name="name" type="String" line="303"/>
                </scope>
                <scope line="307">
                    <declaration name="nameId" type="short" line="308"/>
                    <declaration name="type" type="int" line="309"/>
                    <declaration name="flags" type="byte" line="310"/>
                    <declaration name="m" type="ContentModel" line="311"/>
                    <declaration name="exclusions" type="String[]" line="312"/>
                    <declaration name="inclusions" type="String[]" line="313"/>
                    <declaration name="atts" type="AttributeList" line="314"/>
                </scope>
            </method>
            <method name="readContentModel" type="ContentModel" line="318">
                <params>
                    <param name="in" type="DataInputStream"/>
                    <param name="names" type="String[]"/>
                </params>
                <declaration name="flag" type="byte" line="319"/>
                <scope line="324">
                    <declaration name="type" type="int" line="325"/>
                    <declaration name="m" type="ContentModel" line="326"/>
                    <declaration name="next" type="ContentModel" line="327"/>
                </scope>
                <scope line="331">
                    <declaration name="type" type="int" line="332"/>
                    <declaration name="el" type="Element" line="333"/>
                    <declaration name="next" type="ContentModel" line="334"/>
                </scope>
            </method>
            <method name="readNameArray" type="String[]" line="341">
                <params>
                    <param name="in" type="DataInputStream"/>
                    <param name="names" type="String[]"/>
                </params>
                <declaration name="num" type="int" line="342"/>
                <scope line="343"/>
                <declaration name="result" type="String[]" line="346"/>
                <scope line="347"/>
            </method>
            <method name="readAttributeList" type="AttributeList" line="352">
                <params>
                    <param name="in" type="DataInputStream"/>
                    <param name="names" type="String[]"/>
                </params>
                <declaration name="result" type="AttributeList" line="353"/>
                <scope line="354">
                    <declaration name="nameId" type="short" line="355"/>
                    <declaration name="type" type="int" line="356"/>
                    <declaration name="modifier" type="int" line="357"/>
                    <declaration name="valueId" type="short" line="358"/>
                    <declaration name="value" type="String" line="359"/>
                    <declaration name="values" type="Vector&lt;String&gt;" line="360"/>
                    <declaration name="numValues" type="short" line="361"/>
                    <scope line="362">
                        <scope line="364"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>