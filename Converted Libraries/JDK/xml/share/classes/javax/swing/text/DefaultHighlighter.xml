<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text">
        <import package="java.util.Vector"/>
        <import package="java.awt"/>
        <import package="javax.swing.plaf"/>
        <import package="javax.swing"/>
        <class name="DefaultHighlighter" line="32">
            <extends class="LayeredHighlighter"/>
            <comment line="49">
                ---- Highlighter methods ----------------------------------------------                
            </comment>
            <comment line="349">
                ---- member variables --------------------------------------------                
            </comment>
            <javadoc line="32">
                Implements the Highlighter interfaces.  Implements a simple highlight
                  painter that renders in a solid color.                
                <author>
                    Timothy Prinzing                    
                </author>
                <see>
                    Highlighter                    
                </see>
            </javadoc>
            <javadoc line="41">
                Creates a new DefaultHighlighther object.                
            </javadoc>
            <method name="DefaultHighlighter" type="constructor" line="44"/>
            <javadoc line="50">
                Renders the highlights.                
                <param>
                    g the graphics context                    
                </param>
            </javadoc>
            <method name="paint" type="void" line="55">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
                <comment line="57">
                    PENDING(prinz) - should cull ranges not visible                    
                </comment>
                <comment line="62">
                    Avoid allocing unless we need it.                    
                </comment>
                <declaration name="len" type="int" line="57"/>
                <scope line="58">
                    <declaration name="info" type="HighlightInfo" line="59"/>
                    <scope line="60">
                        <declaration name="a" type="Rectangle" line="62"/>
                        <declaration name="insets" type="Insets" line="63"/>
                        <scope line="68">
                            <scope line="70">
                                <declaration name="p" type="Highlighter.HighlightPainter" line="71"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="80">
                Called when the UI is being installed into the
                  interface of a JTextComponent.  Installs the editor, and
                  removes any existing highlights.                
                <param>
                    c the editor component                    
                </param>
                <see>
                    Highlighter#install                    
                </see>
            </javadoc>
            <method name="install" type="void" line="88">
                <params>
                    <param name="c" type="JTextComponent"/>
                </params>
            </method>
            <javadoc line="93">
                Called when the UI is being removed from the interface of
                  a JTextComponent.                
                <param>
                    c the component                    
                </param>
                <see>
                    Highlighter#deinstall                    
                </see>
            </javadoc>
            <method name="deinstall" type="void" line="100">
                <params>
                    <param name="c" type="JTextComponent"/>
                </params>
            </method>
            <javadoc line="104">
                Adds a highlight to the view.  Returns a tag that can be used
                  to refer to the highlight.                
                <param>
                    p0   the start offset of the range to highlight >= 0                    
                </param>
                <param>
                    p1   the end offset of the range to highlight >= p0                    
                </param>
                <param>
                    p    the painter to use to actually render the highlight                    
                </param>
                <return>
                    an object that can be used as a tag
                      to refer to the highlight                    
                </return>
                <exception>
                    BadLocationException if the specified location is invalid                    
                </exception>
            </javadoc>
            <method name="addHighlight" type="Object" line="115">
                <params>
                    <param name="p0" type="int"/>
                    <param name="p1" type="int"/>
                    <param name="p" type="Highlighter.HighlightPainter"/>
                </params>
                <scope line="116"/>
                <scope line="120"/>
                <declaration name="doc" type="Document" line="124"/>
                <declaration name="i" type="HighlightInfo" line="125"/>
            </method>
            <javadoc line="136">
                Removes a highlight from the view.                
                <param>
                    tag the reference to the highlight                    
                </param>
            </javadoc>
            <method name="removeHighlight" type="void" line="141">
                <params>
                    <param name="tag" type="Object"/>
                </params>
                <scope line="142">
                    <declaration name="lhi" type="LayeredHighlightInfo" line="143"/>
                    <scope line="144"/>
                </scope>
                <scope line="148">
                    <declaration name="info" type="HighlightInfo" line="149"/>
                </scope>
            </method>
            <javadoc line="155">
                Removes all highlights.                
            </javadoc>
            <method name="removeAllHighlights" type="void" line="158">
                <declaration name="mapper" type="TextUI" line="159"/>
                <scope line="160">
                    <declaration name="len" type="int" line="161"/>
                    <scope line="162">
                        <declaration name="minX" type="int" line="163"/>
                        <declaration name="minY" type="int" line="164"/>
                        <declaration name="maxX" type="int" line="165"/>
                        <declaration name="maxY" type="int" line="166"/>
                        <declaration name="p0" type="int" line="167"/>
                        <declaration name="p1" type="int" line="168"/>
                        <scope line="169">
                            <declaration name="hi" type="HighlightInfo" line="170"/>
                            <scope line="171">
                                <declaration name="info" type="LayeredHighlightInfo" line="172"/>
                            </scope>
                            <scope line="178">
                                <scope line="179"/>
                                <scope line="183"/>
                            </scope>
                        </scope>
                        <scope line="189"/>
                        <scope line="192">
                            <scope line="193"/>
                            <scope line="195"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="200">
                    <declaration name="len" type="int" line="201"/>
                    <scope line="202">
                        <declaration name="p0" type="int" line="203"/>
                        <declaration name="p1" type="int" line="204"/>
                        <scope line="205">
                            <declaration name="info" type="HighlightInfo" line="206"/>
                        </scope>
                        <scope line="210"/>
                        <scope line="212"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="219">
                Changes a highlight.                
                <param>
                    tag the highlight tag                    
                </param>
                <param>
                    p0 the beginning of the range >= 0                    
                </param>
                <param>
                    p1 the end of the range >= p0                    
                </param>
                <exception>
                    BadLocationException if the specified location is invalid                    
                </exception>
            </javadoc>
            <method name="changeHighlight" type="void" line="227">
                <params>
                    <param name="tag" type="Object"/>
                    <param name="p0" type="int"/>
                    <param name="p1" type="int"/>
                </params>
                <comment line="243">
                    Mark the highlights region as invalid, it will reset itself
                     next time asked to paint.                    
                </comment>
                <scope line="228"/>
                <scope line="232"/>
                <declaration name="doc" type="Document" line="236"/>
                <scope line="237">
                    <declaration name="lhi" type="LayeredHighlightInfo" line="238"/>
                    <scope line="239"/>
                </scope>
                <scope line="249">
                    <declaration name="info" type="HighlightInfo" line="250"/>
                    <declaration name="oldP0" type="int" line="251"/>
                    <declaration name="oldP1" type="int" line="252"/>
                    <scope line="253"/>
                    <scope line="256"/>
                    <scope line="259"/>
                </scope>
            </method>
            <javadoc line="268">
                Makes a copy of the highlights.  Does not actually clone each highlight,
                  but only makes references to them.                
                <return>
                    the copy                    
                </return>
                <see>
                    Highlighter#getHighlights                    
                </see>
            </javadoc>
            <method name="getHighlights" type="Highlighter.Highlight[]" line="275">
                <declaration name="size" type="int" line="276"/>
                <scope line="277"/>
                <declaration name="h" type="Highlighter.Highlight[]" line="280"/>
            </method>
            <javadoc line="285">
                When leaf Views (such as LabelView) are rendering they should
                  call into this method. If a highlight is in the given region it will
                  be drawn immediately.                
                <param>
                    g Graphics used to draw                    
                </param>
                <param>
                    p0 starting offset of view                    
                </param>
                <param>
                    p1 ending offset of view                    
                </param>
                <param>
                    viewBounds Bounds of View                    
                </param>
                <param>
                    editor JTextComponent                    
                </param>
                <param>
                    view View instance being rendered                    
                </param>
            </javadoc>
            <method name="paintLayeredHighlights" type="void" line="299">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="p0" type="int"/>
                    <param name="p1" type="int"/>
                    <param name="viewBounds" type="Shape"/>
                    <param name="editor" type="JTextComponent"/>
                    <param name="view" type="View"/>
                </params>
                <scope line="300">
                    <declaration name="tag" type="HighlightInfo" line="301"/>
                    <scope line="302">
                        <declaration name="lhi" type="LayeredHighlightInfo" line="303"/>
                        <declaration name="start" type="int" line="304"/>
                        <declaration name="end" type="int" line="305"/>
                        <scope line="307"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="315">
                Queues damageRange() call into event dispatch thread
                  to be sure that views are in consistent state.                
            </javadoc>
            <method name="safeDamageRange" type="void" line="319">
                <params>
                    <param name="p0" type="Position"/>
                    <param name="p1" type="Position"/>
                </params>
            </method>
            <javadoc line="323">
                Queues damageRange() call into event dispatch thread
                  to be sure that views are in consistent state.                
            </javadoc>
            <method name="safeDamageRange" type="void" line="327">
                <params>
                    <param name="a0" type="int"/>
                    <param name="a1" type="int"/>
                </params>
                <declaration name="doc" type="Document" line="328"/>
            </method>
            <javadoc line="332">
                If true, highlights are drawn as the Views draw the text. That is
                  the Views will call into &lt;code&gt;paintLayeredHighlight&lt;/code&gt; which
                  will result in a rectangle being drawn before the text is drawn
                  (if the offsets are in a highlighted region that is). For this to
                  work the painter supplied must be an instance of
                  LayeredHighlightPainter.                
            </javadoc>
            <method name="setDrawsLayeredHighlights" type="void" line="340">
                <params>
                    <param name="newValue" type="boolean"/>
                </params>
            </method>
            <method name="getDrawsLayeredHighlights" type="boolean" line="344"/>
            <declaration name="noHighlights" type="Highlighter.Highlight[]" line="350"/>
            <declaration name="highlights" type="Vector&lt;HighlightInfo&gt;" line="352"/>
            <declaration name="component" type="JTextComponent" line="353"/>
            <declaration name="drawsLayeredHighlights" type="boolean" line="354"/>
            <declaration name="safeDamager" type="SafeDamager" line="355"/>
            <declaration name="DefaultPainter" type="LayeredHighlighter.LayerPainter" line="358"/>
            <javadoc line="358">
                Default implementation of LayeredHighlighter.LayerPainter that can
                  be used for painting highlights.
                  &lt;p&gt;
                  As of 1.4 this field is final.                
            </javadoc>
            <class name="DefaultHighlightPainter" line="367">
                <extends class="LayeredHighlighter.LayerPainter"/>
                <comment line="393">
                    --- HighlightPainter methods ---------------------------------------                    
                </comment>
                <comment line="440">
                    --- LayerPainter methods ----------------------------                    
                </comment>
                <javadoc line="367">
                    Simple highlight painter that fills a highlighted area with
                      a solid color.                    
                </javadoc>
                <javadoc line="373">
                    Constructs a new highlight painter. If &lt;code&gt;c&lt;/code&gt; is null,
                      the JTextComponent will be queried for its selection color.                    
                    <param>
                        c the color for the highlight                        
                    </param>
                </javadoc>
                <method name="DefaultHighlightPainter" type="constructor" line="379">
                    <params>
                        <param name="c" type="Color"/>
                    </params>
                </method>
                <javadoc line="383">
                    Returns the color of the highlight.                    
                    <return>
                        the color                        
                    </return>
                </javadoc>
                <method name="getColor" type="Color" line="388"/>
                <javadoc line="394">
                    Paints a highlight.                    
                    <param>
                        g the graphics context                        
                    </param>
                    <param>
                        offs0 the starting model offset >= 0                        
                    </param>
                    <param>
                        offs1 the ending model offset >= offs1                        
                    </param>
                    <param>
                        bounds the bounding box for the highlight                        
                    </param>
                    <param>
                        c the editor                        
                    </param>
                </javadoc>
                <method name="paint" type="void" line="403">
                    <params>
                        <param name="g" type="Graphics"/>
                        <param name="offs0" type="int"/>
                        <param name="offs1" type="int"/>
                        <param name="bounds" type="Shape"/>
                        <param name="c" type="JTextComponent"/>
                    </params>
                    <comment line="407">
                        --- determine locations ---                        
                    </comment>
                    <comment line="412">
                        --- render ---                        
                    </comment>
                    <comment line="422">
                        same line, render a rectangle                        
                    </comment>
                    <comment line="426">
                        different lines                        
                    </comment>
                    <comment line="436">
                        can&apos;t render                        
                    </comment>
                    <declaration name="alloc" type="Rectangle" line="404"/>
                    <scope line="405">
                        <declaration name="mapper" type="TextUI" line="407"/>
                        <declaration name="p0" type="Rectangle" line="408"/>
                        <declaration name="p1" type="Rectangle" line="409"/>
                        <declaration name="color" type="Color" line="412"/>
                        <scope line="414"/>
                        <scope line="417"/>
                        <scope line="420">
                            <declaration name="r" type="Rectangle" line="422"/>
                        </scope>
                        <scope line="424">
                            <declaration name="p0ToMarginWidth" type="int" line="426"/>
                            <scope line="428"/>
                        </scope>
                    </scope>
                    <scope line="434"/>
                </method>
                <javadoc line="440">
                    Paints a portion of a highlight.                    
                    <param>
                        g the graphics context                        
                    </param>
                    <param>
                        offs0 the starting model offset >= 0                        
                    </param>
                    <param>
                        offs1 the ending model offset >= offs1                        
                    </param>
                    <param>
                        bounds the bounding box of the view, which is not
                          necessarily the region to paint.                        
                    </param>
                    <param>
                        c the editor                        
                    </param>
                    <param>
                        view View painting for                        
                    </param>
                    <return>
                        region drawing occured in                        
                    </return>
                </javadoc>
                <method name="paintLayer" type="Shape" line="453">
                    <params>
                        <param name="g" type="Graphics"/>
                        <param name="offs0" type="int"/>
                        <param name="offs1" type="int"/>
                        <param name="bounds" type="Shape"/>
                        <param name="c" type="JTextComponent"/>
                        <param name="view" type="View"/>
                    </params>
                    <comment line="468">
                        Contained in view, can just use bounds.                        
                    </comment>
                    <comment line="477">
                        Should only render part of View.                        
                    </comment>
                    <comment line="479">
                        --- determine locations ---                        
                    </comment>
                    <comment line="486">
                        can&apos;t render                        
                    </comment>
                    <comment line="492">
                        If we are asked to highlight, we should draw something even
                         if the model-to-view projection is of zero width (6340106).                        
                    </comment>
                    <declaration name="color" type="Color" line="454"/>
                    <scope line="456"/>
                    <scope line="459"/>
                    <declaration name="r" type="Rectangle" line="463"/>
                    <scope line="466">
                        <scope line="468"/>
                        <scope line="471"/>
                    </scope>
                    <scope line="475">
                        <scope line="477">
                            <declaration name="shape" type="Shape" line="479"/>
                        </scope>
                        <scope line="484"/>
                    </scope>
                    <scope line="490"/>
                </method>
                <declaration name="color" type="Color" line="501"/>
            </class>
            <class name="HighlightInfo" line="506">
                <comment line="393">
                    --- HighlightPainter methods ---------------------------------------                    
                </comment>
                <comment line="440">
                    --- LayerPainter methods ----------------------------                    
                </comment>
                <implements interface="Highlighter.Highlight"/>
                <method name="getStartOffset" type="int" line="508"/>
                <method name="getEndOffset" type="int" line="512"/>
                <method name="getPainter" type="Highlighter.HighlightPainter" line="516"/>
                <declaration name="p0" type="Position" line="520"/>
                <declaration name="p1" type="Position" line="521"/>
                <declaration name="painter" type="Highlighter.HighlightPainter" line="522"/>
            </class>
            <class name="LayeredHighlightInfo" line="526">
                <extends class="HighlightInfo"/>
                <comment line="393">
                    --- HighlightPainter methods ---------------------------------------                    
                </comment>
                <comment line="440">
                    --- LayerPainter methods ----------------------------                    
                </comment>
                <javadoc line="526">
                    LayeredHighlightPainter is used when a drawsLayeredHighlights is
                      true. It maintains a rectangle of the region to paint.                    
                </javadoc>
                <method name="union" type="void" line="532">
                    <params>
                        <param name="bounds" type="Shape"/>
                    </params>
                    <declaration name="alloc" type="Rectangle" line="536"/>
                    <scope line="537"/>
                    <scope line="540"/>
                    <scope line="543"/>
                    <scope line="549"/>
                </method>
                <javadoc line="559">
                    Restricts the region based on the receivers offsets and messages
                      the painter to paint the region.                    
                </javadoc>
                <method name="paintLayeredHighlights" type="void" line="565">
                    <params>
                        <param name="g" type="Graphics"/>
                        <param name="p0" type="int"/>
                        <param name="p1" type="int"/>
                        <param name="viewBounds" type="Shape"/>
                        <param name="editor" type="JTextComponent"/>
                        <param name="view" type="View"/>
                    </params>
                    <comment line="569">
                        Restrict the region to what we represent                        
                    </comment>
                    <comment line="572">
                        Paint the appropriate region using the painter and union
                         the effected region with our bounds.                        
                    </comment>
                    <declaration name="start" type="int" line="566"/>
                    <declaration name="end" type="int" line="567"/>
                </method>
                <declaration name="x" type="int" line="577"/>
                <declaration name="y" type="int" line="578"/>
                <declaration name="width" type="int" line="579"/>
                <declaration name="height" type="int" line="580"/>
            </class>
            <class name="SafeDamager" line="583">
                <comment line="393">
                    --- HighlightPainter methods ---------------------------------------                    
                </comment>
                <comment line="440">
                    --- LayerPainter methods ----------------------------                    
                </comment>
                <implements interface="Runnable"/>
                <javadoc line="583">
                    This class invokes &lt;code&gt;mapper.damageRange&lt;/code&gt; in
                      EventDispatchThread. The only one instance per Highlighter
                      is cretaed. When a number of ranges should be damaged
                      it collects them into queue and damages
                      them in consecutive order in &lt;code&gt;run&lt;/code&gt;
                      call.                    
                </javadoc>
                <declaration name="p0" type="Vector&lt;Position&gt;" line="592"/>
                <declaration name="p1" type="Vector&lt;Position&gt;" line="593"/>
                <declaration name="lastDoc" type="Document" line="594"/>
                <javadoc line="596">
                    Executes range(s) damage and cleans range queue.                    
                </javadoc>
                <method name="run" type="void" line="599">
                    <comment line="604">
                        the Document should be the same to properly
                         display highlights                        
                    </comment>
                    <comment line="617">
                        release reference                        
                    </comment>
                    <scope line="600">
                        <declaration name="mapper" type="TextUI" line="601"/>
                        <scope line="602">
                            <declaration name="len" type="int" line="605"/>
                            <scope line="606"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="620">
                    Adds the range to be damaged into the range queue. If the
                      range queue is empty (the first call or run() was already
                      invoked) then adds this class instance into EventDispatch
                      queue.
                      The method also tracks if the current document changed or
                      component is null. In this case it removes all ranges added
                      before from range queue.                    
                </javadoc>
                <method name="damageRange" type="void" line="630">
                    <params>
                        <param name="pos0" type="Position"/>
                        <param name="pos1" type="Position"/>
                    </params>
                    <scope line="631"/>
                    <declaration name="addToQueue" type="boolean" line="637"/>
                    <declaration name="curDoc" type="Document" line="638"/>
                    <scope line="639">
                        <scope line="640"/>
                    </scope>
                    <scope line="649"/>
                </method>
            </class>
        </class>
    </source>