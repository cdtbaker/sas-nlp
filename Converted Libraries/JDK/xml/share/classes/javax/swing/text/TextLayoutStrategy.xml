<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text">
        <import package="java.util"/>
        <import package="java.awt"/>
        <import package="java.text.AttributedCharacterIterator"/>
        <import package="java.text.BreakIterator"/>
        <import package="java.awt.font"/>
        <import package="java.awt.geom.AffineTransform"/>
        <import package="javax.swing.JComponent"/>
        <import package="javax.swing.event.DocumentEvent"/>
        <import package="sun.font.BidiUtils"/>
        <class name="TextLayoutStrategy" line="11">
            <extends class="FlowView.FlowStrategy"/>
            <javadoc line="11">
                A flow strategy that uses java.awt.font.LineBreakMeasureer to
                  produce java.awt.font.TextLayout for i18n capable rendering.
                  If the child view being placed into the flow is of type
                  GlyphView and can be rendered by TextLayout, a GlyphPainter
                  that uses TextLayout is plugged into the GlyphView.                
                <author>
                    Timothy Prinzing                    
                </author>
            </javadoc>
            <javadoc line="20">
                Constructs a layout strategy for paragraphs based
                  upon java.awt.font.LineBreakMeasurer.                
            </javadoc>
            <method name="TextLayoutStrategy" type="constructor" line="24"/>
            <javadoc line="27">
                Gives notification that something was inserted into the document
                  in a location that the given flow view is responsible for.  The
                  strategy should update the appropriate changed region (which
                  depends upon the strategy used for repair).                
                <param>
                    e the change information from the associated document                    
                </param>
                <param>
                    alloc the current allocation of the view inside of the insets.
                      This value will be null if the view has not yet been displayed.                    
                </param>
                <see>
                    View#insertUpdate                    
                </see>
            </javadoc>
            <method name="insertUpdate" type="void" line="37">
                <params>
                    <param name="fv" type="FlowView"/>
                    <param name="e" type="DocumentEvent"/>
                    <param name="alloc" type="Rectangle"/>
                </params>
            </method>
            <javadoc line="41">
                Gives notification that something was removed from the document
                  in a location that the given flow view is responsible for.                
                <param>
                    e the change information from the associated document                    
                </param>
                <param>
                    alloc the current allocation of the view inside of the insets.                    
                </param>
                <see>
                    View#removeUpdate                    
                </see>
            </javadoc>
            <method name="removeUpdate" type="void" line="48">
                <params>
                    <param name="fv" type="FlowView"/>
                    <param name="e" type="DocumentEvent"/>
                    <param name="alloc" type="Rectangle"/>
                </params>
            </method>
            <javadoc line="52">
                Gives notification from the document that attributes were changed
                  in a location that this view is responsible for.                
                <param>
                    changes the change information from the associated document                    
                </param>
                <param>
                    a the current allocation of the view                    
                </param>
                <param>
                    f the factory to use to rebuild if the view has children                    
                </param>
                <see>
                    View#changedUpdate                    
                </see>
            </javadoc>
            <method name="changedUpdate" type="void" line="60">
                <params>
                    <param name="fv" type="FlowView"/>
                    <param name="e" type="DocumentEvent"/>
                    <param name="alloc" type="Rectangle"/>
                </params>
            </method>
            <javadoc line="64">
                Does a a full layout on the given View.  This causes all of
                  the rows (child views) to be rebuilt to match the given
                  constraints for each row.  This is called by a FlowView.layout
                  to update the child views in the flow.                
                <param>
                    fv the view to reflow                    
                </param>
            </javadoc>
            <method name="layout" type="void" line="71">
                <params>
                    <param name="fv" type="FlowView"/>
                </params>
            </method>
            <javadoc line="74">
                Creates a row of views that will fit within the
                  layout span of the row.  This is implemented to execute the
                  superclass functionality (which fills the row with child
                  views or view fragments) and follow that with bidi reordering
                  of the unidirectional view fragments.                
                <param>
                    row the row to fill in with views.  This is assumed
                      to be empty on entry.                    
                </param>
                <param>
                    pos  The current position in the children of
                      this views element from which to start.                    
                </param>
                <return>
                    the position to start the next row                    
                </return>
            </javadoc>
            <method name="layoutRow" type="int" line="86">
                <params>
                    <param name="fv" type="FlowView"/>
                    <param name="rowIndex" type="int"/>
                    <param name="p0" type="int"/>
                </params>
                <declaration name="p1" type="int" line="87"/>
                <declaration name="row" type="View" line="88"/>
                <declaration name="doc" type="Document" line="89"/>
                <declaration name="i18nFlag" type="Object" line="90"/>
                <scope line="91">
                    <declaration name="n" type="int" line="92"/>
                    <scope line="93">
                        <declaration name="d" type="AbstractDocument" line="94"/>
                        <declaration name="bidiRoot" type="Element" line="95"/>
                        <declaration name="levels" type="byte[]" line="96"/>
                        <declaration name="reorder" type="View[]" line="97"/>
                        <scope line="98">
                            <declaration name="v" type="View" line="99"/>
                            <declaration name="bidiIndex" type="int" line="100"/>
                            <declaration name="bidiElem" type="Element" line="101"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="111">
                Adjusts the given row if possible to fit within the
                  layout span.  Since all adjustments were already
                  calculated by the LineBreakMeasurer, this is implemented
                  to do nothing.                
                <param>
                    r the row to adjust to the current layout
                      span.                    
                </param>
                <param>
                    desiredSpan the current layout span >= 0                    
                </param>
                <param>
                    x the location r starts at.                    
                </param>
            </javadoc>
            <method name="adjustRow" type="void" line="121">
                <params>
                    <param name="fv" type="FlowView"/>
                    <param name="rowIndex" type="int"/>
                    <param name="desiredSpan" type="int"/>
                    <param name="x" type="int"/>
                </params>
            </method>
            <javadoc line="123">
                Creates a unidirectional view that can be used to represent the
                  current chunk.  This can be either an entire view from the
                  logical view, or a fragment of the view.                
                <param>
                    fv the view holding the flow                    
                </param>
                <param>
                    startOffset the start location for the view being created                    
                </param>
                <param>
                    spanLeft the about of span left to fill in the row                    
                </param>
                <param>
                    rowIndex the row the view will be placed into                    
                </param>
            </javadoc>
            <method name="createView" type="View" line="132">
                <params>
                    <param name="fv" type="FlowView"/>
                    <param name="startOffset" type="int"/>
                    <param name="spanLeft" type="int"/>
                    <param name="rowIndex" type="int"/>
                </params>
                <declaration name="lv" type="View" line="133"/>
                <declaration name="row" type="View" line="134"/>
                <declaration name="requireNextWord" type="boolean" line="135"/>
                <declaration name="childIndex" type="int" line="136"/>
                <declaration name="v" type="View" line="137"/>
                <declaration name="endOffset" type="int" line="138"/>
                <scope line="139"/>
                <declaration name="frag" type="View" line="142"/>
                <scope line="143"/>
                <scope line="146"/>
                <scope line="149">
                    <declaration name="isTab" type="boolean" line="150"/>
                    <declaration name="p0" type="int" line="151"/>
                    <declaration name="p1" type="int" line="152"/>
                    <scope line="153">
                        <declaration name="s" type="Segment" line="154"/>
                        <declaration name="ch" type="char" line="155"/>
                        <scope line="156"/>
                    </scope>
                    <declaration name="tl" type="TextLayout" line="160"/>
                    <scope line="161"/>
                </scope>
            </method>
            <javadoc line="167">
                Calculate the limiting offset for the next view fragment.
                  At most this would be the entire view (i.e. the limiting
                  offset would be the end offset in that case).  If the range
                  contains a tab or a direction change, that will limit the
                  offset to something less.  This value is then fed to the
                  LineBreakMeasurer as a limit to consider in addition to the
                  remaining span.                
                <param>
                    v the logical view representing the starting offset.                    
                </param>
                <param>
                    startOffset the model location to start at.                    
                </param>
            </javadoc>
            <method name="getLimitingOffset" type="int" line="178">
                <params>
                    <param name="v" type="View"/>
                    <param name="startOffset" type="int"/>
                    <param name="spanLeft" type="int"/>
                    <param name="requireNextWord" type="boolean"/>
                </params>
                <declaration name="endOffset" type="int" line="179"/>
                <declaration name="doc" type="Document" line="180"/>
                <scope line="181">
                    <declaration name="d" type="AbstractDocument" line="182"/>
                    <declaration name="bidiRoot" type="Element" line="183"/>
                    <scope line="184">
                        <declaration name="bidiIndex" type="int" line="185"/>
                        <declaration name="bidiElem" type="Element" line="186"/>
                    </scope>
                </scope>
                <scope line="190">
                    <declaration name="s" type="Segment" line="191"/>
                    <declaration name="ch" type="char" line="192"/>
                    <scope line="193"/>
                    <scope line="196">
                        <scope line="197">
                            <scope line="198"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="limitIndex" type="int" line="205"/>
                <scope line="206">
                    <declaration name="index" type="int" line="207"/>
                    <scope line="208"/>
                </scope>
                <declaration name="pos" type="int" line="213"/>
            </method>
            <javadoc line="216">
                Synchronize the strategy with its FlowView.  Allows the strategy
                  to update its state to account for changes in that portion of the
                  model represented by the FlowView.  Also allows the strategy
                  to update the FlowView in response to these changes.                
            </javadoc>
            <method name="sync" type="void" line="222">
                <params>
                    <param name="fv" type="FlowView"/>
                </params>
                <declaration name="lv" type="View" line="223"/>
                <declaration name="container" type="Container" line="225"/>
                <declaration name="frc" type="FontRenderContext" line="226"/>
                <declaration name="iter" type="BreakIterator" line="227"/>
                <declaration name="c" type="Container" line="228"/>
                <scope line="229"/>
                <scope line="232"/>
                <declaration name="shaper" type="Object" line="235"/>
                <scope line="236"/>
                <declaration name="n" type="int" line="241"/>
                <scope line="242">
                    <declaration name="child" type="View" line="243"/>
                    <scope line="244">
                        <declaration name="p0" type="int" line="245"/>
                        <declaration name="p1" type="int" line="246"/>
                        <declaration name="layout" type="TextLayout" line="248"/>
                    </scope>
                </scope>
            </method>
            <declaration name="measurer" type="LineBreakMeasurer" line="254"/>
            <declaration name="text" type="AttributedSegment" line="255"/>
            <class name="AttributedSegment" line="256">
                <extends class="Segment"/>
                <implements interface="AttributedCharacterIterator"/>
                <javadoc line="256">
                    Implementation of AttributedCharacterIterator that supports
                      the GlyphView attributes for rendering the glyphs through a
                      TextLayout.                    
                </javadoc>
                <method name="AttributedSegment" type="constructor" line="262"/>
                <method name="getView" type="View" line="264"/>
                <method name="setView" type="void" line="267">
                    <params>
                        <param name="v" type="View"/>
                    </params>
                    <declaration name="doc" type="Document" line="269"/>
                    <declaration name="p0" type="int" line="270"/>
                    <declaration name="p1" type="int" line="271"/>
                    <scope line="272"/>
                    <scope line="275"/>
                </method>
                <javadoc line="280">
                    Get a boundary position for the font.
                      This is implemented to assume that two fonts are
                      equal if their references are equal (i.e. that the
                      font came from a cache).                    
                    <return>
                        the location in model coordinates.  This is
                          not the same as the Segment coordinates.                        
                    </return>
                </javadoc>
                <method name="getFontBoundary" type="int" line="288">
                    <params>
                        <param name="childIndex" type="int"/>
                        <param name="dir" type="int"/>
                    </params>
                    <declaration name="child" type="View" line="289"/>
                    <declaration name="f" type="Font" line="290"/>
                    <scope line="291">
                        <declaration name="next" type="Font" line="292"/>
                        <scope line="293"/>
                    </scope>
                </method>
                <javadoc line="300">
                    Get the font at the given child index.                    
                </javadoc>
                <method name="getFont" type="Font" line="303">
                    <params>
                        <param name="childIndex" type="int"/>
                    </params>
                    <declaration name="child" type="View" line="304"/>
                    <scope line="305"/>
                </method>
                <method name="toModelPosition" type="int" line="310">
                    <params>
                        <param name="index" type="int"/>
                    </params>
                </method>
                <method name="toIteratorIndex" type="int" line="313">
                    <params>
                        <param name="pos" type="int"/>
                    </params>
                </method>
                <method name="setShaper" type="void" line="316">
                    <params>
                        <param name="shaper" type="Object"/>
                    </params>
                </method>
                <javadoc line="319">
                    Returns the index of the first character of the run
                      with respect to all attributes containing the current character.                    
                </javadoc>
                <method name="getRunStart" type="int" line="323">
                    <declaration name="pos" type="int" line="324"/>
                    <declaration name="i" type="int" line="325"/>
                    <declaration name="child" type="View" line="326"/>
                </method>
                <javadoc line="329">
                    Returns the index of the first character of the run
                      with respect to the given attribute containing the current character.                    
                </javadoc>
                <method name="getRunStart" type="int" line="333">
                    <params>
                        <param name="attribute" type="AttributedCharacterIterator.Attribute"/>
                    </params>
                    <scope line="334">
                        <declaration name="pos" type="int" line="335"/>
                        <declaration name="i" type="int" line="336"/>
                        <scope line="337"/>
                    </scope>
                </method>
                <javadoc line="343">
                    Returns the index of the first character of the run
                      with respect to the given attributes containing the current character.                    
                </javadoc>
                <method name="getRunStart" type="int" line="347">
                    <params>
                        <param name="attributes" type="Set<? extends Attribute>"/>
                    </params>
                    <declaration name="index" type="int" line="348"/>
                    <declaration name="a" type="Object[]" line="349"/>
                    <scope line="350">
                        <declaration name="attr" type="TextAttribute" line="351"/>
                    </scope>
                </method>
                <javadoc line="356">
                    Returns the index of the first character following the run
                      with respect to all attributes containing the current character.                    
                </javadoc>
                <method name="getRunLimit" type="int" line="360">
                    <declaration name="pos" type="int" line="361"/>
                    <declaration name="i" type="int" line="362"/>
                    <declaration name="child" type="View" line="363"/>
                </method>
                <javadoc line="366">
                    Returns the index of the first character following the run
                      with respect to the given attribute containing the current character.                    
                </javadoc>
                <method name="getRunLimit" type="int" line="370">
                    <params>
                        <param name="attribute" type="AttributedCharacterIterator.Attribute"/>
                    </params>
                    <scope line="371">
                        <declaration name="pos" type="int" line="372"/>
                        <declaration name="i" type="int" line="373"/>
                        <scope line="374"/>
                    </scope>
                </method>
                <javadoc line="380">
                    Returns the index of the first character following the run
                      with respect to the given attributes containing the current character.                    
                </javadoc>
                <method name="getRunLimit" type="int" line="384">
                    <params>
                        <param name="attributes" type="Set<? extends Attribute>"/>
                    </params>
                    <declaration name="index" type="int" line="385"/>
                    <declaration name="a" type="Object[]" line="386"/>
                    <scope line="387">
                        <declaration name="attr" type="TextAttribute" line="388"/>
                    </scope>
                </method>
                <javadoc line="393">
                    Returns a map with the attributes defined on the current
                      character.                    
                </javadoc>
                <method name="getAttributes" type="Map<Attribute,Object>" line="397">
                    <declaration name="ka" type="Object[]" line="398"/>
                    <declaration name="h" type="Hashtable&lt;Attribute,Object&gt;" line="399"/>
                    <scope line="400">
                        <declaration name="a" type="TextAttribute" line="401"/>
                        <declaration name="value" type="Object" line="402"/>
                        <scope line="403"/>
                    </scope>
                </method>
                <javadoc line="409">
                    Returns the value of the named attribute for the current character.
                      Returns null if the attribute is not defined.                    
                    <param>
                        attribute the key of the attribute whose value is requested.                        
                    </param>
                </javadoc>
                <method name="getAttribute" type="Object" line="414">
                    <params>
                        <param name="attribute" type="AttributedCharacterIterator.Attribute"/>
                    </params>
                    <declaration name="pos" type="int" line="415"/>
                    <declaration name="childIndex" type="int" line="416"/>
                    <scope line="417"/>
                    <scope line="420"/>
                    <scope line="423"/>
                </method>
                <javadoc line="428">
                    Returns the keys of all attributes defined on the
                      iterator&apos;s text range. The set is empty if no
                      attributes are defined.                    
                </javadoc>
                <method name="getAllAttributeKeys" type="Set<Attribute>" line="433"/>
                <declaration name="v" type="View" line="436"/>
                <declaration name="keys" type="Set&lt;Attribute&gt;" line="437"/>
                <scope line="438"/>
                <declaration name="shaper" type="Object" line="444"/>
            </class>
        </class>
    </source>