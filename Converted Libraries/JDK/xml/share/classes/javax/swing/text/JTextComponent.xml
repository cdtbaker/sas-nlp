<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text">
        <import package="java.lang.reflect.Method"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.beans.Transient"/>
        <import package="java.util.Collections"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.Vector"/>
        <import package="java.util.Map"/>
        <import package="java.util.concurrent"/>
        <import package="java.io"/>
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="java.awt.print"/>
        <import package="java.awt.datatransfer"/>
        <import package="java.awt.im.InputContext"/>
        <import package="java.awt.im.InputMethodRequests"/>
        <import package="java.awt.font.TextHitInfo"/>
        <import package="java.awt.font.TextAttribute"/>
        <import package="java.awt.print.Printable"/>
        <import package="java.awt.print.PrinterException"/>
        <import package="javax.print.PrintService"/>
        <import package="javax.print.attribute.PrintRequestAttributeSet"/>
        <import package="java.text"/>
        <import package="java.text.AttributedCharacterIterator.Attribute"/>
        <import package="javax.swing"/>
        <import package="javax.swing.event"/>
        <import package="javax.swing.plaf"/>
        <import package="javax.accessibility"/>
        <import package="javax.print.attribute"/>
        <import package="sun.awt.AppContext"/>
        <import package="sun.swing.PrintingStatus"/>
        <import package="sun.swing.SwingUtilities2"/>
        <import package="sun.swing.text.TextComponentPrintable"/>
        <import package="sun.swing.SwingAccessor"/>
        <class name="JTextComponent" line="78">
            <extends class="JComponent"/>
            <comment line="485">
                Override of Component.setComponentOrientation                
            </comment>
            <comment line="1658">
                --- java.awt.TextComponent methods ------------------------                
            </comment>
            <comment line="1939">
                --- Tooltip Methods ---------------------------------------------                
            </comment>
            <comment line="1976">
                --- Scrollable methods ---------------------------------------------                
            </comment>
            <comment line="2099">
                ////////////////
                 Printing Support                
            </comment>
            <comment line="2507">
                ///////////////
                 Accessibility support                
            </comment>
            <comment line="3791">
                --- serialization ---------------------------------------------                
            </comment>
            <comment line="3802">
                --- member variables ----------------------------------                
            </comment>
            <comment line="4060">
                member variables used for on-the-spot input method
                 editing style support                
            </comment>
            <comment line="4491">
                Process any input method events that the component itself
                 recognizes. The default on-the-spot handling for input method
                 composed(uncommitted) text is done here after all input
                 method listeners get called for stealing the events.                
            </comment>
            <comment line="4521">
                Overrides this method to become an active input method client.                
            </comment>
            <comment line="4536">
                Overrides this method to watch the listener installed.                
            </comment>
            <comment line="4548">
                Default implementation of the InputMethodRequests interface.                
            </comment>
            <comment line="4705">
                Replaces the current input method (composed) text according to
                 the passed input method event. This method also inserts the
                 committed text into the document.                
            </comment>
            <comment line="4864">
                Map committed text to an ActionEvent. If the committed text length is 1,
                 treat it as a KeyStroke, otherwise or there is no KeyStroke defined,
                 treat it just as a default action.                
            </comment>
            <comment line="4893">
                Sets the caret position according to the passed input method
                 event. Also, sets/resets composed text caret appropriately.                
            </comment>
            <comment line="4955">
                Checks whether the client code overrides processInputMethodEvent.  If it is overridden,
                 need not to generate KeyTyped events for committed text. If it&apos;s not, behave as an
                 passive input method client.                
            </comment>
            <comment line="4980">
                Checks whether a composed text in this text component                
            </comment>
            <comment line="4987">
                Caret implementation for editing the composed text.                
            </comment>
            <comment line="5058">
                Runnable class for invokeLater() to set caret position later.                
            </comment>
            <implements interface="Scrollable"/>
            <implements interface="Accessible"/>
            <javadoc line="78">
                &lt;code&gt;JTextComponent&lt;/code&gt; is the base class for swing text
                  components.  It tries to be compatible with the
                  &lt;code&gt;java.awt.TextComponent&lt;/code&gt; class
                  where it can reasonably do so.  Also provided are other services
                  for additional flexibility (beyond the pluggable UI and bean
                  support).
                  You can find information on how to use the functionality
                  this class provides in
                  &lt;a href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/components/generaltext.html&quot;&gt;General Rules for Using Text Components&lt;/a&gt;,
                  a section in &lt;em&gt;The Java Tutorial.&lt;/em&gt;
                  &lt;p&gt;
                  &lt;dl&gt;
                  &lt;dt&gt;&lt;b&gt;&lt;font size=+1&gt;Caret Changes&lt;/font&gt;&lt;/b&gt;
                  &lt;dd&gt;
                  The caret is a pluggable object in swing text components.
                  Notification of changes to the caret position and the selection
                  are sent to implementations of the &lt;code&gt;CaretListener&lt;/code&gt;
                  interface that have been registered with the text component.
                  The UI will install a default caret unless a customized caret
                  has been set. &lt;br&gt;
                  By default the caret tracks all the document changes
                  performed on the Event Dispatching Thread and updates it&apos;s position
                  accordingly if an insertion occurs before or at the caret position
                  or a removal occurs before the caret position. &lt;code&gt;DefaultCaret&lt;/code&gt;
                  tries to make itself visible which may lead to scrolling
                  of a text component within &lt;code&gt;JScrollPane&lt;/code&gt;. The default caret
                  behavior can be changed by the {@link DefaultCaret#setUpdatePolicy} method.
                  &lt;br&gt;
                  &lt;b&gt;Note&lt;/b&gt;: Non-editable text components also have a caret though
                  it may not be painted.
                  &lt;p&gt;
                  &lt;dt&gt;&lt;b&gt;&lt;font size=+1&gt;Commands&lt;/font&gt;&lt;/b&gt;
                  &lt;dd&gt;
                  Text components provide a number of commands that can be used
                  to manipulate the component.  This is essentially the way that
                  the component expresses its capabilities.  These are expressed
                  in terms of the swing &lt;code&gt;Action&lt;/code&gt; interface,
                  using the &lt;code&gt;TextAction&lt;/code&gt; implementation.
                  The set of commands supported by the text component can be
                  found with the {@link #getActions} method.  These actions
                  can be bound to key events, fired from buttons, etc.
                  &lt;p&gt;
                  &lt;dt&gt;&lt;b&gt;&lt;font size=+1&gt;Text Input&lt;/font&gt;&lt;/b&gt;
                  &lt;dd&gt;
                  The text components support flexible and internationalized text input, using
                  keymaps and the input method framework, while maintaining compatibility with
                  the AWT listener model.
                  &lt;p&gt;
                  A {@link javax.swing.text.Keymap} lets an application bind key
                  strokes to actions.
                  In order to allow keymaps to be shared across multiple text components, they
                  can use actions that extend &lt;code&gt;TextAction&lt;/code&gt;.
                  &lt;code&gt;TextAction&lt;/code&gt; can determine which &lt;code&gt;JTextComponent&lt;/code&gt;
                  most recently has or had focus and therefore is the subject of
                  the action (In the case that the &lt;code&gt;ActionEvent&lt;/code&gt;
                  sent to the action doesn&apos;t contain the target text component as its source).
                  &lt;p&gt;
                  The &lt;a href=&quot;../../../../technotes/guides/imf/spec.html&quot;&gt;input method framework&lt;/a&gt;
                  lets text components interact with input methods, separate software
                  components that preprocess events to let users enter thousands of
                  different characters using keyboards with far fewer keys.
                  &lt;code&gt;JTextComponent&lt;/code&gt; is an &lt;em&gt;active client&lt;/em&gt; of
                  the framework, so it implements the preferred user interface for interacting
                  with input methods. As a consequence, some key events do not reach the text
                  component because they are handled by an input method, and some text input
                  reaches the text component as committed text within an {@link java.awt.event.InputMethodEvent} instead of as a key event.
                  The complete text input is the combination of the characters in
                  &lt;code&gt;keyTyped&lt;/code&gt; key events and committed text in input method events.
                  &lt;p&gt;
                  The AWT listener model lets applications attach event listeners to
                  components in order to bind events to actions. Swing encourages the
                  use of keymaps instead of listeners, but maintains compatibility
                  with listeners by giving the listeners a chance to steal an event
                  by consuming it.
                  &lt;p&gt;
                  Keyboard event and input method events are handled in the following stages,
                  with each stage capable of consuming the event:
                  &lt;table border=1 summary=&quot;Stages of keyboard and input method event handling&quot;&gt;
                  &lt;tr&gt;
                  &lt;th id=&quot;stage&quot;&gt;&lt;p align=&quot;left&quot;&gt;Stage&lt;/p&gt;&lt;/th&gt;
                  &lt;th id=&quot;ke&quot;&gt;&lt;p align=&quot;left&quot;&gt;KeyEvent&lt;/p&gt;&lt;/th&gt;
                  &lt;th id=&quot;ime&quot;&gt;&lt;p align=&quot;left&quot;&gt;InputMethodEvent&lt;/p&gt;&lt;/th&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td headers=&quot;stage&quot;&gt;1.   &lt;/td&gt;
                  &lt;td headers=&quot;ke&quot;&gt;input methods &lt;/td&gt;
                  &lt;td headers=&quot;ime&quot;&gt;(generated here)&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td headers=&quot;stage&quot;&gt;2.   &lt;/td&gt;
                  &lt;td headers=&quot;ke&quot;&gt;focus manager &lt;/td&gt;
                  &lt;td headers=&quot;ime&quot;&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td headers=&quot;stage&quot;&gt;3.   &lt;/td&gt;
                  &lt;td headers=&quot;ke&quot;&gt;registered key listeners&lt;/td&gt;
                  &lt;td headers=&quot;ime&quot;&gt;registered input method listeners&lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td headers=&quot;stage&quot;&gt;4.   &lt;/td&gt;
                  &lt;td headers=&quot;ke&quot;&gt;&lt;/td&gt;
                  &lt;td headers=&quot;ime&quot;&gt;input method handling in JTextComponent&lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td headers=&quot;stage&quot;&gt;5.   &lt;/td&gt;&lt;td headers=&quot;ke ime&quot; colspan=2&gt;keymap handling using the current keymap&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td headers=&quot;stage&quot;&gt;6.   &lt;/td&gt;&lt;td headers=&quot;ke&quot;&gt;keyboard handling in JComponent (e.g. accelerators, component navigation, etc.)&lt;/td&gt;
                  &lt;td headers=&quot;ime&quot;&gt;&lt;/td&gt;&lt;/tr&gt;
                  &lt;/table&gt;
                  &lt;p&gt;
                  To maintain compatibility with applications that listen to key
                  events but are not aware of input method events, the input
                  method handling in stage 4 provides a compatibility mode for
                  components that do not process input method events. For these
                  components, the committed text is converted to keyTyped key events
                  and processed in the key event pipeline starting at stage 3
                  instead of in the input method event pipeline.
                  &lt;p&gt;
                  By default the component will create a keymap (named &lt;b&gt;DEFAULT_KEYMAP&lt;/b&gt;)
                  that is shared by all JTextComponent instances as the default keymap.
                  Typically a look-and-feel implementation will install a different keymap
                  that resolves to the default keymap for those bindings not found in the
                  different keymap. The minimal bindings include:
                  &lt;ul&gt;
                  &lt;li&gt;inserting content into the editor for the
                  printable keys.
                  &lt;li&gt;removing content with the backspace and del
                  keys.
                  &lt;li&gt;caret movement forward and backward
                  &lt;/ul&gt;
                  &lt;p&gt;
                  &lt;dt&gt;&lt;b&gt;&lt;font size=+1&gt;Model/View Split&lt;/font&gt;&lt;/b&gt;
                  &lt;dd&gt;
                  The text components have a model-view split.  A text component pulls
                  together the objects used to represent the model, view, and controller.
                  The text document model may be shared by other views which act as observers
                  of the model (e.g. a document may be shared by multiple components).
                  &lt;p align=center&gt;&lt;img src=&quot;doc-files/editor.gif&quot; alt=&quot;Diagram showing interaction between Controller, Document, events, and ViewFactory&quot;
                  HEIGHT=358 WIDTH=587&gt;&lt;/p&gt;
                  &lt;p&gt;
                  The model is defined by the {@link Document} interface.
                  This is intended to provide a flexible text storage mechanism
                  that tracks change during edits and can be extended to more sophisticated
                  models.  The model interfaces are meant to capture the capabilities of
                  expression given by SGML, a system used to express a wide variety of
                  content.
                  Each modification to the document causes notification of the
                  details of the change to be sent to all observers in the form of a{@link DocumentEvent} which allows the views to stay up to date with the model.
                  This event is sent to observers that have implemented the{@link DocumentListener}interface and registered interest with the model being observed.
                  &lt;p&gt;
                  &lt;dt&gt;&lt;b&gt;&lt;font size=+1&gt;Location Information&lt;/font&gt;&lt;/b&gt;
                  &lt;dd&gt;
                  The capability of determining the location of text in
                  the view is provided.  There are two methods, {@link #modelToView}and {@link #viewToModel} for determining this information.
                  &lt;p&gt;
                  &lt;dt&gt;&lt;b&gt;&lt;font size=+1&gt;Undo/Redo support&lt;/font&gt;&lt;/b&gt;
                  &lt;dd&gt;
                  Support for an edit history mechanism is provided to allow
                  undo/redo operations.  The text component does not itself
                  provide the history buffer by default, but does provide
                  the &lt;code&gt;UndoableEdit&lt;/code&gt; records that can be used in conjunction
                  with a history buffer to provide the undo/redo support.
                  The support is provided by the Document model, which allows
                  one to attach UndoableEditListener implementations.
                  &lt;p&gt;
                  &lt;dt&gt;&lt;b&gt;&lt;font size=+1&gt;Thread Safety&lt;/font&gt;&lt;/b&gt;
                  &lt;dd&gt;
                  The swing text components provide some support of thread
                  safe operations.  Because of the high level of configurability
                  of the text components, it is possible to circumvent the
                  protection provided.  The protection primarily comes from
                  the model, so the documentation of &lt;code&gt;AbstractDocument&lt;/code&gt;
                  describes the assumptions of the protection provided.
                  The methods that are safe to call asynchronously are marked
                  with comments.
                  &lt;p&gt;
                  &lt;dt&gt;&lt;b&gt;&lt;font size=+1&gt;Newlines&lt;/font&gt;&lt;/b&gt;
                  &lt;dd&gt;
                  For a discussion on how newlines are handled, see
                  &lt;a href=&quot;DefaultEditorKit.html&quot;&gt;DefaultEditorKit&lt;/a&gt;.
                  &lt;p&gt;
                  &lt;dt&gt;&lt;b&gt;&lt;font size=+1&gt;Printing support&lt;/font&gt;&lt;/b&gt;
                  &lt;dd&gt;
                  Several {@link #print print} methods are provided for basic
                  document printing.  If more advanced printing is needed, use the{@link #getPrintable} method.
                  &lt;/dl&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <beaninfo>
                    attribute: isContainer false                    
                </beaninfo>
                <author>
                    Timothy Prinzing                    
                </author>
                <author>
                    Igor Kushnirskiy (printing support)                    
                </author>
                <see>
                    Document                    
                </see>
                <see>
                    DocumentEvent                    
                </see>
                <see>
                    DocumentListener                    
                </see>
                <see>
                    Caret                    
                </see>
                <see>
                    CaretEvent                    
                </see>
                <see>
                    CaretListener                    
                </see>
                <see>
                    TextUI                    
                </see>
                <see>
                    View                    
                </see>
                <see>
                    ViewFactory                    
                </see>
            </javadoc>
            <javadoc line="305">
                Creates a new &lt;code&gt;JTextComponent&lt;/code&gt;.
                  Listeners for caret events are established, and the pluggable
                  UI installed.  The component is marked as editable.  No layout manager
                  is used, because layout is managed by the view subsystem of text.
                  The document model is set to &lt;code&gt;null&lt;/code&gt;.                
            </javadoc>
            <method name="JTextComponent" type="constructor" line="312">
                <comment line="315">
                    enable InputMethodEvent for on-the-spot pre-editing                    
                </comment>
                <comment line="322">
                    layout is managed by View hierarchy                    
                </comment>
            </method>
            <javadoc line="325">
                Fetches the user-interface factory for this text-oriented editor.                
                <return>
                    the factory                    
                </return>
            </javadoc>
            <method name="getUI" type="TextUI" line="330"/>
            <javadoc line="332">
                Sets the user-interface factory for this text-oriented editor.                
                <param>
                    ui the factory                    
                </param>
            </javadoc>
            <method name="setUI" type="void" line="337">
                <params>
                    <param name="ui" type="TextUI"/>
                </params>
            </method>
            <javadoc line="341">
                Reloads the pluggable UI.  The key used to fetch the
                  new interface is &lt;code&gt;getUIClassID()&lt;/code&gt;.  The type of
                  the UI is &lt;code&gt;TextUI&lt;/code&gt;.  &lt;code&gt;invalidate&lt;/code&gt;
                  is called after setting the UI.                
            </javadoc>
            <method name="updateUI" type="void" line="347"/>
            <javadoc line="352">
                Adds a caret listener for notification of any changes
                  to the caret.                
                <param>
                    listener the listener to be added                    
                </param>
                <see>
                    javax.swing.event.CaretEvent                    
                </see>
            </javadoc>
            <method name="addCaretListener" type="void" line="359">
                <params>
                    <param name="listener" type="CaretListener"/>
                </params>
            </method>
            <javadoc line="363">
                Removes a caret listener.                
                <param>
                    listener the listener to be removed                    
                </param>
                <see>
                    javax.swing.event.CaretEvent                    
                </see>
            </javadoc>
            <method name="removeCaretListener" type="void" line="369">
                <params>
                    <param name="listener" type="CaretListener"/>
                </params>
            </method>
            <javadoc line="373">
                Returns an array of all the caret listeners
                  registered on this text component.                
                <return>
                    all of this component&apos;s &lt;code&gt;CaretListener&lt;/code&gt;s
                      or an empty
                      array if no caret listeners are currently registered                    
                </return>
                <see>
                    #addCaretListener                    
                </see>
                <see>
                    #removeCaretListener                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getCaretListeners" type="CaretListener[]" line="386"/>
            <javadoc line="390">
                Notifies all listeners that have registered interest for
                  notification on this event type.  The event instance
                  is lazily created using the parameters passed into
                  the fire method.  The listener list is processed in a
                  last-to-first manner.                
                <param>
                    e the event                    
                </param>
                <see>
                    EventListenerList                    
                </see>
            </javadoc>
            <method name="fireCaretUpdate" type="void" line="400">
                <params>
                    <param name="e" type="CaretEvent"/>
                </params>
                <comment line="402">
                    Guaranteed to return a non-null array                    
                </comment>
                <comment line="404">
                    Process the listeners last to first, notifying
                     those that are interested in this event                    
                </comment>
                <declaration name="listeners" type="Object[]" line="402"/>
                <scope line="405">
                    <scope line="406"/>
                </scope>
            </method>
            <javadoc line="412">
                Associates the editor with a text document.
                  The currently registered factory is used to build a view for
                  the document, which gets displayed by the editor after revalidation.
                  A PropertyChange event (&quot;document&quot;) is propagated to each listener.                
                <param>
                    doc  the document to display/edit                    
                </param>
                <see>
                    #getDocument                    
                </see>
                <beaninfo>
                    description: the text document model
                      bound: true
                      expert: true                    
                </beaninfo>
            </javadoc>
            <method name="setDocument" type="void" line="425">
                <params>
                    <param name="doc" type="Document"/>
                </params>
                <comment line="429">
                    aquire a read lock on the old model to prevent notification of
                     mutations while we disconnecting the old model.                    
                </comment>
                <comment line="446">
                    Set the document&apos;s run direction property to match the
                     component&apos;s ComponentOrientation property.                    
                </comment>
                <declaration name="old" type="Document" line="426"/>
                <scope line="432">
                    <scope line="433"/>
                    <scope line="436"/>
                    <scope line="440"/>
                    <declaration name="runDir" type="Boolean" line="447"/>
                    <scope line="450"/>
                </scope>
                <scope line="454">
                    <scope line="455"/>
                </scope>
                <scope line="462"/>
                <scope line="466"/>
            </method>
            <javadoc line="471">
                Fetches the model associated with the editor.  This is
                  primarily for the UI to get at the minimal amount of
                  state required to be a text editor.  Subclasses will
                  return the actual type of the model which will typically
                  be something that extends Document.                
                <return>
                    the model                    
                </return>
            </javadoc>
            <method name="getDocument" type="Document" line="480"/>
            <method name="setComponentOrientation" type="void" line="485">
                <params>
                    <param name="o" type="ComponentOrientation"/>
                </params>
                <comment line="487">
                    Set the document&apos;s run direction property to match the
                     ComponentOrientation property.                    
                </comment>
                <declaration name="doc" type="Document" line="488"/>
                <scope line="489">
                    <declaration name="runDir" type="Boolean" line="490"/>
                </scope>
            </method>
            <javadoc line="498">
                Fetches the command list for the editor.  This is
                  the list of commands supported by the plugged-in UI
                  augmented by the collection of commands that the
                  editor itself supports.  These are useful for binding
                  to events, such as in a keymap.                
                <return>
                    the command list                    
                </return>
            </javadoc>
            <method name="getActions" type="Action[]" line="507"/>
            <javadoc line="511">
                Sets margin space between the text component&apos;s border
                  and its text.  The text component&apos;s default &lt;code&gt;Border&lt;/code&gt;
                  object will use this value to create the proper margin.
                  However, if a non-default border is set on the text component,
                  it is that &lt;code&gt;Border&lt;/code&gt; object&apos;s responsibility to create the
                  appropriate margin space (else this property will effectively
                  be ignored).  This causes a redraw of the component.
                  A PropertyChange event (&quot;margin&quot;) is sent to all listeners.                
                <param>
                    m the space between the border and the text                    
                </param>
                <beaninfo>
                    description: desired space between the border and text area
                      bound: true                    
                </beaninfo>
            </javadoc>
            <method name="setMargin" type="void" line="526">
                <params>
                    <param name="m" type="Insets"/>
                </params>
                <declaration name="old" type="Insets" line="527"/>
            </method>
            <javadoc line="533">
                Returns the margin between the text component&apos;s border and
                  its text.                
                <return>
                    the margin                    
                </return>
            </javadoc>
            <method name="getMargin" type="Insets" line="539"/>
            <javadoc line="543">
                Sets the &lt;code&gt;NavigationFilter&lt;/code&gt;. &lt;code&gt;NavigationFilter&lt;/code&gt;
                  is used by &lt;code&gt;DefaultCaret&lt;/code&gt; and the default cursor movement
                  actions as a way to restrict the cursor movement.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setNavigationFilter" type="void" line="550">
                <params>
                    <param name="filter" type="NavigationFilter"/>
                </params>
            </method>
            <javadoc line="554">
                Returns the &lt;code&gt;NavigationFilter&lt;/code&gt;. &lt;code&gt;NavigationFilter&lt;/code&gt;
                  is used by &lt;code&gt;DefaultCaret&lt;/code&gt; and the default cursor movement
                  actions as a way to restrict the cursor movement. A null return value
                  implies the cursor movement and selection should not be restricted.                
                <since>
                    1.4                    
                </since>
                <return>
                    the NavigationFilter                    
                </return>
            </javadoc>
            <method name="getNavigationFilter" type="NavigationFilter" line="563"/>
            <javadoc line="567">
                Fetches the caret that allows text-oriented navigation over
                  the view.                
                <return>
                    the caret                    
                </return>
            </javadoc>
            <method name="getCaret" type="Caret" line="574"/>
            <javadoc line="578">
                Sets the caret to be used.  By default this will be set
                  by the UI that gets installed.  This can be changed to
                  a custom caret if desired.  Setting the caret results in a
                  PropertyChange event (&quot;caret&quot;) being fired.                
                <param>
                    c the caret                    
                </param>
                <see>
                    #getCaret                    
                </see>
                <beaninfo>
                    description: the caret used to select/navigate
                      bound: true
                      expert: true                    
                </beaninfo>
            </javadoc>
            <method name="setCaret" type="void" line="591">
                <params>
                    <param name="c" type="Caret"/>
                </params>
                <scope line="592"/>
                <declaration name="old" type="Caret" line="596"/>
                <scope line="598"/>
            </method>
            <javadoc line="605">
                Fetches the object responsible for making highlights.                
                <return>
                    the highlighter                    
                </return>
            </javadoc>
            <method name="getHighlighter" type="Highlighter" line="610"/>
            <javadoc line="614">
                Sets the highlighter to be used.  By default this will be set
                  by the UI that gets installed.  This can be changed to
                  a custom highlighter if desired.  The highlighter can be set to
                  &lt;code&gt;null&lt;/code&gt; to disable it.
                  A PropertyChange event (&quot;highlighter&quot;) is fired
                  when a new highlighter is installed.                
                <param>
                    h the highlighter                    
                </param>
                <see>
                    #getHighlighter                    
                </see>
                <beaninfo>
                    description: object responsible for background highlights
                      bound: true
                      expert: true                    
                </beaninfo>
            </javadoc>
            <method name="setHighlighter" type="void" line="629">
                <params>
                    <param name="h" type="Highlighter"/>
                </params>
                <scope line="630"/>
                <declaration name="old" type="Highlighter" line="633"/>
                <scope line="635"/>
            </method>
            <javadoc line="641">
                Sets the keymap to use for binding events to
                  actions.  Setting to &lt;code&gt;null&lt;/code&gt; effectively disables
                  keyboard input.
                  A PropertyChange event (&quot;keymap&quot;) is fired when a new keymap
                  is installed.                
                <param>
                    map the keymap                    
                </param>
                <see>
                    #getKeymap                    
                </see>
                <beaninfo>
                    description: set of key event to action bindings to use
                      bound: true                    
                </beaninfo>
            </javadoc>
            <method name="setKeymap" type="void" line="654">
                <params>
                    <param name="map" type="Keymap"/>
                </params>
                <declaration name="old" type="Keymap" line="655"/>
            </method>
            <javadoc line="661">
                Turns on or off automatic drag handling. In order to enable automatic
                  drag handling, this property should be set to {@code true}, and the
                  component&apos;s {@code TransferHandler} needs to be {@code non-null}.
                  The default value of the {@code dragEnabled} property is {@code false}.
                  &lt;p&gt;
                  The job of honoring this property, and recognizing a user drag gesture,
                  lies with the look and feel implementation, and in particular, the component&apos;s{@code TextUI}. When automatic drag handling is enabled, most look and
                  feels (including those that subclass {@code BasicLookAndFeel}) begin a
                  drag and drop operation whenever the user presses the mouse button over
                  a selection and then moves the mouse a few pixels. Setting this property to{@code true} can therefore have a subtle effect on how selections behave.
                  &lt;p&gt;
                  If a look and feel is used that ignores this property, you can still
                  begin a drag and drop operation by calling {@code exportAsDrag} on the
                  component&apos;s {@code TransferHandler}.                
                <param>
                    b whether or not to enable automatic drag handling                    
                </param>
                <exception>
                    HeadlessException if
                      &lt;code&gt;b&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; and
                      &lt;code&gt;GraphicsEnvironment.isHeadless()&lt;/code&gt;
                      returns &lt;code&gt;true&lt;/code&gt;                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <see>
                    #getDragEnabled                    
                </see>
                <see>
                    #setTransferHandler                    
                </see>
                <see>
                    TransferHandler                    
                </see>
                <since>
                    1.4                    
                </since>
                <beaninfo>
                    description: determines whether automatic drag handling is enabled
                      bound: false                    
                </beaninfo>
            </javadoc>
            <method name="setDragEnabled" type="void" line="694">
                <params>
                    <param name="b" type="boolean"/>
                </params>
                <scope line="695"/>
            </method>
            <javadoc line="701">
                Returns whether or not automatic drag handling is enabled.                
                <return>
                    the value of the {@code dragEnabled} property                    
                </return>
                <see>
                    #setDragEnabled                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getDragEnabled" type="boolean" line="708"/>
            <javadoc line="712">
                Sets the drop mode for this component. For backward compatibility,
                  the default for this property is &lt;code&gt;DropMode.USE_SELECTION&lt;/code&gt;.
                  Usage of &lt;code&gt;DropMode.INSERT&lt;/code&gt; is recommended, however,
                  for an improved user experience. It offers similar behavior of dropping
                  between text locations, but does so without affecting the actual text
                  selection and caret location.
                  &lt;p&gt;
                  &lt;code&gt;JTextComponents&lt;/code&gt; support the following drop modes:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;code&gt;DropMode.USE_SELECTION&lt;/code&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;code&gt;DropMode.INSERT&lt;/code&gt;&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;
                  The drop mode is only meaningful if this component has a
                  &lt;code&gt;TransferHandler&lt;/code&gt; that accepts drops.                
                <param>
                    dropMode the drop mode to use                    
                </param>
                <throws>
                    IllegalArgumentException if the drop mode is unsupported
                      or &lt;code&gt;null&lt;/code&gt;                    
                </throws>
                <see>
                    #getDropMode                    
                </see>
                <see>
                    #getDropLocation                    
                </see>
                <see>
                    #setTransferHandler                    
                </see>
                <see>
                    javax.swing.TransferHandler                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setDropMode" type="void" line="738">
                <params>
                    <param name="dropMode" type="DropMode"/>
                </params>
                <scope line="739"/>
            </method>
            <javadoc line="751">
                Returns the drop mode for this component.                
                <return>
                    the drop mode for this component                    
                </return>
                <see>
                    #setDropMode                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getDropMode" type="DropMode" line="758"/>
            <scope line="762">
                <anonymous_class line="764">
                    <method name="dropLocationForPoint" type="TransferHandler.DropLocation" line="767">
                        <params>
                            <param name="textComp" type="JTextComponent"/>
                            <param name="p" type="Point"/>
                        </params>
                    </method>
                    <method name="setDropLocation" type="Object" line="773">
                        <params>
                            <param name="textComp" type="JTextComponent"/>
                            <param name="location" type="TransferHandler.DropLocation"/>
                            <param name="state" type="Object"/>
                            <param name="forDrop" type="boolean"/>
                        </params>
                    </method>
                </anonymous_class>
            </scope>
            <javadoc line="780">
                Calculates a drop location in this component, representing where a
                  drop at the given point should insert data.
                  &lt;p&gt;
                  Note: This method is meant to override
                  &lt;code&gt;JComponent.dropLocationForPoint()&lt;/code&gt;, which is package-private
                  in javax.swing. &lt;code&gt;TransferHandler&lt;/code&gt; will detect text components
                  and call this method instead via reflection. It&apos;s name should therefore
                  not be changed.                
                <param>
                    p the point to calculate a drop location for                    
                </param>
                <return>
                    the drop location, or &lt;code&gt;null&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="dropLocationForPoint" type="DropLocation" line="793">
                <params>
                    <param name="p" type="Point"/>
                </params>
                <comment line="798">
                    viewToModel currently returns null for some HTML content
                     when the point is within the component&apos;s top inset                    
                </comment>
                <declaration name="bias" type="Position.Bias[]" line="794"/>
                <declaration name="index" type="int" line="795"/>
                <scope line="799"/>
            </method>
            <javadoc line="806">
                Called to set or clear the drop location during a DnD operation.
                  In some cases, the component may need to use it&apos;s internal selection
                  temporarily to indicate the drop location. To help facilitate this,
                  this method returns and accepts as a parameter a state object.
                  This state object can be used to store, and later restore, the selection
                  state. Whatever this method returns will be passed back to it in
                  future calls, as the state parameter. If it wants the DnD system to
                  continue storing the same state, it must pass it back every time.
                  Here&apos;s how this is used:
                  &lt;p&gt;
                  Let&apos;s say that on the first call to this method the component decides
                  to save some state (because it is about to use the selection to show
                  a drop index). It can return a state object to the caller encapsulating
                  any saved selection state. On a second call, let&apos;s say the drop location
                  is being changed to something else. The component doesn&apos;t need to
                  restore anything yet, so it simply passes back the same state object
                  to have the DnD system continue storing it. Finally, let&apos;s say this
                  method is messaged with &lt;code&gt;null&lt;/code&gt;. This means DnD
                  is finished with this component for now, meaning it should restore
                  state. At this point, it can use the state parameter to restore
                  said state, and of course return &lt;code&gt;null&lt;/code&gt; since there&apos;s
                  no longer anything to store.
                  &lt;p&gt;
                  Note: This method is meant to override
                  &lt;code&gt;JComponent.setDropLocation()&lt;/code&gt;, which is package-private
                  in javax.swing. &lt;code&gt;TransferHandler&lt;/code&gt; will detect text components
                  and call this method instead via reflection. It&apos;s name should therefore
                  not be changed.                
                <param>
                    location the drop location (as calculated by
                      &lt;code&gt;dropLocationForPoint&lt;/code&gt;) or &lt;code&gt;null&lt;/code&gt;
                      if there&apos;s no longer a valid drop location                    
                </param>
                <param>
                    state the state object saved earlier for this component,
                      or &lt;code&gt;null&lt;/code&gt;                    
                </param>
                <param>
                    forDrop whether or not the method is being called because an
                      actual drop occurred                    
                </param>
                <return>
                    any saved state for this component, or &lt;code&gt;null&lt;/code&gt; if none                    
                </return>
            </javadoc>
            <method name="setDropLocation" type="Object" line="847">
                <params>
                    <param name="location" type="TransferHandler.DropLocation"/>
                    <param name="state" type="Object"/>
                    <param name="forDrop" type="boolean"/>
                </params>
                <comment line="856">
                    This object represents the state saved earlier.
                         If the caret is a DefaultCaret it will be
                         an Object array containing, in order:
                             - the saved caret mark (Integer)
                             - the saved caret dot (Integer)
                             - the saved caret visibility (Boolean)
                             - the saved mark bias (Position.Bias)
                             - the saved dot bias (Position.Bias)
                         If the caret is not a DefaultCaret it will
                         be similar, but will not contain the dot
                         or mark bias.                    
                </comment>
                <declaration name="retVal" type="Object" line="849"/>
                <declaration name="textLocation" type="DropLocation" line="850"/>
                <scope line="852">
                    <scope line="853">
                        <scope line="854">
                            <declaration name="vals" type="Object[]" line="868"/>
                            <scope line="870">
                                <scope line="871"/>
                                <scope line="876"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="884">
                        <scope line="885">
                            <declaration name="visible" type="boolean" line="886"/>
                            <scope line="888">
                                <declaration name="dc" type="DefaultCaret" line="889"/>
                            </scope>
                            <scope line="896"/>
                        </scope>
                        <scope line="904"/>
                        <scope line="908"/>
                        <scope line="910"/>
                    </scope>
                </scope>
                <scope line="914">
                    <scope line="915">
                        <scope line="916"/>
                    </scope>
                    <scope line="919">
                        <scope line="920">
                            <declaration name="visible" type="boolean" line="921"/>
                        </scope>
                        <scope line="926"/>
                    </scope>
                </scope>
                <declaration name="old" type="DropLocation" line="932"/>
            </method>
            <javadoc line="939">
                Returns the location that this component should visually indicate
                  as the drop location during a DnD operation over the component,
                  or {@code null} if no location is to currently be shown.
                  &lt;p&gt;
                  This method is not meant for querying the drop location
                  from a {@code TransferHandler}, as the drop location is only
                  set after the {@code TransferHandler}&apos;s &lt;code&gt;canImport&lt;/code&gt;
                  has returned and has allowed for the location to be shown.
                  &lt;p&gt;
                  When this property changes, a property change event with
                  name &quot;dropLocation&quot; is fired by the component.                
                <return>
                    the drop location                    
                </return>
                <see>
                    #setDropMode                    
                </see>
                <see>
                    TransferHandler#canImport(TransferHandler.TransferSupport)                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getDropLocation" type="DropLocation" line="957"/>
            <javadoc line="962">
                Updates the &lt;code&gt;InputMap&lt;/code&gt;s in response to a
                  &lt;code&gt;Keymap&lt;/code&gt; change.                
                <param>
                    oldKm  the old &lt;code&gt;Keymap&lt;/code&gt;                    
                </param>
                <param>
                    newKm  the new &lt;code&gt;Keymap&lt;/code&gt;                    
                </param>
            </javadoc>
            <method name="updateInputMap" type="void" line="968">
                <params>
                    <param name="oldKm" type="Keymap"/>
                    <param name="newKm" type="Keymap"/>
                </params>
                <comment line="970">
                    Locate the current KeymapWrapper.                    
                </comment>
                <comment line="978">
                    Found it, tweak the InputMap that points to it, as well
                     as anything it points to.                    
                </comment>
                <comment line="999">
                    Couldn&apos;t find it.
                     Set the parent of WHEN_FOCUSED InputMap to be the new one.                    
                </comment>
                <comment line="1007">
                    Do the same thing with the ActionMap                    
                </comment>
                <comment line="1015">
                    Found it, tweak the Actionap that points to it, as well
                     as anything it points to.                    
                </comment>
                <comment line="1036">
                    Couldn&apos;t find it.
                     Set the parent of ActionMap to be the new one.                    
                </comment>
                <declaration name="km" type="InputMap" line="970"/>
                <declaration name="last" type="InputMap" line="971"/>
                <scope line="972"/>
                <scope line="976">
                    <scope line="979">
                        <scope line="980"/>
                        <scope line="983"/>
                    </scope>
                    <scope line="987">
                        <declaration name="newKM" type="InputMap" line="988"/>
                        <scope line="990"/>
                    </scope>
                </scope>
                <scope line="995">
                    <scope line="997">
                        <declaration name="newKM" type="InputMap" line="1000"/>
                    </scope>
                </scope>
                <declaration name="am" type="ActionMap" line="1007"/>
                <declaration name="lastAM" type="ActionMap" line="1008"/>
                <scope line="1009"/>
                <scope line="1013">
                    <scope line="1016">
                        <scope line="1017"/>
                        <scope line="1020"/>
                    </scope>
                    <scope line="1024">
                        <declaration name="newAM" type="ActionMap" line="1025"/>
                        <scope line="1027"/>
                    </scope>
                </scope>
                <scope line="1032">
                    <scope line="1034">
                        <declaration name="newAM" type="ActionMap" line="1037"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1044">
                Fetches the keymap currently active in this text
                  component.                
                <return>
                    the keymap                    
                </return>
            </javadoc>
            <method name="getKeymap" type="Keymap" line="1050"/>
            <javadoc line="1054">
                Adds a new keymap into the keymap hierarchy.  Keymap bindings
                  resolve from bottom up so an attribute specified in a child
                  will override an attribute specified in the parent.                
                <param>
                    nm   the name of the keymap (must be unique within the
                      collection of named keymaps in the document); the name may
                      be &lt;code&gt;null&lt;/code&gt; if the keymap is unnamed,
                      but the caller is responsible for managing the reference
                      returned as an unnamed keymap can&apos;t
                      be fetched by name                    
                </param>
                <param>
                    parent the parent keymap; this may be &lt;code&gt;null&lt;/code&gt; if
                      unspecified bindings need not be resolved in some other keymap                    
                </param>
                <return>
                    the keymap                    
                </return>
            </javadoc>
            <method name="addKeymap" type="Keymap" line="1069">
                <params>
                    <param name="nm" type="String"/>
                    <param name="parent" type="Keymap"/>
                </params>
                <comment line="1073">
                    add a named keymap, a class of bindings                    
                </comment>
                <declaration name="map" type="Keymap" line="1070"/>
                <scope line="1071"/>
            </method>
            <javadoc line="1078">
                Removes a named keymap previously added to the document.  Keymaps
                  with &lt;code&gt;null&lt;/code&gt; names may not be removed in this way.                
                <param>
                    nm  the name of the keymap to remove                    
                </param>
                <return>
                    the keymap that was removed                    
                </return>
            </javadoc>
            <method name="removeKeymap" type="Keymap" line="1085">
                <params>
                    <param name="nm" type="String"/>
                </params>
            </method>
            <javadoc line="1089">
                Fetches a named keymap previously added to the document.
                  This does not work with &lt;code&gt;null&lt;/code&gt;-named keymaps.                
                <param>
                    nm  the name of the keymap                    
                </param>
                <return>
                    the keymap                    
                </return>
            </javadoc>
            <method name="getKeymap" type="Keymap" line="1096">
                <params>
                    <param name="nm" type="String"/>
                </params>
            </method>
            <method name="getKeymapTable" type="HashMap<String,Keymap>" line="1100">
                <comment line="1109">
                    initialize default keymap                    
                </comment>
                <scope line="1101">
                    <declaration name="appContext" type="AppContext" line="1102"/>
                    <declaration name="keymapTable" type="HashMap&lt;String,Keymap&gt;" line="1103"/>
                    <scope line="1105">
                        <declaration name="binding" type="Keymap" line="1109"/>
                    </scope>
                </scope>
            </method>
            <class name="KeyBinding" line="1117">
                <comment line="2620">
                    DocumentListener methods                    
                </comment>
                <comment line="2734">
                    --- interface AccessibleText methods ------------------------                    
                </comment>
                <comment line="2736">
                    Many of these methods are just convenience methods; they
                     just call the equivalent on the parent                    
                </comment>
                <comment line="2937">
                    TIGER - 4170173                    
                </comment>
                <comment line="3042">
                    Returns the paragraph element for the specified index.                    
                </comment>
                <comment line="3065">
                    Returns a &lt;code&gt;Segment&lt;code&gt; containing the paragraph text
                     at &lt;code&gt;index&lt;code&gt;, or null if &lt;code&gt;index&lt;code&gt; isn&apos;t
                     valid.                    
                </comment>
                <comment line="3135">
                    begin AccessibleEditableText methods -----                    
                </comment>
                <comment line="3300">
                    ----- end AccessibleEditableText methods                    
                </comment>
                <comment line="3303">
                    ----- begin AccessibleExtendedText methods                    
                </comment>
                <comment line="3305">
                    Probably should replace the helper method getAtIndex() to return
                     instead an AccessibleTextSequence also for LINE &amp; ATTRIBUTE_RUN
                     and then make the AccessibleText methods get[At|After|Before]Point
                     call this new method instead and return only the string portion                    
                </comment>
                <comment line="3602">
                    getTextRange() not needed; defined in AccessibleEditableText                    
                </comment>
                <comment line="3725">
                    ----- end AccessibleExtendedText methods                    
                </comment>
                <comment line="3728">
                    --- interface AccessibleAction methods ------------------------                    
                </comment>
                <comment line="3785">
                    ----- end AccessibleAction methods                    
                </comment>
                <comment line="4426">
                    --- CaretEvent methods -----------------------                    
                </comment>
                <comment line="4436">
                    --- ChangeListener methods -------------------                    
                </comment>
                <comment line="4444">
                    --- FocusListener methods -----------------------------------                    
                </comment>
                <comment line="4453">
                    --- MouseListener methods -----------------------------------                    
                </comment>
                <comment line="4553">
                    --- InputMethodRequests methods ---                    
                </comment>
                <comment line="4690">
                    --- DocumentListener methods ---                    
                </comment>
                <comment line="4993">
                    Get the background color of the component                    
                </comment>
                <comment line="5012">
                    Draw caret in XOR mode.                    
                </comment>
                <comment line="5029">
                    If some area other than the composed text is clicked by mouse,
                     issue endComposition() to force commit the composed text.                    
                </comment>
                <javadoc line="1117">
                    Binding record for creating key bindings.
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      Serialized objects of this class will not be compatible with
                      future Swing releases. The current serialization support is
                      appropriate for short term storage or RMI between applications running
                      the same version of Swing.  As of 1.4, support for long term storage
                      of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                      has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                      Please see {@link java.beans.XMLEncoder}.                    
                </javadoc>
                <declaration name="key" type="KeyStroke" line="1131"/>
                <javadoc line="1131">
                    The key.                    
                </javadoc>
                <declaration name="actionName" type="String" line="1136"/>
                <javadoc line="1136">
                    The name of the action for the key.                    
                </javadoc>
                <javadoc line="1141">
                    Creates a new key binding.                    
                    <param>
                        key the key                        
                    </param>
                    <param>
                        actionName the name of the action for the key                        
                    </param>
                </javadoc>
                <method name="KeyBinding" type="constructor" line="1147">
                    <params>
                        <param name="key" type="KeyStroke"/>
                        <param name="actionName" type="String"/>
                    </params>
                </method>
            </class>
            <javadoc line="1153">
                &lt;p&gt;
                  Loads a keymap with a bunch of
                  bindings.  This can be used to take a static table of
                  definitions and load them into some keymap.  The following
                  example illustrates an example of binding some keys to
                  the cut, copy, and paste actions associated with a
                  JTextComponent.  A code fragment to accomplish
                  this might look as follows:
                  &lt;pre&gt;&lt;code&gt;
                  static final JTextComponent.KeyBinding[] defaultBindings = {
                  new JTextComponent.KeyBinding(
                  KeyStroke.getKeyStroke(KeyEvent.VK_C, InputEvent.CTRL_MASK),
                  DefaultEditorKit.copyAction),
                  new JTextComponent.KeyBinding(
                  KeyStroke.getKeyStroke(KeyEvent.VK_V, InputEvent.CTRL_MASK),
                  DefaultEditorKit.pasteAction),
                  new JTextComponent.KeyBinding(
                  KeyStroke.getKeyStroke(KeyEvent.VK_X, InputEvent.CTRL_MASK),
                  DefaultEditorKit.cutAction),
                  };
                  JTextComponent c = new JTextPane();
                  Keymap k = c.getKeymap();
                  JTextComponent.loadKeymap(k, defaultBindings, c.getActions());
                  &lt;/code&gt;&lt;/pre&gt;
                  The sets of bindings and actions may be empty but must be
                  non-&lt;code&gt;null&lt;/code&gt;.                
                <param>
                    map the keymap                    
                </param>
                <param>
                    bindings the bindings                    
                </param>
                <param>
                    actions the set of actions                    
                </param>
            </javadoc>
            <method name="loadKeymap" type="void" line="1188">
                <params>
                    <param name="map" type="Keymap"/>
                    <param name="bindings" type="KeyBinding[]"/>
                    <param name="actions" type="Action[]"/>
                </params>
                <declaration name="h" type="Hashtable&lt;String,Action&gt;" line="1189"/>
                <scope line="1190">
                    <declaration name="value" type="String" line="1191"/>
                </scope>
                <scope line="1194">
                    <declaration name="a" type="Action" line="1195"/>
                    <scope line="1196"/>
                </scope>
            </method>
            <javadoc line="1202">
                Returns true if &lt;code&gt;klass&lt;/code&gt; is NOT a JTextComponent and it or
                  one of its superclasses (stoping at JTextComponent) overrides
                  &lt;code&gt;processInputMethodEvent&lt;/code&gt;. It is assumed this will be
                  invoked from within a &lt;code&gt;doPrivileged&lt;/code&gt;, and it is also
                  assumed &lt;code&gt;klass&lt;/code&gt; extends &lt;code&gt;JTextComponent&lt;/code&gt;.                
            </javadoc>
            <method name="isProcessInputMethodEventOverridden" type="Boolean" line="1209">
                <params>
                    <param name="klass" type="Class<?>"/>
                </params>
                <comment line="1223">
                    If our superclass has overriden it, then by definition klass
                     overrides it.                    
                </comment>
                <comment line="1228">
                    klass&apos;s superclass didn&apos;t override it, check for an override in
                     klass.                    
                </comment>
                <scope line="1210"/>
                <declaration name="retValue" type="Boolean" line="1213"/>
                <scope line="1215"/>
                <declaration name="sOverriden" type="Boolean" line="1218"/>
                <scope line="1221"/>
                <scope line="1229">
                    <declaration name="classes" type="Class[]" line="1230"/>
                    <declaration name="m" type="Method" line="1233"/>
                </scope>
                <scope line="1236"/>
            </method>
            <javadoc line="1243">
                Fetches the current color used to render the
                  caret.                
                <return>
                    the color                    
                </return>
            </javadoc>
            <method name="getCaretColor" type="Color" line="1249"/>
            <javadoc line="1253">
                Sets the current color used to render the caret.
                  Setting to &lt;code&gt;null&lt;/code&gt; effectively restores the default color.
                  Setting the color results in a PropertyChange event (&quot;caretColor&quot;)
                  being fired.                
                <param>
                    c the color                    
                </param>
                <see>
                    #getCaretColor                    
                </see>
                <beaninfo>
                    description: the color used to render the caret
                      bound: true
                      preferred: true                    
                </beaninfo>
            </javadoc>
            <method name="setCaretColor" type="void" line="1266">
                <params>
                    <param name="c" type="Color"/>
                </params>
                <declaration name="old" type="Color" line="1267"/>
            </method>
            <javadoc line="1272">
                Fetches the current color used to render the
                  selection.                
                <return>
                    the color                    
                </return>
            </javadoc>
            <method name="getSelectionColor" type="Color" line="1278"/>
            <javadoc line="1282">
                Sets the current color used to render the selection.
                  Setting the color to &lt;code&gt;null&lt;/code&gt; is the same as setting
                  &lt;code&gt;Color.white&lt;/code&gt;.  Setting the color results in a
                  PropertyChange event (&quot;selectionColor&quot;).                
                <param>
                    c the color                    
                </param>
                <see>
                    #getSelectionColor                    
                </see>
                <beaninfo>
                    description: color used to render selection background
                      bound: true
                      preferred: true                    
                </beaninfo>
            </javadoc>
            <method name="setSelectionColor" type="void" line="1295">
                <params>
                    <param name="c" type="Color"/>
                </params>
                <declaration name="old" type="Color" line="1296"/>
            </method>
            <javadoc line="1301">
                Fetches the current color used to render the
                  selected text.                
                <return>
                    the color                    
                </return>
            </javadoc>
            <method name="getSelectedTextColor" type="Color" line="1307"/>
            <javadoc line="1311">
                Sets the current color used to render the selected text.
                  Setting the color to &lt;code&gt;null&lt;/code&gt; is the same as
                  &lt;code&gt;Color.black&lt;/code&gt;. Setting the color results in a
                  PropertyChange event (&quot;selectedTextColor&quot;) being fired.                
                <param>
                    c the color                    
                </param>
                <see>
                    #getSelectedTextColor                    
                </see>
                <beaninfo>
                    description: color used to render selected text
                      bound: true
                      preferred: true                    
                </beaninfo>
            </javadoc>
            <method name="setSelectedTextColor" type="void" line="1324">
                <params>
                    <param name="c" type="Color"/>
                </params>
                <declaration name="old" type="Color" line="1325"/>
            </method>
            <javadoc line="1330">
                Fetches the current color used to render the
                  disabled text.                
                <return>
                    the color                    
                </return>
            </javadoc>
            <method name="getDisabledTextColor" type="Color" line="1336"/>
            <javadoc line="1340">
                Sets the current color used to render the
                  disabled text.  Setting the color fires off a
                  PropertyChange event (&quot;disabledTextColor&quot;).                
                <param>
                    c the color                    
                </param>
                <see>
                    #getDisabledTextColor                    
                </see>
                <beaninfo>
                    description: color used to render disabled text
                      bound: true
                      preferred: true                    
                </beaninfo>
            </javadoc>
            <method name="setDisabledTextColor" type="void" line="1352">
                <params>
                    <param name="c" type="Color"/>
                </params>
                <declaration name="old" type="Color" line="1353"/>
            </method>
            <javadoc line="1358">
                Replaces the currently selected content with new content
                  represented by the given string.  If there is no selection
                  this amounts to an insert of the given text.  If there
                  is no replacement text this amounts to a removal of the
                  current selection.
                  &lt;p&gt;
                  This is the method that is used by the default implementation
                  of the action for inserting content that gets bound to the
                  keymap actions.                
                <param>
                    content  the content to replace the selection with                    
                </param>
            </javadoc>
            <method name="replaceSelection" type="void" line="1371">
                <params>
                    <param name="content" type="String"/>
                </params>
                <declaration name="doc" type="Document" line="1372"/>
                <scope line="1373">
                    <scope line="1374">
                        <declaration name="composedTextSaved" type="boolean" line="1375"/>
                        <declaration name="p0" type="int" line="1376"/>
                        <declaration name="p1" type="int" line="1377"/>
                        <scope line="1378"/>
                        <scope line="1381">
                            <scope line="1382"/>
                            <scope line="1385"/>
                        </scope>
                        <scope line="1389"/>
                    </scope>
                    <scope line="1392"/>
                </scope>
            </method>
            <javadoc line="1398">
                Fetches a portion of the text represented by the
                  component.  Returns an empty string if length is 0.                
                <param>
                    offs the offset &gt;= 0                    
                </param>
                <param>
                    len the length &gt;= 0                    
                </param>
                <return>
                    the text                    
                </return>
                <exception>
                    BadLocationException if the offset or length are invalid                    
                </exception>
            </javadoc>
            <method name="getText" type="String" line="1407">
                <params>
                    <param name="offs" type="int"/>
                    <param name="len" type="int"/>
                </params>
            </method>
            <javadoc line="1411">
                Converts the given location in the model to a place in
                  the view coordinate system.
                  The component must have a positive size for
                  this translation to be computed (i.e. layout cannot
                  be computed until the component has been sized).  The
                  component does not have to be visible or painted.                
                <param>
                    pos the position &gt;= 0                    
                </param>
                <return>
                    the coordinates as a rectangle, with (r.x, r.y) as the location
                      in the coordinate system, or null if the component does
                      not yet have a positive size.                    
                </return>
                <exception>
                    BadLocationException if the given position does not
                      represent a valid location in the associated document                    
                </exception>
                <see>
                    TextUI#modelToView                    
                </see>
            </javadoc>
            <method name="modelToView" type="Rectangle" line="1427">
                <params>
                    <param name="pos" type="int"/>
                </params>
            </method>
            <javadoc line="1431">
                Converts the given place in the view coordinate system
                  to the nearest representative location in the model.
                  The component must have a positive size for
                  this translation to be computed (i.e. layout cannot
                  be computed until the component has been sized).  The
                  component does not have to be visible or painted.                
                <param>
                    pt the location in the view to translate                    
                </param>
                <return>
                    the offset &gt;= 0 from the start of the document,
                      or -1 if the component does not yet have a positive
                      size.                    
                </return>
                <see>
                    TextUI#viewToModel                    
                </see>
            </javadoc>
            <method name="viewToModel" type="int" line="1445">
                <params>
                    <param name="pt" type="Point"/>
                </params>
            </method>
            <javadoc line="1449">
                Transfers the currently selected range in the associated
                  text model to the system clipboard, removing the contents
                  from the model.  The current selection is reset.  Does nothing
                  for &lt;code&gt;null&lt;/code&gt; selections.                
                <see>
                    java.awt.Toolkit#getSystemClipboard                    
                </see>
                <see>
                    java.awt.datatransfer.Clipboard                    
                </see>
            </javadoc>
            <method name="cut" type="void" line="1458">
                <scope line="1459"/>
            </method>
            <javadoc line="1464">
                Transfers the currently selected range in the associated
                  text model to the system clipboard, leaving the contents
                  in the text model.  The current selection remains intact.
                  Does nothing for &lt;code&gt;null&lt;/code&gt; selections.                
                <see>
                    java.awt.Toolkit#getSystemClipboard                    
                </see>
                <see>
                    java.awt.datatransfer.Clipboard                    
                </see>
            </javadoc>
            <method name="copy" type="void" line="1473"/>
            <javadoc line="1477">
                Transfers the contents of the system clipboard into the
                  associated text model.  If there is a selection in the
                  associated view, it is replaced with the contents of the
                  clipboard.  If there is no selection, the clipboard contents
                  are inserted in front of the current insert position in
                  the associated view.  If the clipboard is empty, does nothing.                
                <see>
                    #replaceSelection                    
                </see>
                <see>
                    java.awt.Toolkit#getSystemClipboard                    
                </see>
                <see>
                    java.awt.datatransfer.Clipboard                    
                </see>
            </javadoc>
            <method name="paste" type="void" line="1489">
                <scope line="1490"/>
            </method>
            <javadoc line="1495">
                This is a conveniance method that is only useful for
                  &lt;code&gt;cut&lt;/code&gt;, &lt;code&gt;copy&lt;/code&gt; and &lt;code&gt;paste&lt;/code&gt;.  If
                  an &lt;code&gt;Action&lt;/code&gt; with the name &lt;code&gt;name&lt;/code&gt; does not
                  exist in the &lt;code&gt;ActionMap&lt;/code&gt;, this will attemp to install a
                  &lt;code&gt;TransferHandler&lt;/code&gt; and then use &lt;code&gt;altAction&lt;/code&gt;.                
            </javadoc>
            <method name="invokeAction" type="void" line="1502">
                <params>
                    <param name="name" type="String"/>
                    <param name="altAction" type="Action"/>
                </params>
                <declaration name="map" type="ActionMap" line="1503"/>
                <declaration name="action" type="Action" line="1504"/>
                <scope line="1506"/>
                <scope line="1509"/>
            </method>
            <javadoc line="1520">
                If the current &lt;code&gt;TransferHandler&lt;/code&gt; is null, this will
                  install a new one.                
            </javadoc>
            <method name="installDefaultTransferHandlerIfNecessary" type="void" line="1524">
                <scope line="1525">
                    <scope line="1526"/>
                </scope>
            </method>
            <javadoc line="1533">
                Moves the caret to a new position, leaving behind a mark
                  defined by the last time &lt;code&gt;setCaretPosition&lt;/code&gt; was
                  called.  This forms a selection.
                  If the document is &lt;code&gt;null&lt;/code&gt;, does nothing. The position
                  must be between 0 and the length of the component&apos;s text or else
                  an exception is thrown.                
                <param>
                    pos the position                    
                </param>
                <exception>
                    IllegalArgumentException if the value supplied
                      for &lt;code&gt;position&lt;/code&gt; is less than zero or greater
                      than the component&apos;s text length                    
                </exception>
                <see>
                    #setCaretPosition                    
                </see>
            </javadoc>
            <method name="moveCaretPosition" type="void" line="1547">
                <params>
                    <param name="pos" type="int"/>
                </params>
                <declaration name="doc" type="Document" line="1548"/>
                <scope line="1549">
                    <scope line="1550"/>
                </scope>
            </method>
            <declaration name="FOCUS_ACCELERATOR_KEY" type="String" line="1557"/>
            <javadoc line="1557">
                The bound property name for the focus accelerator.                
            </javadoc>
            <javadoc line="1562">
                Sets the key accelerator that will cause the receiving text
                  component to get the focus.  The accelerator will be the
                  key combination of the &lt;em&gt;alt&lt;/em&gt; key and the character
                  given (converted to upper case).  By default, there is no focus
                  accelerator key.  Any previous key accelerator setting will be
                  superseded.  A &apos;\0&apos; key setting will be registered, and has the
                  effect of turning off the focus accelerator.  When the new key
                  is set, a PropertyChange event (FOCUS_ACCELERATOR_KEY) will be fired.                
                <param>
                    aKey the key                    
                </param>
                <see>
                    #getFocusAccelerator                    
                </see>
                <beaninfo>
                    description: accelerator character used to grab focus
                      bound: true                    
                </beaninfo>
            </javadoc>
            <method name="setFocusAccelerator" type="void" line="1578">
                <params>
                    <param name="aKey" type="char"/>
                </params>
                <comment line="1583">
                    Fix for 4341002: value of FOCUS_ACCELERATOR_KEY is wrong.
                     So we fire both FOCUS_ACCELERATOR_KEY, for compatibility,
                     and the correct event here.                    
                </comment>
                <declaration name="old" type="char" line="1580"/>
            </method>
            <javadoc line="1589">
                Returns the key accelerator that will cause the receiving
                  text component to get the focus.  Return &apos;\0&apos; if no focus
                  accelerator has been set.                
                <return>
                    the key                    
                </return>
            </javadoc>
            <method name="getFocusAccelerator" type="char" line="1596"/>
            <javadoc line="1600">
                Initializes from a stream.  This creates a
                  model of the type appropriate for the component
                  and initializes the model from the stream.
                  By default this will load the model as plain
                  text.  Previous contents of the model are discarded.                
                <param>
                    in the stream to read from                    
                </param>
                <param>
                    desc an object describing the stream; this
                      might be a string, a File, a URL, etc.  Some kinds
                      of documents (such as html for example) might be
                      able to make use of this information; if non-&lt;code&gt;null&lt;/code&gt;,
                      it is added as a property of the document                    
                </param>
                <exception>
                    IOException as thrown by the stream being
                      used to initialize                    
                </exception>
                <see>
                    EditorKit#createDefaultDocument                    
                </see>
                <see>
                    #setDocument                    
                </see>
                <see>
                    PlainDocument                    
                </see>
            </javadoc>
            <method name="read" type="void" line="1619">
                <params>
                    <param name="in" type="Reader"/>
                    <param name="desc" type="Object"/>
                </params>
                <declaration name="kit" type="EditorKit" line="1620"/>
                <declaration name="doc" type="Document" line="1621"/>
                <scope line="1622"/>
                <scope line="1625"/>
                <scope line="1628"/>
            </method>
            <javadoc line="1633">
                Stores the contents of the model into the given
                  stream.  By default this will store the model as plain
                  text.                
                <param>
                    out the output stream                    
                </param>
                <exception>
                    IOException on any I/O error                    
                </exception>
            </javadoc>
            <method name="write" type="void" line="1641">
                <params>
                    <param name="out" type="Writer"/>
                </params>
                <declaration name="doc" type="Document" line="1642"/>
                <scope line="1643"/>
                <scope line="1645"/>
            </method>
            <method name="removeNotify" type="void" line="1650">
                <scope line="1652"/>
            </method>
            <javadoc line="1659">
                Sets the position of the text insertion caret for the
                  &lt;code&gt;TextComponent&lt;/code&gt;.  Note that the caret tracks change,
                  so this may move if the underlying text of the component is changed.
                  If the document is &lt;code&gt;null&lt;/code&gt;, does nothing. The position
                  must be between 0 and the length of the component&apos;s text or else
                  an exception is thrown.                
                <param>
                    position the position                    
                </param>
                <exception>
                    IllegalArgumentException if the value supplied
                      for &lt;code&gt;position&lt;/code&gt; is less than zero or greater
                      than the component&apos;s text length                    
                </exception>
                <beaninfo>
                    description: the caret position                    
                </beaninfo>
            </javadoc>
            <method name="setCaretPosition" type="void" line="1674">
                <params>
                    <param name="position" type="int"/>
                </params>
                <declaration name="doc" type="Document" line="1675"/>
                <scope line="1676">
                    <scope line="1677"/>
                </scope>
            </method>
            <javadoc line="1684">
                Returns the position of the text insertion caret for the
                  text component.                
                <return>
                    the position of the text insertion caret for the
                      text component &gt;= 0                    
                </return>
            </javadoc>
            <method name="getCaretPosition" type="int" line="1692"/>
            <javadoc line="1696">
                Sets the text of this &lt;code&gt;TextComponent&lt;/code&gt;
                  to the specified text.  If the text is &lt;code&gt;null&lt;/code&gt;
                  or empty, has the effect of simply deleting the old text.
                  When text has been inserted, the resulting caret location
                  is determined by the implementation of the caret class.
                  &lt;p&gt;
                  Note that text is not a bound property, so no &lt;code&gt;PropertyChangeEvent
                  &lt;/code&gt; is fired when it changes. To listen for changes to the text,
                  use &lt;code&gt;DocumentListener&lt;/code&gt;.                
                <param>
                    t the new text to be set                    
                </param>
                <see>
                    #getText                    
                </see>
                <see>
                    DefaultCaret                    
                </see>
                <beaninfo>
                    description: the text of this component                    
                </beaninfo>
            </javadoc>
            <method name="setText" type="void" line="1714">
                <params>
                    <param name="t" type="String"/>
                </params>
                <scope line="1715">
                    <declaration name="doc" type="Document" line="1716"/>
                    <scope line="1717"/>
                    <scope line="1720"/>
                </scope>
                <scope line="1724"/>
            </method>
            <javadoc line="1729">
                Returns the text contained in this &lt;code&gt;TextComponent&lt;/code&gt;.
                  If the underlying document is &lt;code&gt;null&lt;/code&gt;,
                  will give a &lt;code&gt;NullPointerException&lt;/code&gt;.
                  Note that text is not a bound property, so no &lt;code&gt;PropertyChangeEvent
                  &lt;/code&gt; is fired when it changes. To listen for changes to the text,
                  use &lt;code&gt;DocumentListener&lt;/code&gt;.                
                <return>
                    the text                    
                </return>
                <exception>
                    NullPointerException if the document is &lt;code&gt;null&lt;/code&gt;                    
                </exception>
                <see>
                    #setText                    
                </see>
            </javadoc>
            <method name="getText" type="String" line="1742">
                <declaration name="doc" type="Document" line="1743"/>
                <declaration name="txt" type="String" line="1744"/>
                <scope line="1745"/>
                <scope line="1747"/>
            </method>
            <javadoc line="1753">
                Returns the selected text contained in this
                  &lt;code&gt;TextComponent&lt;/code&gt;.  If the selection is
                  &lt;code&gt;null&lt;/code&gt; or the document empty, returns &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    the text                    
                </return>
                <exception>
                    IllegalArgumentException if the selection doesn&apos;t
                      have a valid mapping into the document for some reason                    
                </exception>
                <see>
                    #setText                    
                </see>
            </javadoc>
            <method name="getSelectedText" type="String" line="1763">
                <declaration name="txt" type="String" line="1764"/>
                <declaration name="p0" type="int" line="1765"/>
                <declaration name="p1" type="int" line="1766"/>
                <scope line="1767">
                    <scope line="1768">
                        <declaration name="doc" type="Document" line="1769"/>
                    </scope>
                    <scope line="1771"/>
                </scope>
            </method>
            <javadoc line="1778">
                Returns the boolean indicating whether this
                  &lt;code&gt;TextComponent&lt;/code&gt; is editable or not.                
                <return>
                    the boolean value                    
                </return>
                <see>
                    #setEditable                    
                </see>
            </javadoc>
            <method name="isEditable" type="boolean" line="1785"/>
            <javadoc line="1789">
                Sets the specified boolean to indicate whether or not this
                  &lt;code&gt;TextComponent&lt;/code&gt; should be editable.
                  A PropertyChange event (&quot;editable&quot;) is fired when the
                  state is changed.                
                <param>
                    b the boolean to be set                    
                </param>
                <see>
                    #isEditable                    
                </see>
                <beaninfo>
                    description: specifies if the text can be edited
                      bound: true                    
                </beaninfo>
            </javadoc>
            <method name="setEditable" type="void" line="1801">
                <params>
                    <param name="b" type="boolean"/>
                </params>
                <scope line="1802">
                    <declaration name="oldVal" type="boolean" line="1803"/>
                </scope>
            </method>
            <javadoc line="1811">
                Returns the selected text&apos;s start position.  Return 0 for an
                  empty document, or the value of dot if no selection.                
                <return>
                    the start position &gt;= 0                    
                </return>
            </javadoc>
            <method name="getSelectionStart" type="int" line="1818">
                <declaration name="start" type="int" line="1819"/>
            </method>
            <javadoc line="1823">
                Sets the selection start to the specified position.  The new
                  starting point is constrained to be before or at the current
                  selection end.
                  &lt;p&gt;
                  This is available for backward compatibility to code
                  that called this method on &lt;code&gt;java.awt.TextComponent&lt;/code&gt;.
                  This is implemented to forward to the &lt;code&gt;Caret&lt;/code&gt;
                  implementation which is where the actual selection is maintained.                
                <param>
                    selectionStart the start position of the text &gt;= 0                    
                </param>
                <beaninfo>
                    description: starting location of the selection.                    
                </beaninfo>
            </javadoc>
            <method name="setSelectionStart" type="void" line="1837">
                <params>
                    <param name="selectionStart" type="int"/>
                </params>
                <comment line="1839">
                    Route through select method to enforce consistent policy
                     between selectionStart and selectionEnd.                    
                </comment>
            </method>
            <javadoc line="1844">
                Returns the selected text&apos;s end position.  Return 0 if the document
                  is empty, or the value of dot if there is no selection.                
                <return>
                    the end position &gt;= 0                    
                </return>
            </javadoc>
            <method name="getSelectionEnd" type="int" line="1851">
                <declaration name="end" type="int" line="1852"/>
            </method>
            <javadoc line="1856">
                Sets the selection end to the specified position.  The new
                  end point is constrained to be at or after the current
                  selection start.
                  &lt;p&gt;
                  This is available for backward compatibility to code
                  that called this method on &lt;code&gt;java.awt.TextComponent&lt;/code&gt;.
                  This is implemented to forward to the &lt;code&gt;Caret&lt;/code&gt;
                  implementation which is where the actual selection is maintained.                
                <param>
                    selectionEnd the end position of the text &gt;= 0                    
                </param>
                <beaninfo>
                    description: ending location of the selection.                    
                </beaninfo>
            </javadoc>
            <method name="setSelectionEnd" type="void" line="1870">
                <params>
                    <param name="selectionEnd" type="int"/>
                </params>
                <comment line="1872">
                    Route through select method to enforce consistent policy
                     between selectionStart and selectionEnd.                    
                </comment>
            </method>
            <javadoc line="1877">
                Selects the text between the specified start and end positions.
                  &lt;p&gt;
                  This method sets the start and end positions of the
                  selected text, enforcing the restriction that the start position
                  must be greater than or equal to zero.  The end position must be
                  greater than or equal to the start position, and less than or
                  equal to the length of the text component&apos;s text.
                  &lt;p&gt;
                  If the caller supplies values that are inconsistent or out of
                  bounds, the method enforces these constraints silently, and
                  without failure. Specifically, if the start position or end
                  position is greater than the length of the text, it is reset to
                  equal the text length. If the start position is less than zero,
                  it is reset to zero, and if the end position is less than the
                  start position, it is reset to the start position.
                  &lt;p&gt;
                  This call is provided for backward compatibility.
                  It is routed to a call to &lt;code&gt;setCaretPosition&lt;/code&gt;
                  followed by a call to &lt;code&gt;moveCaretPosition&lt;/code&gt;.
                  The preferred way to manage selection is by calling
                  those methods directly.                
                <param>
                    selectionStart the start position of the text                    
                </param>
                <param>
                    selectionEnd the end position of the text                    
                </param>
                <see>
                    #setCaretPosition                    
                </see>
                <see>
                    #moveCaretPosition                    
                </see>
            </javadoc>
            <method name="select" type="void" line="1905">
                <params>
                    <param name="selectionStart" type="int"/>
                    <param name="selectionEnd" type="int"/>
                </params>
                <comment line="1907">
                    argument adjustment done by java.awt.TextComponent                    
                </comment>
                <declaration name="docLength" type="int" line="1907"/>
                <scope line="1909"/>
                <scope line="1912"/>
                <scope line="1915"/>
                <scope line="1918"/>
            </method>
            <javadoc line="1926">
                Selects all the text in the &lt;code&gt;TextComponent&lt;/code&gt;.
                  Does nothing on a &lt;code&gt;null&lt;/code&gt; or empty document.                
            </javadoc>
            <method name="selectAll" type="void" line="1930">
                <declaration name="doc" type="Document" line="1931"/>
                <scope line="1932"/>
            </method>
            <javadoc line="1940">
                Returns the string to be used as the tooltip for &lt;code&gt;event&lt;/code&gt;.
                  This will return one of:
                  &lt;ol&gt;
                  &lt;li&gt;If &lt;code&gt;setToolTipText&lt;/code&gt; has been invoked with a
                  non-&lt;code&gt;null&lt;/code&gt;
                  value, it will be returned, otherwise
                  &lt;li&gt;The value from invoking &lt;code&gt;getToolTipText&lt;/code&gt; on
                  the UI will be returned.
                  &lt;/ol&gt;
                  By default &lt;code&gt;JTextComponent&lt;/code&gt; does not register
                  itself with the &lt;code&gt;ToolTipManager&lt;/code&gt;.
                  This means that tooltips will NOT be shown from the
                  &lt;code&gt;TextUI&lt;/code&gt; unless &lt;code&gt;registerComponent&lt;/code&gt; has
                  been invoked on the &lt;code&gt;ToolTipManager&lt;/code&gt;.                
                <param>
                    event the event in question                    
                </param>
                <return>
                    the string to be used as the tooltip for &lt;code&gt;event&lt;/code&gt;                    
                </return>
                <see>
                    javax.swing.JComponent#setToolTipText                    
                </see>
                <see>
                    javax.swing.plaf.TextUI#getToolTipText                    
                </see>
                <see>
                    javax.swing.ToolTipManager#registerComponent                    
                </see>
            </javadoc>
            <method name="getToolTipText" type="String" line="1962">
                <params>
                    <param name="event" type="MouseEvent"/>
                </params>
                <declaration name="retValue" type="String" line="1963"/>
                <scope line="1965">
                    <declaration name="ui" type="TextUI" line="1966"/>
                    <scope line="1967"/>
                </scope>
            </method>
            <javadoc line="1977">
                Returns the preferred size of the viewport for a view component.
                  This is implemented to do the default behavior of returning
                  the preferred size of the component.                
                <return>
                    the &lt;code&gt;preferredSize&lt;/code&gt; of a &lt;code&gt;JViewport&lt;/code&gt;
                      whose view is this &lt;code&gt;Scrollable&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="getPreferredScrollableViewportSize" type="Dimension" line="1985"/>
            <javadoc line="1990">
                Components that display logical rows or columns should compute
                  the scroll increment that will completely expose one new row
                  or column, depending on the value of orientation.  Ideally,
                  components should handle a partially exposed row or column by
                  returning the distance required to completely expose the item.
                  &lt;p&gt;
                  The default implementation of this is to simply return 10% of
                  the visible area.  Subclasses are likely to be able to provide
                  a much more reasonable value.                
                <param>
                    visibleRect the view area visible within the viewport                    
                </param>
                <param>
                    orientation either &lt;code&gt;SwingConstants.VERTICAL&lt;/code&gt; or
                      &lt;code&gt;SwingConstants.HORIZONTAL&lt;/code&gt;                    
                </param>
                <param>
                    direction less than zero to scroll up/left, greater than
                      zero for down/right                    
                </param>
                <return>
                    the &quot;unit&quot; increment for scrolling in the specified direction                    
                </return>
                <exception>
                    IllegalArgumentException for an invalid orientation                    
                </exception>
                <see>
                    JScrollBar#setUnitIncrement                    
                </see>
            </javadoc>
            <method name="getScrollableUnitIncrement" type="int" line="2010">
                <params>
                    <param name="visibleRect" type="Rectangle"/>
                    <param name="orientation" type="int"/>
                    <param name="direction" type="int"/>
                </params>
            </method>
            <javadoc line="2022">
                Components that display logical rows or columns should compute
                  the scroll increment that will completely expose one block
                  of rows or columns, depending on the value of orientation.
                  &lt;p&gt;
                  The default implementation of this is to simply return the visible
                  area.  Subclasses will likely be able to provide a much more
                  reasonable value.                
                <param>
                    visibleRect the view area visible within the viewport                    
                </param>
                <param>
                    orientation either &lt;code&gt;SwingConstants.VERTICAL&lt;/code&gt; or
                      &lt;code&gt;SwingConstants.HORIZONTAL&lt;/code&gt;                    
                </param>
                <param>
                    direction less than zero to scroll up/left, greater than zero
                      for down/right                    
                </param>
                <return>
                    the &quot;block&quot; increment for scrolling in the specified direction                    
                </return>
                <exception>
                    IllegalArgumentException for an invalid orientation                    
                </exception>
                <see>
                    JScrollBar#setBlockIncrement                    
                </see>
            </javadoc>
            <method name="getScrollableBlockIncrement" type="int" line="2040">
                <params>
                    <param name="visibleRect" type="Rectangle"/>
                    <param name="orientation" type="int"/>
                    <param name="direction" type="int"/>
                </params>
            </method>
            <javadoc line="2052">
                Returns true if a viewport should always force the width of this
                  &lt;code&gt;Scrollable&lt;/code&gt; to match the width of the viewport.
                  For example a normal text view that supported line wrapping
                  would return true here, since it would be undesirable for
                  wrapped lines to disappear beyond the right
                  edge of the viewport.  Note that returning true for a
                  &lt;code&gt;Scrollable&lt;/code&gt; whose ancestor is a &lt;code&gt;JScrollPane&lt;/code&gt;
                  effectively disables horizontal scrolling.
                  &lt;p&gt;
                  Scrolling containers, like &lt;code&gt;JViewport&lt;/code&gt;,
                  will use this method each time they are validated.                
                <return>
                    true if a viewport should force the &lt;code&gt;Scrollable&lt;/code&gt;s
                      width to match its own                    
                </return>
            </javadoc>
            <method name="getScrollableTracksViewportWidth" type="boolean" line="2068">
                <declaration name="parent" type="Container" line="2069"/>
                <scope line="2070"/>
            </method>
            <javadoc line="2076">
                Returns true if a viewport should always force the height of this
                  &lt;code&gt;Scrollable&lt;/code&gt; to match the height of the viewport.
                  For example a columnar text view that flowed text in left to
                  right columns could effectively disable vertical scrolling by
                  returning true here.
                  &lt;p&gt;
                  Scrolling containers, like &lt;code&gt;JViewport&lt;/code&gt;,
                  will use this method each time they are validated.                
                <return>
                    true if a viewport should force the Scrollables height
                      to match its own                    
                </return>
            </javadoc>
            <method name="getScrollableTracksViewportHeight" type="boolean" line="2089">
                <declaration name="parent" type="Container" line="2090"/>
                <scope line="2091"/>
            </method>
            <javadoc line="2102">
                A convenience print method that displays a print dialog, and then
                  prints this {@code JTextComponent} in &lt;i&gt;interactive&lt;/i&gt; mode with no
                  header or footer text. Note: this method
                  blocks until printing is done.
                  &lt;p&gt;
                  Note: In &lt;i&gt;headless&lt;/i&gt; mode, no dialogs will be shown.
                  &lt;p&gt; This method calls the full featured{@link #print(MessageFormat,MessageFormat,boolean,PrintService,PrintRequestAttributeSet,boolean)print} method to perform printing.                
                <return>
                    {@code true}, unless printing is canceled by the user                    
                </return>
                <throws>
                    PrinterException if an error in the print system causes the job
                      to be aborted                    
                </throws>
                <throws>
                    SecurityException if this thread is not allowed to
                      initiate a print job request                    
                </throws>
                <see>
                    #print(MessageFormat,MessageFormat,boolean,PrintService,PrintRequestAttributeSet,boolean)                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="print" type="boolean" line="2124"/>
            <javadoc line="2128">
                A convenience print method that displays a print dialog, and then
                  prints this {@code JTextComponent} in &lt;i&gt;interactive&lt;/i&gt; mode with
                  the specified header and footer text. Note: this method
                  blocks until printing is done.
                  &lt;p&gt;
                  Note: In &lt;i&gt;headless&lt;/i&gt; mode, no dialogs will be shown.
                  &lt;p&gt; This method calls the full featured{@link #print(MessageFormat,MessageFormat,boolean,PrintService,PrintRequestAttributeSet,boolean)print} method to perform printing.                
                <param>
                    headerFormat the text, in {@code MessageFormat}, to be
                      used as the header, or {@code null} for no header                    
                </param>
                <param>
                    footerFormat the text, in {@code MessageFormat}, to be
                      used as the footer, or {@code null} for no footer                    
                </param>
                <return>
                    {@code true}, unless printing is canceled by the user                    
                </return>
                <throws>
                    PrinterException if an error in the print system causes the job
                      to be aborted                    
                </throws>
                <throws>
                    SecurityException if this thread is not allowed to
                      initiate a print job request                    
                </throws>
                <see>
                    #print(MessageFormat,MessageFormat,boolean,PrintService,PrintRequestAttributeSet,boolean)                    
                </see>
                <see>
                    java.text.MessageFormat                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="print" type="boolean" line="2154">
                <params>
                    <param name="headerFormat" type="MessageFormat"/>
                    <param name="footerFormat" type="MessageFormat"/>
                </params>
            </method>
            <javadoc line="2158">
                Prints the content of this {@code JTextComponent}. Note: this method
                  blocks until printing is done.
                  &lt;p&gt;
                  Page header and footer text can be added to the output by providing{@code MessageFormat} arguments. The printing code requests{@code Strings} from the formats, providing a single item which may be
                  included in the formatted string: an {@code Integer} representing the
                  current page number.
                  &lt;p&gt;{@code showPrintDialog boolean} parameter allows you to specify whether
                  a print dialog is displayed to the user. When it is, the user
                  may use the dialog to change printing attributes or even cancel the
                  print.
                  &lt;p&gt;{@code service} allows you to provide the initial{@code PrintService} for the print dialog, or to specify{@code PrintService} to print to when the dialog is not shown.
                  &lt;p&gt;{@code attributes} can be used to provide the
                  initial values for the print dialog, or to supply any needed
                  attributes when the dialog is not shown. {@code attributes} can
                  be used to control how the job will print, for example
                  &lt;i&gt;duplex&lt;/i&gt; or &lt;i&gt;single-sided&lt;/i&gt;.
                  &lt;p&gt;{@code interactive boolean} parameter allows you to specify
                  whether to perform printing in &lt;i&gt;interactive&lt;/i&gt;
                  mode. If {@code true}, a progress dialog, with an abort option,
                  is displayed for the duration of printing.  This dialog is
                  &lt;i&gt;modal&lt;/i&gt; when {@code print} is invoked on the &lt;i&gt;Event Dispatch
                  Thread&lt;/i&gt; and &lt;i&gt;non-modal&lt;/i&gt; otherwise. &lt;b&gt;Warning&lt;/b&gt;:
                  calling this method on the &lt;i&gt;Event Dispatch Thread&lt;/i&gt; with {@codeinteractive false} blocks &lt;i&gt;all&lt;/i&gt; events, including repaints, from
                  being processed until printing is complete. It is only
                  recommended when printing from an application with no
                  visible GUI.
                  &lt;p&gt;
                  Note: In &lt;i&gt;headless&lt;/i&gt; mode, {@code showPrintDialog} and{@code interactive} parameters are ignored and no dialogs are
                  shown.
                  &lt;p&gt;
                  This method ensures the {@code document} is not mutated during printing.
                  To indicate it visually, {@code setEnabled(false)} is set for the
                  duration of printing.
                  &lt;p&gt;
                  This method uses {@link #getPrintable} to render document content.
                  &lt;p&gt;
                  This method is thread-safe, although most Swing methods are not. Please
                  see &lt;A
                  HREF=&quot;http://java.sun.com/docs/books/tutorial/uiswing/misc/threads.html&quot;&gt;
                  How to Use Threads&lt;/A&gt; for more information.
                  &lt;p&gt;
                  &lt;b&gt;Sample Usage&lt;/b&gt;. This code snippet shows a cross-platform print
                  dialog and then prints the {@code JTextComponent} in &lt;i&gt;interactive&lt;/i&gt; mode
                  unless the user cancels the dialog:
                  &lt;pre&gt;
                  textComponent.print(new MessageFormat(&amp;quot;My text component header&amp;quot;),
                  new MessageFormat(&amp;quot;Footer. Page - {0}&amp;quot;), true, null, null, true);
                  &lt;/pre&gt;
                  &lt;p&gt;
                  Executing this code off the &lt;i&gt;Event Dispatch Thread&lt;/i&gt;
                  performs printing on the &lt;i&gt;background&lt;/i&gt;.
                  The following pattern might be used for &lt;i&gt;background&lt;/i&gt;
                  printing:
                  &lt;pre&gt;
                  FutureTask&amp;lt;Boolean&amp;gt; future =
                  new FutureTask&amp;lt;Boolean&amp;gt;(
                  new Callable&amp;lt;Boolean&amp;gt;() {
                  public Boolean call() {
                  return textComponent.print(.....);
                  }
                  });
                  executor.execute(future);
                  &lt;/pre&gt;                
                <param>
                    headerFormat the text, in {@code MessageFormat}, to be
                      used as the header, or {@code null} for no header                    
                </param>
                <param>
                    footerFormat the text, in {@code MessageFormat}, to be
                      used as the footer, or {@code null} for no footer                    
                </param>
                <param>
                    showPrintDialog {@code true} to display a print dialog,{@code false} otherwise                    
                </param>
                <param>
                    service initial {@code PrintService}, or {@code null} for the
                      default                    
                </param>
                <param>
                    attributes the job attributes to be applied to the print job, or{@code null} for none                    
                </param>
                <param>
                    interactive whether to print in an interactive mode                    
                </param>
                <return>
                    {@code true}, unless printing is canceled by the user                    
                </return>
                <throws>
                    PrinterException if an error in the print system causes the job
                      to be aborted                    
                </throws>
                <throws>
                    SecurityException if this thread is not allowed to
                      initiate a print job request                    
                </throws>
                <see>
                    #getPrintable                    
                </see>
                <see>
                    java.text.MessageFormat                    
                </see>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <see>
                    java.util.concurrent.FutureTask                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="print" type="boolean" line="2274">
                <params>
                    <param name="headerFormat" type="MessageFormat"/>
                    <param name="footerFormat" type="MessageFormat"/>
                    <param name="showPrintDialog" type="boolean"/>
                    <param name="service" type="PrintService"/>
                    <param name="attributes" type="PrintRequestAttributeSet"/>
                    <param name="interactive" type="boolean"/>
                </params>
                <comment line="2308">
                    there are three cases for printing:
                     1. print non interactively (! interactive || isHeadless)
                     2. print interactively off EDT
                     3. print interactively on EDT
                    
                     1 and 2 prints on the current thread (3 prints on another thread)
                     2 and 3 deal with PrintingStatusDialog                    
                </comment>
                <comment line="2337">
                    disable component                    
                </comment>
                <comment line="2372">
                    enable component                    
                </comment>
                <comment line="2413">
                    the printing is done successfully or otherwise.
                    dialog is hidden if needed.                    
                </comment>
                <declaration name="job" type="PrinterJob" line="2276"/>
                <declaration name="printable" type="Printable" line="2277"/>
                <declaration name="printingStatus" type="PrintingStatus" line="2278"/>
                <declaration name="isHeadless" type="boolean" line="2279"/>
                <declaration name="isEventDispatchThread" type="boolean" line="2280"/>
                <declaration name="textPrintable" type="Printable" line="2282"/>
                <scope line="2283"/>
                <scope line="2288"/>
                <scope line="2293"/>
                <declaration name="attr" type="PrintRequestAttributeSet" line="2299"/>
                <scope line="2303"/>
                <anonymous_class line="2317">
                    <method name="call" type="Object" line="2318">
                        <scope line="2319"/>
                        <scope line="2321">
                            <scope line="2322"/>
                        </scope>
                    </method>
                </anonymous_class>
                <declaration name="doPrint" type="Callable&lt;Object&gt;" line="2316"/>
                <declaration name="futurePrinting" type="FutureTask&lt;Object&gt;" line="2330"/>
                <anonymous_class line="2334">
                    <method name="run" type="void" line="2335">
                        <comment line="2337">
                            disable component                            
                        </comment>
                        <comment line="2372">
                            enable component                            
                        </comment>
                        <declaration name="wasEnabled" type="boolean" line="2337"/>
                        <scope line="2338">
                            <scope line="2339"/>
                        </scope>
                        <scope line="2343">
                            <scope line="2344">
                                <anonymous_class line="2346">
                                    <method name="call" type="Boolean" line="2347">
                                        <declaration name="rv" type="boolean" line="2348"/>
                                        <scope line="2349"/>
                                    </method>
                                </anonymous_class>
                            </scope>
                            <scope line="2355"/>
                            <scope line="2357">
                                <declaration name="cause" type="Throwable" line="2358"/>
                                <scope line="2359"/>
                                <scope line="2362"/>
                            </scope>
                        </scope>
                        <scope line="2372">
                            <scope line="2373"/>
                            <scope line="2375">
                                <scope line="2376">
                                    <anonymous_class line="2378">
                                        <method name="run" type="void" line="2379"/>
                                    </anonymous_class>
                                </scope>
                                <scope line="2383"/>
                                <scope line="2385">
                                    <declaration name="cause" type="Throwable" line="2386"/>
                                    <scope line="2387"/>
                                    <scope line="2390"/>
                                </scope>
                            </scope>
                        </scope>
                    </method>
                </anonymous_class>
                <declaration name="runnablePrinting" type="Runnable" line="2333"/>
                <scope line="2400"/>
                <scope line="2402">
                    <scope line="2403"/>
                    <scope line="2406"/>
                </scope>
                <scope line="2414"/>
                <scope line="2416"/>
                <scope line="2418">
                    <declaration name="cause" type="Throwable" line="2419"/>
                    <scope line="2420">
                        <scope line="2422"/>
                        <scope line="2424"/>
                    </scope>
                    <scope line="2427"/>
                    <scope line="2429"/>
                    <scope line="2431"/>
                    <scope line="2433"/>
                </scope>
            </method>
            <javadoc line="2441">
                Returns a {@code Printable} to use for printing the content of this{@code JTextComponent}. The returned {@code Printable} prints
                  the document as it looks on the screen except being reformatted
                  to fit the paper.
                  The returned {@code Printable} can be wrapped inside another{@code Printable} in order to create complex reports and
                  documents.
                  &lt;p&gt;
                  The returned {@code Printable} shares the {@code document} with this{@code JTextComponent}. It is the responsibility of the developer to
                  ensure that the {@code document} is not mutated while this {@code Printable}is used. Printing behavior is undefined when the {@code document} is
                  mutated during printing.
                  &lt;p&gt;
                  Page header and footer text can be added to the output by providing{@code MessageFormat} arguments. The printing code requests{@code Strings} from the formats, providing a single item which may be
                  included in the formatted string: an {@code Integer} representing the
                  current page number.
                  &lt;p&gt;
                  The returned {@code Printable} when printed, formats the
                  document content appropriately for the page size. For correct
                  line wrapping the {@code imageable width} of all pages must be the
                  same. See {@link java.awt.print.PageFormat#getImageableWidth}.
                  &lt;p&gt;
                  This method is thread-safe, although most Swing methods are not. Please
                  see &lt;A
                  HREF=&quot;http://java.sun.com/docs/books/tutorial/uiswing/misc/threads.html&quot;&gt;
                  How to Use Threads&lt;/A&gt; for more information.
                  &lt;p&gt;
                  The returned {@code Printable} can be printed on any thread.
                  &lt;p&gt;
                  This implementation returned {@code Printable} performs all painting on
                  the &lt;i&gt;Event Dispatch Thread&lt;/i&gt;, regardless of what thread it is
                  used on.                
                <param>
                    headerFormat the text, in {@code MessageFormat}, to be
                      used as the header, or {@code null} for no header                    
                </param>
                <param>
                    footerFormat the text, in {@code MessageFormat}, to be
                      used as the footer, or {@code null} for no footer                    
                </param>
                <return>
                    a {@code Printable} for use in printing content of this{@code JTextComponent}                    
                </return>
                <see>
                    java.awt.print.Printable                    
                </see>
                <see>
                    java.awt.print.PageFormat                    
                </see>
                <see>
                    javax.swing.text.Document#render(java.lang.Runnable)                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getPrintable" type="Printable" line="2500">
                <params>
                    <param name="headerFormat" type="MessageFormat"/>
                    <param name="footerFormat" type="MessageFormat"/>
                </params>
            </method>
            <javadoc line="2511">
                Gets the &lt;code&gt;AccessibleContext&lt;/code&gt; associated with this
                  &lt;code&gt;JTextComponent&lt;/code&gt;. For text components,
                  the &lt;code&gt;AccessibleContext&lt;/code&gt; takes the form of an
                  &lt;code&gt;AccessibleJTextComponent&lt;/code&gt;.
                  A new &lt;code&gt;AccessibleJTextComponent&lt;/code&gt; instance
                  is created if necessary.                
                <return>
                    an &lt;code&gt;AccessibleJTextComponent&lt;/code&gt; that serves as the
                      &lt;code&gt;AccessibleContext&lt;/code&gt; of this
                      &lt;code&gt;JTextComponent&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="getAccessibleContext" type="AccessibleContext" line="2523">
                <scope line="2524"/>
            </method>
            <class name="AccessibleJTextComponent" line="2530">
                <extends class="AccessibleJComponent"/>
                <comment line="2620">
                    DocumentListener methods                    
                </comment>
                <comment line="2734">
                    --- interface AccessibleText methods ------------------------                    
                </comment>
                <comment line="2736">
                    Many of these methods are just convenience methods; they
                     just call the equivalent on the parent                    
                </comment>
                <comment line="2937">
                    TIGER - 4170173                    
                </comment>
                <comment line="3042">
                    Returns the paragraph element for the specified index.                    
                </comment>
                <comment line="3065">
                    Returns a &lt;code&gt;Segment&lt;code&gt; containing the paragraph text
                     at &lt;code&gt;index&lt;code&gt;, or null if &lt;code&gt;index&lt;code&gt; isn&apos;t
                     valid.                    
                </comment>
                <comment line="3135">
                    begin AccessibleEditableText methods -----                    
                </comment>
                <comment line="3300">
                    ----- end AccessibleEditableText methods                    
                </comment>
                <comment line="3303">
                    ----- begin AccessibleExtendedText methods                    
                </comment>
                <comment line="3305">
                    Probably should replace the helper method getAtIndex() to return
                     instead an AccessibleTextSequence also for LINE &amp; ATTRIBUTE_RUN
                     and then make the AccessibleText methods get[At|After|Before]Point
                     call this new method instead and return only the string portion                    
                </comment>
                <comment line="3602">
                    getTextRange() not needed; defined in AccessibleEditableText                    
                </comment>
                <comment line="3725">
                    ----- end AccessibleExtendedText methods                    
                </comment>
                <comment line="3728">
                    --- interface AccessibleAction methods ------------------------                    
                </comment>
                <comment line="3785">
                    ----- end AccessibleAction methods                    
                </comment>
                <comment line="4426">
                    --- CaretEvent methods -----------------------                    
                </comment>
                <comment line="4436">
                    --- ChangeListener methods -------------------                    
                </comment>
                <comment line="4444">
                    --- FocusListener methods -----------------------------------                    
                </comment>
                <comment line="4453">
                    --- MouseListener methods -----------------------------------                    
                </comment>
                <comment line="4553">
                    --- InputMethodRequests methods ---                    
                </comment>
                <comment line="4690">
                    --- DocumentListener methods ---                    
                </comment>
                <comment line="4993">
                    Get the background color of the component                    
                </comment>
                <comment line="5012">
                    Draw caret in XOR mode.                    
                </comment>
                <comment line="5029">
                    If some area other than the composed text is clicked by mouse,
                     issue endComposition() to force commit the composed text.                    
                </comment>
                <implements interface="AccessibleText"/>
                <implements interface="CaretListener"/>
                <implements interface="DocumentListener"/>
                <implements interface="AccessibleAction"/>
                <implements interface="AccessibleEditableText"/>
                <implements interface="AccessibleExtendedText"/>
                <javadoc line="2530">
                    This class implements accessibility support for the
                      &lt;code&gt;JTextComponent&lt;/code&gt; class.  It provides an implementation of
                      the Java Accessibility API appropriate to menu user-interface elements.
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      Serialized objects of this class will not be compatible with
                      future Swing releases. The current serialization support is
                      appropriate for short term storage or RMI between applications running
                      the same version of Swing.  As of 1.4, support for long term storage
                      of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                      has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                      Please see {@link java.beans.XMLEncoder}.                    
                </javadoc>
                <declaration name="caretPos" type="int" line="2549"/>
                <declaration name="oldLocationOnScreen" type="Point" line="2550"/>
                <javadoc line="2552">
                    Constructs an AccessibleJTextComponent.  Adds a listener to track
                      caret change.                    
                </javadoc>
                <method name="AccessibleJTextComponent" type="constructor" line="2556">
                    <comment line="2570">
                        Fire a ACCESSIBLE_VISIBLE_DATA_PROPERTY PropertyChangeEvent
                         when the text component moves (e.g., when scrolling).
                         Using an anonymous class since making AccessibleJTextComponent
                         implement ComponentListener would be an API change.                        
                    </comment>
                    <declaration name="doc" type="Document" line="2557"/>
                    <scope line="2558"/>
                    <scope line="2564"/>
                    <scope line="2566"/>
                    <anonymous_class line="2573">
                        <method name="componentMoved" type="void" line="2575">
                            <params>
                                <param name="e" type="ComponentEvent"/>
                            </params>
                            <scope line="2576">
                                <declaration name="newLocationOnScreen" type="Point" line="2577"/>
                            </scope>
                            <scope line="2583"/>
                        </method>
                    </anonymous_class>
                </method>
                <javadoc line="2589">
                    Handles caret updates (fire appropriate property change event,
                      which are AccessibleContext.ACCESSIBLE_CARET_PROPERTY and
                      AccessibleContext.ACCESSIBLE_SELECTION_PROPERTY).
                      This keeps track of the dot position internally.  When the caret
                      moves, the internal position is updated after firing the event.                    
                    <param>
                        e the CaretEvent                        
                    </param>
                </javadoc>
                <method name="caretUpdate" type="void" line="2598">
                    <params>
                        <param name="e" type="CaretEvent"/>
                    </params>
                    <comment line="2603">
                        the caret moved                        
                    </comment>
                    <comment line="2614">
                        there is a selection                        
                    </comment>
                    <declaration name="dot" type="int" line="2599"/>
                    <declaration name="mark" type="int" line="2600"/>
                    <scope line="2601">
                        <scope line="2607"/>
                        <scope line="2609"/>
                    </scope>
                    <scope line="2612"/>
                </method>
                <javadoc line="2621">
                    Handles document insert (fire appropriate property change event
                      which is AccessibleContext.ACCESSIBLE_TEXT_PROPERTY).
                      This tracks the changed offset via the event.                    
                    <param>
                        e the DocumentEvent                        
                    </param>
                </javadoc>
                <method name="insertUpdate" type="void" line="2628">
                    <params>
                        <param name="e" type="DocumentEvent"/>
                    </params>
                    <declaration name="pos" type="Integer" line="2629"/>
                    <scope line="2630"/>
                    <scope line="2632">
                        <anonymous_class line="2633">
                            <method name="run" type="void" line="2634"/>
                        </anonymous_class>
                        <declaration name="doFire" type="Runnable" line="2633"/>
                    </scope>
                </method>
                <javadoc line="2643">
                    Handles document remove (fire appropriate property change event,
                      which is AccessibleContext.ACCESSIBLE_TEXT_PROPERTY).
                      This tracks the changed offset via the event.                    
                    <param>
                        e the DocumentEvent                        
                    </param>
                </javadoc>
                <method name="removeUpdate" type="void" line="2650">
                    <params>
                        <param name="e" type="DocumentEvent"/>
                    </params>
                    <declaration name="pos" type="Integer" line="2651"/>
                    <scope line="2652"/>
                    <scope line="2654">
                        <anonymous_class line="2655">
                            <method name="run" type="void" line="2656"/>
                        </anonymous_class>
                        <declaration name="doFire" type="Runnable" line="2655"/>
                    </scope>
                </method>
                <javadoc line="2665">
                    Handles document remove (fire appropriate property change event,
                      which is AccessibleContext.ACCESSIBLE_TEXT_PROPERTY).
                      This tracks the changed offset via the event.                    
                    <param>
                        e the DocumentEvent                        
                    </param>
                </javadoc>
                <method name="changedUpdate" type="void" line="2672">
                    <params>
                        <param name="e" type="DocumentEvent"/>
                    </params>
                    <declaration name="pos" type="Integer" line="2673"/>
                    <scope line="2674"/>
                    <scope line="2676">
                        <anonymous_class line="2677">
                            <method name="run" type="void" line="2678"/>
                        </anonymous_class>
                        <declaration name="doFire" type="Runnable" line="2677"/>
                    </scope>
                </method>
                <javadoc line="2687">
                    Gets the state set of the JTextComponent.
                      The AccessibleStateSet of an object is composed of a set of
                      unique AccessibleState&apos;s.  A change in the AccessibleStateSet
                      of an object will cause a PropertyChangeEvent to be fired
                      for the AccessibleContext.ACCESSIBLE_STATE_PROPERTY property.                    
                    <return>
                        an instance of AccessibleStateSet containing the
                          current state set of the object                        
                    </return>
                    <see>
                        AccessibleStateSet                        
                    </see>
                    <see>
                        AccessibleState                        
                    </see>
                    <see>
                        #addPropertyChangeListener                        
                    </see>
                </javadoc>
                <method name="getAccessibleStateSet" type="AccessibleStateSet" line="2700">
                    <declaration name="states" type="AccessibleStateSet" line="2701"/>
                    <scope line="2702"/>
                </method>
                <javadoc line="2709">
                    Gets the role of this object.                    
                    <return>
                        an instance of AccessibleRole describing the role of the
                          object (AccessibleRole.TEXT)                        
                    </return>
                    <see>
                        AccessibleRole                        
                    </see>
                </javadoc>
                <method name="getAccessibleRole" type="AccessibleRole" line="2716"/>
                <javadoc line="2720">
                    Get the AccessibleText associated with this object.  In the
                      implementation of the Java Accessibility API for this class,
                      return this object, which is responsible for implementing the
                      AccessibleText interface on behalf of itself.                    
                    <return>
                        this object                        
                    </return>
                </javadoc>
                <method name="getAccessibleText" type="AccessibleText" line="2728"/>
                <javadoc line="2740">
                    Given a point in local coordinates, return the zero-based index
                      of the character under that Point.  If the point is invalid,
                      this method returns -1.                    
                    <param>
                        p the Point in local coordinates                        
                    </param>
                    <return>
                        the zero-based index of the character under Point p.                        
                    </return>
                </javadoc>
                <method name="getIndexAtPoint" type="int" line="2748">
                    <params>
                        <param name="p" type="Point"/>
                    </params>
                    <scope line="2749"/>
                </method>
                <javadoc line="2755">
                    Gets the editor&apos;s drawing rectangle.  Stolen
                      from the unfortunately named
                      BasicTextUI.getVisibleEditorRect()                    
                    <return>
                        the bounding box for the root view                        
                    </return>
                </javadoc>
                <method name="getRootEditorRect" type="Rectangle" line="2762">
                    <declaration name="alloc" type="Rectangle" line="2763"/>
                    <scope line="2764">
                        <declaration name="insets" type="Insets" line="2766"/>
                    </scope>
                </method>
                <javadoc line="2776">
                    Determines the bounding box of the character at the given
                      index into the string.  The bounds are returned in local
                      coordinates.  If the index is invalid a null rectangle
                      is returned.
                      The screen coordinates returned are &quot;unscrolled coordinates&quot;
                      if the JTextComponent is contained in a JScrollPane in which
                      case the resulting rectangle should be composed with the parent
                      coordinates.  A good algorithm to use is:
                      &lt;nf&gt;
                      Accessible a:
                      AccessibleText at = a.getAccessibleText();
                      AccessibleComponent ac = a.getAccessibleComponent();
                      Rectangle r = at.getCharacterBounds();
                      Point p = ac.getLocation();
                      r.x += p.x;
                      r.y += p.y;
                      &lt;/nf&gt;
                      Note: the JTextComponent must have a valid size (e.g. have
                      been added to a parent container whose ancestor container
                      is a valid top-level window) for this method to be able
                      to return a meaningful (non-null) value.                    
                    <param>
                        i the index into the String &gt;= 0                        
                    </param>
                    <return>
                        the screen coordinates of the character&apos;s bounding box                        
                    </return>
                </javadoc>
                <method name="getCharacterBounds" type="Rectangle" line="2804">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                    <scope line="2805"/>
                    <declaration name="ui" type="TextUI" line="2808"/>
                    <scope line="2809"/>
                    <declaration name="rect" type="Rectangle" line="2812"/>
                    <declaration name="alloc" type="Rectangle" line="2813"/>
                    <scope line="2814"/>
                    <scope line="2817"/>
                    <scope line="2820">
                        <declaration name="rootView" type="View" line="2821"/>
                        <scope line="2822">
                            <declaration name="bounds" type="Shape" line="2825"/>
                        </scope>
                    </scope>
                    <scope line="2833"/>
                    <scope line="2834">
                        <scope line="2835"/>
                    </scope>
                </method>
                <javadoc line="2842">
                    Returns the number of characters (valid indices)                    
                    <return>
                        the number of characters &gt;= 0                        
                    </return>
                </javadoc>
                <method name="getCharCount" type="int" line="2847"/>
                <javadoc line="2851">
                    Returns the zero-based offset of the caret.
                      Note: The character to the right of the caret will have the
                      same index value as the offset (the caret is between
                      two characters).                    
                    <return>
                        the zero-based offset of the caret.                        
                    </return>
                </javadoc>
                <method name="getCaretPosition" type="int" line="2860"/>
                <javadoc line="2864">
                    Returns the AttributeSet for a given character (at a given index).                    
                    <param>
                        i the zero-based index into the text                        
                    </param>
                    <return>
                        the AttributeSet of the character                        
                    </return>
                </javadoc>
                <method name="getCharacterAttribute" type="AttributeSet" line="2870">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                    <declaration name="e" type="Element" line="2871"/>
                    <scope line="2872"/>
                    <scope line="2875">
                        <scope line="2876">
                            <declaration name="index" type="int" line="2877"/>
                        </scope>
                    </scope>
                    <scope line="2880">
                        <scope line="2881"/>
                    </scope>
                </method>
                <javadoc line="2889">
                    Returns the start offset within the selected text.
                      If there is no selection, but there is
                      a caret, the start and end offsets will be the same.
                      Return 0 if the text is empty, or the caret position
                      if no selection.                    
                    <return>
                        the index into the text of the start of the selection &gt;= 0                        
                    </return>
                </javadoc>
                <method name="getSelectionStart" type="int" line="2898"/>
                <javadoc line="2902">
                    Returns the end offset within the selected text.
                      If there is no selection, but there is
                      a caret, the start and end offsets will be the same.
                      Return 0 if the text is empty, or the caret position
                      if no selection.                    
                    <return>
                        the index into teh text of the end of the selection &gt;= 0                        
                    </return>
                </javadoc>
                <method name="getSelectionEnd" type="int" line="2911"/>
                <javadoc line="2915">
                    Returns the portion of the text that is selected.                    
                    <return>
                        the text, null if no selection                        
                    </return>
                </javadoc>
                <method name="getSelectedText" type="String" line="2920"/>
                <class name="IndexedSegment" line="2924">
                    <extends class="Segment"/>
                    <javadoc line="2924">
                        IndexedSegment extends Segment adding the offset into the
                          the model the &lt;code&gt;Segment&lt;/code&gt; was asked for.                        
                    </javadoc>
                    <declaration name="modelOffset" type="int" line="2929"/>
                    <javadoc line="2929">
                        Offset into the model that the position represents.                        
                    </javadoc>
                </class>
                <javadoc line="2937">
                    Returns the String at a given index. Whitespace
                      between words is treated as a word.                    
                    <param>
                        part the CHARACTER, WORD, or SENTENCE to retrieve                        
                    </param>
                    <param>
                        index an index within the text                        
                    </param>
                    <return>
                        the letter, word, or sentence.                        
                    </return>
                </javadoc>
                <method name="getAtIndex" type="String" line="2946">
                    <params>
                        <param name="part" type="int"/>
                        <param name="index" type="int"/>
                    </params>
                </method>
                <javadoc line="2951">
                    Returns the String after a given index. Whitespace
                      between words is treated as a word.                    
                    <param>
                        part the CHARACTER, WORD, or SENTENCE to retrieve                        
                    </param>
                    <param>
                        index an index within the text                        
                    </param>
                    <return>
                        the letter, word, or sentence.                        
                    </return>
                </javadoc>
                <method name="getAfterIndex" type="String" line="2959">
                    <params>
                        <param name="part" type="int"/>
                        <param name="index" type="int"/>
                    </params>
                </method>
                <javadoc line="2964">
                    Returns the String before a given index. Whitespace
                      between words is treated a word.                    
                    <param>
                        part the CHARACTER, WORD, or SENTENCE to retrieve                        
                    </param>
                    <param>
                        index an index within the text                        
                    </param>
                    <return>
                        the letter, word, or sentence.                        
                    </return>
                </javadoc>
                <method name="getBeforeIndex" type="String" line="2972">
                    <params>
                        <param name="part" type="int"/>
                        <param name="index" type="int"/>
                    </params>
                </method>
                <javadoc line="2977">
                    Gets the word, sentence, or character at &lt;code&gt;index&lt;/code&gt;.
                      If &lt;code&gt;direction&lt;/code&gt; is non-null this will find the
                      next/previous word/sentence/character.                    
                </javadoc>
                <method name="getAtIndex" type="String" line="2982">
                    <params>
                        <param name="part" type="int"/>
                        <param name="index" type="int"/>
                        <param name="direction" type="int"/>
                    </params>
                    <scope line="2983"/>
                    <scope line="2986">
                        <scope line="2987"/>
                        <scope line="2993"/>
                        <declaration name="seg" type="IndexedSegment" line="3001"/>
                        <scope line="3002">
                            <scope line="3003">
                                <declaration name="next" type="int" line="3004"/>
                                <scope line="3007"/>
                                <scope line="3010"/>
                                <scope line="3013"/>
                                <scope line="3016"/>
                            </scope>
                            <scope line="3020"/>
                        </scope>
                    </scope>
                    <scope line="3031"/>
                    <scope line="3032">
                        <scope line="3033"/>
                    </scope>
                </method>
                <method name="getParagraphElement" type="Element" line="3044">
                    <params>
                        <param name="index" type="int"/>
                    </params>
                    <scope line="3045">
                        <declaration name="sdoc" type="PlainDocument" line="3046"/>
                    </scope>
                    <scope line="3048">
                        <declaration name="sdoc" type="StyledDocument" line="3049"/>
                    </scope>
                    <scope line="3051">
                        <declaration name="para" type="Element" line="3052"/>
                        <scope line="3053">
                            <declaration name="pos" type="int" line="3054"/>
                        </scope>
                        <scope line="3057"/>
                    </scope>
                </method>
                <method name="getParagraphElementText" type="IndexedSegment" line="3070">
                    <params>
                        <param name="index" type="int"/>
                    </params>
                    <declaration name="para" type="Element" line="3071"/>
                    <scope line="3074">
                        <declaration name="segment" type="IndexedSegment" line="3075"/>
                        <scope line="3076">
                            <declaration name="length" type="int" line="3077"/>
                        </scope>
                        <scope line="3079"/>
                    </scope>
                </method>
                <javadoc line="3089">
                    Returns the Segment at &lt;code&gt;index&lt;/code&gt; representing either
                      the paragraph or sentence as identified by &lt;code&gt;part&lt;/code&gt;, or
                      null if a valid paragraph/sentence can&apos;t be found. The offset
                      will point to the start of the word/sentence in the array, and
                      the modelOffset will point to the location of the word/sentence
                      in the model.                    
                </javadoc>
                <method name="getSegmentAt" type="IndexedSegment" line="3098">
                    <params>
                        <param name="part" type="int"/>
                        <param name="index" type="int"/>
                    </params>
                    <declaration name="seg" type="IndexedSegment" line="3099"/>
                    <scope line="3100"/>
                    <declaration name="iterator" type="BreakIterator" line="3103"/>
                    <declaration name="end" type="int" line="3116"/>
                    <scope line="3117"/>
                    <scope line="3120"/>
                    <declaration name="begin" type="int" line="3123"/>
                    <scope line="3125"/>
                </method>
                <javadoc line="3136">
                    Returns the AccessibleEditableText interface for
                      this text component.                    
                    <return>
                        the AccessibleEditableText interface                        
                    </return>
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <method name="getAccessibleEditableText" type="AccessibleEditableText" line="3143"/>
                <javadoc line="3147">
                    Sets the text contents to the specified string.                    
                    <param>
                        s the string to set the text contents                        
                    </param>
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <method name="setTextContents" type="void" line="3153">
                    <params>
                        <param name="s" type="String"/>
                    </params>
                </method>
                <javadoc line="3157">
                    Inserts the specified string at the given index                    
                    <param>
                        index the index in the text where the string will
                          be inserted                        
                    </param>
                    <param>
                        s the string to insert in the text                        
                    </param>
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <method name="insertTextAtIndex" type="void" line="3165">
                    <params>
                        <param name="index" type="int"/>
                        <param name="s" type="String"/>
                    </params>
                    <declaration name="doc" type="Document" line="3166"/>
                    <scope line="3167">
                        <scope line="3168">
                            <scope line="3169">
                                <declaration name="composedTextSaved" type="boolean" line="3170"/>
                                <scope line="3172"/>
                            </scope>
                        </scope>
                        <scope line="3176"/>
                    </scope>
                </method>
                <javadoc line="3182">
                    Returns the text string between two indices.                    
                    <param>
                        startIndex the starting index in the text                        
                    </param>
                    <param>
                        endIndex the ending index in the text                        
                    </param>
                    <return>
                        the text string between the indices                        
                    </return>
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <method name="getTextRange" type="String" line="3190">
                    <params>
                        <param name="startIndex" type="int"/>
                        <param name="endIndex" type="int"/>
                    </params>
                    <declaration name="txt" type="String" line="3191"/>
                    <declaration name="p0" type="int" line="3192"/>
                    <declaration name="p1" type="int" line="3193"/>
                    <scope line="3194">
                        <scope line="3195">
                            <declaration name="doc" type="Document" line="3196"/>
                        </scope>
                        <scope line="3198"/>
                    </scope>
                </method>
                <javadoc line="3205">
                    Deletes the text between two indices                    
                    <param>
                        startIndex the starting index in the text                        
                    </param>
                    <param>
                        endIndex the ending index in the text                        
                    </param>
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <method name="delete" type="void" line="3212">
                    <params>
                        <param name="startIndex" type="int"/>
                        <param name="endIndex" type="int"/>
                    </params>
                    <scope line="3213">
                        <scope line="3214">
                            <declaration name="p0" type="int" line="3215"/>
                            <declaration name="p1" type="int" line="3216"/>
                            <scope line="3217">
                                <declaration name="doc" type="Document" line="3218"/>
                            </scope>
                        </scope>
                        <scope line="3221"/>
                    </scope>
                    <scope line="3223"/>
                </method>
                <javadoc line="3228">
                    Cuts the text between two indices into the system clipboard.                    
                    <param>
                        startIndex the starting index in the text                        
                    </param>
                    <param>
                        endIndex the ending index in the text                        
                    </param>
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <method name="cut" type="void" line="3235">
                    <params>
                        <param name="startIndex" type="int"/>
                        <param name="endIndex" type="int"/>
                    </params>
                </method>
                <javadoc line="3240">
                    Pastes the text from the system clipboard into the text
                      starting at the specified index.                    
                    <param>
                        startIndex the starting index in the text                        
                    </param>
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <method name="paste" type="void" line="3247">
                    <params>
                        <param name="startIndex" type="int"/>
                    </params>
                </method>
                <javadoc line="3252">
                    Replaces the text between two indices with the specified
                      string.                    
                    <param>
                        startIndex the starting index in the text                        
                    </param>
                    <param>
                        endIndex the ending index in the text                        
                    </param>
                    <param>
                        s the string to replace the text between two indices                        
                    </param>
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <method name="replaceText" type="void" line="3261">
                    <params>
                        <param name="startIndex" type="int"/>
                        <param name="endIndex" type="int"/>
                        <param name="s" type="String"/>
                    </params>
                </method>
                <javadoc line="3266">
                    Selects the text between two indices.                    
                    <param>
                        startIndex the starting index in the text                        
                    </param>
                    <param>
                        endIndex the ending index in the text                        
                    </param>
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <method name="selectText" type="void" line="3273">
                    <params>
                        <param name="startIndex" type="int"/>
                        <param name="endIndex" type="int"/>
                    </params>
                </method>
                <javadoc line="3277">
                    Sets attributes for the text between two indices.                    
                    <param>
                        startIndex the starting index in the text                        
                    </param>
                    <param>
                        endIndex the ending index in the text                        
                    </param>
                    <param>
                        as the attribute set                        
                    </param>
                    <see>
                        AttributeSet                        
                    </see>
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <method name="setAttributes" type="void" line="3287">
                    <params>
                        <param name="startIndex" type="int"/>
                        <param name="endIndex" type="int"/>
                        <param name="as" type="AttributeSet"/>
                    </params>
                    <comment line="3290">
                        Fixes bug 4487492                        
                    </comment>
                    <declaration name="doc" type="Document" line="3290"/>
                    <scope line="3291">
                        <declaration name="sDoc" type="StyledDocument" line="3292"/>
                        <declaration name="offset" type="int" line="3293"/>
                        <declaration name="length" type="int" line="3294"/>
                    </scope>
                </method>
                <javadoc line="3309">
                    Returns the AccessibleTextSequence at a given &lt;code&gt;index&lt;/code&gt;.
                      If &lt;code&gt;direction&lt;/code&gt; is non-null this will find the
                      next/previous word/sentence/character.                    
                    <param>
                        part the &lt;code&gt;CHARACTER&lt;/code&gt;, &lt;code&gt;WORD&lt;/code&gt;,
                          &lt;code&gt;SENTENCE&lt;/code&gt;, &lt;code&gt;LINE&lt;/code&gt; or
                          &lt;code&gt;ATTRIBUTE_RUN&lt;/code&gt; to retrieve                        
                    </param>
                    <param>
                        index an index within the text                        
                    </param>
                    <param>
                        direction is either -1, 0, or 1                        
                    </param>
                    <return>
                        an &lt;code&gt;AccessibleTextSequence&lt;/code&gt; specifying the text
                          if &lt;code&gt;part&lt;/code&gt; and &lt;code&gt;index&lt;/code&gt; are valid.  Otherwise,
                          &lt;code&gt;null&lt;/code&gt; is returned.                        
                    </return>
                    <see>
                        javax.accessibility.AccessibleText#CHARACTER                        
                    </see>
                    <see>
                        javax.accessibility.AccessibleText#WORD                        
                    </see>
                    <see>
                        javax.accessibility.AccessibleText#SENTENCE                        
                    </see>
                    <see>
                        javax.accessibility.AccessibleExtendedText#LINE                        
                    </see>
                    <see>
                        javax.accessibility.AccessibleExtendedText#ATTRIBUTE_RUN                        
                    </see>
                    <since>
                        1.6                        
                    </since>
                </javadoc>
                <method name="getSequenceAtIndex" type="AccessibleTextSequence" line="3332">
                    <params>
                        <param name="part" type="int"/>
                        <param name="index" type="int"/>
                        <param name="direction" type="int"/>
                    </params>
                    <comment line="3338">
                        direction must be 1, 0, or -1                        
                    </comment>
                    <comment line="3357">
                        we are intentionally silent; our contract says we return
                         null if there is any failure in this method                        
                    </comment>
                    <comment line="3397">
                        else we leave rangeSequence set to null                        
                    </comment>
                    <comment line="3400">
                        we are intentionally silent; our contract says we return
                         null if there is any failure in this method                        
                    </comment>
                    <comment line="3454">
                        already validated &apos;direction&apos; above...                        
                    </comment>
                    <comment line="3457">
                        we are intentionally silent; our contract says we return
                         null if there is any failure in this method                        
                    </comment>
                    <comment line="3467">
                        assumptions: (1) that all characters in a single element
                         share the same attribute set; (2) that adjacent elements
                         *may* share the same attribute set                        
                    </comment>
                    <comment line="3483">
                        going backwards, so find left edge of this run -
                         that&apos;ll be the end of the previous run
                         (off-by-one counting)                        
                    </comment>
                    <comment line="3487">
                        now set ourselves up to find the left edge of the
                         prev. run                        
                    </comment>
                    <comment line="3492">
                        going forward, so find right edge of this run -
                         that&apos;ll be the start of the next run
                         (off-by-one counting)                        
                    </comment>
                    <comment line="3496">
                        now set ourselves up to find the right edge of the
                         next run                        
                    </comment>
                    <comment line="3501">
                        interested in the current run, so nothing special to
                         set up in advance...                        
                    </comment>
                    <comment line="3505">
                        only those three values of direction allowed...                        
                    </comment>
                    <comment line="3509">
                        set the unset edge; if neither set then we&apos;re getting
                         both edges of the current run around our &apos;index&apos;                        
                    </comment>
                    <comment line="3522">
                        we are intentionally silent; our contract says we return
                         null if there is any failure in this method                        
                    </comment>
                    <scope line="3333"/>
                    <scope line="3336"/>
                    <scope line="3342"/>
                    <declaration name="charSequence" type="AccessibleTextSequence" line="3345"/>
                    <scope line="3346">
                        <scope line="3348"/>
                    </scope>
                    <scope line="3355"/>
                    <scope line="3358">
                        <scope line="3359"/>
                    </scope>
                    <scope line="3367"/>
                    <declaration name="rangeSequence" type="AccessibleTextSequence" line="3370"/>
                    <scope line="3371">
                        <declaration name="seg" type="IndexedSegment" line="3372"/>
                        <scope line="3373">
                            <scope line="3374">
                                <declaration name="next" type="int" line="3375"/>
                                <scope line="3377"/>
                                <scope line="3380"/>
                                <scope line="3383"/>
                                <scope line="3386"/>
                            </scope>
                            <scope line="3391"/>
                        </scope>
                    </scope>
                    <scope line="3398"/>
                    <scope line="3401">
                        <scope line="3402"/>
                    </scope>
                    <declaration name="lineSequence" type="AccessibleTextSequence" line="3409"/>
                    <scope line="3410"/>
                    <scope line="3413">
                        <declaration name="startIndex" type="int" line="3414"/>
                        <declaration name="endIndex" type="int" line="3416"/>
                        <scope line="3418">
                            <scope line="3419"/>
                            <scope line="3424">
                                <scope line="3431"/>
                            </scope>
                            <scope line="3439">
                                <scope line="3446"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="3455"/>
                    <scope line="3458">
                        <scope line="3459"/>
                    </scope>
                    <declaration name="attributeRunStartIndex" type="int" line="3470"/>
                    <declaration name="runText" type="String" line="3471"/>
                    <scope line="3472"/>
                    <scope line="3476">
                        <declaration name="tempIndex" type="int" line="3479"/>
                    </scope>
                    <scope line="3520"/>
                    <scope line="3524">
                        <scope line="3525"/>
                    </scope>
                </method>
                <javadoc line="3540">
                    Starting at text position &lt;code&gt;index&lt;/code&gt;, and going in
                      &lt;code&gt;direction&lt;/code&gt;, return the edge of run that shares the
                      same &lt;code&gt;AttributeSet&lt;/code&gt; and parent element as those at
                      &lt;code&gt;index&lt;/code&gt;.
                      Note: we assume the document is already locked...                    
                </javadoc>
                <method name="getRunEdge" type="int" line="3549">
                    <params>
                        <param name="index" type="int"/>
                        <param name="direction" type="int"/>
                    </params>
                    <comment line="3554">
                        locate the Element at index                        
                    </comment>
                    <comment line="3556">
                        locate the Element at our index/offset                        
                    </comment>
                    <comment line="3557">
                        test for initialization                        
                    </comment>
                    <comment line="3566">
                        cache the AttributeSet and parentElement atindex                        
                    </comment>
                    <comment line="3570">
                        find the first Element before/after ours w/the same AttributeSet
                         if we are already at edge of the first element in our parent
                         then return that edge                        
                    </comment>
                    <comment line="3596">
                        we already caught this case earlier; this is to satisfy
                         the compiler...                        
                    </comment>
                    <scope line="3550"/>
                    <declaration name="indexElement" type="Element" line="3554"/>
                    <declaration name="elementIndex" type="int" line="3556"/>
                    <scope line="3558"/>
                    <scope line="3562"/>
                    <declaration name="indexAS" type="AttributeSet" line="3566"/>
                    <declaration name="parent" type="Element" line="3567"/>
                    <declaration name="edgeElement" type="Element" line="3572"/>
                    <declaration name="edgeElementIndex" type="int" line="3576"/>
                    <declaration name="elementCount" type="int" line="3577"/>
                    <scope line="3581"/>
                </method>
                <javadoc line="3603">
                    Returns the &lt;code&gt;AccessibleTextSequence&lt;/code&gt; at a given
                      &lt;code&gt;index&lt;/code&gt;.                    
                    <param>
                        part the &lt;code&gt;CHARACTER&lt;/code&gt;, &lt;code&gt;WORD&lt;/code&gt;,
                          &lt;code&gt;SENTENCE&lt;/code&gt;, &lt;code&gt;LINE&lt;/code&gt; or
                          &lt;code&gt;ATTRIBUTE_RUN&lt;/code&gt; to retrieve                        
                    </param>
                    <param>
                        index an index within the text                        
                    </param>
                    <return>
                        an &lt;code&gt;AccessibleTextSequence&lt;/code&gt; specifying the text if
                          &lt;code&gt;part&lt;/code&gt; and &lt;code&gt;index&lt;/code&gt; are valid.  Otherwise,
                          &lt;code&gt;null&lt;/code&gt; is returned                        
                    </return>
                    <see>
                        javax.accessibility.AccessibleText#CHARACTER                        
                    </see>
                    <see>
                        javax.accessibility.AccessibleText#WORD                        
                    </see>
                    <see>
                        javax.accessibility.AccessibleText#SENTENCE                        
                    </see>
                    <see>
                        javax.accessibility.AccessibleExtendedText#LINE                        
                    </see>
                    <see>
                        javax.accessibility.AccessibleExtendedText#ATTRIBUTE_RUN                        
                    </see>
                    <since>
                        1.6                        
                    </since>
                </javadoc>
                <method name="getTextSequenceAt" type="AccessibleTextSequence" line="3623">
                    <params>
                        <param name="part" type="int"/>
                        <param name="index" type="int"/>
                    </params>
                </method>
                <javadoc line="3627">
                    Returns the &lt;code&gt;AccessibleTextSequence&lt;/code&gt; after a given
                      &lt;code&gt;index&lt;/code&gt;.                    
                    <param>
                        part the &lt;code&gt;CHARACTER&lt;/code&gt;, &lt;code&gt;WORD&lt;/code&gt;,
                          &lt;code&gt;SENTENCE&lt;/code&gt;, &lt;code&gt;LINE&lt;/code&gt; or
                          &lt;code&gt;ATTRIBUTE_RUN&lt;/code&gt; to retrieve                        
                    </param>
                    <param>
                        index an index within the text                        
                    </param>
                    <return>
                        an &lt;code&gt;AccessibleTextSequence&lt;/code&gt; specifying the text
                          if &lt;code&gt;part&lt;/code&gt; and &lt;code&gt;index&lt;/code&gt; are valid.  Otherwise,
                          &lt;code&gt;null&lt;/code&gt; is returned                        
                    </return>
                    <see>
                        javax.accessibility.AccessibleText#CHARACTER                        
                    </see>
                    <see>
                        javax.accessibility.AccessibleText#WORD                        
                    </see>
                    <see>
                        javax.accessibility.AccessibleText#SENTENCE                        
                    </see>
                    <see>
                        javax.accessibility.AccessibleExtendedText#LINE                        
                    </see>
                    <see>
                        javax.accessibility.AccessibleExtendedText#ATTRIBUTE_RUN                        
                    </see>
                    <since>
                        1.6                        
                    </since>
                </javadoc>
                <method name="getTextSequenceAfter" type="AccessibleTextSequence" line="3647">
                    <params>
                        <param name="part" type="int"/>
                        <param name="index" type="int"/>
                    </params>
                </method>
                <javadoc line="3651">
                    Returns the &lt;code&gt;AccessibleTextSequence&lt;/code&gt; before a given
                      &lt;code&gt;index&lt;/code&gt;.                    
                    <param>
                        part the &lt;code&gt;CHARACTER&lt;/code&gt;, &lt;code&gt;WORD&lt;/code&gt;,
                          &lt;code&gt;SENTENCE&lt;/code&gt;, &lt;code&gt;LINE&lt;/code&gt; or
                          &lt;code&gt;ATTRIBUTE_RUN&lt;/code&gt; to retrieve                        
                    </param>
                    <param>
                        index an index within the text                        
                    </param>
                    <return>
                        an &lt;code&gt;AccessibleTextSequence&lt;/code&gt; specifying the text
                          if &lt;code&gt;part&lt;/code&gt; and &lt;code&gt;index&lt;/code&gt; are valid.  Otherwise,
                          &lt;code&gt;null&lt;/code&gt; is returned                        
                    </return>
                    <see>
                        javax.accessibility.AccessibleText#CHARACTER                        
                    </see>
                    <see>
                        javax.accessibility.AccessibleText#WORD                        
                    </see>
                    <see>
                        javax.accessibility.AccessibleText#SENTENCE                        
                    </see>
                    <see>
                        javax.accessibility.AccessibleExtendedText#LINE                        
                    </see>
                    <see>
                        javax.accessibility.AccessibleExtendedText#ATTRIBUTE_RUN                        
                    </see>
                    <since>
                        1.6                        
                    </since>
                </javadoc>
                <method name="getTextSequenceBefore" type="AccessibleTextSequence" line="3671">
                    <params>
                        <param name="part" type="int"/>
                        <param name="index" type="int"/>
                    </params>
                </method>
                <javadoc line="3675">
                    Returns the &lt;code&gt;Rectangle&lt;/code&gt; enclosing the text between
                      two indicies.                    
                    <param>
                        startIndex the start index in the text                        
                    </param>
                    <param>
                        endIndex the end index in the text                        
                    </param>
                    <return>
                        the bounding rectangle of the text if the indices are valid.
                          Otherwise, &lt;code&gt;null&lt;/code&gt; is returned                        
                    </return>
                    <since>
                        1.6                        
                    </since>
                </javadoc>
                <method name="getTextBounds" type="Rectangle" line="3686">
                    <params>
                        <param name="startIndex" type="int"/>
                        <param name="endIndex" type="int"/>
                    </params>
                    <scope line="3689"/>
                    <declaration name="ui" type="TextUI" line="3692"/>
                    <scope line="3693"/>
                    <declaration name="rect" type="Rectangle" line="3696"/>
                    <declaration name="alloc" type="Rectangle" line="3697"/>
                    <scope line="3698"/>
                    <scope line="3701"/>
                    <scope line="3704">
                        <declaration name="rootView" type="View" line="3705"/>
                        <scope line="3706">
                            <declaration name="bounds" type="Shape" line="3707"/>
                        </scope>
                    </scope>
                    <scope line="3715"/>
                    <scope line="3716">
                        <scope line="3717"/>
                    </scope>
                </method>
                <method name="getAccessibleAction" type="AccessibleAction" line="3729"/>
                <javadoc line="3733">
                    Returns the number of accessible actions available in this object
                      If there are more than one, the first one is considered the
                      &quot;default&quot; action of the object.                    
                    <return>
                        the zero-based number of Actions in this object                        
                    </return>
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <method name="getAccessibleActionCount" type="int" line="3741">
                    <declaration name="actions" type="Action[]" line="3742"/>
                </method>
                <javadoc line="3746">
                    Returns a description of the specified action of the object.                    
                    <param>
                        i zero-based index of the actions                        
                    </param>
                    <return>
                        a String description of the action                        
                    </return>
                    <see>
                        #getAccessibleActionCount                        
                    </see>
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <method name="getAccessibleActionDescription" type="String" line="3754">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                    <declaration name="actions" type="Action[]" line="3755"/>
                    <scope line="3756"/>
                </method>
                <javadoc line="3762">
                    Performs the specified Action on the object                    
                    <param>
                        i zero-based index of actions                        
                    </param>
                    <return>
                        true if the action was performed; otherwise false.                        
                    </return>
                    <see>
                        #getAccessibleActionCount                        
                    </see>
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <method name="doAccessibleAction" type="boolean" line="3770">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                    <declaration name="actions" type="Action[]" line="3771"/>
                    <scope line="3772"/>
                    <declaration name="ae" type="ActionEvent" line="3775"/>
                </method>
            </class>
            <method name="readObject" type="void" line="3794">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
            </method>
            <declaration name="model" type="Document" line="3803"/>
            <javadoc line="3803">
                The document model.                
            </javadoc>
            <declaration name="caret" type="Caret" line="3808"/>
            <javadoc line="3808">
                The caret used to display the insert position
                  and navigate throughout the document.
                  PENDING(prinz)
                  This should be serializable, default installed
                  by UI.                
            </javadoc>
            <declaration name="navigationFilter" type="NavigationFilter" line="3818"/>
            <javadoc line="3818">
                Object responsible for restricting the cursor navigation.                
            </javadoc>
            <declaration name="highlighter" type="Highlighter" line="3823"/>
            <javadoc line="3823">
                The object responsible for managing highlights.
                  PENDING(prinz)
                  This should be serializable, default installed
                  by UI.                
            </javadoc>
            <declaration name="keymap" type="Keymap" line="3832"/>
            <javadoc line="3832">
                The current key bindings in effect.
                  PENDING(prinz)
                  This should be serializable, default installed
                  by UI.                
            </javadoc>
            <declaration name="caretEvent" type="MutableCaretEvent" line="3841"/>
            <declaration name="caretColor" type="Color" line="3842"/>
            <declaration name="selectionColor" type="Color" line="3843"/>
            <declaration name="selectedTextColor" type="Color" line="3844"/>
            <declaration name="disabledTextColor" type="Color" line="3845"/>
            <declaration name="editable" type="boolean" line="3846"/>
            <declaration name="margin" type="Insets" line="3847"/>
            <declaration name="focusAccelerator" type="char" line="3848"/>
            <declaration name="dragEnabled" type="boolean" line="3849"/>
            <declaration name="dropMode" type="DropMode" line="3851"/>
            <javadoc line="3851">
                The drop mode for this component.                
            </javadoc>
            <declaration name="dropLocation" type="DropLocation" line="3856"/>
            <javadoc line="3856">
                The drop location.                
            </javadoc>
            <class name="DropLocation" line="3861">
                <extends class="TransferHandler.DropLocation"/>
                <comment line="2620">
                    DocumentListener methods                    
                </comment>
                <comment line="2734">
                    --- interface AccessibleText methods ------------------------                    
                </comment>
                <comment line="2736">
                    Many of these methods are just convenience methods; they
                     just call the equivalent on the parent                    
                </comment>
                <comment line="2937">
                    TIGER - 4170173                    
                </comment>
                <comment line="3042">
                    Returns the paragraph element for the specified index.                    
                </comment>
                <comment line="3065">
                    Returns a &lt;code&gt;Segment&lt;code&gt; containing the paragraph text
                     at &lt;code&gt;index&lt;code&gt;, or null if &lt;code&gt;index&lt;code&gt; isn&apos;t
                     valid.                    
                </comment>
                <comment line="3135">
                    begin AccessibleEditableText methods -----                    
                </comment>
                <comment line="3300">
                    ----- end AccessibleEditableText methods                    
                </comment>
                <comment line="3303">
                    ----- begin AccessibleExtendedText methods                    
                </comment>
                <comment line="3305">
                    Probably should replace the helper method getAtIndex() to return
                     instead an AccessibleTextSequence also for LINE &amp; ATTRIBUTE_RUN
                     and then make the AccessibleText methods get[At|After|Before]Point
                     call this new method instead and return only the string portion                    
                </comment>
                <comment line="3602">
                    getTextRange() not needed; defined in AccessibleEditableText                    
                </comment>
                <comment line="3725">
                    ----- end AccessibleExtendedText methods                    
                </comment>
                <comment line="3728">
                    --- interface AccessibleAction methods ------------------------                    
                </comment>
                <comment line="3785">
                    ----- end AccessibleAction methods                    
                </comment>
                <comment line="4426">
                    --- CaretEvent methods -----------------------                    
                </comment>
                <comment line="4436">
                    --- ChangeListener methods -------------------                    
                </comment>
                <comment line="4444">
                    --- FocusListener methods -----------------------------------                    
                </comment>
                <comment line="4453">
                    --- MouseListener methods -----------------------------------                    
                </comment>
                <comment line="4553">
                    --- InputMethodRequests methods ---                    
                </comment>
                <comment line="4690">
                    --- DocumentListener methods ---                    
                </comment>
                <comment line="4993">
                    Get the background color of the component                    
                </comment>
                <comment line="5012">
                    Draw caret in XOR mode.                    
                </comment>
                <comment line="5029">
                    If some area other than the composed text is clicked by mouse,
                     issue endComposition() to force commit the composed text.                    
                </comment>
                <javadoc line="3861">
                    Represents a drop location for &lt;code&gt;JTextComponent&lt;/code&gt;s.                    
                    <see>
                        #getDropLocation                        
                    </see>
                    <since>
                        1.6                        
                    </since>
                </javadoc>
                <declaration name="index" type="int" line="3868"/>
                <declaration name="bias" type="Position.Bias" line="3869"/>
                <method name="DropLocation" type="constructor" line="3871">
                    <params>
                        <param name="p" type="Point"/>
                        <param name="index" type="int"/>
                        <param name="bias" type="Position.Bias"/>
                    </params>
                </method>
                <javadoc line="3877">
                    Returns the index where dropped data should be inserted into the
                      associated component. This index represents a position between
                      characters, as would be interpreted by a caret.                    
                    <return>
                        the drop index                        
                    </return>
                </javadoc>
                <method name="getIndex" type="int" line="3884"/>
                <javadoc line="3888">
                    Returns the bias for the drop index.                    
                    <return>
                        the drop bias                        
                    </return>
                </javadoc>
                <method name="getBias" type="Position.Bias" line="3893"/>
                <javadoc line="3897">
                    Returns a string representation of this drop location.
                      This method is intended to be used for debugging purposes,
                      and the content and format of the returned string may vary
                      between implementations.                    
                    <return>
                        a string representation of this drop location                        
                    </return>
                </javadoc>
                <method name="toString" type="String" line="3905"/>
            </class>
            <declaration name="defaultTransferHandler" type="DefaultTransferHandler" line="3913"/>
            <javadoc line="3913">
                TransferHandler used if one hasn&apos;t been supplied by the UI.                
            </javadoc>
            <declaration name="overrideMap" type="Map&lt;String,Boolean&gt;" line="3918"/>
            <javadoc line="3918">
                Maps from class name to Boolean indicating if
                  &lt;code&gt;processInputMethodEvent&lt;/code&gt; has been overriden.                
            </javadoc>
            <javadoc line="3924">
                Returns a string representation of this &lt;code&gt;JTextComponent&lt;/code&gt;.
                  This method is intended to be used only for debugging purposes, and the
                  content and format of the returned string may vary between
                  implementations. The returned string may be empty but may not
                  be &lt;code&gt;null&lt;/code&gt;.
                  &lt;P&gt;
                  Overriding &lt;code&gt;paramString&lt;/code&gt; to provide information about the
                  specific new aspects of the JFC components.                
                <return>
                    a string representation of this &lt;code&gt;JTextComponent&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="paramString" type="String" line="3936">
                <declaration name="editableString" type="String" line="3937"/>
                <declaration name="caretColorString" type="String" line="3939"/>
                <declaration name="selectionColorString" type="String" line="3941"/>
                <declaration name="selectedTextColorString" type="String" line="3943"/>
                <declaration name="disabledTextColorString" type="String" line="3945"/>
                <declaration name="marginString" type="String" line="3947"/>
            </method>
            <class name="DefaultTransferHandler" line="3960">
                <extends class="TransferHandler"/>
                <comment line="2620">
                    DocumentListener methods                    
                </comment>
                <comment line="2734">
                    --- interface AccessibleText methods ------------------------                    
                </comment>
                <comment line="2736">
                    Many of these methods are just convenience methods; they
                     just call the equivalent on the parent                    
                </comment>
                <comment line="2937">
                    TIGER - 4170173                    
                </comment>
                <comment line="3042">
                    Returns the paragraph element for the specified index.                    
                </comment>
                <comment line="3065">
                    Returns a &lt;code&gt;Segment&lt;code&gt; containing the paragraph text
                     at &lt;code&gt;index&lt;code&gt;, or null if &lt;code&gt;index&lt;code&gt; isn&apos;t
                     valid.                    
                </comment>
                <comment line="3135">
                    begin AccessibleEditableText methods -----                    
                </comment>
                <comment line="3300">
                    ----- end AccessibleEditableText methods                    
                </comment>
                <comment line="3303">
                    ----- begin AccessibleExtendedText methods                    
                </comment>
                <comment line="3305">
                    Probably should replace the helper method getAtIndex() to return
                     instead an AccessibleTextSequence also for LINE &amp; ATTRIBUTE_RUN
                     and then make the AccessibleText methods get[At|After|Before]Point
                     call this new method instead and return only the string portion                    
                </comment>
                <comment line="3602">
                    getTextRange() not needed; defined in AccessibleEditableText                    
                </comment>
                <comment line="3725">
                    ----- end AccessibleExtendedText methods                    
                </comment>
                <comment line="3728">
                    --- interface AccessibleAction methods ------------------------                    
                </comment>
                <comment line="3785">
                    ----- end AccessibleAction methods                    
                </comment>
                <comment line="4426">
                    --- CaretEvent methods -----------------------                    
                </comment>
                <comment line="4436">
                    --- ChangeListener methods -------------------                    
                </comment>
                <comment line="4444">
                    --- FocusListener methods -----------------------------------                    
                </comment>
                <comment line="4453">
                    --- MouseListener methods -----------------------------------                    
                </comment>
                <comment line="4553">
                    --- InputMethodRequests methods ---                    
                </comment>
                <comment line="4690">
                    --- DocumentListener methods ---                    
                </comment>
                <comment line="4993">
                    Get the background color of the component                    
                </comment>
                <comment line="5012">
                    Draw caret in XOR mode.                    
                </comment>
                <comment line="5029">
                    If some area other than the composed text is clicked by mouse,
                     issue endComposition() to force commit the composed text.                    
                </comment>
                <implements interface="UIResource"/>
                <javadoc line="3960">
                    A Simple TransferHandler that exports the data as a String, and
                      imports the data from the String clipboard.  This is only used
                      if the UI hasn&apos;t supplied one, which would only happen if someone
                      hasn&apos;t subclassed Basic.                    
                </javadoc>
                <method name="exportToClipboard" type="void" line="3969">
                    <params>
                        <param name="comp" type="JComponent"/>
                        <param name="clipboard" type="Clipboard"/>
                        <param name="action" type="int"/>
                    </params>
                    <comment line="3981">
                        this may throw an IllegalStateException,
                         but it will be caught and handled in the
                         action that invoked this method                        
                    </comment>
                    <scope line="3970">
                        <declaration name="text" type="JTextComponent" line="3971"/>
                        <declaration name="p0" type="int" line="3972"/>
                        <declaration name="p1" type="int" line="3973"/>
                        <scope line="3974">
                            <scope line="3975">
                                <declaration name="doc" type="Document" line="3976"/>
                                <declaration name="srcData" type="String" line="3977"/>
                                <declaration name="contents" type="StringSelection" line="3978"/>
                                <scope line="3985"/>
                            </scope>
                            <scope line="3988"/>
                        </scope>
                    </scope>
                </method>
                <method name="importData" type="boolean" line="3992">
                    <params>
                        <param name="comp" type="JComponent"/>
                        <param name="t" type="Transferable"/>
                    </params>
                    <scope line="3993">
                        <declaration name="flavor" type="DataFlavor" line="3994"/>
                        <scope line="3996">
                            <declaration name="ic" type="InputContext" line="3997"/>
                            <scope line="3998"/>
                            <scope line="4001">
                                <declaration name="data" type="String" line="4002"/>
                            </scope>
                            <scope line="4006"/>
                            <scope line="4007"/>
                        </scope>
                    </scope>
                </method>
                <method name="canImport" type="boolean" line="4014">
                    <params>
                        <param name="comp" type="JComponent"/>
                        <param name="transferFlavors" type="DataFlavor[]"/>
                    </params>
                    <declaration name="c" type="JTextComponent" line="4015"/>
                    <scope line="4016"/>
                </method>
                <method name="getSourceActions" type="int" line="4021">
                    <params>
                        <param name="c" type="JComponent"/>
                    </params>
                </method>
                <method name="getFlavor" type="DataFlavor" line="4024">
                    <params>
                        <param name="flavors" type="DataFlavor[]"/>
                    </params>
                    <scope line="4025">
                        <scope line="4026">
                            <scope line="4027"/>
                        </scope>
                    </scope>
                </method>
            </class>
            <javadoc line="4036">
                Returns the JTextComponent that most recently had focus. The returned
                  value may currently have focus.                
            </javadoc>
            <method name="getFocusedComponent" type="JTextComponent" line="4040"/>
            <method name="getCurrentEventModifiers" type="int" line="4045">
                <declaration name="modifiers" type="int" line="4046"/>
                <declaration name="currentEvent" type="AWTEvent" line="4047"/>
                <scope line="4048"/>
                <scope line="4050"/>
            </method>
            <declaration name="KEYMAP_TABLE" type="Object" line="4056"/>
            <declaration name="inputMethodRequestsHandler" type="InputMethodRequests" line="4063"/>
            <declaration name="composedTextAttribute" type="SimpleAttributeSet" line="4064"/>
            <declaration name="composedTextContent" type="String" line="4065"/>
            <declaration name="composedTextStart" type="Position" line="4066"/>
            <declaration name="composedTextEnd" type="Position" line="4067"/>
            <declaration name="latestCommittedTextStart" type="Position" line="4068"/>
            <declaration name="latestCommittedTextEnd" type="Position" line="4069"/>
            <declaration name="composedTextCaret" type="ComposedTextCaret" line="4070"/>
            <declaration name="originalCaret" type="Caret" line="4071"/>
            <declaration name="checkedInputOverride" type="boolean" line="4072"/>
            <javadoc line="4072">
                Set to true after the check for the override of processInputMethodEvent
                  has been checked.                
            </javadoc>
            <declaration name="needToSendKeyTypedEvent" type="boolean" line="4077"/>
            <class name="DefaultKeymap" line="4079">
                <comment line="2620">
                    DocumentListener methods                    
                </comment>
                <comment line="2734">
                    --- interface AccessibleText methods ------------------------                    
                </comment>
                <comment line="2736">
                    Many of these methods are just convenience methods; they
                     just call the equivalent on the parent                    
                </comment>
                <comment line="2937">
                    TIGER - 4170173                    
                </comment>
                <comment line="3042">
                    Returns the paragraph element for the specified index.                    
                </comment>
                <comment line="3065">
                    Returns a &lt;code&gt;Segment&lt;code&gt; containing the paragraph text
                     at &lt;code&gt;index&lt;code&gt;, or null if &lt;code&gt;index&lt;code&gt; isn&apos;t
                     valid.                    
                </comment>
                <comment line="3135">
                    begin AccessibleEditableText methods -----                    
                </comment>
                <comment line="3300">
                    ----- end AccessibleEditableText methods                    
                </comment>
                <comment line="3303">
                    ----- begin AccessibleExtendedText methods                    
                </comment>
                <comment line="3305">
                    Probably should replace the helper method getAtIndex() to return
                     instead an AccessibleTextSequence also for LINE &amp; ATTRIBUTE_RUN
                     and then make the AccessibleText methods get[At|After|Before]Point
                     call this new method instead and return only the string portion                    
                </comment>
                <comment line="3602">
                    getTextRange() not needed; defined in AccessibleEditableText                    
                </comment>
                <comment line="3725">
                    ----- end AccessibleExtendedText methods                    
                </comment>
                <comment line="3728">
                    --- interface AccessibleAction methods ------------------------                    
                </comment>
                <comment line="3785">
                    ----- end AccessibleAction methods                    
                </comment>
                <comment line="4426">
                    --- CaretEvent methods -----------------------                    
                </comment>
                <comment line="4436">
                    --- ChangeListener methods -------------------                    
                </comment>
                <comment line="4444">
                    --- FocusListener methods -----------------------------------                    
                </comment>
                <comment line="4453">
                    --- MouseListener methods -----------------------------------                    
                </comment>
                <comment line="4553">
                    --- InputMethodRequests methods ---                    
                </comment>
                <comment line="4690">
                    --- DocumentListener methods ---                    
                </comment>
                <comment line="4993">
                    Get the background color of the component                    
                </comment>
                <comment line="5012">
                    Draw caret in XOR mode.                    
                </comment>
                <comment line="5029">
                    If some area other than the composed text is clicked by mouse,
                     issue endComposition() to force commit the composed text.                    
                </comment>
                <implements interface="Keymap"/>
                <method name="DefaultKeymap" type="constructor" line="4081">
                    <params>
                        <param name="nm" type="String"/>
                        <param name="parent" type="Keymap"/>
                    </params>
                </method>
                <javadoc line="4087">
                    Fetch the default action to fire if a
                      key is typed (ie a KEY_TYPED KeyEvent is received)
                      and there is no binding for it.  Typically this
                      would be some action that inserts text so that
                      the keymap doesn&apos;t require an action for each
                      possible key.                    
                </javadoc>
                <method name="getDefaultAction" type="Action" line="4095">
                    <scope line="4096"/>
                </method>
                <javadoc line="4102">
                    Set the default action to fire if a key is typed.                    
                </javadoc>
                <method name="setDefaultAction" type="void" line="4105">
                    <params>
                        <param name="a" type="Action"/>
                    </params>
                </method>
                <method name="getName" type="String" line="4109"/>
                <method name="getAction" type="Action" line="4113">
                    <params>
                        <param name="key" type="KeyStroke"/>
                    </params>
                    <declaration name="a" type="Action" line="4114"/>
                    <scope line="4115"/>
                </method>
                <method name="getBoundKeyStrokes" type="KeyStroke[]" line="4121">
                    <declaration name="keys" type="KeyStroke[]" line="4122"/>
                    <declaration name="i" type="int" line="4123"/>
                    <scope line="4124"/>
                </method>
                <method name="getBoundActions" type="Action[]" line="4130">
                    <declaration name="actions" type="Action[]" line="4131"/>
                    <declaration name="i" type="int" line="4132"/>
                    <scope line="4133"/>
                </method>
                <method name="getKeyStrokesForAction" type="KeyStroke[]" line="4139">
                    <params>
                        <param name="a" type="Action"/>
                    </params>
                    <comment line="4145">
                        Determine local bindings first.                        
                    </comment>
                    <comment line="4156">
                        See if the parent has any.                        
                    </comment>
                    <comment line="4160">
                        Remove any bindings defined in the parent that
                         are locally defined.                        
                    </comment>
                    <scope line="4140"/>
                    <declaration name="retValue" type="KeyStroke[]" line="4143"/>
                    <declaration name="keyStrokes" type="Vector&lt;KeyStroke&gt;" line="4145"/>
                    <scope line="4146">
                        <declaration name="key" type="KeyStroke" line="4147"/>
                        <scope line="4148">
                            <scope line="4149"/>
                        </scope>
                    </scope>
                    <scope line="4156">
                        <declaration name="pStrokes" type="KeyStroke[]" line="4157"/>
                        <scope line="4158">
                            <declaration name="rCount" type="int" line="4161"/>
                            <scope line="4163">
                                <scope line="4164"/>
                            </scope>
                            <scope line="4169">
                                <scope line="4170"/>
                                <scope line="4174">
                                    <scope line="4175"/>
                                </scope>
                            </scope>
                            <scope line="4180">
                                <scope line="4181"/>
                                <scope line="4184"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="4195"/>
                </method>
                <method name="isLocallyDefined" type="boolean" line="4202">
                    <params>
                        <param name="key" type="KeyStroke"/>
                    </params>
                </method>
                <method name="addActionForKeyStroke" type="void" line="4206">
                    <params>
                        <param name="key" type="KeyStroke"/>
                        <param name="a" type="Action"/>
                    </params>
                </method>
                <method name="removeKeyStrokeBinding" type="void" line="4210">
                    <params>
                        <param name="key" type="KeyStroke"/>
                    </params>
                </method>
                <method name="removeBindings" type="void" line="4214"/>
                <method name="getResolveParent" type="Keymap" line="4218"/>
                <method name="setResolveParent" type="void" line="4222">
                    <params>
                        <param name="parent" type="Keymap"/>
                    </params>
                </method>
                <javadoc line="4226">
                    String representation of the keymap... potentially
                      a very long string.                    
                </javadoc>
                <method name="toString" type="String" line="4230"/>
                <declaration name="nm" type="String" line="4234"/>
                <declaration name="parent" type="Keymap" line="4235"/>
                <declaration name="bindings" type="Hashtable&lt;KeyStroke,Action&gt;" line="4236"/>
                <declaration name="defaultAction" type="Action" line="4237"/>
            </class>
            <class name="KeymapWrapper" line="4241">
                <extends class="InputMap"/>
                <comment line="2620">
                    DocumentListener methods                    
                </comment>
                <comment line="2734">
                    --- interface AccessibleText methods ------------------------                    
                </comment>
                <comment line="2736">
                    Many of these methods are just convenience methods; they
                     just call the equivalent on the parent                    
                </comment>
                <comment line="2937">
                    TIGER - 4170173                    
                </comment>
                <comment line="3042">
                    Returns the paragraph element for the specified index.                    
                </comment>
                <comment line="3065">
                    Returns a &lt;code&gt;Segment&lt;code&gt; containing the paragraph text
                     at &lt;code&gt;index&lt;code&gt;, or null if &lt;code&gt;index&lt;code&gt; isn&apos;t
                     valid.                    
                </comment>
                <comment line="3135">
                    begin AccessibleEditableText methods -----                    
                </comment>
                <comment line="3300">
                    ----- end AccessibleEditableText methods                    
                </comment>
                <comment line="3303">
                    ----- begin AccessibleExtendedText methods                    
                </comment>
                <comment line="3305">
                    Probably should replace the helper method getAtIndex() to return
                     instead an AccessibleTextSequence also for LINE &amp; ATTRIBUTE_RUN
                     and then make the AccessibleText methods get[At|After|Before]Point
                     call this new method instead and return only the string portion                    
                </comment>
                <comment line="3602">
                    getTextRange() not needed; defined in AccessibleEditableText                    
                </comment>
                <comment line="3725">
                    ----- end AccessibleExtendedText methods                    
                </comment>
                <comment line="3728">
                    --- interface AccessibleAction methods ------------------------                    
                </comment>
                <comment line="3785">
                    ----- end AccessibleAction methods                    
                </comment>
                <comment line="4426">
                    --- CaretEvent methods -----------------------                    
                </comment>
                <comment line="4436">
                    --- ChangeListener methods -------------------                    
                </comment>
                <comment line="4444">
                    --- FocusListener methods -----------------------------------                    
                </comment>
                <comment line="4453">
                    --- MouseListener methods -----------------------------------                    
                </comment>
                <comment line="4553">
                    --- InputMethodRequests methods ---                    
                </comment>
                <comment line="4690">
                    --- DocumentListener methods ---                    
                </comment>
                <comment line="4993">
                    Get the background color of the component                    
                </comment>
                <comment line="5012">
                    Draw caret in XOR mode.                    
                </comment>
                <comment line="5029">
                    If some area other than the composed text is clicked by mouse,
                     issue endComposition() to force commit the composed text.                    
                </comment>
                <javadoc line="4241">
                    KeymapWrapper wraps a Keymap inside an InputMap. For KeymapWrapper
                      to be useful it must be used with a KeymapActionMap.
                      KeymapWrapper for the most part, is an InputMap with two parents.
                      The first parent visited is ALWAYS the Keymap, with the second
                      parent being the parent inherited from InputMap. If
                      &lt;code&gt;keymap.getAction&lt;/code&gt; returns null, implying the Keymap
                      does not have a binding for the KeyStroke,
                      the parent is then visited. If the Keymap has a binding, the
                      Action is returned, if not and the KeyStroke represents a
                      KeyTyped event and the Keymap has a defaultAction,
                      &lt;code&gt;DefaultActionKey&lt;/code&gt; is returned.
                      &lt;p&gt;KeymapActionMap is then able to transate the object passed in
                      to either message the Keymap, or message its default implementation.                    
                </javadoc>
                <declaration name="DefaultActionKey" type="Object" line="4257"/>
                <declaration name="keymap" type="Keymap" line="4259"/>
                <method name="KeymapWrapper" type="constructor" line="4261">
                    <params>
                        <param name="keymap" type="Keymap"/>
                    </params>
                </method>
                <method name="keys" type="KeyStroke[]" line="4265">
                    <comment line="4278">
                        There may be some duplication here...                        
                    </comment>
                    <declaration name="sKeys" type="KeyStroke[]" line="4266"/>
                    <declaration name="keymapKeys" type="KeyStroke[]" line="4267"/>
                    <declaration name="sCount" type="int" line="4268"/>
                    <declaration name="keymapCount" type="int" line="4269"/>
                    <scope line="4270"/>
                    <scope line="4273"/>
                    <declaration name="retValue" type="KeyStroke[]" line="4276"/>
                </method>
                <method name="size" type="int" line="4283">
                    <comment line="4285">
                        There may be some duplication here...                        
                    </comment>
                    <declaration name="keymapStrokes" type="KeyStroke[]" line="4285"/>
                    <declaration name="keymapCount" type="int" line="4286"/>
                </method>
                <method name="get" type="Object" line="4291">
                    <params>
                        <param name="keyStroke" type="KeyStroke"/>
                    </params>
                    <comment line="4299">
                        Implies this is a KeyTyped event, use the default
                         action.                        
                    </comment>
                    <declaration name="retValue" type="Object" line="4292"/>
                    <scope line="4293">
                        <scope line="4297"/>
                    </scope>
                </method>
            </class>
            <class name="KeymapActionMap" line="4308">
                <extends class="ActionMap"/>
                <comment line="2620">
                    DocumentListener methods                    
                </comment>
                <comment line="2734">
                    --- interface AccessibleText methods ------------------------                    
                </comment>
                <comment line="2736">
                    Many of these methods are just convenience methods; they
                     just call the equivalent on the parent                    
                </comment>
                <comment line="2937">
                    TIGER - 4170173                    
                </comment>
                <comment line="3042">
                    Returns the paragraph element for the specified index.                    
                </comment>
                <comment line="3065">
                    Returns a &lt;code&gt;Segment&lt;code&gt; containing the paragraph text
                     at &lt;code&gt;index&lt;code&gt;, or null if &lt;code&gt;index&lt;code&gt; isn&apos;t
                     valid.                    
                </comment>
                <comment line="3135">
                    begin AccessibleEditableText methods -----                    
                </comment>
                <comment line="3300">
                    ----- end AccessibleEditableText methods                    
                </comment>
                <comment line="3303">
                    ----- begin AccessibleExtendedText methods                    
                </comment>
                <comment line="3305">
                    Probably should replace the helper method getAtIndex() to return
                     instead an AccessibleTextSequence also for LINE &amp; ATTRIBUTE_RUN
                     and then make the AccessibleText methods get[At|After|Before]Point
                     call this new method instead and return only the string portion                    
                </comment>
                <comment line="3602">
                    getTextRange() not needed; defined in AccessibleEditableText                    
                </comment>
                <comment line="3725">
                    ----- end AccessibleExtendedText methods                    
                </comment>
                <comment line="3728">
                    --- interface AccessibleAction methods ------------------------                    
                </comment>
                <comment line="3785">
                    ----- end AccessibleAction methods                    
                </comment>
                <comment line="4426">
                    --- CaretEvent methods -----------------------                    
                </comment>
                <comment line="4436">
                    --- ChangeListener methods -------------------                    
                </comment>
                <comment line="4444">
                    --- FocusListener methods -----------------------------------                    
                </comment>
                <comment line="4453">
                    --- MouseListener methods -----------------------------------                    
                </comment>
                <comment line="4553">
                    --- InputMethodRequests methods ---                    
                </comment>
                <comment line="4690">
                    --- DocumentListener methods ---                    
                </comment>
                <comment line="4993">
                    Get the background color of the component                    
                </comment>
                <comment line="5012">
                    Draw caret in XOR mode.                    
                </comment>
                <comment line="5029">
                    If some area other than the composed text is clicked by mouse,
                     issue endComposition() to force commit the composed text.                    
                </comment>
                <javadoc line="4308">
                    Wraps a Keymap inside an ActionMap. This is used with
                      a KeymapWrapper. If &lt;code&gt;get&lt;/code&gt; is passed in
                      &lt;code&gt;KeymapWrapper.DefaultActionKey&lt;/code&gt;, the default action is
                      returned, otherwise if the key is an Action, it is returned.                    
                </javadoc>
                <declaration name="keymap" type="Keymap" line="4315"/>
                <method name="KeymapActionMap" type="constructor" line="4317">
                    <params>
                        <param name="keymap" type="Keymap"/>
                    </params>
                </method>
                <method name="keys" type="Object[]" line="4321">
                    <comment line="4347">
                        There may be some duplication here...                        
                    </comment>
                    <declaration name="sKeys" type="Object[]" line="4322"/>
                    <declaration name="keymapKeys" type="Object[]" line="4323"/>
                    <declaration name="sCount" type="int" line="4324"/>
                    <declaration name="keymapCount" type="int" line="4325"/>
                    <declaration name="hasDefault" type="boolean" line="4326"/>
                    <scope line="4327"/>
                    <scope line="4330">
                        <scope line="4331">
                            <declaration name="retValue" type="Object[]" line="4332"/>
                            <scope line="4333"/>
                        </scope>
                    </scope>
                    <scope line="4342"/>
                    <declaration name="retValue" type="Object[]" line="4345"/>
                    <scope line="4348">
                        <scope line="4349"/>
                    </scope>
                    <scope line="4356"/>
                </method>
                <method name="size" type="int" line="4362">
                    <comment line="4364">
                        There may be some duplication here...                        
                    </comment>
                    <declaration name="actions" type="Object[]" line="4364"/>
                    <declaration name="keymapCount" type="int" line="4365"/>
                    <scope line="4366"/>
                </method>
                <method name="get" type="Action" line="4372">
                    <params>
                        <param name="key" type="Object"/>
                    </params>
                    <comment line="4376">
                        Try the Keymap.                        
                    </comment>
                    <comment line="4381">
                        This is a little iffy, technically an Action is
                         a valid Key. We&apos;re assuming the Action came from
                         the InputMap though.                        
                    </comment>
                    <declaration name="retValue" type="Action" line="4373"/>
                    <scope line="4374">
                        <scope line="4376"/>
                        <scope line="4379"/>
                    </scope>
                </method>
            </class>
            <declaration name="FOCUSED_COMPONENT" type="Object" line="4390"/>
            <declaration name="DEFAULT_KEYMAP" type="String" line="4393"/>
            <javadoc line="4393">
                The default keymap that will be shared by all
                  &lt;code&gt;JTextComponent&lt;/code&gt; instances unless they
                  have had a different keymap set.                
            </javadoc>
            <class name="MutableCaretEvent" line="4400">
                <extends class="CaretEvent"/>
                <comment line="2620">
                    DocumentListener methods                    
                </comment>
                <comment line="2734">
                    --- interface AccessibleText methods ------------------------                    
                </comment>
                <comment line="2736">
                    Many of these methods are just convenience methods; they
                     just call the equivalent on the parent                    
                </comment>
                <comment line="2937">
                    TIGER - 4170173                    
                </comment>
                <comment line="3042">
                    Returns the paragraph element for the specified index.                    
                </comment>
                <comment line="3065">
                    Returns a &lt;code&gt;Segment&lt;code&gt; containing the paragraph text
                     at &lt;code&gt;index&lt;code&gt;, or null if &lt;code&gt;index&lt;code&gt; isn&apos;t
                     valid.                    
                </comment>
                <comment line="3135">
                    begin AccessibleEditableText methods -----                    
                </comment>
                <comment line="3300">
                    ----- end AccessibleEditableText methods                    
                </comment>
                <comment line="3303">
                    ----- begin AccessibleExtendedText methods                    
                </comment>
                <comment line="3305">
                    Probably should replace the helper method getAtIndex() to return
                     instead an AccessibleTextSequence also for LINE &amp; ATTRIBUTE_RUN
                     and then make the AccessibleText methods get[At|After|Before]Point
                     call this new method instead and return only the string portion                    
                </comment>
                <comment line="3602">
                    getTextRange() not needed; defined in AccessibleEditableText                    
                </comment>
                <comment line="3725">
                    ----- end AccessibleExtendedText methods                    
                </comment>
                <comment line="3728">
                    --- interface AccessibleAction methods ------------------------                    
                </comment>
                <comment line="3785">
                    ----- end AccessibleAction methods                    
                </comment>
                <comment line="4426">
                    --- CaretEvent methods -----------------------                    
                </comment>
                <comment line="4436">
                    --- ChangeListener methods -------------------                    
                </comment>
                <comment line="4444">
                    --- FocusListener methods -----------------------------------                    
                </comment>
                <comment line="4453">
                    --- MouseListener methods -----------------------------------                    
                </comment>
                <comment line="4553">
                    --- InputMethodRequests methods ---                    
                </comment>
                <comment line="4690">
                    --- DocumentListener methods ---                    
                </comment>
                <comment line="4993">
                    Get the background color of the component                    
                </comment>
                <comment line="5012">
                    Draw caret in XOR mode.                    
                </comment>
                <comment line="5029">
                    If some area other than the composed text is clicked by mouse,
                     issue endComposition() to force commit the composed text.                    
                </comment>
                <implements interface="ChangeListener"/>
                <implements interface="FocusListener"/>
                <implements interface="MouseListener"/>
                <javadoc line="4400">
                    Event to use when firing a notification of change to caret
                      position.  This is mutable so that the event can be reused
                      since caret events can be fairly high in bandwidth.                    
                </javadoc>
                <method name="MutableCaretEvent" type="constructor" line="4407">
                    <params>
                        <param name="c" type="JTextComponent"/>
                    </params>
                </method>
                <method name="fire" type="void" line="4411">
                    <declaration name="c" type="JTextComponent" line="4412"/>
                    <scope line="4413">
                        <declaration name="caret" type="Caret" line="4414"/>
                    </scope>
                </method>
                <method name="toString" type="String" line="4421"/>
                <method name="getDot" type="int" line="4427"/>
                <method name="getMark" type="int" line="4431"/>
                <method name="stateChanged" type="void" line="4437">
                    <params>
                        <param name="e" type="ChangeEvent"/>
                    </params>
                    <scope line="4438"/>
                </method>
                <method name="focusGained" type="void" line="4444">
                    <params>
                        <param name="fe" type="FocusEvent"/>
                    </params>
                </method>
                <method name="focusLost" type="void" line="4449">
                    <params>
                        <param name="fe" type="FocusEvent"/>
                    </params>
                </method>
                <javadoc line="4454">
                    Requests focus on the associated
                      text component, and try to set the cursor position.                    
                    <param>
                        e the mouse event                        
                    </param>
                    <see>
                        MouseListener#mousePressed                        
                    </see>
                </javadoc>
                <method name="mousePressed" type="void" line="4461">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
                <javadoc line="4465">
                    Called when the mouse is released.                    
                    <param>
                        e the mouse event                        
                    </param>
                    <see>
                        MouseListener#mouseReleased                        
                    </see>
                </javadoc>
                <method name="mouseReleased" type="void" line="4471">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
                <method name="mouseClicked" type="void" line="4476">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
                <method name="mouseEntered" type="void" line="4479">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
                <method name="mouseExited" type="void" line="4482">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
                <declaration name="dragActive" type="boolean" line="4485"/>
                <declaration name="dot" type="int" line="4486"/>
                <declaration name="mark" type="int" line="4487"/>
            </class>
            <method name="processInputMethodEvent" type="void" line="4496">
                <params>
                    <param name="e" type="InputMethodEvent"/>
                </params>
                <comment line="4498">
                    let listeners handle the events                    
                </comment>
                <comment line="4509">
                    fall through                    
                </comment>
                <scope line="4500">
                    <scope line="4501"/>
                    <scope line="4503"/>
                </scope>
            </method>
            <method name="getInputMethodRequests" type="InputMethodRequests" line="4523">
                <scope line="4524">
                    <declaration name="doc" type="Document" line="4526"/>
                    <scope line="4527"/>
                </scope>
            </method>
            <method name="addInputMethodListener" type="void" line="4538">
                <params>
                    <param name="l" type="InputMethodListener"/>
                </params>
                <scope line="4540"/>
            </method>
            <class name="InputMethodRequestsHandler" line="4550">
                <comment line="2620">
                    DocumentListener methods                    
                </comment>
                <comment line="2734">
                    --- interface AccessibleText methods ------------------------                    
                </comment>
                <comment line="2736">
                    Many of these methods are just convenience methods; they
                     just call the equivalent on the parent                    
                </comment>
                <comment line="2937">
                    TIGER - 4170173                    
                </comment>
                <comment line="3042">
                    Returns the paragraph element for the specified index.                    
                </comment>
                <comment line="3065">
                    Returns a &lt;code&gt;Segment&lt;code&gt; containing the paragraph text
                     at &lt;code&gt;index&lt;code&gt;, or null if &lt;code&gt;index&lt;code&gt; isn&apos;t
                     valid.                    
                </comment>
                <comment line="3135">
                    begin AccessibleEditableText methods -----                    
                </comment>
                <comment line="3300">
                    ----- end AccessibleEditableText methods                    
                </comment>
                <comment line="3303">
                    ----- begin AccessibleExtendedText methods                    
                </comment>
                <comment line="3305">
                    Probably should replace the helper method getAtIndex() to return
                     instead an AccessibleTextSequence also for LINE &amp; ATTRIBUTE_RUN
                     and then make the AccessibleText methods get[At|After|Before]Point
                     call this new method instead and return only the string portion                    
                </comment>
                <comment line="3602">
                    getTextRange() not needed; defined in AccessibleEditableText                    
                </comment>
                <comment line="3725">
                    ----- end AccessibleExtendedText methods                    
                </comment>
                <comment line="3728">
                    --- interface AccessibleAction methods ------------------------                    
                </comment>
                <comment line="3785">
                    ----- end AccessibleAction methods                    
                </comment>
                <comment line="4426">
                    --- CaretEvent methods -----------------------                    
                </comment>
                <comment line="4436">
                    --- ChangeListener methods -------------------                    
                </comment>
                <comment line="4444">
                    --- FocusListener methods -----------------------------------                    
                </comment>
                <comment line="4453">
                    --- MouseListener methods -----------------------------------                    
                </comment>
                <comment line="4553">
                    --- InputMethodRequests methods ---                    
                </comment>
                <comment line="4690">
                    --- DocumentListener methods ---                    
                </comment>
                <comment line="4993">
                    Get the background color of the component                    
                </comment>
                <comment line="5012">
                    Draw caret in XOR mode.                    
                </comment>
                <comment line="5029">
                    If some area other than the composed text is clicked by mouse,
                     issue endComposition() to force commit the composed text.                    
                </comment>
                <implements interface="InputMethodRequests"/>
                <implements interface="DocumentListener"/>
                <method name="cancelLatestCommittedText" type="AttributedCharacterIterator" line="4555">
                    <params>
                        <param name="attributes" type="Attribute[]"/>
                    </params>
                    <declaration name="doc" type="Document" line="4556"/>
                    <scope line="4558">
                        <scope line="4559">
                            <declaration name="startIndex" type="int" line="4560"/>
                            <declaration name="endIndex" type="int" line="4561"/>
                            <declaration name="latestCommittedText" type="String" line="4562"/>
                        </scope>
                        <scope line="4566"/>
                    </scope>
                </method>
                <method name="getCommittedText" type="AttributedCharacterIterator" line="4572">
                    <params>
                        <param name="beginIndex" type="int"/>
                        <param name="endIndex" type="int"/>
                        <param name="attributes" type="Attribute[]"/>
                    </params>
                    <declaration name="composedStartIndex" type="int" line="4573"/>
                    <declaration name="composedEndIndex" type="int" line="4574"/>
                    <scope line="4575"/>
                    <declaration name="committed" type="String" line="4580"/>
                    <scope line="4581">
                        <scope line="4582">
                            <scope line="4583"/>
                            <scope line="4585">
                                <declaration name="firstPartLength" type="int" line="4586"/>
                            </scope>
                        </scope>
                        <scope line="4590"/>
                    </scope>
                    <scope line="4594"/>
                </method>
                <method name="getCommittedTextLength" type="int" line="4600">
                    <comment line="4609">
                        fix for : 6355666
                         this is the case when this method is invoked
                         from DocumentListener. At this point
                         composedTextEnd and composedTextStart are
                         not defined yet.                        
                    </comment>
                    <declaration name="doc" type="Document" line="4601"/>
                    <declaration name="length" type="int" line="4602"/>
                    <scope line="4603">
                        <scope line="4605">
                            <scope line="4607"/>
                            <scope line="4616"/>
                        </scope>
                    </scope>
                </method>
                <method name="getInsertPositionOffset" type="int" line="4625">
                    <declaration name="composedStartIndex" type="int" line="4626"/>
                    <declaration name="composedEndIndex" type="int" line="4627"/>
                    <scope line="4628"/>
                    <declaration name="caretIndex" type="int" line="4632"/>
                    <scope line="4634"/>
                    <scope line="4636"/>
                    <scope line="4638"/>
                </method>
                <method name="getLocationOffset" type="TextHitInfo" line="4643">
                    <params>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                    </params>
                    <scope line="4644"/>
                    <scope line="4646">
                        <declaration name="p" type="Point" line="4647"/>
                        <declaration name="pos" type="int" line="4650"/>
                        <scope line="4652"/>
                        <scope line="4654"/>
                    </scope>
                </method>
                <method name="getTextLocation" type="Rectangle" line="4660">
                    <params>
                        <param name="offset" type="TextHitInfo"/>
                    </params>
                    <declaration name="r" type="Rectangle" line="4661"/>
                    <scope line="4663">
                        <scope line="4665">
                            <declaration name="p" type="Point" line="4666"/>
                        </scope>
                    </scope>
                    <scope line="4669"/>
                </method>
                <method name="getSelectedText" type="AttributedCharacterIterator" line="4680">
                    <params>
                        <param name="attributes" type="Attribute[]"/>
                    </params>
                    <declaration name="selection" type="String" line="4681"/>
                    <scope line="4682"/>
                    <scope line="4684"/>
                </method>
                <method name="changedUpdate" type="void" line="4691">
                    <params>
                        <param name="e" type="DocumentEvent"/>
                    </params>
                </method>
                <method name="insertUpdate" type="void" line="4695">
                    <params>
                        <param name="e" type="DocumentEvent"/>
                    </params>
                </method>
                <method name="removeUpdate" type="void" line="4699">
                    <params>
                        <param name="e" type="DocumentEvent"/>
                    </params>
                </method>
            </class>
            <method name="replaceInputMethodText" type="void" line="4709">
                <params>
                    <param name="e" type="InputMethodEvent"/>
                </params>
                <comment line="4715">
                    old composed text deletion                    
                </comment>
                <comment line="4733">
                    committed text insertion                    
                </comment>
                <comment line="4735">
                    Remember latest committed text start index                    
                </comment>
                <comment line="4738">
                    Need to generate KeyTyped events for the committed text for components
                     that are not aware they are active input method clients.                    
                </comment>
                <comment line="4755">
                    map it to an ActionEvent                    
                </comment>
                <comment line="4759">
                    Remember latest committed text end index                    
                </comment>
                <comment line="4763">
                    new composed text insertion                    
                </comment>
                <comment line="4781">
                    Save the latest committed text information                    
                </comment>
                <declaration name="commitCount" type="int" line="4710"/>
                <declaration name="text" type="AttributedCharacterIterator" line="4711"/>
                <declaration name="composedTextIndex" type="int" line="4712"/>
                <declaration name="doc" type="Document" line="4715"/>
                <scope line="4716">
                    <scope line="4717"/>
                    <scope line="4721"/>
                </scope>
                <scope line="4727">
                    <declaration name="committedTextStartIndex" type="int" line="4729"/>
                    <declaration name="committedTextEndIndex" type="int" line="4730"/>
                    <scope line="4733">
                        <scope line="4739">
                            <scope line="4741">
                                <declaration name="ke" type="KeyEvent" line="4742"/>
                            </scope>
                        </scope>
                        <scope line="4747">
                            <declaration name="strBuf" type="StringBuilder" line="4748"/>
                            <scope line="4750"/>
                        </scope>
                    </scope>
                    <scope line="4764">
                        <scope line="4766"/>
                        <scope line="4773"/>
                    </scope>
                    <scope line="4781">
                        <scope line="4782"/>
                        <scope line="4787"/>
                    </scope>
                    <scope line="4791"/>
                </scope>
            </method>
            <method name="createComposedTextAttribute" type="void" line="4799">
                <params>
                    <param name="composedIndex" type="int"/>
                    <param name="text" type="AttributedCharacterIterator"/>
                </params>
                <comment line="4804">
                    create attributed string with no attributes                    
                </comment>
                <declaration name="doc" type="Document" line="4800"/>
                <declaration name="strBuf" type="StringBuilder" line="4801"/>
                <scope line="4805"/>
            </method>
            <javadoc line="4815">
                Saves composed text around the specified position.
                  The composed text (if any) around the specified position is saved
                  in a backing store and removed from the document.                
                <param>
                    pos  document position to identify the composed text location                    
                </param>
                <return>
                    {@code true} if the composed text exists and is saved,{@code false} otherwise                    
                </return>
                <see>
                    #restoreComposedText                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="saveComposedText" type="boolean" line="4827">
                <params>
                    <param name="pos" type="int"/>
                </params>
                <scope line="4828">
                    <declaration name="start" type="int" line="4829"/>
                    <declaration name="len" type="int" line="4830"/>
                    <scope line="4832">
                        <scope line="4833"/>
                        <scope line="4836"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="4842">
                Restores composed text previously saved by {@code saveComposedText}.
                  The saved composed text is inserted back into the document. This method
                  should be invoked only if {@code saveComposedText} returns {@code true}.                
                <see>
                    #saveComposedText                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="restoreComposedText" type="void" line="4851">
                <declaration name="doc" type="Document" line="4852"/>
                <scope line="4853"/>
                <scope line="4860"/>
            </method>
            <method name="mapCommittedTextToAction" type="void" line="4868">
                <params>
                    <param name="committedText" type="String"/>
                </params>
                <declaration name="binding" type="Keymap" line="4869"/>
                <scope line="4870">
                    <declaration name="a" type="Action" line="4871"/>
                    <scope line="4872">
                        <declaration name="k" type="KeyStroke" line="4873"/>
                    </scope>
                    <scope line="4877"/>
                    <scope line="4881">
                        <declaration name="ae" type="ActionEvent" line="4882"/>
                    </scope>
                </scope>
            </method>
            <method name="setInputMethodCaretPosition" type="void" line="4896">
                <params>
                    <param name="e" type="InputMethodEvent"/>
                </params>
                <comment line="4907">
                    Sets composed text caret                    
                </comment>
                <comment line="4916">
                    Scroll the component if needed so that the composed text
                     becomes visible.                    
                </comment>
                <comment line="4930">
                    Restores original caret                    
                </comment>
                <declaration name="dot" type="int" line="4897"/>
                <scope line="4899">
                    <scope line="4901">
                        <scope line="4902"/>
                    </scope>
                    <declaration name="caretPos" type="TextHitInfo" line="4910"/>
                    <scope line="4911">
                        <declaration name="index" type="int" line="4912"/>
                        <scope line="4914">
                            <scope line="4917">
                                <declaration name="d" type="Rectangle" line="4918"/>
                                <declaration name="end" type="Rectangle" line="4919"/>
                                <declaration name="b" type="Rectangle" line="4920"/>
                            </scope>
                            <scope line="4923"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="4927"/>
            </method>
            <method name="exchangeCaret" type="void" line="4935">
                <params>
                    <param name="oldCaret" type="Caret"/>
                    <param name="newCaret" type="Caret"/>
                </params>
                <declaration name="blinkRate" type="int" line="4936"/>
            </method>
            <javadoc line="4942">
                Returns true if KeyEvents should be synthesized from an InputEvent.                
            </javadoc>
            <method name="shouldSynthensizeKeyEvents" type="boolean" line="4945">
                <scope line="4946"/>
            </method>
            <method name="isProcessInputMethodEventOverridden" type="boolean" line="4959">
                <scope line="4960"/>
                <declaration name="retValue" type="Boolean" line="4963"/>
                <scope line="4965"/>
                <anonymous_class line="4969">
                    <method name="run" type="Boolean" line="4970"/>
                </anonymous_class>
                <declaration name="ret" type="Boolean" line="4968"/>
            </method>
            <method name="composedTextExists" type="boolean" line="4982"/>
            <class name="ComposedTextCaret" line="4989">
                <extends class="DefaultCaret"/>
                <comment line="2620">
                    DocumentListener methods                    
                </comment>
                <comment line="2734">
                    --- interface AccessibleText methods ------------------------                    
                </comment>
                <comment line="2736">
                    Many of these methods are just convenience methods; they
                     just call the equivalent on the parent                    
                </comment>
                <comment line="2937">
                    TIGER - 4170173                    
                </comment>
                <comment line="3042">
                    Returns the paragraph element for the specified index.                    
                </comment>
                <comment line="3065">
                    Returns a &lt;code&gt;Segment&lt;code&gt; containing the paragraph text
                     at &lt;code&gt;index&lt;code&gt;, or null if &lt;code&gt;index&lt;code&gt; isn&apos;t
                     valid.                    
                </comment>
                <comment line="3135">
                    begin AccessibleEditableText methods -----                    
                </comment>
                <comment line="3300">
                    ----- end AccessibleEditableText methods                    
                </comment>
                <comment line="3303">
                    ----- begin AccessibleExtendedText methods                    
                </comment>
                <comment line="3305">
                    Probably should replace the helper method getAtIndex() to return
                     instead an AccessibleTextSequence also for LINE &amp; ATTRIBUTE_RUN
                     and then make the AccessibleText methods get[At|After|Before]Point
                     call this new method instead and return only the string portion                    
                </comment>
                <comment line="3602">
                    getTextRange() not needed; defined in AccessibleEditableText                    
                </comment>
                <comment line="3725">
                    ----- end AccessibleExtendedText methods                    
                </comment>
                <comment line="3728">
                    --- interface AccessibleAction methods ------------------------                    
                </comment>
                <comment line="3785">
                    ----- end AccessibleAction methods                    
                </comment>
                <comment line="4426">
                    --- CaretEvent methods -----------------------                    
                </comment>
                <comment line="4436">
                    --- ChangeListener methods -------------------                    
                </comment>
                <comment line="4444">
                    --- FocusListener methods -----------------------------------                    
                </comment>
                <comment line="4453">
                    --- MouseListener methods -----------------------------------                    
                </comment>
                <comment line="4553">
                    --- InputMethodRequests methods ---                    
                </comment>
                <comment line="4690">
                    --- DocumentListener methods ---                    
                </comment>
                <comment line="4993">
                    Get the background color of the component                    
                </comment>
                <comment line="5012">
                    Draw caret in XOR mode.                    
                </comment>
                <comment line="5029">
                    If some area other than the composed text is clicked by mouse,
                     issue endComposition() to force commit the composed text.                    
                </comment>
                <implements interface="Serializable"/>
                <declaration name="bg" type="Color" line="4990"/>
                <method name="install" type="void" line="4995">
                    <params>
                        <param name="c" type="JTextComponent"/>
                    </params>
                    <declaration name="doc" type="Document" line="4998"/>
                    <scope line="4999">
                        <declaration name="sDoc" type="StyledDocument" line="5000"/>
                        <declaration name="elem" type="Element" line="5001"/>
                        <declaration name="attr" type="AttributeSet" line="5002"/>
                    </scope>
                    <scope line="5006"/>
                </method>
                <method name="paint" type="void" line="5014">
                    <params>
                        <param name="g" type="Graphics"/>
                    </params>
                    <comment line="5023">
                        can&apos;t render I guess
                        System.err.println(&quot;Can&apos;t render cursor&quot;);                        
                    </comment>
                    <scope line="5015">
                        <scope line="5016">
                            <declaration name="r" type="Rectangle" line="5017"/>
                        </scope>
                        <scope line="5021"/>
                    </scope>
                </method>
                <method name="positionCaret" type="void" line="5032">
                    <params>
                        <param name="me" type="MouseEvent"/>
                    </params>
                    <comment line="5041">
                        Issue endComposition                        
                    </comment>
                    <comment line="5045">
                        Post a caret positioning runnable to assure that the positioning
                         occurs *after* committing the composed text.                        
                    </comment>
                    <comment line="5052">
                        Normal processing                        
                    </comment>
                    <declaration name="host" type="JTextComponent" line="5033"/>
                    <declaration name="pt" type="Point" line="5034"/>
                    <declaration name="offset" type="int" line="5035"/>
                    <declaration name="composedStartIndex" type="int" line="5036"/>
                    <scope line="5038">
                        <scope line="5039">
                            <declaration name="newPos" type="Position" line="5041"/>
                        </scope>
                        <scope line="5047"/>
                    </scope>
                    <scope line="5050"/>
                </method>
            </class>
            <class name="DoSetCaretPosition" line="5060">
                <comment line="2620">
                    DocumentListener methods                    
                </comment>
                <comment line="2734">
                    --- interface AccessibleText methods ------------------------                    
                </comment>
                <comment line="2736">
                    Many of these methods are just convenience methods; they
                     just call the equivalent on the parent                    
                </comment>
                <comment line="2937">
                    TIGER - 4170173                    
                </comment>
                <comment line="3042">
                    Returns the paragraph element for the specified index.                    
                </comment>
                <comment line="3065">
                    Returns a &lt;code&gt;Segment&lt;code&gt; containing the paragraph text
                     at &lt;code&gt;index&lt;code&gt;, or null if &lt;code&gt;index&lt;code&gt; isn&apos;t
                     valid.                    
                </comment>
                <comment line="3135">
                    begin AccessibleEditableText methods -----                    
                </comment>
                <comment line="3300">
                    ----- end AccessibleEditableText methods                    
                </comment>
                <comment line="3303">
                    ----- begin AccessibleExtendedText methods                    
                </comment>
                <comment line="3305">
                    Probably should replace the helper method getAtIndex() to return
                     instead an AccessibleTextSequence also for LINE &amp; ATTRIBUTE_RUN
                     and then make the AccessibleText methods get[At|After|Before]Point
                     call this new method instead and return only the string portion                    
                </comment>
                <comment line="3602">
                    getTextRange() not needed; defined in AccessibleEditableText                    
                </comment>
                <comment line="3725">
                    ----- end AccessibleExtendedText methods                    
                </comment>
                <comment line="3728">
                    --- interface AccessibleAction methods ------------------------                    
                </comment>
                <comment line="3785">
                    ----- end AccessibleAction methods                    
                </comment>
                <comment line="4426">
                    --- CaretEvent methods -----------------------                    
                </comment>
                <comment line="4436">
                    --- ChangeListener methods -------------------                    
                </comment>
                <comment line="4444">
                    --- FocusListener methods -----------------------------------                    
                </comment>
                <comment line="4453">
                    --- MouseListener methods -----------------------------------                    
                </comment>
                <comment line="4553">
                    --- InputMethodRequests methods ---                    
                </comment>
                <comment line="4690">
                    --- DocumentListener methods ---                    
                </comment>
                <comment line="4993">
                    Get the background color of the component                    
                </comment>
                <comment line="5012">
                    Draw caret in XOR mode.                    
                </comment>
                <comment line="5029">
                    If some area other than the composed text is clicked by mouse,
                     issue endComposition() to force commit the composed text.                    
                </comment>
                <implements interface="Runnable"/>
                <declaration name="host" type="JTextComponent" line="5061"/>
                <declaration name="newPos" type="Position" line="5062"/>
                <method name="DoSetCaretPosition" type="constructor" line="5064">
                    <params>
                        <param name="host" type="JTextComponent"/>
                        <param name="newPos" type="Position"/>
                    </params>
                </method>
                <method name="run" type="void" line="5069"/>
            </class>
        </class>
    </source>