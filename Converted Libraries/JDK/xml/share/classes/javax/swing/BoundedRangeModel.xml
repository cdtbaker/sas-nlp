<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="javax.swing.event"/>
        <interface name="BoundedRangeModel">
            <javadoc line="3">
                Defines the data model used by components like &lt;code&gt;Slider&lt;/code&gt;s
                  and &lt;code&gt;ProgressBar&lt;/code&gt;s.
                  Defines four interrelated integer properties: minimum, maximum, extent
                  and value.  These four integers define two nested ranges like this:
                  &lt;pre&gt;
                  minimum &amp;lt;= value &amp;lt;= value+extent &amp;lt;= maximum
                  &lt;/pre&gt;
                  The outer range is &lt;code&gt;minimum,maximum&lt;/code&gt; and the inner
                  range is &lt;code&gt;value,value+extent&lt;/code&gt;.  The inner range
                  must lie within the outer one, i.e. &lt;code&gt;value&lt;/code&gt; must be
                  less than or equal to &lt;code&gt;maximum&lt;/code&gt; and &lt;code&gt;value+extent&lt;/code&gt;
                  must greater than or equal to &lt;code&gt;minimum&lt;/code&gt;, and &lt;code&gt;maximum&lt;/code&gt;
                  must be greater than or equal to &lt;code&gt;minimum&lt;/code&gt;.
                  There are a few features of this model that one might find a little
                  surprising.  These quirks exist for the convenience of the
                  Swing BoundedRangeModel clients, such as &lt;code&gt;Slider&lt;/code&gt; and
                  &lt;code&gt;ScrollBar&lt;/code&gt;.
                  &lt;ul&gt;
                  &lt;li&gt;
                  The minimum and maximum set methods &quot;correct&quot; the other
                  three properties to accommodate their new value argument.  For
                  example setting the model&apos;s minimum may change its maximum, value,
                  and extent properties (in that order), to maintain the constraints
                  specified above.
                  &lt;li&gt;
                  The value and extent set methods &quot;correct&quot; their argument to
                  fit within the limits defined by the other three properties.
                  For example if &lt;code&gt;value == maximum&lt;/code&gt;, &lt;code&gt;setExtent(10)&lt;/code&gt;
                  would change the extent (back) to zero.
                  &lt;li&gt;
                  The four BoundedRangeModel values are defined as Java Beans properties
                  however Swing ChangeEvents are used to notify clients of changes rather
                  than PropertyChangeEvents. This was done to keep the overhead of monitoring
                  a BoundedRangeModel low. Changes are often reported at MouseDragged rates.
                  &lt;/ul&gt;
                  &lt;p&gt;
                  For an example of specifying custom bounded range models used by sliders,
                  see &lt;a
                  href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/overview/anatomy.html&quot;&gt;The Anatomy of a Swing-Based Program&lt;/a&gt;
                  in &lt;em&gt;The Java Tutorial.&lt;/em&gt;                
                <author>
                    Hans Muller                    
                </author>
                <see>
                    DefaultBoundedRangeModel                    
                </see>
            </javadoc>
            <method name="getMinimum" type="int" line="48"/>
            <javadoc line="48">
                Returns the minimum acceptable value.                
                <return>
                    the value of the minimum property                    
                </return>
                <see>
                    #setMinimum                    
                </see>
            </javadoc>
            <method name="setMinimum" type="void" line="54"/>
            <javadoc line="54">
                Sets the model&apos;s minimum to &lt;I&gt;newMinimum&lt;/I&gt;.   The
                  other three properties may be changed as well, to ensure
                  that:
                  &lt;pre&gt;
                  minimum &amp;lt;= value &amp;lt;= value+extent &amp;lt;= maximum
                  &lt;/pre&gt;
                  &lt;p&gt;
                  Notifies any listeners if the model changes.                
                <param>
                    newMinimum the model&apos;s new minimum                    
                </param>
                <see>
                    #getMinimum                    
                </see>
                <see>
                    #addChangeListener                    
                </see>
            </javadoc>
            <method name="getMaximum" type="int" line="68"/>
            <javadoc line="68">
                Returns the model&apos;s maximum.  Note that the upper
                  limit on the model&apos;s value is (maximum - extent).                
                <return>
                    the value of the maximum property.                    
                </return>
                <see>
                    #setMaximum                    
                </see>
                <see>
                    #setExtent                    
                </see>
            </javadoc>
            <method name="setMaximum" type="void" line="76"/>
            <javadoc line="76">
                Sets the model&apos;s maximum to &lt;I&gt;newMaximum&lt;/I&gt;. The other
                  three properties may be changed as well, to ensure that
                  &lt;pre&gt;
                  minimum &amp;lt;= value &amp;lt;= value+extent &amp;lt;= maximum
                  &lt;/pre&gt;
                  &lt;p&gt;
                  Notifies any listeners if the model changes.                
                <param>
                    newMaximum the model&apos;s new maximum                    
                </param>
                <see>
                    #getMaximum                    
                </see>
                <see>
                    #addChangeListener                    
                </see>
            </javadoc>
            <method name="getValue" type="int" line="89"/>
            <javadoc line="89">
                Returns the model&apos;s current value.  Note that the upper
                  limit on the model&apos;s value is &lt;code&gt;maximum - extent&lt;/code&gt;
                  and the lower limit is &lt;code&gt;minimum&lt;/code&gt;.                
                <return>
                    the model&apos;s value                    
                </return>
                <see>
                    #setValue                    
                </see>
            </javadoc>
            <method name="setValue" type="void" line="97"/>
            <javadoc line="97">
                Sets the model&apos;s current value to &lt;code&gt;newValue&lt;/code&gt; if &lt;code&gt;newValue&lt;/code&gt;
                  satisfies the model&apos;s constraints. Those constraints are:
                  &lt;pre&gt;
                  minimum &amp;lt;= value &amp;lt;= value+extent &amp;lt;= maximum
                  &lt;/pre&gt;
                  Otherwise, if &lt;code&gt;newValue&lt;/code&gt; is less than &lt;code&gt;minimum&lt;/code&gt;
                  it&apos;s set to &lt;code&gt;minimum&lt;/code&gt;, if its greater than
                  &lt;code&gt;maximum&lt;/code&gt; then it&apos;s set to &lt;code&gt;maximum&lt;/code&gt;, and
                  if it&apos;s greater than &lt;code&gt;value+extent&lt;/code&gt; then it&apos;s set to
                  &lt;code&gt;value+extent&lt;/code&gt;.
                  &lt;p&gt;
                  When a BoundedRange model is used with a scrollbar the value
                  specifies the origin of the scrollbar knob (aka the &quot;thumb&quot; or
                  &quot;elevator&quot;).  The value usually represents the origin of the
                  visible part of the object being scrolled.
                  &lt;p&gt;
                  Notifies any listeners if the model changes.                
                <param>
                    newValue the model&apos;s new value                    
                </param>
                <see>
                    #getValue                    
                </see>
            </javadoc>
            <method name="setValueIsAdjusting" type="void" line="119"/>
            <javadoc line="119">
                This attribute indicates that any upcoming changes to the value
                  of the model should be considered a single event. This attribute
                  will be set to true at the start of a series of changes to the value,
                  and will be set to false when the value has finished changing.  Normally
                  this allows a listener to only take action when the final value change in
                  committed, instead of having to do updates for all intermediate values.
                  &lt;p&gt;
                  Sliders and scrollbars use this property when a drag is underway.                
                <param>
                    b true if the upcoming changes to the value property are part of a series                    
                </param>
            </javadoc>
            <method name="getValueIsAdjusting" type="boolean" line="131"/>
            <javadoc line="131">
                Returns true if the current changes to the value property are part
                  of a series of changes.                
                <return>
                    the valueIsAdjustingProperty.                    
                </return>
                <see>
                    #setValueIsAdjusting                    
                </see>
            </javadoc>
            <method name="getExtent" type="int" line="138"/>
            <javadoc line="138">
                Returns the model&apos;s extent, the length of the inner range that
                  begins at the model&apos;s value.                
                <return>
                    the value of the model&apos;s extent property                    
                </return>
                <see>
                    #setExtent                    
                </see>
                <see>
                    #setValue                    
                </see>
            </javadoc>
            <method name="setExtent" type="void" line="146"/>
            <javadoc line="146">
                Sets the model&apos;s extent.  The &lt;I&gt;newExtent&lt;/I&gt; is forced to
                  be greater than or equal to zero and less than or equal to
                  maximum - value.
                  &lt;p&gt;
                  When a BoundedRange model is used with a scrollbar the extent
                  defines the length of the scrollbar knob (aka the &quot;thumb&quot; or
                  &quot;elevator&quot;).  The extent usually represents how much of the
                  object being scrolled is visible. When used with a slider,
                  the extent determines how much the value can &quot;jump&quot;, for
                  example when the user presses PgUp or PgDn.
                  &lt;p&gt;
                  Notifies any listeners if the model changes.                
                <param>
                    newExtent the model&apos;s new extent                    
                </param>
                <see>
                    #getExtent                    
                </see>
                <see>
                    #setValue                    
                </see>
            </javadoc>
            <method name="setRangeProperties" type="void" line="164"/>
            <javadoc line="164">
                This method sets all of the model&apos;s data with a single method call.
                  The method results in a single change event being generated. This is
                  convenient when you need to adjust all the model data simultaneously and
                  do not want individual change events to occur.                
                <param>
                    value  an int giving the current value                    
                </param>
                <param>
                    extent an int giving the amount by which the value can &quot;jump&quot;                    
                </param>
                <param>
                    min    an int giving the minimum value                    
                </param>
                <param>
                    max    an int giving the maximum value                    
                </param>
                <param>
                    adjusting a boolean, true if a series of changes are in
                      progress                    
                </param>
                <see>
                    #setValue                    
                </see>
                <see>
                    #setExtent                    
                </see>
                <see>
                    #setMinimum                    
                </see>
                <see>
                    #setMaximum                    
                </see>
                <see>
                    #setValueIsAdjusting                    
                </see>
            </javadoc>
            <method name="addChangeListener" type="void" line="182"/>
            <javadoc line="182">
                Adds a ChangeListener to the model&apos;s listener list.                
                <param>
                    x the ChangeListener to add                    
                </param>
                <see>
                    #removeChangeListener                    
                </see>
            </javadoc>
            <method name="removeChangeListener" type="void" line="188"/>
            <javadoc line="188">
                Removes a ChangeListener from the model&apos;s listener list.                
                <param>
                    x the ChangeListener to remove                    
                </param>
                <see>
                    #addChangeListener                    
                </see>
            </javadoc>
        </interface>
    </source>