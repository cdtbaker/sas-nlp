<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="javax.swing.plaf"/>
        <import package="javax.swing.border"/>
        <import package="javax.swing.event"/>
        <import package="javax.accessibility"/>
        <import package="java.awt.Component"/>
        <import package="java.awt.ComponentOrientation"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.Insets"/>
        <import package="java.awt.LayoutManager"/>
        <import package="java.awt.Point"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.beans.PropertyChangeEvent"/>
        <import package="java.beans.PropertyChangeListener"/>
        <import package="java.beans.Transient"/>
        <class name="JScrollPane" line="17">
            <extends class="JComponent"/>
            <implements interface="ScrollPaneConstants"/>
            <implements interface="Accessible"/>
            <javadoc line="17">
                Provides a scrollable view of a lightweight component.
                  A &lt;code&gt;JScrollPane&lt;/code&gt; manages a viewport, optional
                  vertical and horizontal scroll bars, and optional row and
                  column heading viewports.
                  You can find task-oriented documentation of &lt;code&gt;JScrollPane&lt;/code&gt; in
                  &lt;a href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/components/scrollpane.html&quot;&gt;How to Use Scroll Panes&lt;/a&gt;,
                  a section in &lt;em&gt;The Java Tutorial&lt;/em&gt;.  Note that
                  &lt;code&gt;JScrollPane&lt;/code&gt; does not support heavyweight components.
                  &lt;p&gt;
                  &lt;TABLE ALIGN=&quot;RIGHT&quot; BORDER=&quot;0&quot; SUMMARY=&quot;layout&quot;&gt;
                  &lt;TR&gt;
                  &lt;TD ALIGN=&quot;CENTER&quot;&gt;
                  &lt;P ALIGN=&quot;CENTER&quot;&gt;&lt;IMG SRC=&quot;doc-files/JScrollPane-1.gif&quot;
                  alt=&quot;The following text describes this image.&quot;
                  WIDTH=&quot;256&quot; HEIGHT=&quot;248&quot; ALIGN=&quot;BOTTOM&quot; BORDER=&quot;0&quot;&gt;
                  &lt;/TD&gt;
                  &lt;/TR&gt;
                  &lt;/TABLE&gt;
                  The &lt;code&gt;JViewport&lt;/code&gt; provides a window,
                  or &amp;quot;viewport&amp;quot; onto a data
                  source -- for example, a text file. That data source is the
                  &amp;quot;scrollable client&amp;quot; (aka data model) displayed by the
                  &lt;code&gt;JViewport&lt;/code&gt; view.
                  A &lt;code&gt;JScrollPane&lt;/code&gt; basically consists of &lt;code&gt;JScrollBar&lt;/code&gt;s,
                  a &lt;code&gt;JViewport&lt;/code&gt;, and the wiring between them,
                  as shown in the diagram at right.
                  &lt;p&gt;
                  In addition to the scroll bars and viewport,
                  a &lt;code&gt;JScrollPane&lt;/code&gt; can have a
                  column header and a row header. Each of these is a
                  &lt;code&gt;JViewport&lt;/code&gt; object that
                  you specify with &lt;code&gt;setRowHeaderView&lt;/code&gt;,
                  and &lt;code&gt;setColumnHeaderView&lt;/code&gt;.
                  The column header viewport automatically scrolls left and right, tracking
                  the left-right scrolling of the main viewport.
                  (It never scrolls vertically, however.)
                  The row header acts in a similar fashion.
                  &lt;p&gt;
                  Where two scroll bars meet, the row header meets the column header,
                  or a scroll bar meets one of the headers, both components stop short
                  of the corner, leaving a rectangular space which is, by default, empty.
                  These spaces can potentially exist in any number of the four corners.
                  In the previous diagram, the top right space is present and identified
                  by the label &quot;corner component&quot;.
                  &lt;p&gt;
                  Any number of these empty spaces can be replaced by using the
                  &lt;code&gt;setCorner&lt;/code&gt; method to add a component to a particular corner.
                  (Note: The same component cannot be added to multiple corners.)
                  This is useful if there&apos;s
                  some extra decoration or function you&apos;d like to add to the scroll pane.
                  The size of each corner component is entirely determined by the size of the
                  headers and/or scroll bars that surround it.
                  &lt;p&gt;
                  A corner component will only be visible if there is an empty space in that
                  corner for it to exist in. For example, consider a component set into the
                  top right corner of a scroll pane with a column header. If the scroll pane&apos;s
                  vertical scrollbar is not present, perhaps because the view component hasn&apos;t
                  grown large enough to require it, then the corner component will not be
                  shown (since there is no empty space in that corner created by the meeting
                  of the header and vertical scroll bar). Forcing the scroll bar to always be
                  shown, using
                  &lt;code&gt;setVerticalScrollBarPolicy(VERTICAL_SCROLLBAR_ALWAYS)&lt;/code&gt;,
                  will ensure that the space for the corner component always exists.
                  &lt;p&gt;
                  To add a border around the main viewport,
                  you can use &lt;code&gt;setViewportBorder&lt;/code&gt;.
                  (Of course, you can also add a border around the whole scroll pane using
                  &lt;code&gt;setBorder&lt;/code&gt;.)
                  &lt;p&gt;
                  A common operation to want to do is to set the background color that will
                  be used if the main viewport view is smaller than the viewport, or is
                  not opaque. This can be accomplished by setting the background color
                  of the viewport, via &lt;code&gt;scrollPane.getViewport().setBackground()&lt;/code&gt;.
                  The reason for setting the color of the viewport and not the scrollpane
                  is that by default &lt;code&gt;JViewport&lt;/code&gt; is opaque
                  which, among other things, means it will completely fill
                  in its background using its background color.  Therefore when
                  &lt;code&gt;JScrollPane&lt;/code&gt; draws its background the viewport will
                  usually draw over it.
                  &lt;p&gt;
                  By default &lt;code&gt;JScrollPane&lt;/code&gt; uses &lt;code&gt;ScrollPaneLayout&lt;/code&gt;
                  to handle the layout of its child Components. &lt;code&gt;ScrollPaneLayout&lt;/code&gt;
                  determines the size to make the viewport view in one of two ways:
                  &lt;ol&gt;
                  &lt;li&gt;If the view implements &lt;code&gt;Scrollable&lt;/code&gt;
                  a combination of &lt;code&gt;getPreferredScrollableViewportSize&lt;/code&gt;,
                  &lt;code&gt;getScrollableTracksViewportWidth&lt;/code&gt; and
                  &lt;code&gt;getScrollableTracksViewportHeight&lt;/code&gt;is used, otherwise
                  &lt;li&gt;&lt;code&gt;getPreferredSize&lt;/code&gt; is used.
                  &lt;/ol&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt; Swing is not thread safe. For more
                  information see &lt;a
                  href=&quot;package-summary.html#threading&quot;&gt;Swing&apos;s Threading
                  Policy&lt;/a&gt;.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <see>
                    JScrollBar                    
                </see>
                <see>
                    JViewport                    
                </see>
                <see>
                    ScrollPaneLayout                    
                </see>
                <see>
                    Scrollable                    
                </see>
                <see>
                    Component#getPreferredSize                    
                </see>
                <see>
                    #setViewportView                    
                </see>
                <see>
                    #setRowHeaderView                    
                </see>
                <see>
                    #setColumnHeaderView                    
                </see>
                <see>
                    #setCorner                    
                </see>
                <see>
                    #setViewportBorder                    
                </see>
                <beaninfoattribute>
                    : isContainer true
                      attribute: containerDelegate getViewport
                      description: A specialized container that manages a viewport, optional scrollbars and headers                    
                </beaninfoattribute>
                <author>
                    Hans Muller                    
                </author>
            </javadoc>
            <declaration name="viewportBorder" type="Border" line="138"/>
            <declaration name="uiClassID" type="String" line="139"/>
            <javadoc line="139">
                @see #getUIClassID                
                <see>
                    #readObject                    
                </see>
            </javadoc>
            <declaration name="verticalScrollBarPolicy" type="int" line="144"/>
            <javadoc line="144">
                The display policy for the vertical scrollbar.
                  The default is
                  &lt;code&gt;ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED&lt;/code&gt;.                
                <see>
                    #setVerticalScrollBarPolicy                    
                </see>
            </javadoc>
            <declaration name="horizontalScrollBarPolicy" type="int" line="151"/>
            <javadoc line="151">
                The display policy for the horizontal scrollbar.
                  The default is
                  &lt;code&gt;ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED&lt;/code&gt;.                
                <see>
                    #setHorizontalScrollBarPolicy                    
                </see>
            </javadoc>
            <declaration name="viewport" type="JViewport" line="158"/>
            <javadoc line="158">
                The scrollpane&apos;s viewport child.  Default is an empty
                  &lt;code&gt;JViewport&lt;/code&gt;.                
                <see>
                    #setViewport                    
                </see>
            </javadoc>
            <declaration name="verticalScrollBar" type="JScrollBar" line="164"/>
            <javadoc line="164">
                The scrollpane&apos;s vertical scrollbar child.
                  Default is a &lt;code&gt;JScrollBar&lt;/code&gt;.                
                <see>
                    #setVerticalScrollBar                    
                </see>
            </javadoc>
            <declaration name="horizontalScrollBar" type="JScrollBar" line="170"/>
            <javadoc line="170">
                The scrollpane&apos;s horizontal scrollbar child.
                  Default is a &lt;code&gt;JScrollBar&lt;/code&gt;.                
                <see>
                    #setHorizontalScrollBar                    
                </see>
            </javadoc>
            <declaration name="rowHeader" type="JViewport" line="176"/>
            <javadoc line="176">
                The row header child.  Default is &lt;code&gt;null&lt;/code&gt;.                
                <see>
                    #setRowHeader                    
                </see>
            </javadoc>
            <declaration name="columnHeader" type="JViewport" line="181"/>
            <javadoc line="181">
                The column header child.  Default is &lt;code&gt;null&lt;/code&gt;.                
                <see>
                    #setColumnHeader                    
                </see>
            </javadoc>
            <declaration name="lowerLeft" type="Component" line="186"/>
            <javadoc line="186">
                The component to display in the lower left corner.
                  Default is &lt;code&gt;null&lt;/code&gt;.                
                <see>
                    #setCorner                    
                </see>
            </javadoc>
            <declaration name="lowerRight" type="Component" line="192"/>
            <javadoc line="192">
                The component to display in the lower right corner.
                  Default is &lt;code&gt;null&lt;/code&gt;.                
                <see>
                    #setCorner                    
                </see>
            </javadoc>
            <declaration name="upperLeft" type="Component" line="198"/>
            <javadoc line="198">
                The component to display in the upper left corner.
                  Default is &lt;code&gt;null&lt;/code&gt;.                
                <see>
                    #setCorner                    
                </see>
            </javadoc>
            <declaration name="upperRight" type="Component" line="204"/>
            <javadoc line="204">
                The component to display in the upper right corner.
                  Default is &lt;code&gt;null&lt;/code&gt;.                
                <see>
                    #setCorner                    
                </see>
            </javadoc>
            <declaration name="wheelScrollState" type="boolean" line="210"/>
            <javadoc line="211">
                Creates a &lt;code&gt;JScrollPane&lt;/code&gt; that displays the view
                  component in a viewport
                  whose view position can be controlled with a pair of scrollbars.
                  The scrollbar policies specify when the scrollbars are displayed,
                  For example, if &lt;code&gt;vsbPolicy&lt;/code&gt; is
                  &lt;code&gt;VERTICAL_SCROLLBAR_AS_NEEDED&lt;/code&gt;
                  then the vertical scrollbar only appears if the view doesn&apos;t fit
                  vertically. The available policy settings are listed at{@link #setVerticalScrollBarPolicy} and{@link #setHorizontalScrollBarPolicy}.                
                <see>
                    #setViewportView                    
                </see>
                <param>
                    view the component to display in the scrollpanes viewport                    
                </param>
                <param>
                    vsbPolicy an integer that specifies the vertical
                      scrollbar policy                    
                </param>
                <param>
                    hsbPolicy an integer that specifies the horizontal
                      scrollbar policy                    
                </param>
            </javadoc>
            <method name="JScrollPane" type="constructor" line="227">
                <params>
                    <param name="view" type="Component"/>
                    <param name="vsbPolicy" type="int"/>
                    <param name="hsbPolicy" type="int"/>
                </params>
                <scope line="234"/>
                <scope line="239"/>
            </method>
            <javadoc line="243">
                Creates a &lt;code&gt;JScrollPane&lt;/code&gt; that displays the
                  contents of the specified
                  component, where both horizontal and vertical scrollbars appear
                  whenever the component&apos;s contents are larger than the view.                
                <see>
                    #setViewportView                    
                </see>
                <param>
                    view the component to display in the scrollpane&apos;s viewport                    
                </param>
            </javadoc>
            <method name="JScrollPane" type="constructor" line="251">
                <params>
                    <param name="view" type="Component"/>
                </params>
            </method>
            <javadoc line="254">
                Creates an empty (no viewport view) &lt;code&gt;JScrollPane&lt;/code&gt;
                  with specified
                  scrollbar policies. The available policy settings are listed at{@link #setVerticalScrollBarPolicy} and{@link #setHorizontalScrollBarPolicy}.                
                <see>
                    #setViewportView                    
                </see>
                <param>
                    vsbPolicy an integer that specifies the vertical
                      scrollbar policy                    
                </param>
                <param>
                    hsbPolicy an integer that specifies the horizontal
                      scrollbar policy                    
                </param>
            </javadoc>
            <method name="JScrollPane" type="constructor" line="264">
                <params>
                    <param name="vsbPolicy" type="int"/>
                    <param name="hsbPolicy" type="int"/>
                </params>
            </method>
            <javadoc line="267">
                Creates an empty (no viewport view) &lt;code&gt;JScrollPane&lt;/code&gt;
                  where both horizontal and vertical scrollbars appear when needed.                
            </javadoc>
            <method name="JScrollPane" type="constructor" line="271"/>
            <javadoc line="274">
                Returns the look and feel (L&amp;F) object that renders this component.                
                <return>
                    the &lt;code&gt;ScrollPaneUI&lt;/code&gt; object that renders this
                      component                    
                </return>
                <see>
                    #setUI                    
                </see>
                <beaninfobound>
                    : true
                      hidden: true
                      attribute: visualUpdate true
                      description: The UI object that implements the Component&apos;s LookAndFeel.                    
                </beaninfobound>
            </javadoc>
            <method name="getUI" type="ScrollPaneUI" line="284"/>
            <javadoc line="287">
                Sets the &lt;code&gt;ScrollPaneUI&lt;/code&gt; object that provides the
                  look and feel (L&amp;F) for this component.                
                <param>
                    ui the &lt;code&gt;ScrollPaneUI&lt;/code&gt; L&amp;F object                    
                </param>
                <see>
                    #getUI                    
                </see>
            </javadoc>
            <method name="setUI" type="void" line="293">
                <params>
                    <param name="ui" type="ScrollPaneUI"/>
                </params>
            </method>
            <javadoc line="296">
                Replaces the current &lt;code&gt;ScrollPaneUI&lt;/code&gt; object with a version
                  from the current default look and feel.
                  To be called when the default look and feel changes.                
                <see>
                    JComponent#updateUI                    
                </see>
                <see>
                    UIManager#getUI                    
                </see>
            </javadoc>
            <method name="updateUI" type="void" line="303"/>
            <javadoc line="306">
                Returns the suffix used to construct the name of the L&amp;F class used to
                  render this component.                
                <return>
                    the string &quot;ScrollPaneUI&quot;                    
                </return>
                <see>
                    JComponent#getUIClassID                    
                </see>
                <see>
                    UIDefaults#getUI                    
                </see>
                <beaninfohidden>
                    : true                    
                </beaninfohidden>
            </javadoc>
            <method name="getUIClassID" type="String" line="314"/>
            <javadoc line="317">
                Sets the layout manager for this &lt;code&gt;JScrollPane&lt;/code&gt;.
                  This method overrides &lt;code&gt;setLayout&lt;/code&gt; in
                  &lt;code&gt;java.awt.Container&lt;/code&gt; to ensure that only
                  &lt;code&gt;LayoutManager&lt;/code&gt;s which
                  are subclasses of &lt;code&gt;ScrollPaneLayout&lt;/code&gt; can be used in a
                  &lt;code&gt;JScrollPane&lt;/code&gt;. If &lt;code&gt;layout&lt;/code&gt; is non-null, this
                  will invoke &lt;code&gt;syncWithScrollPane&lt;/code&gt; on it.                
                <param>
                    layout the specified layout manager                    
                </param>
                <exception>
                    ClassCastException if layout is not a
                      &lt;code&gt;ScrollPaneLayout&lt;/code&gt;                    
                </exception>
                <see>
                    java.awt.Container#getLayout                    
                </see>
                <see>
                    java.awt.Container#setLayout                    
                </see>
                <beaninfohidden>
                    : true                    
                </beaninfohidden>
            </javadoc>
            <method name="setLayout" type="void" line="332">
                <params>
                    <param name="layout" type="LayoutManager"/>
                </params>
                <scope line="333"/>
                <scope line="337"/>
                <scope line="340">
                    <declaration name="s" type="String" line="341"/>
                </scope>
            </method>
            <javadoc line="345">
                Overridden to return true so that any calls to &lt;code&gt;revalidate&lt;/code&gt;
                  on any descendants of this &lt;code&gt;JScrollPane&lt;/code&gt; will cause the
                  entire tree beginning with this &lt;code&gt;JScrollPane&lt;/code&gt; to be
                  validated.                
                <return>
                    true                    
                </return>
                <see>
                    java.awt.Container#validate                    
                </see>
                <see>
                    JComponent#revalidate                    
                </see>
                <see>
                    JComponent#isValidateRoot                    
                </see>
                <see>
                    java.awt.Container#isValidateRoot                    
                </see>
                <beaninfohidden>
                    : true                    
                </beaninfohidden>
            </javadoc>
            <method name="isValidateRoot" type="boolean" line="357"/>
            <javadoc line="360">
                Returns the vertical scroll bar policy value.                
                <return>
                    the &lt;code&gt;verticalScrollBarPolicy&lt;/code&gt; property                    
                </return>
                <see>
                    #setVerticalScrollBarPolicy                    
                </see>
            </javadoc>
            <method name="getVerticalScrollBarPolicy" type="int" line="365"/>
            <javadoc line="368">
                Determines when the vertical scrollbar appears in the scrollpane.
                  Legal values are:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;code&gt;ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS&lt;/code&gt;
                  &lt;/ul&gt;                
                <param>
                    policy one of the three values listed above                    
                </param>
                <exception>
                    IllegalArgumentException if &lt;code&gt;policy&lt;/code&gt;
                      is not one of the legal values shown above                    
                </exception>
                <see>
                    #getVerticalScrollBarPolicy                    
                </see>
                <beaninfopreferred>
                    : true
                      bound: true
                      description: The scrollpane vertical scrollbar policy
                      enum: VERTICAL_SCROLLBAR_AS_NEEDED ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED
                      VERTICAL_SCROLLBAR_NEVER ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER
                      VERTICAL_SCROLLBAR_ALWAYS ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS                    
                </beaninfopreferred>
            </javadoc>
            <method name="setVerticalScrollBarPolicy" type="void" line="387">
                <params>
                    <param name="policy" type="int"/>
                </params>
                <declaration name="old" type="int" line="396"/>
            </method>
            <javadoc line="402">
                Returns the horizontal scroll bar policy value.                
                <return>
                    the &lt;code&gt;horizontalScrollBarPolicy&lt;/code&gt; property                    
                </return>
                <see>
                    #setHorizontalScrollBarPolicy                    
                </see>
            </javadoc>
            <method name="getHorizontalScrollBarPolicy" type="int" line="407"/>
            <javadoc line="410">
                Determines when the horizontal scrollbar appears in the scrollpane.
                  The options are:&lt;ul&gt;
                  &lt;li&gt;&lt;code&gt;ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS&lt;/code&gt;
                  &lt;/ul&gt;                
                <param>
                    policy one of the three values listed above                    
                </param>
                <exception>
                    IllegalArgumentException if &lt;code&gt;policy&lt;/code&gt;
                      is not one of the legal values shown above                    
                </exception>
                <see>
                    #getHorizontalScrollBarPolicy                    
                </see>
                <beaninfopreferred>
                    : true
                      bound: true
                      description: The scrollpane scrollbar policy
                      enum: HORIZONTAL_SCROLLBAR_AS_NEEDED ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED
                      HORIZONTAL_SCROLLBAR_NEVER ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER
                      HORIZONTAL_SCROLLBAR_ALWAYS ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS                    
                </beaninfopreferred>
            </javadoc>
            <method name="setHorizontalScrollBarPolicy" type="void" line="428">
                <params>
                    <param name="policy" type="int"/>
                </params>
                <declaration name="old" type="int" line="437"/>
            </method>
            <javadoc line="443">
                Returns the &lt;code&gt;Border&lt;/code&gt; object that surrounds the viewport.                
                <return>
                    the &lt;code&gt;viewportBorder&lt;/code&gt; property                    
                </return>
                <see>
                    #setViewportBorder                    
                </see>
            </javadoc>
            <method name="getViewportBorder" type="Border" line="448"/>
            <javadoc line="451">
                Adds a border around the viewport.  Note that the border isn&apos;t
                  set on the viewport directly, &lt;code&gt;JViewport&lt;/code&gt; doesn&apos;t support
                  the &lt;code&gt;JComponent&lt;/code&gt; border property.
                  Similarly setting the &lt;code&gt;JScrollPane&lt;/code&gt;s
                  viewport doesn&apos;t affect the &lt;code&gt;viewportBorder&lt;/code&gt; property.
                  &lt;p&gt;
                  The default value of this property is computed by the look
                  and feel implementation.                
                <param>
                    viewportBorder the border to be added                    
                </param>
                <see>
                    #getViewportBorder                    
                </see>
                <see>
                    #setViewport                    
                </see>
                <beaninfopreferred>
                    : true
                      bound: true
                      description: The border around the viewport.                    
                </beaninfopreferred>
            </javadoc>
            <method name="setViewportBorder" type="void" line="467">
                <params>
                    <param name="viewportBorder" type="Border"/>
                </params>
                <declaration name="oldValue" type="Border" line="468"/>
            </method>
            <javadoc line="472">
                Returns the bounds of the viewport&apos;s border.                
                <return>
                    a &lt;code&gt;Rectangle&lt;/code&gt; object specifying the viewport border                    
                </return>
            </javadoc>
            <method name="getViewportBorderBounds" type="Rectangle" line="476">
                <declaration name="borderR" type="Rectangle" line="477"/>
                <declaration name="insets" type="Insets" line="478"/>
                <declaration name="leftToRight" type="boolean" line="483"/>
                <declaration name="colHead" type="JViewport" line="484"/>
                <scope line="485">
                    <declaration name="colHeadHeight" type="int" line="486"/>
                </scope>
                <declaration name="rowHead" type="JViewport" line="490"/>
                <scope line="491">
                    <declaration name="rowHeadWidth" type="int" line="492"/>
                    <scope line="493"/>
                </scope>
                <declaration name="vsb" type="JScrollBar" line="498"/>
                <scope line="499">
                    <declaration name="vsbWidth" type="int" line="500"/>
                    <scope line="501"/>
                </scope>
                <declaration name="hsb" type="JScrollBar" line="506"/>
                <scope line="507"/>
            </method>
            <class name="ScrollBar" line="512">
                <extends class="JScrollBar"/>
                <implements interface="UIResource"/>
                <javadoc line="512">
                    By default &lt;code&gt;JScrollPane&lt;/code&gt; creates scrollbars
                      that are instances
                      of this class.  &lt;code&gt;Scrollbar&lt;/code&gt; overrides the
                      &lt;code&gt;getUnitIncrement&lt;/code&gt; and &lt;code&gt;getBlockIncrement&lt;/code&gt;
                      methods so that, if the viewport&apos;s view is a &lt;code&gt;Scrollable&lt;/code&gt;,
                      the view is asked to compute these values. Unless
                      the unit/block increment have been explicitly set.
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      Serialized objects of this class will not be compatible with
                      future Swing releases. The current serialization support is
                      appropriate for short term storage or RMI between applications running
                      the same version of Swing.  As of 1.4, support for long term storage
                      of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                      has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                      Please see {@link java.beans.XMLEncoder}.                    
                    <see>
                        Scrollable                        
                    </see>
                    <see>
                        JScrollPane#createVerticalScrollBar                        
                    </see>
                    <see>
                        JScrollPane#createHorizontalScrollBar                        
                    </see>
                </javadoc>
                <declaration name="unitIncrementSet" type="boolean" line="534"/>
                <javadoc line="534">
                    Set to true when the unit increment has been explicitly set.
                      If this is false the viewport&apos;s view is obtained and if it
                      is an instance of &lt;code&gt;Scrollable&lt;/code&gt; the unit increment
                      from it is used.                    
                </javadoc>
                <declaration name="blockIncrementSet" type="boolean" line="541"/>
                <javadoc line="541">
                    Set to true when the block increment has been explicitly set.
                      If this is false the viewport&apos;s view is obtained and if it
                      is an instance of &lt;code&gt;Scrollable&lt;/code&gt; the block increment
                      from it is used.                    
                </javadoc>
                <javadoc line="548">
                    Creates a scrollbar with the specified orientation.
                      The options are:
                      &lt;ul&gt;
                      &lt;li&gt;&lt;code&gt;ScrollPaneConstants.VERTICAL&lt;/code&gt;
                      &lt;li&gt;&lt;code&gt;ScrollPaneConstants.HORIZONTAL&lt;/code&gt;
                      &lt;/ul&gt;                    
                    <param>
                        orientation  an integer specifying one of the legal
                          orientation values shown above                        
                    </param>
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <method name="ScrollBar" type="constructor" line="559">
                    <params>
                        <param name="orientation" type="int"/>
                    </params>
                </method>
                <javadoc line="563">
                    Messages super to set the value, and resets the
                      &lt;code&gt;unitIncrementSet&lt;/code&gt; instance variable to true.                    
                    <param>
                        unitIncrement the new unit increment value, in pixels                        
                    </param>
                </javadoc>
                <method name="setUnitIncrement" type="void" line="568">
                    <params>
                        <param name="unitIncrement" type="int"/>
                    </params>
                </method>
                <javadoc line="573">
                    Computes the unit increment for scrolling if the viewport&apos;s
                      view is a &lt;code&gt;Scrollable&lt;/code&gt; object.
                      Otherwise return &lt;code&gt;super.getUnitIncrement&lt;/code&gt;.                    
                    <param>
                        direction less than zero to scroll up/left,
                          greater than zero for down/right                        
                    </param>
                    <return>
                        an integer, in pixels, containing the unit increment                        
                    </return>
                    <see>
                        Scrollable#getScrollableUnitIncrement                        
                    </see>
                </javadoc>
                <method name="getUnitIncrement" type="int" line="582">
                    <params>
                        <param name="direction" type="int"/>
                    </params>
                    <declaration name="vp" type="JViewport" line="583"/>
                    <scope line="584">
                        <declaration name="view" type="Scrollable" line="585"/>
                        <declaration name="vr" type="Rectangle" line="586"/>
                    </scope>
                    <scope line="589"/>
                </method>
                <javadoc line="593">
                    Messages super to set the value, and resets the
                      &lt;code&gt;blockIncrementSet&lt;/code&gt; instance variable to true.                    
                    <param>
                        blockIncrement the new block increment value, in pixels                        
                    </param>
                </javadoc>
                <method name="setBlockIncrement" type="void" line="598">
                    <params>
                        <param name="blockIncrement" type="int"/>
                    </params>
                </method>
                <javadoc line="603">
                    Computes the block increment for scrolling if the viewport&apos;s
                      view is a &lt;code&gt;Scrollable&lt;/code&gt; object.  Otherwise
                      the &lt;code&gt;blockIncrement&lt;/code&gt; equals the viewport&apos;s width
                      or height.  If there&apos;s no viewport return
                      &lt;code&gt;super.getBlockIncrement&lt;/code&gt;.                    
                    <param>
                        direction less than zero to scroll up/left,
                          greater than zero for down/right                        
                    </param>
                    <return>
                        an integer, in pixels, containing the block increment                        
                    </return>
                    <see>
                        Scrollable#getScrollableBlockIncrement                        
                    </see>
                </javadoc>
                <method name="getBlockIncrement" type="int" line="614">
                    <params>
                        <param name="direction" type="int"/>
                    </params>
                    <declaration name="vp" type="JViewport" line="615"/>
                    <scope line="616"/>
                    <scope line="619">
                        <declaration name="view" type="Scrollable" line="620"/>
                        <declaration name="vr" type="Rectangle" line="621"/>
                    </scope>
                    <scope line="624"/>
                    <scope line="627"/>
                </method>
            </class>
            <javadoc line="632">
                Returns a &lt;code&gt;JScrollPane.ScrollBar&lt;/code&gt; by default.
                  Subclasses may override this method to force &lt;code&gt;ScrollPaneUI&lt;/code&gt;
                  implementations to use a &lt;code&gt;JScrollBar&lt;/code&gt; subclass.
                  Used by &lt;code&gt;ScrollPaneUI&lt;/code&gt; implementations to
                  create the horizontal scrollbar.                
                <return>
                    a &lt;code&gt;JScrollBar&lt;/code&gt; with a horizontal orientation                    
                </return>
                <see>
                    JScrollBar                    
                </see>
            </javadoc>
            <method name="createHorizontalScrollBar" type="JScrollBar" line="641"/>
            <javadoc line="644">
                Returns the horizontal scroll bar that controls the viewport&apos;s
                  horizontal view position.                
                <return>
                    the &lt;code&gt;horizontalScrollBar&lt;/code&gt; property                    
                </return>
                <see>
                    #setHorizontalScrollBar                    
                </see>
            </javadoc>
            <method name="getHorizontalScrollBar" type="JScrollBar" line="650"/>
            <javadoc line="653">
                Adds the scrollbar that controls the viewport&apos;s horizontal view
                  position to the scrollpane.
                  This is usually unnecessary, as &lt;code&gt;JScrollPane&lt;/code&gt; creates
                  horizontal and vertical scrollbars by default.                
                <param>
                    horizontalScrollBar the horizontal scrollbar to be added                    
                </param>
                <see>
                    #createHorizontalScrollBar                    
                </see>
                <see>
                    #getHorizontalScrollBar                    
                </see>
                <beaninfoexpert>
                    : true
                      bound: true
                      description: The horizontal scrollbar.                    
                </beaninfoexpert>
            </javadoc>
            <method name="setHorizontalScrollBar" type="void" line="665">
                <params>
                    <param name="horizontalScrollBar" type="JScrollBar"/>
                </params>
                <declaration name="old" type="JScrollBar" line="666"/>
                <scope line="668"/>
                <scope line="671"/>
            </method>
            <javadoc line="678">
                Returns a &lt;code&gt;JScrollPane.ScrollBar&lt;/code&gt; by default.  Subclasses
                  may override this method to force &lt;code&gt;ScrollPaneUI&lt;/code&gt;
                  implementations to use a &lt;code&gt;JScrollBar&lt;/code&gt; subclass.
                  Used by &lt;code&gt;ScrollPaneUI&lt;/code&gt; implementations to create the
                  vertical scrollbar.                
                <return>
                    a &lt;code&gt;JScrollBar&lt;/code&gt; with a vertical orientation                    
                </return>
                <see>
                    JScrollBar                    
                </see>
            </javadoc>
            <method name="createVerticalScrollBar" type="JScrollBar" line="687"/>
            <javadoc line="690">
                Returns the vertical scroll bar that controls the viewports
                  vertical view position.                
                <return>
                    the &lt;code&gt;verticalScrollBar&lt;/code&gt; property                    
                </return>
                <see>
                    #setVerticalScrollBar                    
                </see>
            </javadoc>
            <method name="getVerticalScrollBar" type="JScrollBar" line="696"/>
            <javadoc line="699">
                Adds the scrollbar that controls the viewports vertical view position
                  to the scrollpane.  This is usually unnecessary,
                  as &lt;code&gt;JScrollPane&lt;/code&gt; creates vertical and
                  horizontal scrollbars by default.                
                <param>
                    verticalScrollBar the new vertical scrollbar to be added                    
                </param>
                <see>
                    #createVerticalScrollBar                    
                </see>
                <see>
                    #getVerticalScrollBar                    
                </see>
                <beaninfoexpert>
                    : true
                      bound: true
                      description: The vertical scrollbar.                    
                </beaninfoexpert>
            </javadoc>
            <method name="setVerticalScrollBar" type="void" line="711">
                <params>
                    <param name="verticalScrollBar" type="JScrollBar"/>
                </params>
                <declaration name="old" type="JScrollBar" line="712"/>
            </method>
            <javadoc line="719">
                Returns a new &lt;code&gt;JViewport&lt;/code&gt; by default.
                  Used to create the
                  viewport (as needed) in &lt;code&gt;setViewportView&lt;/code&gt;,
                  &lt;code&gt;setRowHeaderView&lt;/code&gt;, and &lt;code&gt;setColumnHeaderView&lt;/code&gt;.
                  Subclasses may override this method to return a subclass of
                  &lt;code&gt;JViewport&lt;/code&gt;.                
                <return>
                    a new &lt;code&gt;JViewport&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="createViewport" type="JViewport" line="728"/>
            <javadoc line="731">
                Returns the current &lt;code&gt;JViewport&lt;/code&gt;.                
                <see>
                    #setViewport                    
                </see>
                <return>
                    the &lt;code&gt;viewport&lt;/code&gt; property                    
                </return>
            </javadoc>
            <method name="getViewport" type="JViewport" line="736"/>
            <javadoc line="739">
                Removes the old viewport (if there is one); forces the
                  viewPosition of the new viewport to be in the +x,+y quadrant;
                  syncs up the row and column headers (if there are any) with the
                  new viewport; and finally syncs the scrollbars and
                  headers with the new viewport.
                  &lt;p&gt;
                  Most applications will find it more convenient to use
                  &lt;code&gt;setViewportView&lt;/code&gt;
                  to add a viewport and a view to the scrollpane.                
                <param>
                    viewport the new viewport to be used; if viewport is
                      &lt;code&gt;null&lt;/code&gt;, the old viewport is still removed
                      and the new viewport is set to &lt;code&gt;null&lt;/code&gt;                    
                </param>
                <see>
                    #createViewport                    
                </see>
                <see>
                    #getViewport                    
                </see>
                <see>
                    #setViewportView                    
                </see>
                <beaninfoexpert>
                    : true
                      bound: true
                      attribute: visualUpdate true
                      description: The viewport child for this scrollpane                    
                </beaninfoexpert>
            </javadoc>
            <method name="setViewport" type="void" line="760">
                <params>
                    <param name="viewport" type="JViewport"/>
                </params>
                <declaration name="old" type="JViewport" line="761"/>
                <scope line="763"/>
                <scope line="766"/>
                <scope line="770"/>
            </method>
            <javadoc line="776">
                Creates a viewport if necessary and then sets its view.  Applications
                  that don&apos;t provide the view directly to the &lt;code&gt;JScrollPane&lt;/code&gt;
                  constructor
                  should use this method to specify the scrollable child that&apos;s going
                  to be displayed in the scrollpane. For example:
                  &lt;pre&gt;
                  JScrollPane scrollpane = new JScrollPane();
                  scrollpane.setViewportView(myBigComponentToScroll);
                  &lt;/pre&gt;
                  Applications should not add children directly to the scrollpane.                
                <param>
                    view the component to add to the viewport                    
                </param>
                <see>
                    #setViewport                    
                </see>
                <see>
                    JViewport#setView                    
                </see>
            </javadoc>
            <method name="setViewportView" type="void" line="791">
                <params>
                    <param name="view" type="Component"/>
                </params>
                <scope line="792"/>
            </method>
            <javadoc line="797">
                Returns the row header.                
                <return>
                    the &lt;code&gt;rowHeader&lt;/code&gt; property                    
                </return>
                <see>
                    #setRowHeader                    
                </see>
            </javadoc>
            <method name="getRowHeader" type="JViewport" line="802"/>
            <javadoc line="805">
                Removes the old rowHeader, if it exists; if the new rowHeader
                  isn&apos;t &lt;code&gt;null&lt;/code&gt;, syncs the y coordinate of its
                  viewPosition with
                  the viewport (if there is one) and then adds it to the scroll pane.
                  &lt;p&gt;
                  Most applications will find it more convenient to use
                  &lt;code&gt;setRowHeaderView&lt;/code&gt;
                  to add a row header component and its viewport to the scroll pane.                
                <param>
                    rowHeader the new row header to be used; if &lt;code&gt;null&lt;/code&gt;
                      the old row header is still removed and the new rowHeader
                      is set to &lt;code&gt;null&lt;/code&gt;                    
                </param>
                <see>
                    #getRowHeader                    
                </see>
                <see>
                    #setRowHeaderView                    
                </see>
                <beaninfobound>
                    : true
                      expert: true
                      description: The row header child for this scrollpane                    
                </beaninfobound>
            </javadoc>
            <method name="setRowHeader" type="void" line="823">
                <params>
                    <param name="rowHeader" type="JViewport"/>
                </params>
                <declaration name="old" type="JViewport" line="824"/>
                <scope line="826"/>
                <scope line="829"/>
            </method>
            <javadoc line="836">
                Creates a row-header viewport if necessary, sets
                  its view and then adds the row-header viewport
                  to the scrollpane.  For example:
                  &lt;pre&gt;
                  JScrollPane scrollpane = new JScrollPane();
                  scrollpane.setViewportView(myBigComponentToScroll);
                  scrollpane.setRowHeaderView(myBigComponentsRowHeader);
                  &lt;/pre&gt;                
                <see>
                    #setRowHeader                    
                </see>
                <see>
                    JViewport#setView                    
                </see>
                <param>
                    view the component to display as the row header                    
                </param>
            </javadoc>
            <method name="setRowHeaderView" type="void" line="849">
                <params>
                    <param name="view" type="Component"/>
                </params>
                <scope line="850"/>
            </method>
            <javadoc line="855">
                Returns the column header.                
                <return>
                    the &lt;code&gt;columnHeader&lt;/code&gt; property                    
                </return>
                <see>
                    #setColumnHeader                    
                </see>
            </javadoc>
            <method name="getColumnHeader" type="JViewport" line="860"/>
            <javadoc line="863">
                Removes the old columnHeader, if it exists; if the new columnHeader
                  isn&apos;t &lt;code&gt;null&lt;/code&gt;, syncs the x coordinate of its viewPosition
                  with the viewport (if there is one) and then adds it to the scroll pane.
                  &lt;p&gt;
                  Most applications will find it more convenient to use
                  &lt;code&gt;setColumnHeaderView&lt;/code&gt;
                  to add a column header component and its viewport to the scroll pane.                
                <see>
                    #getColumnHeader                    
                </see>
                <see>
                    #setColumnHeaderView                    
                </see>
                <beaninfobound>
                    : true
                      description: The column header child for this scrollpane
                      attribute: visualUpdate true                    
                </beaninfobound>
            </javadoc>
            <method name="setColumnHeader" type="void" line="877">
                <params>
                    <param name="columnHeader" type="JViewport"/>
                </params>
                <declaration name="old" type="JViewport" line="878"/>
                <scope line="880"/>
                <scope line="883"/>
            </method>
            <javadoc line="890">
                Creates a column-header viewport if necessary, sets
                  its view, and then adds the column-header viewport
                  to the scrollpane.  For example:
                  &lt;pre&gt;
                  JScrollPane scrollpane = new JScrollPane();
                  scrollpane.setViewportView(myBigComponentToScroll);
                  scrollpane.setColumnHeaderView(myBigComponentsColumnHeader);
                  &lt;/pre&gt;                
                <see>
                    #setColumnHeader                    
                </see>
                <see>
                    JViewport#setView                    
                </see>
                <param>
                    view the component to display as the column header                    
                </param>
            </javadoc>
            <method name="setColumnHeaderView" type="void" line="903">
                <params>
                    <param name="view" type="Component"/>
                </params>
                <scope line="904"/>
            </method>
            <javadoc line="909">
                Returns the component at the specified corner. The
                  &lt;code&gt;key&lt;/code&gt; value specifying the corner is one of:
                  &lt;ul&gt;
                  &lt;li&gt;ScrollPaneConstants.LOWER_LEFT_CORNER
                  &lt;li&gt;ScrollPaneConstants.LOWER_RIGHT_CORNER
                  &lt;li&gt;ScrollPaneConstants.UPPER_LEFT_CORNER
                  &lt;li&gt;ScrollPaneConstants.UPPER_RIGHT_CORNER
                  &lt;li&gt;ScrollPaneConstants.LOWER_LEADING_CORNER
                  &lt;li&gt;ScrollPaneConstants.LOWER_TRAILING_CORNER
                  &lt;li&gt;ScrollPaneConstants.UPPER_LEADING_CORNER
                  &lt;li&gt;ScrollPaneConstants.UPPER_TRAILING_CORNER
                  &lt;/ul&gt;                
                <param>
                    key one of the values as shown above                    
                </param>
                <return>
                    the corner component (which may be &lt;code&gt;null&lt;/code&gt;)
                      identified by the given key, or &lt;code&gt;null&lt;/code&gt;
                      if the key is invalid                    
                </return>
                <see>
                    #setCorner                    
                </see>
            </javadoc>
            <method name="getCorner" type="Component" line="928">
                <params>
                    <param name="key" type="String"/>
                </params>
                <declaration name="isLeftToRight" type="boolean" line="929"/>
                <scope line="930"/>
                <scope line="933"/>
                <scope line="936"/>
                <scope line="939"/>
                <scope line="942"/>
                <scope line="945"/>
                <scope line="948"/>
                <scope line="951"/>
                <scope line="954"/>
            </method>
            <javadoc line="958">
                Adds a child that will appear in one of the scroll panes
                  corners, if there&apos;s room.   For example with both scrollbars
                  showing (on the right and bottom edges of the scrollpane)
                  the lower left corner component will be shown in the space
                  between ends of the two scrollbars. Legal values for
                  the &lt;b&gt;key&lt;/b&gt; are:
                  &lt;ul&gt;
                  &lt;li&gt;ScrollPaneConstants.LOWER_LEFT_CORNER
                  &lt;li&gt;ScrollPaneConstants.LOWER_RIGHT_CORNER
                  &lt;li&gt;ScrollPaneConstants.UPPER_LEFT_CORNER
                  &lt;li&gt;ScrollPaneConstants.UPPER_RIGHT_CORNER
                  &lt;li&gt;ScrollPaneConstants.LOWER_LEADING_CORNER
                  &lt;li&gt;ScrollPaneConstants.LOWER_TRAILING_CORNER
                  &lt;li&gt;ScrollPaneConstants.UPPER_LEADING_CORNER
                  &lt;li&gt;ScrollPaneConstants.UPPER_TRAILING_CORNER
                  &lt;/ul&gt;
                  &lt;p&gt;
                  Although &quot;corner&quot; doesn&apos;t match any beans property
                  signature, &lt;code&gt;PropertyChange&lt;/code&gt; events are generated with the
                  property name set to the corner key.                
                <param>
                    key identifies which corner the component will appear in                    
                </param>
                <param>
                    corner one of the following components:
                      &lt;ul&gt;
                      &lt;li&gt;lowerLeft
                      &lt;li&gt;lowerRight
                      &lt;li&gt;upperLeft
                      &lt;li&gt;upperRight
                      &lt;/ul&gt;                    
                </param>
                <exception>
                    IllegalArgumentException if corner key is invalid                    
                </exception>
            </javadoc>
            <method name="setCorner" type="void" line="989">
                <params>
                    <param name="key" type="String"/>
                    <param name="corner" type="Component"/>
                </params>
                <declaration name="old" type="Component" line="990"/>
                <declaration name="isLeftToRight" type="boolean" line="991"/>
                <scope line="992"/>
                <scope line="995"/>
                <scope line="998"/>
                <scope line="1001"/>
                <scope line="1004"/>
                <scope line="1008"/>
                <scope line="1012"/>
                <scope line="1016"/>
                <scope line="1020"/>
                <scope line="1023"/>
                <scope line="1026"/>
            </method>
            <javadoc line="1033">
                Sets the orientation for the vertical and horizontal
                  scrollbars as determined by the
                  &lt;code&gt;ComponentOrientation&lt;/code&gt; argument.                
                <param>
                    co one of the following values:
                      &lt;ul&gt;
                      &lt;li&gt;java.awt.ComponentOrientation.LEFT_TO_RIGHT
                      &lt;li&gt;java.awt.ComponentOrientation.RIGHT_TO_LEFT
                      &lt;li&gt;java.awt.ComponentOrientation.UNKNOWN
                      &lt;/ul&gt;                    
                </param>
                <see>
                    java.awt.ComponentOrientation                    
                </see>
            </javadoc>
            <method name="setComponentOrientation" type="void" line="1045">
                <params>
                    <param name="co" type="ComponentOrientation"/>
                </params>
            </method>
            <javadoc line="1050">
                Indicates whether or not scrolling will take place in response to the
                  mouse wheel.  Wheel scrolling is enabled by default.                
                <see>
                    #setWheelScrollingEnabled                    
                </see>
                <since>
                    1.4                    
                </since>
                <beaninfobound>
                    : true
                      description: Flag for enabling/disabling mouse wheel scrolling                    
                </beaninfobound>
            </javadoc>
            <method name="isWheelScrollingEnabled" type="boolean" line="1058"/>
            <javadoc line="1061">
                Enables/disables scrolling in response to movement of the mouse wheel.
                  Wheel scrolling is enabled by default.                
                <param>
                    handleWheel   &lt;code&gt;true&lt;/code&gt; if scrolling should be done
                      automatically for a MouseWheelEvent,
                      &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </param>
                <see>
                    #isWheelScrollingEnabled                    
                </see>
                <see>
                    java.awt.event.MouseWheelEvent                    
                </see>
                <see>
                    java.awt.event.MouseWheelListener                    
                </see>
                <since>
                    1.4                    
                </since>
                <beaninfobound>
                    : true
                      description: Flag for enabling/disabling mouse wheel scrolling                    
                </beaninfobound>
            </javadoc>
            <method name="setWheelScrollingEnabled" type="void" line="1074">
                <params>
                    <param name="handleWheel" type="boolean"/>
                </params>
                <declaration name="old" type="boolean" line="1075"/>
            </method>
            <javadoc line="1079">
                See &lt;code&gt;readObject&lt;/code&gt; and &lt;code&gt;writeObject&lt;/code&gt; in
                  &lt;code&gt;JComponent&lt;/code&gt; for more
                  information about serialization in Swing.                
            </javadoc>
            <method name="writeObject" type="void" line="1084">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
                <scope line="1086">
                    <declaration name="count" type="byte" line="1087"/>
                    <scope line="1089"/>
                </scope>
            </method>
            <javadoc line="1094">
                Returns a string representation of this &lt;code&gt;JScrollPane&lt;/code&gt;.
                  This method
                  is intended to be used only for debugging purposes, and the
                  content and format of the returned string may vary between
                  implementations. The returned string may be empty but may not
                  be &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    a string representation of this &lt;code&gt;JScrollPane&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="paramString" type="String" line="1103">
                <declaration name="viewportBorderString" type="String" line="1104"/>
                <declaration name="viewportString" type="String" line="1105"/>
                <declaration name="verticalScrollBarPolicyString" type="String" line="1106"/>
                <scope line="1107"/>
                <scope line="1110"/>
                <scope line="1113"/>
                <declaration name="horizontalScrollBarPolicyString" type="String" line="1117"/>
                <scope line="1118"/>
                <scope line="1121"/>
                <scope line="1124"/>
                <declaration name="horizontalScrollBarString" type="String" line="1128"/>
                <declaration name="verticalScrollBarString" type="String" line="1129"/>
                <declaration name="columnHeaderString" type="String" line="1130"/>
                <declaration name="rowHeaderString" type="String" line="1131"/>
                <declaration name="lowerLeftString" type="String" line="1132"/>
                <declaration name="lowerRightString" type="String" line="1133"/>
                <declaration name="upperLeftString" type="String" line="1134"/>
                <declaration name="upperRightString" type="String" line="1135"/>
            </method>
            <javadoc line="1138">
                Gets the AccessibleContext associated with this JScrollPane.
                  For scroll panes, the AccessibleContext takes the form of an
                  AccessibleJScrollPane.
                  A new AccessibleJScrollPane instance is created if necessary.                
                <return>
                    an AccessibleJScrollPane that serves as the
                      AccessibleContext of this JScrollPane                    
                </return>
            </javadoc>
            <method name="getAccessibleContext" type="AccessibleContext" line="1146">
                <scope line="1147"/>
            </method>
            <class name="AccessibleJScrollPane" line="1152">
                <extends class="AccessibleJComponent"/>
                <implements interface="ChangeListener"/>
                <implements interface="PropertyChangeListener"/>
                <javadoc line="1152">
                    This class implements accessibility support for the
                      &lt;code&gt;JScrollPane&lt;/code&gt; class.  It provides an implementation of the
                      Java Accessibility API appropriate to scroll pane user-interface
                      elements.
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      Serialized objects of this class will not be compatible with
                      future Swing releases. The current serialization support is
                      appropriate for short term storage or RMI between applications running
                      the same version of Swing.  As of 1.4, support for long term storage
                      of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                      has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                      Please see {@link java.beans.XMLEncoder}.                    
                </javadoc>
                <declaration name="viewPort" type="JViewport" line="1168"/>
                <method name="resetViewPort" type="void" line="1169">
                    <scope line="1170"/>
                    <scope line="1175"/>
                </method>
                <javadoc line="1180">
                    AccessibleJScrollPane constructor                    
                </javadoc>
                <method name="AccessibleJScrollPane" type="constructor" line="1183">
                    <declaration name="scrollBar" type="JScrollBar" line="1186"/>
                    <scope line="1187"/>
                    <scope line="1191"/>
                </method>
                <javadoc line="1195">
                    Get the role of this object.                    
                    <return>
                        an instance of AccessibleRole describing the role of the
                          object                        
                    </return>
                    <see>
                        AccessibleRole                        
                    </see>
                </javadoc>
                <method name="getAccessibleRole" type="AccessibleRole" line="1201"/>
                <javadoc line="1204">
                    Invoked when the target of the listener has changed its state.                    
                    <param>
                        e  a &lt;code&gt;ChangeEvent&lt;/code&gt; object. Must not be null.                        
                    </param>
                    <throws>
                        NullPointerException if the parameter is null.                        
                    </throws>
                </javadoc>
                <method name="stateChanged" type="void" line="1209">
                    <params>
                        <param name="e" type="ChangeEvent"/>
                    </params>
                    <scope line="1210"/>
                </method>
                <javadoc line="1215">
                    This method gets called when a bound property is changed.                    
                    <param>
                        e A &lt;code&gt;PropertyChangeEvent&lt;/code&gt; object describing
                          the event source and the property that has changed. Must not be null.                        
                    </param>
                    <throws>
                        NullPointerException if the parameter is null.                        
                    </throws>
                    <since>
                        1.5                        
                    </since>
                </javadoc>
                <method name="propertyChange" type="void" line="1222">
                    <params>
                        <param name="e" type="PropertyChangeEvent"/>
                    </params>
                    <declaration name="propertyName" type="String" line="1223"/>
                    <scope line="1224">
                        <scope line="1225"/>
                    </scope>
                </method>
                <method name="setScrollBarRelations" type="void" line="1230">
                    <params>
                        <param name="scrollBar" type="JScrollBar"/>
                    </params>
                    <declaration name="controlledBy" type="AccessibleRelation" line="1231"/>
                    <declaration name="controllerFor" type="AccessibleRelation" line="1232"/>
                    <declaration name="ac" type="AccessibleContext" line="1233"/>
                </method>
            </class>
        </class>
    </source>