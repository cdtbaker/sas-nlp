<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="javax.swing.table"/>
        <import package="java.awt"/>
        <import package="java.awt.print"/>
        <import package="java.awt.geom"/>
        <import package="java.text.MessageFormat"/>
        <class name="TablePrintable" line="34">
            <implements interface="Printable"/>
            <javadoc line="34">
                An implementation of &lt;code&gt;Printable&lt;/code&gt; for printing
                  &lt;code&gt;JTable&lt;/code&gt;s.
                  &lt;p&gt;
                  This implementation spreads table rows naturally in sequence
                  across multiple pages, fitting as many rows as possible per page.
                  The distribution of columns, on the other hand, is controlled by a
                  printing mode parameter passed to the constructor. When
                  &lt;code&gt;JTable.PrintMode.NORMAL&lt;/code&gt; is used, the implementation
                  handles columns in a similar manner to how it handles rows, spreading them
                  across multiple pages (in an order consistent with the table&apos;s
                  &lt;code&gt;ComponentOrientation&lt;/code&gt;).
                  When &lt;code&gt;JTable.PrintMode.FIT_WIDTH&lt;/code&gt; is given, the implementation
                  scales the output smaller if necessary, to ensure that all columns fit on
                  the page. (Note that width and height are scaled equally, ensuring that the
                  aspect ratio remains the same).
                  &lt;p&gt;
                  The portion of table printed on each page is headed by the
                  appropriate section of the table&apos;s &lt;code&gt;JTableHeader&lt;/code&gt;.
                  &lt;p&gt;
                  Header and footer text can be added to the output by providing
                  &lt;code&gt;MessageFormat&lt;/code&gt; instances to the constructor. The
                  printing code requests Strings from the formats by calling
                  their &lt;code&gt;format&lt;/code&gt; method with a single parameter:
                  an &lt;code&gt;Object&lt;/code&gt; array containing a single element of type
                  &lt;code&gt;Integer&lt;/code&gt;, representing the current page number.
                  &lt;p&gt;
                  There are certain circumstances where this &lt;code&gt;Printable&lt;/code&gt;
                  cannot fit items appropriately, resulting in clipped output.
                  These are:
                  &lt;ul&gt;
                  &lt;li&gt;In any mode, when the header or footer text is too wide to
                  fit completely in the printable area. The implementation
                  prints as much of the text as possible starting from the beginning,
                  as determined by the table&apos;s &lt;code&gt;ComponentOrientation&lt;/code&gt;.
                  &lt;li&gt;In any mode, when a row is too tall to fit in the
                  printable area. The upper most portion of the row
                  is printed and no lower border is shown.
                  &lt;li&gt;In &lt;code&gt;JTable.PrintMode.NORMAL&lt;/code&gt; when a column
                  is too wide to fit in the printable area. The center of the
                  column is printed and no left and right borders are shown.
                  &lt;/ul&gt;
                  &lt;p&gt;
                  It is entirely valid for a developer to wrap this &lt;code&gt;Printable&lt;/code&gt;
                  inside another in order to create complex reports and documents. They may
                  even request that different pages be rendered into different sized
                  printable areas. The implementation was designed to handle this by
                  performing most of its calculations on the fly. However, providing different
                  sizes works best when &lt;code&gt;JTable.PrintMode.FIT_WIDTH&lt;/code&gt; is used, or
                  when only the printable width is changed between pages. This is because when
                  it is printing a set of rows in &lt;code&gt;JTable.PrintMode.NORMAL&lt;/code&gt; and the
                  implementation determines a need to distribute columns across pages,
                  it assumes that all of those rows will fit on each subsequent page needed
                  to fit the columns.
                  &lt;p&gt;
                  It is the responsibility of the developer to ensure that the table is not
                  modified in any way after this &lt;code&gt;Printable&lt;/code&gt; is created (invalid
                  modifications include changes in: size, renderers, or underlying data).
                  The behavior of this &lt;code&gt;Printable&lt;/code&gt; is undefined if the table is
                  changed at any time after creation.                
                <author>
                    Shannon Hickey                    
                </author>
            </javadoc>
            <declaration name="table" type="JTable" line="99"/>
            <javadoc line="99">
                The table to print.                
            </javadoc>
            <declaration name="header" type="JTableHeader" line="102"/>
            <javadoc line="102">
                For quick reference to the table&apos;s header.                
            </javadoc>
            <declaration name="colModel" type="TableColumnModel" line="105"/>
            <javadoc line="105">
                For quick reference to the table&apos;s column model.                
            </javadoc>
            <declaration name="totalColWidth" type="int" line="108"/>
            <javadoc line="108">
                To save multiple calculations of total column width.                
            </javadoc>
            <declaration name="printMode" type="JTable.PrintMode" line="111"/>
            <javadoc line="111">
                The printing mode of this printable.                
            </javadoc>
            <declaration name="headerFormat" type="MessageFormat" line="114"/>
            <javadoc line="114">
                Provides the header text for the table.                
            </javadoc>
            <declaration name="footerFormat" type="MessageFormat" line="117"/>
            <javadoc line="117">
                Provides the footer text for the table.                
            </javadoc>
            <declaration name="last" type="int" line="120"/>
            <javadoc line="120">
                The most recent page index asked to print.                
            </javadoc>
            <declaration name="row" type="int" line="123"/>
            <javadoc line="123">
                The next row to print.                
            </javadoc>
            <declaration name="col" type="int" line="126"/>
            <javadoc line="126">
                The next column to print.                
            </javadoc>
            <declaration name="clip" type="Rectangle" line="129"/>
            <javadoc line="129">
                Used to store an area of the table to be printed.                
            </javadoc>
            <declaration name="hclip" type="Rectangle" line="132"/>
            <javadoc line="132">
                Used to store an area of the table&apos;s header to be printed.                
            </javadoc>
            <declaration name="tempRect" type="Rectangle" line="135"/>
            <javadoc line="135">
                Saves the creation of multiple rectangles.                
            </javadoc>
            <declaration name="H_F_SPACE" type="int" line="138"/>
            <javadoc line="138">
                Vertical space to leave between table and header/footer text.                
            </javadoc>
            <declaration name="HEADER_FONT_SIZE" type="float" line="141"/>
            <javadoc line="141">
                Font size for the header text.                
            </javadoc>
            <declaration name="FOOTER_FONT_SIZE" type="float" line="144"/>
            <javadoc line="144">
                Font size for the footer text.                
            </javadoc>
            <declaration name="headerFont" type="Font" line="147"/>
            <javadoc line="147">
                The font to use in rendering header text.                
            </javadoc>
            <declaration name="footerFont" type="Font" line="150"/>
            <javadoc line="150">
                The font to use in rendering footer text.                
            </javadoc>
            <javadoc line="153">
                Create a new &lt;code&gt;TablePrintable&lt;/code&gt; for the given
                  &lt;code&gt;JTable&lt;/code&gt;. Header and footer text can be specified using the
                  two &lt;code&gt;MessageFormat&lt;/code&gt; parameters. When called upon to provide
                  a String, each format is given the current page number.                
                <param>
                    table         the table to print                    
                </param>
                <param>
                    printMode     the printing mode for this printable                    
                </param>
                <param>
                    headerFormat  a &lt;code&gt;MessageFormat&lt;/code&gt; specifying the text to
                      be used in printing a header, or null for none                    
                </param>
                <param>
                    footerFormat  a &lt;code&gt;MessageFormat&lt;/code&gt; specifying the text to
                      be used in printing a footer, or null for none                    
                </param>
                <throws>
                    IllegalArgumentException if passed an invalid print mode                    
                </throws>
            </javadoc>
            <method name="TablePrintable" type="constructor" line="170">
                <params>
                    <param name="table" type="JTable"/>
                    <param name="printMode" type="JTable.PrintMode"/>
                    <param name="headerFormat" type="MessageFormat"/>
                    <param name="footerFormat" type="MessageFormat"/>
                </params>
                <comment line="180">
                    the header clip height can be set once since it&apos;s unchanging                    
                </comment>
                <comment line="189">
                    derive the header and footer font from the table&apos;s font                    
                </comment>
                <scope line="178"/>
            </method>
            <javadoc line="195">
                Prints the specified page of the table into the given {@link Graphics}context, in the specified format.                
                <param>
                    graphics    the context into which the page is drawn                    
                </param>
                <param>
                    pageFormat  the size and orientation of the page being drawn                    
                </param>
                <param>
                    pageIndex   the zero based index of the page to be drawn                    
                </param>
                <return>
                    PAGE_EXISTS if the page is rendered successfully, or
                      NO_SUCH_PAGE if a non-existent page index is specified                    
                </return>
                <throws>
                    PrinterException if an error causes printing to be aborted                    
                </throws>
            </javadoc>
            <method name="print" type="int" line="207">
                <params>
                    <param name="graphics" type="Graphics"/>
                    <param name="pageFormat" type="PageFormat"/>
                    <param name="pageIndex" type="int"/>
                </params>
                <comment line="210">
                    for easy access to these values                    
                </comment>
                <comment line="218">
                    to pass the page number when formatting the header and footer text                    
                </comment>
                <comment line="221">
                    fetch the formatted header text, if any                    
                </comment>
                <comment line="227">
                    fetch the formatted footer text, if any                    
                </comment>
                <comment line="233">
                    to store the bounds of the header and footer text                    
                </comment>
                <comment line="237">
                    the amount of vertical space needed for the header and footer text                    
                </comment>
                <comment line="241">
                    the amount of vertical space available for printing the table                    
                </comment>
                <comment line="244">
                    if there&apos;s header text, find out how much space is needed for it
                     and subtract that from the available space                    
                </comment>
                <comment line="255">
                    if there&apos;s footer text, find out how much space is needed for it
                     and subtract that from the available space                    
                </comment>
                <comment line="270">
                    depending on the print mode, we may need a scale factor to
                     fit the table&apos;s entire width on the page                    
                </comment>
                <comment line="276">
                    if not, we would have thrown an acception previously                    
                </comment>
                <comment line="279">
                    it must be, according to the if-condition, since imgWidth &gt; 0                    
                </comment>
                <comment line="285">
                    dictated by the previous two assertions                    
                </comment>
                <comment line="288">
                    This is in a loop for two reasons:
                     First, it allows us to catch up in case we&apos;re called starting
                     with a non-zero pageIndex. Second, we know that we can be called
                     for the same page multiple times. The condition of this while
                     loop acts as a check, ensuring that we don&apos;t attempt to do the
                     calculations again when we are called subsequent times for the
                     same page.                    
                </comment>
                <comment line="296">
                    if we are finished all columns in all rows                    
                </comment>
                <comment line="301">
                    rather than multiplying every row and column by the scale factor
                     in findNextClip, just pass a width and height that have already
                     been divided by it                    
                </comment>
                <comment line="307">
                    calculate the area of the table to be printed for this page                    
                </comment>
                <comment line="313">
                    create a copy of the graphics so we don&apos;t affect the one given to us                    
                </comment>
                <comment line="316">
                    translate into the co-ordinate system of the pageFormat                    
                </comment>
                <comment line="319">
                    to save and store the transform                    
                </comment>
                <comment line="322">
                    if there&apos;s footer text, print it at the bottom of the imageable area                    
                </comment>
                <comment line="333">
                    if there&apos;s header text, print it at the top of the imageable area
                     and then translate downwards                    
                </comment>
                <comment line="341">
                    constrain the table output to the available space                    
                </comment>
                <comment line="348">
                    if we have a scale factor, scale the graphics object to fit
                     the entire width                    
                </comment>
                <comment line="353">
                    otherwise, ensure that the current portion of the table is
                     centered horizontally                    
                </comment>
                <comment line="360">
                    store the old transform and clip for later restoration                    
                </comment>
                <comment line="364">
                    if there&apos;s a table header, print the current section and
                     then translate downwards                    
                </comment>
                <comment line="374">
                    restore the original transform and clip                    
                </comment>
                <comment line="378">
                    translate downwards                    
                </comment>
                <comment line="382">
                    print the current section of the table                    
                </comment>
                <comment line="387">
                    restore the original transform and clip                    
                </comment>
                <comment line="391">
                    draw a box around the table                    
                </comment>
                <comment line="395">
                    dispose the graphics copy                    
                </comment>
                <declaration name="imgWidth" type="int" line="210"/>
                <declaration name="imgHeight" type="int" line="211"/>
                <scope line="213"/>
                <declaration name="pageNumber" type="Object[]" line="218"/>
                <declaration name="headerText" type="String" line="221"/>
                <scope line="222"/>
                <declaration name="footerText" type="String" line="227"/>
                <scope line="228"/>
                <declaration name="hRect" type="Rectangle2D" line="233"/>
                <declaration name="fRect" type="Rectangle2D" line="234"/>
                <declaration name="headerTextSpace" type="int" line="237"/>
                <declaration name="footerTextSpace" type="int" line="238"/>
                <declaration name="availableSpace" type="int" line="241"/>
                <scope line="245"/>
                <scope line="256"/>
                <scope line="265"/>
                <declaration name="sf" type="double" line="271"/>
                <scope line="273"/>
                <scope line="294">
                    <scope line="296"/>
                    <declaration name="scaledWidth" type="int" line="303"/>
                    <declaration name="scaledHeight" type="int" line="304"/>
                </scope>
                <declaration name="g2d" type="Graphics2D" line="313"/>
                <declaration name="oldTrans" type="AffineTransform" line="319"/>
                <scope line="322"/>
                <scope line="334"/>
                <scope line="349"/>
                <scope line="354">
                    <declaration name="diff" type="int" line="355"/>
                </scope>
                <declaration name="oldClip" type="Shape" line="361"/>
                <scope line="365"/>
            </method>
            <javadoc line="400">
                A helper method that encapsulates common code for rendering the
                  header and footer text.                
                <param>
                    g2d       the graphics to draw into                    
                </param>
                <param>
                    text      the text to draw, non null                    
                </param>
                <param>
                    rect      the bounding rectangle for this text,
                      as calculated at the given font, non null                    
                </param>
                <param>
                    font      the font to draw the text in, non null                    
                </param>
                <param>
                    imgWidth  the width of the area to draw into                    
                </param>
            </javadoc>
            <method name="printText" type="void" line="415">
                <params>
                    <param name="g2d" type="Graphics2D"/>
                    <param name="text" type="String"/>
                    <param name="rect" type="Rectangle2D"/>
                    <param name="font" type="Font"/>
                    <param name="imgWidth" type="int"/>
                </params>
                <comment line="420">
                    if the text is small enough to fit, center it                    
                </comment>
                <comment line="424">
                    otherwise, if the table is LTR, ensure the left side of
                     the text shows; the right can be clipped                    
                </comment>
                <comment line="429">
                    otherwise, ensure the right side of the text shows                    
                </comment>
                <declaration name="tx" type="int" line="417"/>
                <scope line="420"/>
                <scope line="425"/>
                <scope line="429"/>
                <declaration name="ty" type="int" line="433"/>
            </method>
            <javadoc line="439">
                Calculate the area of the table to be printed for
                  the next page. This should only be called if there
                  are rows and columns left to print.
                  To avoid an infinite loop in printing, this will
                  always put at least one cell on each page.                
                <param>
                    pw  the width of the area to print in                    
                </param>
                <param>
                    ph  the height of the area to print in                    
                </param>
            </javadoc>
            <method name="findNextClip" type="void" line="450">
                <params>
                    <param name="pw" type="int"/>
                    <param name="ph" type="int"/>
                </params>
                <comment line="454">
                    if we&apos;re ready to start a new set of rows                    
                </comment>
                <comment line="457">
                    adjust clip to the left of the first column                    
                </comment>
                <comment line="460">
                    adjust clip to the right of the first column                    
                </comment>
                <comment line="464">
                    adjust clip to the top of the next set of rows                    
                </comment>
                <comment line="467">
                    adjust clip width and height to be zero                    
                </comment>
                <comment line="471">
                    fit as many rows as possible, and at least one                    
                </comment>
                <comment line="485">
                    we can short-circuit for JTable.PrintMode.FIT_WIDTH since
                     we&apos;ll always fit all columns on the page                    
                </comment>
                <comment line="494">
                    adjust clip to the left of the next set of columns                    
                </comment>
                <comment line="498">
                    adjust clip width to be zero                    
                </comment>
                <comment line="501">
                    fit as many columns as possible, and at least one                    
                </comment>
                <comment line="511">
                    reset col to 0 to indicate we&apos;re finished all columns                    
                </comment>
                <declaration name="ltr" type="boolean" line="451"/>
                <scope line="454">
                    <scope line="455"/>
                    <scope line="458"/>
                    <declaration name="rowCount" type="int" line="471"/>
                    <declaration name="rowHeight" type="int" line="472"/>
                    <scope line="473">
                        <scope line="476"/>
                    </scope>
                </scope>
                <scope line="486"/>
                <scope line="492"/>
                <declaration name="colCount" type="int" line="501"/>
                <declaration name="colWidth" type="int" line="502"/>
                <scope line="503">
                    <scope line="505"/>
                    <scope line="509"/>
                </scope>
            </method>
        </class>
    </source>