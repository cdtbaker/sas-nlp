<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="java.awt.im.InputContext"/>
        <import package="java.io"/>
        <import package="java.text"/>
        <import package="java.util"/>
        <import package="javax.swing.UIManager"/>
        <import package="javax.swing.event"/>
        <import package="javax.swing.plaf.UIResource"/>
        <import package="javax.swing.text"/>
        <class name="JFormattedTextField" line="12">
            <extends class="JTextField"/>
            <javadoc line="12">
                &lt;code&gt;JFormattedTextField&lt;/code&gt; extends &lt;code&gt;JTextField&lt;/code&gt; adding
                  support for formatting arbitrary values, as well as retrieving a particular
                  object once the user has edited the text. The following illustrates
                  configuring a &lt;code&gt;JFormattedTextField&lt;/code&gt; to edit dates:
                  &lt;pre&gt;
                  JFormattedTextField ftf = new JFormattedTextField();
                  ftf.setValue(new Date());
                  &lt;/pre&gt;
                  &lt;p&gt;
                  Once a &lt;code&gt;JFormattedTextField&lt;/code&gt; has been created, you can
                  listen for editing changes by way of adding
                  a &lt;code&gt;PropertyChangeListener&lt;/code&gt; and listening for
                  &lt;code&gt;PropertyChangeEvent&lt;/code&gt;s with the property name &lt;code&gt;value&lt;/code&gt;.
                  &lt;p&gt;
                  &lt;code&gt;JFormattedTextField&lt;/code&gt; allows
                  configuring what action should be taken when focus is lost. The possible
                  configurations are:
                  &lt;table summary=&quot;Possible JFormattedTextField configurations and their descriptions&quot;&gt;
                  &lt;tr&gt;&lt;th&gt;&lt;p align=&quot;left&quot;&gt;Value&lt;/p&gt;&lt;/th&gt;&lt;th&gt;&lt;p align=&quot;left&quot;&gt;Description&lt;/p&gt;&lt;/th&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;JFormattedTextField.REVERT
                  &lt;td&gt;Revert the display to match that of &lt;code&gt;getValue&lt;/code&gt;,
                  possibly losing the current edit.
                  &lt;tr&gt;&lt;td&gt;JFormattedTextField.COMMIT
                  &lt;td&gt;Commits the current value. If the value being edited
                  isn&apos;t considered a legal value by the
                  &lt;code&gt;AbstractFormatter&lt;/code&gt; that is, a
                  &lt;code&gt;ParseException&lt;/code&gt; is thrown, then the value
                  will not change, and then edited value will persist.
                  &lt;tr&gt;&lt;td&gt;JFormattedTextField.COMMIT_OR_REVERT
                  &lt;td&gt;Similar to &lt;code&gt;COMMIT&lt;/code&gt;, but if the value isn&apos;t
                  legal, behave like &lt;code&gt;REVERT&lt;/code&gt;.
                  &lt;tr&gt;&lt;td&gt;JFormattedTextField.PERSIST
                  &lt;td&gt;Do nothing, don&apos;t obtain a new
                  &lt;code&gt;AbstractFormatter&lt;/code&gt;, and don&apos;t update the value.
                  &lt;/table&gt;
                  The default is &lt;code&gt;JFormattedTextField.COMMIT_OR_REVERT&lt;/code&gt;,
                  refer to {@link #setFocusLostBehavior} for more information on this.
                  &lt;p&gt;
                  &lt;code&gt;JFormattedTextField&lt;/code&gt; allows the focus to leave, even if
                  the currently edited value is invalid. To lock the focus down while the
                  &lt;code&gt;JFormattedTextField&lt;/code&gt; is an invalid edit state
                  you can attach an &lt;code&gt;InputVerifier&lt;/code&gt;. The following code snippet
                  shows a potential implementation of such an &lt;code&gt;InputVerifier&lt;/code&gt;:
                  &lt;pre&gt;
                  public class FormattedTextFieldVerifier extends InputVerifier {
                  public boolean verify(JComponent input) {
                  if (input instanceof JFormattedTextField) {
                  JFormattedTextField ftf = (JFormattedTextField)input;
                  AbstractFormatter formatter = ftf.getFormatter();
                  if (formatter != null) {
                  String text = ftf.getText();
                  try {
                  formatter.stringToValue(text);
                  return true;
                  } catch (ParseException pe) {
                  return false;
                  }
                  }
                  }
                  return true;
                  }
                  public boolean shouldYieldFocus(JComponent input) {
                  return verify(input);
                  }
                  }
                  &lt;/pre&gt;
                  &lt;p&gt;
                  Alternatively, you could invoke &lt;code&gt;commitEdit&lt;/code&gt;, which would also
                  commit the value.
                  &lt;p&gt;
                  &lt;code&gt;JFormattedTextField&lt;/code&gt; does not do the formatting it self,
                  rather formatting is done through an instance of
                  &lt;code&gt;JFormattedTextField.AbstractFormatter&lt;/code&gt; which is obtained from
                  an instance of &lt;code&gt;JFormattedTextField.AbstractFormatterFactory&lt;/code&gt;.
                  Instances of &lt;code&gt;JFormattedTextField.AbstractFormatter&lt;/code&gt; are
                  notified when they become active by way of the
                  &lt;code&gt;install&lt;/code&gt; method, at which point the
                  &lt;code&gt;JFormattedTextField.AbstractFormatter&lt;/code&gt; can install whatever
                  it needs to, typically a &lt;code&gt;DocumentFilter&lt;/code&gt;. Similarly when
                  &lt;code&gt;JFormattedTextField&lt;/code&gt; no longer
                  needs the &lt;code&gt;AbstractFormatter&lt;/code&gt;, it will invoke
                  &lt;code&gt;uninstall&lt;/code&gt;.
                  &lt;p&gt;
                  &lt;code&gt;JFormattedTextField&lt;/code&gt; typically
                  queries the &lt;code&gt;AbstractFormatterFactory&lt;/code&gt; for an
                  &lt;code&gt;AbstractFormat&lt;/code&gt; when it gains or loses focus. Although this
                  can change based on the focus lost policy. If the focus lost
                  policy is &lt;code&gt;JFormattedTextField.PERSIST&lt;/code&gt;
                  and the &lt;code&gt;JFormattedTextField&lt;/code&gt; has been edited, the
                  &lt;code&gt;AbstractFormatterFactory&lt;/code&gt; will not be queried until the
                  value has been commited. Similarly if the focus lost policy is
                  &lt;code&gt;JFormattedTextField.COMMIT&lt;/code&gt; and an exception
                  is thrown from &lt;code&gt;stringToValue&lt;/code&gt;, the
                  &lt;code&gt;AbstractFormatterFactory&lt;/code&gt; will not be querired when focus is
                  lost or gained.
                  &lt;p&gt;
                  &lt;code&gt;JFormattedTextField.AbstractFormatter&lt;/code&gt;
                  is also responsible for determining when values are commited to
                  the &lt;code&gt;JFormattedTextField&lt;/code&gt;. Some
                  &lt;code&gt;JFormattedTextField.AbstractFormatter&lt;/code&gt;s will make new values
                  available on every edit, and others will never commit the value. You can
                  force the current value to be obtained
                  from the current &lt;code&gt;JFormattedTextField.AbstractFormatter&lt;/code&gt;
                  by way of invoking &lt;code&gt;commitEdit&lt;/code&gt;. &lt;code&gt;commitEdit&lt;/code&gt; will
                  be invoked whenever return is pressed in the
                  &lt;code&gt;JFormattedTextField&lt;/code&gt;.
                  &lt;p&gt;
                  If an &lt;code&gt;AbstractFormatterFactory&lt;/code&gt; has not been explicitly
                  set, one will be set based on the &lt;code&gt;Class&lt;/code&gt; of the value type after
                  &lt;code&gt;setValue&lt;/code&gt; has been invoked (assuming value is non-null).
                  For example, in the following code an appropriate
                  &lt;code&gt;AbstractFormatterFactory&lt;/code&gt; and &lt;code&gt;AbstractFormatter&lt;/code&gt;
                  will be created to handle formatting of numbers:
                  &lt;pre&gt;
                  JFormattedTextField tf = new JFormattedTextField();
                  tf.setValue(new Number(100));
                  &lt;/pre&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt; As the &lt;code&gt;AbstractFormatter&lt;/code&gt; will
                  typically install a &lt;code&gt;DocumentFilter&lt;/code&gt; on the
                  &lt;code&gt;Document&lt;/code&gt;, and a &lt;code&gt;NavigationFilter&lt;/code&gt; on the
                  &lt;code&gt;JFormattedTextField&lt;/code&gt; you should not install your own. If you do,
                  you are likely to see odd behavior in that the editing policy of the
                  &lt;code&gt;AbstractFormatter&lt;/code&gt; will not be enforced.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt; Swing is not thread safe. For more
                  information see &lt;a
                  href=&quot;package-summary.html#threading&quot;&gt;Swing&apos;s Threading
                  Policy&lt;/a&gt;.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="uiClassID" type="String" line="154"/>
            <declaration name="defaultActions" type="Action[]" line="155"/>
            <declaration name="COMMIT" type="int" line="156"/>
            <javadoc line="156">
                Constant identifying that when focus is lost,
                  &lt;code&gt;commitEdit&lt;/code&gt; should be invoked. If in commiting the
                  new value a &lt;code&gt;ParseException&lt;/code&gt; is thrown, the invalid
                  value will remain.                
                <see>
                    #setFocusLostBehavior                    
                </see>
            </javadoc>
            <declaration name="COMMIT_OR_REVERT" type="int" line="164"/>
            <javadoc line="164">
                Constant identifying that when focus is lost,
                  &lt;code&gt;commitEdit&lt;/code&gt; should be invoked. If in commiting the new
                  value a &lt;code&gt;ParseException&lt;/code&gt; is thrown, the value will be
                  reverted.                
                <see>
                    #setFocusLostBehavior                    
                </see>
            </javadoc>
            <declaration name="REVERT" type="int" line="172"/>
            <javadoc line="172">
                Constant identifying that when focus is lost, editing value should
                  be reverted to current value set on the
                  &lt;code&gt;JFormattedTextField&lt;/code&gt;.                
                <see>
                    #setFocusLostBehavior                    
                </see>
            </javadoc>
            <declaration name="PERSIST" type="int" line="179"/>
            <javadoc line="179">
                Constant identifying that when focus is lost, the edited value
                  should be left.                
                <see>
                    #setFocusLostBehavior                    
                </see>
            </javadoc>
            <declaration name="factory" type="AbstractFormatterFactory" line="185"/>
            <javadoc line="185">
                Factory used to obtain an instance of AbstractFormatter.                
            </javadoc>
            <declaration name="format" type="AbstractFormatter" line="189"/>
            <javadoc line="189">
                Object responsible for formatting the current value.                
            </javadoc>
            <declaration name="value" type="Object" line="193"/>
            <javadoc line="193">
                Last valid value.                
            </javadoc>
            <declaration name="editValid" type="boolean" line="197"/>
            <javadoc line="197">
                True while the value being edited is valid.                
            </javadoc>
            <declaration name="focusLostBehavior" type="int" line="201"/>
            <javadoc line="201">
                Behavior when focus is lost.                
            </javadoc>
            <declaration name="edited" type="boolean" line="205"/>
            <javadoc line="205">
                Indicates the current value has been edited.                
            </javadoc>
            <declaration name="documentListener" type="DocumentListener" line="209"/>
            <javadoc line="209">
                Used to set the dirty state.                
            </javadoc>
            <declaration name="mask" type="Object" line="213"/>
            <javadoc line="213">
                Masked used to set the AbstractFormatterFactory.                
            </javadoc>
            <declaration name="textFormatterActionMap" type="ActionMap" line="217"/>
            <javadoc line="217">
                ActionMap that the TextFormatter Actions are added to.                
            </javadoc>
            <declaration name="composedTextExists" type="boolean" line="221"/>
            <javadoc line="221">
                Indicates the input method composed text is in the document                
            </javadoc>
            <declaration name="focusLostHandler" type="FocusLostHandler" line="225"/>
            <javadoc line="225">
                A handler for FOCUS_LOST event                
            </javadoc>
            <javadoc line="229">
                Creates a &lt;code&gt;JFormattedTextField&lt;/code&gt; with no
                  &lt;code&gt;AbstractFormatterFactory&lt;/code&gt;. Use &lt;code&gt;setMask&lt;/code&gt; or
                  &lt;code&gt;setFormatterFactory&lt;/code&gt; to configure the
                  &lt;code&gt;JFormattedTextField&lt;/code&gt; to edit a particular type of
                  value.                
            </javadoc>
            <method name="JFormattedTextField" type="constructor" line="236"/>
            <javadoc line="241">
                Creates a JFormattedTextField with the specified value. This will
                  create an &lt;code&gt;AbstractFormatterFactory&lt;/code&gt; based on the
                  type of &lt;code&gt;value&lt;/code&gt;.                
                <param>
                    value Initial value for the JFormattedTextField                    
                </param>
            </javadoc>
            <method name="JFormattedTextField" type="constructor" line="247">
                <params>
                    <param name="value" type="Object"/>
                </params>
            </method>
            <javadoc line="251">
                Creates a &lt;code&gt;JFormattedTextField&lt;/code&gt;. &lt;code&gt;format&lt;/code&gt; is
                  wrapped in an appropriate &lt;code&gt;AbstractFormatter&lt;/code&gt; which is
                  then wrapped in an &lt;code&gt;AbstractFormatterFactory&lt;/code&gt;.                
                <param>
                    format Format used to look up an AbstractFormatter                    
                </param>
            </javadoc>
            <method name="JFormattedTextField" type="constructor" line="257">
                <params>
                    <param name="format" type="java.text.Format"/>
                </params>
            </method>
            <javadoc line="261">
                Creates a &lt;code&gt;JFormattedTextField&lt;/code&gt; with the specified
                  &lt;code&gt;AbstractFormatter&lt;/code&gt;. The &lt;code&gt;AbstractFormatter&lt;/code&gt;
                  is placed in an &lt;code&gt;AbstractFormatterFactory&lt;/code&gt;.                
                <param>
                    formatter AbstractFormatter to use for formatting.                    
                </param>
            </javadoc>
            <method name="JFormattedTextField" type="constructor" line="267">
                <params>
                    <param name="formatter" type="AbstractFormatter"/>
                </params>
            </method>
            <javadoc line="270">
                Creates a &lt;code&gt;JFormattedTextField&lt;/code&gt; with the specified
                  &lt;code&gt;AbstractFormatterFactory&lt;/code&gt;.                
                <param>
                    factory AbstractFormatterFactory used for formatting.                    
                </param>
            </javadoc>
            <method name="JFormattedTextField" type="constructor" line="275">
                <params>
                    <param name="factory" type="AbstractFormatterFactory"/>
                </params>
            </method>
            <javadoc line="279">
                Creates a &lt;code&gt;JFormattedTextField&lt;/code&gt; with the specified
                  &lt;code&gt;AbstractFormatterFactory&lt;/code&gt; and initial value.                
                <param>
                    factory <code>AbstractFormatterFactory</code> used for
                      formatting.                    
                </param>
                <param>
                    currentValue Initial value to use                    
                </param>
            </javadoc>
            <method name="JFormattedTextField" type="constructor" line="286">
                <params>
                    <param name="factory" type="AbstractFormatterFactory"/>
                    <param name="currentValue" type="Object"/>
                </params>
            </method>
            <javadoc line="290">
                Sets the behavior when focus is lost. This will be one of
                  &lt;code&gt;JFormattedTextField.COMMIT_OR_REVERT&lt;/code&gt;,
                  &lt;code&gt;JFormattedTextField.REVERT&lt;/code&gt;,
                  &lt;code&gt;JFormattedTextField.COMMIT&lt;/code&gt; or
                  &lt;code&gt;JFormattedTextField.PERSIST&lt;/code&gt;
                  Note that some &lt;code&gt;AbstractFormatter&lt;/code&gt;s may push changes as
                  they occur, so that the value of this will have no effect.
                  &lt;p&gt;
                  This will throw an &lt;code&gt;IllegalArgumentException&lt;/code&gt; if the object
                  passed in is not one of the afore mentioned values.
                  &lt;p&gt;
                  The default value of this property is
                  &lt;code&gt;JFormattedTextField.COMMIT_OR_REVERT&lt;/code&gt;.                
                <param>
                    behavior Identifies behavior when focus is lost                    
                </param>
                <throws>
                    IllegalArgumentException if behavior is not one of the known
                      values                    
                </throws>
                <beaninfoenum>
                    : COMMIT         JFormattedTextField.COMMIT
                      COMMIT_OR_REVERT JFormattedTextField.COMMIT_OR_REVERT
                      REVERT         JFormattedTextField.REVERT
                      PERSIST        JFormattedTextField.PERSIST
                      description: Behavior when component loses focus                    
                </beaninfoenum>
            </javadoc>
            <method name="setFocusLostBehavior" type="void" line="313">
                <params>
                    <param name="behavior" type="int"/>
                </params>
                <scope line="314"/>
            </method>
            <javadoc line="319">
                Returns the behavior when focus is lost. This will be one of
                  &lt;code&gt;COMMIT_OR_REVERT&lt;/code&gt;,
                  &lt;code&gt;COMMIT&lt;/code&gt;,
                  &lt;code&gt;REVERT&lt;/code&gt; or
                  &lt;code&gt;PERSIST&lt;/code&gt;
                  Note that some &lt;code&gt;AbstractFormatter&lt;/code&gt;s may push changes as
                  they occur, so that the value of this will have no effect.                
                <return>
                    returns behavior when focus is lost                    
                </return>
            </javadoc>
            <method name="getFocusLostBehavior" type="int" line="329"/>
            <javadoc line="332">
                Sets the &lt;code&gt;AbstractFormatterFactory&lt;/code&gt;.
                  &lt;code&gt;AbstractFormatterFactory&lt;/code&gt; is
                  able to return an instance of &lt;code&gt;AbstractFormatter&lt;/code&gt; that is
                  used to format a value for display, as well an enforcing an editing
                  policy.
                  &lt;p&gt;
                  If you have not explicitly set an &lt;code&gt;AbstractFormatterFactory&lt;/code&gt;
                  by way of this method (or a constructor) an
                  &lt;code&gt;AbstractFormatterFactory&lt;/code&gt; and consequently an
                  &lt;code&gt;AbstractFormatter&lt;/code&gt; will be used based on the
                  &lt;code&gt;Class&lt;/code&gt; of the value. &lt;code&gt;NumberFormatter&lt;/code&gt; will
                  be used for &lt;code&gt;Number&lt;/code&gt;s, &lt;code&gt;DateFormatter&lt;/code&gt; will
                  be used for &lt;code&gt;Dates&lt;/code&gt;, otherwise &lt;code&gt;DefaultFormatter&lt;/code&gt;
                  will be used.
                  &lt;p&gt;
                  This is a JavaBeans bound property.                
                <param>
                    tf <code>AbstractFormatterFactory</code> used to lookup
                      instances of <code>AbstractFormatter</code>                    
                </param>
                <beaninfobound>
                    : true
                      attribute: visualUpdate true
                      description: AbstractFormatterFactory, responsible for returning an
                      AbstractFormatter that can format the current value.                    
                </beaninfobound>
            </javadoc>
            <method name="setFormatterFactory" type="void" line="356">
                <params>
                    <param name="tf" type="AbstractFormatterFactory"/>
                </params>
                <declaration name="oldFactory" type="AbstractFormatterFactory" line="357"/>
            </method>
            <javadoc line="362">
                Returns the current &lt;code&gt;AbstractFormatterFactory&lt;/code&gt;.                
                <see>
                    #setFormatterFactory                    
                </see>
                <return>
                    <code>AbstractFormatterFactory</code> used to determine
                      <code>AbstractFormatter</code>s                    
                </return>
            </javadoc>
            <method name="getFormatterFactory" type="AbstractFormatterFactory" line="368"/>
            <javadoc line="371">
                Sets the current &lt;code&gt;AbstractFormatter&lt;/code&gt;.
                  &lt;p&gt;
                  You should not normally invoke this, instead set the
                  &lt;code&gt;AbstractFormatterFactory&lt;/code&gt; or set the value.
                  &lt;code&gt;JFormattedTextField&lt;/code&gt; will
                  invoke this as the state of the &lt;code&gt;JFormattedTextField&lt;/code&gt;
                  changes and requires the value to be reset.
                  &lt;code&gt;JFormattedTextField&lt;/code&gt; passes in the
                  &lt;code&gt;AbstractFormatter&lt;/code&gt; obtained from the
                  &lt;code&gt;AbstractFormatterFactory&lt;/code&gt;.
                  &lt;p&gt;
                  This is a JavaBeans bound property.                
                <see>
                    #setFormatterFactory                    
                </see>
                <param>
                    format AbstractFormatter to use for formatting                    
                </param>
                <beaninfobound>
                    : true
                      attribute: visualUpdate true
                      description: TextFormatter, responsible for formatting the current value                    
                </beaninfobound>
            </javadoc>
            <method name="setFormatter" type="void" line="390">
                <params>
                    <param name="format" type="AbstractFormatter"/>
                </params>
                <declaration name="oldFormat" type="AbstractFormatter" line="391"/>
                <scope line="392"/>
                <scope line="397"/>
            </method>
            <javadoc line="403">
                Returns the &lt;code&gt;AbstractFormatter&lt;/code&gt; that is used to format and
                  parse the current value.                
                <return>
                    AbstractFormatter used for formatting                    
                </return>
            </javadoc>
            <method name="getFormatter" type="AbstractFormatter" line="408"/>
            <javadoc line="411">
                Sets the value that will be formatted by an
                  &lt;code&gt;AbstractFormatter&lt;/code&gt; obtained from the current
                  &lt;code&gt;AbstractFormatterFactory&lt;/code&gt;. If no
                  &lt;code&gt;AbstractFormatterFactory&lt;/code&gt; has been specified, this will
                  attempt to create one based on the type of &lt;code&gt;value&lt;/code&gt;.
                  &lt;p&gt;
                  The default value of this property is null.
                  &lt;p&gt;
                  This is a JavaBeans bound property.                
                <param>
                    value Current value to display                    
                </param>
                <beaninfobound>
                    : true
                      attribute: visualUpdate true
                      description: The value to be formatted.                    
                </beaninfobound>
            </javadoc>
            <method name="setValue" type="void" line="426">
                <params>
                    <param name="value" type="Object"/>
                </params>
                <scope line="427"/>
            </method>
            <javadoc line="432">
                Returns the last valid value. Based on the editing policy of
                  the &lt;code&gt;AbstractFormatter&lt;/code&gt; this may not return the current
                  value. The currently edited value can be obtained by invoking
                  &lt;code&gt;commitEdit&lt;/code&gt; followed by &lt;code&gt;getValue&lt;/code&gt;.                
                <return>
                    Last valid value                    
                </return>
            </javadoc>
            <method name="getValue" type="Object" line="439"/>
            <javadoc line="442">
                Forces the current value to be taken from the
                  &lt;code&gt;AbstractFormatter&lt;/code&gt; and set as the current value.
                  This has no effect if there is no current
                  &lt;code&gt;AbstractFormatter&lt;/code&gt; installed.                
                <throws>
                    ParseException if the <code>AbstractFormatter</code> is not able
                      to format the current value                    
                </throws>
            </javadoc>
            <method name="commitEdit" type="void" line="450">
                <declaration name="format" type="AbstractFormatter" line="451"/>
                <scope line="452"/>
            </method>
            <javadoc line="456">
                Sets the validity of the edit on the receiver. You should not normally
                  invoke this. This will be invoked by the
                  &lt;code&gt;AbstractFormatter&lt;/code&gt; as the user edits the value.
                  &lt;p&gt;
                  Not all formatters will allow the component to get into an invalid
                  state, and thus this may never be invoked.
                  &lt;p&gt;
                  Based on the look and feel this may visually change the state of
                  the receiver.                
                <param>
                    isValid boolean indicating if the currently edited value is
                      valid.                    
                </param>
                <beaninfobound>
                    : true
                      attribute: visualUpdate true
                      description: True indicates the edited value is valid                    
                </beaninfobound>
            </javadoc>
            <method name="setEditValid" type="void" line="472">
                <params>
                    <param name="isValid" type="boolean"/>
                </params>
                <scope line="473"/>
            </method>
            <javadoc line="478">
                Returns true if the current value being edited is valid. The value of
                  this is managed by the current &lt;code&gt;AbstractFormatter&lt;/code&gt;, as such
                  there is no public setter for it.                
                <return>
                    true if the current value being edited is valid.                    
                </return>
            </javadoc>
            <method name="isEditValid" type="boolean" line="484"/>
            <javadoc line="487">
                Invoked when the user inputs an invalid value. This gives the
                  component a chance to provide feedback. The default
                  implementation beeps.                
            </javadoc>
            <method name="invalidEdit" type="void" line="492"/>
            <javadoc line="495">
                Processes any input method events, such as
                  &lt;code&gt;InputMethodEvent.INPUT_METHOD_TEXT_CHANGED&lt;/code&gt; or
                  &lt;code&gt;InputMethodEvent.CARET_POSITION_CHANGED&lt;/code&gt;.                
                <param>
                    e the <code>InputMethodEvent</code>                    
                </param>
                <see>
                    InputMethodEvent                    
                </see>
            </javadoc>
            <method name="processInputMethodEvent" type="void" line="502">
                <params>
                    <param name="e" type="InputMethodEvent"/>
                </params>
                <declaration name="text" type="AttributedCharacterIterator" line="503"/>
                <declaration name="commitCount" type="int" line="504"/>
                <scope line="505">
                    <declaration name="begin" type="int" line="506"/>
                    <declaration name="end" type="int" line="507"/>
                </scope>
                <scope line="510"/>
            </method>
            <javadoc line="515">
                Processes any focus events, such as
                  &lt;code&gt;FocusEvent.FOCUS_GAINED&lt;/code&gt; or
                  &lt;code&gt;FocusEvent.FOCUS_LOST&lt;/code&gt;.                
                <param>
                    e the <code>FocusEvent</code>                    
                </param>
                <see>
                    FocusEvent                    
                </see>
            </javadoc>
            <method name="processFocusEvent" type="void" line="522">
                <params>
                    <param name="e" type="FocusEvent"/>
                </params>
                <scope line="524"/>
                <scope line="527">
                    <declaration name="ic" type="InputContext" line="528"/>
                    <scope line="529"/>
                    <scope line="532"/>
                    <scope line="536"/>
                </scope>
                <scope line="540"/>
            </method>
            <class name="FocusLostHandler" line="544">
                <implements interface="Runnable"/>
                <implements interface="Serializable"/>
                <javadoc line="544">
                    FOCUS_LOST behavior implementation                    
                </javadoc>
                <method name="run" type="void" line="548">
                    <declaration name="fb" type="int" line="549"/>
                    <scope line="550">
                        <scope line="551"/>
                        <scope line="555">
                            <scope line="556"/>
                        </scope>
                    </scope>
                    <scope line="561"/>
                </method>
            </class>
            <javadoc line="566">
                Fetches the command list for the editor.  This is
                  the list of commands supported by the plugged-in UI
                  augmented by the collection of commands that the
                  editor itself supports.  These are useful for binding
                  to events, such as in a keymap.                
                <return>
                    the command list                    
                </return>
            </javadoc>
            <method name="getActions" type="Action[]" line="574"/>
            <javadoc line="577">
                Gets the class ID for a UI.                
                <return>
                    the string "FormattedTextFieldUI"                    
                </return>
                <see>
                    JComponent#getUIClassID                    
                </see>
            </javadoc>
            <method name="getUIClassID" type="String" line="582"/>
            <javadoc line="585">
                Associates the editor with a text document.
                  The currently registered factory is used to build a view for
                  the document, which gets displayed by the editor after revalidation.
                  A PropertyChange event (&quot;document&quot;) is propagated to each listener.                
                <param>
                    doc  the document to display/edit                    
                </param>
                <see>
                    #getDocument                    
                </see>
                <beaninfodescription>
                    : the text document model
                      bound: true
                      expert: true                    
                </beaninfodescription>
            </javadoc>
            <method name="setDocument" type="void" line="596">
                <params>
                    <param name="doc" type="Document"/>
                </params>
                <scope line="597"/>
                <scope line="601"/>
            </method>
            <method name="writeObject" type="void" line="606">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
                <scope line="608">
                    <declaration name="count" type="byte" line="609"/>
                    <scope line="611"/>
                </scope>
            </method>
            <javadoc line="616">
                Resets the Actions that come from the TextFormatter to
                  &lt;code&gt;actions&lt;/code&gt;.                
            </javadoc>
            <method name="setFormatterActions" type="void" line="620">
                <params>
                    <param name="actions" type="Action[]"/>
                </params>
                <scope line="621">
                    <scope line="622"/>
                </scope>
                <scope line="626">
                    <scope line="627">
                        <declaration name="map" type="ActionMap" line="628"/>
                        <scope line="630">
                            <declaration name="parent" type="ActionMap" line="631"/>
                            <scope line="632"/>
                        </scope>
                    </scope>
                    <scope line="640">
                        <declaration name="key" type="Object" line="641"/>
                        <scope line="642"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="648">
                Does the setting of the value. If &lt;code&gt;createFormat&lt;/code&gt; is true,
                  this will also obtain a new &lt;code&gt;AbstractFormatter&lt;/code&gt; from the
                  current factory. The property change event will be fired if
                  &lt;code&gt;firePC&lt;/code&gt; is true.                
            </javadoc>
            <method name="setValue" type="void" line="654">
                <params>
                    <param name="value" type="Object"/>
                    <param name="createFormat" type="boolean"/>
                    <param name="firePC" type="boolean"/>
                </params>
                <declaration name="oldValue" type="Object" line="655"/>
                <scope line="657">
                    <declaration name="factory" type="AbstractFormatterFactory" line="658"/>
                    <declaration name="atf" type="AbstractFormatter" line="659"/>
                    <scope line="660"/>
                    <scope line="663"/>
                </scope>
                <scope line="668"/>
                <scope line="672"/>
            </method>
            <javadoc line="676">
                Sets the edited state of the receiver.                
            </javadoc>
            <method name="setEdited" type="void" line="679">
                <params>
                    <param name="edited" type="boolean"/>
                </params>
            </method>
            <javadoc line="682">
                Returns true if the receiver has been edited.                
            </javadoc>
            <method name="isEdited" type="boolean" line="685"/>
            <javadoc line="688">
                Returns an AbstractFormatterFactory suitable for the passed in
                  Object type.                
            </javadoc>
            <method name="getDefaultFormatterFactory" type="AbstractFormatterFactory" line="692">
                <params>
                    <param name="type" type="Object"/>
                </params>
                <scope line="693"/>
                <scope line="696"/>
                <scope line="699"/>
                <scope line="702"/>
                <scope line="705">
                    <declaration name="displayFormatter" type="AbstractFormatter" line="706"/>
                    <declaration name="editFormatter" type="AbstractFormatter" line="708"/>
                </scope>
            </method>
            <class name="AbstractFormatterFactory" line="714">
                <javadoc line="714">
                    Instances of &lt;code&gt;AbstractFormatterFactory&lt;/code&gt; are used by
                      &lt;code&gt;JFormattedTextField&lt;/code&gt; to obtain instances of
                      &lt;code&gt;AbstractFormatter&lt;/code&gt; which in turn are used to format values.
                      &lt;code&gt;AbstractFormatterFactory&lt;/code&gt; can return different
                      &lt;code&gt;AbstractFormatter&lt;/code&gt;s based on the state of the
                      &lt;code&gt;JFormattedTextField&lt;/code&gt;, perhaps returning different
                      &lt;code&gt;AbstractFormatter&lt;/code&gt;s when the
                      &lt;code&gt;JFormattedTextField&lt;/code&gt; has focus vs when it
                      doesn&apos;t have focus.                    
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <method name="getFormatter" type="AbstractFormatter" line="727"/>
                <javadoc line="727">
                    Returns an &lt;code&gt;AbstractFormatter&lt;/code&gt; that can handle formatting
                      of the passed in &lt;code&gt;JFormattedTextField&lt;/code&gt;.                    
                    <param>
                        tf JFormattedTextField requesting AbstractFormatter                        
                    </param>
                    <return>
                        AbstractFormatter to handle formatting duties, a null
                          return value implies the JFormattedTextField should behave
                          like a normal JTextField                        
                    </return>
                </javadoc>
            </class>
            <class name="AbstractFormatter" line="737">
                <implements interface="Serializable"/>
                <javadoc line="737">
                    Instances of &lt;code&gt;AbstractFormatter&lt;/code&gt; are used by
                      &lt;code&gt;JFormattedTextField&lt;/code&gt; to handle the conversion both
                      from an Object to a String, and back from a String to an Object.
                      &lt;code&gt;AbstractFormatter&lt;/code&gt;s can also enfore editing policies,
                      or navigation policies, or manipulate the
                      &lt;code&gt;JFormattedTextField&lt;/code&gt; in any way it sees fit to
                      enforce the desired policy.
                      &lt;p&gt;
                      An &lt;code&gt;AbstractFormatter&lt;/code&gt; can only be active in
                      one &lt;code&gt;JFormattedTextField&lt;/code&gt; at a time.
                      &lt;code&gt;JFormattedTextField&lt;/code&gt; invokes
                      &lt;code&gt;install&lt;/code&gt; when it is ready to use it followed
                      by &lt;code&gt;uninstall&lt;/code&gt; when done. Subclasses
                      that wish to install additional state should override
                      &lt;code&gt;install&lt;/code&gt; and message super appropriately.
                      &lt;p&gt;
                      Subclasses must override the conversion methods
                      &lt;code&gt;stringToValue&lt;/code&gt; and &lt;code&gt;valueToString&lt;/code&gt;. Optionally
                      they can override &lt;code&gt;getActions&lt;/code&gt;,
                      &lt;code&gt;getNavigationFilter&lt;/code&gt; and &lt;code&gt;getDocumentFilter&lt;/code&gt;
                      to restrict the &lt;code&gt;JFormattedTextField&lt;/code&gt; in a particular
                      way.
                      &lt;p&gt;
                      Subclasses that allow the &lt;code&gt;JFormattedTextField&lt;/code&gt; to be in
                      a temporarily invalid state should invoke &lt;code&gt;setEditValid&lt;/code&gt;
                      at the appropriate times.                    
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <declaration name="ftf" type="JFormattedTextField" line="767"/>
                <javadoc line="768">
                    Installs the &lt;code&gt;AbstractFormatter&lt;/code&gt; onto a particular
                      &lt;code&gt;JFormattedTextField&lt;/code&gt;.
                      This will invoke &lt;code&gt;valueToString&lt;/code&gt; to convert the
                      current value from the &lt;code&gt;JFormattedTextField&lt;/code&gt; to
                      a String. This will then install the &lt;code&gt;Action&lt;/code&gt;s from
                      &lt;code&gt;getActions&lt;/code&gt;, the &lt;code&gt;DocumentFilter&lt;/code&gt;
                      returned from &lt;code&gt;getDocumentFilter&lt;/code&gt; and the
                      &lt;code&gt;NavigationFilter&lt;/code&gt; returned from
                      &lt;code&gt;getNavigationFilter&lt;/code&gt; onto the
                      &lt;code&gt;JFormattedTextField&lt;/code&gt;.
                      &lt;p&gt;
                      Subclasses will typically only need to override this if they
                      wish to install additional listeners on the
                      &lt;code&gt;JFormattedTextField&lt;/code&gt;.
                      &lt;p&gt;
                      If there is a &lt;code&gt;ParseException&lt;/code&gt; in converting the
                      current value to a String, this will set the text to an empty
                      String, and mark the &lt;code&gt;JFormattedTextField&lt;/code&gt; as being
                      in an invalid state.
                      &lt;p&gt;
                      While this is a public method, this is typically only useful
                      for subclassers of &lt;code&gt;JFormattedTextField&lt;/code&gt;.
                      &lt;code&gt;JFormattedTextField&lt;/code&gt; will invoke this method at
                      the appropriate times when the value changes, or its internal
                      state changes.  You will only need to invoke this yourself if
                      you are subclassing &lt;code&gt;JFormattedTextField&lt;/code&gt; and
                      installing/uninstalling &lt;code&gt;AbstractFormatter&lt;/code&gt; at a
                      different time than &lt;code&gt;JFormattedTextField&lt;/code&gt; does.                    
                    <param>
                        ftf JFormattedTextField to format for, may be null indicating
                          uninstall from current JFormattedTextField.                        
                    </param>
                </javadoc>
                <method name="install" type="void" line="800">
                    <params>
                        <param name="ftf" type="JFormattedTextField"/>
                    </params>
                    <scope line="801"/>
                    <scope line="805">
                        <scope line="806"/>
                        <scope line="809"/>
                    </scope>
                </method>
                <javadoc line="818">
                    Uninstalls any state the &lt;code&gt;AbstractFormatter&lt;/code&gt; may have
                      installed on the &lt;code&gt;JFormattedTextField&lt;/code&gt;. This resets the
                      &lt;code&gt;DocumentFilter&lt;/code&gt;, &lt;code&gt;NavigationFilter&lt;/code&gt;
                      and additional &lt;code&gt;Action&lt;/code&gt;s installed on the
                      &lt;code&gt;JFormattedTextField&lt;/code&gt;.                    
                </javadoc>
                <method name="uninstall" type="void" line="825">
                    <scope line="826"/>
                </method>
                <method name="stringToValue" type="Object" line="832"/>
                <javadoc line="832">
                    Parses &lt;code&gt;text&lt;/code&gt; returning an arbitrary Object. Some
                      formatters may return null.                    
                    <throws>
                        ParseException if there is an error in the conversion                        
                    </throws>
                    <param>
                        text String to convert                        
                    </param>
                    <return>
                        Object representation of text                        
                    </return>
                </javadoc>
                <method name="valueToString" type="String" line="840"/>
                <javadoc line="840">
                    Returns the string value to display for &lt;code&gt;value&lt;/code&gt;.                    
                    <throws>
                        ParseException if there is an error in the conversion                        
                    </throws>
                    <param>
                        value Value to convert                        
                    </param>
                    <return>
                        String representation of value                        
                    </return>
                </javadoc>
                <javadoc line="847">
                    Returns the current &lt;code&gt;JFormattedTextField&lt;/code&gt; the
                      &lt;code&gt;AbstractFormatter&lt;/code&gt; is installed on.                    
                    <return>
                        JFormattedTextField formatting for.                        
                    </return>
                </javadoc>
                <method name="getFormattedTextField" type="JFormattedTextField" line="852"/>
                <javadoc line="855">
                    This should be invoked when the user types an invalid character.
                      This forwards the call to the current JFormattedTextField.                    
                </javadoc>
                <method name="invalidEdit" type="void" line="859">
                    <declaration name="ftf" type="JFormattedTextField" line="860"/>
                    <scope line="861"/>
                </method>
                <javadoc line="865">
                    Invoke this to update the &lt;code&gt;editValid&lt;/code&gt; property of the
                      &lt;code&gt;JFormattedTextField&lt;/code&gt;. If you an enforce a policy
                      such that the &lt;code&gt;JFormattedTextField&lt;/code&gt; is always in a
                      valid state, you will never need to invoke this.                    
                    <param>
                        valid Valid state of the JFormattedTextField                        
                    </param>
                </javadoc>
                <method name="setEditValid" type="void" line="872">
                    <params>
                        <param name="valid" type="boolean"/>
                    </params>
                    <declaration name="ftf" type="JFormattedTextField" line="873"/>
                    <scope line="874"/>
                </method>
                <javadoc line="878">
                    Subclass and override if you wish to provide a custom set of
                      &lt;code&gt;Action&lt;/code&gt;s. &lt;code&gt;install&lt;/code&gt; will install these
                      on the &lt;code&gt;JFormattedTextField&lt;/code&gt;&apos;s &lt;code&gt;ActionMap&lt;/code&gt;.                    
                    <return>
                        Array of Actions to install on JFormattedTextField                        
                    </return>
                </javadoc>
                <method name="getActions" type="Action[]" line="884"/>
                <javadoc line="887">
                    Subclass and override if you wish to provide a
                      &lt;code&gt;DocumentFilter&lt;/code&gt; to restrict what can be input.
                      &lt;code&gt;install&lt;/code&gt; will install the returned value onto
                      the &lt;code&gt;JFormattedTextField&lt;/code&gt;.                    
                    <return>
                        DocumentFilter to restrict edits                        
                    </return>
                </javadoc>
                <method name="getDocumentFilter" type="DocumentFilter" line="894"/>
                <javadoc line="897">
                    Subclass and override if you wish to provide a filter to restrict
                      where the user can navigate to.
                      &lt;code&gt;install&lt;/code&gt; will install the returned value onto
                      the &lt;code&gt;JFormattedTextField&lt;/code&gt;.                    
                    <return>
                        NavigationFilter to restrict navigation                        
                    </return>
                </javadoc>
                <method name="getNavigationFilter" type="NavigationFilter" line="904"/>
                <javadoc line="907">
                    Clones the &lt;code&gt;AbstractFormatter&lt;/code&gt;. The returned instance
                      is not associated with a &lt;code&gt;JFormattedTextField&lt;/code&gt;.                    
                    <return>
                        Copy of the AbstractFormatter                        
                    </return>
                </javadoc>
                <method name="clone" type="Object" line="912">
                    <declaration name="formatter" type="AbstractFormatter" line="913"/>
                </method>
                <javadoc line="917">
                    Installs the &lt;code&gt;DocumentFilter&lt;/code&gt; &lt;code&gt;filter&lt;/code&gt;
                      onto the current &lt;code&gt;JFormattedTextField&lt;/code&gt;.                    
                    <param>
                        filter DocumentFilter to install on the Document.                        
                    </param>
                </javadoc>
                <method name="installDocumentFilter" type="void" line="922">
                    <params>
                        <param name="filter" type="DocumentFilter"/>
                    </params>
                    <declaration name="ftf" type="JFormattedTextField" line="923"/>
                    <scope line="924">
                        <declaration name="doc" type="Document" line="925"/>
                        <scope line="926"/>
                    </scope>
                </method>
            </class>
            <class name="CommitAction" line="933">
                <extends class="JTextField.NotifyAction"/>
                <javadoc line="933">
                    Used to commit the edit. This extends JTextField.NotifyAction
                      so that &lt;code&gt;isEnabled&lt;/code&gt; is true while a JFormattedTextField
                      has focus, and extends &lt;code&gt;actionPerformed&lt;/code&gt; to invoke
                      commitEdit.                    
                </javadoc>
                <method name="actionPerformed" type="void" line="940">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                    <declaration name="target" type="JTextComponent" line="941"/>
                    <scope line="942">
                        <scope line="943"/>
                        <scope line="946"/>
                    </scope>
                </method>
                <method name="isEnabled" type="boolean" line="953">
                    <declaration name="target" type="JTextComponent" line="954"/>
                    <scope line="955">
                        <declaration name="ftf" type="JFormattedTextField" line="956"/>
                        <scope line="957"/>
                    </scope>
                </method>
            </class>
            <class name="CancelAction" line="965">
                <extends class="TextAction"/>
                <javadoc line="965">
                    CancelAction will reset the value in the JFormattedTextField when
                      &lt;code&gt;actionPerformed&lt;/code&gt; is invoked. It will only be
                      enabled if the focused component is an instance of
                      JFormattedTextField.                    
                </javadoc>
                <method name="CancelAction" type="constructor" line="972"/>
                <method name="actionPerformed" type="void" line="975">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                    <declaration name="target" type="JTextComponent" line="976"/>
                    <scope line="977">
                        <declaration name="ftf" type="JFormattedTextField" line="978"/>
                    </scope>
                </method>
                <method name="isEnabled" type="boolean" line="982">
                    <declaration name="target" type="JTextComponent" line="983"/>
                    <scope line="984">
                        <declaration name="ftf" type="JFormattedTextField" line="985"/>
                        <scope line="986"/>
                    </scope>
                </method>
            </class>
            <class name="DocumentHandler" line="994">
                <implements interface="DocumentListener"/>
                <implements interface="Serializable"/>
                <javadoc line="994">
                    Sets the dirty state as the document changes.                    
                </javadoc>
                <method name="insertUpdate" type="void" line="998">
                    <params>
                        <param name="e" type="DocumentEvent"/>
                    </params>
                </method>
                <method name="removeUpdate" type="void" line="1001">
                    <params>
                        <param name="e" type="DocumentEvent"/>
                    </params>
                </method>
                <method name="changedUpdate" type="void" line="1004">
                    <params>
                        <param name="e" type="DocumentEvent"/>
                    </params>
                </method>
            </class>
        </class>
    </source>