<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.awt.LayoutManager"/>
        <import package="java.awt.Component"/>
        <import package="java.awt.Container"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.Point"/>
        <import package="java.awt.Dimension"/>
        <import package="java.awt.Insets"/>
        <import package="java.io.Serializable"/>
        <class name="ViewportLayout" line="37">
            <comment line="61">
                Single instance used by JViewport.                
            </comment>
            <implements interface="LayoutManager"/>
            <implements interface="Serializable"/>
            <javadoc line="37">
                The default layout manager for &lt;code&gt;JViewport&lt;/code&gt;.
                  &lt;code&gt;ViewportLayout&lt;/code&gt; defines
                  a policy for layout that should be useful for most applications.
                  The viewport makes its view the same size as the viewport,
                  however it will not make the view smaller than its minimum size.
                  As the viewport grows the view is kept bottom justified until
                  the entire view is visible, subsequently the view is kept top
                  justified.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <author>
                    Hans Muller                    
                </author>
            </javadoc>
            <declaration name="SHARED_INSTANCE" type="ViewportLayout" line="61"/>
            <javadoc line="63">
                Adds the specified component to the layout. Not used by this class.                
                <param>
                    name the name of the component                    
                </param>
                <param>
                    c the the component to be added                    
                </param>
            </javadoc>
            <method name="addLayoutComponent" type="void" line="68">
                <params>
                    <param name="name" type="String"/>
                    <param name="c" type="Component"/>
                </params>
            </method>
            <javadoc line="70">
                Removes the specified component from the layout. Not used by
                  this class.                
                <param>
                    c the component to remove                    
                </param>
            </javadoc>
            <method name="removeLayoutComponent" type="void" line="75">
                <params>
                    <param name="c" type="Component"/>
                </params>
            </method>
            <javadoc line="78">
                Returns the preferred dimensions for this layout given the components
                  in the specified target container.                
                <param>
                    parent the component which needs to be laid out                    
                </param>
                <return>
                    a &lt;code&gt;Dimension&lt;/code&gt; object containing the
                      preferred dimensions                    
                </return>
                <see>
                    #minimumLayoutSize                    
                </see>
            </javadoc>
            <method name="preferredLayoutSize" type="Dimension" line="86">
                <params>
                    <param name="parent" type="Container"/>
                </params>
                <declaration name="view" type="Component" line="87"/>
                <scope line="88"/>
                <scope line="91"/>
                <scope line="94"/>
            </method>
            <javadoc line="100">
                Returns the minimum dimensions needed to layout the components
                  contained in the specified target container.                
                <param>
                    parent the component which needs to be laid out                    
                </param>
                <return>
                    a &lt;code&gt;Dimension&lt;/code&gt; object containing the minimum
                      dimensions                    
                </return>
                <see>
                    #preferredLayoutSize                    
                </see>
            </javadoc>
            <method name="minimumLayoutSize" type="Dimension" line="109">
                <params>
                    <param name="parent" type="Container"/>
                </params>
            </method>
            <javadoc line="114">
                Called by the AWT when the specified container needs to be laid out.                
                <param>
                    parent  the container to lay out                    
                </param>
                <exception>
                    AWTError  if the target isn&apos;t the container specified to the
                      &lt;code&gt;BoxLayout&lt;/code&gt; constructor                    
                </exception>
            </javadoc>
            <method name="layoutContainer" type="void" line="123">
                <params>
                    <param name="parent" type="Container"/>
                </params>
                <comment line="136">
                    All of the dimensions below are in view coordinates, except
                     vpSize which we&apos;re converting.                    
                </comment>
                <comment line="157">
                    If the new viewport size would leave empty space to the
                     right of the view, right justify the view or left justify
                     the view when the width of the view is smaller than the
                     container.                    
                </comment>
                <comment line="176">
                    If the new viewport size would leave empty space below the
                     view, bottom justify the view or top justify the view when
                     the height of the view is smaller than the container.                    
                </comment>
                <comment line="184">
                    If we haven&apos;t been advised about how the viewports size
                     should change wrt to the viewport, i.e. if the view isn&apos;t
                     an instance of Scrollable, then adjust the views size as follows.
                    
                     If the origin of the view is showing and the viewport is
                     bigger than the views preferred size, then make the view
                     the same size as the viewport.                    
                </comment>
                <declaration name="vp" type="JViewport" line="124"/>
                <declaration name="view" type="Component" line="125"/>
                <declaration name="scrollableView" type="Scrollable" line="126"/>
                <scope line="128"/>
                <scope line="131"/>
                <declaration name="insets" type="Insets" line="139"/>
                <declaration name="viewPrefSize" type="Dimension" line="140"/>
                <declaration name="vpSize" type="Dimension" line="141"/>
                <declaration name="extentSize" type="Dimension" line="142"/>
                <declaration name="viewSize" type="Dimension" line="143"/>
                <scope line="145">
                    <scope line="146"/>
                    <scope line="149"/>
                </scope>
                <declaration name="viewPosition" type="Point" line="154"/>
                <scope line="163">
                    <scope line="164"/>
                </scope>
                <scope line="167">
                    <scope line="168"/>
                    <scope line="170"/>
                </scope>
                <scope line="179"/>
                <scope line="191">
                    <scope line="192"/>
                    <scope line="195"/>
                </scope>
            </method>
        </class>
    </source>