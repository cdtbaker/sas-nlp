<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.awt"/>
        <import package="java.beans.ConstructorProperties"/>
        <import package="java.io.Serializable"/>
        <class name="OverlayLayout" line="5">
            <implements interface="LayoutManager2"/>
            <implements interface="Serializable"/>
            <javadoc line="5">
                A layout manager to arrange components over the top
                  of each other.  The requested size of the container
                  will be the largest requested size of the children,
                  taking alignment needs into consideration.
                  The alignment is based upon what is needed to properly
                  fit the children in the allocation area.  The children
                  will be placed such that their alignment points are all
                  on top of each other.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <author>
                    Timothy Prinzing                    
                </author>
            </javadoc>
            <javadoc line="26">
                Constructs a layout manager that performs overlay
                  arrangement of the children.  The layout manager
                  created is dedicated to the given container.                
                <param>
                    target  the container to do layout against                    
                </param>
            </javadoc>
            <method name="OverlayLayout" type="constructor" line="32">
                <params>
                    <param name="target" type="Container"/>
                </params>
            </method>
            <javadoc line="35">
                Returns the container that uses this layout manager.                
                <return>
                    the container that uses this layout manager                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getTarget" type="Container" line="40"/>
            <javadoc line="43">
                Indicates a child has changed its layout related information,
                  which causes any cached calculations to be flushed.                
                <param>
                    target the container                    
                </param>
            </javadoc>
            <method name="invalidateLayout" type="void" line="48">
                <params>
                    <param name="target" type="Container"/>
                </params>
            </method>
            <javadoc line="55">
                Adds the specified component to the layout. Used by
                  this class to know when to invalidate layout.                
                <param>
                    name the name of the component                    
                </param>
                <param>
                    comp the the component to be added                    
                </param>
            </javadoc>
            <method name="addLayoutComponent" type="void" line="61">
                <params>
                    <param name="name" type="String"/>
                    <param name="comp" type="Component"/>
                </params>
            </method>
            <javadoc line="64">
                Removes the specified component from the layout. Used by
                  this class to know when to invalidate layout.                
                <param>
                    comp the component to remove                    
                </param>
            </javadoc>
            <method name="removeLayoutComponent" type="void" line="69">
                <params>
                    <param name="comp" type="Component"/>
                </params>
            </method>
            <javadoc line="72">
                Adds the specified component to the layout, using the specified
                  constraint object. Used by this class to know when to invalidate
                  layout.                
                <param>
                    comp the component to be added                    
                </param>
                <param>
                    constraints  where/how the component is added to the layout.                    
                </param>
            </javadoc>
            <method name="addLayoutComponent" type="void" line="79">
                <params>
                    <param name="comp" type="Component"/>
                    <param name="constraints" type="Object"/>
                </params>
            </method>
            <javadoc line="82">
                Returns the preferred dimensions for this layout given the components
                  in the specified target container.  Recomputes the layout if it
                  has been invalidated.  Factors in the current inset setting returned
                  by getInsets().                
                <param>
                    target the component which needs to be laid out                    
                </param>
                <return>
                    a Dimension object containing the preferred dimensions                    
                </return>
                <see>
                    #minimumLayoutSize                    
                </see>
            </javadoc>
            <method name="preferredLayoutSize" type="Dimension" line="91">
                <params>
                    <param name="target" type="Container"/>
                </params>
                <declaration name="size" type="Dimension" line="94"/>
                <declaration name="insets" type="Insets" line="95"/>
            </method>
            <javadoc line="100">
                Returns the minimum dimensions needed to lay out the components
                  contained in the specified target container.  Recomputes the layout
                  if it has been invalidated, and factors in the current inset setting.                
                <param>
                    target the component which needs to be laid out                    
                </param>
                <return>
                    a Dimension object containing the minimum dimensions                    
                </return>
                <see>
                    #preferredLayoutSize                    
                </see>
            </javadoc>
            <method name="minimumLayoutSize" type="Dimension" line="108">
                <params>
                    <param name="target" type="Container"/>
                </params>
                <declaration name="size" type="Dimension" line="111"/>
                <declaration name="insets" type="Insets" line="112"/>
            </method>
            <javadoc line="117">
                Returns the maximum dimensions needed to lay out the components
                  contained in the specified target container.  Recomputes the
                  layout if it has been invalidated, and factors in the inset setting
                  returned by &lt;code&gt;getInset&lt;/code&gt;.                
                <param>
                    target the component that needs to be laid out                    
                </param>
                <return>
                    a &lt;code&gt;Dimension&lt;/code&gt; object containing the maximum
                      dimensions                    
                </return>
                <see>
                    #preferredLayoutSize                    
                </see>
            </javadoc>
            <method name="maximumLayoutSize" type="Dimension" line="127">
                <params>
                    <param name="target" type="Container"/>
                </params>
                <declaration name="size" type="Dimension" line="130"/>
                <declaration name="insets" type="Insets" line="131"/>
            </method>
            <javadoc line="136">
                Returns the alignment along the x axis for the container.                
                <param>
                    target the container                    
                </param>
                <return>
                    the alignment &gt;= 0.0f &amp;&amp; &lt;= 1.0f                    
                </return>
            </javadoc>
            <method name="getLayoutAlignmentX" type="float" line="141">
                <params>
                    <param name="target" type="Container"/>
                </params>
            </method>
            <javadoc line="146">
                Returns the alignment along the y axis for the container.                
                <param>
                    target the container                    
                </param>
                <return>
                    the alignment &gt;= 0.0f &amp;&amp; &lt;= 1.0f                    
                </return>
            </javadoc>
            <method name="getLayoutAlignmentY" type="float" line="151">
                <params>
                    <param name="target" type="Container"/>
                </params>
            </method>
            <javadoc line="156">
                Called by the AWT when the specified container needs to be laid out.                
                <param>
                    target  the container to lay out                    
                </param>
                <exception>
                    AWTError  if the target isn&apos;t the container specified to the
                      constructor                    
                </exception>
            </javadoc>
            <method name="layoutContainer" type="void" line="162">
                <params>
                    <param name="target" type="Container"/>
                </params>
                <declaration name="nChildren" type="int" line="165"/>
                <declaration name="xOffsets" type="int[]" line="166"/>
                <declaration name="xSpans" type="int[]" line="167"/>
                <declaration name="yOffsets" type="int[]" line="168"/>
                <declaration name="ySpans" type="int[]" line="169"/>
                <declaration name="alloc" type="Dimension" line="170"/>
                <declaration name="in" type="Insets" line="171"/>
                <scope line="176">
                    <declaration name="c" type="Component" line="177"/>
                </scope>
            </method>
            <method name="checkContainer" type="void" line="181">
                <params>
                    <param name="target" type="Container"/>
                </params>
                <scope line="182"/>
            </method>
            <method name="checkRequests" type="void" line="186">
                <scope line="187">
                    <declaration name="n" type="int" line="188"/>
                    <scope line="191">
                        <declaration name="c" type="Component" line="192"/>
                        <declaration name="min" type="Dimension" line="193"/>
                        <declaration name="typ" type="Dimension" line="194"/>
                        <declaration name="max" type="Dimension" line="195"/>
                    </scope>
                </scope>
            </method>
            <declaration name="target" type="Container" line="203"/>
            <declaration name="xChildren" type="SizeRequirements[]" line="204"/>
            <declaration name="yChildren" type="SizeRequirements[]" line="205"/>
            <declaration name="xTotal" type="SizeRequirements" line="206"/>
            <declaration name="yTotal" type="SizeRequirements" line="207"/>
        </class>
    </source>