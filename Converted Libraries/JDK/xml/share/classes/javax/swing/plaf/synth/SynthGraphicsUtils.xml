<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.plaf.synth">
        <import package="sun.swing.SwingUtilities2"/>
        <import package="sun.swing.MenuItemLayoutHelper"/>
        <import package="java.awt"/>
        <import package="javax.swing"/>
        <import package="javax.swing.plaf.basic.BasicHTML"/>
        <import package="javax.swing.text"/>
        <import package="sun.swing.plaf.synth"/>
        <class name="SynthGraphicsUtils" line="9">
            <javadoc line="9">
                Wrapper for primitive graphics calls.                
                <since>
                    1.5                    
                </since>
                <author>
                    Scott Violet                    
                </author>
            </javadoc>
            <declaration name="paintIconR" type="Rectangle" line="15"/>
            <declaration name="paintTextR" type="Rectangle" line="16"/>
            <declaration name="paintViewR" type="Rectangle" line="17"/>
            <declaration name="paintInsets" type="Insets" line="18"/>
            <declaration name="iconR" type="Rectangle" line="19"/>
            <declaration name="textR" type="Rectangle" line="20"/>
            <declaration name="viewR" type="Rectangle" line="21"/>
            <declaration name="viewSizingInsets" type="Insets" line="22"/>
            <javadoc line="23">
                Creates a &lt;code&gt;SynthGraphicsUtils&lt;/code&gt;.                
            </javadoc>
            <method name="SynthGraphicsUtils" type="constructor" line="26"/>
            <javadoc line="28">
                Draws a line between the two end points.                
                <param>
                    context Identifies hosting region.                    
                </param>
                <param>
                    paintKey Identifies the portion of the component being asked
                      to paint, may be null.                    
                </param>
                <param>
                    g Graphics object to paint to                    
                </param>
                <param>
                    x1 x origin                    
                </param>
                <param>
                    y1 y origin                    
                </param>
                <param>
                    x2 x destination                    
                </param>
                <param>
                    y2 y destination                    
                </param>
            </javadoc>
            <method name="drawLine" type="void" line="39">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="paintKey" type="Object"/>
                    <param name="g" type="Graphics"/>
                    <param name="x1" type="int"/>
                    <param name="y1" type="int"/>
                    <param name="x2" type="int"/>
                    <param name="y2" type="int"/>
                </params>
            </method>
            <javadoc line="42">
                Draws a line between the two end points.
                  &lt;p&gt;This implementation supports only one line style key,
                  &lt;code&gt;&quot;dashed&quot;&lt;/code&gt;. The &lt;code&gt;&quot;dashed&quot;&lt;/code&gt; line style is applied
                  only to vertical and horizontal lines.
                  &lt;p&gt;Specifying &lt;code&gt;null&lt;/code&gt; or any key different from
                  &lt;code&gt;&quot;dashed&quot;&lt;/code&gt; will draw solid lines.                
                <param>
                    context identifies hosting region                    
                </param>
                <param>
                    paintKey identifies the portion of the component being asked
                      to paint, may be null                    
                </param>
                <param>
                    g Graphics object to paint to                    
                </param>
                <param>
                    x1 x origin                    
                </param>
                <param>
                    y1 y origin                    
                </param>
                <param>
                    x2 x destination                    
                </param>
                <param>
                    y2 y destination                    
                </param>
                <param>
                    styleKey identifies the requested style of the line (e.g. "dashed")                    
                </param>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="drawLine" type="void" line="60">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="paintKey" type="Object"/>
                    <param name="g" type="Graphics"/>
                    <param name="x1" type="int"/>
                    <param name="y1" type="int"/>
                    <param name="x2" type="int"/>
                    <param name="y2" type="int"/>
                    <param name="styleKey" type="Object"/>
                </params>
                <scope line="61">
                    <scope line="62">
                        <scope line="64"/>
                    </scope>
                    <scope line="68">
                        <scope line="70"/>
                    </scope>
                </scope>
                <scope line="75"/>
            </method>
            <javadoc line="79">
                Lays out text and an icon returning, by reference, the location to
                  place the icon and text.                
                <param>
                    ss SynthContext                    
                </param>
                <param>
                    fm FontMetrics for the Font to use, this may be ignored                    
                </param>
                <param>
                    text Text to layout                    
                </param>
                <param>
                    icon Icon to layout                    
                </param>
                <param>
                    hAlign horizontal alignment                    
                </param>
                <param>
                    vAlign vertical alignment                    
                </param>
                <param>
                    hTextPosition horizontal text position                    
                </param>
                <param>
                    vTextPosition vertical text position                    
                </param>
                <param>
                    viewR Rectangle to layout text and icon in.                    
                </param>
                <param>
                    iconR Rectangle to place icon bounds in                    
                </param>
                <param>
                    textR Rectangle to place text in                    
                </param>
                <param>
                    iconTextGap gap between icon and text                    
                </param>
            </javadoc>
            <method name="layoutText" type="String" line="95">
                <params>
                    <param name="ss" type="SynthContext"/>
                    <param name="fm" type="FontMetrics"/>
                    <param name="text" type="String"/>
                    <param name="icon" type="Icon"/>
                    <param name="hAlign" type="int"/>
                    <param name="vAlign" type="int"/>
                    <param name="hTextPosition" type="int"/>
                    <param name="vTextPosition" type="int"/>
                    <param name="viewR" type="Rectangle"/>
                    <param name="iconR" type="Rectangle"/>
                    <param name="textR" type="Rectangle"/>
                    <param name="iconTextGap" type="int"/>
                </params>
                <scope line="96">
                    <declaration name="wrapper" type="SynthIconWrapper" line="97"/>
                    <declaration name="formattedText" type="String" line="98"/>
                </scope>
            </method>
            <javadoc line="104">
                Returns the size of the passed in string.                
                <param>
                    ss SynthContext                    
                </param>
                <param>
                    font Font to use                    
                </param>
                <param>
                    metrics FontMetrics, may be ignored                    
                </param>
                <param>
                    text Text to get size of.                    
                </param>
            </javadoc>
            <method name="computeStringWidth" type="int" line="111">
                <params>
                    <param name="ss" type="SynthContext"/>
                    <param name="font" type="Font"/>
                    <param name="metrics" type="FontMetrics"/>
                    <param name="text" type="String"/>
                </params>
            </method>
            <javadoc line="114">
                Returns the minimum size needed to properly render an icon and text.                
                <param>
                    ss SynthContext                    
                </param>
                <param>
                    font Font to use                    
                </param>
                <param>
                    text Text to layout                    
                </param>
                <param>
                    icon Icon to layout                    
                </param>
                <param>
                    hAlign horizontal alignment                    
                </param>
                <param>
                    vAlign vertical alignment                    
                </param>
                <param>
                    hTextPosition horizontal text position                    
                </param>
                <param>
                    vTextPosition vertical text position                    
                </param>
                <param>
                    iconTextGap gap between icon and text                    
                </param>
                <param>
                    mnemonicIndex Index into text to render the mnemonic at, -1
                      indicates no mnemonic.                    
                </param>
            </javadoc>
            <method name="getMinimumSize" type="Dimension" line="128">
                <params>
                    <param name="ss" type="SynthContext"/>
                    <param name="font" type="Font"/>
                    <param name="text" type="String"/>
                    <param name="icon" type="Icon"/>
                    <param name="hAlign" type="int"/>
                    <param name="vAlign" type="int"/>
                    <param name="hTextPosition" type="int"/>
                    <param name="vTextPosition" type="int"/>
                    <param name="iconTextGap" type="int"/>
                    <param name="mnemonicIndex" type="int"/>
                </params>
                <declaration name="c" type="JComponent" line="129"/>
                <declaration name="size" type="Dimension" line="130"/>
                <declaration name="v" type="View" line="131"/>
                <scope line="132"/>
            </method>
            <javadoc line="137">
                Returns the maximum size needed to properly render an icon and text.                
                <param>
                    ss SynthContext                    
                </param>
                <param>
                    font Font to use                    
                </param>
                <param>
                    text Text to layout                    
                </param>
                <param>
                    icon Icon to layout                    
                </param>
                <param>
                    hAlign horizontal alignment                    
                </param>
                <param>
                    vAlign vertical alignment                    
                </param>
                <param>
                    hTextPosition horizontal text position                    
                </param>
                <param>
                    vTextPosition vertical text position                    
                </param>
                <param>
                    iconTextGap gap between icon and text                    
                </param>
                <param>
                    mnemonicIndex Index into text to render the mnemonic at, -1
                      indicates no mnemonic.                    
                </param>
            </javadoc>
            <method name="getMaximumSize" type="Dimension" line="151">
                <params>
                    <param name="ss" type="SynthContext"/>
                    <param name="font" type="Font"/>
                    <param name="text" type="String"/>
                    <param name="icon" type="Icon"/>
                    <param name="hAlign" type="int"/>
                    <param name="vAlign" type="int"/>
                    <param name="hTextPosition" type="int"/>
                    <param name="vTextPosition" type="int"/>
                    <param name="iconTextGap" type="int"/>
                    <param name="mnemonicIndex" type="int"/>
                </params>
                <declaration name="c" type="JComponent" line="152"/>
                <declaration name="size" type="Dimension" line="153"/>
                <declaration name="v" type="View" line="154"/>
                <scope line="155"/>
            </method>
            <javadoc line="160">
                Returns the maximum height of the the Font from the passed in
                  SynthContext.                
                <param>
                    context SynthContext used to determine font.                    
                </param>
                <return>
                    maximum height of the characters for the font from the passed
                      in context.                    
                </return>
            </javadoc>
            <method name="getMaximumCharHeight" type="int" line="167">
                <params>
                    <param name="context" type="SynthContext"/>
                </params>
                <declaration name="fm" type="FontMetrics" line="168"/>
            </method>
            <javadoc line="171">
                Returns the preferred size needed to properly render an icon and text.                
                <param>
                    ss SynthContext                    
                </param>
                <param>
                    font Font to use                    
                </param>
                <param>
                    text Text to layout                    
                </param>
                <param>
                    icon Icon to layout                    
                </param>
                <param>
                    hAlign horizontal alignment                    
                </param>
                <param>
                    vAlign vertical alignment                    
                </param>
                <param>
                    hTextPosition horizontal text position                    
                </param>
                <param>
                    vTextPosition vertical text position                    
                </param>
                <param>
                    iconTextGap gap between icon and text                    
                </param>
                <param>
                    mnemonicIndex Index into text to render the mnemonic at, -1
                      indicates no mnemonic.                    
                </param>
            </javadoc>
            <method name="getPreferredSize" type="Dimension" line="185">
                <params>
                    <param name="ss" type="SynthContext"/>
                    <param name="font" type="Font"/>
                    <param name="text" type="String"/>
                    <param name="icon" type="Icon"/>
                    <param name="hAlign" type="int"/>
                    <param name="vAlign" type="int"/>
                    <param name="hTextPosition" type="int"/>
                    <param name="vTextPosition" type="int"/>
                    <param name="iconTextGap" type="int"/>
                    <param name="mnemonicIndex" type="int"/>
                </params>
                <declaration name="c" type="JComponent" line="186"/>
                <declaration name="insets" type="Insets" line="187"/>
                <declaration name="dx" type="int" line="188"/>
                <declaration name="dy" type="int" line="189"/>
                <scope line="190"/>
                <scope line="193"/>
                <scope line="196">
                    <declaration name="fm" type="FontMetrics" line="197"/>
                    <declaration name="x1" type="int" line="204"/>
                    <declaration name="x2" type="int" line="205"/>
                    <declaration name="y1" type="int" line="206"/>
                    <declaration name="y2" type="int" line="207"/>
                    <declaration name="rv" type="Dimension" line="208"/>
                </scope>
            </method>
            <javadoc line="214">
                Paints text at the specified location. This will not attempt to
                  render the text as html nor will it offset by the insets of the
                  component.                
                <param>
                    ss SynthContext                    
                </param>
                <param>
                    g Graphics used to render string in.                    
                </param>
                <param>
                    text Text to render                    
                </param>
                <param>
                    bounds Bounds of the text to be drawn.                    
                </param>
                <param>
                    mnemonicIndex Index to draw string at.                    
                </param>
            </javadoc>
            <method name="paintText" type="void" line="224">
                <params>
                    <param name="ss" type="SynthContext"/>
                    <param name="g" type="Graphics"/>
                    <param name="text" type="String"/>
                    <param name="bounds" type="Rectangle"/>
                    <param name="mnemonicIndex" type="int"/>
                </params>
            </method>
            <javadoc line="227">
                Paints text at the specified location. This will not attempt to
                  render the text as html nor will it offset by the insets of the
                  component.                
                <param>
                    ss SynthContext                    
                </param>
                <param>
                    g Graphics used to render string in.                    
                </param>
                <param>
                    text Text to render                    
                </param>
                <param>
                    x X location to draw text at.                    
                </param>
                <param>
                    y Upper left corner to draw text at.                    
                </param>
                <param>
                    mnemonicIndex Index to draw string at.                    
                </param>
            </javadoc>
            <method name="paintText" type="void" line="238">
                <params>
                    <param name="ss" type="SynthContext"/>
                    <param name="g" type="Graphics"/>
                    <param name="text" type="String"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="mnemonicIndex" type="int"/>
                </params>
                <scope line="239">
                    <declaration name="c" type="JComponent" line="240"/>
                    <declaration name="fm" type="FontMetrics" line="241"/>
                </scope>
            </method>
            <javadoc line="246">
                Paints an icon and text. This will render the text as html, if
                  necessary, and offset the location by the insets of the component.                
                <param>
                    ss SynthContext                    
                </param>
                <param>
                    g Graphics to render string and icon into                    
                </param>
                <param>
                    text Text to layout                    
                </param>
                <param>
                    icon Icon to layout                    
                </param>
                <param>
                    hAlign horizontal alignment                    
                </param>
                <param>
                    vAlign vertical alignment                    
                </param>
                <param>
                    hTextPosition horizontal text position                    
                </param>
                <param>
                    vTextPosition vertical text position                    
                </param>
                <param>
                    iconTextGap gap between icon and text                    
                </param>
                <param>
                    mnemonicIndex Index into text to render the mnemonic at, -1
                      indicates no mnemonic.                    
                </param>
                <param>
                    textOffset Amount to offset the text when painting                    
                </param>
            </javadoc>
            <method name="paintText" type="void" line="262">
                <params>
                    <param name="ss" type="SynthContext"/>
                    <param name="g" type="Graphics"/>
                    <param name="text" type="String"/>
                    <param name="icon" type="Icon"/>
                    <param name="hAlign" type="int"/>
                    <param name="vAlign" type="int"/>
                    <param name="hTextPosition" type="int"/>
                    <param name="vTextPosition" type="int"/>
                    <param name="iconTextGap" type="int"/>
                    <param name="mnemonicIndex" type="int"/>
                    <param name="textOffset" type="int"/>
                </params>
                <scope line="263"/>
                <declaration name="c" type="JComponent" line="266"/>
                <declaration name="fm" type="FontMetrics" line="267"/>
                <declaration name="insets" type="Insets" line="268"/>
                <declaration name="clippedText" type="String" line="275"/>
                <scope line="276">
                    <declaration name="color" type="Color" line="277"/>
                    <scope line="278"/>
                    <scope line="281"/>
                </scope>
                <scope line="288">
                    <declaration name="v" type="View" line="289"/>
                    <scope line="290"/>
                    <scope line="293"/>
                </scope>
            </method>
            <javadoc line="300">
                A quick note about how preferred sizes are calculated... Generally
                  speaking, SynthPopupMenuUI will run through the list of its children
                  (from top to bottom) and ask each for its preferred size.  Each menu
                  item will add up the max width of each element (icons, text,
                  accelerator spacing, accelerator text or arrow icon) encountered thus
                  far, so by the time all menu items have been calculated, we will
                  know the maximum (preferred) menu item size for that popup menu.
                  Later when it comes time to paint each menu item, we can use those
                  same accumulated max element sizes in order to layout the item.                
            </javadoc>
            <method name="getPreferredMenuItemSize" type="Dimension" line="311">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="accContext" type="SynthContext"/>
                    <param name="c" type="JComponent"/>
                    <param name="checkIcon" type="Icon"/>
                    <param name="arrowIcon" type="Icon"/>
                    <param name="defaultTextIconGap" type="int"/>
                    <param name="acceleratorDelimiter" type="String"/>
                    <param name="useCheckAndArrow" type="boolean"/>
                    <param name="propertyPrefix" type="String"/>
                </params>
                <declaration name="mi" type="JMenuItem" line="312"/>
                <declaration name="lh" type="SynthMenuItemLayoutHelper" line="313"/>
                <declaration name="result" type="Dimension" line="314"/>
                <declaration name="gap" type="int" line="315"/>
                <declaration name="insets" type="Insets" line="322"/>
                <scope line="323"/>
                <scope line="327"/>
                <scope line="330"/>
            </method>
            <method name="applyInsets" type="void" line="335">
                <params>
                    <param name="rect" type="Rectangle"/>
                    <param name="insets" type="Insets"/>
                    <param name="leftToRight" type="boolean"/>
                </params>
                <scope line="336"/>
            </method>
            <method name="paint" type="void" line="343">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="accContext" type="SynthContext"/>
                    <param name="g" type="Graphics"/>
                    <param name="checkIcon" type="Icon"/>
                    <param name="arrowIcon" type="Icon"/>
                    <param name="acceleratorDelimiter" type="String"/>
                    <param name="defaultTextIconGap" type="int"/>
                    <param name="propertyPrefix" type="String"/>
                </params>
                <declaration name="mi" type="JMenuItem" line="344"/>
                <declaration name="style" type="SynthStyle" line="345"/>
                <declaration name="viewRect" type="Rectangle" line="347"/>
                <declaration name="leftToRight" type="boolean" line="348"/>
                <declaration name="lh" type="SynthMenuItemLayoutHelper" line="350"/>
                <declaration name="lr" type="MenuItemLayoutHelper.LayoutResult" line="351"/>
            </method>
            <method name="paintMenuItem" type="void" line="354">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="lh" type="SynthMenuItemLayoutHelper"/>
                    <param name="lr" type="MenuItemLayoutHelper.LayoutResult"/>
                </params>
                <declaration name="holdf" type="Font" line="355"/>
                <declaration name="holdc" type="Color" line="356"/>
            </method>
            <method name="paintBackground" type="void" line="365">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="lh" type="SynthMenuItemLayoutHelper"/>
                </params>
            </method>
            <method name="paintBackground" type="void" line="368">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="g" type="Graphics"/>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <method name="paintIcon" type="void" line="371">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="lh" type="SynthMenuItemLayoutHelper"/>
                    <param name="lr" type="MenuItemLayoutHelper.LayoutResult"/>
                </params>
                <scope line="372">
                    <declaration name="icon" type="Icon" line="373"/>
                    <declaration name="mi" type="JMenuItem" line="374"/>
                    <declaration name="model" type="ButtonModel" line="375"/>
                    <scope line="376"/>
                    <scope line="379">
                        <scope line="381"/>
                    </scope>
                    <scope line="385"/>
                    <scope line="388">
                        <declaration name="iconRect" type="Rectangle" line="389"/>
                    </scope>
                </scope>
            </method>
            <method name="paintCheckIcon" type="void" line="394">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="lh" type="SynthMenuItemLayoutHelper"/>
                    <param name="lr" type="MenuItemLayoutHelper.LayoutResult"/>
                </params>
                <scope line="395">
                    <declaration name="checkRect" type="Rectangle" line="396"/>
                </scope>
            </method>
            <method name="paintAccText" type="void" line="400">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="lh" type="SynthMenuItemLayoutHelper"/>
                    <param name="lr" type="MenuItemLayoutHelper.LayoutResult"/>
                </params>
                <declaration name="accText" type="String" line="401"/>
                <scope line="402"/>
            </method>
            <method name="paintText" type="void" line="408">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="lh" type="SynthMenuItemLayoutHelper"/>
                    <param name="lr" type="MenuItemLayoutHelper.LayoutResult"/>
                </params>
                <scope line="409">
                    <scope line="410"/>
                    <scope line="413"/>
                </scope>
            </method>
            <method name="paintArrowIcon" type="void" line="420">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="lh" type="SynthMenuItemLayoutHelper"/>
                    <param name="lr" type="MenuItemLayoutHelper.LayoutResult"/>
                </params>
                <scope line="421">
                    <declaration name="arrowRect" type="Rectangle" line="422"/>
                </scope>
            </method>
            <class name="SynthIconWrapper" line="426">
                <implements interface="Icon"/>
                <javadoc line="426">
                    Wraps a SynthIcon around the Icon interface, forwarding calls to
                      the SynthIcon with a given SynthContext.                    
                </javadoc>
                <declaration name="CACHE" type="java.util.List&lt;SynthIconWrapper&gt;" line="431"/>
                <declaration name="synthIcon" type="SynthIcon" line="432"/>
                <declaration name="context" type="SynthContext" line="433"/>
                <method name="get" type="SynthIconWrapper" line="434">
                    <params>
                        <param name="icon" type="SynthIcon"/>
                        <param name="context" type="SynthContext"/>
                    </params>
                    <scope line="435">
                        <declaration name="size" type="int" line="436"/>
                        <scope line="437">
                            <declaration name="wrapper" type="SynthIconWrapper" line="438"/>
                        </scope>
                    </scope>
                </method>
                <method name="release" type="void" line="445">
                    <params>
                        <param name="wrapper" type="SynthIconWrapper"/>
                    </params>
                    <scope line="447"/>
                </method>
                <method name="SynthIconWrapper" type="constructor" line="451">
                    <params>
                        <param name="icon" type="SynthIcon"/>
                        <param name="context" type="SynthContext"/>
                    </params>
                </method>
                <method name="reset" type="void" line="454">
                    <params>
                        <param name="icon" type="SynthIcon"/>
                        <param name="context" type="SynthContext"/>
                    </params>
                </method>
                <method name="paintIcon" type="void" line="458">
                    <params>
                        <param name="c" type="Component"/>
                        <param name="g" type="Graphics"/>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                    </params>
                </method>
                <method name="getIconWidth" type="int" line="460"/>
                <method name="getIconHeight" type="int" line="463"/>
            </class>
        </class>
    </source>