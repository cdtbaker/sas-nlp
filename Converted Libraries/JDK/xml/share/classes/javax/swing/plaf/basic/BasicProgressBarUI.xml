<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.plaf.basic">
        <import package="sun.swing.SwingUtilities2"/>
        <import package="java.awt"/>
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.awt.event"/>
        <import package="javax.swing"/>
        <import package="javax.swing.event"/>
        <import package="javax.swing.plaf"/>
        <import package="java.beans.PropertyChangeListener"/>
        <import package="java.beans.PropertyChangeEvent"/>
        <import package="java.io.Serializable"/>
        <import package="sun.swing.DefaultLookup"/>
        <class name="BasicProgressBarUI" line="13">
            <extends class="ProgressBarUI"/>
            <javadoc line="13">
                A Basic L&amp;F implementation of ProgressBarUI.                
                <author>
                    Michael C. Albers                    
                </author>
                <author>
                    Kathy Walrath                    
                </author>
            </javadoc>
            <declaration name="cachedPercent" type="int" line="19"/>
            <declaration name="cellLength" type="int" line="20"/>
            <declaration name="selectionForeground" type="Color" line="21"/>
            <declaration name="animator" type="Animator" line="22"/>
            <declaration name="progressBar" type="JProgressBar" line="23"/>
            <declaration name="changeListener" type="ChangeListener" line="24"/>
            <declaration name="handler" type="Handler" line="25"/>
            <declaration name="animationIndex" type="int" line="26"/>
            <javadoc line="26">
                The current state of the indeterminate animation&apos;s cycle.
                  0, the initial value, means paint the first frame.
                  When the progress bar is indeterminate and showing,
                  the default animation thread updates this variable
                  by invoking incrementAnimationIndex()
                  every repaintInterval milliseconds.                
            </javadoc>
            <declaration name="numFrames" type="int" line="35"/>
            <javadoc line="35">
                The number of frames per cycle. Under the default implementation,
                  this depends on the cycleTime and repaintInterval.  It
                  must be an even number for the default painting algorithm.  This
                  value is set in the initIndeterminateValues method.                
            </javadoc>
            <declaration name="repaintInterval" type="int" line="42"/>
            <javadoc line="42">
                Interval (in ms) between repaints of the indeterminate progress bar.
                  The value of this method is set
                  (every time the progress bar changes to indeterminate mode)
                  using the
                  &quot;ProgressBar.repaintInterval&quot; key in the defaults table.                
            </javadoc>
            <declaration name="cycleTime" type="int" line="50"/>
            <javadoc line="50">
                The number of milliseconds until the animation cycle repeats.
                  The value of this method is set
                  (every time the progress bar changes to indeterminate mode)
                  using the
                  &quot;ProgressBar.cycleTime&quot; key in the defaults table.                
            </javadoc>
            <declaration name="ADJUSTTIMER" type="boolean" line="58"/>
            <declaration name="boxRect" type="Rectangle" line="59"/>
            <javadoc line="59">
                Used to hold the location and size of the bouncing box (returned
                  by getBox) to be painted.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="nextPaintRect" type="Rectangle" line="65"/>
            <javadoc line="65">
                The rectangle to be updated the next time the
                  animation thread calls repaint.  For bouncing-box
                  animation this rect should include the union of
                  the currently displayed box (which needs to be erased)
                  and the box to be displayed next.
                  This rectangle&apos;s values are set in
                  the setAnimationIndex method.                
            </javadoc>
            <declaration name="componentInnards" type="Rectangle" line="75"/>
            <javadoc line="75">
                The component&apos;s painting area, not including the border.                
            </javadoc>
            <declaration name="oldComponentInnards" type="Rectangle" line="79"/>
            <declaration name="delta" type="double" line="80"/>
            <javadoc line="80">
                For bouncing-box animation, the change in position per frame.                
            </javadoc>
            <declaration name="maxPosition" type="int" line="84"/>
            <method name="createUI" type="ComponentUI" line="85">
                <params>
                    <param name="x" type="JComponent"/>
                </params>
            </method>
            <method name="installUI" type="void" line="88">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <scope line="92"/>
            </method>
            <method name="uninstallUI" type="void" line="96">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <scope line="97"/>
            </method>
            <method name="installDefaults" type="void" line="104"/>
            <method name="uninstallDefaults" type="void" line="114"/>
            <method name="installListeners" type="void" line="117"/>
            <method name="getHandler" type="Handler" line="122">
                <scope line="123"/>
            </method>
            <javadoc line="128">
                Starts the animation thread, creating and initializing
                  it if necessary. This method is invoked when an
                  indeterminate progress bar should start animating.
                  Reasons for this may include:
                  &lt;ul&gt;
                  &lt;li&gt;The progress bar is determinate and becomes displayable
                  &lt;li&gt;The progress bar is displayable and becomes determinate
                  &lt;li&gt;The progress bar is displayable and determinate and this
                  UI is installed
                  &lt;/ul&gt;
                  If you implement your own animation thread,
                  you must override this method.                
                <since>
                    1.4                    
                </since>
                <see>
                    #stopAnimationTimer                    
                </see>
            </javadoc>
            <method name="startAnimationTimer" type="void" line="144">
                <scope line="145"/>
            </method>
            <javadoc line="150">
                Stops the animation thread.
                  This method is invoked when the indeterminate
                  animation should be stopped. Reasons for this may include:
                  &lt;ul&gt;
                  &lt;li&gt;The progress bar changes to determinate
                  &lt;li&gt;The progress bar is no longer part of a displayable hierarchy
                  &lt;li&gt;This UI in uninstalled
                  &lt;/ul&gt;
                  If you implement your own animation thread,
                  you must override this method.                
                <since>
                    1.4                    
                </since>
                <see>
                    #startAnimationTimer                    
                </see>
            </javadoc>
            <method name="stopAnimationTimer" type="void" line="164">
                <scope line="165"/>
            </method>
            <javadoc line="169">
                Removes all listeners installed by this object.                
            </javadoc>
            <method name="uninstallListeners" type="void" line="172"/>
            <javadoc line="177">
                Returns the baseline.                
                <throws>
                    NullPointerException {@inheritDoc}                    
                </throws>
                <throws>
                    IllegalArgumentException {@inheritDoc}                    
                </throws>
                <see>
                    javax.swing.JComponent#getBaseline(int,int)                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getBaseline" type="int" line="184">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <scope line="186">
                    <declaration name="metrics" type="FontMetrics" line="187"/>
                    <declaration name="insets" type="Insets" line="188"/>
                    <declaration name="y" type="int" line="189"/>
                </scope>
            </method>
            <javadoc line="195">
                Returns an enum indicating how the baseline of the component
                  changes as the size changes.                
                <throws>
                    NullPointerException {@inheritDoc}                    
                </throws>
                <see>
                    javax.swing.JComponent#getBaseline(int,int)                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getBaselineResizeBehavior" type="Component.BaselineResizeBehavior" line="202">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <scope line="204"/>
            </method>
            <method name="getPreferredInnerHorizontal" type="Dimension" line="209">
                <declaration name="horizDim" type="Dimension" line="210"/>
                <scope line="211"/>
            </method>
            <method name="getPreferredInnerVertical" type="Dimension" line="216">
                <declaration name="vertDim" type="Dimension" line="217"/>
                <scope line="218"/>
            </method>
            <javadoc line="223">
                The &quot;selectionForeground&quot; is the color of the text when it is painted
                  over a filled area of the progress bar.                
            </javadoc>
            <method name="getSelectionForeground" type="Color" line="227"/>
            <javadoc line="230">
                The &quot;selectionBackground&quot; is the color of the text when it is painted
                  over an unfilled area of the progress bar.                
            </javadoc>
            <method name="getSelectionBackground" type="Color" line="234"/>
            <method name="getCachedPercent" type="int" line="237"/>
            <method name="setCachedPercent" type="void" line="240">
                <params>
                    <param name="cachedPercent" type="int"/>
                </params>
            </method>
            <javadoc line="243">
                Returns the width (if HORIZONTAL) or height (if VERTICAL)
                  of each of the indivdual cells/units to be rendered in the
                  progress bar. However, for text rendering simplification and
                  aesthetic considerations, this function will return 1 when
                  the progress string is being rendered.                
                <return>
                    the value representing the spacing between cells                    
                </return>
                <see>
                    #setCellLength                    
                </see>
                <see>
                    JProgressBar#isStringPainted                    
                </see>
            </javadoc>
            <method name="getCellLength" type="int" line="253">
                <scope line="254"/>
                <scope line="257"/>
            </method>
            <method name="setCellLength" type="void" line="261">
                <params>
                    <param name="cellLen" type="int"/>
                </params>
            </method>
            <javadoc line="264">
                Returns the spacing between each of the cells/units in the
                  progress bar. However, for text rendering simplification and
                  aesthetic considerations, this function will return 0 when
                  the progress string is being rendered.                
                <return>
                    the value representing the spacing between cells                    
                </return>
                <see>
                    #setCellSpacing                    
                </see>
                <see>
                    JProgressBar#isStringPainted                    
                </see>
            </javadoc>
            <method name="getCellSpacing" type="int" line="273">
                <scope line="274"/>
                <scope line="277"/>
            </method>
            <method name="setCellSpacing" type="void" line="281">
                <params>
                    <param name="cellSpace" type="int"/>
                </params>
            </method>
            <javadoc line="284">
                This determines the amount of the progress bar that should be filled
                  based on the percent done gathered from the model. This is a common
                  operation so it was abstracted out. It assumes that your progress bar
                  is linear. That is, if you are making a circular progress indicator,
                  you will want to override this method.                
            </javadoc>
            <method name="getAmountFull" type="int" line="291">
                <params>
                    <param name="b" type="Insets"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <declaration name="amountFull" type="int" line="292"/>
                <declaration name="model" type="BoundedRangeModel" line="293"/>
                <scope line="294">
                    <scope line="295"/>
                    <scope line="298"/>
                </scope>
            </method>
            <javadoc line="304">
                Delegates painting to one of two methods:
                  paintDeterminate or paintIndeterminate.                
            </javadoc>
            <method name="paint" type="void" line="308">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="c" type="JComponent"/>
                </params>
                <scope line="309"/>
                <scope line="312"/>
            </method>
            <javadoc line="316">
                Stores the position and size of
                  the bouncing box that would be painted for the current animation index
                  in &lt;code&gt;r&lt;/code&gt; and returns &lt;code&gt;r&lt;/code&gt;.
                  Subclasses that add to the painting performed
                  in this class&apos;s implementation of &lt;code&gt;paintIndeterminate&lt;/code&gt; --
                  to draw an outline around the bouncing box, for example --
                  can use this method to get the location of the bouncing
                  box that was just painted.
                  By overriding this method,
                  you have complete control over the size and position
                  of the bouncing box,
                  without having to reimplement &lt;code&gt;paintIndeterminate&lt;/code&gt;.                
                <param>
                    r  the Rectangle instance to be modified;
                      may be &lt;code&gt;null&lt;/code&gt;                    
                </param>
                <return>
                    &lt;code&gt;null&lt;/code&gt; if no box should be drawn;
                      otherwise, returns the passed-in rectangle
                      (if non-null)
                      or a new rectangle                    
                </return>
                <see>
                    #setAnimationIndex                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getBox" type="Rectangle" line="338">
                <params>
                    <param name="r" type="Rectangle"/>
                </params>
                <declaration name="currentFrame" type="int" line="339"/>
                <declaration name="middleFrame" type="int" line="340"/>
                <scope line="341"/>
                <scope line="345"/>
                <scope line="348"/>
                <scope line="351">
                    <scope line="352"/>
                    <scope line="355"/>
                </scope>
                <scope line="359">
                    <scope line="360"/>
                    <scope line="363"/>
                </scope>
            </method>
            <javadoc line="369">
                Updates delta, max position.
                  Assumes componentInnards is correct (e.g. call after sizeChanged()).                
            </javadoc>
            <method name="updateSizes" type="void" line="373">
                <declaration name="length" type="int" line="374"/>
                <scope line="375"/>
                <scope line="379"/>
            </method>
            <javadoc line="385">
                Assumes that the component innards, max position, etc. are up-to-date.                
            </javadoc>
            <method name="getGenericBox" type="Rectangle" line="388">
                <params>
                    <param name="r" type="Rectangle"/>
                </params>
                <scope line="389"/>
                <scope line="392">
                    <scope line="394"/>
                    <scope line="397"/>
                </scope>
                <scope line="402">
                    <scope line="404"/>
                    <scope line="407"/>
                </scope>
            </method>
            <javadoc line="414">
                Returns the length
                  of the &quot;bouncing box&quot; to be painted.
                  This method is invoked by the
                  default implementation of &lt;code&gt;paintIndeterminate&lt;/code&gt;
                  to get the width (if the progress bar is horizontal)
                  or height (if vertical) of the box.
                  For example:
                  &lt;blockquote&gt;
                  &lt;pre&gt;
                  boxRect.width = getBoxLength(componentInnards.width,
                  componentInnards.height);
                  &lt;/pre&gt;
                  &lt;/blockquote&gt;                
                <param>
                    availableLength  the amount of space available
                      for the bouncing box to move in;
                      for a horizontal progress bar,
                      for example,
                      this should be
                      the inside width of the progress bar
                      (the component width minus borders)                    
                </param>
                <param>
                    otherDimension   for a horizontal progress bar, this should be
                      the inside height of the progress bar; this
                      value might be used to constrain or determine
                      the return value                    
                </param>
                <return>
                    the size of the box dimension being determined;
                      must be no larger than &lt;code&gt;availableLength&lt;/code&gt;                    
                </return>
                <see>
                    javax.swing.SwingUtilities#calculateInnerArea                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getBoxLength" type="int" line="444">
                <params>
                    <param name="availableLength" type="int"/>
                    <param name="otherDimension" type="int"/>
                </params>
            </method>
            <javadoc line="447">
                All purpose paint method that should do the right thing for all
                  linear bouncing-box progress bars.
                  Override this if you are making another kind of
                  progress bar.                
                <see>
                    #paintDeterminate                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="paintIndeterminate" type="void" line="455">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="c" type="JComponent"/>
                </params>
                <scope line="456"/>
                <declaration name="b" type="Insets" line="459"/>
                <declaration name="barRectWidth" type="int" line="460"/>
                <declaration name="barRectHeight" type="int" line="461"/>
                <scope line="462"/>
                <declaration name="g2" type="Graphics2D" line="465"/>
                <scope line="467"/>
                <scope line="471">
                    <scope line="472"/>
                    <scope line="475"/>
                </scope>
            </method>
            <javadoc line="480">
                All purpose paint method that should do the right thing for almost
                  all linear, determinate progress bars. By setting a few values in
                  the defaults
                  table, things should work just fine to paint your progress bar.
                  Naturally, override this if you are making a circular or
                  semi-circular progress bar.                
                <see>
                    #paintIndeterminate                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="paintDeterminate" type="void" line="490">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="c" type="JComponent"/>
                </params>
                <scope line="491"/>
                <declaration name="b" type="Insets" line="494"/>
                <declaration name="barRectWidth" type="int" line="495"/>
                <declaration name="barRectHeight" type="int" line="496"/>
                <scope line="497"/>
                <declaration name="cellLength" type="int" line="500"/>
                <declaration name="cellSpacing" type="int" line="501"/>
                <declaration name="amountFull" type="int" line="502"/>
                <declaration name="g2" type="Graphics2D" line="503"/>
                <scope line="505">
                    <scope line="506"/>
                    <scope line="509"/>
                    <scope line="512"/>
                    <scope line="515"/>
                </scope>
                <scope line="519">
                    <scope line="520"/>
                    <scope line="523"/>
                </scope>
                <scope line="528"/>
            </method>
            <method name="paintString" type="void" line="532">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="amountFull" type="int"/>
                    <param name="b" type="Insets"/>
                </params>
                <scope line="533">
                    <scope line="534">
                        <scope line="535"/>
                        <scope line="539"/>
                    </scope>
                    <scope line="543"/>
                </scope>
                <scope line="547">
                    <scope line="548"/>
                    <scope line="552"/>
                </scope>
            </method>
            <javadoc line="557">
                Paints the progress string.                
                <param>
                    g Graphics used for drawing.                    
                </param>
                <param>
                    x x location of bounding box                    
                </param>
                <param>
                    y y location of bounding box                    
                </param>
                <param>
                    width width of bounding box                    
                </param>
                <param>
                    height height of bounding box                    
                </param>
                <param>
                    fillStart start location, in x or y depending on orientation,
                      of the filled portion of the progress bar.                    
                </param>
                <param>
                    amountFull size of the fill region, either width or height
                      depending upon orientation.                    
                </param>
                <param>
                    b Insets of the progress bar.                    
                </param>
            </javadoc>
            <method name="paintString" type="void" line="570">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="fillStart" type="int"/>
                    <param name="amountFull" type="int"/>
                    <param name="b" type="Insets"/>
                </params>
                <scope line="571"/>
                <declaration name="g2" type="Graphics2D" line="574"/>
                <declaration name="progressString" type="String" line="575"/>
                <declaration name="renderLocation" type="Point" line="577"/>
                <declaration name="oldClip" type="Rectangle" line="578"/>
                <scope line="579"/>
                <scope line="586">
                    <declaration name="rotate" type="AffineTransform" line="588"/>
                </scope>
            </method>
            <javadoc line="598">
                Designate the place where the progress string will be painted.
                  This implementation places it at the center of the progress
                  bar (in both x and y). Override this if you want to right,
                  left, top, or bottom align the progress string or if you need
                  to nudge it around for any reason.                
            </javadoc>
            <method name="getStringPlacement" type="Point" line="605">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="progressString" type="String"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <declaration name="fontSizer" type="FontMetrics" line="606"/>
                <declaration name="stringWidth" type="int" line="607"/>
                <scope line="608"/>
                <scope line="611"/>
            </method>
            <method name="getPreferredSize" type="Dimension" line="615">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <declaration name="size" type="Dimension" line="616"/>
                <declaration name="border" type="Insets" line="617"/>
                <declaration name="fontSizer" type="FontMetrics" line="618"/>
                <scope line="619">
                    <scope line="621">
                        <declaration name="progString" type="String" line="622"/>
                        <declaration name="stringWidth" type="int" line="623"/>
                        <scope line="624"/>
                        <declaration name="stringHeight" type="int" line="627"/>
                        <scope line="628"/>
                    </scope>
                </scope>
                <scope line="633">
                    <scope line="635">
                        <declaration name="progString" type="String" line="636"/>
                        <declaration name="stringHeight" type="int" line="637"/>
                        <scope line="638"/>
                        <declaration name="stringWidth" type="int" line="641"/>
                        <scope line="642"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="651">
                The Minimum size for this component is 10. The rationale here
                  is that there should be at least one pixel per 10 percent.                
            </javadoc>
            <method name="getMinimumSize" type="Dimension" line="655">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <declaration name="pref" type="Dimension" line="656"/>
                <scope line="657"/>
                <scope line="660"/>
            </method>
            <method name="getMaximumSize" type="Dimension" line="665">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <declaration name="pref" type="Dimension" line="666"/>
                <scope line="667"/>
                <scope line="670"/>
            </method>
            <javadoc line="675">
                Gets the index of the current animation frame.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getAnimationIndex" type="int" line="679"/>
            <javadoc line="682">
                Returns the number of frames for the complete animation loop
                  used by an indeterminate JProgessBar. The progress chunk will go
                  from one end to the other and back during the entire loop. This
                  visual behavior may be changed by subclasses in other Look and Feels.                
                <return>
                    the number of frames                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getFrameCount" type="int" line="690"/>
            <javadoc line="693">
                Sets the index of the current animation frame
                  to the specified value and requests that the
                  progress bar be repainted.
                  Subclasses that don&apos;t use the default painting code
                  might need to override this method
                  to change the way that the &lt;code&gt;repaint&lt;/code&gt; method
                  is invoked.                
                <param>
                    newValue the new animation index; no checking
                      is performed on its value                    
                </param>
                <see>
                    #incrementAnimationIndex                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setAnimationIndex" type="void" line="706">
                <params>
                    <param name="newValue" type="int"/>
                </params>
                <scope line="707">
                    <scope line="708"/>
                    <scope line="717">
                        <scope line="719"/>
                    </scope>
                </scope>
                <scope line="724"/>
                <scope line="727"/>
                <scope line="730"/>
            </method>
            <method name="sizeChanged" type="boolean" line="734">
                <scope line="735"/>
            </method>
            <javadoc line="742">
                Sets the index of the current animation frame,
                  to the next valid value,
                  which results in the progress bar being repainted.
                  The next valid value is, by default,
                  the current animation index plus one.
                  If the new value would be too large,
                  this method sets the index to 0.
                  Subclasses might need to override this method
                  to ensure that the index does not go over
                  the number of frames needed for the particular
                  progress bar instance.
                  This method is invoked by the default animation thread
                  every &lt;em&gt;X&lt;/em&gt; milliseconds,
                  where &lt;em&gt;X&lt;/em&gt; is specified by the &quot;ProgressBar.repaintInterval&quot;
                  UI default.                
                <see>
                    #setAnimationIndex                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="incrementAnimationIndex" type="void" line="761">
                <declaration name="newValue" type="int" line="762"/>
                <scope line="763"/>
                <scope line="766"/>
            </method>
            <javadoc line="770">
                Returns the desired number of milliseconds between repaints.
                  This value is meaningful
                  only if the progress bar is in indeterminate mode.
                  The repaint interval determines how often the
                  default animation thread&apos;s timer is fired.
                  It&apos;s also used by the default indeterminate progress bar
                  painting code when determining
                  how far to move the bouncing box per frame.
                  The repaint interval is specified by
                  the &quot;ProgressBar.repaintInterval&quot; UI default.                
                <return>
                    the repaint interval, in milliseconds                    
                </return>
            </javadoc>
            <method name="getRepaintInterval" type="int" line="783"/>
            <method name="initRepaintInterval" type="int" line="786"/>
            <javadoc line="790">
                Returns the number of milliseconds per animation cycle.
                  This value is meaningful
                  only if the progress bar is in indeterminate mode.
                  The cycle time is used by the default indeterminate progress bar
                  painting code when determining
                  how far to move the bouncing box per frame.
                  The cycle time is specified by
                  the &quot;ProgressBar.cycleTime&quot; UI default
                  and adjusted, if necessary,
                  by the initIndeterminateDefaults method.                
                <return>
                    the cycle time, in milliseconds                    
                </return>
            </javadoc>
            <method name="getCycleTime" type="int" line="803"/>
            <method name="initCycleTime" type="int" line="806"/>
            <javadoc line="810">
                Initialize cycleTime, repaintInterval, numFrames, animationIndex.                
            </javadoc>
            <method name="initIndeterminateDefaults" type="void" line="813">
                <scope line="816"/>
                <scope line="819"/>
                <scope line="822">
                    <declaration name="factor" type="int" line="823"/>
                </scope>
            </method>
            <javadoc line="827">
                Invoked by PropertyChangeHandler.
                  NOTE: This might not be invoked until after the first
                  paintIndeterminate call.                
            </javadoc>
            <method name="initIndeterminateValues" type="void" line="832">
                <scope line="841"/>
            </method>
            <javadoc line="845">
                Invoked by PropertyChangeHandler.                
            </javadoc>
            <method name="cleanUpIndeterminateValues" type="void" line="848">
                <scope line="849"/>
            </method>
            <method name="initAnimationIndex" type="void" line="860">
                <scope line="861"/>
                <scope line="864"/>
            </method>
            <class name="Animator" line="868">
                <implements interface="ActionListener"/>
                <javadoc line="868">
                    Implements an animation thread that invokes repaint
                      at a fixed rate.  If ADJUSTTIMER is true, this thread
                      will continuously adjust the repaint interval to
                      try to make the actual time between repaints match
                      the requested rate.                    
                </javadoc>
                <declaration name="timer" type="Timer" line="876"/>
                <declaration name="previousDelay" type="long" line="877"/>
                <declaration name="interval" type="int" line="878"/>
                <declaration name="lastCall" type="long" line="879"/>
                <declaration name="MINIMUM_DELAY" type="int" line="880"/>
                <javadoc line="881">
                    Creates a timer if one doesn&apos;t already exist,
                      then starts the timer thread.                    
                </javadoc>
                <method name="start" type="void" line="885">
                    <params>
                        <param name="interval" type="int"/>
                    </params>
                    <scope line="888"/>
                    <scope line="891"/>
                    <scope line="894"/>
                </method>
                <javadoc line="900">
                    Stops the timer thread.                    
                </javadoc>
                <method name="stop" type="void" line="903"/>
                <javadoc line="906">
                    Reacts to the timer&apos;s action events.                    
                </javadoc>
                <method name="actionPerformed" type="void" line="909">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                    <scope line="910">
                        <declaration name="time" type="long" line="911"/>
                        <scope line="912">
                            <declaration name="nextDelay" type="int" line="913"/>
                            <scope line="914"/>
                        </scope>
                    </scope>
                </method>
            </class>
            <class name="ChangeHandler" line="926">
                <implements interface="ChangeListener"/>
                <javadoc line="926">
                    This class should be treated as a &amp;quot;protected&amp;quot; inner class.
                      Instantiate it only within subclasses of {@code BasicProgressBarUI}.                    
                </javadoc>
                <method name="stateChanged" type="void" line="931">
                    <params>
                        <param name="e" type="ChangeEvent"/>
                    </params>
                </method>
            </class>
            <class name="Handler" line="935">
                <implements interface="ChangeListener"/>
                <implements interface="PropertyChangeListener"/>
                <implements interface="HierarchyListener"/>
                <method name="stateChanged" type="void" line="936">
                    <params>
                        <param name="e" type="ChangeEvent"/>
                    </params>
                    <declaration name="model" type="BoundedRangeModel" line="937"/>
                    <declaration name="newRange" type="int" line="938"/>
                    <declaration name="newPercent" type="int" line="939"/>
                    <declaration name="oldPercent" type="int" line="940"/>
                    <scope line="941"/>
                    <scope line="944"/>
                    <scope line="947"/>
                </method>
                <method name="propertyChange" type="void" line="952">
                    <params>
                        <param name="e" type="PropertyChangeEvent"/>
                    </params>
                    <declaration name="prop" type="String" line="953"/>
                    <scope line="954">
                        <scope line="955"/>
                        <scope line="958"/>
                    </scope>
                </method>
                <method name="hierarchyChanged" type="void" line="964">
                    <params>
                        <param name="he" type="HierarchyEvent"/>
                    </params>
                    <scope line="965">
                        <scope line="966">
                            <scope line="967"/>
                            <scope line="970"/>
                        </scope>
                    </scope>
                </method>
            </class>
        </class>
    </source>