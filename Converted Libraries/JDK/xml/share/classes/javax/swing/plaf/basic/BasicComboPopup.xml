<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.plaf.basic">
        <import package="javax.accessibility.AccessibleContext"/>
        <import package="javax.swing"/>
        <import package="javax.swing.border.Border"/>
        <import package="javax.swing.border.LineBorder"/>
        <import package="javax.swing.event"/>
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="java.beans.PropertyChangeListener"/>
        <import package="java.beans.PropertyChangeEvent"/>
        <import package="java.io.Serializable"/>
        <class name="BasicComboPopup" line="12">
            <extends class="JPopupMenu"/>
            <implements interface="ComboPopup"/>
            <javadoc line="12">
                This is a basic implementation of the &lt;code&gt;ComboPopup&lt;/code&gt; interface.
                  This class represents the ui for the popup portion of the combo box.
                  &lt;p&gt;
                  All event handling is handled by listener classes created with the
                  &lt;code&gt;createxxxListener()&lt;/code&gt; methods and internal classes.
                  You can change the behavior of this class by overriding the
                  &lt;code&gt;createxxxListener()&lt;/code&gt; methods and supplying your own
                  event listeners or subclassing from the ones supplied in this class.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <author>
                    Tom Santos                    
                </author>
                <author>
                    Mark Davidson                    
                </author>
            </javadoc>
            <class name="EmptyListModelClass" line="34">
                <implements interface="ListModel"/>
                <implements interface="Serializable"/>
                <method name="getSize" type="int" line="35"/>
                <method name="getElementAt" type="Object" line="38">
                    <params>
                        <param name="index" type="int"/>
                    </params>
                </method>
                <method name="addListDataListener" type="void" line="41">
                    <params>
                        <param name="l" type="ListDataListener"/>
                    </params>
                </method>
                <method name="removeListDataListener" type="void" line="43">
                    <params>
                        <param name="l" type="ListDataListener"/>
                    </params>
                </method>
            </class>
            <declaration name="EmptyListModel" type="ListModel" line="46"/>
            <declaration name="LIST_BORDER" type="Border" line="47"/>
            <declaration name="comboBox" type="JComboBox" line="48"/>
            <declaration name="list" type="JList" line="49"/>
            <javadoc line="49">
                This protected field is implementation specific. Do not access directly
                  or override. Use the accessor methods instead.                
                <see>
                    #getList                    
                </see>
                <see>
                    #createList                    
                </see>
            </javadoc>
            <declaration name="scroller" type="JScrollPane" line="56"/>
            <javadoc line="56">
                This protected field is implementation specific. Do not access directly
                  or override. Use the create method instead                
                <see>
                    #createScroller                    
                </see>
            </javadoc>
            <declaration name="valueIsAdjusting" type="boolean" line="62"/>
            <javadoc line="62">
                As of Java 2 platform v1.4 this previously undocumented field is no
                  longer used.                
            </javadoc>
            <declaration name="handler" type="Handler" line="67"/>
            <javadoc line="67">
                Implementation of all the listener classes.                
            </javadoc>
            <declaration name="mouseMotionListener" type="MouseMotionListener" line="71"/>
            <javadoc line="71">
                This protected field is implementation specific. Do not access directly
                  or override. Use the accessor or create methods instead.                
                <see>
                    #getMouseMotionListener                    
                </see>
                <see>
                    #createMouseMotionListener                    
                </see>
            </javadoc>
            <declaration name="mouseListener" type="MouseListener" line="78"/>
            <javadoc line="78">
                This protected field is implementation specific. Do not access directly
                  or override. Use the accessor or create methods instead.                
                <see>
                    #getMouseListener                    
                </see>
                <see>
                    #createMouseListener                    
                </see>
            </javadoc>
            <declaration name="keyListener" type="KeyListener" line="85"/>
            <javadoc line="85">
                This protected field is implementation specific. Do not access directly
                  or override. Use the accessor or create methods instead.                
                <see>
                    #getKeyListener                    
                </see>
                <see>
                    #createKeyListener                    
                </see>
            </javadoc>
            <declaration name="listSelectionListener" type="ListSelectionListener" line="92"/>
            <javadoc line="92">
                This protected field is implementation specific. Do not access directly
                  or override. Use the create method instead.                
                <see>
                    #createListSelectionListener                    
                </see>
            </javadoc>
            <declaration name="listMouseListener" type="MouseListener" line="98"/>
            <javadoc line="98">
                This protected field is implementation specific. Do not access directly
                  or override. Use the create method instead.                
                <see>
                    #createListMouseListener                    
                </see>
            </javadoc>
            <declaration name="listMouseMotionListener" type="MouseMotionListener" line="104"/>
            <javadoc line="104">
                This protected field is implementation specific. Do not access directly
                  or override. Use the create method instead                
                <see>
                    #createListMouseMotionListener                    
                </see>
            </javadoc>
            <declaration name="propertyChangeListener" type="PropertyChangeListener" line="110"/>
            <javadoc line="110">
                This protected field is implementation specific. Do not access directly
                  or override. Use the create method instead                
                <see>
                    #createPropertyChangeListener                    
                </see>
            </javadoc>
            <declaration name="listDataListener" type="ListDataListener" line="116"/>
            <javadoc line="116">
                This protected field is implementation specific. Do not access directly
                  or override. Use the create method instead                
                <see>
                    #createListDataListener                    
                </see>
            </javadoc>
            <declaration name="itemListener" type="ItemListener" line="122"/>
            <javadoc line="122">
                This protected field is implementation specific. Do not access directly
                  or override. Use the create method instead                
                <see>
                    #createItemListener                    
                </see>
            </javadoc>
            <declaration name="autoscrollTimer" type="Timer" line="128"/>
            <javadoc line="128">
                This protected field is implementation specific. Do not access directly
                  or override.                
            </javadoc>
            <declaration name="hasEntered" type="boolean" line="133"/>
            <declaration name="isAutoScrolling" type="boolean" line="134"/>
            <declaration name="scrollDirection" type="int" line="135"/>
            <declaration name="SCROLL_UP" type="int" line="136"/>
            <declaration name="SCROLL_DOWN" type="int" line="137"/>
            <javadoc line="138">
                Implementation of ComboPopup.show().                
            </javadoc>
            <method name="show" type="void" line="141">
                <declaration name="location" type="Point" line="144"/>
            </method>
            <javadoc line="147">
                Implementation of ComboPopup.hide().                
            </javadoc>
            <method name="hide" type="void" line="150">
                <declaration name="manager" type="MenuSelectionManager" line="151"/>
                <declaration name="selection" type="MenuElement[]" line="152"/>
                <scope line="153">
                    <scope line="154"/>
                </scope>
                <scope line="159"/>
            </method>
            <javadoc line="163">
                Implementation of ComboPopup.getList().                
            </javadoc>
            <method name="getList" type="JList" line="166"/>
            <javadoc line="169">
                Implementation of ComboPopup.getMouseListener().                
                <return>
                    a <code>MouseListener</code> or null                    
                </return>
                <see>
                    ComboPopup#getMouseListener                    
                </see>
            </javadoc>
            <method name="getMouseListener" type="MouseListener" line="174">
                <scope line="175"/>
            </method>
            <javadoc line="180">
                Implementation of ComboPopup.getMouseMotionListener().                
                <return>
                    a <code>MouseMotionListener</code> or null                    
                </return>
                <see>
                    ComboPopup#getMouseMotionListener                    
                </see>
            </javadoc>
            <method name="getMouseMotionListener" type="MouseMotionListener" line="185">
                <scope line="186"/>
            </method>
            <javadoc line="191">
                Implementation of ComboPopup.getKeyListener().                
                <return>
                    a <code>KeyListener</code> or null                    
                </return>
                <see>
                    ComboPopup#getKeyListener                    
                </see>
            </javadoc>
            <method name="getKeyListener" type="KeyListener" line="196">
                <scope line="197"/>
            </method>
            <javadoc line="202">
                Called when the UI is uninstalling.  Since this popup isn&apos;t in the component
                  tree, it won&apos;t get it&apos;s uninstallUI() called.  It removes the listeners that
                  were added in addComboBoxListeners().                
            </javadoc>
            <method name="uninstallingUI" type="void" line="207">
                <scope line="208"/>
                <scope line="211"/>
            </method>
            <javadoc line="219">
                Removes the listeners from the combo box model                
                <param>
                    model The combo box model to install listeners                    
                </param>
                <see>
                    #installComboBoxModelListeners                    
                </see>
            </javadoc>
            <method name="uninstallComboBoxModelListeners" type="void" line="224">
                <params>
                    <param name="model" type="ComboBoxModel"/>
                </params>
                <scope line="225"/>
            </method>
            <method name="uninstallKeyboardActions" type="void" line="229"/>
            <method name="BasicComboPopup" type="constructor" line="231">
                <params>
                    <param name="combo" type="JComboBox"/>
                </params>
            </method>
            <method name="firePopupMenuWillBecomeVisible" type="void" line="246"/>
            <method name="firePopupMenuWillBecomeInvisible" type="void" line="249"/>
            <method name="firePopupMenuCanceled" type="void" line="253"/>
            <javadoc line="257">
                Creates a listener
                  that will watch for mouse-press and release events on the combo box.
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  When overriding this method, make sure to maintain the existing
                  behavior.                
                <return>
                    a <code>MouseListener</code> which will be added to
                      the combo box or null                    
                </return>
            </javadoc>
            <method name="createMouseListener" type="MouseListener" line="266"/>
            <javadoc line="269">
                Creates the mouse motion listener which will be added to the combo
                  box.
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  When overriding this method, make sure to maintain the existing
                  behavior.                
                <return>
                    a <code>MouseMotionListener</code> which will be added to
                      the combo box or null                    
                </return>
            </javadoc>
            <method name="createMouseMotionListener" type="MouseMotionListener" line="278"/>
            <javadoc line="281">
                Creates the key listener that will be added to the combo box. If
                  this method returns null then it will not be added to the combo box.                
                <return>
                    a <code>KeyListener</code> or null                    
                </return>
            </javadoc>
            <method name="createKeyListener" type="KeyListener" line="286"/>
            <javadoc line="289">
                Creates a list selection listener that watches for selection changes in
                  the popup&apos;s list.  If this method returns null then it will not
                  be added to the popup list.                
                <return>
                    an instance of a <code>ListSelectionListener</code> or null                    
                </return>
            </javadoc>
            <method name="createListSelectionListener" type="ListSelectionListener" line="295"/>
            <javadoc line="298">
                Creates a list data listener which will be added to the
                  &lt;code&gt;ComboBoxModel&lt;/code&gt;. If this method returns null then
                  it will not be added to the combo box model.                
                <return>
                    an instance of a <code>ListDataListener</code> or null                    
                </return>
            </javadoc>
            <method name="createListDataListener" type="ListDataListener" line="304"/>
            <javadoc line="307">
                Creates a mouse listener that watches for mouse events in
                  the popup&apos;s list. If this method returns null then it will
                  not be added to the combo box.                
                <return>
                    an instance of a <code>MouseListener</code> or null                    
                </return>
            </javadoc>
            <method name="createListMouseListener" type="MouseListener" line="313"/>
            <javadoc line="316">
                Creates a mouse motion listener that watches for mouse motion
                  events in the popup&apos;s list. If this method returns null then it will
                  not be added to the combo box.                
                <return>
                    an instance of a <code>MouseMotionListener</code> or null                    
                </return>
            </javadoc>
            <method name="createListMouseMotionListener" type="MouseMotionListener" line="322"/>
            <javadoc line="325">
                Creates a &lt;code&gt;PropertyChangeListener&lt;/code&gt; which will be added to
                  the combo box. If this method returns null then it will not
                  be added to the combo box.                
                <return>
                    an instance of a <code>PropertyChangeListener</code> or null                    
                </return>
            </javadoc>
            <method name="createPropertyChangeListener" type="PropertyChangeListener" line="331"/>
            <javadoc line="334">
                Creates an &lt;code&gt;ItemListener&lt;/code&gt; which will be added to the
                  combo box. If this method returns null then it will not
                  be added to the combo box.
                  &lt;p&gt;
                  Subclasses may override this method to return instances of their own
                  ItemEvent handlers.                
                <return>
                    an instance of an <code>ItemListener</code> or null                    
                </return>
            </javadoc>
            <method name="createItemListener" type="ItemListener" line="343"/>
            <method name="getHandler" type="Handler" line="346">
                <scope line="347"/>
            </method>
            <javadoc line="352">
                Creates the JList used in the popup to display
                  the items in the combo box model. This method is called when the UI class
                  is created.                
                <return>
                    a <code>JList</code> used to display the combo box items                    
                </return>
            </javadoc>
            <method name="createList" type="JList" line="358">
                <anonymous_class line="359">
                    <method name="processMouseEvent" type="void" line="360">
                        <params>
                            <param name="e" type="MouseEvent"/>
                        </params>
                        <scope line="361">
                            <declaration name="toolkit" type="Toolkit" line="362"/>
                        </scope>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="370">
                Configures the list which is used to hold the combo box items in the
                  popup. This method is called when the UI class
                  is created.                
                <see>
                    #createList                    
                </see>
            </javadoc>
            <method name="configureList" type="void" line="376"/>
            <javadoc line="389">
                Adds the listeners to the list control.                
            </javadoc>
            <method name="installListListeners" type="void" line="392">
                <scope line="393"/>
                <scope line="396"/>
                <scope line="399"/>
            </method>
            <method name="uninstallListListeners" type="void" line="403">
                <scope line="404"/>
                <scope line="408"/>
                <scope line="412"/>
            </method>
            <javadoc line="418">
                Creates the scroll pane which houses the scrollable list.                
            </javadoc>
            <method name="createScroller" type="JScrollPane" line="421">
                <declaration name="sp" type="JScrollPane" line="422"/>
            </method>
            <javadoc line="426">
                Configures the scrollable portion which holds the list within
                  the combo box popup. This method is called when the UI class
                  is created.                
            </javadoc>
            <method name="configureScroller" type="void" line="431"/>
            <javadoc line="436">
                Configures the popup portion of the combo box. This method is called
                  when the UI class is created.                
            </javadoc>
            <method name="configurePopup" type="void" line="440"/>
            <javadoc line="449">
                This method adds the necessary listeners to the JComboBox.                
            </javadoc>
            <method name="installComboBoxListeners" type="void" line="452">
                <scope line="453"/>
                <scope line="456"/>
            </method>
            <javadoc line="461">
                Installs the listeners on the combo box model. Any listeners installed
                  on the combo box model should be removed in
                  &lt;code&gt;uninstallComboBoxModelListeners&lt;/code&gt;.                
                <param>
                    model The combo box model to install listeners                    
                </param>
                <see>
                    #uninstallComboBoxModelListeners                    
                </see>
            </javadoc>
            <method name="installComboBoxModelListeners" type="void" line="468">
                <params>
                    <param name="model" type="ComboBoxModel"/>
                </params>
                <scope line="469"/>
            </method>
            <method name="installKeyboardActions" type="void" line="473"/>
            <class name="InvocationMouseHandler" line="475">
                <extends class="MouseAdapter"/>
                <javadoc line="475">
                    A listener to be registered upon the combo box
                      (&lt;em&gt;not&lt;/em&gt; its popup menu)
                      to handle mouse events
                      that affect the state of the popup menu.
                      The main purpose of this listener is to make the popup menu
                      appear and disappear.
                      This listener also helps
                      with click-and-drag scenarios by setting the selection if the mouse was
                      released over the list during a drag.
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      We recommend that you &lt;em&gt;not&lt;/em&gt;
                      create subclasses of this class.
                      If you absolutely must create a subclass,
                      be sure to invoke the superclass
                      version of each method.                    
                    <see>
                        BasicComboPopup#createMouseListener                        
                    </see>
                </javadoc>
                <javadoc line="495">
                    Responds to mouse-pressed events on the combo box.                    
                    <param>
                        e the mouse-press event to be handled                        
                    </param>
                </javadoc>
                <method name="mousePressed" type="void" line="499">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
                <javadoc line="502">
                    Responds to the user terminating
                      a click or drag that began on the combo box.                    
                    <param>
                        e the mouse-release event to be handled                        
                    </param>
                </javadoc>
                <method name="mouseReleased" type="void" line="507">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
            </class>
            <class name="InvocationMouseMotionHandler" line="511">
                <extends class="MouseMotionAdapter"/>
                <javadoc line="511">
                    This listener watches for dragging and updates the current selection in the
                      list if it is dragging over the list.                    
                </javadoc>
                <method name="mouseDragged" type="void" line="516">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
            </class>
            <class name="InvocationKeyHandler" line="520">
                <extends class="KeyAdapter"/>
                <javadoc line="520">
                    As of Java 2 platform v 1.4, this class is now obsolete and is only included for
                      backwards API compatibility. Do not instantiate or subclass.
                      &lt;p&gt;
                      All the functionality of this class has been included in
                      BasicComboBoxUI ActionMap/InputMap methods.                    
                </javadoc>
                <method name="keyReleased" type="void" line="528">
                    <params>
                        <param name="e" type="KeyEvent"/>
                    </params>
                </method>
            </class>
            <class name="ListSelectionHandler" line="531">
                <implements interface="ListSelectionListener"/>
                <javadoc line="531">
                    As of Java 2 platform v 1.4, this class is now obsolete, doesn&apos;t do anything, and
                      is only included for backwards API compatibility. Do not call or
                      override.                    
                </javadoc>
                <method name="valueChanged" type="void" line="537">
                    <params>
                        <param name="e" type="ListSelectionEvent"/>
                    </params>
                </method>
            </class>
            <class name="ListDataHandler" line="540">
                <implements interface="ListDataListener"/>
                <javadoc line="540">
                    As of 1.4, this class is now obsolete, doesn&apos;t do anything, and
                      is only included for backwards API compatibility. Do not call or
                      override.
                      &lt;p&gt;
                      The functionality has been migrated into &lt;code&gt;ItemHandler&lt;/code&gt;.                    
                    <see>
                        #createItemListener                        
                    </see>
                </javadoc>
                <method name="contentsChanged" type="void" line="549">
                    <params>
                        <param name="e" type="ListDataEvent"/>
                    </params>
                </method>
                <method name="intervalAdded" type="void" line="551">
                    <params>
                        <param name="e" type="ListDataEvent"/>
                    </params>
                </method>
                <method name="intervalRemoved" type="void" line="553">
                    <params>
                        <param name="e" type="ListDataEvent"/>
                    </params>
                </method>
            </class>
            <class name="ListMouseHandler" line="556">
                <extends class="MouseAdapter"/>
                <javadoc line="556">
                    This listener hides the popup when the mouse is released in the list.                    
                </javadoc>
                <method name="mousePressed" type="void" line="560">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
                <method name="mouseReleased" type="void" line="562">
                    <params>
                        <param name="anEvent" type="MouseEvent"/>
                    </params>
                </method>
            </class>
            <class name="ListMouseMotionHandler" line="566">
                <extends class="MouseMotionAdapter"/>
                <javadoc line="566">
                    This listener changes the selected item as you move the mouse over the list.
                      The selection change is not committed to the model, this is for user feedback only.                    
                </javadoc>
                <method name="mouseMoved" type="void" line="571">
                    <params>
                        <param name="anEvent" type="MouseEvent"/>
                    </params>
                </method>
            </class>
            <class name="ItemHandler" line="575">
                <implements interface="ItemListener"/>
                <javadoc line="575">
                    This listener watches for changes to the selection in the
                      combo box.                    
                </javadoc>
                <method name="itemStateChanged" type="void" line="580">
                    <params>
                        <param name="e" type="ItemEvent"/>
                    </params>
                </method>
            </class>
            <class name="PropertyChangeHandler" line="584">
                <implements interface="PropertyChangeListener"/>
                <javadoc line="584">
                    This listener watches for bound properties that have changed in the
                      combo box.
                      &lt;p&gt;
                      Subclasses which wish to listen to combo box property changes should
                      call the superclass methods to ensure that the combo popup correctly
                      handles property changes.                    
                    <see>
                        #createPropertyChangeListener                        
                    </see>
                </javadoc>
                <method name="propertyChange" type="void" line="594">
                    <params>
                        <param name="e" type="PropertyChangeEvent"/>
                    </params>
                </method>
            </class>
            <class name="AutoScrollActionHandler" line="598">
                <implements interface="ActionListener"/>
                <declaration name="direction" type="int" line="599"/>
                <method name="AutoScrollActionHandler" type="constructor" line="600">
                    <params>
                        <param name="direction" type="int"/>
                    </params>
                </method>
                <method name="actionPerformed" type="void" line="603">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                    <scope line="604"/>
                    <scope line="607"/>
                </method>
            </class>
            <class name="Handler" line="612">
                <implements interface="ItemListener"/>
                <implements interface="MouseListener"/>
                <implements interface="MouseMotionListener"/>
                <implements interface="PropertyChangeListener"/>
                <implements interface="Serializable"/>
                <method name="mouseClicked" type="void" line="613">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
                <method name="mousePressed" type="void" line="615">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                    <scope line="616"/>
                    <scope line="620">
                        <declaration name="comp" type="Component" line="621"/>
                        <scope line="622"/>
                    </scope>
                    <scope line="626"/>
                </method>
                <method name="mouseReleased" type="void" line="631">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                    <scope line="632">
                        <scope line="633">
                            <scope line="634"/>
                        </scope>
                        <scope line="640"/>
                    </scope>
                    <declaration name="source" type="Component" line="645"/>
                    <declaration name="size" type="Dimension" line="646"/>
                    <declaration name="bounds" type="Rectangle" line="647"/>
                    <scope line="648">
                        <declaration name="newEvent" type="MouseEvent" line="649"/>
                        <declaration name="location" type="Point" line="650"/>
                        <declaration name="r" type="Rectangle" line="651"/>
                        <scope line="653">
                            <scope line="654"/>
                        </scope>
                    </scope>
                </method>
                <method name="mouseEntered" type="void" line="664">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
                <method name="mouseExited" type="void" line="666">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
                <method name="mouseMoved" type="void" line="668">
                    <params>
                        <param name="anEvent" type="MouseEvent"/>
                    </params>
                    <scope line="669">
                        <declaration name="location" type="Point" line="670"/>
                        <declaration name="r" type="Rectangle" line="671"/>
                        <scope line="673"/>
                    </scope>
                </method>
                <method name="mouseDragged" type="void" line="678">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                    <scope line="679"/>
                    <scope line="682">
                        <declaration name="newEvent" type="MouseEvent" line="683"/>
                        <declaration name="r" type="Rectangle" line="684"/>
                        <scope line="686">
                            <scope line="688"/>
                            <declaration name="location" type="Point" line="691"/>
                            <scope line="692"/>
                        </scope>
                        <scope line="696">
                            <scope line="697">
                                <declaration name="directionToScroll" type="int" line="698"/>
                                <scope line="699"/>
                                <scope line="703"/>
                            </scope>
                            <scope line="707">
                                <scope line="708"/>
                            </scope>
                        </scope>
                    </scope>
                </method>
                <method name="propertyChange" type="void" line="716">
                    <params>
                        <param name="e" type="PropertyChangeEvent"/>
                    </params>
                    <declaration name="comboBox" type="JComboBox" line="717"/>
                    <declaration name="propertyName" type="String" line="718"/>
                    <scope line="719">
                        <declaration name="oldModel" type="ComboBoxModel" line="720"/>
                        <declaration name="newModel" type="ComboBoxModel" line="721"/>
                        <scope line="725"/>
                    </scope>
                    <scope line="729">
                        <scope line="731"/>
                    </scope>
                    <scope line="735">
                        <declaration name="o" type="ComponentOrientation" line="736"/>
                        <declaration name="list" type="JList" line="737"/>
                        <scope line="738"/>
                        <scope line="741"/>
                        <scope line="744"/>
                    </scope>
                    <scope line="748"/>
                </method>
                <method name="itemStateChanged" type="void" line="752">
                    <params>
                        <param name="e" type="ItemEvent"/>
                    </params>
                    <scope line="753">
                        <declaration name="comboBox" type="JComboBox" line="754"/>
                    </scope>
                </method>
            </class>
            <javadoc line="759">
                Overridden to unconditionally return false.                
            </javadoc>
            <method name="isFocusTraversable" type="boolean" line="762"/>
            <javadoc line="765">
                This protected method is implementation specific and should be private.
                  do not call or override.                
            </javadoc>
            <method name="startAutoScrolling" type="void" line="769">
                <params>
                    <param name="direction" type="int"/>
                </params>
                <scope line="770"/>
                <scope line="774">
                    <declaration name="convertedPoint" type="Point" line="776"/>
                    <declaration name="top" type="int" line="777"/>
                </scope>
                <scope line="781">
                    <declaration name="size" type="Dimension" line="783"/>
                    <declaration name="convertedPoint" type="Point" line="784"/>
                    <declaration name="bottom" type="int" line="785"/>
                </scope>
            </method>
            <javadoc line="791">
                This protected method is implementation specific and should be private.
                  do not call or override.                
            </javadoc>
            <method name="stopAutoScrolling" type="void" line="795">
                <scope line="797"/>
            </method>
            <javadoc line="802">
                This protected method is implementation specific and should be private.
                  do not call or override.                
            </javadoc>
            <method name="autoScrollUp" type="void" line="806">
                <declaration name="index" type="int" line="807"/>
                <scope line="808"/>
            </method>
            <javadoc line="813">
                This protected method is implementation specific and should be private.
                  do not call or override.                
            </javadoc>
            <method name="autoScrollDown" type="void" line="817">
                <declaration name="index" type="int" line="818"/>
                <declaration name="lastItem" type="int" line="819"/>
                <scope line="820"/>
            </method>
            <javadoc line="825">
                Gets the AccessibleContext associated with this BasicComboPopup.
                  The AccessibleContext will have its parent set to the ComboBox.                
                <return>
                    an AccessibleContext for the BasicComboPopup                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getAccessibleContext" type="AccessibleContext" line="831">
                <declaration name="context" type="AccessibleContext" line="832"/>
            </method>
            <javadoc line="836">
                This is is a utility method that helps event handlers figure out where to
                  send the focus when the popup is brought up.  The standard implementation
                  delegates the focus to the editor (if the combo box is editable) or to
                  the JComboBox if it is not editable.                
            </javadoc>
            <method name="delegateFocus" type="void" line="842">
                <params>
                    <param name="e" type="MouseEvent"/>
                </params>
                <scope line="843">
                    <declaration name="comp" type="Component" line="844"/>
                    <scope line="845"/>
                </scope>
                <scope line="849"/>
            </method>
            <javadoc line="853">
                Makes the popup visible if it is hidden and makes it hidden if it is
                  visible.                
            </javadoc>
            <method name="togglePopup" type="void" line="857">
                <scope line="858"/>
                <scope line="861"/>
            </method>
            <javadoc line="865">
                Sets the list selection index to the selectedIndex. This
                  method is used to synchronize the list selection with the
                  combo box selection.                
                <param>
                    selectedIndex the index to set the list                    
                </param>
            </javadoc>
            <method name="setListSelection" type="void" line="871">
                <params>
                    <param name="selectedIndex" type="int"/>
                </params>
                <scope line="872"/>
                <scope line="875"/>
            </method>
            <method name="convertMouseEvent" type="MouseEvent" line="880">
                <params>
                    <param name="e" type="MouseEvent"/>
                </params>
                <declaration name="convertedPoint" type="Point" line="881"/>
                <declaration name="newEvent" type="MouseEvent" line="882"/>
            </method>
            <javadoc line="885">
                Retrieves the height of the popup based on the current
                  ListCellRenderer and the maximum row count.                
            </javadoc>
            <method name="getPopupHeightForRowCount" type="int" line="889">
                <params>
                    <param name="maxRowCount" type="int"/>
                </params>
                <declaration name="minRowCount" type="int" line="890"/>
                <declaration name="height" type="int" line="891"/>
                <declaration name="renderer" type="ListCellRenderer" line="892"/>
                <declaration name="value" type="Object" line="893"/>
                <scope line="894">
                    <declaration name="c" type="Component" line="896"/>
                </scope>
                <scope line="899"/>
                <declaration name="border" type="Border" line="902"/>
                <scope line="903">
                    <declaration name="insets" type="Insets" line="904"/>
                </scope>
                <scope line="908">
                    <declaration name="insets" type="Insets" line="909"/>
                </scope>
            </method>
            <javadoc line="914">
                Calculate the placement and size of the popup portion of the combo box based
                  on the combo box location and the enclosing screen bounds. If
                  no transformations are required, then the returned rectangle will
                  have the same values as the parameters.                
                <param>
                    px starting x location                    
                </param>
                <param>
                    py starting y location                    
                </param>
                <param>
                    pw starting width                    
                </param>
                <param>
                    ph starting height                    
                </param>
                <return>
                    a rectangle which represents the placement and size of the popup                    
                </return>
            </javadoc>
            <method name="computePopupBounds" type="Rectangle" line="925">
                <params>
                    <param name="px" type="int"/>
                    <param name="py" type="int"/>
                    <param name="pw" type="int"/>
                    <param name="ph" type="int"/>
                </params>
                <declaration name="toolkit" type="Toolkit" line="926"/>
                <declaration name="screenBounds" type="Rectangle" line="927"/>
                <declaration name="gc" type="GraphicsConfiguration" line="928"/>
                <declaration name="p" type="Point" line="929"/>
                <scope line="931">
                    <declaration name="screenInsets" type="Insets" line="932"/>
                </scope>
                <scope line="939"/>
                <declaration name="rect" type="Rectangle" line="942"/>
                <scope line="943"/>
            </method>
            <javadoc line="948">
                Calculates the upper left location of the Popup.                
            </javadoc>
            <method name="getPopupLocation" type="Point" line="951">
                <declaration name="popupSize" type="Dimension" line="952"/>
                <declaration name="insets" type="Insets" line="953"/>
                <declaration name="popupBounds" type="Rectangle" line="955"/>
                <declaration name="scrollSize" type="Dimension" line="956"/>
                <declaration name="popupLocation" type="Point" line="957"/>
            </method>
            <javadoc line="964">
                A utility method used by the event listeners.  Given a mouse event, it changes
                  the list selection to the list item below the mouse.                
            </javadoc>
            <method name="updateListBoxSelectionForEvent" type="void" line="968">
                <params>
                    <param name="anEvent" type="MouseEvent"/>
                    <param name="shouldScroll" type="boolean"/>
                </params>
                <declaration name="location" type="Point" line="969"/>
                <declaration name="index" type="int" line="971"/>
                <scope line="972"/>
                <scope line="976"/>
            </method>
        </class>
    </source>