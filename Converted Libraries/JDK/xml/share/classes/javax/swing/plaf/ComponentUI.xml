<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.plaf">
        <import package="javax.swing.JComponent"/>
        <import package="javax.swing.SwingUtilities"/>
        <import package="javax.accessibility.Accessible"/>
        <import package="java.awt.Component"/>
        <import package="java.awt.Container"/>
        <import package="java.awt.Dimension"/>
        <import package="java.awt.Graphics"/>
        <import package="java.awt.Insets"/>
        <class name="ComponentUI" line="10">
            <javadoc line="10">
                The base class for all UI delegate objects in the Swing pluggable
                  look and feel architecture.  The UI delegate object for a Swing
                  component is responsible for implementing the aspects of the
                  component that depend on the look and feel.
                  The &lt;code&gt;JComponent&lt;/code&gt; class
                  invokes methods from this class in order to delegate operations
                  (painting, layout calculations, etc.) that may vary depending on the
                  look and feel installed.  &lt;b&gt;Client programs should not invoke methods
                  on this class directly.&lt;/b&gt;                
                <see>
                    javax.swing.JComponent                    
                </see>
                <see>
                    javax.swing.UIManager                    
                </see>
            </javadoc>
            <javadoc line="24">
                Sole constructor. (For invocation by subclass constructors,
                  typically implicit.)                
            </javadoc>
            <method name="ComponentUI" type="constructor" line="28"/>
            <javadoc line="30">
                Configures the specified component appropriately for the look and feel.
                  This method is invoked when the &lt;code&gt;ComponentUI&lt;/code&gt; instance is being installed
                  as the UI delegate on the specified component.  This method should
                  completely configure the component for the look and feel,
                  including the following:
                  &lt;ol&gt;
                  &lt;li&gt;Install default property values for color, fonts, borders,
                  icons, opacity, etc. on the component.  Whenever possible,
                  property values initialized by the client program should &lt;i&gt;not&lt;/i&gt;
                  be overridden.
                  &lt;li&gt;Install a &lt;code&gt;LayoutManager&lt;/code&gt; on the component if necessary.
                  &lt;li&gt;Create/add any required sub-components to the component.
                  &lt;li&gt;Create/install event listeners on the component.
                  &lt;li&gt;Create/install a &lt;code&gt;PropertyChangeListener&lt;/code&gt; on the component in order
                  to detect and respond to component property changes appropriately.
                  &lt;li&gt;Install keyboard UI (mnemonics, traversal, etc.) on the component.
                  &lt;li&gt;Initialize any appropriate instance data.
                  &lt;/ol&gt;                
                <param>
                    c the component where this UI delegate is being installed                    
                </param>
                <see>
                    #uninstallUI                    
                </see>
                <see>
                    javax.swing.JComponent#setUI                    
                </see>
                <see>
                    javax.swing.JComponent#updateUI                    
                </see>
            </javadoc>
            <method name="installUI" type="void" line="54">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <javadoc line="56">
                Reverses configuration which was done on the specified component during
                  &lt;code&gt;installUI&lt;/code&gt;.  This method is invoked when this
                  &lt;code&gt;UIComponent&lt;/code&gt; instance is being removed as the UI delegate
                  for the specified component.  This method should undo the
                  configuration performed in &lt;code&gt;installUI&lt;/code&gt;, being careful to
                  leave the &lt;code&gt;JComponent&lt;/code&gt; instance in a clean state (no
                  extraneous listeners, look-and-feel-specific property objects, etc.).
                  This should include the following:
                  &lt;ol&gt;
                  &lt;li&gt;Remove any UI-set borders from the component.
                  &lt;li&gt;Remove any UI-set layout managers on the component.
                  &lt;li&gt;Remove any UI-added sub-components from the component.
                  &lt;li&gt;Remove any UI-added event/property listeners from the component.
                  &lt;li&gt;Remove any UI-installed keyboard UI from the component.
                  &lt;li&gt;Nullify any allocated instance data objects to allow for GC.
                  &lt;/ol&gt;                
                <param>
                    c the component from which this UI delegate is being removed;
                      this argument is often ignored,
                      but might be used if the UI object is stateless
                      and shared by multiple components                    
                </param>
                <see>
                    #installUI                    
                </see>
                <see>
                    javax.swing.JComponent#updateUI                    
                </see>
            </javadoc>
            <method name="uninstallUI" type="void" line="80">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <javadoc line="82">
                Paints the specified component appropriately for the look and feel.
                  This method is invoked from the &lt;code&gt;ComponentUI.update&lt;/code&gt; method when
                  the specified component is being painted.  Subclasses should override
                  this method and use the specified &lt;code&gt;Graphics&lt;/code&gt; object to
                  render the content of the component.                
                <param>
                    g the &lt;code&gt;Graphics&lt;/code&gt; context in which to paint                    
                </param>
                <param>
                    c the component being painted;
                      this argument is often ignored,
                      but might be used if the UI object is stateless
                      and shared by multiple components                    
                </param>
                <see>
                    #update                    
                </see>
            </javadoc>
            <method name="paint" type="void" line="95">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <javadoc line="97">
                Notifies this UI delegate that it is time to paint the specified
                  component.  This method is invoked by &lt;code&gt;JComponent&lt;/code&gt;
                  when the specified component is being painted.
                  &lt;p&gt;By default this method fills the specified component with
                  its background color if its {@code opaque} property is {@code true},
                  and then immediately calls {@code paint}. In general this method need
                  not be overridden by subclasses; all look-and-feel rendering code should
                  reside in the {@code paint} method.                
                <param>
                    g the &lt;code&gt;Graphics&lt;/code&gt; context in which to paint                    
                </param>
                <param>
                    c the component being painted;
                      this argument is often ignored,
                      but might be used if the UI object is stateless
                      and shared by multiple components                    
                </param>
                <see>
                    #paint                    
                </see>
                <see>
                    javax.swing.JComponent#paintComponent                    
                </see>
            </javadoc>
            <method name="update" type="void" line="114">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="c" type="JComponent"/>
                </params>
                <scope line="115"/>
            </method>
            <javadoc line="121">
                Returns the specified component&apos;s preferred size appropriate for
                  the look and feel.  If &lt;code&gt;null&lt;/code&gt; is returned, the preferred
                  size will be calculated by the component&apos;s layout manager instead
                  (this is the preferred approach for any component with a specific
                  layout manager installed).  The default implementation of this
                  method returns &lt;code&gt;null&lt;/code&gt;.                
                <param>
                    c the component whose preferred size is being queried;
                      this argument is often ignored,
                      but might be used if the UI object is stateless
                      and shared by multiple components                    
                </param>
                <see>
                    javax.swing.JComponent#getPreferredSize                    
                </see>
                <see>
                    java.awt.LayoutManager#preferredLayoutSize                    
                </see>
            </javadoc>
            <method name="getPreferredSize" type="Dimension" line="135">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <javadoc line="138">
                Returns the specified component&apos;s minimum size appropriate for
                  the look and feel.  If &lt;code&gt;null&lt;/code&gt; is returned, the minimum
                  size will be calculated by the component&apos;s layout manager instead
                  (this is the preferred approach for any component with a specific
                  layout manager installed).  The default implementation of this
                  method invokes &lt;code&gt;getPreferredSize&lt;/code&gt; and returns that value.                
                <param>
                    c the component whose minimum size is being queried;
                      this argument is often ignored,
                      but might be used if the UI object is stateless
                      and shared by multiple components                    
                </param>
                <return>
                    a &lt;code&gt;Dimension&lt;/code&gt; object or &lt;code&gt;null&lt;/code&gt;                    
                </return>
                <see>
                    javax.swing.JComponent#getMinimumSize                    
                </see>
                <see>
                    java.awt.LayoutManager#minimumLayoutSize                    
                </see>
                <see>
                    #getPreferredSize                    
                </see>
            </javadoc>
            <method name="getMinimumSize" type="Dimension" line="154">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <javadoc line="157">
                Returns the specified component&apos;s maximum size appropriate for
                  the look and feel.  If &lt;code&gt;null&lt;/code&gt; is returned, the maximum
                  size will be calculated by the component&apos;s layout manager instead
                  (this is the preferred approach for any component with a specific
                  layout manager installed).  The default implementation of this
                  method invokes &lt;code&gt;getPreferredSize&lt;/code&gt; and returns that value.                
                <param>
                    c the component whose maximum size is being queried;
                      this argument is often ignored,
                      but might be used if the UI object is stateless
                      and shared by multiple components                    
                </param>
                <return>
                    a &lt;code&gt;Dimension&lt;/code&gt; object or &lt;code&gt;null&lt;/code&gt;                    
                </return>
                <see>
                    javax.swing.JComponent#getMaximumSize                    
                </see>
                <see>
                    java.awt.LayoutManager2#maximumLayoutSize                    
                </see>
            </javadoc>
            <method name="getMaximumSize" type="Dimension" line="172">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <javadoc line="175">
                Returns &lt;code&gt;true&lt;/code&gt; if the specified &lt;i&gt;x,y&lt;/i&gt; location is
                  contained within the look and feel&apos;s defined shape of the specified
                  component. &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; are defined to be relative
                  to the coordinate system of the specified component.  Although
                  a component&apos;s &lt;code&gt;bounds&lt;/code&gt; is constrained to a rectangle,
                  this method provides the means for defining a non-rectangular
                  shape within those bounds for the purpose of hit detection.                
                <param>
                    c the component where the &lt;i&gt;x,y&lt;/i&gt; location is being queried;
                      this argument is often ignored,
                      but might be used if the UI object is stateless
                      and shared by multiple components                    
                </param>
                <param>
                    x the &lt;i&gt;x&lt;/i&gt; coordinate of the point                    
                </param>
                <param>
                    y the &lt;i&gt;y&lt;/i&gt; coordinate of the point                    
                </param>
                <see>
                    javax.swing.JComponent#contains                    
                </see>
                <see>
                    java.awt.Component#contains                    
                </see>
            </javadoc>
            <method name="contains" type="boolean" line="192">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
            </method>
            <javadoc line="195">
                Returns an instance of the UI delegate for the specified component.
                  Each subclass must provide its own static &lt;code&gt;createUI&lt;/code&gt;
                  method that returns an instance of that UI delegate subclass.
                  If the UI delegate subclass is stateless, it may return an instance
                  that is shared by multiple components.  If the UI delegate is
                  stateful, then it should return a new instance per component.
                  The default implementation of this method throws an error, as it
                  should never be invoked.                
            </javadoc>
            <method name="createUI" type="ComponentUI" line="205">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <javadoc line="208">
                Returns the baseline.  The baseline is measured from the top of
                  the component.  This method is primarily meant for
                  &lt;code&gt;LayoutManager&lt;/code&gt;s to align components along their
                  baseline.  A return value less than 0 indicates this component
                  does not have a reasonable baseline and that
                  &lt;code&gt;LayoutManager&lt;/code&gt;s should not align this component on
                  its baseline.
                  &lt;p&gt;
                  This method returns -1.  Subclasses that have a meaningful baseline
                  should override appropriately.                
                <param>
                    c &lt;code&gt;JComponent&lt;/code&gt; baseline is being requested for                    
                </param>
                <param>
                    width the width to get the baseline for                    
                </param>
                <param>
                    height the height to get the baseline for                    
                </param>
                <throws>
                    NullPointerException if &lt;code&gt;c&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;                    
                </throws>
                <throws>
                    IllegalArgumentException if width or height is &amp;lt; 0                    
                </throws>
                <return>
                    baseline or a value &amp;lt; 0 indicating there is no reasonable
                      baseline                    
                </return>
                <see>
                    javax.swing.JComponent#getBaseline(int,int)                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getBaseline" type="int" line="229">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <scope line="230"/>
                <scope line="233"/>
            </method>
            <javadoc line="238">
                Returns an enum indicating how the baseline of he component
                  changes as the size changes.  This method is primarily meant for
                  layout managers and GUI builders.
                  &lt;p&gt;
                  This method returns &lt;code&gt;BaselineResizeBehavior.OTHER&lt;/code&gt;.
                  Subclasses that support a baseline should override appropriately.                
                <param>
                    c &lt;code&gt;JComponent&lt;/code&gt; to return baseline resize behavior for                    
                </param>
                <return>
                    an enum indicating how the baseline changes as the component
                      size changes                    
                </return>
                <throws>
                    NullPointerException if &lt;code&gt;c&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;                    
                </throws>
                <see>
                    javax.swing.JComponent#getBaseline(int,int)                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getBaselineResizeBehavior" type="Component.BaselineResizeBehavior" line="252">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <scope line="253"/>
            </method>
            <javadoc line="258">
                Returns the number of accessible children in the object.  If all
                  of the children of this object implement &lt;code&gt;Accessible&lt;/code&gt;,
                  this
                  method should return the number of children of this object.
                  UIs might wish to override this if they present areas on the
                  screen that can be viewed as components, but actual components
                  are not used for presenting those areas.
                  Note: As of v1.3, it is recommended that developers call
                  &lt;code&gt;Component.AccessibleAWTComponent.getAccessibleChildrenCount()&lt;/code&gt; instead
                  of this method.                
                <see>
                    #getAccessibleChild                    
                </see>
                <return>
                    the number of accessible children in the object                    
                </return>
            </javadoc>
            <method name="getAccessibleChildrenCount" type="int" line="272">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <javadoc line="275">
                Returns the &lt;code&gt;i&lt;/code&gt;th &lt;code&gt;Accessible&lt;/code&gt; child of the object.
                  UIs might need to override this if they present areas on the
                  screen that can be viewed as components, but actual components
                  are not used for presenting those areas.
                  &lt;p&gt;
                  Note: As of v1.3, it is recommended that developers call
                  &lt;code&gt;Component.AccessibleAWTComponent.getAccessibleChild()&lt;/code&gt; instead of
                  this method.                
                <see>
                    #getAccessibleChildrenCount                    
                </see>
                <param>
                    i zero-based index of child                    
                </param>
                <return>
                    the &lt;code&gt;i&lt;/code&gt;th &lt;code&gt;Accessible&lt;/code&gt; child of the object                    
                </return>
            </javadoc>
            <method name="getAccessibleChild" type="Accessible" line="288">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="i" type="int"/>
                </params>
            </method>
        </class>
    </source>