<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.plaf.metal">
        <import package="java.awt.Component"/>
        <import package="java.awt.Container"/>
        <import package="java.awt.LayoutManager"/>
        <import package="java.awt.Adjustable"/>
        <import package="java.awt.event.AdjustmentListener"/>
        <import package="java.awt.event.AdjustmentEvent"/>
        <import package="java.awt.event.ActionListener"/>
        <import package="java.awt.event.ActionEvent"/>
        <import package="java.awt.event.MouseListener"/>
        <import package="java.awt.event.MouseMotionListener"/>
        <import package="java.awt.event.MouseAdapter"/>
        <import package="java.awt.event.MouseEvent"/>
        <import package="java.awt.Graphics"/>
        <import package="java.awt.Dimension"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.Point"/>
        <import package="java.awt.Insets"/>
        <import package="java.awt.Color"/>
        <import package="java.awt.IllegalComponentStateException"/>
        <import package="java.beans"/>
        <import package="javax.swing"/>
        <import package="javax.swing.event"/>
        <import package="javax.swing.plaf"/>
        <import package="javax.swing.plaf.basic.BasicScrollBarUI"/>
        <class name="MetalScrollBarUI" line="57">
            <extends class="BasicScrollBarUI"/>
            <comment line="488">
                end class ScrollBarListener                
            </comment>
            <javadoc line="57">
                Implementation of ScrollBarUI for the Metal Look and Feel
                  &lt;p&gt;                
                <author>
                    Tom Santos                    
                </author>
                <author>
                    Steve Wilson                    
                </author>
            </javadoc>
            <declaration name="shadowColor" type="Color" line="66"/>
            <declaration name="highlightColor" type="Color" line="67"/>
            <declaration name="darkShadowColor" type="Color" line="68"/>
            <declaration name="thumbColor" type="Color" line="69"/>
            <declaration name="thumbShadow" type="Color" line="70"/>
            <declaration name="thumbHighlightColor" type="Color" line="71"/>
            <declaration name="bumps" type="MetalBumps" line="74"/>
            <declaration name="increaseButton" type="MetalScrollButton" line="76"/>
            <declaration name="decreaseButton" type="MetalScrollButton" line="77"/>
            <declaration name="scrollBarWidth" type="int" line="79"/>
            <declaration name="FREE_STANDING_PROP" type="String" line="81"/>
            <declaration name="isFreeStanding" type="boolean" line="82"/>
            <method name="createUI" type="ComponentUI" line="85">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <method name="installDefaults" type="void" line="89"/>
            <method name="installListeners" type="void" line="95"/>
            <method name="createPropertyChangeListener" type="PropertyChangeListener" line="100"/>
            <method name="configureScrollBarColors" type="void" line="105"/>
            <method name="getPreferredSize" type="Dimension" line="118">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <comment line="124">
                    Horizontal                    
                </comment>
                <scope line="120"/>
                <scope line="124"/>
            </method>
            <javadoc line="130">
                Returns the view that represents the decrease view.                
            </javadoc>
            <method name="createDecreaseButton" type="JButton" line="133">
                <params>
                    <param name="orientation" type="int"/>
                </params>
            </method>
            <javadoc line="138">
                Returns the view that represents the increase view.                
            </javadoc>
            <method name="createIncreaseButton" type="JButton" line="140">
                <params>
                    <param name="orientation" type="int"/>
                </params>
            </method>
            <method name="paintTrack" type="void" line="146">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="c" type="JComponent"/>
                    <param name="trackBounds" type="Rectangle"/>
                </params>
                <comment line="169">
                    g.setColor( Color.red);                    
                </comment>
                <comment line="172">
                    thumb shadow                    
                </comment>
                <comment line="189">
                    HORIZONTAL                    
                </comment>
                <comment line="197">
                    top                    
                </comment>
                <comment line="198">
                    left                    
                </comment>
                <comment line="199">
                    bottom                    
                </comment>
                <comment line="200">
                    right                    
                </comment>
                <comment line="203">
                    g.setColor( Color.red);                    
                </comment>
                <comment line="204">
                    top                    
                </comment>
                <comment line="205">
                    left                    
                </comment>
                <comment line="206">
                    bottom                    
                </comment>
                <comment line="207">
                    thumb shadow                    
                </comment>
                <declaration name="leftToRight" type="boolean" line="149"/>
                <scope line="152">
                    <scope line="153">
                        <scope line="155"/>
                    </scope>
                    <scope line="160">
                        <scope line="171">
                            <declaration name="y" type="int" line="172"/>
                        </scope>
                    </scope>
                    <scope line="177"/>
                    <scope line="181">
                        <scope line="183"/>
                    </scope>
                </scope>
                <scope line="189">
                    <scope line="190"/>
                    <scope line="194">
                        <scope line="206">
                            <declaration name="x" type="int" line="207"/>
                        </scope>
                    </scope>
                    <scope line="210"/>
                    <scope line="214"/>
                </scope>
            </method>
            <method name="paintThumb" type="void" line="223">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="c" type="JComponent"/>
                    <param name="thumbBounds" type="Rectangle"/>
                </params>
                <comment line="267">
                    HORIZONTAL                    
                </comment>
                <scope line="224"/>
                <scope line="228"/>
                <declaration name="leftToRight" type="boolean" line="233"/>
                <scope line="238">
                    <scope line="239">
                        <scope line="241"/>
                    </scope>
                    <scope line="259">
                        <scope line="261"/>
                    </scope>
                </scope>
                <scope line="267">
                    <scope line="268"/>
                    <scope line="285"/>
                </scope>
            </method>
            <method name="oceanPaintThumb" type="void" line="294">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="c" type="JComponent"/>
                    <param name="thumbBounds" type="Rectangle"/>
                </params>
                <comment line="345">
                    HORIZONTAL                    
                </comment>
                <declaration name="leftToRight" type="boolean" line="295"/>
                <scope line="299">
                    <scope line="300">
                        <scope line="302"/>
                    </scope>
                    <scope line="307"/>
                    <declaration name="gripSize" type="int" line="323"/>
                    <scope line="324">
                        <declaration name="gripY" type="int" line="326"/>
                        <scope line="327"/>
                        <scope line="333"/>
                    </scope>
                    <scope line="337">
                        <scope line="339"/>
                    </scope>
                </scope>
                <scope line="344">
                    <scope line="345"/>
                    <scope line="349"/>
                    <declaration name="gripSize" type="int" line="365"/>
                    <scope line="366">
                        <declaration name="gripX" type="int" line="368"/>
                        <scope line="369"/>
                        <scope line="375"/>
                    </scope>
                    <scope line="380"/>
                </scope>
            </method>
            <method name="getMinimumThumbSize" type="Dimension" line="389"/>
            <javadoc line="393">
                This is overridden only to increase the invalid area.  This
                  ensures that the &quot;Shadow&quot; below the thumb is invalidated                
            </javadoc>
            <method name="setThumbBounds" type="void" line="398">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <comment line="400">
                    If the thumbs bounds haven&apos;t changed, we&apos;re done.                    
                </comment>
                <comment line="409">
                    Update thumbRect, and repaint the union of x,y,w,h and
                     the old thumbRect.                    
                </comment>
                <scope line="404"/>
                <declaration name="minX" type="int" line="411"/>
                <declaration name="minY" type="int" line="412"/>
                <declaration name="maxX" type="int" line="413"/>
                <declaration name="maxY" type="int" line="414"/>
            </method>
            <class name="ScrollBarListener" line="422">
                <extends class="BasicScrollBarUI.PropertyChangeHandler"/>
                <method name="propertyChange" type="void" line="425">
                    <params>
                        <param name="e" type="PropertyChangeEvent"/>
                    </params>
                    <declaration name="name" type="String" line="426"/>
                    <scope line="428"/>
                    <scope line="431"/>
                </method>
                <method name="handlePropertyChange" type="void" line="437">
                    <params>
                        <param name="newValue" type="Object"/>
                    </params>
                    <comment line="462">
                        This commented-out block is used for testing flush scrollbars.                        
                    </comment>
                    <comment line="463">
                        if ( isFreeStanding ) {
                        isFreeStanding = false;
                        toFlush();
                        }                        
                    </comment>
                    <scope line="439">
                        <declaration name="temp" type="boolean" line="440"/>
                        <declaration name="becameFlush" type="boolean" line="441"/>
                        <declaration name="becameNormal" type="boolean" line="442"/>
                        <scope line="446"/>
                        <scope line="449"/>
                    </scope>
                    <scope line="454">
                        <scope line="456"/>
                    </scope>
                    <scope line="471"/>
                    <scope line="475"/>
                </method>
                <method name="toFlush" type="void" line="480"/>
                <method name="toFreeStanding" type="void" line="484"/>
            </class>
        </class>
    </source>