<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.plaf.metal">
        <import package="javax.swing"/>
        <import package="javax.swing.border"/>
        <import package="java.io.Serializable"/>
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="javax.swing.plaf.basic.BasicComboBoxEditor"/>
        <class name="MetalComboBoxEditor" line="8">
            <extends class="BasicComboBoxEditor"/>
            <javadoc line="8">
                The default editor for Metal editable combo boxes
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <author>
                    Steve Wilson                    
                </author>
            </javadoc>
            <method name="MetalComboBoxEditor" type="constructor" line="22">
                <anonymous_class line="24">
                    <method name="setText" type="void" line="25">
                        <params>
                            <param name="s" type="String"/>
                        </params>
                        <scope line="26"/>
                    </method>
                    <method name="getPreferredSize" type="Dimension" line="31">
                        <declaration name="pref" type="Dimension" line="32"/>
                    </method>
                    <method name="getMinimumSize" type="Dimension" line="36">
                        <declaration name="min" type="Dimension" line="37"/>
                    </method>
                </anonymous_class>
            </method>
            <declaration name="editorBorderInsets" type="Insets" line="45"/>
            <javadoc line="45">
                The default editor border &lt;code&gt;Insets&lt;/code&gt;. This field
                  might not be used.                
            </javadoc>
            <class name="EditorBorder" line="50">
                <extends class="AbstractBorder"/>
                <method name="paintBorder" type="void" line="51">
                    <params>
                        <param name="c" type="Component"/>
                        <param name="g" type="Graphics"/>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                        <param name="w" type="int"/>
                        <param name="h" type="int"/>
                    </params>
                    <scope line="53"/>
                    <scope line="59"/>
                </method>
                <method name="getBorderInsets" type="Insets" line="73">
                    <params>
                        <param name="c" type="Component"/>
                        <param name="insets" type="Insets"/>
                    </params>
                </method>
            </class>
            <class name="UIResource" line="78">
                <extends class="MetalComboBoxEditor"/>
                <implements interface="javax.swing.plaf.UIResource"/>
                <javadoc line="78">
                    A subclass of BasicComboBoxEditor that implements UIResource.
                      BasicComboBoxEditor doesn&apos;t implement UIResource
                      directly so that applications can safely override the
                      cellRenderer property with BasicListCellRenderer subclasses.
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      Serialized objects of this class will not be compatible with
                      future Swing releases. The current serialization support is
                      appropriate for short term storage or RMI between applications running
                      the same version of Swing.  As of 1.4, support for long term storage
                      of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                      has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                      Please see {@link java.beans.XMLEncoder}.                    
                </javadoc>
            </class>
        </class>
    </source>