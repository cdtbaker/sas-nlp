<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.plaf.basic">
        <import package="java.awt"/>
        <import package="java.awt.event.KeyEvent"/>
        <import package="java.awt.event.FocusEvent"/>
        <import package="java.awt.event.InputEvent"/>
        <import package="java.beans.PropertyChangeEvent"/>
        <import package="java.io.Reader"/>
        <import package="javax.swing"/>
        <import package="javax.swing.border"/>
        <import package="javax.swing.event"/>
        <import package="javax.swing.text"/>
        <import package="javax.swing.plaf"/>
        <import package="sun.swing.DefaultLookup"/>
        <class name="BasicTextFieldUI" line="14">
            <extends class="BasicTextUI"/>
            <javadoc line="14">
                Basis of a look and feel for a JTextField.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <author>
                    Timothy Prinzing                    
                </author>
            </javadoc>
            <javadoc line="28">
                Creates a UI for a JTextField.                
                <param>
                    c the text field                    
                </param>
                <return>
                    the UI                    
                </return>
            </javadoc>
            <method name="createUI" type="ComponentUI" line="33">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <javadoc line="36">
                Creates a new BasicTextFieldUI.                
            </javadoc>
            <method name="BasicTextFieldUI" type="constructor" line="39"/>
            <javadoc line="42">
                Fetches the name used as a key to lookup properties through the
                  UIManager.  This is used as a prefix to all the standard
                  text properties.                
                <return>
                    the name (&quot;TextField&quot;)                    
                </return>
            </javadoc>
            <method name="getPropertyPrefix" type="String" line="48"/>
            <javadoc line="51">
                Creates a view (FieldView) based on an element.                
                <param>
                    elem the element                    
                </param>
                <return>
                    the view                    
                </return>
            </javadoc>
            <method name="create" type="View" line="56">
                <params>
                    <param name="elem" type="Element"/>
                </params>
                <declaration name="doc" type="Document" line="57"/>
                <declaration name="i18nFlag" type="Object" line="58"/>
                <scope line="59">
                    <declaration name="kind" type="String" line="60"/>
                    <scope line="61">
                        <scope line="62"/>
                        <scope line="65"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="72">
                Returns the baseline.                
                <throws>
                    NullPointerException {@inheritDoc}                    
                </throws>
                <throws>
                    IllegalArgumentException {@inheritDoc}                    
                </throws>
                <see>
                    javax.swing.JComponent#getBaseline(int,int)                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getBaseline" type="int" line="79">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <declaration name="rootView" type="View" line="81"/>
                <scope line="82">
                    <declaration name="insets" type="Insets" line="83"/>
                    <scope line="85">
                        <declaration name="baseline" type="int" line="86"/>
                        <declaration name="fieldView" type="View" line="87"/>
                        <declaration name="vspan" type="int" line="88"/>
                        <scope line="89">
                            <declaration name="slop" type="int" line="90"/>
                        </scope>
                        <scope line="93">
                            <declaration name="fieldBaseline" type="int" line="94"/>
                            <scope line="95"/>
                        </scope>
                        <scope line="100">
                            <declaration name="fm" type="FontMetrics" line="101"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="109">
                Returns an enum indicating how the baseline of the component
                  changes as the size changes.                
                <throws>
                    NullPointerException {@inheritDoc}                    
                </throws>
                <see>
                    javax.swing.JComponent#getBaseline(int,int)                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getBaselineResizeBehavior" type="Component.BaselineResizeBehavior" line="116">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <class name="I18nFieldView" line="120">
                <extends class="ParagraphView"/>
                <javadoc line="120">
                    A field view that support bidirectional text via the
                      support provided by ParagraphView.                    
                </javadoc>
                <method name="I18nFieldView" type="constructor" line="125">
                    <params>
                        <param name="elem" type="Element"/>
                    </params>
                </method>
                <javadoc line="128">
                    Fetch the constraining span to flow against for
                      the given child index.  There is no limit for
                      a field since it scrolls, so this is implemented to
                      return &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt;.                    
                </javadoc>
                <method name="getFlowSpan" type="int" line="134">
                    <params>
                        <param name="index" type="int"/>
                    </params>
                </method>
                <method name="setJustification" type="void" line="137">
                    <params>
                        <param name="j" type="int"/>
                    </params>
                </method>
                <method name="isLeftToRight" type="boolean" line="139">
                    <params>
                        <param name="c" type="java.awt.Component"/>
                    </params>
                </method>
                <javadoc line="142">
                    Adjusts the allocation given to the view
                      to be a suitable allocation for a text field.
                      If the view has been allocated more than the
                      preferred span vertically, the allocation is
                      changed to be centered vertically.  Horizontally
                      the view is adjusted according to the horizontal
                      alignment property set on the associated JTextField
                      (if that is the type of the hosting component).                    
                    <param>
                        a the allocation given to the view, which may need
                          to be adjusted.                        
                    </param>
                    <return>
                        the allocation that the superclass should use.                        
                    </return>
                </javadoc>
                <method name="adjustAllocation" type="Shape" line="155">
                    <params>
                        <param name="a" type="Shape"/>
                    </params>
                    <scope line="156">
                        <declaration name="bounds" type="Rectangle" line="157"/>
                        <declaration name="vspan" type="int" line="158"/>
                        <declaration name="hspan" type="int" line="159"/>
                        <scope line="160">
                            <declaration name="slop" type="int" line="161"/>
                        </scope>
                        <declaration name="c" type="Component" line="165"/>
                        <scope line="166">
                            <declaration name="field" type="JTextField" line="167"/>
                            <declaration name="vis" type="BoundedRangeModel" line="168"/>
                            <declaration name="max" type="int" line="169"/>
                            <declaration name="value" type="int" line="170"/>
                            <declaration name="extent" type="int" line="171"/>
                            <scope line="172"/>
                            <scope line="176">
                                <declaration name="slop" type="int" line="177"/>
                                <declaration name="align" type="int" line="178"/>
                                <scope line="179">
                                    <scope line="180"/>
                                    <scope line="183"/>
                                </scope>
                                <scope line="187">
                                    <scope line="188"/>
                                    <scope line="191"/>
                                </scope>
                            </scope>
                            <scope line="206"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="215">
                    Update the visibility model with the associated JTextField
                      (if there is one) to reflect the current visibility as a
                      result of changes to the document model.  The bounded
                      range properties are updated.  If the view hasn&apos;t yet been
                      shown the extent will be zero and we just set it to be full
                      until determined otherwise.                    
                </javadoc>
                <method name="updateVisibilityModel" type="void" line="223">
                    <declaration name="c" type="Component" line="224"/>
                    <scope line="225">
                        <declaration name="field" type="JTextField" line="226"/>
                        <declaration name="vis" type="BoundedRangeModel" line="227"/>
                        <declaration name="hspan" type="int" line="228"/>
                        <declaration name="extent" type="int" line="229"/>
                        <declaration name="maximum" type="int" line="230"/>
                        <declaration name="value" type="int" line="232"/>
                        <declaration name="oldValue" type="int" line="233"/>
                        <scope line="234"/>
                    </scope>
                </method>
                <javadoc line="241">
                    Renders using the given rendering surface and area on that surface.
                      The view may need to do layout and create child views to enable
                      itself to render into the given allocation.                    
                    <param>
                        g the rendering surface to use                        
                    </param>
                    <param>
                        a the allocated region to render into                        
                    </param>
                    <see>
                        View#paint                        
                    </see>
                </javadoc>
                <method name="paint" type="void" line="249">
                    <params>
                        <param name="g" type="Graphics"/>
                        <param name="a" type="Shape"/>
                    </params>
                    <declaration name="r" type="Rectangle" line="250"/>
                </method>
                <javadoc line="254">
                    Determines the resizability of the view along the
                      given axis.  A value of 0 or less is not resizable.                    
                    <param>
                        axis View.X_AXIS or View.Y_AXIS                        
                    </param>
                    <return>
                        the weight -&gt; 1 for View.X_AXIS, else 0                        
                    </return>
                </javadoc>
                <method name="getResizeWeight" type="int" line="260">
                    <params>
                        <param name="axis" type="int"/>
                    </params>
                    <scope line="261"/>
                </method>
                <javadoc line="266">
                    Provides a mapping from the document model coordinate space
                      to the coordinate space of the view mapped to it.                    
                    <param>
                        pos the position to convert &gt;= 0                        
                    </param>
                    <param>
                        a the allocated region to render into                        
                    </param>
                    <return>
                        the bounding box of the given position                        
                    </return>
                    <exception>
                        BadLocationException  if the given position does not
                          represent a valid location in the associated document                        
                    </exception>
                    <see>
                        View#modelToView                        
                    </see>
                </javadoc>
                <method name="modelToView" type="Shape" line="276">
                    <params>
                        <param name="pos" type="int"/>
                        <param name="a" type="Shape"/>
                        <param name="b" type="Position.Bias"/>
                    </params>
                </method>
                <javadoc line="279">
                    Provides a mapping from the document model coordinate space
                      to the coordinate space of the view mapped to it.                    
                    <param>
                        p0 the position to convert &gt;= 0                        
                    </param>
                    <param>
                        b0 the bias toward the previous character or the
                          next character represented by p0, in case the
                          position is a boundary of two views.                        
                    </param>
                    <param>
                        p1 the position to convert &gt;= 0                        
                    </param>
                    <param>
                        b1 the bias toward the previous character or the
                          next character represented by p1, in case the
                          position is a boundary of two views.                        
                    </param>
                    <param>
                        a the allocated region to render into                        
                    </param>
                    <return>
                        the bounding box of the given position is returned                        
                    </return>
                    <exception>
                        BadLocationException  if the given position does
                          not represent a valid location in the associated document                        
                    </exception>
                    <exception>
                        IllegalArgumentException for an invalid bias argument                        
                    </exception>
                    <see>
                        View#viewToModel                        
                    </see>
                </javadoc>
                <method name="modelToView" type="Shape" line="297">
                    <params>
                        <param name="p0" type="int"/>
                        <param name="b0" type="Position.Bias"/>
                        <param name="p1" type="int"/>
                        <param name="b1" type="Position.Bias"/>
                        <param name="a" type="Shape"/>
                    </params>
                </method>
                <javadoc line="300">
                    Provides a mapping from the view coordinate space to the logical
                      coordinate space of the model.                    
                    <param>
                        fx the X coordinate &gt;= 0.0f                        
                    </param>
                    <param>
                        fy the Y coordinate &gt;= 0.0f                        
                    </param>
                    <param>
                        a the allocated region to render into                        
                    </param>
                    <return>
                        the location within the model that best represents the
                          given point in the view                        
                    </return>
                    <see>
                        View#viewToModel                        
                    </see>
                </javadoc>
                <method name="viewToModel" type="int" line="310">
                    <params>
                        <param name="fx" type="float"/>
                        <param name="fy" type="float"/>
                        <param name="a" type="Shape"/>
                        <param name="bias" type="Position.Bias[]"/>
                    </params>
                </method>
                <javadoc line="313">
                    Gives notification that something was inserted into the document
                      in a location that this view is responsible for.                    
                    <param>
                        changes the change information from the associated document                        
                    </param>
                    <param>
                        a the current allocation of the view                        
                    </param>
                    <param>
                        f the factory to use to rebuild if the view has children                        
                    </param>
                    <see>
                        View#insertUpdate                        
                    </see>
                </javadoc>
                <method name="insertUpdate" type="void" line="321">
                    <params>
                        <param name="changes" type="DocumentEvent"/>
                        <param name="a" type="Shape"/>
                        <param name="f" type="ViewFactory"/>
                    </params>
                </method>
                <javadoc line="325">
                    Gives notification that something was removed from the document
                      in a location that this view is responsible for.                    
                    <param>
                        changes the change information from the associated document                        
                    </param>
                    <param>
                        a the current allocation of the view                        
                    </param>
                    <param>
                        f the factory to use to rebuild if the view has children                        
                    </param>
                    <see>
                        View#removeUpdate                        
                    </see>
                </javadoc>
                <method name="removeUpdate" type="void" line="333">
                    <params>
                        <param name="changes" type="DocumentEvent"/>
                        <param name="a" type="Shape"/>
                        <param name="f" type="ViewFactory"/>
                    </params>
                </method>
            </class>
        </class>
    </source>