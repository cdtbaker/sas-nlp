<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.plaf.multi">
        <import package="java.util.Vector"/>
        <import package="javax.swing.plaf.PopupMenuUI"/>
        <import package="java.awt.event.MouseEvent"/>
        <import package="javax.swing.Popup"/>
        <import package="javax.swing.JPopupMenu"/>
        <import package="javax.swing.plaf.ComponentUI"/>
        <import package="javax.swing.JComponent"/>
        <import package="java.awt.Graphics"/>
        <import package="java.awt.Dimension"/>
        <import package="javax.accessibility.Accessible"/>
        <class name="MultiPopupMenuUI" line="12">
            <extends class="PopupMenuUI"/>
            <javadoc line="12">
                A multiplexing UI used to combine &lt;code&gt;PopupMenuUI&lt;/code&gt;s.
                  &lt;p&gt;This file was automatically generated by AutoMulti.                
                <author>
                    Otto Multey                    
                </author>
            </javadoc>
            <declaration name="uis" type="Vector" line="18"/>
            <javadoc line="18">
                The vector containing the real UIs.  This is populated
                  in the call to &lt;code&gt;createUI&lt;/code&gt;, and can be obtained by calling
                  the &lt;code&gt;getUIs&lt;/code&gt; method.  The first element is guaranteed to be the real UI
                  obtained from the default look and feel.                
            </javadoc>
            <javadoc line="25">
                Returns the list of UIs associated with this multiplexing UI.  This
                  allows processing of the UIs by an application aware of multiplexing
                  UIs on components.                
            </javadoc>
            <method name="getUIs" type="ComponentUI[]" line="30"/>
            <javadoc line="33">
                Invokes the &lt;code&gt;isPopupTrigger&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default &lt;code&gt;LookAndFeel&lt;/code&gt;                    
                </return>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="isPopupTrigger" type="boolean" line="39">
                <params>
                    <param name="a" type="MouseEvent"/>
                </params>
                <declaration name="returnValue" type="boolean" line="40"/>
                <scope line="41"/>
            </method>
            <javadoc line="46">
                Invokes the &lt;code&gt;getPopup&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default &lt;code&gt;LookAndFeel&lt;/code&gt;                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getPopup" type="Popup" line="52">
                <params>
                    <param name="a" type="JPopupMenu"/>
                    <param name="b" type="int"/>
                    <param name="c" type="int"/>
                </params>
                <declaration name="returnValue" type="Popup" line="53"/>
                <scope line="54"/>
            </method>
            <javadoc line="59">
                Invokes the &lt;code&gt;contains&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default &lt;code&gt;LookAndFeel&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="contains" type="boolean" line="64">
                <params>
                    <param name="a" type="JComponent"/>
                    <param name="b" type="int"/>
                    <param name="c" type="int"/>
                </params>
                <declaration name="returnValue" type="boolean" line="65"/>
                <scope line="66"/>
            </method>
            <javadoc line="71">
                Invokes the &lt;code&gt;update&lt;/code&gt; method on each UI handled by this object.                
            </javadoc>
            <method name="update" type="void" line="74">
                <params>
                    <param name="a" type="Graphics"/>
                    <param name="b" type="JComponent"/>
                </params>
                <scope line="75"/>
            </method>
            <javadoc line="79">
                Returns a multiplexing UI instance if any of the auxiliary
                  &lt;code&gt;LookAndFeel&lt;/code&gt;s supports this UI.  Otherwise, just returns the
                  UI object obtained from the default &lt;code&gt;LookAndFeel&lt;/code&gt;.                
            </javadoc>
            <method name="createUI" type="ComponentUI" line="84">
                <params>
                    <param name="a" type="JComponent"/>
                </params>
                <declaration name="mui" type="ComponentUI" line="85"/>
            </method>
            <javadoc line="88">
                Invokes the &lt;code&gt;installUI&lt;/code&gt; method on each UI handled by this object.                
            </javadoc>
            <method name="installUI" type="void" line="91">
                <params>
                    <param name="a" type="JComponent"/>
                </params>
                <scope line="92"/>
            </method>
            <javadoc line="96">
                Invokes the &lt;code&gt;uninstallUI&lt;/code&gt; method on each UI handled by this object.                
            </javadoc>
            <method name="uninstallUI" type="void" line="99">
                <params>
                    <param name="a" type="JComponent"/>
                </params>
                <scope line="100"/>
            </method>
            <javadoc line="104">
                Invokes the &lt;code&gt;paint&lt;/code&gt; method on each UI handled by this object.                
            </javadoc>
            <method name="paint" type="void" line="107">
                <params>
                    <param name="a" type="Graphics"/>
                    <param name="b" type="JComponent"/>
                </params>
                <scope line="108"/>
            </method>
            <javadoc line="112">
                Invokes the &lt;code&gt;getPreferredSize&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default &lt;code&gt;LookAndFeel&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="getPreferredSize" type="Dimension" line="117">
                <params>
                    <param name="a" type="JComponent"/>
                </params>
                <declaration name="returnValue" type="Dimension" line="118"/>
                <scope line="119"/>
            </method>
            <javadoc line="124">
                Invokes the &lt;code&gt;getMinimumSize&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default &lt;code&gt;LookAndFeel&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="getMinimumSize" type="Dimension" line="129">
                <params>
                    <param name="a" type="JComponent"/>
                </params>
                <declaration name="returnValue" type="Dimension" line="130"/>
                <scope line="131"/>
            </method>
            <javadoc line="136">
                Invokes the &lt;code&gt;getMaximumSize&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default &lt;code&gt;LookAndFeel&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="getMaximumSize" type="Dimension" line="141">
                <params>
                    <param name="a" type="JComponent"/>
                </params>
                <declaration name="returnValue" type="Dimension" line="142"/>
                <scope line="143"/>
            </method>
            <javadoc line="148">
                Invokes the &lt;code&gt;getAccessibleChildrenCount&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default &lt;code&gt;LookAndFeel&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="getAccessibleChildrenCount" type="int" line="153">
                <params>
                    <param name="a" type="JComponent"/>
                </params>
                <declaration name="returnValue" type="int" line="154"/>
                <scope line="155"/>
            </method>
            <javadoc line="160">
                Invokes the &lt;code&gt;getAccessibleChild&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default &lt;code&gt;LookAndFeel&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="getAccessibleChild" type="Accessible" line="165">
                <params>
                    <param name="a" type="JComponent"/>
                    <param name="b" type="int"/>
                </params>
                <declaration name="returnValue" type="Accessible" line="166"/>
                <scope line="167"/>
            </method>
        </class>
    </source>