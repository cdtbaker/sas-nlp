<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.plaf.synth">
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="javax.swing"/>
        <import package="javax.swing.plaf"/>
        <import package="javax.swing.plaf.basic.BasicSpinnerUI"/>
        <import package="java.beans"/>
        <class name="SynthSpinnerUI" line="8">
            <extends class="BasicSpinnerUI"/>
            <implements interface="PropertyChangeListener"/>
            <implements interface="SynthUI"/>
            <javadoc line="8">
                Provides the Synth L&amp;F UI delegate for{@link javax.swing.JSpinner}.                
                <author>
                    Hans Muller                    
                </author>
                <author>
                    Joshua Outwater                    
                </author>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <declaration name="style" type="SynthStyle" line="15"/>
            <declaration name="editorFocusHandler" type="EditorFocusHandler" line="16"/>
            <javadoc line="16">
                A FocusListener implementation which causes the entire spinner to be
                  repainted whenever the editor component (typically a text field) becomes
                  focused, or loses focus. This is necessary because since SynthSpinnerUI
                  is composed of an editor and two buttons, it is necessary that all three
                  components indicate that they are &quot;focused&quot; so that they can be drawn
                  appropriately. The repaint is used to ensure that the buttons are drawn
                  in the new focused or unfocused state, mirroring that of the editor.                
            </javadoc>
            <javadoc line="26">
                Returns a new instance of SynthSpinnerUI.                
                <param>
                    c the JSpinner (not used)                    
                </param>
                <see>
                    ComponentUI#createUI                    
                </see>
                <return>
                    a new SynthSpinnerUI object                    
                </return>
            </javadoc>
            <method name="createUI" type="ComponentUI" line="32">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <javadoc line="35">
                @inheritDoc                
            </javadoc>
            <method name="installListeners" type="void" line="38">
                <declaration name="editor" type="JComponent" line="41"/>
                <scope line="42">
                    <declaration name="tf" type="JTextField" line="43"/>
                    <scope line="44"/>
                </scope>
            </method>
            <javadoc line="49">
                @inheritDoc                
            </javadoc>
            <method name="uninstallListeners" type="void" line="52">
                <declaration name="editor" type="JComponent" line="55"/>
                <scope line="56">
                    <declaration name="tf" type="JTextField" line="57"/>
                    <scope line="58"/>
                </scope>
            </method>
            <javadoc line="63">
                Initializes the &lt;code&gt;JSpinner&lt;/code&gt; &lt;code&gt;border&lt;/code&gt;,
                  &lt;code&gt;foreground&lt;/code&gt;, and &lt;code&gt;background&lt;/code&gt;, properties
                  based on the corresponding &quot;Spinner.&quot; properties from defaults table.
                  The &lt;code&gt;JSpinners&lt;/code&gt; layout is set to the value returned by
                  &lt;code&gt;createLayout&lt;/code&gt;.  This method is called by &lt;code&gt;installUI&lt;/code&gt;.                
                <see>
                    #uninstallDefaults                    
                </see>
                <see>
                    #installUI                    
                </see>
                <see>
                    #createLayout                    
                </see>
                <see>
                    LookAndFeel#installBorder                    
                </see>
                <see>
                    LookAndFeel#installColors                    
                </see>
            </javadoc>
            <method name="installDefaults" type="void" line="75">
                <declaration name="layout" type="LayoutManager" line="76"/>
                <scope line="77"/>
            </method>
            <method name="updateStyle" type="void" line="82">
                <params>
                    <param name="c" type="JSpinner"/>
                </params>
                <declaration name="context" type="SynthContext" line="83"/>
                <declaration name="oldStyle" type="SynthStyle" line="84"/>
                <scope line="86">
                    <scope line="87"/>
                </scope>
            </method>
            <javadoc line="93">
                Sets the &lt;code&gt;JSpinner&apos;s&lt;/code&gt; layout manager to null.  This
                  method is called by &lt;code&gt;uninstallUI&lt;/code&gt;.                
                <see>
                    #installDefaults                    
                </see>
                <see>
                    #uninstallUI                    
                </see>
            </javadoc>
            <method name="uninstallDefaults" type="void" line="99">
                <scope line="100"/>
                <declaration name="context" type="SynthContext" line="103"/>
            </method>
            <javadoc line="108">
                @inheritDoc                
            </javadoc>
            <method name="createLayout" type="LayoutManager" line="111"/>
            <javadoc line="114">
                @inheritDoc                
            </javadoc>
            <method name="createPreviousButton" type="Component" line="117">
                <declaration name="b" type="JButton" line="118"/>
            </method>
            <javadoc line="123">
                @inheritDoc                
            </javadoc>
            <method name="createNextButton" type="Component" line="126">
                <declaration name="b" type="JButton" line="127"/>
            </method>
            <javadoc line="132">
                This method is called by installUI to get the editor component
                  of the &lt;code&gt;JSpinner&lt;/code&gt;.  By default it just returns
                  &lt;code&gt;JSpinner.getEditor()&lt;/code&gt;.  Subclasses can override
                  &lt;code&gt;createEditor&lt;/code&gt; to return a component that contains
                  the spinner&apos;s editor or null, if they&apos;re going to handle adding
                  the editor to the &lt;code&gt;JSpinner&lt;/code&gt; in an
                  &lt;code&gt;installUI&lt;/code&gt; override.
                  &lt;p&gt;
                  Typically this method would be overridden to wrap the editor
                  with a container with a custom border, since one can&apos;t assume
                  that the editors border can be set directly.
                  &lt;p&gt;
                  The &lt;code&gt;replaceEditor&lt;/code&gt; method is called when the spinners
                  editor is changed with &lt;code&gt;JSpinner.setEditor&lt;/code&gt;.  If you&apos;ve
                  overriden this method, then you&apos;ll probably want to override
                  &lt;code&gt;replaceEditor&lt;/code&gt; as well.                
                <return>
                    the JSpinners editor JComponent, spinner.getEditor() by default                    
                </return>
                <see>
                    #installUI                    
                </see>
                <see>
                    #replaceEditor                    
                </see>
                <see>
                    JSpinner#getEditor                    
                </see>
            </javadoc>
            <method name="createEditor" type="JComponent" line="154">
                <declaration name="editor" type="JComponent" line="155"/>
            </method>
            <javadoc line="160">
                Called by the &lt;code&gt;PropertyChangeListener&lt;/code&gt; when the
                  &lt;code&gt;JSpinner&lt;/code&gt; editor property changes.  It&apos;s the responsibility
                  of this method to remove the old editor and add the new one.  By
                  default this operation is just:
                  &lt;pre&gt;
                  spinner.remove(oldEditor);
                  spinner.add(newEditor, &quot;Editor&quot;);
                  &lt;/pre&gt;
                  The implementation of &lt;code&gt;replaceEditor&lt;/code&gt; should be coordinated
                  with the &lt;code&gt;createEditor&lt;/code&gt; method.                
                <see>
                    #createEditor                    
                </see>
                <see>
                    #createPropertyChangeListener                    
                </see>
            </javadoc>
            <method name="replaceEditor" type="void" line="174">
                <params>
                    <param name="oldEditor" type="JComponent"/>
                    <param name="newEditor" type="JComponent"/>
                </params>
                <scope line="177">
                    <declaration name="tf" type="JTextField" line="178"/>
                    <scope line="179"/>
                </scope>
                <scope line="183">
                    <declaration name="tf" type="JTextField" line="184"/>
                    <scope line="185"/>
                </scope>
            </method>
            <method name="updateEditorAlignment" type="void" line="190">
                <params>
                    <param name="editor" type="JComponent"/>
                </params>
                <scope line="191">
                    <declaration name="context" type="SynthContext" line="192"/>
                    <declaration name="alignment" type="Integer" line="193"/>
                    <declaration name="text" type="JTextField" line="194"/>
                    <scope line="195"/>
                </scope>
            </method>
            <javadoc line="201">
                @inheritDoc                
            </javadoc>
            <method name="getContext" type="SynthContext" line="204">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <method name="getContext" type="SynthContext" line="207">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="state" type="int"/>
                </params>
            </method>
            <javadoc line="210">
                Notifies this UI delegate to repaint the specified component.
                  This method paints the component background, then calls
                  the {@link #paint(SynthContext,Graphics)} method.
                  &lt;p&gt;In general, this method does not need to be overridden by subclasses.
                  All Look and Feel rendering code should reside in the {@code paint} method.                
                <param>
                    g the {@code Graphics} object used for painting                    
                </param>
                <param>
                    c the component being painted                    
                </param>
                <see>
                    #paint(SynthContext,Graphics)                    
                </see>
            </javadoc>
            <method name="update" type="void" line="220">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="c" type="JComponent"/>
                </params>
                <declaration name="context" type="SynthContext" line="221"/>
            </method>
            <javadoc line="227">
                Paints the specified component according to the Look and Feel.
                  &lt;p&gt;This method is not used by Synth Look and Feel.
                  Painting is handled by the {@link #paint(SynthContext,Graphics)} method.                
                <param>
                    g the {@code Graphics} object used for painting                    
                </param>
                <param>
                    c the component being painted                    
                </param>
                <see>
                    #paint(SynthContext,Graphics)                    
                </see>
            </javadoc>
            <method name="paint" type="void" line="235">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="c" type="JComponent"/>
                </params>
                <declaration name="context" type="SynthContext" line="236"/>
            </method>
            <javadoc line="240">
                Paints the specified component. This implementation does nothing.                
                <param>
                    context context for the component being painted                    
                </param>
                <param>
                    g the {@code Graphics} object used for painting                    
                </param>
                <see>
                    #update(Graphics,JComponent)                    
                </see>
            </javadoc>
            <method name="paint" type="void" line="246">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="g" type="Graphics"/>
                </params>
            </method>
            <javadoc line="248">
                @inheritDoc                
            </javadoc>
            <method name="paintBorder" type="void" line="251">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="g" type="Graphics"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
            </method>
            <class name="SpinnerLayout" line="254">
                <implements interface="LayoutManager"/>
                <implements interface="UIResource"/>
                <javadoc line="254">
                    A simple layout manager for the editor and the next/previous buttons.
                      See the SynthSpinnerUI javadoc for more information about exactly
                      how the components are arranged.                    
                </javadoc>
                <declaration name="nextButton" type="Component" line="260"/>
                <declaration name="previousButton" type="Component" line="261"/>
                <declaration name="editor" type="Component" line="262"/>
                <method name="addLayoutComponent" type="void" line="263">
                    <params>
                        <param name="name" type="String"/>
                        <param name="c" type="Component"/>
                    </params>
                    <scope line="264"/>
                    <scope line="267"/>
                    <scope line="270"/>
                </method>
                <method name="removeLayoutComponent" type="void" line="274">
                    <params>
                        <param name="c" type="Component"/>
                    </params>
                    <scope line="275"/>
                    <scope line="278"/>
                    <scope line="281"/>
                </method>
                <method name="preferredSize" type="Dimension" line="285">
                    <params>
                        <param name="c" type="Component"/>
                    </params>
                </method>
                <method name="preferredLayoutSize" type="Dimension" line="288">
                    <params>
                        <param name="parent" type="Container"/>
                    </params>
                    <declaration name="nextD" type="Dimension" line="289"/>
                    <declaration name="previousD" type="Dimension" line="290"/>
                    <declaration name="editorD" type="Dimension" line="291"/>
                    <declaration name="size" type="Dimension" line="293"/>
                    <declaration name="insets" type="Insets" line="295"/>
                </method>
                <method name="minimumLayoutSize" type="Dimension" line="300">
                    <params>
                        <param name="parent" type="Container"/>
                    </params>
                </method>
                <method name="setBounds" type="void" line="303">
                    <params>
                        <param name="c" type="Component"/>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                        <param name="width" type="int"/>
                        <param name="height" type="int"/>
                    </params>
                    <scope line="304"/>
                </method>
                <method name="layoutContainer" type="void" line="308">
                    <params>
                        <param name="parent" type="Container"/>
                    </params>
                    <declaration name="insets" type="Insets" line="309"/>
                    <declaration name="availWidth" type="int" line="310"/>
                    <declaration name="availHeight" type="int" line="311"/>
                    <declaration name="nextD" type="Dimension" line="312"/>
                    <declaration name="previousD" type="Dimension" line="313"/>
                    <declaration name="nextHeight" type="int" line="314"/>
                    <declaration name="previousHeight" type="int" line="315"/>
                    <declaration name="buttonsWidth" type="int" line="316"/>
                    <declaration name="editorWidth" type="int" line="317"/>
                    <declaration name="editorX" type="int" line="318"/>
                    <scope line="319"/>
                    <scope line="323"/>
                    <declaration name="previousY" type="int" line="327"/>
                </method>
            </class>
            <javadoc line="333">
                @inheritDoc                
            </javadoc>
            <method name="propertyChange" type="void" line="336">
                <params>
                    <param name="e" type="PropertyChangeEvent"/>
                </params>
                <declaration name="spinner" type="JSpinner" line="337"/>
                <declaration name="spinnerUI" type="SpinnerUI" line="338"/>
                <scope line="339">
                    <declaration name="ui" type="SynthSpinnerUI" line="340"/>
                    <scope line="341"/>
                </scope>
            </method>
            <class name="EditorFocusHandler" line="346">
                <implements interface="FocusListener"/>
                <javadoc line="346">
                    Listen to editor text field focus changes and repaint whole spinner                    
                </javadoc>
                <javadoc line="350">
                    Invoked when a editor text field gains the keyboard focus.                    
                </javadoc>
                <method name="focusGained" type="void" line="353">
                    <params>
                        <param name="e" type="FocusEvent"/>
                    </params>
                </method>
                <javadoc line="356">
                    Invoked when a editor text field loses the keyboard focus.                    
                </javadoc>
                <method name="focusLost" type="void" line="359">
                    <params>
                        <param name="e" type="FocusEvent"/>
                    </params>
                </method>
            </class>
        </class>
    </source>