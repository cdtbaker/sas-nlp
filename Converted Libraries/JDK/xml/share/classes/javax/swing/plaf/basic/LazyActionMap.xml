<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.plaf.basic">
        <import package="java.lang.reflect"/>
        <import package="javax.swing"/>
        <import package="javax.swing.plaf"/>
        <class name="LazyActionMap" line="5">
            <extends class="ActionMapUIResource"/>
            <javadoc line="5">
                An ActionMap that populates its contents as necessary. The
                  contents are populated by invoking the &lt;code&gt;loadActionMap&lt;/code&gt;
                  method on the passed in Object.                
                <author>
                    Scott Violet                    
                </author>
            </javadoc>
            <declaration name="_loader" type="Object" line="12"/>
            <javadoc line="12">
                Object to invoke &lt;code&gt;loadActionMap&lt;/code&gt; on. This may be
                  a Class object.                
            </javadoc>
            <javadoc line="17">
                Installs an ActionMap that will be populated by invoking the
                  &lt;code&gt;loadActionMap&lt;/code&gt; method on the specified Class
                  when necessary.
                  &lt;p&gt;
                  This should be used if the ActionMap can be shared.                
                <param>
                    c JComponent to install the ActionMap on.                    
                </param>
                <param>
                    loaderClass Class object that gets loadActionMap invoked
                      on.                    
                </param>
                <param>
                    defaultsKey Key to use to defaults table to check for
                      existing map and what resulting Map will be registered on.                    
                </param>
            </javadoc>
            <method name="installLazyActionMap" type="void" line="29">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="loaderClass" type="Class"/>
                    <param name="defaultsKey" type="String"/>
                </params>
                <declaration name="map" type="ActionMap" line="30"/>
                <scope line="31"/>
            </method>
            <javadoc line="37">
                Returns an ActionMap that will be populated by invoking the
                  &lt;code&gt;loadActionMap&lt;/code&gt; method on the specified Class
                  when necessary.
                  &lt;p&gt;
                  This should be used if the ActionMap can be shared.                
                <param>
                    c JComponent to install the ActionMap on.                    
                </param>
                <param>
                    loaderClass Class object that gets loadActionMap invoked
                      on.                    
                </param>
                <param>
                    defaultsKey Key to use to defaults table to check for
                      existing map and what resulting Map will be registered on.                    
                </param>
            </javadoc>
            <method name="getActionMap" type="ActionMap" line="49">
                <params>
                    <param name="loaderClass" type="Class"/>
                    <param name="defaultsKey" type="String"/>
                </params>
                <declaration name="map" type="ActionMap" line="50"/>
                <scope line="51"/>
            </method>
            <method name="LazyActionMap" type="constructor" line="57">
                <params>
                    <param name="loader" type="Class"/>
                </params>
            </method>
            <method name="put" type="void" line="60">
                <params>
                    <param name="action" type="Action"/>
                </params>
            </method>
            <method name="put" type="void" line="63">
                <params>
                    <param name="key" type="Object"/>
                    <param name="action" type="Action"/>
                </params>
            </method>
            <method name="get" type="Action" line="67">
                <params>
                    <param name="key" type="Object"/>
                </params>
            </method>
            <method name="remove" type="void" line="71">
                <params>
                    <param name="key" type="Object"/>
                </params>
            </method>
            <method name="clear" type="void" line="75"/>
            <method name="keys" type="Object[]" line="79"/>
            <method name="size" type="int" line="83"/>
            <method name="allKeys" type="Object[]" line="87"/>
            <method name="setParent" type="void" line="91">
                <params>
                    <param name="map" type="ActionMap"/>
                </params>
            </method>
            <method name="loadIfNecessary" type="void" line="95"/>
        </class>
    </source>