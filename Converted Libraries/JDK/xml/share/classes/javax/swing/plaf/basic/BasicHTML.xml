<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.plaf.basic">
        <import package="java.io"/>
        <import package="java.awt"/>
        <import package="java.net.URL"/>
        <import package="javax.swing"/>
        <import package="javax.swing.text"/>
        <import package="javax.swing.text.html"/>
        <import package="sun.swing.SwingUtilities2"/>
        <class name="BasicHTML" line="9">
            <javadoc line="9">
                Support for providing html views for the swing components.
                  This translates a simple html string to a javax.swing.text.View
                  implementation that can render the html and provide the necessary
                  layout semantics.                
                <author>
                    Timothy Prinzing                    
                </author>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <javadoc line="18">
                Create an html renderer for the given component and
                  string of html.                
            </javadoc>
            <method name="createHTMLView" type="View" line="22">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="html" type="String"/>
                </params>
                <declaration name="kit" type="BasicEditorKit" line="23"/>
                <declaration name="doc" type="Document" line="24"/>
                <declaration name="base" type="Object" line="25"/>
                <scope line="26"/>
                <declaration name="r" type="Reader" line="29"/>
                <scope line="30"/>
                <scope line="33"/>
                <declaration name="f" type="ViewFactory" line="35"/>
                <declaration name="hview" type="View" line="36"/>
                <declaration name="v" type="View" line="37"/>
            </method>
            <javadoc line="40">
                Returns the baseline for the html renderer.                
                <param>
                    view the View to get the baseline for                    
                </param>
                <param>
                    w the width to get the baseline for                    
                </param>
                <param>
                    h the height to get the baseline for                    
                </param>
                <throws>
                    IllegalArgumentException if width or height is &amp;lt; 0                    
                </throws>
                <return>
                    baseline or a value &amp;lt; 0 indicating there is no reasonable
                      baseline                    
                </return>
                <see>
                    java.awt.FontMetrics                    
                </see>
                <see>
                    javax.swing.JComponent#getBaseline(int,int)                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getHTMLBaseline" type="int" line="52">
                <params>
                    <param name="view" type="View"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <scope line="53"/>
                <scope line="56"/>
            </method>
            <javadoc line="61">
                Gets the baseline for the specified component.  This digs out
                  the View client property, and if non-null the baseline is calculated
                  from it.  Otherwise the baseline is the value &lt;code&gt;y + ascent&lt;/code&gt;.                
            </javadoc>
            <method name="getBaseline" type="int" line="66">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="y" type="int"/>
                    <param name="ascent" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <declaration name="view" type="View" line="67"/>
                <scope line="68">
                    <declaration name="baseline" type="int" line="69"/>
                    <scope line="70"/>
                </scope>
            </method>
            <javadoc line="77">
                Gets the baseline for the specified View.                
            </javadoc>
            <method name="getBaseline" type="int" line="80">
                <params>
                    <param name="view" type="View"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <scope line="81"/>
            </method>
            <method name="getBaseline" type="int" line="87">
                <params>
                    <param name="view" type="View"/>
                    <param name="bounds" type="Shape"/>
                </params>
                <scope line="88"/>
                <declaration name="attributes" type="AttributeSet" line="91"/>
                <declaration name="name" type="Object" line="92"/>
                <scope line="93"/>
                <declaration name="index" type="int" line="96"/>
                <scope line="97"/>
                <scope line="101"/>
                <declaration name="child" type="View" line="104"/>
                <scope line="105">
                    <declaration name="rect" type="Rectangle" line="106"/>
                    <scope line="107"/>
                    <scope line="110"/>
                </scope>
            </method>
            <method name="hasParagraph" type="boolean" line="117">
                <params>
                    <param name="view" type="View"/>
                </params>
                <scope line="118"/>
                <scope line="121"/>
                <declaration name="attributes" type="AttributeSet" line="124"/>
                <declaration name="name" type="Object" line="125"/>
                <scope line="126"/>
                <declaration name="index" type="int" line="129"/>
                <scope line="130"/>
            </method>
            <javadoc line="135">
                Check the given string to see if it should trigger the
                  html rendering logic in a non-text component that supports
                  html rendering.                
            </javadoc>
            <method name="isHTMLString" type="boolean" line="140">
                <params>
                    <param name="s" type="String"/>
                </params>
                <scope line="141">
                    <scope line="142">
                        <declaration name="tag" type="String" line="143"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="149">
                Stash the HTML render for the given text into the client
                  properties of the given JComponent. If the given text is
                  &lt;em&gt;NOT HTML&lt;/em&gt; the property will be cleared of any
                  renderer.
                  &lt;p&gt;
                  This method is useful for ComponentUI implementations
                  that are static (i.e. shared) and get their state
                  entirely from the JComponent.                
            </javadoc>
            <method name="updateRenderer" type="void" line="159">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="text" type="String"/>
                </params>
                <declaration name="value" type="View" line="160"/>
                <declaration name="oldValue" type="View" line="161"/>
                <declaration name="htmlDisabled" type="Boolean" line="162"/>
                <scope line="163"/>
                <scope line="166">
                    <scope line="167"/>
                </scope>
            </method>
            <declaration name="htmlDisable" type="String" line="173"/>
            <javadoc line="173">
                If this client property of a JComponent is set to Boolean.TRUE
                  the component&apos;s &apos;text&apos; property is never treated as HTML.                
            </javadoc>
            <declaration name="propertyKey" type="String" line="178"/>
            <javadoc line="178">
                Key to use for the html renderer when stored as a
                  client property of a JComponent.                
            </javadoc>
            <declaration name="documentBaseKey" type="String" line="183"/>
            <javadoc line="183">
                Key stored as a client property to indicate the base that relative
                  references are resolved against. For example, lets say you keep
                  your images in the directory resources relative to the code path,
                  you would use the following the set the base:
                  &lt;pre&gt;
                  jComponent.putClientProperty(documentBaseKey,
                  xxx.class.getResource(&quot;resources/&quot;));
                  &lt;/pre&gt;                
            </javadoc>
            <method name="getFactory" type="BasicEditorKit" line="194">
                <scope line="195"/>
            </method>
            <declaration name="basicHTMLFactory" type="BasicEditorKit" line="201"/>
            <javadoc line="201">
                The source of the html renderers                
            </javadoc>
            <declaration name="basicHTMLViewFactory" type="ViewFactory" line="205"/>
            <javadoc line="205">
                Creates the Views that visually represent the model.                
            </javadoc>
            <declaration name="styleChanges" type="String" line="209"/>
            <javadoc line="209">
                Overrides to the default stylesheet.  Should consider
                  just creating a completely fresh stylesheet.                
            </javadoc>
            <class name="BasicEditorKit" line="214">
                <extends class="HTMLEditorKit"/>
                <javadoc line="214">
                    The views produced for the ComponentUI implementations aren&apos;t
                      going to be edited and don&apos;t need full html support.  This kit
                      alters the HTMLEditorKit to try and trim things down a bit.
                      It does the following:
                      &lt;ul&gt;
                      &lt;li&gt;It doesn&apos;t produce Views for things like comments,
                      head, title, unknown tags, etc.
                      &lt;li&gt;It installs a different set of css settings from the default
                      provided by HTMLEditorKit.
                      &lt;/ul&gt;                    
                </javadoc>
                <declaration name="defaultStyles" type="StyleSheet" line="227"/>
                <javadoc line="227">
                    Shared base style for all documents created by us use.                    
                </javadoc>
                <javadoc line="231">
                    Overriden to return our own slimmed down style sheet.                    
                </javadoc>
                <method name="getStyleSheet" type="StyleSheet" line="234">
                    <scope line="235">
                        <declaration name="r" type="StringReader" line="237"/>
                        <scope line="238"/>
                        <scope line="241"/>
                    </scope>
                </method>
                <javadoc line="248">
                    Sets the async policy to flush everything in one chunk, and
                      to not display unknown tags.                    
                </javadoc>
                <method name="createDefaultDocument" type="Document" line="252">
                    <params>
                        <param name="defaultFont" type="Font"/>
                        <param name="foreground" type="Color"/>
                    </params>
                    <declaration name="styles" type="StyleSheet" line="253"/>
                    <declaration name="ss" type="StyleSheet" line="254"/>
                    <declaration name="doc" type="BasicDocument" line="256"/>
                </method>
                <javadoc line="261">
                    Returns the ViewFactory that is used to make sure the Views don&apos;t
                      load in the background.                    
                </javadoc>
                <method name="getViewFactory" type="ViewFactory" line="265"/>
            </class>
            <class name="BasicHTMLViewFactory" line="269">
                <extends class="HTMLEditorKit.HTMLFactory"/>
                <javadoc line="269">
                    BasicHTMLViewFactory extends HTMLFactory to force images to be loaded
                      synchronously.                    
                </javadoc>
                <method name="create" type="View" line="274">
                    <params>
                        <param name="elem" type="Element"/>
                    </params>
                    <declaration name="view" type="View" line="275"/>
                    <scope line="276"/>
                </method>
            </class>
            <class name="BasicDocument" line="282">
                <extends class="HTMLDocument"/>
                <javadoc line="282">
                    The subclass of HTMLDocument that is used as the model. getForeground
                      is overridden to return the foreground property from the Component this
                      was created for.                    
                </javadoc>
                <javadoc line="288">
                    The host, that is where we are rendering.                    
                </javadoc>
                <method name="BasicDocument" type="constructor" line="291">
                    <params>
                        <param name="s" type="StyleSheet"/>
                        <param name="defaultFont" type="Font"/>
                        <param name="foreground" type="Color"/>
                    </params>
                </method>
                <javadoc line="296">
                    Sets the default font and default color. These are set by
                      adding a rule for the body that specifies the font and color.
                      This allows the html to override these should it wish to have
                      a custom font or color.                    
                </javadoc>
                <method name="setFontAndColor" type="void" line="302">
                    <params>
                        <param name="font" type="Font"/>
                        <param name="fg" type="Color"/>
                    </params>
                </method>
            </class>
            <class name="Renderer" line="306">
                <extends class="View"/>
                <javadoc line="306">
                    Root text view that acts as an HTML renderer.                    
                </javadoc>
                <method name="Renderer" type="constructor" line="310">
                    <params>
                        <param name="c" type="JComponent"/>
                        <param name="f" type="ViewFactory"/>
                        <param name="v" type="View"/>
                    </params>
                </method>
                <javadoc line="318">
                    Fetches the attributes to use when rendering.  At the root
                      level there are no attributes.  If an attribute is resolved
                      up the view hierarchy this is the end of the line.                    
                </javadoc>
                <method name="getAttributes" type="AttributeSet" line="323"/>
                <javadoc line="326">
                    Determines the preferred span for this view along an axis.                    
                    <param>
                        axis may be either X_AXIS or Y_AXIS                        
                    </param>
                    <return>
                        the span the view would like to be rendered into.
                          Typically the view is told to render into the span
                          that is returned, although there is no guarantee.
                          The parent may choose to resize or break the view.                        
                    </return>
                </javadoc>
                <method name="getPreferredSpan" type="float" line="334">
                    <params>
                        <param name="axis" type="int"/>
                    </params>
                    <scope line="335"/>
                </method>
                <javadoc line="340">
                    Determines the minimum span for this view along an axis.                    
                    <param>
                        axis may be either X_AXIS or Y_AXIS                        
                    </param>
                    <return>
                        the span the view would like to be rendered into.
                          Typically the view is told to render into the span
                          that is returned, although there is no guarantee.
                          The parent may choose to resize or break the view.                        
                    </return>
                </javadoc>
                <method name="getMinimumSpan" type="float" line="348">
                    <params>
                        <param name="axis" type="int"/>
                    </params>
                </method>
                <javadoc line="351">
                    Determines the maximum span for this view along an axis.                    
                    <param>
                        axis may be either X_AXIS or Y_AXIS                        
                    </param>
                    <return>
                        the span the view would like to be rendered into.
                          Typically the view is told to render into the span
                          that is returned, although there is no guarantee.
                          The parent may choose to resize or break the view.                        
                    </return>
                </javadoc>
                <method name="getMaximumSpan" type="float" line="359">
                    <params>
                        <param name="axis" type="int"/>
                    </params>
                </method>
                <javadoc line="362">
                    Specifies that a preference has changed.
                      Child views can call this on the parent to indicate that
                      the preference has changed.  The root view routes this to
                      invalidate on the hosting component.
                      &lt;p&gt;
                      This can be called on a different thread from the
                      event dispatching thread and is basically unsafe to
                      propagate into the component.  To make this safe,
                      the operation is transferred over to the event dispatching
                      thread for completion.  It is a design goal that all view
                      methods be safe to call without concern for concurrency,
                      and this behavior helps make that true.                    
                    <param>
                        child the child view                        
                    </param>
                    <param>
                        width true if the width preference has changed                        
                    </param>
                    <param>
                        height true if the height preference has changed                        
                    </param>
                </javadoc>
                <method name="preferenceChanged" type="void" line="379">
                    <params>
                        <param name="child" type="View"/>
                        <param name="width" type="boolean"/>
                        <param name="height" type="boolean"/>
                    </params>
                </method>
                <javadoc line="383">
                    Determines the desired alignment for this view along an axis.                    
                    <param>
                        axis may be either X_AXIS or Y_AXIS                        
                    </param>
                    <return>
                        the desired alignment, where 0.0 indicates the origin
                          and 1.0 the full span away from the origin                        
                    </return>
                </javadoc>
                <method name="getAlignment" type="float" line="389">
                    <params>
                        <param name="axis" type="int"/>
                    </params>
                </method>
                <javadoc line="392">
                    Renders the view.                    
                    <param>
                        g the graphics context                        
                    </param>
                    <param>
                        allocation the region to render into                        
                    </param>
                </javadoc>
                <method name="paint" type="void" line="397">
                    <params>
                        <param name="g" type="Graphics"/>
                        <param name="allocation" type="Shape"/>
                    </params>
                    <declaration name="alloc" type="Rectangle" line="398"/>
                </method>
                <javadoc line="402">
                    Sets the view parent.                    
                    <param>
                        parent the parent view                        
                    </param>
                </javadoc>
                <method name="setParent" type="void" line="406">
                    <params>
                        <param name="parent" type="View"/>
                    </params>
                </method>
                <javadoc line="409">
                    Returns the number of views in this view.  Since
                      this view simply wraps the root of the view hierarchy
                      it has exactly one child.                    
                    <return>
                        the number of views                        
                    </return>
                    <see>
                        #getView                        
                    </see>
                </javadoc>
                <method name="getViewCount" type="int" line="416"/>
                <javadoc line="419">
                    Gets the n-th view in this container.                    
                    <param>
                        n the number of the view to get                        
                    </param>
                    <return>
                        the view                        
                    </return>
                </javadoc>
                <method name="getView" type="View" line="424">
                    <params>
                        <param name="n" type="int"/>
                    </params>
                </method>
                <javadoc line="427">
                    Provides a mapping from the document model coordinate space
                      to the coordinate space of the view mapped to it.                    
                    <param>
                        pos the position to convert                        
                    </param>
                    <param>
                        a the allocated region to render into                        
                    </param>
                    <return>
                        the bounding box of the given position                        
                    </return>
                </javadoc>
                <method name="modelToView" type="Shape" line="434">
                    <params>
                        <param name="pos" type="int"/>
                        <param name="a" type="Shape"/>
                        <param name="b" type="Position.Bias"/>
                    </params>
                </method>
                <javadoc line="437">
                    Provides a mapping from the document model coordinate space
                      to the coordinate space of the view mapped to it.                    
                    <param>
                        p0 the position to convert &gt;= 0                        
                    </param>
                    <param>
                        b0 the bias toward the previous character or the
                          next character represented by p0, in case the
                          position is a boundary of two views.                        
                    </param>
                    <param>
                        p1 the position to convert &gt;= 0                        
                    </param>
                    <param>
                        b1 the bias toward the previous character or the
                          next character represented by p1, in case the
                          position is a boundary of two views.                        
                    </param>
                    <param>
                        a the allocated region to render into                        
                    </param>
                    <return>
                        the bounding box of the given position is returned                        
                    </return>
                    <exception>
                        BadLocationException  if the given position does
                          not represent a valid location in the associated document                        
                    </exception>
                    <exception>
                        IllegalArgumentException for an invalid bias argument                        
                    </exception>
                    <see>
                        View#viewToModel                        
                    </see>
                </javadoc>
                <method name="modelToView" type="Shape" line="455">
                    <params>
                        <param name="p0" type="int"/>
                        <param name="b0" type="Position.Bias"/>
                        <param name="p1" type="int"/>
                        <param name="b1" type="Position.Bias"/>
                        <param name="a" type="Shape"/>
                    </params>
                </method>
                <javadoc line="458">
                    Provides a mapping from the view coordinate space to the logical
                      coordinate space of the model.                    
                    <param>
                        x x coordinate of the view location to convert                        
                    </param>
                    <param>
                        y y coordinate of the view location to convert                        
                    </param>
                    <param>
                        a the allocated region to render into                        
                    </param>
                    <return>
                        the location within the model that best represents the
                          given point in the view                        
                    </return>
                </javadoc>
                <method name="viewToModel" type="int" line="467">
                    <params>
                        <param name="x" type="float"/>
                        <param name="y" type="float"/>
                        <param name="a" type="Shape"/>
                        <param name="bias" type="Position.Bias[]"/>
                    </params>
                </method>
                <javadoc line="470">
                    Returns the document model underlying the view.                    
                    <return>
                        the model                        
                    </return>
                </javadoc>
                <method name="getDocument" type="Document" line="474"/>
                <javadoc line="477">
                    Returns the starting offset into the model for this view.                    
                    <return>
                        the starting offset                        
                    </return>
                </javadoc>
                <method name="getStartOffset" type="int" line="481"/>
                <javadoc line="484">
                    Returns the ending offset into the model for this view.                    
                    <return>
                        the ending offset                        
                    </return>
                </javadoc>
                <method name="getEndOffset" type="int" line="488"/>
                <javadoc line="491">
                    Gets the element that this view is mapped to.                    
                    <return>
                        the view                        
                    </return>
                </javadoc>
                <method name="getElement" type="Element" line="495"/>
                <javadoc line="498">
                    Sets the view size.                    
                    <param>
                        width the width                        
                    </param>
                    <param>
                        height the height                        
                    </param>
                </javadoc>
                <method name="setSize" type="void" line="503">
                    <params>
                        <param name="width" type="float"/>
                        <param name="height" type="float"/>
                    </params>
                </method>
                <javadoc line="507">
                    Fetches the container hosting the view.  This is useful for
                      things like scheduling a repaint, finding out the host
                      components font, etc.  The default implementation
                      of this is to forward the query to the parent view.                    
                    <return>
                        the container                        
                    </return>
                </javadoc>
                <method name="getContainer" type="Container" line="514"/>
                <javadoc line="517">
                    Fetches the factory to be used for building the
                      various view fragments that make up the view that
                      represents the model.  This is what determines
                      how the model will be represented.  This is implemented
                      to fetch the factory provided by the associated
                      EditorKit.                    
                    <return>
                        the factory                        
                    </return>
                </javadoc>
                <method name="getViewFactory" type="ViewFactory" line="526"/>
                <declaration name="width" type="int" line="529"/>
                <declaration name="view" type="View" line="530"/>
                <declaration name="factory" type="ViewFactory" line="531"/>
                <declaration name="host" type="JComponent" line="532"/>
            </class>
        </class>
    </source>