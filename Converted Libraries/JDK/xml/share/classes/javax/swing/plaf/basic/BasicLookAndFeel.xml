<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.plaf.basic">
        <import package="java.awt.Font"/>
        <import package="java.awt.Color"/>
        <import package="java.awt.SystemColor"/>
        <import package="java.awt.event"/>
        <import package="java.awt.Insets"/>
        <import package="java.awt.Component"/>
        <import package="java.awt.Container"/>
        <import package="java.awt.FocusTraversalPolicy"/>
        <import package="java.awt.AWTEvent"/>
        <import package="java.awt.Toolkit"/>
        <import package="java.awt.Point"/>
        <import package="java.net.URL"/>
        <import package="java.io"/>
        <import package="java.awt.Dimension"/>
        <import package="java.awt.KeyboardFocusManager"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.util"/>
        <import package="java.lang.reflect"/>
        <import package="javax.sound.sampled"/>
        <import package="sun.awt.AppContext"/>
        <import package="sun.swing.SwingLazyValue"/>
        <import package="sun.swing.SwingUtilities2"/>
        <import package="javax.swing.LookAndFeel"/>
        <import package="javax.swing.AbstractAction"/>
        <import package="javax.swing.Action"/>
        <import package="javax.swing.ActionMap"/>
        <import package="javax.swing.BorderFactory"/>
        <import package="javax.swing.JComponent"/>
        <import package="javax.swing.ImageIcon"/>
        <import package="javax.swing.UIDefaults"/>
        <import package="javax.swing.UIManager"/>
        <import package="javax.swing.KeyStroke"/>
        <import package="javax.swing.JTextField"/>
        <import package="javax.swing.DefaultListCellRenderer"/>
        <import package="javax.swing.FocusManager"/>
        <import package="javax.swing.LayoutFocusTraversalPolicy"/>
        <import package="javax.swing.SwingUtilities"/>
        <import package="javax.swing.MenuSelectionManager"/>
        <import package="javax.swing.MenuElement"/>
        <import package="javax.swing.border"/>
        <import package="javax.swing.plaf"/>
        <import package="javax.swing.text.JTextComponent"/>
        <import package="javax.swing.text.DefaultEditorKit"/>
        <import package="javax.swing.JInternalFrame"/>
        <import package="java.beans.PropertyVetoException"/>
        <import package="java.awt.Window"/>
        <import package="java.beans.PropertyChangeListener"/>
        <import package="java.beans.PropertyChangeEvent"/>
        <class name="BasicLookAndFeel" line="51">
            <extends class="LookAndFeel"/>
            <implements interface="Serializable"/>
            <javadoc line="51">
                A base class to use in creating a look and feel for Swing.
                  &lt;p&gt;
                  Each of the {@code ComponentUI}s provided by {@codeBasicLookAndFeel} derives its behavior from the defaults
                  table. Unless otherwise noted each of the {@code ComponentUI}implementations in this package document the set of defaults they
                  use. Unless otherwise noted the defaults are installed at the time{@code installUI} is invoked, and follow the recommendations
                  outlined in {@code LookAndFeel} for installing defaults.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <author>
                    unattributed                    
                </author>
            </javadoc>
            <declaration name="needsEventHelper" type="boolean" line="70"/>
            <javadoc line="70">
                Whether or not the developer has created a JPopupMenu.                
            </javadoc>
            <declaration name="audioLock" type="Object" line="74"/>
            <javadoc line="74">
                Lock used when manipulating clipPlaying.                
            </javadoc>
            <declaration name="clipPlaying" type="Clip" line="78"/>
            <javadoc line="78">
                The Clip that is currently playing (set in AudioAction).                
            </javadoc>
            <declaration name="invocator" type="AWTEventHelper" line="82"/>
            <declaration name="disposer" type="PropertyChangeListener" line="83"/>
            <javadoc line="84">
                Returns the look and feel defaults. The returned {@code UIDefaults}is populated by invoking, in order, {@code initClassDefaults},{@code initSystemColorDefaults} and {@code initComponentDefaults}.
                  &lt;p&gt;
                  While this method is public, it should only be invoked by the{@code UIManager} when the look and feel is set as the current
                  look and feel and after {@code initialize} has been invoked.                
                <return>
                    the look and feel defaults                    
                </return>
                <see>
                    #initClassDefaults                    
                </see>
                <see>
                    #initSystemColorDefaults                    
                </see>
                <see>
                    #initComponentDefaults                    
                </see>
            </javadoc>
            <method name="getDefaults" type="UIDefaults" line="94">
                <declaration name="table" type="UIDefaults" line="95"/>
            </method>
            <javadoc line="101">
                {@inheritDoc}                
            </javadoc>
            <method name="initialize" type="void" line="104">
                <scope line="105"/>
            </method>
            <method name="installAWTEventListener" type="void" line="109">
                <scope line="110">
                    <anonymous_class line="113">
                        <method name="propertyChange" type="void" line="114">
                            <params>
                                <param name="prpChg" type="PropertyChangeEvent"/>
                            </params>
                        </method>
                    </anonymous_class>
                </scope>
            </method>
            <javadoc line="122">
                {@inheritDoc}                
            </javadoc>
            <method name="uninitialize" type="void" line="125">
                <declaration name="context" type="AppContext" line="126"/>
                <scope line="127">
                    <declaration name="grabber" type="Object" line="128"/>
                    <scope line="129"/>
                </scope>
                <scope line="133">
                    <declaration name="helper" type="Object" line="134"/>
                    <scope line="135"/>
                </scope>
                <scope line="139"/>
                <scope line="143"/>
            </method>
            <javadoc line="148">
                Populates {@code table} with mappings from {@code uiClassID} to the
                  fully qualified name of the ui class. The value for a
                  particular {@code uiClassID} is {@code&quot;javax.swing.plaf.basic.Basic + uiClassID&quot;}. For example, the
                  value for the {@code uiClassID} {@code TreeUI} is {@code&quot;javax.swing.plaf.basic.BasicTreeUI&quot;}.                
                <param>
                    table the {@code UIDefaults} instance the entries are
                      added to                    
                </param>
                <throws>
                    NullPointerException if {@code table} is {@code null}                    
                </throws>
                <see>
                    javax.swing.LookAndFeel                    
                </see>
                <see>
                    #getDefaults                    
                </see>
            </javadoc>
            <method name="initClassDefaults" type="void" line="159">
                <params>
                    <param name="table" type="UIDefaults"/>
                </params>
                <declaration name="basicPackageName" type="String" line="160"/>
                <declaration name="uiDefaults" type="Object[]" line="161"/>
            </method>
            <javadoc line="164">
                Populates {@code table} with system colors. This creates an
                  array of {@code name-color} pairs and invokes {@codeloadSystemColors}.
                  &lt;p&gt;
                  The name is a {@code String} that corresponds to the name of
                  one of the static {@code SystemColor} fields in the {@codeSystemColor} class.  A name-color pair is created for every
                  such {@code SystemColor} field.
                  &lt;p&gt;
                  The {@code color} corresponds to a hex {@code String} as
                  understood by {@code Color.decode}. For example, one of the{@code name-color} pairs is {@code&quot;desktop&quot;-&quot;#005C5C&quot;}. This corresponds to the {@codeSystemColor} field {@code desktop}, with a color value of{@code new Color(0x005C5C)}.
                  &lt;p&gt;
                  The following shows two of the {@code name-color} pairs:
                  &lt;pre&gt;
                  String[] nameColorPairs = new String[] {
                  &quot;desktop&quot;, &quot;#005C5C&quot;,
                  &quot;activeCaption&quot;, &quot;#000080&quot; };
                  loadSystemColors(table, nameColorPairs, isNativeLookAndFeel());
                  &lt;/pre&gt;
                  As previously stated, this invokes {@code loadSystemColors}with the supplied {@code table} and {@code name-color} pair
                  array. The last argument to {@code loadSystemColors} indicates
                  whether the value of the field in {@code SystemColor} should be
                  used. This method passes the value of 
                   as the last argument to {@code loadSystemColors}.                
                <param>
                    table the {@code UIDefaults} object the values are added to                    
                </param>
                <throws>
                    NullPointerException if {@code table} is {@code null}                    
                </throws>
                <see>
                    java.awt.SystemColor                    
                </see>
                <see>
                    #getDefaults                    
                </see>
                <see>
                    #loadSystemColors                    
                </see>
            </javadoc>
            <method name="initSystemColorDefaults" type="void" line="192">
                <params>
                    <param name="table" type="UIDefaults"/>
                </params>
                <declaration name="defaultSystemColors" type="String[]" line="193"/>
            </method>
            <javadoc line="196">
                Populates {@code table} with the {@code name-color} pairs in{@code systemColors}. Refer to{@link #initSystemColorDefaults(UIDefaults)} for details on
                  the format of {@code systemColors}.
                  &lt;p&gt;
                  An entry is added to {@code table} for each of the {@code name-color}pairs in {@code systemColors}. The entry key is
                  the {@code name} of the {@code name-color} pair.
                  &lt;p&gt;
                  The value of the entry corresponds to the {@code color} of the{@code name-color} pair.  The value of the entry is calculated
                  in one of two ways. With either approach the value is always a{@code ColorUIResource}.
                  &lt;p&gt;
                  If {@code useNative} is {@code false}, the {@code color} is
                  created by using {@code Color.decode} to convert the {@codeString} into a {@code Color}. If {@code decode} can not convert
                  the {@code String} into a {@code Color} ({@codeNumberFormatException} is thrown) then a {@codeColorUIResource} of black is used.
                  &lt;p&gt;
                  If {@code useNative} is {@code true}, the {@code color} is the
                  value of the field in {@code SystemColor} with the same name as
                  the {@code name} of the {@code name-color} pair. If the field
                  is not valid, a {@code ColorUIResource} of black is used.                
                <param>
                    table the {@code UIDefaults} object the values are added to                    
                </param>
                <param>
                    systemColors array of {@code name-color} pairs as described
                      in {@link #initSystemColorDefaults(UIDefaults)}                    
                </param>
                <param>
                    useNative whether the color is obtained from {@code SystemColor}or {@code Color.decode}                    
                </param>
                <throws>
                    NullPointerException if {@code systemColors} is {@code null}; or{@code systemColors} is not empty, and {@code table} is{@code null}; or one of the
                      names of the {@code name-color} pairs is {@code null}; or{@code useNative} is {@code false} and one of the{@code colors} of the {@code name-color} pairs is {@code null}                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if {@code useNative} is{@code false} and {@code systemColors.length} is odd                    
                </throws>
                <see>
                    #initSystemColorDefaults(javax.swing.UIDefaults)                    
                </see>
                <see>
                    java.awt.SystemColor                    
                </see>
                <see>
                    java.awt.Color#decode(String)                    
                </see>
            </javadoc>
            <method name="loadSystemColors" type="void" line="225">
                <params>
                    <param name="table" type="UIDefaults"/>
                    <param name="systemColors" type="String[]"/>
                    <param name="useNative" type="boolean"/>
                </params>
                <scope line="226">
                    <scope line="227">
                        <declaration name="color" type="Color" line="228"/>
                        <scope line="229">
                            <declaration name="name" type="String" line="230"/>
                        </scope>
                        <scope line="233"/>
                    </scope>
                </scope>
                <scope line="238">
                    <scope line="239">
                        <declaration name="color" type="Color" line="240"/>
                        <scope line="241"/>
                        <scope line="244"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="251">
                Initialize the defaults table with the name of the ResourceBundle
                  used for getting localized defaults.  Also initialize the default
                  locale used when no locale is passed into UIDefaults.get().  The
                  default locale should generally not be relied upon. It is here for
                  compatability with releases prior to 1.4.                
            </javadoc>
            <method name="initResourceBundle" type="void" line="258">
                <params>
                    <param name="table" type="UIDefaults"/>
                </params>
            </method>
            <javadoc line="262">
                Populates {@code table} with the defaults for the basic look and
                  feel.                
                <param>
                    table the {@code UIDefaults} to add the values to                    
                </param>
                <throws>
                    NullPointerException if {@code table} is {@code null}                    
                </throws>
            </javadoc>
            <method name="initComponentDefaults" type="void" line="268">
                <params>
                    <param name="table" type="UIDefaults"/>
                </params>
                <declaration name="fiveHundred" type="Integer" line="270"/>
                <declaration name="oneThousand" type="Long" line="271"/>
                <declaration name="twelve" type="Integer" line="272"/>
                <declaration name="fontPlain" type="Integer" line="273"/>
                <declaration name="fontBold" type="Integer" line="274"/>
                <declaration name="dialogPlain12" type="Object" line="275"/>
                <declaration name="serifPlain12" type="Object" line="276"/>
                <declaration name="sansSerifPlain12" type="Object" line="277"/>
                <declaration name="monospacedPlain12" type="Object" line="278"/>
                <declaration name="dialogBold12" type="Object" line="279"/>
                <declaration name="red" type="ColorUIResource" line="280"/>
                <declaration name="black" type="ColorUIResource" line="281"/>
                <declaration name="white" type="ColorUIResource" line="282"/>
                <declaration name="yellow" type="ColorUIResource" line="283"/>
                <declaration name="gray" type="ColorUIResource" line="284"/>
                <declaration name="lightGray" type="ColorUIResource" line="285"/>
                <declaration name="darkGray" type="ColorUIResource" line="286"/>
                <declaration name="scrollBarTrack" type="ColorUIResource" line="287"/>
                <declaration name="control" type="Color" line="288"/>
                <declaration name="controlDkShadow" type="Color" line="289"/>
                <declaration name="controlHighlight" type="Color" line="290"/>
                <declaration name="controlLtHighlight" type="Color" line="291"/>
                <declaration name="controlShadow" type="Color" line="292"/>
                <declaration name="controlText" type="Color" line="293"/>
                <declaration name="menu" type="Color" line="294"/>
                <declaration name="menuText" type="Color" line="295"/>
                <declaration name="textHighlight" type="Color" line="296"/>
                <declaration name="textHighlightText" type="Color" line="297"/>
                <declaration name="textInactiveText" type="Color" line="298"/>
                <declaration name="textText" type="Color" line="299"/>
                <declaration name="window" type="Color" line="300"/>
                <declaration name="zeroInsets" type="InsetsUIResource" line="301"/>
                <declaration name="twoInsets" type="InsetsUIResource" line="302"/>
                <declaration name="threeInsets" type="InsetsUIResource" line="303"/>
                <declaration name="marginBorder" type="Object" line="304"/>
                <declaration name="etchedBorder" type="Object" line="305"/>
                <declaration name="loweredBevelBorder" type="Object" line="306"/>
                <declaration name="popupMenuBorder" type="Object" line="307"/>
                <declaration name="blackLineBorder" type="Object" line="308"/>
                <declaration name="focusCellHighlightBorder" type="Object" line="309"/>
                <declaration name="noFocusBorder" type="Object" line="310"/>
                <declaration name="tableHeaderBorder" type="Object" line="311"/>
                <declaration name="buttonBorder" type="Object" line="312"/>
                <declaration name="buttonToggleBorder" type="Object" line="313"/>
                <declaration name="radioButtonBorder" type="Object" line="314"/>
                <declaration name="newFolderIcon" type="Object" line="315"/>
                <declaration name="upFolderIcon" type="Object" line="316"/>
                <declaration name="homeFolderIcon" type="Object" line="317"/>
                <declaration name="detailsViewIcon" type="Object" line="318"/>
                <declaration name="listViewIcon" type="Object" line="319"/>
                <declaration name="directoryIcon" type="Object" line="320"/>
                <declaration name="fileIcon" type="Object" line="321"/>
                <declaration name="computerIcon" type="Object" line="322"/>
                <declaration name="hardDriveIcon" type="Object" line="323"/>
                <declaration name="floppyDriveIcon" type="Object" line="324"/>
                <declaration name="internalFrameBorder" type="Object" line="325"/>
                <anonymous_class line="326">
                    <method name="createValue" type="Object" line="327">
                        <params>
                            <param name="table" type="UIDefaults"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="listCellRendererActiveValue" type="Object" line="326"/>
                <declaration name="menuBarBorder" type="Object" line="332"/>
                <declaration name="menuItemCheckIcon" type="Object" line="333"/>
                <declaration name="menuItemArrowIcon" type="Object" line="334"/>
                <declaration name="menuArrowIcon" type="Object" line="335"/>
                <declaration name="checkBoxIcon" type="Object" line="336"/>
                <declaration name="radioButtonIcon" type="Object" line="337"/>
                <declaration name="checkBoxMenuItemIcon" type="Object" line="338"/>
                <declaration name="radioButtonMenuItemIcon" type="Object" line="339"/>
                <declaration name="menuItemAcceleratorDelimiter" type="Object" line="340"/>
                <declaration name="optionPaneMinimumSize" type="Object" line="341"/>
                <declaration name="zero" type="Integer" line="342"/>
                <declaration name="zeroBorder" type="Object" line="343"/>
                <declaration name="ten" type="Integer" line="344"/>
                <declaration name="optionPaneBorder" type="Object" line="345"/>
                <declaration name="optionPaneButtonAreaBorder" type="Object" line="346"/>
                <declaration name="progressBarBorder" type="Object" line="347"/>
                <declaration name="minimumThumbSize" type="Object" line="348"/>
                <declaration name="maximumThumbSize" type="Object" line="349"/>
                <declaration name="sliderFocusInsets" type="Object" line="350"/>
                <declaration name="toolBarSeparatorSize" type="Object" line="351"/>
                <declaration name="splitPaneBorder" type="Object" line="352"/>
                <declaration name="splitPaneDividerBorder" type="Object" line="353"/>
                <declaration name="tabbedPaneTabInsets" type="Object" line="354"/>
                <declaration name="tabbedPaneTabPadInsets" type="Object" line="355"/>
                <declaration name="tabbedPaneTabAreaInsets" type="Object" line="356"/>
                <declaration name="tabbedPaneContentBorderInsets" type="Object" line="357"/>
                <declaration name="textFieldBorder" type="Object" line="358"/>
                <declaration name="editorMargin" type="Object" line="359"/>
                <declaration name="caretBlinkRate" type="Object" line="360"/>
                <declaration name="four" type="Integer" line="361"/>
                <declaration name="allAuditoryCues" type="Object[]" line="362"/>
                <declaration name="noAuditoryCues" type="Object[]" line="363"/>
                <declaration name="defaults" type="Object[]" line="364"/>
            </method>
            <javadoc line="367">
                Returns the ui that is of type &lt;code&gt;klass&lt;/code&gt;, or null if
                  one can not be found.                
            </javadoc>
            <method name="getUIOfType" type="Object" line="371">
                <params>
                    <param name="ui" type="ComponentUI"/>
                    <param name="klass" type="Class"/>
                </params>
                <scope line="372"/>
            </method>
            <javadoc line="377">
                Returns an &lt;code&gt;ActionMap&lt;/code&gt; containing the audio actions
                  for this look and feel.
                  &lt;P&gt;
                  The returned &lt;code&gt;ActionMap&lt;/code&gt; contains &lt;code&gt;Actions&lt;/code&gt; that
                  embody the ability to render an auditory cue. These auditory
                  cues map onto user and system activities that may be useful
                  for an end user to know about (such as a dialog box appearing).
                  &lt;P&gt;
                  At the appropriate time,
                  the {@code ComponentUI} is responsible for obtaining an
                  &lt;code&gt;Action&lt;/code&gt; out of the &lt;code&gt;ActionMap&lt;/code&gt; and passing
                  it to &lt;code&gt;playSound&lt;/code&gt;.
                  &lt;P&gt;
                  This method first looks up the {@code ActionMap} from the
                  defaults using the key {@code &quot;AuditoryCues.actionMap&quot;}.
                  &lt;p&gt;
                  If the value is {@code non-null}, it is returned. If the value
                  of the default {@code &quot;AuditoryCues.actionMap&quot;} is {@code null}and the value of the default {@code &quot;AuditoryCues.cueList&quot;} is{@code non-null}, an {@code ActionMapUIResource} is created and
                  populated. Population is done by iterating over each of the
                  elements of the {@code &quot;AuditoryCues.cueList&quot;} array, and
                  invoking {@code createAudioAction()} to create an {@codeAction} for each element.  The resulting {@code Action} is
                  placed in the {@code ActionMapUIResource}, using the array
                  element as the key.  For example, if the {@code&quot;AuditoryCues.cueList&quot;} array contains a single-element, {@code&quot;audioKey&quot;}, the {@code ActionMapUIResource} is created, then
                  populated by way of {@code actionMap.put(cueList[0],
                  createAudioAction(cueList[0]))}.
                  &lt;p&gt;
                  If the value of the default {@code &quot;AuditoryCues.actionMap&quot;} is{@code null} and the value of the default{@code &quot;AuditoryCues.cueList&quot;} is {@code null}, an empty{@code ActionMapUIResource} is created.                
                <return>
                    an ActionMap containing {@code Actions}responsible for playing auditory cues                    
                </return>
                <throws>
                    ClassCastException if the value of the
                      default {@code "AuditoryCues.actionMap"} is not an{@code ActionMap}, or the value of the default{@code "AuditoryCues.cueList"} is not an {@code Object[]}                    
                </throws>
                <see>
                    #createAudioAction                    
                </see>
                <see>
                    #playSound(Action)                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getAudioActionMap" type="ActionMap" line="412">
                <declaration name="audioActionMap" type="ActionMap" line="413"/>
                <scope line="414">
                    <declaration name="acList" type="Object[]" line="415"/>
                    <scope line="416">
                        <scope line="418"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="426">
                Creates and returns an {@code Action} used to play a sound.
                  &lt;p&gt;
                  If {@code key} is {@code non-null}, an {@code Action} is created
                  using the value from the defaults with key {@code key}. The value
                  identifies the sound resource to load when{@code actionPerformed} is invoked on the {@code Action}. The
                  sound resource is loaded into a {@code byte[]} by way of{@code getClass().getResourceAsStream()}.                
                <param>
                    key the key identifying the audio action                    
                </param>
                <return>
                    an {@code Action} used to play the source, or {@code null}if {@code key} is {@code null}                    
                </return>
                <see>
                    #playSound(Action)                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="createAudioAction" type="Action" line="438">
                <params>
                    <param name="key" type="Object"/>
                </params>
                <scope line="439">
                    <declaration name="audioKey" type="String" line="440"/>
                    <declaration name="audioValue" type="String" line="441"/>
                </scope>
                <scope line="444"/>
            </method>
            <class name="AudioAction" line="448">
                <extends class="AbstractAction"/>
                <implements interface="LineListener"/>
                <javadoc line="448">
                    Pass the name String to the super constructor. This is used
                      later to identify the Action and decide whether to play it or
                      not. Store the resource String. I is used to get the audio
                      resource. In this case, the resource is an audio file.                    
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <declaration name="audioResource" type="String" line="456"/>
                <declaration name="audioBuffer" type="byte[]" line="457"/>
                <javadoc line="458">
                    The String is the name of the Action and
                      points to the audio resource.
                      The byte[] is a buffer of the audio bits.                    
                </javadoc>
                <method name="AudioAction" type="constructor" line="463">
                    <params>
                        <param name="name" type="String"/>
                        <param name="resource" type="String"/>
                    </params>
                </method>
                <method name="actionPerformed" type="void" line="467">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                    <scope line="468"/>
                    <scope line="471">
                        <scope line="473">
                            <declaration name="soundStream" type="AudioInputStream" line="474"/>
                            <declaration name="info" type="DataLine.Info" line="475"/>
                            <declaration name="clip" type="Clip" line="476"/>
                            <scope line="479"/>
                        </scope>
                        <scope line="484"/>
                    </scope>
                </method>
                <method name="update" type="void" line="488">
                    <params>
                        <param name="event" type="LineEvent"/>
                    </params>
                    <scope line="489"/>
                </method>
                <javadoc line="493">
                    If the parameter is null, or equal to the currently
                      playing sound, then cancel the currently playing sound.                    
                </javadoc>
                <method name="cancelCurrentSound" type="void" line="497">
                    <params>
                        <param name="clip" type="Clip"/>
                    </params>
                    <declaration name="lastClip" type="Clip" line="498"/>
                    <scope line="499">
                        <scope line="500"/>
                    </scope>
                    <scope line="505"/>
                </method>
            </class>
            <javadoc line="511">
                Utility method that loads audio bits for the specified
                  &lt;code&gt;soundFile&lt;/code&gt; filename. If this method is unable to
                  build a viable path name from the &lt;code&gt;baseClass&lt;/code&gt; and
                  &lt;code&gt;soundFile&lt;/code&gt; passed into this method, it will
                  return &lt;code&gt;null&lt;/code&gt;.                
                <param>
                    soundFile    the name of the audio file to be retrieved
                      from disk                    
                </param>
                <return>
                    A byte[] with audio data or null                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="loadAudioData" type="byte[]" line="522">
                <params>
                    <param name="soundFile" type="String"/>
                </params>
                <scope line="523"/>
                <anonymous_class line="526">
                    <method name="run" type="byte[]" line="527">
                        <scope line="528">
                            <declaration name="resource" type="InputStream" line="529"/>
                            <scope line="530"/>
                            <declaration name="in" type="BufferedInputStream" line="533"/>
                            <declaration name="out" type="ByteArrayOutputStream" line="534"/>
                            <declaration name="buffer" type="byte[]" line="535"/>
                            <declaration name="n" type="int" line="536"/>
                            <scope line="537"/>
                        </scope>
                        <scope line="545"/>
                    </method>
                </anonymous_class>
                <declaration name="buffer" type="byte[]" line="526"/>
                <scope line="552"/>
                <scope line="556"/>
            </method>
            <javadoc line="562">
                If necessary, invokes {@code actionPerformed} on{@code audioAction} to play a sound.
                  The {@code actionPerformed} method is invoked if the value of
                  the {@code &quot;AuditoryCues.playList&quot;} default is a {@codenon-null} {@code Object[]} containing a {@code String} entry
                  equal to the name of the {@code audioAction}.                
                <param>
                    audioAction an Action that knows how to render the audio
                      associated with the system or user activity
                      that is occurring; a value of {@code null}, is
                      ignored                    
                </param>
                <throws>
                    ClassCastException if {@code audioAction} is {@code non-null}and the value of the default {@code "AuditoryCues.playList"}is not an {@code Object[]}                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="playSound" type="void" line="574">
                <params>
                    <param name="audioAction" type="Action"/>
                </params>
                <scope line="575">
                    <declaration name="audioStrings" type="Object[]" line="576"/>
                    <scope line="577">
                        <declaration name="audioCues" type="HashSet&lt;Object&gt;" line="578"/>
                        <scope line="579"/>
                        <declaration name="actionName" type="String" line="582"/>
                        <scope line="583"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="589">
                Sets the parent of the passed in ActionMap to be the audio action
                  map.                
            </javadoc>
            <method name="installAudioActionMap" type="void" line="593">
                <params>
                    <param name="map" type="ActionMap"/>
                </params>
                <declaration name="laf" type="LookAndFeel" line="594"/>
                <scope line="595"/>
            </method>
            <javadoc line="599">
                Helper method to play a named sound.                
                <param>
                    c JComponent to play the sound for.                    
                </param>
                <param>
                    actionKey Key for the sound.                    
                </param>
            </javadoc>
            <method name="playSound" type="void" line="604">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="actionKey" type="Object"/>
                </params>
                <declaration name="laf" type="LookAndFeel" line="605"/>
                <scope line="606">
                    <declaration name="map" type="ActionMap" line="607"/>
                    <scope line="608">
                        <declaration name="audioAction" type="Action" line="609"/>
                        <scope line="610"/>
                    </scope>
                </scope>
            </method>
            <class name="AWTEventHelper" line="616">
                <implements interface="AWTEventListener"/>
                <implements interface="PrivilegedAction">
                    <type_params>
                        <type_param name="Object"/>
                    </type_params>
                </implements>
                <javadoc line="616">
                    This class contains listener that watches for all the mouse
                      events that can possibly invoke popup on the component                    
                </javadoc>
                <method name="AWTEventHelper" type="constructor" line="621"/>
                <method name="run" type="Object" line="625">
                    <declaration name="tk" type="Toolkit" line="626"/>
                    <scope line="627"/>
                    <scope line="630"/>
                </method>
                <method name="eventDispatched" type="void" line="635">
                    <params>
                        <param name="ev" type="AWTEvent"/>
                    </params>
                    <declaration name="eventID" type="int" line="636"/>
                    <scope line="637">
                        <declaration name="me" type="MouseEvent" line="638"/>
                        <scope line="639">
                            <declaration name="elems" type="MenuElement[]" line="640"/>
                            <scope line="641"/>
                            <declaration name="c" type="Object" line="644"/>
                            <declaration name="src" type="JComponent" line="645"/>
                            <scope line="646"/>
                            <scope line="649"/>
                            <scope line="652">
                                <scope line="653">
                                    <declaration name="pt" type="Point" line="654"/>
                                    <scope line="655"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="665">
                        <declaration name="object" type="Object" line="666"/>
                        <scope line="667"/>
                        <declaration name="component" type="Component" line="670"/>
                        <scope line="671">
                            <declaration name="parent" type="Component" line="672"/>
                            <scope line="673">
                                <scope line="674">
                                    <scope line="675"/>
                                    <scope line="678"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </method>
            </class>
        </class>
    </source>