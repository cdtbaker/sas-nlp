<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.plaf.multi">
        <import package="java.util.Vector"/>
        <import package="java.lang.reflect.Method"/>
        <import package="javax.swing"/>
        <import package="javax.swing.plaf"/>
        <class name="MultiLookAndFeel" line="6">
            <extends class="LookAndFeel"/>
            <javadoc line="6">
                &lt;p&gt;A multiplexing look and feel that allows more than one UI
                  to be associated with a component at the same time.
                  The primary look and feel is called
                  the &lt;em&gt;default&lt;/em&gt; look and feel,
                  and the other look and feels are called &lt;em&gt;auxiliary&lt;/em&gt;.
                  &lt;p&gt;
                  For further information, see
                  &lt;a href=&quot;doc-files/multi_tsc.html&quot; target=&quot;_top&quot;&gt;Using the
                  Multiplexing Look and Feel.&lt;/a&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <see>
                    UIManager#addAuxiliaryLookAndFeel                    
                </see>
                <see>
                    javax.swing.plaf.multi                    
                </see>
                <author>
                    Willie Walker                    
                </author>
            </javadoc>
            <javadoc line="30">
                Returns a string, suitable for use in menus,
                  that identifies this look and feel.                
                <return>
                    a string such as &quot;Multiplexing Look and Feel&quot;                    
                </return>
            </javadoc>
            <method name="getName" type="String" line="35"/>
            <javadoc line="38">
                Returns a string, suitable for use by applications/services,
                  that identifies this look and feel.                
                <return>
                    &quot;Multiplex&quot;                    
                </return>
            </javadoc>
            <method name="getID" type="String" line="43"/>
            <javadoc line="46">
                Returns a one-line description of this look and feel.                
                <return>
                    a descriptive string such as &quot;Allows multiple UI instances per component instance&quot;                    
                </return>
            </javadoc>
            <method name="getDescription" type="String" line="50"/>
            <javadoc line="53">
                Returns &lt;code&gt;false&lt;/code&gt;;
                  this look and feel is not native to any platform.                
                <return>
                    &lt;code&gt;false&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="isNativeLookAndFeel" type="boolean" line="58"/>
            <javadoc line="61">
                Returns &lt;code&gt;true&lt;/code&gt;;
                  every platform permits this look and feel.                
                <return>
                    &lt;code&gt;true&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="isSupportedLookAndFeel" type="boolean" line="66"/>
            <javadoc line="69">
                Creates, initializes, and returns
                  the look and feel specific defaults.
                  For this look and feel,
                  the defaults consist solely of
                  mappings of UI class IDs
                  (such as &quot;ButtonUI&quot;)
                  to &lt;code&gt;ComponentUI&lt;/code&gt; class names
                  (such as &quot;javax.swing.plaf.multi.MultiButtonUI&quot;).                
                <return>
                    an initialized &lt;code&gt;UIDefaults&lt;/code&gt; object                    
                </return>
                <see>
                    javax.swing.JComponent#getUIClassID                    
                </see>
            </javadoc>
            <method name="getDefaults" type="UIDefaults" line="81">
                <declaration name="packageName" type="String" line="82"/>
                <declaration name="uiDefaults" type="Object[]" line="83"/>
                <declaration name="table" type="UIDefaults" line="84"/>
            </method>
            <javadoc line="88">
                Creates the &lt;code&gt;ComponentUI&lt;/code&gt; objects
                  required to present
                  the &lt;code&gt;target&lt;/code&gt; component,
                  placing the objects in the &lt;code&gt;uis&lt;/code&gt; vector and
                  returning the
                  &lt;code&gt;ComponentUI&lt;/code&gt; object
                  that best represents the component&apos;s UI.
                  This method finds the &lt;code&gt;ComponentUI&lt;/code&gt; objects
                  by invoking
                  &lt;code&gt;getDefaults().getUI(target)&lt;/code&gt; on each
                  default and auxiliary look and feel currently in use.
                  The first UI object this method adds
                  to the &lt;code&gt;uis&lt;/code&gt; vector
                  is for the default look and feel.
                  &lt;p&gt;
                  This method is invoked by the &lt;code&gt;createUI&lt;/code&gt; method
                  of &lt;code&gt;MultiXxxxUI&lt;/code&gt; classes.                
                <param>
                    mui the &lt;code&gt;ComponentUI&lt;/code&gt; object
                      that represents the complete UI
                      for the &lt;code&gt;target&lt;/code&gt; component;
                      this should be an instance
                      of one of the &lt;code&gt;MultiXxxxUI&lt;/code&gt; classes                    
                </param>
                <param>
                    uis a &lt;code&gt;Vector&lt;/code&gt;;
                      generally this is the &lt;code&gt;uis&lt;/code&gt; field
                      of the &lt;code&gt;mui&lt;/code&gt; argument                    
                </param>
                <param>
                    target a component whose UI is represented by &lt;code&gt;mui&lt;/code&gt;                    
                </param>
                <return>
                    &lt;code&gt;mui&lt;/code&gt; if the component has any auxiliary UI objects;
                      otherwise, returns the UI object for the default look and feel
                      or &lt;code&gt;null&lt;/code&gt; if the default UI object couldn&apos;t be found                    
                </return>
                <see>
                    javax.swing.UIManager#getAuxiliaryLookAndFeels                    
                </see>
                <see>
                    javax.swing.UIDefaults#getUI                    
                </see>
                <see>
                    MultiButtonUI#uis                    
                </see>
                <see>
                    MultiButtonUI#createUI                    
                </see>
            </javadoc>
            <method name="createUIs" type="ComponentUI" line="123">
                <params>
                    <param name="mui" type="ComponentUI"/>
                    <param name="uis" type="Vector"/>
                    <param name="target" type="JComponent"/>
                </params>
                <declaration name="ui" type="ComponentUI" line="124"/>
                <scope line="126">
                    <declaration name="auxiliaryLookAndFeels" type="LookAndFeel[]" line="128"/>
                    <scope line="130">
                        <scope line="131">
                            <scope line="133"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="139"/>
                <scope line="142"/>
                <scope line="145"/>
            </method>
            <javadoc line="149">
                Creates an array,
                  populates it with UI objects from the passed-in vector,
                  and returns the array.
                  If &lt;code&gt;uis&lt;/code&gt; is null,
                  this method returns an array with zero elements.
                  If &lt;code&gt;uis&lt;/code&gt; is an empty vector,
                  this method returns &lt;code&gt;null&lt;/code&gt;.
                  A run-time error occurs if any objects in the &lt;code&gt;uis&lt;/code&gt; vector
                  are not of type &lt;code&gt;ComponentUI&lt;/code&gt;.                
                <param>
                    uis a vector containing &lt;code&gt;ComponentUI&lt;/code&gt; objects                    
                </param>
                <return>
                    an array equivalent to the passed-in vector                    
                </return>
            </javadoc>
            <method name="uisToArray" type="ComponentUI[]" line="162">
                <params>
                    <param name="uis" type="Vector"/>
                </params>
                <scope line="163"/>
                <scope line="166">
                    <declaration name="count" type="int" line="167"/>
                    <scope line="168">
                        <declaration name="u" type="ComponentUI[]" line="169"/>
                        <scope line="170"/>
                    </scope>
                    <scope line="175"/>
                </scope>
            </method>
        </class>
        <class name="MultiUIDefaults" line="181">
            <extends class="UIDefaults"/>
            <javadoc line="181">
                We want the Multiplexing LookAndFeel to be quiet and fallback
                  gracefully if it cannot find a UI.  This class overrides the
                  getUIError method of UIDefaults, which is the method that
                  emits error messages when it cannot find a UI class in the
                  LAF.                
            </javadoc>
            <method name="MultiUIDefaults" type="constructor" line="189">
                <params>
                    <param name="initialCapacity" type="int"/>
                    <param name="loadFactor" type="float"/>
                </params>
            </method>
            <method name="getUIError" type="void" line="192">
                <params>
                    <param name="msg" type="String"/>
                </params>
            </method>
        </class>
    </source>