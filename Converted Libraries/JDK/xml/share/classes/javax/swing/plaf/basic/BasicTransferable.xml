<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.plaf.basic">
        <import package="java.io"/>
        <import package="java.awt.datatransfer"/>
        <import package="javax.swing.plaf.UIResource"/>
        <class name="BasicTransferable" line="5">
            <implements interface="Transferable"/>
            <implements interface="UIResource"/>
            <javadoc line="5">
                A transferable implementation for the default data transfer of some Swing
                  components.                
                <author>
                    Timothy Prinzing                    
                </author>
            </javadoc>
            <declaration name="plainData" type="String" line="11"/>
            <declaration name="htmlData" type="String" line="12"/>
            <declaration name="htmlFlavors" type="DataFlavor[]" line="13"/>
            <declaration name="stringFlavors" type="DataFlavor[]" line="14"/>
            <declaration name="plainFlavors" type="DataFlavor[]" line="15"/>
            <scope line="16">
                <scope line="17"/>
                <scope line="30"/>
            </scope>
            <method name="BasicTransferable" type="constructor" line="34">
                <params>
                    <param name="plainData" type="String"/>
                    <param name="htmlData" type="String"/>
                </params>
            </method>
            <javadoc line="38">
                Returns an array of DataFlavor objects indicating the flavors the data
                  can be provided in.  The array should be ordered according to preference
                  for providing the data (from most richly descriptive to least descriptive).                
                <return>
                    an array of data flavors in which this data can be transferred                    
                </return>
            </javadoc>
            <method name="getTransferDataFlavors" type="DataFlavor[]" line="44">
                <declaration name="richerFlavors" type="DataFlavor[]" line="45"/>
                <declaration name="nRicher" type="int" line="46"/>
                <declaration name="nHTML" type="int" line="47"/>
                <declaration name="nPlain" type="int" line="48"/>
                <declaration name="nString" type="int" line="49"/>
                <declaration name="nFlavors" type="int" line="50"/>
                <declaration name="flavors" type="DataFlavor[]" line="51"/>
                <declaration name="nDone" type="int" line="52"/>
                <scope line="53"/>
                <scope line="57"/>
                <scope line="61"/>
                <scope line="65"/>
            </method>
            <javadoc line="71">
                Returns whether or not the specified data flavor is supported for
                  this object.                
                <param>
                    flavor the requested flavor for the data                    
                </param>
                <return>
                    boolean indicating whether or not the data flavor is supported                    
                </return>
            </javadoc>
            <method name="isDataFlavorSupported" type="boolean" line="77">
                <params>
                    <param name="flavor" type="DataFlavor"/>
                </params>
                <declaration name="flavors" type="DataFlavor[]" line="78"/>
                <scope line="79">
                    <scope line="80"/>
                </scope>
            </method>
            <javadoc line="86">
                Returns an object which represents the data to be transferred.  The class
                  of the object returned is defined by the representation class of the flavor.                
                <param>
                    flavor the requested flavor for the data                    
                </param>
                <see>
                    DataFlavor#getRepresentationClass                    
                </see>
                <exception>
                    IOException                if the data is no longer available
                      in the requested flavor.                    
                </exception>
                <exception>
                    UnsupportedFlavorException if the requested data flavor is
                      not supported.                    
                </exception>
            </javadoc>
            <method name="getTransferData" type="Object" line="96">
                <params>
                    <param name="flavor" type="DataFlavor"/>
                </params>
                <declaration name="richerFlavors" type="DataFlavor[]" line="97"/>
                <scope line="98"/>
                <scope line="101">
                    <declaration name="data" type="String" line="102"/>
                    <scope line="104"/>
                    <scope line="107"/>
                    <scope line="110"/>
                </scope>
                <scope line="114">
                    <declaration name="data" type="String" line="115"/>
                    <scope line="117"/>
                    <scope line="120"/>
                    <scope line="123"/>
                </scope>
                <scope line="127">
                    <declaration name="data" type="String" line="128"/>
                </scope>
            </method>
            <method name="isRicherFlavor" type="boolean" line="134">
                <params>
                    <param name="flavor" type="DataFlavor"/>
                </params>
                <declaration name="richerFlavors" type="DataFlavor[]" line="135"/>
                <declaration name="nFlavors" type="int" line="136"/>
                <scope line="137">
                    <scope line="138"/>
                </scope>
            </method>
            <javadoc line="144">
                Some subclasses will have flavors that are more descriptive than HTML
                  or plain text.  If this method returns a non-null value, it will be
                  placed at the start of the array of supported flavors.                
            </javadoc>
            <method name="getRicherFlavors" type="DataFlavor[]" line="149"/>
            <method name="getRicherData" type="Object" line="152">
                <params>
                    <param name="flavor" type="DataFlavor"/>
                </params>
            </method>
            <javadoc line="155">
                Returns whether or not the specified data flavor is an HTML flavor that
                  is supported.                
                <param>
                    flavor the requested flavor for the data                    
                </param>
                <return>
                    boolean indicating whether or not the data flavor is supported                    
                </return>
            </javadoc>
            <method name="isHTMLFlavor" type="boolean" line="161">
                <params>
                    <param name="flavor" type="DataFlavor"/>
                </params>
                <declaration name="flavors" type="DataFlavor[]" line="162"/>
                <scope line="163">
                    <scope line="164"/>
                </scope>
            </method>
            <javadoc line="170">
                Should the HTML flavors be offered?  If so, the method
                  getHTMLData should be implemented to provide something reasonable.                
            </javadoc>
            <method name="isHTMLSupported" type="boolean" line="174"/>
            <javadoc line="177">
                Fetch the data in a text/html format                
            </javadoc>
            <method name="getHTMLData" type="String" line="180"/>
            <javadoc line="183">
                Returns whether or not the specified data flavor is an plain flavor that
                  is supported.                
                <param>
                    flavor the requested flavor for the data                    
                </param>
                <return>
                    boolean indicating whether or not the data flavor is supported                    
                </return>
            </javadoc>
            <method name="isPlainFlavor" type="boolean" line="189">
                <params>
                    <param name="flavor" type="DataFlavor"/>
                </params>
                <declaration name="flavors" type="DataFlavor[]" line="190"/>
                <scope line="191">
                    <scope line="192"/>
                </scope>
            </method>
            <javadoc line="198">
                Should the plain text flavors be offered?  If so, the method
                  getPlainData should be implemented to provide something reasonable.                
            </javadoc>
            <method name="isPlainSupported" type="boolean" line="202"/>
            <javadoc line="205">
                Fetch the data in a text/plain format.                
            </javadoc>
            <method name="getPlainData" type="String" line="208"/>
            <javadoc line="211">
                Returns whether or not the specified data flavor is a String flavor that
                  is supported.                
                <param>
                    flavor the requested flavor for the data                    
                </param>
                <return>
                    boolean indicating whether or not the data flavor is supported                    
                </return>
            </javadoc>
            <method name="isStringFlavor" type="boolean" line="217">
                <params>
                    <param name="flavor" type="DataFlavor"/>
                </params>
                <declaration name="flavors" type="DataFlavor[]" line="218"/>
                <scope line="219">
                    <scope line="220"/>
                </scope>
            </method>
        </class>
    </source>