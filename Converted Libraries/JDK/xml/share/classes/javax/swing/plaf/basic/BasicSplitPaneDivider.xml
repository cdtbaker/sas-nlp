<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.plaf.basic">
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="javax.swing"/>
        <import package="javax.swing.event"/>
        <import package="javax.swing.plaf"/>
        <import package="javax.swing.border.Border"/>
        <import package="java.beans"/>
        <import package="sun.swing.DefaultLookup"/>
        <class name="BasicSplitPaneDivider" line="10">
            <extends class="Container"/>
            <implements interface="PropertyChangeListener"/>
            <javadoc line="10">
                Divider used by BasicSplitPaneUI. Subclassers may wish to override
                  paint to do something more interesting.
                  The border effect is drawn in BasicSplitPaneUI, so if you don&apos;t like
                  that border, reset it there.
                  To conditionally drag from certain areas subclass mousePressed and
                  call super when you wish the dragging to begin.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <author>
                    Scott Violet                    
                </author>
            </javadoc>
            <declaration name="ONE_TOUCH_SIZE" type="int" line="29"/>
            <javadoc line="29">
                Width or height of the divider based on orientation
                  BasicSplitPaneUI adds two to this.                
            </javadoc>
            <declaration name="ONE_TOUCH_OFFSET" type="int" line="34"/>
            <declaration name="dragger" type="DragController" line="35"/>
            <javadoc line="35">
                Handles mouse dragging message to do the actual dragging.                
            </javadoc>
            <declaration name="splitPaneUI" type="BasicSplitPaneUI" line="39"/>
            <javadoc line="39">
                UI this instance was created from.                
            </javadoc>
            <declaration name="dividerSize" type="int" line="43"/>
            <javadoc line="43">
                Size of the divider.                
            </javadoc>
            <declaration name="hiddenDivider" type="Component" line="47"/>
            <javadoc line="47">
                Divider that is used for noncontinuous layout mode.                
            </javadoc>
            <declaration name="splitPane" type="JSplitPane" line="51"/>
            <javadoc line="51">
                JSplitPane the receiver is contained in.                
            </javadoc>
            <declaration name="mouseHandler" type="MouseHandler" line="55"/>
            <javadoc line="55">
                Handles mouse events from both this class, and the split pane.
                  Mouse events are handled for the splitpane since you want to be able
                  to drag when clicking on the border of the divider, which is not
                  drawn by the divider.                
            </javadoc>
            <declaration name="orientation" type="int" line="62"/>
            <javadoc line="62">
                Orientation of the JSplitPane.                
            </javadoc>
            <declaration name="leftButton" type="JButton" line="66"/>
            <javadoc line="66">
                Button for quickly toggling the left component.                
            </javadoc>
            <declaration name="rightButton" type="JButton" line="70"/>
            <javadoc line="70">
                Button for quickly toggling the right component.                
            </javadoc>
            <declaration name="border" type="Border" line="74"/>
            <javadoc line="74">
                Border.                
            </javadoc>
            <declaration name="mouseOver" type="boolean" line="78"/>
            <javadoc line="78">
                Is the mouse over the divider?                
            </javadoc>
            <declaration name="oneTouchSize" type="int" line="82"/>
            <declaration name="oneTouchOffset" type="int" line="83"/>
            <declaration name="centerOneTouchButtons" type="boolean" line="84"/>
            <javadoc line="84">
                If true the one touch buttons are centered on the divider.                
            </javadoc>
            <javadoc line="88">
                Creates an instance of BasicSplitPaneDivider. Registers this
                  instance for mouse events and mouse dragged events.                
            </javadoc>
            <method name="BasicSplitPaneDivider" type="constructor" line="92">
                <params>
                    <param name="ui" type="BasicSplitPaneUI"/>
                </params>
            </method>
            <method name="revalidateSplitPane" type="void" line="102">
                <scope line="104"/>
            </method>
            <javadoc line="108">
                Sets the SplitPaneUI that is using the receiver.                
            </javadoc>
            <method name="setBasicSplitPaneUI" type="void" line="111">
                <params>
                    <param name="newUI" type="BasicSplitPaneUI"/>
                </params>
                <scope line="112">
                    <scope line="114"/>
                </scope>
                <scope line="123">
                    <scope line="125">
                        <scope line="132"/>
                    </scope>
                </scope>
                <scope line="137"/>
            </method>
            <javadoc line="141">
                Returns the &lt;code&gt;SplitPaneUI&lt;/code&gt; the receiver is currently
                  in.                
            </javadoc>
            <method name="getBasicSplitPaneUI" type="BasicSplitPaneUI" line="145"/>
            <javadoc line="148">
                Sets the size of the divider to &lt;code&gt;newSize&lt;/code&gt;. That is
                  the width if the splitpane is &lt;code&gt;HORIZONTAL_SPLIT&lt;/code&gt;, or
                  the height of &lt;code&gt;VERTICAL_SPLIT&lt;/code&gt;.                
            </javadoc>
            <method name="setDividerSize" type="void" line="153">
                <params>
                    <param name="newSize" type="int"/>
                </params>
            </method>
            <javadoc line="156">
                Returns the size of the divider, that is the width if the splitpane
                  is HORIZONTAL_SPLIT, or the height of VERTICAL_SPLIT.                
            </javadoc>
            <method name="getDividerSize" type="int" line="160"/>
            <javadoc line="163">
                Sets the border of this component.                
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="setBorder" type="void" line="167">
                <params>
                    <param name="border" type="Border"/>
                </params>
                <declaration name="oldBorder" type="Border" line="168"/>
            </method>
            <javadoc line="171">
                Returns the border of this component or null if no border is
                  currently set.                
                <return>
                    the border object for this component                    
                </return>
                <see>
                    #setBorder                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getBorder" type="Border" line="178"/>
            <javadoc line="181">
                If a border has been set on this component, returns the
                  border&apos;s insets, else calls super.getInsets.                
                <return>
                    the value of the insets property.                    
                </return>
                <see>
                    #setBorder                    
                </see>
            </javadoc>
            <method name="getInsets" type="Insets" line="187">
                <declaration name="border" type="Border" line="188"/>
                <scope line="189"/>
            </method>
            <javadoc line="194">
                Sets whether or not the mouse is currently over the divider.                
                <param>
                    mouseOver whether or not the mouse is currently over the divider                    
                </param>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="setMouseOver" type="void" line="199">
                <params>
                    <param name="mouseOver" type="boolean"/>
                </params>
            </method>
            <javadoc line="202">
                Returns whether or not the mouse is currently over the divider                
                <return>
                    whether or not the mouse is currently over the divider                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="isMouseOver" type="boolean" line="207"/>
            <javadoc line="210">
                Returns dividerSize x dividerSize                
            </javadoc>
            <method name="getPreferredSize" type="Dimension" line="213">
                <scope line="214"/>
            </method>
            <javadoc line="219">
                Returns dividerSize x dividerSize                
            </javadoc>
            <method name="getMinimumSize" type="Dimension" line="222"/>
            <javadoc line="225">
                Property change event, presumably from the JSplitPane, will message
                  updateOrientation if necessary.                
            </javadoc>
            <method name="propertyChange" type="void" line="229">
                <params>
                    <param name="e" type="PropertyChangeEvent"/>
                </params>
                <scope line="230">
                    <scope line="231"/>
                    <scope line="236"/>
                </scope>
            </method>
            <javadoc line="241">
                Paints the divider.                
            </javadoc>
            <method name="paint" type="void" line="244">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
                <declaration name="border" type="Border" line="246"/>
                <scope line="247">
                    <declaration name="size" type="Dimension" line="248"/>
                </scope>
            </method>
            <javadoc line="252">
                Messaged when the oneTouchExpandable value of the JSplitPane the
                  receiver is contained in changes. Will create the
                  &lt;code&gt;leftButton&lt;/code&gt; and &lt;code&gt;rightButton&lt;/code&gt; if they
                  are null. invalidates the receiver as well.                
            </javadoc>
            <method name="oneTouchExpandableChanged" type="void" line="258">
                <scope line="259"/>
                <scope line="262">
                    <scope line="267"/>
                </scope>
            </method>
            <javadoc line="274">
                Creates and return an instance of JButton that can be used to
                  collapse the left component in the split pane.                
            </javadoc>
            <method name="createLeftOneTouchButton" type="JButton" line="278">
                <anonymous_class line="279">
                    <method name="setBorder" type="void" line="280">
                        <params>
                            <param name="b" type="Border"/>
                        </params>
                    </method>
                    <method name="paint" type="void" line="282">
                        <params>
                            <param name="g" type="Graphics"/>
                        </params>
                        <scope line="283">
                            <declaration name="xs" type="int[]" line="284"/>
                            <declaration name="ys" type="int[]" line="285"/>
                            <declaration name="blockSize" type="int" line="286"/>
                            <scope line="290"/>
                            <scope line="299"/>
                        </scope>
                    </method>
                    <method name="isFocusTraversable" type="boolean" line="310"/>
                </anonymous_class>
                <declaration name="b" type="JButton" line="279"/>
            </method>
            <javadoc line="322">
                Creates and return an instance of JButton that can be used to
                  collapse the right component in the split pane.                
            </javadoc>
            <method name="createRightOneTouchButton" type="JButton" line="326">
                <anonymous_class line="327">
                    <method name="setBorder" type="void" line="328">
                        <params>
                            <param name="border" type="Border"/>
                        </params>
                    </method>
                    <method name="paint" type="void" line="330">
                        <params>
                            <param name="g" type="Graphics"/>
                        </params>
                        <scope line="331">
                            <declaration name="xs" type="int[]" line="332"/>
                            <declaration name="ys" type="int[]" line="333"/>
                            <declaration name="blockSize" type="int" line="334"/>
                            <scope line="337"/>
                            <scope line="345"/>
                        </scope>
                    </method>
                    <method name="isFocusTraversable" type="boolean" line="357"/>
                </anonymous_class>
                <declaration name="b" type="JButton" line="327"/>
            </method>
            <javadoc line="369">
                Message to prepare for dragging. This messages the BasicSplitPaneUI
                  with startDragging.                
            </javadoc>
            <method name="prepareForDragging" type="void" line="373"/>
            <javadoc line="376">
                Messages the BasicSplitPaneUI with dragDividerTo that this instance
                  is contained in.                
            </javadoc>
            <method name="dragDividerTo" type="void" line="380">
                <params>
                    <param name="location" type="int"/>
                </params>
            </method>
            <javadoc line="383">
                Messages the BasicSplitPaneUI with finishDraggingTo that this instance
                  is contained in.                
            </javadoc>
            <method name="finishDraggingTo" type="void" line="387">
                <params>
                    <param name="location" type="int"/>
                </params>
            </method>
            <class name="MouseHandler" line="390">
                <extends class="MouseAdapter"/>
                <implements interface="MouseMotionListener"/>
                <javadoc line="390">
                    MouseHandler is responsible for converting mouse events
                      (released, dragged...) into the appropriate DragController
                      methods.
                      &lt;p&gt;                    
                </javadoc>
                <javadoc line="397">
                    Starts the dragging session by creating the appropriate instance
                      of DragController.                    
                </javadoc>
                <method name="mousePressed" type="void" line="401">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                    <scope line="402">
                        <declaration name="newHiddenDivider" type="Component" line="403"/>
                        <scope line="404">
                            <scope line="405"/>
                            <scope line="410"/>
                        </scope>
                        <scope line="415">
                            <scope line="416"/>
                            <scope line="419"/>
                            <scope line="422"/>
                            <scope line="425"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="433">
                    If dragger is not null it is messaged with completeDrag.                    
                </javadoc>
                <method name="mouseReleased" type="void" line="436">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                    <scope line="437">
                        <scope line="438"/>
                        <scope line="441">
                            <declaration name="ourLoc" type="Point" line="442"/>
                        </scope>
                        <scope line="445">
                            <declaration name="hDividerLoc" type="Point" line="446"/>
                            <declaration name="ourX" type="int" line="447"/>
                            <declaration name="ourY" type="int" line="448"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="455">
                    If dragger is not null it is messaged with continueDrag.                    
                </javadoc>
                <method name="mouseDragged" type="void" line="458">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                    <scope line="459">
                        <scope line="460"/>
                        <scope line="463">
                            <declaration name="ourLoc" type="Point" line="464"/>
                        </scope>
                        <scope line="467">
                            <declaration name="hDividerLoc" type="Point" line="468"/>
                            <declaration name="ourX" type="int" line="469"/>
                            <declaration name="ourY" type="int" line="470"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="476">
                    Resets the cursor based on the orientation.                    
                </javadoc>
                <method name="mouseMoved" type="void" line="479">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
                <javadoc line="481">
                    Invoked when the mouse enters a component.                    
                    <param>
                        e MouseEvent describing the details of the enter event.                        
                    </param>
                    <since>
                        1.5                        
                    </since>
                </javadoc>
                <method name="mouseEntered" type="void" line="486">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                    <scope line="487"/>
                </method>
                <javadoc line="491">
                    Invoked when the mouse exits a component.                    
                    <param>
                        e MouseEvent describing the details of the exit event.                        
                    </param>
                    <since>
                        1.5                        
                    </since>
                </javadoc>
                <method name="mouseExited" type="void" line="496">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                    <scope line="497"/>
                </method>
            </class>
            <class name="DragController" line="502">
                <javadoc line="502">
                    Handles the events during a dragging session for a
                      HORIZONTAL_SPLIT oriented split pane. This continually
                      messages &lt;code&gt;dragDividerTo&lt;/code&gt; and then when done messages
                      &lt;code&gt;finishDraggingTo&lt;/code&gt;. When an instance is created it should be
                      messaged with &lt;code&gt;isValid&lt;/code&gt; to insure that dragging can happen
                      (dragging won&apos;t be allowed if the two views can not be resized).
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      Serialized objects of this class will not be compatible with
                      future Swing releases. The current serialization support is
                      appropriate for short term storage or RMI between applications running
                      the same version of Swing.  As of 1.4, support for long term storage
                      of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                      has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                      Please see {@link java.beans.XMLEncoder}.                    
                </javadoc>
                <declaration name="initialX" type="int" line="520"/>
                <javadoc line="520">
                    Initial location of the divider.                    
                </javadoc>
                <declaration name="maxX" type="int" line="524"/>
                <javadoc line="524">
                    Maximum and minimum positions to drag to.                    
                </javadoc>
                <declaration name="offset" type="int" line="528"/>
                <javadoc line="528">
                    Initial location the mouse down happened at.                    
                </javadoc>
                <method name="DragController" type="constructor" line="532">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                    <declaration name="splitPane" type="JSplitPane" line="533"/>
                    <declaration name="leftC" type="Component" line="534"/>
                    <declaration name="rightC" type="Component" line="535"/>
                    <scope line="537"/>
                    <scope line="540"/>
                    <scope line="543"/>
                    <scope line="546">
                        <declaration name="insets" type="Insets" line="547"/>
                        <scope line="548">
                            <scope line="550"/>
                        </scope>
                        <scope line="554"/>
                        <scope line="557">
                            <declaration name="right" type="int" line="558"/>
                        </scope>
                        <scope line="561">
                            <declaration name="right" type="int" line="562"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="568">
                    Returns true if the dragging session is valid.                    
                </javadoc>
                <method name="isValid" type="boolean" line="571"/>
                <javadoc line="574">
                    Returns the new position to put the divider at based on
                      the passed in MouseEvent.                    
                </javadoc>
                <method name="positionForMouseEvent" type="int" line="578">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                    <declaration name="newX" type="int" line="579"/>
                </method>
                <javadoc line="583">
                    Returns the x argument, since this is used for horizontal
                      splits.                    
                </javadoc>
                <method name="getNeededLocation" type="int" line="587">
                    <params>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                    </params>
                    <declaration name="newX" type="int" line="588"/>
                </method>
                <method name="continueDrag" type="void" line="592">
                    <params>
                        <param name="newX" type="int"/>
                        <param name="newY" type="int"/>
                    </params>
                </method>
                <javadoc line="595">
                    Messages dragDividerTo with the new location for the mouse
                      event.                    
                </javadoc>
                <method name="continueDrag" type="void" line="599">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
                <method name="completeDrag" type="void" line="602">
                    <params>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                    </params>
                </method>
                <javadoc line="605">
                    Messages finishDraggingTo with the new location for the mouse
                      event.                    
                </javadoc>
                <method name="completeDrag" type="void" line="609">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
            </class>
            <class name="VerticalDragController" line="613">
                <extends class="DragController"/>
                <javadoc line="613">
                    Handles the events during a dragging session for a
                      VERTICAL_SPLIT oriented split pane. This continually
                      messages &lt;code&gt;dragDividerTo&lt;/code&gt; and then when done messages
                      &lt;code&gt;finishDraggingTo&lt;/code&gt;. When an instance is created it should be
                      messaged with &lt;code&gt;isValid&lt;/code&gt; to insure that dragging can happen
                      (dragging won&apos;t be allowed if the two views can not be resized).                    
                </javadoc>
                <method name="VerticalDragController" type="constructor" line="622">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                    <declaration name="splitPane" type="JSplitPane" line="624"/>
                    <declaration name="leftC" type="Component" line="625"/>
                    <declaration name="rightC" type="Component" line="626"/>
                    <scope line="628"/>
                    <scope line="631"/>
                    <scope line="634"/>
                    <scope line="637">
                        <declaration name="insets" type="Insets" line="638"/>
                        <scope line="639">
                            <scope line="641"/>
                        </scope>
                        <scope line="645"/>
                        <scope line="648">
                            <declaration name="bottom" type="int" line="649"/>
                        </scope>
                        <scope line="652">
                            <declaration name="bottom" type="int" line="653"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="659">
                    Returns the y argument, since this is used for vertical
                      splits.                    
                </javadoc>
                <method name="getNeededLocation" type="int" line="663">
                    <params>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                    </params>
                    <declaration name="newY" type="int" line="664"/>
                </method>
                <javadoc line="668">
                    Returns the new position to put the divider at based on
                      the passed in MouseEvent.                    
                </javadoc>
                <method name="positionForMouseEvent" type="int" line="672">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                    <declaration name="newY" type="int" line="673"/>
                </method>
            </class>
            <class name="DividerLayout" line="678">
                <implements interface="LayoutManager"/>
                <javadoc line="678">
                    Used to layout a &lt;code&gt;BasicSplitPaneDivider&lt;/code&gt;.
                      Layout for the divider
                      involves appropriately moving the left/right buttons around.
                      &lt;p&gt;                    
                </javadoc>
                <method name="layoutContainer" type="void" line="685">
                    <params>
                        <param name="c" type="Container"/>
                    </params>
                    <scope line="686">
                        <scope line="687">
                            <declaration name="insets" type="Insets" line="688"/>
                            <scope line="689">
                                <declaration name="extraX" type="int" line="690"/>
                                <declaration name="blockSize" type="int" line="691"/>
                                <scope line="692"/>
                                <declaration name="y" type="int" line="697"/>
                                <scope line="698"/>
                            </scope>
                            <scope line="705">
                                <declaration name="extraY" type="int" line="706"/>
                                <declaration name="blockSize" type="int" line="707"/>
                                <scope line="708"/>
                                <declaration name="x" type="int" line="713"/>
                                <scope line="714"/>
                            </scope>
                        </scope>
                        <scope line="722"/>
                    </scope>
                </method>
                <method name="minimumLayoutSize" type="Dimension" line="728">
                    <params>
                        <param name="c" type="Container"/>
                    </params>
                    <scope line="729"/>
                    <declaration name="buttonMinSize" type="Dimension" line="732"/>
                    <scope line="733"/>
                    <declaration name="insets" type="Insets" line="736"/>
                    <declaration name="width" type="int" line="737"/>
                    <declaration name="height" type="int" line="738"/>
                    <scope line="739">
                        <scope line="740">
                            <declaration name="size" type="int" line="741"/>
                            <scope line="742"/>
                        </scope>
                    </scope>
                    <scope line="749">
                        <scope line="750">
                            <declaration name="size" type="int" line="751"/>
                            <scope line="752"/>
                        </scope>
                    </scope>
                </method>
                <method name="preferredLayoutSize" type="Dimension" line="761">
                    <params>
                        <param name="c" type="Container"/>
                    </params>
                </method>
                <method name="removeLayoutComponent" type="void" line="764">
                    <params>
                        <param name="c" type="Component"/>
                    </params>
                </method>
                <method name="addLayoutComponent" type="void" line="766">
                    <params>
                        <param name="string" type="String"/>
                        <param name="c" type="Component"/>
                    </params>
                </method>
            </class>
            <class name="OneTouchActionHandler" line="769">
                <implements interface="ActionListener"/>
                <javadoc line="769">
                    Listeners installed on the one touch expandable buttons.                    
                </javadoc>
                <declaration name="toMinimum" type="boolean" line="773"/>
                <javadoc line="773">
                    True indicates the resize should go the minimum (top or left)
                      vs false which indicates the resize should go to the maximum.                    
                </javadoc>
                <method name="OneTouchActionHandler" type="constructor" line="778">
                    <params>
                        <param name="toMinimum" type="boolean"/>
                    </params>
                </method>
                <method name="actionPerformed" type="void" line="781">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                    <declaration name="insets" type="Insets" line="782"/>
                    <declaration name="lastLoc" type="int" line="783"/>
                    <declaration name="currentLoc" type="int" line="784"/>
                    <declaration name="newLoc" type="int" line="785"/>
                    <scope line="786">
                        <scope line="787">
                            <scope line="788">
                                <declaration name="maxLoc" type="int" line="789"/>
                            </scope>
                            <scope line="793"/>
                        </scope>
                        <scope line="798">
                            <scope line="799">
                                <declaration name="maxLoc" type="int" line="800"/>
                            </scope>
                            <scope line="804"/>
                        </scope>
                    </scope>
                    <scope line="810">
                        <scope line="811">
                            <scope line="812">
                                <declaration name="maxLoc" type="int" line="813"/>
                            </scope>
                            <scope line="817"/>
                        </scope>
                        <scope line="822">
                            <scope line="823">
                                <declaration name="maxLoc" type="int" line="824"/>
                            </scope>
                            <scope line="828"/>
                        </scope>
                    </scope>
                    <scope line="834"/>
                </method>
            </class>
        </class>
    </source>