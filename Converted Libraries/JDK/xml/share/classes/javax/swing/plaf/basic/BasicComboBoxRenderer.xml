<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.plaf.basic">
        <import package="javax.swing"/>
        <import package="javax.swing.event"/>
        <import package="javax.swing.border"/>
        <import package="java.awt"/>
        <import package="java.io.Serializable"/>
        <class name="BasicComboBoxRenderer" line="36">
            <extends class="JLabel"/>
            <implements interface="ListCellRenderer"/>
            <implements interface="Serializable"/>
            <javadoc line="36">
                ComboBox renderer
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <author>
                    Arnaud Weber                    
                </author>
            </javadoc>
            <declaration name="noFocusBorder" type="Border" line="53"/>
            <javadoc line="53">
                An empty &lt;code&gt;Border&lt;/code&gt;. This field might not be used. To change the
                  &lt;code&gt;Border&lt;/code&gt; used by this renderer directly set it using
                  the &lt;code&gt;setBorder&lt;/code&gt; method.                
            </javadoc>
            <declaration name="SAFE_NO_FOCUS_BORDER" type="Border" line="59"/>
            <method name="BasicComboBoxRenderer" type="constructor" line="61"/>
            <method name="getNoFocusBorder" type="Border" line="67">
                <scope line="68"/>
                <scope line="70"/>
            </method>
            <method name="getPreferredSize" type="Dimension" line="75">
                <declaration name="size" type="Dimension" line="76"/>
                <scope line="78"/>
                <scope line="83"/>
            </method>
            <method name="getListCellRendererComponent" type="Component" line="96">
                <params>
                    <param name="list" type="JList"/>
                    <param name="value" type="Object"/>
                    <param name="index" type="int"/>
                    <param name="isSelected" type="boolean"/>
                    <param name="cellHasFocus" type="boolean"/>
                </params>
                <comment line="99">
                    if (isSelected) {
                    setBackground(UIManager.getColor(&quot;ComboBox.selectionBackground&quot;));
                    setForeground(UIManager.getColor(&quot;ComboBox.selectionForeground&quot;));
                    } else {
                    setBackground(UIManager.getColor(&quot;ComboBox.background&quot;));
                    setForeground(UIManager.getColor(&quot;ComboBox.foreground&quot;));                    
                </comment>
                <scope line="106"/>
                <scope line="110"/>
                <scope line="117"/>
                <scope line="120"/>
            </method>
            <class name="UIResource" line="127">
                <extends class="BasicComboBoxRenderer"/>
                <implements interface="javax.swing.plaf.UIResource"/>
                <javadoc line="127">
                    A subclass of BasicComboBoxRenderer that implements UIResource.
                      BasicComboBoxRenderer doesn&apos;t implement UIResource
                      directly so that applications can safely override the
                      cellRenderer property with BasicListCellRenderer subclasses.
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      Serialized objects of this class will not be compatible with
                      future Swing releases. The current serialization support is
                      appropriate for short term storage or RMI between applications running
                      the same version of Swing.  As of 1.4, support for long term storage
                      of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                      has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                      Please see {@link java.beans.XMLEncoder}.                    
                </javadoc>
            </class>
        </class>
    </source>