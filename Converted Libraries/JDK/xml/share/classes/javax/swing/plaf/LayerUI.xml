<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.plaf">
        <import package="javax.swing"/>
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="java.beans.PropertyChangeEvent"/>
        <import package="java.beans.PropertyChangeSupport"/>
        <import package="java.beans.PropertyChangeListener"/>
        <import package="java.io.Serializable"/>
        <class name="LayerUI" line="9">
            <type_params>
                <type_param name="V"/>
            </type_params>
            <extends class="ComponentUI"/>
            <implements interface="Serializable"/>
            <javadoc line="9">
                The base class for all {@link javax.swing.JLayer}&apos;s UI delegates.
                  &lt;p/&gt;{@link #paint(java.awt.Graphics,javax.swing.JComponent)} method performs the
                  painting of the {@code JLayer}and {@link #eventDispatched(AWTEvent,JLayer)} method is notified
                  about any {@code AWTEvent}s which have been generated by a {@code JLayer}or any of its subcomponents.
                  &lt;p/&gt;
                  The {@code LayerUI} differs from the UI delegates of the other components,
                  because it is LookAndFeel independent and is not updated by default when
                  the system LookAndFeel is changed.
                  &lt;p/&gt;
                  The subclasses of {@code LayerUI} can either be stateless and shareable
                  by multiple {@code JLayer}s or not shareable.                
                <param>
                    &lt;V&gt;
                      one of the super types of {@code JLayer}&apos;s view component                    
                </param>
                <see>
                    JLayer#setUI(LayerUI)                    
                </see>
                <see>
                    JLayer#setView(Component)                    
                </see>
                <see>
                    JLayer#getView()                    
                </see>
                <since>
                    1.7                    
                </since>
                <author>
                    Alexander Potochkin                    
                </author>
            </javadoc>
            <declaration name="propertyChangeSupport" type="PropertyChangeSupport" line="30"/>
            <javadoc line="31">
                Paints the specified component.
                  Subclasses should override this method and use
                  the specified {@code Graphics} object to
                  render the content of the component.
                  &lt;p/&gt;
                  The default implementation paints the passed component as is.                
                <param>
                    g the {@code Graphics} context in which to paint                    
                </param>
                <param>
                    c the component being painted                    
                </param>
            </javadoc>
            <method name="paint" type="void" line="41">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <javadoc line="44">
                Processes {@code AWTEvent}s for {@code JLayer}and &lt;b&gt;all its descendants&lt;/b&gt; to this {@code LayerUI} instance.
                  &lt;p/&gt;
                  To enable the {@code AWTEvent}s of a particular type,
                  you call {@link JLayer#setLayerEventMask}in {@link #installUI(javax.swing.JComponent)}and set the layer event mask to {@code 0}in {@link #uninstallUI(javax.swing.JComponent)} after that.
                  By default this  method calls the appropriate{@code process&amp;lt;event&amp;nbsp;type&amp;gt;Event}method for the given class of event.
                  &lt;p/&gt;
                  &lt;b&gt;Note:&lt;/b&gt; Events are processed only for displayable {@code JLayer}s.                
                <param>
                    e the event to be dispatched                    
                </param>
                <param>
                    l the layer this LayerUI is set to                    
                </param>
                <see>
                    JLayer#setLayerEventMask(long)                    
                </see>
                <see>
                    Component#isDisplayable()                    
                </see>
                <see>
                    #processComponentEvent                    
                </see>
                <see>
                    #processFocusEvent                    
                </see>
                <see>
                    #processKeyEvent                    
                </see>
                <see>
                    #processMouseEvent                    
                </see>
                <see>
                    #processMouseMotionEvent                    
                </see>
                <see>
                    #processInputMethodEvent                    
                </see>
                <see>
                    #processHierarchyEvent                    
                </see>
                <see>
                    #processMouseWheelEvent                    
                </see>
            </javadoc>
            <method name="eventDispatched" type="void" line="65">
                <params>
                    <param name="e" type="AWTEvent"/>
                    <param name="l" type="JLayer&lt;? extends V&gt;"/>
                </params>
                <scope line="66"/>
                <scope line="69"/>
                <scope line="87"/>
                <scope line="90"/>
                <scope line="93"/>
                <scope line="96"/>
            </method>
            <javadoc line="108">
                Processes component events occurring on the {@link JLayer}or any of its subcomponents.
                  &lt;p/&gt;
                  This method is not called unless component events are
                  enabled for the {@code JLayer} objects, this {@code LayerUI} is set to.
                  Component events are enabled in the overridden {@link #installUI} method
                  and should be disabled in the {@link #uninstallUI} method after that.
                  &lt;pre&gt;
                  public void installUI(JComponent c) {
                  super.installUI(c);
                  JLayer l = (JLayer) c;
                  l.setLayerEventMask(AWTEvent.COMPONENT_EVENT_MASK);
                  }
                  public void uninstallUI(JComponent c) {
                  super.uninstallUI(c);
                  JLayer l = (JLayer) c;
                  l.setLayerEventMask(0);
                  }
                  &lt;/pre&gt;                
                <param>
                    e the {@code ComponentEvent} to be processed                    
                </param>
                <param>
                    l the layer this {@code LayerUI} instance is set to                    
                </param>
                <see>
                    JLayer#setLayerEventMask(long)                    
                </see>
                <see>
                    #installUI(javax.swing.JComponent)                    
                </see>
                <see>
                    #uninstallUI(javax.swing.JComponent)                    
                </see>
            </javadoc>
            <method name="processComponentEvent" type="void" line="133">
                <params>
                    <param name="e" type="ComponentEvent"/>
                    <param name="l" type="JLayer&lt;? extends V&gt;"/>
                </params>
            </method>
            <javadoc line="135">
                Processes focus events occurring on the {@link JLayer}or any of its subcomponents.
                  &lt;p/&gt;
                  This method is not called unless focus events are
                  enabled for the {@code JLayer} objects, this {@code LayerUI} is set to.
                  Focus events are enabled in the overridden {@link #installUI} method
                  and should be disabled in the {@link #uninstallUI} method after that.
                  &lt;pre&gt;
                  public void installUI(JComponent c) {
                  super.installUI(c);
                  JLayer l = (JLayer) c;
                  l.setLayerEventMask(AWTEvent.FOCUS_EVENT_MASK);
                  }
                  public void uninstallUI(JComponent c) {
                  super.uninstallUI(c);
                  JLayer l = (JLayer) c;
                  l.setLayerEventMask(0);
                  }
                  &lt;/pre&gt;                
                <param>
                    e the {@code FocusEvent} to be processed                    
                </param>
                <param>
                    l the layer this {@code LayerUI} instance is set to                    
                </param>
                <see>
                    JLayer#setLayerEventMask(long)                    
                </see>
                <see>
                    #installUI(javax.swing.JComponent)                    
                </see>
                <see>
                    #uninstallUI(javax.swing.JComponent)                    
                </see>
            </javadoc>
            <method name="processFocusEvent" type="void" line="160">
                <params>
                    <param name="e" type="FocusEvent"/>
                    <param name="l" type="JLayer&lt;? extends V&gt;"/>
                </params>
            </method>
            <javadoc line="162">
                Processes key events occurring on the {@link JLayer}or any of its subcomponents.
                  &lt;p/&gt;
                  This method is not called unless key events are
                  enabled for the {@code JLayer} objects, this {@code LayerUI} is set to.
                  Key events are enabled in the overridden {@link #installUI} method
                  and should be disabled in the {@link #uninstallUI} method after that.
                  &lt;pre&gt;
                  public void installUI(JComponent c) {
                  super.installUI(c);
                  JLayer l = (JLayer) c;
                  l.setLayerEventMask(AWTEvent.KEY_EVENT_MASK);
                  }
                  public void uninstallUI(JComponent c) {
                  super.uninstallUI(c);
                  JLayer l = (JLayer) c;
                  l.setLayerEventMask(0);
                  }
                  &lt;/pre&gt;                
                <param>
                    e the {@code KeyEvent} to be processed                    
                </param>
                <param>
                    l the layer this {@code LayerUI} instance is set to                    
                </param>
                <see>
                    JLayer#setLayerEventMask(long)                    
                </see>
                <see>
                    #installUI(javax.swing.JComponent)                    
                </see>
                <see>
                    #uninstallUI(javax.swing.JComponent)                    
                </see>
            </javadoc>
            <method name="processKeyEvent" type="void" line="187">
                <params>
                    <param name="e" type="KeyEvent"/>
                    <param name="l" type="JLayer&lt;? extends V&gt;"/>
                </params>
            </method>
            <javadoc line="189">
                Processes mouse events occurring on the {@link JLayer}or any of its subcomponents.
                  &lt;p/&gt;
                  This method is not called unless mouse events are
                  enabled for the {@code JLayer} objects, this {@code LayerUI} is set to.
                  Mouse events are enabled in the overridden {@link #installUI} method
                  and should be disabled in the {@link #uninstallUI} method after that.
                  &lt;pre&gt;
                  public void installUI(JComponent c) {
                  super.installUI(c);
                  JLayer l = (JLayer) c;
                  l.setLayerEventMask(AWTEvent.MOUSE_EVENT_MASK);
                  }
                  public void uninstallUI(JComponent c) {
                  super.uninstallUI(c);
                  JLayer l = (JLayer) c;
                  l.setLayerEventMask(0);
                  }
                  &lt;/pre&gt;                
                <param>
                    e the {@code MouseEvent} to be processed                    
                </param>
                <param>
                    l the layer this {@code LayerUI} instance is set to                    
                </param>
                <see>
                    JLayer#setLayerEventMask(long)                    
                </see>
                <see>
                    #installUI(javax.swing.JComponent)                    
                </see>
                <see>
                    #uninstallUI(javax.swing.JComponent)                    
                </see>
            </javadoc>
            <method name="processMouseEvent" type="void" line="214">
                <params>
                    <param name="e" type="MouseEvent"/>
                    <param name="l" type="JLayer&lt;? extends V&gt;"/>
                </params>
            </method>
            <javadoc line="216">
                Processes mouse motion event occurring on the {@link JLayer}or any of its subcomponents.
                  &lt;p/&gt;
                  This method is not called unless mouse motion events are
                  enabled for the {@code JLayer} objects, this {@code LayerUI} is set to.
                  Mouse motion events are enabled in the overridden {@link #installUI} method
                  and should be disabled in the {@link #uninstallUI} method after that.
                  &lt;pre&gt;
                  public void installUI(JComponent c) {
                  super.installUI(c);
                  JLayer l = (JLayer) c;
                  l.setLayerEventMask(AWTEvent.MOUSE_MOTION_EVENT_MASK);
                  }
                  public void uninstallUI(JComponent c) {
                  super.uninstallUI(c);
                  JLayer l = (JLayer) c;
                  l.setLayerEventMask(0);
                  }
                  &lt;/pre&gt;                
                <param>
                    e the {@code MouseEvent} to be processed                    
                </param>
                <param>
                    l the layer this {@code LayerUI} instance is set to                    
                </param>
                <see>
                    JLayer#setLayerEventMask(long)                    
                </see>
                <see>
                    #installUI(javax.swing.JComponent)                    
                </see>
                <see>
                    #uninstallUI(javax.swing.JComponent)                    
                </see>
            </javadoc>
            <method name="processMouseMotionEvent" type="void" line="241">
                <params>
                    <param name="e" type="MouseEvent"/>
                    <param name="l" type="JLayer&lt;? extends V&gt;"/>
                </params>
            </method>
            <javadoc line="243">
                Processes mouse wheel event occurring on the {@link JLayer}or any of its subcomponents.
                  &lt;p/&gt;
                  This method is not called unless mouse wheel events are
                  enabled for the {@code JLayer} objects, this {@code LayerUI} is set to.
                  Mouse wheel events are enabled in the overridden {@link #installUI} method
                  and should be disabled in the {@link #uninstallUI} method after that.
                  &lt;pre&gt;
                  public void installUI(JComponent c) {
                  super.installUI(c);
                  JLayer l = (JLayer) c;
                  l.setLayerEventMask(AWTEvent.MOUSE_WHEEL_EVENT_MASK);
                  }
                  public void uninstallUI(JComponent c) {
                  super.uninstallUI(c);
                  JLayer l = (JLayer) c;
                  l.setLayerEventMask(0);
                  }
                  &lt;/pre&gt;                
                <param>
                    e the {@code MouseEvent} to be processed                    
                </param>
                <param>
                    l the layer this {@code LayerUI} instance is set to                    
                </param>
                <see>
                    JLayer#setLayerEventMask(long)                    
                </see>
                <see>
                    #installUI(javax.swing.JComponent)                    
                </see>
                <see>
                    #uninstallUI(javax.swing.JComponent)                    
                </see>
            </javadoc>
            <method name="processMouseWheelEvent" type="void" line="268">
                <params>
                    <param name="e" type="MouseWheelEvent"/>
                    <param name="l" type="JLayer&lt;? extends V&gt;"/>
                </params>
            </method>
            <javadoc line="270">
                Processes input event occurring on the {@link JLayer}or any of its subcomponents.
                  &lt;p/&gt;
                  This method is not called unless input events are
                  enabled for the {@code JLayer} objects, this {@code LayerUI} is set to.
                  Input events are enabled in the overridden {@link #installUI} method
                  and should be disabled in the {@link #uninstallUI} method after that.
                  &lt;pre&gt;
                  public void installUI(JComponent c) {
                  super.installUI(c);
                  JLayer l = (JLayer) c;
                  l.setLayerEventMask(AWTEvent.INPUT_METHOD_EVENT_MASK);
                  }
                  public void uninstallUI(JComponent c) {
                  super.uninstallUI(c);
                  JLayer l = (JLayer) c;
                  l.setLayerEventMask(0);
                  }
                  &lt;/pre&gt;                
                <param>
                    e the {@code InputMethodEvent} to be processed                    
                </param>
                <param>
                    l the layer this {@code LayerUI} instance is set to                    
                </param>
                <see>
                    JLayer#setLayerEventMask(long)                    
                </see>
                <see>
                    #installUI(javax.swing.JComponent)                    
                </see>
                <see>
                    #uninstallUI(javax.swing.JComponent)                    
                </see>
            </javadoc>
            <method name="processInputMethodEvent" type="void" line="295">
                <params>
                    <param name="e" type="InputMethodEvent"/>
                    <param name="l" type="JLayer&lt;? extends V&gt;"/>
                </params>
            </method>
            <javadoc line="297">
                Processes hierarchy event occurring on the {@link JLayer}or any of its subcomponents.
                  &lt;p/&gt;
                  This method is not called unless hierarchy events are
                  enabled for the {@code JLayer} objects, this {@code LayerUI} is set to.
                  Hierarchy events are enabled in the overridden {@link #installUI} method
                  and should be disabled in the {@link #uninstallUI} method after that.
                  &lt;pre&gt;
                  public void installUI(JComponent c) {
                  super.installUI(c);
                  JLayer l = (JLayer) c;
                  l.setLayerEventMask(AWTEvent.HIERARCHY_EVENT_MASK);
                  }
                  public void uninstallUI(JComponent c) {
                  super.uninstallUI(c);
                  JLayer l = (JLayer) c;
                  l.setLayerEventMask(0);
                  }
                  &lt;/pre&gt;                
                <param>
                    e the {@code HierarchyEvent} to be processed                    
                </param>
                <param>
                    l the layer this {@code LayerUI} instance is set to                    
                </param>
                <see>
                    JLayer#setLayerEventMask(long)                    
                </see>
                <see>
                    #installUI(javax.swing.JComponent)                    
                </see>
                <see>
                    #uninstallUI(javax.swing.JComponent)                    
                </see>
            </javadoc>
            <method name="processHierarchyEvent" type="void" line="322">
                <params>
                    <param name="e" type="HierarchyEvent"/>
                    <param name="l" type="JLayer&lt;? extends V&gt;"/>
                </params>
            </method>
            <javadoc line="324">
                Processes hierarchy bounds event occurring on the {@link JLayer}or any of its subcomponents.
                  &lt;p/&gt;
                  This method is not called unless hierarchy bounds events are
                  enabled for the {@code JLayer} objects, this {@code LayerUI} is set to.
                  Hierarchy bounds events are enabled in the overridden {@link #installUI}method and should be disabled in the {@link #uninstallUI} method after that.
                  &lt;pre&gt;
                  public void installUI(JComponent c) {
                  super.installUI(c);
                  JLayer l = (JLayer) c;
                  l.setLayerEventMask(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK);
                  }
                  public void uninstallUI(JComponent c) {
                  super.uninstallUI(c);
                  JLayer l = (JLayer) c;
                  l.setLayerEventMask(0);
                  }
                  &lt;/pre&gt;                
                <param>
                    e the {@code HierarchyEvent} to be processed                    
                </param>
                <param>
                    l the layer this {@code LayerUI} instance is set to                    
                </param>
                <see>
                    JLayer#setLayerEventMask(long)                    
                </see>
                <see>
                    #installUI(javax.swing.JComponent)                    
                </see>
                <see>
                    #uninstallUI(javax.swing.JComponent)                    
                </see>
            </javadoc>
            <method name="processHierarchyBoundsEvent" type="void" line="348">
                <params>
                    <param name="e" type="HierarchyEvent"/>
                    <param name="l" type="JLayer&lt;? extends V&gt;"/>
                </params>
            </method>
            <javadoc line="350">
                Invoked when {@link javax.swing.JLayer#updateUI()} is called
                  by the {@code JLayer} this {@code LayerUI} is set to.                
                <param>
                    l the {@code JLayer} which UI is updated                    
                </param>
            </javadoc>
            <method name="updateUI" type="void" line="355">
                <params>
                    <param name="l" type="JLayer&lt;? extends V&gt;"/>
                </params>
            </method>
            <javadoc line="357">
                Configures the {@code JLayer} this {@code LayerUI} is set to.
                  The default implementation registers the passed {@code JLayer} component
                  as a {@code PropertyChangeListener} for the property changes of this {@code LayerUI}.                
                <param>
                    c the {@code JLayer} component where this UI delegate is being installed                    
                </param>
            </javadoc>
            <method name="installUI" type="void" line="363">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <javadoc line="366">
                Reverses the configuration which was previously set
                  in the {@link #installUI(JComponent)} method.
                  The default implementation unregisters the passed {@code JLayer} component
                  as a {@code PropertyChangeListener} for the property changes of this {@code LayerUI}.                
                <param>
                    c the component from which this UI delegate is being removed.                    
                </param>
            </javadoc>
            <method name="uninstallUI" type="void" line="373">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <javadoc line="376">
                Adds a PropertyChangeListener to the listener list. The listener is
                  registered for all bound properties of this class.
                  &lt;p/&gt;
                  If {@code listener} is {@code null},
                  no exception is thrown and no action is performed.                
                <param>
                    listener the property change listener to be added                    
                </param>
                <see>
                    #removePropertyChangeListener                    
                </see>
                <see>
                    #getPropertyChangeListeners                    
                </see>
                <see>
                    #addPropertyChangeListener(String,java.beans.PropertyChangeListener)                    
                </see>
            </javadoc>
            <method name="addPropertyChangeListener" type="void" line="387">
                <params>
                    <param name="listener" type="PropertyChangeListener"/>
                </params>
            </method>
            <javadoc line="390">
                Removes a PropertyChangeListener from the listener list. This method
                  should be used to remove PropertyChangeListeners that were registered
                  for all bound properties of this class.
                  &lt;p/&gt;
                  If {@code listener} is {@code null},
                  no exception is thrown and no action is performed.                
                <param>
                    listener the PropertyChangeListener to be removed                    
                </param>
                <see>
                    #addPropertyChangeListener                    
                </see>
                <see>
                    #getPropertyChangeListeners                    
                </see>
                <see>
                    #removePropertyChangeListener(String,PropertyChangeListener)                    
                </see>
            </javadoc>
            <method name="removePropertyChangeListener" type="void" line="402">
                <params>
                    <param name="listener" type="PropertyChangeListener"/>
                </params>
            </method>
            <javadoc line="405">
                Returns an array of all the property change listeners
                  registered on this component.                
                <return>
                    all of this ui&apos;s {@code PropertyChangeListener}s
                      or an empty array if no property change
                      listeners are currently registered                    
                </return>
                <see>
                    #addPropertyChangeListener                    
                </see>
                <see>
                    #removePropertyChangeListener                    
                </see>
                <see>
                    #getPropertyChangeListeners(String)                    
                </see>
            </javadoc>
            <method name="getPropertyChangeListeners" type="PropertyChangeListener[]" line="415"/>
            <javadoc line="418">
                Adds a PropertyChangeListener to the listener list for a specific
                  property.
                  &lt;p/&gt;
                  If {@code propertyName} or {@code listener} is {@code null},
                  no exception is thrown and no action is taken.                
                <param>
                    propertyName one of the property names listed above                    
                </param>
                <param>
                    listener     the property change listener to be added                    
                </param>
                <see>
                    #removePropertyChangeListener(String,PropertyChangeListener)                    
                </see>
                <see>
                    #getPropertyChangeListeners(String)                    
                </see>
                <see>
                    #addPropertyChangeListener(String,PropertyChangeListener)                    
                </see>
            </javadoc>
            <method name="addPropertyChangeListener" type="void" line="430">
                <params>
                    <param name="propertyName" type="String"/>
                    <param name="listener" type="PropertyChangeListener"/>
                </params>
            </method>
            <javadoc line="433">
                Removes a {@code PropertyChangeListener} from the listener
                  list for a specific property. This method should be used to remove{@code PropertyChangeListener}s
                  that were registered for a specific bound property.
                  &lt;p/&gt;
                  If {@code propertyName} or {@code listener} is {@code null},
                  no exception is thrown and no action is taken.                
                <param>
                    propertyName a valid property name                    
                </param>
                <param>
                    listener     the PropertyChangeListener to be removed                    
                </param>
                <see>
                    #addPropertyChangeListener(String,PropertyChangeListener)                    
                </see>
                <see>
                    #getPropertyChangeListeners(String)                    
                </see>
                <see>
                    #removePropertyChangeListener(PropertyChangeListener)                    
                </see>
            </javadoc>
            <method name="removePropertyChangeListener" type="void" line="446">
                <params>
                    <param name="propertyName" type="String"/>
                    <param name="listener" type="PropertyChangeListener"/>
                </params>
            </method>
            <javadoc line="449">
                Returns an array of all the listeners which have been associated
                  with the named property.                
                <param>
                    propertyName  The name of the property being listened to                    
                </param>
                <return>
                    all of the {@code PropertyChangeListener}s associated with
                      the named property; if no such listeners have been added or
                      if {@code propertyName} is {@code null}, an empty
                      array is returned                    
                </return>
                <see>
                    #addPropertyChangeListener(String,PropertyChangeListener)                    
                </see>
                <see>
                    #removePropertyChangeListener(String,PropertyChangeListener)                    
                </see>
                <see>
                    #getPropertyChangeListeners                    
                </see>
            </javadoc>
            <method name="getPropertyChangeListeners" type="PropertyChangeListener[]" line="461">
                <params>
                    <param name="propertyName" type="String"/>
                </params>
            </method>
            <javadoc line="464">
                Support for reporting bound property changes for Object properties.
                  This method can be called when a bound property has changed and it will
                  send the appropriate PropertyChangeEvent to any registered
                  PropertyChangeListeners.                
                <param>
                    propertyName the property whose value has changed                    
                </param>
                <param>
                    oldValue     the property&apos;s previous value                    
                </param>
                <param>
                    newValue     the property&apos;s new value                    
                </param>
            </javadoc>
            <method name="firePropertyChange" type="void" line="473">
                <params>
                    <param name="propertyName" type="String"/>
                    <param name="oldValue" type="Object"/>
                    <param name="newValue" type="Object"/>
                </params>
            </method>
            <javadoc line="476">
                Notifies the {@code LayerUI} when any of its property are changed
                  and enables updating every {@code JLayer}this {@code LayerUI} instance is set to.                
                <param>
                    evt the PropertyChangeEvent generated by this {@code LayerUI}                    
                </param>
                <param>
                    l the {@code JLayer} this LayerUI is set to                    
                </param>
            </javadoc>
            <method name="applyPropertyChange" type="void" line="482">
                <params>
                    <param name="evt" type="PropertyChangeEvent"/>
                    <param name="l" type="JLayer&lt;? extends V&gt;"/>
                </params>
            </method>
            <javadoc line="484">
                If the {@code JLayer}&apos;s view component is not {@code null},
                  this calls the view&apos;s {@code getBaseline()} method.
                  Otherwise, the default implementation is called.                
                <param>
                    c {@code JLayer} to return baseline resize behavior for                    
                </param>
                <param>
                    width the width to get the baseline for                    
                </param>
                <param>
                    height the height to get the baseline for                    
                </param>
                <return>
                    baseline or a value &amp;lt; 0 indicating there is no reasonable
                      baseline                    
                </return>
            </javadoc>
            <method name="getBaseline" type="int" line="494">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <declaration name="l" type="JLayer" line="495"/>
                <scope line="496"/>
            </method>
            <javadoc line="501">
                If the {@code JLayer}&apos;s view component is not {@code null},
                  this returns the result of the view&apos;s {@code getBaselineResizeBehavior()} method.
                  Otherwise, the default implementation is called.                
                <param>
                    c {@code JLayer} to return baseline resize behavior for                    
                </param>
                <return>
                    an enum indicating how the baseline changes as the component
                      size changes                    
                </return>
            </javadoc>
            <method name="getBaselineResizeBehavior" type="Component.BaselineResizeBehavior" line="509">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <declaration name="l" type="JLayer" line="510"/>
                <scope line="511"/>
            </method>
            <javadoc line="516">
                Causes the passed instance of {@code JLayer} to lay out its components.                
                <param>
                    l the {@code JLayer} component where this UI delegate is being installed                    
                </param>
            </javadoc>
            <method name="doLayout" type="void" line="520">
                <params>
                    <param name="l" type="JLayer&lt;? extends V&gt;"/>
                </params>
                <declaration name="view" type="Component" line="521"/>
                <scope line="522"/>
                <declaration name="glassPane" type="Component" line="525"/>
                <scope line="526"/>
            </method>
            <javadoc line="530">
                If the {@code JLayer}&apos;s view component is not {@code null},
                  this returns the result of  the view&apos;s {@code getPreferredSize()} method.
                  Otherwise, the default implementation is used.                
                <param>
                    c {@code JLayer} to return preferred size for                    
                </param>
                <return>
                    preferred size for the passed {@code JLayer}                    
                </return>
            </javadoc>
            <method name="getPreferredSize" type="Dimension" line="537">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <declaration name="l" type="JLayer" line="538"/>
                <declaration name="view" type="Component" line="539"/>
                <scope line="540"/>
            </method>
            <javadoc line="545">
                If the {@code JLayer}&apos;s view component is not {@code null},
                  this returns the result of  the view&apos;s {@code getMinimalSize()} method.
                  Otherwise, the default implementation is used.                
                <param>
                    c {@code JLayer} to return preferred size for                    
                </param>
                <return>
                    minimal size for the passed {@code JLayer}                    
                </return>
            </javadoc>
            <method name="getMinimumSize" type="Dimension" line="552">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <declaration name="l" type="JLayer" line="553"/>
                <declaration name="view" type="Component" line="554"/>
                <scope line="555"/>
            </method>
            <javadoc line="560">
                If the {@code JLayer}&apos;s view component is not {@code null},
                  this returns the result of  the view&apos;s {@code getMaximumSize()} method.
                  Otherwise, the default implementation is used.                
                <param>
                    c {@code JLayer} to return preferred size for                    
                </param>
                <return>
                    maximum size for the passed {@code JLayer}                    
                </return>
            </javadoc>
            <method name="getMaximumSize" type="Dimension" line="567">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <declaration name="l" type="JLayer" line="568"/>
                <declaration name="view" type="Component" line="569"/>
                <scope line="570"/>
            </method>
            <javadoc line="575">
                Paints the specified region in the {@code JLayer} this {@code LayerUI} is set to, immediately.
                  &lt;p/&gt;
                  This method is to be overridden when the dirty region needs to be changed.
                  The default implementation delegates its functionality to {@link JComponent#paintImmediately(int,int,int,int)}.                
                <param>
                    x  the x value of the region to be painted                    
                </param>
                <param>
                    y  the y value of the region to be painted                    
                </param>
                <param>
                    width  the width of the region to be painted                    
                </param>
                <param>
                    height  the height of the region to be painted                    
                </param>
                <see>
                    JComponent#paintImmediately(int,int,int,int)                    
                </see>
            </javadoc>
            <method name="paintImmediately" type="void" line="586">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="l" type="JLayer&lt;? extends V&gt;"/>
                </params>
            </method>
        </class>
    </source>