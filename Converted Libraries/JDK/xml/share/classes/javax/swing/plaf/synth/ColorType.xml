<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.plaf.synth">
        <class name="ColorType" line="27">
            <javadoc line="27">
                A typesafe enumeration of colors that can be fetched from a style.
                  &lt;p&gt;
                  Each &lt;code&gt;SynthStyle&lt;/code&gt; has a set of &lt;code&gt;ColorType&lt;/code&gt;s that
                  are accessed by way of the{@link SynthStyle#getColor(SynthContext,ColorType)} method.
                  &lt;code&gt;SynthStyle&lt;/code&gt;&apos;s &lt;code&gt;installDefaults&lt;/code&gt; will install
                  the &lt;code&gt;FOREGROUND&lt;/code&gt; color
                  as the foreground of
                  the Component, and the &lt;code&gt;BACKGROUND&lt;/code&gt; color to the background of
                  the component (assuming that you have not explicitly specified a
                  foreground and background color). Some components
                  support more color based properties, for
                  example &lt;code&gt;JList&lt;/code&gt; has the property
                  &lt;code&gt;selectionForeground&lt;/code&gt; which will be mapped to
                  &lt;code&gt;FOREGROUND&lt;/code&gt; with a component state of
                  &lt;code&gt;SynthConstants.SELECTED&lt;/code&gt;.
                  &lt;p&gt;
                  The following example shows a custom &lt;code&gt;SynthStyle&lt;/code&gt; that returns
                  a red Color for the &lt;code&gt;DISABLED&lt;/code&gt; state, otherwise a black color.
                  &lt;pre&gt;
                  class MyStyle extends SynthStyle {
                  private Color disabledColor = new ColorUIResource(Color.RED);
                  private Color color = new ColorUIResource(Color.BLACK);
                  protected Color getColorForState(SynthContext context, ColorType type){
                  if (context.getComponentState() == SynthConstants.DISABLED) {
                  return disabledColor;
                  }
                  return color;
                  }
                  }
                  &lt;/pre&gt;                
                <since>
                    1.5                    
                </since>
                <author>
                    Scott Violet                    
                </author>
            </javadoc>
            <declaration name="FOREGROUND" type="ColorType" line="64"/>
            <javadoc line="64">
                ColorType for the foreground of a region.                
            </javadoc>
            <declaration name="BACKGROUND" type="ColorType" line="69"/>
            <javadoc line="69">
                ColorType for the background of a region.                
            </javadoc>
            <declaration name="TEXT_FOREGROUND" type="ColorType" line="74"/>
            <javadoc line="74">
                ColorType for the foreground of a region.                
            </javadoc>
            <declaration name="TEXT_BACKGROUND" type="ColorType" line="80"/>
            <javadoc line="80">
                ColorType for the background of a region.                
            </javadoc>
            <declaration name="FOCUS" type="ColorType" line="86"/>
            <javadoc line="86">
                ColorType for the focus.                
            </javadoc>
            <declaration name="MAX_COUNT" type="int" line="91"/>
            <javadoc line="91">
                Maximum number of &lt;code&gt;ColorType&lt;/code&gt;s.                
            </javadoc>
            <declaration name="nextID" type="int" line="96"/>
            <declaration name="description" type="String" line="98"/>
            <declaration name="index" type="int" line="99"/>
            <scope line="101"/>
            <javadoc line="106">
                Creates a new ColorType with the specified description.                
                <param>
                    description String description of the ColorType.                    
                </param>
            </javadoc>
            <method name="ColorType" type="constructor" line="111">
                <params>
                    <param name="description" type="String"/>
                </params>
                <scope line="112"/>
                <scope line="117"/>
            </method>
            <javadoc line="122">
                Returns a unique id, as an integer, for this ColorType.                
                <return>
                    a unique id, as an integer, for this ColorType.                    
                </return>
            </javadoc>
            <method name="getID" type="int" line="127"/>
            <javadoc line="131">
                Returns the textual description of this &lt;code&gt;ColorType&lt;/code&gt;.
                  This is the same value that the &lt;code&gt;ColorType&lt;/code&gt; was created
                  with.                
                <return>
                    the description of the string                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="138"/>
        </class>
    </source>