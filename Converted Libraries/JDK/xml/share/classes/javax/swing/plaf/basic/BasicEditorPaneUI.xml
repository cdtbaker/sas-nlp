<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.plaf.basic">
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="java.beans"/>
        <import package="java.net.URL"/>
        <import package="java.net.MalformedURLException"/>
        <import package="javax.swing"/>
        <import package="javax.swing.text"/>
        <import package="javax.swing.text.html"/>
        <import package="javax.swing.plaf"/>
        <import package="javax.swing.border"/>
        <class name="BasicEditorPaneUI" line="12">
            <extends class="BasicTextUI"/>
            <javadoc line="12">
                Provides the look and feel for a JEditorPane.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <author>
                    Timothy Prinzing                    
                </author>
            </javadoc>
            <javadoc line="26">
                Creates a UI for the JTextPane.                
                <param>
                    c the JTextPane component                    
                </param>
                <return>
                    the UI                    
                </return>
            </javadoc>
            <method name="createUI" type="ComponentUI" line="31">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <javadoc line="34">
                Creates a new BasicEditorPaneUI.                
            </javadoc>
            <method name="BasicEditorPaneUI" type="constructor" line="37"/>
            <javadoc line="40">
                Fetches the name used as a key to lookup properties through the
                  UIManager.  This is used as a prefix to all the standard
                  text properties.                
                <return>
                    the name (&quot;EditorPane&quot;)                    
                </return>
            </javadoc>
            <method name="getPropertyPrefix" type="String" line="46"/>
            <javadoc line="49">
                {@inheritDoc}                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="installUI" type="void" line="53">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <javadoc line="57">
                {@inheritDoc}                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="uninstallUI" type="void" line="61">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <javadoc line="65">
                Fetches the EditorKit for the UI.  This is whatever is
                  currently set in the associated JEditorPane.                
                <return>
                    the editor capabilities                    
                </return>
                <see>
                    TextUI#getEditorKit                    
                </see>
            </javadoc>
            <method name="getEditorKit" type="EditorKit" line="71">
                <params>
                    <param name="tc" type="JTextComponent"/>
                </params>
                <declaration name="pane" type="JEditorPane" line="72"/>
            </method>
            <javadoc line="75">
                Fetch an action map to use.  The map for a JEditorPane
                  is not shared because it changes with the EditorKit.                
            </javadoc>
            <method name="getActionMap" type="ActionMap" line="79">
                <declaration name="am" type="ActionMap" line="80"/>
                <declaration name="editorKit" type="EditorKit" line="82"/>
                <scope line="83">
                    <declaration name="actions" type="Action[]" line="84"/>
                    <scope line="85"/>
                </scope>
            </method>
            <javadoc line="94">
                This method gets called when a bound property is changed
                  on the associated JTextComponent.  This is a hook
                  which UI implementations may change to reflect how the
                  UI displays bound properties of JTextComponent subclasses.
                  This is implemented to rebuild the ActionMap based upon an
                  EditorKit change.                
                <param>
                    evt the property change event                    
                </param>
            </javadoc>
            <method name="propertyChange" type="void" line="103">
                <params>
                    <param name="evt" type="PropertyChangeEvent"/>
                </params>
                <declaration name="name" type="String" line="105"/>
                <scope line="106">
                    <declaration name="map" type="ActionMap" line="107"/>
                    <scope line="108">
                        <declaration name="oldValue" type="Object" line="109"/>
                        <scope line="110">
                            <declaration name="actions" type="Action[]" line="111"/>
                            <scope line="112"/>
                        </scope>
                        <declaration name="newValue" type="Object" line="116"/>
                        <scope line="117">
                            <declaration name="actions" type="Action[]" line="118"/>
                            <scope line="119"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="126"/>
                <scope line="129">
                    <declaration name="c" type="JComponent" line="130"/>
                    <scope line="132"/>
                    <scope line="135">
                        <declaration name="honorDisplayPropertiesObject" type="Object" line="136"/>
                        <declaration name="honorDisplayProperties" type="boolean" line="137"/>
                        <scope line="138"/>
                        <scope line="141"/>
                    </scope>
                </scope>
            </method>
            <method name="removeActions" type="void" line="147">
                <params>
                    <param name="map" type="ActionMap"/>
                    <param name="actions" type="Action[]"/>
                </params>
                <declaration name="n" type="int" line="148"/>
                <scope line="149">
                    <declaration name="a" type="Action" line="150"/>
                </scope>
            </method>
            <method name="addActions" type="void" line="154">
                <params>
                    <param name="map" type="ActionMap"/>
                    <param name="actions" type="Action[]"/>
                </params>
                <declaration name="n" type="int" line="155"/>
                <scope line="156">
                    <declaration name="a" type="Action" line="157"/>
                </scope>
            </method>
            <method name="updateDisplayProperties" type="void" line="161">
                <params>
                    <param name="font" type="Font"/>
                    <param name="fg" type="Color"/>
                </params>
                <declaration name="c" type="JComponent" line="162"/>
                <declaration name="honorDisplayPropertiesObject" type="Object" line="163"/>
                <declaration name="honorDisplayProperties" type="boolean" line="164"/>
                <declaration name="w3cLengthUnitsObject" type="Object" line="165"/>
                <declaration name="w3cLengthUnits" type="boolean" line="166"/>
                <scope line="167"/>
                <scope line="170"/>
                <scope line="173">
                    <declaration name="doc" type="Document" line="174"/>
                    <scope line="175">
                        <scope line="176"/>
                        <scope line="179"/>
                    </scope>
                </scope>
                <scope line="184"/>
                <scope line="187">
                    <declaration name="doc" type="Document" line="188"/>
                    <scope line="189">
                        <declaration name="documentStyleSheet" type="StyleSheet" line="190"/>
                    </scope>
                </scope>
                <scope line="194">
                    <declaration name="doc" type="Document" line="195"/>
                    <scope line="196">
                        <declaration name="documentStyleSheet" type="StyleSheet" line="197"/>
                    </scope>
                </scope>
            </method>
            <declaration name="FONT_ATTRIBUTE_KEY" type="String" line="202"/>
            <javadoc line="202">
                Attribute key to reference the default font.
                  used in javax.swing.text.StyleContext.getFont
                  to resolve the default font.                
            </javadoc>
            <method name="cleanDisplayProperties" type="void" line="208">
                <declaration name="document" type="Document" line="209"/>
                <scope line="210">
                    <declaration name="documentStyleSheet" type="StyleSheet" line="211"/>
                    <declaration name="styleSheets" type="StyleSheet[]" line="212"/>
                    <scope line="213">
                        <scope line="214">
                            <scope line="215"/>
                        </scope>
                    </scope>
                    <declaration name="style" type="Style" line="222"/>
                    <scope line="223"/>
                </scope>
            </method>
            <class name="StyleSheetUIResource" line="228">
                <extends class="StyleSheet"/>
                <implements interface="UIResource"/>
            </class>
            <method name="updateCSS" type="void" line="230">
                <params>
                    <param name="font" type="Font"/>
                    <param name="fg" type="Color"/>
                </params>
                <declaration name="component" type="JTextComponent" line="231"/>
                <declaration name="document" type="Document" line="232"/>
                <scope line="233">
                    <declaration name="styleSheet" type="StyleSheet" line="234"/>
                    <declaration name="documentStyleSheet" type="StyleSheet" line="235"/>
                    <declaration name="styleSheets" type="StyleSheet[]" line="236"/>
                    <scope line="237">
                        <scope line="238">
                            <scope line="239"/>
                        </scope>
                    </scope>
                    <declaration name="cssRule" type="String" line="244"/>
                    <declaration name="style" type="Style" line="248"/>
                    <scope line="249"/>
                </scope>
            </method>
            <method name="updateStyle" type="void" line="254">
                <params>
                    <param name="font" type="Font"/>
                    <param name="fg" type="Color"/>
                </params>
            </method>
            <javadoc line="258">
                Update the color in the default style of the document.                
                <param>
                    color the new color to use or null to remove the color attribute
                      from the document&apos;s style                    
                </param>
            </javadoc>
            <method name="updateForeground" type="void" line="263">
                <params>
                    <param name="color" type="Color"/>
                </params>
                <declaration name="doc" type="StyledDocument" line="264"/>
                <declaration name="style" type="Style" line="265"/>
                <scope line="266"/>
                <scope line="269">
                    <scope line="270"/>
                </scope>
                <scope line="274">
                    <scope line="275"/>
                </scope>
            </method>
            <javadoc line="280">
                Update the font in the default style of the document.                
                <param>
                    font the new font to use or null to remove the font attribute
                      from the document&apos;s style                    
                </param>
            </javadoc>
            <method name="updateFont" type="void" line="285">
                <params>
                    <param name="font" type="Font"/>
                </params>
                <declaration name="doc" type="StyledDocument" line="286"/>
                <declaration name="style" type="Style" line="287"/>
                <scope line="288"/>
                <declaration name="fontFamily" type="String" line="291"/>
                <declaration name="fontSize" type="Integer" line="292"/>
                <declaration name="isBold" type="Boolean" line="293"/>
                <declaration name="isItalic" type="Boolean" line="294"/>
                <declaration name="fontAttribute" type="Font" line="295"/>
                <scope line="296">
                    <scope line="297"/>
                    <scope line="300"/>
                    <scope line="303"/>
                    <scope line="306"/>
                    <scope line="309"/>
                </scope>
                <scope line="313">
                    <scope line="314"/>
                    <scope line="317"/>
                    <scope line="320"/>
                    <scope line="323"/>
                    <scope line="326"/>
                </scope>
            </method>
        </class>
    </source>