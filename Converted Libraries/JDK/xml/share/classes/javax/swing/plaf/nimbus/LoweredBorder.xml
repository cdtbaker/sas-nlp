<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.plaf.nimbus">
        <import package="javax.swing.border.Border"/>
        <import package="javax.swing.JComponent"/>
        <import package="java.awt.Insets"/>
        <import package="java.awt.Component"/>
        <import package="java.awt.Graphics"/>
        <import package="java.awt.Graphics2D"/>
        <import package="java.awt.Color"/>
        <import package="java.awt.RenderingHints"/>
        <import package="java.awt.Dimension"/>
        <import package="java.awt.image.BufferedImage"/>
        <class name="LoweredBorder" line="12">
            <extends class="AbstractRegionPainter"/>
            <implements interface="Border"/>
            <javadoc line="12">
                LoweredBorder - A recessed rounded inner shadowed border. Used as the
                  standard Nimbus TitledBorder. This class is both a painter and a swing
                  border.                
                <author>
                    Jasper Potts                    
                </author>
            </javadoc>
            <declaration name="IMG_SIZE" type="int" line="19"/>
            <declaration name="RADIUS" type="int" line="20"/>
            <declaration name="INSETS" type="Insets" line="21"/>
            <declaration name="PAINT_CONTEXT" type="PaintContext" line="22"/>
            <method name="getExtendedCacheKeys" type="Object[]" line="23">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <javadoc line="26">
                Actually performs the painting operation. Subclasses must implement this
                  method. The graphics object passed may represent the actual surface being
                  rendererd to, or it may be an intermediate buffer. It has also been
                  pre-translated. Simply render the component as if it were located at 0, 0
                  and had a width of &lt;code&gt;width&lt;/code&gt; and a height of
                  &lt;code&gt;height&lt;/code&gt;. For performance reasons, you may want to read the
                  clip from the Graphics2D object and only render within that space.                
                <param>
                    g      The Graphics2D surface to paint to                    
                </param>
                <param>
                    c      The JComponent related to the drawing event. For example,
                      if the region being rendered is Button, then <code>c</code>
                      will be a JButton. If the region being drawn is
                      ScrollBarSlider, then the component will be JScrollBar.
                      This value may be null.                    
                </param>
                <param>
                    width  The width of the region to paint. Note that in the case of
                      painting the foreground, this value may differ from
                      c.getWidth().                    
                </param>
                <param>
                    height The height of the region to paint. Note that in the case of
                      painting the foreground, this value may differ from
                      c.getHeight().                    
                </param>
            </javadoc>
            <method name="doPaint" type="void" line="47">
                <params>
                    <param name="g" type="Graphics2D"/>
                    <param name="c" type="JComponent"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="extendedCacheKeys" type="Object[]"/>
                </params>
                <declaration name="color" type="Color" line="48"/>
                <declaration name="img1" type="BufferedImage" line="49"/>
                <declaration name="img2" type="BufferedImage" line="50"/>
                <declaration name="g2" type="Graphics2D" line="51"/>
                <declaration name="effect" type="InnerShadowEffect" line="56"/>
                <scope line="68"/>
                <scope line="71"/>
            </method>
            <javadoc line="77">
                &lt;p&gt;Gets the PaintContext for this painting operation. This method is
                  called on every paint, and so should be fast and produce no garbage. The
                  PaintContext contains information such as cache hints. It also contains
                  data necessary for decoding points at runtime, such as the stretching
                  insets, the canvas size at which the encoded points were defined, and
                  whether the stretching insets are inverted.&lt;/p&gt;
                  &lt;p/&gt;
                  &lt;p&gt; This method allows for subclasses to package the painting of
                  different states with possibly different canvas sizes, etc, into one
                  AbstractRegionPainter implementation.&lt;/p&gt;                
                <return>
                    a PaintContext associated with this paint operation.                    
                </return>
            </javadoc>
            <method name="getPaintContext" type="PaintContext" line="90"/>
            <javadoc line="93">
                Returns the insets of the border.                
                <param>
                    c the component for which this border insets value applies                    
                </param>
            </javadoc>
            <method name="getBorderInsets" type="Insets" line="97">
                <params>
                    <param name="c" type="Component"/>
                </params>
            </method>
            <javadoc line="100">
                Returns whether or not the border is opaque.  If the border is opaque, it
                  is responsible for filling in it&apos;s own background when painting.                
            </javadoc>
            <method name="isBorderOpaque" type="boolean" line="104"/>
            <javadoc line="107">
                Paints the border for the specified component with the specified position
                  and size.                
                <param>
                    c      the component for which this border is being painted                    
                </param>
                <param>
                    g      the paint graphics                    
                </param>
                <param>
                    x      the x position of the painted border                    
                </param>
                <param>
                    y      the y position of the painted border                    
                </param>
                <param>
                    width  the width of the painted border                    
                </param>
                <param>
                    height the height of the painted border                    
                </param>
            </javadoc>
            <method name="paintBorder" type="void" line="117">
                <params>
                    <param name="c" type="Component"/>
                    <param name="g" type="Graphics"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <declaration name="comp" type="JComponent" line="118"/>
                <scope line="119">
                    <declaration name="g2" type="Graphics2D" line="120"/>
                </scope>
                <scope line="125">
                    <declaration name="img" type="BufferedImage" line="126"/>
                    <declaration name="g2" type="Graphics2D" line="127"/>
                </scope>
            </method>
            <method name="getLighter" type="Color" line="133">
                <params>
                    <param name="c" type="Color"/>
                    <param name="factor" type="float"/>
                </params>
            </method>
        </class>
    </source>