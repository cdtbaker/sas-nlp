<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.plaf.nimbus">
        <import package="java.util.HashMap"/>
        <import package="java.util.Map"/>
        <import package="javax.swing.JComponent"/>
        <import package="javax.swing.plaf.synth.SynthConstants"/>
        <class name="State" line="6">
            <type_params>
                <type_param name="T"/>
            </type_params>
            <javadoc line="6">
                &lt;p&gt;Represents a built in, or custom, state in Nimbus.&lt;/p&gt;
                  &lt;p&gt;Synth provides several built in states, which are:
                  &lt;ul&gt;
                  &lt;li&gt;Enabled&lt;/li&gt;
                  &lt;li&gt;Mouse Over&lt;/li&gt;
                  &lt;li&gt;Pressed&lt;/li&gt;
                  &lt;li&gt;Disabled&lt;/li&gt;
                  &lt;li&gt;Focused&lt;/li&gt;
                  &lt;li&gt;Selected&lt;/li&gt;
                  &lt;li&gt;Default&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;However, there are many more states that could be described in a LookAndFeel, and it
                  would be nice to style components differently based on these different states.
                  For example, a progress bar could be &quot;indeterminate&quot;. It would be very convenient
                  to allow this to be defined as a &quot;state&quot;.&lt;/p&gt;
                  &lt;p&gt;This class, State, is intended to be used for such situations.
                  Simply implement the abstract #isInState method. It returns true if the given
                  JComponent is &quot;in this state&quot;, false otherwise. This method will be called
                  &lt;em&gt;many&lt;/em&gt; times in &lt;em&gt;performance sensitive loops&lt;/em&gt;. It must execute
                  very quickly.&lt;/p&gt;
                  &lt;p&gt;For example, the following might be an implementation of a custom
                  &quot;Indeterminate&quot; state for JProgressBars:&lt;/p&gt;
                  &lt;pre&gt;&lt;code&gt;
                  public final class IndeterminateState extends State&amp;lt;JProgressBar&amp;gt; {
                  public IndeterminateState() {
                  super(&quot;Indeterminate&quot;);
                  }
                  &amp;#64;Override
                  protected boolean isInState(JProgressBar c) {
                  return c.isIndeterminate();
                  }
                  }
                  &lt;/code&gt;&lt;/pre&gt;                
            </javadoc>
            <declaration name="standardStates" type="Map&lt;String,StandardState&gt;" line="42"/>
            <declaration name="Enabled" type="State" line="43"/>
            <declaration name="MouseOver" type="State" line="44"/>
            <declaration name="Pressed" type="State" line="45"/>
            <declaration name="Disabled" type="State" line="46"/>
            <declaration name="Focused" type="State" line="47"/>
            <declaration name="Selected" type="State" line="48"/>
            <declaration name="Default" type="State" line="49"/>
            <declaration name="name" type="String" line="50"/>
            <javadoc line="51">
                &lt;p&gt;Create a new custom State. Specify the name for the state. The name should
                  be unique within the states set for any one particular component.
                  The name of the state should coincide with the name used in UIDefaults.&lt;/p&gt;
                  &lt;p&gt;For example, the following would be correct:&lt;/p&gt;
                  &lt;pre&gt;&lt;code&gt;
                  defaults.put(&quot;Button.States&quot;, &quot;Enabled, Foo, Disabled&quot;);
                  defaults.put(&quot;Button.Foo&quot;, new FooState(&quot;Foo&quot;));
                  &lt;/code&gt;&lt;/pre&gt;                
                <param>
                    name a simple user friendly name for the state, such as "Indeterminate"
                      or "EmbeddedPanel" or "Blurred". It is customary to use camel case,
                      with the first letter capitalized.                    
                </param>
            </javadoc>
            <method name="State" type="constructor" line="64">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="toString" type="String" line="67"/>
            <javadoc line="70">
                &lt;p&gt;This is the main entry point, called by NimbusStyle.&lt;/p&gt;
                  &lt;p&gt;There are both custom states and standard states. Standard states
                  correlate to the states defined in SynthConstants. When a UI delegate
                  constructs a SynthContext, it specifies the state that the component is
                  in according to the states defined in SynthConstants. Our NimbusStyle
                  will then take this state, and query each State instance in the style
                  asking whether isInState(c, s).&lt;/p&gt;
                  &lt;p&gt;Now, only the standard states care about the &quot;s&quot; param. So we have
                  this odd arrangement:&lt;/p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;NimbusStyle calls State.isInState(c, s)&lt;/li&gt;
                  &lt;li&gt;State.isInState(c, s) simply delegates to State.isInState(c)&lt;/li&gt;
                  &lt;li&gt;&lt;em&gt;EXCEPT&lt;/em&gt;, StandardState overrides State.isInState(c, s) and
                  returns directly from that method after checking its state, and
                  does not call isInState(c) (since it is not needed for standard states).&lt;/li&gt;
                  &lt;/ul&gt;                
            </javadoc>
            <method name="isInState" type="boolean" line="88">
                <params>
                    <param name="c" type="T"/>
                    <param name="s" type="int"/>
                </params>
            </method>
            <method name="isInState" type="boolean" line="91"/>
            <javadoc line="91">
                &lt;p&gt;Gets whether the specified JComponent is in the custom state represented
                  by this class. &lt;em&gt;This is an extremely performance sensitive loop.&lt;/em&gt;
                  Please take proper precautions to ensure that it executes quickly.&lt;/p&gt;
                  &lt;p&gt;Nimbus uses this method to help determine what state a JComponent is
                  in. For example, a custom State could exist for JProgressBar such that
                  it would return &lt;code&gt;true&lt;/code&gt; when the progress bar is indeterminate.
                  Such an implementation of this method would simply be:&lt;/p&gt;
                  &lt;pre&gt;&lt;code&gt; return c.isIndeterminate();&lt;/code&gt;&lt;/pre&gt;                
                <param>
                    c the JComponent to test. This will never be null.                    
                </param>
                <return>
                    true if <code>c</code> is in the custom state represented by
                      this <code>State</code> instance                    
                </return>
            </javadoc>
            <method name="getName" type="String" line="105"/>
            <method name="isStandardStateName" type="boolean" line="108">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="getStandardState" type="StandardState" line="111">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <class name="StandardState" line="114">
                <extends class="State">
                    <type_params>
                        <type_param name="JComponent"/>
                    </type_params>
                </extends>
                <declaration name="state" type="int" line="115"/>
                <method name="StandardState" type="constructor" line="116">
                    <params>
                        <param name="state" type="int"/>
                    </params>
                </method>
                <method name="getState" type="int" line="121"/>
                <method name="isInState" type="boolean" line="124">
                    <params>
                        <param name="c" type="JComponent"/>
                        <param name="s" type="int"/>
                    </params>
                </method>
                <method name="isInState" type="boolean" line="127">
                    <params>
                        <param name="c" type="JComponent"/>
                    </params>
                </method>
                <method name="toString" type="String" line="130">
                    <params>
                        <param name="state" type="int"/>
                    </params>
                    <declaration name="buffer" type="StringBuffer" line="131"/>
                    <scope line="132"/>
                    <scope line="135"/>
                    <scope line="139"/>
                    <scope line="143"/>
                    <scope line="147"/>
                    <scope line="151"/>
                    <scope line="155"/>
                </method>
            </class>
        </class>
    </source>