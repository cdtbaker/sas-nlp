<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.plaf.multi">
        <import package="java.util.Vector"/>
        <import package="javax.swing.plaf.SplitPaneUI"/>
        <import package="javax.swing.JSplitPane"/>
        <import package="java.awt.Graphics"/>
        <import package="javax.swing.plaf.ComponentUI"/>
        <import package="javax.swing.JComponent"/>
        <import package="java.awt.Dimension"/>
        <import package="javax.accessibility.Accessible"/>
        <class name="MultiSplitPaneUI" line="36">
            <extends class="SplitPaneUI"/>
            <comment line="54">
                //////////////////
                 Common UI methods                
            </comment>
            <comment line="67">
                //////////////////
                 SplitPaneUI methods                
            </comment>
            <comment line="143">
                //////////////////
                 ComponentUI methods                
            </comment>
            <javadoc line="36">
                A multiplexing UI used to combine &lt;code&gt;SplitPaneUI&lt;/code&gt;s.
                  &lt;p&gt;This file was automatically generated by AutoMulti.                
                <author>
                    Otto Multey                    
                </author>
            </javadoc>
            <declaration name="uis" type="Vector" line="45"/>
            <javadoc line="45">
                The vector containing the real UIs.  This is populated
                  in the call to &lt;code&gt;createUI&lt;/code&gt;, and can be obtained by calling
                  the &lt;code&gt;getUIs&lt;/code&gt; method.  The first element is guaranteed to be the real UI
                  obtained from the default look and feel.                
            </javadoc>
            <javadoc line="57">
                Returns the list of UIs associated with this multiplexing UI.  This
                  allows processing of the UIs by an application aware of multiplexing
                  UIs on components.                
            </javadoc>
            <method name="getUIs" type="ComponentUI[]" line="62"/>
            <javadoc line="70">
                Invokes the &lt;code&gt;resetToPreferredSizes&lt;/code&gt; method on each UI handled by this object.                
            </javadoc>
            <method name="resetToPreferredSizes" type="void" line="73">
                <params>
                    <param name="a" type="JSplitPane"/>
                </params>
                <scope line="74"/>
            </method>
            <javadoc line="79">
                Invokes the &lt;code&gt;setDividerLocation&lt;/code&gt; method on each UI handled by this object.                
            </javadoc>
            <method name="setDividerLocation" type="void" line="82">
                <params>
                    <param name="a" type="JSplitPane"/>
                    <param name="b" type="int"/>
                </params>
                <scope line="83"/>
            </method>
            <javadoc line="88">
                Invokes the &lt;code&gt;getDividerLocation&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default &lt;code&gt;LookAndFeel&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="getDividerLocation" type="int" line="94">
                <params>
                    <param name="a" type="JSplitPane"/>
                </params>
                <declaration name="returnValue" type="int" line="95"/>
                <scope line="97"/>
            </method>
            <javadoc line="103">
                Invokes the &lt;code&gt;getMinimumDividerLocation&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default &lt;code&gt;LookAndFeel&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="getMinimumDividerLocation" type="int" line="109">
                <params>
                    <param name="a" type="JSplitPane"/>
                </params>
                <declaration name="returnValue" type="int" line="110"/>
                <scope line="112"/>
            </method>
            <javadoc line="118">
                Invokes the &lt;code&gt;getMaximumDividerLocation&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default &lt;code&gt;LookAndFeel&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="getMaximumDividerLocation" type="int" line="124">
                <params>
                    <param name="a" type="JSplitPane"/>
                </params>
                <declaration name="returnValue" type="int" line="125"/>
                <scope line="127"/>
            </method>
            <javadoc line="133">
                Invokes the &lt;code&gt;finishedPaintingChildren&lt;/code&gt; method on each UI handled by this object.                
            </javadoc>
            <method name="finishedPaintingChildren" type="void" line="136">
                <params>
                    <param name="a" type="JSplitPane"/>
                    <param name="b" type="Graphics"/>
                </params>
                <scope line="137"/>
            </method>
            <javadoc line="146">
                Invokes the &lt;code&gt;contains&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default &lt;code&gt;LookAndFeel&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="contains" type="boolean" line="152">
                <params>
                    <param name="a" type="JComponent"/>
                    <param name="b" type="int"/>
                    <param name="c" type="int"/>
                </params>
                <declaration name="returnValue" type="boolean" line="153"/>
                <scope line="155"/>
            </method>
            <javadoc line="161">
                Invokes the &lt;code&gt;update&lt;/code&gt; method on each UI handled by this object.                
            </javadoc>
            <method name="update" type="void" line="164">
                <params>
                    <param name="a" type="Graphics"/>
                    <param name="b" type="JComponent"/>
                </params>
                <scope line="165"/>
            </method>
            <javadoc line="170">
                Returns a multiplexing UI instance if any of the auxiliary
                  &lt;code&gt;LookAndFeel&lt;/code&gt;s supports this UI.  Otherwise, just returns the
                  UI object obtained from the default &lt;code&gt;LookAndFeel&lt;/code&gt;.                
            </javadoc>
            <method name="createUI" type="ComponentUI" line="175">
                <params>
                    <param name="a" type="JComponent"/>
                </params>
                <declaration name="mui" type="ComponentUI" line="176"/>
            </method>
            <javadoc line="182">
                Invokes the &lt;code&gt;installUI&lt;/code&gt; method on each UI handled by this object.                
            </javadoc>
            <method name="installUI" type="void" line="185">
                <params>
                    <param name="a" type="JComponent"/>
                </params>
                <scope line="186"/>
            </method>
            <javadoc line="191">
                Invokes the &lt;code&gt;uninstallUI&lt;/code&gt; method on each UI handled by this object.                
            </javadoc>
            <method name="uninstallUI" type="void" line="194">
                <params>
                    <param name="a" type="JComponent"/>
                </params>
                <scope line="195"/>
            </method>
            <javadoc line="200">
                Invokes the &lt;code&gt;paint&lt;/code&gt; method on each UI handled by this object.                
            </javadoc>
            <method name="paint" type="void" line="203">
                <params>
                    <param name="a" type="Graphics"/>
                    <param name="b" type="JComponent"/>
                </params>
                <scope line="204"/>
            </method>
            <javadoc line="209">
                Invokes the &lt;code&gt;getPreferredSize&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default &lt;code&gt;LookAndFeel&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="getPreferredSize" type="Dimension" line="215">
                <params>
                    <param name="a" type="JComponent"/>
                </params>
                <declaration name="returnValue" type="Dimension" line="216"/>
                <scope line="218"/>
            </method>
            <javadoc line="224">
                Invokes the &lt;code&gt;getMinimumSize&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default &lt;code&gt;LookAndFeel&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="getMinimumSize" type="Dimension" line="230">
                <params>
                    <param name="a" type="JComponent"/>
                </params>
                <declaration name="returnValue" type="Dimension" line="231"/>
                <scope line="233"/>
            </method>
            <javadoc line="239">
                Invokes the &lt;code&gt;getMaximumSize&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default &lt;code&gt;LookAndFeel&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="getMaximumSize" type="Dimension" line="245">
                <params>
                    <param name="a" type="JComponent"/>
                </params>
                <declaration name="returnValue" type="Dimension" line="246"/>
                <scope line="248"/>
            </method>
            <javadoc line="254">
                Invokes the &lt;code&gt;getAccessibleChildrenCount&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default &lt;code&gt;LookAndFeel&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="getAccessibleChildrenCount" type="int" line="260">
                <params>
                    <param name="a" type="JComponent"/>
                </params>
                <declaration name="returnValue" type="int" line="261"/>
                <scope line="263"/>
            </method>
            <javadoc line="269">
                Invokes the &lt;code&gt;getAccessibleChild&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default &lt;code&gt;LookAndFeel&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="getAccessibleChild" type="Accessible" line="275">
                <params>
                    <param name="a" type="JComponent"/>
                    <param name="b" type="int"/>
                </params>
                <declaration name="returnValue" type="Accessible" line="276"/>
                <scope line="278"/>
            </method>
        </class>
    </source>