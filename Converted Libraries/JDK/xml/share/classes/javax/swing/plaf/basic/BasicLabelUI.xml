<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.plaf.basic">
        <import package="sun.swing.SwingUtilities2"/>
        <import package="sun.swing.DefaultLookup"/>
        <import package="sun.swing.UIAction"/>
        <import package="sun.awt.AppContext"/>
        <import package="javax.swing"/>
        <import package="javax.swing.plaf"/>
        <import package="javax.swing.text.View"/>
        <import package="java.awt.event.ActionEvent"/>
        <import package="java.awt.event.ActionListener"/>
        <import package="java.awt.event.KeyEvent"/>
        <import package="java.awt.Component"/>
        <import package="java.awt.Container"/>
        <import package="java.awt.Dimension"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.Insets"/>
        <import package="java.awt.Color"/>
        <import package="java.awt.Graphics"/>
        <import package="java.awt.Font"/>
        <import package="java.awt.FontMetrics"/>
        <import package="java.beans.PropertyChangeEvent"/>
        <import package="java.beans.PropertyChangeListener"/>
        <class name="BasicLabelUI" line="52">
            <extends class="LabelUI"/>
            <comment line="426">
                When the accelerator is pressed, temporarily make the JLabel                
            </comment>
            <comment line="427">
                focusTraversable by registering a WHEN_FOCUSED action for the                
            </comment>
            <comment line="428">
                release of the accelerator.  Then give it focus so it can                
            </comment>
            <comment line="429">
                prevent unwanted keyTyped events from getting to other components.                
            </comment>
            <implements interface="PropertyChangeListener"/>
            <javadoc line="52">
                A Windows L&amp;F implementation of LabelUI.  This implementation
                  is completely static, i.e. there&apos;s only one UIView implementation
                  that&apos;s shared by all JLabel objects.                
                <author>
                    Hans Muller                    
                </author>
            </javadoc>
            <declaration name="labelUI" type="BasicLabelUI" line="61"/>
            <javadoc line="61">
                The default &lt;code&gt;BasicLabelUI&lt;/code&gt; instance. This field might
                  not be used. To change the default instance use a subclass which
                  overrides the &lt;code&gt;createUI&lt;/code&gt; method, and place that class
                  name in defaults table under the key &quot;LabelUI&quot;.                
            </javadoc>
            <declaration name="BASIC_LABEL_UI_KEY" type="Object" line="68"/>
            <declaration name="paintIconR" type="Rectangle" line="70"/>
            <declaration name="paintTextR" type="Rectangle" line="71"/>
            <method name="loadActionMap" type="void" line="73">
                <params>
                    <param name="map" type="LazyActionMap"/>
                </params>
            </method>
            <javadoc line="78">
                Forwards the call to SwingUtilities.layoutCompoundLabel().
                  This method is here so that a subclass could do Label specific
                  layout and to shorten the method name a little.                
                <see>
                    SwingUtilities#layoutCompoundLabel                    
                </see>
            </javadoc>
            <method name="layoutCL" type="String" line="93">
                <params>
                    <param name="label" type="JLabel"/>
                    <param name="fontMetrics" type="FontMetrics"/>
                    <param name="text" type="String"/>
                    <param name="icon" type="Icon"/>
                    <param name="viewR" type="Rectangle"/>
                    <param name="iconR" type="Rectangle"/>
                    <param name="textR" type="Rectangle"/>
                </params>
            </method>
            <javadoc line="109">
                Paint clippedText at textX, textY with the labels foreground color.                
                <see>
                    #paint                    
                </see>
                <see>
                    #paintDisabledText                    
                </see>
            </javadoc>
            <method name="paintEnabledText" type="void" line="116">
                <params>
                    <param name="l" type="JLabel"/>
                    <param name="g" type="Graphics"/>
                    <param name="s" type="String"/>
                    <param name="textX" type="int"/>
                    <param name="textY" type="int"/>
                </params>
                <declaration name="mnemIndex" type="int" line="117"/>
            </method>
            <javadoc line="124">
                Paint clippedText at textX, textY with background.lighter() and then
                  shifted down and to the right by one pixel with background.darker().                
                <see>
                    #paint                    
                </see>
                <see>
                    #paintEnabledText                    
                </see>
            </javadoc>
            <method name="paintDisabledText" type="void" line="132">
                <params>
                    <param name="l" type="JLabel"/>
                    <param name="g" type="Graphics"/>
                    <param name="s" type="String"/>
                    <param name="textX" type="int"/>
                    <param name="textY" type="int"/>
                </params>
                <declaration name="accChar" type="int" line="133"/>
                <declaration name="background" type="Color" line="134"/>
            </method>
            <javadoc line="143">
                Paints the label text with the foreground color, if the label is opaque
                  then paints the entire background with the background color. The Label
                  text is drawn by {@link #paintEnabledText} or {@link #paintDisabledText}.
                  The locations of the label parts are computed by {@link #layoutCL}.                
                <see>
                    #paintEnabledText                    
                </see>
                <see>
                    #paintDisabledText                    
                </see>
                <see>
                    #layoutCL                    
                </see>
            </javadoc>
            <method name="paint" type="void" line="154">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="c" type="JComponent"/>
                </params>
                <declaration name="label" type="JLabel" line="155"/>
                <declaration name="text" type="String" line="156"/>
                <declaration name="icon" type="Icon" line="157"/>
                <scope line="159"/>
                <declaration name="fm" type="FontMetrics" line="163"/>
                <declaration name="clippedText" type="String" line="164"/>
                <scope line="166"/>
                <scope line="170">
                    <declaration name="v" type="View" line="171"/>
                    <scope line="172"/>
                    <scope line="174">
                        <declaration name="textX" type="int" line="175"/>
                        <declaration name="textY" type="int" line="176"/>
                        <scope line="178"/>
                        <scope line="181"/>
                    </scope>
                </scope>
            </method>
            <method name="layout" type="String" line="189">
                <params>
                    <param name="label" type="JLabel"/>
                    <param name="fm" type="FontMetrics"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <declaration name="insets" type="Insets" line="190"/>
                <declaration name="text" type="String" line="191"/>
                <declaration name="icon" type="Icon" line="192"/>
                <declaration name="paintViewR" type="Rectangle" line="194"/>
            </method>
            <method name="getPreferredSize" type="Dimension" line="206">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <declaration name="label" type="JLabel" line="207"/>
                <declaration name="text" type="String" line="208"/>
                <declaration name="icon" type="Icon" line="209"/>
                <declaration name="insets" type="Insets" line="211"/>
                <declaration name="font" type="Font" line="212"/>
                <declaration name="dx" type="int" line="214"/>
                <declaration name="dy" type="int" line="215"/>
                <scope line="219"/>
                <scope line="222"/>
                <scope line="226">
                    <declaration name="fm" type="FontMetrics" line="227"/>
                    <declaration name="iconR" type="Rectangle" line="228"/>
                    <declaration name="textR" type="Rectangle" line="229"/>
                    <declaration name="viewR" type="Rectangle" line="230"/>
                    <declaration name="x1" type="int" line="239"/>
                    <declaration name="x2" type="int" line="240"/>
                    <declaration name="y1" type="int" line="241"/>
                    <declaration name="y2" type="int" line="242"/>
                    <declaration name="rv" type="Dimension" line="243"/>
                </scope>
            </method>
            <javadoc line="252">
                @return getPreferredSize(c)                
            </javadoc>
            <method name="getMinimumSize" type="Dimension" line="255">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <declaration name="d" type="Dimension" line="256"/>
                <declaration name="v" type="View" line="257"/>
                <scope line="258"/>
            </method>
            <javadoc line="264">
                @return getPreferredSize(c)                
            </javadoc>
            <method name="getMaximumSize" type="Dimension" line="267">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <declaration name="d" type="Dimension" line="268"/>
                <declaration name="v" type="View" line="269"/>
                <scope line="270"/>
            </method>
            <javadoc line="276">
                Returns the baseline.                
                <throws>
                    NullPointerException {@inheritDoc}                    
                </throws>
                <throws>
                    IllegalArgumentException {@inheritDoc}                    
                </throws>
                <see>
                    javax.swing.JComponent#getBaseline(int,int)                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getBaseline" type="int" line="284">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <declaration name="label" type="JLabel" line="286"/>
                <declaration name="text" type="String" line="287"/>
                <scope line="288"/>
                <declaration name="fm" type="FontMetrics" line="291"/>
            </method>
            <javadoc line="297">
                Returns an enum indicating how the baseline of the component
                  changes as the size changes.                
                <throws>
                    NullPointerException {@inheritDoc}                    
                </throws>
                <see>
                    javax.swing.JComponent#getBaseline(int,int)                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getBaselineResizeBehavior" type="Component.BaselineResizeBehavior" line="306">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <scope line="308"/>
            </method>
            <method name="installUI" type="void" line="323">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <method name="uninstallUI" type="void" line="331">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <method name="installDefaults" type="void" line="338">
                <params>
                    <param name="c" type="JLabel"/>
                </params>
            </method>
            <method name="installListeners" type="void" line="343">
                <params>
                    <param name="c" type="JLabel"/>
                </params>
            </method>
            <method name="installComponents" type="void" line="347">
                <params>
                    <param name="c" type="JLabel"/>
                </params>
            </method>
            <method name="installKeyboardActions" type="void" line="352">
                <params>
                    <param name="l" type="JLabel"/>
                </params>
                <declaration name="dka" type="int" line="353"/>
                <declaration name="lf" type="Component" line="354"/>
                <scope line="355">
                    <declaration name="inputMap" type="InputMap" line="358"/>
                    <scope line="360"/>
                </scope>
                <scope line="369">
                    <declaration name="inputMap" type="InputMap" line="370"/>
                    <scope line="372"/>
                </scope>
            </method>
            <method name="uninstallDefaults" type="void" line="378">
                <params>
                    <param name="c" type="JLabel"/>
                </params>
            </method>
            <method name="uninstallListeners" type="void" line="381">
                <params>
                    <param name="c" type="JLabel"/>
                </params>
            </method>
            <method name="uninstallComponents" type="void" line="385">
                <params>
                    <param name="c" type="JLabel"/>
                </params>
            </method>
            <method name="uninstallKeyboardActions" type="void" line="389">
                <params>
                    <param name="c" type="JLabel"/>
                </params>
            </method>
            <method name="createUI" type="ComponentUI" line="396">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <scope line="397">
                    <declaration name="appContext" type="AppContext" line="398"/>
                    <declaration name="safeBasicLabelUI" type="BasicLabelUI" line="399"/>
                    <scope line="401"/>
                </scope>
            </method>
            <method name="propertyChange" type="void" line="410">
                <params>
                    <param name="e" type="PropertyChangeEvent"/>
                </params>
                <comment line="413">
                    remove the old html view client property if one                    
                </comment>
                <comment line="414">
                    existed, and install a new one if the text installed                    
                </comment>
                <comment line="415">
                    into the JLabel is html source.                    
                </comment>
                <declaration name="name" type="String" line="411"/>
                <scope line="412">
                    <declaration name="lbl" type="JLabel" line="416"/>
                    <declaration name="text" type="String" line="417"/>
                </scope>
                <scope line="420"/>
            </method>
            <class name="Actions" line="429">
                <extends class="UIAction"/>
                <declaration name="PRESS" type="String" line="430"/>
                <declaration name="RELEASE" type="String" line="431"/>
                <method name="Actions" type="constructor" line="433">
                    <params>
                        <param name="key" type="String"/>
                    </params>
                </method>
                <method name="actionPerformed" type="void" line="437">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                    <declaration name="label" type="JLabel" line="438"/>
                    <declaration name="key" type="String" line="439"/>
                    <scope line="440"/>
                    <scope line="443"/>
                </method>
                <method name="doPress" type="void" line="448">
                    <params>
                        <param name="label" type="JLabel"/>
                    </params>
                    <comment line="458">
                        Need this when the sticky keys are enabled                        
                    </comment>
                    <comment line="460">
                        Need this if ALT is released before the accelerator                        
                    </comment>
                    <declaration name="labelFor" type="Component" line="449"/>
                    <scope line="450">
                        <declaration name="inputMap" type="InputMap" line="451"/>
                        <scope line="452"/>
                        <declaration name="dka" type="int" line="456"/>
                    </scope>
                </method>
                <method name="doRelease" type="void" line="466">
                    <params>
                        <param name="label" type="JLabel"/>
                    </params>
                    <comment line="471">
                        inputMap should never be null.                        
                    </comment>
                    <declaration name="labelFor" type="Component" line="467"/>
                    <scope line="468">
                        <declaration name="inputMap" type="InputMap" line="469"/>
                        <scope line="470">
                            <declaration name="dka" type="int" line="472"/>
                        </scope>
                        <scope line="478"/>
                        <scope line="480"/>
                    </scope>
                </method>
            </class>
        </class>
    </source>