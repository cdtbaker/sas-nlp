<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.plaf.basic">
        <import package="sun.swing.DefaultLookup"/>
        <import package="sun.swing.UIAction"/>
        <import package="javax.swing"/>
        <import package="javax.swing.event"/>
        <import package="javax.swing.plaf"/>
        <import package="javax.swing.text.Position"/>
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="java.awt.datatransfer.Transferable"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="java.beans.PropertyChangeListener"/>
        <import package="java.beans.PropertyChangeEvent"/>
        <import package="sun.swing.SwingUtilities2"/>
        <import package="javax.swing.plaf.basic.DragRecognitionSupport.BeforeDrag"/>
        <class name="BasicListUI" line="16">
            <extends class="ListUI"/>
            <javadoc line="16">
                An extensible implementation of {@code ListUI}.
                  &lt;p&gt;{@code BasicListUI} instances cannot be shared between multiple
                  lists.                
                <author>
                    Hans Muller                    
                </author>
                <author>
                    Philip Milne                    
                </author>
                <author>
                    Shannon Hickey (drag and drop)                    
                </author>
            </javadoc>
            <declaration name="BASELINE_COMPONENT_KEY" type="StringBuilder" line="25"/>
            <declaration name="list" type="JList" line="26"/>
            <declaration name="rendererPane" type="CellRendererPane" line="27"/>
            <declaration name="focusListener" type="FocusListener" line="28"/>
            <declaration name="mouseInputListener" type="MouseInputListener" line="29"/>
            <declaration name="listSelectionListener" type="ListSelectionListener" line="30"/>
            <declaration name="listDataListener" type="ListDataListener" line="31"/>
            <declaration name="propertyChangeListener" type="PropertyChangeListener" line="32"/>
            <declaration name="handler" type="Handler" line="33"/>
            <declaration name="cellHeights" type="int[]" line="34"/>
            <declaration name="cellHeight" type="int" line="35"/>
            <declaration name="cellWidth" type="int" line="36"/>
            <declaration name="updateLayoutStateNeeded" type="int" line="37"/>
            <declaration name="listHeight" type="int" line="38"/>
            <javadoc line="38">
                Height of the list. When asked to paint, if the current size of
                  the list differs, this will update the layout state.                
            </javadoc>
            <declaration name="listWidth" type="int" line="43"/>
            <javadoc line="43">
                Width of the list. When asked to paint, if the current size of
                  the list differs, this will update the layout state.                
            </javadoc>
            <declaration name="layoutOrientation" type="int" line="48"/>
            <javadoc line="48">
                The layout orientation of the list.                
            </javadoc>
            <declaration name="columnCount" type="int" line="52"/>
            <javadoc line="52">
                Number of columns to create.                
            </javadoc>
            <declaration name="preferredHeight" type="int" line="56"/>
            <javadoc line="56">
                Preferred height to make the list, this is only used if the
                  the list is layed out horizontally.                
            </javadoc>
            <declaration name="rowsPerColumn" type="int" line="61"/>
            <javadoc line="61">
                Number of rows per column. This is only used if the row height is
                  fixed.                
            </javadoc>
            <declaration name="timeFactor" type="long" line="66"/>
            <javadoc line="66">
                The time factor to treate the series of typed alphanumeric key
                  as prefix for first letter navigation.                
            </javadoc>
            <declaration name="isFileList" type="boolean" line="71"/>
            <javadoc line="71">
                Local cache of JList&apos;s client property &quot;List.isFileList&quot;                
            </javadoc>
            <declaration name="isLeftToRight" type="boolean" line="75"/>
            <javadoc line="75">
                Local cache of JList&apos;s component orientation property                
            </javadoc>
            <declaration name="modelChanged" type="int" line="79"/>
            <declaration name="selectionModelChanged" type="int" line="80"/>
            <declaration name="fontChanged" type="int" line="81"/>
            <declaration name="fixedCellWidthChanged" type="int" line="82"/>
            <declaration name="fixedCellHeightChanged" type="int" line="83"/>
            <declaration name="prototypeCellValueChanged" type="int" line="84"/>
            <declaration name="cellRendererChanged" type="int" line="85"/>
            <declaration name="layoutOrientationChanged" type="int" line="86"/>
            <declaration name="heightChanged" type="int" line="87"/>
            <declaration name="widthChanged" type="int" line="88"/>
            <declaration name="componentOrientationChanged" type="int" line="89"/>
            <declaration name="DROP_LINE_THICKNESS" type="int" line="90"/>
            <method name="loadActionMap" type="void" line="91">
                <params>
                    <param name="map" type="LazyActionMap"/>
                </params>
            </method>
            <javadoc line="126">
                Paint one List cell: compute the relevant state, get the &quot;rubber stamp&quot;
                  cell renderer component, and then use the CellRendererPane to paint it.
                  Subclasses may want to override this method rather than paint().                
                <see>
                    #paint                    
                </see>
            </javadoc>
            <method name="paintCell" type="void" line="132">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="row" type="int"/>
                    <param name="rowBounds" type="Rectangle"/>
                    <param name="cellRenderer" type="ListCellRenderer"/>
                    <param name="dataModel" type="ListModel"/>
                    <param name="selModel" type="ListSelectionModel"/>
                    <param name="leadIndex" type="int"/>
                </params>
                <declaration name="value" type="Object" line="133"/>
                <declaration name="cellHasFocus" type="boolean" line="134"/>
                <declaration name="isSelected" type="boolean" line="135"/>
                <declaration name="rendererComponent" type="Component" line="136"/>
                <declaration name="cx" type="int" line="137"/>
                <declaration name="cy" type="int" line="138"/>
                <declaration name="cw" type="int" line="139"/>
                <declaration name="ch" type="int" line="140"/>
                <scope line="141">
                    <declaration name="w" type="int" line="142"/>
                    <scope line="143"/>
                </scope>
            </method>
            <javadoc line="150">
                Paint the rows that intersect the Graphics objects clipRect.  This
                  method calls paintCell as necessary.  Subclasses
                  may want to override these methods.                
                <see>
                    #paintCell                    
                </see>
            </javadoc>
            <method name="paint" type="void" line="156">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="c" type="JComponent"/>
                </params>
                <declaration name="clip" type="Shape" line="157"/>
            </method>
            <method name="paintImpl" type="void" line="162">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="c" type="JComponent"/>
                </params>
                <scope line="165"/>
                <scope line="171"/>
                <declaration name="renderer" type="ListCellRenderer" line="180"/>
                <declaration name="dataModel" type="ListModel" line="181"/>
                <declaration name="selModel" type="ListSelectionModel" line="182"/>
                <declaration name="size" type="int" line="183"/>
                <scope line="184"/>
                <declaration name="paintBounds" type="Rectangle" line="187"/>
                <declaration name="startColumn" type="int" line="188"/>
                <scope line="189"/>
                <scope line="193"/>
                <declaration name="maxY" type="int" line="197"/>
                <declaration name="leadIndex" type="int" line="198"/>
                <declaration name="rowIncrement" type="int" line="199"/>
                <scope line="200">
                    <declaration name="row" type="int" line="201"/>
                    <declaration name="rowCount" type="int" line="202"/>
                    <declaration name="index" type="int" line="203"/>
                    <declaration name="rowBounds" type="Rectangle" line="204"/>
                    <scope line="205"/>
                    <scope line="208"/>
                </scope>
            </method>
            <method name="paintDropLine" type="void" line="220">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
                <declaration name="loc" type="JList.DropLocation" line="221"/>
                <scope line="222"/>
                <declaration name="c" type="Color" line="225"/>
                <scope line="226">
                    <declaration name="rect" type="Rectangle" line="228"/>
                </scope>
            </method>
            <method name="getDropLineRect" type="Rectangle" line="232">
                <params>
                    <param name="loc" type="JList.DropLocation"/>
                </params>
                <declaration name="size" type="int" line="233"/>
                <scope line="234">
                    <declaration name="insets" type="Insets" line="235"/>
                    <scope line="236">
                        <scope line="237"/>
                        <scope line="240"/>
                    </scope>
                    <scope line="244"/>
                </scope>
                <declaration name="rect" type="Rectangle" line="248"/>
                <declaration name="index" type="int" line="249"/>
                <declaration name="decr" type="boolean" line="250"/>
                <scope line="251">
                    <scope line="252"/>
                    <scope line="255">
                        <declaration name="prev" type="Rectangle" line="256"/>
                        <declaration name="me" type="Rectangle" line="257"/>
                        <declaration name="p" type="Point" line="258"/>
                        <scope line="259"/>
                        <scope line="262"/>
                    </scope>
                    <scope line="266">
                        <scope line="269"/>
                        <scope line="272"/>
                    </scope>
                    <scope line="276">
                        <scope line="278"/>
                    </scope>
                    <scope line="282"/>
                    <scope line="285"/>
                </scope>
                <scope line="290">
                    <scope line="291"/>
                    <scope line="296">
                        <declaration name="prev" type="Rectangle" line="297"/>
                        <declaration name="me" type="Rectangle" line="298"/>
                        <declaration name="p" type="Point" line="299"/>
                        <scope line="300"/>
                        <scope line="305"/>
                    </scope>
                    <scope line="309"/>
                    <scope line="312"/>
                </scope>
                <scope line="317">
                    <scope line="318"/>
                    <scope line="323"/>
                    <scope line="326"/>
                </scope>
            </method>
            <javadoc line="333">
                Returns the baseline.                
                <throws>
                    NullPointerException {@inheritDoc}                    
                </throws>
                <throws>
                    IllegalArgumentException {@inheritDoc}                    
                </throws>
                <see>
                    javax.swing.JComponent#getBaseline(int,int)                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getBaseline" type="int" line="340">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <declaration name="rowHeight" type="int" line="342"/>
                <declaration name="lafDefaults" type="UIDefaults" line="343"/>
                <declaration name="renderer" type="Component" line="344"/>
                <scope line="345">
                    <declaration name="lcr" type="ListCellRenderer" line="346"/>
                    <scope line="347"/>
                </scope>
                <scope line="354"/>
            </method>
            <javadoc line="359">
                Returns an enum indicating how the baseline of the component
                  changes as the size changes.                
                <throws>
                    NullPointerException {@inheritDoc}                    
                </throws>
                <see>
                    javax.swing.JComponent#getBaseline(int,int)                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getBaselineResizeBehavior" type="Component.BaselineResizeBehavior" line="366">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <javadoc line="370">
                The preferredSize of the list depends upon the layout orientation.
                  &lt;table summary=&quot;Describes the preferred size for each layout orientation&quot;&gt;
                  &lt;tr&gt;&lt;th&gt;Layout Orientation&lt;/th&gt;&lt;th&gt;Preferred Size&lt;/th&gt;&lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;JList.VERTICAL
                  &lt;td&gt;The preferredSize of the list is total height of the rows
                  and the maximum width of the cells.  If JList.fixedCellHeight
                  is specified then the total height of the rows is just
                  (cellVerticalMargins + fixedCellHeight)  model.getSize() where
                  rowVerticalMargins is the space we allocate for drawing
                  the yellow focus outline.  Similarly if fixedCellWidth is
                  specified then we just use that.
                  &lt;/td&gt;
                  &lt;tr&gt;
                  &lt;td&gt;JList.VERTICAL_WRAP
                  &lt;td&gt;If the visible row count is greater than zero, the preferredHeight
                  is the maximum cell height  visibleRowCount. If the visible row
                  count is &lt;= 0, the preferred height is either the current height
                  of the list, or the maximum cell height, whichever is
                  bigger. The preferred width is than the maximum cell width 
                  number of columns needed. Where the number of columns needs is
                  list.height / max cell height. Max cell height is either the fixed
                  cell height, or is determined by iterating through all the cells
                  to find the maximum height from the ListCellRenderer.
                  &lt;tr&gt;
                  &lt;td&gt;JList.HORIZONTAL_WRAP
                  &lt;td&gt;If the visible row count is greater than zero, the preferredHeight
                  is the maximum cell height  adjustedRowCount.  Where
                  visibleRowCount is used to determine the number of columns.
                  Because this lays out horizontally the number of rows is
                  then determined from the column count.  For example, lets say
                  you have a model with 10 items and the visible row count is 8.
                  The number of columns needed to display this is 2, but you no
                  longer need 8 rows to display this, you only need 5, thus
                  the adjustedRowCount is 5.
                  &lt;p&gt;If the visible row
                  count is &lt;= 0, the preferred height is dictated by the
                  number of columns, which will be as many as can fit in the width
                  of the &lt;code&gt;JList&lt;/code&gt; (width / max cell width), with at
                  least one column.  The preferred height then becomes the
                  model size / number of columns  maximum cell height.
                  Max cell height is either the fixed
                  cell height, or is determined by iterating through all the cells
                  to find the maximum height from the ListCellRenderer.
                  &lt;/table&gt;
                  The above specifies the raw preferred width and height. The resulting
                  preferred width is the above width + insets.left + insets.right and
                  the resulting preferred height is the above height + insets.top +
                  insets.bottom. Where the &lt;code&gt;Insets&lt;/code&gt; are determined from
                  &lt;code&gt;list.getInsets()&lt;/code&gt;.                
                <param>
                    c The JList component.                    
                </param>
                <return>
                    The total size of the list.                    
                </return>
            </javadoc>
            <method name="getPreferredSize" type="Dimension" line="424">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <declaration name="lastRow" type="int" line="426"/>
                <scope line="427"/>
                <declaration name="insets" type="Insets" line="430"/>
                <declaration name="width" type="int" line="431"/>
                <declaration name="height" type="int" line="432"/>
                <scope line="433"/>
                <scope line="436">
                    <declaration name="bounds" type="Rectangle" line="437"/>
                    <scope line="438"/>
                    <scope line="441"/>
                </scope>
            </method>
            <javadoc line="447">
                Selected the previous row and force it to be visible.                
                <see>
                    JList#ensureIndexIsVisible                    
                </see>
            </javadoc>
            <method name="selectPreviousIndex" type="void" line="451">
                <declaration name="s" type="int" line="452"/>
                <scope line="453"/>
            </method>
            <javadoc line="459">
                Selected the previous row and force it to be visible.                
                <see>
                    JList#ensureIndexIsVisible                    
                </see>
            </javadoc>
            <method name="selectNextIndex" type="void" line="463">
                <declaration name="s" type="int" line="464"/>
                <scope line="465"/>
            </method>
            <javadoc line="471">
                Registers the keyboard bindings on the &lt;code&gt;JList&lt;/code&gt; that the
                  &lt;code&gt;BasicListUI&lt;/code&gt; is associated with. This method is called at
                  installUI() time.                
                <see>
                    #installUI                    
                </see>
            </javadoc>
            <method name="installKeyboardActions" type="void" line="477">
                <declaration name="inputMap" type="InputMap" line="478"/>
            </method>
            <method name="getInputMap" type="InputMap" line="482">
                <params>
                    <param name="condition" type="int"/>
                </params>
                <scope line="483">
                    <declaration name="keyMap" type="InputMap" line="484"/>
                    <declaration name="rtlKeyMap" type="InputMap" line="485"/>
                    <scope line="486"/>
                    <scope line="489"/>
                </scope>
            </method>
            <javadoc line="496">
                Unregisters keyboard actions installed from
                  &lt;code&gt;installKeyboardActions&lt;/code&gt;.
                  This method is called at uninstallUI() time - subclassess should
                  ensure that all of the keyboard actions registered at installUI
                  time are removed here.                
                <see>
                    #installUI                    
                </see>
            </javadoc>
            <method name="uninstallKeyboardActions" type="void" line="504"/>
            <javadoc line="508">
                Creates and installs the listeners for the JList, its model, and its
                  selectionModel.  This method is called at installUI() time.                
                <see>
                    #installUI                    
                </see>
                <see>
                    #uninstallListeners                    
                </see>
            </javadoc>
            <method name="installListeners" type="void" line="514">
                <declaration name="th" type="TransferHandler" line="515"/>
                <scope line="516">
                    <scope line="518"/>
                </scope>
                <declaration name="model" type="ListModel" line="532"/>
                <scope line="533"/>
                <declaration name="selectionModel" type="ListSelectionModel" line="536"/>
                <scope line="537"/>
            </method>
            <javadoc line="541">
                Removes the listeners from the JList, its model, and its
                  selectionModel.  All of the listener fields, are reset to
                  null here.  This method is called at uninstallUI() time,
                  it should be kept in sync with installListeners.                
                <see>
                    #uninstallUI                    
                </see>
                <see>
                    #installListeners                    
                </see>
            </javadoc>
            <method name="uninstallListeners" type="void" line="549">
                <declaration name="model" type="ListModel" line="555"/>
                <scope line="556"/>
                <declaration name="selectionModel" type="ListSelectionModel" line="559"/>
                <scope line="560"/>
            </method>
            <javadoc line="570">
                Initializes list properties such as font, foreground, and background,
                  and adds the CellRendererPane. The font, foreground, and background
                  properties are only set if their current value is either null
                  or a UIResource, other properties are set if the current
                  value is null.                
                <see>
                    #uninstallDefaults                    
                </see>
                <see>
                    #installUI                    
                </see>
                <see>
                    CellRendererPane                    
                </see>
            </javadoc>
            <method name="installDefaults" type="void" line="580">
                <scope line="585"/>
                <declaration name="sbg" type="Color" line="588"/>
                <scope line="589"/>
                <declaration name="sfg" type="Color" line="592"/>
                <scope line="593"/>
                <declaration name="l" type="Long" line="596"/>
            </method>
            <method name="updateIsFileList" type="void" line="600">
                <declaration name="b" type="boolean" line="601"/>
                <scope line="602">
                    <declaration name="oldFont" type="Font" line="604"/>
                    <scope line="605">
                        <declaration name="newFont" type="Font" line="606"/>
                        <scope line="607"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="613">
                Sets the list properties that have not been explicitly overridden to{@code null}. A property is considered overridden if its current value
                  is not a {@code UIResource}.                
                <see>
                    #installDefaults                    
                </see>
                <see>
                    #uninstallUI                    
                </see>
                <see>
                    CellRendererPane                    
                </see>
            </javadoc>
            <method name="uninstallDefaults" type="void" line="620">
                <scope line="622"/>
                <scope line="625"/>
                <scope line="628"/>
                <scope line="631"/>
                <scope line="634"/>
                <scope line="637"/>
                <scope line="640"/>
            </method>
            <javadoc line="644">
                Initializes &lt;code&gt;this.list&lt;/code&gt; by calling &lt;code&gt;installDefaults()&lt;/code&gt;,
                  &lt;code&gt;installListeners()&lt;/code&gt;, and &lt;code&gt;installKeyboardActions()&lt;/code&gt;
                  in order.                
                <see>
                    #installDefaults                    
                </see>
                <see>
                    #installListeners                    
                </see>
                <see>
                    #installKeyboardActions                    
                </see>
            </javadoc>
            <method name="installUI" type="void" line="652">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <javadoc line="664">
                Uninitializes &lt;code&gt;this.list&lt;/code&gt; by calling &lt;code&gt;uninstallListeners()&lt;/code&gt;,
                  &lt;code&gt;uninstallKeyboardActions()&lt;/code&gt;, and &lt;code&gt;uninstallDefaults()&lt;/code&gt;
                  in order.  Sets this.list to null.                
                <see>
                    #uninstallListeners                    
                </see>
                <see>
                    #uninstallKeyboardActions                    
                </see>
                <see>
                    #uninstallDefaults                    
                </see>
            </javadoc>
            <method name="uninstallUI" type="void" line="672">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <javadoc line="683">
                Returns a new instance of BasicListUI.  BasicListUI delegates are
                  allocated one per JList.                
                <return>
                    A new ListUI implementation for the Windows look and feel.                    
                </return>
            </javadoc>
            <method name="createUI" type="ComponentUI" line="688">
                <params>
                    <param name="list" type="JComponent"/>
                </params>
            </method>
            <javadoc line="691">
                {@inheritDoc}                
                <throws>
                    NullPointerException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="locationToIndex" type="int" line="695">
                <params>
                    <param name="list" type="JList"/>
                    <param name="location" type="Point"/>
                </params>
            </method>
            <javadoc line="699">
                {@inheritDoc}                
            </javadoc>
            <method name="indexToLocation" type="Point" line="702">
                <params>
                    <param name="list" type="JList"/>
                    <param name="index" type="int"/>
                </params>
                <declaration name="rect" type="Rectangle" line="704"/>
                <scope line="705"/>
            </method>
            <javadoc line="710">
                {@inheritDoc}                
            </javadoc>
            <method name="getCellBounds" type="Rectangle" line="713">
                <params>
                    <param name="list" type="JList"/>
                    <param name="index1" type="int"/>
                    <param name="index2" type="int"/>
                </params>
                <declaration name="minIndex" type="int" line="715"/>
                <declaration name="maxIndex" type="int" line="716"/>
                <scope line="717"/>
                <declaration name="minBounds" type="Rectangle" line="720"/>
                <scope line="721"/>
                <scope line="724"/>
                <declaration name="maxBounds" type="Rectangle" line="727"/>
                <scope line="728">
                    <scope line="729">
                        <declaration name="minRow" type="int" line="730"/>
                        <declaration name="maxRow" type="int" line="731"/>
                        <scope line="732"/>
                    </scope>
                    <scope line="737"/>
                </scope>
            </method>
            <javadoc line="745">
                Gets the bounds of the specified model index, returning the resulting
                  bounds, or null if &lt;code&gt;index&lt;/code&gt; is not valid.                
            </javadoc>
            <method name="getCellBounds" type="Rectangle" line="749">
                <params>
                    <param name="list" type="JList"/>
                    <param name="index" type="int"/>
                </params>
                <declaration name="row" type="int" line="751"/>
                <declaration name="column" type="int" line="752"/>
                <scope line="753"/>
                <declaration name="insets" type="Insets" line="756"/>
                <declaration name="x" type="int" line="757"/>
                <declaration name="w" type="int" line="758"/>
                <declaration name="y" type="int" line="759"/>
                <declaration name="h" type="int" line="760"/>
                <scope line="764"/>
                <scope line="767"/>
                <scope line="775"/>
                <scope line="778"/>
                <scope line="781">
                    <scope line="782"/>
                </scope>
            </method>
            <javadoc line="792">
                Returns the height of the specified row based on the current layout.                
                <return>
                    The specified row height or -1 if row isn&apos;t valid.                    
                </return>
                <see>
                    #convertYToRow                    
                </see>
                <see>
                    #convertRowToY                    
                </see>
                <see>
                    #updateLayoutState                    
                </see>
            </javadoc>
            <method name="getRowHeight" type="int" line="799">
                <params>
                    <param name="row" type="int"/>
                </params>
            </method>
            <javadoc line="802">
                Convert the JList relative coordinate to the row that contains it,
                  based on the current layout.  If y0 doesn&apos;t fall within any row,
                  return -1.                
                <return>
                    The row that contains y0, or -1.                    
                </return>
                <see>
                    #getRowHeight                    
                </see>
                <see>
                    #updateLayoutState                    
                </see>
            </javadoc>
            <method name="convertYToRow" type="int" line="810">
                <params>
                    <param name="y0" type="int"/>
                </params>
            </method>
            <javadoc line="813">
                Return the JList relative Y coordinate of the origin of the specified
                  row or -1 if row isn&apos;t valid.                
                <return>
                    The Y coordinate of the origin of row, or -1.                    
                </return>
                <see>
                    #getRowHeight                    
                </see>
                <see>
                    #updateLayoutState                    
                </see>
            </javadoc>
            <method name="convertRowToY" type="int" line="820">
                <params>
                    <param name="row" type="int"/>
                </params>
                <scope line="821"/>
                <declaration name="bounds" type="Rectangle" line="824"/>
            </method>
            <javadoc line="827">
                Returns the height of the cell at the passed in location.                
            </javadoc>
            <method name="getHeight" type="int" line="830">
                <params>
                    <param name="column" type="int"/>
                    <param name="row" type="int"/>
                </params>
                <scope line="831"/>
                <scope line="834"/>
                <scope line="837"/>
            </method>
            <javadoc line="842">
                Returns the row at location x/y.                
                <param>
                    closest If true and the location doesn&apos;t exactly match a
                      particular location, this will return the closest row.                    
                </param>
            </javadoc>
            <method name="convertLocationToRow" type="int" line="847">
                <params>
                    <param name="x" type="int"/>
                    <param name="y0" type="int"/>
                    <param name="closest" type="boolean"/>
                </params>
                <declaration name="size" type="int" line="848"/>
                <scope line="849"/>
                <declaration name="insets" type="Insets" line="852"/>
                <scope line="853">
                    <declaration name="row" type="int" line="854"/>
                    <scope line="855">
                        <scope line="856"/>
                        <scope line="859"/>
                    </scope>
                </scope>
                <scope line="865"/>
                <scope line="868">
                    <declaration name="y" type="int" line="869"/>
                    <declaration name="row" type="int" line="870"/>
                    <scope line="871"/>
                    <declaration name="i" type="int" line="874"/>
                    <scope line="875">
                        <scope line="876"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="885">
                Returns the closest row that starts at the specified y-location
                  in the passed in column.                
            </javadoc>
            <method name="convertLocationToRowInColumn" type="int" line="889">
                <params>
                    <param name="y" type="int"/>
                    <param name="column" type="int"/>
                </params>
                <declaration name="x" type="int" line="890"/>
                <scope line="891">
                    <scope line="892"/>
                    <scope line="895"/>
                </scope>
            </method>
            <javadoc line="901">
                Returns the closest location to the model index of the passed in
                  location.                
            </javadoc>
            <method name="convertLocationToModel" type="int" line="905">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <declaration name="row" type="int" line="906"/>
                <declaration name="column" type="int" line="907"/>
                <scope line="908"/>
            </method>
            <javadoc line="913">
                Returns the number of rows in the given column.                
            </javadoc>
            <method name="getRowCount" type="int" line="916">
                <params>
                    <param name="column" type="int"/>
                </params>
                <scope line="917"/>
                <scope line="920"/>
                <scope line="923"/>
                <scope line="926">
                    <scope line="927"/>
                </scope>
                <declaration name="diff" type="int" line="932"/>
                <scope line="933"/>
            </method>
            <javadoc line="938">
                Returns the model index for the specified display location.
                  If &lt;code&gt;column&lt;/code&gt;x&lt;code&gt;row&lt;/code&gt; is beyond the length of the
                  model, this will return the model size - 1.                
            </javadoc>
            <method name="getModelIndex" type="int" line="943">
                <params>
                    <param name="column" type="int"/>
                    <param name="row" type="int"/>
                </params>
            </method>
            <javadoc line="953">
                Returns the closest column to the passed in location.                
            </javadoc>
            <method name="convertLocationToColumn" type="int" line="956">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <scope line="957">
                    <scope line="958"/>
                    <declaration name="insets" type="Insets" line="961"/>
                    <declaration name="col" type="int" line="962"/>
                    <scope line="963"/>
                    <scope line="966"/>
                    <scope line="969"/>
                    <scope line="972"/>
                </scope>
            </method>
            <javadoc line="979">
                Returns the row that the model index &lt;code&gt;index&lt;/code&gt; will be
                  displayed in..                
            </javadoc>
            <method name="convertModelToRow" type="int" line="983">
                <params>
                    <param name="index" type="int"/>
                </params>
                <declaration name="size" type="int" line="984"/>
                <scope line="985"/>
                <scope line="988">
                    <scope line="989"/>
                </scope>
            </method>
            <javadoc line="996">
                Returns the column that the model index &lt;code&gt;index&lt;/code&gt; will be
                  displayed in.                
            </javadoc>
            <method name="convertModelToColumn" type="int" line="1000">
                <params>
                    <param name="index" type="int"/>
                </params>
                <declaration name="size" type="int" line="1001"/>
                <scope line="1002"/>
                <scope line="1005">
                    <scope line="1006"/>
                </scope>
            </method>
            <javadoc line="1013">
                If updateLayoutStateNeeded is non zero, call updateLayoutState() and reset
                  updateLayoutStateNeeded.  This method should be called by methods
                  before doing any computation based on the geometry of the list.
                  For example it&apos;s the first call in paint() and getPreferredSize().                
                <see>
                    #updateLayoutState                    
                </see>
            </javadoc>
            <method name="maybeUpdateLayoutState" type="void" line="1020">
                <scope line="1021"/>
            </method>
            <javadoc line="1026">
                Recompute the value of cellHeight or cellHeights based
                  and cellWidth, based on the current font and the current
                  values of fixedCellWidth, fixedCellHeight, and prototypeCellValue.                
                <see>
                    #maybeUpdateLayoutState                    
                </see>
            </javadoc>
            <method name="updateLayoutState" type="void" line="1032">
                <declaration name="fixedCellHeight" type="int" line="1033"/>
                <declaration name="fixedCellWidth" type="int" line="1034"/>
                <scope line="1036"/>
                <scope line="1040"/>
                <scope line="1044">
                    <declaration name="dataModel" type="ListModel" line="1045"/>
                    <declaration name="dataModelSize" type="int" line="1046"/>
                    <declaration name="renderer" type="ListCellRenderer" line="1047"/>
                    <scope line="1048">
                        <scope line="1049">
                            <declaration name="value" type="Object" line="1050"/>
                            <declaration name="c" type="Component" line="1051"/>
                            <declaration name="cellSize" type="Dimension" line="1053"/>
                            <scope line="1054"/>
                            <scope line="1057"/>
                        </scope>
                    </scope>
                    <scope line="1062">
                        <scope line="1063"/>
                        <scope line="1066"/>
                        <scope line="1069"/>
                    </scope>
                </scope>
                <scope line="1075"/>
            </method>
            <javadoc line="1079">
                Invoked when the list is layed out horizontally to determine how
                  many columns to create.
                  &lt;p&gt;
                  This updates the &lt;code&gt;rowsPerColumn, &lt;/code&gt;&lt;code&gt;columnCount&lt;/code&gt;,
                  &lt;code&gt;preferredHeight&lt;/code&gt; and potentially &lt;code&gt;cellHeight&lt;/code&gt;
                  instance variables.                
            </javadoc>
            <method name="updateHorizontalLayoutState" type="void" line="1087">
                <params>
                    <param name="fixedCellWidth" type="int"/>
                    <param name="fixedCellHeight" type="int"/>
                </params>
                <declaration name="visRows" type="int" line="1088"/>
                <declaration name="dataModelSize" type="int" line="1089"/>
                <declaration name="insets" type="Insets" line="1090"/>
                <scope line="1093"/>
                <declaration name="height" type="int" line="1098"/>
                <scope line="1099"/>
                <scope line="1102">
                    <declaration name="maxHeight" type="int" line="1103"/>
                    <scope line="1104">
                        <scope line="1106"/>
                    </scope>
                </scope>
                <scope line="1114">
                    <scope line="1117"/>
                    <scope line="1120">
                        <scope line="1122"/>
                    </scope>
                </scope>
                <scope line="1127">
                    <scope line="1130"/>
                </scope>
                <scope line="1134">
                    <scope line="1137"/>
                </scope>
            </method>
            <method name="getHandler" type="Handler" line="1143">
                <scope line="1144"/>
            </method>
            <class name="MouseInputHandler" line="1149">
                <implements interface="MouseInputListener"/>
                <javadoc line="1149">
                    Mouse input, and focus handling for JList.  An instance of this
                      class is added to the appropriate java.awt.Component lists
                      at installUI() time.  Note keyboard input is handled with JComponent
                      KeyboardActions, see installKeyboardActions().
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      Serialized objects of this class will not be compatible with
                      future Swing releases. The current serialization support is
                      appropriate for short term storage or RMI between applications running
                      the same version of Swing.  As of 1.4, support for long term storage
                      of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                      has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                      Please see {@link java.beans.XMLEncoder}.                    
                    <see>
                        #createMouseInputListener                        
                    </see>
                    <see>
                        #installKeyboardActions                        
                    </see>
                    <see>
                        #installUI                        
                    </see>
                </javadoc>
                <method name="mouseClicked" type="void" line="1168">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
                <method name="mouseEntered" type="void" line="1171">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
                <method name="mouseExited" type="void" line="1174">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
                <method name="mousePressed" type="void" line="1177">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
                <method name="mouseDragged" type="void" line="1180">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
                <method name="mouseMoved" type="void" line="1183">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
                <method name="mouseReleased" type="void" line="1186">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
            </class>
            <javadoc line="1190">
                Creates a delegate that implements MouseInputListener.
                  The delegate is added to the corresponding java.awt.Component listener
                  lists at installUI() time. Subclasses can override this method to return
                  a custom MouseInputListener, e.g.
                  &lt;pre&gt;
                  class MyListUI extends BasicListUI {
                  protected MouseInputListener &lt;b&gt;createMouseInputListener&lt;/b&gt;() {
                  return new MyMouseInputHandler();
                  }
                  public class MyMouseInputHandler extends MouseInputHandler {
                  public void mouseMoved(MouseEvent e) {
                  // do some extra work when the mouse moves
                  super.mouseMoved(e);
                  }
                  }
                  }
                  &lt;/pre&gt;                
                <see>
                    MouseInputHandler                    
                </see>
                <see>
                    #installUI                    
                </see>
            </javadoc>
            <method name="createMouseInputListener" type="MouseInputListener" line="1211"/>
            <class name="FocusHandler" line="1214">
                <implements interface="FocusListener"/>
                <javadoc line="1214">
                    This class should be treated as a &amp;quot;protected&amp;quot; inner class.
                      Instantiate it only within subclasses of {@code BasicListUI}.                    
                </javadoc>
                <method name="repaintCellFocus" type="void" line="1219"/>
                <method name="focusGained" type="void" line="1222">
                    <params>
                        <param name="e" type="FocusEvent"/>
                    </params>
                </method>
                <method name="focusLost" type="void" line="1225">
                    <params>
                        <param name="e" type="FocusEvent"/>
                    </params>
                </method>
            </class>
            <method name="createFocusListener" type="FocusListener" line="1229"/>
            <class name="ListSelectionHandler" line="1232">
                <implements interface="ListSelectionListener"/>
                <javadoc line="1232">
                    The ListSelectionListener that&apos;s added to the JLists selection
                      model at installUI time, and whenever the JList.selectionModel property
                      changes.  When the selection changes we repaint the affected rows.
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      Serialized objects of this class will not be compatible with
                      future Swing releases. The current serialization support is
                      appropriate for short term storage or RMI between applications running
                      the same version of Swing.  As of 1.4, support for long term storage
                      of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                      has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                      Please see {@link java.beans.XMLEncoder}.                    
                    <see>
                        #createListSelectionListener                        
                    </see>
                    <see>
                        #getCellBounds                        
                    </see>
                    <see>
                        #installUI                        
                    </see>
                </javadoc>
                <method name="valueChanged" type="void" line="1250">
                    <params>
                        <param name="e" type="ListSelectionEvent"/>
                    </params>
                </method>
            </class>
            <javadoc line="1254">
                Creates an instance of ListSelectionHandler that&apos;s added to
                  the JLists by selectionModel as needed.  Subclasses can override
                  this method to return a custom ListSelectionListener, e.g.
                  &lt;pre&gt;
                  class MyListUI extends BasicListUI {
                  protected ListSelectionListener &lt;b&gt;createListSelectionListener&lt;/b&gt;() {
                  return new MySelectionListener();
                  }
                  public class MySelectionListener extends ListSelectionHandler {
                  public void valueChanged(ListSelectionEvent e) {
                  // do some extra work when the selection changes
                  super.valueChange(e);
                  }
                  }
                  }
                  &lt;/pre&gt;                
                <see>
                    ListSelectionHandler                    
                </see>
                <see>
                    #installUI                    
                </see>
            </javadoc>
            <method name="createListSelectionListener" type="ListSelectionListener" line="1274"/>
            <method name="redrawList" type="void" line="1277"/>
            <class name="ListDataHandler" line="1281">
                <implements interface="ListDataListener"/>
                <javadoc line="1281">
                    The ListDataListener that&apos;s added to the JLists model at
                      installUI time, and whenever the JList.model property changes.
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      Serialized objects of this class will not be compatible with
                      future Swing releases. The current serialization support is
                      appropriate for short term storage or RMI between applications running
                      the same version of Swing.  As of 1.4, support for long term storage
                      of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                      has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                      Please see {@link java.beans.XMLEncoder}.                    
                    <see>
                        JList#getModel                        
                    </see>
                    <see>
                        #maybeUpdateLayoutState                        
                    </see>
                    <see>
                        #createListDataListener                        
                    </see>
                    <see>
                        #installUI                        
                    </see>
                </javadoc>
                <method name="intervalAdded" type="void" line="1299">
                    <params>
                        <param name="e" type="ListDataEvent"/>
                    </params>
                </method>
                <method name="intervalRemoved" type="void" line="1302">
                    <params>
                        <param name="e" type="ListDataEvent"/>
                    </params>
                </method>
                <method name="contentsChanged" type="void" line="1305">
                    <params>
                        <param name="e" type="ListDataEvent"/>
                    </params>
                </method>
            </class>
            <javadoc line="1309">
                Creates an instance of ListDataListener that&apos;s added to
                  the JLists by model as needed.  Subclasses can override
                  this method to return a custom ListDataListener, e.g.
                  &lt;pre&gt;
                  class MyListUI extends BasicListUI {
                  protected ListDataListener &lt;b&gt;createListDataListener&lt;/b&gt;() {
                  return new MyListDataListener();
                  }
                  public class MyListDataListener extends ListDataHandler {
                  public void contentsChanged(ListDataEvent e) {
                  // do some extra work when the models contents change
                  super.contentsChange(e);
                  }
                  }
                  }
                  &lt;/pre&gt;                
                <see>
                    ListDataListener                    
                </see>
                <see>
                    JList#getModel                    
                </see>
                <see>
                    #installUI                    
                </see>
            </javadoc>
            <method name="createListDataListener" type="ListDataListener" line="1330"/>
            <class name="PropertyChangeHandler" line="1333">
                <implements interface="PropertyChangeListener"/>
                <javadoc line="1333">
                    The PropertyChangeListener that&apos;s added to the JList at
                      installUI time.  When the value of a JList property that
                      affects layout changes, we set a bit in updateLayoutStateNeeded.
                      If the JLists model changes we additionally remove our listeners
                      from the old model.  Likewise for the JList selectionModel.
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      Serialized objects of this class will not be compatible with
                      future Swing releases. The current serialization support is
                      appropriate for short term storage or RMI between applications running
                      the same version of Swing.  As of 1.4, support for long term storage
                      of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                      has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                      Please see {@link java.beans.XMLEncoder}.                    
                    <see>
                        #maybeUpdateLayoutState                        
                    </see>
                    <see>
                        #createPropertyChangeListener                        
                    </see>
                    <see>
                        #installUI                        
                    </see>
                </javadoc>
                <method name="propertyChange" type="void" line="1353">
                    <params>
                        <param name="e" type="PropertyChangeEvent"/>
                    </params>
                </method>
            </class>
            <javadoc line="1357">
                Creates an instance of PropertyChangeHandler that&apos;s added to
                  the JList by installUI().  Subclasses can override this method
                  to return a custom PropertyChangeListener, e.g.
                  &lt;pre&gt;
                  class MyListUI extends BasicListUI {
                  protected PropertyChangeListener &lt;b&gt;createPropertyChangeListener&lt;/b&gt;() {
                  return new MyPropertyChangeListener();
                  }
                  public class MyPropertyChangeListener extends PropertyChangeHandler {
                  public void propertyChange(PropertyChangeEvent e) {
                  if (e.getPropertyName().equals(&quot;model&quot;)) {
                  // do some extra work when the model changes
                  }
                  super.propertyChange(e);
                  }
                  }
                  }
                  &lt;/pre&gt;                
                <see>
                    PropertyChangeListener                    
                </see>
                <see>
                    #installUI                    
                </see>
            </javadoc>
            <method name="createPropertyChangeListener" type="PropertyChangeListener" line="1379"/>
            <declaration name="CHANGE_LEAD" type="int" line="1382"/>
            <javadoc line="1382">
                Used by IncrementLeadSelectionAction. Indicates the action should
                  change the lead, and not select it.                
            </javadoc>
            <declaration name="CHANGE_SELECTION" type="int" line="1387"/>
            <javadoc line="1387">
                Used by IncrementLeadSelectionAction. Indicates the action should
                  change the selection and lead.                
            </javadoc>
            <declaration name="EXTEND_SELECTION" type="int" line="1392"/>
            <javadoc line="1392">
                Used by IncrementLeadSelectionAction. Indicates the action should
                  extend the selection from the anchor to the next index.                
            </javadoc>
            <class name="Actions" line="1397">
                <extends class="UIAction"/>
                <declaration name="SELECT_PREVIOUS_COLUMN" type="String" line="1398"/>
                <declaration name="SELECT_PREVIOUS_COLUMN_EXTEND" type="String" line="1399"/>
                <declaration name="SELECT_PREVIOUS_COLUMN_CHANGE_LEAD" type="String" line="1400"/>
                <declaration name="SELECT_NEXT_COLUMN" type="String" line="1401"/>
                <declaration name="SELECT_NEXT_COLUMN_EXTEND" type="String" line="1402"/>
                <declaration name="SELECT_NEXT_COLUMN_CHANGE_LEAD" type="String" line="1403"/>
                <declaration name="SELECT_PREVIOUS_ROW" type="String" line="1404"/>
                <declaration name="SELECT_PREVIOUS_ROW_EXTEND" type="String" line="1405"/>
                <declaration name="SELECT_PREVIOUS_ROW_CHANGE_LEAD" type="String" line="1406"/>
                <declaration name="SELECT_NEXT_ROW" type="String" line="1407"/>
                <declaration name="SELECT_NEXT_ROW_EXTEND" type="String" line="1408"/>
                <declaration name="SELECT_NEXT_ROW_CHANGE_LEAD" type="String" line="1409"/>
                <declaration name="SELECT_FIRST_ROW" type="String" line="1410"/>
                <declaration name="SELECT_FIRST_ROW_EXTEND" type="String" line="1411"/>
                <declaration name="SELECT_FIRST_ROW_CHANGE_LEAD" type="String" line="1412"/>
                <declaration name="SELECT_LAST_ROW" type="String" line="1413"/>
                <declaration name="SELECT_LAST_ROW_EXTEND" type="String" line="1414"/>
                <declaration name="SELECT_LAST_ROW_CHANGE_LEAD" type="String" line="1415"/>
                <declaration name="SCROLL_UP" type="String" line="1416"/>
                <declaration name="SCROLL_UP_EXTEND" type="String" line="1417"/>
                <declaration name="SCROLL_UP_CHANGE_LEAD" type="String" line="1418"/>
                <declaration name="SCROLL_DOWN" type="String" line="1419"/>
                <declaration name="SCROLL_DOWN_EXTEND" type="String" line="1420"/>
                <declaration name="SCROLL_DOWN_CHANGE_LEAD" type="String" line="1421"/>
                <declaration name="SELECT_ALL" type="String" line="1422"/>
                <declaration name="CLEAR_SELECTION" type="String" line="1423"/>
                <declaration name="ADD_TO_SELECTION" type="String" line="1424"/>
                <declaration name="TOGGLE_AND_ANCHOR" type="String" line="1425"/>
                <declaration name="EXTEND_TO" type="String" line="1426"/>
                <declaration name="MOVE_SELECTION_TO" type="String" line="1427"/>
                <method name="Actions" type="constructor" line="1428">
                    <params>
                        <param name="name" type="String"/>
                    </params>
                </method>
                <method name="actionPerformed" type="void" line="1431">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                    <declaration name="name" type="String" line="1432"/>
                    <declaration name="list" type="JList" line="1433"/>
                    <declaration name="ui" type="BasicListUI" line="1434"/>
                    <scope line="1435"/>
                    <scope line="1438"/>
                    <scope line="1441"/>
                    <scope line="1444"/>
                    <scope line="1447"/>
                    <scope line="1450"/>
                    <scope line="1453"/>
                    <scope line="1456"/>
                    <scope line="1459"/>
                    <scope line="1462"/>
                    <scope line="1465"/>
                    <scope line="1468"/>
                    <scope line="1471"/>
                    <scope line="1474"/>
                    <scope line="1477"/>
                    <scope line="1480"/>
                    <scope line="1483"/>
                    <scope line="1486"/>
                    <scope line="1489"/>
                    <scope line="1492"/>
                    <scope line="1495"/>
                    <scope line="1498"/>
                    <scope line="1501"/>
                    <scope line="1504"/>
                    <scope line="1507"/>
                    <scope line="1510"/>
                    <scope line="1513">
                        <declaration name="index" type="int" line="1514"/>
                        <scope line="1515">
                            <declaration name="oldAnchor" type="int" line="1516"/>
                        </scope>
                    </scope>
                    <scope line="1523">
                        <declaration name="index" type="int" line="1524"/>
                        <scope line="1525"/>
                        <scope line="1528"/>
                    </scope>
                    <scope line="1532"/>
                    <scope line="1535"/>
                </method>
                <method name="isEnabled" type="boolean" line="1539">
                    <params>
                        <param name="c" type="Object"/>
                    </params>
                    <declaration name="name" type="Object" line="1540"/>
                    <scope line="1541"/>
                </method>
                <method name="clearSelection" type="void" line="1546">
                    <params>
                        <param name="list" type="JList"/>
                    </params>
                </method>
                <method name="selectAll" type="void" line="1549">
                    <params>
                        <param name="list" type="JList"/>
                    </params>
                    <declaration name="size" type="int" line="1550"/>
                    <scope line="1551">
                        <declaration name="lsm" type="ListSelectionModel" line="1552"/>
                        <declaration name="lead" type="int" line="1553"/>
                        <scope line="1554">
                            <scope line="1555">
                                <declaration name="min" type="int" line="1556"/>
                            </scope>
                        </scope>
                        <scope line="1562">
                            <declaration name="anchor" type="int" line="1564"/>
                        </scope>
                    </scope>
                </method>
                <method name="getNextPageIndex" type="int" line="1571">
                    <params>
                        <param name="list" type="JList"/>
                        <param name="direction" type="int"/>
                    </params>
                    <scope line="1572"/>
                    <declaration name="index" type="int" line="1575"/>
                    <declaration name="visRect" type="Rectangle" line="1576"/>
                    <declaration name="lsm" type="ListSelectionModel" line="1577"/>
                    <declaration name="lead" type="int" line="1578"/>
                    <declaration name="leadRect" type="Rectangle" line="1579"/>
                    <scope line="1580">
                        <scope line="1581"/>
                        <scope line="1584">
                            <declaration name="p" type="Point" line="1586"/>
                            <declaration name="cellBounds" type="Rectangle" line="1588"/>
                            <scope line="1589"/>
                            <scope line="1594"/>
                        </scope>
                        <scope line="1599">
                            <declaration name="p" type="Point" line="1601"/>
                            <declaration name="cellBounds" type="Rectangle" line="1603"/>
                            <scope line="1604"/>
                            <scope line="1609"/>
                        </scope>
                    </scope>
                    <scope line="1615">
                        <scope line="1616">
                            <declaration name="p" type="Point" line="1617"/>
                            <scope line="1619">
                                <declaration name="cellBounds" type="Rectangle" line="1623"/>
                                <scope line="1624"/>
                                <scope line="1629"/>
                            </scope>
                        </scope>
                        <scope line="1635">
                            <declaration name="p" type="Point" line="1636"/>
                            <declaration name="cellBounds" type="Rectangle" line="1638"/>
                            <scope line="1639"/>
                            <scope line="1645">
                                <scope line="1650"/>
                                <scope line="1655"/>
                            </scope>
                        </scope>
                    </scope>
                </method>
                <method name="changeSelection" type="void" line="1664">
                    <params>
                        <param name="list" type="JList"/>
                        <param name="type" type="int"/>
                        <param name="index" type="int"/>
                        <param name="direction" type="int"/>
                    </params>
                    <scope line="1665">
                        <declaration name="lsm" type="ListSelectionModel" line="1666"/>
                        <scope line="1667"/>
                        <scope line="1671">
                            <declaration name="anchor" type="int" line="1672"/>
                            <scope line="1673"/>
                        </scope>
                        <scope line="1678"/>
                        <scope line="1681"/>
                    </scope>
                </method>
                <javadoc line="1686">
                    When scroll down makes selected index the last completely visible
                      index. When scroll up makes selected index the first visible index.
                      Adjust visible rectangle respect to list&apos;s component orientation.                    
                </javadoc>
                <method name="adjustScrollPositionIfNecessary" type="void" line="1691">
                    <params>
                        <param name="list" type="JList"/>
                        <param name="index" type="int"/>
                        <param name="direction" type="int"/>
                    </params>
                    <scope line="1692"/>
                    <declaration name="cellBounds" type="Rectangle" line="1695"/>
                    <declaration name="visRect" type="Rectangle" line="1696"/>
                    <scope line="1697">
                        <scope line="1698">
                            <scope line="1699">
                                <scope line="1700">
                                    <declaration name="x" type="int" line="1701"/>
                                    <declaration name="startIndex" type="int" line="1702"/>
                                    <declaration name="startRect" type="Rectangle" line="1703"/>
                                    <scope line="1704"/>
                                </scope>
                            </scope>
                            <scope line="1713">
                                <scope line="1714">
                                    <declaration name="x" type="int" line="1715"/>
                                    <declaration name="rightIndex" type="int" line="1716"/>
                                    <declaration name="rightRect" type="Rectangle" line="1717"/>
                                    <scope line="1718"/>
                                </scope>
                                <scope line="1724"/>
                            </scope>
                        </scope>
                        <scope line="1730">
                            <scope line="1731">
                                <declaration name="y" type="int" line="1732"/>
                                <declaration name="startIndex" type="int" line="1733"/>
                                <declaration name="startRect" type="Rectangle" line="1734"/>
                                <scope line="1735"/>
                            </scope>
                            <scope line="1743"/>
                        </scope>
                    </scope>
                </method>
                <method name="getNextColumnIndex" type="int" line="1750">
                    <params>
                        <param name="list" type="JList"/>
                        <param name="ui" type="BasicListUI"/>
                        <param name="amount" type="int"/>
                    </params>
                    <scope line="1751">
                        <declaration name="index" type="int" line="1752"/>
                        <declaration name="size" type="int" line="1753"/>
                        <scope line="1754"/>
                        <scope line="1757"/>
                        <scope line="1760"/>
                        <declaration name="column" type="int" line="1763"/>
                        <declaration name="row" type="int" line="1764"/>
                        <scope line="1766"/>
                        <declaration name="maxRowCount" type="int" line="1769"/>
                        <scope line="1770"/>
                    </scope>
                </method>
                <method name="getNextIndex" type="int" line="1777">
                    <params>
                        <param name="list" type="JList"/>
                        <param name="ui" type="BasicListUI"/>
                        <param name="amount" type="int"/>
                    </params>
                    <declaration name="index" type="int" line="1778"/>
                    <declaration name="size" type="int" line="1779"/>
                    <scope line="1780">
                        <scope line="1781">
                            <scope line="1782"/>
                            <scope line="1785"/>
                        </scope>
                    </scope>
                    <scope line="1790"/>
                    <scope line="1793">
                        <scope line="1794"/>
                    </scope>
                    <scope line="1798"/>
                </method>
            </class>
            <class name="Handler" line="1804">
                <implements interface="FocusListener"/>
                <implements interface="KeyListener"/>
                <implements interface="ListDataListener"/>
                <implements interface="ListSelectionListener"/>
                <implements interface="MouseInputListener"/>
                <implements interface="PropertyChangeListener"/>
                <implements interface="BeforeDrag"/>
                <declaration name="prefix" type="String" line="1805"/>
                <declaration name="typedString" type="String" line="1806"/>
                <declaration name="lastTime" type="long" line="1807"/>
                <javadoc line="1808">
                    Invoked when a key has been typed.
                      Moves the keyboard focus to the first element whose prefix matches the
                      sequence of alphanumeric keys pressed by the user with delay less
                      than value of &lt;code&gt;timeFactor&lt;/code&gt; property (or 1000 milliseconds
                      if it is not defined). Subsequent same key presses move the keyboard
                      focus to the next object that starts with the same letter until another
                      key is pressed, then it is treated as the prefix with appropriate number
                      of the same letters followed by first typed another letter.                    
                </javadoc>
                <method name="keyTyped" type="void" line="1818">
                    <params>
                        <param name="e" type="KeyEvent"/>
                    </params>
                    <declaration name="src" type="JList" line="1819"/>
                    <declaration name="model" type="ListModel" line="1820"/>
                    <scope line="1821"/>
                    <declaration name="startingFromSelection" type="boolean" line="1824"/>
                    <declaration name="c" type="char" line="1825"/>
                    <declaration name="time" type="long" line="1826"/>
                    <declaration name="startIndex" type="int" line="1827"/>
                    <scope line="1828">
                        <scope line="1830"/>
                        <scope line="1833"/>
                    </scope>
                    <scope line="1837"/>
                    <scope line="1843"/>
                    <declaration name="index" type="int" line="1847"/>
                    <scope line="1848"/>
                    <scope line="1852">
                        <scope line="1854"/>
                    </scope>
                </method>
                <javadoc line="1860">
                    Invoked when a key has been pressed.
                      Checks to see if the key event is a navigation key to prevent
                      dispatching these keys for the first letter navigation.                    
                </javadoc>
                <method name="keyPressed" type="void" line="1865">
                    <params>
                        <param name="e" type="KeyEvent"/>
                    </params>
                    <scope line="1866"/>
                </method>
                <javadoc line="1872">
                    Invoked when a key has been released.
                      See the class description for {@link KeyEvent} for a definition of
                      a key released event.                    
                </javadoc>
                <method name="keyReleased" type="void" line="1877">
                    <params>
                        <param name="e" type="KeyEvent"/>
                    </params>
                </method>
                <javadoc line="1879">
                    Returns whether or not the supplied key event maps to a key that is used for
                      navigation.  This is used for optimizing key input by only passing non-
                      navigation keys to the first letter navigation mechanism.                    
                </javadoc>
                <method name="isNavigationKey" type="boolean" line="1884">
                    <params>
                        <param name="event" type="KeyEvent"/>
                    </params>
                    <declaration name="inputMap" type="InputMap" line="1885"/>
                    <declaration name="key" type="KeyStroke" line="1886"/>
                    <scope line="1887"/>
                </method>
                <method name="propertyChange" type="void" line="1892">
                    <params>
                        <param name="e" type="PropertyChangeEvent"/>
                    </params>
                    <declaration name="propertyName" type="String" line="1893"/>
                    <scope line="1894">
                        <declaration name="oldModel" type="ListModel" line="1895"/>
                        <declaration name="newModel" type="ListModel" line="1896"/>
                        <scope line="1897"/>
                        <scope line="1900"/>
                    </scope>
                    <scope line="1906">
                        <declaration name="oldModel" type="ListSelectionModel" line="1907"/>
                        <declaration name="newModel" type="ListSelectionModel" line="1908"/>
                        <scope line="1909"/>
                        <scope line="1912"/>
                    </scope>
                    <scope line="1918"/>
                    <scope line="1922"/>
                    <scope line="1926"/>
                    <scope line="1930"/>
                    <scope line="1934"/>
                    <scope line="1938"/>
                    <scope line="1941"/>
                    <scope line="1944"/>
                    <scope line="1949">
                        <scope line="1950"/>
                    </scope>
                    <scope line="1955">
                        <declaration name="inputMap" type="InputMap" line="1959"/>
                    </scope>
                    <scope line="1962"/>
                    <scope line="1966">
                        <declaration name="oldValue" type="JList.DropLocation" line="1967"/>
                    </scope>
                </method>
                <method name="repaintDropLocation" type="void" line="1972">
                    <params>
                        <param name="loc" type="JList.DropLocation"/>
                    </params>
                    <scope line="1973"/>
                    <declaration name="r" type="Rectangle" line="1976"/>
                    <scope line="1977"/>
                    <scope line="1980"/>
                    <scope line="1983"/>
                </method>
                <method name="intervalAdded" type="void" line="1987">
                    <params>
                        <param name="e" type="ListDataEvent"/>
                    </params>
                    <declaration name="minIndex" type="int" line="1989"/>
                    <declaration name="maxIndex" type="int" line="1990"/>
                    <declaration name="sm" type="ListSelectionModel" line="1991"/>
                    <scope line="1992"/>
                </method>
                <method name="intervalRemoved" type="void" line="1997">
                    <params>
                        <param name="e" type="ListDataEvent"/>
                    </params>
                    <declaration name="sm" type="ListSelectionModel" line="1999"/>
                    <scope line="2000"/>
                </method>
                <method name="contentsChanged" type="void" line="2005">
                    <params>
                        <param name="e" type="ListDataEvent"/>
                    </params>
                </method>
                <method name="valueChanged" type="void" line="2009">
                    <params>
                        <param name="e" type="ListSelectionEvent"/>
                    </params>
                    <declaration name="size" type="int" line="2011"/>
                    <declaration name="firstIndex" type="int" line="2012"/>
                    <declaration name="lastIndex" type="int" line="2013"/>
                    <declaration name="bounds" type="Rectangle" line="2014"/>
                    <scope line="2015"/>
                </method>
                <method name="mouseClicked" type="void" line="2019">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
                <method name="mouseEntered" type="void" line="2021">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
                <method name="mouseExited" type="void" line="2023">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
                <declaration name="dragPressDidSelection" type="boolean" line="2025"/>
                <method name="mousePressed" type="void" line="2026">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                    <scope line="2027"/>
                    <declaration name="dragEnabled" type="boolean" line="2030"/>
                    <declaration name="grabFocus" type="boolean" line="2031"/>
                    <scope line="2032">
                        <declaration name="row" type="int" line="2033"/>
                        <scope line="2034">
                            <scope line="2036"/>
                            <scope line="2039"/>
                        </scope>
                    </scope>
                    <scope line="2047"/>
                    <scope line="2050"/>
                </method>
                <method name="adjustSelection" type="void" line="2055">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                    <declaration name="row" type="int" line="2056"/>
                    <scope line="2057">
                        <scope line="2058"/>
                    </scope>
                    <scope line="2062">
                        <declaration name="anchorIndex" type="int" line="2063"/>
                        <declaration name="anchorSelected" type="boolean" line="2064"/>
                        <scope line="2065"/>
                        <scope line="2069"/>
                        <scope line="2072">
                            <scope line="2073">
                                <scope line="2074"/>
                                <scope line="2077">
                                    <scope line="2079"/>
                                </scope>
                            </scope>
                            <scope line="2085"/>
                            <scope line="2088"/>
                        </scope>
                        <scope line="2092"/>
                        <scope line="2095"/>
                    </scope>
                </method>
                <method name="dragStarting" type="void" line="2100">
                    <params>
                        <param name="me" type="MouseEvent"/>
                    </params>
                    <scope line="2101">
                        <declaration name="row" type="int" line="2102"/>
                    </scope>
                </method>
                <method name="mouseDragged" type="void" line="2106">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                    <scope line="2107"/>
                    <scope line="2110"/>
                    <scope line="2114"/>
                    <declaration name="row" type="int" line="2117"/>
                    <scope line="2118">
                        <scope line="2119"/>
                        <declaration name="cellBounds" type="Rectangle" line="2122"/>
                        <scope line="2123"/>
                    </scope>
                </method>
                <method name="mouseMoved" type="void" line="2129">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
                <method name="mouseReleased" type="void" line="2131">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                    <scope line="2132"/>
                    <scope line="2135">
                        <declaration name="me" type="MouseEvent" line="2136"/>
                        <scope line="2137">
                            <scope line="2139"/>
                        </scope>
                    </scope>
                    <scope line="2144"/>
                </method>
                <method name="repaintCellFocus" type="void" line="2148">
                    <declaration name="leadIndex" type="int" line="2149"/>
                    <scope line="2150">
                        <declaration name="r" type="Rectangle" line="2151"/>
                        <scope line="2152"/>
                    </scope>
                </method>
                <method name="focusGained" type="void" line="2157">
                    <params>
                        <param name="e" type="FocusEvent"/>
                    </params>
                </method>
                <method name="focusLost" type="void" line="2160">
                    <params>
                        <param name="e" type="FocusEvent"/>
                    </params>
                </method>
            </class>
            <method name="adjustIndex" type="int" line="2164">
                <params>
                    <param name="index" type="int"/>
                    <param name="list" type="JList"/>
                </params>
            </method>
            <declaration name="defaultTransferHandler" type="TransferHandler" line="2167"/>
            <class name="ListTransferHandler" line="2168">
                <extends class="TransferHandler"/>
                <implements interface="UIResource"/>
                <javadoc line="2169">
                    Create a Transferable to use as the source for a data transfer.                    
                    <param>
                        c  The component holding the data to be transfered.  This
                          argument is provided to enable sharing of TransferHandlers by
                          multiple components.                        
                    </param>
                    <return>
                        The representation of the data to be transfered.                        
                    </return>
                </javadoc>
                <method name="createTransferable" type="Transferable" line="2176">
                    <params>
                        <param name="c" type="JComponent"/>
                    </params>
                    <scope line="2177">
                        <declaration name="list" type="JList" line="2178"/>
                        <declaration name="values" type="Object[]" line="2179"/>
                        <scope line="2180"/>
                        <declaration name="plainBuf" type="StringBuffer" line="2183"/>
                        <declaration name="htmlBuf" type="StringBuffer" line="2184"/>
                        <scope line="2186">
                            <declaration name="obj" type="Object" line="2187"/>
                            <declaration name="val" type="String" line="2188"/>
                        </scope>
                    </scope>
                </method>
                <method name="getSourceActions" type="int" line="2198">
                    <params>
                        <param name="c" type="JComponent"/>
                    </params>
                </method>
            </class>
        </class>
    </source>