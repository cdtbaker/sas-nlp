<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.plaf.multi">
        <import package="java.util.Vector"/>
        <import package="javax.swing.plaf.TextUI"/>
        <import package="java.lang.String"/>
        <import package="javax.swing.text.JTextComponent"/>
        <import package="java.awt.Point"/>
        <import package="java.awt.Rectangle"/>
        <import package="javax.swing.text.BadLocationException"/>
        <import package="javax.swing.text.Position"/>
        <import package="javax.swing.text.EditorKit"/>
        <import package="javax.swing.text.View"/>
        <import package="javax.swing.plaf.ComponentUI"/>
        <import package="javax.swing.JComponent"/>
        <import package="java.awt.Graphics"/>
        <import package="java.awt.Dimension"/>
        <import package="javax.accessibility.Accessible"/>
        <class name="MultiTextUI" line="43">
            <extends class="TextUI"/>
            <comment line="61">
                //////////////////                
            </comment>
            <comment line="62">
                Common UI methods                
            </comment>
            <comment line="63">
                //////////////////                
            </comment>
            <comment line="74">
                //////////////////                
            </comment>
            <comment line="75">
                TextUI methods                
            </comment>
            <comment line="76">
                //////////////////                
            </comment>
            <comment line="220">
                //////////////////                
            </comment>
            <comment line="221">
                ComponentUI methods                
            </comment>
            <comment line="222">
                //////////////////                
            </comment>
            <javadoc line="43">
                A multiplexing UI used to combine &lt;code&gt;TextUI&lt;/code&gt;s.
                  &lt;p&gt;This file was automatically generated by AutoMulti.                
                <author>
                    Otto Multey                    
                </author>
            </javadoc>
            <declaration name="uis" type="Vector" line="52"/>
            <javadoc line="52">
                The vector containing the real UIs.  This is populated
                  in the call to &lt;code&gt;createUI&lt;/code&gt;, and can be obtained by calling
                  the &lt;code&gt;getUIs&lt;/code&gt; method.  The first element is guaranteed to be the real UI
                  obtained from the default look and feel.                
            </javadoc>
            <javadoc line="64">
                Returns the list of UIs associated with this multiplexing UI.  This
                  allows processing of the UIs by an application aware of multiplexing
                  UIs on components.                
            </javadoc>
            <method name="getUIs" type="ComponentUI[]" line="69"/>
            <javadoc line="77">
                Invokes the &lt;code&gt;getToolTipText&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default <code>LookAndFeel</code>                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getToolTipText" type="String" line="84">
                <params>
                    <param name="a" type="JTextComponent"/>
                    <param name="b" type="Point"/>
                </params>
                <declaration name="returnValue" type="String" line="85"/>
                <scope line="87"/>
            </method>
            <javadoc line="93">
                Invokes the &lt;code&gt;modelToView&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default <code>LookAndFeel</code>                    
                </return>
            </javadoc>
            <method name="modelToView" type="Rectangle" line="100">
                <params>
                    <param name="a" type="JTextComponent"/>
                    <param name="b" type="int"/>
                </params>
                <declaration name="returnValue" type="Rectangle" line="101"/>
                <scope line="103"/>
            </method>
            <javadoc line="109">
                Invokes the &lt;code&gt;modelToView&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default <code>LookAndFeel</code>                    
                </return>
            </javadoc>
            <method name="modelToView" type="Rectangle" line="116">
                <params>
                    <param name="a" type="JTextComponent"/>
                    <param name="b" type="int"/>
                    <param name="c" type="Position.Bias"/>
                </params>
                <declaration name="returnValue" type="Rectangle" line="117"/>
                <scope line="119"/>
            </method>
            <javadoc line="125">
                Invokes the &lt;code&gt;viewToModel&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default <code>LookAndFeel</code>                    
                </return>
            </javadoc>
            <method name="viewToModel" type="int" line="131">
                <params>
                    <param name="a" type="JTextComponent"/>
                    <param name="b" type="Point"/>
                </params>
                <declaration name="returnValue" type="int" line="132"/>
                <scope line="134"/>
            </method>
            <javadoc line="140">
                Invokes the &lt;code&gt;viewToModel&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default <code>LookAndFeel</code>                    
                </return>
            </javadoc>
            <method name="viewToModel" type="int" line="146">
                <params>
                    <param name="a" type="JTextComponent"/>
                    <param name="b" type="Point"/>
                    <param name="c" type="Position.Bias[]"/>
                </params>
                <declaration name="returnValue" type="int" line="147"/>
                <scope line="149"/>
            </method>
            <javadoc line="155">
                Invokes the &lt;code&gt;getNextVisualPositionFrom&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default <code>LookAndFeel</code>                    
                </return>
            </javadoc>
            <method name="getNextVisualPositionFrom" type="int" line="162">
                <params>
                    <param name="a" type="JTextComponent"/>
                    <param name="b" type="int"/>
                    <param name="c" type="Position.Bias"/>
                    <param name="d" type="int"/>
                    <param name="e" type="Position.Bias[]"/>
                </params>
                <declaration name="returnValue" type="int" line="163"/>
                <scope line="165"/>
            </method>
            <javadoc line="171">
                Invokes the &lt;code&gt;damageRange&lt;/code&gt; method on each UI handled by this object.                
            </javadoc>
            <method name="damageRange" type="void" line="174">
                <params>
                    <param name="a" type="JTextComponent"/>
                    <param name="b" type="int"/>
                    <param name="c" type="int"/>
                </params>
                <scope line="175"/>
            </method>
            <javadoc line="180">
                Invokes the &lt;code&gt;damageRange&lt;/code&gt; method on each UI handled by this object.                
            </javadoc>
            <method name="damageRange" type="void" line="183">
                <params>
                    <param name="a" type="JTextComponent"/>
                    <param name="b" type="int"/>
                    <param name="c" type="int"/>
                    <param name="d" type="Position.Bias"/>
                    <param name="e" type="Position.Bias"/>
                </params>
                <scope line="184"/>
            </method>
            <javadoc line="189">
                Invokes the &lt;code&gt;getEditorKit&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default <code>LookAndFeel</code>                    
                </return>
            </javadoc>
            <method name="getEditorKit" type="EditorKit" line="195">
                <params>
                    <param name="a" type="JTextComponent"/>
                </params>
                <declaration name="returnValue" type="EditorKit" line="196"/>
                <scope line="198"/>
            </method>
            <javadoc line="204">
                Invokes the &lt;code&gt;getRootView&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default <code>LookAndFeel</code>                    
                </return>
            </javadoc>
            <method name="getRootView" type="View" line="210">
                <params>
                    <param name="a" type="JTextComponent"/>
                </params>
                <declaration name="returnValue" type="View" line="211"/>
                <scope line="213"/>
            </method>
            <javadoc line="223">
                Invokes the &lt;code&gt;contains&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default <code>LookAndFeel</code>                    
                </return>
            </javadoc>
            <method name="contains" type="boolean" line="229">
                <params>
                    <param name="a" type="JComponent"/>
                    <param name="b" type="int"/>
                    <param name="c" type="int"/>
                </params>
                <declaration name="returnValue" type="boolean" line="230"/>
                <scope line="232"/>
            </method>
            <javadoc line="238">
                Invokes the &lt;code&gt;update&lt;/code&gt; method on each UI handled by this object.                
            </javadoc>
            <method name="update" type="void" line="241">
                <params>
                    <param name="a" type="Graphics"/>
                    <param name="b" type="JComponent"/>
                </params>
                <scope line="242"/>
            </method>
            <javadoc line="247">
                Returns a multiplexing UI instance if any of the auxiliary
                  &lt;code&gt;LookAndFeel&lt;/code&gt;s supports this UI.  Otherwise, just returns the
                  UI object obtained from the default &lt;code&gt;LookAndFeel&lt;/code&gt;.                
            </javadoc>
            <method name="createUI" type="ComponentUI" line="252">
                <params>
                    <param name="a" type="JComponent"/>
                </params>
                <declaration name="mui" type="ComponentUI" line="253"/>
            </method>
            <javadoc line="259">
                Invokes the &lt;code&gt;installUI&lt;/code&gt; method on each UI handled by this object.                
            </javadoc>
            <method name="installUI" type="void" line="262">
                <params>
                    <param name="a" type="JComponent"/>
                </params>
                <scope line="263"/>
            </method>
            <javadoc line="268">
                Invokes the &lt;code&gt;uninstallUI&lt;/code&gt; method on each UI handled by this object.                
            </javadoc>
            <method name="uninstallUI" type="void" line="271">
                <params>
                    <param name="a" type="JComponent"/>
                </params>
                <scope line="272"/>
            </method>
            <javadoc line="277">
                Invokes the &lt;code&gt;paint&lt;/code&gt; method on each UI handled by this object.                
            </javadoc>
            <method name="paint" type="void" line="280">
                <params>
                    <param name="a" type="Graphics"/>
                    <param name="b" type="JComponent"/>
                </params>
                <scope line="281"/>
            </method>
            <javadoc line="286">
                Invokes the &lt;code&gt;getPreferredSize&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default <code>LookAndFeel</code>                    
                </return>
            </javadoc>
            <method name="getPreferredSize" type="Dimension" line="292">
                <params>
                    <param name="a" type="JComponent"/>
                </params>
                <declaration name="returnValue" type="Dimension" line="293"/>
                <scope line="295"/>
            </method>
            <javadoc line="301">
                Invokes the &lt;code&gt;getMinimumSize&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default <code>LookAndFeel</code>                    
                </return>
            </javadoc>
            <method name="getMinimumSize" type="Dimension" line="307">
                <params>
                    <param name="a" type="JComponent"/>
                </params>
                <declaration name="returnValue" type="Dimension" line="308"/>
                <scope line="310"/>
            </method>
            <javadoc line="316">
                Invokes the &lt;code&gt;getMaximumSize&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default <code>LookAndFeel</code>                    
                </return>
            </javadoc>
            <method name="getMaximumSize" type="Dimension" line="322">
                <params>
                    <param name="a" type="JComponent"/>
                </params>
                <declaration name="returnValue" type="Dimension" line="323"/>
                <scope line="325"/>
            </method>
            <javadoc line="331">
                Invokes the &lt;code&gt;getAccessibleChildrenCount&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default <code>LookAndFeel</code>                    
                </return>
            </javadoc>
            <method name="getAccessibleChildrenCount" type="int" line="337">
                <params>
                    <param name="a" type="JComponent"/>
                </params>
                <declaration name="returnValue" type="int" line="338"/>
                <scope line="340"/>
            </method>
            <javadoc line="346">
                Invokes the &lt;code&gt;getAccessibleChild&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default <code>LookAndFeel</code>                    
                </return>
            </javadoc>
            <method name="getAccessibleChild" type="Accessible" line="352">
                <params>
                    <param name="a" type="JComponent"/>
                    <param name="b" type="int"/>
                </params>
                <declaration name="returnValue" type="Accessible" line="353"/>
                <scope line="355"/>
            </method>
        </class>
    </source>