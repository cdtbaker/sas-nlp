<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.plaf.multi">
        <import package="java.util.Vector"/>
        <import package="javax.swing.plaf.TextUI"/>
        <import package="java.lang.String"/>
        <import package="javax.swing.text.JTextComponent"/>
        <import package="java.awt.Point"/>
        <import package="java.awt.Rectangle"/>
        <import package="javax.swing.text.BadLocationException"/>
        <import package="javax.swing.text.Position"/>
        <import package="javax.swing.text.EditorKit"/>
        <import package="javax.swing.text.View"/>
        <import package="javax.swing.plaf.ComponentUI"/>
        <import package="javax.swing.JComponent"/>
        <import package="java.awt.Graphics"/>
        <import package="java.awt.Dimension"/>
        <import package="javax.accessibility.Accessible"/>
        <class name="MultiTextUI" line="17">
            <extends class="TextUI"/>
            <javadoc line="17">
                A multiplexing UI used to combine &lt;code&gt;TextUI&lt;/code&gt;s.
                  &lt;p&gt;This file was automatically generated by AutoMulti.                
                <author>
                    Otto Multey                    
                </author>
            </javadoc>
            <declaration name="uis" type="Vector" line="23"/>
            <javadoc line="23">
                The vector containing the real UIs.  This is populated
                  in the call to &lt;code&gt;createUI&lt;/code&gt;, and can be obtained by calling
                  the &lt;code&gt;getUIs&lt;/code&gt; method.  The first element is guaranteed to be the real UI
                  obtained from the default look and feel.                
            </javadoc>
            <javadoc line="30">
                Returns the list of UIs associated with this multiplexing UI.  This
                  allows processing of the UIs by an application aware of multiplexing
                  UIs on components.                
            </javadoc>
            <method name="getUIs" type="ComponentUI[]" line="35"/>
            <javadoc line="38">
                Invokes the &lt;code&gt;getToolTipText&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default <code>LookAndFeel</code>                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getToolTipText" type="String" line="44">
                <params>
                    <param name="a" type="JTextComponent"/>
                    <param name="b" type="Point"/>
                </params>
                <declaration name="returnValue" type="String" line="45"/>
                <scope line="46"/>
            </method>
            <javadoc line="51">
                Invokes the &lt;code&gt;modelToView&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default <code>LookAndFeel</code>                    
                </return>
            </javadoc>
            <method name="modelToView" type="Rectangle" line="56">
                <params>
                    <param name="a" type="JTextComponent"/>
                    <param name="b" type="int"/>
                </params>
                <declaration name="returnValue" type="Rectangle" line="57"/>
                <scope line="58"/>
            </method>
            <javadoc line="63">
                Invokes the &lt;code&gt;modelToView&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default <code>LookAndFeel</code>                    
                </return>
            </javadoc>
            <method name="modelToView" type="Rectangle" line="68">
                <params>
                    <param name="a" type="JTextComponent"/>
                    <param name="b" type="int"/>
                    <param name="c" type="Position.Bias"/>
                </params>
                <declaration name="returnValue" type="Rectangle" line="69"/>
                <scope line="70"/>
            </method>
            <javadoc line="75">
                Invokes the &lt;code&gt;viewToModel&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default <code>LookAndFeel</code>                    
                </return>
            </javadoc>
            <method name="viewToModel" type="int" line="80">
                <params>
                    <param name="a" type="JTextComponent"/>
                    <param name="b" type="Point"/>
                </params>
                <declaration name="returnValue" type="int" line="81"/>
                <scope line="82"/>
            </method>
            <javadoc line="87">
                Invokes the &lt;code&gt;viewToModel&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default <code>LookAndFeel</code>                    
                </return>
            </javadoc>
            <method name="viewToModel" type="int" line="92">
                <params>
                    <param name="a" type="JTextComponent"/>
                    <param name="b" type="Point"/>
                    <param name="c" type="Position.Bias[]"/>
                </params>
                <declaration name="returnValue" type="int" line="93"/>
                <scope line="94"/>
            </method>
            <javadoc line="99">
                Invokes the &lt;code&gt;getNextVisualPositionFrom&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default <code>LookAndFeel</code>                    
                </return>
            </javadoc>
            <method name="getNextVisualPositionFrom" type="int" line="104">
                <params>
                    <param name="a" type="JTextComponent"/>
                    <param name="b" type="int"/>
                    <param name="c" type="Position.Bias"/>
                    <param name="d" type="int"/>
                    <param name="e" type="Position.Bias[]"/>
                </params>
                <declaration name="returnValue" type="int" line="105"/>
                <scope line="106"/>
            </method>
            <javadoc line="111">
                Invokes the &lt;code&gt;damageRange&lt;/code&gt; method on each UI handled by this object.                
            </javadoc>
            <method name="damageRange" type="void" line="114">
                <params>
                    <param name="a" type="JTextComponent"/>
                    <param name="b" type="int"/>
                    <param name="c" type="int"/>
                </params>
                <scope line="115"/>
            </method>
            <javadoc line="119">
                Invokes the &lt;code&gt;damageRange&lt;/code&gt; method on each UI handled by this object.                
            </javadoc>
            <method name="damageRange" type="void" line="122">
                <params>
                    <param name="a" type="JTextComponent"/>
                    <param name="b" type="int"/>
                    <param name="c" type="int"/>
                    <param name="d" type="Position.Bias"/>
                    <param name="e" type="Position.Bias"/>
                </params>
                <scope line="123"/>
            </method>
            <javadoc line="127">
                Invokes the &lt;code&gt;getEditorKit&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default <code>LookAndFeel</code>                    
                </return>
            </javadoc>
            <method name="getEditorKit" type="EditorKit" line="132">
                <params>
                    <param name="a" type="JTextComponent"/>
                </params>
                <declaration name="returnValue" type="EditorKit" line="133"/>
                <scope line="134"/>
            </method>
            <javadoc line="139">
                Invokes the &lt;code&gt;getRootView&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default <code>LookAndFeel</code>                    
                </return>
            </javadoc>
            <method name="getRootView" type="View" line="144">
                <params>
                    <param name="a" type="JTextComponent"/>
                </params>
                <declaration name="returnValue" type="View" line="145"/>
                <scope line="146"/>
            </method>
            <javadoc line="151">
                Invokes the &lt;code&gt;contains&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default <code>LookAndFeel</code>                    
                </return>
            </javadoc>
            <method name="contains" type="boolean" line="156">
                <params>
                    <param name="a" type="JComponent"/>
                    <param name="b" type="int"/>
                    <param name="c" type="int"/>
                </params>
                <declaration name="returnValue" type="boolean" line="157"/>
                <scope line="158"/>
            </method>
            <javadoc line="163">
                Invokes the &lt;code&gt;update&lt;/code&gt; method on each UI handled by this object.                
            </javadoc>
            <method name="update" type="void" line="166">
                <params>
                    <param name="a" type="Graphics"/>
                    <param name="b" type="JComponent"/>
                </params>
                <scope line="167"/>
            </method>
            <javadoc line="171">
                Returns a multiplexing UI instance if any of the auxiliary
                  &lt;code&gt;LookAndFeel&lt;/code&gt;s supports this UI.  Otherwise, just returns the
                  UI object obtained from the default &lt;code&gt;LookAndFeel&lt;/code&gt;.                
            </javadoc>
            <method name="createUI" type="ComponentUI" line="176">
                <params>
                    <param name="a" type="JComponent"/>
                </params>
                <declaration name="mui" type="ComponentUI" line="177"/>
            </method>
            <javadoc line="180">
                Invokes the &lt;code&gt;installUI&lt;/code&gt; method on each UI handled by this object.                
            </javadoc>
            <method name="installUI" type="void" line="183">
                <params>
                    <param name="a" type="JComponent"/>
                </params>
                <scope line="184"/>
            </method>
            <javadoc line="188">
                Invokes the &lt;code&gt;uninstallUI&lt;/code&gt; method on each UI handled by this object.                
            </javadoc>
            <method name="uninstallUI" type="void" line="191">
                <params>
                    <param name="a" type="JComponent"/>
                </params>
                <scope line="192"/>
            </method>
            <javadoc line="196">
                Invokes the &lt;code&gt;paint&lt;/code&gt; method on each UI handled by this object.                
            </javadoc>
            <method name="paint" type="void" line="199">
                <params>
                    <param name="a" type="Graphics"/>
                    <param name="b" type="JComponent"/>
                </params>
                <scope line="200"/>
            </method>
            <javadoc line="204">
                Invokes the &lt;code&gt;getPreferredSize&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default <code>LookAndFeel</code>                    
                </return>
            </javadoc>
            <method name="getPreferredSize" type="Dimension" line="209">
                <params>
                    <param name="a" type="JComponent"/>
                </params>
                <declaration name="returnValue" type="Dimension" line="210"/>
                <scope line="211"/>
            </method>
            <javadoc line="216">
                Invokes the &lt;code&gt;getMinimumSize&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default <code>LookAndFeel</code>                    
                </return>
            </javadoc>
            <method name="getMinimumSize" type="Dimension" line="221">
                <params>
                    <param name="a" type="JComponent"/>
                </params>
                <declaration name="returnValue" type="Dimension" line="222"/>
                <scope line="223"/>
            </method>
            <javadoc line="228">
                Invokes the &lt;code&gt;getMaximumSize&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default <code>LookAndFeel</code>                    
                </return>
            </javadoc>
            <method name="getMaximumSize" type="Dimension" line="233">
                <params>
                    <param name="a" type="JComponent"/>
                </params>
                <declaration name="returnValue" type="Dimension" line="234"/>
                <scope line="235"/>
            </method>
            <javadoc line="240">
                Invokes the &lt;code&gt;getAccessibleChildrenCount&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default <code>LookAndFeel</code>                    
                </return>
            </javadoc>
            <method name="getAccessibleChildrenCount" type="int" line="245">
                <params>
                    <param name="a" type="JComponent"/>
                </params>
                <declaration name="returnValue" type="int" line="246"/>
                <scope line="247"/>
            </method>
            <javadoc line="252">
                Invokes the &lt;code&gt;getAccessibleChild&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default <code>LookAndFeel</code>                    
                </return>
            </javadoc>
            <method name="getAccessibleChild" type="Accessible" line="257">
                <params>
                    <param name="a" type="JComponent"/>
                    <param name="b" type="int"/>
                </params>
                <declaration name="returnValue" type="Accessible" line="258"/>
                <scope line="259"/>
            </method>
        </class>
    </source>