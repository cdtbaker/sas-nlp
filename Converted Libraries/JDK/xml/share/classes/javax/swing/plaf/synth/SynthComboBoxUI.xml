<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.plaf.synth">
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="javax.swing"/>
        <import package="javax.swing.plaf"/>
        <import package="javax.swing.event"/>
        <import package="javax.swing.plaf.basic"/>
        <import package="java.beans.PropertyChangeListener"/>
        <import package="java.beans.PropertyChangeEvent"/>
        <class name="SynthComboBoxUI" line="10">
            <extends class="BasicComboBoxUI"/>
            <implements interface="PropertyChangeListener"/>
            <implements interface="SynthUI"/>
            <javadoc line="10">
                Provides the Synth L&amp;F UI delegate for{@link javax.swing.JComboBox}.                
                <author>
                    Scott Violet                    
                </author>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <declaration name="style" type="SynthStyle" line="16"/>
            <declaration name="useListColors" type="boolean" line="17"/>
            <declaration name="popupInsets" type="Insets" line="18"/>
            <javadoc line="18">
                Used to adjust the location and size of the popup. Very useful for
                  situations such as we find in Nimbus where part of the border is used
                  to paint the focus. In such cases, the border is empty space, and not
                  part of the &quot;visual&quot; border, and in these cases, you&apos;d like the popup
                  to be adjusted such that it looks as if it were next to the visual border.
                  You may want to use negative insets to get the right look.                
            </javadoc>
            <declaration name="buttonWhenNotEditable" type="boolean" line="27"/>
            <javadoc line="27">
                This flag may be set via UIDefaults. By default, it is false, to
                  preserve backwards compatibility. If true, then the combo will
                  &quot;act as a button&quot; when it is not editable.                
            </javadoc>
            <declaration name="pressedWhenPopupVisible" type="boolean" line="33"/>
            <javadoc line="33">
                A flag to indicate that the combo box and combo box button should
                  remain in the PRESSED state while the combo popup is visible.                
            </javadoc>
            <declaration name="buttonHandler" type="ButtonHandler" line="38"/>
            <javadoc line="38">
                When buttonWhenNotEditable is true, this field is used to help make
                  the combo box appear and function as a button when the combo box is
                  not editable. In such a state, you can click anywhere on the button
                  to get it to open the popup. Also, anywhere you hover over the combo
                  will cause the entire combo to go into &quot;rollover&quot; state, and anywhere
                  you press will go into &quot;pressed&quot; state. This also keeps in sync the
                  state of the combo and the arrowButton.                
            </javadoc>
            <declaration name="editorFocusHandler" type="EditorFocusHandler" line="48"/>
            <javadoc line="48">
                Handler for repainting combo when editor component gains/looses focus                
            </javadoc>
            <declaration name="forceOpaque" type="boolean" line="52"/>
            <javadoc line="52">
                If true, then the cell renderer will be forced to be non-opaque when
                  used for rendering the selected item in the combo box (not in the list),
                  and forced to opaque after rendering the selected value.                
            </javadoc>
            <javadoc line="58">
                Creates a new UI object for the given component.                
                <param>
                    c component to create UI object for                    
                </param>
                <return>
                    the UI object                    
                </return>
            </javadoc>
            <method name="createUI" type="ComponentUI" line="63">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <javadoc line="66">
                @inheritDocOverridden to ensure that ButtonHandler is created prior to any of
                  the other installXXX methods, since several of them reference
                  buttonHandler.                
            </javadoc>
            <method name="installUI" type="void" line="71">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <method name="installDefaults" type="void" line="75"/>
            <method name="updateStyle" type="void" line="78">
                <params>
                    <param name="comboBox" type="JComboBox"/>
                </params>
                <declaration name="oldStyle" type="SynthStyle" line="79"/>
                <declaration name="context" type="SynthContext" line="80"/>
                <scope line="82">
                    <scope line="89"/>
                </scope>
                <scope line="96"/>
            </method>
            <javadoc line="100">
                @inheritDoc                
            </javadoc>
            <method name="installListeners" type="void" line="103"/>
            <javadoc line="109">
                @inheritDoc                
            </javadoc>
            <method name="uninstallUI" type="void" line="112">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <scope line="113"/>
            </method>
            <javadoc line="119">
                @inheritDoc                
            </javadoc>
            <method name="uninstallDefaults" type="void" line="122">
                <declaration name="context" type="SynthContext" line="123"/>
            </method>
            <javadoc line="128">
                @inheritDoc                
            </javadoc>
            <method name="uninstallListeners" type="void" line="131"/>
            <javadoc line="139">
                @inheritDoc                
            </javadoc>
            <method name="getContext" type="SynthContext" line="142">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <method name="getContext" type="SynthContext" line="145">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="state" type="int"/>
                </params>
            </method>
            <method name="getComponentState" type="int" line="148">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <declaration name="box" type="JComboBox" line="150"/>
                <scope line="151">
                    <declaration name="state" type="int" line="152"/>
                    <scope line="153"/>
                    <scope line="156"/>
                    <scope line="159"/>
                    <scope line="162"/>
                </scope>
                <scope line="167">
                    <declaration name="basicState" type="int" line="168"/>
                    <scope line="169"/>
                </scope>
            </method>
            <javadoc line="175">
                @inheritDoc                
            </javadoc>
            <method name="createPopup" type="ComboPopup" line="178">
                <declaration name="p" type="SynthComboPopup" line="179"/>
            </method>
            <javadoc line="183">
                @inheritDoc                
            </javadoc>
            <method name="createRenderer" type="ListCellRenderer" line="186"/>
            <javadoc line="189">
                @inheritDoc                
            </javadoc>
            <method name="createEditor" type="ComboBoxEditor" line="192"/>
            <javadoc line="195">
                @inheritDoc                
            </javadoc>
            <method name="propertyChange" type="void" line="198">
                <params>
                    <param name="e" type="PropertyChangeEvent"/>
                </params>
                <scope line="199"/>
            </method>
            <javadoc line="203">
                @inheritDoc                
            </javadoc>
            <method name="createArrowButton" type="JButton" line="206">
                <declaration name="button" type="SynthArrowButton" line="207"/>
            </method>
            <javadoc line="212">
                Notifies this UI delegate to repaint the specified component.
                  This method paints the component background, then calls
                  the {@link #paint(SynthContext,Graphics)} method.
                  &lt;p&gt;In general, this method does not need to be overridden by subclasses.
                  All Look and Feel rendering code should reside in the {@code paint} method.                
                <param>
                    g the {@code Graphics} object used for painting                    
                </param>
                <param>
                    c the component being painted                    
                </param>
                <see>
                    #paint(SynthContext,Graphics)                    
                </see>
            </javadoc>
            <method name="update" type="void" line="222">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="c" type="JComponent"/>
                </params>
                <declaration name="context" type="SynthContext" line="223"/>
            </method>
            <javadoc line="229">
                Paints the specified component according to the Look and Feel.
                  &lt;p&gt;This method is not used by Synth Look and Feel.
                  Painting is handled by the {@link #paint(SynthContext,Graphics)} method.                
                <param>
                    g the {@code Graphics} object used for painting                    
                </param>
                <param>
                    c the component being painted                    
                </param>
                <see>
                    #paint(SynthContext,Graphics)                    
                </see>
            </javadoc>
            <method name="paint" type="void" line="237">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="c" type="JComponent"/>
                </params>
                <declaration name="context" type="SynthContext" line="238"/>
            </method>
            <javadoc line="242">
                Paints the specified component.                
                <param>
                    context context for the component being painted                    
                </param>
                <param>
                    g the {@code Graphics} object used for painting                    
                </param>
                <see>
                    #update(Graphics,JComponent)                    
                </see>
            </javadoc>
            <method name="paint" type="void" line="248">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="g" type="Graphics"/>
                </params>
                <scope line="250">
                    <declaration name="r" type="Rectangle" line="251"/>
                </scope>
            </method>
            <javadoc line="255">
                @inheritDoc                
            </javadoc>
            <method name="paintBorder" type="void" line="258">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="g" type="Graphics"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
            </method>
            <javadoc line="261">
                Paints the currently selected item.                
            </javadoc>
            <method name="paintCurrentValue" type="void" line="264">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="bounds" type="Rectangle"/>
                    <param name="hasFocus" type="boolean"/>
                </params>
                <declaration name="renderer" type="ListCellRenderer" line="265"/>
                <declaration name="c" type="Component" line="266"/>
                <declaration name="shouldValidate" type="boolean" line="268"/>
                <scope line="269"/>
                <scope line="272"/>
                <declaration name="force" type="boolean" line="275"/>
                <scope line="276"/>
                <declaration name="x" type="int" line="279"/>
                <scope line="280"/>
                <scope line="287"/>
            </method>
            <javadoc line="291">
                @return true if this combo box should act as one big button. Typically
                  only happens when buttonWhenNotEditable is true, and comboBox.isEditable
                  is false.                
            </javadoc>
            <method name="shouldActLikeButton" type="boolean" line="296"/>
            <javadoc line="299">
                Returns the default size of an empty display area of the combo box using
                  the current renderer and font.
                  This method was overridden to use SynthComboBoxRenderer instead of
                  DefaultListCellRenderer as the default renderer when calculating the
                  size of the combo box. This is used in the case of the combo not having
                  any data.                
                <return>
                    the size of an empty display area                    
                </return>
                <see>
                    #getDisplaySize                    
                </see>
            </javadoc>
            <method name="getDefaultSize" type="Dimension" line="309">
                <declaration name="r" type="SynthComboBoxRenderer" line="310"/>
                <declaration name="d" type="Dimension" line="311"/>
            </method>
            <class name="SynthComboBoxRenderer" line="314">
                <extends class="JLabel"/>
                <implements interface="ListCellRenderer"/>
                <implements interface="UIResource"/>
                <javadoc line="314">
                    From BasicComboBoxRenderer v 1.18.
                      Be aware that SynthFileChooserUIImpl relies on the fact that the default
                      renderer installed on a Synth combo box is a JLabel. If this is changed,
                      then an assert will fail in SynthFileChooserUIImpl                    
                </javadoc>
                <method name="SynthComboBoxRenderer" type="constructor" line="321"/>
                <method name="getListCellRendererComponent" type="Component" line="326">
                    <params>
                        <param name="list" type="JList"/>
                        <param name="value" type="Object"/>
                        <param name="index" type="int"/>
                        <param name="isSelected" type="boolean"/>
                        <param name="cellHasFocus" type="boolean"/>
                    </params>
                    <scope line="329">
                        <scope line="332"/>
                    </scope>
                    <scope line="336"/>
                    <scope line="341"/>
                    <scope line="345">
                        <declaration name="text" type="String" line="346"/>
                        <scope line="347"/>
                    </scope>
                    <scope line="352"/>
                </method>
                <method name="paint" type="void" line="358">
                    <params>
                        <param name="g" type="Graphics"/>
                    </params>
                </method>
            </class>
            <class name="SynthComboBoxEditor" line="363">
                <extends class="BasicComboBoxEditor.UIResource"/>
                <method name="createEditorComponent" type="JTextField" line="364">
                    <declaration name="f" type="JTextField" line="365"/>
                </method>
            </class>
            <class name="ButtonHandler" line="370">
                <extends class="DefaultButtonModel"/>
                <implements interface="MouseListener"/>
                <implements interface="PopupMenuListener"/>
                <javadoc line="370">
                    Handles all the logic for treating the combo as a button when it is
                      not editable, and when shouldActLikeButton() is true. This class is a
                      special ButtonModel, and installed on the arrowButton when appropriate.
                      It also is installed as a mouse listener and mouse motion listener on
                      the combo box. In this way, the state between the button and combo
                      are in sync. Whenever one is &quot;over&quot; both are. Whenever one is pressed,
                      both are.                    
                </javadoc>
                <declaration name="over" type="boolean" line="380"/>
                <javadoc line="380">
                    Indicates that the mouse is over the combo or the arrow button.
                      This field only has meaning if buttonWhenNotEnabled is true.                    
                </javadoc>
                <declaration name="pressed" type="boolean" line="385"/>
                <javadoc line="385">
                    Indicates that the combo or arrow button has been pressed. This
                      field only has meaning if buttonWhenNotEnabled is true.                    
                </javadoc>
                <javadoc line="390">
                    &lt;p&gt;Updates the internal &quot;pressed&quot; state. If shouldActLikeButton()
                      is true, and if this method call will change the internal state,
                      then the combo and button will be repainted.&lt;/p&gt;
                      &lt;p&gt;Note that this method is called either when a press event
                      occurs on the combo box, or on the arrow button.&lt;/p&gt;                    
                </javadoc>
                <method name="updatePressed" type="void" line="397">
                    <params>
                        <param name="p" type="boolean"/>
                    </params>
                    <scope line="399"/>
                </method>
                <javadoc line="403">
                    &lt;p&gt;Updates the internal &quot;over&quot; state. If shouldActLikeButton()
                      is true, and if this method call will change the internal state,
                      then the combo and button will be repainted.&lt;/p&gt;
                      &lt;p&gt;Note that this method is called either when a mouseover/mouseoff event
                      occurs on the combo box, or on the arrow button.&lt;/p&gt;                    
                </javadoc>
                <method name="updateOver" type="void" line="410">
                    <params>
                        <param name="o" type="boolean"/>
                    </params>
                    <declaration name="old" type="boolean" line="411"/>
                    <declaration name="newo" type="boolean" line="413"/>
                    <scope line="414"/>
                </method>
                <javadoc line="418">
                    @inheritDocEnsures that isPressed() will return true if the combo is pressed,
                      or the arrowButton is pressed, &lt;em&gt;or&lt;/em&gt; if the combo popup is
                      visible. This is the case because a combo box looks pressed when
                      the popup is visible, and so should the arrow button.                    
                </javadoc>
                <method name="isPressed" type="boolean" line="424">
                    <declaration name="b" type="boolean" line="425"/>
                </method>
                <javadoc line="428">
                    @inheritDocEnsures that the armed state is in sync with the pressed state
                      if shouldActLikeButton is true. Without this method, the arrow
                      button will not look pressed when the popup is open, regardless
                      of the result of isPressed() alone.                    
                </javadoc>
                <method name="isArmed" type="boolean" line="434">
                    <declaration name="b" type="boolean" line="435"/>
                </method>
                <javadoc line="438">
                    @inheritDocEnsures that isRollover() will return true if the combo is
                      rolled over, or the arrowButton is rolled over.                    
                </javadoc>
                <method name="isRollover" type="boolean" line="442"/>
                <javadoc line="445">
                    @inheritDocForwards pressed states to the internal &quot;pressed&quot; field                    
                </javadoc>
                <method name="setPressed" type="void" line="448">
                    <params>
                        <param name="b" type="boolean"/>
                    </params>
                </method>
                <javadoc line="452">
                    @inheritDocForwards rollover states to the internal &quot;over&quot; field                    
                </javadoc>
                <method name="setRollover" type="void" line="455">
                    <params>
                        <param name="b" type="boolean"/>
                    </params>
                </method>
                <method name="mouseEntered" type="void" line="459">
                    <params>
                        <param name="mouseEvent" type="MouseEvent"/>
                    </params>
                </method>
                <method name="mouseExited" type="void" line="462">
                    <params>
                        <param name="mouseEvent" type="MouseEvent"/>
                    </params>
                </method>
                <method name="mousePressed" type="void" line="465">
                    <params>
                        <param name="mouseEvent" type="MouseEvent"/>
                    </params>
                </method>
                <method name="mouseReleased" type="void" line="468">
                    <params>
                        <param name="mouseEvent" type="MouseEvent"/>
                    </params>
                </method>
                <method name="mouseClicked" type="void" line="471">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
                <javadoc line="473">
                    @inheritDocEnsures that the combo box is repainted when the popup is closed.
                      This avoids a bug where clicking off the combo wasn&apos;t causing a repaint,
                      and thus the combo box still looked pressed even when it was not.
                      This bug was only noticed when acting as a button, but may be generally
                      present. If so, remove the if() block                    
                </javadoc>
                <method name="popupMenuCanceled" type="void" line="480">
                    <params>
                        <param name="e" type="PopupMenuEvent"/>
                    </params>
                    <scope line="481"/>
                </method>
                <method name="popupMenuWillBecomeVisible" type="void" line="485">
                    <params>
                        <param name="e" type="PopupMenuEvent"/>
                    </params>
                </method>
                <method name="popupMenuWillBecomeInvisible" type="void" line="487">
                    <params>
                        <param name="e" type="PopupMenuEvent"/>
                    </params>
                </method>
            </class>
            <class name="EditorFocusHandler" line="490">
                <implements interface="FocusListener"/>
                <implements interface="PropertyChangeListener"/>
                <javadoc line="490">
                    Handler for repainting combo when editor component gains/looses focus                    
                </javadoc>
                <declaration name="comboBox" type="JComboBox" line="494"/>
                <declaration name="editor" type="ComboBoxEditor" line="495"/>
                <declaration name="editorComponent" type="Component" line="496"/>
                <method name="EditorFocusHandler" type="constructor" line="497">
                    <params>
                        <param name="comboBox" type="JComboBox"/>
                    </params>
                    <scope line="500">
                        <scope line="502"/>
                    </scope>
                </method>
                <method name="unregister" type="void" line="508">
                    <scope line="510"/>
                </method>
                <javadoc line="514">
                    Invoked when a component gains the keyboard focus.                    
                </javadoc>
                <method name="focusGained" type="void" line="517">
                    <params>
                        <param name="e" type="FocusEvent"/>
                    </params>
                </method>
                <javadoc line="520">
                    Invoked when a component loses the keyboard focus.                    
                </javadoc>
                <method name="focusLost" type="void" line="523">
                    <params>
                        <param name="e" type="FocusEvent"/>
                    </params>
                </method>
                <javadoc line="526">
                    Called when the combos editor changes                    
                    <param>
                        evt A PropertyChangeEvent object describing the event source and
                          the property that has changed.                        
                    </param>
                </javadoc>
                <method name="propertyChange" type="void" line="531">
                    <params>
                        <param name="evt" type="PropertyChangeEvent"/>
                    </params>
                    <declaration name="newEditor" type="ComboBoxEditor" line="532"/>
                    <scope line="533">
                        <scope line="534"/>
                        <scope line="538">
                            <scope line="540"/>
                        </scope>
                    </scope>
                </method>
            </class>
        </class>
    </source>