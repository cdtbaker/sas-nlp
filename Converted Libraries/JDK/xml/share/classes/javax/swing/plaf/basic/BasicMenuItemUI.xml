<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.plaf.basic">
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="java.beans.PropertyChangeEvent"/>
        <import package="java.beans.PropertyChangeListener"/>
        <import package="javax.swing"/>
        <import package="javax.swing.event"/>
        <import package="javax.swing.plaf"/>
        <import package="javax.swing.text.View"/>
        <import package="sun.swing"/>
        <class name="BasicMenuItemUI" line="40">
            <extends class="MenuItemUI"/>
            <comment line="81">
                BasicMenuUI also uses this.                
            </comment>
            <comment line="89">
                                
            </comment>
            <comment line="90">
                trace creates and disposes                
            </comment>
            <comment line="92">
                show reuse hits/misses                
            </comment>
            <comment line="93">
                show bad params, misc.                
            </comment>
            <comment line="860">
                BasicMenuUI subclasses this.                
            </comment>
            <javadoc line="40">
                BasicMenuItem implementation                
                <author>
                    Georges Saab                    
                </author>
                <author>
                    David Karlton                    
                </author>
                <author>
                    Arnaud Weber                    
                </author>
                <author>
                    Fredrik Lagerblad                    
                </author>
            </javadoc>
            <declaration name="menuItem" type="JMenuItem" line="50"/>
            <declaration name="selectionBackground" type="Color" line="51"/>
            <declaration name="selectionForeground" type="Color" line="52"/>
            <declaration name="disabledForeground" type="Color" line="53"/>
            <declaration name="acceleratorForeground" type="Color" line="54"/>
            <declaration name="acceleratorSelectionForeground" type="Color" line="55"/>
            <declaration name="acceleratorDelimiter" type="String" line="57"/>
            <javadoc line="57">
                Accelerator delimiter string, such as {@code &apos;+&apos;} in {@code &apos;Ctrl+C&apos;}.                
                <since>
                    1.7                    
                </since>
            </javadoc>
            <declaration name="defaultTextIconGap" type="int" line="63"/>
            <declaration name="acceleratorFont" type="Font" line="64"/>
            <declaration name="mouseInputListener" type="MouseInputListener" line="66"/>
            <declaration name="menuDragMouseListener" type="MenuDragMouseListener" line="67"/>
            <declaration name="menuKeyListener" type="MenuKeyListener" line="68"/>
            <declaration name="propertyChangeListener" type="PropertyChangeListener" line="69"/>
            <javadoc line="69">
                &lt;code&gt;PropertyChangeListener&lt;/code&gt; returned from
                  &lt;code&gt;createPropertyChangeListener&lt;/code&gt;. You should not
                  need to access this field, rather if you want to customize the
                  &lt;code&gt;PropertyChangeListener&lt;/code&gt; override
                  &lt;code&gt;createPropertyChangeListener&lt;/code&gt;.                
                <since>
                    1.6                    
                </since>
                <see>
                    #createPropertyChangeListener                    
                </see>
            </javadoc>
            <declaration name="handler" type="Handler" line="81"/>
            <declaration name="arrowIcon" type="Icon" line="83"/>
            <declaration name="checkIcon" type="Icon" line="84"/>
            <declaration name="oldBorderPainted" type="boolean" line="86"/>
            <declaration name="TRACE" type="boolean" line="89"/>
            <declaration name="VERBOSE" type="boolean" line="91"/>
            <declaration name="DEBUG" type="boolean" line="92"/>
            <method name="loadActionMap" type="void" line="94">
                <params>
                    <param name="map" type="LazyActionMap"/>
                </params>
                <comment line="96">
                    NOTE: BasicMenuUI also calls into this method.                    
                </comment>
            </method>
            <method name="createUI" type="ComponentUI" line="100">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <method name="installUI" type="void" line="104">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <method name="installDefaults" type="void" line="114">
                <comment line="119">
                    use default if missing so that BasicMenuItemUI can be used in other
                     LAFs like Nimbus                    
                </comment>
                <comment line="149">
                    MenuItem specific defaults                    
                </comment>
                <comment line="175">
                    Get accelerator delimiter                    
                </comment>
                <comment line="179">
                    Icons                    
                </comment>
                <comment line="187">
                    In case of column layout, .checkIconFactory is defined for this UI,
                    the icon is compatible with it and useCheckAndArrow() is true,
                    then the icon is handled by the checkIcon.                    
                </comment>
                <declaration name="prefix" type="String" line="115"/>
                <scope line="120"/>
                <declaration name="opaque" type="Object" line="124"/>
                <scope line="125"/>
                <scope line="128"/>
                <scope line="132"/>
                <scope line="150"/>
                <scope line="155"/>
                <scope line="160"/>
                <scope line="165"/>
                <scope line="170"/>
                <scope line="177"/>
                <scope line="180"/>
                <scope line="184">
                    <declaration name="isColumnLayout" type="boolean" line="189"/>
                    <scope line="191">
                        <declaration name="iconFactory" type="MenuItemCheckIconFactory" line="192"/>
                        <scope line="197"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="204">
                @since 1.3                
            </javadoc>
            <method name="installComponents" type="void" line="207">
                <params>
                    <param name="menuItem" type="JMenuItem"/>
                </params>
            </method>
            <method name="getPropertyPrefix" type="String" line="211"/>
            <method name="installListeners" type="void" line="215">
                <scope line="216"/>
                <scope line="220"/>
                <scope line="223"/>
                <scope line="226"/>
            </method>
            <method name="installKeyboardActions" type="void" line="231"/>
            <method name="installLazyActionMap" type="void" line="236"/>
            <method name="uninstallUI" type="void" line="241">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <method name="uninstallDefaults" type="void" line="252"/>
            <javadoc line="263">
                @since 1.3                
            </javadoc>
            <method name="uninstallComponents" type="void" line="266">
                <params>
                    <param name="menuItem" type="JMenuItem"/>
                </params>
            </method>
            <method name="uninstallListeners" type="void" line="270">
                <scope line="271"/>
                <scope line="275"/>
                <scope line="278"/>
                <scope line="281"/>
            </method>
            <method name="uninstallKeyboardActions" type="void" line="292"/>
            <method name="createMouseInputListener" type="MouseInputListener" line="298">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <method name="createMenuDragMouseListener" type="MenuDragMouseListener" line="302">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <method name="createMenuKeyListener" type="MenuKeyListener" line="306">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <javadoc line="310">
                Creates a &lt;code&gt;PropertyChangeListener&lt;/code&gt; which will be added to
                  the menu item.
                  If this method returns null then it will not be added to the menu item.                
                <return>
                    an instance of a <code>PropertyChangeListener</code> or null                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="createPropertyChangeListener" type="PropertyChangeListener" line="319">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <method name="getHandler" type="Handler" line="323">
                <scope line="324"/>
            </method>
            <method name="createInputMap" type="InputMap" line="330">
                <params>
                    <param name="condition" type="int"/>
                </params>
                <scope line="331"/>
            </method>
            <method name="updateAcceleratorBinding" type="void" line="337">
                <declaration name="accelerator" type="KeyStroke" line="338"/>
                <declaration name="windowInputMap" type="InputMap" line="339"/>
                <scope line="342"/>
                <scope line="345">
                    <scope line="346"/>
                </scope>
            </method>
            <method name="getMinimumSize" type="Dimension" line="356">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <declaration name="d" type="Dimension" line="357"/>
                <declaration name="v" type="View" line="358"/>
                <scope line="359"/>
            </method>
            <method name="getPreferredSize" type="Dimension" line="366">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <method name="getMaximumSize" type="Dimension" line="373">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <declaration name="d" type="Dimension" line="374"/>
                <declaration name="v" type="View" line="375"/>
                <scope line="376"/>
            </method>
            <method name="getPreferredMenuItemSize" type="Dimension" line="386">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="checkIcon" type="Icon"/>
                    <param name="arrowIcon" type="Icon"/>
                    <param name="defaultTextIconGap" type="int"/>
                </params>
                <comment line="389">
                    The method also determines the preferred width of the
                     parent popup menu (through DefaultMenuLayout class).
                     The menu width equals to the maximal width
                     among child menu items.                    
                </comment>
                <comment line="394">
                    Menu item width will be a sum of the widest check icon, label,
                     arrow icon and accelerator text among neighbor menu items.
                     For the latest menu item we will know the maximal widths exactly.
                     It will be the widest menu item and it will determine
                     the width of the parent popup menu.                    
                </comment>
                <comment line="400">
                    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                     There is a conceptual problem: if user sets preferred size manually
                     for a menu item, this method won&apos;t be called for it
                     (see JComponent.getPreferredSize()),
                     maximal widths won&apos;t be calculated, other menu items won&apos;t be able
                     to take them into account and will be layouted in such a way,
                     as there is no the item with manual preferred size.
                     But after the first paint() method call, all maximal widths
                     will be correctly calculated and layout of some menu items
                     can be changed. For example, it can cause a shift of
                     the icon and text when user points a menu item by mouse.                    
                </comment>
                <comment line="422">
                    Calculate the result width                    
                </comment>
                <comment line="426">
                    Take into account mimimal text offset.                    
                </comment>
                <comment line="436">
                    Calculate the result height                    
                </comment>
                <comment line="441">
                    Take into account menu item insets                    
                </comment>
                <comment line="448">
                    if the width is even, bump it up one. This is critical
                     for the focus dash line to draw properly                    
                </comment>
                <comment line="454">
                    if the height is even, bump it up one. This is critical
                     for the text to center properly                    
                </comment>
                <declaration name="mi" type="JMenuItem" line="411"/>
                <declaration name="lh" type="MenuItemLayoutHelper" line="412"/>
                <declaration name="result" type="Dimension" line="419"/>
                <scope line="428"/>
                <declaration name="insets" type="Insets" line="441"/>
                <scope line="442"/>
                <scope line="449"/>
                <scope line="457"/>
            </method>
            <javadoc line="464">
                We draw the background in paintMenuItem()
                  so override update (which fills the background of opaque
                  components by default) to just call paint().                
            </javadoc>
            <method name="update" type="void" line="470">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <method name="paint" type="void" line="474">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <method name="paintMenuItem" type="void" line="483">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="c" type="JComponent"/>
                    <param name="checkIcon" type="Icon"/>
                    <param name="arrowIcon" type="Icon"/>
                    <param name="background" type="Color"/>
                    <param name="foreground" type="Color"/>
                    <param name="defaultTextIconGap" type="int"/>
                </params>
                <comment line="485">
                    Save original graphics font and color                    
                </comment>
                <comment line="509">
                    Restore original graphics font and color                    
                </comment>
                <declaration name="holdf" type="Font" line="485"/>
                <declaration name="holdc" type="Color" line="486"/>
                <declaration name="mi" type="JMenuItem" line="488"/>
                <declaration name="viewRect" type="Rectangle" line="491"/>
                <declaration name="lh" type="MenuItemLayoutHelper" line="494"/>
                <declaration name="lr" type="MenuItemLayoutHelper.LayoutResult" line="499"/>
            </method>
            <method name="paintIcon" type="void" line="514">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="lh" type="MenuItemLayoutHelper"/>
                    <param name="lr" type="MenuItemLayoutHelper.LayoutResult"/>
                    <param name="holdc" type="Color"/>
                </params>
                <comment line="524">
                    Use default icon                    
                </comment>
                <scope line="515">
                    <declaration name="icon" type="Icon" line="516"/>
                    <declaration name="model" type="ButtonModel" line="517"/>
                    <scope line="518"/>
                    <scope line="520">
                        <scope line="522"/>
                    </scope>
                    <scope line="526"/>
                    <scope line="530"/>
                </scope>
            </method>
            <method name="paintCheckIcon" type="void" line="540">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="lh" type="MenuItemLayoutHelper"/>
                    <param name="lr" type="MenuItemLayoutHelper.LayoutResult"/>
                    <param name="holdc" type="Color"/>
                    <param name="foreground" type="Color"/>
                </params>
                <scope line="541">
                    <declaration name="model" type="ButtonModel" line="542"/>
                    <scope line="544"/>
                    <scope line="546"/>
                    <scope line="549"/>
                </scope>
            </method>
            <method name="paintAccText" type="void" line="558">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="lh" type="MenuItemLayoutHelper"/>
                    <param name="lr" type="MenuItemLayoutHelper.LayoutResult"/>
                </params>
                <comment line="564">
                    *** paint the accText disabled                    
                </comment>
                <comment line="581">
                    *** paint the accText normally                    
                </comment>
                <scope line="559">
                    <declaration name="model" type="ButtonModel" line="560"/>
                    <scope line="562">
                        <scope line="564"/>
                        <scope line="569"/>
                    </scope>
                    <scope line="579">
                        <scope line="583"/>
                        <scope line="585"/>
                    </scope>
                </scope>
            </method>
            <method name="paintText" type="void" line="596">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="lh" type="MenuItemLayoutHelper"/>
                    <param name="lr" type="MenuItemLayoutHelper.LayoutResult"/>
                </params>
                <comment line="600">
                    Text is HTML                    
                </comment>
                <comment line="603">
                    Text isn&apos;t HTML                    
                </comment>
                <scope line="597">
                    <scope line="598"/>
                    <scope line="601"/>
                </scope>
            </method>
            <method name="paintArrowIcon" type="void" line="610">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="lh" type="MenuItemLayoutHelper"/>
                    <param name="lr" type="MenuItemLayoutHelper.LayoutResult"/>
                    <param name="foreground" type="Color"/>
                </params>
                <scope line="611">
                    <declaration name="model" type="ButtonModel" line="612"/>
                    <scope line="614"/>
                    <scope line="617"/>
                </scope>
            </method>
            <method name="applyInsets" type="void" line="624">
                <params>
                    <param name="rect" type="Rectangle"/>
                    <param name="insets" type="Insets"/>
                </params>
                <scope line="625"/>
            </method>
            <javadoc line="633">
                Draws the background of the menu item.                
                <param>
                    g the paint graphics                    
                </param>
                <param>
                    menuItem menu item to be painted                    
                </param>
                <param>
                    bgColor selection background color                    
                </param>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="paintBackground" type="void" line="641">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="menuItem" type="JMenuItem"/>
                    <param name="bgColor" type="Color"/>
                </params>
                <declaration name="model" type="ButtonModel" line="642"/>
                <declaration name="oldColor" type="Color" line="643"/>
                <declaration name="menuWidth" type="int" line="644"/>
                <declaration name="menuHeight" type="int" line="645"/>
                <scope line="647">
                    <scope line="648"/>
                    <scope line="651"/>
                </scope>
                <scope line="658"/>
            </method>
            <javadoc line="665">
                Renders the text of the current menu item.
                  &lt;p&gt;                
                <param>
                    g graphics context                    
                </param>
                <param>
                    menuItem menu item to render                    
                </param>
                <param>
                    textRect bounding rectangle for rendering the text                    
                </param>
                <param>
                    text string to render                    
                </param>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="paintText" type="void" line="674">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="menuItem" type="JMenuItem"/>
                    <param name="textRect" type="Rectangle"/>
                    <param name="text" type="String"/>
                </params>
                <comment line="681">
                    *** paint the text disabled                    
                </comment>
                <comment line="696">
                    *** paint the text normally                    
                </comment>
                <comment line="698">
                    Uses protected field.                    
                </comment>
                <declaration name="model" type="ButtonModel" line="675"/>
                <declaration name="fm" type="FontMetrics" line="676"/>
                <declaration name="mnemIndex" type="int" line="677"/>
                <scope line="679">
                    <scope line="681"/>
                    <scope line="685"/>
                </scope>
                <scope line="694">
                    <scope line="696"/>
                </scope>
            </method>
            <method name="getPath" type="MenuElement[]" line="704">
                <comment line="714">
                    The parent popup menu is the last so far                    
                </comment>
                <comment line="719">
                    A sibling menuitem is the current selection
                    
                      This probably needs to handle &apos;exit submenu into
                     a menu item.  Search backwards along the current
                     selection until you find the parent popup menu,
                     then copy up to that and add yourself...                    
                </comment>
                <comment line="733">
                    System.out.println(&quot;Sibling condition -- &quot;);
                    System.out.println(&quot;Old array : &quot;);
                    printMenuElementArray(oldPath, false);
                    System.out.println(&quot;New array : &quot;);
                    printMenuElementArray(newPath, false);                    
                </comment>
                <declaration name="m" type="MenuSelectionManager" line="705"/>
                <declaration name="oldPath" type="MenuElement" line="706"/>
                <declaration name="newPath" type="MenuElement" line="707"/>
                <declaration name="i" type="int" line="708"/>
                <declaration name="parent" type="Component" line="711"/>
                <scope line="712"/>
                <scope line="717">
                    <declaration name="j" type="int" line="724"/>
                    <scope line="725"/>
                </scope>
            </method>
            <method name="printMenuElementArray" type="void" line="743">
                <params>
                    <param name="path" type="MenuElement"/>
                    <param name="dumpStack" type="boolean"/>
                </params>
                <declaration name="i" type="int" line="745"/>
                <scope line="746">
                    <declaration name="me" type="MenuElement" line="749"/>
                </scope>
            </method>
            <class name="MouseInputHandler" line="762">
                <comment line="764">
                    NOTE: This class exists only for backward compatability. All
                     its functionality has been moved into Handler. If you need to add
                     new functionality add it to the Handler, but make sure this
                     class calls into the Handler.                    
                </comment>
                <comment line="863">
                    MouseInputListener                    
                </comment>
                <comment line="921">
                    MenuDragListener                    
                </comment>
                <comment line="951">
                    PropertyChangeListener                    
                </comment>
                <implements interface="MouseInputListener"/>
                <method name="mouseClicked" type="void" line="768">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
                <method name="mousePressed" type="void" line="771">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
                <method name="mouseReleased" type="void" line="774">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
                <method name="mouseEntered" type="void" line="777">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
                <method name="mouseExited" type="void" line="780">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
                <method name="mouseDragged" type="void" line="783">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
                <method name="mouseMoved" type="void" line="786">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
            </class>
            <class name="Actions" line="792">
                <extends class="UIAction"/>
                <comment line="764">
                    NOTE: This class exists only for backward compatability. All
                     its functionality has been moved into Handler. If you need to add
                     new functionality add it to the Handler, but make sure this
                     class calls into the Handler.                    
                </comment>
                <comment line="863">
                    MouseInputListener                    
                </comment>
                <comment line="921">
                    MenuDragListener                    
                </comment>
                <comment line="951">
                    PropertyChangeListener                    
                </comment>
                <declaration name="CLICK" type="String" line="793"/>
                <method name="Actions" type="constructor" line="795">
                    <params>
                        <param name="key" type="String"/>
                    </params>
                </method>
                <method name="actionPerformed" type="void" line="799">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                    <declaration name="mi" type="JMenuItem" line="800"/>
                </method>
            </class>
            <javadoc line="806">
                Call this method when a menu item is to be activated.
                  This method handles some of the details of menu item activation
                  such as clearing the selected path and messaging the
                  JMenuItem&apos;s doClick() method.                
                <param>
                    msm  A MenuSelectionManager. The visual feedback and
                      internal bookkeeping tasks are delegated to
                      this MenuSelectionManager. If <code>null</code> is
                      passed as this argument, the
                      <code>MenuSelectionManager.defaultManager</code> is
                      used.                    
                </param>
                <see>
                    MenuSelectionManager                    
                </see>
                <see>
                    JMenuItem#doClick(int)                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="doClick" type="void" line="822">
                <params>
                    <param name="msm" type="MenuSelectionManager"/>
                </params>
                <comment line="824">
                    Auditory cue                    
                </comment>
                <comment line="829">
                    Visual feedback                    
                </comment>
                <scope line="824"/>
                <scope line="829"/>
            </method>
            <javadoc line="836">
                This is to see if the menu item in question is part of the
                  system menu on an internal frame.
                  The Strings that are being checked can be found in
                  MetalInternalFrameTitlePaneUI.java,
                  WindowsInternalFrameTitlePaneUI.java, and
                  MotifInternalFrameTitlePaneUI.java.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isInternalFrameSystemMenu" type="boolean" line="846">
                <declaration name="actionCommand" type="String" line="847"/>
                <scope line="851"/>
                <scope line="853"/>
            </method>
            <class name="Handler" line="860">
                <comment line="764">
                    NOTE: This class exists only for backward compatability. All
                     its functionality has been moved into Handler. If you need to add
                     new functionality add it to the Handler, but make sure this
                     class calls into the Handler.                    
                </comment>
                <comment line="863">
                    MouseInputListener                    
                </comment>
                <comment line="921">
                    MenuDragListener                    
                </comment>
                <comment line="951">
                    PropertyChangeListener                    
                </comment>
                <implements interface="MenuDragMouseListener"/>
                <implements interface="MouseInputListener"/>
                <implements interface="PropertyChangeListener"/>
                <method name="mouseClicked" type="void" line="865">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
                <method name="mousePressed" type="void" line="866">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
                <method name="mouseReleased" type="void" line="868">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                    <scope line="869"/>
                    <declaration name="manager" type="MenuSelectionManager" line="872"/>
                    <declaration name="p" type="Point" line="874"/>
                    <scope line="876"/>
                    <scope line="878"/>
                </method>
                <method name="mouseEntered" type="void" line="882">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                    <comment line="886">
                        4188027: drag enter/exit added in JDK 1.1.7A, JDK1.2                        
                    </comment>
                    <declaration name="manager" type="MenuSelectionManager" line="883"/>
                    <declaration name="modifiers" type="int" line="884"/>
                    <scope line="887"/>
                    <scope line="889"/>
                </method>
                <method name="mouseExited" type="void" line="893">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                    <comment line="898">
                        4188027: drag enter/exit added in JDK 1.1.7A, JDK1.2                        
                    </comment>
                    <declaration name="manager" type="MenuSelectionManager" line="894"/>
                    <declaration name="modifiers" type="int" line="896"/>
                    <scope line="899"/>
                    <scope line="901">
                        <declaration name="path" type="MenuElement" line="903"/>
                        <scope line="904">
                            <declaration name="newPath" type="MenuElement" line="905"/>
                            <declaration name="i" type="int" line="906"/>
                        </scope>
                    </scope>
                </method>
                <method name="mouseDragged" type="void" line="914">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
                <method name="mouseMoved" type="void" line="917">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
                <method name="menuDragMouseEntered" type="void" line="923">
                    <params>
                        <param name="e" type="MenuDragMouseEvent"/>
                    </params>
                    <declaration name="manager" type="MenuSelectionManager" line="924"/>
                    <declaration name="path" type="MenuElement" line="925"/>
                </method>
                <method name="menuDragMouseDragged" type="void" line="928">
                    <params>
                        <param name="e" type="MenuDragMouseEvent"/>
                    </params>
                    <declaration name="manager" type="MenuSelectionManager" line="929"/>
                    <declaration name="path" type="MenuElement" line="930"/>
                </method>
                <method name="menuDragMouseExited" type="void" line="933">
                    <params>
                        <param name="e" type="MenuDragMouseEvent"/>
                    </params>
                </method>
                <method name="menuDragMouseReleased" type="void" line="934">
                    <params>
                        <param name="e" type="MenuDragMouseEvent"/>
                    </params>
                    <scope line="935"/>
                    <declaration name="manager" type="MenuSelectionManager" line="938"/>
                    <declaration name="path" type="MenuElement" line="939"/>
                    <declaration name="p" type="Point" line="940"/>
                    <scope line="942"/>
                    <scope line="944"/>
                </method>
                <method name="propertyChange" type="void" line="953">
                    <params>
                        <param name="e" type="PropertyChangeEvent"/>
                    </params>
                    <comment line="962">
                        remove the old html view client property if one
                         existed, and install a new one if the text installed
                         into the JLabel is html source.                        
                    </comment>
                    <declaration name="name" type="String" line="954"/>
                    <scope line="957"/>
                    <scope line="960">
                        <declaration name="lbl" type="JMenuItem" line="964"/>
                        <declaration name="text" type="String" line="965"/>
                    </scope>
                    <scope line="967"/>
                </method>
            </class>
        </class>
    </source>