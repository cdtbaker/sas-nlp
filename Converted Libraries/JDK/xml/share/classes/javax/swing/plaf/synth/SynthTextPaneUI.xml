<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.plaf.synth">
        <import package="javax.swing"/>
        <import package="javax.swing.text"/>
        <import package="javax.swing.plaf"/>
        <import package="java.beans.PropertyChangeEvent"/>
        <import package="java.awt"/>
        <class name="SynthTextPaneUI" line="7">
            <extends class="SynthEditorPaneUI"/>
            <javadoc line="7">
                Provides the look and feel for a styled text editor in the
                  Synth look and feel.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <author>
                    Shannon Hickey                    
                </author>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <javadoc line="23">
                Creates a UI for the JTextPane.                
                <param>
                    c the JTextPane object                    
                </param>
                <return>
                    the UI object                    
                </return>
            </javadoc>
            <method name="createUI" type="ComponentUI" line="28">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <javadoc line="31">
                Fetches the name used as a key to lookup properties through the
                  UIManager.  This is used as a prefix to all the standard
                  text properties.                
                <return>
                    the name ("TextPane")                    
                </return>
            </javadoc>
            <method name="getPropertyPrefix" type="String" line="37"/>
            <javadoc line="40">
                Installs the UI for a component.  This does the following
                  things.
                  &lt;ol&gt;
                  &lt;li&gt;
                  Sets opaqueness of the associated component according to its style,
                  if the opaque property has not already been set by the client program.
                  &lt;li&gt;
                  Installs the default caret and highlighter into the
                  associated component. These properties are only set if their
                  current value is either {@code null} or an instance of{@link UIResource}.
                  &lt;li&gt;
                  Attaches to the editor and model.  If there is no
                  model, a default one is created.
                  &lt;li&gt;
                  Creates the view factory and the view hierarchy used
                  to represent the model.
                  &lt;/ol&gt;                
                <param>
                    c the editor component                    
                </param>
                <see>
                    javax.swing.plaf.basic.BasicTextUI#installUI                    
                </see>
                <see>
                    ComponentUI#installUI                    
                </see>
            </javadoc>
            <method name="installUI" type="void" line="62">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <javadoc line="67">
                This method gets called when a bound property is changed
                  on the associated JTextComponent.  This is a hook
                  which UI implementations may change to reflect how the
                  UI displays bound properties of JTextComponent subclasses.
                  If the font, foreground or document has changed, the
                  the appropriate property is set in the default style of
                  the document.                
                <param>
                    evt the property change event                    
                </param>
            </javadoc>
            <method name="propertyChange" type="void" line="77">
                <params>
                    <param name="evt" type="PropertyChangeEvent"/>
                </params>
                <declaration name="name" type="String" line="79"/>
                <scope line="80"/>
                <scope line="83"/>
                <scope line="86">
                    <declaration name="comp" type="JComponent" line="87"/>
                </scope>
            </method>
            <javadoc line="92">
                Update the color in the default style of the document.                
                <param>
                    color the new color to use or null to remove the color attribute
                      from the document's style                    
                </param>
            </javadoc>
            <method name="updateForeground" type="void" line="97">
                <params>
                    <param name="color" type="Color"/>
                </params>
                <declaration name="doc" type="StyledDocument" line="98"/>
                <declaration name="style" type="Style" line="99"/>
                <scope line="100"/>
                <scope line="103"/>
                <scope line="106"/>
            </method>
            <javadoc line="110">
                Update the font in the default style of the document.                
                <param>
                    font the new font to use or null to remove the font attribute
                      from the document's style                    
                </param>
            </javadoc>
            <method name="updateFont" type="void" line="115">
                <params>
                    <param name="font" type="Font"/>
                </params>
                <declaration name="doc" type="StyledDocument" line="116"/>
                <declaration name="style" type="Style" line="117"/>
                <scope line="118"/>
                <scope line="121"/>
                <scope line="127"/>
            </method>
            <method name="paintBackground" type="void" line="134">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="g" type="Graphics"/>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <javadoc line="137">
                @inheritDoc                
            </javadoc>
            <method name="paintBorder" type="void" line="140">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="g" type="Graphics"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
            </method>
        </class>
    </source>