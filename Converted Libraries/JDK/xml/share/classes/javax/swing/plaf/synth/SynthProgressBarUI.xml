<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.plaf.synth">
        <import package="java.awt"/>
        <import package="java.awt.geom.AffineTransform"/>
        <import package="javax.swing"/>
        <import package="javax.swing.plaf"/>
        <import package="javax.swing.plaf.basic.BasicProgressBarUI"/>
        <import package="java.beans.PropertyChangeListener"/>
        <import package="java.beans.PropertyChangeEvent"/>
        <import package="sun.swing.SwingUtilities2"/>
        <class name="SynthProgressBarUI" line="37">
            <extends class="BasicProgressBarUI"/>
            <comment line="49">
                added for Nimbus LAF                
            </comment>
            <comment line="51">
                whether to tile indeterminate painting                
            </comment>
            <comment line="52">
                the width of each tile                
            </comment>
            <implements interface="SynthUI"/>
            <implements interface="PropertyChangeListener"/>
            <javadoc line="37">
                Provides the Synth L&amp;F UI delegate for{@link javax.swing.JProgressBar}.                
                <author>
                    Joshua Outwater                    
                </author>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <declaration name="style" type="SynthStyle" line="46"/>
            <declaration name="progressPadding" type="int" line="47"/>
            <declaration name="rotateText" type="boolean" line="48"/>
            <declaration name="paintOutsideClip" type="boolean" line="49"/>
            <declaration name="tileWhenIndeterminate" type="boolean" line="50"/>
            <declaration name="tileWidth" type="int" line="51"/>
            <javadoc line="53">
                Creates a new UI object for the given component.                
                <param>
                    x component to create UI object for                    
                </param>
                <return>
                    the UI object                    
                </return>
            </javadoc>
            <method name="createUI" type="ComponentUI" line="59">
                <params>
                    <param name="x" type="JComponent"/>
                </params>
            </method>
            <javadoc line="63">
                @inheritDoc                
            </javadoc>
            <method name="installListeners" type="void" line="67"/>
            <javadoc line="72">
                @inheritDoc                
            </javadoc>
            <method name="uninstallListeners" type="void" line="76"/>
            <javadoc line="81">
                @inheritDoc                
            </javadoc>
            <method name="installDefaults" type="void" line="85"/>
            <method name="updateStyle" type="void" line="89">
                <params>
                    <param name="c" type="JProgressBar"/>
                </params>
                <comment line="103">
                    handle scaling for sizeVarients for special case components. The                    
                </comment>
                <comment line="104">
                    key &quot;JComponent.sizeVariant&quot; scales for large/small/mini                    
                </comment>
                <comment line="105">
                    components are based on Apples LAF                    
                </comment>
                <declaration name="context" type="SynthContext" line="90"/>
                <declaration name="oldStyle" type="SynthStyle" line="91"/>
                <declaration name="scaleKey" type="String" line="106"/>
                <scope line="108">
                    <scope line="109"/>
                    <scope line="111"/>
                    <scope line="113"/>
                </scope>
            </method>
            <javadoc line="120">
                @inheritDoc                
            </javadoc>
            <method name="uninstallDefaults" type="void" line="124">
                <declaration name="context" type="SynthContext" line="125"/>
            </method>
            <javadoc line="132">
                @inheritDoc                
            </javadoc>
            <method name="getContext" type="SynthContext" line="136">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <method name="getContext" type="SynthContext" line="140">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="state" type="int"/>
                </params>
            </method>
            <method name="getComponentState" type="int" line="145">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <javadoc line="149">
                @inheritDoc                
            </javadoc>
            <method name="getBaseline" type="int" line="153">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <scope line="156">
                    <declaration name="context" type="SynthContext" line="157"/>
                    <declaration name="font" type="Font" line="158"/>
                    <declaration name="metrics" type="FontMetrics" line="159"/>
                </scope>
            </method>
            <javadoc line="167">
                @inheritDoc                
            </javadoc>
            <method name="getBox" type="Rectangle" line="171">
                <params>
                    <param name="r" type="Rectangle"/>
                </params>
                <scope line="172"/>
                <scope line="174"/>
            </method>
            <javadoc line="179">
                @inheritDoc                
            </javadoc>
            <method name="setAnimationIndex" type="void" line="183">
                <params>
                    <param name="newValue" type="int"/>
                </params>
                <scope line="184">
                    <scope line="185"/>
                </scope>
                <scope line="190"/>
            </method>
            <javadoc line="195">
                Notifies this UI delegate to repaint the specified component.
                  This method paints the component background, then calls
                  the {@link #paint(SynthContext,Graphics)} method.
                  &lt;p&gt;In general, this method does not need to be overridden by subclasses.
                  All Look and Feel rendering code should reside in the {@code paint} method.                
                <param>
                    g the {@code Graphics} object used for painting                    
                </param>
                <param>
                    c the component being painted                    
                </param>
                <see>
                    #paint(SynthContext,Graphics)                    
                </see>
            </javadoc>
            <method name="update" type="void" line="208">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="c" type="JComponent"/>
                </params>
                <declaration name="context" type="SynthContext" line="209"/>
            </method>
            <javadoc line="219">
                Paints the specified component according to the Look and Feel.
                  &lt;p&gt;This method is not used by Synth Look and Feel.
                  Painting is handled by the {@link #paint(SynthContext,Graphics)} method.                
                <param>
                    g the {@code Graphics} object used for painting                    
                </param>
                <param>
                    c the component being painted                    
                </param>
                <see>
                    #paint(SynthContext,Graphics)                    
                </see>
            </javadoc>
            <method name="paint" type="void" line="229">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="c" type="JComponent"/>
                </params>
                <declaration name="context" type="SynthContext" line="230"/>
            </method>
            <javadoc line="236">
                Paints the specified component.                
                <param>
                    context context for the component being painted                    
                </param>
                <param>
                    g the {@code Graphics} object used for painting                    
                </param>
                <see>
                    #update(Graphics,JComponent)                    
                </see>
            </javadoc>
            <method name="paint" type="void" line="243">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="g" type="Graphics"/>
                </params>
                <comment line="264">
                    JProgressBar.VERTICAL                    
                </comment>
                <comment line="275">
                    When the progress bar is vertical we always paint                    
                </comment>
                <comment line="276">
                    from bottom to top, not matter what the component                    
                </comment>
                <comment line="277">
                    orientation is.                    
                </comment>
                <comment line="288">
                    if tiling and indeterminate, then paint the progress bar foreground a                    
                </comment>
                <comment line="289">
                    bit wider than it should be. Shift as needed to ensure that there is                    
                </comment>
                <comment line="290">
                    an animated effect                    
                </comment>
                <comment line="297">
                    paint each tile horizontally                    
                </comment>
                <comment line="302">
                    JProgressBar.VERTICAL                    
                </comment>
                <comment line="303">
                    paint each tile vertically                    
                </comment>
                <declaration name="pBar" type="JProgressBar" line="244"/>
                <declaration name="x" type="int" line="245"/>
                <scope line="246">
                    <declaration name="pBarInsets" type="Insets" line="247"/>
                    <declaration name="percentComplete" type="double" line="248"/>
                    <scope line="249">
                        <scope line="250">
                            <scope line="260"/>
                        </scope>
                        <scope line="264"/>
                    </scope>
                </scope>
                <scope line="280"/>
                <scope line="291">
                    <declaration name="percentComplete" type="double" line="292"/>
                    <declaration name="offset" type="int" line="293"/>
                    <declaration name="clip" type="Shape" line="294"/>
                    <scope line="296">
                        <scope line="298"/>
                    </scope>
                    <scope line="302">
                        <scope line="304"/>
                    </scope>
                </scope>
                <scope line="310"/>
                <scope line="315"/>
            </method>
            <javadoc line="320">
                Paints the component&apos;s text.                
                <param>
                    context context for the component being painted                    
                </param>
                <param>
                    g {@code Graphics} object used for painting                    
                </param>
                <param>
                    title the text to paint                    
                </param>
            </javadoc>
            <method name="paintText" type="void" line="327">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="g" type="Graphics"/>
                    <param name="title" type="String"/>
                </params>
                <comment line="340">
                    Calculate the position for the text.                    
                </comment>
                <comment line="355">
                    Progress bar isn&apos;t wide enough for the font.  Don&apos;t paint it.                    
                </comment>
                <comment line="360">
                    Paint the text.                    
                </comment>
                <comment line="367">
                    Calculate the bounds for the text.                    
                </comment>
                <comment line="374">
                    Progress bar isn&apos;t tall enough for the font.  Don&apos;t paint it.                    
                </comment>
                <comment line="379">
                    Paint the text.                    
                </comment>
                <scope line="328">
                    <declaration name="style" type="SynthStyle" line="329"/>
                    <declaration name="font" type="Font" line="330"/>
                    <declaration name="fm" type="FontMetrics" line="331"/>
                    <declaration name="strLength" type="int" line="333"/>
                    <declaration name="bounds" type="Rectangle" line="335"/>
                    <scope line="338">
                        <declaration name="g2" type="Graphics2D" line="339"/>
                        <declaration name="textPos" type="Point" line="341"/>
                        <declaration name="rotation" type="AffineTransform" line="342"/>
                        <scope line="343"/>
                        <scope line="348"/>
                        <scope line="356"/>
                    </scope>
                    <scope line="366">
                        <declaration name="textRect" type="Rectangle" line="368"/>
                        <scope line="375"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="388">
                @inheritDoc                
            </javadoc>
            <method name="paintBorder" type="void" line="393">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="g" type="Graphics"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
            </method>
            <javadoc line="398">
                @inheritDoc                
            </javadoc>
            <method name="propertyChange" type="void" line="402">
                <params>
                    <param name="e" type="PropertyChangeEvent"/>
                </params>
                <scope line="404"/>
            </method>
            <javadoc line="409">
                @inheritDoc                
            </javadoc>
            <method name="getPreferredSize" type="Dimension" line="413">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <comment line="423">
                    adjust the height if necessary to make room for the string                    
                </comment>
                <comment line="428">
                    adjust the width if necessary to make room for the string                    
                </comment>
                <comment line="438">
                    make sure the width is big enough for the string                    
                </comment>
                <comment line="443">
                    make sure the height is big enough for the string                    
                </comment>
                <comment line="452">
                    handle scaling for sizeVarients for special case components. The                    
                </comment>
                <comment line="453">
                    key &quot;JComponent.sizeVariant&quot; scales for large/small/mini                    
                </comment>
                <comment line="454">
                    components are based on Apples LAF                    
                </comment>
                <declaration name="size" type="Dimension" line="414"/>
                <declaration name="border" type="Insets" line="415"/>
                <declaration name="fontSizer" type="FontMetrics" line="416"/>
                <declaration name="progString" type="String" line="417"/>
                <declaration name="stringHeight" type="int" line="418"/>
                <scope line="420">
                    <scope line="422">
                        <scope line="424"/>
                        <declaration name="stringWidth" type="int" line="429"/>
                        <scope line="431"/>
                    </scope>
                </scope>
                <scope line="435">
                    <scope line="437">
                        <scope line="439"/>
                        <declaration name="stringWidth" type="int" line="444"/>
                        <scope line="446"/>
                    </scope>
                </scope>
                <declaration name="scaleKey" type="String" line="455"/>
                <scope line="457">
                    <scope line="458"/>
                    <scope line="461"/>
                    <scope line="464"/>
                </scope>
            </method>
        </class>
    </source>