<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.plaf.synth">
        <import package="java.awt"/>
        <import package="javax.swing"/>
        <import package="javax.swing.text"/>
        <import package="javax.swing.plaf"/>
        <import package="javax.swing.plaf.basic.BasicEditorPaneUI"/>
        <import package="java.beans.PropertyChangeEvent"/>
        <class name="SynthEditorPaneUI" line="35">
            <extends class="BasicEditorPaneUI"/>
            <comment line="45">
                I would prefer to use UIResource instad of this.
                 Unfortunately Boolean is a final class                
            </comment>
            <implements interface="SynthUI"/>
            <javadoc line="35">
                Provides the Synth L&amp;F UI delegate for{@link javax.swing.JEditorPane}.                
                <author>
                    Shannon Hickey                    
                </author>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <declaration name="style" type="SynthStyle" line="43"/>
            <declaration name="localTrue" type="Boolean" line="48"/>
            <javadoc line="50">
                Creates a new UI object for the given component.                
                <param>
                    c component to create UI object for                    
                </param>
                <return>
                    the UI object                    
                </return>
            </javadoc>
            <method name="createUI" type="ComponentUI" line="56">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <javadoc line="60">
                @inheritDoc                
            </javadoc>
            <method name="installDefaults" type="void" line="64">
                <comment line="66">
                    Installs the text cursor on the component                    
                </comment>
                <declaration name="c" type="JComponent" line="67"/>
                <declaration name="clientProperty" type="Object" line="68"/>
                <scope line="70"/>
            </method>
            <javadoc line="76">
                @inheritDoc                
            </javadoc>
            <method name="uninstallDefaults" type="void" line="80">
                <declaration name="context" type="SynthContext" line="81"/>
                <declaration name="c" type="JComponent" line="82"/>
                <declaration name="clientProperty" type="Object" line="89"/>
                <scope line="91"/>
            </method>
            <javadoc line="98">
                This method gets called when a bound property is changed
                  on the associated JTextComponent.  This is a hook
                  which UI implementations may change to reflect how the
                  UI displays bound properties of JTextComponent subclasses.
                  This is implemented to rebuild the ActionMap based upon an
                  EditorKit change.                
                <param>
                    evt the property change event                    
                </param>
            </javadoc>
            <method name="propertyChange" type="void" line="109">
                <params>
                    <param name="evt" type="PropertyChangeEvent"/>
                </params>
                <scope line="110"/>
            </method>
            <method name="updateStyle" type="void" line="116">
                <params>
                    <param name="comp" type="JTextComponent"/>
                </params>
                <declaration name="context" type="SynthContext" line="117"/>
                <declaration name="oldStyle" type="SynthStyle" line="118"/>
                <scope line="122">
                    <scope line="125"/>
                </scope>
            </method>
            <javadoc line="133">
                @inheritDoc                
            </javadoc>
            <method name="getContext" type="SynthContext" line="137">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <method name="getContext" type="SynthContext" line="141">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="state" type="int"/>
                </params>
            </method>
            <method name="getComponentState" type="int" line="146">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <javadoc line="150">
                Notifies this UI delegate to repaint the specified component.
                  This method paints the component background, then calls
                  the {@link #paint(SynthContext,Graphics)} method.
                  &lt;p&gt;In general, this method does not need to be overridden by subclasses.
                  All Look and Feel rendering code should reside in the {@code paint} method.                
                <param>
                    g the {@code Graphics} object used for painting                    
                </param>
                <param>
                    c the component being painted                    
                </param>
                <see>
                    #paint(SynthContext,Graphics)                    
                </see>
            </javadoc>
            <method name="update" type="void" line="163">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="c" type="JComponent"/>
                </params>
                <declaration name="context" type="SynthContext" line="164"/>
            </method>
            <javadoc line="172">
                Paints the specified component.                
                <param>
                    context context for the component being painted                    
                </param>
                <param>
                    g the {@code Graphics} object used for painting                    
                </param>
                <see>
                    #update(Graphics,JComponent)                    
                </see>
            </javadoc>
            <method name="paint" type="void" line="179">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="g" type="Graphics"/>
                </params>
            </method>
            <javadoc line="183">
                @inheritDoc                
            </javadoc>
            <method name="paintBackground" type="void" line="187">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
                <comment line="189">
                    Overriden to do nothing, all our painting is done from update/paint.                    
                </comment>
            </method>
            <method name="paintBackground" type="void" line="191">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="g" type="Graphics"/>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <javadoc line="196">
                @inheritDoc                
            </javadoc>
            <method name="paintBorder" type="void" line="201">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="g" type="Graphics"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
            </method>
        </class>
    </source>