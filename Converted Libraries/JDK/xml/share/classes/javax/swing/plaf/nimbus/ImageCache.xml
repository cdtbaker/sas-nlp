<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.plaf.nimbus">
        <import package="java.awt.GraphicsConfiguration"/>
        <import package="java.awt.Image"/>
        <import package="java.lang.ref.ReferenceQueue"/>
        <import package="java.lang.ref.SoftReference"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.LinkedHashMap"/>
        <import package="java.util.Map"/>
        <import package="java.util.concurrent.locks.ReadWriteLock"/>
        <import package="java.util.concurrent.locks.ReentrantReadWriteLock"/>
        <class name="ImageCache" line="12">
            <javadoc line="12">
                ImageCache - A fixed pixel count sized cache of Images keyed by arbitrary set of arguments. All images are held with
                  SoftReferences so they will be dropped by the GC if heap memory gets tight. When our size hits max pixel count least
                  recently requested images are removed first.                
                <author>
                    Created by Jasper Potts (Aug 7, 2007)                    
                </author>
            </javadoc>
            <declaration name="map" type="LinkedHashMap&lt;Integer,PixelCountSoftReference&gt;" line="19"/>
            <declaration name="maxPixelCount" type="int" line="20"/>
            <declaration name="maxSingleImagePixelSize" type="int" line="21"/>
            <declaration name="currentPixelCount" type="int" line="22"/>
            <declaration name="lock" type="ReadWriteLock" line="23"/>
            <declaration name="referenceQueue" type="ReferenceQueue&lt;Image&gt;" line="24"/>
            <declaration name="instance" type="ImageCache" line="25"/>
            <javadoc line="26">
                Get static singleton instance                
            </javadoc>
            <method name="getInstance" type="ImageCache" line="29"/>
            <method name="ImageCache" type="constructor" line="32"/>
            <method name="ImageCache" type="constructor" line="36">
                <params>
                    <param name="maxPixelCount" type="int"/>
                    <param name="maxSingleImagePixelSize" type="int"/>
                </params>
            </method>
            <javadoc line="40">
                Clear the cache                
            </javadoc>
            <method name="flush" type="void" line="43">
                <scope line="45"/>
                <scope line="48"/>
            </method>
            <javadoc line="52">
                Check if the image size is to big to be stored in the cache                
                <param>
                    w The image width                    
                </param>
                <param>
                    h The image height                    
                </param>
                <return>
                    True if the image size is less than max                    
                </return>
            </javadoc>
            <method name="isImageCachable" type="boolean" line="58">
                <params>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
            </method>
            <javadoc line="61">
                Get the cached image for given keys                
                <param>
                    config The graphics configuration, needed if cached image is a Volatile Image. Used as part of cache key                    
                </param>
                <param>
                    w      The image width, used as part of cache key                    
                </param>
                <param>
                    h      The image height, used as part of cache key                    
                </param>
                <param>
                    args   Other arguments to use as part of the cache key                    
                </param>
                <return>
                    Returns the cached Image, or null there is no cached image for key                    
                </return>
            </javadoc>
            <method name="getImage" type="Image" line="69">
                <params>
                    <param name="config" type="GraphicsConfiguration"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="args" type="Object"/>
                </params>
                <scope line="71">
                    <declaration name="ref" type="PixelCountSoftReference" line="72"/>
                    <scope line="73"/>
                    <scope line="76"/>
                </scope>
                <scope line="80"/>
            </method>
            <javadoc line="84">
                Sets the cached image for the specified constraints.                
                <param>
                    image  The image to store in cache                    
                </param>
                <param>
                    config The graphics configuration, needed if cached image is a Volatile Image. Used as part of cache key                    
                </param>
                <param>
                    w      The image width, used as part of cache key                    
                </param>
                <param>
                    h      The image height, used as part of cache key                    
                </param>
                <param>
                    args   Other arguments to use as part of the cache key                    
                </param>
                <return>
                    true if the image could be cached or false if the image is too big                    
                </return>
            </javadoc>
            <method name="setImage" type="boolean" line="93">
                <params>
                    <param name="image" type="Image"/>
                    <param name="config" type="GraphicsConfiguration"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="args" type="Object"/>
                </params>
                <declaration name="hash" type="int" line="95"/>
                <scope line="97">
                    <declaration name="ref" type="PixelCountSoftReference" line="98"/>
                    <scope line="99"/>
                    <scope line="102"/>
                    <declaration name="newPixelCount" type="int" line="106"/>
                    <scope line="108">
                        <scope line="109"/>
                    </scope>
                    <scope line="114">
                        <declaration name="mapIter" type="Iterator&lt;Map.Entry&lt;Integer,PixelCountSoftReference&gt;&gt;" line="115"/>
                        <scope line="116">
                            <declaration name="entry" type="Map.Entry&lt;Integer,PixelCountSoftReference&gt;" line="117"/>
                            <declaration name="img" type="Image" line="119"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="127"/>
            </method>
            <javadoc line="131">
                Create a unique hash from all the input                
            </javadoc>
            <method name="hash" type="int" line="134">
                <params>
                    <param name="config" type="GraphicsConfiguration"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="args" type="Object"/>
                </params>
                <declaration name="hash" type="int" line="135"/>
            </method>
            <class name="PixelCountSoftReference" line="142">
                <extends class="SoftReference">
                    <type_params>
                        <type_param name="Image"/>
                    </type_params>
                </extends>
                <javadoc line="142">
                    Extended SoftReference that stores the pixel count even after the image is lost                    
                </javadoc>
                <declaration name="pixelCount" type="int" line="146"/>
                <declaration name="hash" type="int" line="147"/>
                <declaration name="config" type="GraphicsConfiguration" line="148"/>
                <declaration name="w" type="int" line="149"/>
                <declaration name="h" type="int" line="150"/>
                <declaration name="args" type="Object[]" line="151"/>
                <method name="PixelCountSoftReference" type="constructor" line="152">
                    <params>
                        <param name="referent" type="Image"/>
                        <param name="q" type="ReferenceQueue<? super Image>"/>
                        <param name="pixelCount" type="int"/>
                        <param name="hash" type="int"/>
                        <param name="config" type="GraphicsConfiguration"/>
                        <param name="w" type="int"/>
                        <param name="h" type="int"/>
                        <param name="args" type="Object[]"/>
                    </params>
                </method>
                <method name="equals" type="boolean" line="161">
                    <params>
                        <param name="config" type="GraphicsConfiguration"/>
                        <param name="w" type="int"/>
                        <param name="h" type="int"/>
                        <param name="args" type="Object[]"/>
                    </params>
                </method>
            </class>
        </class>
    </source>