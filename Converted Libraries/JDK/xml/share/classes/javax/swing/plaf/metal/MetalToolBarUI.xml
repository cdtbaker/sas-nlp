<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.plaf.metal">
        <import package="javax.swing"/>
        <import package="java.awt.Color"/>
        <import package="java.awt.Component"/>
        <import package="java.awt.Container"/>
        <import package="java.awt.Dimension"/>
        <import package="java.awt.Frame"/>
        <import package="java.awt.Graphics"/>
        <import package="java.awt.GraphicsEnvironment"/>
        <import package="java.awt.Insets"/>
        <import package="java.awt.Point"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.event"/>
        <import package="java.lang.ref.WeakReference"/>
        <import package="java.util"/>
        <import package="java.beans.PropertyChangeListener"/>
        <import package="javax.swing.event"/>
        <import package="javax.swing.border"/>
        <import package="javax.swing.plaf"/>
        <import package="javax.swing.plaf.basic"/>
        <class name="MetalToolBarUI" line="21">
            <extends class="BasicToolBarUI"/>
            <javadoc line="21">
                A Metal Look and Feel implementation of ToolBarUI.  This implementation
                  is a &quot;combined&quot; view/controller.
                  &lt;p&gt;                
                <author>
                    Jeff Shapiro                    
                </author>
            </javadoc>
            <declaration name="components" type="List&amp;lt;WeakReference&amp;lt;JComponent&amp;gt;&amp;gt;" line="28"/>
            <javadoc line="28">
                An array of WeakReferences that point to JComponents. This will contain
                  instances of JToolBars and JMenuBars and is used to find
                  JToolBars/JMenuBars that border each other.                
            </javadoc>
            <declaration name="contListener" type="ContainerListener" line="34"/>
            <javadoc line="34">
                This protected field is implemenation specific. Do not access directly
                  or override. Use the create method instead.                
                <see>
                    #createContainerListener                    
                </see>
            </javadoc>
            <declaration name="rolloverListener" type="PropertyChangeListener" line="40"/>
            <javadoc line="40">
                This protected field is implemenation specific. Do not access directly
                  or override. Use the create method instead.                
                <see>
                    #createRolloverListener                    
                </see>
            </javadoc>
            <declaration name="nonRolloverBorder" type="Border" line="46"/>
            <declaration name="lastMenuBar" type="JMenuBar" line="47"/>
            <javadoc line="47">
                Last menubar the toolbar touched.  This is only useful for ocean.                
            </javadoc>
            <javadoc line="51">
                Registers the specified component.                
            </javadoc>
            <method name="register" type="void" line="54">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <scope line="55"/>
            </method>
            <javadoc line="60">
                Unregisters the specified component.                
            </javadoc>
            <method name="unregister" type="void" line="63">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <scope line="64">
                    <declaration name="target" type="JComponent" line="65"/>
                    <scope line="66"/>
                </scope>
            </method>
            <javadoc line="71">
                Finds a previously registered component of class &lt;code&gt;target&lt;/code&gt;
                  that shares the JRootPane ancestor of &lt;code&gt;from&lt;/code&gt;.                
            </javadoc>
            <method name="findRegisteredComponentOfType" type="Object" line="75">
                <params>
                    <param name="from" type="JComponent"/>
                    <param name="target" type="Class"/>
                </params>
                <declaration name="rp" type="JRootPane" line="76"/>
                <scope line="77">
                    <scope line="78">
                        <declaration name="component" type="Object" line="79"/>
                        <scope line="80"/>
                        <scope line="83"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="90">
                Returns true if the passed in JMenuBar is above a horizontal
                  JToolBar.                
            </javadoc>
            <method name="doesMenuBarBorderToolBar" type="boolean" line="94">
                <params>
                    <param name="c" type="JMenuBar"/>
                </params>
                <declaration name="tb" type="JToolBar" line="95"/>
                <scope line="96">
                    <declaration name="rp" type="JRootPane" line="97"/>
                    <declaration name="point" type="Point" line="98"/>
                    <declaration name="menuX" type="int" line="100"/>
                    <declaration name="menuY" type="int" line="101"/>
                </scope>
            </method>
            <method name="createUI" type="ComponentUI" line="108">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <method name="installUI" type="void" line="111">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <method name="uninstallUI" type="void" line="115">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <method name="installListeners" type="void" line="120">
                <scope line="123"/>
                <scope line="127"/>
            </method>
            <method name="uninstallListeners" type="void" line="131">
                <scope line="133"/>
                <scope line="137"/>
            </method>
            <method name="createRolloverBorder" type="Border" line="141"/>
            <method name="createNonRolloverBorder" type="Border" line="144"/>
            <javadoc line="147">
                Creates a non rollover border for Toggle buttons in the toolbar.                
            </javadoc>
            <method name="createNonRolloverToggleBorder" type="Border" line="150"/>
            <method name="setBorderToNonRollover" type="void" line="153">
                <params>
                    <param name="c" type="Component"/>
                </params>
                <scope line="154">
                    <declaration name="b" type="JToggleButton" line="155"/>
                    <declaration name="border" type="Border" line="156"/>
                    <scope line="158">
                        <scope line="159"/>
                    </scope>
                </scope>
                <scope line="165"/>
            </method>
            <javadoc line="169">
                Creates a container listener that will be added to the JToolBar.
                  If this method returns null then it will not be added to the
                  toolbar.                
                <return>
                    an instance of a &lt;code&gt;ContainerListener&lt;/code&gt; or null                    
                </return>
            </javadoc>
            <method name="createContainerListener" type="ContainerListener" line="175"/>
            <javadoc line="178">
                Creates a property change listener that will be added to the JToolBar.
                  If this method returns null then it will not be added to the
                  toolbar.                
                <return>
                    an instance of a &lt;code&gt;PropertyChangeListener&lt;/code&gt; or null                    
                </return>
            </javadoc>
            <method name="createRolloverListener" type="PropertyChangeListener" line="184"/>
            <method name="createDockingListener" type="MouseInputListener" line="187"/>
            <method name="setDragOffset" type="void" line="190">
                <params>
                    <param name="p" type="Point"/>
                </params>
                <scope line="191">
                    <scope line="192"/>
                </scope>
            </method>
            <javadoc line="198">
                If necessary paints the background of the component, then invokes
                  &lt;code&gt;paint&lt;/code&gt;.                
                <param>
                    g Graphics to paint to                    
                </param>
                <param>
                    c JComponent painting on                    
                </param>
                <throws>
                    NullPointerException if &lt;code&gt;g&lt;/code&gt; or &lt;code&gt;c&lt;/code&gt; is
                      null                    
                </throws>
                <see>
                    javax.swing.plaf.ComponentUI#update                    
                </see>
                <see>
                    javax.swing.plaf.ComponentUI#paint                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="update" type="void" line="209">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="c" type="JComponent"/>
                </params>
                <scope line="210"/>
                <scope line="213">
                    <declaration name="rp" type="JRootPane" line="214"/>
                    <declaration name="mb" type="JMenuBar" line="215"/>
                    <scope line="216">
                        <declaration name="point" type="Point" line="217"/>
                        <declaration name="x" type="int" line="219"/>
                        <declaration name="y" type="int" line="220"/>
                        <scope line="223"/>
                    </scope>
                    <scope line="229"/>
                </scope>
            </method>
            <method name="setLastMenuBar" type="void" line="238">
                <params>
                    <param name="lastMenuBar" type="JMenuBar"/>
                </params>
                <scope line="239">
                    <scope line="240">
                        <scope line="241"/>
                        <scope line="244"/>
                    </scope>
                </scope>
            </method>
            <class name="MetalContainerListener" line="251">
                <extends class="BasicToolBarUI.ToolBarContListener"/>
            </class>
            <class name="MetalRolloverListener" line="253">
                <extends class="BasicToolBarUI.PropertyListener"/>
            </class>
            <class name="MetalDockingListener" line="255">
                <extends class="DockingListener"/>
                <declaration name="pressedInBumps" type="boolean" line="256"/>
                <method name="MetalDockingListener" type="constructor" line="257">
                    <params>
                        <param name="t" type="JToolBar"/>
                    </params>
                </method>
                <method name="mousePressed" type="void" line="260">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                    <scope line="262"/>
                    <declaration name="bumpRect" type="Rectangle" line="266"/>
                    <scope line="267">
                        <declaration name="x" type="int" line="268"/>
                    </scope>
                    <scope line="271"/>
                    <scope line="274">
                        <declaration name="dragOffset" type="Point" line="276"/>
                        <scope line="277"/>
                    </scope>
                </method>
                <method name="mouseDragged" type="void" line="283">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                    <scope line="284"/>
                </method>
            </class>
        </class>
    </source>