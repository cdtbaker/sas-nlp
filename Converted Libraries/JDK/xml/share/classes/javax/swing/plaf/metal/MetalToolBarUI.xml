<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.plaf.metal">
        <import package="javax.swing"/>
        <import package="java.awt.Color"/>
        <import package="java.awt.Component"/>
        <import package="java.awt.Container"/>
        <import package="java.awt.Dimension"/>
        <import package="java.awt.Frame"/>
        <import package="java.awt.Graphics"/>
        <import package="java.awt.GraphicsEnvironment"/>
        <import package="java.awt.Insets"/>
        <import package="java.awt.Point"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.event"/>
        <import package="java.lang.ref.WeakReference"/>
        <import package="java.util"/>
        <import package="java.beans.PropertyChangeListener"/>
        <import package="javax.swing.event"/>
        <import package="javax.swing.border"/>
        <import package="javax.swing.plaf"/>
        <import package="javax.swing.plaf.basic"/>
        <class name="MetalToolBarUI" line="50">
            <extends class="BasicToolBarUI"/>
            <comment line="351">
                No longer used. Cannot remove for compatibility reasons                
            </comment>
            <comment line="355">
                No longer used. Cannot remove for compatibility reasons                
            </comment>
            <comment line="396">
                end class MetalDockingListener                
            </comment>
            <javadoc line="50">
                A Metal Look and Feel implementation of ToolBarUI.  This implementation
                  is a &quot;combined&quot; view/controller.
                  &lt;p&gt;                
                <author>
                    Jeff Shapiro                    
                </author>
            </javadoc>
            <declaration name="components" type="List&lt;WeakReference&lt;JComponent&gt;&gt;" line="59"/>
            <javadoc line="59">
                An array of WeakReferences that point to JComponents. This will contain
                  instances of JToolBars and JMenuBars and is used to find
                  JToolBars/JMenuBars that border each other.                
            </javadoc>
            <declaration name="contListener" type="ContainerListener" line="66"/>
            <javadoc line="66">
                This protected field is implemenation specific. Do not access directly
                  or override. Use the create method instead.                
                <see>
                    #createContainerListener                    
                </see>
            </javadoc>
            <declaration name="rolloverListener" type="PropertyChangeListener" line="74"/>
            <javadoc line="74">
                This protected field is implemenation specific. Do not access directly
                  or override. Use the create method instead.                
                <see>
                    #createRolloverListener                    
                </see>
            </javadoc>
            <declaration name="nonRolloverBorder" type="Border" line="82"/>
            <declaration name="lastMenuBar" type="JMenuBar" line="84"/>
            <javadoc line="84">
                Last menubar the toolbar touched.  This is only useful for ocean.                
            </javadoc>
            <javadoc line="89">
                Registers the specified component.                
            </javadoc>
            <method name="register" type="void" line="92">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <comment line="95">
                    Exception is thrown as convenience for callers that are
                     typed to throw an NPE.                    
                </comment>
                <scope line="93"/>
            </method>
            <javadoc line="101">
                Unregisters the specified component.                
            </javadoc>
            <method name="unregister" type="void" line="104">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <comment line="107">
                    Search for the component, removing any flushed references
                     along the way.                    
                </comment>
                <scope line="105">
                    <declaration name="target" type="JComponent" line="108"/>
                    <scope line="110"/>
                </scope>
            </method>
            <javadoc line="116">
                Finds a previously registered component of class &lt;code&gt;target&lt;/code&gt;
                  that shares the JRootPane ancestor of &lt;code&gt;from&lt;/code&gt;.                
            </javadoc>
            <method name="findRegisteredComponentOfType" type="Object" line="121">
                <params>
                    <param name="from" type="JComponent"/>
                    <param name="target" type="Class"/>
                </params>
                <comment line="130">
                    WeakReference has gone away, remove the WeakReference                    
                </comment>
                <declaration name="rp" type="JRootPane" line="122"/>
                <scope line="123">
                    <scope line="124">
                        <declaration name="component" type="Object" line="125"/>
                        <scope line="128"/>
                        <scope line="133"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="141">
                Returns true if the passed in JMenuBar is above a horizontal
                  JToolBar.                
            </javadoc>
            <method name="doesMenuBarBorderToolBar" type="boolean" line="145">
                <params>
                    <param name="c" type="JMenuBar"/>
                </params>
                <declaration name="tb" type="JToolBar" line="146"/>
                <scope line="148">
                    <declaration name="rp" type="JRootPane" line="149"/>
                    <declaration name="point" type="Point" line="150"/>
                    <declaration name="menuX" type="int" line="152"/>
                    <declaration name="menuY" type="int" line="153"/>
                </scope>
            </method>
            <method name="createUI" type="ComponentUI" line="163">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <method name="installUI" type="void" line="168">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <method name="uninstallUI" type="void" line="174">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <method name="installListeners" type="void" line="180">
                <scope line="184"/>
                <scope line="188"/>
            </method>
            <method name="uninstallListeners" type="void" line="193">
                <scope line="196"/>
                <scope line="200"/>
            </method>
            <method name="createRolloverBorder" type="Border" line="205"/>
            <method name="createNonRolloverBorder" type="Border" line="209"/>
            <javadoc line="214">
                Creates a non rollover border for Toggle buttons in the toolbar.                
            </javadoc>
            <method name="createNonRolloverToggleBorder" type="Border" line="217"/>
            <method name="setBorderToNonRollover" type="void" line="221">
                <params>
                    <param name="c" type="Component"/>
                </params>
                <comment line="224">
                    4735514, 4886944: The method createNonRolloverToggleBorder() is
                     private in BasicToolBarUI so we can&apos;t override it. We still need
                     to call super from this method so that it can save away the
                     original border and then we install ours.                    
                </comment>
                <comment line="229">
                    Before calling super we get a handle to the old border, because
                     super will install a non-UIResource border that we can&apos;t
                     distinguish from one provided by an application.                    
                </comment>
                <scope line="222">
                    <declaration name="b" type="JToggleButton" line="231"/>
                    <declaration name="border" type="Border" line="232"/>
                    <scope line="234">
                        <scope line="235"/>
                    </scope>
                </scope>
                <scope line="240"/>
            </method>
            <javadoc line="246">
                Creates a container listener that will be added to the JToolBar.
                  If this method returns null then it will not be added to the
                  toolbar.                
                <return>
                    an instance of a &lt;code&gt;ContainerListener&lt;/code&gt; or null                    
                </return>
            </javadoc>
            <method name="createContainerListener" type="ContainerListener" line="253"/>
            <javadoc line="257">
                Creates a property change listener that will be added to the JToolBar.
                  If this method returns null then it will not be added to the
                  toolbar.                
                <return>
                    an instance of a &lt;code&gt;PropertyChangeListener&lt;/code&gt; or null                    
                </return>
            </javadoc>
            <method name="createRolloverListener" type="PropertyChangeListener" line="264"/>
            <method name="createDockingListener" type="MouseInputListener" line="269"/>
            <method name="setDragOffset" type="void" line="273">
                <params>
                    <param name="p" type="Point"/>
                </params>
                <scope line="274">
                    <scope line="275"/>
                </scope>
            </method>
            <javadoc line="282">
                If necessary paints the background of the component, then invokes
                  &lt;code&gt;paint&lt;/code&gt;.                
                <param>
                    g Graphics to paint to                    
                </param>
                <param>
                    c JComponent painting on                    
                </param>
                <throws>
                    NullPointerException if &lt;code&gt;g&lt;/code&gt; or &lt;code&gt;c&lt;/code&gt; is
                      null                    
                </throws>
                <see>
                    javax.swing.plaf.ComponentUI#update                    
                </see>
                <see>
                    javax.swing.plaf.ComponentUI#paint                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="update" type="void" line="294">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="c" type="JComponent"/>
                </params>
                <scope line="295"/>
                <scope line="301">
                    <declaration name="rp" type="JRootPane" line="302"/>
                    <declaration name="mb" type="JMenuBar" line="303"/>
                    <scope line="306">
                        <declaration name="point" type="Point" line="307"/>
                        <declaration name="x" type="int" line="309"/>
                        <declaration name="y" type="int" line="310"/>
                        <scope line="317"/>
                    </scope>
                    <scope line="324"/>
                </scope>
            </method>
            <method name="setLastMenuBar" type="void" line="334">
                <params>
                    <param name="lastMenuBar" type="JMenuBar"/>
                </params>
                <comment line="338">
                    The menubar we previously touched has changed, force it
                     to repaint.                    
                </comment>
                <scope line="335">
                    <scope line="336">
                        <scope line="339"/>
                        <scope line="342"/>
                    </scope>
                </scope>
            </method>
            <class name="MetalContainerListener" line="351">
                <extends class="BasicToolBarUI.ToolBarContListener"/>
            </class>
            <class name="MetalRolloverListener" line="355">
                <extends class="BasicToolBarUI.PropertyListener"/>
            </class>
            <class name="MetalDockingListener" line="358">
                <extends class="DockingListener"/>
                <declaration name="pressedInBumps" type="boolean" line="359"/>
                <method name="MetalDockingListener" type="constructor" line="361">
                    <params>
                        <param name="t" type="JToolBar"/>
                    </params>
                </method>
                <method name="mousePressed" type="void" line="365">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                    <comment line="377">
                        vertical                        
                    </comment>
                    <scope line="367"/>
                    <declaration name="bumpRect" type="Rectangle" line="371"/>
                    <scope line="373">
                        <declaration name="x" type="int" line="374"/>
                    </scope>
                    <scope line="376"/>
                    <scope line="379">
                        <declaration name="dragOffset" type="Point" line="381"/>
                        <scope line="382"/>
                    </scope>
                </method>
                <method name="mouseDragged" type="void" line="390">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                    <scope line="391"/>
                </method>
            </class>
        </class>
    </source>