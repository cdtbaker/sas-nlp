<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.plaf.metal">
        <import package="javax.swing.plaf"/>
        <import package="javax.swing"/>
        <import package="java.awt"/>
        <import package="sun.awt.AppContext"/>
        <import package="sun.security.action.GetPropertyAction"/>
        <import package="sun.swing.SwingUtilities2"/>
        <class name="DefaultMetalTheme" line="8">
            <extends class="MetalTheme"/>
            <javadoc line="8">
                A concrete implementation of {@code MetalTheme} providing
                  the original look of the Java Look and Feel, code-named &quot;Steel&quot;. Refer
                  to {@link MetalLookAndFeel#setCurrentTheme} for details on changing
                  the default theme.
                  &lt;p&gt;
                  All colors returned by {@code DefaultMetalTheme} are completely
                  opaque.
                  &lt;h3&gt;&lt;a name=&quot;fontStyle&quot;&gt;&lt;/a&gt;Font Style&lt;/h3&gt;{@code DefaultMetalTheme} uses bold fonts for many controls.  To make all
                  controls (with the exception of the internal frame title bars and
                  client decorated frame title bars) use plain fonts you can do either of
                  the following:
                  &lt;ul&gt;
                  &lt;li&gt;Set the system property &lt;code&gt;swing.boldMetal&lt;/code&gt; to
                  &lt;code&gt;false&lt;/code&gt;.  For example,
                  &lt;code&gt;java&amp;nbsp;-Dswing.boldMetal=false&amp;nbsp;MyApp&lt;/code&gt;.
                  &lt;li&gt;Set the defaults property &lt;code&gt;swing.boldMetal&lt;/code&gt; to
                  &lt;code&gt;Boolean.FALSE&lt;/code&gt;.  For example:
                  &lt;code&gt;UIManager.put(&quot;swing.boldMetal&quot;,&amp;nbsp;Boolean.FALSE);&lt;/code&gt;
                  &lt;/ul&gt;
                  The defaults property &lt;code&gt;swing.boldMetal&lt;/code&gt;, if set,
                  takes precendence over the system property of the same name. After
                  setting this defaults property you need to re-install
                  &lt;code&gt;MetalLookAndFeel&lt;/code&gt;, as well as update the UI
                  of any previously created widgets. Otherwise the results are undefined.
                  The following illustrates how to do this:
                  &lt;pre&gt;
                  // turn off bold fonts
                  UIManager.put(&quot;swing.boldMetal&quot;, Boolean.FALSE);
                  // re-install the Metal Look and Feel
                  UIManager.setLookAndFeel(new MetalLookAndFeel());
                  // Update the ComponentUIs for all Components. This
                  // needs to be invoked for all windows.
                  SwingUtilities.updateComponentTreeUI(rootComponent);
                  &lt;/pre&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <see>
                    MetalLookAndFeel                    
                </see>
                <see>
                    MetalLookAndFeel#setCurrentTheme                    
                </see>
                <author>
                    Steve Wilson                    
                </author>
            </javadoc>
            <declaration name="PLAIN_FONTS" type="boolean" line="57"/>
            <javadoc line="57">
                Whether or not fonts should be plain.  This is only used if
                  the defaults property &apos;swing.boldMetal&apos; == &quot;false&quot;.                
            </javadoc>
            <declaration name="fontNames" type="String[]" line="62"/>
            <javadoc line="62">
                Names of the fonts to use.                
            </javadoc>
            <declaration name="fontStyles" type="int[]" line="66"/>
            <javadoc line="66">
                Styles for the fonts.  This is ignored if the defaults property
                  &lt;code&gt;swing.boldMetal&lt;/code&gt; is false, or PLAIN_FONTS is true.                
            </javadoc>
            <declaration name="fontSizes" type="int[]" line="71"/>
            <javadoc line="71">
                Sizes for the fonts.                
            </javadoc>
            <declaration name="defaultNames" type="String[]" line="75"/>
            <javadoc line="75">
                System property names used to look up fonts.                
            </javadoc>
            <javadoc line="79">
                Returns the ideal font name for the font identified by key.                
            </javadoc>
            <method name="getDefaultFontName" type="String" line="82">
                <params>
                    <param name="key" type="int"/>
                </params>
            </method>
            <javadoc line="85">
                Returns the ideal font size for the font identified by key.                
            </javadoc>
            <method name="getDefaultFontSize" type="int" line="88">
                <params>
                    <param name="key" type="int"/>
                </params>
            </method>
            <javadoc line="91">
                Returns the ideal font style for the font identified by key.                
            </javadoc>
            <method name="getDefaultFontStyle" type="int" line="94">
                <params>
                    <param name="key" type="int"/>
                </params>
                <scope line="95">
                    <declaration name="boldMetal" type="Object" line="96"/>
                    <scope line="97"/>
                    <scope line="100">
                        <scope line="101"/>
                    </scope>
                    <scope line="105"/>
                </scope>
            </method>
            <javadoc line="111">
                Returns the default used to look up the specified font.                
            </javadoc>
            <method name="getDefaultPropertyName" type="String" line="114">
                <params>
                    <param name="key" type="int"/>
                </params>
            </method>
            <scope line="117">
                <declaration name="boldProperty" type="Object" line="118"/>
                <scope line="119"/>
                <scope line="122"/>
            </scope>
            <declaration name="primary1" type="ColorUIResource" line="126"/>
            <declaration name="primary2" type="ColorUIResource" line="127"/>
            <declaration name="primary3" type="ColorUIResource" line="128"/>
            <declaration name="secondary1" type="ColorUIResource" line="129"/>
            <declaration name="secondary2" type="ColorUIResource" line="130"/>
            <declaration name="secondary3" type="ColorUIResource" line="131"/>
            <declaration name="fontDelegate" type="FontDelegate" line="132"/>
            <javadoc line="133">
                Returns the name of this theme. This returns {@code &quot;Steel&quot;}.                
                <return>
                    the name of this theme.                    
                </return>
            </javadoc>
            <method name="getName" type="String" line="137"/>
            <javadoc line="140">
                Creates and returns an instance of {@code DefaultMetalTheme}.                
            </javadoc>
            <method name="DefaultMetalTheme" type="constructor" line="143"/>
            <javadoc line="146">
                Returns the primary 1 color. This returns a color with rgb values
                  of 102, 102, and 153, respectively.                
                <return>
                    the primary 1 color                    
                </return>
            </javadoc>
            <method name="getPrimary1" type="ColorUIResource" line="151"/>
            <javadoc line="154">
                Returns the primary 2 color. This returns a color with rgb values
                  of 153, 153, 204, respectively.                
                <return>
                    the primary 2 color                    
                </return>
            </javadoc>
            <method name="getPrimary2" type="ColorUIResource" line="159"/>
            <javadoc line="162">
                Returns the primary 3 color. This returns a color with rgb values
                  204, 204, 255, respectively.                
                <return>
                    the primary 3 color                    
                </return>
            </javadoc>
            <method name="getPrimary3" type="ColorUIResource" line="167"/>
            <javadoc line="170">
                Returns the secondary 1 color. This returns a color with rgb values
                  102, 102, and 102, respectively.                
                <return>
                    the secondary 1 color                    
                </return>
            </javadoc>
            <method name="getSecondary1" type="ColorUIResource" line="175"/>
            <javadoc line="178">
                Returns the secondary 2 color. This returns a color with rgb values
                  153, 153, and 153, respectively.                
                <return>
                    the secondary 2 color                    
                </return>
            </javadoc>
            <method name="getSecondary2" type="ColorUIResource" line="183"/>
            <javadoc line="186">
                Returns the secondary 3 color. This returns a color with rgb values
                  204, 204, and 204, respectively.                
                <return>
                    the secondary 3 color                    
                </return>
            </javadoc>
            <method name="getSecondary3" type="ColorUIResource" line="191"/>
            <javadoc line="194">
                Returns the control text font. This returns Dialog, 12pt. If
                  plain fonts have been enabled as described in &lt;a href=&quot;#fontStyle&quot;&gt;
                  font style&lt;/a&gt;, the font style is plain. Otherwise the font style is
                  bold.                
                <return>
                    the control text font                    
                </return>
            </javadoc>
            <method name="getControlTextFont" type="FontUIResource" line="201"/>
            <javadoc line="204">
                Returns the system text font. This returns Dialog, 12pt, plain.                
                <return>
                    the sytem text font                    
                </return>
            </javadoc>
            <method name="getSystemTextFont" type="FontUIResource" line="208"/>
            <javadoc line="211">
                Returns the user text font. This returns Dialog, 12pt, plain.                
                <return>
                    the user text font                    
                </return>
            </javadoc>
            <method name="getUserTextFont" type="FontUIResource" line="215"/>
            <javadoc line="218">
                Returns the menu text font. This returns Dialog, 12pt. If
                  plain fonts have been enabled as described in &lt;a href=&quot;#fontStyle&quot;&gt;
                  font style&lt;/a&gt;, the font style is plain. Otherwise the font style is
                  bold.                
                <return>
                    the menu text font                    
                </return>
            </javadoc>
            <method name="getMenuTextFont" type="FontUIResource" line="225"/>
            <javadoc line="228">
                Returns the window title font. This returns Dialog, 12pt, bold.                
                <return>
                    the window title font                    
                </return>
            </javadoc>
            <method name="getWindowTitleFont" type="FontUIResource" line="232"/>
            <javadoc line="235">
                Returns the sub-text font. This returns Dialog, 10pt, plain.                
                <return>
                    the sub-text font                    
                </return>
            </javadoc>
            <method name="getSubTextFont" type="FontUIResource" line="239"/>
            <method name="getFont" type="FontUIResource" line="242">
                <params>
                    <param name="key" type="int"/>
                </params>
            </method>
            <method name="install" type="void" line="245">
                <scope line="246"/>
                <scope line="249"/>
            </method>
            <javadoc line="253">
                Returns true if this is a theme provided by the core platform.                
            </javadoc>
            <method name="isSystemTheme" type="boolean" line="256"/>
            <class name="FontDelegate" line="259">
                <javadoc line="259">
                    FontDelegates add an extra level of indirection to obtaining fonts.                    
                </javadoc>
                <declaration name="defaultMapping" type="int[]" line="263"/>
                <declaration name="fonts" type="FontUIResource" line="264"/>
                <method name="FontDelegate" type="constructor" line="265"/>
                <method name="getFont" type="FontUIResource" line="268">
                    <params>
                        <param name="type" type="int"/>
                    </params>
                    <declaration name="mappedType" type="int" line="269"/>
                    <scope line="270">
                        <declaration name="f" type="Font" line="271"/>
                        <scope line="272"/>
                    </scope>
                </method>
                <javadoc line="279">
                    This is the same as invoking
                      &lt;code&gt;Font.getFont(key)&lt;/code&gt;, with the exception
                      that it is wrapped inside a &lt;code&gt;doPrivileged&lt;/code&gt; call.                    
                </javadoc>
                <method name="getPrivilegedFont" type="Font" line="284">
                    <params>
                        <param name="key" type="int"/>
                    </params>
                    <anonymous_class line="285">
                        <method name="run" type="Font" line="286"/>
                    </anonymous_class>
                </method>
            </class>
            <class name="WindowsFontDelegate" line="293">
                <extends class="FontDelegate"/>
                <javadoc line="293">
                    The WindowsFontDelegate uses DesktopProperties to obtain fonts.                    
                </javadoc>
                <declaration name="props" type="MetalFontDesktopProperty[]" line="297"/>
                <declaration name="checkedPriviledged" type="boolean[]" line="298"/>
                <method name="WindowsFontDelegate" type="constructor" line="299"/>
                <method name="getFont" type="FontUIResource" line="303">
                    <params>
                        <param name="type" type="int"/>
                    </params>
                    <scope line="304"/>
                    <scope line="307">
                        <declaration name="f" type="Font" line="308"/>
                        <scope line="310"/>
                    </scope>
                    <scope line="315"/>
                </method>
            </class>
        </class>
    </source>