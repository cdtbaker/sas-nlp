<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.plaf.basic">
        <import package="javax.swing"/>
        <import package="javax.swing.event"/>
        <import package="javax.swing.plaf"/>
        <import package="javax.swing.plaf.basic"/>
        <import package="javax.swing.border"/>
        <import package="java.applet.Applet"/>
        <import package="java.awt.Component"/>
        <import package="java.awt.Container"/>
        <import package="java.awt.Dimension"/>
        <import package="java.awt.KeyboardFocusManager"/>
        <import package="java.awt.Window"/>
        <import package="java.awt.event"/>
        <import package="java.awt.AWTEvent"/>
        <import package="java.awt.Toolkit"/>
        <import package="java.beans.PropertyChangeListener"/>
        <import package="java.beans.PropertyChangeEvent"/>
        <import package="java.util"/>
        <import package="sun.swing.DefaultLookup"/>
        <import package="sun.swing.UIAction"/>
        <import package="sun.awt.AppContext"/>
        <class name="BasicPopupMenuUI" line="55">
            <extends class="PopupMenuUI"/>
            <javadoc line="55">
                A Windows L&amp;F implementation of PopupMenuUI.  This implementation
                  is a &quot;combined&quot; view/controller.                
                <author>
                    Georges Saab                    
                </author>
                <author>
                    David Karlton                    
                </author>
                <author>
                    Arnaud Weber                    
                </author>
            </javadoc>
            <declaration name="MOUSE_GRABBER_KEY" type="StringBuilder" line="64"/>
            <declaration name="MENU_KEYBOARD_HELPER_KEY" type="StringBuilder" line="66"/>
            <declaration name="popupMenu" type="JPopupMenu" line="69"/>
            <declaration name="popupMenuListener" type="PopupMenuListener" line="70"/>
            <declaration name="menuKeyListener" type="MenuKeyListener" line="71"/>
            <declaration name="checkedUnpostPopup" type="boolean" line="73"/>
            <declaration name="unpostPopup" type="boolean" line="74"/>
            <method name="createUI" type="ComponentUI" line="76">
                <params>
                    <param name="x" type="JComponent"/>
                </params>
            </method>
            <method name="BasicPopupMenuUI" type="constructor" line="80">
                <declaration name="laf" type="LookAndFeel" line="82"/>
                <scope line="83"/>
            </method>
            <method name="installUI" type="void" line="88">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <method name="installDefaults" type="void" line="96"/>
            <method name="installListeners" type="void" line="109">
                <scope line="110"/>
                <scope line="115"/>
                <declaration name="context" type="AppContext" line="120"/>
                <scope line="121">
                    <declaration name="mouseGrabber" type="MouseGrabber" line="122"/>
                    <scope line="124"/>
                </scope>
                <scope line="129">
                    <declaration name="helper" type="MenuKeyboardHelper" line="130"/>
                    <scope line="132">
                        <declaration name="msm" type="MenuSelectionManager" line="135"/>
                    </scope>
                </scope>
            </method>
            <method name="installKeyboardActions" type="void" line="141"/>
            <method name="getInputMap" type="InputMap" line="144">
                <params>
                    <param name="popup" type="JPopupMenu"/>
                    <param name="c" type="JComponent"/>
                </params>
                <declaration name="windowInputMap" type="InputMap" line="145"/>
                <declaration name="bindings" type="Object[]" line="146"/>
                <scope line="147">
                    <scope line="149">
                        <declaration name="km" type="Object[]" line="150"/>
                        <scope line="151">
                            <declaration name="rightToLeftInputMap" type="InputMap" line="152"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="getActionMap" type="ActionMap" line="161"/>
            <method name="loadActionMap" type="void" line="166">
                <params>
                    <param name="map" type="LazyActionMap"/>
                </params>
            </method>
            <method name="uninstallUI" type="void" line="176">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <method name="uninstallDefaults" type="void" line="184"/>
            <method name="uninstallListeners" type="void" line="188">
                <scope line="189"/>
                <scope line="192"/>
            </method>
            <method name="uninstallKeyboardActions" type="void" line="197"/>
            <method name="getFirstPopup" type="MenuElement" line="203">
                <declaration name="msm" type="MenuSelectionManager" line="204"/>
                <declaration name="p" type="MenuElement[]" line="205"/>
                <declaration name="me" type="MenuElement" line="206"/>
                <scope line="208"/>
            </method>
            <method name="getLastPopup" type="JPopupMenu" line="216">
                <declaration name="msm" type="MenuSelectionManager" line="217"/>
                <declaration name="p" type="MenuElement[]" line="218"/>
                <declaration name="popup" type="JPopupMenu" line="219"/>
                <scope line="221"/>
            </method>
            <method name="getPopups" type="List<JPopupMenu>" line="228">
                <declaration name="msm" type="MenuSelectionManager" line="229"/>
                <declaration name="p" type="MenuElement[]" line="230"/>
                <declaration name="list" type="List&lt;JPopupMenu&gt;" line="232"/>
                <scope line="233">
                    <scope line="234"/>
                </scope>
            </method>
            <method name="isPopupTrigger" type="boolean" line="241">
                <params>
                    <param name="e" type="MouseEvent"/>
                </params>
            </method>
            <method name="checkInvokerEqual" type="boolean" line="246">
                <params>
                    <param name="present" type="MenuElement"/>
                    <param name="last" type="MenuElement"/>
                </params>
                <declaration name="invokerPresent" type="Component" line="247"/>
                <declaration name="invokerLast" type="Component" line="248"/>
                <scope line="250"/>
                <scope line="253"/>
            </method>
            <class name="BasicPopupMenuListener" line="260">
                <comment line="391">
                    Types of actions                    
                </comment>
                <comment line="399">
                    Used for next/previous actions                    
                </comment>
                <comment line="403">
                    Used for parent/child actions                    
                </comment>
                <comment line="981">
                    Fix for 4213634
                     If this is false, KEY_TYPED and KEY_RELEASED events are NOT
                     processed. This is needed to avoid activating a menuitem when
                     the menu and menuitem share the same mnemonic.                    
                </comment>
                <implements interface="PopupMenuListener"/>
                <javadoc line="260">
                    This Listener fires the Action that provides the correct auditory
                      feedback.                    
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <method name="popupMenuCanceled" type="void" line="267">
                    <params>
                        <param name="e" type="PopupMenuEvent"/>
                    </params>
                </method>
                <method name="popupMenuWillBecomeInvisible" type="void" line="270">
                    <params>
                        <param name="e" type="PopupMenuEvent"/>
                    </params>
                </method>
                <method name="popupMenuWillBecomeVisible" type="void" line="273">
                    <params>
                        <param name="e" type="PopupMenuEvent"/>
                    </params>
                </method>
            </class>
            <class name="BasicMenuKeyListener" line="279">
                <comment line="391">
                    Types of actions                    
                </comment>
                <comment line="399">
                    Used for next/previous actions                    
                </comment>
                <comment line="403">
                    Used for parent/child actions                    
                </comment>
                <comment line="981">
                    Fix for 4213634
                     If this is false, KEY_TYPED and KEY_RELEASED events are NOT
                     processed. This is needed to avoid activating a menuitem when
                     the menu and menuitem share the same mnemonic.                    
                </comment>
                <implements interface="MenuKeyListener"/>
                <javadoc line="279">
                    Handles mnemonic for children JMenuItems.                    
                    <since>
                        1.5                        
                    </since>
                </javadoc>
                <declaration name="menuToOpen" type="MenuElement" line="284"/>
                <method name="menuKeyTyped" type="void" line="286">
                    <params>
                        <param name="e" type="MenuKeyEvent"/>
                    </params>
                    <comment line="288">
                        we have a submenu to open                        
                    </comment>
                    <scope line="287">
                        <declaration name="subpopup" type="JPopupMenu" line="289"/>
                        <declaration name="subitem" type="MenuElement" line="290"/>
                        <declaration name="lst" type="ArrayList&lt;MenuElement&gt;" line="293"/>
                        <scope line="296"/>
                        <declaration name="newPath" type="MenuElement" line="299"/>
                    </scope>
                </method>
                <method name="menuKeyPressed" type="void" line="307">
                    <params>
                        <param name="e" type="MenuKeyEvent"/>
                    </params>
                    <comment line="310">
                        Handle the case for Escape or Enter...                        
                    </comment>
                    <comment line="348">
                        no op                        
                    </comment>
                    <comment line="350">
                        Invoke the menu action                        
                    </comment>
                    <comment line="353">
                        submenus are handled in menuKeyTyped                        
                    </comment>
                    <comment line="356">
                        we have a menu item                        
                    </comment>
                    <comment line="362">
                        Select the menu item with the matching mnemonic. If                        
                    </comment>
                    <comment line="363">
                        the same mnemonic has been invoked then select the next                        
                    </comment>
                    <comment line="364">
                        menu item in the cycle.                        
                    </comment>
                    <declaration name="keyChar" type="char" line="308"/>
                    <scope line="311"/>
                    <declaration name="manager" type="MenuSelectionManager" line="315"/>
                    <declaration name="path" type="MenuElement" line="316"/>
                    <declaration name="items" type="MenuElement" line="317"/>
                    <declaration name="currentIndex" type="int" line="318"/>
                    <declaration name="matches" type="int" line="319"/>
                    <declaration name="firstMatch" type="int" line="320"/>
                    <declaration name="indexes" type="int" line="321"/>
                    <scope line="323">
                        <scope line="324"/>
                        <declaration name="item" type="JMenuItem" line="327"/>
                        <declaration name="mnemonic" type="int" line="328"/>
                        <scope line="330">
                            <scope line="331"/>
                            <scope line="334">
                                <scope line="335"/>
                            </scope>
                        </scope>
                        <scope line="342"/>
                    </scope>
                    <scope line="347"/>
                    <scope line="349">
                        <declaration name="item" type="JMenuItem" line="351"/>
                        <scope line="352"/>
                        <scope line="355"/>
                    </scope>
                    <scope line="361">
                        <declaration name="newItem" type="MenuElement" line="365"/>
                        <declaration name="newPath" type="MenuElement" line="369"/>
                    </scope>
                </method>
                <method name="menuKeyReleased" type="void" line="377">
                    <params>
                        <param name="e" type="MenuKeyEvent"/>
                    </params>
                </method>
                <method name="lower" type="char" line="380">
                    <params>
                        <param name="keyChar" type="char"/>
                    </params>
                </method>
                <method name="lower" type="char" line="384">
                    <params>
                        <param name="mnemonic" type="int"/>
                    </params>
                </method>
            </class>
            <class name="Actions" line="389">
                <extends class="UIAction"/>
                <comment line="391">
                    Types of actions                    
                </comment>
                <comment line="399">
                    Used for next/previous actions                    
                </comment>
                <comment line="403">
                    Used for parent/child actions                    
                </comment>
                <comment line="981">
                    Fix for 4213634
                     If this is false, KEY_TYPED and KEY_RELEASED events are NOT
                     processed. This is needed to avoid activating a menuitem when
                     the menu and menuitem share the same mnemonic.                    
                </comment>
                <declaration name="CANCEL" type="String" line="391"/>
                <declaration name="SELECT_NEXT" type="String" line="392"/>
                <declaration name="SELECT_PREVIOUS" type="String" line="393"/>
                <declaration name="SELECT_PARENT" type="String" line="394"/>
                <declaration name="SELECT_CHILD" type="String" line="395"/>
                <declaration name="RETURN" type="String" line="396"/>
                <declaration name="FORWARD" type="boolean" line="399"/>
                <declaration name="BACKWARD" type="boolean" line="400"/>
                <declaration name="PARENT" type="boolean" line="403"/>
                <declaration name="CHILD" type="boolean" line="404"/>
                <method name="Actions" type="constructor" line="407">
                    <params>
                        <param name="key" type="String"/>
                    </params>
                </method>
                <method name="actionPerformed" type="void" line="411">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                    <declaration name="key" type="String" line="412"/>
                    <scope line="413"/>
                    <scope line="416"/>
                    <scope line="419"/>
                    <scope line="422"/>
                    <scope line="425"/>
                    <scope line="428"/>
                </method>
                <method name="doReturn" type="void" line="433">
                    <declaration name="fmgr" type="KeyboardFocusManager" line="434"/>
                    <declaration name="focusOwner" type="Component" line="436"/>
                    <scope line="437"/>
                    <declaration name="msm" type="MenuSelectionManager" line="441"/>
                    <declaration name="path" type="MenuElement" line="442"/>
                    <declaration name="lastElement" type="MenuElement" line="443"/>
                    <scope line="444">
                        <scope line="446">
                            <declaration name="newPath" type="MenuElement" line="447"/>
                        </scope>
                        <scope line="451">
                            <declaration name="mi" type="JMenuItem" line="452"/>
                            <scope line="454"/>
                            <scope line="457"/>
                        </scope>
                    </scope>
                </method>
                <method name="selectParentChild" type="void" line="464">
                    <params>
                        <param name="direction" type="boolean"/>
                    </params>
                    <comment line="470">
                        selecting parent                        
                    </comment>
                    <comment line="474">
                        check if we have an open submenu. A submenu item may or                        
                    </comment>
                    <comment line="475">
                        may not be selected, so submenu popup can be either the                        
                    </comment>
                    <comment line="476">
                        last or next to the last item.                        
                    </comment>
                    <comment line="481">
                        we have a submenu, just close it                        
                    </comment>
                    <comment line="488">
                        selecting child                        
                    </comment>
                    <comment line="492">
                        we have a submenu, open it                        
                    </comment>
                    <comment line="512">
                        check if we have a toplevel menu selected.                        
                    </comment>
                    <comment line="513">
                        If this is the case, we select another toplevel menu                        
                    </comment>
                    <comment line="522">
                        menu is selected but its popup not shown                        
                    </comment>
                    <comment line="527">
                        menu is selected and its popup is shown                        
                    </comment>
                    <declaration name="msm" type="MenuSelectionManager" line="465"/>
                    <declaration name="path" type="MenuElement" line="466"/>
                    <declaration name="len" type="int" line="467"/>
                    <scope line="469">
                        <declaration name="popupIndex" type="int" line="471"/>
                        <scope line="479">
                            <declaration name="newPath" type="MenuElement" line="482"/>
                        </scope>
                    </scope>
                    <scope line="487">
                        <scope line="490">
                            <declaration name="menu" type="JMenu" line="493"/>
                            <declaration name="popup" type="JPopupMenu" line="494"/>
                            <declaration name="subs" type="MenuElement[]" line="495"/>
                            <declaration name="item" type="MenuElement" line="496"/>
                            <declaration name="newPath" type="MenuElement[]" line="497"/>
                            <scope line="499"/>
                            <scope line="501"/>
                        </scope>
                    </scope>
                    <scope line="514">
                        <declaration name="currentMenu" type="MenuElement" line="515"/>
                        <declaration name="nextMenu" type="MenuElement" line="516"/>
                        <scope line="519">
                            <declaration name="newSelection" type="MenuElement" line="520"/>
                            <scope line="521"/>
                            <scope line="526"/>
                        </scope>
                    </scope>
                </method>
                <method name="selectItem" type="void" line="538">
                    <params>
                        <param name="direction" type="boolean"/>
                    </params>
                    <comment line="555">
                        a toplevel menu is selected, but its popup not shown.                        
                    </comment>
                    <comment line="556">
                        Show the popup and select the first item                        
                    </comment>
                    <comment line="563">
                        an enabled item found -- include it in newPath                        
                    </comment>
                    <comment line="567">
                        menu has no enabled items -- still must show the popup                        
                    </comment>
                    <comment line="577">
                        a menu (not necessarily toplevel) is open and its popup                        
                    </comment>
                    <comment line="578">
                        shown. Select the appropriate menu item                        
                    </comment>
                    <comment line="590">
                        all items in the popup are disabled.                        
                    </comment>
                    <comment line="591">
                        We&apos;re going to find the parent popup menu and select                        
                    </comment>
                    <comment line="592">
                        its next item. If there&apos;s no parent popup menu (i.e.                        
                    </comment>
                    <comment line="593">
                        current menu is toplevel), do nothing                        
                    </comment>
                    <comment line="609">
                        just select the next item, no path expansion needed                        
                    </comment>
                    <declaration name="msm" type="MenuSelectionManager" line="539"/>
                    <declaration name="path" type="MenuElement" line="540"/>
                    <scope line="541"/>
                    <declaration name="len" type="int" line="544"/>
                    <scope line="545">
                        <declaration name="popup" type="JPopupMenu" line="547"/>
                        <declaration name="newPath" type="MenuElement[]" line="548"/>
                    </scope>
                    <scope line="553">
                        <declaration name="popup" type="JPopupMenu" line="557"/>
                        <declaration name="next" type="MenuElement" line="558"/>
                        <declaration name="newPath" type="MenuElement[]" line="560"/>
                        <scope line="562"/>
                        <scope line="566"/>
                    </scope>
                    <scope line="575">
                        <declaration name="menu" type="JMenu" line="579"/>
                        <declaration name="popup" type="JPopupMenu" line="580"/>
                        <declaration name="next" type="MenuElement" line="581"/>
                        <scope line="584">
                            <declaration name="newPath" type="MenuElement[]" line="585"/>
                        </scope>
                        <scope line="589">
                            <scope line="594">
                                <scope line="599">
                                    <declaration name="newPath" type="MenuElement[]" line="600"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="608">
                        <declaration name="subs" type="MenuElement" line="610"/>
                        <declaration name="nextChild" type="MenuElement" line="611"/>
                        <scope line="613"/>
                        <scope line="616"/>
                    </scope>
                </method>
                <method name="cancel" type="void" line="623">
                    <comment line="624">
                        4234793: This action should call JPopupMenu.firePopupMenuCanceled but it&apos;s                        
                    </comment>
                    <comment line="625">
                        a protected method. The real solution could be to make                        
                    </comment>
                    <comment line="626">
                        firePopupMenuCanceled public and call it directly.                        
                    </comment>
                    <declaration name="lastPopup" type="JPopupMenu" line="627"/>
                    <scope line="628"/>
                    <declaration name="mode" type="String" line="631"/>
                    <scope line="632"/>
                    <scope line="634"/>
                </method>
                <method name="shortenSelectedPath" type="void" line="639">
                    <comment line="645">
                        unselect MenuItem and its Popup by default                        
                    </comment>
                    <comment line="654">
                        unselect the last visible popup only                        
                    </comment>
                    <comment line="657">
                        unselect invisible popup and two visible elements                        
                    </comment>
                    <comment line="664">
                        clear selection for the topLevelMenu                        
                    </comment>
                    <declaration name="path" type="MenuElement" line="640"/>
                    <scope line="641"/>
                    <declaration name="value" type="int" line="646"/>
                    <declaration name="lastElement" type="MenuElement" line="647"/>
                    <declaration name="lastPopup" type="JPopupMenu" line="648"/>
                    <scope line="649">
                        <declaration name="previousElement" type="MenuElement" line="650"/>
                        <scope line="651">
                            <declaration name="lastMenu" type="JMenu" line="652"/>
                            <scope line="653"/>
                            <scope line="656"/>
                        </scope>
                    </scope>
                    <scope line="663"/>
                    <declaration name="newPath" type="MenuElement" line="667"/>
                </method>
            </class>
            <method name="nextEnabledChild" type="MenuElement" line="674">
                <params>
                    <param name="e" type="MenuElement"/>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                </params>
                <scope line="675">
                    <scope line="676">
                        <declaration name="comp" type="Component" line="677"/>
                        <scope line="680"/>
                    </scope>
                </scope>
            </method>
            <method name="previousEnabledChild" type="MenuElement" line="689">
                <params>
                    <param name="e" type="MenuElement"/>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                </params>
                <scope line="690">
                    <scope line="691">
                        <declaration name="comp" type="Component" line="692"/>
                        <scope line="695"/>
                    </scope>
                </scope>
            </method>
            <method name="findEnabledChild" type="MenuElement" line="704">
                <params>
                    <param name="e" type="MenuElement"/>
                    <param name="fromIndex" type="int"/>
                    <param name="forward" type="boolean"/>
                </params>
                <declaration name="result" type="MenuElement" line="705"/>
                <scope line="706"/>
                <scope line="709"/>
            </method>
            <method name="findEnabledChild" type="MenuElement" line="718">
                <params>
                    <param name="e" type="MenuElement"/>
                    <param name="elem" type="MenuElement"/>
                    <param name="forward" type="boolean"/>
                </params>
                <scope line="719">
                    <scope line="720"/>
                </scope>
            </method>
            <class name="MouseGrabber" line="727">
                <comment line="391">
                    Types of actions                    
                </comment>
                <comment line="399">
                    Used for next/previous actions                    
                </comment>
                <comment line="403">
                    Used for parent/child actions                    
                </comment>
                <comment line="981">
                    Fix for 4213634
                     If this is false, KEY_TYPED and KEY_RELEASED events are NOT
                     processed. This is needed to avoid activating a menuitem when
                     the menu and menuitem share the same mnemonic.                    
                </comment>
                <implements interface="ChangeListener"/>
                <implements interface="AWTEventListener"/>
                <implements interface="ComponentListener"/>
                <implements interface="WindowListener"/>
                <declaration name="grabbedWindow" type="Window" line="730"/>
                <declaration name="lastPathSelected" type="MenuElement[]" line="731"/>
                <method name="MouseGrabber" type="constructor" line="733">
                    <declaration name="msm" type="MenuSelectionManager" line="734"/>
                    <scope line="737"/>
                </method>
                <method name="uninstall" type="void" line="742">
                    <scope line="743"/>
                </method>
                <method name="grabWindow" type="void" line="750">
                    <params>
                        <param name="newPath" type="MenuElement[]"/>
                    </params>
                    <comment line="751">
                        A grab needs to be added                        
                    </comment>
                    <declaration name="tk" type="Toolkit" line="752"/>
                    <anonymous_class line="754">
                        <method name="run" type="Object" line="755"/>
                    </anonymous_class>
                    <declaration name="invoker" type="Component" line="766"/>
                    <scope line="767"/>
                    <scope line="773">
                        <scope line="774"/>
                        <scope line="776"/>
                    </scope>
                </method>
                <method name="ungrabWindow" type="void" line="783">
                    <comment line="785">
                        The grab should be removed                        
                    </comment>
                    <declaration name="tk" type="Toolkit" line="784"/>
                    <anonymous_class line="787">
                        <method name="run" type="Object" line="788"/>
                    </anonymous_class>
                </method>
                <method name="realUngrabWindow" type="void" line="797">
                    <declaration name="tk" type="Toolkit" line="798"/>
                    <scope line="799">
                        <scope line="800"/>
                        <scope line="802"/>
                    </scope>
                </method>
                <method name="stateChanged" type="void" line="810">
                    <params>
                        <param name="e" type="ChangeEvent"/>
                    </params>
                    <declaration name="msm" type="MenuSelectionManager" line="811"/>
                    <declaration name="p" type="MenuElement[]" line="812"/>
                    <scope line="814"/>
                    <scope line="818"/>
                </method>
                <method name="eventDispatched" type="void" line="825">
                    <params>
                        <param name="ev" type="AWTEvent"/>
                    </params>
                    <comment line="827">
                        Popup should be canceled in case of ungrab event                        
                    </comment>
                    <comment line="832">
                        We are interested in MouseEvents only                        
                    </comment>
                    <comment line="846">
                        Cancel popup only if this property was not set.                        
                    </comment>
                    <comment line="847">
                        If this property is set to TRUE component wants                        
                    </comment>
                    <comment line="848">
                        to deal with this event by himself.                        
                    </comment>
                    <comment line="850">
                        Ask UIManager about should we consume event that closes                        
                    </comment>
                    <comment line="851">
                        popup. This made to match native apps behaviour.                        
                    </comment>
                    <comment line="854">
                        Consume the event so that normal processing stops.                        
                    </comment>
                    <comment line="863">
                        Do not forward event to MSM, let component handle it                        
                    </comment>
                    <comment line="875">
                        For the MOUSE_DRAGGED event the src is                        
                    </comment>
                    <comment line="876">
                        the Component in which mouse button was pressed.                        
                    </comment>
                    <comment line="877">
                        If the src is in popupMenu,                        
                    </comment>
                    <comment line="878">
                        do not forward event to MSM, let component handle it.                        
                    </comment>
                    <scope line="826"/>
                    <scope line="831"/>
                    <declaration name="me" type="MouseEvent" line="835"/>
                    <declaration name="src" type="Component" line="836"/>
                    <scope line="840"/>
                    <scope line="845">
                        <declaration name="consumeEvent" type="boolean" line="852"/>
                        <scope line="855"/>
                    </scope>
                    <scope line="862">
                        <scope line="864"/>
                    </scope>
                    <scope line="868"/>
                    <scope line="874">
                        <scope line="879"/>
                    </scope>
                    <scope line="887"/>
                </method>
                <method name="isInPopup" type="boolean" line="895">
                    <params>
                        <param name="src" type="Component"/>
                    </params>
                    <scope line="896">
                        <scope line="897"/>
                        <scope line="899"/>
                    </scope>
                </method>
                <method name="cancelPopupMenu" type="void" line="906">
                    <comment line="907">
                        We should ungrab window if a user code throws                        
                    </comment>
                    <comment line="908">
                        an unexpected runtime exception. See 6495920.                        
                    </comment>
                    <comment line="910">
                        4234793: This action should call firePopupMenuCanceled but it&apos;s                        
                    </comment>
                    <comment line="911">
                        a protected method. The real solution could be to make                        
                    </comment>
                    <comment line="912">
                        firePopupMenuCanceled public and call it directly.                        
                    </comment>
                    <scope line="909">
                        <declaration name="popups" type="List&lt;JPopupMenu&gt;" line="913"/>
                        <scope line="914"/>
                    </scope>
                    <scope line="918"/>
                    <scope line="921"/>
                </method>
                <method name="componentResized" type="void" line="927">
                    <params>
                        <param name="e" type="ComponentEvent"/>
                    </params>
                </method>
                <method name="componentMoved" type="void" line="930">
                    <params>
                        <param name="e" type="ComponentEvent"/>
                    </params>
                </method>
                <method name="componentShown" type="void" line="933">
                    <params>
                        <param name="e" type="ComponentEvent"/>
                    </params>
                </method>
                <method name="componentHidden" type="void" line="936">
                    <params>
                        <param name="e" type="ComponentEvent"/>
                    </params>
                </method>
                <method name="windowClosing" type="void" line="939">
                    <params>
                        <param name="e" type="WindowEvent"/>
                    </params>
                </method>
                <method name="windowClosed" type="void" line="942">
                    <params>
                        <param name="e" type="WindowEvent"/>
                    </params>
                </method>
                <method name="windowIconified" type="void" line="945">
                    <params>
                        <param name="e" type="WindowEvent"/>
                    </params>
                </method>
                <method name="windowDeactivated" type="void" line="948">
                    <params>
                        <param name="e" type="WindowEvent"/>
                    </params>
                </method>
                <method name="windowOpened" type="void" line="951">
                    <params>
                        <param name="e" type="WindowEvent"/>
                    </params>
                </method>
                <method name="windowDeiconified" type="void" line="952">
                    <params>
                        <param name="e" type="WindowEvent"/>
                    </params>
                </method>
                <method name="windowActivated" type="void" line="953">
                    <params>
                        <param name="e" type="WindowEvent"/>
                    </params>
                </method>
            </class>
            <class name="MenuKeyboardHelper" line="956">
                <comment line="391">
                    Types of actions                    
                </comment>
                <comment line="399">
                    Used for next/previous actions                    
                </comment>
                <comment line="403">
                    Used for parent/child actions                    
                </comment>
                <comment line="981">
                    Fix for 4213634
                     If this is false, KEY_TYPED and KEY_RELEASED events are NOT
                     processed. This is needed to avoid activating a menuitem when
                     the menu and menuitem share the same mnemonic.                    
                </comment>
                <implements interface="ChangeListener"/>
                <implements interface="KeyListener"/>
                <javadoc line="956">
                    This helper is added to MenuSelectionManager as a ChangeListener to
                      listen to menu selection changes. When a menu is activated, it passes
                      focus to its parent JRootPane, and installs an ActionMap/InputMap pair
                      on that JRootPane. Those maps are necessary in order for menu
                      navigation to work. When menu is being deactivated, it restores focus
                      to the component that has had it before menu activation, and uninstalls
                      the maps.
                      This helper is also installed as a KeyListener on root pane when menu
                      is active. It forwards key events to MenuSelectionManager for mnemonic
                      keys handling.                    
                </javadoc>
                <declaration name="lastFocused" type="Component" line="971"/>
                <declaration name="lastPathSelected" type="MenuElement[]" line="972"/>
                <declaration name="lastPopup" type="JPopupMenu" line="973"/>
                <declaration name="invokerRootPane" type="JRootPane" line="975"/>
                <declaration name="menuActionMap" type="ActionMap" line="976"/>
                <declaration name="menuInputMap" type="InputMap" line="977"/>
                <declaration name="focusTraversalKeysEnabled" type="boolean" line="978"/>
                <declaration name="receivedKeyPressed" type="boolean" line="986"/>
                <method name="removeItems" type="void" line="988">
                    <comment line="991">
                        Workarounr for 4810575.                        
                    </comment>
                    <comment line="992">
                        If lastFocused is not in currently focused window                        
                    </comment>
                    <comment line="993">
                        requestFocusInWindow will fail. In this case we must                        
                    </comment>
                    <comment line="994">
                        request focus by requestFocus() if it was not                        
                    </comment>
                    <comment line="995">
                        transferred from our popup.                        
                    </comment>
                    <scope line="989">
                        <scope line="990">
                            <declaration name="cfw" type="Window" line="996"/>
                            <scope line="1000"/>
                        </scope>
                    </scope>
                    <scope line="1007"/>
                </method>
                <declaration name="rootPaneFocusListener" type="FocusListener" line="1017"/>
                <anonymous_class line="1017">
                    <method name="focusGained" type="void" line="1018">
                        <params>
                            <param name="ev" type="FocusEvent"/>
                        </params>
                        <declaration name="opposite" type="Component" line="1019"/>
                        <scope line="1020"/>
                    </method>
                </anonymous_class>
                <javadoc line="1027">
                    Return the last JPopupMenu in &lt;code&gt;path&lt;/code&gt;,
                      or &lt;code&gt;null&lt;/code&gt; if none found                    
                </javadoc>
                <method name="getActivePopup" type="JPopupMenu" line="1031">
                    <params>
                        <param name="path" type="MenuElement[]"/>
                    </params>
                    <scope line="1032">
                        <declaration name="elem" type="MenuElement" line="1033"/>
                        <scope line="1034"/>
                    </scope>
                </method>
                <method name="addUIInputMap" type="void" line="1041">
                    <params>
                        <param name="c" type="JComponent"/>
                        <param name="map" type="InputMap"/>
                    </params>
                    <declaration name="lastNonUI" type="InputMap" line="1042"/>
                    <declaration name="parent" type="InputMap" line="1043"/>
                    <scope line="1045"/>
                    <scope line="1050"/>
                    <scope line="1052"/>
                </method>
                <method name="addUIActionMap" type="void" line="1058">
                    <params>
                        <param name="c" type="JComponent"/>
                        <param name="map" type="ActionMap"/>
                    </params>
                    <declaration name="lastNonUI" type="ActionMap" line="1059"/>
                    <declaration name="parent" type="ActionMap" line="1060"/>
                    <scope line="1062"/>
                    <scope line="1067"/>
                    <scope line="1069"/>
                </method>
                <method name="removeUIInputMap" type="void" line="1075">
                    <params>
                        <param name="c" type="JComponent"/>
                        <param name="map" type="InputMap"/>
                    </params>
                    <declaration name="im" type="InputMap" line="1076"/>
                    <declaration name="parent" type="InputMap" line="1077"/>
                    <scope line="1079">
                        <scope line="1080">
                            <scope line="1081"/>
                            <scope line="1084"/>
                        </scope>
                    </scope>
                </method>
                <method name="removeUIActionMap" type="void" line="1094">
                    <params>
                        <param name="c" type="JComponent"/>
                        <param name="map" type="ActionMap"/>
                    </params>
                    <declaration name="im" type="ActionMap" line="1095"/>
                    <declaration name="parent" type="ActionMap" line="1096"/>
                    <scope line="1098">
                        <scope line="1099">
                            <scope line="1100"/>
                            <scope line="1102"/>
                        </scope>
                    </scope>
                </method>
                <method name="stateChanged" type="void" line="1112">
                    <params>
                        <param name="ev" type="ChangeEvent"/>
                    </params>
                    <comment line="1121">
                        Do nothing for non-focusable popups                        
                    </comment>
                    <comment line="1133">
                        menu posted                        
                    </comment>
                    <comment line="1139">
                        a menu has been selected but not open                        
                    </comment>
                    <comment line="1164">
                        remember current focus owner                        
                    </comment>
                    <comment line="1168">
                        request focus on root pane and install keybindings                        
                    </comment>
                    <comment line="1169">
                        used for menu navigation                        
                    </comment>
                    <comment line="1184">
                        menu hidden -- return focus to where it had been before                        
                    </comment>
                    <comment line="1185">
                        and uninstall menu keybindings                        
                    </comment>
                    <comment line="1193">
                        Remember the last path selected                        
                    </comment>
                    <scope line="1113"/>
                    <declaration name="msm" type="MenuSelectionManager" line="1117"/>
                    <declaration name="p" type="MenuElement[]" line="1118"/>
                    <declaration name="popup" type="JPopupMenu" line="1119"/>
                    <scope line="1120"/>
                    <scope line="1125">
                        <scope line="1126"/>
                    </scope>
                    <scope line="1132">
                        <declaration name="invoker" type="JComponent" line="1134"/>
                        <scope line="1136">
                            <scope line="1138"/>
                            <scope line="1142"/>
                        </scope>
                        <scope line="1145">
                            <declaration name="c" type="Component" line="1146"/>
                            <scope line="1147"/>
                            <scope line="1149"/>
                            <scope line="1151"/>
                            <scope line="1153">
                                <scope line="1154">
                                    <scope line="1155"/>
                                </scope>
                            </scope>
                        </scope>
                        <scope line="1171"/>
                    </scope>
                    <scope line="1183"/>
                    <scope line="1187">
                        <scope line="1188"/>
                    </scope>
                </method>
                <method name="keyPressed" type="void" line="1198">
                    <params>
                        <param name="ev" type="KeyEvent"/>
                    </params>
                </method>
                <method name="keyReleased" type="void" line="1203">
                    <params>
                        <param name="ev" type="KeyEvent"/>
                    </params>
                    <scope line="1204"/>
                </method>
                <method name="keyTyped" type="void" line="1210">
                    <params>
                        <param name="ev" type="KeyEvent"/>
                    </params>
                    <scope line="1211"/>
                </method>
                <method name="uninstall" type="void" line="1216">
                    <scope line="1217"/>
                </method>
            </class>
        </class>
    </source>