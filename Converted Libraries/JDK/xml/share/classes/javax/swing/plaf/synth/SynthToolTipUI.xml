<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.plaf.synth">
        <import package="java.awt"/>
        <import package="java.beans.PropertyChangeEvent"/>
        <import package="java.beans.PropertyChangeListener"/>
        <import package="javax.swing"/>
        <import package="javax.swing.plaf.basic.BasicHTML"/>
        <import package="javax.swing.plaf.basic.BasicToolTipUI"/>
        <import package="javax.swing.plaf.ComponentUI"/>
        <import package="javax.swing.text.View"/>
        <class name="SynthToolTipUI" line="39">
            <extends class="BasicToolTipUI"/>
            <implements interface="PropertyChangeListener"/>
            <implements interface="SynthUI"/>
            <javadoc line="39">
                Provides the Synth L&amp;F UI delegate for{@link javax.swing.JToolTip}.                
                <author>
                    Joshua Outwater                    
                </author>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <declaration name="style" type="SynthStyle" line="48"/>
            <javadoc line="50">
                Creates a new UI object for the given component.                
                <param>
                    c component to create UI object for                    
                </param>
                <return>
                    the UI object                    
                </return>
            </javadoc>
            <method name="createUI" type="ComponentUI" line="56">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <javadoc line="60">
                @inheritDoc                
            </javadoc>
            <method name="installDefaults" type="void" line="64">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <method name="updateStyle" type="void" line="68">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <declaration name="context" type="SynthContext" line="69"/>
            </method>
            <javadoc line="74">
                @inheritDoc                
            </javadoc>
            <method name="uninstallDefaults" type="void" line="78">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <declaration name="context" type="SynthContext" line="79"/>
            </method>
            <javadoc line="85">
                @inheritDoc                
            </javadoc>
            <method name="installListeners" type="void" line="89">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <javadoc line="93">
                @inheritDoc                
            </javadoc>
            <method name="uninstallListeners" type="void" line="97">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <javadoc line="101">
                @inheritDoc                
            </javadoc>
            <method name="getContext" type="SynthContext" line="105">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <method name="getContext" type="SynthContext" line="109">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="state" type="int"/>
                </params>
            </method>
            <method name="getComponentState" type="int" line="114">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <declaration name="comp" type="JComponent" line="115"/>
                <scope line="117"/>
            </method>
            <javadoc line="123">
                Notifies this UI delegate to repaint the specified component.
                  This method paints the component background, then calls
                  the {@link #paint(SynthContext,Graphics)} method.
                  &lt;p&gt;In general, this method does not need to be overridden by subclasses.
                  All Look and Feel rendering code should reside in the {@code paint} method.                
                <param>
                    g the {@code Graphics} object used for painting                    
                </param>
                <param>
                    c the component being painted                    
                </param>
                <see>
                    #paint(SynthContext,Graphics)                    
                </see>
            </javadoc>
            <method name="update" type="void" line="136">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="c" type="JComponent"/>
                </params>
                <declaration name="context" type="SynthContext" line="137"/>
            </method>
            <javadoc line="146">
                @inheritDoc                
            </javadoc>
            <method name="paintBorder" type="void" line="151">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="g" type="Graphics"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
            </method>
            <javadoc line="155">
                Paints the specified component according to the Look and Feel.
                  &lt;p&gt;This method is not used by Synth Look and Feel.
                  Painting is handled by the {@link #paint(SynthContext,Graphics)} method.                
                <param>
                    g the {@code Graphics} object used for painting                    
                </param>
                <param>
                    c the component being painted                    
                </param>
                <see>
                    #paint(SynthContext,Graphics)                    
                </see>
            </javadoc>
            <method name="paint" type="void" line="165">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="c" type="JComponent"/>
                </params>
                <declaration name="context" type="SynthContext" line="166"/>
            </method>
            <javadoc line="172">
                Paints the specified component.                
                <param>
                    context context for the component being painted                    
                </param>
                <param>
                    g the {@code Graphics} object used for painting                    
                </param>
                <see>
                    #update(Graphics,JComponent)                    
                </see>
            </javadoc>
            <method name="paint" type="void" line="179">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="g" type="Graphics"/>
                </params>
                <declaration name="tip" type="JToolTip" line="180"/>
                <declaration name="insets" type="Insets" line="182"/>
                <declaration name="v" type="View" line="183"/>
                <scope line="184">
                    <declaration name="paintTextR" type="Rectangle" line="185"/>
                </scope>
                <scope line="189"/>
            </method>
            <javadoc line="198">
                @inheritDoc                
            </javadoc>
            <method name="getPreferredSize" type="Dimension" line="202">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <declaration name="context" type="SynthContext" line="203"/>
                <declaration name="insets" type="Insets" line="204"/>
                <declaration name="prefSize" type="Dimension" line="205"/>
                <declaration name="text" type="String" line="207"/>
                <scope line="209">
                    <declaration name="v" type="View" line="210"/>
                    <scope line="211"/>
                    <scope line="214">
                        <declaration name="font" type="Font" line="215"/>
                        <declaration name="fm" type="FontMetrics" line="216"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="226">
                @inheritDoc                
            </javadoc>
            <method name="propertyChange" type="void" line="230">
                <params>
                    <param name="e" type="PropertyChangeEvent"/>
                </params>
                <comment line="237">
                    remove the old html view client property if one                    
                </comment>
                <comment line="238">
                    existed, and install a new one if the text installed                    
                </comment>
                <comment line="239">
                    into the JLabel is html source.                    
                </comment>
                <scope line="231"/>
                <declaration name="name" type="String" line="234"/>
                <scope line="236">
                    <declaration name="tip" type="JToolTip" line="240"/>
                    <declaration name="text" type="String" line="241"/>
                </scope>
            </method>
        </class>
    </source>