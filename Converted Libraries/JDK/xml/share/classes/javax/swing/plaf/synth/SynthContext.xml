<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.plaf.synth">
        <import package="javax.swing"/>
        <import package="java.util"/>
        <class name="SynthContext" line="4">
            <javadoc line="4">
                An immutable transient object containing contextual information about
                  a &lt;code&gt;Region&lt;/code&gt;. A &lt;code&gt;SynthContext&lt;/code&gt; should only be
                  considered valid for the duration
                  of the method it is passed to. In other words you should not cache
                  a &lt;code&gt;SynthContext&lt;/code&gt; that is passed to you and expect it to
                  remain valid.                
                <since>
                    1.5                    
                </since>
                <author>
                    Scott Violet                    
                </author>
            </javadoc>
            <declaration name="contextMap" type="Map&amp;lt;Class,List&amp;lt;SynthContext&amp;gt;&amp;gt;" line="15"/>
            <declaration name="component" type="JComponent" line="16"/>
            <declaration name="region" type="Region" line="17"/>
            <declaration name="style" type="SynthStyle" line="18"/>
            <declaration name="state" type="int" line="19"/>
            <scope line="20"/>
            <method name="getContext" type="SynthContext" line="23">
                <params>
                    <param name="type" type="Class"/>
                    <param name="component" type="JComponent"/>
                    <param name="region" type="Region"/>
                    <param name="style" type="SynthStyle"/>
                    <param name="state" type="int"/>
                </params>
                <declaration name="context" type="SynthContext" line="24"/>
                <scope line="25">
                    <declaration name="instances" type="List&amp;lt;SynthContext&amp;gt;" line="26"/>
                    <scope line="27">
                        <declaration name="size" type="int" line="28"/>
                        <scope line="29"/>
                    </scope>
                </scope>
                <scope line="34">
                    <scope line="35"/>
                    <scope line="38"/>
                    <scope line="40"/>
                </scope>
            </method>
            <method name="releaseContext" type="void" line="46">
                <params>
                    <param name="context" type="SynthContext"/>
                </params>
                <scope line="47">
                    <declaration name="instances" type="List&amp;lt;SynthContext&amp;gt;" line="48"/>
                    <scope line="49"/>
                </scope>
            </method>
            <method name="SynthContext" type="constructor" line="56"/>
            <javadoc line="58">
                Creates a SynthContext with the specified values. This is meant
                  for subclasses and custom UI implementors. You very rarely need to
                  construct a SynthContext, though some methods will take one.                
                <param>
                    component JComponent                    
                </param>
                <param>
                    region Identifies the portion of the JComponent                    
                </param>
                <param>
                    style Style associated with the component                    
                </param>
                <param>
                    state State of the component as defined in SynthConstants.                    
                </param>
                <throws>
                    NullPointerException if component, region of style is null.                    
                </throws>
            </javadoc>
            <method name="SynthContext" type="constructor" line="68">
                <params>
                    <param name="component" type="JComponent"/>
                    <param name="region" type="Region"/>
                    <param name="style" type="SynthStyle"/>
                    <param name="state" type="int"/>
                </params>
                <scope line="69"/>
            </method>
            <javadoc line="74">
                Returns the hosting component containing the region.                
                <return>
                    Hosting Component                    
                </return>
            </javadoc>
            <method name="getComponent" type="JComponent" line="78"/>
            <javadoc line="81">
                Returns the Region identifying this state.                
                <return>
                    Region of the hosting component                    
                </return>
            </javadoc>
            <method name="getRegion" type="Region" line="85"/>
            <javadoc line="88">
                A convenience method for &lt;code&gt;getRegion().isSubregion()&lt;/code&gt;.                
            </javadoc>
            <method name="isSubregion" type="boolean" line="91"/>
            <method name="setStyle" type="void" line="94">
                <params>
                    <param name="style" type="SynthStyle"/>
                </params>
            </method>
            <javadoc line="97">
                Returns the style associated with this Region.                
                <return>
                    SynthStyle associated with the region.                    
                </return>
            </javadoc>
            <method name="getStyle" type="SynthStyle" line="101"/>
            <method name="setComponentState" type="void" line="104">
                <params>
                    <param name="state" type="int"/>
                </params>
            </method>
            <javadoc line="107">
                Returns the state of the widget, which is a bitmask of the
                  values defined in &lt;code&gt;SynthConstants&lt;/code&gt;. A region will at least
                  be in one of
                  &lt;code&gt;ENABLED&lt;/code&gt;, &lt;code&gt;MOUSE_OVER&lt;/code&gt;, &lt;code&gt;PRESSED&lt;/code&gt;
                  or &lt;code&gt;DISABLED&lt;/code&gt;.                
                <see>
                    SynthConstants                    
                </see>
                <return>
                    State of Component                    
                </return>
            </javadoc>
            <method name="getComponentState" type="int" line="116"/>
            <javadoc line="119">
                Resets the state of the Context.                
            </javadoc>
            <method name="reset" type="void" line="122">
                <params>
                    <param name="component" type="JComponent"/>
                    <param name="region" type="Region"/>
                    <param name="style" type="SynthStyle"/>
                    <param name="state" type="int"/>
                </params>
            </method>
            <method name="dispose" type="void" line="128"/>
            <javadoc line="133">
                Convenience method to get the Painter from the current SynthStyle.
                  This will NEVER return null.                
            </javadoc>
            <method name="getPainter" type="SynthPainter" line="137">
                <declaration name="painter" type="SynthPainter" line="138"/>
                <scope line="139"/>
            </method>
        </class>
    </source>