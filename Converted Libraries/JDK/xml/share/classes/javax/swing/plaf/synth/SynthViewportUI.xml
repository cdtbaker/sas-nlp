<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.plaf.synth">
        <import package="java.beans"/>
        <import package="javax.swing"/>
        <import package="javax.swing.plaf"/>
        <import package="java.awt"/>
        <class name="SynthViewportUI" line="34">
            <extends class="ViewportUI"/>
            <implements interface="PropertyChangeListener"/>
            <implements interface="SynthUI"/>
            <javadoc line="34">
                Provides the Synth L&amp;F UI delegate for{@link javax.swing.JViewport}.                
                <since>
                    1.7                    
                </since>
            </javadoc>
            <declaration name="style" type="SynthStyle" line="42"/>
            <javadoc line="44">
                Creates a new UI object for the given component.                
                <param>
                    c component to create UI object for                    
                </param>
                <return>
                    the UI object                    
                </return>
            </javadoc>
            <method name="createUI" type="ComponentUI" line="50">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <javadoc line="54">
                @inheritDoc                
            </javadoc>
            <method name="installUI" type="void" line="58">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <javadoc line="64">
                @inheritDoc                
            </javadoc>
            <method name="uninstallUI" type="void" line="68">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <javadoc line="74">
                Installs defaults for a viewport.                
                <param>
                    c a {@code JViewport} object                    
                </param>
            </javadoc>
            <method name="installDefaults" type="void" line="79">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <method name="updateStyle" type="void" line="83">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <comment line="86">
                    Note: JViewport is special cased as it does not allow for                    
                </comment>
                <comment line="87">
                    a border to be set. JViewport.setBorder is overriden to throw                    
                </comment>
                <comment line="88">
                    an IllegalArgumentException. Refer to SynthScrollPaneUI for                    
                </comment>
                <comment line="89">
                    details of this.                    
                </comment>
                <declaration name="context" type="SynthContext" line="84"/>
                <declaration name="newStyle" type="SynthStyle" line="90"/>
                <declaration name="oldStyle" type="SynthStyle" line="92"/>
                <scope line="94">
                    <scope line="95"/>
                </scope>
            </method>
            <javadoc line="105">
                Installs listeners into the viewport.                
                <param>
                    c a {@code JViewport} object                    
                </param>
            </javadoc>
            <method name="installListeners" type="void" line="110">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <javadoc line="114">
                Uninstalls listeners from the viewport.                
                <param>
                    c a {@code JViewport} object                    
                </param>
            </javadoc>
            <method name="uninstallListeners" type="void" line="119">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <javadoc line="123">
                Uninstalls defaults from a viewport.                
                <param>
                    c a {@code JViewport} object                    
                </param>
            </javadoc>
            <method name="uninstallDefaults" type="void" line="128">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <declaration name="context" type="SynthContext" line="129"/>
            </method>
            <javadoc line="135">
                @inheritDoc                
            </javadoc>
            <method name="getContext" type="SynthContext" line="139">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <method name="getContext" type="SynthContext" line="143">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="state" type="int"/>
                </params>
            </method>
            <method name="getRegion" type="Region" line="148">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <javadoc line="152">
                Notifies this UI delegate to repaint the specified component.
                  This method paints the component background, then calls
                  the {@link #paint(SynthContext,Graphics)} method.
                  &lt;p&gt;In general, this method does not need to be overridden by subclasses.
                  All Look and Feel rendering code should reside in the {@code paint} method.                
                <param>
                    g the {@code Graphics} object used for painting                    
                </param>
                <param>
                    c the component being painted                    
                </param>
                <see>
                    #paint(SynthContext,Graphics)                    
                </see>
            </javadoc>
            <method name="update" type="void" line="165">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="c" type="JComponent"/>
                </params>
                <declaration name="context" type="SynthContext" line="166"/>
            </method>
            <javadoc line="175">
                Paints the border. The method is never called,
                  because the {@code JViewport} class does not support a border.
                  This implementation does nothing.                
                <param>
                    context a component context                    
                </param>
                <param>
                    g the {@code Graphics} to paint on                    
                </param>
                <param>
                    x the X coordinate                    
                </param>
                <param>
                    y the Y coordinate                    
                </param>
                <param>
                    w width of the border                    
                </param>
                <param>
                    h height of the border                    
                </param>
            </javadoc>
            <method name="paintBorder" type="void" line="189">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="g" type="Graphics"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
            </method>
            <javadoc line="192">
                Paints the specified component according to the Look and Feel.
                  &lt;p&gt;This method is not used by Synth Look and Feel.
                  Painting is handled by the {@link #paint(SynthContext,Graphics)} method.                
                <param>
                    g the {@code Graphics} object used for painting                    
                </param>
                <param>
                    c the component being painted                    
                </param>
                <see>
                    #paint(SynthContext,Graphics)                    
                </see>
            </javadoc>
            <method name="paint" type="void" line="202">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="c" type="JComponent"/>
                </params>
                <declaration name="context" type="SynthContext" line="203"/>
            </method>
            <javadoc line="209">
                Paints the specified component. This implementation does nothing.                
                <param>
                    context context for the component being painted                    
                </param>
                <param>
                    g the {@code Graphics} object used for painting                    
                </param>
                <see>
                    #update(Graphics,JComponent)                    
                </see>
            </javadoc>
            <method name="paint" type="void" line="216">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="g" type="Graphics"/>
                </params>
            </method>
            <javadoc line="219">
                @inheritDoc                
            </javadoc>
            <method name="propertyChange" type="void" line="223">
                <params>
                    <param name="e" type="PropertyChangeEvent"/>
                </params>
                <scope line="224"/>
            </method>
        </class>
    </source>