<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.plaf.synth">
        <import package="java.awt"/>
        <import package="java.beans"/>
        <import package="javax.swing"/>
        <import package="javax.swing.plaf"/>
        <import package="javax.swing.plaf.basic"/>
        <class name="SynthScrollBarUI" line="35">
            <extends class="BasicScrollBarUI"/>
            <comment line="460">
                PropertyChangeListener                
            </comment>
            <implements interface="PropertyChangeListener"/>
            <implements interface="SynthUI"/>
            <javadoc line="35">
                Provides the Synth L&amp;F UI delegate for{@link javax.swing.JScrollBar}.                
                <author>
                    Scott Violet                    
                </author>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <declaration name="style" type="SynthStyle" line="45"/>
            <declaration name="thumbStyle" type="SynthStyle" line="46"/>
            <declaration name="trackStyle" type="SynthStyle" line="47"/>
            <declaration name="validMinimumThumbSize" type="boolean" line="49"/>
            <method name="createUI" type="ComponentUI" line="51">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <javadoc line="55">
                @inheritDoc                
            </javadoc>
            <method name="installDefaults" type="void" line="59">
                <scope line="62"/>
            </method>
            <javadoc line="69">
                @inheritDoc                
            </javadoc>
            <method name="configureScrollBarColors" type="void" line="73"/>
            <method name="updateStyle" type="void" line="76">
                <params>
                    <param name="c" type="JScrollBar"/>
                </params>
                <comment line="101">
                    handle scaling for sizeVarients for special case components. The
                     key &quot;JComponent.sizeVariant&quot; scales for large/small/mini
                     components are based on Apples LAF                    
                </comment>
                <declaration name="oldStyle" type="SynthStyle" line="77"/>
                <declaration name="context" type="SynthContext" line="78"/>
                <scope line="80">
                    <scope line="84"/>
                    <scope line="88"/>
                    <scope line="93"/>
                    <declaration name="scaleKey" type="String" line="103"/>
                    <scope line="105">
                        <scope line="106"/>
                        <scope line="110"/>
                        <scope line="114"/>
                    </scope>
                    <scope line="121"/>
                </scope>
            </method>
            <javadoc line="137">
                @inheritDoc                
            </javadoc>
            <method name="installListeners" type="void" line="141"/>
            <javadoc line="146">
                @inheritDoc                
            </javadoc>
            <method name="uninstallListeners" type="void" line="150"/>
            <javadoc line="155">
                @inheritDoc                
            </javadoc>
            <method name="uninstallDefaults" type="void" line="159">
                <declaration name="context" type="SynthContext" line="160"/>
            </method>
            <javadoc line="178">
                @inheritDoc                
            </javadoc>
            <method name="getContext" type="SynthContext" line="182">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <method name="getContext" type="SynthContext" line="186">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="state" type="int"/>
                </params>
            </method>
            <method name="getContext" type="SynthContext" line="191">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="region" type="Region"/>
                </params>
            </method>
            <method name="getContext" type="SynthContext" line="195">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="region" type="Region"/>
                    <param name="state" type="int"/>
                </params>
                <declaration name="style" type="SynthStyle" line="196"/>
                <scope line="198"/>
            </method>
            <method name="getComponentState" type="int" line="205">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="region" type="Region"/>
                </params>
                <scope line="207"/>
            </method>
            <javadoc line="213">
                @inheritDoc                
            </javadoc>
            <method name="getSupportsAbsolutePositioning" type="boolean" line="217">
                <declaration name="context" type="SynthContext" line="218"/>
                <declaration name="value" type="boolean" line="219"/>
            </method>
            <javadoc line="225">
                Notifies this UI delegate to repaint the specified component.
                  This method paints the component background, then calls
                  the {@link #paint(SynthContext,Graphics)} method.
                  &lt;p&gt;In general, this method does not need to be overridden by subclasses.
                  All Look and Feel rendering code should reside in the {@code paint} method.                
                <param>
                    g the {@code Graphics} object used for painting                    
                </param>
                <param>
                    c the component being painted                    
                </param>
                <see>
                    #paint(SynthContext,Graphics)                    
                </see>
            </javadoc>
            <method name="update" type="void" line="238">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="c" type="JComponent"/>
                </params>
                <declaration name="context" type="SynthContext" line="239"/>
            </method>
            <javadoc line="249">
                Paints the specified component according to the Look and Feel.
                  &lt;p&gt;This method is not used by Synth Look and Feel.
                  Painting is handled by the {@link #paint(SynthContext,Graphics)} method.                
                <param>
                    g the {@code Graphics} object used for painting                    
                </param>
                <param>
                    c the component being painted                    
                </param>
                <see>
                    #paint(SynthContext,Graphics)                    
                </see>
            </javadoc>
            <method name="paint" type="void" line="259">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="c" type="JComponent"/>
                </params>
                <declaration name="context" type="SynthContext" line="260"/>
            </method>
            <javadoc line="266">
                Paints the specified component.                
                <param>
                    context context for the component being painted                    
                </param>
                <param>
                    g the {@code Graphics} object used for painting                    
                </param>
                <see>
                    #update(Graphics,JComponent)                    
                </see>
            </javadoc>
            <method name="paint" type="void" line="273">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="g" type="Graphics"/>
                </params>
                <declaration name="subcontext" type="SynthContext" line="274"/>
            </method>
            <javadoc line="284">
                @inheritDoc                
            </javadoc>
            <method name="paintBorder" type="void" line="289">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="g" type="Graphics"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
            </method>
            <javadoc line="294">
                Paints the scrollbar track.                
                <param>
                    context context for the component being painted                    
                </param>
                <param>
                    g {@code Graphics} object used for painting                    
                </param>
                <param>
                    trackBounds bounding box for the track                    
                </param>
            </javadoc>
            <method name="paintTrack" type="void" line="302">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="g" type="Graphics"/>
                    <param name="trackBounds" type="Rectangle"/>
                </params>
            </method>
            <javadoc line="312">
                Paints the scrollbar thumb.                
                <param>
                    context context for the component being painted                    
                </param>
                <param>
                    g {@code Graphics} object used for painting                    
                </param>
                <param>
                    thumbBounds bounding box for the thumb                    
                </param>
            </javadoc>
            <method name="paintThumb" type="void" line="320">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="g" type="Graphics"/>
                    <param name="thumbBounds" type="Rectangle"/>
                </params>
                <declaration name="orientation" type="int" line="322"/>
            </method>
            <javadoc line="331">
                A vertical scrollbar&apos;s preferred width is the maximum of
                  preferred widths of the (non &lt;code&gt;null&lt;/code&gt;)
                  increment/decrement buttons,
                  and the minimum width of the thumb. The preferred height is the
                  sum of the preferred heights of the same parts.  The basis for
                  the preferred size of a horizontal scrollbar is similar.
                  &lt;p&gt;
                  The &lt;code&gt;preferredSize&lt;/code&gt; is only computed once, subsequent
                  calls to this method just return a cached size.                
                <param>
                    c the &lt;code&gt;JScrollBar&lt;/code&gt; that&apos;s delegating this method to us                    
                </param>
                <return>
                    the preferred size of a Basic JScrollBar                    
                </return>
                <see>
                    #getMaximumSize                    
                </see>
                <see>
                    #getMinimumSize                    
                </see>
            </javadoc>
            <method name="getPreferredSize" type="Dimension" line="348">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <declaration name="insets" type="Insets" line="349"/>
            </method>
            <javadoc line="355">
                @inheritDoc                
            </javadoc>
            <method name="getMinimumThumbSize" type="Dimension" line="359">
                <scope line="360">
                    <scope line="361"/>
                    <scope line="364"/>
                </scope>
            </method>
            <javadoc line="372">
                @inheritDoc                
            </javadoc>
            <method name="createDecreaseButton" type="JButton" line="376">
                <params>
                    <param name="orientation" type="int"/>
                </params>
                <comment line="381">
                    there is an overlap between the track and button                    
                </comment>
                <comment line="385">
                    adjust the height by decrGap
                    Note: decrGap is negative!                    
                </comment>
                <comment line="389">
                    adjust the width by decrGap
                    Note: decrGap is negative!                    
                </comment>
                <anonymous_class line="377">
                    <method name="contains" type="boolean" line="379">
                        <params>
                            <param name="x" type="int"/>
                            <param name="y" type="int"/>
                        </params>
                        <comment line="381">
                            there is an overlap between the track and button                            
                        </comment>
                        <comment line="385">
                            adjust the height by decrGap
                            Note: decrGap is negative!                            
                        </comment>
                        <comment line="389">
                            adjust the width by decrGap
                            Note: decrGap is negative!                            
                        </comment>
                        <scope line="380">
                            <declaration name="width" type="int" line="381"/>
                            <declaration name="height" type="int" line="382"/>
                            <scope line="383"/>
                            <scope line="387"/>
                        </scope>
                    </method>
                </anonymous_class>
                <declaration name="synthArrowButton" type="SynthArrowButton" line="377"/>
            </method>
            <javadoc line="401">
                @inheritDoc                
            </javadoc>
            <method name="createIncreaseButton" type="JButton" line="405">
                <params>
                    <param name="orientation" type="int"/>
                </params>
                <comment line="410">
                    there is an overlap between the track and button                    
                </comment>
                <comment line="414">
                    adjust the height and y by incrGap
                    Note: incrGap is negative!                    
                </comment>
                <comment line="419">
                    adjust the width and x by incrGap
                    Note: incrGap is negative!                    
                </comment>
                <anonymous_class line="406">
                    <method name="contains" type="boolean" line="408">
                        <params>
                            <param name="x" type="int"/>
                            <param name="y" type="int"/>
                        </params>
                        <comment line="410">
                            there is an overlap between the track and button                            
                        </comment>
                        <comment line="414">
                            adjust the height and y by incrGap
                            Note: incrGap is negative!                            
                        </comment>
                        <comment line="419">
                            adjust the width and x by incrGap
                            Note: incrGap is negative!                            
                        </comment>
                        <scope line="409">
                            <declaration name="width" type="int" line="410"/>
                            <declaration name="height" type="int" line="411"/>
                            <scope line="412"/>
                            <scope line="417"/>
                        </scope>
                    </method>
                </anonymous_class>
                <declaration name="synthArrowButton" type="SynthArrowButton" line="406"/>
            </method>
            <javadoc line="432">
                @inheritDoc                
            </javadoc>
            <method name="setThumbRollover" type="void" line="436">
                <params>
                    <param name="active" type="boolean"/>
                </params>
                <scope line="437"/>
            </method>
            <method name="updateButtonDirections" type="void" line="443">
                <declaration name="orient" type="int" line="444"/>
                <scope line="445"/>
                <scope line="451"/>
            </method>
            <method name="propertyChange" type="void" line="462">
                <params>
                    <param name="e" type="PropertyChangeEvent"/>
                </params>
                <declaration name="propertyName" type="String" line="463"/>
                <scope line="465"/>
                <scope line="469"/>
                <scope line="472"/>
            </method>
        </class>
    </source>