<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.plaf.metal">
        <import package="java.awt.event"/>
        <import package="java.beans.PropertyChangeEvent"/>
        <import package="java.beans.PropertyChangeListener"/>
        <import package="javax.swing"/>
        <import package="javax.swing.border"/>
        <import package="javax.swing.event"/>
        <import package="javax.swing.plaf"/>
        <import package="javax.swing.plaf.basic"/>
        <import package="java.awt"/>
        <import package="java.io"/>
        <import package="java.security"/>
        <class name="MetalRootPaneUI" line="13">
            <extends class="BasicRootPaneUI"/>
            <javadoc line="13">
                Provides the metal look and feel implementation of &lt;code&gt;RootPaneUI&lt;/code&gt;.
                  &lt;p&gt;
                  &lt;code&gt;MetalRootPaneUI&lt;/code&gt; provides support for the
                  &lt;code&gt;windowDecorationStyle&lt;/code&gt; property of &lt;code&gt;JRootPane&lt;/code&gt;.
                  &lt;code&gt;MetalRootPaneUI&lt;/code&gt; does this by way of installing a custom
                  &lt;code&gt;LayoutManager&lt;/code&gt;, a private &lt;code&gt;Component&lt;/code&gt; to render
                  the appropriate widgets, and a private &lt;code&gt;Border&lt;/code&gt;. The
                  &lt;code&gt;LayoutManager&lt;/code&gt; is always installed, regardless of the value of
                  the &lt;code&gt;windowDecorationStyle&lt;/code&gt; property, but the
                  &lt;code&gt;Border&lt;/code&gt; and &lt;code&gt;Component&lt;/code&gt; are only installed/added if
                  the &lt;code&gt;windowDecorationStyle&lt;/code&gt; is other than
                  &lt;code&gt;JRootPane.NONE&lt;/code&gt;.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <author>
                    Terry Kellerman                    
                </author>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="borderKeys" type="String[]" line="39"/>
            <javadoc line="39">
                Keys to lookup borders in defaults table.                
            </javadoc>
            <declaration name="CORNER_DRAG_WIDTH" type="int" line="43"/>
            <javadoc line="43">
                The amount of space (in pixels) that the cursor is changed on.                
            </javadoc>
            <declaration name="BORDER_DRAG_THICKNESS" type="int" line="47"/>
            <javadoc line="47">
                Region from edges that dragging is active from.                
            </javadoc>
            <declaration name="window" type="Window" line="51"/>
            <javadoc line="51">
                Window the &lt;code&gt;JRootPane&lt;/code&gt; is in.                
            </javadoc>
            <declaration name="titlePane" type="JComponent" line="55"/>
            <javadoc line="55">
                &lt;code&gt;JComponent&lt;/code&gt; providing window decorations. This will be
                  null if not providing window decorations.                
            </javadoc>
            <declaration name="mouseInputListener" type="MouseInputListener" line="60"/>
            <javadoc line="60">
                &lt;code&gt;MouseInputListener&lt;/code&gt; that is added to the parent
                  &lt;code&gt;Window&lt;/code&gt; the &lt;code&gt;JRootPane&lt;/code&gt; is contained in.                
            </javadoc>
            <declaration name="layoutManager" type="LayoutManager" line="65"/>
            <javadoc line="65">
                The &lt;code&gt;LayoutManager&lt;/code&gt; that is set on the
                  &lt;code&gt;JRootPane&lt;/code&gt;.                
            </javadoc>
            <declaration name="savedOldLayout" type="LayoutManager" line="70"/>
            <javadoc line="70">
                &lt;code&gt;LayoutManager&lt;/code&gt; of the &lt;code&gt;JRootPane&lt;/code&gt; before we
                  replaced it.                
            </javadoc>
            <declaration name="root" type="JRootPane" line="75"/>
            <javadoc line="75">
                &lt;code&gt;JRootPane&lt;/code&gt; providing the look and feel for.                
            </javadoc>
            <declaration name="lastCursor" type="Cursor" line="79"/>
            <javadoc line="79">
                &lt;code&gt;Cursor&lt;/code&gt; used to track the cursor set by the user.
                  This is initially &lt;code&gt;Cursor.DEFAULT_CURSOR&lt;/code&gt;.                
            </javadoc>
            <javadoc line="84">
                Creates a UI for a &lt;code&gt;JRootPane&lt;/code&gt;.                
                <param>
                    c the JRootPane the RootPaneUI will be created for                    
                </param>
                <return>
                    the RootPaneUI implementation for the passed in JRootPane                    
                </return>
            </javadoc>
            <method name="createUI" type="ComponentUI" line="89">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <javadoc line="92">
                Invokes supers implementation of &lt;code&gt;installUI&lt;/code&gt; to install
                  the necessary state onto the passed in &lt;code&gt;JRootPane&lt;/code&gt;
                  to render the metal look and feel implementation of
                  &lt;code&gt;RootPaneUI&lt;/code&gt;. If
                  the &lt;code&gt;windowDecorationStyle&lt;/code&gt; property of the
                  &lt;code&gt;JRootPane&lt;/code&gt; is other than &lt;code&gt;JRootPane.NONE&lt;/code&gt;,
                  this will add a custom &lt;code&gt;Component&lt;/code&gt; to render the widgets to
                  &lt;code&gt;JRootPane&lt;/code&gt;, as well as installing a custom
                  &lt;code&gt;Border&lt;/code&gt; and &lt;code&gt;LayoutManager&lt;/code&gt; on the
                  &lt;code&gt;JRootPane&lt;/code&gt;.                
                <param>
                    c the JRootPane to install state onto                    
                </param>
            </javadoc>
            <method name="installUI" type="void" line="105">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <declaration name="style" type="int" line="108"/>
                <scope line="109"/>
            </method>
            <javadoc line="113">
                Invokes supers implementation to uninstall any of its state. This will
                  also reset the &lt;code&gt;LayoutManager&lt;/code&gt; of the &lt;code&gt;JRootPane&lt;/code&gt;.
                  If a &lt;code&gt;Component&lt;/code&gt; has been added to the &lt;code&gt;JRootPane&lt;/code&gt;
                  to render the window decoration style, this method will remove it.
                  Similarly, this will revert the Border and LayoutManager of the
                  &lt;code&gt;JRootPane&lt;/code&gt; to what it was before &lt;code&gt;installUI&lt;/code&gt;
                  was invoked.                
                <param>
                    c the JRootPane to uninstall state from                    
                </param>
            </javadoc>
            <method name="uninstallUI" type="void" line="123">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <javadoc line="130">
                Installs the appropriate &lt;code&gt;Border&lt;/code&gt; onto the
                  &lt;code&gt;JRootPane&lt;/code&gt;.                
            </javadoc>
            <method name="installBorder" type="void" line="134">
                <params>
                    <param name="root" type="JRootPane"/>
                </params>
                <declaration name="style" type="int" line="135"/>
                <scope line="136"/>
                <scope line="139"/>
            </method>
            <javadoc line="143">
                Removes any border that may have been installed.                
            </javadoc>
            <method name="uninstallBorder" type="void" line="146">
                <params>
                    <param name="root" type="JRootPane"/>
                </params>
            </method>
            <javadoc line="149">
                Installs the necessary Listeners on the parent &lt;code&gt;Window&lt;/code&gt;,
                  if there is one.
                  &lt;p&gt;
                  This takes the parent so that cleanup can be done from
                  &lt;code&gt;removeNotify&lt;/code&gt;, at which point the parent hasn&apos;t been
                  reset yet.                
                <param>
                    parent The parent of the JRootPane                    
                </param>
            </javadoc>
            <method name="installWindowListeners" type="void" line="158">
                <params>
                    <param name="root" type="JRootPane"/>
                    <param name="parent" type="Component"/>
                </params>
                <scope line="159"/>
                <scope line="162"/>
                <scope line="165">
                    <scope line="166"/>
                </scope>
            </method>
            <javadoc line="173">
                Uninstalls the necessary Listeners on the &lt;code&gt;Window&lt;/code&gt; the
                  Listeners were last installed on.                
            </javadoc>
            <method name="uninstallWindowListeners" type="void" line="177">
                <params>
                    <param name="root" type="JRootPane"/>
                </params>
                <scope line="178"/>
            </method>
            <javadoc line="183">
                Installs the appropriate LayoutManager on the &lt;code&gt;JRootPane&lt;/code&gt;
                  to render the window decorations.                
            </javadoc>
            <method name="installLayout" type="void" line="187">
                <params>
                    <param name="root" type="JRootPane"/>
                </params>
                <scope line="188"/>
            </method>
            <javadoc line="194">
                Uninstalls the previously installed &lt;code&gt;LayoutManager&lt;/code&gt;.                
            </javadoc>
            <method name="uninstallLayout" type="void" line="197">
                <params>
                    <param name="root" type="JRootPane"/>
                </params>
                <scope line="198"/>
            </method>
            <javadoc line="203">
                Installs the necessary state onto the JRootPane to render client
                  decorations. This is ONLY invoked if the &lt;code&gt;JRootPane&lt;/code&gt;
                  has a decoration style other than &lt;code&gt;JRootPane.NONE&lt;/code&gt;.                
            </javadoc>
            <method name="installClientDecorations" type="void" line="208">
                <params>
                    <param name="root" type="JRootPane"/>
                </params>
                <declaration name="titlePane" type="JComponent" line="210"/>
                <scope line="214"/>
            </method>
            <javadoc line="219">
                Uninstalls any state that &lt;code&gt;installClientDecorations&lt;/code&gt; has
                  installed.
                  &lt;p&gt;
                  NOTE: This may be called if you haven&apos;t installed client decorations
                  yet (ie before &lt;code&gt;installClientDecorations&lt;/code&gt; has been invoked).                
            </javadoc>
            <method name="uninstallClientDecorations" type="void" line="226">
                <params>
                    <param name="root" type="JRootPane"/>
                </params>
                <declaration name="style" type="int" line="231"/>
                <scope line="232"/>
                <scope line="236"/>
            </method>
            <javadoc line="241">
                Returns the &lt;code&gt;JComponent&lt;/code&gt; to render the window decoration
                  style.                
            </javadoc>
            <method name="createTitlePane" type="JComponent" line="245">
                <params>
                    <param name="root" type="JRootPane"/>
                </params>
            </method>
            <javadoc line="248">
                Returns a &lt;code&gt;MouseListener&lt;/code&gt; that will be added to the
                  &lt;code&gt;Window&lt;/code&gt; containing the &lt;code&gt;JRootPane&lt;/code&gt;.                
            </javadoc>
            <method name="createWindowMouseInputListener" type="MouseInputListener" line="252">
                <params>
                    <param name="root" type="JRootPane"/>
                </params>
            </method>
            <javadoc line="255">
                Returns a &lt;code&gt;LayoutManager&lt;/code&gt; that will be set on the
                  &lt;code&gt;JRootPane&lt;/code&gt;.                
            </javadoc>
            <method name="createLayoutManager" type="LayoutManager" line="259"/>
            <javadoc line="262">
                Sets the window title pane -- the JComponent used to provide a plaf a
                  way to override the native operating system&apos;s window title pane with
                  one whose look and feel are controlled by the plaf.  The plaf creates
                  and sets this value; the default is null, implying a native operating
                  system window title pane.                
                <param>
                    content the &lt;code&gt;JComponent&lt;/code&gt; to use for the window title pane.                    
                </param>
            </javadoc>
            <method name="setTitlePane" type="void" line="270">
                <params>
                    <param name="root" type="JRootPane"/>
                    <param name="titlePane" type="JComponent"/>
                </params>
                <declaration name="layeredPane" type="JLayeredPane" line="271"/>
                <declaration name="oldTitlePane" type="JComponent" line="272"/>
                <scope line="273"/>
                <scope line="277"/>
            </method>
            <javadoc line="283">
                Returns the &lt;code&gt;JComponent&lt;/code&gt; rendering the title pane. If this
                  returns null, it implies there is no need to render window decorations.                
                <return>
                    the current window title pane, or null                    
                </return>
                <see>
                    #setTitlePane                    
                </see>
            </javadoc>
            <method name="getTitlePane" type="JComponent" line="289"/>
            <javadoc line="292">
                Returns the &lt;code&gt;JRootPane&lt;/code&gt; we&apos;re providing the look and
                  feel for.                
            </javadoc>
            <method name="getRootPane" type="JRootPane" line="296"/>
            <javadoc line="299">
                Invoked when a property changes. &lt;code&gt;MetalRootPaneUI&lt;/code&gt; is
                  primarily interested in events originating from the
                  &lt;code&gt;JRootPane&lt;/code&gt; it has been installed on identifying the
                  property &lt;code&gt;windowDecorationStyle&lt;/code&gt;. If the
                  &lt;code&gt;windowDecorationStyle&lt;/code&gt; has changed to a value other
                  than &lt;code&gt;JRootPane.NONE&lt;/code&gt;, this will add a &lt;code&gt;Component&lt;/code&gt;
                  to the &lt;code&gt;JRootPane&lt;/code&gt; to render the window decorations, as well
                  as installing a &lt;code&gt;Border&lt;/code&gt; on the &lt;code&gt;JRootPane&lt;/code&gt;.
                  On the other hand, if the &lt;code&gt;windowDecorationStyle&lt;/code&gt; has
                  changed to &lt;code&gt;JRootPane.NONE&lt;/code&gt;, this will remove the
                  &lt;code&gt;Component&lt;/code&gt; that has been added to the &lt;code&gt;JRootPane&lt;/code&gt;
                  as well resetting the Border to what it was before
                  &lt;code&gt;installUI&lt;/code&gt; was invoked.                
                <param>
                    e A PropertyChangeEvent object describing the event source
                      and the property that has changed.                    
                </param>
            </javadoc>
            <method name="propertyChange" type="void" line="316">
                <params>
                    <param name="e" type="PropertyChangeEvent"/>
                </params>
                <declaration name="propertyName" type="String" line="318"/>
                <scope line="319"/>
                <scope line="322">
                    <declaration name="root" type="JRootPane" line="323"/>
                    <declaration name="style" type="int" line="324"/>
                    <scope line="326"/>
                </scope>
                <scope line="330">
                    <scope line="332"/>
                </scope>
            </method>
            <class name="MetalRootLayout" line="338">
                <implements interface="LayoutManager2"/>
                <javadoc line="338">
                    A custom layout manager that is responsible for the layout of
                      layeredPane, glassPane, menuBar and titlePane, if one has been
                      installed.                    
                </javadoc>
                <javadoc line="344">
                    Returns the amount of space the layout would like to have.                    
                    <param>
                        the Container for which this layout manager is being used                        
                    </param>
                    <return>
                        a Dimension object containing the layout&apos;s preferred size                        
                    </return>
                </javadoc>
                <method name="preferredLayoutSize" type="Dimension" line="349">
                    <params>
                        <param name="parent" type="Container"/>
                    </params>
                    <declaration name="cpd" type="Dimension" line="350"/>
                    <declaration name="cpWidth" type="int" line="351"/>
                    <declaration name="cpHeight" type="int" line="352"/>
                    <declaration name="mbWidth" type="int" line="353"/>
                    <declaration name="mbHeight" type="int" line="354"/>
                    <declaration name="tpWidth" type="int" line="355"/>
                    <declaration name="tpHeight" type="int" line="356"/>
                    <declaration name="i" type="Insets" line="357"/>
                    <declaration name="root" type="JRootPane" line="358"/>
                    <scope line="359"/>
                    <scope line="362"/>
                    <scope line="365"/>
                    <scope line="369">
                        <scope line="371"/>
                    </scope>
                    <scope line="376">
                        <declaration name="titlePane" type="JComponent" line="377"/>
                        <scope line="378">
                            <scope line="380"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="388">
                    Returns the minimum amount of space the layout needs.                    
                    <param>
                        the Container for which this layout manager is being used                        
                    </param>
                    <return>
                        a Dimension object containing the layout&apos;s minimum size                        
                    </return>
                </javadoc>
                <method name="minimumLayoutSize" type="Dimension" line="393">
                    <params>
                        <param name="parent" type="Container"/>
                    </params>
                    <declaration name="cpd" type="Dimension" line="394"/>
                    <declaration name="cpWidth" type="int" line="395"/>
                    <declaration name="cpHeight" type="int" line="396"/>
                    <declaration name="mbWidth" type="int" line="397"/>
                    <declaration name="mbHeight" type="int" line="398"/>
                    <declaration name="tpWidth" type="int" line="399"/>
                    <declaration name="tpHeight" type="int" line="400"/>
                    <declaration name="i" type="Insets" line="401"/>
                    <declaration name="root" type="JRootPane" line="402"/>
                    <scope line="403"/>
                    <scope line="406"/>
                    <scope line="409"/>
                    <scope line="413">
                        <scope line="415"/>
                    </scope>
                    <scope line="420">
                        <declaration name="titlePane" type="JComponent" line="421"/>
                        <scope line="422">
                            <scope line="424"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="432">
                    Returns the maximum amount of space the layout can use.                    
                    <param>
                        the Container for which this layout manager is being used                        
                    </param>
                    <return>
                        a Dimension object containing the layout&apos;s maximum size                        
                    </return>
                </javadoc>
                <method name="maximumLayoutSize" type="Dimension" line="437">
                    <params>
                        <param name="target" type="Container"/>
                    </params>
                    <declaration name="cpd" type="Dimension" line="438"/>
                    <declaration name="cpWidth" type="int" line="439"/>
                    <declaration name="cpHeight" type="int" line="440"/>
                    <declaration name="mbWidth" type="int" line="441"/>
                    <declaration name="mbHeight" type="int" line="442"/>
                    <declaration name="tpWidth" type="int" line="443"/>
                    <declaration name="tpHeight" type="int" line="444"/>
                    <declaration name="i" type="Insets" line="445"/>
                    <declaration name="root" type="JRootPane" line="446"/>
                    <scope line="447">
                        <scope line="449"/>
                    </scope>
                    <scope line="454">
                        <scope line="456"/>
                    </scope>
                    <scope line="461">
                        <declaration name="titlePane" type="JComponent" line="462"/>
                        <scope line="463">
                            <scope line="465"/>
                        </scope>
                    </scope>
                    <declaration name="maxHeight" type="int" line="471"/>
                    <scope line="472"/>
                    <declaration name="maxWidth" type="int" line="475"/>
                    <scope line="476"/>
                </method>
                <javadoc line="481">
                    Instructs the layout manager to perform the layout for the specified
                      container.                    
                    <param>
                        the Container for which this layout manager is being used                        
                    </param>
                </javadoc>
                <method name="layoutContainer" type="void" line="486">
                    <params>
                        <param name="parent" type="Container"/>
                    </params>
                    <declaration name="root" type="JRootPane" line="487"/>
                    <declaration name="b" type="Rectangle" line="488"/>
                    <declaration name="i" type="Insets" line="489"/>
                    <declaration name="nextY" type="int" line="490"/>
                    <declaration name="w" type="int" line="491"/>
                    <declaration name="h" type="int" line="492"/>
                    <scope line="493"/>
                    <scope line="496"/>
                    <scope line="499">
                        <declaration name="titlePane" type="JComponent" line="500"/>
                        <scope line="501">
                            <declaration name="tpd" type="Dimension" line="502"/>
                            <scope line="503">
                                <declaration name="tpHeight" type="int" line="504"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="510">
                        <declaration name="mbd" type="Dimension" line="511"/>
                    </scope>
                    <scope line="515">
                        <declaration name="cpd" type="Dimension" line="516"/>
                    </scope>
                </method>
                <method name="addLayoutComponent" type="void" line="520">
                    <params>
                        <param name="name" type="String"/>
                        <param name="comp" type="Component"/>
                    </params>
                </method>
                <method name="removeLayoutComponent" type="void" line="522">
                    <params>
                        <param name="comp" type="Component"/>
                    </params>
                </method>
                <method name="addLayoutComponent" type="void" line="524">
                    <params>
                        <param name="comp" type="Component"/>
                        <param name="constraints" type="Object"/>
                    </params>
                </method>
                <method name="getLayoutAlignmentX" type="float" line="526">
                    <params>
                        <param name="target" type="Container"/>
                    </params>
                </method>
                <method name="getLayoutAlignmentY" type="float" line="529">
                    <params>
                        <param name="target" type="Container"/>
                    </params>
                </method>
                <method name="invalidateLayout" type="void" line="532">
                    <params>
                        <param name="target" type="Container"/>
                    </params>
                </method>
            </class>
            <declaration name="cursorMapping" type="int[]" line="535"/>
            <javadoc line="535">
                Maps from positions to cursor type. Refer to calculateCorner and
                  calculatePosition for details of this.                
            </javadoc>
            <class name="MouseInputHandler" line="540">
                <implements interface="MouseInputListener"/>
                <javadoc line="540">
                    MouseInputHandler is responsible for handling resize/moving of
                      the Window. It sets the cursor directly on the Window when then
                      mouse moves over a hot spot.                    
                </javadoc>
                <declaration name="isMovingWindow" type="boolean" line="546"/>
                <javadoc line="546">
                    Set to true if the drag operation is moving the window.                    
                </javadoc>
                <declaration name="dragCursor" type="int" line="550"/>
                <javadoc line="550">
                    Used to determine the corner the resize is occuring from.                    
                </javadoc>
                <declaration name="dragOffsetX" type="int" line="554"/>
                <javadoc line="554">
                    X location the mouse went down on for a drag operation.                    
                </javadoc>
                <declaration name="dragOffsetY" type="int" line="558"/>
                <javadoc line="558">
                    Y location the mouse went down on for a drag operation.                    
                </javadoc>
                <declaration name="dragWidth" type="int" line="562"/>
                <javadoc line="562">
                    Width of the window when the drag started.                    
                </javadoc>
                <declaration name="dragHeight" type="int" line="566"/>
                <javadoc line="566">
                    Height of the window when the drag started.                    
                </javadoc>
                <method name="mousePressed" type="void" line="570">
                    <params>
                        <param name="ev" type="MouseEvent"/>
                    </params>
                    <declaration name="rootPane" type="JRootPane" line="571"/>
                    <scope line="572"/>
                    <declaration name="dragWindowOffset" type="Point" line="575"/>
                    <declaration name="w" type="Window" line="576"/>
                    <scope line="577"/>
                    <declaration name="convertedDragWindowOffset" type="Point" line="580"/>
                    <declaration name="f" type="Frame" line="581"/>
                    <declaration name="d" type="Dialog" line="582"/>
                    <scope line="583"/>
                    <scope line="586"/>
                    <declaration name="frameState" type="int" line="589"/>
                    <scope line="590">
                        <scope line="591"/>
                    </scope>
                    <scope line="597"/>
                </method>
                <method name="mouseReleased" type="void" line="605">
                    <params>
                        <param name="ev" type="MouseEvent"/>
                    </params>
                    <scope line="606"/>
                </method>
                <method name="mouseMoved" type="void" line="613">
                    <params>
                        <param name="ev" type="MouseEvent"/>
                    </params>
                    <declaration name="root" type="JRootPane" line="614"/>
                    <scope line="615"/>
                    <declaration name="w" type="Window" line="618"/>
                    <declaration name="f" type="Frame" line="619"/>
                    <declaration name="d" type="Dialog" line="620"/>
                    <scope line="621"/>
                    <scope line="624"/>
                    <declaration name="cursor" type="int" line="627"/>
                    <scope line="628"/>
                    <scope line="631"/>
                </method>
                <method name="adjust" type="void" line="635">
                    <params>
                        <param name="bounds" type="Rectangle"/>
                        <param name="min" type="Dimension"/>
                        <param name="deltaX" type="int"/>
                        <param name="deltaY" type="int"/>
                        <param name="deltaWidth" type="int"/>
                        <param name="deltaHeight" type="int"/>
                    </params>
                    <scope line="640">
                        <scope line="641">
                            <declaration name="correction" type="int" line="642"/>
                            <scope line="643"/>
                        </scope>
                        <scope line="648">
                            <declaration name="correction" type="int" line="649"/>
                            <scope line="650"/>
                        </scope>
                    </scope>
                </method>
                <method name="mouseDragged" type="void" line="657">
                    <params>
                        <param name="ev" type="MouseEvent"/>
                    </params>
                    <declaration name="w" type="Window" line="658"/>
                    <declaration name="pt" type="Point" line="659"/>
                    <scope line="660">
                        <declaration name="eventLocationOnScreen" type="Point" line="661"/>
                    </scope>
                    <scope line="664">
                        <declaration name="r" type="Rectangle" line="665"/>
                        <declaration name="startBounds" type="Rectangle" line="666"/>
                        <declaration name="min" type="Dimension" line="667"/>
                        <scope line="696">
                            <scope line="698"/>
                        </scope>
                    </scope>
                </method>
                <method name="mouseEntered" type="void" line="705">
                    <params>
                        <param name="ev" type="MouseEvent"/>
                    </params>
                    <declaration name="w" type="Window" line="706"/>
                </method>
                <method name="mouseExited" type="void" line="710">
                    <params>
                        <param name="ev" type="MouseEvent"/>
                    </params>
                    <declaration name="w" type="Window" line="711"/>
                </method>
                <method name="mouseClicked" type="void" line="714">
                    <params>
                        <param name="ev" type="MouseEvent"/>
                    </params>
                    <declaration name="w" type="Window" line="715"/>
                    <declaration name="f" type="Frame" line="716"/>
                    <scope line="717"/>
                    <scope line="720"/>
                    <declaration name="convertedPoint" type="Point" line="723"/>
                    <declaration name="state" type="int" line="724"/>
                    <scope line="725">
                        <scope line="726">
                            <scope line="727">
                                <scope line="728"/>
                                <scope line="731"/>
                            </scope>
                        </scope>
                    </scope>
                </method>
                <javadoc line="739">
                    Returns the corner that contains the point &lt;code&gt;x&lt;/code&gt;,
                      &lt;code&gt;y&lt;/code&gt;, or -1 if the position doesn&apos;t match a corner.                    
                </javadoc>
                <method name="calculateCorner" type="int" line="743">
                    <params>
                        <param name="w" type="Window"/>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                    </params>
                    <declaration name="insets" type="Insets" line="744"/>
                    <declaration name="xPosition" type="int" line="745"/>
                    <declaration name="yPosition" type="int" line="746"/>
                    <scope line="747"/>
                </method>
                <javadoc line="752">
                    Returns the Cursor to render for the specified corner. This returns
                      0 if the corner doesn&apos;t map to a valid Cursor                    
                </javadoc>
                <method name="getCursor" type="int" line="756">
                    <params>
                        <param name="corner" type="int"/>
                    </params>
                    <scope line="757"/>
                </method>
                <javadoc line="762">
                    Returns an integer indicating the position of &lt;code&gt;spot&lt;/code&gt;
                      in &lt;code&gt;width&lt;/code&gt;. The return value will be:
                      0 if &lt; BORDER_DRAG_THICKNESS
                      1 if &lt; CORNER_DRAG_WIDTH
                      2 if &gt;= CORNER_DRAG_WIDTH &amp;&amp; &lt; width - BORDER_DRAG_THICKNESS
                      3 if &gt;= width - CORNER_DRAG_WIDTH
                      4 if &gt;= width - BORDER_DRAG_THICKNESS
                      5 otherwise                    
                </javadoc>
                <method name="calculatePosition" type="int" line="772">
                    <params>
                        <param name="spot" type="int"/>
                        <param name="width" type="int"/>
                    </params>
                    <scope line="773"/>
                    <scope line="776"/>
                    <scope line="779"/>
                    <scope line="782"/>
                </method>
            </class>
        </class>
    </source>