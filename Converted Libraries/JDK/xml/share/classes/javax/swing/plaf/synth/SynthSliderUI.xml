<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.plaf.synth">
        <import package="java.awt.event"/>
        <import package="java.awt.Graphics"/>
        <import package="java.awt.Dimension"/>
        <import package="java.awt.FontMetrics"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.Point"/>
        <import package="java.awt.Insets"/>
        <import package="java.beans"/>
        <import package="java.util.Dictionary"/>
        <import package="java.util.Enumeration"/>
        <import package="javax.swing"/>
        <import package="javax.swing.plaf"/>
        <import package="javax.swing.plaf.basic.BasicSliderUI"/>
        <import package="sun.swing.SwingUtilities2"/>
        <class name="SynthSliderUI" line="16">
            <extends class="BasicSliderUI"/>
            <implements interface="PropertyChangeListener"/>
            <implements interface="SynthUI"/>
            <javadoc line="16">
                Provides the Synth L&amp;F UI delegate for{@link JSlider}.                
                <author>
                    Joshua Outwater                    
                </author>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <declaration name="valueRect" type="Rectangle" line="22"/>
            <declaration name="paintValue" type="boolean" line="23"/>
            <declaration name="lastSize" type="Dimension" line="24"/>
            <javadoc line="24">
                When a JSlider is used as a renderer in a JTable, its layout is not
                  being recomputed even though the size is changing. Even though there
                  is a ComponentListener installed, it is not being notified. As such,
                  at times when being asked to paint the layout should first be redone.
                  At the end of the layout method we set this lastSize variable, which
                  represents the size of the slider the last time it was layed out.
                  In the paint method we then check to see that this is accurate, that
                  the slider has not changed sizes since being last layed out. If necessary
                  we recompute the layout.                
            </javadoc>
            <declaration name="trackHeight" type="int" line="36"/>
            <declaration name="trackBorder" type="int" line="37"/>
            <declaration name="thumbWidth" type="int" line="38"/>
            <declaration name="thumbHeight" type="int" line="39"/>
            <declaration name="style" type="SynthStyle" line="40"/>
            <declaration name="sliderTrackStyle" type="SynthStyle" line="41"/>
            <declaration name="sliderThumbStyle" type="SynthStyle" line="42"/>
            <declaration name="thumbActive" type="boolean" line="43"/>
            <javadoc line="43">
                Used to determine the color to paint the thumb.                
            </javadoc>
            <declaration name="thumbPressed" type="boolean" line="47"/>
            <javadoc line="48">
                Creates a new UI object for the given component.                
                <param>
                    c component to create UI object for                    
                </param>
                <return>
                    the UI object                    
                </return>
            </javadoc>
            <method name="createUI" type="ComponentUI" line="53">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <method name="SynthSliderUI" type="constructor" line="56">
                <params>
                    <param name="c" type="JSlider"/>
                </params>
            </method>
            <javadoc line="59">
                @inheritDoc                
            </javadoc>
            <method name="installDefaults" type="void" line="62">
                <params>
                    <param name="slider" type="JSlider"/>
                </params>
            </method>
            <javadoc line="65">
                Uninstalls default setting. This method is called when a{@code LookAndFeel} is uninstalled.                
            </javadoc>
            <method name="uninstallDefaults" type="void" line="68">
                <params>
                    <param name="slider" type="JSlider"/>
                </params>
                <declaration name="context" type="SynthContext" line="69"/>
            </method>
            <javadoc line="82">
                @inheritDoc                
            </javadoc>
            <method name="installListeners" type="void" line="85">
                <params>
                    <param name="slider" type="JSlider"/>
                </params>
            </method>
            <javadoc line="89">
                @inheritDoc                
            </javadoc>
            <method name="uninstallListeners" type="void" line="92">
                <params>
                    <param name="slider" type="JSlider"/>
                </params>
            </method>
            <method name="updateStyle" type="void" line="96">
                <params>
                    <param name="c" type="JSlider"/>
                </params>
                <declaration name="context" type="SynthContext" line="97"/>
                <declaration name="oldStyle" type="SynthStyle" line="98"/>
                <scope line="100">
                    <declaration name="scaleKey" type="String" line="103"/>
                    <scope line="104">
                        <scope line="105"/>
                        <scope line="109"/>
                        <scope line="113"/>
                    </scope>
                    <scope line="121"/>
                </scope>
            </method>
            <javadoc line="134">
                @inheritDoc                
            </javadoc>
            <method name="createTrackListener" type="TrackListener" line="137">
                <params>
                    <param name="s" type="JSlider"/>
                </params>
            </method>
            <method name="updateThumbState" type="void" line="140">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
            </method>
            <method name="updateThumbState" type="void" line="143">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="pressed" type="boolean"/>
                </params>
            </method>
            <method name="setThumbActive" type="void" line="147">
                <params>
                    <param name="active" type="boolean"/>
                </params>
                <scope line="148"/>
            </method>
            <method name="setThumbPressed" type="void" line="153">
                <params>
                    <param name="pressed" type="boolean"/>
                </params>
                <scope line="154"/>
            </method>
            <javadoc line="159">
                @inheritDoc                
            </javadoc>
            <method name="getBaseline" type="int" line="162">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <scope line="163"/>
                <scope line="166"/>
                <scope line="169">
                    <declaration name="trackInsets" type="Insets" line="170"/>
                    <declaration name="trackContext" type="SynthContext" line="171"/>
                    <scope line="174">
                        <declaration name="valueHeight" type="int" line="175"/>
                        <scope line="176">
                            <declaration name="context" type="SynthContext" line="177"/>
                        </scope>
                        <declaration name="tickHeight" type="int" line="181"/>
                        <scope line="182"/>
                        <declaration name="labelHeight" type="int" line="185"/>
                        <declaration name="contentHeight" type="int" line="186"/>
                        <declaration name="centerY" type="int" line="187"/>
                        <declaration name="label" type="JComponent" line="191"/>
                        <declaration name="pref" type="Dimension" line="192"/>
                    </scope>
                    <scope line="195">
                        <declaration name="value" type="Integer" line="196"/>
                        <scope line="197">
                            <declaration name="valueY" type="int" line="198"/>
                            <declaration name="valueHeight" type="int" line="199"/>
                            <scope line="200">
                                <declaration name="context" type="SynthContext" line="201"/>
                            </scope>
                            <declaration name="contentHeight" type="int" line="205"/>
                            <declaration name="trackY" type="int" line="206"/>
                            <declaration name="trackHeight" type="int" line="207"/>
                            <declaration name="yPosition" type="int" line="208"/>
                            <declaration name="label" type="JComponent" line="209"/>
                            <declaration name="pref" type="Dimension" line="210"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="217">
                @inheritDoc                
            </javadoc>
            <method name="getPreferredSize" type="Dimension" line="220">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <declaration name="d" type="Dimension" line="222"/>
                <scope line="223"/>
                <scope line="226"/>
                <declaration name="i" type="Insets" line="229"/>
            </method>
            <javadoc line="234">
                @inheritDoc                
            </javadoc>
            <method name="getMinimumSize" type="Dimension" line="237">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <declaration name="d" type="Dimension" line="239"/>
                <scope line="240"/>
                <scope line="243"/>
            </method>
            <javadoc line="248">
                @inheritDoc                
            </javadoc>
            <method name="calculateGeometry" type="void" line="251"/>
            <javadoc line="256">
                Lays out the slider.                
            </javadoc>
            <method name="layout" type="void" line="259">
                <declaration name="context" type="SynthContext" line="260"/>
                <declaration name="synthGraphics" type="SynthGraphicsUtils" line="261"/>
                <declaration name="trackInsets" type="Insets" line="262"/>
                <declaration name="trackContext" type="SynthContext" line="263"/>
                <scope line="266">
                    <scope line="268"/>
                    <scope line="273"/>
                    <scope line="277"/>
                    <declaration name="pad" type="int" line="282"/>
                    <scope line="283">
                        <declaration name="dictionary" type="Dictionary" line="286"/>
                        <scope line="287">
                            <declaration name="minValue" type="int" line="288"/>
                            <declaration name="maxValue" type="int" line="289"/>
                            <declaration name="firstLblIdx" type="int" line="290"/>
                            <declaration name="lastLblIdx" type="int" line="291"/>
                            <scope line="292">
                                <declaration name="keyInt" type="int" line="293"/>
                                <scope line="294"/>
                                <scope line="297"/>
                            </scope>
                        </scope>
                    </scope>
                    <declaration name="centerY" type="int" line="307"/>
                </scope>
                <scope line="317">
                    <scope line="320"/>
                    <scope line="324"/>
                    <scope line="329"/>
                    <declaration name="fm" type="FontMetrics" line="332"/>
                    <declaration name="l" type="int" line="334"/>
                    <declaration name="w1" type="int" line="335"/>
                    <declaration name="w2" type="int" line="336"/>
                    <declaration name="startX" type="int" line="341"/>
                    <scope line="342">
                        <scope line="343"/>
                    </scope>
                    <scope line="351">
                        <scope line="352"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="364">
                Calculates the pad for the label at the specified index.                
                <param>
                    i index of the label to calculate pad for.                    
                </param>
                <return>
                    padding required to keep label visible.                    
                </return>
            </javadoc>
            <method name="getPadForLabel" type="int" line="369">
                <params>
                    <param name="i" type="int"/>
                </params>
                <declaration name="pad" type="int" line="370"/>
                <declaration name="c" type="JComponent" line="371"/>
                <scope line="372">
                    <declaration name="centerX" type="int" line="373"/>
                    <declaration name="cHalfWidth" type="int" line="374"/>
                    <scope line="375"/>
                    <scope line="378"/>
                </scope>
            </method>
            <javadoc line="384">
                @inheritDoc                
            </javadoc>
            <method name="calculateThumbLocation" type="void" line="387">
                <scope line="389"/>
                <scope line="392"/>
                <declaration name="mousePosition" type="Point" line="395"/>
                <scope line="396"/>
            </method>
            <javadoc line="400">
                @inheritDoc                
            </javadoc>
            <method name="setThumbLocation" type="void" line="403">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
            </method>
            <javadoc line="408">
                @inheritDoc                
            </javadoc>
            <method name="xPositionForValue" type="int" line="411">
                <params>
                    <param name="value" type="int"/>
                </params>
                <declaration name="min" type="int" line="412"/>
                <declaration name="max" type="int" line="413"/>
                <declaration name="trackLeft" type="int" line="414"/>
                <declaration name="trackRight" type="int" line="415"/>
                <declaration name="trackLength" type="int" line="416"/>
                <declaration name="valueRange" type="double" line="417"/>
                <declaration name="pixelsPerValue" type="double" line="418"/>
                <declaration name="xPosition" type="int" line="419"/>
                <scope line="420"/>
                <scope line="424"/>
            </method>
            <javadoc line="432">
                @inheritDoc                
            </javadoc>
            <method name="yPositionForValue" type="int" line="435">
                <params>
                    <param name="value" type="int"/>
                    <param name="trackY" type="int"/>
                    <param name="trackHeight" type="int"/>
                </params>
                <declaration name="min" type="int" line="436"/>
                <declaration name="max" type="int" line="437"/>
                <declaration name="trackTop" type="int" line="438"/>
                <declaration name="trackBottom" type="int" line="439"/>
                <declaration name="trackLength" type="int" line="440"/>
                <declaration name="valueRange" type="double" line="441"/>
                <declaration name="pixelsPerValue" type="double" line="442"/>
                <declaration name="yPosition" type="int" line="443"/>
                <scope line="444"/>
                <scope line="448"/>
            </method>
            <javadoc line="456">
                @inheritDoc                
            </javadoc>
            <method name="valueForYPosition" type="int" line="459">
                <params>
                    <param name="yPos" type="int"/>
                </params>
                <declaration name="value" type="int" line="460"/>
                <declaration name="minValue" type="int" line="461"/>
                <declaration name="maxValue" type="int" line="462"/>
                <declaration name="trackTop" type="int" line="463"/>
                <declaration name="trackBottom" type="int" line="464"/>
                <declaration name="trackLength" type="int" line="465"/>
                <scope line="466"/>
                <scope line="469"/>
                <scope line="472">
                    <declaration name="distanceFromTrackTop" type="int" line="473"/>
                    <declaration name="valueRange" type="double" line="474"/>
                    <declaration name="valuePerPixel" type="double" line="475"/>
                    <declaration name="valueFromTrackTop" type="int" line="476"/>
                </scope>
            </method>
            <javadoc line="481">
                @inheritDoc                
            </javadoc>
            <method name="valueForXPosition" type="int" line="484">
                <params>
                    <param name="xPos" type="int"/>
                </params>
                <declaration name="value" type="int" line="485"/>
                <declaration name="minValue" type="int" line="486"/>
                <declaration name="maxValue" type="int" line="487"/>
                <declaration name="trackLeft" type="int" line="488"/>
                <declaration name="trackRight" type="int" line="489"/>
                <declaration name="trackLength" type="int" line="490"/>
                <scope line="491"/>
                <scope line="494"/>
                <scope line="497">
                    <declaration name="distanceFromTrackLeft" type="int" line="498"/>
                    <declaration name="valueRange" type="double" line="499"/>
                    <declaration name="valuePerPixel" type="double" line="500"/>
                    <declaration name="valueFromTrackLeft" type="int" line="501"/>
                </scope>
            </method>
            <javadoc line="506">
                @inheritDoc                
            </javadoc>
            <method name="getThumbSize" type="Dimension" line="509">
                <declaration name="size" type="Dimension" line="510"/>
                <scope line="511"/>
                <scope line="515"/>
            </method>
            <javadoc line="521">
                @inheritDoc                
            </javadoc>
            <method name="recalculateIfInsetsChanged" type="void" line="524">
                <declaration name="context" type="SynthContext" line="525"/>
                <declaration name="newInsets" type="Insets" line="526"/>
                <declaration name="compInsets" type="Insets" line="527"/>
                <scope line="532"/>
            </method>
            <javadoc line="538">
                @inheritDoc                
            </javadoc>
            <method name="getContext" type="SynthContext" line="541">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <method name="getContext" type="SynthContext" line="544">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="state" type="int"/>
                </params>
            </method>
            <method name="getContext" type="SynthContext" line="547">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="subregion" type="Region"/>
                </params>
            </method>
            <method name="getContext" type="SynthContext" line="550">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="subregion" type="Region"/>
                    <param name="state" type="int"/>
                </params>
                <declaration name="style" type="SynthStyle" line="551"/>
                <declaration name="klass" type="Class" line="552"/>
                <scope line="553"/>
                <scope line="556"/>
            </method>
            <method name="getComponentState" type="int" line="561">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="region" type="Region"/>
                </params>
                <scope line="562">
                    <declaration name="state" type="int" line="563"/>
                </scope>
            </method>
            <javadoc line="569">
                Notifies this UI delegate to repaint the specified component.
                  This method paints the component background, then calls
                  the {@link #paint(SynthContext,Graphics)} method.
                  &lt;p&gt;In general, this method does not need to be overridden by subclasses.
                  All Look and Feel rendering code should reside in the {@code paint} method.                
                <param>
                    g the {@code Graphics} object used for painting                    
                </param>
                <param>
                    c the component being painted                    
                </param>
                <see>
                    #paint(SynthContext,Graphics)                    
                </see>
            </javadoc>
            <method name="update" type="void" line="579">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="c" type="JComponent"/>
                </params>
                <declaration name="context" type="SynthContext" line="580"/>
            </method>
            <javadoc line="586">
                Paints the specified component according to the Look and Feel.
                  &lt;p&gt;This method is not used by Synth Look and Feel.
                  Painting is handled by the {@link #paint(SynthContext,Graphics)} method.                
                <param>
                    g the {@code Graphics} object used for painting                    
                </param>
                <param>
                    c the component being painted                    
                </param>
                <see>
                    #paint(SynthContext,Graphics)                    
                </see>
            </javadoc>
            <method name="paint" type="void" line="594">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="c" type="JComponent"/>
                </params>
                <declaration name="context" type="SynthContext" line="595"/>
            </method>
            <javadoc line="599">
                Paints the specified component.                
                <param>
                    context context for the component being painted                    
                </param>
                <param>
                    g the {@code Graphics} object used for painting                    
                </param>
                <see>
                    #update(Graphics,JComponent)                    
                </see>
            </javadoc>
            <method name="paint" type="void" line="605">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="g" type="Graphics"/>
                </params>
                <declaration name="clip" type="Rectangle" line="608"/>
                <scope line="609"/>
                <scope line="612">
                    <declaration name="fm" type="FontMetrics" line="613"/>
                    <declaration name="labelWidth" type="int" line="614"/>
                    <scope line="616">
                        <scope line="617"/>
                    </scope>
                </scope>
                <scope line="625">
                    <declaration name="subcontext" type="SynthContext" line="626"/>
                </scope>
                <scope line="630">
                    <declaration name="subcontext" type="SynthContext" line="631"/>
                </scope>
                <scope line="635"/>
                <scope line="638"/>
            </method>
            <javadoc line="642">
                @inheritDoc                
            </javadoc>
            <method name="paintBorder" type="void" line="645">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="g" type="Graphics"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
            </method>
            <javadoc line="648">
                Paints the slider thumb.                
                <param>
                    context context for the component being painted                    
                </param>
                <param>
                    g {@code Graphics} object used for painting                    
                </param>
                <param>
                    thumbBounds bounding box for the thumb                    
                </param>
            </javadoc>
            <method name="paintThumb" type="void" line="654">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="g" type="Graphics"/>
                    <param name="thumbBounds" type="Rectangle"/>
                </params>
                <declaration name="orientation" type="int" line="655"/>
            </method>
            <javadoc line="660">
                Paints the slider track.                
                <param>
                    context context for the component being painted                    
                </param>
                <param>
                    g {@code Graphics} object used for painting                    
                </param>
                <param>
                    trackBounds bounding box for the track                    
                </param>
            </javadoc>
            <method name="paintTrack" type="void" line="666">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="g" type="Graphics"/>
                    <param name="trackBounds" type="Rectangle"/>
                </params>
                <declaration name="orientation" type="int" line="667"/>
            </method>
            <javadoc line="672">
                @inheritDoc                
            </javadoc>
            <method name="propertyChange" type="void" line="675">
                <params>
                    <param name="e" type="PropertyChangeEvent"/>
                </params>
                <scope line="676"/>
            </method>
            <class name="SynthTrackListener" line="680">
                <extends class="TrackListener"/>
                <javadoc line="680">
                    Track mouse movements.                    
                </javadoc>
                <method name="mouseExited" type="void" line="684">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
                <method name="mousePressed" type="void" line="687">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
                <method name="mouseReleased" type="void" line="691">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
                <method name="mouseDragged" type="void" line="695">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                    <declaration name="thumbMiddle" type="int" line="696"/>
                    <scope line="697"/>
                    <scope line="702"/>
                    <declaration name="halfThumbHeight" type="int" line="708"/>
                    <declaration name="thumbTop" type="int" line="709"/>
                    <declaration name="trackTop" type="int" line="710"/>
                    <declaration name="trackBottom" type="int" line="711"/>
                    <declaration name="vMax" type="int" line="712"/>
                    <scope line="713"/>
                    <scope line="717"/>
                    <declaration name="halfThumbWidth" type="int" line="727"/>
                    <declaration name="thumbLeft" type="int" line="728"/>
                    <declaration name="trackLeft" type="int" line="729"/>
                    <declaration name="trackRight" type="int" line="730"/>
                    <declaration name="hMax" type="int" line="731"/>
                    <scope line="732"/>
                    <scope line="735"/>
                    <scope line="747"/>
                </method>
                <method name="mouseMoved" type="void" line="751">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
            </class>
        </class>
    </source>