<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.plaf.multi">
        <import package="java.util.Vector"/>
        <import package="javax.swing.plaf.SpinnerUI"/>
        <import package="javax.swing.plaf.ComponentUI"/>
        <import package="javax.swing.JComponent"/>
        <import package="java.awt.Graphics"/>
        <import package="java.awt.Dimension"/>
        <import package="javax.accessibility.Accessible"/>
        <class name="MultiSpinnerUI" line="35">
            <extends class="SpinnerUI"/>
            <comment line="54">
                //////////////////                
            </comment>
            <comment line="55">
                Common UI methods                
            </comment>
            <comment line="56">
                //////////////////                
            </comment>
            <comment line="67">
                //////////////////                
            </comment>
            <comment line="68">
                SpinnerUI methods                
            </comment>
            <comment line="69">
                //////////////////                
            </comment>
            <comment line="71">
                //////////////////                
            </comment>
            <comment line="72">
                ComponentUI methods                
            </comment>
            <comment line="73">
                //////////////////                
            </comment>
            <javadoc line="35">
                A multiplexing UI used to combine &lt;code&gt;SpinnerUI&lt;/code&gt;s.
                  &lt;p&gt;This file was automatically generated by AutoMulti.                
                <author>
                    Otto Multey                    
                </author>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="uis" type="Vector" line="45"/>
            <javadoc line="45">
                The vector containing the real UIs.  This is populated
                  in the call to &lt;code&gt;createUI&lt;/code&gt;, and can be obtained by calling
                  the &lt;code&gt;getUIs&lt;/code&gt; method.  The first element is guaranteed to be the real UI
                  obtained from the default look and feel.                
            </javadoc>
            <javadoc line="57">
                Returns the list of UIs associated with this multiplexing UI.  This
                  allows processing of the UIs by an application aware of multiplexing
                  UIs on components.                
            </javadoc>
            <method name="getUIs" type="ComponentUI[]" line="62"/>
            <javadoc line="74">
                Invokes the &lt;code&gt;contains&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default <code>LookAndFeel</code>                    
                </return>
            </javadoc>
            <method name="contains" type="boolean" line="80">
                <params>
                    <param name="a" type="JComponent"/>
                    <param name="b" type="int"/>
                    <param name="c" type="int"/>
                </params>
                <declaration name="returnValue" type="boolean" line="81"/>
                <scope line="83"/>
            </method>
            <javadoc line="89">
                Invokes the &lt;code&gt;update&lt;/code&gt; method on each UI handled by this object.                
            </javadoc>
            <method name="update" type="void" line="92">
                <params>
                    <param name="a" type="Graphics"/>
                    <param name="b" type="JComponent"/>
                </params>
                <scope line="93"/>
            </method>
            <javadoc line="98">
                Returns a multiplexing UI instance if any of the auxiliary
                  &lt;code&gt;LookAndFeel&lt;/code&gt;s supports this UI.  Otherwise, just returns the
                  UI object obtained from the default &lt;code&gt;LookAndFeel&lt;/code&gt;.                
            </javadoc>
            <method name="createUI" type="ComponentUI" line="103">
                <params>
                    <param name="a" type="JComponent"/>
                </params>
                <declaration name="mui" type="ComponentUI" line="104"/>
            </method>
            <javadoc line="110">
                Invokes the &lt;code&gt;installUI&lt;/code&gt; method on each UI handled by this object.                
            </javadoc>
            <method name="installUI" type="void" line="113">
                <params>
                    <param name="a" type="JComponent"/>
                </params>
                <scope line="114"/>
            </method>
            <javadoc line="119">
                Invokes the &lt;code&gt;uninstallUI&lt;/code&gt; method on each UI handled by this object.                
            </javadoc>
            <method name="uninstallUI" type="void" line="122">
                <params>
                    <param name="a" type="JComponent"/>
                </params>
                <scope line="123"/>
            </method>
            <javadoc line="128">
                Invokes the &lt;code&gt;paint&lt;/code&gt; method on each UI handled by this object.                
            </javadoc>
            <method name="paint" type="void" line="131">
                <params>
                    <param name="a" type="Graphics"/>
                    <param name="b" type="JComponent"/>
                </params>
                <scope line="132"/>
            </method>
            <javadoc line="137">
                Invokes the &lt;code&gt;getPreferredSize&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default <code>LookAndFeel</code>                    
                </return>
            </javadoc>
            <method name="getPreferredSize" type="Dimension" line="143">
                <params>
                    <param name="a" type="JComponent"/>
                </params>
                <declaration name="returnValue" type="Dimension" line="144"/>
                <scope line="146"/>
            </method>
            <javadoc line="152">
                Invokes the &lt;code&gt;getMinimumSize&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default <code>LookAndFeel</code>                    
                </return>
            </javadoc>
            <method name="getMinimumSize" type="Dimension" line="158">
                <params>
                    <param name="a" type="JComponent"/>
                </params>
                <declaration name="returnValue" type="Dimension" line="159"/>
                <scope line="161"/>
            </method>
            <javadoc line="167">
                Invokes the &lt;code&gt;getMaximumSize&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default <code>LookAndFeel</code>                    
                </return>
            </javadoc>
            <method name="getMaximumSize" type="Dimension" line="173">
                <params>
                    <param name="a" type="JComponent"/>
                </params>
                <declaration name="returnValue" type="Dimension" line="174"/>
                <scope line="176"/>
            </method>
            <javadoc line="182">
                Invokes the &lt;code&gt;getAccessibleChildrenCount&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default <code>LookAndFeel</code>                    
                </return>
            </javadoc>
            <method name="getAccessibleChildrenCount" type="int" line="188">
                <params>
                    <param name="a" type="JComponent"/>
                </params>
                <declaration name="returnValue" type="int" line="189"/>
                <scope line="191"/>
            </method>
            <javadoc line="197">
                Invokes the &lt;code&gt;getAccessibleChild&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default <code>LookAndFeel</code>                    
                </return>
            </javadoc>
            <method name="getAccessibleChild" type="Accessible" line="203">
                <params>
                    <param name="a" type="JComponent"/>
                    <param name="b" type="int"/>
                </params>
                <declaration name="returnValue" type="Accessible" line="204"/>
                <scope line="206"/>
            </method>
        </class>
    </source>