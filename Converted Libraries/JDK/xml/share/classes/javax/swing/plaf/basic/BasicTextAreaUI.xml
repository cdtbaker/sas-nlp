<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.plaf.basic">
        <import package="java.beans"/>
        <import package="java.awt"/>
        <import package="java.awt.event.KeyEvent"/>
        <import package="java.awt.event.InputEvent"/>
        <import package="javax.swing"/>
        <import package="javax.swing.event.DocumentEvent"/>
        <import package="javax.swing.text"/>
        <import package="javax.swing.plaf"/>
        <class name="BasicTextAreaUI" line="36">
            <extends class="BasicTextUI"/>
            <javadoc line="36">
                Provides the look and feel for a plain text editor.  In this
                  implementation the default UI is extended to act as a simple
                  view factory.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <author>
                    Timothy Prinzing                    
                </author>
            </javadoc>
            <javadoc line="54">
                Creates a UI for a JTextArea.                
                <param>
                    ta a text area                    
                </param>
                <return>
                    the UI                    
                </return>
            </javadoc>
            <method name="createUI" type="ComponentUI" line="60">
                <params>
                    <param name="ta" type="JComponent"/>
                </params>
            </method>
            <javadoc line="64">
                Constructs a new BasicTextAreaUI object.                
            </javadoc>
            <method name="BasicTextAreaUI" type="constructor" line="67"/>
            <javadoc line="71">
                Fetches the name used as a key to look up properties through the
                  UIManager.  This is used as a prefix to all the standard
                  text properties.                
                <return>
                    the name (&quot;TextArea&quot;)                    
                </return>
            </javadoc>
            <method name="getPropertyPrefix" type="String" line="78"/>
            <method name="installDefaults" type="void" line="82">
                <comment line="85">
                    the fix for 4785160 is undone                    
                </comment>
            </method>
            <javadoc line="87">
                This method gets called when a bound property is changed
                  on the associated JTextComponent.  This is a hook
                  which UI implementations may change to reflect how the
                  UI displays bound properties of JTextComponent subclasses.
                  This is implemented to rebuild the View when the
                  &lt;em&gt;WrapLine&lt;/em&gt; or the &lt;em&gt;WrapStyleWord&lt;/em&gt; property changes.                
                <param>
                    evt the property change event                    
                </param>
            </javadoc>
            <method name="propertyChange" type="void" line="97">
                <params>
                    <param name="evt" type="PropertyChangeEvent"/>
                </params>
                <comment line="103">
                    rebuild the view                    
                </comment>
                <scope line="101"/>
                <scope line="104"/>
            </method>
            <javadoc line="110">
                The method is overridden to take into account caret width.                
                <param>
                    c the editor component                    
                </param>
                <return>
                    the preferred size                    
                </return>
                <throws>
                    IllegalArgumentException if invalid value is passed                    
                </throws>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getPreferredSize" type="Dimension" line="119">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <comment line="122">
                    the fix for 4785160 is undone                    
                </comment>
            </method>
            <javadoc line="124">
                The method is overridden to take into account caret width.                
                <param>
                    c the editor component                    
                </param>
                <return>
                    the minimum size                    
                </return>
                <throws>
                    IllegalArgumentException if invalid value is passed                    
                </throws>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getMinimumSize" type="Dimension" line="133">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <comment line="136">
                    the fix for 4785160 is undone                    
                </comment>
            </method>
            <javadoc line="138">
                Creates the view for an element.  Returns a WrappedPlainView or
                  PlainView.                
                <param>
                    elem the element                    
                </param>
                <return>
                    the view                    
                </return>
            </javadoc>
            <method name="create" type="View" line="145">
                <params>
                    <param name="elem" type="Element"/>
                </params>
                <comment line="148">
                                        
                </comment>
                <comment line="150">
                    build a view that support bidi                    
                </comment>
                <declaration name="doc" type="Document" line="146"/>
                <declaration name="i18nFlag" type="Object" line="147"/>
                <scope line="148"/>
                <scope line="151">
                    <declaration name="c" type="JTextComponent" line="152"/>
                    <scope line="153">
                        <declaration name="area" type="JTextArea" line="154"/>
                        <declaration name="v" type="View" line="155"/>
                        <scope line="156"/>
                        <scope line="158"/>
                    </scope>
                </scope>
            </method>
            <method name="createI18N" type="View" line="167">
                <params>
                    <param name="elem" type="Element"/>
                </params>
                <declaration name="kind" type="String" line="168"/>
                <scope line="169">
                    <scope line="170"/>
                    <scope line="172"/>
                </scope>
            </method>
            <javadoc line="179">
                Returns the baseline.                
                <throws>
                    NullPointerException {@inheritDoc}                    
                </throws>
                <throws>
                    IllegalArgumentException {@inheritDoc}                    
                </throws>
                <see>
                    javax.swing.JComponent#getBaseline(int,int)                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getBaseline" type="int" line="187">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <declaration name="i18nFlag" type="Object" line="189"/>
                <declaration name="insets" type="Insets" line="191"/>
                <scope line="192">
                    <declaration name="rootView" type="View" line="193"/>
                    <scope line="194">
                        <declaration name="baseline" type="int" line="196"/>
                        <declaration name="fieldBaseline" type="int" line="197"/>
                        <scope line="200"/>
                    </scope>
                </scope>
                <declaration name="fm" type="FontMetrics" line="207"/>
            </method>
            <javadoc line="211">
                Returns an enum indicating how the baseline of the component
                  changes as the size changes.                
                <throws>
                    NullPointerException {@inheritDoc}                    
                </throws>
                <see>
                    javax.swing.JComponent#getBaseline(int,int)                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getBaselineResizeBehavior" type="Component.BaselineResizeBehavior" line="220">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <class name="PlainParagraph" line="226">
                <extends class="ParagraphView"/>
                <javadoc line="226">
                    Paragraph for representing plain-text lines that support
                      bidirectional text.                    
                </javadoc>
                <method name="PlainParagraph" type="constructor" line="232">
                    <params>
                        <param name="elem" type="Element"/>
                    </params>
                </method>
                <method name="setParent" type="void" line="238">
                    <params>
                        <param name="parent" type="View"/>
                    </params>
                    <scope line="240"/>
                </method>
                <method name="setPropertiesFromAttributes" type="void" line="245">
                    <declaration name="c" type="Component" line="246"/>
                    <scope line="247"/>
                    <scope line="249"/>
                </method>
                <javadoc line="254">
                    Fetch the constraining span to flow against for
                      the given child index.                    
                </javadoc>
                <method name="getFlowSpan" type="int" line="258">
                    <params>
                        <param name="index" type="int"/>
                    </params>
                    <comment line="264">
                        no limit if unwrapped                        
                    </comment>
                    <declaration name="c" type="Component" line="259"/>
                    <scope line="260">
                        <declaration name="area" type="JTextArea" line="261"/>
                        <scope line="262"/>
                    </scope>
                </method>
                <method name="calculateMinorAxisRequirements" type="SizeRequirements" line="271">
                    <params>
                        <param name="axis" type="int"/>
                        <param name="r" type="SizeRequirements"/>
                    </params>
                    <comment line="278">
                        min is pref if unwrapped                        
                    </comment>
                    <comment line="284">
                        We have been initially set to MAX_VALUE, but we
                         don&apos;t want this as our preferred.                        
                    </comment>
                    <declaration name="req" type="SizeRequirements" line="272"/>
                    <declaration name="c" type="Component" line="273"/>
                    <scope line="274">
                        <declaration name="area" type="JTextArea" line="275"/>
                        <scope line="276"/>
                        <scope line="279">
                            <scope line="282"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="292">
                    Sets the size of the view.  If the size has changed, layout
                      is redone.  The size is the full size of the view including
                      the inset areas.                    
                    <param>
                        width the width &gt;= 0                        
                    </param>
                    <param>
                        height the height &gt;= 0                        
                    </param>
                </javadoc>
                <method name="setSize" type="void" line="300">
                    <params>
                        <param name="width" type="float"/>
                        <param name="height" type="float"/>
                    </params>
                    <scope line="301"/>
                </method>
                <class name="LogicalView" line="307">
                    <extends class="CompositeView"/>
                    <comment line="372">
                        The following methods don&apos;t do anything useful, they
                         simply keep the class from being abstract.                        
                    </comment>
                    <javadoc line="307">
                        This class can be used to represent a logical view for
                          a flow.  It keeps the children updated to reflect the state
                          of the model, gives the logical child views access to the
                          view hierarchy, and calculates a preferred span.  It doesn&apos;t
                          do any rendering, layout, or model/view translation.                        
                    </javadoc>
                    <method name="LogicalView" type="constructor" line="316">
                        <params>
                            <param name="elem" type="Element"/>
                        </params>
                    </method>
                    <method name="getViewIndexAtPosition" type="int" line="320">
                        <params>
                            <param name="pos" type="int"/>
                        </params>
                        <declaration name="elem" type="Element" line="321"/>
                        <scope line="322"/>
                    </method>
                    <method name="updateChildren" type="boolean" line="329">
                        <params>
                            <param name="ec" type="DocumentEvent.ElementChange"/>
                            <param name="e" type="DocumentEvent"/>
                            <param name="f" type="ViewFactory"/>
                        </params>
                    </method>
                    <method name="loadChildren" type="void" line="333">
                        <params>
                            <param name="f" type="ViewFactory"/>
                        </params>
                        <declaration name="elem" type="Element" line="334"/>
                        <scope line="335"/>
                        <scope line="337">
                            <declaration name="v" type="View" line="338"/>
                        </scope>
                    </method>
                    <method name="getPreferredSpan" type="float" line="343">
                        <params>
                            <param name="axis" type="int"/>
                        </params>
                        <declaration name="v" type="View" line="347"/>
                    </method>
                    <javadoc line="351">
                        Forward the DocumentEvent to the given child view.  This
                          is implemented to reparent the child to the logical view
                          (the children may have been parented by a row in the flow
                          if they fit without breaking) and then execute the superclass
                          behavior.                        
                        <param>
                            v the child view to forward the event to.                            
                        </param>
                        <param>
                            e the change information from the associated document                            
                        </param>
                        <param>
                            a the current allocation of the view                            
                        </param>
                        <param>
                            f the factory to use to rebuild if the view has children                            
                        </param>
                        <see>
                            #forwardUpdate                            
                        </see>
                        <since>
                            1.3                            
                        </since>
                    </javadoc>
                    <method name="forwardUpdateToView" type="void" line="366">
                        <params>
                            <param name="v" type="View"/>
                            <param name="e" type="DocumentEvent"/>
                            <param name="a" type="Shape"/>
                            <param name="f" type="ViewFactory"/>
                        </params>
                    </method>
                    <method name="paint" type="void" line="374">
                        <params>
                            <param name="g" type="Graphics"/>
                            <param name="allocation" type="Shape"/>
                        </params>
                    </method>
                    <method name="isBefore" type="boolean" line="377">
                        <params>
                            <param name="x" type="int"/>
                            <param name="y" type="int"/>
                            <param name="alloc" type="Rectangle"/>
                        </params>
                    </method>
                    <method name="isAfter" type="boolean" line="381">
                        <params>
                            <param name="x" type="int"/>
                            <param name="y" type="int"/>
                            <param name="alloc" type="Rectangle"/>
                        </params>
                    </method>
                    <method name="getViewAtPoint" type="View" line="385">
                        <params>
                            <param name="x" type="int"/>
                            <param name="y" type="int"/>
                            <param name="alloc" type="Rectangle"/>
                        </params>
                    </method>
                    <method name="childAllocation" type="void" line="389">
                        <params>
                            <param name="index" type="int"/>
                            <param name="a" type="Rectangle"/>
                        </params>
                    </method>
                </class>
            </class>
        </class>
    </source>