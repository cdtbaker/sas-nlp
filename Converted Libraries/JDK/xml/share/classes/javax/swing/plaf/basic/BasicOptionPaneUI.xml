<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.plaf.basic">
        <import package="sun.swing.DefaultLookup"/>
        <import package="sun.swing.UIAction"/>
        <import package="javax.swing.border.Border"/>
        <import package="javax.swing.border.EmptyBorder"/>
        <import package="javax.swing"/>
        <import package="javax.swing.event"/>
        <import package="javax.swing.plaf.ActionMapUIResource"/>
        <import package="javax.swing.plaf.ComponentUI"/>
        <import package="javax.swing.plaf.OptionPaneUI"/>
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="java.beans.PropertyChangeEvent"/>
        <import package="java.beans.PropertyChangeListener"/>
        <import package="java.util.Locale"/>
        <import package="java.security.AccessController"/>
        <import package="sun.security.action.GetPropertyAction"/>
        <class name="BasicOptionPaneUI" line="18">
            <extends class="OptionPaneUI"/>
            <javadoc line="18">
                Provides the basic look and feel for a &lt;code&gt;JOptionPane&lt;/code&gt;.
                  &lt;code&gt;BasicMessagePaneUI&lt;/code&gt; provides a means to place an icon,
                  message and buttons into a &lt;code&gt;Container&lt;/code&gt;.
                  Generally, the layout will look like:&lt;p&gt;
                  &lt;pre&gt;
                  ------------------
                  | i | message    |
                  | c | message    |
                  | o | message    |
                  | n | message    |
                  ------------------
                  |     buttons    |
                  |________________|
                  &lt;/pre&gt;
                  icon is an instance of &lt;code&gt;Icon&lt;/code&gt; that is wrapped inside a
                  &lt;code&gt;JLabel&lt;/code&gt;.  The message is an opaque object and is tested
                  for the following: if the message is a &lt;code&gt;Component&lt;/code&gt; it is
                  added to the &lt;code&gt;Container&lt;/code&gt;, if it is an &lt;code&gt;Icon&lt;/code&gt;
                  it is wrapped inside a &lt;code&gt;JLabel&lt;/code&gt; and added to the
                  &lt;code&gt;Container&lt;/code&gt; otherwise it is wrapped inside a &lt;code&gt;JLabel&lt;/code&gt;.
                  &lt;p&gt;
                  The above layout is used when the option pane&apos;s
                  &lt;code&gt;ComponentOrientation&lt;/code&gt; property is horizontal, left-to-right.
                  The layout will be adjusted appropriately for other orientations.
                  &lt;p&gt;
                  The &lt;code&gt;Container&lt;/code&gt;, message, icon, and buttons are all
                  determined from abstract methods.                
                <author>
                    James Gosling                    
                </author>
                <author>
                    Scott Violet                    
                </author>
                <author>
                    Amy Fowler                    
                </author>
            </javadoc>
            <declaration name="MinimumWidth" type="int" line="51"/>
            <declaration name="MinimumHeight" type="int" line="52"/>
            <declaration name="newline" type="String" line="53"/>
            <declaration name="optionPane" type="JOptionPane" line="54"/>
            <javadoc line="54">
                &lt;code&gt;JOptionPane&lt;/code&gt; that the receiver is providing the
                  look and feel for.                
            </javadoc>
            <declaration name="minimumSize" type="Dimension" line="59"/>
            <declaration name="inputComponent" type="JComponent" line="60"/>
            <javadoc line="60">
                JComponent provide for input if optionPane.getWantsInput() returns
                  true.                
            </javadoc>
            <declaration name="initialFocusComponent" type="Component" line="65"/>
            <javadoc line="65">
                Component to receive focus when messaged with selectInitialValue.                
            </javadoc>
            <declaration name="hasCustomComponents" type="boolean" line="69"/>
            <javadoc line="69">
                This is set to true in validateComponent if a Component is contained
                  in either the message or the buttons.                
            </javadoc>
            <declaration name="propertyChangeListener" type="PropertyChangeListener" line="74"/>
            <declaration name="handler" type="Handler" line="75"/>
            <scope line="76">
                <scope line="78"/>
            </scope>
            <method name="loadActionMap" type="void" line="82">
                <params>
                    <param name="map" type="LazyActionMap"/>
                </params>
            </method>
            <javadoc line="86">
                Creates a new BasicOptionPaneUI instance.                
            </javadoc>
            <method name="createUI" type="ComponentUI" line="89">
                <params>
                    <param name="x" type="JComponent"/>
                </params>
            </method>
            <javadoc line="92">
                Installs the receiver as the L&amp;F for the passed in
                  &lt;code&gt;JOptionPane&lt;/code&gt;.                
            </javadoc>
            <method name="installUI" type="void" line="96">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <javadoc line="104">
                Removes the receiver from the L&amp;F controller of the passed in split
                  pane.                
            </javadoc>
            <method name="uninstallUI" type="void" line="108">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <method name="installDefaults" type="void" line="116"/>
            <method name="uninstallDefaults" type="void" line="122"/>
            <method name="installComponents" type="void" line="125">
                <declaration name="separator" type="Container" line="127"/>
                <scope line="128"/>
            </method>
            <method name="uninstallComponents" type="void" line="134"/>
            <method name="createLayoutManager" type="LayoutManager" line="140"/>
            <method name="installListeners" type="void" line="143">
                <scope line="144"/>
            </method>
            <method name="uninstallListeners" type="void" line="148">
                <scope line="149"/>
            </method>
            <method name="createPropertyChangeListener" type="PropertyChangeListener" line="155"/>
            <method name="getHandler" type="Handler" line="158">
                <scope line="159"/>
            </method>
            <method name="installKeyboardActions" type="void" line="164">
                <declaration name="map" type="InputMap" line="165"/>
            </method>
            <method name="uninstallKeyboardActions" type="void" line="169"/>
            <method name="getInputMap" type="InputMap" line="173">
                <params>
                    <param name="condition" type="int"/>
                </params>
                <scope line="174">
                    <declaration name="bindings" type="Object[]" line="175"/>
                    <scope line="176"/>
                </scope>
            </method>
            <javadoc line="182">
                Returns the minimum size the option pane should be. Primarily
                  provided for subclassers wishing to offer a different minimum size.                
            </javadoc>
            <method name="getMinimumOptionPaneSize" type="Dimension" line="186">
                <scope line="187"/>
            </method>
            <javadoc line="192">
                If &lt;code&gt;c&lt;/code&gt; is the &lt;code&gt;JOptionPane&lt;/code&gt; the receiver
                  is contained in, the preferred
                  size that is returned is the maximum of the preferred size of
                  the &lt;code&gt;LayoutManager&lt;/code&gt; for the &lt;code&gt;JOptionPane&lt;/code&gt;, and
                  &lt;code&gt;getMinimumOptionPaneSize&lt;/code&gt;.                
            </javadoc>
            <method name="getPreferredSize" type="Dimension" line="199">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <scope line="200">
                    <declaration name="ourMin" type="Dimension" line="201"/>
                    <declaration name="lm" type="LayoutManager" line="202"/>
                    <scope line="203">
                        <declaration name="lmSize" type="Dimension" line="204"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="212">
                Messaged from installComponents to create a Container containing the
                  body of the message. The icon is the created by calling
                  &lt;code&gt;addIcon&lt;/code&gt;.                
            </javadoc>
            <method name="createMessageArea" type="Container" line="217">
                <declaration name="top" type="JPanel" line="218"/>
                <declaration name="topBorder" type="Border" line="219"/>
                <scope line="220"/>
                <declaration name="body" type="Container" line="224"/>
                <declaration name="realBody" type="Container" line="225"/>
                <scope line="228">
                    <declaration name="sep" type="JPanel" line="229"/>
                </scope>
                <declaration name="cons" type="GridBagConstraints" line="235"/>
            </method>
            <javadoc line="246">
                Creates the appropriate object to represent &lt;code&gt;msg&lt;/code&gt; and
                  places it into &lt;code&gt;container&lt;/code&gt;. If &lt;code&gt;msg&lt;/code&gt; is an
                  instance of Component, it is added directly, if it is an Icon,
                  a JLabel is created to represent it, otherwise a JLabel is
                  created for the string, if &lt;code&gt;d&lt;/code&gt; is an Object[], this
                  method will be recursively invoked for the children.
                  &lt;code&gt;internallyCreated&lt;/code&gt; is true if Objc is an instance
                  of Component and was created internally by this method (this is
                  used to correctly set hasCustomComponents only if !internallyCreated).                
            </javadoc>
            <method name="addMessageComponents" type="void" line="257">
                <params>
                    <param name="container" type="Container"/>
                    <param name="cons" type="GridBagConstraints"/>
                    <param name="msg" type="Object"/>
                    <param name="maxll" type="int"/>
                    <param name="internallyCreated" type="boolean"/>
                </params>
                <scope line="258"/>
                <scope line="261">
                    <scope line="262"/>
                    <scope line="266"/>
                    <scope line="275"/>
                </scope>
                <scope line="279">
                    <declaration name="msgs" type="Object[]" line="280"/>
                    <scope line="281"/>
                </scope>
                <scope line="285">
                    <declaration name="label" type="JLabel" line="286"/>
                </scope>
                <scope line="290">
                    <declaration name="s" type="String" line="291"/>
                    <declaration name="len" type="int" line="292"/>
                    <scope line="293"/>
                    <declaration name="nl" type="int" line="296"/>
                    <declaration name="nll" type="int" line="297"/>
                    <scope line="298"/>
                    <scope line="301"/>
                    <scope line="304"/>
                    <scope line="307">
                        <scope line="308">
                            <anonymous_class line="309">
                                <method name="getPreferredSize" type="Dimension" line="310">
                                    <declaration name="f" type="Font" line="311"/>
                                    <scope line="312"/>
                                </method>
                            </anonymous_class>
                            <declaration name="breakPanel" type="JPanel" line="309"/>
                        </scope>
                        <scope line="322"/>
                    </scope>
                    <scope line="327">
                        <declaration name="c" type="Container" line="328"/>
                    </scope>
                    <scope line="333">
                        <declaration name="label" type="JLabel" line="334"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="342">
                Returns the message to display from the JOptionPane the receiver is
                  providing the look and feel for.                
            </javadoc>
            <method name="getMessage" type="Object" line="346">
                <scope line="348">
                    <scope line="349">
                        <declaration name="message" type="Object" line="350"/>
                        <declaration name="sValues" type="Object[]" line="351"/>
                        <declaration name="inputValue" type="Object" line="352"/>
                        <declaration name="toAdd" type="JComponent" line="353"/>
                        <scope line="354">
                            <scope line="355">
                                <declaration name="cBox" type="JComboBox" line="356"/>
                                <scope line="358"/>
                                <scope line="361"/>
                            </scope>
                            <scope line="367">
                                <declaration name="list" type="JList" line="368"/>
                                <declaration name="sp" type="JScrollPane" line="369"/>
                            </scope>
                        </scope>
                        <scope line="380">
                            <declaration name="tf" type="MultiplexingTextField" line="381"/>
                            <scope line="384">
                                <declaration name="inputString" type="String" line="385"/>
                            </scope>
                        </scope>
                        <declaration name="newMessage" type="Object[]" line="393"/>
                        <scope line="394"/>
                        <scope line="398"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="409">
                Creates and adds a JLabel representing the icon returned from
                  &lt;code&gt;getIcon&lt;/code&gt; to &lt;code&gt;top&lt;/code&gt;. This is messaged from
                  &lt;code&gt;createMessageArea&lt;/code&gt;                
            </javadoc>
            <method name="addIcon" type="void" line="414">
                <params>
                    <param name="top" type="Container"/>
                </params>
                <declaration name="sideIcon" type="Icon" line="415"/>
                <scope line="416">
                    <declaration name="iconLabel" type="JLabel" line="417"/>
                </scope>
            </method>
            <javadoc line="423">
                Returns the icon from the JOptionPane the receiver is providing
                  the look and feel for, or the default icon as returned from
                  &lt;code&gt;getDefaultIcon&lt;/code&gt;.                
            </javadoc>
            <method name="getIcon" type="Icon" line="428">
                <declaration name="mIcon" type="Icon" line="429"/>
            </method>
            <javadoc line="433">
                Returns the icon to use for the passed in type.                
            </javadoc>
            <method name="getIconForType" type="Icon" line="436">
                <params>
                    <param name="messageType" type="int"/>
                </params>
                <declaration name="propertyName" type="String" line="438"/>
                <scope line="453"/>
            </method>
            <javadoc line="458">
                Returns the maximum number of characters to place on a line.                
            </javadoc>
            <method name="getMaxCharactersPerLineCount" type="int" line="461"/>
            <javadoc line="464">
                Recursively creates new JLabel instances to represent &lt;code&gt;d&lt;/code&gt;.
                  Each JLabel instance is added to &lt;code&gt;c&lt;/code&gt;.                
            </javadoc>
            <method name="burstStringInto" type="void" line="468">
                <params>
                    <param name="c" type="Container"/>
                    <param name="d" type="String"/>
                    <param name="maxll" type="int"/>
                </params>
                <declaration name="len" type="int" line="469"/>
                <scope line="471">
                    <declaration name="p" type="int" line="472"/>
                    <scope line="474"/>
                </scope>
                <declaration name="label" type="JLabel" line="480"/>
            </method>
            <method name="createSeparator" type="Container" line="485"/>
            <javadoc line="488">
                Creates and returns a Container containing the buttons. The buttons
                  are created by calling &lt;code&gt;getButtons&lt;/code&gt;.                
            </javadoc>
            <method name="createButtonArea" type="Container" line="492">
                <declaration name="bottom" type="JPanel" line="493"/>
                <declaration name="border" type="Border" line="494"/>
                <scope line="496"/>
            </method>
            <javadoc line="503">
                Creates the appropriate object to represent each of the objects in
                  &lt;code&gt;buttons&lt;/code&gt; and adds it to &lt;code&gt;container&lt;/code&gt;. This
                  differs from addMessageComponents in that it will recurse on
                  &lt;code&gt;buttons&lt;/code&gt; and that if button is not a Component
                  it will create an instance of JButton.                
            </javadoc>
            <method name="addButtonComponents" type="void" line="510">
                <params>
                    <param name="container" type="Container"/>
                    <param name="buttons" type="Object[]"/>
                    <param name="initialIndex" type="int"/>
                </params>
                <scope line="511">
                    <declaration name="sizeButtonsToSame" type="boolean" line="512"/>
                    <declaration name="createdAll" type="boolean" line="513"/>
                    <declaration name="numButtons" type="int" line="514"/>
                    <declaration name="createdButtons" type="JButton[]" line="515"/>
                    <declaration name="maxWidth" type="int" line="516"/>
                    <scope line="517"/>
                    <scope line="520">
                        <declaration name="button" type="Object" line="521"/>
                        <declaration name="newComponent" type="Component" line="522"/>
                        <scope line="523"/>
                        <scope line="529">
                            <declaration name="aButton" type="JButton" line="530"/>
                            <scope line="531"/>
                            <declaration name="buttonListener" type="ActionListener" line="540"/>
                            <scope line="541"/>
                        </scope>
                        <scope line="546"/>
                        <scope line="550">
                            <scope line="552">
                                <declaration name="defaultB" type="JButton" line="553"/>
                                <anonymous_class line="554">
                                    <method name="hierarchyChanged" type="void" line="555">
                                        <params>
                                            <param name="e" type="HierarchyEvent"/>
                                        </params>
                                        <scope line="556">
                                            <declaration name="defaultButton" type="JButton" line="557"/>
                                            <declaration name="root" type="JRootPane" line="558"/>
                                            <scope line="559"/>
                                        </scope>
                                    </method>
                                </anonymous_class>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="570">
                        <declaration name="aButton" type="JButton" line="571"/>
                        <declaration name="padSize" type="int" line="572"/>
                        <scope line="574"/>
                    </scope>
                </scope>
            </method>
            <method name="createButtonActionListener" type="ActionListener" line="581">
                <params>
                    <param name="buttonIndex" type="int"/>
                </params>
            </method>
            <javadoc line="584">
                Returns the buttons to display from the JOptionPane the receiver is
                  providing the look and feel for. If the JOptionPane has options
                  set, they will be provided, otherwise if the optionType is
                  YES_NO_OPTION, yesNoOptions is returned, if the type is
                  YES_NO_CANCEL_OPTION yesNoCancelOptions is returned, otherwise
                  defaultButtons are returned.                
            </javadoc>
            <method name="getButtons" type="Object[]" line="592">
                <scope line="593">
                    <declaration name="suppliedOptions" type="Object[]" line="594"/>
                    <scope line="595">
                        <declaration name="defaultOptions" type="Object[]" line="596"/>
                        <declaration name="type" type="int" line="597"/>
                        <declaration name="l" type="Locale" line="598"/>
                        <declaration name="minimumWidth" type="int" line="599"/>
                        <scope line="600"/>
                        <scope line="605"/>
                        <scope line="611"/>
                        <scope line="616"/>
                    </scope>
                </scope>
            </method>
            <method name="getMnemonic" type="int" line="626">
                <params>
                    <param name="key" type="String"/>
                    <param name="l" type="Locale"/>
                </params>
                <declaration name="value" type="String" line="627"/>
                <scope line="628"/>
                <scope line="631"/>
                <scope line="634"/>
            </method>
            <javadoc line="638">
                Returns true, basic L&amp;F wants all the buttons to have the same
                  width.                
            </javadoc>
            <method name="getSizeButtonsToSameWidth" type="boolean" line="642"/>
            <javadoc line="645">
                Returns the initial index into the buttons to select. The index
                  is calculated from the initial value from the JOptionPane and
                  options of the JOptionPane or 0.                
            </javadoc>
            <method name="getInitialValueIndex" type="int" line="650">
                <scope line="651">
                    <declaration name="iv" type="Object" line="652"/>
                    <declaration name="options" type="Object[]" line="653"/>
                    <scope line="654"/>
                    <scope line="657">
                        <scope line="658"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="665">
                Sets the input value in the option pane the receiver is providing
                  the look and feel for based on the value in the inputComponent.                
            </javadoc>
            <method name="resetInputValue" type="void" line="669">
                <scope line="670"/>
                <scope line="673"/>
                <scope line="676"/>
            </method>
            <javadoc line="680">
                If inputComponent is non-null, the focus is requested on that,
                  otherwise request focus on the default value                
            </javadoc>
            <method name="selectInitialValue" type="void" line="684">
                <params>
                    <param name="op" type="JOptionPane"/>
                </params>
                <scope line="686">
                    <scope line="688">
                        <declaration name="root" type="JRootPane" line="689"/>
                        <scope line="690"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="696">
                Returns true if in the last call to validateComponent the message
                  or buttons contained a subclass of Component.                
            </javadoc>
            <method name="containsCustomComponents" type="boolean" line="700">
                <params>
                    <param name="op" type="JOptionPane"/>
                </params>
            </method>
            <class name="ButtonAreaLayout" line="703">
                <implements interface="LayoutManager"/>
                <javadoc line="703">
                    &lt;code&gt;ButtonAreaLayout&lt;/code&gt; behaves in a similar manner to
                      &lt;code&gt;FlowLayout&lt;/code&gt;. It lays out all components from left to
                      right. If &lt;code&gt;syncAllWidths&lt;/code&gt; is true, the widths of each
                      component will be set to the largest preferred size width.
                      This class should be treated as a &amp;quot;protected&amp;quot; inner class.
                      Instantiate it only within subclasses of {@code BasicOptionPaneUI}.                    
                </javadoc>
                <declaration name="syncAllWidths" type="boolean" line="712"/>
                <declaration name="padding" type="int" line="713"/>
                <declaration name="centersChildren" type="boolean" line="714"/>
                <javadoc line="714">
                    If true, children are lumped together in parent.                    
                </javadoc>
                <declaration name="orientation" type="int" line="718"/>
                <declaration name="reverseButtons" type="boolean" line="719"/>
                <declaration name="useOrientation" type="boolean" line="720"/>
                <javadoc line="720">
                    Indicates whether or not centersChildren should be used vs
                      the orientation. This is done for backward compatability
                      for subclassers.                    
                </javadoc>
                <method name="ButtonAreaLayout" type="constructor" line="726">
                    <params>
                        <param name="syncAllWidths" type="boolean"/>
                        <param name="padding" type="int"/>
                    </params>
                </method>
                <method name="ButtonAreaLayout" type="constructor" line="732">
                    <params>
                        <param name="syncAllSizes" type="boolean"/>
                        <param name="padding" type="int"/>
                        <param name="orientation" type="int"/>
                        <param name="reverseButtons" type="boolean"/>
                    </params>
                </method>
                <method name="setSyncAllWidths" type="void" line="738">
                    <params>
                        <param name="newValue" type="boolean"/>
                    </params>
                </method>
                <method name="getSyncAllWidths" type="boolean" line="741"/>
                <method name="setPadding" type="void" line="744">
                    <params>
                        <param name="newPadding" type="int"/>
                    </params>
                </method>
                <method name="getPadding" type="int" line="747"/>
                <method name="setCentersChildren" type="void" line="750">
                    <params>
                        <param name="newValue" type="boolean"/>
                    </params>
                </method>
                <method name="getCentersChildren" type="boolean" line="754"/>
                <method name="getOrientation" type="int" line="757">
                    <params>
                        <param name="container" type="Container"/>
                    </params>
                    <scope line="758"/>
                    <scope line="761"/>
                </method>
                <method name="addLayoutComponent" type="void" line="774">
                    <params>
                        <param name="string" type="String"/>
                        <param name="comp" type="Component"/>
                    </params>
                </method>
                <method name="layoutContainer" type="void" line="776">
                    <params>
                        <param name="container" type="Container"/>
                    </params>
                    <declaration name="children" type="Component[]" line="777"/>
                    <scope line="778">
                        <declaration name="numChildren" type="int" line="779"/>
                        <declaration name="insets" type="Insets" line="780"/>
                        <declaration name="maxWidth" type="int" line="781"/>
                        <declaration name="maxHeight" type="int" line="782"/>
                        <declaration name="totalButtonWidth" type="int" line="783"/>
                        <declaration name="x" type="int" line="784"/>
                        <declaration name="xOffset" type="int" line="785"/>
                        <declaration name="ltr" type="boolean" line="786"/>
                        <declaration name="reverse" type="boolean" line="787"/>
                        <scope line="788">
                            <declaration name="pref" type="Dimension" line="789"/>
                        </scope>
                        <scope line="794"/>
                        <scope line="806"/>
                        <scope line="809">
                            <scope line="811"/>
                            <scope line="814"/>
                        </scope>
                        <scope line="820">
                            <declaration name="index" type="int" line="821"/>
                            <declaration name="pref" type="Dimension" line="822"/>
                            <scope line="823"/>
                            <scope line="826"/>
                            <scope line="829"/>
                            <scope line="832"/>
                        </scope>
                    </scope>
                </method>
                <method name="minimumLayoutSize" type="Dimension" line="838">
                    <params>
                        <param name="c" type="Container"/>
                    </params>
                    <scope line="839">
                        <declaration name="children" type="Component[]" line="840"/>
                        <scope line="841">
                            <declaration name="aSize" type="Dimension" line="842"/>
                            <declaration name="numChildren" type="int" line="843"/>
                            <declaration name="height" type="int" line="844"/>
                            <declaration name="cInsets" type="Insets" line="845"/>
                            <declaration name="extraHeight" type="int" line="846"/>
                            <declaration name="extraWidth" type="int" line="847"/>
                            <scope line="848">
                                <declaration name="maxWidth" type="int" line="849"/>
                                <scope line="850"/>
                            </scope>
                            <scope line="857">
                                <declaration name="totalWidth" type="int" line="858"/>
                                <scope line="859"/>
                            </scope>
                        </scope>
                    </scope>
                </method>
                <method name="preferredLayoutSize" type="Dimension" line="871">
                    <params>
                        <param name="c" type="Container"/>
                    </params>
                </method>
                <method name="removeLayoutComponent" type="void" line="874">
                    <params>
                        <param name="c" type="Component"/>
                    </params>
                </method>
            </class>
            <class name="PropertyChangeHandler" line="877">
                <implements interface="PropertyChangeListener"/>
                <javadoc line="877">
                    This class should be treated as a &amp;quot;protected&amp;quot; inner class.
                      Instantiate it only within subclasses of {@code BasicOptionPaneUI}.                    
                </javadoc>
                <javadoc line="882">
                    If the source of the PropertyChangeEvent &lt;code&gt;e&lt;/code&gt; equals the
                      optionPane and is one of the ICON_PROPERTY, MESSAGE_PROPERTY,
                      OPTIONS_PROPERTY or INITIAL_VALUE_PROPERTY,
                      validateComponent is invoked.                    
                </javadoc>
                <method name="propertyChange" type="void" line="888">
                    <params>
                        <param name="e" type="PropertyChangeEvent"/>
                    </params>
                </method>
            </class>
            <javadoc line="892">
                Configures any necessary colors/fonts for the specified label
                  used representing the message.                
            </javadoc>
            <method name="configureMessageLabel" type="void" line="896">
                <params>
                    <param name="label" type="JLabel"/>
                </params>
                <declaration name="color" type="Color" line="897"/>
                <scope line="898"/>
                <declaration name="messageFont" type="Font" line="901"/>
                <scope line="902"/>
            </method>
            <javadoc line="906">
                Configures any necessary colors/fonts for the specified button
                  used representing the button portion of the optionpane.                
            </javadoc>
            <method name="configureButton" type="void" line="910">
                <params>
                    <param name="button" type="JButton"/>
                </params>
                <declaration name="buttonFont" type="Font" line="911"/>
                <scope line="912"/>
            </method>
            <class name="ButtonActionListener" line="916">
                <implements interface="ActionListener"/>
                <javadoc line="916">
                    This class should be treated as a &amp;quot;protected&amp;quot; inner class.
                      Instantiate it only within subclasses of {@code BasicOptionPaneUI}.                    
                </javadoc>
                <declaration name="buttonIndex" type="int" line="921"/>
                <method name="ButtonActionListener" type="constructor" line="922">
                    <params>
                        <param name="buttonIndex" type="int"/>
                    </params>
                </method>
                <method name="actionPerformed" type="void" line="925">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                    <scope line="926">
                        <declaration name="optionType" type="int" line="927"/>
                        <declaration name="options" type="Object[]" line="928"/>
                        <scope line="929">
                            <scope line="930"/>
                        </scope>
                        <scope line="934">
                            <scope line="935"/>
                            <scope line="938"/>
                        </scope>
                        <scope line="942"/>
                    </scope>
                </method>
            </class>
            <class name="Handler" line="948">
                <implements interface="ActionListener"/>
                <implements interface="MouseListener"/>
                <implements interface="PropertyChangeListener"/>
                <method name="actionPerformed" type="void" line="949">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                </method>
                <method name="mouseClicked" type="void" line="952">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
                <method name="mouseReleased" type="void" line="954">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
                <method name="mouseEntered" type="void" line="956">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
                <method name="mouseExited" type="void" line="958">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
                <method name="mousePressed" type="void" line="960">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                    <scope line="961">
                        <declaration name="list" type="JList" line="962"/>
                        <declaration name="index" type="int" line="963"/>
                    </scope>
                </method>
                <method name="propertyChange" type="void" line="967">
                    <params>
                        <param name="e" type="PropertyChangeEvent"/>
                    </params>
                    <scope line="968">
                        <scope line="969">
                            <declaration name="op" type="JOptionPane" line="970"/>
                            <declaration name="isComingUp" type="boolean" line="971"/>
                            <scope line="972"/>
                            <scope line="975"/>
                            <scope line="980"/>
                            <scope line="985"/>
                            <scope line="990"/>
                            <scope line="995"/>
                            <scope line="1000"/>
                        </scope>
                        <declaration name="changeName" type="String" line="1009"/>
                        <scope line="1010"/>
                        <scope line="1015">
                            <declaration name="o" type="ComponentOrientation" line="1016"/>
                            <declaration name="op" type="JOptionPane" line="1017"/>
                            <scope line="1018"/>
                        </scope>
                    </scope>
                </method>
            </class>
            <class name="MultiplexingTextField" line="1025">
                <extends class="JTextField"/>
                <javadoc line="1025">
                    A JTextField that allows you to specify an array of KeyStrokes that
                      that will have their bindings processed regardless of whether or
                      not they are registered on the JTextField. This is used as we really
                      want the ActionListener to be notified so that we can push the
                      change to the JOptionPane, but we also want additional bindings
                      (those of the JRootPane) to be processed as well.                    
                </javadoc>
                <declaration name="strokes" type="KeyStroke[]" line="1034"/>
                <method name="MultiplexingTextField" type="constructor" line="1035">
                    <params>
                        <param name="cols" type="int"/>
                    </params>
                </method>
                <javadoc line="1038">
                    Sets the KeyStrokes that will be additional processed for
                      ancestor bindings.                    
                </javadoc>
                <method name="setKeyStrokes" type="void" line="1042">
                    <params>
                        <param name="strokes" type="KeyStroke[]"/>
                    </params>
                </method>
                <method name="processKeyBinding" type="boolean" line="1045">
                    <params>
                        <param name="ks" type="KeyStroke"/>
                        <param name="e" type="KeyEvent"/>
                        <param name="condition" type="int"/>
                        <param name="pressed" type="boolean"/>
                    </params>
                    <declaration name="processed" type="boolean" line="1046"/>
                    <scope line="1047">
                        <scope line="1048">
                            <scope line="1049"/>
                        </scope>
                    </scope>
                </method>
            </class>
            <class name="Actions" line="1057">
                <extends class="UIAction"/>
                <javadoc line="1057">
                    Registered in the ActionMap. Sets the value of the option pane
                      to &lt;code&gt;JOptionPane.CLOSED_OPTION&lt;/code&gt;.                    
                </javadoc>
                <declaration name="CLOSE" type="String" line="1062"/>
                <method name="Actions" type="constructor" line="1063">
                    <params>
                        <param name="key" type="String"/>
                    </params>
                </method>
                <method name="actionPerformed" type="void" line="1066">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                    <scope line="1067">
                        <declaration name="optionPane" type="JOptionPane" line="1068"/>
                    </scope>
                </method>
            </class>
            <class name="ButtonFactory" line="1073">
                <javadoc line="1073">
                    This class is used to create the default buttons. This indirection is
                      used so that addButtonComponents can tell which Buttons were created
                      by us vs subclassers or from the JOptionPane itself.                    
                </javadoc>
                <declaration name="text" type="String" line="1079"/>
                <declaration name="mnemonic" type="int" line="1080"/>
                <declaration name="icon" type="Icon" line="1081"/>
                <declaration name="minimumWidth" type="int" line="1082"/>
                <method name="ButtonFactory" type="constructor" line="1083">
                    <params>
                        <param name="text" type="String"/>
                        <param name="mnemonic" type="int"/>
                        <param name="icon" type="Icon"/>
                        <param name="minimumWidth" type="int"/>
                    </params>
                </method>
                <method name="createButton" type="JButton" line="1089">
                    <declaration name="button" type="JButton" line="1090"/>
                    <scope line="1091"/>
                    <scope line="1094"/>
                    <scope line="1097"/>
                    <scope line="1100"/>
                </method>
                <class name="ConstrainedButton" line="1105">
                    <extends class="JButton"/>
                    <declaration name="minimumWidth" type="int" line="1106"/>
                    <method name="ConstrainedButton" type="constructor" line="1107">
                        <params>
                            <param name="text" type="String"/>
                            <param name="minimumWidth" type="int"/>
                        </params>
                    </method>
                    <method name="getMinimumSize" type="Dimension" line="1111">
                        <declaration name="min" type="Dimension" line="1112"/>
                    </method>
                    <method name="getPreferredSize" type="Dimension" line="1116">
                        <declaration name="pref" type="Dimension" line="1117"/>
                    </method>
                </class>
            </class>
        </class>
    </source>