<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.plaf.synth">
        <import package="javax.swing"/>
        <import package="javax.swing.text"/>
        <import package="javax.swing.plaf"/>
        <import package="javax.swing.plaf.basic.BasicTextAreaUI"/>
        <import package="java.awt"/>
        <import package="java.awt.event.FocusListener"/>
        <import package="java.awt.event.FocusEvent"/>
        <import package="java.beans.PropertyChangeEvent"/>
        <class name="SynthTextAreaUI" line="10">
            <extends class="BasicTextAreaUI"/>
            <implements interface="SynthUI"/>
            <javadoc line="10">
                Provides the look and feel for a plain text editor in the
                  Synth look and feel. In this implementation the default UI
                  is extended to act as a simple view factory.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <author>
                    Shannon Hickey                    
                </author>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <declaration name="handler" type="Handler" line="27"/>
            <declaration name="style" type="SynthStyle" line="28"/>
            <javadoc line="29">
                Creates a UI object for a JTextArea.                
                <param>
                    ta a text area                    
                </param>
                <return>
                    the UI object                    
                </return>
            </javadoc>
            <method name="createUI" type="ComponentUI" line="34">
                <params>
                    <param name="ta" type="JComponent"/>
                </params>
            </method>
            <javadoc line="37">
                @inheritDoc                
            </javadoc>
            <method name="installDefaults" type="void" line="40"/>
            <javadoc line="45">
                @inheritDoc                
            </javadoc>
            <method name="uninstallDefaults" type="void" line="48">
                <declaration name="context" type="SynthContext" line="49"/>
            </method>
            <method name="updateStyle" type="void" line="57">
                <params>
                    <param name="comp" type="JTextComponent"/>
                </params>
                <declaration name="context" type="SynthContext" line="58"/>
                <declaration name="oldStyle" type="SynthStyle" line="59"/>
                <scope line="61">
                    <scope line="63"/>
                </scope>
            </method>
            <javadoc line="70">
                @inheritDoc                
            </javadoc>
            <method name="getContext" type="SynthContext" line="73">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <method name="getContext" type="SynthContext" line="76">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="state" type="int"/>
                </params>
            </method>
            <javadoc line="79">
                Notifies this UI delegate to repaint the specified component.
                  This method paints the component background, then calls
                  the {@link #paint(SynthContext,Graphics)} method.
                  &lt;p&gt;In general, this method does not need to be overridden by subclasses.
                  All Look and Feel rendering code should reside in the {@code paint} method.                
                <param>
                    g the {@code Graphics} object used for painting                    
                </param>
                <param>
                    c the component being painted                    
                </param>
                <see>
                    #paint(SynthContext,Graphics)                    
                </see>
            </javadoc>
            <method name="update" type="void" line="89">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="c" type="JComponent"/>
                </params>
                <declaration name="context" type="SynthContext" line="90"/>
            </method>
            <javadoc line="96">
                Paints the specified component.                
                <param>
                    context context for the component being painted                    
                </param>
                <param>
                    g the {@code Graphics} object used for painting                    
                </param>
                <see>
                    #update(Graphics,JComponent)                    
                </see>
            </javadoc>
            <method name="paint" type="void" line="102">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="g" type="Graphics"/>
                </params>
            </method>
            <javadoc line="105">
                @inheritDocOverridden to do nothing.                
            </javadoc>
            <method name="paintBackground" type="void" line="108">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
            </method>
            <javadoc line="110">
                @inheritDoc                
            </javadoc>
            <method name="paintBorder" type="void" line="113">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="g" type="Graphics"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
            </method>
            <javadoc line="116">
                This method gets called when a bound property is changed
                  on the associated JTextComponent.  This is a hook
                  which UI implementations may change to reflect how the
                  UI displays bound properties of JTextComponent subclasses.
                  This is implemented to rebuild the View when the
                  &lt;em&gt;WrapLine&lt;/em&gt; or the &lt;em&gt;WrapStyleWord&lt;/em&gt; property changes.                
                <param>
                    evt the property change event                    
                </param>
            </javadoc>
            <method name="propertyChange" type="void" line="125">
                <params>
                    <param name="evt" type="PropertyChangeEvent"/>
                </params>
                <scope line="126"/>
            </method>
            <class name="Handler" line="131">
                <implements interface="FocusListener"/>
                <method name="focusGained" type="void" line="132">
                    <params>
                        <param name="e" type="FocusEvent"/>
                    </params>
                </method>
                <method name="focusLost" type="void" line="135">
                    <params>
                        <param name="e" type="FocusEvent"/>
                    </params>
                </method>
            </class>
        </class>
    </source>