<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.plaf.nimbus">
        <import package="java.awt.BorderLayout"/>
        <import package="java.awt.BorderLayout"/>
        <import package="javax.swing.JComponent"/>
        <import package="javax.swing.UIDefaults"/>
        <import package="javax.swing.UIManager"/>
        <import package="javax.swing.plaf.synth.Region"/>
        <import package="javax.swing.plaf.synth.SynthLookAndFeel"/>
        <import package="javax.swing.plaf.synth.SynthStyle"/>
        <import package="javax.swing.plaf.synth.SynthStyleFactory"/>
        <import package="javax.swing.plaf.UIResource"/>
        <import package="java.security.AccessController"/>
        <import package="java.awt.Color"/>
        <import package="java.awt.Container"/>
        <import package="java.awt.Graphics2D"/>
        <import package="java.awt.LayoutManager"/>
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.beans.PropertyChangeEvent"/>
        <import package="java.beans.PropertyChangeListener"/>
        <import package="java.util"/>
        <import package="javax.swing.GrayFilter"/>
        <import package="javax.swing.Icon"/>
        <import package="javax.swing.JToolBar"/>
        <import package="javax.swing.border.TitledBorder"/>
        <import package="javax.swing.plaf.BorderUIResource"/>
        <import package="javax.swing.plaf.ColorUIResource"/>
        <import package="sun.swing.ImageIconUIResource"/>
        <import package="sun.swing.plaf.synth.SynthIcon"/>
        <import package="sun.swing.plaf.GTKKeybindings"/>
        <import package="sun.swing.plaf.WindowsKeybindings"/>
        <import package="sun.security.action.GetPropertyAction"/>
        <class name="NimbusLookAndFeel" line="58">
            <extends class="SynthLookAndFeel"/>
            <javadoc line="58">
                &lt;p&gt;The NimbusLookAndFeel class.&lt;/p&gt;                
                <author>
                    Jasper Potts                    
                </author>
                <author>
                    Richard Bair                    
                </author>
            </javadoc>
            <declaration name="COMPONENT_KEYS" type="String[]" line="66"/>
            <javadoc line="66">
                Set of standard region names for UIDefaults Keys                
            </javadoc>
            <declaration name="defaults" type="NimbusDefaults" line="81"/>
            <javadoc line="81">
                A reference to the auto-generated file NimbusDefaults. This file contains
                  the default mappings and values for the look and feel as specified in the
                  visual designer.                
            </javadoc>
            <declaration name="uiDefaults" type="UIDefaults" line="88"/>
            <javadoc line="88">
                Reference to populated LAD uidefaults                
            </javadoc>
            <declaration name="defaultsListener" type="DefaultsListener" line="93"/>
            <javadoc line="95">
                Create a new NimbusLookAndFeel.                
            </javadoc>
            <method name="NimbusLookAndFeel" type="constructor" line="98"/>
            <javadoc line="103">
                Called by UIManager when this look and feel is installed.                
            </javadoc>
            <method name="initialize" type="void" line="104">
                <comment line="107">
                    create synth style factory                    
                </comment>
                <anonymous_class line="108">
                    <method name="getStyle" type="SynthStyle" line="110">
                        <params>
                            <param name="c" type="JComponent"/>
                            <param name="r" type="Region"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="117">
                Called by UIManager when this look and feel is uninstalled.                
            </javadoc>
            <method name="uninitialize" type="void" line="118">
                <comment line="121">
                    clear all cached images to free memory                    
                </comment>
            </method>
            <javadoc line="126">
                @inheritDoc                
            </javadoc>
            <method name="getDefaults" type="UIDefaults" line="129">
                <comment line="131">
                    Detect platform                    
                </comment>
                <comment line="135">
                    We need to call super for basic&apos;s properties file.                    
                </comment>
                <comment line="139">
                    Install Keybindings                    
                </comment>
                <comment line="146">
                    Add Titled Border                    
                </comment>
                <comment line="157">
                    Choose Dialog button positions                    
                </comment>
                <comment line="160">
                    Store Table ScrollPane Corner Component                    
                </comment>
                <comment line="164">
                    Setup the settings for ToolBarSeparator which is custom                    
                </comment>
                <comment line="165">
                    installed for Nimbus                    
                </comment>
                <comment line="169">
                    Populate UIDefaults with a standard set of properties                    
                </comment>
                <comment line="200">
                    FileView icon keys are used by some applications, we don&apos;t have                    
                </comment>
                <comment line="201">
                    a computer icon at the moment so using home icon for now                    
                </comment>
                <scope line="130">
                    <declaration name="osName" type="String" line="132"/>
                    <declaration name="isWindows" type="boolean" line="133"/>
                    <scope line="140"/>
                    <scope line="142"/>
                    <scope line="170">
                        <declaration name="key" type="String" line="171"/>
                        <scope line="172"/>
                        <scope line="177"/>
                        <scope line="182"/>
                        <scope line="187"/>
                        <scope line="193"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="216">
                Gets the style associated with the given component and region. This
                  will never return null. If an appropriate component and region cannot
                  be determined, then a default style is returned.                
                <param>
                    c a non-null reference to a JComponent                    
                </param>
                <param>
                    r a non-null reference to the region of the component c                    
                </param>
                <return>
                    a non-null reference to a NimbusStyle.                    
                </return>
            </javadoc>
            <method name="getStyle" type="NimbusStyle" line="225">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="r" type="Region"/>
                </params>
            </method>
            <javadoc line="229">
                Return a short string that identifies this look and feel. This
                  String will be the unquoted String &quot;Nimbus&quot;.                
                <return>
                    a short string identifying this look and feel.                    
                </return>
            </javadoc>
            <method name="getName" type="String" line="235"/>
            <javadoc line="239">
                Return a string that identifies this look and feel. This String will
                  be the unquoted String &quot;Nimbus&quot;.                
                <return>
                    a short string identifying this look and feel.                    
                </return>
            </javadoc>
            <method name="getID" type="String" line="245"/>
            <javadoc line="249">
                Returns a textual description of this look and feel.                
                <return>
                    textual description of this look and feel.                    
                </return>
            </javadoc>
            <method name="getDescription" type="String" line="254"/>
            <javadoc line="258">
                @inheritDoc                
                <return>
                    {@code true}                    
                </return>
            </javadoc>
            <method name="shouldUpdateStyleOnAncestorChanged" type="boolean" line="262"/>
            <javadoc line="266">
                @inheritDoc&lt;p&gt;Overridden to return {@code true} when one of the following
                  properties change:
                  &lt;ul&gt;
                  &lt;li&gt;{@code &quot;Nimbus.Overrides&quot;}&lt;li&gt;{@code &quot;Nimbus.Overrides.InheritDefaults&quot;}&lt;li&gt;{@code &quot;JComponent.sizeVariant&quot;}&lt;/ul&gt;                
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="shouldUpdateStyleOnEvent" type="boolean" line="280">
                <params>
                    <param name="ev" type="PropertyChangeEvent"/>
                </params>
                <comment line="283">
                    These properties affect style cached inside NimbusDefaults (6860433)                    
                </comment>
                <declaration name="eName" type="String" line="281"/>
                <scope line="288">
                    <declaration name="c" type="JComponent" line="290"/>
                </scope>
            </method>
            <javadoc line="298">
                &lt;p&gt;Registers a third party component with the NimbusLookAndFeel.&lt;/p&gt;
                  &lt;p&gt;Regions represent Components and areas within Components that act as
                  independent painting areas. Once registered with the NimbusLookAndFeel,
                  NimbusStyles for these Regions can be retrieved via the
                  &lt;code&gt;getStyle&lt;/code&gt; method.&lt;/p&gt;
                  &lt;p&gt;The NimbusLookAndFeel uses a standard naming scheme for entries in the
                  UIDefaults table. The key for each property, state, painter, and other
                  default registered in UIDefaults for a specific Region will begin with
                  the specified &lt;code&gt;prefix&lt;/code&gt;&lt;/p&gt;
                  &lt;p&gt;For example, suppose I had a component named JFoo. Suppose I then registered
                  this component with the NimbusLookAndFeel in this manner:&lt;/p&gt;
                  &lt;pre&gt;&lt;code&gt;
                  laf.register(NimbusFooUI.FOO_REGION, &quot;Foo&quot;);
                  &lt;/code&gt;&lt;/pre&gt;
                  &lt;p&gt;In this case, I could then register properties for this component with
                  UIDefaults in the following manner:&lt;/p&gt;
                  &lt;pre&gt;&lt;code&gt;
                  UIManager.put(&quot;Foo.background&quot;, new ColorUIResource(Color.BLACK));
                  UIManager.put(&quot;Foo.Enabled.backgroundPainter&quot;, new FooBackgroundPainter());
                  &lt;/code&gt;&lt;/pre&gt;
                  &lt;p&gt;It is also possible to register a named component with Nimbus.
                  For example, suppose you wanted to style the background of a JPanel
                  named &quot;MyPanel&quot; differently from other JPanels. You could accomplish this
                  by doing the following:&lt;/p&gt;
                  &lt;pre&gt;&lt;code&gt;
                  laf.register(Region.PANEL, &quot;\&quot;MyPanel\&quot;&quot;);
                  UIManager.put(&quot;\&quot;MyPanel\&quot;.background&quot;, new ColorUIResource(Color.RED));
                  &lt;/code&gt;&lt;/pre&gt;                
                <param>
                    region The Synth Region that is being registered. Such as Button, or
                      ScrollBarThumb, or NimbusFooUI.FOO_REGION.                    
                </param>
                <param>
                    prefix The UIDefault prefix. For example, could be ComboBox, or if
                      a named components, "MyComboBox", or even something like
                      ToolBar."MyComboBox"."ComboBox.arrowButton"                    
                </param>
            </javadoc>
            <method name="register" type="void" line="342">
                <params>
                    <param name="region" type="Region"/>
                    <param name="prefix" type="String"/>
                </params>
            </method>
            <javadoc line="346">
                Simple utility method that reads system keys.                
            </javadoc>
            <method name="getSystemProperty" type="String" line="349">
                <params>
                    <param name="key" type="String"/>
                </params>
            </method>
            <method name="getDisabledIcon" type="Icon" line="354">
                <params>
                    <param name="component" type="JComponent"/>
                    <param name="icon" type="Icon"/>
                </params>
                <scope line="355">
                    <declaration name="si" type="SynthIcon" line="356"/>
                    <declaration name="img" type="BufferedImage" line="357"/>
                    <declaration name="gfx" type="Graphics2D" line="359"/>
                </scope>
                <scope line="363"/>
            </method>
            <javadoc line="368">
                Get a derived color, derived colors are shared instances and is color
                  value will change when its parent UIDefault color changes.                
                <param>
                    uiDefaultParentName The parent UIDefault key                    
                </param>
                <param>
                    hOffset             The hue offset                    
                </param>
                <param>
                    sOffset             The saturation offset                    
                </param>
                <param>
                    bOffset             The brightness offset                    
                </param>
                <param>
                    aOffset             The alpha offset                    
                </param>
                <param>
                    uiResource          True if the derived color should be a
                      UIResource, false if it should not be                    
                </param>
                <return>
                    The stored derived color                    
                </return>
            </javadoc>
            <method name="getDerivedColor" type="Color" line="384">
                <params>
                    <param name="uiDefaultParentName" type="String"/>
                    <param name="hOffset" type="float"/>
                    <param name="sOffset" type="float"/>
                    <param name="bOffset" type="float"/>
                    <param name="aOffset" type="int"/>
                    <param name="uiResource" type="boolean"/>
                </params>
            </method>
            <javadoc line="389">
                Decodes and returns a color, which is derived from an offset between two
                  other colors.                
                <param>
                    color1   The first color                    
                </param>
                <param>
                    color2   The second color                    
                </param>
                <param>
                    midPoint The offset between color 1 and color 2, a value of 0.0 is
                      color 1 and 1.0 is color 2;                    
                </param>
                <param>
                    uiResource True if the derived color should be a UIResource                    
                </param>
                <return>
                    The derived color                    
                </return>
            </javadoc>
            <method name="getDerivedColor" type="Color" line="401">
                <params>
                    <param name="color1" type="Color"/>
                    <param name="color2" type="Color"/>
                    <param name="midPoint" type="float"/>
                    <param name="uiResource" type="boolean"/>
                </params>
                <declaration name="argb" type="int" line="402"/>
                <scope line="403"/>
                <scope line="405"/>
            </method>
            <javadoc line="410">
                Decodes and returns a color, which is derived from a offset between two
                  other colors.                
                <param>
                    color1   The first color                    
                </param>
                <param>
                    color2   The second color                    
                </param>
                <param>
                    midPoint The offset between color 1 and color 2, a value of 0.0 is
                      color 1 and 1.0 is color 2;                    
                </param>
                <return>
                    The derived color, which will be a UIResource                    
                </return>
            </javadoc>
            <method name="getDerivedColor" type="Color" line="421">
                <params>
                    <param name="color1" type="Color"/>
                    <param name="color2" type="Color"/>
                    <param name="midPoint" type="float"/>
                </params>
            </method>
            <javadoc line="425">
                Package private method which returns either BorderLayout.NORTH,
                  BorderLayout.SOUTH, BorderLayout.EAST, or BorderLayout.WEST depending
                  on the location of the toolbar in its parent. The toolbar might be
                  in PAGE_START, PAGE_END, CENTER, or some other position, but will be
                  resolved to either NORTH,SOUTH,EAST, or WEST based on where the toolbar
                  actually IS, with CENTER being NORTH.
                  This code is used to determine where the border line should be drawn
                  by the custom toolbar states, and also used by NimbusIcon to determine
                  whether the handle icon needs to be shifted to look correct.
                  Toollbars are unfortunately odd in the way these things are handled,
                  and so this code exists to unify the logic related to toolbars so it can
                  be shared among the static files such as NimbusIcon and generated files
                  such as the ToolBar state classes.                
            </javadoc>
            <method name="resolveToolbarConstraint" type="Object" line="442">
                <params>
                    <param name="toolbar" type="JToolBar"/>
                </params>
                <comment line="443">
                    NOTE: we don&apos;t worry about component orientation or PAGE_END etc                    
                </comment>
                <comment line="444">
                    because the BasicToolBarUI always uses an absolute position of                    
                </comment>
                <comment line="445">
                    NORTH/SOUTH/EAST/WEST.                    
                </comment>
                <scope line="446">
                    <declaration name="parent" type="Container" line="447"/>
                    <scope line="448">
                        <declaration name="m" type="LayoutManager" line="449"/>
                        <scope line="450">
                            <declaration name="b" type="BorderLayout" line="451"/>
                            <declaration name="con" type="Object" line="452"/>
                            <scope line="453"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="463">
                Derives the ARGB value for a color based on an offset between two
                  other colors.                
                <param>
                    color1   The first color                    
                </param>
                <param>
                    color2   The second color                    
                </param>
                <param>
                    midPoint The offset between color 1 and color 2, a value of 0.0 is
                      color 1 and 1.0 is color 2;                    
                </param>
                <return>
                    the ARGB value for a new color based on this derivation                    
                </return>
            </javadoc>
            <method name="deriveARGB" type="int" line="473">
                <params>
                    <param name="color1" type="Color"/>
                    <param name="color2" type="Color"/>
                    <param name="midPoint" type="float"/>
                </params>
                <declaration name="r" type="int" line="474"/>
                <declaration name="g" type="int" line="476"/>
                <declaration name="b" type="int" line="478"/>
                <declaration name="a" type="int" line="480"/>
            </method>
            <class name="LinkProperty" line="488">
                <implements interface="UIDefaults.ActiveValue"/>
                <implements interface="UIResource"/>
                <javadoc line="488">
                    Simple Symbolic Link style UIDefalts Property                    
                </javadoc>
                <declaration name="dstPropName" type="String" line="492"/>
                <method name="LinkProperty" type="constructor" line="494">
                    <params>
                        <param name="dstPropName" type="String"/>
                    </params>
                </method>
                <method name="createValue" type="Object" line="499">
                    <params>
                        <param name="table" type="UIDefaults"/>
                    </params>
                </method>
            </class>
            <class name="NimbusProperty" line="504">
                <implements interface="UIDefaults.ActiveValue"/>
                <implements interface="UIResource"/>
                <javadoc line="504">
                    Nimbus Property that looks up Nimbus keys for standard key names. For
                      example &quot;Button.background&quot; --&gt; &quot;Button[Enabled].backgound&quot;                    
                </javadoc>
                <declaration name="prefix" type="String" line="509"/>
                <declaration name="state" type="String" line="510"/>
                <declaration name="suffix" type="String" line="511"/>
                <declaration name="isFont" type="boolean" line="512"/>
                <method name="NimbusProperty" type="constructor" line="514">
                    <params>
                        <param name="prefix" type="String"/>
                        <param name="suffix" type="String"/>
                    </params>
                </method>
                <method name="NimbusProperty" type="constructor" line="520">
                    <params>
                        <param name="prefix" type="String"/>
                        <param name="state" type="String"/>
                        <param name="suffix" type="String"/>
                    </params>
                </method>
                <javadoc line="525">
                    Creates the value retrieved from the &lt;code&gt;UIDefaults&lt;/code&gt; table.
                      The object is created each time it is accessed.                    
                    <param>
                        table a <code>UIDefaults</code> table                        
                    </param>
                    <return>
                        the created <code>Object</code>                        
                    </return>
                </javadoc>
                <method name="createValue" type="Object" line="533">
                    <params>
                        <param name="table" type="UIDefaults"/>
                    </params>
                    <comment line="535">
                        check specified state                        
                    </comment>
                    <comment line="539">
                        check enabled state                        
                    </comment>
                    <comment line="543">
                        check for defaults                        
                    </comment>
                    <declaration name="obj" type="Object" line="534"/>
                    <scope line="536"/>
                    <scope line="540"/>
                    <scope line="544">
                        <scope line="545"/>
                        <scope line="547"/>
                    </scope>
                </method>
            </class>
            <declaration name="compiledDefaults" type="Map&lt;String,Map&lt;String,Object&gt;&gt;" line="555"/>
            <declaration name="defaultListenerAdded" type="boolean" line="556"/>
            <method name="parsePrefix" type="String" line="558">
                <params>
                    <param name="key" type="String"/>
                </params>
                <scope line="559"/>
                <declaration name="inquotes" type="boolean" line="562"/>
                <scope line="563">
                    <declaration name="c" type="char" line="564"/>
                    <scope line="565"/>
                    <scope line="567"/>
                </scope>
            </method>
            <method name="getDefaultsForPrefix" type="Map<String,Object>" line="574">
                <params>
                    <param name="prefix" type="String"/>
                </params>
                <scope line="575">
                    <scope line="577">
                        <scope line="578"/>
                    </scope>
                    <scope line="582"/>
                </scope>
            </method>
            <method name="addDefault" type="void" line="590">
                <params>
                    <param name="key" type="String"/>
                    <param name="value" type="Object"/>
                </params>
                <scope line="591"/>
                <declaration name="prefix" type="String" line="595"/>
                <scope line="596">
                    <declaration name="keys" type="Map&lt;String,Object&gt;" line="597"/>
                    <scope line="598"/>
                </scope>
            </method>
            <class name="DefaultsListener" line="606">
                <implements interface="PropertyChangeListener"/>
                <method name="propertyChange" type="void" line="607">
                    <params>
                        <param name="ev" type="PropertyChangeEvent"/>
                    </params>
                    <declaration name="key" type="String" line="608"/>
                    <scope line="609"/>
                    <scope line="611"/>
                </method>
            </class>
        </class>
    </source>