<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.plaf.synth">
        <import package="java.awt"/>
        <import package="javax.swing"/>
        <import package="javax.swing.plaf.UIResource"/>
        <class name="SynthArrowButton" line="31">
            <extends class="JButton"/>
            <implements interface="SwingConstants"/>
            <implements interface="UIResource"/>
            <javadoc line="31">
                JButton object that draws a scaled Arrow in one of the cardinal directions.                
                <author>
                    Scott Violet                    
                </author>
            </javadoc>
            <declaration name="direction" type="int" line="37"/>
            <method name="SynthArrowButton" type="constructor" line="39">
                <params>
                    <param name="direction" type="int"/>
                </params>
            </method>
            <method name="getUIClassID" type="String" line="46"/>
            <method name="updateUI" type="void" line="50"/>
            <method name="setDirection" type="void" line="54">
                <params>
                    <param name="dir" type="int"/>
                </params>
            </method>
            <method name="getDirection" type="int" line="60"/>
            <method name="setFocusable" type="void" line="64">
                <params>
                    <param name="focusable" type="boolean"/>
                </params>
            </method>
            <class name="SynthArrowButtonUI" line="66">
                <extends class="SynthButtonUI"/>
                <method name="installDefaults" type="void" line="67">
                    <params>
                        <param name="b" type="AbstractButton"/>
                    </params>
                </method>
                <method name="paint" type="void" line="72">
                    <params>
                        <param name="context" type="SynthContext"/>
                        <param name="g" type="Graphics"/>
                    </params>
                    <declaration name="button" type="SynthArrowButton" line="73"/>
                </method>
                <method name="paintBackground" type="void" line="80">
                    <params>
                        <param name="context" type="SynthContext"/>
                        <param name="g" type="Graphics"/>
                        <param name="c" type="JComponent"/>
                    </params>
                </method>
                <method name="paintBorder" type="void" line="86">
                    <params>
                        <param name="context" type="SynthContext"/>
                        <param name="g" type="Graphics"/>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                        <param name="w" type="int"/>
                        <param name="h" type="int"/>
                    </params>
                </method>
                <method name="getMinimumSize" type="Dimension" line="90"/>
                <method name="getMaximumSize" type="Dimension" line="94"/>
                <method name="getPreferredSize" type="Dimension" line="98">
                    <params>
                        <param name="c" type="JComponent"/>
                    </params>
                    <comment line="103">
                        ScrollBar arrow buttons can be non-square when
                         the ScrollBar.squareButtons property is set to FALSE
                         and the ScrollBar.buttonSize property is non-null                        
                    </comment>
                    <comment line="110">
                        For all other cases (including Spinner, ComboBox), we will
                         fall back on the single ArrowButton.size value to create
                         a square return value                        
                    </comment>
                    <comment line="118">
                        handle scaling for sizeVarients for special case components. The
                         key &quot;JComponent.sizeVariant&quot; scales for large/small/mini
                         components are based on Apples LAF                        
                    </comment>
                    <declaration name="context" type="SynthContext" line="99"/>
                    <declaration name="dim" type="Dimension" line="100"/>
                    <scope line="101"/>
                    <scope line="108">
                        <declaration name="size" type="int" line="112"/>
                    </scope>
                    <declaration name="parent" type="Container" line="120"/>
                    <scope line="121">
                        <declaration name="scaleKey" type="Object" line="122"/>
                        <scope line="124">
                            <scope line="125"/>
                            <scope line="129"/>
                            <scope line="133"/>
                        </scope>
                    </scope>
                </method>
            </class>
        </class>
    </source>