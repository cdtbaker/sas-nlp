<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.plaf.multi">
        <import package="java.util.Vector"/>
        <import package="javax.swing.plaf.FileChooserUI"/>
        <import package="javax.swing.filechooser.FileFilter"/>
        <import package="javax.swing.JFileChooser"/>
        <import package="javax.swing.filechooser.FileView"/>
        <import package="java.lang.String"/>
        <import package="java.io.File"/>
        <import package="javax.swing.plaf.ComponentUI"/>
        <import package="javax.swing.JComponent"/>
        <import package="java.awt.Graphics"/>
        <import package="java.awt.Dimension"/>
        <import package="javax.accessibility.Accessible"/>
        <class name="MultiFileChooserUI" line="40">
            <extends class="FileChooserUI"/>
            <comment line="58">
                //////////////////
                 Common UI methods                
            </comment>
            <comment line="71">
                //////////////////
                 FileChooserUI methods                
            </comment>
            <comment line="153">
                //////////////////
                 ComponentUI methods                
            </comment>
            <javadoc line="40">
                A multiplexing UI used to combine &lt;code&gt;FileChooserUI&lt;/code&gt;s.
                  &lt;p&gt;This file was automatically generated by AutoMulti.                
                <author>
                    Otto Multey                    
                </author>
            </javadoc>
            <declaration name="uis" type="Vector" line="49"/>
            <javadoc line="49">
                The vector containing the real UIs.  This is populated
                  in the call to &lt;code&gt;createUI&lt;/code&gt;, and can be obtained by calling
                  the &lt;code&gt;getUIs&lt;/code&gt; method.  The first element is guaranteed to be the real UI
                  obtained from the default look and feel.                
            </javadoc>
            <javadoc line="61">
                Returns the list of UIs associated with this multiplexing UI.  This
                  allows processing of the UIs by an application aware of multiplexing
                  UIs on components.                
            </javadoc>
            <method name="getUIs" type="ComponentUI[]" line="66"/>
            <javadoc line="74">
                Invokes the &lt;code&gt;getAcceptAllFileFilter&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default <code>LookAndFeel</code>                    
                </return>
            </javadoc>
            <method name="getAcceptAllFileFilter" type="FileFilter" line="80">
                <params>
                    <param name="a" type="JFileChooser"/>
                </params>
                <declaration name="returnValue" type="FileFilter" line="81"/>
                <scope line="83"/>
            </method>
            <javadoc line="89">
                Invokes the &lt;code&gt;getFileView&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default <code>LookAndFeel</code>                    
                </return>
            </javadoc>
            <method name="getFileView" type="FileView" line="95">
                <params>
                    <param name="a" type="JFileChooser"/>
                </params>
                <declaration name="returnValue" type="FileView" line="96"/>
                <scope line="98"/>
            </method>
            <javadoc line="104">
                Invokes the &lt;code&gt;getApproveButtonText&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default <code>LookAndFeel</code>                    
                </return>
            </javadoc>
            <method name="getApproveButtonText" type="String" line="110">
                <params>
                    <param name="a" type="JFileChooser"/>
                </params>
                <declaration name="returnValue" type="String" line="111"/>
                <scope line="113"/>
            </method>
            <javadoc line="119">
                Invokes the &lt;code&gt;getDialogTitle&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default <code>LookAndFeel</code>                    
                </return>
            </javadoc>
            <method name="getDialogTitle" type="String" line="125">
                <params>
                    <param name="a" type="JFileChooser"/>
                </params>
                <declaration name="returnValue" type="String" line="126"/>
                <scope line="128"/>
            </method>
            <javadoc line="134">
                Invokes the &lt;code&gt;rescanCurrentDirectory&lt;/code&gt; method on each UI handled by this object.                
            </javadoc>
            <method name="rescanCurrentDirectory" type="void" line="137">
                <params>
                    <param name="a" type="JFileChooser"/>
                </params>
                <scope line="138"/>
            </method>
            <javadoc line="143">
                Invokes the &lt;code&gt;ensureFileIsVisible&lt;/code&gt; method on each UI handled by this object.                
            </javadoc>
            <method name="ensureFileIsVisible" type="void" line="146">
                <params>
                    <param name="a" type="JFileChooser"/>
                    <param name="b" type="File"/>
                </params>
                <scope line="147"/>
            </method>
            <javadoc line="156">
                Invokes the &lt;code&gt;contains&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default <code>LookAndFeel</code>                    
                </return>
            </javadoc>
            <method name="contains" type="boolean" line="162">
                <params>
                    <param name="a" type="JComponent"/>
                    <param name="b" type="int"/>
                    <param name="c" type="int"/>
                </params>
                <declaration name="returnValue" type="boolean" line="163"/>
                <scope line="165"/>
            </method>
            <javadoc line="171">
                Invokes the &lt;code&gt;update&lt;/code&gt; method on each UI handled by this object.                
            </javadoc>
            <method name="update" type="void" line="174">
                <params>
                    <param name="a" type="Graphics"/>
                    <param name="b" type="JComponent"/>
                </params>
                <scope line="175"/>
            </method>
            <javadoc line="180">
                Returns a multiplexing UI instance if any of the auxiliary
                  &lt;code&gt;LookAndFeel&lt;/code&gt;s supports this UI.  Otherwise, just returns the
                  UI object obtained from the default &lt;code&gt;LookAndFeel&lt;/code&gt;.                
            </javadoc>
            <method name="createUI" type="ComponentUI" line="185">
                <params>
                    <param name="a" type="JComponent"/>
                </params>
                <declaration name="mui" type="ComponentUI" line="186"/>
            </method>
            <javadoc line="192">
                Invokes the &lt;code&gt;installUI&lt;/code&gt; method on each UI handled by this object.                
            </javadoc>
            <method name="installUI" type="void" line="195">
                <params>
                    <param name="a" type="JComponent"/>
                </params>
                <scope line="196"/>
            </method>
            <javadoc line="201">
                Invokes the &lt;code&gt;uninstallUI&lt;/code&gt; method on each UI handled by this object.                
            </javadoc>
            <method name="uninstallUI" type="void" line="204">
                <params>
                    <param name="a" type="JComponent"/>
                </params>
                <scope line="205"/>
            </method>
            <javadoc line="210">
                Invokes the &lt;code&gt;paint&lt;/code&gt; method on each UI handled by this object.                
            </javadoc>
            <method name="paint" type="void" line="213">
                <params>
                    <param name="a" type="Graphics"/>
                    <param name="b" type="JComponent"/>
                </params>
                <scope line="214"/>
            </method>
            <javadoc line="219">
                Invokes the &lt;code&gt;getPreferredSize&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default <code>LookAndFeel</code>                    
                </return>
            </javadoc>
            <method name="getPreferredSize" type="Dimension" line="225">
                <params>
                    <param name="a" type="JComponent"/>
                </params>
                <declaration name="returnValue" type="Dimension" line="226"/>
                <scope line="228"/>
            </method>
            <javadoc line="234">
                Invokes the &lt;code&gt;getMinimumSize&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default <code>LookAndFeel</code>                    
                </return>
            </javadoc>
            <method name="getMinimumSize" type="Dimension" line="240">
                <params>
                    <param name="a" type="JComponent"/>
                </params>
                <declaration name="returnValue" type="Dimension" line="241"/>
                <scope line="243"/>
            </method>
            <javadoc line="249">
                Invokes the &lt;code&gt;getMaximumSize&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default <code>LookAndFeel</code>                    
                </return>
            </javadoc>
            <method name="getMaximumSize" type="Dimension" line="255">
                <params>
                    <param name="a" type="JComponent"/>
                </params>
                <declaration name="returnValue" type="Dimension" line="256"/>
                <scope line="258"/>
            </method>
            <javadoc line="264">
                Invokes the &lt;code&gt;getAccessibleChildrenCount&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default <code>LookAndFeel</code>                    
                </return>
            </javadoc>
            <method name="getAccessibleChildrenCount" type="int" line="270">
                <params>
                    <param name="a" type="JComponent"/>
                </params>
                <declaration name="returnValue" type="int" line="271"/>
                <scope line="273"/>
            </method>
            <javadoc line="279">
                Invokes the &lt;code&gt;getAccessibleChild&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default <code>LookAndFeel</code>                    
                </return>
            </javadoc>
            <method name="getAccessibleChild" type="Accessible" line="285">
                <params>
                    <param name="a" type="JComponent"/>
                    <param name="b" type="int"/>
                </params>
                <declaration name="returnValue" type="Accessible" line="286"/>
                <scope line="288"/>
            </method>
        </class>
    </source>