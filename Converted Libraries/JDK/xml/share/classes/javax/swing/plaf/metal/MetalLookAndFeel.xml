<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.plaf.metal">
        <import package="java.awt"/>
        <import package="java.beans.PropertyChangeEvent"/>
        <import package="java.beans.PropertyChangeListener"/>
        <import package="javax.swing.plaf"/>
        <import package="javax.swing"/>
        <import package="javax.swing.plaf.basic"/>
        <import package="javax.swing.text.DefaultEditorKit"/>
        <import package="java.awt.Color"/>
        <import package="java.awt.event.KeyEvent"/>
        <import package="java.lang.reflect"/>
        <import package="java.lang.ref.ReferenceQueue"/>
        <import package="java.lang.ref.WeakReference"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="sun.awt"/>
        <import package="sun.security.action.GetPropertyAction"/>
        <import package="sun.swing.DefaultLayoutStyle"/>
        <import package="sun.swing.SwingLazyValue"/>
        <import package="sun.swing.SwingUtilities2"/>
        <class name="MetalLookAndFeel" line="51">
            <extends class="BasicLookAndFeel"/>
            <comment line="2368">
                From the JLF Design Guidelines:
                 http:java.sun.com/products/jlf/ed2/book/HIG.Visual2.html                
            </comment>
            <javadoc line="51">
                The Java Look and Feel, otherwise known as Metal.
                  &lt;p&gt;
                  Each of the {@code ComponentUI}s provided by {@codeMetalLookAndFeel} derives its behavior from the defaults
                  table. Unless otherwise noted each of the {@code ComponentUI}implementations in this package document the set of defaults they
                  use. Unless otherwise noted the defaults are installed at the time{@code installUI} is invoked, and follow the recommendations
                  outlined in {@code LookAndFeel} for installing defaults.
                  &lt;p&gt;{@code MetalLookAndFeel} derives it&apos;s color palette and fonts from{@code MetalTheme}. The default theme is {@code OceanTheme}. The theme
                  can be changed using the {@code setCurrentTheme} method, refer to it
                  for details on changing the theme. Prior to 1.5 the default
                  theme was {@code DefaultMetalTheme}. The system property{@code &quot;swing.metalTheme&quot;} can be set to {@code &quot;steel&quot;} to indicate
                  the default should be {@code DefaultMetalTheme}.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <see>
                    MetalTheme                    
                </see>
                <see>
                    DefaultMetalTheme                    
                </see>
                <see>
                    OceanTheme                    
                </see>
                <author>
                    Steve Wilson                    
                </author>
            </javadoc>
            <declaration name="METAL_LOOK_AND_FEEL_INITED" type="boolean" line="88"/>
            <declaration name="checkedWindows" type="boolean" line="91"/>
            <javadoc line="91">
                True if checked for windows yet.                
            </javadoc>
            <declaration name="isWindows" type="boolean" line="95"/>
            <javadoc line="95">
                True if running on Windows.                
            </javadoc>
            <declaration name="checkedSystemFontSettings" type="boolean" line="100"/>
            <javadoc line="100">
                Set to true first time we&apos;ve checked swing.useSystemFontSettings.                
            </javadoc>
            <declaration name="useSystemFonts" type="boolean" line="105"/>
            <javadoc line="105">
                True indicates we should use system fonts, unless the developer has
                  specified otherwise with Application.useSystemFontSettings.                
            </javadoc>
            <javadoc line="112">
                Returns true if running on Windows.                
            </javadoc>
            <method name="isWindows" type="boolean" line="115">
                <scope line="116">
                    <declaration name="osType" type="OSInfo.OSType" line="117"/>
                    <scope line="118">
                        <declaration name="systemFonts" type="String" line="120"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="130">
                Returns true if system fonts should be used, this is only useful
                  for windows.                
            </javadoc>
            <method name="useSystemFonts" type="boolean" line="134">
                <comment line="143">
                    If an instanceof MetalLookAndFeel hasn&apos;t been inited yet, we
                     don&apos;t want to trigger loading of a UI by asking the UIManager
                     for a property, assume the user wants system fonts. This will
                     be properly adjusted when install is invoked on the
                     MetalTheme                    
                </comment>
                <scope line="135">
                    <scope line="136">
                        <declaration name="value" type="Object" line="137"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="152">
                Returns true if the high contrast theme should be used as the default
                  theme.                
            </javadoc>
            <method name="useHighContrastTheme" type="boolean" line="156">
                <scope line="157">
                    <declaration name="highContrast" type="Boolean" line="158"/>
                </scope>
            </method>
            <javadoc line="167">
                Returns true if we&apos;re using the Ocean Theme.                
            </javadoc>
            <method name="usingOcean" type="boolean" line="170"/>
            <javadoc line="174">
                Returns the name of this look and feel. This returns{@code &quot;Metal&quot;}.                
                <return>
                    the name of this look and feel                    
                </return>
            </javadoc>
            <method name="getName" type="String" line="180"/>
            <javadoc line="184">
                Returns an identifier for this look and feel. This returns{@code &quot;Metal&quot;}.                
                <return>
                    the identifier of this look and feel                    
                </return>
            </javadoc>
            <method name="getID" type="String" line="190"/>
            <javadoc line="194">
                Returns a short description of this look and feel. This returns{@code &quot;The Java(tm) Look and Feel&quot;}.                
                <return>
                    a short description for the look and feel                    
                </return>
            </javadoc>
            <method name="getDescription" type="String" line="200"/>
            <javadoc line="204">
                Returns {@code false}; {@code MetalLookAndFeel} is not a native
                  look and feel.                
                <return>
                    {@code false}                    
                </return>
            </javadoc>
            <method name="isNativeLookAndFeel" type="boolean" line="210"/>
            <javadoc line="214">
                Returns {@code true}; {@code MetalLookAndFeel} can be run on
                  any platform.                
                <return>
                    {@code true}                    
                </return>
            </javadoc>
            <method name="isSupportedLookAndFeel" type="boolean" line="220"/>
            <javadoc line="224">
                Returns {@code true}; metal can provide {@code Window}decorations.                
                <return>
                    {@code true}                    
                </return>
                <see>
                    JDialog#setDefaultLookAndFeelDecorated                    
                </see>
                <see>
                    JFrame#setDefaultLookAndFeelDecorated                    
                </see>
                <see>
                    JRootPane#setWindowDecorationStyle                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getSupportsWindowDecorations" type="boolean" line="235"/>
            <javadoc line="239">
                Populates {@code table} with mappings from {@code uiClassID} to
                  the fully qualified name of the ui class. {@codeMetalLookAndFeel} registers an entry for each of the classes in
                  the package {@code javax.swing.plaf.metal} that are named
                  MetalXXXUI. The string {@code XXX} is one of Swing&apos;s uiClassIDs. For
                  the {@code uiClassIDs} that do not have a class in metal, the
                  corresponding class in {@code javax.swing.plaf.basic} is
                  used. For example, metal does not have a class named {@code&quot;MetalColorChooserUI&quot;}, as such, {@codejavax.swing.plaf.basic.BasicColorChooserUI} is used.                
                <param>
                    table the {@code UIDefaults} instance the entries are
                      added to                    
                </param>
                <throws>
                    NullPointerException if {@code table} is {@code null}                    
                </throws>
                <see>
                    javax.swing.plaf.basic.BasicLookAndFeel#initClassDefaults                    
                </see>
            </javadoc>
            <method name="initClassDefaults" type="void" line="258">
                <params>
                    <param name="table" type="UIDefaults"/>
                </params>
                <declaration name="metalPackageName" type="String" line="260"/>
                <declaration name="uiDefaults" type="Object[]" line="262"/>
            </method>
            <javadoc line="290">
                Populates {@code table} with system colors. The following values are
                  added to {@code table}:
                  &lt;table border=&quot;1&quot; cellpadding=&quot;1&quot; cellspacing=&quot;0&quot;
                  summary=&quot;Metal&apos;s system color mapping&quot;
                  valign=&quot;top&quot; &gt;
                  &lt;tr valign=&quot;top&quot;  align=&quot;left&quot;&gt;
                  &lt;th bgcolor=&quot;#CCCCFF&quot; align=&quot;left&quot;&gt;Key
                  &lt;th bgcolor=&quot;#CCCCFF&quot; align=&quot;left&quot;&gt;Value
                  &lt;tr valign=&quot;top&quot;  align=&quot;left&quot;&gt;
                  &lt;td&gt;&quot;desktop&quot;
                  &lt;td&gt;{@code theme.getDesktopColor()}&lt;tr valign=&quot;top&quot;  align=&quot;left&quot;&gt;
                  &lt;td&gt;&quot;activeCaption&quot;
                  &lt;td&gt;{@code theme.getWindowTitleBackground()}&lt;tr valign=&quot;top&quot;  align=&quot;left&quot;&gt;
                  &lt;td&gt;&quot;activeCaptionText&quot;
                  &lt;td&gt;{@code theme.getWindowTitleForeground()}&lt;tr valign=&quot;top&quot;  align=&quot;left&quot;&gt;
                  &lt;td&gt;&quot;activeCaptionBorder&quot;
                  &lt;td&gt;{@code theme.getPrimaryControlShadow()}&lt;tr valign=&quot;top&quot;  align=&quot;left&quot;&gt;
                  &lt;td&gt;&quot;inactiveCaption&quot;
                  &lt;td&gt;{@code theme.getWindowTitleInactiveBackground()}&lt;tr valign=&quot;top&quot;  align=&quot;left&quot;&gt;
                  &lt;td&gt;&quot;inactiveCaptionText&quot;
                  &lt;td&gt;{@code theme.getWindowTitleInactiveForeground()}&lt;tr valign=&quot;top&quot;  align=&quot;left&quot;&gt;
                  &lt;td&gt;&quot;inactiveCaptionBorder&quot;
                  &lt;td&gt;{@code theme.getControlShadow()}&lt;tr valign=&quot;top&quot;  align=&quot;left&quot;&gt;
                  &lt;td&gt;&quot;window&quot;
                  &lt;td&gt;{@code theme.getWindowBackground()}&lt;tr valign=&quot;top&quot;  align=&quot;left&quot;&gt;
                  &lt;td&gt;&quot;windowBorder&quot;
                  &lt;td&gt;{@code theme.getControl()}&lt;tr valign=&quot;top&quot;  align=&quot;left&quot;&gt;
                  &lt;td&gt;&quot;windowText&quot;
                  &lt;td&gt;{@code theme.getUserTextColor()}&lt;tr valign=&quot;top&quot;  align=&quot;left&quot;&gt;
                  &lt;td&gt;&quot;menu&quot;
                  &lt;td&gt;{@code theme.getMenuBackground()}&lt;tr valign=&quot;top&quot;  align=&quot;left&quot;&gt;
                  &lt;td&gt;&quot;menuText&quot;
                  &lt;td&gt;{@code theme.getMenuForeground()}&lt;tr valign=&quot;top&quot;  align=&quot;left&quot;&gt;
                  &lt;td&gt;&quot;text&quot;
                  &lt;td&gt;{@code theme.getWindowBackground()}&lt;tr valign=&quot;top&quot;  align=&quot;left&quot;&gt;
                  &lt;td&gt;&quot;textText&quot;
                  &lt;td&gt;{@code theme.getUserTextColor()}&lt;tr valign=&quot;top&quot;  align=&quot;left&quot;&gt;
                  &lt;td&gt;&quot;textHighlight&quot;
                  &lt;td&gt;{@code theme.getTextHighlightColor()}&lt;tr valign=&quot;top&quot;  align=&quot;left&quot;&gt;
                  &lt;td&gt;&quot;textHighlightText&quot;
                  &lt;td&gt;{@code theme.getHighlightedTextColor()}&lt;tr valign=&quot;top&quot;  align=&quot;left&quot;&gt;
                  &lt;td&gt;&quot;textInactiveText&quot;
                  &lt;td&gt;{@code theme.getInactiveSystemTextColor()}&lt;tr valign=&quot;top&quot;  align=&quot;left&quot;&gt;
                  &lt;td&gt;&quot;control&quot;
                  &lt;td&gt;{@code theme.getControl()}&lt;tr valign=&quot;top&quot;  align=&quot;left&quot;&gt;
                  &lt;td&gt;&quot;controlText&quot;
                  &lt;td&gt;{@code theme.getControlTextColor()}&lt;tr valign=&quot;top&quot;  align=&quot;left&quot;&gt;
                  &lt;td&gt;&quot;controlHighlight&quot;
                  &lt;td&gt;{@code theme.getControlHighlight()}&lt;tr valign=&quot;top&quot;  align=&quot;left&quot;&gt;
                  &lt;td&gt;&quot;controlLtHighlight&quot;
                  &lt;td&gt;{@code theme.getControlHighlight()}&lt;tr valign=&quot;top&quot;  align=&quot;left&quot;&gt;
                  &lt;td&gt;&quot;controlShadow&quot;
                  &lt;td&gt;{@code theme.getControlShadow()}&lt;tr valign=&quot;top&quot;  align=&quot;left&quot;&gt;
                  &lt;td&gt;&quot;controlDkShadow&quot;
                  &lt;td&gt;{@code theme.getControlDarkShadow()}&lt;tr valign=&quot;top&quot;  align=&quot;left&quot;&gt;
                  &lt;td&gt;&quot;scrollbar&quot;
                  &lt;td&gt;{@code theme.getControl()}&lt;tr valign=&quot;top&quot;  align=&quot;left&quot;&gt;
                  &lt;td&gt;&quot;info&quot;
                  &lt;td&gt;{@code theme.getPrimaryControl()}&lt;tr valign=&quot;top&quot;  align=&quot;left&quot;&gt;
                  &lt;td&gt;&quot;infoText&quot;
                  &lt;td&gt;{@code theme.getPrimaryControlInfo()}&lt;/table&gt;
                  The value {@code theme} corresponds to the current {@code MetalTheme}.                
                <param>
                    table the {@code UIDefaults} object the values are added to                    
                </param>
                <throws>
                    NullPointerException if {@code table} is {@code null}                    
                </throws>
            </javadoc>
            <method name="initSystemColorDefaults" type="void" line="384">
                <params>
                    <param name="table" type="UIDefaults"/>
                </params>
                <comment line="389">
                                        
                </comment>
                <comment line="390">
                                        
                </comment>
                <comment line="391">
                                        
                </comment>
                <comment line="392">
                                        
                </comment>
                <comment line="393">
                                        
                </comment>
                <comment line="394">
                                        
                </comment>
                <comment line="395">
                                        
                </comment>
                <comment line="396">
                                        
                </comment>
                <comment line="397">
                                        
                </comment>
                <comment line="398">
                                        
                </comment>
                <comment line="399">
                                        
                </comment>
                <comment line="400">
                                        
                </comment>
                <comment line="401">
                                        
                </comment>
                <comment line="402">
                                        
                </comment>
                <comment line="403">
                                        
                </comment>
                <comment line="404">
                                        
                </comment>
                <comment line="405">
                                        
                </comment>
                <comment line="406">
                                        
                </comment>
                <comment line="407">
                                        
                </comment>
                <comment line="408">
                                        
                </comment>
                <comment line="409">
                                        
                </comment>
                <comment line="410">
                                        
                </comment>
                <comment line="411">
                                        
                </comment>
                <comment line="412">
                                        
                </comment>
                <comment line="413">
                                        
                </comment>
                <comment line="414">
                                        
                </comment>
                <declaration name="theme" type="MetalTheme" line="385"/>
                <declaration name="control" type="Color" line="386"/>
                <declaration name="systemColors" type="Object[]" line="387"/>
            </method>
            <javadoc line="419">
                Initialize the defaults table with the name of the ResourceBundle
                  used for getting localized defaults.                
            </javadoc>
            <method name="initResourceBundle" type="void" line="423">
                <params>
                    <param name="table" type="UIDefaults"/>
                </params>
            </method>
            <javadoc line="427">
                Populates {@code table} with the defaults for metal.                
                <param>
                    table the {@code UIDefaults} to add the values to                    
                </param>
                <throws>
                    NullPointerException if {@code table} is {@code null}                    
                </throws>
            </javadoc>
            <method name="initComponentDefaults" type="void" line="433">
                <params>
                    <param name="table" type="UIDefaults"/>
                </params>
                <comment line="509">
                                        
                </comment>
                <comment line="510">
                                        
                </comment>
                <comment line="549">
                                        
                </comment>
                <comment line="550">
                                        
                </comment>
                <comment line="607">
                                        
                </comment>
                <comment line="615">
                                        
                </comment>
                <comment line="693">
                    DEFAULTS TABLE                    
                </comment>
                <comment line="698">
                    *** Auditory Feedback                    
                </comment>
                <comment line="700">
                    this key defines which of the various cues to render
                     This is disabled until sound bugs can be resolved.                    
                </comment>
                <comment line="702">
                    defaultCueList,                    
                </comment>
                <comment line="704">
                    Text (Note: many are inherited)                    
                </comment>
                <comment line="709">
                    passwordField.font should actually map to
                     win.ansiFixed.font.height on windows.                    
                </comment>
                <comment line="714">
                    TextArea.font should actually map to win.ansiFixed.font.height
                     on windows.                    
                </comment>
                <comment line="730">
                    FormattedTextFields                    
                </comment>
                <comment line="782">
                    Buttons                    
                </comment>
                <comment line="804">
                    margin is 2 all the way around, BasicBorders.RadioButtonBorder
                     (checkbox uses RadioButtonBorder) is 2 all the way around too.                    
                </comment>
                <comment line="818">
                    margin is 2 all the way around, BasicBorders.RadioButtonBorder
                     is 2 all the way around too.                    
                </comment>
                <comment line="834">
                    File View                    
                </comment>
                <comment line="841">
                    File Chooser                    
                </comment>
                <comment line="861">
                    ToolTip                    
                </comment>
                <comment line="869">
                    ToolTipManager                    
                </comment>
                <comment line="872">
                    Slider Defaults                    
                </comment>
                <comment line="900">
                    Progress Bar                    
                </comment>
                <comment line="908">
                    Combo Box                    
                </comment>
                <comment line="932">
                    Internal Frame Defaults                    
                </comment>
                <comment line="961">
                    Internal Frame Auditory Cue Mappings                    
                </comment>
                <comment line="968">
                    Desktop Icon                    
                </comment>
                <comment line="1008">
                    Titled Border                    
                </comment>
                <comment line="1013">
                    Label                    
                </comment>
                <comment line="1018">
                    List                    
                </comment>
                <comment line="1089">
                    ScrollBar                    
                </comment>
                <comment line="1115">
                    ScrollPane                    
                </comment>
                <comment line="1135">
                    Tabbed Pane                    
                </comment>
                <comment line="1166">
                    Table                    
                </comment>
                <comment line="1172">
                    grid line color                    
                </comment>
                <comment line="1258">
                    MenuBar                    
                </comment>
                <comment line="1264">
                    Menu                    
                </comment>
                <comment line="1281">
                    Menu Item                    
                </comment>
                <comment line="1294">
                    Menu Item Auditory Cue Mapping                    
                </comment>
                <comment line="1297">
                    OptionPane.                    
                </comment>
                <comment line="1300">
                    Option Pane Auditory Cue Mappings                    
                </comment>
                <comment line="1306">
                    Option Pane Special Dialog Colors, used when MetalRootPaneUI
                     is providing window manipulation widgets.                    
                </comment>
                <comment line="1332">
                    OptionPane fonts are defined below                    
                </comment>
                <comment line="1334">
                    Separator                    
                </comment>
                <comment line="1338">
                    Popup Menu                    
                </comment>
                <comment line="1340">
                    Popup Menu Auditory Cue Mappings                    
                </comment>
                <comment line="1344">
                    CB &amp; RB Menu Item                    
                </comment>
                <comment line="1383">
                    SplitPane                    
                </comment>
                <comment line="1406">
                    Tree
                     Tree.font was mapped to system font pre 1.4.1                    
                </comment>
                <comment line="1423">
                    horiz lines                    
                </comment>
                <comment line="1424">
                    legs                    
                </comment>
                <comment line="1493">
                    ToolBar                    
                </comment>
                <comment line="1520">
                    RootPane                    
                </comment>
                <comment line="1532">
                    These bindings are only enabled when there is a default
                     button set on the rootpane.                    
                </comment>
                <comment line="1555">
                    Remove old listeners                    
                </comment>
                <declaration name="acceleratorForeground" type="Color" line="438"/>
                <declaration name="acceleratorSelectedForeground" type="Color" line="439"/>
                <declaration name="control" type="Color" line="440"/>
                <declaration name="controlHighlight" type="Color" line="441"/>
                <declaration name="controlShadow" type="Color" line="442"/>
                <declaration name="controlDarkShadow" type="Color" line="443"/>
                <declaration name="controlTextColor" type="Color" line="444"/>
                <declaration name="focusColor" type="Color" line="445"/>
                <declaration name="inactiveControlTextColor" type="Color" line="446"/>
                <declaration name="menuBackground" type="Color" line="447"/>
                <declaration name="menuSelectedBackground" type="Color" line="448"/>
                <declaration name="menuDisabledForeground" type="Color" line="449"/>
                <declaration name="menuSelectedForeground" type="Color" line="450"/>
                <declaration name="primaryControl" type="Color" line="451"/>
                <declaration name="primaryControlDarkShadow" type="Color" line="452"/>
                <declaration name="primaryControlShadow" type="Color" line="453"/>
                <declaration name="systemTextColor" type="Color" line="454"/>
                <declaration name="zeroInsets" type="Insets" line="456"/>
                <declaration name="zero" type="Integer" line="458"/>
                <declaration name="textFieldBorder" type="Object" line="460"/>
                <declaration name="dialogBorder" type="Object" line="464"/>
                <declaration name="questionDialogBorder" type="Object" line="467"/>
                <declaration name="fieldInputMap" type="Object" line="470"/>
                <declaration name="passwordInputMap" type="Object" line="512"/>
                <declaration name="multilineInputMap" type="Object" line="552"/>
                <declaration name="scrollPaneBorder" type="Object" line="617"/>
                <declaration name="buttonBorder" type="Object" line="618"/>
                <declaration name="toggleButtonBorder" type="Object" line="622"/>
                <declaration name="titledBorderBorder" type="Object" line="626"/>
                <declaration name="desktopIconBorder" type="Object" line="631"/>
                <declaration name="menuBarBorder" type="Object" line="636"/>
                <declaration name="popupMenuBorder" type="Object" line="640"/>
                <declaration name="menuItemBorder" type="Object" line="643"/>
                <declaration name="menuItemAcceleratorDelimiter" type="Object" line="647"/>
                <declaration name="toolBarBorder" type="Object" line="648"/>
                <declaration name="progressBarBorder" type="Object" line="650"/>
                <declaration name="toolTipBorder" type="Object" line="654"/>
                <declaration name="toolTipBorderInactive" type="Object" line="658"/>
                <declaration name="focusCellHighlightBorder" type="Object" line="662"/>
                <declaration name="tabbedPaneTabAreaInsets" type="Object" line="666"/>
                <declaration name="tabbedPaneTabInsets" type="Object" line="668"/>
                <declaration name="internalFrameIconArgs" type="Object[]" line="670"/>
                <declaration name="defaultCueList" type="Object[]" line="673"/>
                <declaration name="theme" type="MetalTheme" line="679"/>
                <declaration name="menuTextValue" type="Object" line="680"/>
                <declaration name="controlTextValue" type="Object" line="682"/>
                <declaration name="userTextValue" type="Object" line="684"/>
                <declaration name="windowTitleValue" type="Object" line="686"/>
                <declaration name="subTextValue" type="Object" line="688"/>
                <declaration name="systemTextValue" type="Object" line="690"/>
                <declaration name="defaults" type="Object[]" line="696"/>
                <scope line="1543">
                    <declaration name="messageFont" type="Object" line="1544"/>
                </scope>
                <declaration name="lafCond" type="boolean" line="1556"/>
                <declaration name="aaTextInfo" type="Object" line="1557"/>
            </method>
            <javadoc line="1562">
                Ensures the current {@code MetalTheme} is {@code non-null}. This is
                  a cover method for {@code getCurrentTheme}.                
                <see>
                    #getCurrentTheme                    
                </see>
            </javadoc>
            <method name="createDefaultTheme" type="void" line="1568"/>
            <javadoc line="1572">
                Returns the look and feel defaults. This invokes, in order,{@code createDefaultTheme()}, {@code super.getDefaults()} and{@code getCurrentTheme().addCustomEntriesToTable(table)}.
                  &lt;p&gt;
                  While this method is public, it should only be invoked by the{@code UIManager} when the look and feel is set as the current
                  look and feel and after {@code initialize} has been invoked.                
                <return>
                    the look and feel defaults                    
                </return>
                <see>
                    #createDefaultTheme                    
                </see>
                <see>
                    javax.swing.plaf.basic.BasicLookAndFeel#getDefaults()                    
                </see>
                <see>
                    MetalTheme#addCustomEntriesToTable(UIDefaults)                    
                </see>
            </javadoc>
            <method name="getDefaults" type="UIDefaults" line="1587">
                <comment line="1589">
                    PENDING: move this to initialize when API changes are allowed                    
                </comment>
                <declaration name="table" type="UIDefaults" line="1592"/>
                <declaration name="currentTheme" type="MetalTheme" line="1593"/>
            </method>
            <javadoc line="1599">
                {@inheritDoc}                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="provideErrorFeedback" type="void" line="1604">
                <params>
                    <param name="component" type="Component"/>
                </params>
            </method>
            <javadoc line="1608">
                Set the theme used by &lt;code&gt;MetalLookAndFeel&lt;/code&gt;.
                  &lt;p&gt;
                  After the theme is set, {@code MetalLookAndFeel} needs to be
                  re-installed and the uis need to be recreated. The following
                  shows how to do this:
                  &lt;pre&gt;
                  MetalLookAndFeel.setCurrentTheme(theme);
                  // re-install the Metal Look and Feel
                  UIManager.setLookAndFeel(new MetalLookAndFeel());
                  // Update the ComponentUIs for all Components. This
                  // needs to be invoked for all windows.
                  SwingUtilities.updateComponentTreeUI(rootComponent);
                  &lt;/pre&gt;
                  If this is not done the results are undefined.                
                <param>
                    theme the theme to use                    
                </param>
                <throws>
                    NullPointerException if {@code theme} is {@code null}                    
                </throws>
                <see>
                    #getCurrentTheme                    
                </see>
            </javadoc>
            <method name="setCurrentTheme" type="void" line="1630">
                <params>
                    <param name="theme" type="MetalTheme"/>
                </params>
                <comment line="1632">
                    NOTE: because you need to recreate the look and feel after
                     this step, we don&apos;t bother blowing away any potential windows
                     values.                    
                </comment>
                <scope line="1634"/>
            </method>
            <javadoc line="1640">
                Return the theme currently being used by &lt;code&gt;MetalLookAndFeel&lt;/code&gt;.
                  If the current theme is {@code null}, the default theme is created.                
                <return>
                    the current theme                    
                </return>
                <see>
                    #setCurrentTheme                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getCurrentTheme" type="MetalTheme" line="1648">
                <comment line="1654">
                    This will happen in two cases:
                     . When MetalLookAndFeel is first being initialized.
                     . When a new AppContext has been created that hasn&apos;t
                       triggered UIManager to load a LAF. Rather than invoke
                       a method on the UIManager, which would trigger the loading
                       of a potentially different LAF, we directly set the
                       Theme here.                    
                </comment>
                <comment line="1665">
                    Create the default theme. We prefer Ocean, but will
                     use DefaultMetalTheme if told to.                    
                </comment>
                <declaration name="currentTheme" type="MetalTheme" line="1649"/>
                <declaration name="context" type="AppContext" line="1650"/>
                <scope line="1652">
                    <scope line="1660"/>
                    <scope line="1663">
                        <declaration name="theme" type="String" line="1666"/>
                        <scope line="1668"/>
                        <scope line="1671"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1680">
                Returns an &lt;code&gt;Icon&lt;/code&gt; with a disabled appearance.
                  This method is used to generate a disabled &lt;code&gt;Icon&lt;/code&gt; when
                  one has not been specified.  For example, if you create a
                  &lt;code&gt;JButton&lt;/code&gt; and only specify an &lt;code&gt;Icon&lt;/code&gt; via
                  &lt;code&gt;setIcon&lt;/code&gt; this method will be called to generate the
                  disabled &lt;code&gt;Icon&lt;/code&gt;. If null is passed as &lt;code&gt;icon&lt;/code&gt;
                  this method returns null.
                  &lt;p&gt;
                  Some look and feels might not render the disabled Icon, in which
                  case they will ignore this.                
                <param>
                    component JComponent that will display the Icon, may be null                    
                </param>
                <param>
                    icon Icon to generate disable icon from.                    
                </param>
                <return>
                    Disabled icon, or null if a suitable Icon can not be
                      generated.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getDisabledIcon" type="Icon" line="1698">
                <params>
                    <param name="component" type="JComponent"/>
                    <param name="icon" type="Icon"/>
                </params>
                <scope line="1699"/>
            </method>
            <javadoc line="1706">
                Returns an &lt;code&gt;Icon&lt;/code&gt; for use by disabled
                  components that are also selected. This method is used to generate an
                  &lt;code&gt;Icon&lt;/code&gt; for components that are in both the disabled and
                  selected states but do not have a specific &lt;code&gt;Icon&lt;/code&gt; for this
                  state.  For example, if you create a &lt;code&gt;JButton&lt;/code&gt; and only
                  specify an &lt;code&gt;Icon&lt;/code&gt; via &lt;code&gt;setIcon&lt;/code&gt; this method
                  will be called to generate the disabled and selected
                  &lt;code&gt;Icon&lt;/code&gt;. If null is passed as &lt;code&gt;icon&lt;/code&gt; this method
                  returns null.
                  &lt;p&gt;
                  Some look and feels might not render the disabled and selected Icon,
                  in which case they will ignore this.                
                <param>
                    component JComponent that will display the Icon, may be null                    
                </param>
                <param>
                    icon Icon to generate disabled and selected icon from.                    
                </param>
                <return>
                    Disabled and Selected icon, or null if a suitable Icon can not
                      be generated.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getDisabledSelectedIcon" type="Icon" line="1726">
                <params>
                    <param name="component" type="JComponent"/>
                    <param name="icon" type="Icon"/>
                </params>
                <scope line="1727"/>
            </method>
            <javadoc line="1734">
                Returns the control text font of the current theme. This is a
                  cover method for {@code getCurrentTheme().getControlTextColor()}.                
                <return>
                    the control text font                    
                </return>
                <see>
                    MetalTheme                    
                </see>
            </javadoc>
            <method name="getControlTextFont" type="FontUIResource" line="1742"/>
            <javadoc line="1744">
                Returns the sytem text font of the current theme. This is a
                  cover method for {@code getCurrentTheme().getSystemTextFont()}.                
                <return>
                    the system text font                    
                </return>
                <see>
                    MetalTheme                    
                </see>
            </javadoc>
            <method name="getSystemTextFont" type="FontUIResource" line="1752"/>
            <javadoc line="1754">
                Returns the user text font of the current theme. This is a
                  cover method for {@code getCurrentTheme().getUserTextFont()}.                
                <return>
                    the user text font                    
                </return>
                <see>
                    MetalTheme                    
                </see>
            </javadoc>
            <method name="getUserTextFont" type="FontUIResource" line="1762"/>
            <javadoc line="1764">
                Returns the menu text font of the current theme. This is a
                  cover method for {@code getCurrentTheme().getMenuTextFont()}.                
                <return>
                    the menu text font                    
                </return>
                <see>
                    MetalTheme                    
                </see>
            </javadoc>
            <method name="getMenuTextFont" type="FontUIResource" line="1772"/>
            <javadoc line="1774">
                Returns the window title font of the current theme. This is a
                  cover method for {@code getCurrentTheme().getWindowTitleFont()}.                
                <return>
                    the window title font                    
                </return>
                <see>
                    MetalTheme                    
                </see>
            </javadoc>
            <method name="getWindowTitleFont" type="FontUIResource" line="1782"/>
            <javadoc line="1784">
                Returns the sub-text font of the current theme. This is a
                  cover method for {@code getCurrentTheme().getSubTextFont()}.                
                <return>
                    the sub-text font                    
                </return>
                <see>
                    MetalTheme                    
                </see>
            </javadoc>
            <method name="getSubTextFont" type="FontUIResource" line="1792"/>
            <javadoc line="1794">
                Returns the desktop color of the current theme. This is a
                  cover method for {@code getCurrentTheme().getDesktopColor()}.                
                <return>
                    the desktop color                    
                </return>
                <see>
                    MetalTheme                    
                </see>
            </javadoc>
            <method name="getDesktopColor" type="ColorUIResource" line="1802"/>
            <javadoc line="1804">
                Returns the focus color of the current theme. This is a
                  cover method for {@code getCurrentTheme().getFocusColor()}.                
                <return>
                    the focus color                    
                </return>
                <see>
                    MetalTheme                    
                </see>
            </javadoc>
            <method name="getFocusColor" type="ColorUIResource" line="1812"/>
            <javadoc line="1814">
                Returns the white color of the current theme. This is a
                  cover method for {@code getCurrentTheme().getWhite()}.                
                <return>
                    the white color                    
                </return>
                <see>
                    MetalTheme                    
                </see>
            </javadoc>
            <method name="getWhite" type="ColorUIResource" line="1822"/>
            <javadoc line="1824">
                Returns the black color of the current theme. This is a
                  cover method for {@code getCurrentTheme().getBlack()}.                
                <return>
                    the black color                    
                </return>
                <see>
                    MetalTheme                    
                </see>
            </javadoc>
            <method name="getBlack" type="ColorUIResource" line="1832"/>
            <javadoc line="1834">
                Returns the control color of the current theme. This is a
                  cover method for {@code getCurrentTheme().getControl()}.                
                <return>
                    the control color                    
                </return>
                <see>
                    MetalTheme                    
                </see>
            </javadoc>
            <method name="getControl" type="ColorUIResource" line="1842"/>
            <javadoc line="1844">
                Returns the control shadow color of the current theme. This is a
                  cover method for {@code getCurrentTheme().getControlShadow()}.                
                <return>
                    the control shadow color                    
                </return>
                <see>
                    MetalTheme                    
                </see>
            </javadoc>
            <method name="getControlShadow" type="ColorUIResource" line="1852"/>
            <javadoc line="1854">
                Returns the control dark shadow color of the current theme. This is a
                  cover method for {@code getCurrentTheme().getControlDarkShadow()}.                
                <return>
                    the control dark shadow color                    
                </return>
                <see>
                    MetalTheme                    
                </see>
            </javadoc>
            <method name="getControlDarkShadow" type="ColorUIResource" line="1862"/>
            <javadoc line="1864">
                Returns the control info color of the current theme. This is a
                  cover method for {@code getCurrentTheme().getControlInfo()}.                
                <return>
                    the control info color                    
                </return>
                <see>
                    MetalTheme                    
                </see>
            </javadoc>
            <method name="getControlInfo" type="ColorUIResource" line="1872"/>
            <javadoc line="1874">
                Returns the control highlight color of the current theme. This is a
                  cover method for {@code getCurrentTheme().getControlHighlight()}.                
                <return>
                    the control highlight color                    
                </return>
                <see>
                    MetalTheme                    
                </see>
            </javadoc>
            <method name="getControlHighlight" type="ColorUIResource" line="1882"/>
            <javadoc line="1884">
                Returns the control disabled color of the current theme. This is a
                  cover method for {@code getCurrentTheme().getControlDisabled()}.                
                <return>
                    the control disabled color                    
                </return>
                <see>
                    MetalTheme                    
                </see>
            </javadoc>
            <method name="getControlDisabled" type="ColorUIResource" line="1892"/>
            <javadoc line="1894">
                Returns the primary control color of the current theme. This is a
                  cover method for {@code getCurrentTheme().getPrimaryControl()}.                
                <return>
                    the primary control color                    
                </return>
                <see>
                    MetalTheme                    
                </see>
            </javadoc>
            <method name="getPrimaryControl" type="ColorUIResource" line="1902"/>
            <javadoc line="1904">
                Returns the primary control shadow color of the current theme. This is a
                  cover method for {@code getCurrentTheme().getPrimaryControlShadow()}.                
                <return>
                    the primary control shadow color                    
                </return>
                <see>
                    MetalTheme                    
                </see>
            </javadoc>
            <method name="getPrimaryControlShadow" type="ColorUIResource" line="1912"/>
            <javadoc line="1914">
                Returns the primary control dark shadow color of the current
                  theme. This is a cover method for {@codegetCurrentTheme().getPrimaryControlDarkShadow()}.                
                <return>
                    the primary control dark shadow color                    
                </return>
                <see>
                    MetalTheme                    
                </see>
            </javadoc>
            <method name="getPrimaryControlDarkShadow" type="ColorUIResource" line="1923"/>
            <javadoc line="1925">
                Returns the primary control info color of the current theme. This is a
                  cover method for {@code getCurrentTheme().getPrimaryControlInfo()}.                
                <return>
                    the primary control info color                    
                </return>
                <see>
                    MetalTheme                    
                </see>
            </javadoc>
            <method name="getPrimaryControlInfo" type="ColorUIResource" line="1933"/>
            <javadoc line="1935">
                Returns the primary control highlight color of the current
                  theme. This is a cover method for {@codegetCurrentTheme().getPrimaryControlHighlight()}.                
                <return>
                    the primary control highlight color                    
                </return>
                <see>
                    MetalTheme                    
                </see>
            </javadoc>
            <method name="getPrimaryControlHighlight" type="ColorUIResource" line="1944"/>
            <javadoc line="1946">
                Returns the system text color of the current theme. This is a
                  cover method for {@code getCurrentTheme().getSystemTextColor()}.                
                <return>
                    the system text color                    
                </return>
                <see>
                    MetalTheme                    
                </see>
            </javadoc>
            <method name="getSystemTextColor" type="ColorUIResource" line="1954"/>
            <javadoc line="1956">
                Returns the control text color of the current theme. This is a
                  cover method for {@code getCurrentTheme().getControlTextColor()}.                
                <return>
                    the control text color                    
                </return>
                <see>
                    MetalTheme                    
                </see>
            </javadoc>
            <method name="getControlTextColor" type="ColorUIResource" line="1964"/>
            <javadoc line="1966">
                Returns the inactive control text color of the current theme. This is a
                  cover method for {@codegetCurrentTheme().getInactiveControlTextColor()}.                
                <return>
                    the inactive control text color                    
                </return>
                <see>
                    MetalTheme                    
                </see>
            </javadoc>
            <method name="getInactiveControlTextColor" type="ColorUIResource" line="1975"/>
            <javadoc line="1977">
                Returns the inactive system text color of the current theme. This is a
                  cover method for {@codegetCurrentTheme().getInactiveSystemTextColor()}.                
                <return>
                    the inactive system text color                    
                </return>
                <see>
                    MetalTheme                    
                </see>
            </javadoc>
            <method name="getInactiveSystemTextColor" type="ColorUIResource" line="1986"/>
            <javadoc line="1988">
                Returns the user text color of the current theme. This is a
                  cover method for {@code getCurrentTheme().getUserTextColor()}.                
                <return>
                    the user text color                    
                </return>
                <see>
                    MetalTheme                    
                </see>
            </javadoc>
            <method name="getUserTextColor" type="ColorUIResource" line="1996"/>
            <javadoc line="1998">
                Returns the text highlight color of the current theme. This is a
                  cover method for {@code getCurrentTheme().getTextHighlightColor()}.                
                <return>
                    the text highlight color                    
                </return>
                <see>
                    MetalTheme                    
                </see>
            </javadoc>
            <method name="getTextHighlightColor" type="ColorUIResource" line="2006"/>
            <javadoc line="2008">
                Returns the highlighted text color of the current theme. This is a
                  cover method for {@code getCurrentTheme().getHighlightedTextColor()}.                
                <return>
                    the highlighted text color                    
                </return>
                <see>
                    MetalTheme                    
                </see>
            </javadoc>
            <method name="getHighlightedTextColor" type="ColorUIResource" line="2016"/>
            <javadoc line="2018">
                Returns the window background color of the current theme. This is a
                  cover method for {@code getCurrentTheme().getWindowBackground()}.                
                <return>
                    the window background color                    
                </return>
                <see>
                    MetalTheme                    
                </see>
            </javadoc>
            <method name="getWindowBackground" type="ColorUIResource" line="2026"/>
            <javadoc line="2028">
                Returns the window title background color of the current
                  theme. This is a cover method for {@codegetCurrentTheme().getWindowTitleBackground()}.                
                <return>
                    the window title background color                    
                </return>
                <see>
                    MetalTheme                    
                </see>
            </javadoc>
            <method name="getWindowTitleBackground" type="ColorUIResource" line="2037"/>
            <javadoc line="2039">
                Returns the window title foreground color of the current
                  theme. This is a cover method for {@codegetCurrentTheme().getWindowTitleForeground()}.                
                <return>
                    the window title foreground color                    
                </return>
                <see>
                    MetalTheme                    
                </see>
            </javadoc>
            <method name="getWindowTitleForeground" type="ColorUIResource" line="2048"/>
            <javadoc line="2050">
                Returns the window title inactive background color of the current
                  theme. This is a cover method for {@codegetCurrentTheme().getWindowTitleInactiveBackground()}.                
                <return>
                    the window title inactive background color                    
                </return>
                <see>
                    MetalTheme                    
                </see>
            </javadoc>
            <method name="getWindowTitleInactiveBackground" type="ColorUIResource" line="2059"/>
            <javadoc line="2061">
                Returns the window title inactive foreground color of the current
                  theme. This is a cover method for {@codegetCurrentTheme().getWindowTitleInactiveForeground()}.                
                <return>
                    the window title inactive foreground color                    
                </return>
                <see>
                    MetalTheme                    
                </see>
            </javadoc>
            <method name="getWindowTitleInactiveForeground" type="ColorUIResource" line="2070"/>
            <javadoc line="2072">
                Returns the menu background color of the current theme. This is
                  a cover method for {@code getCurrentTheme().getMenuBackground()}.                
                <return>
                    the menu background color                    
                </return>
                <see>
                    MetalTheme                    
                </see>
            </javadoc>
            <method name="getMenuBackground" type="ColorUIResource" line="2080"/>
            <javadoc line="2082">
                Returns the menu foreground color of the current theme. This is
                  a cover method for {@code getCurrentTheme().getMenuForeground()}.                
                <return>
                    the menu foreground color                    
                </return>
                <see>
                    MetalTheme                    
                </see>
            </javadoc>
            <method name="getMenuForeground" type="ColorUIResource" line="2090"/>
            <javadoc line="2092">
                Returns the menu selected background color of the current theme. This is
                  a cover method for{@code getCurrentTheme().getMenuSelectedBackground()}.                
                <return>
                    the menu selected background color                    
                </return>
                <see>
                    MetalTheme                    
                </see>
            </javadoc>
            <method name="getMenuSelectedBackground" type="ColorUIResource" line="2101"/>
            <javadoc line="2103">
                Returns the menu selected foreground color of the current theme. This is
                  a cover method for{@code getCurrentTheme().getMenuSelectedForeground()}.                
                <return>
                    the menu selected foreground color                    
                </return>
                <see>
                    MetalTheme                    
                </see>
            </javadoc>
            <method name="getMenuSelectedForeground" type="ColorUIResource" line="2112"/>
            <javadoc line="2114">
                Returns the menu disabled foreground color of the current theme. This is
                  a cover method for{@code getCurrentTheme().getMenuDisabledForeground()}.                
                <return>
                    the menu disabled foreground color                    
                </return>
                <see>
                    MetalTheme                    
                </see>
            </javadoc>
            <method name="getMenuDisabledForeground" type="ColorUIResource" line="2123"/>
            <javadoc line="2125">
                Returns the separator background color of the current theme. This is
                  a cover method for {@code getCurrentTheme().getSeparatorBackground()}.                
                <return>
                    the separator background color                    
                </return>
                <see>
                    MetalTheme                    
                </see>
            </javadoc>
            <method name="getSeparatorBackground" type="ColorUIResource" line="2133"/>
            <javadoc line="2135">
                Returns the separator foreground color of the current theme. This is
                  a cover method for {@code getCurrentTheme().getSeparatorForeground()}.                
                <return>
                    the separator foreground color                    
                </return>
                <see>
                    MetalTheme                    
                </see>
            </javadoc>
            <method name="getSeparatorForeground" type="ColorUIResource" line="2143"/>
            <javadoc line="2145">
                Returns the accelerator foreground color of the current theme. This is
                  a cover method for {@code getCurrentTheme().getAcceleratorForeground()}.                
                <return>
                    the separator accelerator foreground color                    
                </return>
                <see>
                    MetalTheme                    
                </see>
            </javadoc>
            <method name="getAcceleratorForeground" type="ColorUIResource" line="2153"/>
            <javadoc line="2155">
                Returns the accelerator selected foreground color of the
                  current theme. This is a cover method for {@codegetCurrentTheme().getAcceleratorSelectedForeground()}.                
                <return>
                    the accelerator selected foreground color                    
                </return>
                <see>
                    MetalTheme                    
                </see>
            </javadoc>
            <method name="getAcceleratorSelectedForeground" type="ColorUIResource" line="2164"/>
            <javadoc line="2167">
                Returns a {@code LayoutStyle} implementing the Java look and feel
                  design guidelines as specified at
                  &lt;a href=&quot;http://java.sun.com/products/jlf/ed2/book/HIG.Visual2.html&quot;&gt;http://java.sun.com/products/jlf/ed2/book/HIG.Visual2.html&lt;/a&gt;.                
                <return>
                    LayoutStyle implementing the Java look and feel design
                      guidelines                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getLayoutStyle" type="LayoutStyle" line="2176"/>
            <class name="MetalLazyValue" line="2181">
                <implements interface="UIDefaults.LazyValue"/>
                <javadoc line="2181">
                    MetalLazyValue is a slimmed down version of &lt;code&gt;ProxyLaxyValue&lt;/code&gt;.
                      The code is duplicate so that it can get at the package private
                      classes in metal.                    
                </javadoc>
                <declaration name="className" type="String" line="2187"/>
                <javadoc line="2187">
                    Name of the class to create.                    
                </javadoc>
                <declaration name="methodName" type="String" line="2191"/>
                <method name="MetalLazyValue" type="constructor" line="2193">
                    <params>
                        <param name="name" type="String"/>
                    </params>
                </method>
                <method name="MetalLazyValue" type="constructor" line="2197">
                    <params>
                        <param name="name" type="String"/>
                        <param name="methodName" type="String"/>
                    </params>
                </method>
                <method name="createValue" type="Object" line="2202">
                    <params>
                        <param name="table" type="UIDefaults"/>
                    </params>
                    <scope line="2203">
                        <declaration name="c" type="Class" line="2204"/>
                        <scope line="2206"/>
                        <anonymous_class line="2210">
                            <method name="run" type="Method" line="2211">
                                <declaration name="methods" type="Method[]" line="2212"/>
                                <scope line="2214">
                                    <scope line="2215"/>
                                </scope>
                            </method>
                        </anonymous_class>
                        <declaration name="method" type="Method" line="2209"/>
                        <scope line="2223"/>
                    </scope>
                    <scope line="2226"/>
                    <scope line="2227"/>
                    <scope line="2228"/>
                    <scope line="2229"/>
                </method>
            </class>
            <class name="FontActiveValue" line="2236">
                <implements interface="UIDefaults.ActiveValue"/>
                <javadoc line="2236">
                    FontActiveValue redirects to the appropriate metal theme method.                    
                </javadoc>
                <declaration name="type" type="int" line="2240"/>
                <declaration name="theme" type="MetalTheme" line="2241"/>
                <method name="FontActiveValue" type="constructor" line="2243">
                    <params>
                        <param name="theme" type="MetalTheme"/>
                        <param name="type" type="int"/>
                    </params>
                </method>
                <method name="createValue" type="Object" line="2248">
                    <params>
                        <param name="table" type="UIDefaults"/>
                    </params>
                    <declaration name="value" type="Object" line="2249"/>
                </method>
            </class>
            <declaration name="queue" type="ReferenceQueue&lt;LookAndFeel&gt;" line="2274"/>
            <method name="flushUnreferenced" type="void" line="2276">
                <declaration name="aatl" type="AATextListener" line="2277"/>
                <scope line="2278"/>
            </method>
            <class name="AATextListener" line="2283">
                <extends class="WeakReference">
                    <type_params>
                        <type_param name="LookAndFeel"/>
                    </type_params>
                </extends>
                <implements interface="PropertyChangeListener"/>
                <declaration name="key" type="String" line="2286"/>
                <method name="AATextListener" type="constructor" line="2288">
                    <params>
                        <param name="laf" type="LookAndFeel"/>
                    </params>
                    <declaration name="tk" type="Toolkit" line="2290"/>
                </method>
                <method name="propertyChange" type="void" line="2294">
                    <params>
                        <param name="pce" type="PropertyChangeEvent"/>
                    </params>
                    <declaration name="laf" type="LookAndFeel" line="2295"/>
                    <scope line="2296"/>
                    <declaration name="defaults" type="UIDefaults" line="2300"/>
                    <declaration name="lafCond" type="boolean" line="2301"/>
                    <declaration name="aaTextInfo" type="Object" line="2302"/>
                </method>
                <method name="dispose" type="void" line="2308">
                    <declaration name="tk" type="Toolkit" line="2309"/>
                </method>
                <javadoc line="2313">
                    Updates the UI of the passed in window and all its children.                    
                </javadoc>
                <method name="updateWindowUI" type="void" line="2316">
                    <params>
                        <param name="window" type="Window"/>
                    </params>
                    <declaration name="ownedWins" type="Window" line="2318"/>
                    <scope line="2319"/>
                </method>
                <javadoc line="2324">
                    Updates the UIs of all the known Frames.                    
                </javadoc>
                <method name="updateAllUIs" type="void" line="2327">
                    <declaration name="appFrames" type="Frame" line="2328"/>
                    <scope line="2329"/>
                </method>
                <declaration name="updatePending" type="boolean" line="2334"/>
                <javadoc line="2334">
                    Indicates if an updateUI call is pending.                    
                </javadoc>
                <javadoc line="2339">
                    Sets whether or not an updateUI call is pending.                    
                </javadoc>
                <method name="setUpdatePending" type="void" line="2342">
                    <params>
                        <param name="update" type="boolean"/>
                    </params>
                </method>
                <javadoc line="2346">
                    Returns true if a UI update is pending.                    
                </javadoc>
                <method name="isUpdatePending" type="boolean" line="2349"/>
                <method name="updateUI" type="void" line="2353">
                    <scope line="2354">
                        <anonymous_class line="2356">
                            <method name="run" type="void" line="2357"/>
                        </anonymous_class>
                        <declaration name="uiUpdater" type="Runnable" line="2356"/>
                    </scope>
                </method>
            </class>
            <class name="MetalLayoutStyle" line="2369">
                <extends class="DefaultLayoutStyle"/>
                <declaration name="INSTANCE" type="MetalLayoutStyle" line="2370"/>
                <method name="getPreferredGap" type="int" line="2375">
                    <params>
                        <param name="component1" type="JComponent"/>
                        <param name="component2" type="JComponent"/>
                        <param name="type" type="ComponentPlacement"/>
                        <param name="position" type="int"/>
                        <param name="parent" type="Container"/>
                    </params>
                    <comment line="2377">
                        Checks args                        
                    </comment>
                    <comment line="2385">
                        Metal doesn&apos;t spec this.                        
                    </comment>
                    <comment line="2394">
                        Fall through to related.                        
                    </comment>
                    <comment line="2407">
                        When toggle buttons are exclusive (that is,
                         they form a radio button set), separate
                         them with 2 pixels. This rule applies
                         whether the toggle buttons appear in a
                         toolbar or elsewhere in the interface.
                         Note: this number does not appear to
                         include any borders and so is not adjusted
                         by the border of the toggle button                        
                    </comment>
                    <comment line="2417">
                        When toggle buttons are independent (like
                         checkboxes) and used outside a toolbar,
                         separate them with 5 pixels.                        
                    </comment>
                    <comment line="2432">
                        Insert 12 pixels between the trailing edge of a
                         label and any associated components. Insert 12
                         pixels between the trailing edge of a label and the
                         component it describes when labels are
                         right-aligned. When labels are left-aligned, insert
                         12 pixels between the trailing edge of the longest
                         label and its associated component                        
                    </comment>
                    <declaration name="offset" type="int" line="2380"/>
                    <scope line="2386">
                        <declaration name="indent" type="int" line="2387"/>
                        <scope line="2388"/>
                    </scope>
                    <scope line="2396">
                        <declaration name="sourceModel" type="ButtonModel" line="2397"/>
                        <declaration name="targetModel" type="ButtonModel" line="2399"/>
                        <scope line="2405"/>
                        <scope line="2419"/>
                    </scope>
                    <scope line="2430"/>
                </method>
                <method name="getContainerGap" type="int" line="2446">
                    <params>
                        <param name="component" type="JComponent"/>
                        <param name="position" type="int"/>
                        <param name="parent" type="Container"/>
                    </params>
                    <comment line="2449">
                        Include 11 pixels between the bottom and right
                         borders of a dialog box and its command
                         buttons. (To the eye, the 11-pixel spacing appears
                         to be 12 pixels because the white borders on the
                         lower and right edges of the button components are
                         not visually significant.)
                         NOTE: this last text was designed with Steel in mind,
                         not Ocean.
                        
                         Insert 12 pixels between the edges of the panel and the
                         titled border. Insert 11 pixels between the top of the
                         title and the component above the titled border. Insert 12
                         pixels between the bottom of the title and the top of the
                         first label in the panel. Insert 11 pixels between
                         component groups and between the bottom of the last
                         component and the lower border.                        
                    </comment>
                </method>
                <method name="getButtonGap" type="int" line="2470">
                    <params>
                        <param name="source" type="JComponent"/>
                        <param name="target" type="JComponent"/>
                        <param name="position" type="int"/>
                        <param name="offset" type="int"/>
                    </params>
                    <scope line="2472">
                        <declaration name="buttonAdjustment" type="int" line="2473"/>
                        <scope line="2474"/>
                    </scope>
                    <scope line="2480"/>
                </method>
                <method name="getButtonAdjustment" type="int" line="2486">
                    <params>
                        <param name="source" type="JComponent"/>
                        <param name="edge" type="int"/>
                    </params>
                    <declaration name="classID" type="String" line="2487"/>
                    <scope line="2488">
                        <scope line="2490">
                            <scope line="2491"/>
                        </scope>
                    </scope>
                    <scope line="2496">
                        <scope line="2498"/>
                    </scope>
                </method>
            </class>
        </class>
    </source>