<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.plaf.synth">
        <import package="java.awt"/>
        <import package="java.beans"/>
        <import package="java.io"/>
        <import package="java.lang.ref"/>
        <import package="java.net"/>
        <import package="java.security"/>
        <import package="java.text"/>
        <import package="java.util"/>
        <import package="javax.swing"/>
        <import package="javax.swing.plaf"/>
        <import package="javax.swing.plaf.basic"/>
        <import package="sun.awt"/>
        <import package="sun.security.action"/>
        <import package="sun.swing"/>
        <import package="sun.swing.plaf.synth"/>
        <class name="SynthLookAndFeel" line="17">
            <extends class="BasicLookAndFeel"/>
            <javadoc line="17">
                SynthLookAndFeel provides the basis for creating a customized look and
                  feel. SynthLookAndFeel does not directly provide a look, all painting is
                  delegated.
                  You need to either provide a configuration file, by way of the{@link #load} method, or provide your own {@link SynthStyleFactory}to {@link #setStyleFactory}. Refer to the
                  &lt;a href=&quot;package-summary.html&quot;&gt;package summary&lt;/a&gt; for an example of
                  loading a file, and {@link javax.swing.plaf.synth.SynthStyleFactory} for
                  an example of providing your own &lt;code&gt;SynthStyleFactory&lt;/code&gt; to
                  &lt;code&gt;setStyleFactory&lt;/code&gt;.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  This class implements {@link Serializable} as a side effect of it
                  extending {@link BasicLookAndFeel}. It is not intended to be serialized.
                  An attempt to serialize it will
                  result in {@link NotSerializableException}.                
                <serial>
                    exclude                    
                </serial>
                <since>
                    1.5                    
                </since>
                <author>
                    Scott Violet                    
                </author>
            </javadoc>
            <declaration name="EMPTY_UIRESOURCE_INSETS" type="Insets" line="37"/>
            <javadoc line="37">
                Used in a handful of places where we need an empty Insets.                
            </javadoc>
            <declaration name="STYLE_FACTORY_KEY" type="Object" line="41"/>
            <javadoc line="41">
                AppContext key to get the current SynthStyleFactory.                
            </javadoc>
            <declaration name="lastFactory" type="SynthStyleFactory" line="45"/>
            <javadoc line="45">
                The last SynthStyleFactory that was asked for from AppContext
                  &lt;code&gt;lastContext&lt;/code&gt;.                
            </javadoc>
            <declaration name="multipleApps" type="boolean" line="50"/>
            <javadoc line="50">
                If this is true it indicates there is more than one AppContext active
                  and that we need to make sure in getStyleCache the requesting
                  AppContext matches that of &lt;code&gt;lastContext&lt;/code&gt; before returning
                  it.                
            </javadoc>
            <declaration name="lastContext" type="AppContext" line="57"/>
            <javadoc line="57">
                AppContext lastLAF came from.                
            </javadoc>
            <declaration name="selectedUI" type="ComponentUI" line="61"/>
            <declaration name="selectedUIState" type="int" line="62"/>
            <declaration name="factory" type="SynthStyleFactory" line="63"/>
            <javadoc line="63">
                SynthStyleFactory for the this SynthLookAndFeel.                
            </javadoc>
            <declaration name="defaultsMap" type="Map&lt;String,Object&gt;" line="67"/>
            <javadoc line="67">
                Map of defaults table entries. This is populated via the load
                  method.                
            </javadoc>
            <declaration name="_handler" type="Handler" line="72"/>
            <javadoc line="73">
                Used by the renderers. For the most part the renderers are implemented
                  as Labels, which is problematic in so far as they are never selected.
                  To accomodate this SynthLabelUI checks if the current
                  UI matches that of &lt;code&gt;selectedUI&lt;/code&gt; (which this methods sets), if
                  it does, then a state as set by this method is returned. This provides
                  a way for labels to have a state other than selected.                
            </javadoc>
            <method name="setSelectedUI" type="void" line="81">
                <params>
                    <param name="uix" type="ComponentUI"/>
                    <param name="selected" type="boolean"/>
                    <param name="focused" type="boolean"/>
                    <param name="enabled" type="boolean"/>
                    <param name="rollover" type="boolean"/>
                </params>
                <scope line="84">
                    <scope line="86"/>
                </scope>
                <scope line="90">
                    <scope line="92"/>
                </scope>
                <scope line="96">
                    <scope line="97"/>
                    <scope line="101"/>
                </scope>
            </method>
            <javadoc line="106">
                Clears out the selected UI that was last set in setSelectedUI.                
            </javadoc>
            <method name="resetSelectedUI" type="void" line="109"/>
            <javadoc line="112">
                Sets the SynthStyleFactory that the UI classes provided by
                  synth will use to obtain a SynthStyle.                
                <param>
                    cache SynthStyleFactory the UIs should use.                    
                </param>
            </javadoc>
            <method name="setStyleFactory" type="void" line="117">
                <params>
                    <param name="cache" type="SynthStyleFactory"/>
                </params>
                <scope line="118">
                    <declaration name="context" type="AppContext" line="119"/>
                    <scope line="120"/>
                </scope>
            </method>
            <javadoc line="128">
                Returns the current SynthStyleFactory.                
                <return>
                    SynthStyleFactory                    
                </return>
            </javadoc>
            <method name="getStyleFactory" type="SynthStyleFactory" line="132">
                <scope line="133">
                    <scope line="134"/>
                    <declaration name="context" type="AppContext" line="137"/>
                    <scope line="138"/>
                </scope>
            </method>
            <javadoc line="146">
                Returns the component state for the specified component. This should
                  only be used for Components that don&apos;t have any special state beyond
                  that of ENABLED, DISABLED or FOCUSED. For example, buttons shouldn&apos;t
                  call into this method.                
            </javadoc>
            <method name="getComponentState" type="int" line="152">
                <params>
                    <param name="c" type="Component"/>
                </params>
                <scope line="153">
                    <scope line="154"/>
                </scope>
            </method>
            <javadoc line="161">
                Gets a SynthStyle for the specified region of the specified component.
                  This is not for general consumption, only custom UIs should call this
                  method.                
                <param>
                    c JComponent to get the SynthStyle for                    
                </param>
                <param>
                    region Identifies the region of the specified component                    
                </param>
                <return>
                    SynthStyle to use.                    
                </return>
            </javadoc>
            <method name="getStyle" type="SynthStyle" line="169">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="region" type="Region"/>
                </params>
            </method>
            <javadoc line="172">
                Returns true if the Style should be updated in response to the
                  specified PropertyChangeEvent. This forwards to
                  &lt;code&gt;shouldUpdateStyleOnAncestorChanged&lt;/code&gt; as necessary.                
            </javadoc>
            <method name="shouldUpdateStyle" type="boolean" line="177">
                <params>
                    <param name="event" type="PropertyChangeEvent"/>
                </params>
                <declaration name="laf" type="LookAndFeel" line="178"/>
            </method>
            <javadoc line="181">
                A convience method that will reset the Style of StyleContext if
                  necessary.                
                <return>
                    newStyle                    
                </return>
            </javadoc>
            <method name="updateStyle" type="SynthStyle" line="186">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="ui" type="SynthUI"/>
                </params>
                <declaration name="newStyle" type="SynthStyle" line="187"/>
                <declaration name="oldStyle" type="SynthStyle" line="188"/>
                <scope line="189">
                    <scope line="190"/>
                </scope>
            </method>
            <javadoc line="198">
                Updates the style associated with &lt;code&gt;c&lt;/code&gt;, and all its children.
                  This is a lighter version of
                  &lt;code&gt;SwingUtilities.updateComponentTreeUI&lt;/code&gt;.                
                <param>
                    c Component to update style for.                    
                </param>
            </javadoc>
            <method name="updateStyles" type="void" line="204">
                <params>
                    <param name="c" type="Component"/>
                </params>
                <scope line="205">
                    <declaration name="name" type="String" line="206"/>
                    <scope line="208"/>
                </scope>
                <declaration name="children" type="Component[]" line="213"/>
                <scope line="214"/>
                <scope line="217"/>
                <scope line="220">
                    <scope line="221"/>
                </scope>
            </method>
            <javadoc line="227">
                Returns the Region for the JComponent &lt;code&gt;c&lt;/code&gt;.                
                <param>
                    c JComponent to fetch the Region for                    
                </param>
                <return>
                    Region corresponding to <code>c</code>                    
                </return>
            </javadoc>
            <method name="getRegion" type="Region" line="232">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <javadoc line="235">
                A convenience method to return where the foreground should be
                  painted for the Component identified by the passed in
                  AbstractSynthContext.                
            </javadoc>
            <method name="getPaintingInsets" type="Insets" line="240">
                <params>
                    <param name="state" type="SynthContext"/>
                    <param name="insets" type="Insets"/>
                </params>
                <scope line="241"/>
                <scope line="244"/>
            </method>
            <javadoc line="249">
                A convenience method that handles painting of the background.
                  All SynthUI implementations should override update and invoke
                  this method.                
            </javadoc>
            <method name="update" type="void" line="254">
                <params>
                    <param name="state" type="SynthContext"/>
                    <param name="g" type="Graphics"/>
                </params>
            </method>
            <javadoc line="257">
                A convenience method that handles painting of the background for
                  subregions. All SynthUI&apos;s that have subregions should invoke
                  this method, than paint the foreground.                
            </javadoc>
            <method name="updateSubregion" type="void" line="262">
                <params>
                    <param name="state" type="SynthContext"/>
                    <param name="g" type="Graphics"/>
                    <param name="bounds" type="Rectangle"/>
                </params>
            </method>
            <method name="paintRegion" type="void" line="265">
                <params>
                    <param name="state" type="SynthContext"/>
                    <param name="g" type="Graphics"/>
                    <param name="bounds" type="Rectangle"/>
                </params>
                <declaration name="c" type="JComponent" line="266"/>
                <declaration name="style" type="SynthStyle" line="267"/>
                <declaration name="x" type="int" line="268"/>
                <scope line="269"/>
                <scope line="275"/>
                <declaration name="subregion" type="boolean" line="281"/>
                <scope line="282"/>
            </method>
            <method name="isLeftToRight" type="boolean" line="287">
                <params>
                    <param name="c" type="Component"/>
                </params>
            </method>
            <javadoc line="290">
                Returns the ui that is of type &lt;code&gt;klass&lt;/code&gt;, or null if
                  one can not be found.                
            </javadoc>
            <method name="getUIOfType" type="Object" line="294">
                <params>
                    <param name="ui" type="ComponentUI"/>
                    <param name="klass" type="Class"/>
                </params>
                <scope line="295"/>
            </method>
            <javadoc line="300">
                Creates the Synth look and feel &lt;code&gt;ComponentUI&lt;/code&gt; for
                  the passed in &lt;code&gt;JComponent&lt;/code&gt;.                
                <param>
                    c JComponent to create the <code>ComponentUI</code> for                    
                </param>
                <return>
                    ComponentUI to use for <code>c</code>                    
                </return>
            </javadoc>
            <method name="createUI" type="ComponentUI" line="306">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <declaration name="key" type="String" line="307"/>
                <scope line="308"/>
                <scope line="311"/>
                <scope line="314"/>
                <scope line="317"/>
                <scope line="320"/>
                <scope line="323"/>
                <scope line="326"/>
                <scope line="329"/>
                <scope line="332"/>
                <scope line="335"/>
                <scope line="338"/>
                <scope line="341"/>
                <scope line="344"/>
                <scope line="347"/>
                <scope line="350"/>
                <scope line="353"/>
                <scope line="356"/>
                <scope line="359"/>
                <scope line="362"/>
                <scope line="365"/>
                <scope line="368"/>
                <scope line="371"/>
                <scope line="374"/>
                <scope line="377"/>
                <scope line="380"/>
                <scope line="383"/>
                <scope line="386"/>
                <scope line="389"/>
                <scope line="392"/>
                <scope line="395"/>
                <scope line="398"/>
                <scope line="401"/>
                <scope line="404"/>
                <scope line="407"/>
                <scope line="410"/>
                <scope line="413"/>
                <scope line="416"/>
                <scope line="419"/>
                <scope line="422"/>
                <scope line="425"/>
                <scope line="428"/>
                <scope line="431"/>
                <scope line="434"/>
            </method>
            <javadoc line="439">
                Creates a SynthLookAndFeel.
                  &lt;p&gt;
                  For the returned &lt;code&gt;SynthLookAndFeel&lt;/code&gt; to be useful you need to
                  invoke &lt;code&gt;load&lt;/code&gt; to specify the set of
                  &lt;code&gt;SynthStyle&lt;/code&gt;s, or invoke &lt;code&gt;setStyleFactory&lt;/code&gt;.                
                <see>
                    #load                    
                </see>
                <see>
                    #setStyleFactory                    
                </see>
            </javadoc>
            <method name="SynthLookAndFeel" type="constructor" line="448"/>
            <javadoc line="452">
                Loads the set of &lt;code&gt;SynthStyle&lt;/code&gt;s that will be used by
                  this &lt;code&gt;SynthLookAndFeel&lt;/code&gt;. &lt;code&gt;resourceBase&lt;/code&gt; is
                  used to resolve any path based resources, for example an
                  &lt;code&gt;Image&lt;/code&gt; would be resolved by
                  &lt;code&gt;resourceBase.getResource(path)&lt;/code&gt;. Refer to
                  &lt;a href=&quot;doc-files/synthFileFormat.html&quot;&gt;Synth File Format&lt;/a&gt;
                  for more information.                
                <param>
                    input InputStream to load from                    
                </param>
                <param>
                    resourceBase used to resolve any images or other resources                    
                </param>
                <throws>
                    ParseException if there is an error in parsing                    
                </throws>
                <throws>
                    IllegalArgumentException if input or resourceBase is <code>null</code>                    
                </throws>
            </javadoc>
            <method name="load" type="void" line="465">
                <params>
                    <param name="input" type="InputStream"/>
                    <param name="resourceBase" type="Class<?>"/>
                </params>
                <scope line="466"/>
                <scope line="469"/>
            </method>
            <javadoc line="474">
                Loads the set of &lt;code&gt;SynthStyle&lt;/code&gt;s that will be used by
                  this &lt;code&gt;SynthLookAndFeel&lt;/code&gt;. Path based resources are resolved
                  relatively to the specified &lt;code&gt;URL&lt;/code&gt; of the style. For example
                  an &lt;code&gt;Image&lt;/code&gt; would be resolved by
                  &lt;code&gt;new URL(synthFile, path)&lt;/code&gt;. Refer to
                  &lt;a href=&quot;doc-files/synthFileFormat.html&quot;&gt;Synth File Format&lt;/a&gt; for more
                  information.                
                <param>
                    url the <code>URL</code> to load the set of
                      <code>SynthStyle</code> from                    
                </param>
                <throws>
                    ParseException if there is an error in parsing                    
                </throws>
                <throws>
                    IllegalArgumentException if synthSet is <code>null</code>                    
                </throws>
                <throws>
                    IOException if synthSet cannot be opened as an <code>InputStream</code>                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="load" type="void" line="489">
                <params>
                    <param name="url" type="URL"/>
                </params>
                <scope line="490"/>
                <scope line="493"/>
                <declaration name="input" type="InputStream" line="496"/>
            </method>
            <javadoc line="499">
                Called by UIManager when this look and feel is installed.                
            </javadoc>
            <method name="initialize" type="void" line="502"/>
            <javadoc line="508">
                Called by UIManager when this look and feel is uninstalled.                
            </javadoc>
            <method name="uninitialize" type="void" line="511"/>
            <javadoc line="515">
                Returns the defaults for this SynthLookAndFeel.                
                <return>
                    Defaults table.                    
                </return>
            </javadoc>
            <method name="getDefaults" type="UIDefaults" line="519">
                <declaration name="table" type="UIDefaults" line="520"/>
                <declaration name="aaTextInfo" type="Object" line="534"/>
                <scope line="537"/>
            </method>
            <javadoc line="542">
                Returns true, SynthLookAndFeel is always supported.                
                <return>
                    true.                    
                </return>
            </javadoc>
            <method name="isSupportedLookAndFeel" type="boolean" line="546"/>
            <javadoc line="549">
                Returns false, SynthLookAndFeel is not a native look and feel.                
                <return>
                    false                    
                </return>
            </javadoc>
            <method name="isNativeLookAndFeel" type="boolean" line="553"/>
            <javadoc line="556">
                Returns a textual description of SynthLookAndFeel.                
                <return>
                    textual description of synth.                    
                </return>
            </javadoc>
            <method name="getDescription" type="String" line="560"/>
            <javadoc line="563">
                Return a short string that identifies this look and feel.                
                <return>
                    a short string identifying this look and feel.                    
                </return>
            </javadoc>
            <method name="getName" type="String" line="567"/>
            <javadoc line="570">
                Return a string that identifies this look and feel.                
                <return>
                    a short string identifying this look and feel.                    
                </return>
            </javadoc>
            <method name="getID" type="String" line="574"/>
            <javadoc line="577">
                Returns whether or not the UIs should update their
                  &lt;code&gt;SynthStyles&lt;/code&gt; from the &lt;code&gt;SynthStyleFactory&lt;/code&gt;
                  when the ancestor of the &lt;code&gt;JComponent&lt;/code&gt; changes. A subclass
                  that provided a &lt;code&gt;SynthStyleFactory&lt;/code&gt; that based the
                  return value from &lt;code&gt;getStyle&lt;/code&gt; off the containment hierarchy
                  would override this method to return true.                
                <return>
                    whether or not the UIs should update their
                      <code>SynthStyles</code> from the <code>SynthStyleFactory</code>
                      when the ancestor changed.                    
                </return>
            </javadoc>
            <method name="shouldUpdateStyleOnAncestorChanged" type="boolean" line="588"/>
            <javadoc line="591">
                Returns whether or not the UIs should update their styles when a
                  particular event occurs.                
                <param>
                    ev a {@code PropertyChangeEvent}                    
                </param>
                <return>
                    whether or not the UIs should update their styles                    
                </return>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="shouldUpdateStyleOnEvent" type="boolean" line="598">
                <params>
                    <param name="ev" type="PropertyChangeEvent"/>
                </params>
                <declaration name="eName" type="String" line="599"/>
                <scope line="600"/>
                <scope line="603"/>
            </method>
            <javadoc line="608">
                Returns the antialiasing information as specified by the host desktop.
                  Antialiasing might be forced off if the desktop is GNOME and the user
                  has set his locale to Chinese, Japanese or Korean. This is consistent
                  with what GTK does. See com.sun.java.swing.plaf.gtk.GtkLookAndFeel
                  for more information about CJK and antialiased fonts.                
                <return>
                    the text antialiasing information associated to the desktop                    
                </return>
            </javadoc>
            <method name="getAATextInfo" type="Object" line="616">
                <declaration name="language" type="String" line="617"/>
                <declaration name="desktop" type="String" line="618"/>
                <declaration name="isCjkLocale" type="boolean" line="619"/>
                <declaration name="isGnome" type="boolean" line="620"/>
                <declaration name="isLocal" type="boolean" line="621"/>
                <declaration name="setAA" type="boolean" line="622"/>
                <declaration name="aaTextInfo" type="Object" line="623"/>
            </method>
            <declaration name="queue" type="ReferenceQueue&lt;LookAndFeel&gt;" line="626"/>
            <method name="flushUnreferenced" type="void" line="627">
                <declaration name="aatl" type="AATextListener" line="628"/>
                <scope line="629"/>
            </method>
            <class name="AATextListener" line="633">
                <extends class="WeakReference">
                    <type_params>
                        <type_param name="LookAndFeel"/>
                    </type_params>
                </extends>
                <implements interface="PropertyChangeListener"/>
                <declaration name="key" type="String" line="634"/>
                <method name="AATextListener" type="constructor" line="635">
                    <params>
                        <param name="laf" type="LookAndFeel"/>
                    </params>
                    <declaration name="tk" type="Toolkit" line="637"/>
                </method>
                <method name="propertyChange" type="void" line="640">
                    <params>
                        <param name="pce" type="PropertyChangeEvent"/>
                    </params>
                    <declaration name="defaults" type="UIDefaults" line="641"/>
                    <scope line="642"/>
                    <declaration name="laf" type="LookAndFeel" line="646"/>
                    <scope line="647"/>
                    <declaration name="aaTextInfo" type="Object" line="651"/>
                </method>
                <method name="dispose" type="void" line="655">
                    <declaration name="tk" type="Toolkit" line="656"/>
                </method>
                <javadoc line="659">
                    Updates the UI of the passed in window and all its children.                    
                </javadoc>
                <method name="updateWindowUI" type="void" line="662">
                    <params>
                        <param name="window" type="Window"/>
                    </params>
                    <declaration name="ownedWins" type="Window" line="664"/>
                    <scope line="665"/>
                </method>
                <javadoc line="669">
                    Updates the UIs of all the known Frames.                    
                </javadoc>
                <method name="updateAllUIs" type="void" line="672">
                    <declaration name="appFrames" type="Frame" line="673"/>
                    <scope line="674"/>
                </method>
                <declaration name="updatePending" type="boolean" line="678"/>
                <javadoc line="678">
                    Indicates if an updateUI call is pending.                    
                </javadoc>
                <javadoc line="682">
                    Sets whether or not an updateUI call is pending.                    
                </javadoc>
                <method name="setUpdatePending" type="void" line="685">
                    <params>
                        <param name="update" type="boolean"/>
                    </params>
                </method>
                <javadoc line="688">
                    Returns true if a UI update is pending.                    
                </javadoc>
                <method name="isUpdatePending" type="boolean" line="691"/>
                <method name="updateUI" type="void" line="694">
                    <scope line="695">
                        <anonymous_class line="697">
                            <method name="run" type="void" line="698"/>
                        </anonymous_class>
                        <declaration name="uiUpdater" type="Runnable" line="697"/>
                    </scope>
                </method>
            </class>
            <method name="writeObject" type="void" line="708">
                <params>
                    <param name="out" type="java.io.ObjectOutputStream"/>
                </params>
            </method>
            <class name="Handler" line="711">
                <implements interface="PropertyChangeListener"/>
                <method name="propertyChange" type="void" line="712">
                    <params>
                        <param name="evt" type="PropertyChangeEvent"/>
                    </params>
                    <declaration name="propertyName" type="String" line="713"/>
                    <declaration name="newValue" type="Object" line="714"/>
                    <declaration name="oldValue" type="Object" line="715"/>
                    <scope line="716">
                        <scope line="717"/>
                        <scope line="720"/>
                    </scope>
                    <scope line="724">
                        <declaration name="manager" type="KeyboardFocusManager" line="725"/>
                        <scope line="726"/>
                        <scope line="729"/>
                    </scope>
                </method>
                <javadoc line="734">
                    This is a support method that will check if the background colors of
                      the specified component differ between focused and unfocused states.
                      If the color differ the component will then repaint itself.                    
                    <comp>
                        the component to check                        
                    </comp>
                </javadoc>
                <method name="repaintIfBackgroundsDiffer" type="void" line="740">
                    <params>
                        <param name="comp" type="JComponent"/>
                    </params>
                    <declaration name="ui" type="ComponentUI" line="741"/>
                    <scope line="742">
                        <declaration name="synthUI" type="SynthUI" line="743"/>
                        <declaration name="context" type="SynthContext" line="744"/>
                        <declaration name="style" type="SynthStyle" line="745"/>
                        <declaration name="state" type="int" line="746"/>
                        <declaration name="currBG" type="Color" line="747"/>
                        <declaration name="lastBG" type="Color" line="750"/>
                        <scope line="753"/>
                    </scope>
                </method>
            </class>
        </class>
    </source>