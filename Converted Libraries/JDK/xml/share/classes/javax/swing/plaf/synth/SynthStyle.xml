<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.plaf.synth">
        <import package="java.awt"/>
        <import package="javax.swing"/>
        <import package="javax.swing.border.Border"/>
        <import package="javax.swing.plaf.UIResource"/>
        <import package="javax.swing.plaf.basic.BasicLookAndFeel"/>
        <import package="javax.swing.text.DefaultEditorKit"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Map"/>
        <import package="javax.swing.text.JTextComponent"/>
        <class name="SynthStyle" line="37">
            <javadoc line="37">
                &lt;code&gt;SynthStyle&lt;/code&gt; is a set of style properties.
                  Each &lt;code&gt;SynthUI&lt;/code&gt; references at least one
                  &lt;code&gt;SynthStyle&lt;/code&gt; that is obtained using a
                  &lt;code&gt;SynthStyleFactory&lt;/code&gt;. You typically don&apos;t need to interact with
                  this class directly, rather you will load a
                  &lt;a href=&quot;doc-files/synthFileFormat.html&quot;&gt;Synth File Format file&lt;/a&gt; into
                  &lt;code&gt;SynthLookAndFeel&lt;/code&gt; that will create a set of SynthStyles.                
                <see>
                    SynthLookAndFeel                    
                </see>
                <see>
                    SynthStyleFactory                    
                </see>
                <since>
                    1.5                    
                </since>
                <author>
                    Scott Violet                    
                </author>
            </javadoc>
            <declaration name="DEFAULT_VALUES" type="Map&lt;Object,Object&gt;" line="53"/>
            <javadoc line="53">
                Contains the default values for certain properties.                
            </javadoc>
            <declaration name="SYNTH_GRAPHICS" type="SynthGraphicsUtils" line="58"/>
            <javadoc line="58">
                Shared SynthGraphics.                
            </javadoc>
            <javadoc line="64">
                Adds the default values that we know about to DEFAULT_VALUES.                
            </javadoc>
            <method name="populateDefaultValues" type="void" line="67">
                <comment line="136">
                                        
                </comment>
                <comment line="144">
                                        
                </comment>
                <comment line="188">
                                        
                </comment>
                <comment line="189">
                                        
                </comment>
                <declaration name="buttonMap" type="Object" line="68"/>
                <declaration name="multilineInputMap" type="Object" line="82"/>
                <declaration name="fieldInputMap" type="Object" line="150"/>
            </method>
            <javadoc line="711">
                Returns the default value for the specified property, or null if there
                  is no default for the specified value.                
            </javadoc>
            <method name="getDefaultValue" type="Object" line="715">
                <params>
                    <param name="key" type="Object"/>
                </params>
                <scope line="716">
                    <scope line="717"/>
                    <declaration name="value" type="Object" line="721"/>
                    <scope line="722"/>
                </scope>
            </method>
            <javadoc line="730">
                Constructs a SynthStyle.                
            </javadoc>
            <method name="SynthStyle" type="constructor" line="733"/>
            <javadoc line="736">
                Returns the &lt;code&gt;SynthGraphicUtils&lt;/code&gt; for the specified context.                
                <param>
                    context SynthContext identifying requester                    
                </param>
                <return>
                    SynthGraphicsUtils                    
                </return>
            </javadoc>
            <method name="getGraphicsUtils" type="SynthGraphicsUtils" line="742">
                <params>
                    <param name="context" type="SynthContext"/>
                </params>
            </method>
            <javadoc line="746">
                Returns the color for the specified state. This gives precedence to
                  foreground and background of the &lt;code&gt;JComponent&lt;/code&gt;. If the
                  &lt;code&gt;Color&lt;/code&gt; from the &lt;code&gt;JComponent&lt;/code&gt; is not appropriate,
                  or not used, this will invoke &lt;code&gt;getColorForState&lt;/code&gt;. Subclasses
                  should generally not have to override this, instead override{@link #getColorForState}.                
                <param>
                    context SynthContext identifying requester                    
                </param>
                <param>
                    type Type of color being requested.                    
                </param>
                <return>
                    Color                    
                </return>
            </javadoc>
            <method name="getColor" type="Color" line="758">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="type" type="ColorType"/>
                </params>
                <comment line="763">
                    This component is disabled, so return the disabled color.                    
                </comment>
                <comment line="764">
                    In some cases this means ignoring the color specified by the                    
                </comment>
                <comment line="765">
                    developer on the component. In other cases it means using a                    
                </comment>
                <comment line="766">
                    specified disabledTextColor, such as on JTextComponents.                    
                </comment>
                <comment line="767">
                    For example, JLabel doesn&apos;t specify a disabled color that the                    
                </comment>
                <comment line="768">
                    developer can set, yet it should have a disabled color to the                    
                </comment>
                <comment line="769">
                    text when the label is disabled. This code allows for that.                    
                </comment>
                <comment line="783">
                    If the developer has specified a color, prefer it. Otherwise, get                    
                </comment>
                <comment line="784">
                    the color for the state.                    
                </comment>
                <comment line="799">
                    Then use what we&apos;ve locally defined                    
                </comment>
                <comment line="804">
                    No color, fallback to that of the widget.                    
                </comment>
                <declaration name="c" type="JComponent" line="759"/>
                <declaration name="id" type="Region" line="760"/>
                <scope line="762">
                    <scope line="770">
                        <declaration name="txt" type="JTextComponent" line="771"/>
                        <declaration name="disabledColor" type="Color" line="772"/>
                        <scope line="773"/>
                    </scope>
                    <scope line="778"/>
                </scope>
                <declaration name="color" type="Color" line="785"/>
                <scope line="786">
                    <scope line="787"/>
                    <scope line="790"/>
                    <scope line="793"/>
                </scope>
                <scope line="798"/>
                <scope line="803">
                    <scope line="806"/>
                    <scope line="810"/>
                </scope>
            </method>
            <method name="getColorForState" type="Color" line="817"/>
            <javadoc line="817">
                Returns the color for the specified state. This should NOT call any
                  methods on the &lt;code&gt;JComponent&lt;/code&gt;.                
                <param>
                    context SynthContext identifying requester                    
                </param>
                <param>
                    type Type of color being requested.                    
                </param>
                <return>
                    Color to render with                    
                </return>
            </javadoc>
            <javadoc line="828">
                Returns the Font for the specified state. This redirects to the
                  &lt;code&gt;JComponent&lt;/code&gt; from the &lt;code&gt;context&lt;/code&gt; as necessary.
                  If this does not redirect
                  to the JComponent {@link #getFontForState} is invoked.                
                <param>
                    context SynthContext identifying requester                    
                </param>
                <return>
                    Font to render with                    
                </return>
            </javadoc>
            <method name="getFont" type="Font" line="837">
                <params>
                    <param name="context" type="SynthContext"/>
                </params>
                <declaration name="c" type="JComponent" line="838"/>
                <scope line="839"/>
                <declaration name="cFont" type="Font" line="842"/>
                <scope line="843"/>
            </method>
            <method name="getFontForState" type="Font" line="849"/>
            <javadoc line="849">
                Returns the font for the specified state. This should NOT call any
                  method on the &lt;code&gt;JComponent&lt;/code&gt;.                
                <param>
                    context SynthContext identifying requester                    
                </param>
                <return>
                    Font to render with                    
                </return>
            </javadoc>
            <javadoc line="858">
                Returns the Insets that are used to calculate sizing information.                
                <param>
                    context SynthContext identifying requester                    
                </param>
                <param>
                    insets Insets to place return value in.                    
                </param>
                <return>
                    Sizing Insets.                    
                </return>
            </javadoc>
            <method name="getInsets" type="Insets" line="865">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="insets" type="Insets"/>
                </params>
                <scope line="866"/>
            </method>
            <javadoc line="873">
                Returns the &lt;code&gt;SynthPainter&lt;/code&gt; that will be used for painting.
                  This may return null.                
                <param>
                    context SynthContext identifying requester                    
                </param>
                <return>
                    SynthPainter to use                    
                </return>
            </javadoc>
            <method name="getPainter" type="SynthPainter" line="880">
                <params>
                    <param name="context" type="SynthContext"/>
                </params>
            </method>
            <javadoc line="884">
                Returns true if the region is opaque.                
                <param>
                    context SynthContext identifying requester                    
                </param>
                <return>
                    true if region is opaque.                    
                </return>
            </javadoc>
            <method name="isOpaque" type="boolean" line="890">
                <params>
                    <param name="context" type="SynthContext"/>
                </params>
            </method>
            <javadoc line="894">
                Getter for a region specific style property.                
                <param>
                    context SynthContext identifying requester                    
                </param>
                <param>
                    key Property being requested.                    
                </param>
                <return>
                    Value of the named property                    
                </return>
            </javadoc>
            <method name="get" type="Object" line="901">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="key" type="Object"/>
                </params>
            </method>
            <method name="installDefaults" type="void" line="905">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="ui" type="SynthUI"/>
                </params>
                <comment line="906">
                    Special case the Border as this will likely change when the LAF                    
                </comment>
                <comment line="907">
                    can have more control over this.                    
                </comment>
                <scope line="908">
                    <declaration name="c" type="JComponent" line="909"/>
                    <declaration name="border" type="Border" line="910"/>
                    <scope line="912"/>
                </scope>
            </method>
            <javadoc line="919">
                Installs the necessary state from this Style on the
                  &lt;code&gt;JComponent&lt;/code&gt; from &lt;code&gt;context&lt;/code&gt;.                
                <param>
                    context SynthContext identifying component to install properties
                      to.                    
                </param>
            </javadoc>
            <method name="installDefaults" type="void" line="926">
                <params>
                    <param name="context" type="SynthContext"/>
                </params>
                <scope line="927">
                    <declaration name="c" type="JComponent" line="928"/>
                    <declaration name="region" type="Region" line="929"/>
                    <declaration name="font" type="Font" line="930"/>
                    <scope line="932"/>
                    <declaration name="background" type="Color" line="935"/>
                    <scope line="936"/>
                    <declaration name="foreground" type="Color" line="940"/>
                    <scope line="941"/>
                </scope>
            </method>
            <javadoc line="949">
                Uninstalls any state that this style installed on
                  the &lt;code&gt;JComponent&lt;/code&gt; from &lt;code&gt;context&lt;/code&gt;.
                  &lt;p&gt;
                  Styles should NOT depend upon this being called, in certain cases
                  it may never be called.                
                <param>
                    context SynthContext identifying component to install properties
                      to.                    
                </param>
            </javadoc>
            <method name="uninstallDefaults" type="void" line="959">
                <params>
                    <param name="context" type="SynthContext"/>
                </params>
                <comment line="961">
                    NOTE: because getForeground, getBackground and getFont will look                    
                </comment>
                <comment line="962">
                    at the parent Container, if we set them to null it may                    
                </comment>
                <comment line="963">
                    mean we they return a non-null and non-UIResource value                    
                </comment>
                <comment line="964">
                    preventing install from correctly settings its colors/font. For                    
                </comment>
                <comment line="965">
                    this reason we do not uninstall the fg/bg/font.                    
                </comment>
                <scope line="960">
                    <declaration name="c" type="JComponent" line="967"/>
                    <declaration name="border" type="Border" line="968"/>
                    <scope line="970"/>
                </scope>
            </method>
            <javadoc line="976">
                Convenience method to get a specific style property whose value is
                  a &lt;code&gt;Number&lt;/code&gt;. If the value is a &lt;code&gt;Number&lt;/code&gt;,
                  &lt;code&gt;intValue&lt;/code&gt; is returned, otherwise &lt;code&gt;defaultValue&lt;/code&gt;
                  is returned.                
                <param>
                    context SynthContext identifying requester                    
                </param>
                <param>
                    key Property being requested.                    
                </param>
                <param>
                    defaultValue Value to return if the property has not been
                      specified, or is not a Number                    
                </param>
                <return>
                    Value of the named property                    
                </return>
            </javadoc>
            <method name="getInt" type="int" line="988">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="key" type="Object"/>
                    <param name="defaultValue" type="int"/>
                </params>
                <declaration name="value" type="Object" line="989"/>
                <scope line="991"/>
            </method>
            <javadoc line="997">
                Convenience method to get a specific style property whose value is
                  an Boolean.                
                <param>
                    context SynthContext identifying requester                    
                </param>
                <param>
                    key Property being requested.                    
                </param>
                <param>
                    defaultValue Value to return if the property has not been
                      specified, or is not a Boolean                    
                </param>
                <return>
                    Value of the named property                    
                </return>
            </javadoc>
            <method name="getBoolean" type="boolean" line="1008">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="key" type="Object"/>
                    <param name="defaultValue" type="boolean"/>
                </params>
                <declaration name="value" type="Object" line="1009"/>
                <scope line="1011"/>
            </method>
            <javadoc line="1017">
                Convenience method to get a specific style property whose value is
                  an Icon.                
                <param>
                    context SynthContext identifying requester                    
                </param>
                <param>
                    key Property being requested.                    
                </param>
                <return>
                    Value of the named property, or null if not specified                    
                </return>
            </javadoc>
            <method name="getIcon" type="Icon" line="1025">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="key" type="Object"/>
                </params>
                <declaration name="value" type="Object" line="1026"/>
                <scope line="1028"/>
            </method>
            <javadoc line="1034">
                Convenience method to get a specific style property whose value is
                  a String.                
                <param>
                    context SynthContext identifying requester                    
                </param>
                <param>
                    key Property being requested.                    
                </param>
                <param>
                    defaultValue Value to return if the property has not been
                      specified, or is not a String                    
                </param>
                <return>
                    Value of the named property                    
                </return>
            </javadoc>
            <method name="getString" type="String" line="1045">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="key" type="Object"/>
                    <param name="defaultValue" type="String"/>
                </params>
                <declaration name="value" type="Object" line="1046"/>
                <scope line="1048"/>
            </method>
        </class>
    </source>