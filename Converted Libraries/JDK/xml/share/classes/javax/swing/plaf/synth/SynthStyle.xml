<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.plaf.synth">
        <import package="java.awt"/>
        <import package="javax.swing"/>
        <import package="javax.swing.border.Border"/>
        <import package="javax.swing.plaf.UIResource"/>
        <import package="javax.swing.plaf.basic.BasicLookAndFeel"/>
        <import package="javax.swing.text.DefaultEditorKit"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Map"/>
        <import package="javax.swing.text.JTextComponent"/>
        <class name="SynthStyle" line="11">
            <javadoc line="11">
                &lt;code&gt;SynthStyle&lt;/code&gt; is a set of style properties.
                  Each &lt;code&gt;SynthUI&lt;/code&gt; references at least one
                  &lt;code&gt;SynthStyle&lt;/code&gt; that is obtained using a
                  &lt;code&gt;SynthStyleFactory&lt;/code&gt;. You typically don&apos;t need to interact with
                  this class directly, rather you will load a
                  &lt;a href=&quot;doc-files/synthFileFormat.html&quot;&gt;Synth File Format file&lt;/a&gt; into
                  &lt;code&gt;SynthLookAndFeel&lt;/code&gt; that will create a set of SynthStyles.                
                <see>
                    SynthLookAndFeel                    
                </see>
                <see>
                    SynthStyleFactory                    
                </see>
                <since>
                    1.5                    
                </since>
                <author>
                    Scott Violet                    
                </author>
            </javadoc>
            <declaration name="DEFAULT_VALUES" type="Map&lt;Object,Object&gt;" line="25"/>
            <javadoc line="25">
                Contains the default values for certain properties.                
            </javadoc>
            <declaration name="SYNTH_GRAPHICS" type="SynthGraphicsUtils" line="29"/>
            <javadoc line="29">
                Shared SynthGraphics.                
            </javadoc>
            <javadoc line="33">
                Adds the default values that we know about to DEFAULT_VALUES.                
            </javadoc>
            <method name="populateDefaultValues" type="void" line="36">
                <declaration name="buttonMap" type="Object" line="37"/>
                <declaration name="multilineInputMap" type="Object" line="47"/>
                <declaration name="fieldInputMap" type="Object" line="51"/>
            </method>
            <javadoc line="82">
                Returns the default value for the specified property, or null if there
                  is no default for the specified value.                
            </javadoc>
            <method name="getDefaultValue" type="Object" line="86">
                <params>
                    <param name="key" type="Object"/>
                </params>
                <scope line="87">
                    <scope line="88"/>
                    <declaration name="value" type="Object" line="92"/>
                    <scope line="93"/>
                </scope>
            </method>
            <javadoc line="100">
                Constructs a SynthStyle.                
            </javadoc>
            <method name="SynthStyle" type="constructor" line="103"/>
            <javadoc line="105">
                Returns the &lt;code&gt;SynthGraphicUtils&lt;/code&gt; for the specified context.                
                <param>
                    context SynthContext identifying requester                    
                </param>
                <return>
                    SynthGraphicsUtils                    
                </return>
            </javadoc>
            <method name="getGraphicsUtils" type="SynthGraphicsUtils" line="110">
                <params>
                    <param name="context" type="SynthContext"/>
                </params>
            </method>
            <javadoc line="113">
                Returns the color for the specified state. This gives precedence to
                  foreground and background of the &lt;code&gt;JComponent&lt;/code&gt;. If the
                  &lt;code&gt;Color&lt;/code&gt; from the &lt;code&gt;JComponent&lt;/code&gt; is not appropriate,
                  or not used, this will invoke &lt;code&gt;getColorForState&lt;/code&gt;. Subclasses
                  should generally not have to override this, instead override{@link #getColorForState}.                
                <param>
                    context SynthContext identifying requester                    
                </param>
                <param>
                    type Type of color being requested.                    
                </param>
                <return>
                    Color                    
                </return>
            </javadoc>
            <method name="getColor" type="Color" line="123">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="type" type="ColorType"/>
                </params>
                <declaration name="c" type="JComponent" line="124"/>
                <declaration name="id" type="Region" line="125"/>
                <scope line="126">
                    <scope line="127">
                        <declaration name="txt" type="JTextComponent" line="128"/>
                        <declaration name="disabledColor" type="Color" line="129"/>
                        <scope line="130"/>
                    </scope>
                    <scope line="134"/>
                </scope>
                <declaration name="color" type="Color" line="138"/>
                <scope line="139">
                    <scope line="140"/>
                    <scope line="143"/>
                    <scope line="146"/>
                </scope>
                <scope line="150"/>
                <scope line="153">
                    <scope line="154"/>
                    <scope line="157"/>
                </scope>
            </method>
            <method name="getColorForState" type="Color" line="163"/>
            <javadoc line="163">
                Returns the color for the specified state. This should NOT call any
                  methods on the &lt;code&gt;JComponent&lt;/code&gt;.                
                <param>
                    context SynthContext identifying requester                    
                </param>
                <param>
                    type Type of color being requested.                    
                </param>
                <return>
                    Color to render with                    
                </return>
            </javadoc>
            <javadoc line="171">
                Returns the Font for the specified state. This redirects to the
                  &lt;code&gt;JComponent&lt;/code&gt; from the &lt;code&gt;context&lt;/code&gt; as necessary.
                  If this does not redirect
                  to the JComponent {@link #getFontForState} is invoked.                
                <param>
                    context SynthContext identifying requester                    
                </param>
                <return>
                    Font to render with                    
                </return>
            </javadoc>
            <method name="getFont" type="Font" line="179">
                <params>
                    <param name="context" type="SynthContext"/>
                </params>
                <declaration name="c" type="JComponent" line="180"/>
                <scope line="181"/>
                <declaration name="cFont" type="Font" line="184"/>
                <scope line="185"/>
            </method>
            <method name="getFontForState" type="Font" line="190"/>
            <javadoc line="190">
                Returns the font for the specified state. This should NOT call any
                  method on the &lt;code&gt;JComponent&lt;/code&gt;.                
                <param>
                    context SynthContext identifying requester                    
                </param>
                <return>
                    Font to render with                    
                </return>
            </javadoc>
            <javadoc line="197">
                Returns the Insets that are used to calculate sizing information.                
                <param>
                    context SynthContext identifying requester                    
                </param>
                <param>
                    insets Insets to place return value in.                    
                </param>
                <return>
                    Sizing Insets.                    
                </return>
            </javadoc>
            <method name="getInsets" type="Insets" line="203">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="insets" type="Insets"/>
                </params>
                <scope line="204"/>
            </method>
            <javadoc line="210">
                Returns the &lt;code&gt;SynthPainter&lt;/code&gt; that will be used for painting.
                  This may return null.                
                <param>
                    context SynthContext identifying requester                    
                </param>
                <return>
                    SynthPainter to use                    
                </return>
            </javadoc>
            <method name="getPainter" type="SynthPainter" line="216">
                <params>
                    <param name="context" type="SynthContext"/>
                </params>
            </method>
            <javadoc line="219">
                Returns true if the region is opaque.                
                <param>
                    context SynthContext identifying requester                    
                </param>
                <return>
                    true if region is opaque.                    
                </return>
            </javadoc>
            <method name="isOpaque" type="boolean" line="224">
                <params>
                    <param name="context" type="SynthContext"/>
                </params>
            </method>
            <javadoc line="227">
                Getter for a region specific style property.                
                <param>
                    context SynthContext identifying requester                    
                </param>
                <param>
                    key Property being requested.                    
                </param>
                <return>
                    Value of the named property                    
                </return>
            </javadoc>
            <method name="get" type="Object" line="233">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="key" type="Object"/>
                </params>
            </method>
            <method name="installDefaults" type="void" line="236">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="ui" type="SynthUI"/>
                </params>
                <scope line="237">
                    <declaration name="c" type="JComponent" line="238"/>
                    <declaration name="border" type="Border" line="239"/>
                    <scope line="240"/>
                </scope>
            </method>
            <javadoc line="246">
                Installs the necessary state from this Style on the
                  &lt;code&gt;JComponent&lt;/code&gt; from &lt;code&gt;context&lt;/code&gt;.                
                <param>
                    context SynthContext identifying component to install properties
                      to.                    
                </param>
            </javadoc>
            <method name="installDefaults" type="void" line="252">
                <params>
                    <param name="context" type="SynthContext"/>
                </params>
                <scope line="253">
                    <declaration name="c" type="JComponent" line="254"/>
                    <declaration name="region" type="Region" line="255"/>
                    <declaration name="font" type="Font" line="256"/>
                    <scope line="257"/>
                    <declaration name="background" type="Color" line="260"/>
                    <scope line="261"/>
                    <declaration name="foreground" type="Color" line="264"/>
                    <scope line="265"/>
                </scope>
            </method>
            <javadoc line="271">
                Uninstalls any state that this style installed on
                  the &lt;code&gt;JComponent&lt;/code&gt; from &lt;code&gt;context&lt;/code&gt;.
                  &lt;p&gt;
                  Styles should NOT depend upon this being called, in certain cases
                  it may never be called.                
                <param>
                    context SynthContext identifying component to install properties
                      to.                    
                </param>
            </javadoc>
            <method name="uninstallDefaults" type="void" line="280">
                <params>
                    <param name="context" type="SynthContext"/>
                </params>
                <scope line="281">
                    <declaration name="c" type="JComponent" line="282"/>
                    <declaration name="border" type="Border" line="283"/>
                    <scope line="284"/>
                </scope>
            </method>
            <javadoc line="289">
                Convenience method to get a specific style property whose value is
                  a &lt;code&gt;Number&lt;/code&gt;. If the value is a &lt;code&gt;Number&lt;/code&gt;,
                  &lt;code&gt;intValue&lt;/code&gt; is returned, otherwise &lt;code&gt;defaultValue&lt;/code&gt;
                  is returned.                
                <param>
                    context SynthContext identifying requester                    
                </param>
                <param>
                    key Property being requested.                    
                </param>
                <param>
                    defaultValue Value to return if the property has not been
                      specified, or is not a Number                    
                </param>
                <return>
                    Value of the named property                    
                </return>
            </javadoc>
            <method name="getInt" type="int" line="300">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="key" type="Object"/>
                    <param name="defaultValue" type="int"/>
                </params>
                <declaration name="value" type="Object" line="301"/>
                <scope line="302"/>
            </method>
            <javadoc line="307">
                Convenience method to get a specific style property whose value is
                  an Boolean.                
                <param>
                    context SynthContext identifying requester                    
                </param>
                <param>
                    key Property being requested.                    
                </param>
                <param>
                    defaultValue Value to return if the property has not been
                      specified, or is not a Boolean                    
                </param>
                <return>
                    Value of the named property                    
                </return>
            </javadoc>
            <method name="getBoolean" type="boolean" line="316">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="key" type="Object"/>
                    <param name="defaultValue" type="boolean"/>
                </params>
                <declaration name="value" type="Object" line="317"/>
                <scope line="318"/>
            </method>
            <javadoc line="323">
                Convenience method to get a specific style property whose value is
                  an Icon.                
                <param>
                    context SynthContext identifying requester                    
                </param>
                <param>
                    key Property being requested.                    
                </param>
                <return>
                    Value of the named property, or null if not specified                    
                </return>
            </javadoc>
            <method name="getIcon" type="Icon" line="330">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="key" type="Object"/>
                </params>
                <declaration name="value" type="Object" line="331"/>
                <scope line="332"/>
            </method>
            <javadoc line="337">
                Convenience method to get a specific style property whose value is
                  a String.                
                <param>
                    context SynthContext identifying requester                    
                </param>
                <param>
                    key Property being requested.                    
                </param>
                <param>
                    defaultValue Value to return if the property has not been
                      specified, or is not a String                    
                </param>
                <return>
                    Value of the named property                    
                </return>
            </javadoc>
            <method name="getString" type="String" line="346">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="key" type="Object"/>
                    <param name="defaultValue" type="String"/>
                </params>
                <declaration name="value" type="Object" line="347"/>
                <scope line="348"/>
            </method>
        </class>
    </source>