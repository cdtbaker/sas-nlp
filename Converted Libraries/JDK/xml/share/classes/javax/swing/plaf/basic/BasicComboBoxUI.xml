<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.plaf.basic">
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="javax.swing"/>
        <import package="javax.accessibility"/>
        <import package="javax.swing.plaf"/>
        <import package="javax.swing.text"/>
        <import package="javax.swing.event"/>
        <import package="java.beans.PropertyChangeListener"/>
        <import package="java.beans.PropertyChangeEvent"/>
        <import package="sun.awt.AppContext"/>
        <import package="sun.swing.DefaultLookup"/>
        <import package="sun.swing.UIAction"/>
        <class name="BasicComboBoxUI" line="14">
            <extends class="ComboBoxUI"/>
            <javadoc line="14">
                Basic UI implementation for JComboBox.
                  &lt;p&gt;
                  The combo box is a compound component which means that it is an agregate of
                  many simpler components. This class creates and manages the listeners
                  on the combo box and the combo box model. These listeners update the user
                  interface in response to changes in the properties and state of the combo box.
                  &lt;p&gt;
                  All event handling is handled by listener classes created with the
                  &lt;code&gt;createxxxListener()&lt;/code&gt; methods and internal classes.
                  You can change the behavior of this class by overriding the
                  &lt;code&gt;createxxxListener()&lt;/code&gt; methods and supplying your own
                  event listeners or subclassing from the ones supplied in this class.
                  &lt;p&gt;
                  For adding specific actions,
                  overide &lt;code&gt;installKeyboardActions&lt;/code&gt; to add actions in response to
                  KeyStroke bindings. See the article &lt;a href=&quot;http://java.sun.com/products/jfc/tsc/special_report/kestrel/keybindings.html&quot;&gt;Keyboard Bindings in Swing&lt;/a&gt;
                  at &lt;a href=&quot;http://java.sun.com/products/jfc/tsc&quot;&gt;&lt;em&gt;The Swing Connection&lt;/em&gt;&lt;/a&gt;.                
                <author>
                    Arnaud Weber                    
                </author>
                <author>
                    Tom Santos                    
                </author>
                <author>
                    Mark Davidson                    
                </author>
            </javadoc>
            <declaration name="comboBox" type="JComboBox" line="37"/>
            <declaration name="hasFocus" type="boolean" line="38"/>
            <javadoc line="38">
                This protected field is implementation specific. Do not access directly
                  or override.                
            </javadoc>
            <declaration name="isTableCellEditor" type="boolean" line="43"/>
            <declaration name="IS_TABLE_CELL_EDITOR" type="String" line="44"/>
            <declaration name="listBox" type="JList" line="45"/>
            <declaration name="currentValuePane" type="CellRendererPane" line="46"/>
            <declaration name="popup" type="ComboPopup" line="47"/>
            <declaration name="editor" type="Component" line="48"/>
            <declaration name="arrowButton" type="JButton" line="49"/>
            <declaration name="keyListener" type="KeyListener" line="50"/>
            <javadoc line="50">
                This protected field is implementation specific. Do not access directly
                  or override. Override the listener construction method instead.                
                <see>
                    #createKeyListener                    
                </see>
            </javadoc>
            <declaration name="focusListener" type="FocusListener" line="56"/>
            <javadoc line="56">
                This protected field is implementation specific. Do not access directly
                  or override. Override the listener construction method instead.                
                <see>
                    #createFocusListener                    
                </see>
            </javadoc>
            <declaration name="propertyChangeListener" type="PropertyChangeListener" line="62"/>
            <javadoc line="62">
                This protected field is implementation specific. Do not access directly
                  or override. Override the listener construction method instead.                
                <see>
                    #createPropertyChangeListener                    
                </see>
            </javadoc>
            <declaration name="itemListener" type="ItemListener" line="68"/>
            <javadoc line="68">
                This protected field is implementation specific. Do not access directly
                  or override. Override the listener construction method instead.                
                <see>
                    #createItemListener                    
                </see>
            </javadoc>
            <declaration name="popupMouseListener" type="MouseListener" line="74"/>
            <declaration name="popupMouseMotionListener" type="MouseMotionListener" line="75"/>
            <declaration name="popupKeyListener" type="KeyListener" line="76"/>
            <declaration name="listDataListener" type="ListDataListener" line="77"/>
            <javadoc line="77">
                This protected field is implementation specific. Do not access directly
                  or override. Override the listener construction method instead.                
                <see>
                    #createListDataListener                    
                </see>
            </javadoc>
            <declaration name="handler" type="Handler" line="83"/>
            <javadoc line="83">
                Implements all the Listeners needed by this class, all existing
                  listeners redirect to it.                
            </javadoc>
            <declaration name="timeFactor" type="long" line="88"/>
            <javadoc line="88">
                The time factor to treate the series of typed alphanumeric key
                  as prefix for first letter navigation.                
            </javadoc>
            <declaration name="lastTime" type="long" line="93"/>
            <javadoc line="93">
                This is tricky, this variables is needed for DefaultKeySelectionManager
                  to take into account time factor.                
            </javadoc>
            <declaration name="time" type="long" line="98"/>
            <declaration name="keySelectionManager" type="JComboBox.KeySelectionManager" line="99"/>
            <javadoc line="99">
                The default key selection manager                
            </javadoc>
            <declaration name="isMinimumSizeDirty" type="boolean" line="103"/>
            <declaration name="cachedMinimumSize" type="Dimension" line="104"/>
            <declaration name="isDisplaySizeDirty" type="boolean" line="105"/>
            <declaration name="cachedDisplaySize" type="Dimension" line="106"/>
            <declaration name="COMBO_UI_LIST_CELL_RENDERER_KEY" type="Object" line="107"/>
            <declaration name="HIDE_POPUP_KEY" type="StringBuffer" line="108"/>
            <declaration name="sameBaseline" type="boolean" line="109"/>
            <javadoc line="109">
                Whether or not all cells have the same baseline.                
            </javadoc>
            <declaration name="squareButton" type="boolean" line="113"/>
            <javadoc line="113">
                Indicates whether or not the combo box button should be square.
                  If square, then the width and height are equal, and are both set to
                  the height of the combo minus appropriate insets.                
                <since>
                    1.7                    
                </since>
            </javadoc>
            <declaration name="padding" type="Insets" line="120"/>
            <javadoc line="120">
                If specified, these insets act as padding around the cell renderer when
                  laying out and painting the &quot;selected&quot; item in the combo box. These
                  insets add to those specified by the cell renderer.                
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="getDefaultListCellRenderer" type="ListCellRenderer" line="127">
                <declaration name="renderer" type="ListCellRenderer" line="128"/>
                <scope line="129"/>
            </method>
            <javadoc line="135">
                Populates ComboBox&apos;s actions.                
            </javadoc>
            <method name="loadActionMap" type="void" line="138">
                <params>
                    <param name="map" type="LazyActionMap"/>
                </params>
            </method>
            <method name="createUI" type="ComponentUI" line="152">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <method name="installUI" type="void" line="155">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <declaration name="inTable" type="Boolean" line="161"/>
                <scope line="162"/>
                <scope line="165"/>
                <scope line="168"/>
                <scope line="177"/>
            </method>
            <method name="uninstallUI" type="void" line="182">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <scope line="190"/>
                <declaration name="comboBoxEditor" type="ComboBoxEditor" line="193"/>
                <scope line="194">
                    <scope line="195"/>
                </scope>
                <scope line="200"/>
            </method>
            <javadoc line="212">
                Installs the default colors, default font, default renderer, and default
                  editor into the JComboBox.                
            </javadoc>
            <method name="installDefaults" type="void" line="216">
                <declaration name="l" type="Long" line="220"/>
                <declaration name="b" type="Boolean" line="222"/>
            </method>
            <javadoc line="226">
                Creates and installs listeners for the combo box and its model.
                  This method is called when the UI is installed.                
            </javadoc>
            <method name="installListeners" type="void" line="230">
                <scope line="231"/>
                <scope line="234"/>
                <scope line="237"/>
                <scope line="240"/>
                <scope line="243"/>
                <scope line="246"/>
                <scope line="249"/>
                <scope line="252">
                    <scope line="253"/>
                </scope>
            </method>
            <javadoc line="258">
                Uninstalls the default colors, default font, default renderer,
                  and default editor from the combo box.                
            </javadoc>
            <method name="uninstallDefaults" type="void" line="262"/>
            <javadoc line="266">
                Removes the installed listeners from the combo box and its model.
                  The number and types of listeners removed and in this method should be
                  the same that was added in &lt;code&gt;installListeners&lt;/code&gt;                
            </javadoc>
            <method name="uninstallListeners" type="void" line="271">
                <scope line="272"/>
                <scope line="275"/>
                <scope line="278"/>
                <scope line="281"/>
                <scope line="284"/>
                <scope line="287"/>
                <scope line="290"/>
                <scope line="293">
                    <scope line="294"/>
                </scope>
            </method>
            <javadoc line="299">
                Creates the popup portion of the combo box.                
                <return>
                    an instance of &lt;code&gt;ComboPopup&lt;/code&gt;                    
                </return>
                <see>
                    ComboPopup                    
                </see>
            </javadoc>
            <method name="createPopup" type="ComboPopup" line="304"/>
            <javadoc line="307">
                Creates a &lt;code&gt;KeyListener&lt;/code&gt; which will be added to the
                  combo box. If this method returns null then it will not be added
                  to the combo box.                
                <return>
                    an instance &lt;code&gt;KeyListener&lt;/code&gt; or null                    
                </return>
            </javadoc>
            <method name="createKeyListener" type="KeyListener" line="313"/>
            <javadoc line="316">
                Creates a &lt;code&gt;FocusListener&lt;/code&gt; which will be added to the combo box.
                  If this method returns null then it will not be added to the combo box.                
                <return>
                    an instance of a &lt;code&gt;FocusListener&lt;/code&gt; or null                    
                </return>
            </javadoc>
            <method name="createFocusListener" type="FocusListener" line="321"/>
            <javadoc line="324">
                Creates a list data listener which will be added to the
                  &lt;code&gt;ComboBoxModel&lt;/code&gt;. If this method returns null then
                  it will not be added to the combo box model.                
                <return>
                    an instance of a &lt;code&gt;ListDataListener&lt;/code&gt; or null                    
                </return>
            </javadoc>
            <method name="createListDataListener" type="ListDataListener" line="330"/>
            <javadoc line="333">
                Creates an &lt;code&gt;ItemListener&lt;/code&gt; which will be added to the
                  combo box. If this method returns null then it will not
                  be added to the combo box.
                  &lt;p&gt;
                  Subclasses may override this method to return instances of their own
                  ItemEvent handlers.                
                <return>
                    an instance of an &lt;code&gt;ItemListener&lt;/code&gt; or null                    
                </return>
            </javadoc>
            <method name="createItemListener" type="ItemListener" line="342"/>
            <javadoc line="345">
                Creates a &lt;code&gt;PropertyChangeListener&lt;/code&gt; which will be added to
                  the combo box. If this method returns null then it will not
                  be added to the combo box.                
                <return>
                    an instance of a &lt;code&gt;PropertyChangeListener&lt;/code&gt; or null                    
                </return>
            </javadoc>
            <method name="createPropertyChangeListener" type="PropertyChangeListener" line="351"/>
            <javadoc line="354">
                Creates a layout manager for managing the components which make up the
                  combo box.                
                <return>
                    an instance of a layout manager                    
                </return>
            </javadoc>
            <method name="createLayoutManager" type="LayoutManager" line="359"/>
            <javadoc line="362">
                Creates the default renderer that will be used in a non-editiable combo
                  box. A default renderer will used only if a renderer has not been
                  explicitly set with &lt;code&gt;setRenderer&lt;/code&gt;.                
                <return>
                    a &lt;code&gt;ListCellRender&lt;/code&gt; used for the combo box                    
                </return>
                <see>
                    javax.swing.JComboBox#setRenderer                    
                </see>
            </javadoc>
            <method name="createRenderer" type="ListCellRenderer" line="369"/>
            <javadoc line="372">
                Creates the default editor that will be used in editable combo boxes.
                  A default editor will be used only if an editor has not been
                  explicitly set with &lt;code&gt;setEditor&lt;/code&gt;.                
                <return>
                    a &lt;code&gt;ComboBoxEditor&lt;/code&gt; used for the combo box                    
                </return>
                <see>
                    javax.swing.JComboBox#setEditor                    
                </see>
            </javadoc>
            <method name="createEditor" type="ComboBoxEditor" line="379"/>
            <javadoc line="382">
                Returns the shared listener.                
            </javadoc>
            <method name="getHandler" type="Handler" line="385">
                <scope line="386"/>
            </method>
            <class name="KeyHandler" line="391">
                <extends class="KeyAdapter"/>
                <javadoc line="391">
                    This listener checks to see if the key event isn&apos;t a navigation key.  If
                      it finds a key event that wasn&apos;t a navigation key it dispatches it to
                      JComboBox.selectWithKeyChar() so that it can do type-ahead.
                      This public inner class should be treated as protected.
                      Instantiate it only within subclasses of
                      &lt;code&gt;BasicComboBoxUI&lt;/code&gt;.                    
                </javadoc>
                <method name="keyPressed" type="void" line="400">
                    <params>
                        <param name="e" type="KeyEvent"/>
                    </params>
                </method>
            </class>
            <class name="FocusHandler" line="404">
                <implements interface="FocusListener"/>
                <javadoc line="404">
                    This listener hides the popup when the focus is lost.  It also repaints
                      when focus is gained or lost.
                      This public inner class should be treated as protected.
                      Instantiate it only within subclasses of
                      &lt;code&gt;BasicComboBoxUI&lt;/code&gt;.                    
                </javadoc>
                <method name="focusGained" type="void" line="412">
                    <params>
                        <param name="e" type="FocusEvent"/>
                    </params>
                </method>
                <method name="focusLost" type="void" line="415">
                    <params>
                        <param name="e" type="FocusEvent"/>
                    </params>
                </method>
            </class>
            <class name="ListDataHandler" line="419">
                <implements interface="ListDataListener"/>
                <javadoc line="419">
                    This listener watches for changes in the
                      &lt;code&gt;ComboBoxModel&lt;/code&gt;.
                      &lt;p&gt;
                      This public inner class should be treated as protected.
                      Instantiate it only within subclasses of
                      &lt;code&gt;BasicComboBoxUI&lt;/code&gt;.                    
                    <see>
                        #createListDataListener                        
                    </see>
                </javadoc>
                <method name="contentsChanged" type="void" line="429">
                    <params>
                        <param name="e" type="ListDataEvent"/>
                    </params>
                </method>
                <method name="intervalAdded" type="void" line="432">
                    <params>
                        <param name="e" type="ListDataEvent"/>
                    </params>
                </method>
                <method name="intervalRemoved" type="void" line="435">
                    <params>
                        <param name="e" type="ListDataEvent"/>
                    </params>
                </method>
            </class>
            <class name="ItemHandler" line="439">
                <implements interface="ItemListener"/>
                <javadoc line="439">
                    This listener watches for changes to the selection in the
                      combo box.
                      &lt;p&gt;
                      This public inner class should be treated as protected.
                      Instantiate it only within subclasses of
                      &lt;code&gt;BasicComboBoxUI&lt;/code&gt;.                    
                    <see>
                        #createItemListener                        
                    </see>
                </javadoc>
                <method name="itemStateChanged" type="void" line="449">
                    <params>
                        <param name="e" type="ItemEvent"/>
                    </params>
                </method>
            </class>
            <class name="PropertyChangeHandler" line="452">
                <implements interface="PropertyChangeListener"/>
                <javadoc line="452">
                    This listener watches for bound properties that have changed in the
                      combo box.
                      &lt;p&gt;
                      Subclasses which wish to listen to combo box property changes should
                      call the superclass methods to ensure that the combo box ui correctly
                      handles property changes.
                      &lt;p&gt;
                      This public inner class should be treated as protected.
                      Instantiate it only within subclasses of
                      &lt;code&gt;BasicComboBoxUI&lt;/code&gt;.                    
                    <see>
                        #createPropertyChangeListener                        
                    </see>
                </javadoc>
                <method name="propertyChange" type="void" line="466">
                    <params>
                        <param name="e" type="PropertyChangeEvent"/>
                    </params>
                </method>
            </class>
            <method name="updateToolTipTextForChildren" type="void" line="470">
                <declaration name="children" type="Component[]" line="471"/>
                <scope line="472">
                    <scope line="473"/>
                </scope>
            </method>
            <class name="ComboBoxLayoutManager" line="478">
                <implements interface="LayoutManager"/>
                <javadoc line="478">
                    This layout manager handles the &apos;standard&apos; layout of combo boxes.  It puts
                      the arrow button to the right and the editor to the left.  If there is no
                      editor it still keeps the arrow button to the right.
                      This public inner class should be treated as protected.
                      Instantiate it only within subclasses of
                      &lt;code&gt;BasicComboBoxUI&lt;/code&gt;.                    
                </javadoc>
                <method name="addLayoutComponent" type="void" line="487">
                    <params>
                        <param name="name" type="String"/>
                        <param name="comp" type="Component"/>
                    </params>
                </method>
                <method name="removeLayoutComponent" type="void" line="489">
                    <params>
                        <param name="comp" type="Component"/>
                    </params>
                </method>
                <method name="preferredLayoutSize" type="Dimension" line="491">
                    <params>
                        <param name="parent" type="Container"/>
                    </params>
                </method>
                <method name="minimumLayoutSize" type="Dimension" line="494">
                    <params>
                        <param name="parent" type="Container"/>
                    </params>
                </method>
                <method name="layoutContainer" type="void" line="497">
                    <params>
                        <param name="parent" type="Container"/>
                    </params>
                </method>
            </class>
            <javadoc line="501">
                Creates and initializes the components which make up the
                  aggregate combo box. This method is called as part of the UI
                  installation process.                
            </javadoc>
            <method name="installComponents" type="void" line="506">
                <scope line="509"/>
                <scope line="512"/>
            </method>
            <javadoc line="517">
                The aggregate components which compise the combo box are
                  unregistered and uninitialized. This method is called as part of the
                  UI uninstallation process.                
            </javadoc>
            <method name="uninstallComponents" type="void" line="522">
                <scope line="523"/>
                <scope line="526"/>
            </method>
            <javadoc line="532">
                This public method is implementation specific and should be private.
                  do not call or override. To implement a specific editor create a
                  custom &lt;code&gt;ComboBoxEditor&lt;/code&gt;                
                <see>
                    #createEditor                    
                </see>
                <see>
                    javax.swing.JComboBox#setEditor                    
                </see>
                <see>
                    javax.swing.ComboBoxEditor                    
                </see>
            </javadoc>
            <method name="addEditor" type="void" line="540">
                <scope line="543">
                    <scope line="546"/>
                </scope>
            </method>
            <javadoc line="551">
                This public method is implementation specific and should be private.
                  do not call or override.                
                <see>
                    #addEditor                    
                </see>
            </javadoc>
            <method name="removeEditor" type="void" line="556">
                <scope line="557"/>
            </method>
            <javadoc line="563">
                This protected method is implementation specific and should be private.
                  do not call or override.                
                <see>
                    #addEditor                    
                </see>
            </javadoc>
            <method name="configureEditor" type="void" line="568">
                <scope line="572"/>
                <scope line="577"/>
            </method>
            <javadoc line="584">
                This protected method is implementation specific and should be private.
                  Do not call or override.                
                <see>
                    #addEditor                    
                </see>
            </javadoc>
            <method name="unconfigureEditor" type="void" line="589">
                <scope line="590"/>
            </method>
            <javadoc line="597">
                This public method is implementation specific and should be private. Do
                  not call or override.                
                <see>
                    #createArrowButton                    
                </see>
            </javadoc>
            <method name="configureArrowButton" type="void" line="602">
                <scope line="603"/>
            </method>
            <javadoc line="614">
                This public method is implementation specific and should be private. Do
                  not call or override.                
                <see>
                    #createArrowButton                    
                </see>
            </javadoc>
            <method name="unconfigureArrowButton" type="void" line="619">
                <scope line="620"/>
            </method>
            <javadoc line="625">
                Creates a button which will be used as the control to show or hide
                  the popup portion of the combo box.                
                <return>
                    a button which represents the popup control                    
                </return>
            </javadoc>
            <method name="createArrowButton" type="JButton" line="630">
                <declaration name="button" type="JButton" line="631"/>
            </method>
            <javadoc line="635">
                Tells if the popup is visible or not.                
            </javadoc>
            <method name="isPopupVisible" type="boolean" line="638">
                <params>
                    <param name="c" type="JComboBox"/>
                </params>
            </method>
            <javadoc line="641">
                Hides the popup.                
            </javadoc>
            <method name="setPopupVisible" type="void" line="644">
                <params>
                    <param name="c" type="JComboBox"/>
                    <param name="v" type="boolean"/>
                </params>
                <scope line="645"/>
                <scope line="648"/>
            </method>
            <javadoc line="652">
                Determines if the JComboBox is focus traversable.  If the JComboBox is editable
                  this returns false, otherwise it returns true.                
            </javadoc>
            <method name="isFocusTraversable" type="boolean" line="656">
                <params>
                    <param name="c" type="JComboBox"/>
                </params>
            </method>
            <method name="paint" type="void" line="659">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="c" type="JComponent"/>
                </params>
                <scope line="661">
                    <declaration name="r" type="Rectangle" line="662"/>
                </scope>
            </method>
            <method name="getPreferredSize" type="Dimension" line="667">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <javadoc line="670">
                The minumum size is the size of the display area plus insets plus the button.                
            </javadoc>
            <method name="getMinimumSize" type="Dimension" line="673">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <scope line="674"/>
                <declaration name="size" type="Dimension" line="677"/>
                <declaration name="insets" type="Insets" line="678"/>
                <declaration name="buttonHeight" type="int" line="679"/>
                <declaration name="buttonWidth" type="int" line="680"/>
            </method>
            <method name="getMaximumSize" type="Dimension" line="687">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <javadoc line="690">
                Returns the baseline.                
                <throws>
                    NullPointerException {@inheritDoc}                    
                </throws>
                <throws>
                    IllegalArgumentException {@inheritDoc}                    
                </throws>
                <see>
                    javax.swing.JComponent#getBaseline(int,int)                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getBaseline" type="int" line="697">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <declaration name="baseline" type="int" line="699"/>
                <scope line="701">
                    <declaration name="insets" type="Insets" line="702"/>
                    <scope line="704">
                        <declaration name="renderer" type="ListCellRenderer" line="705"/>
                        <scope line="706"/>
                        <declaration name="value" type="Object" line="709"/>
                        <declaration name="prototypeValue" type="Object" line="710"/>
                        <scope line="711"/>
                        <scope line="714"/>
                        <scope line="717"/>
                        <scope line="720"/>
                        <declaration name="component" type="Component" line="723"/>
                        <scope line="724"/>
                    </scope>
                    <scope line="729"/>
                    <scope line="732"/>
                </scope>
            </method>
            <javadoc line="738">
                Returns an enum indicating how the baseline of the component
                  changes as the size changes.                
                <throws>
                    NullPointerException {@inheritDoc}                    
                </throws>
                <see>
                    javax.swing.JComponent#getBaseline(int,int)                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getBaselineResizeBehavior" type="Component.BaselineResizeBehavior" line="745">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <scope line="748"/>
                <scope line="751">
                    <declaration name="renderer" type="ListCellRenderer" line="752"/>
                    <scope line="753"/>
                    <declaration name="value" type="Object" line="756"/>
                    <declaration name="prototypeValue" type="Object" line="757"/>
                    <scope line="758"/>
                    <scope line="761"/>
                    <scope line="764">
                        <declaration name="component" type="Component" line="765"/>
                    </scope>
                </scope>
            </method>
            <method name="getAccessibleChildrenCount" type="int" line="771">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <scope line="772"/>
                <scope line="775"/>
            </method>
            <method name="getAccessibleChild" type="Accessible" line="779">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="i" type="int"/>
                </params>
                <scope line="782">
                    <declaration name="ac" type="AccessibleContext" line="783"/>
                </scope>
                <scope line="789">
                    <declaration name="ac" type="AccessibleContext" line="790"/>
                </scope>
            </method>
            <javadoc line="798">
                Returns whether or not the supplied keyCode maps to a key that is used for
                  navigation.  This is used for optimizing key input by only passing non-
                  navigation keys to the type-ahead mechanism.  Subclasses should override this
                  if they change the navigation keys.                
            </javadoc>
            <method name="isNavigationKey" type="boolean" line="804">
                <params>
                    <param name="keyCode" type="int"/>
                </params>
            </method>
            <method name="isNavigationKey" type="boolean" line="807">
                <params>
                    <param name="keyCode" type="int"/>
                    <param name="modifiers" type="int"/>
                </params>
                <declaration name="inputMap" type="InputMap" line="808"/>
                <declaration name="key" type="KeyStroke" line="809"/>
                <scope line="810"/>
            </method>
            <javadoc line="815">
                Selects the next item in the list.  It won&apos;t change the selection if the
                  currently selected item is already the last item.                
            </javadoc>
            <method name="selectNextPossibleValue" type="void" line="819">
                <declaration name="si" type="int" line="820"/>
                <scope line="821"/>
                <scope line="824"/>
                <scope line="827">
                    <scope line="830"/>
                </scope>
            </method>
            <javadoc line="836">
                Selects the previous item in the list.  It won&apos;t change the selection if the
                  currently selected item is already the first item.                
            </javadoc>
            <method name="selectPreviousPossibleValue" type="void" line="840">
                <declaration name="si" type="int" line="841"/>
                <scope line="842"/>
                <scope line="845"/>
                <scope line="848">
                    <scope line="851"/>
                </scope>
            </method>
            <javadoc line="857">
                Hides the popup if it is showing and shows the popup if it is hidden.                
            </javadoc>
            <method name="toggleOpenClose" type="void" line="860"/>
            <javadoc line="863">
                Returns the area that is reserved for drawing the currently selected item.                
            </javadoc>
            <method name="rectangleForCurrentValue" type="Rectangle" line="866">
                <declaration name="width" type="int" line="867"/>
                <declaration name="height" type="int" line="868"/>
                <declaration name="insets" type="Insets" line="869"/>
                <declaration name="buttonSize" type="int" line="870"/>
                <scope line="871"/>
                <scope line="874"/>
                <scope line="877"/>
            </method>
            <javadoc line="881">
                Gets the insets from the JComboBox.                
            </javadoc>
            <method name="getInsets" type="Insets" line="884"/>
            <javadoc line="887">
                Paints the currently selected item.                
            </javadoc>
            <method name="paintCurrentValue" type="void" line="890">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="bounds" type="Rectangle"/>
                    <param name="hasFocus" type="boolean"/>
                </params>
                <declaration name="renderer" type="ListCellRenderer" line="891"/>
                <declaration name="c" type="Component" line="892"/>
                <scope line="893"/>
                <scope line="896"/>
                <scope line="901"/>
                <scope line="905">
                    <scope line="906"/>
                    <scope line="910"/>
                </scope>
                <declaration name="shouldValidate" type="boolean" line="915"/>
                <scope line="916"/>
                <declaration name="x" type="int" line="919"/>
                <scope line="920"/>
            </method>
            <javadoc line="928">
                Paints the background of the currently selected item.                
            </javadoc>
            <method name="paintCurrentValueBackground" type="void" line="931">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="bounds" type="Rectangle"/>
                    <param name="hasFocus" type="boolean"/>
                </params>
                <declaration name="t" type="Color" line="932"/>
            </method>
            <javadoc line="938">
                Repaint the currently selected item.                
            </javadoc>
            <method name="repaintCurrentValue" type="void" line="941">
                <declaration name="r" type="Rectangle" line="942"/>
            </method>
            <javadoc line="945">
                Return the default size of an empty display area of the combo box using
                  the current renderer and font.                
                <return>
                    the size of an empty display area                    
                </return>
                <see>
                    #getDisplaySize                    
                </see>
            </javadoc>
            <method name="getDefaultSize" type="Dimension" line="951">
                <declaration name="d" type="Dimension" line="952"/>
            </method>
            <javadoc line="955">
                Returns the calculated size of the display area. The display area is the
                  portion of the combo box in which the selected item is displayed. This
                  method will use the prototype display value if it has been set.
                  &lt;p&gt;
                  For combo boxes with a non trivial number of items, it is recommended to
                  use a prototype display value to significantly speed up the display
                  size calculation.                
                <return>
                    the size of the display area calculated from the combo box items                    
                </return>
                <see>
                    javax.swing.JComboBox#setPrototypeDisplayValue                    
                </see>
            </javadoc>
            <method name="getDisplaySize" type="Dimension" line="966">
                <scope line="967"/>
                <declaration name="result" type="Dimension" line="970"/>
                <declaration name="renderer" type="ListCellRenderer" line="971"/>
                <scope line="972"/>
                <declaration name="prototypeValue" type="Object" line="976"/>
                <scope line="977"/>
                <scope line="980">
                    <declaration name="model" type="ComboBoxModel" line="981"/>
                    <declaration name="modelSize" type="int" line="982"/>
                    <declaration name="baseline" type="int" line="983"/>
                    <declaration name="d" type="Dimension" line="984"/>
                    <declaration name="cpn" type="Component" line="985"/>
                    <scope line="986">
                        <scope line="987">
                            <declaration name="value" type="Object" line="988"/>
                            <declaration name="c" type="Component" line="989"/>
                            <scope line="991">
                                <declaration name="newBaseline" type="int" line="992"/>
                                <scope line="993"/>
                                <scope line="996"/>
                                <scope line="999"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="1007">
                        <scope line="1009"/>
                    </scope>
                </scope>
                <scope line="1014">
                    <declaration name="d" type="Dimension" line="1015"/>
                </scope>
                <scope line="1019"/>
            </method>
            <javadoc line="1027">
                Returns the size a component would have if used as a cell renderer.                
                <param>
                    comp a {@code Component} to check                    
                </param>
                <return>
                    size of the component                    
                </return>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="getSizeForComponent" type="Dimension" line="1033">
                <params>
                    <param name="comp" type="Component"/>
                </params>
                <declaration name="d" type="Dimension" line="1036"/>
            </method>
            <javadoc line="1040">
                Adds keyboard actions to the JComboBox.  Actions on enter and esc are already
                  supplied.  Add more actions as you need them.                
            </javadoc>
            <method name="installKeyboardActions" type="void" line="1044">
                <declaration name="km" type="InputMap" line="1045"/>
            </method>
            <method name="getInputMap" type="InputMap" line="1049">
                <params>
                    <param name="condition" type="int"/>
                </params>
                <scope line="1050"/>
            </method>
            <method name="isTableCellEditor" type="boolean" line="1055"/>
            <javadoc line="1058">
                Removes the focus InputMap and ActionMap.                
            </javadoc>
            <method name="uninstallKeyboardActions" type="void" line="1061"/>
            <class name="Actions" line="1065">
                <extends class="UIAction"/>
                <declaration name="HIDE" type="String" line="1066"/>
                <declaration name="DOWN" type="String" line="1067"/>
                <declaration name="DOWN_2" type="String" line="1068"/>
                <declaration name="TOGGLE" type="String" line="1069"/>
                <declaration name="TOGGLE_2" type="String" line="1070"/>
                <declaration name="UP" type="String" line="1071"/>
                <declaration name="UP_2" type="String" line="1072"/>
                <declaration name="ENTER" type="String" line="1073"/>
                <declaration name="PAGE_DOWN" type="String" line="1074"/>
                <declaration name="PAGE_UP" type="String" line="1075"/>
                <declaration name="HOME" type="String" line="1076"/>
                <declaration name="END" type="String" line="1077"/>
                <method name="Actions" type="constructor" line="1078">
                    <params>
                        <param name="name" type="String"/>
                    </params>
                </method>
                <method name="actionPerformed" type="void" line="1081">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                    <declaration name="key" type="String" line="1082"/>
                    <declaration name="comboBox" type="JComboBox" line="1083"/>
                    <declaration name="ui" type="BasicComboBoxUI" line="1084"/>
                    <scope line="1085"/>
                    <scope line="1089">
                        <declaration name="index" type="int" line="1090"/>
                        <scope line="1091"/>
                    </scope>
                    <scope line="1095">
                        <scope line="1096">
                            <scope line="1097">
                                <scope line="1098"/>
                            </scope>
                            <scope line="1102"/>
                        </scope>
                    </scope>
                    <scope line="1107">
                        <scope line="1108">
                            <scope line="1109"/>
                            <scope line="1112">
                                <scope line="1113"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="1119">
                        <scope line="1120">
                            <scope line="1121"/>
                            <scope line="1124"/>
                        </scope>
                    </scope>
                    <scope line="1129">
                        <scope line="1130">
                            <scope line="1131"/>
                            <scope line="1134"/>
                        </scope>
                    </scope>
                    <scope line="1139">
                        <scope line="1140">
                            <scope line="1141"/>
                            <scope line="1144"/>
                        </scope>
                    </scope>
                    <scope line="1149">
                        <scope line="1150">
                            <declaration name="isEnterSelectablePopup" type="boolean" line="1151"/>
                            <scope line="1152">
                                <declaration name="listItem" type="Object" line="1153"/>
                                <scope line="1154"/>
                            </scope>
                        </scope>
                        <scope line="1161">
                            <scope line="1162"/>
                            <declaration name="root" type="JRootPane" line="1165"/>
                            <scope line="1166">
                                <declaration name="im" type="InputMap" line="1167"/>
                                <declaration name="am" type="ActionMap" line="1168"/>
                                <scope line="1169">
                                    <declaration name="obj" type="Object" line="1170"/>
                                    <scope line="1171">
                                        <declaration name="action" type="Action" line="1172"/>
                                        <scope line="1173"/>
                                    </scope>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </method>
                <method name="getNextIndex" type="int" line="1182">
                    <params>
                        <param name="comboBox" type="JComboBox"/>
                        <param name="key" type="String"/>
                    </params>
                    <scope line="1183">
                        <declaration name="listHeight" type="int" line="1184"/>
                        <declaration name="index" type="int" line="1185"/>
                    </scope>
                    <scope line="1188">
                        <declaration name="listHeight" type="int" line="1189"/>
                        <declaration name="index" type="int" line="1190"/>
                        <declaration name="max" type="int" line="1191"/>
                    </scope>
                    <scope line="1194"/>
                    <scope line="1197"/>
                </method>
                <method name="isEnabled" type="boolean" line="1202">
                    <params>
                        <param name="c" type="Object"/>
                    </params>
                    <scope line="1203"/>
                </method>
            </class>
            <class name="Handler" line="1209">
                <implements interface="ActionListener"/>
                <implements interface="FocusListener"/>
                <implements interface="KeyListener"/>
                <implements interface="LayoutManager"/>
                <implements interface="ListDataListener"/>
                <implements interface="PropertyChangeListener"/>
                <method name="propertyChange" type="void" line="1210">
                    <params>
                        <param name="e" type="PropertyChangeEvent"/>
                    </params>
                    <declaration name="propertyName" type="String" line="1211"/>
                    <scope line="1212">
                        <scope line="1213"/>
                    </scope>
                    <scope line="1219">
                        <declaration name="comboBox" type="JComboBox" line="1220"/>
                        <scope line="1221">
                            <declaration name="newModel" type="ComboBoxModel" line="1222"/>
                            <declaration name="oldModel" type="ComboBoxModel" line="1223"/>
                            <scope line="1224"/>
                            <scope line="1227"/>
                            <scope line="1230"/>
                        </scope>
                        <scope line="1238"/>
                        <scope line="1242">
                            <scope line="1243"/>
                            <scope line="1247"/>
                        </scope>
                        <scope line="1254">
                            <declaration name="enabled" type="boolean" line="1255"/>
                        </scope>
                        <scope line="1260">
                            <declaration name="focusable" type="boolean" line="1261"/>
                        </scope>
                        <scope line="1266">
                            <scope line="1267"/>
                        </scope>
                        <scope line="1272">
                            <scope line="1274"/>
                        </scope>
                        <scope line="1281"/>
                        <scope line="1284">
                            <declaration name="inTable" type="Boolean" line="1285"/>
                        </scope>
                        <scope line="1288"/>
                        <scope line="1293"/>
                    </scope>
                </method>
                <method name="keyPressed" type="void" line="1300">
                    <params>
                        <param name="e" type="KeyEvent"/>
                    </params>
                    <scope line="1301"/>
                    <scope line="1304">
                        <scope line="1306"/>
                    </scope>
                </method>
                <method name="keyTyped" type="void" line="1311">
                    <params>
                        <param name="e" type="KeyEvent"/>
                    </params>
                </method>
                <method name="keyReleased" type="void" line="1313">
                    <params>
                        <param name="e" type="KeyEvent"/>
                    </params>
                </method>
                <method name="isTypeAheadKey" type="boolean" line="1315">
                    <params>
                        <param name="e" type="KeyEvent"/>
                    </params>
                </method>
                <method name="focusGained" type="void" line="1318">
                    <params>
                        <param name="e" type="FocusEvent"/>
                    </params>
                    <declaration name="comboBoxEditor" type="ComboBoxEditor" line="1319"/>
                    <scope line="1320"/>
                    <scope line="1325"/>
                </method>
                <method name="focusLost" type="void" line="1329">
                    <params>
                        <param name="e" type="FocusEvent"/>
                    </params>
                    <declaration name="editor" type="ComboBoxEditor" line="1330"/>
                    <scope line="1331">
                        <declaration name="item" type="Object" line="1332"/>
                        <declaration name="selectedItem" type="Object" line="1333"/>
                        <scope line="1334"/>
                    </scope>
                    <scope line="1339"/>
                </method>
                <method name="contentsChanged" type="void" line="1344">
                    <params>
                        <param name="e" type="ListDataEvent"/>
                    </params>
                    <scope line="1345"/>
                    <scope line="1349"/>
                </method>
                <method name="intervalAdded" type="void" line="1355">
                    <params>
                        <param name="e" type="ListDataEvent"/>
                    </params>
                </method>
                <method name="intervalRemoved" type="void" line="1358">
                    <params>
                        <param name="e" type="ListDataEvent"/>
                    </params>
                </method>
                <method name="addLayoutComponent" type="void" line="1361">
                    <params>
                        <param name="name" type="String"/>
                        <param name="comp" type="Component"/>
                    </params>
                </method>
                <method name="removeLayoutComponent" type="void" line="1363">
                    <params>
                        <param name="comp" type="Component"/>
                    </params>
                </method>
                <method name="preferredLayoutSize" type="Dimension" line="1365">
                    <params>
                        <param name="parent" type="Container"/>
                    </params>
                </method>
                <method name="minimumLayoutSize" type="Dimension" line="1368">
                    <params>
                        <param name="parent" type="Container"/>
                    </params>
                </method>
                <method name="layoutContainer" type="void" line="1371">
                    <params>
                        <param name="parent" type="Container"/>
                    </params>
                    <declaration name="cb" type="JComboBox" line="1372"/>
                    <declaration name="width" type="int" line="1373"/>
                    <declaration name="height" type="int" line="1374"/>
                    <declaration name="insets" type="Insets" line="1375"/>
                    <declaration name="buttonHeight" type="int" line="1376"/>
                    <declaration name="buttonWidth" type="int" line="1377"/>
                    <scope line="1378">
                        <declaration name="arrowInsets" type="Insets" line="1379"/>
                    </scope>
                    <declaration name="cvb" type="Rectangle" line="1382"/>
                    <scope line="1383">
                        <scope line="1384"/>
                        <scope line="1387"/>
                    </scope>
                    <scope line="1391"/>
                </method>
                <method name="actionPerformed" type="void" line="1396">
                    <params>
                        <param name="evt" type="ActionEvent"/>
                    </params>
                    <declaration name="item" type="Object" line="1397"/>
                    <scope line="1398">
                        <scope line="1399"/>
                        <declaration name="am" type="ActionMap" line="1402"/>
                        <scope line="1403">
                            <declaration name="action" type="Action" line="1404"/>
                            <scope line="1405"/>
                        </scope>
                    </scope>
                </method>
            </class>
            <class name="DefaultKeySelectionManager" line="1412">
                <implements interface="JComboBox.KeySelectionManager"/>
                <implements interface="UIResource"/>
                <declaration name="prefix" type="String" line="1413"/>
                <declaration name="typedString" type="String" line="1414"/>
                <method name="selectionForKey" type="int" line="1415">
                    <params>
                        <param name="aKey" type="char"/>
                        <param name="aModel" type="ComboBoxModel"/>
                    </params>
                    <scope line="1416"/>
                    <declaration name="startingFromSelection" type="boolean" line="1420"/>
                    <declaration name="startIndex" type="int" line="1421"/>
                    <scope line="1422">
                        <scope line="1424"/>
                        <scope line="1427"/>
                    </scope>
                    <scope line="1431"/>
                    <scope line="1437"/>
                    <declaration name="index" type="int" line="1441"/>
                    <scope line="1442"/>
                </method>
            </class>
        </class>
    </source>