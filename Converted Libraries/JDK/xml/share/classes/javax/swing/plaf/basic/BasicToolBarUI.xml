<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.plaf.basic">
        <import package="javax.swing"/>
        <import package="javax.swing.event"/>
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="java.beans"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.HashMap"/>
        <import package="javax.swing.border"/>
        <import package="javax.swing.plaf"/>
        <import package="sun.swing.DefaultLookup"/>
        <import package="sun.swing.UIAction"/>
        <class name="BasicToolBarUI" line="13">
            <extends class="ToolBarUI"/>
            <implements interface="SwingConstants"/>
            <javadoc line="13">
                A Basic L&amp;F implementation of ToolBarUI.  This implementation
                  is a &quot;combined&quot; view/controller.
                  &lt;p&gt;                
                <author>
                    Georges Saab                    
                </author>
                <author>
                    Jeff Shapiro                    
                </author>
            </javadoc>
            <declaration name="toolBar" type="JToolBar" line="21"/>
            <declaration name="floating" type="boolean" line="22"/>
            <declaration name="floatingX" type="int" line="23"/>
            <declaration name="floatingY" type="int" line="24"/>
            <declaration name="floatingFrame" type="JFrame" line="25"/>
            <declaration name="floatingToolBar" type="RootPaneContainer" line="26"/>
            <declaration name="dragWindow" type="DragWindow" line="27"/>
            <declaration name="dockingSource" type="Container" line="28"/>
            <declaration name="dockingSensitivity" type="int" line="29"/>
            <declaration name="focusedCompIndex" type="int" line="30"/>
            <declaration name="dockingColor" type="Color" line="31"/>
            <declaration name="floatingColor" type="Color" line="32"/>
            <declaration name="dockingBorderColor" type="Color" line="33"/>
            <declaration name="floatingBorderColor" type="Color" line="34"/>
            <declaration name="dockingListener" type="MouseInputListener" line="35"/>
            <declaration name="propertyListener" type="PropertyChangeListener" line="36"/>
            <declaration name="toolBarContListener" type="ContainerListener" line="37"/>
            <declaration name="toolBarFocusListener" type="FocusListener" line="38"/>
            <declaration name="handler" type="Handler" line="39"/>
            <declaration name="constraintBeforeFloating" type="String" line="40"/>
            <declaration name="IS_ROLLOVER" type="String" line="41"/>
            <declaration name="rolloverBorder" type="Border" line="42"/>
            <declaration name="nonRolloverBorder" type="Border" line="43"/>
            <declaration name="nonRolloverToggleBorder" type="Border" line="44"/>
            <declaration name="rolloverBorders" type="boolean" line="45"/>
            <declaration name="borderTable" type="HashMap&amp;lt;AbstractButton,Border&amp;gt;" line="46"/>
            <declaration name="rolloverTable" type="Hashtable&amp;lt;AbstractButton,Boolean&amp;gt;" line="47"/>
            <declaration name="upKey" type="KeyStroke" line="48"/>
            <javadoc line="48">
                As of Java 2 platform v1.3 this previously undocumented field is no
                  longer used.
                  Key bindings are now defined by the LookAndFeel, please refer to
                  the key bindings specification for further details.                
                <deprecated>
                    As of Java 2 platform v1.3.                    
                </deprecated>
            </javadoc>
            <declaration name="downKey" type="KeyStroke" line="56"/>
            <javadoc line="56">
                As of Java 2 platform v1.3 this previously undocumented field is no
                  longer used.
                  Key bindings are now defined by the LookAndFeel, please refer to
                  the key bindings specification for further details.                
                <deprecated>
                    As of Java 2 platform v1.3.                    
                </deprecated>
            </javadoc>
            <declaration name="leftKey" type="KeyStroke" line="64"/>
            <javadoc line="64">
                As of Java 2 platform v1.3 this previously undocumented field is no
                  longer used.
                  Key bindings are now defined by the LookAndFeel, please refer to
                  the key bindings specification for further details.                
                <deprecated>
                    As of Java 2 platform v1.3.                    
                </deprecated>
            </javadoc>
            <declaration name="rightKey" type="KeyStroke" line="72"/>
            <javadoc line="72">
                As of Java 2 platform v1.3 this previously undocumented field is no
                  longer used.
                  Key bindings are now defined by the LookAndFeel, please refer to
                  the key bindings specification for further details.                
                <deprecated>
                    As of Java 2 platform v1.3.                    
                </deprecated>
            </javadoc>
            <declaration name="FOCUSED_COMP_INDEX" type="String" line="80"/>
            <method name="createUI" type="ComponentUI" line="81">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <method name="installUI" type="void" line="84">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <scope line="96"/>
            </method>
            <method name="uninstallUI" type="void" line="100">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <method name="installDefaults" type="void" line="111">
                <declaration name="rolloverProp" type="Object" line="118"/>
                <scope line="119"/>
                <scope line="122"/>
                <scope line="125"/>
                <scope line="128"/>
                <scope line="131"/>
            </method>
            <method name="uninstallDefaults" type="void" line="136"/>
            <method name="installComponents" type="void" line="147"/>
            <method name="uninstallComponents" type="void" line="149"/>
            <method name="installListeners" type="void" line="151">
                <scope line="153"/>
                <scope line="158"/>
                <scope line="162"/>
                <scope line="166">
                    <declaration name="components" type="Component[]" line="167"/>
                    <scope line="168"/>
                </scope>
            </method>
            <method name="uninstallListeners" type="void" line="173">
                <scope line="174"/>
                <scope line="179"/>
                <scope line="183"/>
                <scope line="187">
                    <declaration name="components" type="Component[]" line="188"/>
                    <scope line="189"/>
                </scope>
            </method>
            <method name="installKeyboardActions" type="void" line="196">
                <declaration name="km" type="InputMap" line="197"/>
            </method>
            <method name="getInputMap" type="InputMap" line="201">
                <params>
                    <param name="condition" type="int"/>
                </params>
                <scope line="202"/>
            </method>
            <method name="loadActionMap" type="void" line="207">
                <params>
                    <param name="map" type="LazyActionMap"/>
                </params>
            </method>
            <method name="uninstallKeyboardActions" type="void" line="213"/>
            <method name="navigateFocusedComp" type="void" line="217">
                <params>
                    <param name="direction" type="int"/>
                </params>
                <declaration name="nComp" type="int" line="218"/>
                <declaration name="j" type="int" line="219"/>
                <scope line="225">
                    <declaration name="comp" type="Component" line="227"/>
                    <scope line="228"/>
                </scope>
                <scope line="238">
                    <declaration name="comp" type="Component" line="240"/>
                    <scope line="241"/>
                </scope>
            </method>
            <javadoc line="251">
                Creates a rollover border for toolbar components. The
                  rollover border will be installed if rollover borders are
                  enabled.
                  &lt;p&gt;
                  Override this method to provide an alternate rollover border.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="createRolloverBorder" type="Border" line="259">
                <declaration name="border" type="Object" line="260"/>
                <scope line="261"/>
                <declaration name="table" type="UIDefaults" line="264"/>
            </method>
            <javadoc line="267">
                Creates the non rollover border for toolbar components. This
                  border will be installed as the border for components added
                  to the toolbar if rollover borders are not enabled.
                  &lt;p&gt;
                  Override this method to provide an alternate rollover border.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="createNonRolloverBorder" type="Border" line="275">
                <declaration name="border" type="Object" line="276"/>
                <scope line="277"/>
                <declaration name="table" type="UIDefaults" line="280"/>
            </method>
            <javadoc line="283">
                Creates a non rollover border for Toggle buttons in the toolbar.                
            </javadoc>
            <method name="createNonRolloverToggleBorder" type="Border" line="286">
                <declaration name="table" type="UIDefaults" line="287"/>
            </method>
            <javadoc line="290">
                No longer used, use BasicToolBarUI.createFloatingWindow(JToolBar)                
                <see>
                    #createFloatingWindow                    
                </see>
            </javadoc>
            <method name="createFloatingFrame" type="JFrame" line="294">
                <params>
                    <param name="toolbar" type="JToolBar"/>
                </params>
                <declaration name="window" type="Window" line="295"/>
                <anonymous_class line="296">
                    <method name="createRootPane" type="JRootPane" line="297">
                        <anonymous_class line="298">
                            <declaration name="packing" type="boolean" line="299"/>
                            <method name="validate" type="void" line="300">
                                <scope line="302"/>
                            </method>
                        </anonymous_class>
                        <declaration name="rootPane" type="JRootPane" line="298"/>
                    </method>
                </anonymous_class>
                <declaration name="frame" type="JFrame" line="296"/>
                <declaration name="wl" type="WindowListener" line="317"/>
            </method>
            <javadoc line="321">
                Creates a window which contains the toolbar after it has been
                  dragged out from its container                
                <return>
                    a &lt;code&gt;RootPaneContainer&lt;/code&gt; object, containing the toolbar.                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="createFloatingWindow" type="RootPaneContainer" line="327">
                <params>
                    <param name="toolbar" type="JToolBar"/>
                </params>
                <class name="ToolBarDialog" line="328">
                    <extends class="JDialog"/>
                    <method name="ToolBarDialog" type="constructor" line="329">
                        <params>
                            <param name="owner" type="Frame"/>
                            <param name="title" type="String"/>
                            <param name="modal" type="boolean"/>
                        </params>
                    </method>
                    <method name="ToolBarDialog" type="constructor" line="332">
                        <params>
                            <param name="owner" type="Dialog"/>
                            <param name="title" type="String"/>
                            <param name="modal" type="boolean"/>
                        </params>
                    </method>
                    <method name="createRootPane" type="JRootPane" line="335">
                        <anonymous_class line="336">
                            <declaration name="packing" type="boolean" line="337"/>
                            <method name="validate" type="void" line="338">
                                <scope line="340"/>
                            </method>
                        </anonymous_class>
                        <declaration name="rootPane" type="JRootPane" line="336"/>
                    </method>
                </class>
                <declaration name="dialog" type="JDialog" line="352"/>
                <declaration name="window" type="Window" line="353"/>
                <scope line="354"/>
                <scope line="357"/>
                <scope line="360"/>
                <declaration name="wl" type="WindowListener" line="366"/>
            </method>
            <method name="createDragWindow" type="DragWindow" line="370">
                <params>
                    <param name="toolbar" type="JToolBar"/>
                </params>
                <declaration name="frame" type="Window" line="371"/>
                <scope line="372">
                    <declaration name="p" type="Container" line="373"/>
                </scope>
                <scope line="377"/>
                <declaration name="dragWindow" type="DragWindow" line="381"/>
            </method>
            <javadoc line="384">
                Returns a flag to determine whether rollover button borders
                  are enabled.                
                <return>
                    true if rollover borders are enabled; false otherwise                    
                </return>
                <see>
                    #setRolloverBorders                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isRolloverBorders" type="boolean" line="391"/>
            <javadoc line="394">
                Sets the flag for enabling rollover borders on the toolbar and it will
                  also install the apropriate border depending on the state of the flag.                
                <param>
                    rollover if true, rollover borders are installed.
                      Otherwise non-rollover borders are installed                    
                </param>
                <see>
                    #isRolloverBorders                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setRolloverBorders" type="void" line="402">
                <params>
                    <param name="rollover" type="boolean"/>
                </params>
                <scope line="404"/>
                <scope line="407"/>
            </method>
            <javadoc line="411">
                Installs rollover borders on all the child components of the JComponent.
                  &lt;p&gt;
                  This is a convenience method to call &lt;code&gt;setBorderToRollover&lt;/code&gt;
                  for each child component.                
                <param>
                    c container which holds the child components (usally a JToolBar)                    
                </param>
                <see>
                    #setBorderToRollover                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="installRolloverBorders" type="void" line="420">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <declaration name="components" type="Component[]" line="421"/>
                <scope line="422">
                    <scope line="423"/>
                </scope>
            </method>
            <javadoc line="429">
                Installs non-rollover borders on all the child components of the JComponent.
                  A non-rollover border is the border that is installed on the child component
                  while it is in the toolbar.
                  &lt;p&gt;
                  This is a convenience method to call &lt;code&gt;setBorderToNonRollover&lt;/code&gt;
                  for each child component.                
                <param>
                    c container which holds the child components (usally a JToolBar)                    
                </param>
                <see>
                    #setBorderToNonRollover                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="installNonRolloverBorders" type="void" line="440">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <declaration name="components" type="Component[]" line="441"/>
                <scope line="442">
                    <scope line="443"/>
                </scope>
            </method>
            <javadoc line="449">
                Installs normal borders on all the child components of the JComponent.
                  A normal border is the original border that was installed on the child
                  component before it was added to the toolbar.
                  &lt;p&gt;
                  This is a convenience method to call &lt;code&gt;setBorderNormal&lt;/code&gt;
                  for each child component.                
                <param>
                    c container which holds the child components (usally a JToolBar)                    
                </param>
                <see>
                    #setBorderToNonRollover                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="installNormalBorders" type="void" line="460">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <declaration name="components" type="Component[]" line="461"/>
                <scope line="462"/>
            </method>
            <javadoc line="466">
                Sets the border of the component to have a rollover border which
                  was created by the {@link #createRolloverBorder} method.                
                <param>
                    c component which will have a rollover border installed                    
                </param>
                <see>
                    #createRolloverBorder                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setBorderToRollover" type="void" line="473">
                <params>
                    <param name="c" type="Component"/>
                </params>
                <scope line="474">
                    <declaration name="b" type="AbstractButton" line="475"/>
                    <declaration name="border" type="Border" line="476"/>
                    <scope line="477"/>
                    <scope line="480"/>
                </scope>
            </method>
            <javadoc line="487">
                Returns a rollover border for the button.                
                <param>
                    b the button to calculate the rollover border for                    
                </param>
                <return>
                    the rollover border                    
                </return>
                <see>
                    #setBorderToRollover                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getRolloverBorder" type="Border" line="494">
                <params>
                    <param name="b" type="AbstractButton"/>
                </params>
            </method>
            <javadoc line="497">
                Sets the border of the component to have a non-rollover border which
                  was created by the {@link #createNonRolloverBorder} method.                
                <param>
                    c component which will have a non-rollover border installed                    
                </param>
                <see>
                    #createNonRolloverBorder                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setBorderToNonRollover" type="void" line="504">
                <params>
                    <param name="c" type="Component"/>
                </params>
                <scope line="505">
                    <declaration name="b" type="AbstractButton" line="506"/>
                    <declaration name="border" type="Border" line="507"/>
                    <scope line="508"/>
                    <scope line="511"/>
                </scope>
            </method>
            <javadoc line="518">
                Returns a non-rollover border for the button.                
                <param>
                    b the button to calculate the non-rollover border for                    
                </param>
                <return>
                    the non-rollover border                    
                </return>
                <see>
                    #setBorderToNonRollover                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getNonRolloverBorder" type="Border" line="525">
                <params>
                    <param name="b" type="AbstractButton"/>
                </params>
                <scope line="526"/>
                <scope line="529"/>
            </method>
            <javadoc line="533">
                Sets the border of the component to have a normal border.
                  A normal border is the original border that was installed on the child
                  component before it was added to the toolbar.                
                <param>
                    c component which will have a normal border re-installed                    
                </param>
                <see>
                    #createNonRolloverBorder                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setBorderToNormal" type="void" line="541">
                <params>
                    <param name="c" type="Component"/>
                </params>
                <scope line="542">
                    <declaration name="b" type="AbstractButton" line="543"/>
                    <declaration name="border" type="Border" line="544"/>
                    <declaration name="value" type="Boolean" line="546"/>
                    <scope line="547"/>
                </scope>
            </method>
            <method name="setFloatingLocation" type="void" line="552">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
            </method>
            <method name="isFloating" type="boolean" line="556"/>
            <method name="setFloating" type="void" line="559">
                <params>
                    <param name="b" type="boolean"/>
                    <param name="p" type="Point"/>
                </params>
                <scope line="560">
                    <declaration name="visible" type="boolean" line="561"/>
                    <declaration name="ancestor" type="Window" line="562"/>
                    <scope line="563"/>
                    <scope line="568"/>
                    <scope line="571">
                        <scope line="572"/>
                        <scope line="579">
                            <scope line="582"/>
                            <scope line="585">
                                <anonymous_class line="586">
                                    <method name="windowOpened" type="void" line="587">
                                        <params>
                                            <param name="e" type="WindowEvent"/>
                                        </params>
                                    </method>
                                </anonymous_class>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="595">
                        <declaration name="constraint" type="String" line="599"/>
                        <scope line="600"/>
                        <declaration name="orientation" type="int" line="603"/>
                    </scope>
                    <declaration name="dockingSourceParent" type="Container" line="610"/>
                </scope>
            </method>
            <method name="mapConstraintToOrientation" type="int" line="615">
                <params>
                    <param name="constraint" type="String"/>
                </params>
                <declaration name="orientation" type="int" line="616"/>
                <scope line="617"/>
            </method>
            <method name="setOrientation" type="void" line="623">
                <params>
                    <param name="orientation" type="int"/>
                </params>
            </method>
            <javadoc line="627">
                Gets the color displayed when over a docking area                
            </javadoc>
            <method name="getDockingColor" type="Color" line="630"/>
            <javadoc line="633">
                Sets the color displayed when over a docking area                
            </javadoc>
            <method name="setDockingColor" type="void" line="636">
                <params>
                    <param name="c" type="Color"/>
                </params>
            </method>
            <javadoc line="639">
                Gets the color displayed when over a floating area                
            </javadoc>
            <method name="getFloatingColor" type="Color" line="642"/>
            <javadoc line="645">
                Sets the color displayed when over a floating area                
            </javadoc>
            <method name="setFloatingColor" type="void" line="648">
                <params>
                    <param name="c" type="Color"/>
                </params>
            </method>
            <method name="isBlocked" type="boolean" line="651">
                <params>
                    <param name="comp" type="Component"/>
                    <param name="constraint" type="Object"/>
                </params>
                <scope line="652">
                    <declaration name="cont" type="Container" line="653"/>
                    <declaration name="lm" type="LayoutManager" line="654"/>
                    <scope line="655">
                        <declaration name="blm" type="BorderLayout" line="656"/>
                        <declaration name="c" type="Component" line="657"/>
                    </scope>
                </scope>
            </method>
            <method name="canDock" type="boolean" line="663">
                <params>
                    <param name="c" type="Component"/>
                    <param name="p" type="Point"/>
                </params>
            </method>
            <method name="calculateConstraint" type="String" line="666">
                <declaration name="constraint" type="String" line="667"/>
                <declaration name="lm" type="LayoutManager" line="668"/>
                <scope line="669"/>
            </method>
            <method name="getDockingConstraint" type="String" line="674">
                <params>
                    <param name="c" type="Component"/>
                    <param name="p" type="Point"/>
                </params>
                <scope line="676">
                    <scope line="678"/>
                    <scope line="681"/>
                    <scope line="684"/>
                    <scope line="687"/>
                </scope>
            </method>
            <method name="dragTo" type="void" line="693">
                <params>
                    <param name="position" type="Point"/>
                    <param name="origin" type="Point"/>
                </params>
                <scope line="694">
                    <scope line="695">
                        <declaration name="offset" type="Point" line="697"/>
                        <scope line="698">
                            <declaration name="size" type="Dimension" line="699"/>
                        </scope>
                        <declaration name="global" type="Point" line="703"/>
                        <declaration name="dragPoint" type="Point" line="704"/>
                        <declaration name="dockingPosition" type="Point" line="707"/>
                        <declaration name="comparisonPoint" type="Point" line="708"/>
                        <scope line="709">
                            <declaration name="constraint" type="String" line="711"/>
                            <declaration name="orientation" type="int" line="712"/>
                        </scope>
                        <scope line="716"/>
                        <scope line="722">
                            <declaration name="size" type="Dimension" line="723"/>
                        </scope>
                    </scope>
                    <scope line="728"/>
                </scope>
            </method>
            <method name="floatAt" type="void" line="732">
                <params>
                    <param name="position" type="Point"/>
                    <param name="origin" type="Point"/>
                </params>
                <scope line="733">
                    <scope line="734">
                        <declaration name="offset" type="Point" line="735"/>
                        <scope line="736"/>
                        <declaration name="global" type="Point" line="740"/>
                        <scope line="742">
                            <declaration name="dockingPosition" type="Point" line="743"/>
                            <declaration name="comparisonPoint" type="Point" line="744"/>
                            <scope line="745"/>
                            <scope line="748"/>
                        </scope>
                        <scope line="752"/>
                    </scope>
                    <scope line="757"/>
                </scope>
            </method>
            <method name="getHandler" type="Handler" line="761">
                <scope line="762"/>
            </method>
            <method name="createToolBarContListener" type="ContainerListener" line="767"/>
            <method name="createToolBarFocusListener" type="FocusListener" line="770"/>
            <method name="createPropertyListener" type="PropertyChangeListener" line="773"/>
            <method name="createDockingListener" type="MouseInputListener" line="776"/>
            <method name="createFrameListener" type="WindowListener" line="780"/>
            <javadoc line="783">
                Paints the contents of the window used for dragging.                
                <param>
                    g Graphics to paint to.                    
                </param>
                <throws>
                    NullPointerException is &lt;code&gt;g&lt;/code&gt; is null                    
                </throws>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="paintDragWindow" type="void" line="789">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
                <declaration name="w" type="int" line="791"/>
                <declaration name="h" type="int" line="792"/>
            </method>
            <class name="Actions" line="797">
                <extends class="UIAction"/>
                <declaration name="NAVIGATE_RIGHT" type="String" line="798"/>
                <declaration name="NAVIGATE_LEFT" type="String" line="799"/>
                <declaration name="NAVIGATE_UP" type="String" line="800"/>
                <declaration name="NAVIGATE_DOWN" type="String" line="801"/>
                <method name="Actions" type="constructor" line="802">
                    <params>
                        <param name="name" type="String"/>
                    </params>
                </method>
                <method name="actionPerformed" type="void" line="805">
                    <params>
                        <param name="evt" type="ActionEvent"/>
                    </params>
                    <declaration name="key" type="String" line="806"/>
                    <declaration name="toolBar" type="JToolBar" line="807"/>
                    <declaration name="ui" type="BasicToolBarUI" line="808"/>
                    <scope line="809"/>
                    <scope line="812"/>
                    <scope line="815"/>
                    <scope line="818"/>
                </method>
            </class>
            <class name="Handler" line="823">
                <implements interface="ContainerListener"/>
                <implements interface="FocusListener"/>
                <implements interface="MouseInputListener"/>
                <implements interface="PropertyChangeListener"/>
                <method name="componentAdded" type="void" line="824">
                    <params>
                        <param name="evt" type="ContainerEvent"/>
                    </params>
                    <declaration name="c" type="Component" line="825"/>
                    <scope line="826"/>
                    <scope line="829"/>
                    <scope line="832"/>
                </method>
                <method name="componentRemoved" type="void" line="836">
                    <params>
                        <param name="evt" type="ContainerEvent"/>
                    </params>
                    <declaration name="c" type="Component" line="837"/>
                    <scope line="838"/>
                </method>
                <method name="focusGained" type="void" line="843">
                    <params>
                        <param name="evt" type="FocusEvent"/>
                    </params>
                    <declaration name="c" type="Component" line="844"/>
                </method>
                <method name="focusLost" type="void" line="847">
                    <params>
                        <param name="evt" type="FocusEvent"/>
                    </params>
                </method>
                <declaration name="tb" type="JToolBar" line="849"/>
                <declaration name="isDragging" type="boolean" line="850"/>
                <declaration name="origin" type="Point" line="851"/>
                <method name="mousePressed" type="void" line="852">
                    <params>
                        <param name="evt" type="MouseEvent"/>
                    </params>
                    <scope line="853"/>
                </method>
                <method name="mouseReleased" type="void" line="858">
                    <params>
                        <param name="evt" type="MouseEvent"/>
                    </params>
                    <scope line="859"/>
                    <scope line="862">
                        <declaration name="position" type="Point" line="863"/>
                    </scope>
                </method>
                <method name="mouseDragged" type="void" line="870">
                    <params>
                        <param name="evt" type="MouseEvent"/>
                    </params>
                    <scope line="871"/>
                    <declaration name="position" type="Point" line="875"/>
                    <scope line="876"/>
                </method>
                <method name="mouseClicked" type="void" line="881">
                    <params>
                        <param name="evt" type="MouseEvent"/>
                    </params>
                </method>
                <method name="mouseEntered" type="void" line="883">
                    <params>
                        <param name="evt" type="MouseEvent"/>
                    </params>
                </method>
                <method name="mouseExited" type="void" line="885">
                    <params>
                        <param name="evt" type="MouseEvent"/>
                    </params>
                </method>
                <method name="mouseMoved" type="void" line="887">
                    <params>
                        <param name="evt" type="MouseEvent"/>
                    </params>
                </method>
                <method name="propertyChange" type="void" line="889">
                    <params>
                        <param name="evt" type="PropertyChangeEvent"/>
                    </params>
                    <declaration name="propertyName" type="String" line="890"/>
                    <scope line="891"/>
                    <scope line="894">
                        <declaration name="components" type="Component[]" line="895"/>
                        <declaration name="orientation" type="int" line="896"/>
                        <declaration name="separator" type="JToolBar.Separator" line="897"/>
                        <scope line="898">
                            <scope line="899">
                                <scope line="901"/>
                                <scope line="904"/>
                                <declaration name="size" type="Dimension" line="907"/>
                                <scope line="908">
                                    <declaration name="newSize" type="Dimension" line="909"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="915"/>
                </method>
            </class>
            <class name="FrameListener" line="921">
                <extends class="WindowAdapter"/>
                <method name="windowClosing" type="void" line="922">
                    <params>
                        <param name="w" type="WindowEvent"/>
                    </params>
                    <scope line="923">
                        <declaration name="constraint" type="String" line="929"/>
                        <scope line="930">
                            <scope line="931"/>
                        </scope>
                        <scope line="935">
                            <scope line="936"/>
                        </scope>
                        <declaration name="dockingSourceParent" type="Container" line="944"/>
                    </scope>
                </method>
            </class>
            <class name="ToolBarContListener" line="950">
                <implements interface="ContainerListener"/>
                <method name="componentAdded" type="void" line="951">
                    <params>
                        <param name="e" type="ContainerEvent"/>
                    </params>
                </method>
                <method name="componentRemoved" type="void" line="954">
                    <params>
                        <param name="e" type="ContainerEvent"/>
                    </params>
                </method>
            </class>
            <class name="ToolBarFocusListener" line="958">
                <implements interface="FocusListener"/>
                <method name="focusGained" type="void" line="959">
                    <params>
                        <param name="e" type="FocusEvent"/>
                    </params>
                </method>
                <method name="focusLost" type="void" line="962">
                    <params>
                        <param name="e" type="FocusEvent"/>
                    </params>
                </method>
            </class>
            <class name="PropertyListener" line="966">
                <implements interface="PropertyChangeListener"/>
                <method name="propertyChange" type="void" line="967">
                    <params>
                        <param name="e" type="PropertyChangeEvent"/>
                    </params>
                </method>
            </class>
            <class name="DockingListener" line="971">
                <implements interface="MouseInputListener"/>
                <javadoc line="971">
                    This class should be treated as a &amp;quot;protected&amp;quot; inner class.
                      Instantiate it only within subclasses of BasicToolBarUI.                    
                </javadoc>
                <declaration name="toolBar" type="JToolBar" line="976"/>
                <declaration name="isDragging" type="boolean" line="977"/>
                <declaration name="origin" type="Point" line="978"/>
                <method name="DockingListener" type="constructor" line="979">
                    <params>
                        <param name="t" type="JToolBar"/>
                    </params>
                </method>
                <method name="mouseClicked" type="void" line="983">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
                <method name="mousePressed" type="void" line="986">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
                <method name="mouseReleased" type="void" line="991">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
                <method name="mouseEntered" type="void" line="999">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
                <method name="mouseExited" type="void" line="1002">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
                <method name="mouseDragged" type="void" line="1005">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
                <method name="mouseMoved" type="void" line="1012">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
            </class>
            <class name="DragWindow" line="1016">
                <extends class="Window"/>
                <declaration name="borderColor" type="Color" line="1017"/>
                <declaration name="orientation" type="int" line="1018"/>
                <declaration name="offset" type="Point" line="1019"/>
                <method name="DragWindow" type="constructor" line="1020">
                    <params>
                        <param name="w" type="Window"/>
                    </params>
                </method>
                <javadoc line="1023">
                    Returns the orientation of the toolbar window when the toolbar is
                      floating. The orientation is either one of &lt;code&gt;JToolBar.HORIZONTAL&lt;/code&gt;
                      or &lt;code&gt;JToolBar.VERTICAL&lt;/code&gt;.                    
                    <return>
                        the orientation of the toolbar window                        
                    </return>
                    <since>
                        1.6                        
                    </since>
                </javadoc>
                <method name="getOrientation" type="int" line="1030"/>
                <method name="setOrientation" type="void" line="1033">
                    <params>
                        <param name="o" type="int"/>
                    </params>
                    <scope line="1034">
                        <declaration name="size" type="Dimension" line="1037"/>
                        <scope line="1039">
                            <scope line="1040"/>
                            <scope line="1043"/>
                            <scope line="1046"/>
                        </scope>
                    </scope>
                </method>
                <method name="getOffset" type="Point" line="1053"/>
                <method name="setOffset" type="void" line="1056">
                    <params>
                        <param name="p" type="Point"/>
                    </params>
                </method>
                <method name="setBorderColor" type="void" line="1059">
                    <params>
                        <param name="c" type="Color"/>
                    </params>
                </method>
                <method name="getBorderColor" type="Color" line="1064"/>
                <method name="paint" type="void" line="1067">
                    <params>
                        <param name="g" type="Graphics"/>
                    </params>
                </method>
                <method name="getInsets" type="Insets" line="1071"/>
            </class>
        </class>
    </source>