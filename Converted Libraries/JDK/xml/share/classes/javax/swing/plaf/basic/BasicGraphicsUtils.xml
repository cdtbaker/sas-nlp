<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.plaf.basic">
        <import package="javax.swing"/>
        <import package="java.awt.Component"/>
        <import package="java.awt.Color"/>
        <import package="java.awt.Dimension"/>
        <import package="java.awt.Font"/>
        <import package="java.awt.FontMetrics"/>
        <import package="java.awt.Graphics"/>
        <import package="java.awt.Insets"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.Toolkit"/>
        <import package="java.awt.event.KeyEvent"/>
        <import package="java.awt.event.InputEvent"/>
        <import package="sun.swing.SwingUtilities2"/>
        <class name="BasicGraphicsUtils" line="47">
            <comment line="303">
                Convenience function for determining ComponentOrientation.  Helps us
                 avoid having Munge directives throughout the code.                
            </comment>
            <declaration name="GROOVE_INSETS" type="Insets" line="50"/>
            <declaration name="ETCHED_INSETS" type="Insets" line="51"/>
            <method name="drawEtchedRect" type="void" line="56">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="shadow" type="Color"/>
                    <param name="darkShadow" type="Color"/>
                    <param name="highlight" type="Color"/>
                    <param name="lightHighlight" type="Color"/>
                </params>
                <comment line="57">
                    Make no net change to g                    
                </comment>
                <comment line="61">
                    outer border, top                    
                </comment>
                <comment line="62">
                    outer border, left                    
                </comment>
                <comment line="65">
                    inner border, top                    
                </comment>
                <comment line="66">
                    inner border, left                    
                </comment>
                <comment line="69">
                    outer border, bottom                    
                </comment>
                <comment line="70">
                    outer border, right                    
                </comment>
                <comment line="73">
                    inner border, right                    
                </comment>
                <comment line="74">
                    inner border, bottom                    
                </comment>
                <declaration name="oldColor" type="Color" line="57"/>
            </method>
            <javadoc line="81">
                Returns the amount of space taken up by a border drawn by
                  &lt;code&gt;drawEtchedRect()&lt;/code&gt;                
                <return>
                    the inset of an etched rect                    
                </return>
            </javadoc>
            <method name="getEtchedInsets" type="Insets" line="87"/>
            <method name="drawGroove" type="void" line="94">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="shadow" type="Color"/>
                    <param name="highlight" type="Color"/>
                </params>
                <comment line="95">
                    Make no net change to g                    
                </comment>
                <declaration name="oldColor" type="Color" line="95"/>
            </method>
            <javadoc line="112">
                Returns the amount of space taken up by a border drawn by
                  &lt;code&gt;drawGroove()&lt;/code&gt;                
                <return>
                    the inset of a groove border                    
                </return>
            </javadoc>
            <method name="getGrooveInsets" type="Insets" line="118"/>
            <method name="drawBezel" type="void" line="127">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="isPressed" type="boolean"/>
                    <param name="isDefault" type="boolean"/>
                    <param name="shadow" type="Color"/>
                    <param name="darkShadow" type="Color"/>
                    <param name="highlight" type="Color"/>
                    <param name="lightHighlight" type="Color"/>
                </params>
                <comment line="128">
                    Make no net change to g                    
                </comment>
                <declaration name="oldColor" type="Color" line="128"/>
                <scope line="131"/>
                <scope line="136"/>
                <scope line="139"/>
                <scope line="158"/>
            </method>
            <method name="drawLoweredBezel" type="void" line="181">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="shadow" type="Color"/>
                    <param name="darkShadow" type="Color"/>
                    <param name="highlight" type="Color"/>
                    <param name="lightHighlight" type="Color"/>
                </params>
            </method>
            <javadoc line="200">
                Draw a string with the graphics &lt;code&gt;g&lt;/code&gt; at location (x,y)
                  just like &lt;code&gt;g.drawString&lt;/code&gt; would.
                  The first occurrence of &lt;code&gt;underlineChar&lt;/code&gt;
                  in text will be underlined. The matching algorithm is
                  not case sensitive.                
            </javadoc>
            <method name="drawString" type="void" line="206">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="text" type="String"/>
                    <param name="underlinedChar" type="int"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <declaration name="index" type="int" line="207"/>
                <scope line="209">
                    <declaration name="uc" type="char" line="210"/>
                    <declaration name="lc" type="char" line="211"/>
                    <declaration name="uci" type="int" line="212"/>
                    <declaration name="lci" type="int" line="213"/>
                    <scope line="215"/>
                    <scope line="218"/>
                    <scope line="221"/>
                </scope>
            </method>
            <javadoc line="228">
                Draw a string with the graphics &lt;code&gt;g&lt;/code&gt; at location
                  (&lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;)
                  just like &lt;code&gt;g.drawString&lt;/code&gt; would.
                  The character at index &lt;code&gt;underlinedIndex&lt;/code&gt;
                  in text will be underlined. If &lt;code&gt;index&lt;/code&gt; is beyond the
                  bounds of &lt;code&gt;text&lt;/code&gt; (including &lt; 0), nothing will be
                  underlined.                
                <param>
                    g Graphics to draw with                    
                </param>
                <param>
                    text String to draw                    
                </param>
                <param>
                    underlinedIndex Index of character in text to underline                    
                </param>
                <param>
                    x x coordinate to draw at                    
                </param>
                <param>
                    y y coordinate to draw at                    
                </param>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="drawStringUnderlineCharAt" type="void" line="245">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="text" type="String"/>
                    <param name="underlinedIndex" type="int"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
            </method>
            <method name="drawDashedRect" type="void" line="250">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <comment line="253">
                    draw upper and lower horizontal dashes                    
                </comment>
                <comment line="259">
                    draw left and right vertical dashes                    
                </comment>
                <declaration name="vx" type="int" line="251"/>
                <scope line="254"/>
                <scope line="260"/>
            </method>
            <method name="getPreferredButtonSize" type="Dimension" line="267">
                <params>
                    <param name="b" type="AbstractButton"/>
                    <param name="textIconGap" type="int"/>
                </params>
                <comment line="289">
                    The preferred size of the button is the size of
                     the text and icon rectangles plus the buttons insets.                    
                </comment>
                <scope line="268"/>
                <declaration name="icon" type="Icon" line="272"/>
                <declaration name="text" type="String" line="273"/>
                <declaration name="font" type="Font" line="275"/>
                <declaration name="fm" type="FontMetrics" line="276"/>
                <declaration name="iconR" type="Rectangle" line="278"/>
                <declaration name="textR" type="Rectangle" line="279"/>
                <declaration name="viewR" type="Rectangle" line="280"/>
                <declaration name="r" type="Rectangle" line="293"/>
                <declaration name="insets" type="Insets" line="295"/>
            </method>
            <method name="isLeftToRight" type="boolean" line="306">
                <params>
                    <param name="c" type="Component"/>
                </params>
            </method>
            <method name="isMenuShortcutKeyDown" type="boolean" line="310">
                <params>
                    <param name="event" type="InputEvent"/>
                </params>
            </method>
        </class>
    </source>