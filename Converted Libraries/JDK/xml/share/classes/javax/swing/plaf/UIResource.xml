<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.plaf">
        <interface name="UIResource">
            <javadoc line="29">
                This interface is used to mark objects created by ComponentUI delegates.
                  The &lt;code&gt;ComponentUI.installUI()&lt;/code&gt; and
                  &lt;code&gt;ComponentUI.uninstallUI()&lt;/code&gt; methods can use this interface
                  to decide if a properties value has been overridden.  For example, the
                  JList cellRenderer property is initialized by BasicListUI.installUI(),
                  only if it&apos;s initial value is null:
                  &lt;pre&gt;
                  if (list.getCellRenderer() == null) {
                  list.setCellRenderer((ListCellRenderer)(UIManager.get(&quot;List.cellRenderer&quot;)));
                  }
                  &lt;/pre&gt;
                  At uninstallUI() time we reset the property to null if its value
                  is an instance of UIResource:
                  &lt;pre&gt;
                  if (list.getCellRenderer() instanceof UIResource) {
                  list.setCellRenderer(null);
                  }
                  &lt;/pre&gt;
                  This pattern applies to all properties except the java.awt.Component
                  properties font, foreground, and background.  If one of these
                  properties isn&apos;t initialized, or is explicitly set to null,
                  its container provides the value.  For this reason the
                  &lt;code&gt;&quot;== null&quot;&lt;/code&gt; is unreliable when installUI() is called
                  to dynamically change a components look and feel.  So at installUI()
                  time we check to see if the current value is a UIResource:
                  &lt;pre&gt;
                  if (!(list.getFont() instanceof UIResource)) {
                  list.setFont(UIManager.getFont(&quot;List.font&quot;));
                  }
                  &lt;/pre&gt;                
                <see>
                    ComponentUI                    
                </see>
                <author>
                    Hans Muller                    
                </author>
            </javadoc>
        </interface>
    </source>