<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.plaf.basic">
        <import package="javax.swing"/>
        <import package="javax.swing.border"/>
        <import package="javax.swing.plaf"/>
        <import package="javax.swing.text.JTextComponent"/>
        <import package="java.awt.Component"/>
        <import package="java.awt.Insets"/>
        <import package="java.awt.Dimension"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.Color"/>
        <import package="java.awt.Graphics"/>
        <class name="BasicBorders" line="40">
            <javadoc line="40">
                Factory object that can vend Borders appropriate for the basic L &amp; F.                
                <author>
                    Georges Saab                    
                </author>
                <author>
                    Amy Fowler                    
                </author>
            </javadoc>
            <method name="getButtonBorder" type="Border" line="48">
                <declaration name="table" type="UIDefaults" line="49"/>
                <declaration name="buttonBorder" type="Border" line="50"/>
            </method>
            <method name="getRadioButtonBorder" type="Border" line="60">
                <declaration name="table" type="UIDefaults" line="61"/>
                <declaration name="radioButtonBorder" type="Border" line="62"/>
            </method>
            <method name="getToggleButtonBorder" type="Border" line="72">
                <declaration name="table" type="UIDefaults" line="73"/>
                <declaration name="toggleButtonBorder" type="Border" line="74"/>
            </method>
            <method name="getMenuBarBorder" type="Border" line="84">
                <declaration name="table" type="UIDefaults" line="85"/>
                <declaration name="menuBarBorder" type="Border" line="86"/>
            </method>
            <method name="getSplitPaneBorder" type="Border" line="93">
                <declaration name="table" type="UIDefaults" line="94"/>
                <declaration name="splitPaneBorder" type="Border" line="95"/>
            </method>
            <javadoc line="101">
                Returns a border instance for a JSplitPane divider                
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getSplitPaneDividerBorder" type="Border" line="105">
                <declaration name="table" type="UIDefaults" line="106"/>
                <declaration name="splitPaneBorder" type="Border" line="107"/>
            </method>
            <method name="getTextFieldBorder" type="Border" line="113">
                <declaration name="table" type="UIDefaults" line="114"/>
                <declaration name="textFieldBorder" type="Border" line="115"/>
            </method>
            <method name="getProgressBarBorder" type="Border" line="123">
                <declaration name="table" type="UIDefaults" line="124"/>
                <declaration name="progressBarBorder" type="Border" line="125"/>
            </method>
            <method name="getInternalFrameBorder" type="Border" line="129">
                <declaration name="table" type="UIDefaults" line="130"/>
                <declaration name="internalFrameBorder" type="Border" line="131"/>
            </method>
            <class name="RolloverButtonBorder" line="143">
                <extends class="ButtonBorder"/>
                <javadoc line="143">
                    Special thin border for rollover toolbar buttons.                    
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <method name="RolloverButtonBorder" type="constructor" line="150">
                    <params>
                        <param name="shadow" type="Color"/>
                        <param name="darkShadow" type="Color"/>
                        <param name="highlight" type="Color"/>
                        <param name="lightHighlight" type="Color"/>
                    </params>
                </method>
                <method name="paintBorder" type="void" line="154">
                    <params>
                        <param name="c" type="Component"/>
                        <param name="g" type="Graphics"/>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                        <param name="w" type="int"/>
                        <param name="h" type="int"/>
                    </params>
                    <comment line="172">
                        Draw the pressd button                        
                    </comment>
                    <comment line="179">
                        Draw a rollover button                        
                    </comment>
                    <declaration name="b" type="AbstractButton" line="155"/>
                    <declaration name="model" type="ButtonModel" line="156"/>
                    <declaration name="shade" type="Color" line="158"/>
                    <declaration name="p" type="Component" line="159"/>
                    <scope line="160"/>
                    <scope line="165">
                        <declaration name="oldColor" type="Color" line="167"/>
                        <scope line="170"/>
                        <scope line="177"/>
                    </scope>
                </method>
            </class>
            <class name="RolloverMarginBorder" line="192">
                <extends class="EmptyBorder"/>
                <javadoc line="192">
                    A border which is like a Margin border but it will only honor the margin
                      if the margin has been explicitly set by the developer.
                      Note: This is identical to the package private class
                      MetalBorders.RolloverMarginBorder and should probably be consolidated.                    
                </javadoc>
                <method name="RolloverMarginBorder" type="constructor" line="201">
                    <comment line="203">
                        hardcoded margin for JLF requirements.                        
                    </comment>
                </method>
                <method name="getBorderInsets" type="Insets" line="205">
                    <params>
                        <param name="c" type="Component"/>
                        <param name="insets" type="Insets"/>
                    </params>
                    <comment line="213">
                        default margin so replace                        
                    </comment>
                    <comment line="219">
                        Margin which has been explicitly set by the user.                        
                    </comment>
                    <declaration name="margin" type="Insets" line="206"/>
                    <scope line="208"/>
                    <scope line="211"/>
                    <scope line="217"/>
                </method>
            </class>
            <class name="ButtonBorder" line="228">
                <extends class="AbstractBorder"/>
                <implements interface="UIResource"/>
                <declaration name="shadow" type="Color" line="229"/>
                <declaration name="darkShadow" type="Color" line="230"/>
                <declaration name="highlight" type="Color" line="231"/>
                <declaration name="lightHighlight" type="Color" line="232"/>
                <method name="ButtonBorder" type="constructor" line="235">
                    <params>
                        <param name="shadow" type="Color"/>
                        <param name="darkShadow" type="Color"/>
                        <param name="highlight" type="Color"/>
                        <param name="lightHighlight" type="Color"/>
                    </params>
                </method>
                <method name="paintBorder" type="void" line="243">
                    <params>
                        <param name="c" type="Component"/>
                        <param name="g" type="Graphics"/>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                        <param name="width" type="int"/>
                        <param name="height" type="int"/>
                    </params>
                    <declaration name="isPressed" type="boolean" line="244"/>
                    <declaration name="isDefault" type="boolean" line="245"/>
                    <scope line="247">
                        <declaration name="b" type="AbstractButton" line="248"/>
                        <declaration name="model" type="ButtonModel" line="249"/>
                        <scope line="253"/>
                    </scope>
                </method>
                <method name="getBorderInsets" type="Insets" line="262">
                    <params>
                        <param name="c" type="Component"/>
                        <param name="insets" type="Insets"/>
                    </params>
                    <comment line="264">
                        leave room for default visual                        
                    </comment>
                </method>
            </class>
            <class name="ToggleButtonBorder" line="270">
                <extends class="ButtonBorder"/>
                <method name="ToggleButtonBorder" type="constructor" line="273">
                    <params>
                        <param name="shadow" type="Color"/>
                        <param name="darkShadow" type="Color"/>
                        <param name="highlight" type="Color"/>
                        <param name="lightHighlight" type="Color"/>
                    </params>
                </method>
                <method name="paintBorder" type="void" line="278">
                    <params>
                        <param name="c" type="Component"/>
                        <param name="g" type="Graphics"/>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                        <param name="width" type="int"/>
                        <param name="height" type="int"/>
                    </params>
                </method>
                <method name="getBorderInsets" type="Insets" line="285">
                    <params>
                        <param name="c" type="Component"/>
                        <param name="insets" type="Insets"/>
                    </params>
                </method>
            </class>
            <class name="RadioButtonBorder" line="291">
                <extends class="ButtonBorder"/>
                <method name="RadioButtonBorder" type="constructor" line="294">
                    <params>
                        <param name="shadow" type="Color"/>
                        <param name="darkShadow" type="Color"/>
                        <param name="highlight" type="Color"/>
                        <param name="lightHighlight" type="Color"/>
                    </params>
                </method>
                <method name="paintBorder" type="void" line="299">
                    <params>
                        <param name="c" type="Component"/>
                        <param name="g" type="Graphics"/>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                        <param name="width" type="int"/>
                        <param name="height" type="int"/>
                    </params>
                    <scope line="301">
                        <declaration name="b" type="AbstractButton" line="302"/>
                        <declaration name="model" type="ButtonModel" line="303"/>
                        <scope line="305"/>
                        <scope line="309"/>
                    </scope>
                    <scope line="315"/>
                </method>
                <method name="getBorderInsets" type="Insets" line="321">
                    <params>
                        <param name="c" type="Component"/>
                        <param name="insets" type="Insets"/>
                    </params>
                </method>
            </class>
            <class name="MenuBarBorder" line="327">
                <extends class="AbstractBorder"/>
                <implements interface="UIResource"/>
                <declaration name="shadow" type="Color" line="328"/>
                <declaration name="highlight" type="Color" line="329"/>
                <method name="MenuBarBorder" type="constructor" line="331">
                    <params>
                        <param name="shadow" type="Color"/>
                        <param name="highlight" type="Color"/>
                    </params>
                </method>
                <method name="paintBorder" type="void" line="336">
                    <params>
                        <param name="c" type="Component"/>
                        <param name="g" type="Graphics"/>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                        <param name="width" type="int"/>
                        <param name="height" type="int"/>
                    </params>
                    <declaration name="oldColor" type="Color" line="337"/>
                </method>
                <method name="getBorderInsets" type="Insets" line="347">
                    <params>
                        <param name="c" type="Component"/>
                        <param name="insets" type="Insets"/>
                    </params>
                </method>
            </class>
            <class name="MarginBorder" line="353">
                <extends class="AbstractBorder"/>
                <implements interface="UIResource"/>
                <method name="getBorderInsets" type="Insets" line="354">
                    <params>
                        <param name="c" type="Component"/>
                        <param name="insets" type="Insets"/>
                    </params>
                    <comment line="357">
                        Ideally we&apos;d have an interface defined for classes which
                         support margins (to avoid this hackery), but we&apos;ve
                         decided against it for simplicity                        
                    </comment>
                    <declaration name="margin" type="Insets" line="355"/>
                    <scope line="361">
                        <declaration name="b" type="AbstractButton" line="362"/>
                    </scope>
                    <scope line="364">
                        <declaration name="t" type="JToolBar" line="365"/>
                    </scope>
                    <scope line="367">
                        <declaration name="t" type="JTextComponent" line="368"/>
                    </scope>
                </method>
            </class>
            <class name="FieldBorder" line="380">
                <extends class="AbstractBorder"/>
                <implements interface="UIResource"/>
                <declaration name="shadow" type="Color" line="381"/>
                <declaration name="darkShadow" type="Color" line="382"/>
                <declaration name="highlight" type="Color" line="383"/>
                <declaration name="lightHighlight" type="Color" line="384"/>
                <method name="FieldBorder" type="constructor" line="387">
                    <params>
                        <param name="shadow" type="Color"/>
                        <param name="darkShadow" type="Color"/>
                        <param name="highlight" type="Color"/>
                        <param name="lightHighlight" type="Color"/>
                    </params>
                </method>
                <method name="paintBorder" type="void" line="395">
                    <params>
                        <param name="c" type="Component"/>
                        <param name="g" type="Graphics"/>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                        <param name="width" type="int"/>
                        <param name="height" type="int"/>
                    </params>
                </method>
                <method name="getBorderInsets" type="Insets" line="401">
                    <params>
                        <param name="c" type="Component"/>
                        <param name="insets" type="Insets"/>
                    </params>
                    <declaration name="margin" type="Insets" line="402"/>
                    <scope line="403"/>
                </method>
            </class>
            <class name="SplitPaneDividerBorder" line="416">
                <implements interface="Border"/>
                <implements interface="UIResource"/>
                <javadoc line="416">
                    Draws the border around the divider in a splitpane
                      (when BasicSplitPaneUI is used). To get the appropriate effect, this
                      needs to be used with a SplitPaneBorder.                    
                </javadoc>
                <declaration name="highlight" type="Color" line="422"/>
                <declaration name="shadow" type="Color" line="423"/>
                <method name="SplitPaneDividerBorder" type="constructor" line="425">
                    <params>
                        <param name="highlight" type="Color"/>
                        <param name="shadow" type="Color"/>
                    </params>
                </method>
                <method name="paintBorder" type="void" line="431">
                    <params>
                        <param name="c" type="Component"/>
                        <param name="g" type="Graphics"/>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                        <param name="width" type="int"/>
                        <param name="height" type="int"/>
                    </params>
                    <comment line="443">
                        This is needed for the space between the divider and end of
                         splitpane.                        
                    </comment>
                    <scope line="432"/>
                    <declaration name="child" type="Component" line="435"/>
                    <declaration name="cBounds" type="Rectangle" line="436"/>
                    <declaration name="splitPane" type="JSplitPane" line="437"/>
                    <declaration name="size" type="Dimension" line="439"/>
                    <scope line="446">
                        <scope line="447"/>
                        <scope line="452"/>
                    </scope>
                    <scope line="456">
                        <scope line="457"/>
                        <scope line="462"/>
                    </scope>
                </method>
                <method name="getBorderInsets" type="Insets" line="469">
                    <params>
                        <param name="c" type="Component"/>
                    </params>
                    <comment line="486">
                        VERTICAL_SPLIT                        
                    </comment>
                    <declaration name="insets" type="Insets" line="470"/>
                    <scope line="471">
                        <declaration name="bspui" type="BasicSplitPaneUI" line="472"/>
                        <scope line="475">
                            <declaration name="splitPane" type="JSplitPane" line="476"/>
                            <scope line="478">
                                <scope line="480"/>
                            </scope>
                        </scope>
                    </scope>
                </method>
                <method name="isBorderOpaque" type="boolean" line="495"/>
            </class>
            <class name="SplitPaneBorder" line="499">
                <implements interface="Border"/>
                <implements interface="UIResource"/>
                <javadoc line="499">
                    Draws the border around the splitpane. To work correctly you shoudl
                      also install a border on the divider (property SplitPaneDivider.border).                    
                </javadoc>
                <declaration name="highlight" type="Color" line="504"/>
                <declaration name="shadow" type="Color" line="505"/>
                <method name="SplitPaneBorder" type="constructor" line="507">
                    <params>
                        <param name="highlight" type="Color"/>
                        <param name="shadow" type="Color"/>
                    </params>
                </method>
                <method name="paintBorder" type="void" line="513">
                    <params>
                        <param name="c" type="Component"/>
                        <param name="g" type="Graphics"/>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                        <param name="width" type="int"/>
                        <param name="height" type="int"/>
                    </params>
                    <comment line="518">
                        The only tricky part with this border is that the divider is
                         not positioned at the top (for horizontal) or left (for vert),
                         so this border draws to where the divider is:
                         -----------------
                         |xxxxxxx xxxxxxx|
                         |x     ---     x|
                         |x     | |     x|
                         |x     |D|     x|
                         |x     | |     x|
                         |x     ---     x|
                         |xxxxxxx xxxxxxx|
                         -----------------
                         The above shows (rather excessively) what this looks like for
                         a horizontal orientation. This border then draws the x&apos;s, with
                         the SplitPaneDividerBorder drawing its own border.                        
                    </comment>
                    <comment line="540">
                        This is needed for the space between the divider and end of
                         splitpane.                        
                    </comment>
                    <scope line="514"/>
                    <declaration name="child" type="Component" line="533"/>
                    <declaration name="cBounds" type="Rectangle" line="534"/>
                    <declaration name="splitPane" type="JSplitPane" line="536"/>
                    <scope line="543">
                        <scope line="544"/>
                        <scope line="555">
                            <declaration name="maxX" type="int" line="558"/>
                            <declaration name="maxY" type="int" line="559"/>
                        </scope>
                    </scope>
                    <scope line="567">
                        <scope line="568"/>
                        <scope line="579">
                            <declaration name="maxX" type="int" line="582"/>
                            <declaration name="maxY" type="int" line="583"/>
                        </scope>
                    </scope>
                </method>
                <method name="getBorderInsets" type="Insets" line="594">
                    <params>
                        <param name="c" type="Component"/>
                    </params>
                </method>
                <method name="isBorderOpaque" type="boolean" line="597"/>
            </class>
        </class>
    </source>