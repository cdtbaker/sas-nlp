<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.plaf.basic">
        <import package="sun.swing.DefaultLookup"/>
        <import package="sun.swing.UIAction"/>
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="java.beans"/>
        <import package="javax.swing"/>
        <import package="javax.swing.event"/>
        <import package="javax.swing.plaf"/>
        <class name="BasicScrollBarUI" line="41">
            <extends class="ScrollBarUI"/>
            <comment line="58">
                NOTE: DO NOT use this field directly, SynthScrollBarUI assumes you&apos;ll                
            </comment>
            <comment line="59">
                call getMinimumThumbSize to access it.                
            </comment>
            <comment line="91">
                delay in milli seconds                
            </comment>
            <comment line="623">
                LayoutManager Implementation                
            </comment>
            <comment line="937">
                Method for scrolling by a block increment.
                 Added for mouse wheel scrolling support, RFE 4202656.                
            </comment>
            <comment line="968">
                Method for scrolling by a unit increment.
                 Added for mouse wheel scrolling support, RFE 4202656.
                
                 If limitByBlock is set to true, the scrollbar will scroll at least 1
                 unit increment, but will not scroll farther than the block increment.
                 See BasicScrollPaneUI.Handler.mouseWheelMoved().                
            </comment>
            <comment line="1580">
                                
            </comment>
            <comment line="1581">
                EventHandler                
            </comment>
            <comment line="1582">
                                
            </comment>
            <implements interface="LayoutManager"/>
            <implements interface="SwingConstants"/>
            <javadoc line="41">
                Implementation of ScrollBarUI for the Basic Look and Feel                
                <author>
                    Rich Schiavi                    
                </author>
                <author>
                    David Kloba                    
                </author>
                <author>
                    Hans Muller                    
                </author>
            </javadoc>
            <declaration name="POSITIVE_SCROLL" type="int" line="51"/>
            <declaration name="NEGATIVE_SCROLL" type="int" line="52"/>
            <declaration name="MIN_SCROLL" type="int" line="54"/>
            <declaration name="MAX_SCROLL" type="int" line="55"/>
            <declaration name="minimumThumbSize" type="Dimension" line="59"/>
            <declaration name="maximumThumbSize" type="Dimension" line="60"/>
            <declaration name="thumbHighlightColor" type="Color" line="62"/>
            <declaration name="thumbLightShadowColor" type="Color" line="63"/>
            <declaration name="thumbDarkShadowColor" type="Color" line="64"/>
            <declaration name="thumbColor" type="Color" line="65"/>
            <declaration name="trackColor" type="Color" line="66"/>
            <declaration name="trackHighlightColor" type="Color" line="67"/>
            <declaration name="scrollbar" type="JScrollBar" line="69"/>
            <declaration name="incrButton" type="JButton" line="70"/>
            <declaration name="decrButton" type="JButton" line="71"/>
            <declaration name="isDragging" type="boolean" line="72"/>
            <declaration name="trackListener" type="TrackListener" line="73"/>
            <declaration name="buttonListener" type="ArrowButtonListener" line="74"/>
            <declaration name="modelListener" type="ModelListener" line="75"/>
            <declaration name="thumbRect" type="Rectangle" line="77"/>
            <declaration name="trackRect" type="Rectangle" line="78"/>
            <declaration name="trackHighlight" type="int" line="80"/>
            <declaration name="NO_HIGHLIGHT" type="int" line="82"/>
            <declaration name="DECREASE_HIGHLIGHT" type="int" line="83"/>
            <declaration name="INCREASE_HIGHLIGHT" type="int" line="84"/>
            <declaration name="scrollListener" type="ScrollListener" line="86"/>
            <declaration name="propertyChangeListener" type="PropertyChangeListener" line="87"/>
            <declaration name="scrollTimer" type="Timer" line="88"/>
            <declaration name="scrollSpeedThrottle" type="int" line="90"/>
            <declaration name="supportsAbsolutePositioning" type="boolean" line="92"/>
            <javadoc line="92">
                True indicates a middle click will absolutely position the
                  scrollbar.                
            </javadoc>
            <declaration name="scrollBarWidth" type="int" line="96"/>
            <javadoc line="96">
                Hint as to what width (when vertical) or height (when horizontal)
                  should be.                
                <since>
                    1.7                    
                </since>
            </javadoc>
            <declaration name="handler" type="Handler" line="104"/>
            <declaration name="thumbActive" type="boolean" line="106"/>
            <declaration name="useCachedValue" type="boolean" line="108"/>
            <javadoc line="108">
                Determine whether scrollbar layout should use cached value or adjusted
                  value returned by scrollbar&apos;s &lt;code&gt;getValue&lt;/code&gt;.                
            </javadoc>
            <declaration name="scrollBarValue" type="int" line="113"/>
            <javadoc line="113">
                The scrollbar value is cached to save real value if the view is adjusted.                
            </javadoc>
            <declaration name="incrGap" type="int" line="118"/>
            <javadoc line="118">
                Distance between the increment button and the track. This may be a negative
                  number. If negative, then an overlap between the button and track will occur,
                  which is useful for shaped buttons.                
                <since>
                    1.7                    
                </since>
            </javadoc>
            <declaration name="decrGap" type="int" line="127"/>
            <javadoc line="127">
                Distance between the decrement button and the track. This may be a negative
                  number. If negative, then an overlap between the button and track will occur,
                  which is useful for shaped buttons.                
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="loadActionMap" type="void" line="136">
                <params>
                    <param name="map" type="LazyActionMap"/>
                </params>
            </method>
            <method name="createUI" type="ComponentUI" line="146">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <method name="configureScrollBarColors" type="void" line="152"/>
            <method name="installUI" type="void" line="164">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <method name="uninstallUI" type="void" line="174">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <method name="installDefaults" type="void" line="188">
                <comment line="214">
                    TODO this can be removed when incrGap/decrGap become protected                    
                </comment>
                <comment line="215">
                    handle scaling for sizeVarients for special case components. The                    
                </comment>
                <comment line="216">
                    key &quot;JComponent.sizeVariant&quot; scales for large/small/mini                    
                </comment>
                <comment line="217">
                    components are based on Apples LAF                    
                </comment>
                <scope line="190"/>
                <declaration name="absB" type="Boolean" line="196"/>
                <scope line="202"/>
                <declaration name="scaleKey" type="String" line="218"/>
                <scope line="220">
                    <scope line="221"/>
                    <scope line="225"/>
                    <scope line="229"/>
                </scope>
            </method>
            <method name="installComponents" type="void" line="238">
                <comment line="257">
                    Force the children&apos;s enabled state to be updated.                    
                </comment>
                <scope line="246"/>
                <scope line="249"/>
            </method>
            <method name="uninstallComponents" type="void" line="261"/>
            <method name="installListeners" type="void" line="267">
                <comment line="288">
                    default InitialDelay?                    
                </comment>
                <scope line="279"/>
                <scope line="282"/>
            </method>
            <method name="installKeyboardActions" type="void" line="292">
                <declaration name="inputMap" type="InputMap" line="296"/>
            </method>
            <method name="uninstallKeyboardActions" type="void" line="304"/>
            <method name="getInputMap" type="InputMap" line="310">
                <params>
                    <param name="condition" type="int"/>
                </params>
                <scope line="311">
                    <declaration name="keyMap" type="InputMap" line="312"/>
                    <declaration name="rtlKeyMap" type="InputMap" line="314"/>
                    <scope line="317"/>
                    <scope line="319"/>
                </scope>
                <scope line="324">
                    <declaration name="keyMap" type="InputMap" line="325"/>
                    <declaration name="rtlKeyMap" type="InputMap" line="327"/>
                    <scope line="330"/>
                    <scope line="332"/>
                </scope>
            </method>
            <method name="uninstallListeners" type="void" line="341">
                <scope line="345"/>
                <scope line="348"/>
            </method>
            <method name="uninstallDefaults" type="void" line="361">
                <scope line="363"/>
            </method>
            <method name="getHandler" type="Handler" line="369">
                <scope line="370"/>
            </method>
            <method name="createTrackListener" type="TrackListener" line="376"/>
            <method name="createArrowButtonListener" type="ArrowButtonListener" line="380"/>
            <method name="createModelListener" type="ModelListener" line="384"/>
            <method name="createScrollListener" type="ScrollListener" line="388"/>
            <method name="createPropertyChangeListener" type="PropertyChangeListener" line="392"/>
            <method name="updateThumbState" type="void" line="396">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <declaration name="rect" type="Rectangle" line="397"/>
            </method>
            <javadoc line="402">
                Sets whether or not the mouse is currently over the thumb.                
                <param>
                    active True indicates the thumb is currently active.                    
                </param>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="setThumbRollover" type="void" line="408">
                <params>
                    <param name="active" type="boolean"/>
                </params>
                <scope line="409"/>
            </method>
            <javadoc line="415">
                Returns true if the mouse is currently over the thumb.                
                <return>
                    true if the thumb is currently active                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="isThumbRollover" type="boolean" line="421"/>
            <method name="paint" type="void" line="425">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="c" type="JComponent"/>
                </params>
                <declaration name="thumbBounds" type="Rectangle" line="427"/>
                <scope line="428"/>
            </method>
            <javadoc line="434">
                A vertical scrollbar&apos;s preferred width is the maximum of
                  preferred widths of the (non &lt;code&gt;null&lt;/code&gt;)
                  increment/decrement buttons,
                  and the minimum width of the thumb. The preferred height is the
                  sum of the preferred heights of the same parts.  The basis for
                  the preferred size of a horizontal scrollbar is similar.
                  &lt;p&gt;
                  The &lt;code&gt;preferredSize&lt;/code&gt; is only computed once, subsequent
                  calls to this method just return a cached size.                
                <param>
                    c the <code>JScrollBar</code> that's delegating this method to us                    
                </param>
                <return>
                    the preferred size of a Basic JScrollBar                    
                </return>
                <see>
                    #getMaximumSize                    
                </see>
                <see>
                    #getMinimumSize                    
                </see>
            </javadoc>
            <method name="getPreferredSize" type="Dimension" line="450">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <javadoc line="457">
                @param c The JScrollBar that&apos;s delegating this method to us.                
                <return>
                    new Dimension(Integer.MAX_VALUE, Integer.MAX_VALUE);                    
                </return>
                <see>
                    #getMinimumSize                    
                </see>
                <see>
                    #getPreferredSize                    
                </see>
            </javadoc>
            <method name="getMaximumSize" type="Dimension" line="463">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <method name="createDecreaseButton" type="JButton" line="467">
                <params>
                    <param name="orientation" type="int"/>
                </params>
            </method>
            <method name="createIncreaseButton" type="JButton" line="475">
                <params>
                    <param name="orientation" type="int"/>
                </params>
            </method>
            <method name="paintDecreaseHighlight" type="void" line="485">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
                <comment line="491">
                    paint the distance between the start of the track and top of the thumb                    
                </comment>
                <comment line="498">
                    if left-to-right, fill the area between the start of the track and                    
                </comment>
                <comment line="499">
                    the left edge of the thumb. If right-to-left, fill the area between                    
                </comment>
                <comment line="500">
                    the end of the thumb and end of the track.                    
                </comment>
                <declaration name="insets" type="Insets" line="486"/>
                <declaration name="thumbR" type="Rectangle" line="487"/>
                <scope line="490">
                    <declaration name="x" type="int" line="492"/>
                    <declaration name="y" type="int" line="493"/>
                    <declaration name="w" type="int" line="494"/>
                    <declaration name="h" type="int" line="495"/>
                </scope>
                <scope line="497">
                    <declaration name="x" type="int" line="501"/>
                    <scope line="502"/>
                    <scope line="505"/>
                    <declaration name="y" type="int" line="509"/>
                    <declaration name="h" type="int" line="510"/>
                </scope>
            </method>
            <method name="paintIncreaseHighlight" type="void" line="517">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
                <comment line="523">
                    fill the area between the bottom of the thumb and the end of the track.                    
                </comment>
                <comment line="531">
                    if left-to-right, fill the area between the right of the thumb and the                    
                </comment>
                <comment line="532">
                    end of the track. If right-to-left, then fill the area to the left of                    
                </comment>
                <comment line="533">
                    the thumb and the start of the track.                    
                </comment>
                <declaration name="insets" type="Insets" line="518"/>
                <declaration name="thumbR" type="Rectangle" line="519"/>
                <scope line="522">
                    <declaration name="x" type="int" line="524"/>
                    <declaration name="y" type="int" line="525"/>
                    <declaration name="w" type="int" line="526"/>
                    <declaration name="h" type="int" line="527"/>
                </scope>
                <scope line="530">
                    <declaration name="x" type="int" line="534"/>
                    <scope line="535"/>
                    <scope line="538"/>
                    <declaration name="y" type="int" line="542"/>
                    <declaration name="h" type="int" line="543"/>
                </scope>
            </method>
            <method name="paintTrack" type="void" line="550">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="c" type="JComponent"/>
                    <param name="trackBounds" type="Rectangle"/>
                </params>
                <scope line="554"/>
                <scope line="557"/>
            </method>
            <method name="paintThumb" type="void" line="564">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="c" type="JComponent"/>
                    <param name="thumbBounds" type="Rectangle"/>
                </params>
                <scope line="565"/>
                <declaration name="w" type="int" line="569"/>
                <declaration name="h" type="int" line="570"/>
            </method>
            <javadoc line="591">
                Returns the smallest acceptable size for the thumb.  If the scrollbar
                  becomes so small that this size isn&apos;t available, the thumb will be
                  hidden.
                  &lt;p&gt;
                  &lt;b&gt;Warning &lt;/b&gt;: the value returned by this method should not be
                  be modified, it&apos;s a shared static constant.                
                <return>
                    The smallest acceptable size for the thumb.                    
                </return>
                <see>
                    #getMaximumThumbSize                    
                </see>
            </javadoc>
            <method name="getMinimumThumbSize" type="Dimension" line="602"/>
            <javadoc line="606">
                Returns the largest acceptable size for the thumb.  To create a fixed
                  size thumb one make this method and &lt;code&gt;getMinimumThumbSize&lt;/code&gt;
                  return the same value.
                  &lt;p&gt;
                  &lt;b&gt;Warning &lt;/b&gt;: the value returned by this method should not be
                  be modified, it&apos;s a shared static constant.                
                <return>
                    The largest acceptable size for the thumb.                    
                </return>
                <see>
                    #getMinimumThumbSize                    
                </see>
            </javadoc>
            <method name="getMaximumThumbSize" type="Dimension" line="617"/>
            <method name="addLayoutComponent" type="void" line="626">
                <params>
                    <param name="name" type="String"/>
                    <param name="child" type="Component"/>
                </params>
            </method>
            <method name="removeLayoutComponent" type="void" line="627">
                <params>
                    <param name="child" type="Component"/>
                </params>
            </method>
            <method name="preferredLayoutSize" type="Dimension" line="629">
                <params>
                    <param name="scrollbarContainer" type="Container"/>
                </params>
            </method>
            <method name="minimumLayoutSize" type="Dimension" line="633">
                <params>
                    <param name="scrollbarContainer" type="Container"/>
                </params>
            </method>
            <method name="getValue" type="int" line="637">
                <params>
                    <param name="sb" type="JScrollBar"/>
                </params>
            </method>
            <method name="layoutVScrollbar" type="void" line="642">
                <params>
                    <param name="sb" type="JScrollBar"/>
                </params>
                <comment line="646">
                    Width and left edge of the buttons and thumb.                    
                </comment>
                <comment line="652">
                    Nominal locations of the buttons, assuming their preferred
                     size will fit.                    
                </comment>
                <comment line="665">
                    The thumb must fit within the height left over after we
                     subtract the preferredSize of the buttons and the insets
                     and the gaps                    
                </comment>
                <comment line="674">
                    Compute the height and origin of the thumb.   The case
                     where the thumb is at the bottom edge is handled specially
                     to avoid numerical problems in computing thumbY.  Enforce
                     the thumbs minmax dimensions.  If the thumb doesn&apos;t
                     fit in the track (trackH) we&apos;ll hide it later.                    
                </comment>
                <comment line="697">
                    If the buttons don&apos;t fit, allocate half of the available
                     space to each and move the lower one (incrButton) down.                    
                </comment>
                <comment line="708">
                    Update the trackRect field.                    
                </comment>
                <comment line="714">
                    If the thumb isn&apos;t going to fit, zero it&apos;s bounds.  Otherwise
                     make sure it fits between the buttons.  Note that setting the
                     thumbs bounds will cause a repaint.                    
                </comment>
                <comment line="720">
                    This is used primarily for GTK L&amp;F, which expands the                    
                </comment>
                <comment line="721">
                    thumb to fit the track when it would otherwise be hidden.                    
                </comment>
                <comment line="724">
                    Other L&amp;F&apos;s simply hide the thumb in this case.                    
                </comment>
                <declaration name="sbSize" type="Dimension" line="643"/>
                <declaration name="sbInsets" type="Insets" line="644"/>
                <declaration name="itemW" type="int" line="649"/>
                <declaration name="itemX" type="int" line="650"/>
                <declaration name="squareButtons" type="boolean" line="655"/>
                <declaration name="decrButtonH" type="int" line="657"/>
                <declaration name="decrButtonY" type="int" line="659"/>
                <declaration name="incrButtonH" type="int" line="661"/>
                <declaration name="incrButtonY" type="int" line="663"/>
                <declaration name="sbInsetsH" type="int" line="669"/>
                <declaration name="sbButtonsH" type="int" line="670"/>
                <declaration name="gaps" type="int" line="671"/>
                <declaration name="trackH" type="float" line="672"/>
                <declaration name="min" type="float" line="680"/>
                <declaration name="extent" type="float" line="681"/>
                <declaration name="range" type="float" line="682"/>
                <declaration name="value" type="float" line="683"/>
                <declaration name="thumbH" type="int" line="685"/>
                <declaration name="thumbY" type="int" line="690"/>
                <scope line="691">
                    <declaration name="thumbRange" type="float" line="692"/>
                </scope>
                <declaration name="sbAvailButtonH" type="int" line="700"/>
                <scope line="701"/>
                <declaration name="itrackY" type="int" line="710"/>
                <declaration name="itrackH" type="int" line="711"/>
                <scope line="718">
                    <scope line="719"/>
                    <scope line="723"/>
                </scope>
                <scope line="728">
                    <scope line="729"/>
                    <scope line="732"/>
                </scope>
            </method>
            <method name="layoutHScrollbar" type="void" line="741">
                <params>
                    <param name="sb" type="JScrollBar"/>
                </params>
                <comment line="745">
                    Height and top edge of the buttons and thumb.                    
                </comment>
                <comment line="752">
                    Nominal locations of the buttons, assuming their preferred
                     size will fit.                    
                </comment>
                <comment line="771">
                    The thumb must fit within the width left over after we
                     subtract the preferredSize of the buttons and the insets
                     and the gaps                    
                </comment>
                <comment line="779">
                    Compute the width and origin of the thumb.  Enforce
                     the thumbs minmax dimensions.  The case where the thumb
                     is at the right edge is handled specially to avoid numerical
                     problems in computing thumbX.  If the thumb doesn&apos;t
                     fit in the track (trackH) we&apos;ll hide it later.                    
                </comment>
                <comment line="807">
                    If the buttons don&apos;t fit, allocate half of the available
                     space to each and move the right one over.                    
                </comment>
                <comment line="819">
                    Update the trackRect field.                    
                </comment>
                <comment line="825">
                    Make sure the thumb fits between the buttons.  Note
                     that setting the thumbs bounds causes a repaint.                    
                </comment>
                <comment line="830">
                    This is used primarily for GTK L&amp;F, which expands the                    
                </comment>
                <comment line="831">
                    thumb to fit the track when it would otherwise be hidden.                    
                </comment>
                <comment line="834">
                    Other L&amp;F&apos;s simply hide the thumb in this case.                    
                </comment>
                <declaration name="sbSize" type="Dimension" line="742"/>
                <declaration name="sbInsets" type="Insets" line="743"/>
                <declaration name="itemH" type="int" line="747"/>
                <declaration name="itemY" type="int" line="748"/>
                <declaration name="ltr" type="boolean" line="750"/>
                <declaration name="squareButtons" type="boolean" line="755"/>
                <declaration name="leftButtonW" type="int" line="757"/>
                <declaration name="rightButtonW" type="int" line="759"/>
                <scope line="761">
                    <declaration name="temp" type="int" line="762"/>
                </scope>
                <declaration name="leftButtonX" type="int" line="766"/>
                <declaration name="rightButtonX" type="int" line="767"/>
                <declaration name="leftGap" type="int" line="768"/>
                <declaration name="rightGap" type="int" line="769"/>
                <declaration name="sbInsetsW" type="int" line="775"/>
                <declaration name="sbButtonsW" type="int" line="776"/>
                <declaration name="trackW" type="float" line="777"/>
                <declaration name="min" type="float" line="785"/>
                <declaration name="max" type="float" line="786"/>
                <declaration name="extent" type="float" line="787"/>
                <declaration name="range" type="float" line="788"/>
                <declaration name="value" type="float" line="789"/>
                <declaration name="thumbW" type="int" line="791"/>
                <declaration name="thumbX" type="int" line="796"/>
                <scope line="797">
                    <declaration name="thumbRange" type="float" line="798"/>
                    <scope line="799"/>
                    <scope line="801"/>
                </scope>
                <declaration name="sbAvailButtonW" type="int" line="810"/>
                <scope line="811"/>
                <declaration name="itrackX" type="int" line="821"/>
                <declaration name="itrackW" type="int" line="822"/>
                <scope line="828">
                    <scope line="829"/>
                    <scope line="833"/>
                </scope>
                <scope line="838">
                    <scope line="839"/>
                    <scope line="842"/>
                </scope>
            </method>
            <method name="layoutContainer" type="void" line="850">
                <params>
                    <param name="scrollbarContainer" type="Container"/>
                </params>
                <comment line="851">
                    If the user is dragging the value, we&apos;ll assume that the
                     scrollbars layout is OK modulo the thumb which is being
                     handled by the dragging code.                    
                </comment>
                <scope line="855"/>
                <declaration name="scrollbar" type="JScrollBar" line="859"/>
            </method>
            <javadoc line="872">
                Set the bounds of the thumb and force a repaint that includes
                  the old thumbBounds and the new one.                
                <see>
                    #getThumbBounds                    
                </see>
            </javadoc>
            <method name="setThumbBounds" type="void" line="879">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <comment line="880">
                    If the thumbs bounds haven&apos;t changed, we&apos;re done.                    
                </comment>
                <comment line="889">
                    Update thumbRect, and repaint the union of x,y,w,h and
                     the old thumbRect.                    
                </comment>
                <comment line="900">
                    Once there is API to determine the mouse location this will need                    
                </comment>
                <comment line="901">
                    to be changed.                    
                </comment>
                <scope line="885"/>
                <declaration name="minX" type="int" line="892"/>
                <declaration name="minY" type="int" line="893"/>
                <declaration name="maxX" type="int" line="894"/>
                <declaration name="maxY" type="int" line="895"/>
            </method>
            <javadoc line="906">
                Return the current size/location of the thumb.
                  &lt;p&gt;
                  &lt;b&gt;Warning &lt;/b&gt;: the value returned by this method should not be
                  be modified, it&apos;s a reference to the actual rectangle, not a copy.                
                <return>
                    The current size/location of the thumb.                    
                </return>
                <see>
                    #setThumbBounds                    
                </see>
            </javadoc>
            <method name="getThumbBounds" type="Rectangle" line="915"/>
            <javadoc line="920">
                Returns the current bounds of the track, i.e. the space in between
                  the increment and decrement buttons, less the insets.  The value
                  returned by this method is updated each time the scrollbar is
                  laid out (validated).
                  &lt;p&gt;
                  &lt;b&gt;Warning &lt;/b&gt;: the value returned by this method should not be
                  be modified, it&apos;s a reference to the actual rectangle, not a copy.                
                <return>
                    the current bounds of the scrollbar track                    
                </return>
                <see>
                    #layoutContainer                    
                </see>
            </javadoc>
            <method name="getTrackBounds" type="Rectangle" line="932"/>
            <method name="scrollByBlock" type="void" line="940">
                <params>
                    <param name="scrollbar" type="JScrollBar"/>
                    <param name="direction" type="int"/>
                </params>
                <comment line="941">
                    This method is called from BasicScrollPaneUI to implement wheel                    
                </comment>
                <comment line="942">
                    scrolling, and also from scrollByBlock().                    
                </comment>
                <comment line="948">
                    Check for overflow.                    
                </comment>
                <declaration name="oldValue" type="int" line="943"/>
                <declaration name="blockIncrement" type="int" line="944"/>
                <declaration name="delta" type="int" line="945"/>
                <declaration name="newValue" type="int" line="946"/>
                <scope line="949"/>
                <scope line="952"/>
            </method>
            <method name="scrollByBlock" type="void" line="960">
                <params>
                    <param name="direction" type="int"/>
                </params>
                <declaration name="dirtyRect" type="Rectangle" line="963"/>
            </method>
            <method name="scrollByUnits" type="void" line="976">
                <params>
                    <param name="scrollbar" type="JScrollBar"/>
                    <param name="direction" type="int"/>
                    <param name="units" type="int"/>
                    <param name="limitToBlock" type="boolean"/>
                </params>
                <comment line="977">
                    This method is called from BasicScrollPaneUI to implement wheel                    
                </comment>
                <comment line="978">
                    scrolling, as well as from scrollByUnit().                    
                </comment>
                <comment line="1004">
                    Check for overflow.                    
                </comment>
                <declaration name="delta" type="int" line="979"/>
                <declaration name="limit" type="int" line="980"/>
                <scope line="982">
                    <scope line="983"/>
                    <scope line="987"/>
                </scope>
                <scope line="993">
                    <scope line="994"/>
                    <scope line="997"/>
                    <declaration name="oldValue" type="int" line="1001"/>
                    <declaration name="newValue" type="int" line="1002"/>
                    <scope line="1005"/>
                    <scope line="1008"/>
                    <scope line="1011"/>
                    <scope line="1015">
                        <scope line="1018"/>
                    </scope>
                </scope>
            </method>
            <method name="scrollByUnit" type="void" line="1026">
                <params>
                    <param name="direction" type="int"/>
                </params>
            </method>
            <javadoc line="1030">
                Indicates whether the user can absolutely position the thumb with
                  a mouse gesture (usually the middle mouse button).                
                <return>
                    true if a mouse gesture can absolutely position the thumb                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getSupportsAbsolutePositioning" type="boolean" line="1037"/>
            <class name="ModelListener" line="1041">
                <comment line="1358">
                    Because we are handling both mousePressed and Actions                    
                </comment>
                <comment line="1359">
                    we need to make sure we don&apos;t fire under both conditions.                    
                </comment>
                <comment line="1360">
                    (keyfocus on scrollbars causes action without mousePress                    
                </comment>
                <comment line="1493">
                    NOTE: This class exists only for backward compatability. All                    
                </comment>
                <comment line="1494">
                    its functionality has been moved into Handler. If you need to add                    
                </comment>
                <comment line="1495">
                    new functionality add it to the Handler, but make sure this                    
                </comment>
                <comment line="1496">
                    class calls into the Handler.                    
                </comment>
                <comment line="1584">
                                        
                </comment>
                <comment line="1585">
                    FocusListener                    
                </comment>
                <comment line="1586">
                                        
                </comment>
                <comment line="1596">
                                        
                </comment>
                <comment line="1597">
                    PropertyChangeListener                    
                </comment>
                <comment line="1598">
                                        
                </comment>
                <implements interface="ChangeListener"/>
                <javadoc line="1041">
                    A listener to listen for model changes.                    
                </javadoc>
                <method name="stateChanged" type="void" line="1046">
                    <params>
                        <param name="e" type="ChangeEvent"/>
                    </params>
                    <scope line="1047"/>
                </method>
            </class>
            <class name="TrackListener" line="1056">
                <extends class="MouseAdapter"/>
                <comment line="1358">
                    Because we are handling both mousePressed and Actions                    
                </comment>
                <comment line="1359">
                    we need to make sure we don&apos;t fire under both conditions.                    
                </comment>
                <comment line="1360">
                    (keyfocus on scrollbars causes action without mousePress                    
                </comment>
                <comment line="1493">
                    NOTE: This class exists only for backward compatability. All                    
                </comment>
                <comment line="1494">
                    its functionality has been moved into Handler. If you need to add                    
                </comment>
                <comment line="1495">
                    new functionality add it to the Handler, but make sure this                    
                </comment>
                <comment line="1496">
                    class calls into the Handler.                    
                </comment>
                <comment line="1584">
                                        
                </comment>
                <comment line="1585">
                    FocusListener                    
                </comment>
                <comment line="1586">
                                        
                </comment>
                <comment line="1596">
                                        
                </comment>
                <comment line="1597">
                    PropertyChangeListener                    
                </comment>
                <comment line="1598">
                                        
                </comment>
                <implements interface="MouseMotionListener"/>
                <javadoc line="1056">
                    Track mouse drags.                    
                </javadoc>
                <declaration name="offset" type="int" line="1062"/>
                <declaration name="currentMouseX" type="int" line="1063"/>
                <declaration name="direction" type="int" line="1064"/>
                <method name="mouseReleased" type="void" line="1067">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                    <scope line="1068"/>
                    <declaration name="r" type="Rectangle" line="1078"/>
                </method>
                <javadoc line="1090">
                    If the mouse is pressed above the &quot;thumb&quot; component
                      then reduce the scrollbars value by one page (&quot;page up&quot;),
                      otherwise increase it by one page.  If there is no
                      thumb then page up if the mouse is in the upper half
                      of the track.                    
                </javadoc>
                <method name="mousePressed" type="void" line="1098">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                    <comment line="1116">
                        Clicked in the Thumb area?                        
                    </comment>
                    <scope line="1106"/>
                    <scope line="1117"/>
                    <scope line="1130"/>
                    <declaration name="sbSize" type="Dimension" line="1145"/>
                    <scope line="1150">
                        <declaration name="scrollbarCenter" type="int" line="1151"/>
                    </scope>
                    <scope line="1153">
                        <declaration name="thumbY" type="int" line="1154"/>
                    </scope>
                    <scope line="1159">
                        <declaration name="scrollbarCenter" type="int" line="1160"/>
                    </scope>
                    <scope line="1162">
                        <declaration name="thumbX" type="int" line="1163"/>
                    </scope>
                    <scope line="1166"/>
                </method>
                <javadoc line="1180">
                    Set the models value to the position of the thumb&apos;s top of Vertical
                      scrollbar, or the left/right of Horizontal scrollbar in
                      left-to-right/right-to-left scrollbar relative to the origin of the
                      track.                    
                </javadoc>
                <method name="mouseDragged" type="void" line="1186">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                    <scope line="1191"/>
                    <scope line="1194"/>
                    <scope line="1196"/>
                </method>
                <method name="setValueFrom" type="void" line="1204">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                    <comment line="1226">
                        Set the scrollbars value.  If the thumb has reached the end of
                         the scrollbar, then just set the value to its maximum.  Otherwise
                         compute the value as accurately as possible.                        
                    </comment>
                    <declaration name="active" type="boolean" line="1205"/>
                    <declaration name="model" type="BoundedRangeModel" line="1206"/>
                    <declaration name="thumbR" type="Rectangle" line="1207"/>
                    <declaration name="trackLength" type="float" line="1208"/>
                    <declaration name="thumbMin" type="int" line="1209"/>
                    <scope line="1211"/>
                    <scope line="1218"/>
                    <scope line="1230">
                        <scope line="1232"/>
                        <scope line="1234"/>
                    </scope>
                    <scope line="1238">
                        <declaration name="valueMax" type="float" line="1239"/>
                        <declaration name="valueRange" type="float" line="1240"/>
                        <declaration name="thumbValue" type="float" line="1241"/>
                        <declaration name="thumbRange" type="float" line="1242"/>
                        <declaration name="value" type="int" line="1243"/>
                        <scope line="1245"/>
                        <scope line="1247"/>
                    </scope>
                </method>
                <method name="adjustValueIfNecessary" type="int" line="1258">
                    <params>
                        <param name="value" type="int"/>
                    </params>
                    <scope line="1259">
                        <declaration name="scrollpane" type="JScrollPane" line="1260"/>
                        <declaration name="viewport" type="JViewport" line="1261"/>
                        <declaration name="view" type="Component" line="1262"/>
                        <scope line="1263">
                            <declaration name="list" type="JList" line="1264"/>
                            <scope line="1266">
                                <declaration name="adjustedValue" type="int" line="1267"/>
                                <declaration name="mode" type="int" line="1268"/>
                                <declaration name="orientation" type="int" line="1269"/>
                                <scope line="1270">
                                    <declaration name="index" type="int" line="1271"/>
                                    <declaration name="rect" type="Rectangle" line="1272"/>
                                    <scope line="1273"/>
                                </scope>
                                <scope line="1278">
                                    <scope line="1279">
                                        <declaration name="index" type="int" line="1280"/>
                                        <declaration name="rect" type="Rectangle" line="1281"/>
                                        <scope line="1282"/>
                                    </scope>
                                    <scope line="1286">
                                        <declaration name="loc" type="Point" line="1287"/>
                                        <declaration name="extent" type="int" line="1288"/>
                                        <declaration name="index" type="int" line="1290"/>
                                        <declaration name="rect" type="Rectangle" line="1291"/>
                                        <scope line="1292"/>
                                    </scope>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </method>
                <method name="startScrollTimerIfNecessary" type="void" line="1305">
                    <scope line="1306"/>
                    <declaration name="tb" type="Rectangle" line="1310"/>
                    <scope line="1314">
                        <scope line="1315"/>
                    </scope>
                    <scope line="1318"/>
                    <scope line="1324"/>
                </method>
                <method name="mouseMoved" type="void" line="1332">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                    <scope line="1333"/>
                </method>
                <javadoc line="1338">
                    Invoked when the mouse exits the scrollbar.                    
                    <param>
                        e MouseEvent further describing the event                        
                    </param>
                    <since>
                        1.5                        
                    </since>
                </javadoc>
                <method name="mouseExited" type="void" line="1344">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                    <scope line="1345"/>
                </method>
            </class>
            <class name="ArrowButtonListener" line="1352">
                <extends class="MouseAdapter"/>
                <comment line="1358">
                    Because we are handling both mousePressed and Actions                    
                </comment>
                <comment line="1359">
                    we need to make sure we don&apos;t fire under both conditions.                    
                </comment>
                <comment line="1360">
                    (keyfocus on scrollbars causes action without mousePress                    
                </comment>
                <comment line="1493">
                    NOTE: This class exists only for backward compatability. All                    
                </comment>
                <comment line="1494">
                    its functionality has been moved into Handler. If you need to add                    
                </comment>
                <comment line="1495">
                    new functionality add it to the Handler, but make sure this                    
                </comment>
                <comment line="1496">
                    class calls into the Handler.                    
                </comment>
                <comment line="1584">
                                        
                </comment>
                <comment line="1585">
                    FocusListener                    
                </comment>
                <comment line="1586">
                                        
                </comment>
                <comment line="1596">
                                        
                </comment>
                <comment line="1597">
                    PropertyChangeListener                    
                </comment>
                <comment line="1598">
                                        
                </comment>
                <javadoc line="1352">
                    Listener for cursor keys.                    
                </javadoc>
                <declaration name="handledEvent" type="boolean" line="1360"/>
                <method name="mousePressed" type="void" line="1362">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                    <comment line="1364">
                        not an unmodified left mouse button                        
                    </comment>
                    <comment line="1365">
                        if(e.getModifiers() != InputEvent.BUTTON1_MASK) {return; }                        
                    </comment>
                    <scope line="1363"/>
                    <scope line="1366"/>
                    <declaration name="direction" type="int" line="1368"/>
                    <scope line="1377"/>
                </method>
                <method name="mouseReleased" type="void" line="1382">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
            </class>
            <class name="ScrollListener" line="1390">
                <comment line="1358">
                    Because we are handling both mousePressed and Actions                    
                </comment>
                <comment line="1359">
                    we need to make sure we don&apos;t fire under both conditions.                    
                </comment>
                <comment line="1360">
                    (keyfocus on scrollbars causes action without mousePress                    
                </comment>
                <comment line="1493">
                    NOTE: This class exists only for backward compatability. All                    
                </comment>
                <comment line="1494">
                    its functionality has been moved into Handler. If you need to add                    
                </comment>
                <comment line="1495">
                    new functionality add it to the Handler, but make sure this                    
                </comment>
                <comment line="1496">
                    class calls into the Handler.                    
                </comment>
                <comment line="1584">
                                        
                </comment>
                <comment line="1585">
                    FocusListener                    
                </comment>
                <comment line="1586">
                                        
                </comment>
                <comment line="1596">
                                        
                </comment>
                <comment line="1597">
                    PropertyChangeListener                    
                </comment>
                <comment line="1598">
                                        
                </comment>
                <implements interface="ActionListener"/>
                <javadoc line="1390">
                    Listener for scrolling events initiated in the
                      &lt;code&gt;ScrollPane&lt;/code&gt;.                    
                </javadoc>
                <declaration name="direction" type="int" line="1396"/>
                <declaration name="useBlockIncrement" type="boolean" line="1397"/>
                <method name="ScrollListener" type="constructor" line="1399"/>
                <method name="ScrollListener" type="constructor" line="1404">
                    <params>
                        <param name="dir" type="int"/>
                        <param name="block" type="boolean"/>
                    </params>
                </method>
                <method name="setDirection" type="void" line="1409">
                    <params>
                        <param name="direction" type="int"/>
                    </params>
                </method>
                <method name="setScrollByBlock" type="void" line="1410">
                    <params>
                        <param name="block" type="boolean"/>
                    </params>
                </method>
                <method name="actionPerformed" type="void" line="1412">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                    <comment line="1415">
                        Stop scrolling if the thumb catches up with the mouse                        
                    </comment>
                    <scope line="1413">
                        <scope line="1416">
                            <scope line="1417"/>
                            <scope line="1421"/>
                        </scope>
                        <scope line="1424">
                            <scope line="1426"/>
                        </scope>
                    </scope>
                    <scope line="1431"/>
                </method>
            </class>
            <method name="isMouseLeftOfThumb" type="boolean" line="1445"/>
            <method name="isMouseRightOfThumb" type="boolean" line="1449">
                <declaration name="tb" type="Rectangle" line="1450"/>
            </method>
            <method name="isMouseBeforeThumb" type="boolean" line="1454"/>
            <method name="isMouseAfterThumb" type="boolean" line="1460"/>
            <method name="updateButtonDirections" type="void" line="1466">
                <declaration name="orient" type="int" line="1467"/>
                <scope line="1468">
                    <scope line="1469"/>
                    <scope line="1473"/>
                </scope>
                <scope line="1478">
                    <scope line="1479"/>
                    <scope line="1483"/>
                </scope>
            </method>
            <class name="PropertyChangeHandler" line="1490">
                <comment line="1358">
                    Because we are handling both mousePressed and Actions                    
                </comment>
                <comment line="1359">
                    we need to make sure we don&apos;t fire under both conditions.                    
                </comment>
                <comment line="1360">
                    (keyfocus on scrollbars causes action without mousePress                    
                </comment>
                <comment line="1493">
                    NOTE: This class exists only for backward compatability. All                    
                </comment>
                <comment line="1494">
                    its functionality has been moved into Handler. If you need to add                    
                </comment>
                <comment line="1495">
                    new functionality add it to the Handler, but make sure this                    
                </comment>
                <comment line="1496">
                    class calls into the Handler.                    
                </comment>
                <comment line="1584">
                                        
                </comment>
                <comment line="1585">
                    FocusListener                    
                </comment>
                <comment line="1586">
                                        
                </comment>
                <comment line="1596">
                                        
                </comment>
                <comment line="1597">
                    PropertyChangeListener                    
                </comment>
                <comment line="1598">
                                        
                </comment>
                <implements interface="PropertyChangeListener"/>
                <method name="propertyChange" type="void" line="1497">
                    <params>
                        <param name="e" type="PropertyChangeEvent"/>
                    </params>
                </method>
            </class>
            <class name="Actions" line="1503">
                <extends class="UIAction"/>
                <comment line="1358">
                    Because we are handling both mousePressed and Actions                    
                </comment>
                <comment line="1359">
                    we need to make sure we don&apos;t fire under both conditions.                    
                </comment>
                <comment line="1360">
                    (keyfocus on scrollbars causes action without mousePress                    
                </comment>
                <comment line="1493">
                    NOTE: This class exists only for backward compatability. All                    
                </comment>
                <comment line="1494">
                    its functionality has been moved into Handler. If you need to add                    
                </comment>
                <comment line="1495">
                    new functionality add it to the Handler, but make sure this                    
                </comment>
                <comment line="1496">
                    class calls into the Handler.                    
                </comment>
                <comment line="1584">
                                        
                </comment>
                <comment line="1585">
                    FocusListener                    
                </comment>
                <comment line="1586">
                                        
                </comment>
                <comment line="1596">
                                        
                </comment>
                <comment line="1597">
                    PropertyChangeListener                    
                </comment>
                <comment line="1598">
                                        
                </comment>
                <javadoc line="1503">
                    Used for scrolling the scrollbar.                    
                </javadoc>
                <declaration name="POSITIVE_UNIT_INCREMENT" type="String" line="1507"/>
                <declaration name="POSITIVE_BLOCK_INCREMENT" type="String" line="1509"/>
                <declaration name="NEGATIVE_UNIT_INCREMENT" type="String" line="1511"/>
                <declaration name="NEGATIVE_BLOCK_INCREMENT" type="String" line="1513"/>
                <declaration name="MIN_SCROLL" type="String" line="1515"/>
                <declaration name="MAX_SCROLL" type="String" line="1516"/>
                <method name="Actions" type="constructor" line="1518">
                    <params>
                        <param name="name" type="String"/>
                    </params>
                </method>
                <method name="actionPerformed" type="void" line="1522">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                    <declaration name="scrollBar" type="JScrollBar" line="1523"/>
                    <declaration name="key" type="String" line="1524"/>
                    <scope line="1525"/>
                    <scope line="1528"/>
                    <scope line="1531"/>
                    <scope line="1534"/>
                    <scope line="1537"/>
                    <scope line="1540"/>
                </method>
                <method name="scroll" type="void" line="1544">
                    <params>
                        <param name="scrollBar" type="JScrollBar"/>
                        <param name="dir" type="int"/>
                        <param name="block" type="boolean"/>
                    </params>
                    <comment line="1548">
                        Don&apos;t use the BasicScrollBarUI.scrollByXXX methods as we                        
                    </comment>
                    <comment line="1549">
                        don&apos;t want to use an invokeLater to reset the trackHighlight                        
                    </comment>
                    <comment line="1550">
                        via an invokeLater                        
                    </comment>
                    <scope line="1546">
                        <declaration name="amount" type="int" line="1547"/>
                        <scope line="1551">
                            <scope line="1552"/>
                            <scope line="1555"/>
                        </scope>
                        <scope line="1559">
                            <scope line="1560"/>
                            <scope line="1563"/>
                        </scope>
                    </scope>
                    <scope line="1569"/>
                    <scope line="1572"/>
                </method>
            </class>
            <class name="Handler" line="1582">
                <comment line="1358">
                    Because we are handling both mousePressed and Actions                    
                </comment>
                <comment line="1359">
                    we need to make sure we don&apos;t fire under both conditions.                    
                </comment>
                <comment line="1360">
                    (keyfocus on scrollbars causes action without mousePress                    
                </comment>
                <comment line="1493">
                    NOTE: This class exists only for backward compatability. All                    
                </comment>
                <comment line="1494">
                    its functionality has been moved into Handler. If you need to add                    
                </comment>
                <comment line="1495">
                    new functionality add it to the Handler, but make sure this                    
                </comment>
                <comment line="1496">
                    class calls into the Handler.                    
                </comment>
                <comment line="1584">
                                        
                </comment>
                <comment line="1585">
                    FocusListener                    
                </comment>
                <comment line="1586">
                                        
                </comment>
                <comment line="1596">
                                        
                </comment>
                <comment line="1597">
                    PropertyChangeListener                    
                </comment>
                <comment line="1598">
                                        
                </comment>
                <implements interface="FocusListener"/>
                <implements interface="PropertyChangeListener"/>
                <method name="focusGained" type="void" line="1586">
                    <params>
                        <param name="e" type="FocusEvent"/>
                    </params>
                </method>
                <method name="focusLost" type="void" line="1590">
                    <params>
                        <param name="e" type="FocusEvent"/>
                    </params>
                </method>
                <method name="propertyChange" type="void" line="1598">
                    <params>
                        <param name="e" type="PropertyChangeEvent"/>
                    </params>
                    <declaration name="propertyName" type="String" line="1599"/>
                    <scope line="1601">
                        <declaration name="oldModel" type="BoundedRangeModel" line="1602"/>
                        <declaration name="newModel" type="BoundedRangeModel" line="1603"/>
                    </scope>
                    <scope line="1609"/>
                    <scope line="1611">
                        <declaration name="inputMap" type="InputMap" line="1613"/>
                    </scope>
                </method>
            </class>
        </class>
    </source>