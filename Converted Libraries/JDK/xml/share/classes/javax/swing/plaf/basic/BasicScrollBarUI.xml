<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.plaf.basic">
        <import package="sun.swing.DefaultLookup"/>
        <import package="sun.swing.UIAction"/>
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="java.beans"/>
        <import package="javax.swing"/>
        <import package="javax.swing.event"/>
        <import package="javax.swing.plaf"/>
        <class name="BasicScrollBarUI" line="10">
            <extends class="ScrollBarUI"/>
            <implements interface="LayoutManager"/>
            <implements interface="SwingConstants"/>
            <javadoc line="10">
                Implementation of ScrollBarUI for the Basic Look and Feel                
                <author>
                    Rich Schiavi                    
                </author>
                <author>
                    David Kloba                    
                </author>
                <author>
                    Hans Muller                    
                </author>
            </javadoc>
            <declaration name="POSITIVE_SCROLL" type="int" line="17"/>
            <declaration name="NEGATIVE_SCROLL" type="int" line="18"/>
            <declaration name="MIN_SCROLL" type="int" line="19"/>
            <declaration name="MAX_SCROLL" type="int" line="20"/>
            <declaration name="minimumThumbSize" type="Dimension" line="21"/>
            <declaration name="maximumThumbSize" type="Dimension" line="22"/>
            <declaration name="thumbHighlightColor" type="Color" line="23"/>
            <declaration name="thumbLightShadowColor" type="Color" line="24"/>
            <declaration name="thumbDarkShadowColor" type="Color" line="25"/>
            <declaration name="thumbColor" type="Color" line="26"/>
            <declaration name="trackColor" type="Color" line="27"/>
            <declaration name="trackHighlightColor" type="Color" line="28"/>
            <declaration name="scrollbar" type="JScrollBar" line="29"/>
            <declaration name="incrButton" type="JButton" line="30"/>
            <declaration name="decrButton" type="JButton" line="31"/>
            <declaration name="isDragging" type="boolean" line="32"/>
            <declaration name="trackListener" type="TrackListener" line="33"/>
            <declaration name="buttonListener" type="ArrowButtonListener" line="34"/>
            <declaration name="modelListener" type="ModelListener" line="35"/>
            <declaration name="thumbRect" type="Rectangle" line="36"/>
            <declaration name="trackRect" type="Rectangle" line="37"/>
            <declaration name="trackHighlight" type="int" line="38"/>
            <declaration name="NO_HIGHLIGHT" type="int" line="39"/>
            <declaration name="DECREASE_HIGHLIGHT" type="int" line="40"/>
            <declaration name="INCREASE_HIGHLIGHT" type="int" line="41"/>
            <declaration name="scrollListener" type="ScrollListener" line="42"/>
            <declaration name="propertyChangeListener" type="PropertyChangeListener" line="43"/>
            <declaration name="scrollTimer" type="Timer" line="44"/>
            <declaration name="scrollSpeedThrottle" type="int" line="45"/>
            <declaration name="supportsAbsolutePositioning" type="boolean" line="46"/>
            <javadoc line="46">
                True indicates a middle click will absolutely position the
                  scrollbar.                
            </javadoc>
            <declaration name="scrollBarWidth" type="int" line="51"/>
            <javadoc line="51">
                Hint as to what width (when vertical) or height (when horizontal)
                  should be.                
                <since>
                    1.7                    
                </since>
            </javadoc>
            <declaration name="handler" type="Handler" line="57"/>
            <declaration name="thumbActive" type="boolean" line="58"/>
            <declaration name="useCachedValue" type="boolean" line="59"/>
            <javadoc line="59">
                Determine whether scrollbar layout should use cached value or adjusted
                  value returned by scrollbar&apos;s &lt;code&gt;getValue&lt;/code&gt;.                
            </javadoc>
            <declaration name="scrollBarValue" type="int" line="64"/>
            <javadoc line="64">
                The scrollbar value is cached to save real value if the view is adjusted.                
            </javadoc>
            <declaration name="incrGap" type="int" line="68"/>
            <javadoc line="68">
                Distance between the increment button and the track. This may be a negative
                  number. If negative, then an overlap between the button and track will occur,
                  which is useful for shaped buttons.                
                <since>
                    1.7                    
                </since>
            </javadoc>
            <declaration name="decrGap" type="int" line="75"/>
            <javadoc line="75">
                Distance between the decrement button and the track. This may be a negative
                  number. If negative, then an overlap between the button and track will occur,
                  which is useful for shaped buttons.                
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="loadActionMap" type="void" line="82">
                <params>
                    <param name="map" type="LazyActionMap"/>
                </params>
            </method>
            <method name="createUI" type="ComponentUI" line="90">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <method name="configureScrollBarColors" type="void" line="93"/>
            <method name="installUI" type="void" line="102">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <method name="uninstallUI" type="void" line="111">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <method name="installDefaults" type="void" line="122">
                <scope line="124"/>
                <declaration name="absB" type="Boolean" line="129"/>
                <scope line="132"/>
                <declaration name="scaleKey" type="String" line="141"/>
                <scope line="142">
                    <scope line="143"/>
                    <scope line="148"/>
                    <scope line="153"/>
                </scope>
            </method>
            <method name="installComponents" type="void" line="160">
                <scope line="167"/>
                <scope line="171"/>
            </method>
            <method name="uninstallComponents" type="void" line="181"/>
            <method name="installListeners" type="void" line="185">
                <scope line="195"/>
                <scope line="198"/>
            </method>
            <method name="installKeyboardActions" type="void" line="205">
                <declaration name="inputMap" type="InputMap" line="207"/>
            </method>
            <method name="uninstallKeyboardActions" type="void" line="212"/>
            <method name="getInputMap" type="InputMap" line="216">
                <params>
                    <param name="condition" type="int"/>
                </params>
                <scope line="217">
                    <declaration name="keyMap" type="InputMap" line="218"/>
                    <declaration name="rtlKeyMap" type="InputMap" line="219"/>
                    <scope line="220"/>
                    <scope line="223"/>
                </scope>
                <scope line="228">
                    <declaration name="keyMap" type="InputMap" line="229"/>
                    <declaration name="rtlKeyMap" type="InputMap" line="230"/>
                    <scope line="231"/>
                    <scope line="234"/>
                </scope>
            </method>
            <method name="uninstallListeners" type="void" line="241">
                <scope line="244"/>
                <scope line="247"/>
            </method>
            <method name="uninstallDefaults" type="void" line="257">
                <scope line="259"/>
            </method>
            <method name="getHandler" type="Handler" line="263">
                <scope line="264"/>
            </method>
            <method name="createTrackListener" type="TrackListener" line="269"/>
            <method name="createArrowButtonListener" type="ArrowButtonListener" line="272"/>
            <method name="createModelListener" type="ModelListener" line="275"/>
            <method name="createScrollListener" type="ScrollListener" line="278"/>
            <method name="createPropertyChangeListener" type="PropertyChangeListener" line="281"/>
            <method name="updateThumbState" type="void" line="284">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <declaration name="rect" type="Rectangle" line="285"/>
            </method>
            <javadoc line="288">
                Sets whether or not the mouse is currently over the thumb.                
                <param>
                    active True indicates the thumb is currently active.                    
                </param>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="setThumbRollover" type="void" line="293">
                <params>
                    <param name="active" type="boolean"/>
                </params>
                <scope line="294"/>
            </method>
            <javadoc line="299">
                Returns true if the mouse is currently over the thumb.                
                <return>
                    true if the thumb is currently active                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="isThumbRollover" type="boolean" line="304"/>
            <method name="paint" type="void" line="307">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="c" type="JComponent"/>
                </params>
                <declaration name="thumbBounds" type="Rectangle" line="309"/>
                <scope line="310"/>
            </method>
            <javadoc line="314">
                A vertical scrollbar&apos;s preferred width is the maximum of
                  preferred widths of the (non &lt;code&gt;null&lt;/code&gt;)
                  increment/decrement buttons,
                  and the minimum width of the thumb. The preferred height is the
                  sum of the preferred heights of the same parts.  The basis for
                  the preferred size of a horizontal scrollbar is similar.
                  &lt;p&gt;
                  The &lt;code&gt;preferredSize&lt;/code&gt; is only computed once, subsequent
                  calls to this method just return a cached size.                
                <param>
                    c the &lt;code&gt;JScrollBar&lt;/code&gt; that&apos;s delegating this method to us                    
                </param>
                <return>
                    the preferred size of a Basic JScrollBar                    
                </return>
                <see>
                    #getMaximumSize                    
                </see>
                <see>
                    #getMinimumSize                    
                </see>
            </javadoc>
            <method name="getPreferredSize" type="Dimension" line="329">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <javadoc line="332">
                @param c The JScrollBar that&apos;s delegating this method to us.                
                <return>
                    new Dimension(Integer.MAX_VALUE, Integer.MAX_VALUE);                    
                </return>
                <see>
                    #getMinimumSize                    
                </see>
                <see>
                    #getPreferredSize                    
                </see>
            </javadoc>
            <method name="getMaximumSize" type="Dimension" line="338">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <method name="createDecreaseButton" type="JButton" line="341">
                <params>
                    <param name="orientation" type="int"/>
                </params>
            </method>
            <method name="createIncreaseButton" type="JButton" line="344">
                <params>
                    <param name="orientation" type="int"/>
                </params>
            </method>
            <method name="paintDecreaseHighlight" type="void" line="347">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
                <declaration name="insets" type="Insets" line="348"/>
                <declaration name="thumbR" type="Rectangle" line="349"/>
                <scope line="351">
                    <declaration name="x" type="int" line="352"/>
                    <declaration name="y" type="int" line="353"/>
                    <declaration name="w" type="int" line="354"/>
                    <declaration name="h" type="int" line="355"/>
                </scope>
                <scope line="358">
                    <declaration name="x" type="int" line="359"/>
                    <scope line="360"/>
                    <scope line="364"/>
                    <declaration name="y" type="int" line="368"/>
                    <declaration name="h" type="int" line="369"/>
                </scope>
            </method>
            <method name="paintIncreaseHighlight" type="void" line="373">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
                <declaration name="insets" type="Insets" line="374"/>
                <declaration name="thumbR" type="Rectangle" line="375"/>
                <scope line="377">
                    <declaration name="x" type="int" line="378"/>
                    <declaration name="y" type="int" line="379"/>
                    <declaration name="w" type="int" line="380"/>
                    <declaration name="h" type="int" line="381"/>
                </scope>
                <scope line="384">
                    <declaration name="x" type="int" line="385"/>
                    <scope line="386"/>
                    <scope line="390"/>
                    <declaration name="y" type="int" line="394"/>
                    <declaration name="h" type="int" line="395"/>
                </scope>
            </method>
            <method name="paintTrack" type="void" line="399">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="c" type="JComponent"/>
                    <param name="trackBounds" type="Rectangle"/>
                </params>
                <scope line="402"/>
                <scope line="405"/>
            </method>
            <method name="paintThumb" type="void" line="409">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="c" type="JComponent"/>
                    <param name="thumbBounds" type="Rectangle"/>
                </params>
                <scope line="410"/>
                <declaration name="w" type="int" line="413"/>
                <declaration name="h" type="int" line="414"/>
            </method>
            <javadoc line="428">
                Returns the smallest acceptable size for the thumb.  If the scrollbar
                  becomes so small that this size isn&apos;t available, the thumb will be
                  hidden.
                  &lt;p&gt;
                  &lt;b&gt;Warning &lt;/b&gt;: the value returned by this method should not be
                  be modified, it&apos;s a shared static constant.                
                <return>
                    The smallest acceptable size for the thumb.                    
                </return>
                <see>
                    #getMaximumThumbSize                    
                </see>
            </javadoc>
            <method name="getMinimumThumbSize" type="Dimension" line="438"/>
            <javadoc line="441">
                Returns the largest acceptable size for the thumb.  To create a fixed
                  size thumb one make this method and &lt;code&gt;getMinimumThumbSize&lt;/code&gt;
                  return the same value.
                  &lt;p&gt;
                  &lt;b&gt;Warning &lt;/b&gt;: the value returned by this method should not be
                  be modified, it&apos;s a shared static constant.                
                <return>
                    The largest acceptable size for the thumb.                    
                </return>
                <see>
                    #getMinimumThumbSize                    
                </see>
            </javadoc>
            <method name="getMaximumThumbSize" type="Dimension" line="451"/>
            <method name="addLayoutComponent" type="void" line="454">
                <params>
                    <param name="name" type="String"/>
                    <param name="child" type="Component"/>
                </params>
            </method>
            <method name="removeLayoutComponent" type="void" line="456">
                <params>
                    <param name="child" type="Component"/>
                </params>
            </method>
            <method name="preferredLayoutSize" type="Dimension" line="458">
                <params>
                    <param name="scrollbarContainer" type="Container"/>
                </params>
            </method>
            <method name="minimumLayoutSize" type="Dimension" line="461">
                <params>
                    <param name="scrollbarContainer" type="Container"/>
                </params>
            </method>
            <method name="getValue" type="int" line="464">
                <params>
                    <param name="sb" type="JScrollBar"/>
                </params>
            </method>
            <method name="layoutVScrollbar" type="void" line="467">
                <params>
                    <param name="sb" type="JScrollBar"/>
                </params>
                <declaration name="sbSize" type="Dimension" line="468"/>
                <declaration name="sbInsets" type="Insets" line="469"/>
                <declaration name="itemW" type="int" line="470"/>
                <declaration name="itemX" type="int" line="471"/>
                <declaration name="squareButtons" type="boolean" line="472"/>
                <declaration name="decrButtonH" type="int" line="473"/>
                <declaration name="decrButtonY" type="int" line="474"/>
                <declaration name="incrButtonH" type="int" line="475"/>
                <declaration name="incrButtonY" type="int" line="476"/>
                <declaration name="sbInsetsH" type="int" line="477"/>
                <declaration name="sbButtonsH" type="int" line="478"/>
                <declaration name="gaps" type="int" line="479"/>
                <declaration name="trackH" type="float" line="480"/>
                <declaration name="min" type="float" line="481"/>
                <declaration name="extent" type="float" line="482"/>
                <declaration name="range" type="float" line="483"/>
                <declaration name="value" type="float" line="484"/>
                <declaration name="thumbH" type="int" line="485"/>
                <declaration name="thumbY" type="int" line="488"/>
                <scope line="489">
                    <declaration name="thumbRange" type="float" line="490"/>
                </scope>
                <declaration name="sbAvailButtonH" type="int" line="494"/>
                <scope line="495"/>
                <declaration name="itrackY" type="int" line="501"/>
                <declaration name="itrackH" type="int" line="502"/>
                <scope line="504">
                    <scope line="505"/>
                    <scope line="508"/>
                </scope>
                <scope line="512">
                    <scope line="513"/>
                    <scope line="516"/>
                </scope>
            </method>
            <method name="layoutHScrollbar" type="void" line="522">
                <params>
                    <param name="sb" type="JScrollBar"/>
                </params>
                <declaration name="sbSize" type="Dimension" line="523"/>
                <declaration name="sbInsets" type="Insets" line="524"/>
                <declaration name="itemH" type="int" line="525"/>
                <declaration name="itemY" type="int" line="526"/>
                <declaration name="ltr" type="boolean" line="527"/>
                <declaration name="squareButtons" type="boolean" line="528"/>
                <declaration name="leftButtonW" type="int" line="529"/>
                <declaration name="rightButtonW" type="int" line="530"/>
                <scope line="531">
                    <declaration name="temp" type="int" line="532"/>
                </scope>
                <declaration name="leftButtonX" type="int" line="536"/>
                <declaration name="rightButtonX" type="int" line="537"/>
                <declaration name="leftGap" type="int" line="538"/>
                <declaration name="rightGap" type="int" line="539"/>
                <declaration name="sbInsetsW" type="int" line="540"/>
                <declaration name="sbButtonsW" type="int" line="541"/>
                <declaration name="trackW" type="float" line="542"/>
                <declaration name="min" type="float" line="543"/>
                <declaration name="max" type="float" line="544"/>
                <declaration name="extent" type="float" line="545"/>
                <declaration name="range" type="float" line="546"/>
                <declaration name="value" type="float" line="547"/>
                <declaration name="thumbW" type="int" line="548"/>
                <declaration name="thumbX" type="int" line="551"/>
                <scope line="552">
                    <declaration name="thumbRange" type="float" line="553"/>
                    <scope line="554"/>
                    <scope line="557"/>
                </scope>
                <declaration name="sbAvailButtonW" type="int" line="562"/>
                <scope line="563"/>
                <declaration name="itrackX" type="int" line="569"/>
                <declaration name="itrackW" type="int" line="570"/>
                <scope line="572">
                    <scope line="573"/>
                    <scope line="576"/>
                </scope>
                <scope line="580">
                    <scope line="581"/>
                    <scope line="584"/>
                </scope>
            </method>
            <method name="layoutContainer" type="void" line="590">
                <params>
                    <param name="scrollbarContainer" type="Container"/>
                </params>
                <scope line="591"/>
                <declaration name="scrollbar" type="JScrollBar" line="594"/>
            </method>
            <javadoc line="604">
                Set the bounds of the thumb and force a repaint that includes
                  the old thumbBounds and the new one.                
                <see>
                    #getThumbBounds                    
                </see>
            </javadoc>
            <method name="setThumbBounds" type="void" line="609">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <scope line="610"/>
                <declaration name="minX" type="int" line="613"/>
                <declaration name="minY" type="int" line="614"/>
                <declaration name="maxX" type="int" line="615"/>
                <declaration name="maxY" type="int" line="616"/>
            </method>
            <javadoc line="621">
                Return the current size/location of the thumb.
                  &lt;p&gt;
                  &lt;b&gt;Warning &lt;/b&gt;: the value returned by this method should not be
                  be modified, it&apos;s a reference to the actual rectangle, not a copy.                
                <return>
                    The current size/location of the thumb.                    
                </return>
                <see>
                    #setThumbBounds                    
                </see>
            </javadoc>
            <method name="getThumbBounds" type="Rectangle" line="629"/>
            <javadoc line="632">
                Returns the current bounds of the track, i.e. the space in between
                  the increment and decrement buttons, less the insets.  The value
                  returned by this method is updated each time the scrollbar is
                  laid out (validated).
                  &lt;p&gt;
                  &lt;b&gt;Warning &lt;/b&gt;: the value returned by this method should not be
                  be modified, it&apos;s a reference to the actual rectangle, not a copy.                
                <return>
                    the current bounds of the scrollbar track                    
                </return>
                <see>
                    #layoutContainer                    
                </see>
            </javadoc>
            <method name="getTrackBounds" type="Rectangle" line="643"/>
            <method name="scrollByBlock" type="void" line="646">
                <params>
                    <param name="scrollbar" type="JScrollBar"/>
                    <param name="direction" type="int"/>
                </params>
                <declaration name="oldValue" type="int" line="647"/>
                <declaration name="blockIncrement" type="int" line="648"/>
                <declaration name="delta" type="int" line="649"/>
                <declaration name="newValue" type="int" line="650"/>
                <scope line="651"/>
                <scope line="654"/>
            </method>
            <method name="scrollByBlock" type="void" line="659">
                <params>
                    <param name="direction" type="int"/>
                </params>
                <declaration name="dirtyRect" type="Rectangle" line="662"/>
            </method>
            <method name="scrollByUnits" type="void" line="665">
                <params>
                    <param name="scrollbar" type="JScrollBar"/>
                    <param name="direction" type="int"/>
                    <param name="units" type="int"/>
                    <param name="limitToBlock" type="boolean"/>
                </params>
            </method>
            <method name="scrollByUnit" type="void" line="703">
                <params>
                    <param name="direction" type="int"/>
                </params>
            </method>
            <javadoc line="706">
                Indicates whether the user can absolutely position the thumb with
                  a mouse gesture (usually the middle mouse button).                
                <return>
                    true if a mouse gesture can absolutely position the thumb                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getSupportsAbsolutePositioning" type="boolean" line="712"/>
            <class name="ModelListener" line="715">
                <implements interface="ChangeListener"/>
                <javadoc line="715">
                    A listener to listen for model changes.                    
                </javadoc>
                <method name="stateChanged" type="void" line="719">
                    <params>
                        <param name="e" type="ChangeEvent"/>
                    </params>
                    <scope line="720"/>
                </method>
            </class>
            <class name="TrackListener" line="727">
                <extends class="MouseAdapter"/>
                <implements interface="MouseMotionListener"/>
                <javadoc line="727">
                    Track mouse drags.                    
                </javadoc>
                <declaration name="offset" type="int" line="731"/>
                <declaration name="currentMouseX" type="int" line="732"/>
                <declaration name="direction" type="int" line="733"/>
                <method name="mouseReleased" type="void" line="734">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                    <scope line="735"/>
                    <declaration name="r" type="Rectangle" line="740"/>
                </method>
                <javadoc line="749">
                    If the mouse is pressed above the &quot;thumb&quot; component
                      then reduce the scrollbars value by one page (&quot;page up&quot;),
                      otherwise increase it by one page.  If there is no
                      thumb then page up if the mouse is in the upper half
                      of the track.                    
                </javadoc>
                <method name="mousePressed" type="void" line="756">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                    <scope line="759"/>
                    <scope line="766"/>
                    <scope line="778"/>
                    <declaration name="sbSize" type="Dimension" line="792"/>
                    <scope line="796">
                        <declaration name="scrollbarCenter" type="int" line="797"/>
                    </scope>
                    <scope line="800">
                        <declaration name="thumbY" type="int" line="801"/>
                    </scope>
                    <scope line="806">
                        <declaration name="scrollbarCenter" type="int" line="807"/>
                    </scope>
                    <scope line="810">
                        <declaration name="thumbX" type="int" line="811"/>
                    </scope>
                    <scope line="814"/>
                </method>
                <javadoc line="825">
                    Set the models value to the position of the thumb&apos;s top of Vertical
                      scrollbar, or the left/right of Horizontal scrollbar in
                      left-to-right/right-to-left scrollbar relative to the origin of the
                      track.                    
                </javadoc>
                <method name="mouseDragged" type="void" line="831">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                    <scope line="833"/>
                    <scope line="836"/>
                    <scope line="839"/>
                </method>
                <method name="setValueFrom" type="void" line="846">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                    <declaration name="active" type="boolean" line="847"/>
                    <declaration name="model" type="BoundedRangeModel" line="848"/>
                    <declaration name="thumbR" type="Rectangle" line="849"/>
                    <declaration name="trackLength" type="float" line="850"/>
                    <declaration name="thumbMin" type="int" line="851"/>
                    <scope line="852"/>
                    <scope line="859"/>
                    <scope line="866">
                        <scope line="867"/>
                        <scope line="870"/>
                    </scope>
                    <scope line="874">
                        <declaration name="valueMax" type="float" line="875"/>
                        <declaration name="valueRange" type="float" line="876"/>
                        <declaration name="thumbValue" type="float" line="877"/>
                        <declaration name="thumbRange" type="float" line="878"/>
                        <declaration name="value" type="int" line="879"/>
                        <scope line="880"/>
                        <scope line="883"/>
                    </scope>
                </method>
                <method name="adjustValueIfNecessary" type="int" line="892">
                    <params>
                        <param name="value" type="int"/>
                    </params>
                    <scope line="893">
                        <declaration name="scrollpane" type="JScrollPane" line="894"/>
                        <declaration name="viewport" type="JViewport" line="895"/>
                        <declaration name="view" type="Component" line="896"/>
                        <scope line="897">
                            <declaration name="list" type="JList" line="898"/>
                            <scope line="899">
                                <declaration name="adjustedValue" type="int" line="900"/>
                                <declaration name="mode" type="int" line="901"/>
                                <declaration name="orientation" type="int" line="902"/>
                                <scope line="903">
                                    <declaration name="index" type="int" line="904"/>
                                    <declaration name="rect" type="Rectangle" line="905"/>
                                    <scope line="906"/>
                                </scope>
                                <scope line="910">
                                    <scope line="911">
                                        <declaration name="index" type="int" line="912"/>
                                        <declaration name="rect" type="Rectangle" line="913"/>
                                        <scope line="914"/>
                                    </scope>
                                    <scope line="918">
                                        <declaration name="loc" type="Point" line="919"/>
                                        <declaration name="extent" type="int" line="920"/>
                                        <declaration name="index" type="int" line="922"/>
                                        <declaration name="rect" type="Rectangle" line="923"/>
                                        <scope line="924"/>
                                    </scope>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </method>
                <method name="startScrollTimerIfNecessary" type="void" line="935">
                    <scope line="936"/>
                    <declaration name="tb" type="Rectangle" line="939"/>
                    <scope line="942">
                        <scope line="943"/>
                    </scope>
                    <scope line="947"/>
                    <scope line="952"/>
                </method>
                <method name="mouseMoved" type="void" line="958">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                    <scope line="959"/>
                </method>
                <javadoc line="963">
                    Invoked when the mouse exits the scrollbar.                    
                    <param>
                        e MouseEvent further describing the event                        
                    </param>
                    <since>
                        1.5                        
                    </since>
                </javadoc>
                <method name="mouseExited" type="void" line="968">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                    <scope line="969"/>
                </method>
            </class>
            <class name="ArrowButtonListener" line="974">
                <extends class="MouseAdapter"/>
                <javadoc line="974">
                    Listener for cursor keys.                    
                </javadoc>
                <declaration name="handledEvent" type="boolean" line="978"/>
                <method name="mousePressed" type="void" line="979">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                    <scope line="980"/>
                    <scope line="983"/>
                    <declaration name="direction" type="int" line="986"/>
                    <scope line="993"/>
                </method>
                <method name="mouseReleased" type="void" line="997">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
            </class>
            <class name="ScrollListener" line="1003">
                <implements interface="ActionListener"/>
                <javadoc line="1003">
                    Listener for scrolling events initiated in the
                      &lt;code&gt;ScrollPane&lt;/code&gt;.                    
                </javadoc>
                <declaration name="direction" type="int" line="1008"/>
                <declaration name="useBlockIncrement" type="boolean" line="1009"/>
                <method name="ScrollListener" type="constructor" line="1010"/>
                <method name="ScrollListener" type="constructor" line="1014">
                    <params>
                        <param name="dir" type="int"/>
                        <param name="block" type="boolean"/>
                    </params>
                </method>
                <method name="setDirection" type="void" line="1018">
                    <params>
                        <param name="direction" type="int"/>
                    </params>
                </method>
                <method name="setScrollByBlock" type="void" line="1021">
                    <params>
                        <param name="block" type="boolean"/>
                    </params>
                </method>
                <method name="actionPerformed" type="void" line="1024">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                    <scope line="1025">
                        <scope line="1027">
                            <scope line="1028"/>
                            <scope line="1031"/>
                        </scope>
                        <scope line="1035">
                            <scope line="1036"/>
                        </scope>
                    </scope>
                    <scope line="1041"/>
                </method>
            </class>
            <method name="isMouseLeftOfThumb" type="boolean" line="1048"/>
            <method name="isMouseRightOfThumb" type="boolean" line="1051">
                <declaration name="tb" type="Rectangle" line="1052"/>
            </method>
            <method name="isMouseBeforeThumb" type="boolean" line="1055"/>
            <method name="isMouseAfterThumb" type="boolean" line="1058"/>
            <method name="updateButtonDirections" type="void" line="1061">
                <declaration name="orient" type="int" line="1062"/>
                <scope line="1063">
                    <scope line="1064"/>
                    <scope line="1067"/>
                </scope>
                <scope line="1071">
                    <scope line="1072"/>
                    <scope line="1075"/>
                </scope>
            </method>
            <class name="PropertyChangeHandler" line="1080">
                <implements interface="PropertyChangeListener"/>
                <method name="propertyChange" type="void" line="1081">
                    <params>
                        <param name="e" type="PropertyChangeEvent"/>
                    </params>
                </method>
            </class>
            <class name="Actions" line="1085">
                <extends class="UIAction"/>
                <javadoc line="1085">
                    Used for scrolling the scrollbar.                    
                </javadoc>
                <declaration name="POSITIVE_UNIT_INCREMENT" type="String" line="1089"/>
                <declaration name="POSITIVE_BLOCK_INCREMENT" type="String" line="1090"/>
                <declaration name="NEGATIVE_UNIT_INCREMENT" type="String" line="1091"/>
                <declaration name="NEGATIVE_BLOCK_INCREMENT" type="String" line="1092"/>
                <declaration name="MIN_SCROLL" type="String" line="1093"/>
                <declaration name="MAX_SCROLL" type="String" line="1094"/>
                <method name="Actions" type="constructor" line="1095">
                    <params>
                        <param name="name" type="String"/>
                    </params>
                </method>
                <method name="actionPerformed" type="void" line="1098">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                    <declaration name="scrollBar" type="JScrollBar" line="1099"/>
                    <declaration name="key" type="String" line="1100"/>
                    <scope line="1101"/>
                    <scope line="1104"/>
                    <scope line="1107"/>
                    <scope line="1110"/>
                    <scope line="1113"/>
                    <scope line="1116"/>
                </method>
                <method name="scroll" type="void" line="1120">
                    <params>
                        <param name="scrollBar" type="JScrollBar"/>
                        <param name="dir" type="int"/>
                        <param name="block" type="boolean"/>
                    </params>
                    <scope line="1121">
                        <declaration name="amount" type="int" line="1122"/>
                        <scope line="1123">
                            <scope line="1124"/>
                            <scope line="1127"/>
                        </scope>
                        <scope line="1131">
                            <scope line="1132"/>
                            <scope line="1135"/>
                        </scope>
                    </scope>
                    <scope line="1141"/>
                    <scope line="1144"/>
                </method>
            </class>
            <class name="Handler" line="1149">
                <implements interface="FocusListener"/>
                <implements interface="PropertyChangeListener"/>
                <method name="focusGained" type="void" line="1150">
                    <params>
                        <param name="e" type="FocusEvent"/>
                    </params>
                </method>
                <method name="focusLost" type="void" line="1153">
                    <params>
                        <param name="e" type="FocusEvent"/>
                    </params>
                </method>
                <method name="propertyChange" type="void" line="1156">
                    <params>
                        <param name="e" type="PropertyChangeEvent"/>
                    </params>
                    <declaration name="propertyName" type="String" line="1157"/>
                    <scope line="1158">
                        <declaration name="oldModel" type="BoundedRangeModel" line="1159"/>
                        <declaration name="newModel" type="BoundedRangeModel" line="1160"/>
                    </scope>
                    <scope line="1167"/>
                    <scope line="1170">
                        <declaration name="inputMap" type="InputMap" line="1172"/>
                    </scope>
                </method>
            </class>
        </class>
    </source>