<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.plaf.multi">
        <import package="java.util.Vector"/>
        <import package="javax.swing.plaf.ViewportUI"/>
        <import package="javax.swing.plaf.ComponentUI"/>
        <import package="javax.swing.JComponent"/>
        <import package="java.awt.Graphics"/>
        <import package="java.awt.Dimension"/>
        <import package="javax.accessibility.Accessible"/>
        <class name="MultiViewportUI" line="9">
            <extends class="ViewportUI"/>
            <javadoc line="9">
                A multiplexing UI used to combine &lt;code&gt;ViewportUI&lt;/code&gt;s.
                  &lt;p&gt;This file was automatically generated by AutoMulti.                
                <author>
                    Otto Multey                    
                </author>
            </javadoc>
            <declaration name="uis" type="Vector" line="15"/>
            <javadoc line="15">
                The vector containing the real UIs.  This is populated
                  in the call to &lt;code&gt;createUI&lt;/code&gt;, and can be obtained by calling
                  the &lt;code&gt;getUIs&lt;/code&gt; method.  The first element is guaranteed to be the real UI
                  obtained from the default look and feel.                
            </javadoc>
            <javadoc line="22">
                Returns the list of UIs associated with this multiplexing UI.  This
                  allows processing of the UIs by an application aware of multiplexing
                  UIs on components.                
            </javadoc>
            <method name="getUIs" type="ComponentUI[]" line="27"/>
            <javadoc line="30">
                Invokes the &lt;code&gt;contains&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default &lt;code&gt;LookAndFeel&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="contains" type="boolean" line="35">
                <params>
                    <param name="a" type="JComponent"/>
                    <param name="b" type="int"/>
                    <param name="c" type="int"/>
                </params>
                <declaration name="returnValue" type="boolean" line="36"/>
                <scope line="37"/>
            </method>
            <javadoc line="42">
                Invokes the &lt;code&gt;update&lt;/code&gt; method on each UI handled by this object.                
            </javadoc>
            <method name="update" type="void" line="45">
                <params>
                    <param name="a" type="Graphics"/>
                    <param name="b" type="JComponent"/>
                </params>
                <scope line="46"/>
            </method>
            <javadoc line="50">
                Returns a multiplexing UI instance if any of the auxiliary
                  &lt;code&gt;LookAndFeel&lt;/code&gt;s supports this UI.  Otherwise, just returns the
                  UI object obtained from the default &lt;code&gt;LookAndFeel&lt;/code&gt;.                
            </javadoc>
            <method name="createUI" type="ComponentUI" line="55">
                <params>
                    <param name="a" type="JComponent"/>
                </params>
                <declaration name="mui" type="ComponentUI" line="56"/>
            </method>
            <javadoc line="59">
                Invokes the &lt;code&gt;installUI&lt;/code&gt; method on each UI handled by this object.                
            </javadoc>
            <method name="installUI" type="void" line="62">
                <params>
                    <param name="a" type="JComponent"/>
                </params>
                <scope line="63"/>
            </method>
            <javadoc line="67">
                Invokes the &lt;code&gt;uninstallUI&lt;/code&gt; method on each UI handled by this object.                
            </javadoc>
            <method name="uninstallUI" type="void" line="70">
                <params>
                    <param name="a" type="JComponent"/>
                </params>
                <scope line="71"/>
            </method>
            <javadoc line="75">
                Invokes the &lt;code&gt;paint&lt;/code&gt; method on each UI handled by this object.                
            </javadoc>
            <method name="paint" type="void" line="78">
                <params>
                    <param name="a" type="Graphics"/>
                    <param name="b" type="JComponent"/>
                </params>
                <scope line="79"/>
            </method>
            <javadoc line="83">
                Invokes the &lt;code&gt;getPreferredSize&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default &lt;code&gt;LookAndFeel&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="getPreferredSize" type="Dimension" line="88">
                <params>
                    <param name="a" type="JComponent"/>
                </params>
                <declaration name="returnValue" type="Dimension" line="89"/>
                <scope line="90"/>
            </method>
            <javadoc line="95">
                Invokes the &lt;code&gt;getMinimumSize&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default &lt;code&gt;LookAndFeel&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="getMinimumSize" type="Dimension" line="100">
                <params>
                    <param name="a" type="JComponent"/>
                </params>
                <declaration name="returnValue" type="Dimension" line="101"/>
                <scope line="102"/>
            </method>
            <javadoc line="107">
                Invokes the &lt;code&gt;getMaximumSize&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default &lt;code&gt;LookAndFeel&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="getMaximumSize" type="Dimension" line="112">
                <params>
                    <param name="a" type="JComponent"/>
                </params>
                <declaration name="returnValue" type="Dimension" line="113"/>
                <scope line="114"/>
            </method>
            <javadoc line="119">
                Invokes the &lt;code&gt;getAccessibleChildrenCount&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default &lt;code&gt;LookAndFeel&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="getAccessibleChildrenCount" type="int" line="124">
                <params>
                    <param name="a" type="JComponent"/>
                </params>
                <declaration name="returnValue" type="int" line="125"/>
                <scope line="126"/>
            </method>
            <javadoc line="131">
                Invokes the &lt;code&gt;getAccessibleChild&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default &lt;code&gt;LookAndFeel&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="getAccessibleChild" type="Accessible" line="136">
                <params>
                    <param name="a" type="JComponent"/>
                    <param name="b" type="int"/>
                </params>
                <declaration name="returnValue" type="Accessible" line="137"/>
                <scope line="138"/>
            </method>
        </class>
    </source>