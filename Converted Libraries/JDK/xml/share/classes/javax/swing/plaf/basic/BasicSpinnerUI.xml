<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.plaf.basic">
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="java.text.ParseException"/>
        <import package="javax.swing"/>
        <import package="javax.swing.border"/>
        <import package="javax.swing.event"/>
        <import package="javax.swing.plaf"/>
        <import package="javax.swing.text"/>
        <import package="java.beans"/>
        <import package="java.text"/>
        <import package="java.util"/>
        <import package="sun.swing.DefaultLookup"/>
        <class name="BasicSpinnerUI" line="44">
            <extends class="SpinnerUI"/>
            <javadoc line="44">
                The default Spinner UI delegate.                
                <author>
                    Hans Muller                    
                </author>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="spinner" type="JSpinner" line="52"/>
            <javadoc line="52">
                The spinner that we&apos;re a UI delegate for.  Initialized by
                  the &lt;code&gt;installUI&lt;/code&gt; method, and reset to null
                  by &lt;code&gt;uninstallUI&lt;/code&gt;.                
                <see>
                    #installUI                    
                </see>
                <see>
                    #uninstallUI                    
                </see>
            </javadoc>
            <declaration name="handler" type="Handler" line="61"/>
            <declaration name="nextButtonHandler" type="ArrowButtonHandler" line="64"/>
            <javadoc line="64">
                The mouse/action listeners that are added to the spinner&apos;s
                  arrow buttons.  These listeners are shared by all
                  spinner arrow buttons.                
                <see>
                    #createNextButton                    
                </see>
                <see>
                    #createPreviousButton                    
                </see>
            </javadoc>
            <declaration name="previousButtonHandler" type="ArrowButtonHandler" line="73"/>
            <declaration name="propertyChangeListener" type="PropertyChangeListener" line="74"/>
            <declaration name="zeroSize" type="Dimension" line="77"/>
            <javadoc line="77">
                Used by the default LayoutManager class - SpinnerLayout for
                  missing (null) editor/nextButton/previousButton children.                
            </javadoc>
            <javadoc line="84">
                Returns a new instance of BasicSpinnerUI.  SpinnerListUI
                  delegates are allocated one per JSpinner.                
                <param>
                    c the JSpinner (not used)                    
                </param>
                <see>
                    ComponentUI#createUI                    
                </see>
                <return>
                    a new BasicSpinnerUI object                    
                </return>
            </javadoc>
            <method name="createUI" type="ComponentUI" line="92">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <method name="maybeAdd" type="void" line="97">
                <params>
                    <param name="c" type="Component"/>
                    <param name="s" type="String"/>
                </params>
                <scope line="98"/>
            </method>
            <javadoc line="104">
                Calls &lt;code&gt;installDefaults&lt;/code&gt;, &lt;code&gt;installListeners&lt;/code&gt;,
                  and then adds the components returned by &lt;code&gt;createNextButton&lt;/code&gt;,
                  &lt;code&gt;createPreviousButton&lt;/code&gt;, and &lt;code&gt;createEditor&lt;/code&gt;.                
                <param>
                    c the JSpinner                    
                </param>
                <see>
                    #installDefaults                    
                </see>
                <see>
                    #installListeners                    
                </see>
                <see>
                    #createNextButton                    
                </see>
                <see>
                    #createPreviousButton                    
                </see>
                <see>
                    #createEditor                    
                </see>
            </javadoc>
            <method name="installUI" type="void" line="116">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <javadoc line="128">
                Calls &lt;code&gt;uninstallDefaults&lt;/code&gt;, &lt;code&gt;uninstallListeners&lt;/code&gt;,
                  and then removes all of the spinners children.                
                <param>
                    c the JSpinner (not used)                    
                </param>
            </javadoc>
            <method name="uninstallUI" type="void" line="134">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <javadoc line="142">
                Initializes &lt;code&gt;PropertyChangeListener&lt;/code&gt; with
                  a shared object that delegates interesting PropertyChangeEvents
                  to protected methods.
                  &lt;p&gt;
                  This method is called by &lt;code&gt;installUI&lt;/code&gt;.                
                <see>
                    #replaceEditor                    
                </see>
                <see>
                    #uninstallListeners                    
                </see>
            </javadoc>
            <method name="installListeners" type="void" line="152">
                <scope line="156"/>
                <declaration name="editor" type="JComponent" line="159"/>
                <scope line="160">
                    <declaration name="tf" type="JTextField" line="161"/>
                    <scope line="162"/>
                </scope>
            </method>
            <javadoc line="170">
                Removes the &lt;code&gt;PropertyChangeListener&lt;/code&gt; added
                  by installListeners.
                  &lt;p&gt;
                  This method is called by &lt;code&gt;uninstallUI&lt;/code&gt;.                
                <see>
                    #installListeners                    
                </see>
            </javadoc>
            <method name="uninstallListeners" type="void" line="178">
                <declaration name="editor" type="JComponent" line="181"/>
                <scope line="183">
                    <declaration name="tf" type="JTextField" line="184"/>
                    <scope line="185"/>
                </scope>
            </method>
            <javadoc line="195">
                Initialize the &lt;code&gt;JSpinner&lt;/code&gt; &lt;code&gt;border&lt;/code&gt;,
                  &lt;code&gt;foreground&lt;/code&gt;, and &lt;code&gt;background&lt;/code&gt;, properties
                  based on the corresponding &quot;Spinner.&quot; properties from defaults table.
                  The &lt;code&gt;JSpinners&lt;/code&gt; layout is set to the value returned by
                  &lt;code&gt;createLayout&lt;/code&gt;.  This method is called by &lt;code&gt;installUI&lt;/code&gt;.                
                <see>
                    #uninstallDefaults                    
                </see>
                <see>
                    #installUI                    
                </see>
                <see>
                    #createLayout                    
                </see>
                <see>
                    LookAndFeel#installBorder                    
                </see>
                <see>
                    LookAndFeel#installColors                    
                </see>
            </javadoc>
            <method name="installDefaults" type="void" line="208"/>
            <javadoc line="216">
                Sets the &lt;code&gt;JSpinner&apos;s&lt;/code&gt; layout manager to null.  This
                  method is called by &lt;code&gt;uninstallUI&lt;/code&gt;.                
                <see>
                    #installDefaults                    
                </see>
                <see>
                    #uninstallUI                    
                </see>
            </javadoc>
            <method name="uninstallDefaults" type="void" line="223"/>
            <method name="getHandler" type="Handler" line="228">
                <scope line="229"/>
            </method>
            <javadoc line="236">
                Installs the necessary listeners on the next button, &lt;code&gt;c&lt;/code&gt;,
                  to update the &lt;code&gt;JSpinner&lt;/code&gt; in response to a user gesture.                
                <param>
                    c Component to install the listeners on                    
                </param>
                <throws>
                    NullPointerException if <code>c</code> is null.                    
                </throws>
                <see>
                    #createNextButton                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="installNextButtonListeners" type="void" line="245">
                <params>
                    <param name="c" type="Component"/>
                </params>
            </method>
            <javadoc line="249">
                Installs the necessary listeners on the previous button, &lt;code&gt;c&lt;/code&gt;,
                  to update the &lt;code&gt;JSpinner&lt;/code&gt; in response to a user gesture.                
                <param>
                    c Component to install the listeners on.                    
                </param>
                <throws>
                    NullPointerException if <code>c</code> is null.                    
                </throws>
                <see>
                    #createPreviousButton                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="installPreviousButtonListeners" type="void" line="258">
                <params>
                    <param name="c" type="Component"/>
                </params>
            </method>
            <method name="installButtonListeners" type="void" line="263">
                <params>
                    <param name="c" type="Component"/>
                    <param name="handler" type="ArrowButtonHandler"/>
                </params>
                <scope line="264"/>
            </method>
            <javadoc line="270">
                Creates a &lt;code&gt;LayoutManager&lt;/code&gt; that manages the &lt;code&gt;editor&lt;/code&gt;,
                  &lt;code&gt;nextButton&lt;/code&gt;, and &lt;code&gt;previousButton&lt;/code&gt;
                  children of the JSpinner.  These three children must be
                  added with a constraint that identifies their role:
                  &quot;Editor&quot;, &quot;Next&quot;, and &quot;Previous&quot;. The default layout manager
                  can handle the absence of any of these children.                
                <return>
                    a LayoutManager for the editor, next button, and previous button.                    
                </return>
                <see>
                    #createNextButton                    
                </see>
                <see>
                    #createPreviousButton                    
                </see>
                <see>
                    #createEditor                    
                </see>
            </javadoc>
            <method name="createLayout" type="LayoutManager" line="283"/>
            <javadoc line="288">
                Creates a &lt;code&gt;PropertyChangeListener&lt;/code&gt; that can be
                  added to the JSpinner itself.  Typically, this listener
                  will call replaceEditor when the &quot;editor&quot; property changes,
                  since it&apos;s the &lt;code&gt;SpinnerUI&apos;s&lt;/code&gt; responsibility to
                  add the editor to the JSpinner (and remove the old one).
                  This method is called by &lt;code&gt;installListeners&lt;/code&gt;.                
                <return>
                    A PropertyChangeListener for the JSpinner itself                    
                </return>
                <see>
                    #installListeners                    
                </see>
            </javadoc>
            <method name="createPropertyChangeListener" type="PropertyChangeListener" line="299"/>
            <javadoc line="304">
                Creates a decrement button, i.e. component that replaces the spinner
                  value with the object returned by &lt;code&gt;spinner.getPreviousValue&lt;/code&gt;.
                  By default the &lt;code&gt;previousButton&lt;/code&gt; is a {@code JButton}. If the
                  decrement button is not needed this method should return {@code null}.                
                <return>
                    a component that will replace the spinner's value with the
                      previous value in the sequence, or {@code null}                    
                </return>
                <see>
                    #installUI                    
                </see>
                <see>
                    #createNextButton                    
                </see>
                <see>
                    #installPreviousButtonListeners                    
                </see>
            </javadoc>
            <method name="createPreviousButton" type="Component" line="316">
                <declaration name="c" type="Component" line="317"/>
            </method>
            <javadoc line="324">
                Creates an increment button, i.e. component that replaces the spinner
                  value with the object returned by &lt;code&gt;spinner.getNextValue&lt;/code&gt;.
                  By default the &lt;code&gt;nextButton&lt;/code&gt; is a {@code JButton}. If the
                  increment button is not needed this method should return {@code null}.                
                <return>
                    a component that will replace the spinner's value with the
                      next value in the sequence, or {@code null}                    
                </return>
                <see>
                    #installUI                    
                </see>
                <see>
                    #createPreviousButton                    
                </see>
                <see>
                    #installNextButtonListeners                    
                </see>
            </javadoc>
            <method name="createNextButton" type="Component" line="336">
                <declaration name="c" type="Component" line="337"/>
            </method>
            <method name="createArrowButton" type="Component" line="343">
                <params>
                    <param name="direction" type="int"/>
                </params>
                <comment line="347">
                    Wrap the border to avoid having the UIResource be replaced by                    
                </comment>
                <comment line="348">
                    the ButtonUI. This is the opposite of using BorderUIResource.                    
                </comment>
                <declaration name="b" type="JButton" line="344"/>
                <declaration name="buttonBorder" type="Border" line="345"/>
                <scope line="346"/>
                <scope line="350"/>
            </method>
            <javadoc line="358">
                This method is called by installUI to get the editor component
                  of the &lt;code&gt;JSpinner&lt;/code&gt;.  By default it just returns
                  &lt;code&gt;JSpinner.getEditor()&lt;/code&gt;.  Subclasses can override
                  &lt;code&gt;createEditor&lt;/code&gt; to return a component that contains
                  the spinner&apos;s editor or null, if they&apos;re going to handle adding
                  the editor to the &lt;code&gt;JSpinner&lt;/code&gt; in an
                  &lt;code&gt;installUI&lt;/code&gt; override.
                  &lt;p&gt;
                  Typically this method would be overridden to wrap the editor
                  with a container with a custom border, since one can&apos;t assume
                  that the editors border can be set directly.
                  &lt;p&gt;
                  The &lt;code&gt;replaceEditor&lt;/code&gt; method is called when the spinners
                  editor is changed with &lt;code&gt;JSpinner.setEditor&lt;/code&gt;.  If you&apos;ve
                  overriden this method, then you&apos;ll probably want to override
                  &lt;code&gt;replaceEditor&lt;/code&gt; as well.                
                <return>
                    the JSpinners editor JComponent, spinner.getEditor() by default                    
                </return>
                <see>
                    #installUI                    
                </see>
                <see>
                    #replaceEditor                    
                </see>
                <see>
                    JSpinner#getEditor                    
                </see>
            </javadoc>
            <method name="createEditor" type="JComponent" line="381">
                <declaration name="editor" type="JComponent" line="382"/>
            </method>
            <javadoc line="391">
                Called by the &lt;code&gt;PropertyChangeListener&lt;/code&gt; when the
                  &lt;code&gt;JSpinner&lt;/code&gt; editor property changes.  It&apos;s the responsibility
                  of this method to remove the old editor and add the new one.  By
                  default this operation is just:
                  &lt;pre&gt;
                  spinner.remove(oldEditor);
                  spinner.add(newEditor, &quot;Editor&quot;);
                  &lt;/pre&gt;
                  The implementation of &lt;code&gt;replaceEditor&lt;/code&gt; should be coordinated
                  with the &lt;code&gt;createEditor&lt;/code&gt; method.                
                <see>
                    #createEditor                    
                </see>
                <see>
                    #createPropertyChangeListener                    
                </see>
            </javadoc>
            <method name="replaceEditor" type="void" line="406">
                <params>
                    <param name="oldEditor" type="JComponent"/>
                    <param name="newEditor" type="JComponent"/>
                </params>
            </method>
            <method name="updateEditorAlignment" type="void" line="414">
                <params>
                    <param name="editor" type="JComponent"/>
                </params>
                <comment line="416">
                    if editor alignment isn&apos;t set in LAF, we get 0 (CENTER) here                    
                </comment>
                <scope line="415">
                    <declaration name="alignment" type="int" line="417"/>
                    <declaration name="text" type="JTextField" line="418"/>
                </scope>
            </method>
            <javadoc line="423">
                Remove the border around the inner editor component for LaFs
                  that install an outside border around the spinner,                
            </javadoc>
            <method name="maybeRemoveEditorBorder" type="void" line="427">
                <params>
                    <param name="editor" type="JComponent"/>
                </params>
                <scope line="428">
                    <scope line="431"/>
                    <scope line="436"/>
                </scope>
            </method>
            <javadoc line="442">
                Remove the border around the inner editor component for LaFs
                  that install an outside border around the spinner,                
            </javadoc>
            <method name="installEditorBorderListener" type="void" line="446">
                <params>
                    <param name="editor" type="JComponent"/>
                </params>
                <scope line="447">
                    <scope line="450"/>
                    <scope line="456"/>
                </scope>
            </method>
            <method name="removeEditorBorderListener" type="void" line="462">
                <params>
                    <param name="editor" type="JComponent"/>
                </params>
                <scope line="463">
                    <scope line="465"/>
                    <scope line="469"/>
                </scope>
            </method>
            <javadoc line="476">
                Updates the enabled state of the children Components based on the
                  enabled state of the &lt;code&gt;JSpinner&lt;/code&gt;.                
            </javadoc>
            <method name="updateEnabledState" type="void" line="480"/>
            <javadoc line="485">
                Recursively updates the enabled state of the child
                  &lt;code&gt;Component&lt;/code&gt;s of &lt;code&gt;c&lt;/code&gt;.                
            </javadoc>
            <method name="updateEnabledState" type="void" line="489">
                <params>
                    <param name="c" type="Container"/>
                    <param name="enabled" type="boolean"/>
                </params>
                <scope line="490">
                    <declaration name="child" type="Component" line="491"/>
                    <scope line="494">
                        <declaration name="model" type="SpinnerModel" line="495"/>
                        <scope line="497"/>
                        <scope line="501"/>
                        <scope line="504"/>
                    </scope>
                    <scope line="508"/>
                    <scope line="511"/>
                </scope>
            </method>
            <javadoc line="518">
                Installs the keyboard Actions onto the JSpinner.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="installKeyboardActions" type="void" line="523">
                <declaration name="iMap" type="InputMap" line="524"/>
            </method>
            <javadoc line="535">
                Returns the InputMap to install for &lt;code&gt;condition&lt;/code&gt;.                
            </javadoc>
            <method name="getInputMap" type="InputMap" line="538">
                <params>
                    <param name="condition" type="int"/>
                </params>
                <scope line="539"/>
            </method>
            <method name="loadActionMap" type="void" line="546">
                <params>
                    <param name="map" type="LazyActionMap"/>
                </params>
            </method>
            <javadoc line="551">
                Returns the baseline.                
                <throws>
                    NullPointerException {@inheritDoc}                    
                </throws>
                <throws>
                    IllegalArgumentException {@inheritDoc}                    
                </throws>
                <see>
                    javax.swing.JComponent#getBaseline(int,int)                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getBaseline" type="int" line="559">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <declaration name="editor" type="JComponent" line="561"/>
                <declaration name="insets" type="Insets" line="562"/>
                <scope line="565">
                    <declaration name="baseline" type="int" line="566"/>
                    <scope line="567"/>
                </scope>
            </method>
            <javadoc line="574">
                Returns an enum indicating how the baseline of the component
                  changes as the size changes.                
                <throws>
                    NullPointerException {@inheritDoc}                    
                </throws>
                <see>
                    javax.swing.JComponent#getBaseline(int,int)                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getBaselineResizeBehavior" type="Component.BaselineResizeBehavior" line="583">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <class name="ArrowButtonHandler" line="588">
                <extends class="AbstractAction"/>
                <comment line="845">
                                        
                </comment>
                <comment line="846">
                    LayoutManager                    
                </comment>
                <comment line="847">
                                        
                </comment>
                <comment line="959">
                                        
                </comment>
                <comment line="960">
                    PropertyChangeListener                    
                </comment>
                <comment line="961">
                                        
                </comment>
                <comment line="1033">
                    Syncronizes the ToolTip text for the components within the spinner                    
                </comment>
                <comment line="1034">
                    to be the same value as the spinner ToolTip text.                    
                </comment>
                <implements interface="FocusListener"/>
                <implements interface="MouseListener"/>
                <implements interface="UIResource"/>
                <javadoc line="588">
                    A handler for spinner arrow button mouse and action events.  When
                      a left mouse pressed event occurs we look up the (enabled) spinner
                      that&apos;s the source of the event and start the autorepeat timer.  The
                      timer fires action events until any button is released at which
                      point the timer is stopped and the reference to the spinner cleared.
                      The timer doesn&apos;t start until after a 300ms delay, so often the
                      source of the initial (and final) action event is just the button
                      logic for mouse released - which means that we&apos;re relying on the fact
                      that our mouse listener runs after the buttons mouse listener.
                      &lt;p&gt;
                      Note that one instance of this handler is shared by all slider previous
                      arrow buttons and likewise for all of the next buttons,
                      so it doesn&apos;t have any state that persists beyond the limits
                      of a single button pressed/released gesture.                    
                </javadoc>
                <declaration name="autoRepeatTimer" type="javax.swing.Timer" line="606"/>
                <declaration name="isNext" type="boolean" line="607"/>
                <declaration name="spinner" type="JSpinner" line="608"/>
                <declaration name="arrowButton" type="JButton" line="609"/>
                <method name="ArrowButtonHandler" type="constructor" line="611">
                    <params>
                        <param name="name" type="String"/>
                        <param name="isNext" type="boolean"/>
                    </params>
                </method>
                <method name="eventToSpinner" type="JSpinner" line="618">
                    <params>
                        <param name="e" type="AWTEvent"/>
                    </params>
                    <declaration name="src" type="Object" line="619"/>
                    <scope line="620"/>
                </method>
                <method name="actionPerformed" type="void" line="626">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                    <comment line="630">
                        Most likely resulting from being in ActionMap.                        
                    </comment>
                    <declaration name="spinner" type="JSpinner" line="627"/>
                    <scope line="629">
                        <scope line="632"/>
                    </scope>
                    <scope line="635">
                        <scope line="637"/>
                    </scope>
                    <scope line="643">
                        <scope line="644">
                            <declaration name="calendarField" type="int" line="645"/>
                            <scope line="647"/>
                            <declaration name="value" type="Object" line="651"/>
                            <scope line="653"/>
                        </scope>
                        <scope line="657"/>
                        <scope line="659"/>
                    </scope>
                </method>
                <javadoc line="665">
                    If the spinner&apos;s editor is a DateEditor, this selects the field
                      associated with the value that is being incremented.                    
                </javadoc>
                <method name="select" type="void" line="669">
                    <params>
                        <param name="spinner" type="JSpinner"/>
                    </params>
                    <declaration name="editor" type="JComponent" line="670"/>
                    <scope line="672">
                        <declaration name="dateEditor" type="JSpinner.DateEditor" line="673"/>
                        <declaration name="ftf" type="JFormattedTextField" line="674"/>
                        <declaration name="format" type="Format" line="675"/>
                        <declaration name="value" type="Object" line="676"/>
                        <scope line="678">
                            <declaration name="model" type="SpinnerDateModel" line="679"/>
                            <declaration name="field" type="DateFormat.Field" line="680"/>
                            <scope line="683">
                                <scope line="684">
                                    <declaration name="iterator" type="AttributedCharacterIterator" line="685"/>
                                    <scope line="688"/>
                                </scope>
                                <scope line="692"/>
                            </scope>
                        </scope>
                    </scope>
                </method>
                <javadoc line="698">
                    Selects the passed in field, returning true if it is found,
                      false otherwise.                    
                </javadoc>
                <method name="select" type="boolean" line="704">
                    <params>
                        <param name="ftf" type="JFormattedTextField"/>
                        <param name="iterator" type="AttributedCharacterIterator"/>
                        <param name="field" type="DateFormat.Field"/>
                    </params>
                    <declaration name="max" type="int" line="705"/>
                    <scope line="708">
                        <declaration name="attrs" type="Map" line="709"/>
                        <scope line="711">
                            <declaration name="start" type="int" line="712"/>
                            <declaration name="end" type="int" line="713"/>
                            <scope line="716"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="725">
                    Returns the calendarField under the start of the selection, or
                      -1 if there is no valid calendar field under the selection (or
                      the spinner isn&apos;t editing dates.                    
                </javadoc>
                <method name="getCalendarField" type="int" line="730">
                    <params>
                        <param name="spinner" type="JSpinner"/>
                    </params>
                    <declaration name="editor" type="JComponent" line="731"/>
                    <scope line="733">
                        <declaration name="dateEditor" type="JSpinner.DateEditor" line="734"/>
                        <declaration name="ftf" type="JFormattedTextField" line="735"/>
                        <declaration name="start" type="int" line="736"/>
                        <declaration name="formatter" type="JFormattedTextField.AbstractFormatter" line="737"/>
                        <scope line="740">
                            <declaration name="fields" type="Format.Field[]" line="741"/>
                            <scope line="744">
                                <scope line="745">
                                    <declaration name="calendarField" type="int" line="746"/>
                                    <scope line="748"/>
                                    <scope line="751"/>
                                    <scope line="755"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </method>
                <method name="mousePressed" type="void" line="765">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                    <scope line="766"/>
                </method>
                <method name="mouseReleased" type="void" line="774">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
                <method name="mouseClicked" type="void" line="780">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
                <method name="mouseEntered" type="void" line="783">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                    <scope line="784"/>
                </method>
                <method name="mouseExited" type="void" line="789">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                    <scope line="790"/>
                </method>
                <javadoc line="795">
                    Requests focus on a child of the spinner if the spinner doesn&apos;t
                      have focus.                    
                </javadoc>
                <method name="focusSpinnerIfNecessary" type="void" line="799">
                    <declaration name="fo" type="Component" line="800"/>
                    <scope line="804">
                        <declaration name="root" type="Container" line="805"/>
                        <scope line="807"/>
                        <scope line="810">
                            <declaration name="ftp" type="FocusTraversalPolicy" line="811"/>
                            <declaration name="child" type="Component" line="812"/>
                            <scope line="815"/>
                        </scope>
                    </scope>
                </method>
                <method name="focusGained" type="void" line="822">
                    <params>
                        <param name="e" type="FocusEvent"/>
                    </params>
                </method>
                <method name="focusLost" type="void" line="825">
                    <params>
                        <param name="e" type="FocusEvent"/>
                    </params>
                    <scope line="826">
                        <scope line="827"/>
                        <scope line="831">
                            <declaration name="model" type="ButtonModel" line="832"/>
                        </scope>
                    </scope>
                </method>
            </class>
            <class name="Handler" line="842">
                <comment line="845">
                                        
                </comment>
                <comment line="846">
                    LayoutManager                    
                </comment>
                <comment line="847">
                                        
                </comment>
                <comment line="959">
                                        
                </comment>
                <comment line="960">
                    PropertyChangeListener                    
                </comment>
                <comment line="961">
                                        
                </comment>
                <comment line="1033">
                    Syncronizes the ToolTip text for the components within the spinner                    
                </comment>
                <comment line="1034">
                    to be the same value as the spinner ToolTip text.                    
                </comment>
                <implements interface="LayoutManager"/>
                <implements interface="PropertyChangeListener"/>
                <implements interface="ChangeListener"/>
                <declaration name="nextButton" type="Component" line="847"/>
                <declaration name="previousButton" type="Component" line="848"/>
                <declaration name="editor" type="Component" line="849"/>
                <method name="addLayoutComponent" type="void" line="851">
                    <params>
                        <param name="name" type="String"/>
                        <param name="c" type="Component"/>
                    </params>
                    <scope line="852"/>
                    <scope line="855"/>
                    <scope line="858"/>
                </method>
                <method name="removeLayoutComponent" type="void" line="863">
                    <params>
                        <param name="c" type="Component"/>
                    </params>
                    <scope line="864"/>
                    <scope line="867"/>
                    <scope line="870"/>
                </method>
                <method name="preferredSize" type="Dimension" line="875">
                    <params>
                        <param name="c" type="Component"/>
                    </params>
                </method>
                <method name="preferredLayoutSize" type="Dimension" line="879">
                    <params>
                        <param name="parent" type="Container"/>
                    </params>
                    <comment line="884">
                        Force the editors height to be a multiple of 2                        
                    </comment>
                    <declaration name="nextD" type="Dimension" line="880"/>
                    <declaration name="previousD" type="Dimension" line="881"/>
                    <declaration name="editorD" type="Dimension" line="882"/>
                    <declaration name="size" type="Dimension" line="888"/>
                    <declaration name="insets" type="Insets" line="890"/>
                </method>
                <method name="minimumLayoutSize" type="Dimension" line="896">
                    <params>
                        <param name="parent" type="Container"/>
                    </params>
                </method>
                <method name="setBounds" type="void" line="900">
                    <params>
                        <param name="c" type="Component"/>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                        <param name="width" type="int"/>
                        <param name="height" type="int"/>
                    </params>
                    <scope line="901"/>
                </method>
                <method name="layoutContainer" type="void" line="906">
                    <params>
                        <param name="parent" type="Container"/>
                    </params>
                    <comment line="924">
                        The arrowButtonInsets value is used instead of the JSpinner&apos;s                        
                    </comment>
                    <comment line="925">
                        insets if not null. Defining this to be (0, 0, 0, 0) causes the                        
                    </comment>
                    <comment line="926">
                        buttons to be aligned with the outer edge of the spinner&apos;s                        
                    </comment>
                    <comment line="927">
                        border, and leaving it as &quot;null&quot; places the buttons completely                        
                    </comment>
                    <comment line="928">
                        inside the spinner&apos;s border.                        
                    </comment>
                    <comment line="934">
                        Deal with the spinner&apos;s componentOrientation property.                        
                    </comment>
                    <declaration name="width" type="int" line="907"/>
                    <declaration name="height" type="int" line="908"/>
                    <declaration name="insets" type="Insets" line="910"/>
                    <scope line="912"/>
                    <declaration name="nextD" type="Dimension" line="919"/>
                    <declaration name="previousD" type="Dimension" line="920"/>
                    <declaration name="buttonsWidth" type="int" line="921"/>
                    <declaration name="editorHeight" type="int" line="922"/>
                    <declaration name="buttonInsets" type="Insets" line="929"/>
                    <scope line="930"/>
                    <declaration name="editorX" type="int" line="936"/>
                    <scope line="937"/>
                    <scope line="941"/>
                    <declaration name="nextY" type="int" line="947"/>
                    <declaration name="nextHeight" type="int" line="948"/>
                    <declaration name="previousY" type="int" line="949"/>
                    <declaration name="previousHeight" type="int" line="950"/>
                </method>
                <method name="propertyChange" type="void" line="962">
                    <params>
                        <param name="e" type="PropertyChangeEvent"/>
                    </params>
                    <declaration name="propertyName" type="String" line="963"/>
                    <scope line="964">
                        <declaration name="spinner" type="JSpinner" line="965"/>
                        <declaration name="spinnerUI" type="SpinnerUI" line="966"/>
                        <scope line="968">
                            <declaration name="ui" type="BasicSpinnerUI" line="969"/>
                            <scope line="971">
                                <declaration name="oldEditor" type="JComponent" line="972"/>
                                <declaration name="newEditor" type="JComponent" line="973"/>
                                <scope line="976">
                                    <declaration name="tf" type="JTextField" line="977"/>
                                    <scope line="979"/>
                                </scope>
                                <scope line="984">
                                    <declaration name="tf" type="JTextField" line="985"/>
                                    <scope line="987">
                                        <scope line="988"/>
                                    </scope>
                                </scope>
                            </scope>
                            <scope line="997"/>
                            <scope line="1000">
                                <declaration name="editor" type="JComponent" line="1001"/>
                                <scope line="1002">
                                    <declaration name="tf" type="JTextField" line="1003"/>
                                    <scope line="1005">
                                        <scope line="1006"/>
                                    </scope>
                                </scope>
                            </scope>
                            <scope line="1012"/>
                        </scope>
                    </scope>
                    <scope line="1016">
                        <declaration name="c" type="JComponent" line="1017"/>
                        <scope line="1020">
                            <declaration name="spinner" type="JSpinner" line="1022"/>
                            <declaration name="spinnerUI" type="SpinnerUI" line="1023"/>
                            <scope line="1024">
                                <declaration name="ui" type="BasicSpinnerUI" line="1025"/>
                            </scope>
                        </scope>
                    </scope>
                </method>
                <method name="updateToolTipTextForChildren" type="void" line="1034">
                    <params>
                        <param name="spinner" type="JComponent"/>
                    </params>
                    <declaration name="toolTipText" type="String" line="1035"/>
                    <declaration name="children" type="Component[]" line="1036"/>
                    <scope line="1037">
                        <scope line="1038">
                            <declaration name="tf" type="JTextField" line="1039"/>
                            <scope line="1040"/>
                        </scope>
                        <scope line="1043"/>
                    </scope>
                </method>
                <method name="stateChanged" type="void" line="1049">
                    <params>
                        <param name="e" type="ChangeEvent"/>
                    </params>
                    <scope line="1050">
                        <declaration name="spinner" type="JSpinner" line="1051"/>
                        <declaration name="spinnerUI" type="SpinnerUI" line="1052"/>
                        <scope line="1055">
                            <declaration name="ui" type="BasicSpinnerUI" line="1056"/>
                        </scope>
                    </scope>
                </method>
            </class>
        </class>
    </source>