<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.plaf.synth">
        <import package="java.awt"/>
        <import package="java.beans"/>
        <import package="javax.swing"/>
        <import package="javax.swing.border"/>
        <import package="javax.swing.plaf"/>
        <import package="javax.swing.plaf.basic"/>
        <import package="javax.swing.table"/>
        <import package="sun.swing.table"/>
        <class name="SynthTableHeaderUI" line="37">
            <extends class="BasicTableHeaderUI"/>
            <comment line="49">
                                
            </comment>
            <comment line="50">
                Instance Variables                
            </comment>
            <comment line="51">
                                
            </comment>
            <comment line="185">
                                
            </comment>
            <comment line="186">
                SynthUI                
            </comment>
            <comment line="187">
                                
            </comment>
            <implements interface="PropertyChangeListener"/>
            <implements interface="SynthUI"/>
            <javadoc line="37">
                Provides the Synth L&amp;F UI delegate for{@link javax.swing.table.JTableHeader}.                
                <author>
                    Alan Chung                    
                </author>
                <author>
                    Philip Milne                    
                </author>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <declaration name="prevRenderer" type="TableCellRenderer" line="52"/>
            <declaration name="style" type="SynthStyle" line="54"/>
            <javadoc line="56">
                Creates a new UI object for the given component.                
                <param>
                    h component to create UI object for                    
                </param>
                <return>
                    the UI object                    
                </return>
            </javadoc>
            <method name="createUI" type="ComponentUI" line="62">
                <params>
                    <param name="h" type="JComponent"/>
                </params>
            </method>
            <javadoc line="66">
                @inheritDoc                
            </javadoc>
            <method name="installDefaults" type="void" line="70">
                <scope line="72"/>
            </method>
            <method name="updateStyle" type="void" line="78">
                <params>
                    <param name="c" type="JTableHeader"/>
                </params>
                <declaration name="context" type="SynthContext" line="79"/>
                <declaration name="oldStyle" type="SynthStyle" line="80"/>
                <scope line="82">
                    <scope line="83"/>
                </scope>
            </method>
            <javadoc line="91">
                @inheritDoc                
            </javadoc>
            <method name="installListeners" type="void" line="95"/>
            <javadoc line="100">
                @inheritDoc                
            </javadoc>
            <method name="uninstallDefaults" type="void" line="104">
                <scope line="105"/>
                <declaration name="context" type="SynthContext" line="109"/>
            </method>
            <javadoc line="116">
                @inheritDoc                
            </javadoc>
            <method name="uninstallListeners" type="void" line="120"/>
            <javadoc line="125">
                Notifies this UI delegate to repaint the specified component.
                  This method paints the component background, then calls
                  the {@link #paint(SynthContext,Graphics)} method.
                  &lt;p&gt;In general, this method does not need to be overridden by subclasses.
                  All Look and Feel rendering code should reside in the {@code paint} method.                
                <param>
                    g the {@code Graphics} object used for painting                    
                </param>
                <param>
                    c the component being painted                    
                </param>
                <see>
                    #paint(SynthContext,Graphics)                    
                </see>
            </javadoc>
            <method name="update" type="void" line="138">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="c" type="JComponent"/>
                </params>
                <declaration name="context" type="SynthContext" line="139"/>
            </method>
            <javadoc line="148">
                Paints the specified component according to the Look and Feel.
                  &lt;p&gt;This method is not used by Synth Look and Feel.
                  Painting is handled by the {@link #paint(SynthContext,Graphics)} method.                
                <param>
                    g the {@code Graphics} object used for painting                    
                </param>
                <param>
                    c the component being painted                    
                </param>
                <see>
                    #paint(SynthContext,Graphics)                    
                </see>
            </javadoc>
            <method name="paint" type="void" line="158">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="c" type="JComponent"/>
                </params>
                <declaration name="context" type="SynthContext" line="159"/>
            </method>
            <javadoc line="165">
                Paints the specified component.                
                <param>
                    context context for the component being painted                    
                </param>
                <param>
                    g the {@code Graphics} object used for painting                    
                </param>
                <see>
                    #update(Graphics,JComponent)                    
                </see>
            </javadoc>
            <method name="paint" type="void" line="172">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="g" type="Graphics"/>
                </params>
            </method>
            <javadoc line="176">
                @inheritDoc                
            </javadoc>
            <method name="paintBorder" type="void" line="181">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="g" type="Graphics"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
            </method>
            <javadoc line="187">
                @inheritDoc                
            </javadoc>
            <method name="getContext" type="SynthContext" line="191">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <method name="getContext" type="SynthContext" line="195">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="state" type="int"/>
                </params>
            </method>
            <javadoc line="200">
                @inheritDoc                
            </javadoc>
            <method name="rolloverColumnUpdated" type="void" line="204">
                <params>
                    <param name="oldColumn" type="int"/>
                    <param name="newColumn" type="int"/>
                </params>
            </method>
            <javadoc line="209">
                @inheritDoc                
            </javadoc>
            <method name="propertyChange" type="void" line="213">
                <params>
                    <param name="evt" type="PropertyChangeEvent"/>
                </params>
                <scope line="214"/>
            </method>
            <class name="HeaderRenderer" line="219">
                <extends class="DefaultTableCellHeaderRenderer"/>
                <method name="HeaderRenderer" type="constructor" line="220"/>
                <method name="getTableCellRendererComponent" type="Component" line="229">
                    <params>
                        <param name="table" type="JTable"/>
                        <param name="value" type="Object"/>
                        <param name="isSelected" type="boolean"/>
                        <param name="hasFocus" type="boolean"/>
                        <param name="row" type="int"/>
                        <param name="column" type="int"/>
                    </params>
                    <comment line="241">
                        stuff a variable into the client property of this renderer indicating the sort order,                        
                    </comment>
                    <comment line="242">
                        so that different rendering can be done for the header based on sorted state.                        
                    </comment>
                    <declaration name="hasRollover" type="boolean" line="231"/>
                    <scope line="232"/>
                    <scope line="237"/>
                    <declaration name="rs" type="RowSorter" line="243"/>
                    <declaration name="sortKeys" type="java.util.List&lt;? extends RowSorter.SortKey&gt;" line="244"/>
                    <scope line="246"/>
                    <scope line="260"/>
                </method>
                <method name="setBorder" type="void" line="271">
                    <params>
                        <param name="border" type="Border"/>
                    </params>
                    <scope line="272"/>
                </method>
            </class>
        </class>
    </source>