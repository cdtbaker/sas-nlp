<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.plaf.basic">
        <import package="sun.swing.DefaultLookup"/>
        <import package="sun.swing.UIAction"/>
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="java.beans"/>
        <import package="javax.swing"/>
        <import package="javax.swing.event"/>
        <import package="javax.swing.plaf"/>
        <import package="javax.swing.border"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.ArrayList"/>
        <class name="BasicMenuUI" line="41">
            <extends class="BasicMenuItemUI"/>
            <comment line="60">
                                
            </comment>
            <comment line="61">
                trace creates and disposes                
            </comment>
            <comment line="62">
                show reuse hits/misses                
            </comment>
            <comment line="63">
                show bad params, misc.                
            </comment>
            <comment line="294">
                Set the background color depending on whether this is a toplevel menu
                 in a menubar or a submenu of another menu.                
            </comment>
            <javadoc line="41">
                A default L&amp;F implementation of MenuUI.  This implementation
                  is a &quot;combined&quot; view/controller.                
                <author>
                    Georges Saab                    
                </author>
                <author>
                    David Karlton                    
                </author>
                <author>
                    Arnaud Weber                    
                </author>
            </javadoc>
            <declaration name="changeListener" type="ChangeListener" line="51"/>
            <declaration name="menuListener" type="MenuListener" line="52"/>
            <declaration name="lastMnemonic" type="int" line="54"/>
            <declaration name="selectedWindowInputMap" type="InputMap" line="56"/>
            <javadoc line="56">
                Uses as the parent of the windowInputMap when selected.                
            </javadoc>
            <declaration name="TRACE" type="boolean" line="60"/>
            <declaration name="VERBOSE" type="boolean" line="61"/>
            <declaration name="DEBUG" type="boolean" line="62"/>
            <declaration name="crossMenuMnemonic" type="boolean" line="64"/>
            <method name="createUI" type="ComponentUI" line="66">
                <params>
                    <param name="x" type="JComponent"/>
                </params>
            </method>
            <method name="loadActionMap" type="void" line="70">
                <params>
                    <param name="map" type="LazyActionMap"/>
                </params>
            </method>
            <method name="installDefaults" type="void" line="76"/>
            <method name="getPropertyPrefix" type="String" line="83"/>
            <method name="installListeners" type="void" line="87"/>
            <method name="installKeyboardActions" type="void" line="103"/>
            <method name="installLazyActionMap" type="void" line="108"/>
            <method name="updateMnemonicBinding" type="void" line="113">
                <declaration name="mnemonic" type="int" line="114"/>
                <declaration name="shortcutKeys" type="int[]" line="115"/>
                <scope line="117"/>
                <scope line="120"/>
                <declaration name="windowInputMap" type="InputMap" line="123"/>
                <scope line="125">
                    <scope line="126"/>
                </scope>
                <scope line="131">
                    <scope line="132"/>
                    <scope line="138"/>
                </scope>
            </method>
            <method name="uninstallKeyboardActions" type="void" line="146"/>
            <method name="createMouseInputListener" type="MouseInputListener" line="151">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <method name="createMenuListener" type="MenuListener" line="155">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <method name="createChangeListener" type="ChangeListener" line="159">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <method name="createPropertyChangeListener" type="PropertyChangeListener" line="163">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <method name="getHandler" type="BasicMenuItemUI.Handler" line="167">
                <scope line="168"/>
            </method>
            <method name="uninstallDefaults" type="void" line="174"/>
            <method name="uninstallListeners" type="void" line="181"/>
            <method name="createMenuDragMouseListener" type="MenuDragMouseListener" line="195">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <method name="createMenuKeyListener" type="MenuKeyListener" line="199">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <method name="getMaximumSize" type="Dimension" line="203">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <scope line="204">
                    <declaration name="d" type="Dimension" line="205"/>
                </scope>
            </method>
            <method name="setupPostTimer" type="void" line="211">
                <params>
                    <param name="menu" type="JMenu"/>
                </params>
                <declaration name="timer" type="Timer" line="212"/>
            </method>
            <method name="appendPath" type="void" line="218">
                <params>
                    <param name="path" type="MenuElement[]"/>
                    <param name="elem" type="MenuElement"/>
                </params>
                <declaration name="newPath" type="MenuElement" line="219"/>
            </method>
            <class name="Actions" line="225">
                <extends class="UIAction"/>
                <comment line="229">
                    NOTE: This will be null if the action is registered in the
                     ActionMap. For the timer use it will be non-null.                    
                </comment>
                <comment line="326">
                    NOTE: This class exists only for backward compatability. All
                     its functionality has been moved into Handler. If you need to add
                     new functionality add it to the Handler, but make sure this
                     class calls into the Handler.                    
                </comment>
                <comment line="406">
                    PropertyChangeListener                    
                </comment>
                <comment line="422">
                    MouseInputListener                    
                </comment>
                <comment line="551">
                    MenuDragHandler                    
                </comment>
                <comment line="589">
                    MenuKeyListener                    
                </comment>
                <declaration name="SELECT" type="String" line="226"/>
                <declaration name="menu" type="JMenu" line="230"/>
                <declaration name="force" type="boolean" line="231"/>
                <method name="Actions" type="constructor" line="233">
                    <params>
                        <param name="key" type="String"/>
                        <param name="menu" type="JMenu"/>
                        <param name="shouldForce" type="boolean"/>
                    </params>
                </method>
                <method name="getMenu" type="JMenu" line="239">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                    <scope line="240"/>
                </method>
                <method name="actionPerformed" type="void" line="246">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                    <declaration name="menu" type="JMenu" line="247"/>
                    <scope line="248">
                        <declaration name="pm" type="JPopupMenu" line="249"/>
                        <scope line="250"/>
                    </scope>
                    <declaration name="defaultManager" type="MenuSelectionManager" line="255"/>
                    <scope line="256">
                        <declaration name="cnt" type="Container" line="257"/>
                        <scope line="258">
                            <declaration name="me" type="MenuElement" line="259"/>
                            <declaration name="subElements" type="MenuElement" line="260"/>
                            <scope line="263"/>
                            <scope line="269"/>
                        </scope>
                    </scope>
                    <scope line="277">
                        <declaration name="path" type="MenuElement" line="278"/>
                        <scope line="279"/>
                    </scope>
                </method>
                <method name="isEnabled" type="boolean" line="285">
                    <params>
                        <param name="c" type="Object"/>
                    </params>
                    <scope line="286"/>
                </method>
            </class>
            <method name="updateDefaultBackgroundColor" type="void" line="297">
                <scope line="298"/>
                <declaration name="menu" type="JMenu" line="301"/>
                <scope line="302">
                    <scope line="303"/>
                    <scope line="305"/>
                </scope>
            </method>
            <class name="MouseInputHandler" line="311">
                <comment line="229">
                    NOTE: This will be null if the action is registered in the
                     ActionMap. For the timer use it will be non-null.                    
                </comment>
                <comment line="326">
                    NOTE: This class exists only for backward compatability. All
                     its functionality has been moved into Handler. If you need to add
                     new functionality add it to the Handler, but make sure this
                     class calls into the Handler.                    
                </comment>
                <comment line="406">
                    PropertyChangeListener                    
                </comment>
                <comment line="422">
                    MouseInputListener                    
                </comment>
                <comment line="551">
                    MenuDragHandler                    
                </comment>
                <comment line="589">
                    MenuKeyListener                    
                </comment>
                <implements interface="MouseInputListener"/>
                <javadoc line="311">
                    Instantiated and used by a menu item to handle the current menu selection
                      from mouse events. A MouseInputHandler processes and forwards all mouse events
                      to a shared instance of the MenuSelectionManager.
                      &lt;p&gt;
                      This class is protected so that it can be subclassed by other look and
                      feels to implement their own mouse handling behavior. All overridden
                      methods should call the parent methods so that the menu selection
                      is correct.                    
                    <see>
                        javax.swing.MenuSelectionManager                        
                    </see>
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <method name="mouseClicked" type="void" line="330">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
                <javadoc line="334">
                    Invoked when the mouse has been clicked on the menu. This
                      method clears or sets the selection path of the
                      MenuSelectionManager.                    
                    <param>
                        e the mouse event                        
                    </param>
                </javadoc>
                <method name="mousePressed" type="void" line="341">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
                <javadoc line="345">
                    Invoked when the mouse has been released on the menu. Delegates the
                      mouse event to the MenuSelectionManager.                    
                    <param>
                        e the mouse event                        
                    </param>
                </javadoc>
                <method name="mouseReleased" type="void" line="351">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
                <javadoc line="355">
                    Invoked when the cursor enters the menu. This method sets the selected
                      path for the MenuSelectionManager and handles the case
                      in which a menu item is used to pop up an additional menu, as in a
                      hierarchical menu system.                    
                    <param>
                        e the mouse event; not used                        
                    </param>
                </javadoc>
                <method name="mouseEntered" type="void" line="363">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
                <method name="mouseExited" type="void" line="366">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
                <javadoc line="370">
                    Invoked when a mouse button is pressed on the menu and then dragged.
                      Delegates the mouse event to the MenuSelectionManager.                    
                    <param>
                        e the mouse event                        
                    </param>
                    <see>
                        java.awt.event.MouseMotionListener#mouseDragged                        
                    </see>
                </javadoc>
                <method name="mouseDragged" type="void" line="377">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
                <method name="mouseMoved" type="void" line="381">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
            </class>
            <class name="ChangeHandler" line="386">
                <comment line="229">
                    NOTE: This will be null if the action is registered in the
                     ActionMap. For the timer use it will be non-null.                    
                </comment>
                <comment line="326">
                    NOTE: This class exists only for backward compatability. All
                     its functionality has been moved into Handler. If you need to add
                     new functionality add it to the Handler, but make sure this
                     class calls into the Handler.                    
                </comment>
                <comment line="406">
                    PropertyChangeListener                    
                </comment>
                <comment line="422">
                    MouseInputListener                    
                </comment>
                <comment line="551">
                    MenuDragHandler                    
                </comment>
                <comment line="589">
                    MenuKeyListener                    
                </comment>
                <implements interface="ChangeListener"/>
                <javadoc line="386">
                    As of Java 2 platform 1.4, this previously undocumented class
                      is now obsolete. KeyBindings are now managed by the popup menu.                    
                </javadoc>
                <declaration name="menu" type="JMenu" line="391"/>
                <declaration name="ui" type="BasicMenuUI" line="392"/>
                <declaration name="isSelected" type="boolean" line="393"/>
                <declaration name="wasFocused" type="Component" line="394"/>
                <method name="ChangeHandler" type="constructor" line="396">
                    <params>
                        <param name="m" type="JMenu"/>
                        <param name="ui" type="BasicMenuUI"/>
                    </params>
                </method>
                <method name="stateChanged" type="void" line="401">
                    <params>
                        <param name="e" type="ChangeEvent"/>
                    </params>
                </method>
            </class>
            <class name="Handler" line="404">
                <extends class="BasicMenuItemUI.Handler"/>
                <comment line="229">
                    NOTE: This will be null if the action is registered in the
                     ActionMap. For the timer use it will be non-null.                    
                </comment>
                <comment line="326">
                    NOTE: This class exists only for backward compatability. All
                     its functionality has been moved into Handler. If you need to add
                     new functionality add it to the Handler, but make sure this
                     class calls into the Handler.                    
                </comment>
                <comment line="406">
                    PropertyChangeListener                    
                </comment>
                <comment line="422">
                    MouseInputListener                    
                </comment>
                <comment line="551">
                    MenuDragHandler                    
                </comment>
                <comment line="589">
                    MenuKeyListener                    
                </comment>
                <implements interface="MenuKeyListener"/>
                <method name="propertyChange" type="void" line="408">
                    <params>
                        <param name="e" type="PropertyChangeEvent"/>
                    </params>
                    <scope line="410"/>
                    <scope line="413">
                        <scope line="414"/>
                    </scope>
                </method>
                <method name="mouseClicked" type="void" line="424">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
                <javadoc line="427">
                    Invoked when the mouse has been clicked on the menu. This
                      method clears or sets the selection path of the
                      MenuSelectionManager.                    
                    <param>
                        e the mouse event                        
                    </param>
                </javadoc>
                <method name="mousePressed" type="void" line="434">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                    <declaration name="menu" type="JMenu" line="435"/>
                    <declaration name="manager" type="MenuSelectionManager" line="439"/>
                    <scope line="441">
                        <scope line="442"/>
                        <scope line="444">
                            <declaration name="cnt" type="Container" line="445"/>
                            <scope line="446">
                                <declaration name="me" type="MenuElement" line="447"/>
                            </scope>
                        </scope>
                    </scope>
                    <declaration name="selectedPath" type="MenuElement" line="455"/>
                    <scope line="457">
                        <scope line="460"/>
                        <scope line="462"/>
                    </scope>
                </method>
                <javadoc line="468">
                    Invoked when the mouse has been released on the menu. Delegates the
                      mouse event to the MenuSelectionManager.                    
                    <param>
                        e the mouse event                        
                    </param>
                </javadoc>
                <method name="mouseReleased" type="void" line="474">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                    <declaration name="menu" type="JMenu" line="475"/>
                    <declaration name="manager" type="MenuSelectionManager" line="478"/>
                </method>
                <javadoc line="485">
                    Invoked when the cursor enters the menu. This method sets the selected
                      path for the MenuSelectionManager and handles the case
                      in which a menu item is used to pop up an additional menu, as in a
                      hierarchical menu system.                    
                    <param>
                        e the mouse event; not used                        
                    </param>
                </javadoc>
                <method name="mouseEntered" type="void" line="493">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                    <comment line="496">
                        only disable the menu highlighting if it&apos;s disabled and the property isn&apos;t
                         true. This allows disabled rollovers to work in WinL&amp;F                        
                    </comment>
                    <comment line="520">
                        A top level menu&apos;s parent is by definition
                         a JMenuBar                        
                    </comment>
                    <declaration name="menu" type="JMenu" line="494"/>
                    <scope line="497"/>
                    <declaration name="manager" type="MenuSelectionManager" line="501"/>
                    <declaration name="selectedPath" type="MenuElement" line="503"/>
                    <scope line="504">
                        <scope line="507">
                            <scope line="508"/>
                            <scope line="510"/>
                        </scope>
                    </scope>
                    <scope line="515">
                        <scope line="517">
                            <declaration name="newPath" type="MenuElement" line="518"/>
                            <scope line="523"/>
                        </scope>
                    </scope>
                </method>
                <method name="mouseExited" type="void" line="530">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
                <javadoc line="533">
                    Invoked when a mouse button is pressed on the menu and then dragged.
                      Delegates the mouse event to the MenuSelectionManager.                    
                    <param>
                        e the mouse event                        
                    </param>
                    <see>
                        java.awt.event.MouseMotionListener#mouseDragged                        
                    </see>
                </javadoc>
                <method name="mouseDragged" type="void" line="540">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                    <declaration name="menu" type="JMenu" line="541"/>
                </method>
                <method name="mouseMoved" type="void" line="546">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
                <method name="menuDragMouseEntered" type="void" line="553">
                    <params>
                        <param name="e" type="MenuDragMouseEvent"/>
                    </params>
                </method>
                <method name="menuDragMouseDragged" type="void" line="554">
                    <params>
                        <param name="e" type="MenuDragMouseEvent"/>
                    </params>
                    <declaration name="manager" type="MenuSelectionManager" line="558"/>
                    <declaration name="path" type="MenuElement" line="559"/>
                    <declaration name="p" type="Point" line="561"/>
                    <scope line="563">
                        <declaration name="menu" type="JMenu" line="564"/>
                        <declaration name="selectedPath" type="MenuElement" line="565"/>
                        <scope line="568">
                            <scope line="571"/>
                            <scope line="573"/>
                        </scope>
                    </scope>
                    <scope line="578">
                        <declaration name="comp" type="Component" line="579"/>
                    </scope>
                </method>
                <method name="menuDragMouseExited" type="void" line="585">
                    <params>
                        <param name="e" type="MenuDragMouseEvent"/>
                    </params>
                </method>
                <method name="menuDragMouseReleased" type="void" line="586">
                    <params>
                        <param name="e" type="MenuDragMouseEvent"/>
                    </params>
                </method>
                <javadoc line="591">
                    Open the Menu                    
                </javadoc>
                <method name="menuKeyTyped" type="void" line="594">
                    <params>
                        <param name="e" type="MenuKeyEvent"/>
                    </params>
                    <comment line="597">
                        when crossMenuMnemonic is not set, we don&apos;t open a toplevel
                         menu if another toplevel menu is already open                        
                    </comment>
                    <comment line="603">
                        Fix 6939261: to return in case not on the main menu
                        and has a pop-up.
                        after return code will be handled in BasicPopupMenuUI.java                        
                    </comment>
                    <scope line="595"/>
                    <scope line="601"/>
                    <declaration name="key" type="char" line="608"/>
                    <declaration name="path" type="MenuElement" line="609"/>
                    <scope line="610">
                        <declaration name="popupMenu" type="JPopupMenu" line="611"/>
                        <declaration name="newList" type="ArrayList" line="612"/>
                        <declaration name="subs" type="MenuElement" line="614"/>
                        <declaration name="sub" type="MenuElement" line="615"/>
                        <scope line="617"/>
                        <declaration name="manager" type="MenuSelectionManager" line="620"/>
                        <declaration name="newPath" type="MenuElement" line="621"/>
                    </scope>
                </method>
                <method name="menuKeyPressed" type="void" line="628">
                    <params>
                        <param name="e" type="MenuKeyEvent"/>
                    </params>
                </method>
                <method name="menuKeyReleased" type="void" line="629">
                    <params>
                        <param name="e" type="MenuKeyEvent"/>
                    </params>
                </method>
            </class>
        </class>
    </source>