<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.plaf.multi">
        <import package="java.util.Vector"/>
        <import package="javax.swing.plaf.ListUI"/>
        <import package="javax.swing.JList"/>
        <import package="java.awt.Point"/>
        <import package="java.awt.Rectangle"/>
        <import package="javax.swing.plaf.ComponentUI"/>
        <import package="javax.swing.JComponent"/>
        <import package="java.awt.Graphics"/>
        <import package="java.awt.Dimension"/>
        <import package="javax.accessibility.Accessible"/>
        <class name="MultiListUI" line="38">
            <extends class="ListUI"/>
            <comment line="56">
                //////////////////                
            </comment>
            <comment line="57">
                Common UI methods                
            </comment>
            <comment line="58">
                //////////////////                
            </comment>
            <comment line="69">
                //////////////////                
            </comment>
            <comment line="70">
                ListUI methods                
            </comment>
            <comment line="71">
                //////////////////                
            </comment>
            <comment line="118">
                //////////////////                
            </comment>
            <comment line="119">
                ComponentUI methods                
            </comment>
            <comment line="120">
                //////////////////                
            </comment>
            <javadoc line="38">
                A multiplexing UI used to combine &lt;code&gt;ListUI&lt;/code&gt;s.
                  &lt;p&gt;This file was automatically generated by AutoMulti.                
                <author>
                    Otto Multey                    
                </author>
            </javadoc>
            <declaration name="uis" type="Vector" line="47"/>
            <javadoc line="47">
                The vector containing the real UIs.  This is populated
                  in the call to &lt;code&gt;createUI&lt;/code&gt;, and can be obtained by calling
                  the &lt;code&gt;getUIs&lt;/code&gt; method.  The first element is guaranteed to be the real UI
                  obtained from the default look and feel.                
            </javadoc>
            <javadoc line="59">
                Returns the list of UIs associated with this multiplexing UI.  This
                  allows processing of the UIs by an application aware of multiplexing
                  UIs on components.                
            </javadoc>
            <method name="getUIs" type="ComponentUI[]" line="64"/>
            <javadoc line="72">
                Invokes the &lt;code&gt;locationToIndex&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default <code>LookAndFeel</code>                    
                </return>
            </javadoc>
            <method name="locationToIndex" type="int" line="78">
                <params>
                    <param name="a" type="JList"/>
                    <param name="b" type="Point"/>
                </params>
                <declaration name="returnValue" type="int" line="79"/>
                <scope line="81"/>
            </method>
            <javadoc line="87">
                Invokes the &lt;code&gt;indexToLocation&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default <code>LookAndFeel</code>                    
                </return>
            </javadoc>
            <method name="indexToLocation" type="Point" line="93">
                <params>
                    <param name="a" type="JList"/>
                    <param name="b" type="int"/>
                </params>
                <declaration name="returnValue" type="Point" line="94"/>
                <scope line="96"/>
            </method>
            <javadoc line="102">
                Invokes the &lt;code&gt;getCellBounds&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default <code>LookAndFeel</code>                    
                </return>
            </javadoc>
            <method name="getCellBounds" type="Rectangle" line="108">
                <params>
                    <param name="a" type="JList"/>
                    <param name="b" type="int"/>
                    <param name="c" type="int"/>
                </params>
                <declaration name="returnValue" type="Rectangle" line="109"/>
                <scope line="111"/>
            </method>
            <javadoc line="121">
                Invokes the &lt;code&gt;contains&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default <code>LookAndFeel</code>                    
                </return>
            </javadoc>
            <method name="contains" type="boolean" line="127">
                <params>
                    <param name="a" type="JComponent"/>
                    <param name="b" type="int"/>
                    <param name="c" type="int"/>
                </params>
                <declaration name="returnValue" type="boolean" line="128"/>
                <scope line="130"/>
            </method>
            <javadoc line="136">
                Invokes the &lt;code&gt;update&lt;/code&gt; method on each UI handled by this object.                
            </javadoc>
            <method name="update" type="void" line="139">
                <params>
                    <param name="a" type="Graphics"/>
                    <param name="b" type="JComponent"/>
                </params>
                <scope line="140"/>
            </method>
            <javadoc line="145">
                Returns a multiplexing UI instance if any of the auxiliary
                  &lt;code&gt;LookAndFeel&lt;/code&gt;s supports this UI.  Otherwise, just returns the
                  UI object obtained from the default &lt;code&gt;LookAndFeel&lt;/code&gt;.                
            </javadoc>
            <method name="createUI" type="ComponentUI" line="150">
                <params>
                    <param name="a" type="JComponent"/>
                </params>
                <declaration name="mui" type="ComponentUI" line="151"/>
            </method>
            <javadoc line="157">
                Invokes the &lt;code&gt;installUI&lt;/code&gt; method on each UI handled by this object.                
            </javadoc>
            <method name="installUI" type="void" line="160">
                <params>
                    <param name="a" type="JComponent"/>
                </params>
                <scope line="161"/>
            </method>
            <javadoc line="166">
                Invokes the &lt;code&gt;uninstallUI&lt;/code&gt; method on each UI handled by this object.                
            </javadoc>
            <method name="uninstallUI" type="void" line="169">
                <params>
                    <param name="a" type="JComponent"/>
                </params>
                <scope line="170"/>
            </method>
            <javadoc line="175">
                Invokes the &lt;code&gt;paint&lt;/code&gt; method on each UI handled by this object.                
            </javadoc>
            <method name="paint" type="void" line="178">
                <params>
                    <param name="a" type="Graphics"/>
                    <param name="b" type="JComponent"/>
                </params>
                <scope line="179"/>
            </method>
            <javadoc line="184">
                Invokes the &lt;code&gt;getPreferredSize&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default <code>LookAndFeel</code>                    
                </return>
            </javadoc>
            <method name="getPreferredSize" type="Dimension" line="190">
                <params>
                    <param name="a" type="JComponent"/>
                </params>
                <declaration name="returnValue" type="Dimension" line="191"/>
                <scope line="193"/>
            </method>
            <javadoc line="199">
                Invokes the &lt;code&gt;getMinimumSize&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default <code>LookAndFeel</code>                    
                </return>
            </javadoc>
            <method name="getMinimumSize" type="Dimension" line="205">
                <params>
                    <param name="a" type="JComponent"/>
                </params>
                <declaration name="returnValue" type="Dimension" line="206"/>
                <scope line="208"/>
            </method>
            <javadoc line="214">
                Invokes the &lt;code&gt;getMaximumSize&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default <code>LookAndFeel</code>                    
                </return>
            </javadoc>
            <method name="getMaximumSize" type="Dimension" line="220">
                <params>
                    <param name="a" type="JComponent"/>
                </params>
                <declaration name="returnValue" type="Dimension" line="221"/>
                <scope line="223"/>
            </method>
            <javadoc line="229">
                Invokes the &lt;code&gt;getAccessibleChildrenCount&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default <code>LookAndFeel</code>                    
                </return>
            </javadoc>
            <method name="getAccessibleChildrenCount" type="int" line="235">
                <params>
                    <param name="a" type="JComponent"/>
                </params>
                <declaration name="returnValue" type="int" line="236"/>
                <scope line="238"/>
            </method>
            <javadoc line="244">
                Invokes the &lt;code&gt;getAccessibleChild&lt;/code&gt; method on each UI handled by this object.                
                <return>
                    the value obtained from the first UI, which is
                      the UI obtained from the default <code>LookAndFeel</code>                    
                </return>
            </javadoc>
            <method name="getAccessibleChild" type="Accessible" line="250">
                <params>
                    <param name="a" type="JComponent"/>
                    <param name="b" type="int"/>
                </params>
                <declaration name="returnValue" type="Accessible" line="251"/>
                <scope line="253"/>
            </method>
        </class>
    </source>