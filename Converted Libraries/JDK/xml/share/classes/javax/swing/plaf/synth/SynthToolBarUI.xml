<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.plaf.synth">
        <import package="java.awt.Component"/>
        <import package="java.awt.Container"/>
        <import package="java.awt.Dimension"/>
        <import package="java.awt.Graphics"/>
        <import package="java.awt.Insets"/>
        <import package="java.awt.LayoutManager"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.beans.PropertyChangeEvent"/>
        <import package="java.beans.PropertyChangeListener"/>
        <import package="javax.swing.Box"/>
        <import package="javax.swing.Icon"/>
        <import package="javax.swing.JComponent"/>
        <import package="javax.swing.JSeparator"/>
        <import package="javax.swing.JToolBar"/>
        <import package="javax.swing.plaf.ComponentUI"/>
        <import package="javax.swing.plaf.basic.BasicToolBarUI"/>
        <import package="sun.swing.plaf.synth.SynthIcon"/>
        <class name="SynthToolBarUI" line="46">
            <extends class="BasicToolBarUI"/>
            <comment line="336">
                PropertyChangeListener                
            </comment>
            <implements interface="PropertyChangeListener"/>
            <implements interface="SynthUI"/>
            <javadoc line="46">
                Provides the Synth L&amp;F UI delegate for{@link javax.swing.JToolBar}.                
                <since>
                    1.7                    
                </since>
            </javadoc>
            <declaration name="handleIcon" type="Icon" line="54"/>
            <declaration name="contentRect" type="Rectangle" line="55"/>
            <declaration name="style" type="SynthStyle" line="57"/>
            <declaration name="contentStyle" type="SynthStyle" line="58"/>
            <declaration name="dragWindowStyle" type="SynthStyle" line="59"/>
            <javadoc line="61">
                Creates a new UI object for the given component.                
                <param>
                    c component to create UI object for                    
                </param>
                <return>
                    the UI object                    
                </return>
            </javadoc>
            <method name="createUI" type="ComponentUI" line="67">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <javadoc line="71">
                @inheritDoc                
            </javadoc>
            <method name="installDefaults" type="void" line="75"/>
            <javadoc line="80">
                @inheritDoc                
            </javadoc>
            <method name="installListeners" type="void" line="84"/>
            <javadoc line="89">
                @inheritDoc                
            </javadoc>
            <method name="uninstallListeners" type="void" line="93"/>
            <method name="updateStyle" type="void" line="98">
                <params>
                    <param name="c" type="JToolBar"/>
                </params>
                <declaration name="context" type="SynthContext" line="99"/>
                <declaration name="oldStyle" type="SynthStyle" line="109"/>
                <scope line="112">
                    <scope line="115"/>
                </scope>
            </method>
            <javadoc line="123">
                @inheritDoc                
            </javadoc>
            <method name="uninstallDefaults" type="void" line="127">
                <declaration name="context" type="SynthContext" line="128"/>
            </method>
            <javadoc line="151">
                @inheritDoc                
            </javadoc>
            <method name="installComponents" type="void" line="155"/>
            <javadoc line="157">
                @inheritDoc                
            </javadoc>
            <method name="uninstallComponents" type="void" line="161"/>
            <javadoc line="163">
                Creates a {@code LayoutManager} to use with the toolbar.                
                <return>
                    a {@code LayoutManager} instance                    
                </return>
            </javadoc>
            <method name="createLayout" type="LayoutManager" line="168"/>
            <javadoc line="172">
                @inheritDoc                
            </javadoc>
            <method name="getContext" type="SynthContext" line="176">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <method name="getContext" type="SynthContext" line="180">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="state" type="int"/>
                </params>
            </method>
            <method name="getContext" type="SynthContext" line="185">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="region" type="Region"/>
                    <param name="style" type="SynthStyle"/>
                </params>
            </method>
            <method name="getContext" type="SynthContext" line="191">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="region" type="Region"/>
                    <param name="style" type="SynthStyle"/>
                    <param name="state" type="int"/>
                </params>
            </method>
            <method name="getComponentState" type="int" line="196">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="region" type="Region"/>
                </params>
            </method>
            <javadoc line="200">
                Notifies this UI delegate to repaint the specified component.
                  This method paints the component background, then calls
                  the {@link #paint(SynthContext,Graphics)} method.
                  &lt;p&gt;In general, this method does not need to be overridden by subclasses.
                  All Look and Feel rendering code should reside in the {@code paint} method.                
                <param>
                    g the {@code Graphics} object used for painting                    
                </param>
                <param>
                    c the component being painted                    
                </param>
                <see>
                    #paint(SynthContext,Graphics)                    
                </see>
            </javadoc>
            <method name="update" type="void" line="213">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="c" type="JComponent"/>
                </params>
                <declaration name="context" type="SynthContext" line="214"/>
            </method>
            <javadoc line="224">
                Paints the specified component according to the Look and Feel.
                  &lt;p&gt;This method is not used by Synth Look and Feel.
                  Painting is handled by the {@link #paint(SynthContext,Graphics)} method.                
                <param>
                    g the {@code Graphics} object used for painting                    
                </param>
                <param>
                    c the component being painted                    
                </param>
                <see>
                    #paint(SynthContext,Graphics)                    
                </see>
            </javadoc>
            <method name="paint" type="void" line="234">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="c" type="JComponent"/>
                </params>
                <declaration name="context" type="SynthContext" line="235"/>
            </method>
            <javadoc line="241">
                @inheritDoc                
            </javadoc>
            <method name="paintBorder" type="void" line="246">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="g" type="Graphics"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
            </method>
            <javadoc line="251">
                This implementation does nothing, because the {@code rollover}property of the {@code JToolBar} class is not used
                  in the Synth Look and Feel.                
            </javadoc>
            <method name="setBorderToNonRollover" type="void" line="257">
                <params>
                    <param name="c" type="Component"/>
                </params>
            </method>
            <javadoc line="259">
                This implementation does nothing, because the {@code rollover}property of the {@code JToolBar} class is not used
                  in the Synth Look and Feel.                
            </javadoc>
            <method name="setBorderToRollover" type="void" line="265">
                <params>
                    <param name="c" type="Component"/>
                </params>
            </method>
            <javadoc line="267">
                This implementation does nothing, because the {@code rollover}property of the {@code JToolBar} class is not used
                  in the Synth Look and Feel.                
            </javadoc>
            <method name="setBorderToNormal" type="void" line="273">
                <params>
                    <param name="c" type="Component"/>
                </params>
            </method>
            <javadoc line="275">
                Paints the toolbar.                
                <param>
                    context context for the component being painted                    
                </param>
                <param>
                    g the {@code Graphics} object used for painting                    
                </param>
                <see>
                    #update(Graphics,JComponent)                    
                </see>
            </javadoc>
            <method name="paint" type="void" line="282">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="g" type="Graphics"/>
                </params>
                <scope line="283">
                    <declaration name="startX" type="int" line="284"/>
                </scope>
                <declaration name="subcontext" type="SynthContext" line="292"/>
            </method>
            <javadoc line="298">
                Paints the toolbar content.                
                <param>
                    context context for the component being painted                    
                </param>
                <param>
                    g {@code Graphics} object used for painting                    
                </param>
                <param>
                    bounds bounding box for the toolbar                    
                </param>
            </javadoc>
            <method name="paintContent" type="void" line="306">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="g" type="Graphics"/>
                    <param name="bounds" type="Rectangle"/>
                </params>
            </method>
            <javadoc line="316">
                @inheritDoc                
            </javadoc>
            <method name="paintDragWindow" type="void" line="320">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
                <declaration name="w" type="int" line="321"/>
                <declaration name="h" type="int" line="322"/>
                <declaration name="context" type="SynthContext" line="323"/>
            </method>
            <javadoc line="339">
                @inheritDoc                
            </javadoc>
            <method name="propertyChange" type="void" line="343">
                <params>
                    <param name="e" type="PropertyChangeEvent"/>
                </params>
                <scope line="344"/>
            </method>
            <class name="SynthToolBarLayoutManager" line="350">
                <implements interface="LayoutManager"/>
                <method name="addLayoutComponent" type="void" line="351">
                    <params>
                        <param name="name" type="String"/>
                        <param name="comp" type="Component"/>
                    </params>
                </method>
                <method name="removeLayoutComponent" type="void" line="353">
                    <params>
                        <param name="comp" type="Component"/>
                    </params>
                </method>
                <method name="minimumLayoutSize" type="Dimension" line="355">
                    <params>
                        <param name="parent" type="Container"/>
                    </params>
                    <declaration name="tb" type="JToolBar" line="356"/>
                    <declaration name="insets" type="Insets" line="357"/>
                    <declaration name="dim" type="Dimension" line="358"/>
                    <declaration name="context" type="SynthContext" line="359"/>
                    <scope line="361">
                        <declaration name="compDim" type="Dimension" line="364"/>
                        <scope line="365">
                            <declaration name="component" type="Component" line="366"/>
                            <scope line="367"/>
                        </scope>
                    </scope>
                    <scope line="373">
                        <declaration name="compDim" type="Dimension" line="376"/>
                        <scope line="377">
                            <declaration name="component" type="Component" line="378"/>
                            <scope line="379"/>
                        </scope>
                    </scope>
                </method>
                <method name="preferredLayoutSize" type="Dimension" line="393">
                    <params>
                        <param name="parent" type="Container"/>
                    </params>
                    <declaration name="tb" type="JToolBar" line="394"/>
                    <declaration name="insets" type="Insets" line="395"/>
                    <declaration name="dim" type="Dimension" line="396"/>
                    <declaration name="context" type="SynthContext" line="397"/>
                    <scope line="399">
                        <declaration name="compDim" type="Dimension" line="402"/>
                        <scope line="403">
                            <declaration name="component" type="Component" line="404"/>
                            <scope line="405"/>
                        </scope>
                    </scope>
                    <scope line="411">
                        <declaration name="compDim" type="Dimension" line="414"/>
                        <scope line="415">
                            <declaration name="component" type="Component" line="416"/>
                            <scope line="417"/>
                        </scope>
                    </scope>
                </method>
                <method name="layoutContainer" type="void" line="431">
                    <params>
                        <param name="parent" type="Container"/>
                    </params>
                    <comment line="441">
                        JToolBar by default uses a somewhat modified BoxLayout as
                         its layout manager. For compatibility reasons, we want to
                         support Box &quot;glue&quot; as a way to move things around on the
                         toolbar. &quot;glue&quot; is represented in BoxLayout as a Box.Filler
                         with a minimum and preferred size of (0,0).
                         So what we do here is find the number of such glue fillers
                         and figure out how much space should be allocated to them.                        
                    </comment>
                    <comment line="457">
                        Note: contentRect does not take insets into account
                         since it is used for determining the bounds that are
                         passed to paintToolBarContentBackground().                        
                    </comment>
                    <comment line="465">
                        However, we do take the insets into account here for
                         the purposes of laying out the toolbar child components.                        
                    </comment>
                    <comment line="473">
                        we need to get the minimum width for laying things out
                         so that we can calculate how much empty space needs to
                         be distributed among the &quot;glue&quot;, if any                        
                    </comment>
                    <comment line="489">
                        Fill available height                        
                    </comment>
                    <comment line="493">
                        Center component vertically in the available space                        
                    </comment>
                    <comment line="497">
                        if the component is a &quot;glue&quot; component then add to its
                        width the extraSpacePerGlue it is due                        
                    </comment>
                    <comment line="508">
                        See notes above regarding the use of insets                        
                    </comment>
                    <comment line="518">
                        we need to get the minimum height for laying things out
                         so that we can calculate how much empty space needs to
                         be distributed among the &quot;glue&quot;, if any                        
                    </comment>
                    <comment line="534">
                        Fill available width                        
                    </comment>
                    <comment line="538">
                        Center component horizontally in the available space                        
                    </comment>
                    <comment line="542">
                        if the component is a &quot;glue&quot; component then add to its
                        height the extraSpacePerGlue it is due                        
                    </comment>
                    <declaration name="tb" type="JToolBar" line="432"/>
                    <declaration name="insets" type="Insets" line="433"/>
                    <declaration name="ltr" type="boolean" line="434"/>
                    <declaration name="context" type="SynthContext" line="435"/>
                    <declaration name="c" type="Component" line="437"/>
                    <declaration name="d" type="Dimension" line="438"/>
                    <declaration name="glueCount" type="int" line="447"/>
                    <scope line="448"/>
                    <scope line="452">
                        <declaration name="handleWidth" type="int" line="453"/>
                        <declaration name="x" type="int" line="466"/>
                        <declaration name="baseY" type="int" line="469"/>
                        <declaration name="baseH" type="int" line="470"/>
                        <declaration name="extraSpacePerGlue" type="int" line="475"/>
                        <scope line="476">
                            <declaration name="minWidth" type="int" line="477"/>
                        </scope>
                        <scope line="482">
                            <scope line="484">
                                <declaration name="y" type="int" line="486"/>
                                <scope line="487"/>
                                <scope line="491"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="503">
                        <declaration name="handleHeight" type="int" line="504"/>
                        <declaration name="baseX" type="int" line="513"/>
                        <declaration name="baseW" type="int" line="514"/>
                        <declaration name="y" type="int" line="515"/>
                        <declaration name="extraSpacePerGlue" type="int" line="520"/>
                        <scope line="521">
                            <declaration name="minHeight" type="int" line="522"/>
                        </scope>
                        <scope line="527">
                            <scope line="529">
                                <declaration name="x" type="int" line="531"/>
                                <scope line="532"/>
                                <scope line="536"/>
                            </scope>
                        </scope>
                    </scope>
                </method>
                <method name="isGlue" type="boolean" line="552">
                    <params>
                        <param name="c" type="Component"/>
                    </params>
                    <scope line="553">
                        <declaration name="f" type="Box.Filler" line="554"/>
                        <declaration name="min" type="Dimension" line="555"/>
                        <declaration name="pref" type="Dimension" line="556"/>
                    </scope>
                </method>
            </class>
        </class>
    </source>