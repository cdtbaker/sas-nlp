<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.plaf.metal">
        <import package="javax.swing.plaf"/>
        <import package="javax.swing"/>
        <import package="java.awt"/>
        <import package="java.awt.image"/>
        <import package="java.lang.ref"/>
        <import package="java.util"/>
        <import package="sun.swing.CachedPainter"/>
        <import package="sun.swing.ImageIconUIResource"/>
        <class name="MetalUtils" line="37">
            <comment line="164">
                Convenience function for determining ComponentOrientation.  Helps us
                 avoid having Munge directives throughout the code.                
            </comment>
            <comment line="186">
                                
            </comment>
            <comment line="187">
                Ocean specific stuff.                
            </comment>
            <comment line="188">
                                
            </comment>
            <javadoc line="37">
                This is a dumping ground for random stuff we want to use in several places.                
                <author>
                    Steve Wilson                    
                </author>
            </javadoc>
            <method name="drawFlush3DBorder" type="void" line="45">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="r" type="Rectangle"/>
                </params>
            </method>
            <javadoc line="49">
                This draws the &quot;Flush 3D Border&quot; which is used throughout the Metal L&amp;F                
            </javadoc>
            <method name="drawFlush3DBorder" type="void" line="52">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
            </method>
            <javadoc line="64">
                This draws a variant &quot;Flush 3D Border&quot;
                  It is used for things like pressed buttons.                
            </javadoc>
            <method name="drawPressed3DBorder" type="void" line="68">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="r" type="Rectangle"/>
                </params>
            </method>
            <method name="drawDisabledBorder" type="void" line="72">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
            </method>
            <javadoc line="79">
                This draws a variant &quot;Flush 3D Border&quot;
                  It is used for things like pressed buttons.                
            </javadoc>
            <method name="drawPressed3DBorder" type="void" line="83">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
            </method>
            <javadoc line="94">
                This draws a variant &quot;Flush 3D Border&quot;
                  It is used for things like active toggle buttons.
                  This is used rarely.                
            </javadoc>
            <method name="drawDark3DBorder" type="void" line="99">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="r" type="Rectangle"/>
                </params>
            </method>
            <javadoc line="103">
                This draws a variant &quot;Flush 3D Border&quot;
                  It is used for things like active toggle buttons.
                  This is used rarely.                
            </javadoc>
            <method name="drawDark3DBorder" type="void" line="108">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
            </method>
            <method name="drawButtonBorder" type="void" line="122">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="active" type="boolean"/>
                </params>
                <scope line="123"/>
                <scope line="125"/>
            </method>
            <method name="drawActiveButtonBorder" type="void" line="130">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
            </method>
            <method name="drawDefaultButtonBorder" type="void" line="140">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="active" type="boolean"/>
                </params>
            </method>
            <method name="drawDefaultButtonPressedBorder" type="void" line="150">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
            </method>
            <method name="isLeftToRight" type="boolean" line="167">
                <params>
                    <param name="c" type="Component"/>
                </params>
            </method>
            <method name="getInt" type="int" line="171">
                <params>
                    <param name="key" type="Object"/>
                    <param name="defaultValue" type="int"/>
                </params>
                <declaration name="value" type="Object" line="172"/>
                <scope line="174"/>
                <scope line="177">
                    <scope line="178"/>
                    <scope line="180"/>
                </scope>
            </method>
            <javadoc line="188">
                Draws a radial type gradient. The gradient will be drawn vertically if
                  &lt;code&gt;vertical&lt;/code&gt; is true, otherwise horizontally.
                  The UIManager key consists of five values:
                  r1 r2 c1 c2 c3. The gradient is broken down into four chunks drawn
                  in order from the origin.
                  &lt;ol&gt;
                  &lt;li&gt;Gradient r1 % of the size from c1 to c2
                  &lt;li&gt;Rectangle r2 % of the size in c2.
                  &lt;li&gt;Gradient r1 % of the size from c2 to c1
                  &lt;li&gt;The remaining size will be filled with a gradient from c1 to c3.
                  &lt;/ol&gt;                
                <param>
                    c Component rendering to                    
                </param>
                <param>
                    g Graphics to draw to.                    
                </param>
                <param>
                    key UIManager key used to look up gradient values.                    
                </param>
                <param>
                    x X coordinate to draw from                    
                </param>
                <param>
                    y Y coordinate to draw from                    
                </param>
                <param>
                    w Width to draw to                    
                </param>
                <param>
                    h Height to draw to                    
                </param>
                <param>
                    vertical Direction of the gradient                    
                </param>
                <return>
                    true if <code>key</code> exists, otherwise false.                    
                </return>
            </javadoc>
            <method name="drawGradient" type="boolean" line="212">
                <params>
                    <param name="c" type="Component"/>
                    <param name="g" type="Graphics"/>
                    <param name="key" type="String"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="vertical" type="boolean"/>
                </params>
                <declaration name="gradient" type="java.util.List" line="213"/>
                <scope line="214"/>
                <scope line="218"/>
            </method>
            <class name="GradientPainter" line="228">
                <extends class="CachedPainter"/>
                <comment line="236">
                    Size of images to create. For vertical gradients this is the width,                    
                </comment>
                <comment line="237">
                    otherwise it&apos;s the height.                    
                </comment>
                <declaration name="INSTANCE" type="GradientPainter" line="229"/>
                <javadoc line="229">
                    Instance used for painting.  This is the only instance that is
                      ever created.                    
                </javadoc>
                <declaration name="IMAGE_SIZE" type="int" line="237"/>
                <declaration name="w" type="int" line="239"/>
                <javadoc line="239">
                    This is the actual width we&apos;re painting in, or last painted to.                    
                </javadoc>
                <declaration name="h" type="int" line="243"/>
                <javadoc line="243">
                    This is the actual height we&apos;re painting in, or last painted to                    
                </javadoc>
                <method name="GradientPainter" type="constructor" line="249">
                    <params>
                        <param name="count" type="int"/>
                    </params>
                </method>
                <method name="paint" type="void" line="255">
                    <params>
                        <param name="c" type="Component"/>
                        <param name="g" type="Graphics2D"/>
                        <param name="gradient" type="java.util.List"/>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                        <param name="w" type="int"/>
                        <param name="h" type="int"/>
                        <param name="isVertical" type="boolean"/>
                    </params>
                    <declaration name="imageWidth" type="int" line="256"/>
                    <declaration name="imageHeight" type="int" line="257"/>
                    <scope line="258"/>
                    <scope line="262"/>
                    <scope line="266"/>
                </method>
                <method name="paintToImage" type="void" line="275">
                    <params>
                        <param name="c" type="Component"/>
                        <param name="image" type="Image"/>
                        <param name="g" type="Graphics"/>
                        <param name="w" type="int"/>
                        <param name="h" type="int"/>
                        <param name="args" type="Object[]"/>
                    </params>
                    <comment line="279">
                        Render to the VolatileImage                        
                    </comment>
                    <declaration name="g2" type="Graphics2D" line="276"/>
                    <declaration name="gradient" type="java.util.List" line="277"/>
                    <declaration name="isVertical" type="boolean" line="278"/>
                    <scope line="280"/>
                    <scope line="288"/>
                </method>
                <method name="paintImage" type="void" line="300">
                    <params>
                        <param name="c" type="Component"/>
                        <param name="g" type="Graphics"/>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                        <param name="imageW" type="int"/>
                        <param name="imageH" type="int"/>
                        <param name="image" type="Image"/>
                        <param name="args" type="Object[]"/>
                    </params>
                    <comment line="302">
                        Render to the screen                        
                    </comment>
                    <declaration name="isVertical" type="boolean" line="301"/>
                    <scope line="304">
                        <scope line="305">
                            <declaration name="tileSize" type="int" line="306"/>
                        </scope>
                    </scope>
                    <scope line="311">
                        <scope line="312">
                            <declaration name="tileSize" type="int" line="313"/>
                        </scope>
                    </scope>
                </method>
                <method name="drawVerticalGradient" type="void" line="323">
                    <params>
                        <param name="g" type="Graphics2D"/>
                        <param name="ratio1" type="float"/>
                        <param name="ratio2" type="float"/>
                        <param name="c1" type="Color"/>
                        <param name="c2" type="Color"/>
                        <param name="c3" type="Color"/>
                        <param name="w" type="int"/>
                        <param name="h" type="int"/>
                    </params>
                    <declaration name="mid" type="int" line="324"/>
                    <declaration name="mid2" type="int" line="325"/>
                    <scope line="326"/>
                    <scope line="331"/>
                    <scope line="335"/>
                    <scope line="340"/>
                </method>
                <method name="drawHorizontalGradient" type="void" line="349">
                    <params>
                        <param name="g" type="Graphics2D"/>
                        <param name="ratio1" type="float"/>
                        <param name="ratio2" type="float"/>
                        <param name="c1" type="Color"/>
                        <param name="c2" type="Color"/>
                        <param name="c3" type="Color"/>
                        <param name="w" type="int"/>
                        <param name="h" type="int"/>
                    </params>
                    <declaration name="mid" type="int" line="350"/>
                    <declaration name="mid2" type="int" line="351"/>
                    <scope line="352"/>
                    <scope line="357"/>
                    <scope line="361"/>
                    <scope line="366"/>
                </method>
                <method name="getGradient" type="GradientPaint" line="375">
                    <params>
                        <param name="x1" type="float"/>
                        <param name="y1" type="float"/>
                        <param name="c1" type="Color"/>
                        <param name="x2" type="float"/>
                        <param name="y2" type="float"/>
                        <param name="c2" type="Color"/>
                    </params>
                </method>
            </class>
            <javadoc line="381">
                Returns true if the specified widget is in a toolbar.                
            </javadoc>
            <method name="isToolBarButton" type="boolean" line="384">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <method name="getOceanToolBarIcon" type="Icon" line="388">
                <params>
                    <param name="i" type="Image"/>
                </params>
                <declaration name="prod" type="ImageProducer" line="389"/>
            </method>
            <method name="getOceanDisabledButtonIcon" type="Icon" line="394">
                <params>
                    <param name="image" type="Image"/>
                </params>
                <declaration name="range" type="Object[]" line="395"/>
                <declaration name="min" type="int" line="396"/>
                <declaration name="max" type="int" line="397"/>
                <scope line="398"/>
                <declaration name="prod" type="ImageProducer" line="402"/>
            </method>
            <class name="OceanDisabledButtonImageFilter" line="410">
                <extends class="RGBImageFilter"/>
                <comment line="236">
                    Size of images to create. For vertical gradients this is the width,                    
                </comment>
                <comment line="237">
                    otherwise it&apos;s the height.                    
                </comment>
                <javadoc line="410">
                    Used to create a disabled Icon with the ocean look.                    
                </javadoc>
                <declaration name="min" type="float" line="414"/>
                <declaration name="factor" type="float" line="415"/>
                <method name="OceanDisabledButtonImageFilter" type="constructor" line="417">
                    <params>
                        <param name="min" type="int"/>
                        <param name="max" type="int"/>
                    </params>
                </method>
                <method name="filterRGB" type="int" line="423">
                    <params>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                        <param name="rgb" type="int"/>
                    </params>
                    <comment line="424">
                        Coefficients are from the sRGB color space:                        
                    </comment>
                    <declaration name="gray" type="int" line="425"/>
                </method>
            </class>
            <class name="OceanToolBarImageFilter" line="435">
                <extends class="RGBImageFilter"/>
                <comment line="236">
                    Size of images to create. For vertical gradients this is the width,                    
                </comment>
                <comment line="237">
                    otherwise it&apos;s the height.                    
                </comment>
                <javadoc line="435">
                    Used to create the rollover icons with the ocean look.                    
                </javadoc>
                <method name="OceanToolBarImageFilter" type="constructor" line="439"/>
                <method name="filterRGB" type="int" line="443">
                    <params>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                        <param name="rgb" type="int"/>
                    </params>
                    <declaration name="r" type="int" line="444"/>
                    <declaration name="g" type="int" line="445"/>
                    <declaration name="b" type="int" line="446"/>
                    <declaration name="gray" type="int" line="447"/>
                </method>
            </class>
        </class>
    </source>