<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.plaf.metal">
        <import package="javax.swing.plaf"/>
        <import package="javax.swing"/>
        <import package="java.awt"/>
        <import package="java.awt.image"/>
        <import package="java.lang.ref"/>
        <import package="java.util"/>
        <import package="sun.swing.CachedPainter"/>
        <import package="sun.swing.ImageIconUIResource"/>
        <class name="MetalUtils" line="10">
            <javadoc line="10">
                This is a dumping ground for random stuff we want to use in several places.                
                <author>
                    Steve Wilson                    
                </author>
            </javadoc>
            <method name="drawFlush3DBorder" type="void" line="15">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="r" type="Rectangle"/>
                </params>
            </method>
            <javadoc line="18">
                This draws the &quot;Flush 3D Border&quot; which is used throughout the Metal L&amp;F                
            </javadoc>
            <method name="drawFlush3DBorder" type="void" line="21">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
            </method>
            <javadoc line="32">
                This draws a variant &quot;Flush 3D Border&quot;
                  It is used for things like pressed buttons.                
            </javadoc>
            <method name="drawPressed3DBorder" type="void" line="36">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="r" type="Rectangle"/>
                </params>
            </method>
            <method name="drawDisabledBorder" type="void" line="39">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
            </method>
            <javadoc line="45">
                This draws a variant &quot;Flush 3D Border&quot;
                  It is used for things like pressed buttons.                
            </javadoc>
            <method name="drawPressed3DBorder" type="void" line="49">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
            </method>
            <javadoc line="57">
                This draws a variant &quot;Flush 3D Border&quot;
                  It is used for things like active toggle buttons.
                  This is used rarely.                
            </javadoc>
            <method name="drawDark3DBorder" type="void" line="62">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="r" type="Rectangle"/>
                </params>
            </method>
            <javadoc line="65">
                This draws a variant &quot;Flush 3D Border&quot;
                  It is used for things like active toggle buttons.
                  This is used rarely.                
            </javadoc>
            <method name="drawDark3DBorder" type="void" line="70">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
            </method>
            <method name="drawButtonBorder" type="void" line="81">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="active" type="boolean"/>
                </params>
                <scope line="82"/>
                <scope line="85"/>
            </method>
            <method name="drawActiveButtonBorder" type="void" line="89">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
            </method>
            <method name="drawDefaultButtonBorder" type="void" line="98">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="active" type="boolean"/>
                </params>
            </method>
            <method name="drawDefaultButtonPressedBorder" type="void" line="107">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
            </method>
            <method name="isLeftToRight" type="boolean" line="119">
                <params>
                    <param name="c" type="Component"/>
                </params>
            </method>
            <method name="getInt" type="int" line="122">
                <params>
                    <param name="key" type="Object"/>
                    <param name="defaultValue" type="int"/>
                </params>
                <declaration name="value" type="Object" line="123"/>
                <scope line="124"/>
                <scope line="127">
                    <scope line="128"/>
                    <scope line="131"/>
                </scope>
            </method>
            <javadoc line="136">
                Draws a radial type gradient. The gradient will be drawn vertically if
                  &lt;code&gt;vertical&lt;/code&gt; is true, otherwise horizontally.
                  The UIManager key consists of five values:
                  r1 r2 c1 c2 c3. The gradient is broken down into four chunks drawn
                  in order from the origin.
                  &lt;ol&gt;
                  &lt;li&gt;Gradient r1 % of the size from c1 to c2
                  &lt;li&gt;Rectangle r2 % of the size in c2.
                  &lt;li&gt;Gradient r1 % of the size from c2 to c1
                  &lt;li&gt;The remaining size will be filled with a gradient from c1 to c3.
                  &lt;/ol&gt;                
                <param>
                    c Component rendering to                    
                </param>
                <param>
                    g Graphics to draw to.                    
                </param>
                <param>
                    key UIManager key used to look up gradient values.                    
                </param>
                <param>
                    x X coordinate to draw from                    
                </param>
                <param>
                    y Y coordinate to draw from                    
                </param>
                <param>
                    w Width to draw to                    
                </param>
                <param>
                    h Height to draw to                    
                </param>
                <param>
                    vertical Direction of the gradient                    
                </param>
                <return>
                    true if &lt;code&gt;key&lt;/code&gt; exists, otherwise false.                    
                </return>
            </javadoc>
            <method name="drawGradient" type="boolean" line="158">
                <params>
                    <param name="c" type="Component"/>
                    <param name="g" type="Graphics"/>
                    <param name="key" type="String"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="vertical" type="boolean"/>
                </params>
                <declaration name="gradient" type="java.util.List" line="159"/>
                <scope line="160"/>
                <scope line="163"/>
            </method>
            <class name="GradientPainter" line="169">
                <extends class="CachedPainter"/>
                <declaration name="INSTANCE" type="GradientPainter" line="170"/>
                <javadoc line="170">
                    Instance used for painting.  This is the only instance that is
                      ever created.                    
                </javadoc>
                <declaration name="IMAGE_SIZE" type="int" line="175"/>
                <declaration name="w" type="int" line="176"/>
                <javadoc line="176">
                    This is the actual width we&apos;re painting in, or last painted to.                    
                </javadoc>
                <declaration name="h" type="int" line="180"/>
                <javadoc line="180">
                    This is the actual height we&apos;re painting in, or last painted to                    
                </javadoc>
                <method name="GradientPainter" type="constructor" line="184">
                    <params>
                        <param name="count" type="int"/>
                    </params>
                </method>
                <method name="paint" type="void" line="187">
                    <params>
                        <param name="c" type="Component"/>
                        <param name="g" type="Graphics2D"/>
                        <param name="gradient" type="java.util.List"/>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                        <param name="w" type="int"/>
                        <param name="h" type="int"/>
                        <param name="isVertical" type="boolean"/>
                    </params>
                    <declaration name="imageWidth" type="int" line="188"/>
                    <declaration name="imageHeight" type="int" line="189"/>
                    <scope line="190"/>
                    <scope line="194"/>
                    <scope line="198"/>
                </method>
                <method name="paintToImage" type="void" line="204">
                    <params>
                        <param name="c" type="Component"/>
                        <param name="image" type="Image"/>
                        <param name="g" type="Graphics"/>
                        <param name="w" type="int"/>
                        <param name="h" type="int"/>
                        <param name="args" type="Object[]"/>
                    </params>
                    <declaration name="g2" type="Graphics2D" line="205"/>
                    <declaration name="gradient" type="java.util.List" line="206"/>
                    <declaration name="isVertical" type="boolean" line="207"/>
                    <scope line="208"/>
                    <scope line="211"/>
                </method>
                <method name="paintImage" type="void" line="215">
                    <params>
                        <param name="c" type="Component"/>
                        <param name="g" type="Graphics"/>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                        <param name="imageW" type="int"/>
                        <param name="imageH" type="int"/>
                        <param name="image" type="Image"/>
                        <param name="args" type="Object[]"/>
                    </params>
                    <declaration name="isVertical" type="boolean" line="216"/>
                    <scope line="218">
                        <scope line="219">
                            <declaration name="tileSize" type="int" line="220"/>
                        </scope>
                    </scope>
                    <scope line="224">
                        <scope line="225">
                            <declaration name="tileSize" type="int" line="226"/>
                        </scope>
                    </scope>
                </method>
                <method name="drawVerticalGradient" type="void" line="232">
                    <params>
                        <param name="g" type="Graphics2D"/>
                        <param name="ratio1" type="float"/>
                        <param name="ratio2" type="float"/>
                        <param name="c1" type="Color"/>
                        <param name="c2" type="Color"/>
                        <param name="c3" type="Color"/>
                        <param name="w" type="int"/>
                        <param name="h" type="int"/>
                    </params>
                    <declaration name="mid" type="int" line="233"/>
                    <declaration name="mid2" type="int" line="234"/>
                    <scope line="235"/>
                    <scope line="239"/>
                    <scope line="243"/>
                    <scope line="247"/>
                </method>
                <method name="drawHorizontalGradient" type="void" line="252">
                    <params>
                        <param name="g" type="Graphics2D"/>
                        <param name="ratio1" type="float"/>
                        <param name="ratio2" type="float"/>
                        <param name="c1" type="Color"/>
                        <param name="c2" type="Color"/>
                        <param name="c3" type="Color"/>
                        <param name="w" type="int"/>
                        <param name="h" type="int"/>
                    </params>
                    <declaration name="mid" type="int" line="253"/>
                    <declaration name="mid2" type="int" line="254"/>
                    <scope line="255"/>
                    <scope line="259"/>
                    <scope line="263"/>
                    <scope line="267"/>
                </method>
                <method name="getGradient" type="GradientPaint" line="272">
                    <params>
                        <param name="x1" type="float"/>
                        <param name="y1" type="float"/>
                        <param name="c1" type="Color"/>
                        <param name="x2" type="float"/>
                        <param name="y2" type="float"/>
                        <param name="c2" type="Color"/>
                    </params>
                </method>
            </class>
            <javadoc line="276">
                Returns true if the specified widget is in a toolbar.                
            </javadoc>
            <method name="isToolBarButton" type="boolean" line="279">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <method name="getOceanToolBarIcon" type="Icon" line="282">
                <params>
                    <param name="i" type="Image"/>
                </params>
                <declaration name="prod" type="ImageProducer" line="283"/>
            </method>
            <method name="getOceanDisabledButtonIcon" type="Icon" line="286">
                <params>
                    <param name="image" type="Image"/>
                </params>
                <declaration name="range" type="Object[]" line="287"/>
                <declaration name="min" type="int" line="288"/>
                <declaration name="max" type="int" line="289"/>
                <scope line="290"/>
                <declaration name="prod" type="ImageProducer" line="294"/>
            </method>
            <class name="OceanDisabledButtonImageFilter" line="297">
                <extends class="RGBImageFilter"/>
                <javadoc line="297">
                    Used to create a disabled Icon with the ocean look.                    
                </javadoc>
                <declaration name="min" type="float" line="301"/>
                <declaration name="factor" type="float" line="302"/>
                <method name="OceanDisabledButtonImageFilter" type="constructor" line="303">
                    <params>
                        <param name="min" type="int"/>
                        <param name="max" type="int"/>
                    </params>
                </method>
                <method name="filterRGB" type="int" line="308">
                    <params>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                        <param name="rgb" type="int"/>
                    </params>
                    <declaration name="gray" type="int" line="309"/>
                </method>
            </class>
            <class name="OceanToolBarImageFilter" line="313">
                <extends class="RGBImageFilter"/>
                <javadoc line="313">
                    Used to create the rollover icons with the ocean look.                    
                </javadoc>
                <method name="OceanToolBarImageFilter" type="constructor" line="317"/>
                <method name="filterRGB" type="int" line="320">
                    <params>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                        <param name="rgb" type="int"/>
                    </params>
                    <declaration name="r" type="int" line="321"/>
                    <declaration name="g" type="int" line="322"/>
                    <declaration name="b" type="int" line="323"/>
                    <declaration name="gray" type="int" line="324"/>
                </method>
            </class>
        </class>
    </source>