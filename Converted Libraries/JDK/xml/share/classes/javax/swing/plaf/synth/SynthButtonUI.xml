<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.plaf.synth">
        <import package="javax.swing"/>
        <import package="java.awt"/>
        <import package="java.beans"/>
        <import package="javax.swing.plaf"/>
        <import package="javax.swing.plaf.basic.BasicButtonUI"/>
        <import package="javax.swing.plaf.basic.BasicHTML"/>
        <import package="javax.swing.text.View"/>
        <class name="SynthButtonUI" line="9">
            <extends class="BasicButtonUI"/>
            <implements interface="PropertyChangeListener"/>
            <implements interface="SynthUI"/>
            <javadoc line="9">
                Provides the Synth L&amp;F UI delegate for{@link javax.swing.JButton}.                
                <author>
                    Scott Violet                    
                </author>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <declaration name="style" type="SynthStyle" line="15"/>
            <javadoc line="16">
                Creates a new UI object for the given component.                
                <param>
                    c component to create UI object for                    
                </param>
                <return>
                    the UI object                    
                </return>
            </javadoc>
            <method name="createUI" type="ComponentUI" line="21">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <javadoc line="24">
                @inheritDoc                
            </javadoc>
            <method name="installDefaults" type="void" line="27">
                <params>
                    <param name="b" type="AbstractButton"/>
                </params>
            </method>
            <javadoc line="31">
                @inheritDoc                
            </javadoc>
            <method name="installListeners" type="void" line="34">
                <params>
                    <param name="b" type="AbstractButton"/>
                </params>
            </method>
            <method name="updateStyle" type="void" line="38">
                <params>
                    <param name="b" type="AbstractButton"/>
                </params>
                <declaration name="context" type="SynthContext" line="39"/>
                <declaration name="oldStyle" type="SynthStyle" line="40"/>
                <scope line="42">
                    <scope line="43">
                        <declaration name="margin" type="Insets" line="44"/>
                        <scope line="45"/>
                    </scope>
                    <declaration name="value" type="Object" line="50"/>
                    <scope line="51"/>
                    <scope line="56"/>
                </scope>
            </method>
            <javadoc line="63">
                @inheritDoc                
            </javadoc>
            <method name="uninstallListeners" type="void" line="66">
                <params>
                    <param name="b" type="AbstractButton"/>
                </params>
            </method>
            <javadoc line="70">
                @inheritDoc                
            </javadoc>
            <method name="uninstallDefaults" type="void" line="73">
                <params>
                    <param name="b" type="AbstractButton"/>
                </params>
                <declaration name="context" type="SynthContext" line="74"/>
            </method>
            <javadoc line="79">
                @inheritDoc                
            </javadoc>
            <method name="getContext" type="SynthContext" line="82">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <method name="getContext" type="SynthContext" line="85">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="state" type="int"/>
                </params>
                <declaration name="region" type="Region" line="86"/>
            </method>
            <javadoc line="89">
                Returns the current state of the passed in &lt;code&gt;AbstractButton&lt;/code&gt;.                
            </javadoc>
            <method name="getComponentState" type="int" line="92">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <declaration name="state" type="int" line="93"/>
                <scope line="94"/>
                <scope line="97"/>
                <declaration name="button" type="AbstractButton" line="100"/>
                <declaration name="model" type="ButtonModel" line="101"/>
                <scope line="102">
                    <scope line="103"/>
                    <scope line="106"/>
                </scope>
                <scope line="110"/>
                <scope line="113"/>
                <scope line="116"/>
                <scope line="119"/>
            </method>
            <javadoc line="124">
                @inheritDoc                
            </javadoc>
            <method name="getBaseline" type="int" line="127">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <scope line="128"/>
                <scope line="131"/>
                <declaration name="b" type="AbstractButton" line="134"/>
                <declaration name="text" type="String" line="135"/>
                <scope line="136"/>
                <declaration name="i" type="Insets" line="139"/>
                <declaration name="viewRect" type="Rectangle" line="140"/>
                <declaration name="textRect" type="Rectangle" line="141"/>
                <declaration name="iconRect" type="Rectangle" line="142"/>
                <declaration name="context" type="SynthContext" line="147"/>
                <declaration name="fm" type="FontMetrics" line="148"/>
                <declaration name="view" type="View" line="150"/>
                <declaration name="baseline" type="int" line="151"/>
                <scope line="152">
                    <scope line="154"/>
                </scope>
                <scope line="158"/>
            </method>
            <javadoc line="164">
                Notifies this UI delegate to repaint the specified component.
                  This method paints the component background, then calls
                  the {@link #paint(SynthContext,Graphics)} method.
                  &lt;p&gt;In general, this method does not need to be overridden by subclasses.
                  All Look and Feel rendering code should reside in the {@code paint} method.                
                <param>
                    g the {@code Graphics} object used for painting                    
                </param>
                <param>
                    c the component being painted                    
                </param>
                <see>
                    #paint(SynthContext,Graphics)                    
                </see>
            </javadoc>
            <method name="update" type="void" line="174">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="c" type="JComponent"/>
                </params>
                <declaration name="context" type="SynthContext" line="175"/>
            </method>
            <javadoc line="181">
                Paints the specified component according to the Look and Feel.
                  &lt;p&gt;This method is not used by Synth Look and Feel.
                  Painting is handled by the {@link #paint(SynthContext,Graphics)} method.                
                <param>
                    g the {@code Graphics} object used for painting                    
                </param>
                <param>
                    c the component being painted                    
                </param>
                <see>
                    #paint(SynthContext,Graphics)                    
                </see>
            </javadoc>
            <method name="paint" type="void" line="189">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="c" type="JComponent"/>
                </params>
                <declaration name="context" type="SynthContext" line="190"/>
            </method>
            <javadoc line="194">
                Paints the specified component.                
                <param>
                    context context for the component being painted                    
                </param>
                <param>
                    g the {@code Graphics} object used for painting                    
                </param>
                <see>
                    #update(Graphics,JComponent)                    
                </see>
            </javadoc>
            <method name="paint" type="void" line="200">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="g" type="Graphics"/>
                </params>
                <declaration name="b" type="AbstractButton" line="201"/>
            </method>
            <method name="paintBackground" type="void" line="206">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="g" type="Graphics"/>
                    <param name="c" type="JComponent"/>
                </params>
                <scope line="207"/>
            </method>
            <javadoc line="211">
                @inheritDoc                
            </javadoc>
            <method name="paintBorder" type="void" line="214">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="g" type="Graphics"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
            </method>
            <javadoc line="217">
                Returns the default icon. This should not callback
                  to the JComponent.                
                <param>
                    b button the icon is associated with                    
                </param>
                <return>
                    default icon                    
                </return>
            </javadoc>
            <method name="getDefaultIcon" type="Icon" line="223">
                <params>
                    <param name="b" type="AbstractButton"/>
                </params>
                <declaration name="context" type="SynthContext" line="224"/>
                <declaration name="icon" type="Icon" line="225"/>
            </method>
            <javadoc line="229">
                Returns the Icon to use for painting the button. The icon is chosen with
                  respect to the current state of the button.                
                <param>
                    b button the icon is associated with                    
                </param>
                <return>
                    an icon                    
                </return>
            </javadoc>
            <method name="getIcon" type="Icon" line="235">
                <params>
                    <param name="b" type="AbstractButton"/>
                </params>
                <declaration name="icon" type="Icon" line="236"/>
                <declaration name="model" type="ButtonModel" line="237"/>
                <scope line="238"/>
                <scope line="241"/>
                <scope line="244"/>
                <scope line="247"/>
                <scope line="250"/>
                <scope line="253"/>
            </method>
            <javadoc line="258">
                This method will return the icon that should be used for a button.  We
                  only want to use the synth icon defined by the style if the specific
                  icon has not been defined for the button state and the backup icon is a
                  UIResource (we set it, not the developer).                
                <param>
                    b button                    
                </param>
                <param>
                    specificIcon icon returned from the button for the specific state                    
                </param>
                <param>
                    defaultIcon fallback icon                    
                </param>
                <param>
                    state the synth state of the button                    
                </param>
            </javadoc>
            <method name="getIcon" type="Icon" line="268">
                <params>
                    <param name="b" type="AbstractButton"/>
                    <param name="specificIcon" type="Icon"/>
                    <param name="defaultIcon" type="Icon"/>
                    <param name="state" type="int"/>
                </params>
                <declaration name="icon" type="Icon" line="269"/>
                <scope line="270">
                    <scope line="271">
                        <scope line="273"/>
                    </scope>
                    <scope line="277"/>
                </scope>
            </method>
            <method name="getSynthIcon" type="Icon" line="283">
                <params>
                    <param name="b" type="AbstractButton"/>
                    <param name="synthConstant" type="int"/>
                </params>
            </method>
            <method name="getEnabledIcon" type="Icon" line="286">
                <params>
                    <param name="b" type="AbstractButton"/>
                    <param name="defaultIcon" type="Icon"/>
                </params>
                <scope line="287"/>
            </method>
            <method name="getSelectedIcon" type="Icon" line="292">
                <params>
                    <param name="b" type="AbstractButton"/>
                    <param name="defaultIcon" type="Icon"/>
                </params>
            </method>
            <method name="getRolloverIcon" type="Icon" line="295">
                <params>
                    <param name="b" type="AbstractButton"/>
                    <param name="defaultIcon" type="Icon"/>
                </params>
                <declaration name="model" type="ButtonModel" line="296"/>
                <declaration name="icon" type="Icon" line="297"/>
                <scope line="298"/>
                <scope line="301"/>
            </method>
            <method name="getPressedIcon" type="Icon" line="306">
                <params>
                    <param name="b" type="AbstractButton"/>
                    <param name="defaultIcon" type="Icon"/>
                </params>
            </method>
            <method name="getSynthDisabledIcon" type="Icon" line="309">
                <params>
                    <param name="b" type="AbstractButton"/>
                    <param name="defaultIcon" type="Icon"/>
                </params>
                <declaration name="model" type="ButtonModel" line="310"/>
                <declaration name="icon" type="Icon" line="311"/>
                <scope line="312"/>
                <scope line="315"/>
            </method>
            <javadoc line="320">
                Returns the amount to shift the text/icon when painting.                
            </javadoc>
            <method name="getTextShiftOffset" type="int" line="323">
                <params>
                    <param name="state" type="SynthContext"/>
                </params>
                <declaration name="button" type="AbstractButton" line="324"/>
                <declaration name="model" type="ButtonModel" line="325"/>
                <scope line="326"/>
            </method>
            <javadoc line="331">
                @inheritDoc                
            </javadoc>
            <method name="getMinimumSize" type="Dimension" line="334">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <scope line="335"/>
                <declaration name="b" type="AbstractButton" line="338"/>
                <declaration name="ss" type="SynthContext" line="339"/>
                <declaration name="size" type="Dimension" line="340"/>
            </method>
            <javadoc line="344">
                @inheritDoc                
            </javadoc>
            <method name="getPreferredSize" type="Dimension" line="347">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <scope line="348"/>
                <declaration name="b" type="AbstractButton" line="351"/>
                <declaration name="ss" type="SynthContext" line="352"/>
                <declaration name="size" type="Dimension" line="353"/>
            </method>
            <javadoc line="357">
                @inheritDoc                
            </javadoc>
            <method name="getMaximumSize" type="Dimension" line="360">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <scope line="361"/>
                <declaration name="b" type="AbstractButton" line="364"/>
                <declaration name="ss" type="SynthContext" line="365"/>
                <declaration name="size" type="Dimension" line="366"/>
            </method>
            <javadoc line="370">
                Returns the Icon used in calculating the
                  preferred/minimum/maximum size.                
            </javadoc>
            <method name="getSizingIcon" type="Icon" line="374">
                <params>
                    <param name="b" type="AbstractButton"/>
                </params>
                <declaration name="icon" type="Icon" line="375"/>
                <scope line="376"/>
            </method>
            <javadoc line="381">
                @inheritDoc                
            </javadoc>
            <method name="propertyChange" type="void" line="384">
                <params>
                    <param name="e" type="PropertyChangeEvent"/>
                </params>
                <scope line="385"/>
            </method>
        </class>
    </source>