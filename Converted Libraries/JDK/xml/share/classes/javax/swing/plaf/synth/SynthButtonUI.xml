<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.plaf.synth">
        <import package="javax.swing"/>
        <import package="java.awt"/>
        <import package="java.beans"/>
        <import package="javax.swing.plaf"/>
        <import package="javax.swing.plaf.basic.BasicButtonUI"/>
        <import package="javax.swing.plaf.basic.BasicHTML"/>
        <import package="javax.swing.text.View"/>
        <class name="SynthButtonUI" line="36">
            <extends class="BasicButtonUI"/>
            <comment line="236">
                ********************************                
            </comment>
            <comment line="237">
                Paint Methods                
            </comment>
            <comment line="238">
                ********************************                
            </comment>
            <comment line="448">
                ********************************                
            </comment>
            <comment line="449">
                Layout Methods                
            </comment>
            <comment line="450">
                ********************************                
            </comment>
            <implements interface="PropertyChangeListener"/>
            <implements interface="SynthUI"/>
            <javadoc line="36">
                Provides the Synth L&amp;F UI delegate for{@link javax.swing.JButton}.                
                <author>
                    Scott Violet                    
                </author>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <declaration name="style" type="SynthStyle" line="45"/>
            <javadoc line="47">
                Creates a new UI object for the given component.                
                <param>
                    c component to create UI object for                    
                </param>
                <return>
                    the UI object                    
                </return>
            </javadoc>
            <method name="createUI" type="ComponentUI" line="53">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <javadoc line="57">
                @inheritDoc                
            </javadoc>
            <method name="installDefaults" type="void" line="61">
                <params>
                    <param name="b" type="AbstractButton"/>
                </params>
            </method>
            <javadoc line="67">
                @inheritDoc                
            </javadoc>
            <method name="installListeners" type="void" line="71">
                <params>
                    <param name="b" type="AbstractButton"/>
                </params>
            </method>
            <method name="updateStyle" type="void" line="76">
                <params>
                    <param name="b" type="AbstractButton"/>
                </params>
                <comment line="87">
                    Some places assume margins are non-null.                    
                </comment>
                <declaration name="context" type="SynthContext" line="77"/>
                <declaration name="oldStyle" type="SynthStyle" line="78"/>
                <scope line="80">
                    <scope line="82">
                        <declaration name="margin" type="Insets" line="83"/>
                        <scope line="86"/>
                    </scope>
                    <declaration name="value" type="Object" line="93"/>
                    <scope line="94"/>
                    <scope line="102"/>
                </scope>
            </method>
            <javadoc line="111">
                @inheritDoc                
            </javadoc>
            <method name="uninstallListeners" type="void" line="115">
                <params>
                    <param name="b" type="AbstractButton"/>
                </params>
            </method>
            <javadoc line="120">
                @inheritDoc                
            </javadoc>
            <method name="uninstallDefaults" type="void" line="124">
                <params>
                    <param name="b" type="AbstractButton"/>
                </params>
                <declaration name="context" type="SynthContext" line="125"/>
            </method>
            <javadoc line="132">
                @inheritDoc                
            </javadoc>
            <method name="getContext" type="SynthContext" line="136">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
            </method>
            <method name="getContext" type="SynthContext" line="140">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="state" type="int"/>
                </params>
                <declaration name="region" type="Region" line="141"/>
            </method>
            <javadoc line="146">
                Returns the current state of the passed in &lt;code&gt;AbstractButton&lt;/code&gt;.                
            </javadoc>
            <method name="getComponentState" type="int" line="149">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <declaration name="state" type="int" line="150"/>
                <scope line="152"/>
                <scope line="155"/>
                <declaration name="button" type="AbstractButton" line="158"/>
                <declaration name="model" type="ButtonModel" line="159"/>
                <scope line="161">
                    <scope line="162"/>
                    <scope line="165"/>
                </scope>
                <scope line="169"/>
                <scope line="172"/>
                <scope line="175"/>
                <scope line="178"/>
            </method>
            <javadoc line="184">
                @inheritDoc                
            </javadoc>
            <method name="getBaseline" type="int" line="188">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <comment line="210">
                    layout the text and icon                    
                </comment>
                <scope line="189"/>
                <scope line="192"/>
                <declaration name="b" type="AbstractButton" line="196"/>
                <declaration name="text" type="String" line="197"/>
                <scope line="198"/>
                <declaration name="i" type="Insets" line="201"/>
                <declaration name="viewRect" type="Rectangle" line="202"/>
                <declaration name="textRect" type="Rectangle" line="203"/>
                <declaration name="iconRect" type="Rectangle" line="204"/>
                <declaration name="context" type="SynthContext" line="211"/>
                <declaration name="fm" type="FontMetrics" line="212"/>
                <declaration name="view" type="View" line="219"/>
                <declaration name="baseline" type="int" line="220"/>
                <scope line="221">
                    <scope line="224"/>
                </scope>
                <scope line="228"/>
            </method>
            <javadoc line="239">
                Notifies this UI delegate to repaint the specified component.
                  This method paints the component background, then calls
                  the {@link #paint(SynthContext,Graphics)} method.
                  &lt;p&gt;In general, this method does not need to be overridden by subclasses.
                  All Look and Feel rendering code should reside in the {@code paint} method.                
                <param>
                    g the {@code Graphics} object used for painting                    
                </param>
                <param>
                    c the component being painted                    
                </param>
                <see>
                    #paint(SynthContext,Graphics)                    
                </see>
            </javadoc>
            <method name="update" type="void" line="252">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="c" type="JComponent"/>
                </params>
                <declaration name="context" type="SynthContext" line="253"/>
            </method>
            <javadoc line="261">
                Paints the specified component according to the Look and Feel.
                  &lt;p&gt;This method is not used by Synth Look and Feel.
                  Painting is handled by the {@link #paint(SynthContext,Graphics)} method.                
                <param>
                    g the {@code Graphics} object used for painting                    
                </param>
                <param>
                    c the component being painted                    
                </param>
                <see>
                    #paint(SynthContext,Graphics)                    
                </see>
            </javadoc>
            <method name="paint" type="void" line="271">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="c" type="JComponent"/>
                </params>
                <declaration name="context" type="SynthContext" line="272"/>
            </method>
            <javadoc line="278">
                Paints the specified component.                
                <param>
                    context context for the component being painted                    
                </param>
                <param>
                    g the {@code Graphics} object used for painting                    
                </param>
                <see>
                    #update(Graphics,JComponent)                    
                </see>
            </javadoc>
            <method name="paint" type="void" line="285">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="g" type="Graphics"/>
                </params>
                <declaration name="b" type="AbstractButton" line="286"/>
            </method>
            <method name="paintBackground" type="void" line="299">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="g" type="Graphics"/>
                    <param name="c" type="JComponent"/>
                </params>
                <scope line="300"/>
            </method>
            <javadoc line="307">
                @inheritDoc                
            </javadoc>
            <method name="paintBorder" type="void" line="312">
                <params>
                    <param name="context" type="SynthContext"/>
                    <param name="g" type="Graphics"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
            </method>
            <javadoc line="316">
                Returns the default icon. This should not callback
                  to the JComponent.                
                <param>
                    b button the icon is associated with                    
                </param>
                <return>
                    default icon                    
                </return>
            </javadoc>
            <method name="getDefaultIcon" type="Icon" line="323">
                <params>
                    <param name="b" type="AbstractButton"/>
                </params>
                <declaration name="context" type="SynthContext" line="324"/>
                <declaration name="icon" type="Icon" line="325"/>
            </method>
            <javadoc line="330">
                Returns the Icon to use for painting the button. The icon is chosen with
                  respect to the current state of the button.                
                <param>
                    b button the icon is associated with                    
                </param>
                <return>
                    an icon                    
                </return>
            </javadoc>
            <method name="getIcon" type="Icon" line="337">
                <params>
                    <param name="b" type="AbstractButton"/>
                </params>
                <declaration name="icon" type="Icon" line="338"/>
                <declaration name="model" type="ButtonModel" line="339"/>
                <scope line="341"/>
                <scope line="343"/>
                <scope line="345"/>
                <scope line="347"/>
                <scope line="349"/>
                <scope line="352"/>
            </method>
            <javadoc line="358">
                This method will return the icon that should be used for a button.  We
                  only want to use the synth icon defined by the style if the specific
                  icon has not been defined for the button state and the backup icon is a
                  UIResource (we set it, not the developer).                
                <param>
                    b button                    
                </param>
                <param>
                    specificIcon icon returned from the button for the specific state                    
                </param>
                <param>
                    defaultIcon fallback icon                    
                </param>
                <param>
                    state the synth state of the button                    
                </param>
            </javadoc>
            <method name="getIcon" type="Icon" line="370">
                <params>
                    <param name="b" type="AbstractButton"/>
                    <param name="specificIcon" type="Icon"/>
                    <param name="defaultIcon" type="Icon"/>
                    <param name="state" type="int"/>
                </params>
                <declaration name="icon" type="Icon" line="371"/>
                <scope line="372">
                    <scope line="373">
                        <scope line="375"/>
                    </scope>
                    <scope line="378"/>
                </scope>
            </method>
            <method name="getSynthIcon" type="Icon" line="385">
                <params>
                    <param name="b" type="AbstractButton"/>
                    <param name="synthConstant" type="int"/>
                </params>
            </method>
            <method name="getEnabledIcon" type="Icon" line="389">
                <params>
                    <param name="b" type="AbstractButton"/>
                    <param name="defaultIcon" type="Icon"/>
                </params>
                <scope line="390"/>
            </method>
            <method name="getSelectedIcon" type="Icon" line="396">
                <params>
                    <param name="b" type="AbstractButton"/>
                    <param name="defaultIcon" type="Icon"/>
                </params>
            </method>
            <method name="getRolloverIcon" type="Icon" line="401">
                <params>
                    <param name="b" type="AbstractButton"/>
                    <param name="defaultIcon" type="Icon"/>
                </params>
                <declaration name="model" type="ButtonModel" line="402"/>
                <declaration name="icon" type="Icon" line="403"/>
                <scope line="404"/>
                <scope line="407"/>
            </method>
            <method name="getPressedIcon" type="Icon" line="414">
                <params>
                    <param name="b" type="AbstractButton"/>
                    <param name="defaultIcon" type="Icon"/>
                </params>
            </method>
            <method name="getSynthDisabledIcon" type="Icon" line="419">
                <params>
                    <param name="b" type="AbstractButton"/>
                    <param name="defaultIcon" type="Icon"/>
                </params>
                <declaration name="model" type="ButtonModel" line="420"/>
                <declaration name="icon" type="Icon" line="421"/>
                <scope line="422"/>
                <scope line="425"/>
            </method>
            <javadoc line="432">
                Returns the amount to shift the text/icon when painting.                
            </javadoc>
            <method name="getTextShiftOffset" type="int" line="435">
                <params>
                    <param name="state" type="SynthContext"/>
                </params>
                <declaration name="button" type="AbstractButton" line="436"/>
                <declaration name="model" type="ButtonModel" line="437"/>
                <scope line="440"/>
            </method>
            <javadoc line="451">
                @inheritDoc                
            </javadoc>
            <method name="getMinimumSize" type="Dimension" line="455">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <scope line="456"/>
                <declaration name="b" type="AbstractButton" line="459"/>
                <declaration name="ss" type="SynthContext" line="460"/>
                <declaration name="size" type="Dimension" line="461"/>
            </method>
            <javadoc line="472">
                @inheritDoc                
            </javadoc>
            <method name="getPreferredSize" type="Dimension" line="476">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <scope line="477"/>
                <declaration name="b" type="AbstractButton" line="480"/>
                <declaration name="ss" type="SynthContext" line="481"/>
                <declaration name="size" type="Dimension" line="482"/>
            </method>
            <javadoc line="493">
                @inheritDoc                
            </javadoc>
            <method name="getMaximumSize" type="Dimension" line="497">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <scope line="498"/>
                <declaration name="b" type="AbstractButton" line="502"/>
                <declaration name="ss" type="SynthContext" line="503"/>
                <declaration name="size" type="Dimension" line="504"/>
            </method>
            <javadoc line="515">
                Returns the Icon used in calculating the
                  preferred/minimum/maximum size.                
            </javadoc>
            <method name="getSizingIcon" type="Icon" line="519">
                <params>
                    <param name="b" type="AbstractButton"/>
                </params>
                <declaration name="icon" type="Icon" line="520"/>
                <scope line="521"/>
            </method>
            <javadoc line="527">
                @inheritDoc                
            </javadoc>
            <method name="propertyChange" type="void" line="531">
                <params>
                    <param name="e" type="PropertyChangeEvent"/>
                </params>
                <scope line="532"/>
            </method>
        </class>
    </source>