<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.plaf.metal">
        <import package="sun.swing.SwingUtilities2"/>
        <import package="sun.awt.SunToolkit"/>
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="java.beans"/>
        <import package="javax.swing"/>
        <import package="javax.swing.border"/>
        <import package="javax.swing.event.InternalFrameEvent"/>
        <import package="javax.swing.plaf"/>
        <import package="javax.swing.plaf.basic"/>
        <import package="java.util.Locale"/>
        <import package="javax.accessibility"/>
        <class name="MetalTitlePane" line="42">
            <extends class="JComponent"/>
            <comment line="150">
                Colors                
            </comment>
            <comment line="160">
                Bumps                
            </comment>
            <javadoc line="42">
                Class that manages a JLF awt.Window-descendant class&apos;s title bar.
                  &lt;p&gt;
                  This class assumes it will be created with a particular window
                  decoration style, and that if the style changes, a new one will
                  be created.                
                <author>
                    Terry Kellerman                    
                </author>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="handyEmptyBorder" type="Border" line="53"/>
            <declaration name="IMAGE_HEIGHT" type="int" line="54"/>
            <declaration name="IMAGE_WIDTH" type="int" line="55"/>
            <declaration name="propertyChangeListener" type="PropertyChangeListener" line="57"/>
            <javadoc line="57">
                PropertyChangeListener added to the JRootPane.                
            </javadoc>
            <declaration name="menuBar" type="JMenuBar" line="62"/>
            <javadoc line="62">
                JMenuBar, typically renders the system menu items.                
            </javadoc>
            <declaration name="closeAction" type="Action" line="66"/>
            <javadoc line="66">
                Action used to close the Window.                
            </javadoc>
            <declaration name="iconifyAction" type="Action" line="71"/>
            <javadoc line="71">
                Action used to iconify the Frame.                
            </javadoc>
            <declaration name="restoreAction" type="Action" line="76"/>
            <javadoc line="76">
                Action to restore the Frame size.                
            </javadoc>
            <declaration name="maximizeAction" type="Action" line="81"/>
            <javadoc line="81">
                Action to restore the Frame size.                
            </javadoc>
            <declaration name="toggleButton" type="JButton" line="86"/>
            <javadoc line="86">
                Button used to maximize or restore the Frame.                
            </javadoc>
            <declaration name="iconifyButton" type="JButton" line="91"/>
            <javadoc line="91">
                Button used to maximize or restore the Frame.                
            </javadoc>
            <declaration name="closeButton" type="JButton" line="96"/>
            <javadoc line="96">
                Button used to maximize or restore the Frame.                
            </javadoc>
            <declaration name="maximizeIcon" type="Icon" line="101"/>
            <javadoc line="101">
                Icon used for toggleButton when window is normal size.                
            </javadoc>
            <declaration name="minimizeIcon" type="Icon" line="106"/>
            <javadoc line="106">
                Icon used for toggleButton when window is maximized.                
            </javadoc>
            <declaration name="systemIcon" type="Image" line="111"/>
            <javadoc line="111">
                Image used for the system menu icon                
            </javadoc>
            <declaration name="windowListener" type="WindowListener" line="116"/>
            <javadoc line="116">
                Listens for changes in the state of the Window listener to update
                  the state of the widgets.                
            </javadoc>
            <declaration name="window" type="Window" line="122"/>
            <javadoc line="122">
                Window we&apos;re currently in.                
            </javadoc>
            <declaration name="rootPane" type="JRootPane" line="127"/>
            <javadoc line="127">
                JRootPane rendering for.                
            </javadoc>
            <declaration name="buttonsWidth" type="int" line="132"/>
            <javadoc line="132">
                Room remaining in title for bumps.                
            </javadoc>
            <declaration name="state" type="int" line="137"/>
            <javadoc line="137">
                Buffered Frame.state property. As state isn&apos;t bound, this is kept
                  to determine when to avoid updating widgets.                
            </javadoc>
            <declaration name="rootPaneUI" type="MetalRootPaneUI" line="143"/>
            <javadoc line="143">
                MetalRootPaneUI that created us.                
            </javadoc>
            <declaration name="inactiveBackground" type="Color" line="150"/>
            <declaration name="inactiveForeground" type="Color" line="151"/>
            <declaration name="inactiveShadow" type="Color" line="152"/>
            <declaration name="activeBumpsHighlight" type="Color" line="153"/>
            <declaration name="activeBumpsShadow" type="Color" line="154"/>
            <declaration name="activeBackground" type="Color" line="155"/>
            <declaration name="activeForeground" type="Color" line="156"/>
            <declaration name="activeShadow" type="Color" line="157"/>
            <declaration name="activeBumps" type="MetalBumps" line="160"/>
            <declaration name="inactiveBumps" type="MetalBumps" line="165"/>
            <method name="MetalTitlePane" type="constructor" line="172">
                <params>
                    <param name="root" type="JRootPane"/>
                    <param name="ui" type="MetalRootPaneUI"/>
                </params>
            </method>
            <javadoc line="185">
                Uninstalls the necessary state.                
            </javadoc>
            <method name="uninstall" type="void" line="188"/>
            <javadoc line="194">
                Installs the necessary listeners.                
            </javadoc>
            <method name="installListeners" type="void" line="197">
                <scope line="198"/>
            </method>
            <javadoc line="206">
                Uninstalls the necessary listeners.                
            </javadoc>
            <method name="uninstallListeners" type="void" line="209">
                <scope line="210"/>
            </method>
            <javadoc line="216">
                Returns the &lt;code&gt;WindowListener&lt;/code&gt; to add to the
                  &lt;code&gt;Window&lt;/code&gt;.                
            </javadoc>
            <method name="createWindowListener" type="WindowListener" line="220"/>
            <javadoc line="224">
                Returns the &lt;code&gt;PropertyChangeListener&lt;/code&gt; to install on
                  the &lt;code&gt;Window&lt;/code&gt;.                
            </javadoc>
            <method name="createWindowPropertyChangeListener" type="PropertyChangeListener" line="228"/>
            <javadoc line="232">
                Returns the &lt;code&gt;JRootPane&lt;/code&gt; this was created for.                
            </javadoc>
            <method name="getRootPane" type="JRootPane" line="235"/>
            <javadoc line="239">
                Returns the decoration style of the &lt;code&gt;JRootPane&lt;/code&gt;.                
            </javadoc>
            <method name="getWindowDecorationStyle" type="int" line="242"/>
            <method name="addNotify" type="void" line="246">
                <scope line="252">
                    <scope line="253"/>
                    <scope line="256"/>
                </scope>
            </method>
            <method name="removeNotify" type="void" line="265"/>
            <javadoc line="272">
                Adds any sub-Components contained in the &lt;code&gt;MetalTitlePane&lt;/code&gt;.                
            </javadoc>
            <method name="installSubcomponents" type="void" line="275">
                <declaration name="decorationStyle" type="int" line="276"/>
                <scope line="277"/>
                <scope line="291"/>
            </method>
            <javadoc line="298">
                Determines the Colors to draw with.                
            </javadoc>
            <method name="determineColors" type="void" line="301"/>
            <javadoc line="346">
                Installs the fonts and necessary properties on the MetalTitlePane.                
            </javadoc>
            <method name="installDefaults" type="void" line="349"/>
            <javadoc line="353">
                Uninstalls any previously installed UI values.                
            </javadoc>
            <method name="uninstallDefaults" type="void" line="356"/>
            <javadoc line="359">
                Returns the &lt;code&gt;JMenuBar&lt;/code&gt; displaying the appropriate
                  system menu items.                
            </javadoc>
            <method name="createMenuBar" type="JMenuBar" line="363"/>
            <javadoc line="371">
                Closes the Window.                
            </javadoc>
            <method name="close" type="void" line="374">
                <declaration name="window" type="Window" line="375"/>
                <scope line="377"/>
            </method>
            <javadoc line="383">
                Iconifies the Frame.                
            </javadoc>
            <method name="iconify" type="void" line="386">
                <declaration name="frame" type="Frame" line="387"/>
                <scope line="388"/>
            </method>
            <javadoc line="393">
                Maximizes the Frame.                
            </javadoc>
            <method name="maximize" type="void" line="396">
                <declaration name="frame" type="Frame" line="397"/>
                <scope line="398"/>
            </method>
            <javadoc line="403">
                Restores the Frame size.                
            </javadoc>
            <method name="restore" type="void" line="406">
                <declaration name="frame" type="Frame" line="407"/>
                <scope line="409"/>
                <scope line="413"/>
                <scope line="415"/>
            </method>
            <javadoc line="420">
                Create the &lt;code&gt;Action&lt;/code&gt;s that get associated with the
                  buttons and menu items.                
            </javadoc>
            <method name="createActions" type="void" line="424">
                <scope line="426"/>
            </method>
            <javadoc line="433">
                Returns the &lt;code&gt;JMenu&lt;/code&gt; displaying the appropriate menu items
                  for manipulating the Frame.                
            </javadoc>
            <method name="createMenu" type="JMenu" line="437">
                <declaration name="menu" type="JMenu" line="438"/>
                <scope line="439"/>
            </method>
            <javadoc line="445">
                Adds the necessary &lt;code&gt;JMenuItem&lt;/code&gt;s to the passed in menu.                
            </javadoc>
            <method name="addMenuItems" type="void" line="448">
                <params>
                    <param name="menu" type="JMenu"/>
                </params>
                <declaration name="locale" type="Locale" line="449"/>
                <declaration name="mi" type="JMenuItem" line="450"/>
                <declaration name="mnemonic" type="int" line="451"/>
                <scope line="453"/>
                <scope line="459"/>
                <scope line="464">
                    <scope line="468"/>
                </scope>
                <scope line="477"/>
            </method>
            <javadoc line="482">
                Returns a &lt;code&gt;JButton&lt;/code&gt; appropriate for placement on the
                  TitlePane.                
            </javadoc>
            <method name="createTitleButton" type="JButton" line="486">
                <declaration name="button" type="JButton" line="487"/>
            </method>
            <javadoc line="495">
                Creates the Buttons that will be placed on the TitlePane.                
            </javadoc>
            <method name="createButtons" type="void" line="498">
                <scope line="508"/>
            </method>
            <javadoc line="531">
                Returns the &lt;code&gt;LayoutManager&lt;/code&gt; that should be installed on
                  the &lt;code&gt;MetalTitlePane&lt;/code&gt;.                
            </javadoc>
            <method name="createLayout" type="LayoutManager" line="535"/>
            <javadoc line="539">
                Updates state dependant upon the Window&apos;s active state.                
            </javadoc>
            <method name="setActive" type="void" line="542">
                <params>
                    <param name="isActive" type="boolean"/>
                </params>
                <comment line="550">
                    Repaint the whole thing as the Borders that are used have                    
                </comment>
                <comment line="551">
                    different colors for active vs inactive                    
                </comment>
                <declaration name="activeB" type="Boolean" line="543"/>
                <scope line="546"/>
            </method>
            <javadoc line="555">
                Sets the state of the Window.                
            </javadoc>
            <method name="setState" type="void" line="558">
                <params>
                    <param name="state" type="int"/>
                </params>
            </method>
            <javadoc line="562">
                Sets the state of the window. If &lt;code&gt;updateRegardless&lt;/code&gt; is
                  true and the state has not changed, this will update anyway.                
            </javadoc>
            <method name="setState" type="void" line="566">
                <params>
                    <param name="state" type="int"/>
                    <param name="updateRegardless" type="boolean"/>
                </params>
                <comment line="585">
                    This is a croak, if state becomes bound, this can                    
                </comment>
                <comment line="586">
                    be nuked.                    
                </comment>
                <comment line="620">
                    Not contained in a Frame                    
                </comment>
                <declaration name="w" type="Window" line="567"/>
                <scope line="569">
                    <scope line="570"/>
                    <declaration name="frame" type="Frame" line="573"/>
                    <scope line="575">
                        <declaration name="rootPane" type="JRootPane" line="576"/>
                        <scope line="581"/>
                        <scope line="584"/>
                        <scope line="589">
                            <scope line="590"/>
                            <scope line="595"/>
                            <scope line="601"/>
                        </scope>
                        <scope line="609">
                            <scope line="612"/>
                        </scope>
                    </scope>
                    <scope line="619"/>
                </scope>
            </method>
            <javadoc line="634">
                Updates the toggle button to contain the Icon &lt;code&gt;icon&lt;/code&gt;, and
                  Action &lt;code&gt;action&lt;/code&gt;.                
            </javadoc>
            <method name="updateToggleButton" type="void" line="638">
                <params>
                    <param name="action" type="Action"/>
                    <param name="icon" type="Icon"/>
                </params>
            </method>
            <javadoc line="644">
                Returns the Frame rendering in. This will return null if the
                  &lt;code&gt;JRootPane&lt;/code&gt; is not contained in a &lt;code&gt;Frame&lt;/code&gt;.                
            </javadoc>
            <method name="getFrame" type="Frame" line="648">
                <declaration name="window" type="Window" line="649"/>
                <scope line="651"/>
            </method>
            <javadoc line="657">
                Returns the &lt;code&gt;Window&lt;/code&gt; the &lt;code&gt;JRootPane&lt;/code&gt; is
                  contained in. This will return null if there is no parent ancestor
                  of the &lt;code&gt;JRootPane&lt;/code&gt;.                
            </javadoc>
            <method name="getWindow" type="Window" line="662"/>
            <javadoc line="666">
                Returns the String to display as the title.                
            </javadoc>
            <method name="getTitle" type="String" line="669">
                <declaration name="w" type="Window" line="670"/>
                <scope line="672"/>
                <scope line="675"/>
            </method>
            <javadoc line="681">
                Renders the TitlePane.                
            </javadoc>
            <method name="paintComponent" type="void" line="684">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
                <comment line="685">
                    As state isn&apos;t bound, we need a convenience place to check                    
                </comment>
                <comment line="686">
                    if it has changed. Changing the state typically changes the                    
                </comment>
                <scope line="687"/>
                <declaration name="rootPane" type="JRootPane" line="690"/>
                <declaration name="window" type="Window" line="691"/>
                <declaration name="leftToRight" type="boolean" line="692"/>
                <declaration name="isSelected" type="boolean" line="695"/>
                <declaration name="width" type="int" line="696"/>
                <declaration name="height" type="int" line="697"/>
                <declaration name="background" type="Color" line="699"/>
                <declaration name="foreground" type="Color" line="700"/>
                <declaration name="darkShadow" type="Color" line="701"/>
                <declaration name="bumps" type="MetalBumps" line="703"/>
                <scope line="705"/>
                <scope line="710"/>
                <declaration name="xOffset" type="int" line="725"/>
                <scope line="727"/>
                <declaration name="theTitle" type="String" line="731"/>
                <scope line="732">
                    <declaration name="fm" type="FontMetrics" line="733"/>
                    <declaration name="yOffset" type="int" line="737"/>
                    <declaration name="rect" type="Rectangle" line="739"/>
                    <scope line="740"/>
                    <declaration name="titleW" type="int" line="743"/>
                    <scope line="745">
                        <scope line="746"/>
                    </scope>
                    <scope line="752"/>
                    <declaration name="titleLength" type="int" line="759"/>
                </scope>
                <declaration name="bumpXOffset" type="int" line="766"/>
                <declaration name="bumpLength" type="int" line="767"/>
                <scope line="768"/>
                <scope line="771"/>
                <declaration name="bumpYOffset" type="int" line="775"/>
                <declaration name="bumpHeight" type="int" line="776"/>
            </method>
            <class name="CloseAction" line="781">
                <extends class="AbstractAction"/>
                <javadoc line="781">
                    Actions used to &lt;code&gt;close&lt;/code&gt; the &lt;code&gt;Window&lt;/code&gt;.                    
                </javadoc>
                <method name="CloseAction" type="constructor" line="785"/>
                <method name="actionPerformed" type="void" line="790">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                </method>
            </class>
            <class name="IconifyAction" line="796">
                <extends class="AbstractAction"/>
                <javadoc line="796">
                    Actions used to &lt;code&gt;iconfiy&lt;/code&gt; the &lt;code&gt;Frame&lt;/code&gt;.                    
                </javadoc>
                <method name="IconifyAction" type="constructor" line="800"/>
                <method name="actionPerformed" type="void" line="805">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                </method>
            </class>
            <class name="RestoreAction" line="811">
                <extends class="AbstractAction"/>
                <javadoc line="811">
                    Actions used to &lt;code&gt;restore&lt;/code&gt; the &lt;code&gt;Frame&lt;/code&gt;.                    
                </javadoc>
                <method name="RestoreAction" type="constructor" line="815"/>
                <method name="actionPerformed" type="void" line="820">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                </method>
            </class>
            <class name="MaximizeAction" line="826">
                <extends class="AbstractAction"/>
                <javadoc line="826">
                    Actions used to &lt;code&gt;restore&lt;/code&gt; the &lt;code&gt;Frame&lt;/code&gt;.                    
                </javadoc>
                <method name="MaximizeAction" type="constructor" line="830"/>
                <method name="actionPerformed" type="void" line="835">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                </method>
            </class>
            <class name="SystemMenuBar" line="841">
                <extends class="JMenuBar"/>
                <javadoc line="841">
                    Class responsible for drawing the system menu. Looks up the
                      image to draw from the Frame associated with the
                      &lt;code&gt;JRootPane&lt;/code&gt;.                    
                </javadoc>
                <method name="paint" type="void" line="847">
                    <params>
                        <param name="g" type="Graphics"/>
                    </params>
                    <scope line="848"/>
                    <scope line="853"/>
                    <scope line="855">
                        <declaration name="icon" type="Icon" line="856"/>
                        <scope line="858"/>
                    </scope>
                </method>
                <method name="getMinimumSize" type="Dimension" line="863"/>
                <method name="getPreferredSize" type="Dimension" line="866">
                    <declaration name="size" type="Dimension" line="867"/>
                </method>
            </class>
            <class name="TitlePaneLayout" line="874">
                <implements interface="LayoutManager"/>
                <method name="addLayoutComponent" type="void" line="875">
                    <params>
                        <param name="name" type="String"/>
                        <param name="c" type="Component"/>
                    </params>
                </method>
                <method name="removeLayoutComponent" type="void" line="876">
                    <params>
                        <param name="c" type="Component"/>
                    </params>
                </method>
                <method name="preferredLayoutSize" type="Dimension" line="877">
                    <params>
                        <param name="c" type="Container"/>
                    </params>
                    <declaration name="height" type="int" line="878"/>
                </method>
                <method name="minimumLayoutSize" type="Dimension" line="882">
                    <params>
                        <param name="c" type="Container"/>
                    </params>
                </method>
                <method name="computeHeight" type="int" line="886">
                    <declaration name="fm" type="FontMetrics" line="887"/>
                    <declaration name="fontHeight" type="int" line="888"/>
                    <declaration name="iconHeight" type="int" line="890"/>
                    <scope line="891"/>
                    <declaration name="finalHeight" type="int" line="895"/>
                </method>
                <method name="layoutContainer" type="void" line="899">
                    <params>
                        <param name="c" type="Container"/>
                    </params>
                    <comment line="920">
                        assumes all buttons have the same dimensions                        
                    </comment>
                    <comment line="921">
                        these dimensions include the borders                        
                    </comment>
                    <declaration name="leftToRight" type="boolean" line="900"/>
                    <declaration name="w" type="int" line="904"/>
                    <declaration name="x" type="int" line="905"/>
                    <declaration name="y" type="int" line="906"/>
                    <declaration name="spacing" type="int" line="907"/>
                    <declaration name="buttonHeight" type="int" line="908"/>
                    <declaration name="buttonWidth" type="int" line="909"/>
                    <scope line="911"/>
                    <scope line="915"/>
                    <scope line="927"/>
                    <scope line="934"/>
                    <scope line="940">
                        <scope line="942">
                            <scope line="943">
                                <scope line="947"/>
                            </scope>
                        </scope>
                        <scope line="953">
                            <scope line="957"/>
                        </scope>
                    </scope>
                </method>
            </class>
            <class name="PropertyChangeHandler" line="968">
                <implements interface="PropertyChangeListener"/>
                <javadoc line="968">
                    PropertyChangeListener installed on the Window. Updates the necessary
                      state as the state of the Window changes.                    
                </javadoc>
                <method name="propertyChange" type="void" line="973">
                    <params>
                        <param name="pce" type="PropertyChangeEvent"/>
                    </params>
                    <comment line="976">
                        Frame.state isn&apos;t currently bound.                        
                    </comment>
                    <declaration name="name" type="String" line="974"/>
                    <scope line="977">
                        <declaration name="frame" type="Frame" line="978"/>
                        <scope line="980"/>
                        <scope line="983"/>
                    </scope>
                    <scope line="987"/>
                    <scope line="990"/>
                    <scope line="994"/>
                </method>
            </class>
            <javadoc line="1002">
                Update the image used for the system icon                
            </javadoc>
            <method name="updateSystemIcon" type="void" line="1005">
                <declaration name="window" type="Window" line="1006"/>
                <scope line="1007"/>
                <declaration name="icons" type="java.util.List&lt;Image&gt;" line="1011"/>
                <scope line="1014"/>
                <scope line="1017"/>
                <scope line="1020"/>
            </method>
            <class name="WindowHandler" line="1028">
                <extends class="WindowAdapter"/>
                <javadoc line="1028">
                    WindowListener installed on the Window, updates the state as necessary.                    
                </javadoc>
                <method name="windowActivated" type="void" line="1032">
                    <params>
                        <param name="ev" type="WindowEvent"/>
                    </params>
                </method>
                <method name="windowDeactivated" type="void" line="1036">
                    <params>
                        <param name="ev" type="WindowEvent"/>
                    </params>
                </method>
            </class>
        </class>
    </source>