<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.plaf.metal">
        <import package="sun.swing.SwingUtilities2"/>
        <import package="sun.awt.SunToolkit"/>
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="java.beans"/>
        <import package="javax.swing"/>
        <import package="javax.swing.border"/>
        <import package="javax.swing.event.InternalFrameEvent"/>
        <import package="javax.swing.plaf"/>
        <import package="javax.swing.plaf.basic"/>
        <import package="java.util.Locale"/>
        <import package="javax.accessibility"/>
        <class name="MetalTitlePane" line="14">
            <extends class="JComponent"/>
            <javadoc line="14">
                Class that manages a JLF awt.Window-descendant class&apos;s title bar.
                  &lt;p&gt;
                  This class assumes it will be created with a particular window
                  decoration style, and that if the style changes, a new one will
                  be created.                
                <author>
                    Terry Kellerman                    
                </author>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="handyEmptyBorder" type="Border" line="24"/>
            <declaration name="IMAGE_HEIGHT" type="int" line="25"/>
            <declaration name="IMAGE_WIDTH" type="int" line="26"/>
            <declaration name="propertyChangeListener" type="PropertyChangeListener" line="27"/>
            <javadoc line="27">
                PropertyChangeListener added to the JRootPane.                
            </javadoc>
            <declaration name="menuBar" type="JMenuBar" line="31"/>
            <javadoc line="31">
                JMenuBar, typically renders the system menu items.                
            </javadoc>
            <declaration name="closeAction" type="Action" line="35"/>
            <javadoc line="35">
                Action used to close the Window.                
            </javadoc>
            <declaration name="iconifyAction" type="Action" line="39"/>
            <javadoc line="39">
                Action used to iconify the Frame.                
            </javadoc>
            <declaration name="restoreAction" type="Action" line="43"/>
            <javadoc line="43">
                Action to restore the Frame size.                
            </javadoc>
            <declaration name="maximizeAction" type="Action" line="47"/>
            <javadoc line="47">
                Action to restore the Frame size.                
            </javadoc>
            <declaration name="toggleButton" type="JButton" line="51"/>
            <javadoc line="51">
                Button used to maximize or restore the Frame.                
            </javadoc>
            <declaration name="iconifyButton" type="JButton" line="55"/>
            <javadoc line="55">
                Button used to maximize or restore the Frame.                
            </javadoc>
            <declaration name="closeButton" type="JButton" line="59"/>
            <javadoc line="59">
                Button used to maximize or restore the Frame.                
            </javadoc>
            <declaration name="maximizeIcon" type="Icon" line="63"/>
            <javadoc line="63">
                Icon used for toggleButton when window is normal size.                
            </javadoc>
            <declaration name="minimizeIcon" type="Icon" line="67"/>
            <javadoc line="67">
                Icon used for toggleButton when window is maximized.                
            </javadoc>
            <declaration name="systemIcon" type="Image" line="71"/>
            <javadoc line="71">
                Image used for the system menu icon                
            </javadoc>
            <declaration name="windowListener" type="WindowListener" line="75"/>
            <javadoc line="75">
                Listens for changes in the state of the Window listener to update
                  the state of the widgets.                
            </javadoc>
            <declaration name="window" type="Window" line="80"/>
            <javadoc line="80">
                Window we&apos;re currently in.                
            </javadoc>
            <declaration name="rootPane" type="JRootPane" line="84"/>
            <javadoc line="84">
                JRootPane rendering for.                
            </javadoc>
            <declaration name="buttonsWidth" type="int" line="88"/>
            <javadoc line="88">
                Room remaining in title for bumps.                
            </javadoc>
            <declaration name="state" type="int" line="92"/>
            <javadoc line="92">
                Buffered Frame.state property. As state isn&apos;t bound, this is kept
                  to determine when to avoid updating widgets.                
            </javadoc>
            <declaration name="rootPaneUI" type="MetalRootPaneUI" line="97"/>
            <javadoc line="97">
                MetalRootPaneUI that created us.                
            </javadoc>
            <declaration name="inactiveBackground" type="Color" line="101"/>
            <declaration name="inactiveForeground" type="Color" line="102"/>
            <declaration name="inactiveShadow" type="Color" line="103"/>
            <declaration name="activeBumpsHighlight" type="Color" line="104"/>
            <declaration name="activeBumpsShadow" type="Color" line="105"/>
            <declaration name="activeBackground" type="Color" line="106"/>
            <declaration name="activeForeground" type="Color" line="107"/>
            <declaration name="activeShadow" type="Color" line="108"/>
            <declaration name="activeBumps" type="MetalBumps" line="109"/>
            <declaration name="inactiveBumps" type="MetalBumps" line="110"/>
            <method name="MetalTitlePane" type="constructor" line="111">
                <params>
                    <param name="root" type="JRootPane"/>
                    <param name="ui" type="MetalRootPaneUI"/>
                </params>
            </method>
            <javadoc line="120">
                Uninstalls the necessary state.                
            </javadoc>
            <method name="uninstall" type="void" line="123"/>
            <javadoc line="128">
                Installs the necessary listeners.                
            </javadoc>
            <method name="installListeners" type="void" line="131">
                <scope line="132"/>
            </method>
            <javadoc line="139">
                Uninstalls the necessary listeners.                
            </javadoc>
            <method name="uninstallListeners" type="void" line="142">
                <scope line="143"/>
            </method>
            <javadoc line="148">
                Returns the &lt;code&gt;WindowListener&lt;/code&gt; to add to the
                  &lt;code&gt;Window&lt;/code&gt;.                
            </javadoc>
            <method name="createWindowListener" type="WindowListener" line="152"/>
            <javadoc line="155">
                Returns the &lt;code&gt;PropertyChangeListener&lt;/code&gt; to install on
                  the &lt;code&gt;Window&lt;/code&gt;.                
            </javadoc>
            <method name="createWindowPropertyChangeListener" type="PropertyChangeListener" line="159"/>
            <javadoc line="162">
                Returns the &lt;code&gt;JRootPane&lt;/code&gt; this was created for.                
            </javadoc>
            <method name="getRootPane" type="JRootPane" line="165"/>
            <javadoc line="168">
                Returns the decoration style of the &lt;code&gt;JRootPane&lt;/code&gt;.                
            </javadoc>
            <method name="getWindowDecorationStyle" type="int" line="171"/>
            <method name="addNotify" type="void" line="174">
                <scope line="178">
                    <scope line="179"/>
                    <scope line="182"/>
                </scope>
            </method>
            <method name="removeNotify" type="void" line="190"/>
            <javadoc line="195">
                Adds any sub-Components contained in the &lt;code&gt;MetalTitlePane&lt;/code&gt;.                
            </javadoc>
            <method name="installSubcomponents" type="void" line="198">
                <declaration name="decorationStyle" type="int" line="199"/>
                <scope line="200"/>
                <scope line="209"/>
            </method>
            <javadoc line="215">
                Determines the Colors to draw with.                
            </javadoc>
            <method name="determineColors" type="void" line="218"/>
            <javadoc line="252">
                Installs the fonts and necessary properties on the MetalTitlePane.                
            </javadoc>
            <method name="installDefaults" type="void" line="255"/>
            <javadoc line="258">
                Uninstalls any previously installed UI values.                
            </javadoc>
            <method name="uninstallDefaults" type="void" line="261"/>
            <javadoc line="263">
                Returns the &lt;code&gt;JMenuBar&lt;/code&gt; displaying the appropriate
                  system menu items.                
            </javadoc>
            <method name="createMenuBar" type="JMenuBar" line="267"/>
            <javadoc line="274">
                Closes the Window.                
            </javadoc>
            <method name="close" type="void" line="277">
                <declaration name="window" type="Window" line="278"/>
                <scope line="279"/>
            </method>
            <javadoc line="283">
                Iconifies the Frame.                
            </javadoc>
            <method name="iconify" type="void" line="286">
                <declaration name="frame" type="Frame" line="287"/>
                <scope line="288"/>
            </method>
            <javadoc line="292">
                Maximizes the Frame.                
            </javadoc>
            <method name="maximize" type="void" line="295">
                <declaration name="frame" type="Frame" line="296"/>
                <scope line="297"/>
            </method>
            <javadoc line="301">
                Restores the Frame size.                
            </javadoc>
            <method name="restore" type="void" line="304">
                <declaration name="frame" type="Frame" line="305"/>
                <scope line="306"/>
                <scope line="309"/>
                <scope line="312"/>
            </method>
            <javadoc line="316">
                Create the &lt;code&gt;Action&lt;/code&gt;s that get associated with the
                  buttons and menu items.                
            </javadoc>
            <method name="createActions" type="void" line="320">
                <scope line="322"/>
            </method>
            <javadoc line="328">
                Returns the &lt;code&gt;JMenu&lt;/code&gt; displaying the appropriate menu items
                  for manipulating the Frame.                
            </javadoc>
            <method name="createMenu" type="JMenu" line="332">
                <declaration name="menu" type="JMenu" line="333"/>
                <scope line="334"/>
            </method>
            <javadoc line="339">
                Adds the necessary &lt;code&gt;JMenuItem&lt;/code&gt;s to the passed in menu.                
            </javadoc>
            <method name="addMenuItems" type="void" line="342">
                <params>
                    <param name="menu" type="JMenu"/>
                </params>
                <declaration name="locale" type="Locale" line="343"/>
                <declaration name="mi" type="JMenuItem" line="344"/>
                <declaration name="mnemonic" type="int" line="345"/>
                <scope line="346"/>
                <scope line="351"/>
                <scope line="354">
                    <scope line="357"/>
                </scope>
                <scope line="364"/>
            </method>
            <javadoc line="368">
                Returns a &lt;code&gt;JButton&lt;/code&gt; appropriate for placement on the
                  TitlePane.                
            </javadoc>
            <method name="createTitleButton" type="JButton" line="372">
                <declaration name="button" type="JButton" line="373"/>
            </method>
            <javadoc line="379">
                Creates the Buttons that will be placed on the TitlePane.                
            </javadoc>
            <method name="createButtons" type="void" line="382">
                <scope line="390"/>
            </method>
            <javadoc line="408">
                Returns the &lt;code&gt;LayoutManager&lt;/code&gt; that should be installed on
                  the &lt;code&gt;MetalTitlePane&lt;/code&gt;.                
            </javadoc>
            <method name="createLayout" type="LayoutManager" line="412"/>
            <javadoc line="415">
                Updates state dependant upon the Window&apos;s active state.                
            </javadoc>
            <method name="setActive" type="void" line="418">
                <params>
                    <param name="isActive" type="boolean"/>
                </params>
                <declaration name="activeB" type="Boolean" line="419"/>
                <scope line="421"/>
            </method>
            <javadoc line="427">
                Sets the state of the Window.                
            </javadoc>
            <method name="setState" type="void" line="430">
                <params>
                    <param name="state" type="int"/>
                </params>
            </method>
            <javadoc line="433">
                Sets the state of the window. If &lt;code&gt;updateRegardless&lt;/code&gt; is
                  true and the state has not changed, this will update anyway.                
            </javadoc>
            <method name="setState" type="void" line="437">
                <params>
                    <param name="state" type="int"/>
                    <param name="updateRegardless" type="boolean"/>
                </params>
                <declaration name="w" type="Window" line="438"/>
                <scope line="439">
                    <scope line="440"/>
                    <declaration name="frame" type="Frame" line="443"/>
                    <scope line="444">
                        <declaration name="rootPane" type="JRootPane" line="445"/>
                        <scope line="446"/>
                        <scope line="449"/>
                        <scope line="452">
                            <scope line="453"/>
                            <scope line="458"/>
                            <scope line="463"/>
                        </scope>
                        <scope line="471">
                            <scope line="474"/>
                        </scope>
                    </scope>
                    <scope line="481"/>
                </scope>
            </method>
            <javadoc line="494">
                Updates the toggle button to contain the Icon &lt;code&gt;icon&lt;/code&gt;, and
                  Action &lt;code&gt;action&lt;/code&gt;.                
            </javadoc>
            <method name="updateToggleButton" type="void" line="498">
                <params>
                    <param name="action" type="Action"/>
                    <param name="icon" type="Icon"/>
                </params>
            </method>
            <javadoc line="503">
                Returns the Frame rendering in. This will return null if the
                  &lt;code&gt;JRootPane&lt;/code&gt; is not contained in a &lt;code&gt;Frame&lt;/code&gt;.                
            </javadoc>
            <method name="getFrame" type="Frame" line="507">
                <declaration name="window" type="Window" line="508"/>
                <scope line="509"/>
            </method>
            <javadoc line="514">
                Returns the &lt;code&gt;Window&lt;/code&gt; the &lt;code&gt;JRootPane&lt;/code&gt; is
                  contained in. This will return null if there is no parent ancestor
                  of the &lt;code&gt;JRootPane&lt;/code&gt;.                
            </javadoc>
            <method name="getWindow" type="Window" line="519"/>
            <javadoc line="522">
                Returns the String to display as the title.                
            </javadoc>
            <method name="getTitle" type="String" line="525">
                <declaration name="w" type="Window" line="526"/>
                <scope line="527"/>
                <scope line="530"/>
            </method>
            <javadoc line="535">
                Renders the TitlePane.                
            </javadoc>
            <method name="paintComponent" type="void" line="538">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
                <scope line="539"/>
                <declaration name="rootPane" type="JRootPane" line="542"/>
                <declaration name="window" type="Window" line="543"/>
                <declaration name="leftToRight" type="boolean" line="544"/>
                <declaration name="isSelected" type="boolean" line="545"/>
                <declaration name="width" type="int" line="546"/>
                <declaration name="height" type="int" line="547"/>
                <declaration name="background" type="Color" line="548"/>
                <declaration name="foreground" type="Color" line="549"/>
                <declaration name="darkShadow" type="Color" line="550"/>
                <declaration name="bumps" type="MetalBumps" line="551"/>
                <scope line="552"/>
                <scope line="558"/>
                <declaration name="xOffset" type="int" line="570"/>
                <scope line="571"/>
                <declaration name="theTitle" type="String" line="574"/>
                <scope line="575">
                    <declaration name="fm" type="FontMetrics" line="576"/>
                    <declaration name="yOffset" type="int" line="578"/>
                    <declaration name="rect" type="Rectangle" line="579"/>
                    <scope line="580"/>
                    <declaration name="titleW" type="int" line="583"/>
                    <scope line="584">
                        <scope line="585"/>
                    </scope>
                    <scope line="591"/>
                    <declaration name="titleLength" type="int" line="596"/>
                </scope>
                <declaration name="bumpXOffset" type="int" line="600"/>
                <declaration name="bumpLength" type="int" line="601"/>
                <scope line="602"/>
                <scope line="606"/>
                <declaration name="bumpYOffset" type="int" line="610"/>
                <declaration name="bumpHeight" type="int" line="611"/>
            </method>
            <class name="CloseAction" line="615">
                <extends class="AbstractAction"/>
                <javadoc line="615">
                    Actions used to &lt;code&gt;close&lt;/code&gt; the &lt;code&gt;Window&lt;/code&gt;.                    
                </javadoc>
                <method name="CloseAction" type="constructor" line="619"/>
                <method name="actionPerformed" type="void" line="622">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                </method>
            </class>
            <class name="IconifyAction" line="626">
                <extends class="AbstractAction"/>
                <javadoc line="626">
                    Actions used to &lt;code&gt;iconfiy&lt;/code&gt; the &lt;code&gt;Frame&lt;/code&gt;.                    
                </javadoc>
                <method name="IconifyAction" type="constructor" line="630"/>
                <method name="actionPerformed" type="void" line="633">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                </method>
            </class>
            <class name="RestoreAction" line="637">
                <extends class="AbstractAction"/>
                <javadoc line="637">
                    Actions used to &lt;code&gt;restore&lt;/code&gt; the &lt;code&gt;Frame&lt;/code&gt;.                    
                </javadoc>
                <method name="RestoreAction" type="constructor" line="641"/>
                <method name="actionPerformed" type="void" line="644">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                </method>
            </class>
            <class name="MaximizeAction" line="648">
                <extends class="AbstractAction"/>
                <javadoc line="648">
                    Actions used to &lt;code&gt;restore&lt;/code&gt; the &lt;code&gt;Frame&lt;/code&gt;.                    
                </javadoc>
                <method name="MaximizeAction" type="constructor" line="652"/>
                <method name="actionPerformed" type="void" line="655">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                </method>
            </class>
            <class name="SystemMenuBar" line="659">
                <extends class="JMenuBar"/>
                <javadoc line="659">
                    Class responsible for drawing the system menu. Looks up the
                      image to draw from the Frame associated with the
                      &lt;code&gt;JRootPane&lt;/code&gt;.                    
                </javadoc>
                <method name="paint" type="void" line="665">
                    <params>
                        <param name="g" type="Graphics"/>
                    </params>
                    <scope line="666"/>
                    <scope line="670"/>
                    <scope line="673">
                        <declaration name="icon" type="Icon" line="674"/>
                        <scope line="675"/>
                    </scope>
                </method>
                <method name="getMinimumSize" type="Dimension" line="680"/>
                <method name="getPreferredSize" type="Dimension" line="683">
                    <declaration name="size" type="Dimension" line="684"/>
                </method>
            </class>
            <class name="TitlePaneLayout" line="688">
                <implements interface="LayoutManager"/>
                <method name="addLayoutComponent" type="void" line="689">
                    <params>
                        <param name="name" type="String"/>
                        <param name="c" type="Component"/>
                    </params>
                </method>
                <method name="removeLayoutComponent" type="void" line="691">
                    <params>
                        <param name="c" type="Component"/>
                    </params>
                </method>
                <method name="preferredLayoutSize" type="Dimension" line="693">
                    <params>
                        <param name="c" type="Container"/>
                    </params>
                    <declaration name="height" type="int" line="694"/>
                </method>
                <method name="minimumLayoutSize" type="Dimension" line="697">
                    <params>
                        <param name="c" type="Container"/>
                    </params>
                </method>
                <method name="computeHeight" type="int" line="700">
                    <declaration name="fm" type="FontMetrics" line="701"/>
                    <declaration name="fontHeight" type="int" line="702"/>
                    <declaration name="iconHeight" type="int" line="704"/>
                    <scope line="705"/>
                    <declaration name="finalHeight" type="int" line="708"/>
                </method>
                <method name="layoutContainer" type="void" line="711">
                    <params>
                        <param name="c" type="Container"/>
                    </params>
                    <declaration name="leftToRight" type="boolean" line="712"/>
                    <declaration name="w" type="int" line="713"/>
                    <declaration name="x" type="int" line="714"/>
                    <declaration name="y" type="int" line="715"/>
                    <declaration name="spacing" type="int" line="716"/>
                    <declaration name="buttonHeight" type="int" line="717"/>
                    <declaration name="buttonWidth" type="int" line="718"/>
                    <scope line="719"/>
                    <scope line="723"/>
                    <scope line="730"/>
                    <scope line="736"/>
                    <scope line="740">
                        <scope line="741">
                            <scope line="742">
                                <scope line="746"/>
                            </scope>
                        </scope>
                        <scope line="751">
                            <scope line="755"/>
                        </scope>
                    </scope>
                </method>
            </class>
            <class name="PropertyChangeHandler" line="763">
                <implements interface="PropertyChangeListener"/>
                <javadoc line="763">
                    PropertyChangeListener installed on the Window. Updates the necessary
                      state as the state of the Window changes.                    
                </javadoc>
                <method name="propertyChange" type="void" line="768">
                    <params>
                        <param name="pce" type="PropertyChangeEvent"/>
                    </params>
                    <declaration name="name" type="String" line="769"/>
                    <scope line="770">
                        <declaration name="frame" type="Frame" line="771"/>
                        <scope line="772"/>
                        <scope line="775"/>
                    </scope>
                    <scope line="779"/>
                    <scope line="782"/>
                    <scope line="786"/>
                </method>
            </class>
            <javadoc line="793">
                Update the image used for the system icon                
            </javadoc>
            <method name="updateSystemIcon" type="void" line="796"/>
            <class name="WindowHandler" line="814">
                <extends class="WindowAdapter"/>
                <javadoc line="814">
                    WindowListener installed on the Window, updates the state as necessary.                    
                </javadoc>
                <method name="windowActivated" type="void" line="818">
                    <params>
                        <param name="ev" type="WindowEvent"/>
                    </params>
                </method>
                <method name="windowDeactivated" type="void" line="821">
                    <params>
                        <param name="ev" type="WindowEvent"/>
                    </params>
                </method>
            </class>
        </class>
    </source>