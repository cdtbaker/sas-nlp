<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.plaf.nimbus">
        <import package="java.awt.AlphaComposite"/>
        <import package="java.awt.Graphics2D"/>
        <import package="java.awt.Transparency"/>
        <import package="java.awt.GraphicsConfiguration"/>
        <import package="java.awt.GraphicsEnvironment"/>
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.awt.image.Raster"/>
        <import package="java.awt.image.WritableRaster"/>
        <import package="java.awt.image.ColorModel"/>
        <class name="EffectUtils" line="11">
            <javadoc line="11">
                EffectUtils                
                <author>
                    Created by Jasper Potts (Jun 18, 2007)                    
                </author>
            </javadoc>
            <javadoc line="16">
                Clear a transparent image to 100% transparent                
                <param>
                    img The image to clear                    
                </param>
            </javadoc>
            <method name="clearImage" type="void" line="20">
                <params>
                    <param name="img" type="BufferedImage"/>
                </params>
                <declaration name="g2" type="Graphics2D" line="21"/>
            </method>
            <javadoc line="26">
                Apply Gaussian Blur to Image                
                <param>
                    src    The image tp                    
                </param>
                <param>
                    dst    The destination image to draw blured src image into, null if you want a new one created                    
                </param>
                <param>
                    radius The blur kernel radius                    
                </param>
                <return>
                    The blured image                    
                </return>
            </javadoc>
            <method name="gaussianBlur" type="BufferedImage" line="33">
                <params>
                    <param name="src" type="BufferedImage"/>
                    <param name="dst" type="BufferedImage"/>
                    <param name="radius" type="int"/>
                </params>
                <declaration name="width" type="int" line="34"/>
                <declaration name="height" type="int" line="35"/>
                <scope line="36"/>
                <declaration name="kernel" type="float[]" line="39"/>
                <scope line="40">
                    <declaration name="srcPixels" type="int[]" line="41"/>
                    <declaration name="dstPixels" type="int[]" line="42"/>
                </scope>
                <scope line="48">
                    <declaration name="srcPixels" type="byte[]" line="49"/>
                    <declaration name="dstPixels" type="byte[]" line="50"/>
                </scope>
                <scope line="56"/>
            </method>
            <javadoc line="61">
                &lt;p&gt;Blurs the source pixels into the destination pixels. The force of the blur is specified by the radius which
                  must be greater than 0.&lt;/p&gt; &lt;p&gt;The source and destination pixels arrays are expected to be in the INT_ARGB
                  format.&lt;/p&gt; &lt;p&gt;After this method is executed, dstPixels contains a transposed and filtered copy of
                  srcPixels.&lt;/p&gt;                
                <param>
                    srcPixels the source pixels                    
                </param>
                <param>
                    dstPixels the destination pixels                    
                </param>
                <param>
                    width     the width of the source picture                    
                </param>
                <param>
                    height    the height of the source picture                    
                </param>
                <param>
                    kernel    the kernel of the blur effect                    
                </param>
                <param>
                    radius    the radius of the blur effect                    
                </param>
            </javadoc>
            <method name="blur" type="void" line="73">
                <params>
                    <param name="srcPixels" type="int[]"/>
                    <param name="dstPixels" type="int[]"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="kernel" type="float[]"/>
                    <param name="radius" type="int"/>
                </params>
                <declaration name="a" type="float" line="74"/>
                <declaration name="r" type="float" line="75"/>
                <declaration name="g" type="float" line="76"/>
                <declaration name="b" type="float" line="77"/>
                <declaration name="ca" type="int" line="78"/>
                <declaration name="cr" type="int" line="79"/>
                <declaration name="cg" type="int" line="80"/>
                <declaration name="cb" type="int" line="81"/>
                <scope line="82">
                    <declaration name="index" type="int" line="83"/>
                    <declaration name="offset" type="int" line="84"/>
                    <scope line="85">
                        <scope line="87">
                            <declaration name="subOffset" type="int" line="88"/>
                            <scope line="89"/>
                            <declaration name="pixel" type="int" line="92"/>
                            <declaration name="blurFactor" type="float" line="93"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="108">
                &lt;p&gt;Blurs the source pixels into the destination pixels. The force of the blur is specified by the radius which
                  must be greater than 0.&lt;/p&gt; &lt;p&gt;The source and destination pixels arrays are expected to be in the BYTE_GREY
                  format.&lt;/p&gt; &lt;p&gt;After this method is executed, dstPixels contains a transposed and filtered copy of
                  srcPixels.&lt;/p&gt;                
                <param>
                    srcPixels the source pixels                    
                </param>
                <param>
                    dstPixels the destination pixels                    
                </param>
                <param>
                    width     the width of the source picture                    
                </param>
                <param>
                    height    the height of the source picture                    
                </param>
                <param>
                    kernel    the kernel of the blur effect                    
                </param>
                <param>
                    radius    the radius of the blur effect                    
                </param>
            </javadoc>
            <method name="blur" type="void" line="120">
                <params>
                    <param name="srcPixels" type="byte[]"/>
                    <param name="dstPixels" type="byte[]"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="kernel" type="float[]"/>
                    <param name="radius" type="int"/>
                </params>
                <declaration name="p" type="float" line="121"/>
                <declaration name="cp" type="int" line="122"/>
                <scope line="123">
                    <declaration name="index" type="int" line="124"/>
                    <declaration name="offset" type="int" line="125"/>
                    <scope line="126">
                        <scope line="128">
                            <declaration name="subOffset" type="int" line="129"/>
                            <scope line="130"/>
                            <declaration name="pixel" type="int" line="133"/>
                            <declaration name="blurFactor" type="float" line="134"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="createGaussianKernel" type="float[]" line="143">
                <params>
                    <param name="radius" type="int"/>
                </params>
                <scope line="144"/>
                <declaration name="data" type="float[]" line="147"/>
                <declaration name="sigma" type="float" line="148"/>
                <declaration name="twoSigmaSquare" type="float" line="149"/>
                <declaration name="sigmaRoot" type="float" line="150"/>
                <declaration name="total" type="float" line="151"/>
                <scope line="152">
                    <declaration name="distance" type="float" line="153"/>
                    <declaration name="index" type="int" line="154"/>
                </scope>
                <scope line="158"/>
            </method>
            <javadoc line="163">
                &lt;p&gt;Returns an array of pixels, stored as integers, from a &lt;code&gt;BufferedImage&lt;/code&gt;. The pixels are grabbed from
                  a rectangular area defined by a location and two dimensions. Calling this method on an image of type different
                  from &lt;code&gt;BufferedImage.TYPE_INT_ARGB&lt;/code&gt; and &lt;code&gt;BufferedImage.TYPE_INT_RGB&lt;/code&gt; will unmanage the
                  image.&lt;/p&gt;                
                <param>
                    img    the source image                    
                </param>
                <param>
                    x      the x location at which to start grabbing pixels                    
                </param>
                <param>
                    y      the y location at which to start grabbing pixels                    
                </param>
                <param>
                    w      the width of the rectangle of pixels to grab                    
                </param>
                <param>
                    h      the height of the rectangle of pixels to grab                    
                </param>
                <param>
                    pixels a pre-allocated array of pixels of size wh; can be null                    
                </param>
                <return>
                    &lt;code&gt;pixels&lt;/code&gt; if non-null, a new array of integers otherwise                    
                </return>
                <throws>
                    IllegalArgumentException is &lt;code&gt;pixels&lt;/code&gt; is non-null and of length &amp;lt; wh                    
                </throws>
            </javadoc>
            <method name="getPixels" type="byte[]" line="177">
                <params>
                    <param name="img" type="BufferedImage"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="pixels" type="byte[]"/>
                </params>
                <scope line="178"/>
                <scope line="181"/>
                <scope line="184"/>
                <declaration name="imageType" type="int" line="187"/>
                <scope line="188">
                    <declaration name="raster" type="Raster" line="189"/>
                </scope>
                <scope line="192"/>
            </method>
            <javadoc line="196">
                &lt;p&gt;Writes a rectangular area of pixels in the destination &lt;code&gt;BufferedImage&lt;/code&gt;. Calling this method on an
                  image of type different from &lt;code&gt;BufferedImage.TYPE_INT_ARGB&lt;/code&gt; and &lt;code&gt;BufferedImage.TYPE_INT_RGB&lt;/code&gt;
                  will unmanage the image.&lt;/p&gt;                
                <param>
                    img    the destination image                    
                </param>
                <param>
                    x      the x location at which to start storing pixels                    
                </param>
                <param>
                    y      the y location at which to start storing pixels                    
                </param>
                <param>
                    w      the width of the rectangle of pixels to store                    
                </param>
                <param>
                    h      the height of the rectangle of pixels to store                    
                </param>
                <param>
                    pixels an array of pixels, stored as integers                    
                </param>
                <throws>
                    IllegalArgumentException is &lt;code&gt;pixels&lt;/code&gt; is non-null and of length &amp;lt; wh                    
                </throws>
            </javadoc>
            <method name="setPixels" type="void" line="208">
                <params>
                    <param name="img" type="BufferedImage"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="pixels" type="byte[]"/>
                </params>
                <scope line="209"/>
                <scope line="212"/>
                <declaration name="imageType" type="int" line="215"/>
                <scope line="216">
                    <declaration name="raster" type="WritableRaster" line="217"/>
                </scope>
                <scope line="220"/>
            </method>
            <javadoc line="224">
                &lt;p&gt;Returns an array of pixels, stored as integers, from a
                  &lt;code&gt;BufferedImage&lt;/code&gt;. The pixels are grabbed from a rectangular
                  area defined by a location and two dimensions. Calling this method on
                  an image of type different from &lt;code&gt;BufferedImage.TYPE_INT_ARGB&lt;/code&gt;
                  and &lt;code&gt;BufferedImage.TYPE_INT_RGB&lt;/code&gt; will unmanage the image.&lt;/p&gt;                
                <param>
                    img the source image                    
                </param>
                <param>
                    x the x location at which to start grabbing pixels                    
                </param>
                <param>
                    y the y location at which to start grabbing pixels                    
                </param>
                <param>
                    w the width of the rectangle of pixels to grab                    
                </param>
                <param>
                    h the height of the rectangle of pixels to grab                    
                </param>
                <param>
                    pixels a pre-allocated array of pixels of size wh; can be null                    
                </param>
                <return>
                    &lt;code&gt;pixels&lt;/code&gt; if non-null, a new array of integers
                      otherwise                    
                </return>
                <throws>
                    IllegalArgumentException is &lt;code&gt;pixels&lt;/code&gt; is non-null and
                      of length &amp;lt; wh                    
                </throws>
            </javadoc>
            <method name="getPixels" type="int[]" line="241">
                <params>
                    <param name="img" type="BufferedImage"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="pixels" type="int[]"/>
                </params>
                <scope line="242"/>
                <scope line="245"/>
                <scope line="248"/>
                <declaration name="imageType" type="int" line="251"/>
                <scope line="252">
                    <declaration name="raster" type="Raster" line="253"/>
                </scope>
            </method>
            <javadoc line="258">
                &lt;p&gt;Writes a rectangular area of pixels in the destination
                  &lt;code&gt;BufferedImage&lt;/code&gt;. Calling this method on
                  an image of type different from &lt;code&gt;BufferedImage.TYPE_INT_ARGB&lt;/code&gt;
                  and &lt;code&gt;BufferedImage.TYPE_INT_RGB&lt;/code&gt; will unmanage the image.&lt;/p&gt;                
                <param>
                    img the destination image                    
                </param>
                <param>
                    x the x location at which to start storing pixels                    
                </param>
                <param>
                    y the y location at which to start storing pixels                    
                </param>
                <param>
                    w the width of the rectangle of pixels to store                    
                </param>
                <param>
                    h the height of the rectangle of pixels to store                    
                </param>
                <param>
                    pixels an array of pixels, stored as integers                    
                </param>
                <throws>
                    IllegalArgumentException is &lt;code&gt;pixels&lt;/code&gt; is non-null and
                      of length &amp;lt; wh                    
                </throws>
            </javadoc>
            <method name="setPixels" type="void" line="272">
                <params>
                    <param name="img" type="BufferedImage"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="pixels" type="int[]"/>
                </params>
                <scope line="273"/>
                <scope line="276"/>
                <declaration name="imageType" type="int" line="279"/>
                <scope line="280">
                    <declaration name="raster" type="WritableRaster" line="281"/>
                </scope>
                <scope line="284"/>
            </method>
            <javadoc line="288">
                &lt;p&gt;Returns a new &lt;code&gt;BufferedImage&lt;/code&gt; using the same color model
                  as the image passed as a parameter. The returned image is only compatible
                  with the image passed as a parameter. This does not mean the returned
                  image is compatible with the hardware.&lt;/p&gt;                
                <param>
                    image the reference image from which the color model of the new
                      image is obtained                    
                </param>
                <return>
                    a new &lt;code&gt;BufferedImage&lt;/code&gt;, compatible with the color model
                      of &lt;code&gt;image&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="createColorModelCompatibleImage" type="BufferedImage" line="298">
                <params>
                    <param name="image" type="BufferedImage"/>
                </params>
                <declaration name="cm" type="ColorModel" line="299"/>
            </method>
            <javadoc line="302">
                &lt;p&gt;Returns a new translucent compatible image of the specified width and
                  height. That is, the returned &lt;code&gt;BufferedImage&lt;/code&gt; is compatible with
                  the graphics hardware. If the method is called in a headless
                  environment, then the returned BufferedImage will be compatible with
                  the source image.&lt;/p&gt;                
                <param>
                    width the width of the new image                    
                </param>
                <param>
                    height the height of the new image                    
                </param>
                <return>
                    a new translucent compatible &lt;code&gt;BufferedImage&lt;/code&gt; of the
                      specified width and height                    
                </return>
            </javadoc>
            <method name="createCompatibleTranslucentImage" type="BufferedImage" line="313">
                <params>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <method name="isHeadless" type="boolean" line="316"/>
            <method name="getGraphicsConfiguration" type="GraphicsConfiguration" line="319"/>
        </class>
    </source>