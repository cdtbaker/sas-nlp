<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.beans.ConstructorProperties"/>
        <import package="javax.swing.plaf"/>
        <import package="javax.accessibility"/>
        <import package="java.awt"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.IOException"/>
        <class name="JSplitPane" line="9">
            <extends class="JComponent"/>
            <implements interface="Accessible"/>
            <javadoc line="9">
                &lt;code&gt;JSplitPane&lt;/code&gt; is used to divide two (and only two)
                  &lt;code&gt;Component&lt;/code&gt;s. The two &lt;code&gt;Component&lt;/code&gt;s
                  are graphically divided based on the look and feel
                  implementation, and the two &lt;code&gt;Component&lt;/code&gt;s can then be
                  interactively resized by the user.
                  Information on using &lt;code&gt;JSplitPane&lt;/code&gt; is in
                  &lt;a
                  href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/components/splitpane.html&quot;&gt;How to Use Split Panes&lt;/a&gt; in
                  &lt;em&gt;The Java Tutorial&lt;/em&gt;.
                  &lt;p&gt;
                  The two &lt;code&gt;Component&lt;/code&gt;s in a split pane can be aligned
                  left to right using
                  &lt;code&gt;JSplitPane.HORIZONTAL_SPLIT&lt;/code&gt;, or top to bottom using
                  &lt;code&gt;JSplitPane.VERTICAL_SPLIT&lt;/code&gt;.
                  The preferred way to change the size of the &lt;code&gt;Component&lt;/code&gt;s
                  is to invoke
                  &lt;code&gt;setDividerLocation&lt;/code&gt; where &lt;code&gt;location&lt;/code&gt; is either
                  the new x or y position, depending on the orientation of the
                  &lt;code&gt;JSplitPane&lt;/code&gt;.
                  &lt;p&gt;
                  To resize the &lt;code&gt;Component&lt;/code&gt;s to their preferred sizes invoke
                  &lt;code&gt;resetToPreferredSizes&lt;/code&gt;.
                  &lt;p&gt;
                  When the user is resizing the &lt;code&gt;Component&lt;/code&gt;s the minimum
                  size of the &lt;code&gt;Components&lt;/code&gt; is used to determine the
                  maximum/minimum position the &lt;code&gt;Component&lt;/code&gt;s
                  can be set to. If the minimum size of the two
                  components is greater than the size of the split pane the divider
                  will not allow you to resize it. To alter the minimum size of a
                  &lt;code&gt;JComponent&lt;/code&gt;, see {@link JComponent#setMinimumSize}.
                  &lt;p&gt;
                  When the user resizes the split pane the new space is distributed between
                  the two components based on the &lt;code&gt;resizeWeight&lt;/code&gt; property.
                  A value of 0,
                  the default, indicates the right/bottom component gets all the space,
                  where as a value of 1 indicates the left/top component gets all the space.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt; Swing is not thread safe. For more
                  information see &lt;a
                  href=&quot;package-summary.html#threading&quot;&gt;Swing&apos;s Threading
                  Policy&lt;/a&gt;.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <see>
                    #setDividerLocation                    
                </see>
                <see>
                    #resetToPreferredSizes                    
                </see>
                <author>
                    Scott Violet                    
                </author>
            </javadoc>
            <declaration name="uiClassID" type="String" line="65"/>
            <javadoc line="65">
                @see #getUIClassID                
                <see>
                    #readObject                    
                </see>
            </javadoc>
            <declaration name="VERTICAL_SPLIT" type="int" line="70"/>
            <javadoc line="70">
                Vertical split indicates the &lt;code&gt;Component&lt;/code&gt;s are
                  split along the y axis.  For example the two
                  &lt;code&gt;Component&lt;/code&gt;s will be split one on top of the other.                
            </javadoc>
            <declaration name="HORIZONTAL_SPLIT" type="int" line="76"/>
            <javadoc line="76">
                Horizontal split indicates the &lt;code&gt;Component&lt;/code&gt;s are
                  split along the x axis.  For example the two
                  &lt;code&gt;Component&lt;/code&gt;s will be split one to the left of the
                  other.                
            </javadoc>
            <declaration name="LEFT" type="String" line="83"/>
            <javadoc line="83">
                Used to add a &lt;code&gt;Component&lt;/code&gt; to the left of the other
                  &lt;code&gt;Component&lt;/code&gt;.                
            </javadoc>
            <declaration name="RIGHT" type="String" line="88"/>
            <javadoc line="88">
                Used to add a &lt;code&gt;Component&lt;/code&gt; to the right of the other
                  &lt;code&gt;Component&lt;/code&gt;.                
            </javadoc>
            <declaration name="TOP" type="String" line="93"/>
            <javadoc line="93">
                Used to add a &lt;code&gt;Component&lt;/code&gt; above the other
                  &lt;code&gt;Component&lt;/code&gt;.                
            </javadoc>
            <declaration name="BOTTOM" type="String" line="98"/>
            <javadoc line="98">
                Used to add a &lt;code&gt;Component&lt;/code&gt; below the other
                  &lt;code&gt;Component&lt;/code&gt;.                
            </javadoc>
            <declaration name="DIVIDER" type="String" line="103"/>
            <javadoc line="103">
                Used to add a &lt;code&gt;Component&lt;/code&gt; that will represent the divider.                
            </javadoc>
            <declaration name="ORIENTATION_PROPERTY" type="String" line="107"/>
            <javadoc line="107">
                Bound property name for orientation (horizontal or vertical).                
            </javadoc>
            <declaration name="CONTINUOUS_LAYOUT_PROPERTY" type="String" line="111"/>
            <javadoc line="111">
                Bound property name for continuousLayout.                
            </javadoc>
            <declaration name="DIVIDER_SIZE_PROPERTY" type="String" line="115"/>
            <javadoc line="115">
                Bound property name for border.                
            </javadoc>
            <declaration name="ONE_TOUCH_EXPANDABLE_PROPERTY" type="String" line="119"/>
            <javadoc line="119">
                Bound property for oneTouchExpandable.                
            </javadoc>
            <declaration name="LAST_DIVIDER_LOCATION_PROPERTY" type="String" line="123"/>
            <javadoc line="123">
                Bound property for lastLocation.                
            </javadoc>
            <declaration name="DIVIDER_LOCATION_PROPERTY" type="String" line="127"/>
            <javadoc line="127">
                Bound property for the dividerLocation.                
                <since>
                    1.3                    
                </since>
            </javadoc>
            <declaration name="RESIZE_WEIGHT_PROPERTY" type="String" line="132"/>
            <javadoc line="132">
                Bound property for weight.                
                <since>
                    1.3                    
                </since>
            </javadoc>
            <declaration name="orientation" type="int" line="137"/>
            <javadoc line="137">
                How the views are split.                
            </javadoc>
            <declaration name="continuousLayout" type="boolean" line="141"/>
            <javadoc line="141">
                Whether or not the views are continuously redisplayed while
                  resizing.                
            </javadoc>
            <declaration name="leftComponent" type="Component" line="146"/>
            <javadoc line="146">
                The left or top component.                
            </javadoc>
            <declaration name="rightComponent" type="Component" line="150"/>
            <javadoc line="150">
                The right or bottom component.                
            </javadoc>
            <declaration name="dividerSize" type="int" line="154"/>
            <javadoc line="154">
                Size of the divider.                
            </javadoc>
            <declaration name="dividerSizeSet" type="boolean" line="158"/>
            <declaration name="oneTouchExpandable" type="boolean" line="159"/>
            <javadoc line="159">
                Is a little widget provided to quickly expand/collapse the
                  split pane?                
            </javadoc>
            <declaration name="oneTouchExpandableSet" type="boolean" line="164"/>
            <declaration name="lastDividerLocation" type="int" line="165"/>
            <javadoc line="165">
                Previous location of the split pane.                
            </javadoc>
            <declaration name="resizeWeight" type="double" line="169"/>
            <javadoc line="169">
                How to distribute extra space.                
            </javadoc>
            <declaration name="dividerLocation" type="int" line="173"/>
            <javadoc line="173">
                Location of the divider, at least the value that was set, the UI may
                  have a different value.                
            </javadoc>
            <javadoc line="178">
                Creates a new &lt;code&gt;JSplitPane&lt;/code&gt; configured to arrange the child
                  components side-by-side horizontally, using two buttons for the components.                
            </javadoc>
            <method name="JSplitPane" type="constructor" line="182"/>
            <javadoc line="185">
                Creates a new &lt;code&gt;JSplitPane&lt;/code&gt; configured with the
                  specified orientation.                
                <param>
                    newOrientation  <code>JSplitPane.HORIZONTAL_SPLIT</code> or
                      <code>JSplitPane.VERTICAL_SPLIT</code>                    
                </param>
                <exception>
                    IllegalArgumentException if <code>orientation</code>
                      is not one of HORIZONTAL_SPLIT or VERTICAL_SPLIT.                    
                </exception>
            </javadoc>
            <method name="JSplitPane" type="constructor" line="193">
                <params>
                    <param name="newOrientation" type="int"/>
                </params>
            </method>
            <javadoc line="196">
                Creates a new &lt;code&gt;JSplitPane&lt;/code&gt; with the specified
                  orientation and redrawing style.                
                <param>
                    newOrientation  <code>JSplitPane.HORIZONTAL_SPLIT</code> or
                      <code>JSplitPane.VERTICAL_SPLIT</code>                    
                </param>
                <param>
                    newContinuousLayout  a boolean, true for the components to
                      redraw continuously as the divider changes position, false
                      to wait until the divider position stops changing to redraw                    
                </param>
                <exception>
                    IllegalArgumentException if <code>orientation</code>
                      is not one of HORIZONTAL_SPLIT or VERTICAL_SPLIT                    
                </exception>
            </javadoc>
            <method name="JSplitPane" type="constructor" line="207">
                <params>
                    <param name="newOrientation" type="int"/>
                    <param name="newContinuousLayout" type="boolean"/>
                </params>
            </method>
            <javadoc line="210">
                Creates a new &lt;code&gt;JSplitPane&lt;/code&gt; with the specified
                  orientation and the specified components.                
                <param>
                    newOrientation  <code>JSplitPane.HORIZONTAL_SPLIT</code> or
                      <code>JSplitPane.VERTICAL_SPLIT</code>                    
                </param>
                <param>
                    newLeftComponent the <code>Component</code> that will
                      appear on the left
                      of a horizontally-split pane, or at the top of a
                      vertically-split pane                    
                </param>
                <param>
                    newRightComponent the <code>Component</code> that will
                      appear on the right
                      of a horizontally-split pane, or at the bottom of a
                      vertically-split pane                    
                </param>
                <exception>
                    IllegalArgumentException if <code>orientation</code>
                      is not one of: HORIZONTAL_SPLIT or VERTICAL_SPLIT                    
                </exception>
            </javadoc>
            <method name="JSplitPane" type="constructor" line="226">
                <params>
                    <param name="newOrientation" type="int"/>
                    <param name="newLeftComponent" type="Component"/>
                    <param name="newRightComponent" type="Component"/>
                </params>
            </method>
            <javadoc line="229">
                Creates a new &lt;code&gt;JSplitPane&lt;/code&gt; with the specified
                  orientation and
                  redrawing style, and with the specified components.                
                <param>
                    newOrientation  <code>JSplitPane.HORIZONTAL_SPLIT</code> or
                      <code>JSplitPane.VERTICAL_SPLIT</code>                    
                </param>
                <param>
                    newContinuousLayout  a boolean, true for the components to
                      redraw continuously as the divider changes position, false
                      to wait until the divider position stops changing to redraw                    
                </param>
                <param>
                    newLeftComponent the <code>Component</code> that will
                      appear on the left
                      of a horizontally-split pane, or at the top of a
                      vertically-split pane                    
                </param>
                <param>
                    newRightComponent the <code>Component</code> that will
                      appear on the right
                      of a horizontally-split pane, or at the bottom of a
                      vertically-split pane                    
                </param>
                <exception>
                    IllegalArgumentException if <code>orientation</code>
                      is not one of HORIZONTAL_SPLIT or VERTICAL_SPLIT                    
                </exception>
            </javadoc>
            <method name="JSplitPane" type="constructor" line="249">
                <params>
                    <param name="newOrientation" type="int"/>
                    <param name="newContinuousLayout" type="boolean"/>
                    <param name="newLeftComponent" type="Component"/>
                    <param name="newRightComponent" type="Component"/>
                </params>
            </method>
            <javadoc line="261">
                Sets the L&amp;F object that renders this component.                
                <param>
                    ui  the <code>SplitPaneUI</code> L&F object                    
                </param>
                <see>
                    UIDefaults#getUI                    
                </see>
                <beaninfobound>
                    : true
                      hidden: true
                      attribute: visualUpdate true
                      description: The UI object that implements the Component's LookAndFeel.                    
                </beaninfobound>
            </javadoc>
            <method name="setUI" type="void" line="270">
                <params>
                    <param name="ui" type="SplitPaneUI"/>
                </params>
                <scope line="271"/>
            </method>
            <javadoc line="276">
                Returns the &lt;code&gt;SplitPaneUI&lt;/code&gt; that is providing the
                  current look and feel.                
                <return>
                    the <code>SplitPaneUI</code> object that renders this component                    
                </return>
                <beaninfoexpert>
                    : true
                      description: The L&F object that renders this component.                    
                </beaninfoexpert>
            </javadoc>
            <method name="getUI" type="SplitPaneUI" line="283"/>
            <javadoc line="286">
                Notification from the &lt;code&gt;UIManager&lt;/code&gt; that the L&amp;F has changed.
                  Replaces the current UI object with the latest version from the
                  &lt;code&gt;UIManager&lt;/code&gt;.                
                <see>
                    JComponent#updateUI                    
                </see>
            </javadoc>
            <method name="updateUI" type="void" line="292"/>
            <javadoc line="296">
                Returns the name of the L&amp;F class that renders this component.                
                <return>
                    the string "SplitPaneUI"                    
                </return>
                <see>
                    JComponent#getUIClassID                    
                </see>
                <see>
                    UIDefaults#getUI                    
                </see>
                <beaninfoexpert>
                    : true
                      description: A string that specifies the name of the L&F class.                    
                </beaninfoexpert>
            </javadoc>
            <method name="getUIClassID" type="String" line="304"/>
            <javadoc line="307">
                Sets the size of the divider.                
                <param>
                    newSize an integer giving the size of the divider in pixels                    
                </param>
                <beaninfobound>
                    : true
                      description: The size of the divider.                    
                </beaninfobound>
            </javadoc>
            <method name="setDividerSize" type="void" line="313">
                <params>
                    <param name="newSize" type="int"/>
                </params>
                <declaration name="oldSize" type="int" line="314"/>
                <scope line="316"/>
            </method>
            <javadoc line="321">
                Returns the size of the divider.                
                <return>
                    an integer giving the size of the divider in pixels                    
                </return>
            </javadoc>
            <method name="getDividerSize" type="int" line="325"/>
            <javadoc line="328">
                Sets the component to the left (or above) the divider.                
                <param>
                    comp the <code>Component</code> to display in that position                    
                </param>
            </javadoc>
            <method name="setLeftComponent" type="void" line="332">
                <params>
                    <param name="comp" type="Component"/>
                </params>
                <scope line="333">
                    <scope line="334"/>
                </scope>
                <scope line="339"/>
            </method>
            <javadoc line="343">
                Returns the component to the left (or above) the divider.                
                <return>
                    the <code>Component</code> displayed in that position                    
                </return>
                <beaninfopreferred>
                    : true
                      description: The component to the left (or above) the divider.                    
                </beaninfopreferred>
            </javadoc>
            <method name="getLeftComponent" type="Component" line="349"/>
            <javadoc line="352">
                Sets the component above, or to the left of the divider.                
                <param>
                    comp the <code>Component</code> to display in that position                    
                </param>
                <beaninfodescription>
                    : The component above, or to the left of the divider.                    
                </beaninfodescription>
            </javadoc>
            <method name="setTopComponent" type="void" line="357">
                <params>
                    <param name="comp" type="Component"/>
                </params>
            </method>
            <javadoc line="360">
                Returns the component above, or to the left of the divider.                
                <return>
                    the <code>Component</code> displayed in that position                    
                </return>
            </javadoc>
            <method name="getTopComponent" type="Component" line="364"/>
            <javadoc line="367">
                Sets the component to the right (or below) the divider.                
                <param>
                    comp the <code>Component</code> to display in that position                    
                </param>
                <beaninfopreferred>
                    : true
                      description: The component to the right (or below) the divider.                    
                </beaninfopreferred>
            </javadoc>
            <method name="setRightComponent" type="void" line="373">
                <params>
                    <param name="comp" type="Component"/>
                </params>
                <scope line="374">
                    <scope line="375"/>
                </scope>
                <scope line="380"/>
            </method>
            <javadoc line="384">
                Returns the component to the right (or below) the divider.                
                <return>
                    the <code>Component</code> displayed in that position                    
                </return>
            </javadoc>
            <method name="getRightComponent" type="Component" line="388"/>
            <javadoc line="391">
                Sets the component below, or to the right of the divider.                
                <param>
                    comp the <code>Component</code> to display in that position                    
                </param>
                <beaninfodescription>
                    : The component below, or to the right of the divider.                    
                </beaninfodescription>
            </javadoc>
            <method name="setBottomComponent" type="void" line="396">
                <params>
                    <param name="comp" type="Component"/>
                </params>
            </method>
            <javadoc line="399">
                Returns the component below, or to the right of the divider.                
                <return>
                    the <code>Component</code> displayed in that position                    
                </return>
            </javadoc>
            <method name="getBottomComponent" type="Component" line="403"/>
            <javadoc line="406">
                Sets the value of the &lt;code&gt;oneTouchExpandable&lt;/code&gt; property,
                  which must be &lt;code&gt;true&lt;/code&gt; for the
                  &lt;code&gt;JSplitPane&lt;/code&gt; to provide a UI widget
                  on the divider to quickly expand/collapse the divider.
                  The default value of this property is &lt;code&gt;false&lt;/code&gt;.
                  Some look and feels might not support one-touch expanding;
                  they will ignore this property.                
                <param>
                    newValue <code>true</code> to specify that the split pane should provide a
                      collapse/expand widget                    
                </param>
                <beaninfobound>
                    : true
                      description: UI widget on the divider to quickly
                      expand/collapse the divider.                    
                </beaninfobound>
                <see>
                    #isOneTouchExpandable                    
                </see>
            </javadoc>
            <method name="setOneTouchExpandable" type="void" line="421">
                <params>
                    <param name="newValue" type="boolean"/>
                </params>
                <declaration name="oldValue" type="boolean" line="422"/>
            </method>
            <javadoc line="428">
                Gets the &lt;code&gt;oneTouchExpandable&lt;/code&gt; property.                
                <return>
                    the value of the <code>oneTouchExpandable</code> property                    
                </return>
                <see>
                    #setOneTouchExpandable                    
                </see>
            </javadoc>
            <method name="isOneTouchExpandable" type="boolean" line="433"/>
            <javadoc line="436">
                Sets the last location the divider was at to
                  &lt;code&gt;newLastLocation&lt;/code&gt;.                
                <param>
                    newLastLocation an integer specifying the last divider location
                      in pixels, from the left (or upper) edge of the pane to the
                      left (or upper) edge of the divider                    
                </param>
                <beaninfobound>
                    : true
                      description: The last location the divider was at.                    
                </beaninfobound>
            </javadoc>
            <method name="setLastDividerLocation" type="void" line="445">
                <params>
                    <param name="newLastLocation" type="int"/>
                </params>
                <declaration name="oldLocation" type="int" line="446"/>
            </method>
            <javadoc line="450">
                Returns the last location the divider was at.                
                <return>
                    an integer specifying the last divider location as a count
                      of pixels from the left (or upper) edge of the pane to the
                      left (or upper) edge of the divider                    
                </return>
            </javadoc>
            <method name="getLastDividerLocation" type="int" line="456"/>
            <javadoc line="459">
                Sets the orientation, or how the splitter is divided. The options
                  are:&lt;ul&gt;
                  &lt;li&gt;JSplitPane.VERTICAL_SPLIT  (above/below orientation of components)
                  &lt;li&gt;JSplitPane.HORIZONTAL_SPLIT  (left/right orientation of components)
                  &lt;/ul&gt;                
                <param>
                    orientation an integer specifying the orientation                    
                </param>
                <exception>
                    IllegalArgumentException if orientation is not one of:
                      HORIZONTAL_SPLIT or VERTICAL_SPLIT.                    
                </exception>
                <beaninfobound>
                    : true
                      description: The orientation, or how the splitter is divided.
                      enum: HORIZONTAL_SPLIT JSplitPane.HORIZONTAL_SPLIT
                      VERTICAL_SPLIT   JSplitPane.VERTICAL_SPLIT                    
                </beaninfobound>
            </javadoc>
            <method name="setOrientation" type="void" line="473">
                <params>
                    <param name="orientation" type="int"/>
                </params>
                <scope line="474"/>
                <declaration name="oldOrientation" type="int" line="477"/>
            </method>
            <javadoc line="481">
                Returns the orientation.                
                <return>
                    an integer giving the orientation                    
                </return>
                <see>
                    #setOrientation                    
                </see>
            </javadoc>
            <method name="getOrientation" type="int" line="486"/>
            <javadoc line="489">
                Sets the value of the &lt;code&gt;continuousLayout&lt;/code&gt; property,
                  which must be &lt;code&gt;true&lt;/code&gt; for the child components
                  to be continuously
                  redisplayed and laid out during user intervention.
                  The default value of this property is look and feel dependent.
                  Some look and feels might not support continuous layout;
                  they will ignore this property.                
                <param>
                    newContinuousLayout  <code>true</code> if the components
                      should continuously be redrawn as the divider changes position                    
                </param>
                <beaninfobound>
                    : true
                      description: Whether the child components are
                      continuously redisplayed and laid out during
                      user intervention.                    
                </beaninfobound>
                <see>
                    #isContinuousLayout                    
                </see>
            </javadoc>
            <method name="setContinuousLayout" type="void" line="505">
                <params>
                    <param name="newContinuousLayout" type="boolean"/>
                </params>
                <declaration name="oldCD" type="boolean" line="506"/>
            </method>
            <javadoc line="510">
                Gets the &lt;code&gt;continuousLayout&lt;/code&gt; property.                
                <return>
                    the value of the <code>continuousLayout</code> property                    
                </return>
                <see>
                    #setContinuousLayout                    
                </see>
            </javadoc>
            <method name="isContinuousLayout" type="boolean" line="515"/>
            <javadoc line="518">
                Specifies how to distribute extra space when the size of the split pane
                  changes. A value of 0, the default,
                  indicates the right/bottom component gets all the extra space (the
                  left/top component acts fixed), where as a value of 1 specifies the
                  left/top component gets all the extra space (the right/bottom component
                  acts fixed). Specifically, the left/top component gets (weight  diff)
                  extra space and the right/bottom component gets (1 - weight)  diff
                  extra space.                
                <param>
                    value as described above                    
                </param>
                <exception>
                    IllegalArgumentException if <code>value</code> is < 0 or > 1                    
                </exception>
                <since>
                    1.3                    
                </since>
                <beaninfobound>
                    : true
                      description: Specifies how to distribute extra space when the split pane
                      resizes.                    
                </beaninfobound>
            </javadoc>
            <method name="setResizeWeight" type="void" line="534">
                <params>
                    <param name="value" type="double"/>
                </params>
                <scope line="535"/>
                <declaration name="oldWeight" type="double" line="538"/>
            </method>
            <javadoc line="542">
                Returns the number that determines how extra space is distributed.                
                <return>
                    how extra space is to be distributed on a resize of the
                      split pane                    
                </return>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getResizeWeight" type="double" line="548"/>
            <javadoc line="551">
                Lays out the &lt;code&gt;JSplitPane&lt;/code&gt; layout based on the preferred size
                  of the children components. This will likely result in changing
                  the divider location.                
            </javadoc>
            <method name="resetToPreferredSizes" type="void" line="556">
                <declaration name="ui" type="SplitPaneUI" line="557"/>
                <scope line="558"/>
            </method>
            <javadoc line="562">
                Sets the divider location as a percentage of the
                  &lt;code&gt;JSplitPane&lt;/code&gt;&apos;s size.
                  &lt;p&gt;
                  This method is implemented in terms of
                  &lt;code&gt;setDividerLocation(int)&lt;/code&gt;.
                  This method immediately changes the size of the split pane based on
                  its current size. If the split pane is not correctly realized and on
                  screen, this method will have no effect (new divider location will
                  become (current size  proportionalLocation) which is 0).                
                <param>
                    proportionalLocation  a double-precision floating point value
                      that specifies a percentage, from zero (top/left) to 1.0
                      (bottom/right)                    
                </param>
                <exception>
                    IllegalArgumentException if the specified location is < 0
                      or > 1.0                    
                </exception>
                <beaninfodescription>
                    : The location of the divider.                    
                </beaninfodescription>
            </javadoc>
            <method name="setDividerLocation" type="void" line="579">
                <params>
                    <param name="proportionalLocation" type="double"/>
                </params>
                <scope line="580"/>
                <scope line="583"/>
                <scope line="586"/>
            </method>
            <javadoc line="590">
                Sets the location of the divider. This is passed off to the
                  look and feel implementation, and then listeners are notified. A value
                  less than 0 implies the divider should be reset to a value that
                  attempts to honor the preferred size of the left/top component.
                  After notifying the listeners, the last divider location is updated,
                  via &lt;code&gt;setLastDividerLocation&lt;/code&gt;.                
                <param>
                    location an int specifying a UI-specific value (typically a
                      pixel count)                    
                </param>
                <beaninfobound>
                    : true
                      description: The location of the divider.                    
                </beaninfobound>
            </javadoc>
            <method name="setDividerLocation" type="void" line="602">
                <params>
                    <param name="location" type="int"/>
                </params>
                <declaration name="oldValue" type="int" line="603"/>
                <declaration name="ui" type="SplitPaneUI" line="605"/>
                <scope line="606"/>
            </method>
            <javadoc line="612">
                Returns the last value passed to &lt;code&gt;setDividerLocation&lt;/code&gt;.
                  The value returned from this method may differ from the actual
                  divider location (if &lt;code&gt;setDividerLocation&lt;/code&gt; was passed a
                  value bigger than the curent size).                
                <return>
                    an integer specifying the location of the divider                    
                </return>
            </javadoc>
            <method name="getDividerLocation" type="int" line="619"/>
            <javadoc line="622">
                Returns the minimum location of the divider from the look and feel
                  implementation.                
                <return>
                    an integer specifying a UI-specific value for the minimum
                      location (typically a pixel count); or -1 if the UI is
                      <code>null</code>                    
                </return>
                <beaninfodescription>
                    : The minimum location of the divider from the L&F.                    
                </beaninfodescription>
            </javadoc>
            <method name="getMinimumDividerLocation" type="int" line="630">
                <declaration name="ui" type="SplitPaneUI" line="631"/>
                <scope line="632"/>
            </method>
            <javadoc line="637">
                Returns the maximum location of the divider from the look and feel
                  implementation.                
                <return>
                    an integer specifying a UI-specific value for the maximum
                      location (typically a pixel count); or -1 if the  UI is
                      <code>null</code>                    
                </return>
            </javadoc>
            <method name="getMaximumDividerLocation" type="int" line="644">
                <declaration name="ui" type="SplitPaneUI" line="645"/>
                <scope line="646"/>
            </method>
            <javadoc line="651">
                Removes the child component, &lt;code&gt;component&lt;/code&gt; from the
                  pane. Resets the &lt;code&gt;leftComponent&lt;/code&gt; or
                  &lt;code&gt;rightComponent&lt;/code&gt; instance variable, as necessary.                
                <param>
                    component the <code>Component</code> to remove                    
                </param>
            </javadoc>
            <method name="remove" type="void" line="657">
                <params>
                    <param name="component" type="Component"/>
                </params>
                <scope line="658"/>
                <scope line="661"/>
            </method>
            <javadoc line="668">
                Removes the &lt;code&gt;Component&lt;/code&gt; at the specified index.
                  Updates the &lt;code&gt;leftComponent&lt;/code&gt; and &lt;code&gt;rightComponent&lt;/code&gt;
                  instance variables as necessary, and then messages super.                
                <param>
                    index an integer specifying the component to remove, where
                      1 specifies the left/top component and 2 specifies the
                      bottom/right component                    
                </param>
            </javadoc>
            <method name="remove" type="void" line="676">
                <params>
                    <param name="index" type="int"/>
                </params>
                <declaration name="comp" type="Component" line="677"/>
                <scope line="678"/>
                <scope line="681"/>
            </method>
            <javadoc line="688">
                Removes all the child components from the split pane. Resets the
                  &lt;code&gt;leftComonent&lt;/code&gt; and &lt;code&gt;rightComponent&lt;/code&gt;
                  instance variables.                
            </javadoc>
            <method name="removeAll" type="void" line="693"/>
            <javadoc line="699">
                Returns true, so that calls to &lt;code&gt;revalidate&lt;/code&gt;
                  on any descendant of this &lt;code&gt;JSplitPane&lt;/code&gt;
                  will cause a request to be queued that
                  will validate the &lt;code&gt;JSplitPane&lt;/code&gt; and all its descendants.                
                <return>
                    true                    
                </return>
                <see>
                    JComponent#revalidate                    
                </see>
                <see>
                    java.awt.Container#isValidateRoot                    
                </see>
                <beaninfohidden>
                    : true                    
                </beaninfohidden>
            </javadoc>
            <method name="isValidateRoot" type="boolean" line="709"/>
            <javadoc line="712">
                Adds the specified component to this split pane.
                  If &lt;code&gt;constraints&lt;/code&gt; identifies the left/top or
                  right/bottom child component, and a component with that identifier
                  was previously added, it will be removed and then &lt;code&gt;comp&lt;/code&gt;
                  will be added in its place. If &lt;code&gt;constraints&lt;/code&gt; is not
                  one of the known identifiers the layout manager may throw an
                  &lt;code&gt;IllegalArgumentException&lt;/code&gt;.
                  &lt;p&gt;
                  The possible constraints objects (Strings) are:
                  &lt;ul&gt;
                  &lt;li&gt;JSplitPane.TOP
                  &lt;li&gt;JSplitPane.LEFT
                  &lt;li&gt;JSplitPane.BOTTOM
                  &lt;li&gt;JSplitPane.RIGHT
                  &lt;/ul&gt;
                  If the &lt;code&gt;constraints&lt;/code&gt; object is &lt;code&gt;null&lt;/code&gt;,
                  the component is added in the
                  first available position (left/top if open, else right/bottom).                
                <param>
                    comp        the component to add                    
                </param>
                <param>
                    constraints an <code>Object</code> specifying the
                      layout constraints
                      (position) for this component                    
                </param>
                <param>
                    index       an integer specifying the index in the container's
                      list.                    
                </param>
                <exception>
                    IllegalArgumentException  if the <code>constraints</code>
                      object does not match an existing component                    
                </exception>
                <see>
                    java.awt.Container#addImpl(Component,Object,int)                    
                </see>
            </javadoc>
            <method name="addImpl" type="void" line="741">
                <params>
                    <param name="comp" type="Component"/>
                    <param name="constraints" type="Object"/>
                    <param name="index" type="int"/>
                </params>
                <declaration name="toRemove" type="Component" line="742"/>
                <scope line="743"/>
                <scope line="746">
                    <scope line="747"/>
                    <scope line="750"/>
                </scope>
                <scope line="754">
                    <scope line="756"/>
                </scope>
                <scope line="762">
                    <scope line="764"/>
                </scope>
                <scope line="770"/>
            </method>
            <javadoc line="777">
                Subclassed to message the UI with &lt;code&gt;finishedPaintingChildren&lt;/code&gt;
                  after super has been messaged, as well as painting the border.                
                <param>
                    g the <code>Graphics</code> context within which to paint                    
                </param>
            </javadoc>
            <method name="paintChildren" type="void" line="782">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
                <declaration name="ui" type="SplitPaneUI" line="784"/>
                <scope line="785">
                    <declaration name="tempG" type="Graphics" line="786"/>
                </scope>
            </method>
            <javadoc line="791">
                See &lt;code&gt;readObject&lt;/code&gt; and &lt;code&gt;writeObject&lt;/code&gt; in
                  &lt;code&gt;JComponent&lt;/code&gt; for more
                  information about serialization in Swing.                
            </javadoc>
            <method name="writeObject" type="void" line="796">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
                <scope line="798">
                    <declaration name="count" type="byte" line="799"/>
                    <scope line="801"/>
                </scope>
            </method>
            <method name="setUIProperty" type="void" line="806">
                <params>
                    <param name="propertyName" type="String"/>
                    <param name="value" type="Object"/>
                </params>
                <scope line="807">
                    <scope line="808"/>
                </scope>
                <scope line="813">
                    <scope line="814"/>
                </scope>
                <scope line="819"/>
            </method>
            <javadoc line="823">
                Returns a string representation of this &lt;code&gt;JSplitPane&lt;/code&gt;.
                  This method
                  is intended to be used only for debugging purposes, and the
                  content and format of the returned string may vary between
                  implementations. The returned string may be empty but may not
                  be &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    a string representation of this <code>JSplitPane</code>.                    
                </return>
            </javadoc>
            <method name="paramString" type="String" line="832">
                <declaration name="orientationString" type="String" line="833"/>
                <declaration name="continuousLayoutString" type="String" line="834"/>
                <declaration name="oneTouchExpandableString" type="String" line="835"/>
            </method>
            <javadoc line="838">
                Gets the AccessibleContext associated with this JSplitPane.
                  For split panes, the AccessibleContext takes the form of an
                  AccessibleJSplitPane.
                  A new AccessibleJSplitPane instance is created if necessary.                
                <return>
                    an AccessibleJSplitPane that serves as the
                      AccessibleContext of this JSplitPane                    
                </return>
                <beaninfoexpert>
                    : true
                      description: The AccessibleContext associated with this SplitPane.                    
                </beaninfoexpert>
            </javadoc>
            <method name="getAccessibleContext" type="AccessibleContext" line="848">
                <scope line="849"/>
            </method>
            <class name="AccessibleJSplitPane" line="854">
                <extends class="AccessibleJComponent"/>
                <implements interface="AccessibleValue"/>
                <javadoc line="854">
                    This class implements accessibility support for the
                      &lt;code&gt;JSplitPane&lt;/code&gt; class.  It provides an implementation of the
                      Java Accessibility API appropriate to split pane user-interface elements.
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      Serialized objects of this class will not be compatible with
                      future Swing releases. The current serialization support is
                      appropriate for short term storage or RMI between applications running
                      the same version of Swing.  As of 1.4, support for long term storage
                      of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                      has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                      Please see {@link java.beans.XMLEncoder}.                    
                </javadoc>
                <javadoc line="869">
                    Gets the state set of this object.                    
                    <return>
                        an instance of AccessibleState containing the current state
                          of the object                        
                    </return>
                    <see>
                        AccessibleState                        
                    </see>
                </javadoc>
                <method name="getAccessibleStateSet" type="AccessibleStateSet" line="875">
                    <declaration name="states" type="AccessibleStateSet" line="876"/>
                    <scope line="877"/>
                    <scope line="880"/>
                </method>
                <javadoc line="885">
                    Get the AccessibleValue associated with this object.  In the
                      implementation of the Java Accessibility API for this class,
                      return this object, which is responsible for implementing the
                      AccessibleValue interface on behalf of itself.                    
                    <return>
                        this object                        
                    </return>
                </javadoc>
                <method name="getAccessibleValue" type="AccessibleValue" line="892"/>
                <javadoc line="895">
                    Gets the accessible value of this object.                    
                    <return>
                        a localized String describing the value of this object                        
                    </return>
                </javadoc>
                <method name="getCurrentAccessibleValue" type="Number" line="899"/>
                <javadoc line="902">
                    Sets the value of this object as a Number.                    
                    <return>
                        True if the value was set.                        
                    </return>
                </javadoc>
                <method name="setCurrentAccessibleValue" type="boolean" line="906">
                    <params>
                        <param name="n" type="Number"/>
                    </params>
                    <scope line="907"/>
                </method>
                <javadoc line="913">
                    Gets the minimum accessible value of this object.                    
                    <return>
                        The minimum value of this object.                        
                    </return>
                </javadoc>
                <method name="getMinimumAccessibleValue" type="Number" line="917"/>
                <javadoc line="920">
                    Gets the maximum accessible value of this object.                    
                    <return>
                        The maximum value of this object.                        
                    </return>
                </javadoc>
                <method name="getMaximumAccessibleValue" type="Number" line="924"/>
                <javadoc line="927">
                    Gets the role of this object.                    
                    <return>
                        an instance of AccessibleRole describing the role of
                          the object                        
                    </return>
                    <see>
                        AccessibleRole                        
                    </see>
                </javadoc>
                <method name="getAccessibleRole" type="AccessibleRole" line="933"/>
            </class>
        </class>
    </source>