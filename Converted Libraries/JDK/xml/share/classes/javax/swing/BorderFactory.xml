<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.awt.BasicStroke"/>
        <import package="java.awt.Color"/>
        <import package="java.awt.Font"/>
        <import package="java.awt.Paint"/>
        <import package="javax.swing.border"/>
        <class name="BorderFactory" line="7">
            <javadoc line="7">
                Factory class for vending standard &lt;code&gt;Border&lt;/code&gt; objects.  Wherever
                  possible, this factory will hand out references to shared
                  &lt;code&gt;Border&lt;/code&gt; instances.
                  For further information and examples see
                  &lt;a href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/misc/border.html&quot;&gt;How
                  to Use Borders&lt;/a&gt;,
                  a section in &lt;em&gt;The Java Tutorial&lt;/em&gt;.                
                <author>
                    David Kloba                    
                </author>
            </javadoc>
            <javadoc line="18">
                Don&apos;t let anyone instantiate this class                
            </javadoc>
            <method name="BorderFactory" type="constructor" line="21"/>
            <javadoc line="23">
                Creates a line border withe the specified color.                
                <param>
                    color  a &lt;code&gt;Color&lt;/code&gt; to use for the line                    
                </param>
                <return>
                    the &lt;code&gt;Border&lt;/code&gt; object                    
                </return>
            </javadoc>
            <method name="createLineBorder" type="Border" line="28">
                <params>
                    <param name="color" type="Color"/>
                </params>
            </method>
            <javadoc line="31">
                Creates a line border with the specified color
                  and width. The width applies to all four sides of the
                  border. To specify widths individually for the top,
                  bottom, left, and right, use{@link #createMatteBorder(int,int,int,int,Color)}.                
                <param>
                    color  a &lt;code&gt;Color&lt;/code&gt; to use for the line                    
                </param>
                <param>
                    thickness  an integer specifying the width in pixels                    
                </param>
                <return>
                    the &lt;code&gt;Border&lt;/code&gt; object                    
                </return>
            </javadoc>
            <method name="createLineBorder" type="Border" line="40">
                <params>
                    <param name="color" type="Color"/>
                    <param name="thickness" type="int"/>
                </params>
            </method>
            <javadoc line="43">
                Creates a line border with the specified color, thickness, and corner shape.                
                <param>
                    color      the color of the border                    
                </param>
                <param>
                    thickness  the thickness of the border                    
                </param>
                <param>
                    rounded    whether or not border corners should be round                    
                </param>
                <return>
                    the {@code Border} object                    
                </return>
                <see>
                    LineBorder#LineBorder(Color,int,boolean)                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="createLineBorder" type="Border" line="52">
                <params>
                    <param name="color" type="Color"/>
                    <param name="thickness" type="int"/>
                    <param name="rounded" type="boolean"/>
                </params>
            </method>
            <declaration name="sharedRaisedBevel" type="Border" line="55"/>
            <declaration name="sharedLoweredBevel" type="Border" line="56"/>
            <javadoc line="57">
                Creates a border with a raised beveled edge, using
                  brighter shades of the component&apos;s current background color
                  for highlighting, and darker shading for shadows.
                  (In a raised border, highlights are on top and shadows
                  are underneath.)                
                <return>
                    the &lt;code&gt;Border&lt;/code&gt; object                    
                </return>
            </javadoc>
            <method name="createRaisedBevelBorder" type="Border" line="65"/>
            <javadoc line="68">
                Creates a border with a lowered beveled edge, using
                  brighter shades of the component&apos;s current background color
                  for highlighting, and darker shading for shadows.
                  (In a lowered border, shadows are on top and highlights
                  are underneath.)                
                <return>
                    the &lt;code&gt;Border&lt;/code&gt; object                    
                </return>
            </javadoc>
            <method name="createLoweredBevelBorder" type="Border" line="76"/>
            <javadoc line="79">
                Creates a beveled border of the specified type, using
                  brighter shades of the component&apos;s current background color
                  for highlighting, and darker shading for shadows.
                  (In a lowered border, shadows are on top and highlights
                  are underneath.)                
                <param>
                    type  an integer specifying either
                      &lt;code&gt;BevelBorder.LOWERED&lt;/code&gt; or
                      &lt;code&gt;BevelBorder.RAISED&lt;/code&gt;                    
                </param>
                <return>
                    the &lt;code&gt;Border&lt;/code&gt; object                    
                </return>
            </javadoc>
            <method name="createBevelBorder" type="Border" line="90">
                <params>
                    <param name="type" type="int"/>
                </params>
            </method>
            <javadoc line="93">
                Creates a beveled border of the specified type, using
                  the specified highlighting and shadowing. The outer
                  edge of the highlighted area uses a brighter shade of
                  the highlight color. The inner edge of the shadow area
                  uses a brighter shade of the shadow color.                
                <param>
                    type  an integer specifying either
                      &lt;code&gt;BevelBorder.LOWERED&lt;/code&gt; or
                      &lt;code&gt;BevelBorder.RAISED&lt;/code&gt;                    
                </param>
                <param>
                    highlight  a &lt;code&gt;Color&lt;/code&gt; object for highlights                    
                </param>
                <param>
                    shadow     a &lt;code&gt;Color&lt;/code&gt; object for shadows                    
                </param>
                <return>
                    the &lt;code&gt;Border&lt;/code&gt; object                    
                </return>
            </javadoc>
            <method name="createBevelBorder" type="Border" line="106">
                <params>
                    <param name="type" type="int"/>
                    <param name="highlight" type="Color"/>
                    <param name="shadow" type="Color"/>
                </params>
            </method>
            <javadoc line="109">
                Creates a beveled border of the specified type, using
                  the specified colors for the inner and outer highlight
                  and shadow areas.                
                <param>
                    type  an integer specifying either
                      &lt;code&gt;BevelBorder.LOWERED&lt;/code&gt; or
                      &lt;code&gt;BevelBorder.RAISED&lt;/code&gt;                    
                </param>
                <param>
                    highlightOuter  a &lt;code&gt;Color&lt;/code&gt; object for the
                      outer edge of the highlight area                    
                </param>
                <param>
                    highlightInner  a &lt;code&gt;Color&lt;/code&gt; object for the
                      inner edge of the highlight area                    
                </param>
                <param>
                    shadowOuter     a &lt;code&gt;Color&lt;/code&gt; object for the
                      outer edge of the shadow area                    
                </param>
                <param>
                    shadowInner     a &lt;code&gt;Color&lt;/code&gt; object for the
                      inner edge of the shadow area                    
                </param>
                <return>
                    the &lt;code&gt;Border&lt;/code&gt; object                    
                </return>
            </javadoc>
            <method name="createBevelBorder" type="Border" line="126">
                <params>
                    <param name="type" type="int"/>
                    <param name="highlightOuter" type="Color"/>
                    <param name="highlightInner" type="Color"/>
                    <param name="shadowOuter" type="Color"/>
                    <param name="shadowInner" type="Color"/>
                </params>
            </method>
            <method name="createSharedBevel" type="Border" line="129">
                <params>
                    <param name="type" type="int"/>
                </params>
                <scope line="130"/>
                <scope line="133"/>
            </method>
            <declaration name="sharedSoftRaisedBevel" type="Border" line="138"/>
            <declaration name="sharedSoftLoweredBevel" type="Border" line="139"/>
            <javadoc line="140">
                Creates a beveled border with a raised edge and softened corners,
                  using brighter shades of the component&apos;s current background color
                  for highlighting, and darker shading for shadows.
                  In a raised border, highlights are on top and shadows are underneath.                
                <return>
                    the {@code Border} object                    
                </return>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="createRaisedSoftBevelBorder" type="Border" line="148">
                <scope line="149"/>
            </method>
            <javadoc line="154">
                Creates a beveled border with a lowered edge and softened corners,
                  using brighter shades of the component&apos;s current background color
                  for highlighting, and darker shading for shadows.
                  In a lowered border, shadows are on top and highlights are underneath.                
                <return>
                    the {@code Border} object                    
                </return>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="createLoweredSoftBevelBorder" type="Border" line="162">
                <scope line="163"/>
            </method>
            <javadoc line="168">
                Creates a beveled border of the specified type with softened corners,
                  using brighter shades of the component&apos;s current background color
                  for highlighting, and darker shading for shadows.
                  The type is either {@link BevelBorder#RAISED} or {@link BevelBorder#LOWERED}.                
                <param>
                    type  a type of a bevel                    
                </param>
                <return>
                    the {@code Border} object or {@code null}if the specified type is not valid                    
                </return>
                <see>
                    BevelBorder#BevelBorder(int)                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="createSoftBevelBorder" type="Border" line="178">
                <params>
                    <param name="type" type="int"/>
                </params>
                <scope line="179"/>
                <scope line="182"/>
            </method>
            <javadoc line="187">
                Creates a beveled border of the specified type with softened corners,
                  using the specified highlighting and shadowing.
                  The type is either {@link BevelBorder#RAISED} or {@link BevelBorder#LOWERED}.
                  The outer edge of the highlight area uses
                  a brighter shade of the {@code highlight} color.
                  The inner edge of the shadow area uses
                  a brighter shade of the {@code shadow} color.                
                <param>
                    type       a type of a bevel                    
                </param>
                <param>
                    highlight  a basic color of the highlight area                    
                </param>
                <param>
                    shadow     a basic color of the shadow area                    
                </param>
                <return>
                    the {@code Border} object                    
                </return>
                <see>
                    BevelBorder#BevelBorder(int,Color,Color)                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="createSoftBevelBorder" type="Border" line="202">
                <params>
                    <param name="type" type="int"/>
                    <param name="highlight" type="Color"/>
                    <param name="shadow" type="Color"/>
                </params>
            </method>
            <javadoc line="205">
                Creates a beveled border of the specified type with softened corners,
                  using the specified colors for the inner and outer edges
                  of the highlight and the shadow areas.
                  The type is either {@link BevelBorder#RAISED} or {@link BevelBorder#LOWERED}.
                  Note: The shadow inner and outer colors are switched
                  for a lowered bevel border.                
                <param>
                    type            a type of a bevel                    
                </param>
                <param>
                    highlightOuter  a color of the outer edge of the highlight area                    
                </param>
                <param>
                    highlightInner  a color of the inner edge of the highlight area                    
                </param>
                <param>
                    shadowOuter     a color of the outer edge of the shadow area                    
                </param>
                <param>
                    shadowInner     a color of the inner edge of the shadow area                    
                </param>
                <return>
                    the {@code Border} object                    
                </return>
                <see>
                    BevelBorder#BevelBorder(int,Color,Color,Color,Color)                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="createSoftBevelBorder" type="Border" line="221">
                <params>
                    <param name="type" type="int"/>
                    <param name="highlightOuter" type="Color"/>
                    <param name="highlightInner" type="Color"/>
                    <param name="shadowOuter" type="Color"/>
                    <param name="shadowInner" type="Color"/>
                </params>
            </method>
            <declaration name="sharedEtchedBorder" type="Border" line="224"/>
            <declaration name="sharedRaisedEtchedBorder" type="Border" line="225"/>
            <javadoc line="226">
                Creates a border with an &quot;etched&quot; look using
                  the component&apos;s current background color for
                  highlighting and shading.                
                <return>
                    the &lt;code&gt;Border&lt;/code&gt; object                    
                </return>
            </javadoc>
            <method name="createEtchedBorder" type="Border" line="232"/>
            <javadoc line="235">
                Creates a border with an &quot;etched&quot; look using
                  the specified highlighting and shading colors.                
                <param>
                    highlight  a &lt;code&gt;Color&lt;/code&gt; object for the border highlights                    
                </param>
                <param>
                    shadow     a &lt;code&gt;Color&lt;/code&gt; object for the border shadows                    
                </param>
                <return>
                    the &lt;code&gt;Border&lt;/code&gt; object                    
                </return>
            </javadoc>
            <method name="createEtchedBorder" type="Border" line="242">
                <params>
                    <param name="highlight" type="Color"/>
                    <param name="shadow" type="Color"/>
                </params>
            </method>
            <javadoc line="245">
                Creates a border with an &quot;etched&quot; look using
                  the component&apos;s current background color for
                  highlighting and shading.                
                <param>
                    type      one of &lt;code&gt;EtchedBorder.RAISED&lt;/code&gt;, or
                      &lt;code&gt;EtchedBorder.LOWERED&lt;/code&gt;                    
                </param>
                <return>
                    the &lt;code&gt;Border&lt;/code&gt; object                    
                </return>
                <exception>
                    IllegalArgumentException if type is not either
                      &lt;code&gt;EtchedBorder.RAISED&lt;/code&gt; or
                      &lt;code&gt;EtchedBorder.LOWERED&lt;/code&gt;                    
                </exception>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="createEtchedBorder" type="Border" line="257">
                <params>
                    <param name="type" type="int"/>
                </params>
                <scope line="260"/>
            </method>
            <javadoc line="270">
                Creates a border with an &quot;etched&quot; look using
                  the specified highlighting and shading colors.                
                <param>
                    type      one of &lt;code&gt;EtchedBorder.RAISED&lt;/code&gt;, or
                      &lt;code&gt;EtchedBorder.LOWERED&lt;/code&gt;                    
                </param>
                <param>
                    highlight  a &lt;code&gt;Color&lt;/code&gt; object for the border highlights                    
                </param>
                <param>
                    shadow     a &lt;code&gt;Color&lt;/code&gt; object for the border shadows                    
                </param>
                <return>
                    the &lt;code&gt;Border&lt;/code&gt; object                    
                </return>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="createEtchedBorder" type="Border" line="280">
                <params>
                    <param name="type" type="int"/>
                    <param name="highlight" type="Color"/>
                    <param name="shadow" type="Color"/>
                </params>
            </method>
            <javadoc line="283">
                Creates a new titled border with the specified title,
                  the default border type (determined by the current look and feel),
                  the default text position (sitting on the top line),
                  the default justification (leading), and the default
                  font and text color (determined by the current look and feel).                
                <param>
                    title      a &lt;code&gt;String&lt;/code&gt; containing the text of the title                    
                </param>
                <return>
                    the &lt;code&gt;TitledBorder&lt;/code&gt; object                    
                </return>
            </javadoc>
            <method name="createTitledBorder" type="TitledBorder" line="292">
                <params>
                    <param name="title" type="String"/>
                </params>
            </method>
            <javadoc line="295">
                Creates a new titled border with an empty title,
                  the specified border object,
                  the default text position (sitting on the top line),
                  the default justification (leading), and the default
                  font and text color (determined by the current look and feel).                
                <param>
                    border     the &lt;code&gt;Border&lt;/code&gt; object to add the title to; if
                      &lt;code&gt;null&lt;/code&gt; the &lt;code&gt;Border&lt;/code&gt; is determined
                      by the current look and feel.                    
                </param>
                <return>
                    the &lt;code&gt;TitledBorder&lt;/code&gt; object                    
                </return>
            </javadoc>
            <method name="createTitledBorder" type="TitledBorder" line="306">
                <params>
                    <param name="border" type="Border"/>
                </params>
            </method>
            <javadoc line="309">
                Adds a title to an existing border,
                  with default positioning (sitting on the top line),
                  default justification (leading) and the default
                  font and text color (determined by the current look and feel).                
                <param>
                    border     the &lt;code&gt;Border&lt;/code&gt; object to add the title to                    
                </param>
                <param>
                    title      a &lt;code&gt;String&lt;/code&gt; containing the text of the title                    
                </param>
                <return>
                    the &lt;code&gt;TitledBorder&lt;/code&gt; object                    
                </return>
            </javadoc>
            <method name="createTitledBorder" type="TitledBorder" line="318">
                <params>
                    <param name="border" type="Border"/>
                    <param name="title" type="String"/>
                </params>
            </method>
            <javadoc line="321">
                Adds a title to an existing border, with the specified
                  positioning and using the default
                  font and text color (determined by the current look and feel).                
                <param>
                    border      the &lt;code&gt;Border&lt;/code&gt; object to add the title to                    
                </param>
                <param>
                    title       a &lt;code&gt;String&lt;/code&gt; containing the text of the title                    
                </param>
                <param>
                    titleJustification  an integer specifying the justification
                      of the title -- one of the following:
                      &lt;ul&gt;
                      &lt;li&gt;&lt;code&gt;TitledBorder.LEFT&lt;/code&gt;
                      &lt;li&gt;&lt;code&gt;TitledBorder.CENTER&lt;/code&gt;
                      &lt;li&gt;&lt;code&gt;TitledBorder.RIGHT&lt;/code&gt;
                      &lt;li&gt;&lt;code&gt;TitledBorder.LEADING&lt;/code&gt;
                      &lt;li&gt;&lt;code&gt;TitledBorder.TRAILING&lt;/code&gt;
                      &lt;li&gt;&lt;code&gt;TitledBorder.DEFAULT_JUSTIFICATION&lt;/code&gt; (leading)
                      &lt;/ul&gt;                    
                </param>
                <param>
                    titlePosition       an integer specifying the vertical position of
                      the text in relation to the border -- one of the following:
                      &lt;ul&gt;
                      &lt;li&gt;&lt;code&gt; TitledBorder.ABOVE_TOP&lt;/code&gt;
                      &lt;li&gt;&lt;code&gt;TitledBorder.TOP&lt;/code&gt; (sitting on the top line)
                      &lt;li&gt;&lt;code&gt;TitledBorder.BELOW_TOP&lt;/code&gt;
                      &lt;li&gt;&lt;code&gt;TitledBorder.ABOVE_BOTTOM&lt;/code&gt;
                      &lt;li&gt;&lt;code&gt;TitledBorder.BOTTOM&lt;/code&gt; (sitting on the bottom line)
                      &lt;li&gt;&lt;code&gt;TitledBorder.BELOW_BOTTOM&lt;/code&gt;
                      &lt;li&gt;&lt;code&gt;TitledBorder.DEFAULT_POSITION&lt;/code&gt; (top)
                      &lt;/ul&gt;                    
                </param>
                <return>
                    the &lt;code&gt;TitledBorder&lt;/code&gt; object                    
                </return>
            </javadoc>
            <method name="createTitledBorder" type="TitledBorder" line="350">
                <params>
                    <param name="border" type="Border"/>
                    <param name="title" type="String"/>
                    <param name="titleJustification" type="int"/>
                    <param name="titlePosition" type="int"/>
                </params>
            </method>
            <javadoc line="353">
                Adds a title to an existing border, with the specified
                  positioning and font, and using the default text color
                  (determined by the current look and feel).                
                <param>
                    border      the &lt;code&gt;Border&lt;/code&gt; object to add the title to                    
                </param>
                <param>
                    title       a &lt;code&gt;String&lt;/code&gt; containing the text of the title                    
                </param>
                <param>
                    titleJustification  an integer specifying the justification
                      of the title -- one of the following:
                      &lt;ul&gt;
                      &lt;li&gt;&lt;code&gt;TitledBorder.LEFT&lt;/code&gt;
                      &lt;li&gt;&lt;code&gt;TitledBorder.CENTER&lt;/code&gt;
                      &lt;li&gt;&lt;code&gt;TitledBorder.RIGHT&lt;/code&gt;
                      &lt;li&gt;&lt;code&gt;TitledBorder.LEADING&lt;/code&gt;
                      &lt;li&gt;&lt;code&gt;TitledBorder.TRAILING&lt;/code&gt;
                      &lt;li&gt;&lt;code&gt;TitledBorder.DEFAULT_JUSTIFICATION&lt;/code&gt; (leading)
                      &lt;/ul&gt;                    
                </param>
                <param>
                    titlePosition       an integer specifying the vertical position of
                      the text in relation to the border -- one of the following:
                      &lt;ul&gt;
                      &lt;li&gt;&lt;code&gt; TitledBorder.ABOVE_TOP&lt;/code&gt;
                      &lt;li&gt;&lt;code&gt;TitledBorder.TOP&lt;/code&gt; (sitting on the top line)
                      &lt;li&gt;&lt;code&gt;TitledBorder.BELOW_TOP&lt;/code&gt;
                      &lt;li&gt;&lt;code&gt;TitledBorder.ABOVE_BOTTOM&lt;/code&gt;
                      &lt;li&gt;&lt;code&gt;TitledBorder.BOTTOM&lt;/code&gt; (sitting on the bottom line)
                      &lt;li&gt;&lt;code&gt;TitledBorder.BELOW_BOTTOM&lt;/code&gt;
                      &lt;li&gt;&lt;code&gt;TitledBorder.DEFAULT_POSITION&lt;/code&gt; (top)
                      &lt;/ul&gt;                    
                </param>
                <param>
                    titleFont           a Font object specifying the title font                    
                </param>
                <return>
                    the TitledBorder object                    
                </return>
            </javadoc>
            <method name="createTitledBorder" type="TitledBorder" line="383">
                <params>
                    <param name="border" type="Border"/>
                    <param name="title" type="String"/>
                    <param name="titleJustification" type="int"/>
                    <param name="titlePosition" type="int"/>
                    <param name="titleFont" type="Font"/>
                </params>
            </method>
            <javadoc line="386">
                Adds a title to an existing border, with the specified
                  positioning, font and color.                
                <param>
                    border      the &lt;code&gt;Border&lt;/code&gt; object to add the title to                    
                </param>
                <param>
                    title       a &lt;code&gt;String&lt;/code&gt; containing the text of the title                    
                </param>
                <param>
                    titleJustification  an integer specifying the justification
                      of the title -- one of the following:
                      &lt;ul&gt;
                      &lt;li&gt;&lt;code&gt;TitledBorder.LEFT&lt;/code&gt;
                      &lt;li&gt;&lt;code&gt;TitledBorder.CENTER&lt;/code&gt;
                      &lt;li&gt;&lt;code&gt;TitledBorder.RIGHT&lt;/code&gt;
                      &lt;li&gt;&lt;code&gt;TitledBorder.LEADING&lt;/code&gt;
                      &lt;li&gt;&lt;code&gt;TitledBorder.TRAILING&lt;/code&gt;
                      &lt;li&gt;&lt;code&gt;TitledBorder.DEFAULT_JUSTIFICATION&lt;/code&gt; (leading)
                      &lt;/ul&gt;                    
                </param>
                <param>
                    titlePosition       an integer specifying the vertical position of
                      the text in relation to the border -- one of the following:
                      &lt;ul&gt;
                      &lt;li&gt;&lt;code&gt; TitledBorder.ABOVE_TOP&lt;/code&gt;
                      &lt;li&gt;&lt;code&gt;TitledBorder.TOP&lt;/code&gt; (sitting on the top line)
                      &lt;li&gt;&lt;code&gt;TitledBorder.BELOW_TOP&lt;/code&gt;
                      &lt;li&gt;&lt;code&gt;TitledBorder.ABOVE_BOTTOM&lt;/code&gt;
                      &lt;li&gt;&lt;code&gt;TitledBorder.BOTTOM&lt;/code&gt; (sitting on the bottom line)
                      &lt;li&gt;&lt;code&gt;TitledBorder.BELOW_BOTTOM&lt;/code&gt;
                      &lt;li&gt;&lt;code&gt;TitledBorder.DEFAULT_POSITION&lt;/code&gt; (top)
                      &lt;/ul&gt;                    
                </param>
                <param>
                    titleFont   a &lt;code&gt;Font&lt;/code&gt; object specifying the title font                    
                </param>
                <param>
                    titleColor  a &lt;code&gt;Color&lt;/code&gt; object specifying the title color                    
                </param>
                <return>
                    the &lt;code&gt;TitledBorder&lt;/code&gt; object                    
                </return>
            </javadoc>
            <method name="createTitledBorder" type="TitledBorder" line="416">
                <params>
                    <param name="border" type="Border"/>
                    <param name="title" type="String"/>
                    <param name="titleJustification" type="int"/>
                    <param name="titlePosition" type="int"/>
                    <param name="titleFont" type="Font"/>
                    <param name="titleColor" type="Color"/>
                </params>
            </method>
            <declaration name="emptyBorder" type="Border" line="419"/>
            <javadoc line="420">
                Creates an empty border that takes up no space. (The width
                  of the top, bottom, left, and right sides are all zero.)                
                <return>
                    the &lt;code&gt;Border&lt;/code&gt; object                    
                </return>
            </javadoc>
            <method name="createEmptyBorder" type="Border" line="425"/>
            <javadoc line="428">
                Creates an empty border that takes up space but which does
                  no drawing, specifying the width of the top, left, bottom, and
                  right sides.                
                <param>
                    top     an integer specifying the width of the top,
                      in pixels                    
                </param>
                <param>
                    left    an integer specifying the width of the left side,
                      in pixels                    
                </param>
                <param>
                    bottom  an integer specifying the width of the bottom,
                      in pixels                    
                </param>
                <param>
                    right   an integer specifying the width of the right side,
                      in pixels                    
                </param>
                <return>
                    the &lt;code&gt;Border&lt;/code&gt; object                    
                </return>
            </javadoc>
            <method name="createEmptyBorder" type="Border" line="442">
                <params>
                    <param name="top" type="int"/>
                    <param name="left" type="int"/>
                    <param name="bottom" type="int"/>
                    <param name="right" type="int"/>
                </params>
            </method>
            <javadoc line="445">
                Creates a compound border with a &lt;code&gt;null&lt;/code&gt; inside edge and a
                  &lt;code&gt;null&lt;/code&gt; outside edge.                
                <return>
                    the &lt;code&gt;CompoundBorder&lt;/code&gt; object                    
                </return>
            </javadoc>
            <method name="createCompoundBorder" type="CompoundBorder" line="450"/>
            <javadoc line="453">
                Creates a compound border specifying the border objects to use
                  for the outside and inside edges.                
                <param>
                    outsideBorder  a &lt;code&gt;Border&lt;/code&gt; object for the outer
                      edge of the compound border                    
                </param>
                <param>
                    insideBorder   a &lt;code&gt;Border&lt;/code&gt; object for the inner
                      edge of the compound border                    
                </param>
                <return>
                    the &lt;code&gt;CompoundBorder&lt;/code&gt; object                    
                </return>
            </javadoc>
            <method name="createCompoundBorder" type="CompoundBorder" line="462">
                <params>
                    <param name="outsideBorder" type="Border"/>
                    <param name="insideBorder" type="Border"/>
                </params>
            </method>
            <javadoc line="465">
                Creates a matte-look border using a solid color. (The difference between
                  this border and a line border is that you can specify the individual
                  border dimensions.)                
                <param>
                    top     an integer specifying the width of the top,
                      in pixels                    
                </param>
                <param>
                    left    an integer specifying the width of the left side,
                      in pixels                    
                </param>
                <param>
                    bottom  an integer specifying the width of the right side,
                      in pixels                    
                </param>
                <param>
                    right   an integer specifying the width of the bottom,
                      in pixels                    
                </param>
                <param>
                    color   a &lt;code&gt;Color&lt;/code&gt; to use for the border                    
                </param>
                <return>
                    the &lt;code&gt;MatteBorder&lt;/code&gt; object                    
                </return>
            </javadoc>
            <method name="createMatteBorder" type="MatteBorder" line="480">
                <params>
                    <param name="top" type="int"/>
                    <param name="left" type="int"/>
                    <param name="bottom" type="int"/>
                    <param name="right" type="int"/>
                    <param name="color" type="Color"/>
                </params>
            </method>
            <javadoc line="483">
                Creates a matte-look border that consists of multiple tiles of a
                  specified icon. Multiple copies of the icon are placed side-by-side
                  to fill up the border area.
                  &lt;p&gt;
                  Note:&lt;br&gt;
                  If the icon doesn&apos;t load, the border area is painted gray.                
                <param>
                    top     an integer specifying the width of the top,
                      in pixels                    
                </param>
                <param>
                    left    an integer specifying the width of the left side,
                      in pixels                    
                </param>
                <param>
                    bottom  an integer specifying the width of the right side,
                      in pixels                    
                </param>
                <param>
                    right   an integer specifying the width of the bottom,
                      in pixels                    
                </param>
                <param>
                    tileIcon  the &lt;code&gt;Icon&lt;/code&gt; object used for the border tiles                    
                </param>
                <return>
                    the &lt;code&gt;MatteBorder&lt;/code&gt; object                    
                </return>
            </javadoc>
            <method name="createMatteBorder" type="MatteBorder" line="501">
                <params>
                    <param name="top" type="int"/>
                    <param name="left" type="int"/>
                    <param name="bottom" type="int"/>
                    <param name="right" type="int"/>
                    <param name="tileIcon" type="Icon"/>
                </params>
            </method>
            <javadoc line="504">
                Creates a border of the specified {@code stroke}.
                  The component&apos;s foreground color will be used to render the border.                
                <param>
                    stroke  the {@link BasicStroke} object used to stroke a shape                    
                </param>
                <return>
                    the {@code Border} object                    
                </return>
                <throws>
                    NullPointerException if the specified {@code stroke} is {@code null}                    
                </throws>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="createStrokeBorder" type="Border" line="512">
                <params>
                    <param name="stroke" type="BasicStroke"/>
                </params>
            </method>
            <javadoc line="515">
                Creates a border of the specified {@code stroke} and {@code paint}.
                  If the specified {@code paint} is {@code null},
                  the component&apos;s foreground color will be used to render the border.                
                <param>
                    stroke  the {@link BasicStroke} object used to stroke a shape                    
                </param>
                <param>
                    paint   the {@link Paint} object used to generate a color                    
                </param>
                <return>
                    the {@code Border} object                    
                </return>
                <throws>
                    NullPointerException if the specified {@code stroke} is {@code null}                    
                </throws>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="createStrokeBorder" type="Border" line="525">
                <params>
                    <param name="stroke" type="BasicStroke"/>
                    <param name="paint" type="Paint"/>
                </params>
            </method>
            <declaration name="sharedDashedBorder" type="Border" line="528"/>
            <javadoc line="529">
                Creates a dashed border of the specified {@code paint}.
                  If the specified {@code paint} is {@code null},
                  the component&apos;s foreground color will be used to render the border.
                  The width of a dash line is equal to {@code 1}.
                  The relative length of a dash line and
                  the relative spacing between dash lines are equal to {@code 1}.
                  A dash line is not rounded.                
                <param>
                    paint  the {@link Paint} object used to generate a color                    
                </param>
                <return>
                    the {@code Border} object                    
                </return>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="createDashedBorder" type="Border" line="541">
                <params>
                    <param name="paint" type="Paint"/>
                </params>
            </method>
            <javadoc line="544">
                Creates a dashed border of the specified {@code paint},
                  relative {@code length}, and relative {@code spacing}.
                  If the specified {@code paint} is {@code null},
                  the component&apos;s foreground color will be used to render the border.
                  The width of a dash line is equal to {@code 1}.
                  A dash line is not rounded.                
                <param>
                    paint    the {@link Paint} object used to generate a color                    
                </param>
                <param>
                    length   the relative length of a dash line                    
                </param>
                <param>
                    spacing  the relative spacing between dash lines                    
                </param>
                <return>
                    the {@code Border} object                    
                </return>
                <throws>
                    IllegalArgumentException if the specified {@code length} is less than {@code 1}, or
                      if the specified {@code spacing} is less than {@code 0}                    
                </throws>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="createDashedBorder" type="Border" line="559">
                <params>
                    <param name="paint" type="Paint"/>
                    <param name="length" type="float"/>
                    <param name="spacing" type="float"/>
                </params>
            </method>
            <javadoc line="562">
                Creates a dashed border of the specified {@code paint}, {@code thickness},
                  line shape, relative {@code length}, and relative {@code spacing}.
                  If the specified {@code paint} is {@code null},
                  the component&apos;s foreground color will be used to render the border.                
                <param>
                    paint      the {@link Paint} object used to generate a color                    
                </param>
                <param>
                    thickness  the width of a dash line                    
                </param>
                <param>
                    length     the relative length of a dash line                    
                </param>
                <param>
                    spacing    the relative spacing between dash lines                    
                </param>
                <param>
                    rounded    whether or not line ends should be round                    
                </param>
                <return>
                    the {@code Border} object                    
                </return>
                <throws>
                    IllegalArgumentException if the specified {@code thickness} is less than {@code 1}, or
                      if the specified {@code length} is less than {@code 1}, or
                      if the specified {@code spacing} is less than {@code 0}                    
                </throws>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="createDashedBorder" type="Border" line="578">
                <params>
                    <param name="paint" type="Paint"/>
                    <param name="thickness" type="float"/>
                    <param name="length" type="float"/>
                    <param name="spacing" type="float"/>
                    <param name="rounded" type="boolean"/>
                </params>
                <declaration name="shared" type="boolean" line="579"/>
                <scope line="580"/>
                <scope line="583"/>
                <scope line="586"/>
                <scope line="589"/>
                <declaration name="cap" type="int" line="592"/>
                <declaration name="join" type="int" line="593"/>
                <declaration name="array" type="float[]" line="594"/>
                <declaration name="border" type="Border" line="595"/>
                <scope line="596"/>
            </method>
        </class>
    </source>