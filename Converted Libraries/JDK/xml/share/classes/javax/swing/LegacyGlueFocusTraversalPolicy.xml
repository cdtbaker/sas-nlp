<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.awt.FocusTraversalPolicy"/>
        <import package="java.awt.Component"/>
        <import package="java.awt.Container"/>
        <import package="java.awt.Window"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.HashSet"/>
        <import package="java.io"/>
        <class name="LegacyGlueFocusTraversalPolicy" line="36">
            <extends class="FocusTraversalPolicy"/>
            <implements interface="Serializable"/>
            <javadoc line="36">
                A FocusTraversalPolicy which provides support for legacy applications which
                  handle focus traversal via JComponent.setNextFocusableComponent or by
                  installing a custom DefaultFocusManager. If a specific traversal has not
                  been hard coded, then that traversal is provided either by the custom
                  DefaultFocusManager, or by a wrapped FocusTraversalPolicy instance.                
                <author>
                    David Mendenhall                    
                </author>
            </javadoc>
            <declaration name="delegatePolicy" type="FocusTraversalPolicy" line="48"/>
            <declaration name="delegateManager" type="DefaultFocusManager" line="49"/>
            <declaration name="forwardMap" type="HashMap&lt;Component,Component&gt;" line="51"/>
            <method name="LegacyGlueFocusTraversalPolicy" type="constructor" line="54">
                <params>
                    <param name="delegatePolicy" type="FocusTraversalPolicy"/>
                </params>
            </method>
            <method name="LegacyGlueFocusTraversalPolicy" type="constructor" line="57">
                <params>
                    <param name="delegateManager" type="DefaultFocusManager"/>
                </params>
            </method>
            <method name="setNextFocusableComponent" type="void" line="61">
                <params>
                    <param name="left" type="Component"/>
                    <param name="right" type="Component"/>
                </params>
            </method>
            <method name="unsetNextFocusableComponent" type="void" line="65">
                <params>
                    <param name="left" type="Component"/>
                    <param name="right" type="Component"/>
                </params>
            </method>
            <method name="getComponentAfter" type="Component" line="71">
                <params>
                    <param name="focusCycleRoot" type="Container"/>
                    <param name="aComponent" type="Component"/>
                </params>
                <comment line="92">
                    cycle detected; bail                    
                </comment>
                <declaration name="hardCoded" type="Component" line="72"/>
                <declaration name="sanity" type="HashSet&lt;Component&gt;" line="73"/>
                <scope line="75">
                    <scope line="78">
                        <scope line="80"/>
                        <scope line="83"/>
                        <scope line="86"/>
                    </scope>
                    <scope line="90"/>
                </scope>
            </method>
            <method name="getComponentBefore" type="Component" line="100">
                <params>
                    <param name="focusCycleRoot" type="Container"/>
                    <param name="aComponent" type="Component"/>
                </params>
                <comment line="121">
                    cycle detected; bail                    
                </comment>
                <declaration name="hardCoded" type="Component" line="101"/>
                <declaration name="sanity" type="HashSet&lt;Component&gt;" line="102"/>
                <scope line="104">
                    <scope line="107">
                        <scope line="109"/>
                        <scope line="112"/>
                        <scope line="115"/>
                    </scope>
                    <scope line="119"/>
                </scope>
            </method>
            <method name="getFirstComponent" type="Component" line="128">
                <params>
                    <param name="focusCycleRoot" type="Container"/>
                </params>
                <scope line="129"/>
                <scope line="131"/>
                <scope line="133"/>
            </method>
            <method name="getLastComponent" type="Component" line="137">
                <params>
                    <param name="focusCycleRoot" type="Container"/>
                </params>
                <scope line="138"/>
                <scope line="140"/>
                <scope line="142"/>
            </method>
            <method name="getDefaultComponent" type="Component" line="146">
                <params>
                    <param name="focusCycleRoot" type="Container"/>
                </params>
                <scope line="147"/>
                <scope line="149"/>
            </method>
            <method name="accept" type="boolean" line="153">
                <params>
                    <param name="aComponent" type="Component"/>
                </params>
                <comment line="160">
                    Verify that the Component is recursively enabled. Disabling a
                     heavyweight Container disables its children, whereas disabling
                     a lightweight Container does not.                    
                </comment>
                <scope line="155"/>
                <scope line="162">
                    <scope line="166">
                        <scope line="167"/>
                        <scope line="170"/>
                    </scope>
                </scope>
            </method>
            <method name="writeObject" type="void" line="178">
                <params>
                    <param name="out" type="ObjectOutputStream"/>
                </params>
                <scope line="181"/>
                <scope line="183"/>
                <scope line="187"/>
                <scope line="189"/>
            </method>
            <method name="readObject" type="void" line="195">
                <params>
                    <param name="in" type="ObjectInputStream"/>
                </params>
            </method>
        </class>
    </source>