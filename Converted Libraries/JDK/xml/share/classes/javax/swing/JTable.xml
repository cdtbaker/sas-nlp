<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.util"/>
        <import package="java.applet.Applet"/>
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="java.awt.print"/>
        <import package="java.beans"/>
        <import package="java.io.Serializable"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.IOException"/>
        <import package="javax.accessibility"/>
        <import package="javax.swing.event"/>
        <import package="javax.swing.plaf"/>
        <import package="javax.swing.table"/>
        <import package="javax.swing.border"/>
        <import package="java.text.NumberFormat"/>
        <import package="java.text.DateFormat"/>
        <import package="java.text.MessageFormat"/>
        <import package="javax.print.attribute"/>
        <import package="javax.print.PrintService"/>
        <import package="sun.swing.SwingUtilities2"/>
        <import package="sun.swing.SwingUtilities2.Section"/>
        <import package="sun.swing.SwingUtilities2.Section"/>
        <import package="sun.swing.PrintingStatus"/>
        <import package="sun.swing.SwingLazyValue"/>
        <class name="JTable" line="62">
            <extends class="JComponent"/>
            <comment line="218">
                The first versions of the JTable, contained in Swing-0.1 through
                 Swing-0.4, were written by Alan Chung.                
            </comment>
            <comment line="225">
                Static Constants                
            </comment>
            <comment line="277">
                Instance Variables                
            </comment>
            <comment line="377">
                Private state                
            </comment>
            <comment line="381">
                WARNING: If you directly access this field you should also change the
                 SortManager.modelRowSizes field as well.                
            </comment>
            <comment line="548">
                Constructors                
            </comment>
            <comment line="865">
                Static Methods                
            </comment>
            <comment line="880">
                Table Attributes                
            </comment>
            <comment line="1944">
                Selection methods                
            </comment>
            <comment line="2569">
                Informally implement the TableModel interface.                
            </comment>
            <comment line="2772">
                Adding and removing columns in the view                
            </comment>
            <comment line="2837">
                Cover methods for various models and helper methods                
            </comment>
            <comment line="3248">
                Distribute delta over columns, as indicated by the autoresize mode.                
            </comment>
            <comment line="3423">
                Editing Support                
            </comment>
            <comment line="3581">
                Managing TableUI                
            </comment>
            <comment line="3665">
                Managing models                
            </comment>
            <comment line="3801">
                RowSorterListener                
            </comment>
            <comment line="4354">
                Implementing TableModelListener interface                
            </comment>
            <comment line="4455">
                Invoked when rows have been inserted into the table.
                 &lt;p&gt;
                 Application code will not use these methods explicitly, they
                 are used internally by JTable.
                
                 @param e the TableModelEvent encapsulating the insertion                
            </comment>
            <comment line="4492">
                Invoked when rows have been removed from the table.
                 &lt;p&gt;
                 Application code will not use these methods explicitly, they
                 are used internally by JTable.
                
                 @param e the TableModelEvent encapsulating the deletion                
            </comment>
            <comment line="4531">
                Implementing TableColumnModelListener interface                
            </comment>
            <comment line="4669">
                Implementing ListSelectionListener interface                
            </comment>
            <comment line="4708">
                Implementing the CellEditorListener interface                
            </comment>
            <comment line="4746">
                Implementing the Scrollable interface                
            </comment>
            <comment line="5077">
                Return the row at the top of the visibleRect
                
                 May return -1                
            </comment>
            <comment line="5095">
                Return the column at the leading edge of the visibleRect.
                
                 May return -1                
            </comment>
            <comment line="5113">
                Return the row at the bottom of the visibleRect.
                
                 May return -1                
            </comment>
            <comment line="5132">
                Return the column at the trailing edge of the visibleRect.
                
                 May return -1                
            </comment>
            <comment line="5150">
                Returns the leading edge (&quot;beginning&quot;) of the given Rectangle.
                 For VERTICAL, this is the top, for left-to-right, the left side, and for
                 right-to-left, the right side.                
            </comment>
            <comment line="5167">
                Returns the trailing edge (&quot;end&quot;) of the given Rectangle.
                 For VERTICAL, this is the bottom, for left-to-right, the right side, and
                 for right-to-left, the left side.                
            </comment>
            <comment line="5257">
                Protected Methods                
            </comment>
            <comment line="5836">
                Serialization                
            </comment>
            <comment line="5873">
                Called from the JComponent&apos;s EnableSerializationFocusListener to
                 do any Swing-specific pre-serialization configuration.                
            </comment>
            <comment line="5946">
                This class tracks changes in the keyboard focus state. It is used
                 when the JTable is editing to determine when to cancel the edit.
                 If focus switches to a component outside of the jtable, but in the
                 same window, this will cancel editing.                
            </comment>
            <comment line="5981">
                ///////////////
                 Printing Support
                /                
            </comment>
            <comment line="6547">
                ///////////////
                 Accessibility support                
            </comment>
            <comment line="6567">
                *** should also implement AccessibleSelection?
                 *** and what&apos;s up with keyboard navigation/manipulation?                
            </comment>
            <comment line="9606">
                inner class AccessibleJTable                
            </comment>
            <implements interface="TableModelListener"/>
            <implements interface="Scrollable"/>
            <implements interface="TableColumnModelListener"/>
            <implements interface="ListSelectionListener"/>
            <implements interface="CellEditorListener"/>
            <implements interface="Accessible"/>
            <implements interface="RowSorterListener"/>
            <javadoc line="62">
                The &lt;code&gt;JTable&lt;/code&gt; is used to display and edit regular two-dimensional tables
                  of cells.
                  See &lt;a href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/components/table.html&quot;&gt;How to Use Tables&lt;/a&gt;
                  in &lt;em&gt;The Java Tutorial&lt;/em&gt;
                  for task-oriented documentation and examples of using &lt;code&gt;JTable&lt;/code&gt;.
                  &lt;p&gt;
                  The &lt;code&gt;JTable&lt;/code&gt; has many
                  facilities that make it possible to customize its rendering and editing
                  but provides defaults for these features so that simple tables can be
                  set up easily.  For example, to set up a table with 10 rows and 10
                  columns of numbers:
                  &lt;p&gt;
                  &lt;pre&gt;
                  TableModel dataModel = new AbstractTableModel() {
                  public int getColumnCount() { return 10; }
                  public int getRowCount() { return 10;}
                  public Object getValueAt(int row, int col) { return new Integer(rowcol); }
                  };
                  JTable table = new JTable(dataModel);
                  JScrollPane scrollpane = new JScrollPane(table);
                  &lt;/pre&gt;
                  &lt;p&gt;{@code JTable}s are typically placed inside of a {@code JScrollPane}.  By
                  default, a {@code JTable} will adjust its width such that
                  a horizontal scrollbar is unnecessary.  To allow for a horizontal scrollbar,
                  invoke {@link #setAutoResizeMode} with {@code AUTO_RESIZE_OFF}.
                  Note that if you wish to use a &lt;code&gt;JTable&lt;/code&gt; in a standalone
                  view (outside of a &lt;code&gt;JScrollPane&lt;/code&gt;) and want the header
                  displayed, you can get it using {@link #getTableHeader} and
                  display it separately.
                  &lt;p&gt;
                  To enable sorting and filtering of rows, use a{@code RowSorter}.
                  You can set up a row sorter in either of two ways:
                  &lt;ul&gt;
                  &lt;li&gt;Directly set the {@code RowSorter}. For example:{@code table.setRowSorter(new TableRowSorter(model))}.
                  &lt;li&gt;Set the {@code autoCreateRowSorter}property to {@code true}, so that the {@code JTable}creates a {@code RowSorter} for
                  you. For example: {@code setAutoCreateRowSorter(true)}.
                  &lt;/ul&gt;
                  &lt;p&gt;
                  When designing applications that use the &lt;code&gt;JTable&lt;/code&gt; it is worth paying
                  close attention to the data structures that will represent the table&apos;s data.
                  The &lt;code&gt;DefaultTableModel&lt;/code&gt; is a model implementation that
                  uses a &lt;code&gt;Vector&lt;/code&gt; of &lt;code&gt;Vector&lt;/code&gt;s of &lt;code&gt;Object&lt;/code&gt;s to
                  store the cell values. As well as copying the data from an
                  application into the &lt;code&gt;DefaultTableModel&lt;/code&gt;,
                  it is also possible to wrap the data in the methods of the
                  &lt;code&gt;TableModel&lt;/code&gt; interface so that the data can be passed to the
                  &lt;code&gt;JTable&lt;/code&gt; directly, as in the example above. This often results
                  in more efficient applications because the model is free to choose the
                  internal representation that best suits the data.
                  A good rule of thumb for deciding whether to use the &lt;code&gt;AbstractTableModel&lt;/code&gt;
                  or the &lt;code&gt;DefaultTableModel&lt;/code&gt; is to use the &lt;code&gt;AbstractTableModel&lt;/code&gt;
                  as the base class for creating subclasses and the &lt;code&gt;DefaultTableModel&lt;/code&gt;
                  when subclassing is not required.
                  &lt;p&gt;
                  The &quot;TableExample&quot; directory in the demo area of the source distribution
                  gives a number of complete examples of &lt;code&gt;JTable&lt;/code&gt; usage,
                  covering how the &lt;code&gt;JTable&lt;/code&gt; can be used to provide an
                  editable view of data taken from a database and how to modify
                  the columns in the display to use specialized renderers and editors.
                  &lt;p&gt;
                  The &lt;code&gt;JTable&lt;/code&gt; uses integers exclusively to refer to both the rows and the columns
                  of the model that it displays. The &lt;code&gt;JTable&lt;/code&gt; simply takes a tabular range of cells
                  and uses &lt;code&gt;getValueAt(int, int)&lt;/code&gt; to retrieve the
                  values from the model during painting.  It is important to remember that
                  the column and row indexes returned by various &lt;code&gt;JTable&lt;/code&gt; methods
                  are in terms of the &lt;code&gt;JTable&lt;/code&gt; (the view) and are not
                  necessarily the same indexes used by the model.
                  &lt;p&gt;
                  By default, columns may be rearranged in the &lt;code&gt;JTable&lt;/code&gt; so that the
                  view&apos;s columns appear in a different order to the columns in the model.
                  This does not affect the implementation of the model at all: when the
                  columns are reordered, the &lt;code&gt;JTable&lt;/code&gt; maintains the new order of the columns
                  internally and converts its column indices before querying the model.
                  &lt;p&gt;
                  So, when writing a &lt;code&gt;TableModel&lt;/code&gt;, it is not necessary to listen for column
                  reordering events as the model will be queried in its own coordinate
                  system regardless of what is happening in the view.
                  In the examples area there is a demonstration of a sorting algorithm making
                  use of exactly this technique to interpose yet another coordinate system
                  where the order of the rows is changed, rather than the order of the columns.
                  &lt;p&gt;
                  Similarly when using the sorting and filtering functionality
                  provided by &lt;code&gt;RowSorter&lt;/code&gt; the underlying
                  &lt;code&gt;TableModel&lt;/code&gt; does not need to know how to do sorting,
                  rather &lt;code&gt;RowSorter&lt;/code&gt; will handle it.  Coordinate
                  conversions will be necessary when using the row based methods of
                  &lt;code&gt;JTable&lt;/code&gt; with the underlying &lt;code&gt;TableModel&lt;/code&gt;.
                  All of &lt;code&gt;JTable&lt;/code&gt;s row based methods are in terms of the
                  &lt;code&gt;RowSorter&lt;/code&gt;, which is not necessarily the same as that
                  of the underlying &lt;code&gt;TableModel&lt;/code&gt;.  For example, the
                  selection is always in terms of &lt;code&gt;JTable&lt;/code&gt; so that when
                  using &lt;code&gt;RowSorter&lt;/code&gt; you will need to convert using
                  &lt;code&gt;convertRowIndexToView&lt;/code&gt; or
                  &lt;code&gt;convertRowIndexToModel&lt;/code&gt;.  The following shows how to
                  convert coordinates from &lt;code&gt;JTable&lt;/code&gt; to that of the
                  underlying model:
                  &lt;pre&gt;
                  int[] selection = table.getSelectedRows();
                  for (int i = 0; i &amp;lt; selection.length; i++) {
                  selection[i] = table.convertRowIndexToModel(selection[i]);
                  }
                  // selection is now in terms of the underlying TableModel
                  &lt;/pre&gt;
                  &lt;p&gt;
                  By default if sorting is enabled &lt;code&gt;JTable&lt;/code&gt; will persist the
                  selection and variable row heights in terms of the model on
                  sorting.  For example if row 0, in terms of the underlying model,
                  is currently selected, after the sort row 0, in terms of the
                  underlying model will be selected.  Visually the selection may
                  change, but in terms of the underlying model it will remain the
                  same.  The one exception to that is if the model index is no longer
                  visible or was removed.  For example, if row 0 in terms of model
                  was filtered out the selection will be empty after the sort.
                  &lt;p&gt;
                  J2SE 5 adds methods to &lt;code&gt;JTable&lt;/code&gt; to provide convenient access to some
                  common printing needs. Simple new {@link #print()} methods allow for quick
                  and easy addition of printing support to your application. In addition, a new{@link #getPrintable} method is available for more advanced printing needs.
                  &lt;p&gt;
                  As for all &lt;code&gt;JComponent&lt;/code&gt; classes, you can use{@link InputMap} and {@link ActionMap} to associate an{@link Action} object with a {@link KeyStroke} and execute the
                  action under specified conditions.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt; Swing is not thread safe. For more
                  information see &lt;a
                  href=&quot;package-summary.html#threading&quot;&gt;Swing&apos;s Threading
                  Policy&lt;/a&gt;.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <beaninfo>
                    attribute: isContainer false
                      description: A component which displays data in a two dimensional grid.                    
                </beaninfo>
                <author>
                    Philip Milne                    
                </author>
                <author>
                    Shannon Hickey (printing support)                    
                </author>
                <see>
                    javax.swing.table.DefaultTableModel                    
                </see>
                <see>
                    javax.swing.table.TableRowSorter                    
                </see>
            </javadoc>
            <declaration name="uiClassID" type="String" line="228"/>
            <javadoc line="228">
                @see #getUIClassID                
                <see>
                    #readObject                    
                </see>
            </javadoc>
            <declaration name="AUTO_RESIZE_OFF" type="int" line="234"/>
            <javadoc line="234">
                Do not adjust column widths automatically; use a horizontal scrollbar instead.                
            </javadoc>
            <declaration name="AUTO_RESIZE_NEXT_COLUMN" type="int" line="237"/>
            <javadoc line="237">
                When a column is adjusted in the UI, adjust the next column the opposite way.                
            </javadoc>
            <declaration name="AUTO_RESIZE_SUBSEQUENT_COLUMNS" type="int" line="240"/>
            <javadoc line="240">
                During UI adjustment, change subsequent columns to preserve the total width;
                  this is the default behavior.                
            </javadoc>
            <declaration name="AUTO_RESIZE_LAST_COLUMN" type="int" line="244"/>
            <javadoc line="244">
                During all resize operations, apply adjustments to the last column only.                
            </javadoc>
            <declaration name="AUTO_RESIZE_ALL_COLUMNS" type="int" line="247"/>
            <javadoc line="247">
                During all resize operations, proportionately resize all columns.                
            </javadoc>
            <javadoc line="251">
                Printing modes, used in printing &lt;code&gt;JTable&lt;/code&gt;s.                
                <see>
                    #print(JTable.PrintMode,MessageFormat,MessageFormat,boolean,PrintRequestAttributeSet,boolean)                    
                </see>
                <see>
                    #getPrintable                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <javadoc line="261">
                Printing mode that prints the table at its current size,
                  spreading both columns and rows across multiple pages if necessary.                
            </javadoc>
            <javadoc line="267">
                Printing mode that scales the output smaller, if necessary,
                  to fit the table&apos;s entire width (and thereby all columns) on each page;
                  Rows are spread across multiple pages as necessary.                
            </javadoc>
            <declaration name="dataModel" type="TableModel" line="280"/>
            <javadoc line="280">
                The &lt;code&gt;TableModel&lt;/code&gt; of the table.                
            </javadoc>
            <declaration name="columnModel" type="TableColumnModel" line="283"/>
            <javadoc line="283">
                The &lt;code&gt;TableColumnModel&lt;/code&gt; of the table.                
            </javadoc>
            <declaration name="selectionModel" type="ListSelectionModel" line="286"/>
            <javadoc line="286">
                The &lt;code&gt;ListSelectionModel&lt;/code&gt; of the table, used to keep track of row selections.                
            </javadoc>
            <declaration name="tableHeader" type="JTableHeader" line="289"/>
            <javadoc line="289">
                The &lt;code&gt;TableHeader&lt;/code&gt; working with the table.                
            </javadoc>
            <declaration name="rowHeight" type="int" line="292"/>
            <javadoc line="292">
                The height in pixels of each row in the table.                
            </javadoc>
            <declaration name="rowMargin" type="int" line="295"/>
            <javadoc line="295">
                The height in pixels of the margin between the cells in each row.                
            </javadoc>
            <declaration name="gridColor" type="Color" line="298"/>
            <javadoc line="298">
                The color of the grid.                
            </javadoc>
            <declaration name="showHorizontalLines" type="boolean" line="301"/>
            <javadoc line="301">
                The table draws horizontal lines between cells if &lt;code&gt;showHorizontalLines&lt;/code&gt; is true.                
            </javadoc>
            <declaration name="showVerticalLines" type="boolean" line="304"/>
            <javadoc line="304">
                The table draws vertical lines between cells if &lt;code&gt;showVerticalLines&lt;/code&gt; is true.                
            </javadoc>
            <declaration name="autoResizeMode" type="int" line="307"/>
            <javadoc line="307">
                Determines if the table automatically resizes the
                  width of the table&apos;s columns to take up the entire width of the
                  table, and how it does the resizing.                
            </javadoc>
            <declaration name="autoCreateColumnsFromModel" type="boolean" line="314"/>
            <javadoc line="314">
                The table will query the &lt;code&gt;TableModel&lt;/code&gt; to build the default
                  set of columns if this is true.                
            </javadoc>
            <declaration name="preferredViewportSize" type="Dimension" line="320"/>
            <javadoc line="320">
                Used by the &lt;code&gt;Scrollable&lt;/code&gt; interface to determine the initial visible area.                
            </javadoc>
            <declaration name="rowSelectionAllowed" type="boolean" line="323"/>
            <javadoc line="323">
                True if row selection is allowed in this table.                
            </javadoc>
            <declaration name="cellSelectionEnabled" type="boolean" line="326"/>
            <javadoc line="326">
                Obsolete as of Java 2 platform v1.3.  Please use the
                  &lt;code&gt;rowSelectionAllowed&lt;/code&gt; property and the
                  &lt;code&gt;columnSelectionAllowed&lt;/code&gt; property of the
                  &lt;code&gt;columnModel&lt;/code&gt; instead. Or use the
                  method &lt;code&gt;getCellSelectionEnabled&lt;/code&gt;.                
            </javadoc>
            <declaration name="editorComp" type="Component" line="340"/>
            <javadoc line="340">
                If editing, the &lt;code&gt;Component&lt;/code&gt; that is handling the editing.                
            </javadoc>
            <declaration name="cellEditor" type="TableCellEditor" line="343"/>
            <javadoc line="343">
                The active cell editor object, that overwrites the screen real estate
                  occupied by the current cell and allows the user to change its contents.{@code null} if the table isn&apos;t currently editing.                
            </javadoc>
            <declaration name="editingColumn" type="int" line="350"/>
            <javadoc line="350">
                Identifies the column of the cell being edited.                
            </javadoc>
            <declaration name="editingRow" type="int" line="353"/>
            <javadoc line="353">
                Identifies the row of the cell being edited.                
            </javadoc>
            <declaration name="defaultRenderersByColumnClass" type="Hashtable" line="356"/>
            <javadoc line="356">
                A table of objects that display the contents of a cell,
                  indexed by class as declared in &lt;code&gt;getColumnClass&lt;/code&gt;
                  in the &lt;code&gt;TableModel&lt;/code&gt; interface.                
            </javadoc>
            <declaration name="defaultEditorsByColumnClass" type="Hashtable" line="363"/>
            <javadoc line="363">
                A table of objects that display and edit the contents of a cell,
                  indexed by class as declared in &lt;code&gt;getColumnClass&lt;/code&gt;
                  in the &lt;code&gt;TableModel&lt;/code&gt; interface.                
            </javadoc>
            <declaration name="selectionForeground" type="Color" line="370"/>
            <javadoc line="370">
                The foreground color of selected cells.                
            </javadoc>
            <declaration name="selectionBackground" type="Color" line="373"/>
            <javadoc line="373">
                The background color of selected cells.                
            </javadoc>
            <declaration name="rowModel" type="SizeSequence" line="382"/>
            <declaration name="dragEnabled" type="boolean" line="383"/>
            <declaration name="surrendersFocusOnKeystroke" type="boolean" line="384"/>
            <declaration name="editorRemover" type="PropertyChangeListener" line="385"/>
            <declaration name="columnSelectionAdjusting" type="boolean" line="386"/>
            <javadoc line="386">
                The last value of getValueIsAdjusting from the column selection models
                  columnSelectionChanged notification. Used to test if a repaint is
                  needed.                
            </javadoc>
            <declaration name="rowSelectionAdjusting" type="boolean" line="392"/>
            <javadoc line="392">
                The last value of getValueIsAdjusting from the row selection models
                  valueChanged notification. Used to test if a repaint is needed.                
            </javadoc>
            <declaration name="printError" type="Throwable" line="398"/>
            <javadoc line="398">
                To communicate errors between threads during printing.                
            </javadoc>
            <declaration name="isRowHeightSet" type="boolean" line="403"/>
            <javadoc line="403">
                True when setRowHeight(int) has been invoked.                
            </javadoc>
            <declaration name="updateSelectionOnSort" type="boolean" line="408"/>
            <javadoc line="408">
                If true, on a sort the selection is reset.                
            </javadoc>
            <declaration name="sortManager" type="SortManager" line="413"/>
            <javadoc line="413">
                Information used in sorting.                
            </javadoc>
            <declaration name="ignoreSortChange" type="boolean" line="418"/>
            <javadoc line="418">
                If true, when sorterChanged is invoked it&apos;s value is ignored.                
            </javadoc>
            <declaration name="sorterChanged" type="boolean" line="423"/>
            <javadoc line="423">
                Whether or not sorterChanged has been invoked.                
            </javadoc>
            <declaration name="autoCreateRowSorter" type="boolean" line="428"/>
            <javadoc line="428">
                If true, any time the model changes a new RowSorter is set.                
            </javadoc>
            <declaration name="fillsViewportHeight" type="boolean" line="433"/>
            <javadoc line="433">
                Whether or not the table always fills the viewport height.                
                <see>
                    #setFillsViewportHeight                    
                </see>
                <see>
                    #getScrollableTracksViewportHeight                    
                </see>
            </javadoc>
            <declaration name="dropMode" type="DropMode" line="440"/>
            <javadoc line="440">
                The drop mode for this component.                
            </javadoc>
            <declaration name="dropLocation" type="DropLocation" line="445"/>
            <javadoc line="445">
                The drop location.                
            </javadoc>
            <class name="DropLocation" line="450">
                <extends class="TransferHandler.DropLocation"/>
                <comment line="334">
                    If true, both a row selection and a column selection
                     can be non-empty at the same time, the selected cells are the
                     the cells whose row and column are both selected.                    
                </comment>
                <comment line="3837">
                    Selection, in terms of the model. This is lazily created
                     as needed.                    
                </comment>
                <comment line="3841">
                    Set to true while in the process of changing the selection.
                     If this is true the selection change is ignored.                    
                </comment>
                <comment line="3844">
                    Temporary cache of selection, in terms of model. This is only used
                     if we don&apos;t need the full weight of modelSelection.                    
                </comment>
                <comment line="3848">
                    Heights of the rows in terms of the model.                    
                </comment>
                <comment line="4066">
                    Starting index of the change, in terms of the model                    
                </comment>
                <comment line="4069">
                    Ending index of the change, in terms of the model                    
                </comment>
                <comment line="4072">
                    Type of change                    
                </comment>
                <comment line="4075">
                    Number of rows in the model                    
                </comment>
                <comment line="4078">
                    The event that triggered this.                    
                </comment>
                <comment line="4081">
                    Length of the change (end - start + 1)                    
                </comment>
                <comment line="4084">
                    True if the event indicates all the contents have changed                    
                </comment>
                <comment line="6610">
                    Listeners to track model, etc. changes to as to re-place the other
                     listeners                    
                </comment>
                <comment line="6691">
                    Listeners to echo changes to the AccessiblePropertyChange mechanism                    
                </comment>
                <comment line="6693">
                    Describes a change in the accessible table model.                    
                </comment>
                <comment line="6952">
                    AccessibleContext support                    
                </comment>
                <comment line="7047">
                    AccessibleSelection support                    
                </comment>
                <comment line="7290">
                    begin AccessibleExtendedTable implementation -------------                    
                </comment>
                <comment line="7329">
                    end of AccessibleExtendedTable implementation ------------                    
                </comment>
                <comment line="7331">
                    start of AccessibleTable implementation ------------------                    
                </comment>
                <comment line="7398">
                    Returns the total number of rows in this table.
                    
                     @return the total number of rows in this table                    
                </comment>
                <comment line="7407">
                    Returns the total number of columns in the table.
                    
                     @return the total number of columns in the table                    
                </comment>
                <comment line="7416">
                    Returns the &lt;code&gt;Accessible&lt;code&gt; at a specified row
                     and column in the table.
                    
                     @param r zero-based row of the table
                     @param c zero-based column of the table
                     @return the &lt;code&gt;Accessible&lt;code&gt; at the specified row and column
                     in the table                    
                </comment>
                <comment line="7489">
                    Private class representing a table column header                    
                </comment>
                <comment line="7904">
                    end of AccessibleTable implementation --------------------                    
                </comment>
                <comment line="8732">
                    inner class AccessibleJTableCell                    
                </comment>
                <comment line="8734">
                    Begin AccessibleJTableHeader ========== // TIGER - 4715503                    
                </comment>
                <comment line="9604">
                    inner class AccessibleJTableHeaderCell                    
                </comment>
                <javadoc line="450">
                    A subclass of &lt;code&gt;TransferHandler.DropLocation&lt;/code&gt; representing
                      a drop location for a &lt;code&gt;JTable&lt;/code&gt;.                    
                    <see>
                        #getDropLocation                        
                    </see>
                    <since>
                        1.6                        
                    </since>
                </javadoc>
                <declaration name="row" type="int" line="458"/>
                <declaration name="col" type="int" line="459"/>
                <declaration name="isInsertRow" type="boolean" line="460"/>
                <declaration name="isInsertCol" type="boolean" line="461"/>
                <method name="DropLocation" type="constructor" line="464">
                    <params>
                        <param name="p" type="Point"/>
                        <param name="row" type="int"/>
                        <param name="col" type="int"/>
                        <param name="isInsertRow" type="boolean"/>
                        <param name="isInsertCol" type="boolean"/>
                    </params>
                </method>
                <javadoc line="473">
                    Returns the row index where a dropped item should be placed in the
                      table. Interpretation of the value depends on the return of
                      &lt;code&gt;isInsertRow()&lt;/code&gt;. If that method returns
                      &lt;code&gt;true&lt;/code&gt; this value indicates the index where a new
                      row should be inserted. Otherwise, it represents the value
                      of an existing row on which the data was dropped. This index is
                      in terms of the view.
                      &lt;p&gt;
                      &lt;code&gt;-1&lt;/code&gt; indicates that the drop occurred over empty space,
                      and no row could be calculated.                    
                    <return>
                        the drop row                        
                    </return>
                </javadoc>
                <method name="getRow" type="int" line="487"/>
                <javadoc line="491">
                    Returns the column index where a dropped item should be placed in the
                      table. Interpretation of the value depends on the return of
                      &lt;code&gt;isInsertColumn()&lt;/code&gt;. If that method returns
                      &lt;code&gt;true&lt;/code&gt; this value indicates the index where a new
                      column should be inserted. Otherwise, it represents the value
                      of an existing column on which the data was dropped. This index is
                      in terms of the view.
                      &lt;p&gt;
                      &lt;code&gt;-1&lt;/code&gt; indicates that the drop occurred over empty space,
                      and no column could be calculated.                    
                    <return>
                        the drop row                        
                    </return>
                </javadoc>
                <method name="getColumn" type="int" line="505"/>
                <javadoc line="509">
                    Returns whether or not this location represents an insert
                      of a row.                    
                    <return>
                        whether or not this is an insert row                        
                    </return>
                </javadoc>
                <method name="isInsertRow" type="boolean" line="515"/>
                <javadoc line="519">
                    Returns whether or not this location represents an insert
                      of a column.                    
                    <return>
                        whether or not this is an insert column                        
                    </return>
                </javadoc>
                <method name="isInsertColumn" type="boolean" line="525"/>
                <javadoc line="529">
                    Returns a string representation of this drop location.
                      This method is intended to be used for debugging purposes,
                      and the content and format of the returned string may vary
                      between implementations.                    
                    <return>
                        a string representation of this drop location                        
                    </return>
                </javadoc>
                <method name="toString" type="String" line="537"/>
            </class>
            <javadoc line="551">
                Constructs a default &lt;code&gt;JTable&lt;/code&gt; that is initialized with a default
                  data model, a default column model, and a default selection
                  model.                
                <see>
                    #createDefaultDataModel                    
                </see>
                <see>
                    #createDefaultColumnModel                    
                </see>
                <see>
                    #createDefaultSelectionModel                    
                </see>
            </javadoc>
            <method name="JTable" type="constructor" line="560"/>
            <javadoc line="564">
                Constructs a &lt;code&gt;JTable&lt;/code&gt; that is initialized with
                  &lt;code&gt;dm&lt;/code&gt; as the data model, a default column model,
                  and a default selection model.                
                <param>
                    dm        the data model for the table                    
                </param>
                <see>
                    #createDefaultColumnModel                    
                </see>
                <see>
                    #createDefaultSelectionModel                    
                </see>
            </javadoc>
            <method name="JTable" type="constructor" line="573">
                <params>
                    <param name="dm" type="TableModel"/>
                </params>
            </method>
            <javadoc line="577">
                Constructs a &lt;code&gt;JTable&lt;/code&gt; that is initialized with
                  &lt;code&gt;dm&lt;/code&gt; as the data model, &lt;code&gt;cm&lt;/code&gt;
                  as the column model, and a default selection model.                
                <param>
                    dm        the data model for the table                    
                </param>
                <param>
                    cm        the column model for the table                    
                </param>
                <see>
                    #createDefaultSelectionModel                    
                </see>
            </javadoc>
            <method name="JTable" type="constructor" line="586">
                <params>
                    <param name="dm" type="TableModel"/>
                    <param name="cm" type="TableColumnModel"/>
                </params>
            </method>
            <javadoc line="590">
                Constructs a &lt;code&gt;JTable&lt;/code&gt; that is initialized with
                  &lt;code&gt;dm&lt;/code&gt; as the data model, &lt;code&gt;cm&lt;/code&gt; as the
                  column model, and &lt;code&gt;sm&lt;/code&gt; as the selection model.
                  If any of the parameters are &lt;code&gt;null&lt;/code&gt; this method
                  will initialize the table with the corresponding default model.
                  The &lt;code&gt;autoCreateColumnsFromModel&lt;/code&gt; flag is set to false
                  if &lt;code&gt;cm&lt;/code&gt; is non-null, otherwise it is set to true
                  and the column model is populated with suitable
                  &lt;code&gt;TableColumns&lt;/code&gt; for the columns in &lt;code&gt;dm&lt;/code&gt;.                
                <param>
                    dm        the data model for the table                    
                </param>
                <param>
                    cm        the column model for the table                    
                </param>
                <param>
                    sm        the row selection model for the table                    
                </param>
                <see>
                    #createDefaultDataModel                    
                </see>
                <see>
                    #createDefaultColumnModel                    
                </see>
                <see>
                    #createDefaultSelectionModel                    
                </see>
            </javadoc>
            <method name="JTable" type="constructor" line="608">
                <params>
                    <param name="dm" type="TableModel"/>
                    <param name="cm" type="TableColumnModel"/>
                    <param name="sm" type="ListSelectionModel"/>
                </params>
                <comment line="628">
                    Set the model last, that way if the autoCreatColumnsFromModel has
                     been set above, we will automatically populate an empty columnModel
                     with suitable columns for the new model.                    
                </comment>
                <scope line="616"/>
                <scope line="622"/>
                <scope line="630"/>
            </method>
            <javadoc line="639">
                Constructs a &lt;code&gt;JTable&lt;/code&gt; with &lt;code&gt;numRows&lt;/code&gt;
                  and &lt;code&gt;numColumns&lt;/code&gt; of empty cells using
                  &lt;code&gt;DefaultTableModel&lt;/code&gt;.  The columns will have
                  names of the form &quot;A&quot;, &quot;B&quot;, &quot;C&quot;, etc.                
                <param>
                    numRows           the number of rows the table holds                    
                </param>
                <param>
                    numColumns        the number of columns the table holds                    
                </param>
                <see>
                    javax.swing.table.DefaultTableModel                    
                </see>
            </javadoc>
            <method name="JTable" type="constructor" line="649">
                <params>
                    <param name="numRows" type="int"/>
                    <param name="numColumns" type="int"/>
                </params>
            </method>
            <javadoc line="653">
                Constructs a &lt;code&gt;JTable&lt;/code&gt; to display the values in the
                  &lt;code&gt;Vector&lt;/code&gt; of &lt;code&gt;Vectors&lt;/code&gt;, &lt;code&gt;rowData&lt;/code&gt;,
                  with column names, &lt;code&gt;columnNames&lt;/code&gt;.  The
                  &lt;code&gt;Vectors&lt;/code&gt; contained in &lt;code&gt;rowData&lt;/code&gt;
                  should contain the values for that row. In other words,
                  the value of the cell at row 1, column 5 can be obtained
                  with the following code:
                  &lt;p&gt;
                  &lt;pre&gt;((Vector)rowData.elementAt(1)).elementAt(5);&lt;/pre&gt;
                  &lt;p&gt;                
                <param>
                    rowData           the data for the new table                    
                </param>
                <param>
                    columnNames       names of each column                    
                </param>
            </javadoc>
            <method name="JTable" type="constructor" line="667">
                <params>
                    <param name="rowData" type="Vector"/>
                    <param name="columnNames" type="Vector"/>
                </params>
            </method>
            <javadoc line="671">
                Constructs a &lt;code&gt;JTable&lt;/code&gt; to display the values in the two dimensional array,
                  &lt;code&gt;rowData&lt;/code&gt;, with column names, &lt;code&gt;columnNames&lt;/code&gt;.
                  &lt;code&gt;rowData&lt;/code&gt; is an array of rows, so the value of the cell at row 1,
                  column 5 can be obtained with the following code:
                  &lt;p&gt;
                  &lt;pre&gt; rowData[1][5]; &lt;/pre&gt;
                  &lt;p&gt;
                  All rows must be of the same length as &lt;code&gt;columnNames&lt;/code&gt;.
                  &lt;p&gt;                
                <param>
                    rowData           the data for the new table                    
                </param>
                <param>
                    columnNames       names of each column                    
                </param>
            </javadoc>
            <method name="JTable" type="constructor" line="684">
                <params>
                    <param name="rowData" type="Object[][]"/>
                    <param name="columnNames" type="Object[]"/>
                </params>
                <anonymous_class line="685">
                    <method name="getColumnName" type="String" line="686">
                        <params>
                            <param name="column" type="int"/>
                        </params>
                    </method>
                    <method name="getRowCount" type="int" line="687"/>
                    <method name="getColumnCount" type="int" line="688"/>
                    <method name="getValueAt" type="Object" line="689">
                        <params>
                            <param name="row" type="int"/>
                            <param name="col" type="int"/>
                        </params>
                    </method>
                    <method name="isCellEditable" type="boolean" line="690">
                        <params>
                            <param name="row" type="int"/>
                            <param name="column" type="int"/>
                        </params>
                    </method>
                    <method name="setValueAt" type="void" line="691">
                        <params>
                            <param name="value" type="Object"/>
                            <param name="row" type="int"/>
                            <param name="col" type="int"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="698">
                Calls the &lt;code&gt;configureEnclosingScrollPane&lt;/code&gt; method.                
                <see>
                    #configureEnclosingScrollPane                    
                </see>
            </javadoc>
            <method name="addNotify" type="void" line="703"/>
            <javadoc line="708">
                If this &lt;code&gt;JTable&lt;/code&gt; is the &lt;code&gt;viewportView&lt;/code&gt; of an enclosing &lt;code&gt;JScrollPane&lt;/code&gt;
                  (the usual situation), configure this &lt;code&gt;ScrollPane&lt;/code&gt; by, amongst other things,
                  installing the table&apos;s &lt;code&gt;tableHeader&lt;/code&gt; as the &lt;code&gt;columnHeaderView&lt;/code&gt; of the scroll pane.
                  When a &lt;code&gt;JTable&lt;/code&gt; is added to a &lt;code&gt;JScrollPane&lt;/code&gt; in the usual way,
                  using &lt;code&gt;new JScrollPane(myTable)&lt;/code&gt;, &lt;code&gt;addNotify&lt;/code&gt; is
                  called in the &lt;code&gt;JTable&lt;/code&gt; (when the table is added to the viewport).
                  &lt;code&gt;JTable&lt;/code&gt;&apos;s &lt;code&gt;addNotify&lt;/code&gt; method in turn calls this method,
                  which is protected so that this default installation procedure can
                  be overridden by a subclass.                
                <see>
                    #addNotify                    
                </see>
            </javadoc>
            <method name="configureEnclosingScrollPane" type="void" line="721">
                <comment line="729">
                    Make certain we are the viewPort&apos;s view and not, for
                     example, the rowHeaderView of the scrollPane -
                     an implementor of fixed columns might do this.                    
                </comment>
                <comment line="738">
                    configure the scrollpane for any LAF dependent settings                    
                </comment>
                <declaration name="parent" type="Container" line="722"/>
                <scope line="723">
                    <declaration name="port" type="JViewport" line="724"/>
                    <declaration name="gp" type="Container" line="725"/>
                    <scope line="726">
                        <declaration name="scrollPane" type="JScrollPane" line="727"/>
                        <declaration name="viewport" type="JViewport" line="731"/>
                        <scope line="733"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="743">
                This is a sub-part of configureEnclosingScrollPane() that configures
                  anything on the scrollpane that may change when the look and feel
                  changes. It needed to be split out from configureEnclosingScrollPane() so
                  that it can be called from updateUI() when the LAF changes without
                  causing the regression found in bug 6687962. This was because updateUI()
                  is called from the constructor which then caused
                  configureEnclosingScrollPane() to be called by the constructor which
                  changes its contract for any subclass that overrides it. So by splitting
                  it out in this way configureEnclosingScrollPaneUI() can be called both
                  from configureEnclosingScrollPane() and updateUI() in a safe manor.                
            </javadoc>
            <method name="configureEnclosingScrollPaneUI" type="void" line="755">
                <comment line="763">
                    Make certain we are the viewPort&apos;s view and not, for
                     example, the rowHeaderView of the scrollPane -
                     an implementor of fixed columns might do this.                    
                </comment>
                <comment line="771">
                    scrollPane.getViewport().setBackingStoreEnabled(true);                    
                </comment>
                <comment line="780">
                    add JScrollBar corner component if available from LAF and not already set by the user                    
                </comment>
                <comment line="792">
                    just ignore and don&apos;t set corner                    
                </comment>
                <declaration name="parent" type="Container" line="756"/>
                <scope line="757">
                    <declaration name="port" type="JViewport" line="758"/>
                    <declaration name="gp" type="Container" line="759"/>
                    <scope line="760">
                        <declaration name="scrollPane" type="JScrollPane" line="761"/>
                        <declaration name="viewport" type="JViewport" line="765"/>
                        <scope line="767"/>
                        <declaration name="border" type="Border" line="771"/>
                        <scope line="772">
                            <declaration name="scrollPaneBorder" type="Border" line="773"/>
                            <scope line="775"/>
                        </scope>
                        <declaration name="corner" type="Component" line="780"/>
                        <scope line="782">
                            <declaration name="componentClass" type="Object" line="784"/>
                            <scope line="786">
                                <scope line="787"/>
                                <scope line="790"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="801">
                Calls the &lt;code&gt;unconfigureEnclosingScrollPane&lt;/code&gt; method.                
                <see>
                    #unconfigureEnclosingScrollPane                    
                </see>
            </javadoc>
            <method name="removeNotify" type="void" line="806"/>
            <javadoc line="814">
                Reverses the effect of &lt;code&gt;configureEnclosingScrollPane&lt;/code&gt;
                  by replacing the &lt;code&gt;columnHeaderView&lt;/code&gt; of the enclosing
                  scroll pane with &lt;code&gt;null&lt;/code&gt;. &lt;code&gt;JTable&lt;/code&gt;&apos;s
                  &lt;code&gt;removeNotify&lt;/code&gt; method calls
                  this method, which is protected so that this default uninstallation
                  procedure can be overridden by a subclass.                
                <see>
                    #removeNotify                    
                </see>
                <see>
                    #configureEnclosingScrollPane                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="unconfigureEnclosingScrollPane" type="void" line="826">
                <comment line="834">
                    Make certain we are the viewPort&apos;s view and not, for
                     example, the rowHeaderView of the scrollPane -
                     an implementor of fixed columns might do this.                    
                </comment>
                <comment line="843">
                    remove ScrollPane corner if one was added by the LAF                    
                </comment>
                <declaration name="parent" type="Container" line="827"/>
                <scope line="828">
                    <declaration name="port" type="JViewport" line="829"/>
                    <declaration name="gp" type="Container" line="830"/>
                    <scope line="831">
                        <declaration name="scrollPane" type="JScrollPane" line="832"/>
                        <declaration name="viewport" type="JViewport" line="836"/>
                        <scope line="838"/>
                        <declaration name="corner" type="Component" line="843"/>
                        <scope line="845"/>
                    </scope>
                </scope>
            </method>
            <method name="setUIProperty" type="void" line="853">
                <params>
                    <param name="propertyName" type="String"/>
                    <param name="value" type="Object"/>
                </params>
                <scope line="854">
                    <scope line="855"/>
                </scope>
            </method>
            <javadoc line="868">
                Equivalent to &lt;code&gt;new JScrollPane(aTable)&lt;/code&gt;.                
                <deprecated>
                    As of Swing version 1.0.2,
                      replaced by <code>new JScrollPane(aTable)</code>.                    
                </deprecated>
            </javadoc>
            <method name="createScrollPaneForTable" type="JScrollPane" line="875">
                <params>
                    <param name="aTable" type="JTable"/>
                </params>
            </method>
            <javadoc line="883">
                Sets the &lt;code&gt;tableHeader&lt;/code&gt; working with this &lt;code&gt;JTable&lt;/code&gt; to &lt;code&gt;newHeader&lt;/code&gt;.
                  It is legal to have a &lt;code&gt;null&lt;/code&gt; &lt;code&gt;tableHeader&lt;/code&gt;.                
                <param>
                    tableHeader                       new tableHeader                    
                </param>
                <see>
                    #getTableHeader                    
                </see>
                <beaninfo>
                    bound: true
                      description: The JTableHeader instance which renders the column headers.                    
                </beaninfo>
            </javadoc>
            <method name="setTableHeader" type="void" line="893">
                <params>
                    <param name="tableHeader" type="JTableHeader"/>
                </params>
                <comment line="897">
                    Release the old header                    
                </comment>
                <scope line="894">
                    <declaration name="old" type="JTableHeader" line="895"/>
                    <scope line="897"/>
                    <scope line="901"/>
                </scope>
            </method>
            <javadoc line="908">
                Returns the &lt;code&gt;tableHeader&lt;/code&gt; used by this &lt;code&gt;JTable&lt;/code&gt;.                
                <return>
                    the <code>tableHeader</code> used by this table                    
                </return>
                <see>
                    #setTableHeader                    
                </see>
            </javadoc>
            <method name="getTableHeader" type="JTableHeader" line="914"/>
            <javadoc line="918">
                Sets the height, in pixels, of all cells to &lt;code&gt;rowHeight&lt;/code&gt;,
                  revalidates, and repaints.
                  The height of the cells will be equal to the row height minus
                  the row margin.                
                <param>
                    rowHeight                       new row height                    
                </param>
                <exception>
                    IllegalArgumentException      if <code>rowHeight</code> is
                      less than 1                    
                </exception>
                <see>
                    #getRowHeight                    
                </see>
                <beaninfo>
                    bound: true
                      description: The height of the specified row.                    
                </beaninfo>
            </javadoc>
            <method name="setRowHeight" type="void" line="932">
                <params>
                    <param name="rowHeight" type="int"/>
                </params>
                <scope line="933"/>
                <declaration name="old" type="int" line="936"/>
                <scope line="939"/>
            </method>
            <javadoc line="947">
                Returns the height of a table row, in pixels.                
                <return>
                    the height in pixels of a table row                    
                </return>
                <see>
                    #setRowHeight                    
                </see>
            </javadoc>
            <method name="getRowHeight" type="int" line="953"/>
            <method name="getRowModel" type="SizeSequence" line="957">
                <scope line="958"/>
            </method>
            <javadoc line="964">
                Sets the height for &lt;code&gt;row&lt;/code&gt; to &lt;code&gt;rowHeight&lt;/code&gt;,
                  revalidates, and repaints. The height of the cells in this row
                  will be equal to the row height minus the row margin.                
                <param>
                    row                             the row whose height is being
                      changed                    
                </param>
                <param>
                    rowHeight                       new row height, in pixels                    
                </param>
                <exception>
                    IllegalArgumentException      if <code>rowHeight</code> is
                      less than 1                    
                </exception>
                <beaninfo>
                    bound: true
                      description: The height in pixels of the cells in <code>row</code>                    
                </beaninfo>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="setRowHeight" type="void" line="979">
                <params>
                    <param name="row" type="int"/>
                    <param name="rowHeight" type="int"/>
                </params>
                <scope line="980"/>
                <scope line="984"/>
            </method>
            <javadoc line="990">
                Returns the height, in pixels, of the cells in &lt;code&gt;row&lt;/code&gt;.                
                <param>
                    row              the row whose height is to be returned                    
                </param>
                <return>
                    the height, in pixels, of the cells in the row                    
                </return>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getRowHeight" type="int" line="996">
                <params>
                    <param name="row" type="int"/>
                </params>
            </method>
            <javadoc line="1000">
                Sets the amount of empty space between cells in adjacent rows.                
                <param>
                    rowMargin  the number of pixels between cells in a row                    
                </param>
                <see>
                    #getRowMargin                    
                </see>
                <beaninfo>
                    bound: true
                      description: The amount of space between cells.                    
                </beaninfo>
            </javadoc>
            <method name="setRowMargin" type="void" line="1009">
                <params>
                    <param name="rowMargin" type="int"/>
                </params>
                <declaration name="old" type="int" line="1010"/>
            </method>
            <javadoc line="1016">
                Gets the amount of empty space, in pixels, between cells. Equivalent to:
                  &lt;code&gt;getIntercellSpacing().height&lt;/code&gt;.                
                <return>
                    the number of pixels between cells in a row                    
                </return>
                <see>
                    #setRowMargin                    
                </see>
            </javadoc>
            <method name="getRowMargin" type="int" line="1023"/>
            <javadoc line="1027">
                Sets the &lt;code&gt;rowMargin&lt;/code&gt; and the &lt;code&gt;columnMargin&lt;/code&gt; --
                  the height and width of the space between cells -- to
                  &lt;code&gt;intercellSpacing&lt;/code&gt;.                
                <param>
                    intercellSpacing        a <code>Dimension</code>
                      specifying the new width
                      and height between cells                    
                </param>
                <see>
                    #getIntercellSpacing                    
                </see>
                <beaninfo>
                    description: The spacing between the cells,
                      drawn in the background color of the JTable.                    
                </beaninfo>
            </javadoc>
            <method name="setIntercellSpacing" type="void" line="1040">
                <params>
                    <param name="intercellSpacing" type="Dimension"/>
                </params>
                <comment line="1042">
                    Set the rowMargin here and columnMargin in the TableColumnModel                    
                </comment>
            </method>
            <javadoc line="1048">
                Returns the horizontal and vertical space between cells.
                  The default spacing is look and feel dependent.                
                <return>
                    the horizontal and vertical spacing between cells                    
                </return>
                <see>
                    #setIntercellSpacing                    
                </see>
            </javadoc>
            <method name="getIntercellSpacing" type="Dimension" line="1055"/>
            <javadoc line="1059">
                Sets the color used to draw grid lines to &lt;code&gt;gridColor&lt;/code&gt; and redisplays.
                  The default color is look and feel dependent.                
                <param>
                    gridColor                       the new color of the grid lines                    
                </param>
                <exception>
                    IllegalArgumentException      if <code>gridColor</code> is <code>null</code>                    
                </exception>
                <see>
                    #getGridColor                    
                </see>
                <beaninfo>
                    bound: true
                      description: The grid color.                    
                </beaninfo>
            </javadoc>
            <method name="setGridColor" type="void" line="1070">
                <params>
                    <param name="gridColor" type="Color"/>
                </params>
                <comment line="1078">
                    Redraw                    
                </comment>
                <scope line="1071"/>
                <declaration name="old" type="Color" line="1074"/>
            </method>
            <javadoc line="1081">
                Returns the color used to draw grid lines.
                  The default color is look and feel dependent.                
                <return>
                    the color used to draw grid lines                    
                </return>
                <see>
                    #setGridColor                    
                </see>
            </javadoc>
            <method name="getGridColor" type="Color" line="1088"/>
            <javadoc line="1092">
                Sets whether the table draws grid lines around cells.
                  If &lt;code&gt;showGrid&lt;/code&gt; is true it does; if it is false it doesn&apos;t.
                  There is no &lt;code&gt;getShowGrid&lt;/code&gt; method as this state is held
                  in two variables -- &lt;code&gt;showHorizontalLines&lt;/code&gt; and &lt;code&gt;showVerticalLines&lt;/code&gt; --
                  each of which can be queried independently.                
                <param>
                    showGrid                 true if table view should draw grid lines                    
                </param>
                <see>
                    #setShowVerticalLines                    
                </see>
                <see>
                    #setShowHorizontalLines                    
                </see>
                <beaninfo>
                    description: The color used to draw the grid lines.                    
                </beaninfo>
            </javadoc>
            <method name="setShowGrid" type="void" line="1106">
                <params>
                    <param name="showGrid" type="boolean"/>
                </params>
                <comment line="1111">
                    Redraw                    
                </comment>
            </method>
            <javadoc line="1114">
                Sets whether the table draws horizontal lines between cells.
                  If &lt;code&gt;showHorizontalLines&lt;/code&gt; is true it does; if it is false it doesn&apos;t.                
                <param>
                    showHorizontalLines      true if table view should draw horizontal lines                    
                </param>
                <see>
                    #getShowHorizontalLines                    
                </see>
                <see>
                    #setShowGrid                    
                </see>
                <see>
                    #setShowVerticalLines                    
                </see>
                <beaninfo>
                    bound: true
                      description: Whether horizontal lines should be drawn in between the cells.                    
                </beaninfo>
            </javadoc>
            <method name="setShowHorizontalLines" type="void" line="1126">
                <params>
                    <param name="showHorizontalLines" type="boolean"/>
                </params>
                <comment line="1132">
                    Redraw                    
                </comment>
                <declaration name="old" type="boolean" line="1127"/>
            </method>
            <javadoc line="1135">
                Sets whether the table draws vertical lines between cells.
                  If &lt;code&gt;showVerticalLines&lt;/code&gt; is true it does; if it is false it doesn&apos;t.                
                <param>
                    showVerticalLines              true if table view should draw vertical lines                    
                </param>
                <see>
                    #getShowVerticalLines                    
                </see>
                <see>
                    #setShowGrid                    
                </see>
                <see>
                    #setShowHorizontalLines                    
                </see>
                <beaninfo>
                    bound: true
                      description: Whether vertical lines should be drawn in between the cells.                    
                </beaninfo>
            </javadoc>
            <method name="setShowVerticalLines" type="void" line="1147">
                <params>
                    <param name="showVerticalLines" type="boolean"/>
                </params>
                <comment line="1152">
                    Redraw                    
                </comment>
                <declaration name="old" type="boolean" line="1148"/>
            </method>
            <javadoc line="1155">
                Returns true if the table draws horizontal lines between cells, false if it
                  doesn&apos;t. The default value is look and feel dependent.                
                <return>
                    true if the table draws horizontal lines between cells, false if it
                      doesn't                    
                </return>
                <see>
                    #setShowHorizontalLines                    
                </see>
            </javadoc>
            <method name="getShowHorizontalLines" type="boolean" line="1163"/>
            <javadoc line="1167">
                Returns true if the table draws vertical lines between cells, false if it
                  doesn&apos;t. The default value is look and feel dependent.                
                <return>
                    true if the table draws vertical lines between cells, false if it
                      doesn't                    
                </return>
                <see>
                    #setShowVerticalLines                    
                </see>
            </javadoc>
            <method name="getShowVerticalLines" type="boolean" line="1175"/>
            <javadoc line="1179">
                Sets the table&apos;s auto resize mode when the table is resized.  For further
                  information on how the different resize modes work, see{@link #doLayout}.                
                <param>
                    mode One of 5 legal values:
                      AUTO_RESIZE_OFF,
                      AUTO_RESIZE_NEXT_COLUMN,
                      AUTO_RESIZE_SUBSEQUENT_COLUMNS,
                      AUTO_RESIZE_LAST_COLUMN,
                      AUTO_RESIZE_ALL_COLUMNS                    
                </param>
                <see>
                    #getAutoResizeMode                    
                </see>
                <see>
                    #doLayout                    
                </see>
                <beaninfo>
                    bound: true
                      description: Whether the columns should adjust themselves automatically.
                      enum: AUTO_RESIZE_OFF                JTable.AUTO_RESIZE_OFF
                      AUTO_RESIZE_NEXT_COLUMN        JTable.AUTO_RESIZE_NEXT_COLUMN
                      AUTO_RESIZE_SUBSEQUENT_COLUMNS JTable.AUTO_RESIZE_SUBSEQUENT_COLUMNS
                      AUTO_RESIZE_LAST_COLUMN        JTable.AUTO_RESIZE_LAST_COLUMN
                      AUTO_RESIZE_ALL_COLUMNS        JTable.AUTO_RESIZE_ALL_COLUMNS                    
                </beaninfo>
            </javadoc>
            <method name="setAutoResizeMode" type="void" line="1202">
                <params>
                    <param name="mode" type="int"/>
                </params>
                <scope line="1207">
                    <declaration name="old" type="int" line="1208"/>
                    <scope line="1211"/>
                </scope>
            </method>
            <javadoc line="1218">
                Returns the auto resize mode of the table.  The default mode
                  is AUTO_RESIZE_SUBSEQUENT_COLUMNS.                
                <return>
                    the autoResizeMode of the table                    
                </return>
                <see>
                    #setAutoResizeMode                    
                </see>
                <see>
                    #doLayout                    
                </see>
            </javadoc>
            <method name="getAutoResizeMode" type="int" line="1227"/>
            <javadoc line="1231">
                Sets this table&apos;s &lt;code&gt;autoCreateColumnsFromModel&lt;/code&gt; flag.
                  This method calls &lt;code&gt;createDefaultColumnsFromModel&lt;/code&gt; if
                  &lt;code&gt;autoCreateColumnsFromModel&lt;/code&gt; changes from false to true.                
                <param>
                    autoCreateColumnsFromModel   true if <code>JTable</code> should automatically create columns                    
                </param>
                <see>
                    #getAutoCreateColumnsFromModel                    
                </see>
                <see>
                    #createDefaultColumnsFromModel                    
                </see>
                <beaninfo>
                    bound: true
                      description: Automatically populates the columnModel when a new TableModel is submitted.                    
                </beaninfo>
            </javadoc>
            <method name="setAutoCreateColumnsFromModel" type="void" line="1243">
                <params>
                    <param name="autoCreateColumnsFromModel" type="boolean"/>
                </params>
                <scope line="1244">
                    <declaration name="old" type="boolean" line="1245"/>
                    <scope line="1247"/>
                </scope>
            </method>
            <javadoc line="1254">
                Determines whether the table will create default columns from the model.
                  If true, &lt;code&gt;setModel&lt;/code&gt; will clear any existing columns and
                  create new columns from the new model.  Also, if the event in
                  the &lt;code&gt;tableChanged&lt;/code&gt; notification specifies that the
                  entire table changed, then the columns will be rebuilt.
                  The default is true.                
                <return>
                    the autoCreateColumnsFromModel of the table                    
                </return>
                <see>
                    #setAutoCreateColumnsFromModel                    
                </see>
                <see>
                    #createDefaultColumnsFromModel                    
                </see>
            </javadoc>
            <method name="getAutoCreateColumnsFromModel" type="boolean" line="1266"/>
            <javadoc line="1270">
                Creates default columns for the table from
                  the data model using the &lt;code&gt;getColumnCount&lt;/code&gt; method
                  defined in the &lt;code&gt;TableModel&lt;/code&gt; interface.
                  &lt;p&gt;
                  Clears any existing columns before creating the
                  new columns based on information from the model.                
                <see>
                    #getAutoCreateColumnsFromModel                    
                </see>
            </javadoc>
            <method name="createDefaultColumnsFromModel" type="void" line="1280">
                <comment line="1284">
                    Remove any current columns                    
                </comment>
                <comment line="1290">
                    Create new columns from the data model info                    
                </comment>
                <declaration name="m" type="TableModel" line="1281"/>
                <scope line="1282">
                    <declaration name="cm" type="TableColumnModel" line="1284"/>
                    <scope line="1285"/>
                    <scope line="1290">
                        <declaration name="newColumn" type="TableColumn" line="1291"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1297">
                Sets a default cell renderer to be used if no renderer has been set in
                  a &lt;code&gt;TableColumn&lt;/code&gt;. If renderer is &lt;code&gt;null&lt;/code&gt;,
                  removes the default renderer for this column class.                
                <param>
                    columnClass     set the default cell renderer for this columnClass                    
                </param>
                <param>
                    renderer        default cell renderer to be used for this
                      columnClass                    
                </param>
                <see>
                    #getDefaultRenderer                    
                </see>
                <see>
                    #setDefaultEditor                    
                </see>
            </javadoc>
            <method name="setDefaultRenderer" type="void" line="1308">
                <params>
                    <param name="columnClass" type="Class<?>"/>
                    <param name="renderer" type="TableCellRenderer"/>
                </params>
                <scope line="1309"/>
                <scope line="1312"/>
            </method>
            <javadoc line="1317">
                Returns the cell renderer to be used when no renderer has been set in
                  a &lt;code&gt;TableColumn&lt;/code&gt;. During the rendering of cells the renderer is fetched from
                  a &lt;code&gt;Hashtable&lt;/code&gt; of entries according to the class of the cells in the column. If
                  there is no entry for this &lt;code&gt;columnClass&lt;/code&gt; the method returns
                  the entry for the most specific superclass. The &lt;code&gt;JTable&lt;/code&gt; installs entries
                  for &lt;code&gt;Object&lt;/code&gt;, &lt;code&gt;Number&lt;/code&gt;, and &lt;code&gt;Boolean&lt;/code&gt;, all of which can be modified
                  or replaced.                
                <param>
                    columnClass   return the default cell renderer
                      for this columnClass                    
                </param>
                <return>
                    the renderer for this columnClass                    
                </return>
                <see>
                    #setDefaultRenderer                    
                </see>
                <see>
                    #getColumnClass                    
                </see>
            </javadoc>
            <method name="getDefaultRenderer" type="TableCellRenderer" line="1332">
                <params>
                    <param name="columnClass" type="Class<?>"/>
                </params>
                <scope line="1333"/>
                <scope line="1336">
                    <declaration name="renderer" type="Object" line="1337"/>
                    <scope line="1338"/>
                    <scope line="1341">
                        <declaration name="c" type="Class" line="1342"/>
                        <scope line="1343"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1351">
                Sets a default cell editor to be used if no editor has been set in
                  a &lt;code&gt;TableColumn&lt;/code&gt;. If no editing is required in a table, or a
                  particular column in a table, uses the &lt;code&gt;isCellEditable&lt;/code&gt;
                  method in the &lt;code&gt;TableModel&lt;/code&gt; interface to ensure that this
                  &lt;code&gt;JTable&lt;/code&gt; will not start an editor in these columns.
                  If editor is &lt;code&gt;null&lt;/code&gt;, removes the default editor for this
                  column class.                
                <param>
                    columnClass  set the default cell editor for this columnClass                    
                </param>
                <param>
                    editor   default cell editor to be used for this columnClass                    
                </param>
                <see>
                    TableModel#isCellEditable                    
                </see>
                <see>
                    #getDefaultEditor                    
                </see>
                <see>
                    #setDefaultRenderer                    
                </see>
            </javadoc>
            <method name="setDefaultEditor" type="void" line="1366">
                <params>
                    <param name="columnClass" type="Class<?>"/>
                    <param name="editor" type="TableCellEditor"/>
                </params>
                <scope line="1367"/>
                <scope line="1370"/>
            </method>
            <javadoc line="1375">
                Returns the editor to be used when no editor has been set in
                  a &lt;code&gt;TableColumn&lt;/code&gt;. During the editing of cells the editor is fetched from
                  a &lt;code&gt;Hashtable&lt;/code&gt; of entries according to the class of the cells in the column. If
                  there is no entry for this &lt;code&gt;columnClass&lt;/code&gt; the method returns
                  the entry for the most specific superclass. The &lt;code&gt;JTable&lt;/code&gt; installs entries
                  for &lt;code&gt;Object&lt;/code&gt;, &lt;code&gt;Number&lt;/code&gt;, and &lt;code&gt;Boolean&lt;/code&gt;, all of which can be modified
                  or replaced.                
                <param>
                    columnClass  return the default cell editor for this columnClass                    
                </param>
                <return>
                    the default cell editor to be used for this columnClass                    
                </return>
                <see>
                    #setDefaultEditor                    
                </see>
                <see>
                    #getColumnClass                    
                </see>
            </javadoc>
            <method name="getDefaultEditor" type="TableCellEditor" line="1389">
                <params>
                    <param name="columnClass" type="Class<?>"/>
                </params>
                <scope line="1390"/>
                <scope line="1393">
                    <declaration name="editor" type="Object" line="1394"/>
                    <scope line="1395"/>
                    <scope line="1398"/>
                </scope>
            </method>
            <javadoc line="1404">
                Turns on or off automatic drag handling. In order to enable automatic
                  drag handling, this property should be set to {@code true}, and the
                  table&apos;s {@code TransferHandler} needs to be {@code non-null}.
                  The default value of the {@code dragEnabled} property is {@code false}.
                  &lt;p&gt;
                  The job of honoring this property, and recognizing a user drag gesture,
                  lies with the look and feel implementation, and in particular, the table&apos;s{@code TableUI}. When automatic drag handling is enabled, most look and
                  feels (including those that subclass {@code BasicLookAndFeel}) begin a
                  drag and drop operation whenever the user presses the mouse button over
                  an item (in single selection mode) or a selection (in other selection
                  modes) and then moves the mouse a few pixels. Setting this property to{@code true} can therefore have a subtle effect on how selections behave.
                  &lt;p&gt;
                  If a look and feel is used that ignores this property, you can still
                  begin a drag and drop operation by calling {@code exportAsDrag} on the
                  table&apos;s {@code TransferHandler}.                
                <param>
                    b whether or not to enable automatic drag handling                    
                </param>
                <exception>
                    HeadlessException if
                      <code>b</code> is <code>true</code> and
                      <code>GraphicsEnvironment.isHeadless()</code>
                      returns <code>true</code>                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <see>
                    #getDragEnabled                    
                </see>
                <see>
                    #setTransferHandler                    
                </see>
                <see>
                    TransferHandler                    
                </see>
                <since>
                    1.4                    
                </since>
                <beaninfo>
                    description: determines whether automatic drag handling is enabled
                      bound: false                    
                </beaninfo>
            </javadoc>
            <method name="setDragEnabled" type="void" line="1438">
                <params>
                    <param name="b" type="boolean"/>
                </params>
                <scope line="1439"/>
            </method>
            <javadoc line="1445">
                Returns whether or not automatic drag handling is enabled.                
                <return>
                    the value of the {@code dragEnabled} property                    
                </return>
                <see>
                    #setDragEnabled                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getDragEnabled" type="boolean" line="1452"/>
            <javadoc line="1456">
                Sets the drop mode for this component. For backward compatibility,
                  the default for this property is &lt;code&gt;DropMode.USE_SELECTION&lt;/code&gt;.
                  Usage of one of the other modes is recommended, however, for an
                  improved user experience. &lt;code&gt;DropMode.ON&lt;/code&gt;, for instance,
                  offers similar behavior of showing items as selected, but does so without
                  affecting the actual selection in the table.
                  &lt;p&gt;
                  &lt;code&gt;JTable&lt;/code&gt; supports the following drop modes:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;code&gt;DropMode.USE_SELECTION&lt;/code&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;code&gt;DropMode.ON&lt;/code&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;code&gt;DropMode.INSERT&lt;/code&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;code&gt;DropMode.INSERT_ROWS&lt;/code&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;code&gt;DropMode.INSERT_COLS&lt;/code&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;code&gt;DropMode.ON_OR_INSERT&lt;/code&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;code&gt;DropMode.ON_OR_INSERT_ROWS&lt;/code&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;code&gt;DropMode.ON_OR_INSERT_COLS&lt;/code&gt;&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;
                  The drop mode is only meaningful if this component has a
                  &lt;code&gt;TransferHandler&lt;/code&gt; that accepts drops.                
                <param>
                    dropMode the drop mode to use                    
                </param>
                <throws>
                    IllegalArgumentException if the drop mode is unsupported
                      or <code>null</code>                    
                </throws>
                <see>
                    #getDropMode                    
                </see>
                <see>
                    #getDropLocation                    
                </see>
                <see>
                    #setTransferHandler                    
                </see>
                <see>
                    TransferHandler                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setDropMode" type="void" line="1488">
                <params>
                    <param name="dropMode" type="DropMode"/>
                </params>
                <scope line="1489"/>
            </method>
            <javadoc line="1507">
                Returns the drop mode for this component.                
                <return>
                    the drop mode for this component                    
                </return>
                <see>
                    #setDropMode                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getDropMode" type="DropMode" line="1514"/>
            <javadoc line="1518">
                Calculates a drop location in this component, representing where a
                  drop at the given point should insert data.                
                <param>
                    p the point to calculate a drop location for                    
                </param>
                <return>
                    the drop location, or <code>null</code>                    
                </return>
            </javadoc>
            <method name="dropLocationForPoint" type="DropLocation" line="1525">
                <params>
                    <param name="p" type="Point"/>
                </params>
                <declaration name="location" type="DropLocation" line="1526"/>
                <declaration name="row" type="int" line="1528"/>
                <declaration name="col" type="int" line="1529"/>
                <declaration name="outside" type="boolean" line="1530"/>
                <declaration name="rect" type="Rectangle" line="1533"/>
                <declaration name="xSection" type="Section" line="1534"/>
                <declaration name="between" type="boolean" line="1535"/>
                <declaration name="ltr" type="boolean" line="1536"/>
                <scope line="1541"/>
                <scope line="1543"/>
                <scope line="1548"/>
                <scope line="1555">
                    <scope line="1556"/>
                    <scope line="1558"/>
                    <scope line="1560"/>
                </scope>
                <scope line="1563">
                    <scope line="1565"/>
                    <scope line="1567"/>
                </scope>
                <scope line="1575">
                    <scope line="1576"/>
                </scope>
                <scope line="1585"/>
                <scope line="1590"/>
                <scope line="1595"/>
                <scope line="1602"/>
                <scope line="1607"/>
                <scope line="1613"/>
                <scope line="1615"/>
                <scope line="1623"/>
                <scope line="1628"/>
                <scope line="1633"/>
                <scope line="1640"/>
                <scope line="1645"/>
                <scope line="1651"/>
                <scope line="1653"/>
                <scope line="1661"/>
                <scope line="1668">
                    <scope line="1669"/>
                    <scope line="1671"/>
                    <scope line="1673"/>
                </scope>
                <scope line="1681"/>
                <scope line="1683"/>
            </method>
            <javadoc line="1701">
                Called to set or clear the drop location during a DnD operation.
                  In some cases, the component may need to use it&apos;s internal selection
                  temporarily to indicate the drop location. To help facilitate this,
                  this method returns and accepts as a parameter a state object.
                  This state object can be used to store, and later restore, the selection
                  state. Whatever this method returns will be passed back to it in
                  future calls, as the state parameter. If it wants the DnD system to
                  continue storing the same state, it must pass it back every time.
                  Here&apos;s how this is used:
                  &lt;p&gt;
                  Let&apos;s say that on the first call to this method the component decides
                  to save some state (because it is about to use the selection to show
                  a drop index). It can return a state object to the caller encapsulating
                  any saved selection state. On a second call, let&apos;s say the drop location
                  is being changed to something else. The component doesn&apos;t need to
                  restore anything yet, so it simply passes back the same state object
                  to have the DnD system continue storing it. Finally, let&apos;s say this
                  method is messaged with &lt;code&gt;null&lt;/code&gt;. This means DnD
                  is finished with this component for now, meaning it should restore
                  state. At this point, it can use the state parameter to restore
                  said state, and of course return &lt;code&gt;null&lt;/code&gt; since there&apos;s
                  no longer anything to store.                
                <param>
                    location the drop location (as calculated by
                      <code>dropLocationForPoint</code>) or <code>null</code>
                      if there's no longer a valid drop location                    
                </param>
                <param>
                    state the state object saved earlier for this component,
                      or <code>null</code>                    
                </param>
                <param>
                    forDrop whether or not the method is being called because an
                      actual drop occurred                    
                </param>
                <return>
                    any saved state for this component, or <code>null</code> if none                    
                </return>
            </javadoc>
            <method name="setDropLocation" type="Object" line="1736">
                <params>
                    <param name="location" type="TransferHandler.DropLocation"/>
                    <param name="state" type="Object"/>
                    <param name="forDrop" type="boolean"/>
                </params>
                <declaration name="retVal" type="Object" line="1738"/>
                <declaration name="tableLocation" type="DropLocation" line="1739"/>
                <scope line="1741">
                    <scope line="1742">
                        <scope line="1743">
                            <declaration name="rows" type="int[]" line="1746"/>
                            <declaration name="cols" type="int[]" line="1747"/>
                            <declaration name="anchleads" type="int[]" line="1748"/>
                            <scope line="1750"/>
                            <scope line="1754"/>
                        </scope>
                    </scope>
                    <scope line="1765">
                        <scope line="1766"/>
                        <scope line="1778"/>
                        <scope line="1782"/>
                        <scope line="1784"/>
                    </scope>
                </scope>
                <declaration name="old" type="DropLocation" line="1793"/>
            </method>
            <javadoc line="1800">
                Returns the location that this component should visually indicate
                  as the drop location during a DnD operation over the component,
                  or {@code null} if no location is to currently be shown.
                  &lt;p&gt;
                  This method is not meant for querying the drop location
                  from a {@code TransferHandler}, as the drop location is only
                  set after the {@code TransferHandler}&apos;s &lt;code&gt;canImport&lt;/code&gt;
                  has returned and has allowed for the location to be shown.
                  &lt;p&gt;
                  When this property changes, a property change event with
                  name &quot;dropLocation&quot; is fired by the component.                
                <return>
                    the drop location                    
                </return>
                <see>
                    #setDropMode                    
                </see>
                <see>
                    TransferHandler#canImport(TransferHandler.TransferSupport)                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getDropLocation" type="DropLocation" line="1818"/>
            <javadoc line="1822">
                Specifies whether a {@code RowSorter} should be created for the
                  table whenever its model changes.
                  &lt;p&gt;
                  When {@code setAutoCreateRowSorter(true)} is invoked, a {@codeTableRowSorter} is immediately created and installed on the
                  table.  While the {@code autoCreateRowSorter} property remains{@code true}, every time the model is changed, a new {@codeTableRowSorter} is created and set as the table&apos;s row sorter.                
                <param>
                    autoCreateRowSorter whether or not a {@code RowSorter}should be automatically created                    
                </param>
                <see>
                    javax.swing.table.TableRowSorter                    
                </see>
                <beaninfo>
                    bound: true
                      preferred: true
                      description: Whether or not to turn on sorting by default.                    
                </beaninfo>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setAutoCreateRowSorter" type="void" line="1841">
                <params>
                    <param name="autoCreateRowSorter" type="boolean"/>
                </params>
                <declaration name="oldValue" type="boolean" line="1842"/>
                <scope line="1844"/>
            </method>
            <javadoc line="1851">
                Returns {@code true} if whenever the model changes, a new{@code RowSorter} should be created and installed
                  as the table&apos;s sorter; otherwise, returns {@code false}.                
                <return>
                    true if a {@code RowSorter} should be created when
                      the model changes                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getAutoCreateRowSorter" type="boolean" line="1860"/>
            <javadoc line="1864">
                Specifies whether the selection should be updated after sorting.
                  If true, on sorting the selection is reset such that
                  the same rows, in terms of the model, remain selected.  The default
                  is true.                
                <param>
                    update whether or not to update the selection on sorting                    
                </param>
                <beaninfo>
                    bound: true
                      expert: true
                      description: Whether or not to update the selection on sorting                    
                </beaninfo>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setUpdateSelectionOnSort" type="void" line="1877">
                <params>
                    <param name="update" type="boolean"/>
                </params>
                <scope line="1878"/>
            </method>
            <javadoc line="1884">
                Returns true if the selection should be updated after sorting.                
                <return>
                    whether to update the selection on a sort                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getUpdateSelectionOnSort" type="boolean" line="1890"/>
            <javadoc line="1894">
                Sets the &lt;code&gt;RowSorter&lt;/code&gt;.  &lt;code&gt;RowSorter&lt;/code&gt; is used
                  to provide sorting and filtering to a &lt;code&gt;JTable&lt;/code&gt;.
                  &lt;p&gt;
                  This method clears the selection and resets any variable row heights.
                  &lt;p&gt;
                  This method fires a &lt;code&gt;PropertyChangeEvent&lt;/code&gt; when appropriate,
                  with the property name &lt;code&gt;&quot;rowSorter&quot;&lt;/code&gt;.  For
                  backward-compatibility, this method fires an additional event with the
                  property name &lt;code&gt;&quot;sorter&quot;&lt;/code&gt;.
                  &lt;p&gt;
                  If the underlying model of the &lt;code&gt;RowSorter&lt;/code&gt; differs from
                  that of this &lt;code&gt;JTable&lt;/code&gt; undefined behavior will result.                
                <param>
                    sorter the <code>RowSorter</code>; <code>null</code> turns
                      sorting off                    
                </param>
                <see>
                    javax.swing.table.TableRowSorter                    
                </see>
                <beaninfo>
                    bound: true
                      description: The table's RowSorter                    
                </beaninfo>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setRowSorter" type="void" line="1916">
                <params>
                    <param name="sorter" type="RowSorter<? extends TableModel>"/>
                </params>
                <declaration name="oldRowSorter" type="RowSorter&lt;? extends TableModel&gt;" line="1917"/>
                <scope line="1918"/>
                <scope line="1925"/>
            </method>
            <javadoc line="1933">
                Returns the object responsible for sorting.                
                <return>
                    the object responsible for sorting                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getRowSorter" type="RowSorter<? extends TableModel>" line="1939"/>
            <javadoc line="1946">
                Sets the table&apos;s selection mode to allow only single selections, a single
                  contiguous interval, or multiple intervals.
                  &lt;P&gt;
                  &lt;bold&gt;Note:&lt;/bold&gt;
                  &lt;code&gt;JTable&lt;/code&gt; provides all the methods for handling
                  column and row selection.  When setting states,
                  such as &lt;code&gt;setSelectionMode&lt;/code&gt;, it not only
                  updates the mode for the row selection model but also sets similar
                  values in the selection model of the &lt;code&gt;columnModel&lt;/code&gt;.
                  If you want to have the row and column selection models operating
                  in different modes, set them both directly.
                  &lt;p&gt;
                  Both the row and column selection models for &lt;code&gt;JTable&lt;/code&gt;
                  default to using a &lt;code&gt;DefaultListSelectionModel&lt;/code&gt;
                  so that &lt;code&gt;JTable&lt;/code&gt; works the same way as the
                  &lt;code&gt;JList&lt;/code&gt;. See the &lt;code&gt;setSelectionMode&lt;/code&gt; method
                  in &lt;code&gt;JList&lt;/code&gt; for details about the modes.                
                <see>
                    JList#setSelectionMode                    
                </see>
                <beaninfo>
                    description: The selection mode used by the row and column selection models.
                      enum: SINGLE_SELECTION            ListSelectionModel.SINGLE_SELECTION
                      SINGLE_INTERVAL_SELECTION   ListSelectionModel.SINGLE_INTERVAL_SELECTION
                      MULTIPLE_INTERVAL_SELECTION ListSelectionModel.MULTIPLE_INTERVAL_SELECTION                    
                </beaninfo>
            </javadoc>
            <method name="setSelectionMode" type="void" line="1972">
                <params>
                    <param name="selectionMode" type="int"/>
                </params>
            </method>
            <javadoc line="1978">
                Sets whether the rows in this model can be selected.                
                <param>
                    rowSelectionAllowed   true if this model will allow row selection                    
                </param>
                <see>
                    #getRowSelectionAllowed                    
                </see>
                <beaninfo>
                    bound: true
                      attribute: visualUpdate true
                      description: If true, an entire row is selected for each selected cell.                    
                </beaninfo>
            </javadoc>
            <method name="setRowSelectionAllowed" type="void" line="1988">
                <params>
                    <param name="rowSelectionAllowed" type="boolean"/>
                </params>
                <declaration name="old" type="boolean" line="1989"/>
                <scope line="1991"/>
            </method>
            <javadoc line="1997">
                Returns true if rows can be selected.                
                <return>
                    true if rows can be selected, otherwise false                    
                </return>
                <see>
                    #setRowSelectionAllowed                    
                </see>
            </javadoc>
            <method name="getRowSelectionAllowed" type="boolean" line="2003"/>
            <javadoc line="2007">
                Sets whether the columns in this model can be selected.                
                <param>
                    columnSelectionAllowed   true if this model will allow column selection                    
                </param>
                <see>
                    #getColumnSelectionAllowed                    
                </see>
                <beaninfo>
                    bound: true
                      attribute: visualUpdate true
                      description: If true, an entire column is selected for each selected cell.                    
                </beaninfo>
            </javadoc>
            <method name="setColumnSelectionAllowed" type="void" line="2017">
                <params>
                    <param name="columnSelectionAllowed" type="boolean"/>
                </params>
                <declaration name="old" type="boolean" line="2018"/>
                <scope line="2020"/>
            </method>
            <javadoc line="2026">
                Returns true if columns can be selected.                
                <return>
                    true if columns can be selected, otherwise false                    
                </return>
                <see>
                    #setColumnSelectionAllowed                    
                </see>
            </javadoc>
            <method name="getColumnSelectionAllowed" type="boolean" line="2032"/>
            <javadoc line="2036">
                Sets whether this table allows both a column selection and a
                  row selection to exist simultaneously. When set,
                  the table treats the intersection of the row and column selection
                  models as the selected cells. Override &lt;code&gt;isCellSelected&lt;/code&gt; to
                  change this default behavior. This method is equivalent to setting
                  both the &lt;code&gt;rowSelectionAllowed&lt;/code&gt; property and
                  &lt;code&gt;columnSelectionAllowed&lt;/code&gt; property of the
                  &lt;code&gt;columnModel&lt;/code&gt; to the supplied value.                
                <param>
                    cellSelectionEnabled     true if simultaneous row and column
                      selection is allowed                    
                </param>
                <see>
                    #getCellSelectionEnabled                    
                </see>
                <see>
                    #isCellSelected                    
                </see>
                <beaninfo>
                    bound: true
                      attribute: visualUpdate true
                      description: Select a rectangular region of cells rather than
                      rows or columns.                    
                </beaninfo>
            </javadoc>
            <method name="setCellSelectionEnabled" type="void" line="2056">
                <params>
                    <param name="cellSelectionEnabled" type="boolean"/>
                </params>
                <declaration name="old" type="boolean" line="2059"/>
            </method>
            <javadoc line="2064">
                Returns true if both row and column selection models are enabled.
                  Equivalent to &lt;code&gt;getRowSelectionAllowed() &amp;&amp;
                  getColumnSelectionAllowed()&lt;/code&gt;.                
                <return>
                    true if both row and column selection models are enabled                    
                </return>
                <see>
                    #setCellSelectionEnabled                    
                </see>
            </javadoc>
            <method name="getCellSelectionEnabled" type="boolean" line="2073"/>
            <javadoc line="2077">
                Selects all rows, columns, and cells in the table.                
            </javadoc>
            <method name="selectAll" type="void" line="2080">
                <comment line="2082">
                    If I&apos;m currently editing, then I should stop editing                    
                </comment>
                <comment line="2098">
                    this is done to restore the anchor and lead                    
                </comment>
                <comment line="2110">
                    this is done to restore the anchor and lead                    
                </comment>
                <scope line="2082"/>
                <scope line="2085">
                    <declaration name="oldLead" type="int" line="2086"/>
                    <declaration name="oldAnchor" type="int" line="2087"/>
                    <declaration name="selModel" type="ListSelectionModel" line="2088"/>
                </scope>
            </method>
            <javadoc line="2116">
                Deselects all selected columns and rows.                
            </javadoc>
            <method name="clearSelection" type="void" line="2119"/>
            <method name="clearSelectionAndLeadAnchor" type="void" line="2124"/>
            <method name="getAdjustedIndex" type="int" line="2139">
                <params>
                    <param name="index" type="int"/>
                    <param name="row" type="boolean"/>
                </params>
                <declaration name="compare" type="int" line="2140"/>
            </method>
            <method name="boundRow" type="int" line="2144">
                <params>
                    <param name="row" type="int"/>
                </params>
                <scope line="2145"/>
            </method>
            <method name="boundColumn" type="int" line="2151">
                <params>
                    <param name="col" type="int"/>
                </params>
                <scope line="2152"/>
            </method>
            <javadoc line="2158">
                Selects the rows from &lt;code&gt;index0&lt;/code&gt; to &lt;code&gt;index1&lt;/code&gt;,
                  inclusive.                
                <exception>
                    IllegalArgumentException      if <code>index0</code> or
                      <code>index1</code> lie outside
                      [0, <code>getRowCount()</code>-1]                    
                </exception>
                <param>
                    index0 one end of the interval                    
                </param>
                <param>
                    index1 the other end of the interval                    
                </param>
            </javadoc>
            <method name="setRowSelectionInterval" type="void" line="2168">
                <params>
                    <param name="index0" type="int"/>
                    <param name="index1" type="int"/>
                </params>
            </method>
            <javadoc line="2172">
                Selects the columns from &lt;code&gt;index0&lt;/code&gt; to &lt;code&gt;index1&lt;/code&gt;,
                  inclusive.                
                <exception>
                    IllegalArgumentException      if <code>index0</code> or
                      <code>index1</code> lie outside
                      [0, <code>getColumnCount()</code>-1]                    
                </exception>
                <param>
                    index0 one end of the interval                    
                </param>
                <param>
                    index1 the other end of the interval                    
                </param>
            </javadoc>
            <method name="setColumnSelectionInterval" type="void" line="2182">
                <params>
                    <param name="index0" type="int"/>
                    <param name="index1" type="int"/>
                </params>
            </method>
            <javadoc line="2186">
                Adds the rows from &lt;code&gt;index0&lt;/code&gt; to &lt;code&gt;index1&lt;/code&gt;, inclusive, to
                  the current selection.                
                <exception>
                    IllegalArgumentException      if <code>index0</code> or <code>index1</code>
                      lie outside [0, <code>getRowCount()</code>-1]                    
                </exception>
                <param>
                    index0 one end of the interval                    
                </param>
                <param>
                    index1 the other end of the interval                    
                </param>
            </javadoc>
            <method name="addRowSelectionInterval" type="void" line="2195">
                <params>
                    <param name="index0" type="int"/>
                    <param name="index1" type="int"/>
                </params>
            </method>
            <javadoc line="2199">
                Adds the columns from &lt;code&gt;index0&lt;/code&gt; to &lt;code&gt;index1&lt;/code&gt;,
                  inclusive, to the current selection.                
                <exception>
                    IllegalArgumentException      if <code>index0</code> or
                      <code>index1</code> lie outside
                      [0, <code>getColumnCount()</code>-1]                    
                </exception>
                <param>
                    index0 one end of the interval                    
                </param>
                <param>
                    index1 the other end of the interval                    
                </param>
            </javadoc>
            <method name="addColumnSelectionInterval" type="void" line="2209">
                <params>
                    <param name="index0" type="int"/>
                    <param name="index1" type="int"/>
                </params>
            </method>
            <javadoc line="2213">
                Deselects the rows from &lt;code&gt;index0&lt;/code&gt; to &lt;code&gt;index1&lt;/code&gt;, inclusive.                
                <exception>
                    IllegalArgumentException      if <code>index0</code> or
                      <code>index1</code> lie outside
                      [0, <code>getRowCount()</code>-1]                    
                </exception>
                <param>
                    index0 one end of the interval                    
                </param>
                <param>
                    index1 the other end of the interval                    
                </param>
            </javadoc>
            <method name="removeRowSelectionInterval" type="void" line="2222">
                <params>
                    <param name="index0" type="int"/>
                    <param name="index1" type="int"/>
                </params>
            </method>
            <javadoc line="2226">
                Deselects the columns from &lt;code&gt;index0&lt;/code&gt; to &lt;code&gt;index1&lt;/code&gt;, inclusive.                
                <exception>
                    IllegalArgumentException      if <code>index0</code> or
                      <code>index1</code> lie outside
                      [0, <code>getColumnCount()</code>-1]                    
                </exception>
                <param>
                    index0 one end of the interval                    
                </param>
                <param>
                    index1 the other end of the interval                    
                </param>
            </javadoc>
            <method name="removeColumnSelectionInterval" type="void" line="2235">
                <params>
                    <param name="index0" type="int"/>
                    <param name="index1" type="int"/>
                </params>
            </method>
            <javadoc line="2239">
                Returns the index of the first selected row, -1 if no row is selected.                
                <return>
                    the index of the first selected row                    
                </return>
            </javadoc>
            <method name="getSelectedRow" type="int" line="2243"/>
            <javadoc line="2247">
                Returns the index of the first selected column,
                  -1 if no column is selected.                
                <return>
                    the index of the first selected column                    
                </return>
            </javadoc>
            <method name="getSelectedColumn" type="int" line="2252"/>
            <javadoc line="2256">
                Returns the indices of all selected rows.                
                <return>
                    an array of integers containing the indices of all selected rows,
                      or an empty array if no row is selected                    
                </return>
                <see>
                    #getSelectedRow                    
                </see>
            </javadoc>
            <method name="getSelectedRows" type="int[]" line="2263">
                <declaration name="iMin" type="int" line="2264"/>
                <declaration name="iMax" type="int" line="2265"/>
                <scope line="2267"/>
                <declaration name="rvTmp" type="int[]" line="2271"/>
                <declaration name="n" type="int" line="2272"/>
                <scope line="2273">
                    <scope line="2274"/>
                </scope>
                <declaration name="rv" type="int[]" line="2278"/>
            </method>
            <javadoc line="2283">
                Returns the indices of all selected columns.                
                <return>
                    an array of integers containing the indices of all selected columns,
                      or an empty array if no column is selected                    
                </return>
                <see>
                    #getSelectedColumn                    
                </see>
            </javadoc>
            <method name="getSelectedColumns" type="int[]" line="2290"/>
            <javadoc line="2294">
                Returns the number of selected rows.                
                <return>
                    the number of selected rows, 0 if no rows are selected                    
                </return>
            </javadoc>
            <method name="getSelectedRowCount" type="int" line="2299">
                <declaration name="iMin" type="int" line="2300"/>
                <declaration name="iMax" type="int" line="2301"/>
                <declaration name="count" type="int" line="2302"/>
                <scope line="2304">
                    <scope line="2305"/>
                </scope>
            </method>
            <javadoc line="2312">
                Returns the number of selected columns.                
                <return>
                    the number of selected columns, 0 if no columns are selected                    
                </return>
            </javadoc>
            <method name="getSelectedColumnCount" type="int" line="2317"/>
            <javadoc line="2321">
                Returns true if the specified index is in the valid range of rows,
                  and the row at that index is selected.                
                <return>
                    true if <code>row</code> is a valid index and the row at
                      that index is selected (where 0 is the first row)                    
                </return>
            </javadoc>
            <method name="isRowSelected" type="boolean" line="2328">
                <params>
                    <param name="row" type="int"/>
                </params>
            </method>
            <javadoc line="2332">
                Returns true if the specified index is in the valid range of columns,
                  and the column at that index is selected.                
                <param>
                    column   the column in the column model                    
                </param>
                <return>
                    true if <code>column</code> is a valid index and the column at
                      that index is selected (where 0 is the first column)                    
                </return>
            </javadoc>
            <method name="isColumnSelected" type="boolean" line="2340">
                <params>
                    <param name="column" type="int"/>
                </params>
            </method>
            <javadoc line="2344">
                Returns true if the specified indices are in the valid range of rows
                  and columns and the cell at the specified position is selected.                
                <param>
                    row   the row being queried                    
                </param>
                <param>
                    column  the column being queried                    
                </param>
                <return>
                    true if <code>row</code> and <code>column</code> are valid indices
                      and the cell at index <code>(row, column)</code> is selected,
                      where the first row and first column are at index 0                    
                </return>
            </javadoc>
            <method name="isCellSelected" type="boolean" line="2354">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
                <scope line="2355"/>
            </method>
            <method name="changeSelectionModel" type="void" line="2364">
                <params>
                    <param name="sm" type="ListSelectionModel"/>
                    <param name="index" type="int"/>
                    <param name="toggle" type="boolean"/>
                    <param name="extend" type="boolean"/>
                    <param name="selected" type="boolean"/>
                    <param name="anchor" type="int"/>
                    <param name="anchorSelected" type="boolean"/>
                </params>
                <comment line="2372">
                    this is a Windows-only behavior that we want for file lists                    
                </comment>
                <scope line="2365">
                    <scope line="2366">
                        <scope line="2367"/>
                        <scope line="2369">
                            <scope line="2372"/>
                        </scope>
                    </scope>
                    <scope line="2378"/>
                </scope>
                <scope line="2382">
                    <scope line="2383">
                        <scope line="2384"/>
                        <scope line="2387"/>
                    </scope>
                    <scope line="2391"/>
                </scope>
            </method>
            <javadoc line="2397">
                Updates the selection models of the table, depending on the state of the
                  two flags: &lt;code&gt;toggle&lt;/code&gt; and &lt;code&gt;extend&lt;/code&gt;. Most changes
                  to the selection that are the result of keyboard or mouse events received
                  by the UI are channeled through this method so that the behavior may be
                  overridden by a subclass. Some UIs may need more functionality than
                  this method provides, such as when manipulating the lead for discontiguous
                  selection, and may not call into this method for some selection changes.
                  &lt;p&gt;
                  This implementation uses the following conventions:
                  &lt;ul&gt;
                  &lt;li&gt; &lt;code&gt;toggle&lt;/code&gt;: &lt;em&gt;false&lt;/em&gt;, &lt;code&gt;extend&lt;/code&gt;: &lt;em&gt;false&lt;/em&gt;.
                  Clear the previous selection and ensure the new cell is selected.
                  &lt;li&gt; &lt;code&gt;toggle&lt;/code&gt;: &lt;em&gt;false&lt;/em&gt;, &lt;code&gt;extend&lt;/code&gt;: &lt;em&gt;true&lt;/em&gt;.
                  Extend the previous selection from the anchor to the specified cell,
                  clearing all other selections.
                  &lt;li&gt; &lt;code&gt;toggle&lt;/code&gt;: &lt;em&gt;true&lt;/em&gt;, &lt;code&gt;extend&lt;/code&gt;: &lt;em&gt;false&lt;/em&gt;.
                  If the specified cell is selected, deselect it. If it is not selected, select it.
                  &lt;li&gt; &lt;code&gt;toggle&lt;/code&gt;: &lt;em&gt;true&lt;/em&gt;, &lt;code&gt;extend&lt;/code&gt;: &lt;em&gt;true&lt;/em&gt;.
                  Apply the selection state of the anchor to all cells between it and the
                  specified cell.
                  &lt;/ul&gt;                
                <param>
                    rowIndex   affects the selection at <code>row</code>                    
                </param>
                <param>
                    columnIndex  affects the selection at <code>column</code>                    
                </param>
                <param>
                    toggle  see description above                    
                </param>
                <param>
                    extend  if true, extend the current selection                    
                </param>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="changeSelection" type="void" line="2426">
                <params>
                    <param name="rowIndex" type="int"/>
                    <param name="columnIndex" type="int"/>
                    <param name="toggle" type="boolean"/>
                    <param name="extend" type="boolean"/>
                </params>
                <comment line="2450">
                    Check the selection here rather than in each selection model.
                     This is significant in cell selection mode if we are supposed
                     to be toggling the selection. In this case it is better to
                     ensure that the cell&apos;s selection state will indeed be changed.
                     If this were done in the code for the selection model it
                     might leave a cell in selection state if the row was
                     selected but the column was not - as it would toggle them both.                    
                </comment>
                <comment line="2465">
                    Scroll after changing the selection as blit scrolling is immediate,
                     so that if we cause the repaint after the scroll we end up painting
                     everything!                    
                </comment>
                <declaration name="rsm" type="ListSelectionModel" line="2427"/>
                <declaration name="csm" type="ListSelectionModel" line="2428"/>
                <declaration name="anchorRow" type="int" line="2430"/>
                <declaration name="anchorCol" type="int" line="2431"/>
                <declaration name="anchorSelected" type="boolean" line="2433"/>
                <scope line="2435">
                    <scope line="2436"/>
                </scope>
                <scope line="2442">
                    <scope line="2443"/>
                </scope>
                <declaration name="selected" type="boolean" line="2456"/>
                <scope line="2467">
                    <declaration name="cellRect" type="Rectangle" line="2468"/>
                    <scope line="2469"/>
                </scope>
            </method>
            <javadoc line="2475">
                Returns the foreground color for selected cells.                
                <return>
                    the <code>Color</code> object for the foreground property                    
                </return>
                <see>
                    #setSelectionForeground                    
                </see>
                <see>
                    #setSelectionBackground                    
                </see>
            </javadoc>
            <method name="getSelectionForeground" type="Color" line="2482"/>
            <javadoc line="2486">
                Sets the foreground color for selected cells.  Cell renderers
                  can use this color to render text and graphics for selected
                  cells.
                  &lt;p&gt;
                  The default value of this property is defined by the look
                  and feel implementation.
                  &lt;p&gt;
                  This is a &lt;a href=&quot;http://java.sun.com/docs/books/tutorial/javabeans/properties/bound.html&quot;&gt;JavaBeans&lt;/a&gt; bound property.                
                <param>
                    selectionForeground  the <code>Color</code> to use in the foreground
                      for selected list items                    
                </param>
                <see>
                    #getSelectionForeground                    
                </see>
                <see>
                    #setSelectionBackground                    
                </see>
                <see>
                    #setForeground                    
                </see>
                <see>
                    #setBackground                    
                </see>
                <see>
                    #setFont                    
                </see>
                <beaninfo>
                    bound: true
                      description: A default foreground color for selected cells.                    
                </beaninfo>
            </javadoc>
            <method name="setSelectionForeground" type="void" line="2507">
                <params>
                    <param name="selectionForeground" type="Color"/>
                </params>
                <declaration name="old" type="Color" line="2508"/>
            </method>
            <javadoc line="2514">
                Returns the background color for selected cells.                
                <return>
                    the <code>Color</code> used for the background of selected list items                    
                </return>
                <see>
                    #setSelectionBackground                    
                </see>
                <see>
                    #setSelectionForeground                    
                </see>
            </javadoc>
            <method name="getSelectionBackground" type="Color" line="2521"/>
            <javadoc line="2525">
                Sets the background color for selected cells.  Cell renderers
                  can use this color to the fill selected cells.
                  &lt;p&gt;
                  The default value of this property is defined by the look
                  and feel implementation.
                  &lt;p&gt;
                  This is a &lt;a href=&quot;http://java.sun.com/docs/books/tutorial/javabeans/properties/bound.html&quot;&gt;JavaBeans&lt;/a&gt; bound property.                
                <param>
                    selectionBackground  the <code>Color</code> to use for the background
                      of selected cells                    
                </param>
                <see>
                    #getSelectionBackground                    
                </see>
                <see>
                    #setSelectionForeground                    
                </see>
                <see>
                    #setForeground                    
                </see>
                <see>
                    #setBackground                    
                </see>
                <see>
                    #setFont                    
                </see>
                <beaninfo>
                    bound: true
                      description: A default background color for selected cells.                    
                </beaninfo>
            </javadoc>
            <method name="setSelectionBackground" type="void" line="2545">
                <params>
                    <param name="selectionBackground" type="Color"/>
                </params>
                <declaration name="old" type="Color" line="2546"/>
            </method>
            <javadoc line="2552">
                Returns the &lt;code&gt;TableColumn&lt;/code&gt; object for the column in the table
                  whose identifier is equal to &lt;code&gt;identifier&lt;/code&gt;, when compared using
                  &lt;code&gt;equals&lt;/code&gt;.                
                <return>
                    the <code>TableColumn</code> object that matches the identifier                    
                </return>
                <exception>
                    IllegalArgumentException      if <code>identifier</code> is <code>null</code> or no <code>TableColumn</code> has this identifier                    
                </exception>
                <param>
                    identifier                      the identifier object                    
                </param>
            </javadoc>
            <method name="getColumn" type="TableColumn" line="2562">
                <params>
                    <param name="identifier" type="Object"/>
                </params>
                <declaration name="cm" type="TableColumnModel" line="2563"/>
                <declaration name="columnIndex" type="int" line="2564"/>
            </method>
            <javadoc line="2572">
                Maps the index of the column in the view at
                  &lt;code&gt;viewColumnIndex&lt;/code&gt; to the index of the column
                  in the table model.  Returns the index of the corresponding
                  column in the model.  If &lt;code&gt;viewColumnIndex&lt;/code&gt;
                  is less than zero, returns &lt;code&gt;viewColumnIndex&lt;/code&gt;.                
                <param>
                    viewColumnIndex     the index of the column in the view                    
                </param>
                <return>
                    the index of the corresponding column in the model                    
                </return>
                <see>
                    #convertColumnIndexToView                    
                </see>
            </javadoc>
            <method name="convertColumnIndexToModel" type="int" line="2584">
                <params>
                    <param name="viewColumnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="2589">
                Maps the index of the column in the table model at
                  &lt;code&gt;modelColumnIndex&lt;/code&gt; to the index of the column
                  in the view.  Returns the index of the
                  corresponding column in the view; returns -1 if this column is not
                  being displayed.  If &lt;code&gt;modelColumnIndex&lt;/code&gt; is less than zero,
                  returns &lt;code&gt;modelColumnIndex&lt;/code&gt;.                
                <param>
                    modelColumnIndex     the index of the column in the model                    
                </param>
                <return>
                    the index of the corresponding column in the view                    
                </return>
                <see>
                    #convertColumnIndexToModel                    
                </see>
            </javadoc>
            <method name="convertColumnIndexToView" type="int" line="2602">
                <params>
                    <param name="modelColumnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="2607">
                Maps the index of the row in terms of the
                  &lt;code&gt;TableModel&lt;/code&gt; to the view.  If the contents of the
                  model are not sorted the model and view indices are the same.                
                <param>
                    modelRowIndex the index of the row in terms of the model                    
                </param>
                <return>
                    the index of the corresponding row in the view, or -1 if
                      the row isn't visible                    
                </return>
                <throws>
                    IndexOutOfBoundsException if sorting is enabled and passed an
                      index outside the number of rows of the <code>TableModel</code>                    
                </throws>
                <see>
                    javax.swing.table.TableRowSorter                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="convertRowIndexToView" type="int" line="2620">
                <params>
                    <param name="modelRowIndex" type="int"/>
                </params>
                <declaration name="sorter" type="RowSorter" line="2621"/>
                <scope line="2622"/>
            </method>
            <javadoc line="2628">
                Maps the index of the row in terms of the view to the
                  underlying &lt;code&gt;TableModel&lt;/code&gt;.  If the contents of the
                  model are not sorted the model and view indices are the same.                
                <param>
                    viewRowIndex the index of the row in the view                    
                </param>
                <return>
                    the index of the corresponding row in the model                    
                </return>
                <throws>
                    IndexOutOfBoundsException if sorting is enabled and passed an
                      index outside the range of the <code>JTable</code> as
                      determined by the method <code>getRowCount</code>                    
                </throws>
                <see>
                    javax.swing.table.TableRowSorter                    
                </see>
                <see>
                    #getRowCount                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="convertRowIndexToModel" type="int" line="2642">
                <params>
                    <param name="viewRowIndex" type="int"/>
                </params>
                <declaration name="sorter" type="RowSorter" line="2643"/>
                <scope line="2644"/>
            </method>
            <javadoc line="2650">
                Returns the number of rows that can be shown in the
                  &lt;code&gt;JTable&lt;/code&gt;, given unlimited space.  If a
                  &lt;code&gt;RowSorter&lt;/code&gt; with a filter has been specified, the
                  number of rows returned may differ from that of the underlying
                  &lt;code&gt;TableModel&lt;/code&gt;.                
                <return>
                    the number of rows shown in the <code>JTable</code>                    
                </return>
                <see>
                    #getColumnCount                    
                </see>
            </javadoc>
            <method name="getRowCount" type="int" line="2660">
                <declaration name="sorter" type="RowSorter" line="2661"/>
                <scope line="2662"/>
            </method>
            <javadoc line="2668">
                Returns the number of columns in the column model. Note that this may
                  be different from the number of columns in the table model.                
                <return>
                    the number of columns in the table                    
                </return>
                <see>
                    #getRowCount                    
                </see>
                <see>
                    #removeColumn                    
                </see>
            </javadoc>
            <method name="getColumnCount" type="int" line="2676"/>
            <javadoc line="2680">
                Returns the name of the column appearing in the view at
                  column position &lt;code&gt;column&lt;/code&gt;.                
                <param>
                    column    the column in the view being queried                    
                </param>
                <return>
                    the name of the column at position <code>column</code>
                      in the view where the first column is column 0                    
                </return>
            </javadoc>
            <method name="getColumnName" type="String" line="2688">
                <params>
                    <param name="column" type="int"/>
                </params>
            </method>
            <javadoc line="2692">
                Returns the type of the column appearing in the view at
                  column position &lt;code&gt;column&lt;/code&gt;.                
                <param>
                    column   the column in the view being queried                    
                </param>
                <return>
                    the type of the column at position <code>column</code>
                      in the view where the first column is column 0                    
                </return>
            </javadoc>
            <method name="getColumnClass" type="Class<?>" line="2700">
                <params>
                    <param name="column" type="int"/>
                </params>
            </method>
            <javadoc line="2704">
                Returns the cell value at &lt;code&gt;row&lt;/code&gt; and &lt;code&gt;column&lt;/code&gt;.
                  &lt;p&gt;
                  &lt;b&gt;Note&lt;/b&gt;: The column is specified in the table view&apos;s display
                  order, and not in the &lt;code&gt;TableModel&lt;/code&gt;&apos;s column
                  order.  This is an important distinction because as the
                  user rearranges the columns in the table,
                  the column at a given index in the view will change.
                  Meanwhile the user&apos;s actions never affect the model&apos;s
                  column ordering.                
                <param>
                    row             the row whose value is to be queried                    
                </param>
                <param>
                    column          the column whose value is to be queried                    
                </param>
                <return>
                    the Object at the specified cell                    
                </return>
            </javadoc>
            <method name="getValueAt" type="Object" line="2719">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
            </method>
            <javadoc line="2724">
                Sets the value for the cell in the table model at &lt;code&gt;row&lt;/code&gt;
                  and &lt;code&gt;column&lt;/code&gt;.
                  &lt;p&gt;
                  &lt;b&gt;Note&lt;/b&gt;: The column is specified in the table view&apos;s display
                  order, and not in the &lt;code&gt;TableModel&lt;/code&gt;&apos;s column
                  order.  This is an important distinction because as the
                  user rearranges the columns in the table,
                  the column at a given index in the view will change.
                  Meanwhile the user&apos;s actions never affect the model&apos;s
                  column ordering.
                  &lt;code&gt;aValue&lt;/code&gt; is the new value.                
                <param>
                    aValue          the new value                    
                </param>
                <param>
                    row             the row of the cell to be changed                    
                </param>
                <param>
                    column          the column of the cell to be changed                    
                </param>
                <see>
                    #getValueAt                    
                </see>
            </javadoc>
            <method name="setValueAt" type="void" line="2743">
                <params>
                    <param name="aValue" type="Object"/>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
            </method>
            <javadoc line="2748">
                Returns true if the cell at &lt;code&gt;row&lt;/code&gt; and &lt;code&gt;column&lt;/code&gt;
                  is editable.  Otherwise, invoking &lt;code&gt;setValueAt&lt;/code&gt; on the cell
                  will have no effect.
                  &lt;p&gt;
                  &lt;b&gt;Note&lt;/b&gt;: The column is specified in the table view&apos;s display
                  order, and not in the &lt;code&gt;TableModel&lt;/code&gt;&apos;s column
                  order.  This is an important distinction because as the
                  user rearranges the columns in the table,
                  the column at a given index in the view will change.
                  Meanwhile the user&apos;s actions never affect the model&apos;s
                  column ordering.                
                <param>
                    row      the row whose value is to be queried                    
                </param>
                <param>
                    column   the column whose value is to be queried                    
                </param>
                <return>
                    true if the cell is editable                    
                </return>
                <see>
                    #setValueAt                    
                </see>
            </javadoc>
            <method name="isCellEditable" type="boolean" line="2767">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
            </method>
            <javadoc line="2775">
                Appends &lt;code&gt;aColumn&lt;/code&gt; to the end of the array of columns held by
                  this &lt;code&gt;JTable&lt;/code&gt;&apos;s column model.
                  If the column name of &lt;code&gt;aColumn&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;,
                  sets the column name of &lt;code&gt;aColumn&lt;/code&gt; to the name
                  returned by &lt;code&gt;getModel().getColumnName()&lt;/code&gt;.
                  &lt;p&gt;
                  To add a column to this &lt;code&gt;JTable&lt;/code&gt; to display the
                  &lt;code&gt;modelColumn&lt;/code&gt;&apos;th column of data in the model with a
                  given &lt;code&gt;width&lt;/code&gt;, &lt;code&gt;cellRenderer&lt;/code&gt;,
                  and &lt;code&gt;cellEditor&lt;/code&gt; you can use:
                  &lt;pre&gt;
                  addColumn(new TableColumn(modelColumn, width, cellRenderer, cellEditor));
                  &lt;/pre&gt;
                  [Any of the &lt;code&gt;TableColumn&lt;/code&gt; constructors can be used
                  instead of this one.]
                  The model column number is stored inside the &lt;code&gt;TableColumn&lt;/code&gt;
                  and is used during rendering and editing to locate the appropriates
                  data values in the model. The model column number does not change
                  when columns are reordered in the view.                
                <param>
                    aColumn         the <code>TableColumn</code> to be added                    
                </param>
                <see>
                    #removeColumn                    
                </see>
            </javadoc>
            <method name="addColumn" type="void" line="2801">
                <params>
                    <param name="aColumn" type="TableColumn"/>
                </params>
                <scope line="2802">
                    <declaration name="modelColumn" type="int" line="2803"/>
                    <declaration name="columnName" type="String" line="2804"/>
                </scope>
            </method>
            <javadoc line="2810">
                Removes &lt;code&gt;aColumn&lt;/code&gt; from this &lt;code&gt;JTable&lt;/code&gt;&apos;s
                  array of columns.  Note: this method does not remove the column
                  of data from the model; it just removes the &lt;code&gt;TableColumn&lt;/code&gt;
                  that was responsible for displaying it.                
                <param>
                    aColumn         the <code>TableColumn</code> to be removed                    
                </param>
                <see>
                    #addColumn                    
                </see>
            </javadoc>
            <method name="removeColumn" type="void" line="2819">
                <params>
                    <param name="aColumn" type="TableColumn"/>
                </params>
            </method>
            <javadoc line="2823">
                Moves the column &lt;code&gt;column&lt;/code&gt; to the position currently
                  occupied by the column &lt;code&gt;targetColumn&lt;/code&gt; in the view.
                  The old column at &lt;code&gt;targetColumn&lt;/code&gt; is
                  shifted left or right to make room.                
                <param>
                    column                  the index of column to be moved                    
                </param>
                <param>
                    targetColumn            the new index of the column                    
                </param>
            </javadoc>
            <method name="moveColumn" type="void" line="2832">
                <params>
                    <param name="column" type="int"/>
                    <param name="targetColumn" type="int"/>
                </params>
            </method>
            <javadoc line="2840">
                Returns the index of the column that &lt;code&gt;point&lt;/code&gt; lies in,
                  or -1 if the result is not in the range
                  [0, &lt;code&gt;getColumnCount()&lt;/code&gt;-1].                
                <param>
                    point   the location of interest                    
                </param>
                <return>
                    the index of the column that <code>point</code> lies in,
                      or -1 if the result is not in the range
                      [0, <code>getColumnCount()</code>-1]                    
                </return>
                <see>
                    #rowAtPoint                    
                </see>
            </javadoc>
            <method name="columnAtPoint" type="int" line="2851">
                <params>
                    <param name="point" type="Point"/>
                </params>
                <declaration name="x" type="int" line="2852"/>
                <scope line="2853"/>
            </method>
            <javadoc line="2859">
                Returns the index of the row that &lt;code&gt;point&lt;/code&gt; lies in,
                  or -1 if the result is not in the range
                  [0, &lt;code&gt;getRowCount()&lt;/code&gt;-1].                
                <param>
                    point   the location of interest                    
                </param>
                <return>
                    the index of the row that <code>point</code> lies in,
                      or -1 if the result is not in the range
                      [0, <code>getRowCount()</code>-1]                    
                </return>
                <see>
                    #columnAtPoint                    
                </see>
            </javadoc>
            <method name="rowAtPoint" type="int" line="2870">
                <params>
                    <param name="point" type="Point"/>
                </params>
                <declaration name="y" type="int" line="2871"/>
                <declaration name="result" type="int" line="2872"/>
                <scope line="2873"/>
                <scope line="2876"/>
                <scope line="2879"/>
            </method>
            <javadoc line="2884">
                Returns a rectangle for the cell that lies at the intersection of
                  &lt;code&gt;row&lt;/code&gt; and &lt;code&gt;column&lt;/code&gt;.
                  If &lt;code&gt;includeSpacing&lt;/code&gt; is true then the value returned
                  has the full height and width of the row and column
                  specified. If it is false, the returned rectangle is inset by the
                  intercell spacing to return the true bounds of the rendering or
                  editing component as it will be set during rendering.
                  &lt;p&gt;
                  If the column index is valid but the row index is less
                  than zero the method returns a rectangle with the
                  &lt;code&gt;y&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; values set appropriately
                  and the &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;width&lt;/code&gt; values both set
                  to zero. In general, when either the row or column indices indicate a
                  cell outside the appropriate range, the method returns a rectangle
                  depicting the closest edge of the closest cell that is within
                  the table&apos;s range. When both row and column indices are out
                  of range the returned rectangle covers the closest
                  point of the closest cell.
                  &lt;p&gt;
                  In all cases, calculations that use this method to calculate
                  results along one axis will not fail because of anomalies in
                  calculations along the other axis. When the cell is not valid
                  the &lt;code&gt;includeSpacing&lt;/code&gt; parameter is ignored.                
                <param>
                    row                   the row index where the desired cell
                      is located                    
                </param>
                <param>
                    column                the column index where the desired cell
                      is located in the display; this is not
                      necessarily the same as the column index
                      in the data model for the table; the{@link #convertColumnIndexToView(int)}method may be used to convert a data
                      model column index to a display
                      column index                    
                </param>
                <param>
                    includeSpacing        if false, return the true cell bounds -
                      computed by subtracting the intercell
                      spacing from the height and widths of
                      the column and row models                    
                </param>
                <return>
                    the rectangle containing the cell at location
                      <code>row</code>,<code>column</code>                    
                </return>
                <see>
                    #getIntercellSpacing                    
                </see>
            </javadoc>
            <method name="getCellRect" type="Rectangle" line="2928">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="includeSpacing" type="boolean"/>
                </params>
                <comment line="2933">
                    y = height = 0;                    
                </comment>
                <comment line="2949">
                    otherwise, x = width = 0;                    
                </comment>
                <comment line="2956">
                    otherwise, x = width = 0;                    
                </comment>
                <comment line="2974">
                    Bound the margins by their associated dimensions to prevent
                     returning bounds with negative dimensions.                    
                </comment>
                <comment line="2978">
                    This is not the same as grow(), it rounds differently.                    
                </comment>
                <declaration name="r" type="Rectangle" line="2929"/>
                <declaration name="valid" type="boolean" line="2930"/>
                <scope line="2931"/>
                <scope line="2935"/>
                <scope line="2939"/>
                <scope line="2944">
                    <scope line="2945"/>
                </scope>
                <scope line="2951">
                    <scope line="2952"/>
                </scope>
                <scope line="2958">
                    <declaration name="cm" type="TableColumnModel" line="2959"/>
                    <scope line="2960">
                        <scope line="2961"/>
                    </scope>
                    <scope line="2964">
                        <scope line="2965"/>
                    </scope>
                </scope>
                <scope line="2972">
                    <declaration name="rm" type="int" line="2975"/>
                    <declaration name="cm" type="int" line="2976"/>
                </scope>
            </method>
            <method name="viewIndexForColumn" type="int" line="2983">
                <params>
                    <param name="aColumn" type="TableColumn"/>
                </params>
                <declaration name="cm" type="TableColumnModel" line="2984"/>
                <scope line="2985">
                    <scope line="2986"/>
                </scope>
            </method>
            <javadoc line="2993">
                Causes this table to lay out its rows and columns.  Overridden so
                  that columns can be resized to accomodate a change in the size of
                  a containing parent.
                  Resizes one or more of the columns in the table
                  so that the total width of all of this &lt;code&gt;JTable&lt;/code&gt;&apos;s
                  columns is equal to the width of the table.
                  &lt;p&gt;
                  Before the layout begins the method gets the
                  &lt;code&gt;resizingColumn&lt;/code&gt; of the &lt;code&gt;tableHeader&lt;/code&gt;.
                  When the method is called as a result of the resizing of an enclosing window,
                  the &lt;code&gt;resizingColumn&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;. This means that resizing
                  has taken place &quot;outside&quot; the &lt;code&gt;JTable&lt;/code&gt; and the change -
                  or &quot;delta&quot; - should be distributed to all of the columns regardless
                  of this &lt;code&gt;JTable&lt;/code&gt;&apos;s automatic resize mode.
                  &lt;p&gt;
                  If the &lt;code&gt;resizingColumn&lt;/code&gt; is not &lt;code&gt;null&lt;/code&gt;, it is one of
                  the columns in the table that has changed size rather than
                  the table itself. In this case the auto-resize modes govern
                  the way the extra (or deficit) space is distributed
                  amongst the available columns.
                  &lt;p&gt;
                  The modes are:
                  &lt;ul&gt;
                  &lt;li&gt;  AUTO_RESIZE_OFF: Don&apos;t automatically adjust the column&apos;s
                  widths at all. Use a horizontal scrollbar to accomodate the
                  columns when their sum exceeds the width of the
                  &lt;code&gt;Viewport&lt;/code&gt;.  If the &lt;code&gt;JTable&lt;/code&gt; is not
                  enclosed in a &lt;code&gt;JScrollPane&lt;/code&gt; this may
                  leave parts of the table invisible.
                  &lt;li&gt;  AUTO_RESIZE_NEXT_COLUMN: Use just the column after the
                  resizing column. This results in the &quot;boundary&quot; or divider
                  between adjacent cells being independently adjustable.
                  &lt;li&gt;  AUTO_RESIZE_SUBSEQUENT_COLUMNS: Use all columns after the
                  one being adjusted to absorb the changes.  This is the
                  default behavior.
                  &lt;li&gt;  AUTO_RESIZE_LAST_COLUMN: Automatically adjust the
                  size of the last column only. If the bounds of the last column
                  prevent the desired size from being allocated, set the
                  width of the last column to the appropriate limit and make
                  no further adjustments.
                  &lt;li&gt;  AUTO_RESIZE_ALL_COLUMNS: Spread the delta amongst all the columns
                  in the &lt;code&gt;JTable&lt;/code&gt;, including the one that is being
                  adjusted.
                  &lt;/ul&gt;
                  &lt;p&gt;
                  &lt;bold&gt;Note:&lt;/bold&gt; When a &lt;code&gt;JTable&lt;/code&gt; makes adjustments
                  to the widths of the columns it respects their minimum and
                  maximum values absolutely.  It is therefore possible that,
                  even after this method is called, the total width of the columns
                  is still not equal to the width of the table. When this happens
                  the &lt;code&gt;JTable&lt;/code&gt; does not put itself
                  in AUTO_RESIZE_OFF mode to bring up a scroll bar, or break other
                  commitments of its current auto-resize mode -- instead it
                  allows its bounds to be set larger (or smaller) than the total of the
                  column minimum or maximum, meaning, either that there
                  will not be enough room to display all of the columns, or that the
                  columns will not fill the &lt;code&gt;JTable&lt;/code&gt;&apos;s bounds.
                  These respectively, result in the clipping of some columns
                  or an area being painted in the &lt;code&gt;JTable&lt;/code&gt;&apos;s
                  background color during painting.
                  &lt;p&gt;
                  The mechanism for distributing the delta amongst the available
                  columns is provided in a private method in the &lt;code&gt;JTable&lt;/code&gt;
                  class:
                  &lt;pre&gt;
                  adjustSizes(long targetSize, final Resizable3 r, boolean inverse)
                  &lt;/pre&gt;
                  an explanation of which is provided in the following section.
                  &lt;code&gt;Resizable3&lt;/code&gt; is a private
                  interface that allows any data structure containing a collection
                  of elements with a size, preferred size, maximum size and minimum size
                  to have its elements manipulated by the algorithm.
                  &lt;p&gt;
                  &lt;H3&gt; Distributing the delta &lt;/H3&gt;
                  &lt;p&gt;
                  &lt;H4&gt; Overview &lt;/H4&gt;
                  &lt;P&gt;
                  Call &quot;DELTA&quot; the difference between the target size and the
                  sum of the preferred sizes of the elements in r. The individual
                  sizes are calculated by taking the original preferred
                  sizes and adding a share of the DELTA - that share being based on
                  how far each preferred size is from its limiting bound (minimum or
                  maximum).
                  &lt;p&gt;
                  &lt;H4&gt;Definition&lt;/H4&gt;
                  &lt;P&gt;
                  Call the individual constraints min[i], max[i], and pref[i].
                  &lt;p&gt;
                  Call their respective sums: MIN, MAX, and PREF.
                  &lt;p&gt;
                  Each new size will be calculated using:
                  &lt;p&gt;
                  &lt;pre&gt;
                  size[i] = pref[i] + delta[i]
                  &lt;/pre&gt;
                  where each individual delta[i] is calculated according to:
                  &lt;p&gt;
                  If (DELTA &lt; 0) we are in shrink mode where:
                  &lt;p&gt;
                  &lt;PRE&gt;
                  DELTA
                  delta[i] = ------------  (pref[i] - min[i])
                  (PREF - MIN)
                  &lt;/PRE&gt;
                  If (DELTA &gt; 0) we are in expand mode where:
                  &lt;p&gt;
                  &lt;PRE&gt;
                  DELTA
                  delta[i] = ------------  (max[i] - pref[i])
                  (MAX - PREF)
                  &lt;/PRE&gt;
                  &lt;P&gt;
                  The overall effect is that the total size moves that same percentage,
                  k, towards the total minimum or maximum and that percentage guarantees
                  accomodation of the required space, DELTA.
                  &lt;H4&gt;Details&lt;/H4&gt;
                  &lt;P&gt;
                  Naive evaluation of the formulae presented here would be subject to
                  the aggregated rounding errors caused by doing this operation in finite
                  precision (using ints). To deal with this, the multiplying factor above,
                  is constantly recalculated and this takes account of the rounding
                  errors in the previous iterations. The result is an algorithm that
                  produces a set of integers whose values exactly sum to the supplied
                  &lt;code&gt;targetSize&lt;/code&gt;, and does so by spreading the rounding
                  errors evenly over the given elements.
                  &lt;H4&gt;When the MAX and MIN bounds are hit&lt;/H4&gt;
                  &lt;P&gt;
                  When &lt;code&gt;targetSize&lt;/code&gt; is outside the [MIN, MAX] range,
                  the algorithm sets all sizes to their appropriate limiting value
                  (maximum or minimum).                
            </javadoc>
            <method name="doLayout" type="void" line="3128">
                <comment line="3135">
                    JTable behaves like a layout manger - but one in which the
                     user can come along and dictate how big one of the children
                     (columns) is supposed to be.                    
                </comment>
                <comment line="3139">
                    A column has been resized and JTable may need to distribute
                     any overall delta to other columns, according to the resize mode.                    
                </comment>
                <comment line="3146">
                    If the delta cannot be completely accomodated, then the
                     resizing column will have to take any remainder. This means
                     that the column is not being allowed to take the requested
                     width. This happens under many circumstances: For example,
                     AUTO_RESIZE_NEXT_COLUMN specifies that any delta be distributed
                     to the column after the resizing column. If one were to attempt
                     to resize the last column of the table, there would be no
                     columns after it, and hence nowhere to distribute the delta.
                     It would then be given entirely back to the resizing column,
                     preventing it from changing size.                    
                </comment>
                <comment line="3160">
                    At this point the JTable has to work out what preferred sizes
                     would have resulted in the layout the user has chosen.
                     Thereafter, during window resizing etc. it has to work off
                     the preferred sizes as usual - the idea being that, whatever
                     the user does, everything stays in synch and things don&apos;t jump
                     around.                    
                </comment>
                <declaration name="resizingColumn" type="TableColumn" line="3129"/>
                <scope line="3130"/>
                <scope line="3133">
                    <declaration name="columnIndex" type="int" line="3140"/>
                    <declaration name="delta" type="int" line="3141"/>
                    <scope line="3155"/>
                </scope>
            </method>
            <method name="getResizingColumn" type="TableColumn" line="3171"/>
            <javadoc line="3176">
                Sizes the table columns to fit the available space.                
                <deprecated>
                    As of Swing version 1.0.3,
                      replaced by <code>doLayout()</code>.                    
                </deprecated>
                <see>
                    #doLayout                    
                </see>
            </javadoc>
            <method name="sizeColumnsToFit" type="void" line="3183">
                <params>
                    <param name="lastColumnOnly" type="boolean"/>
                </params>
                <declaration name="oldAutoResizeMode" type="int" line="3184"/>
            </method>
            <javadoc line="3191">
                Obsolete as of Java 2 platform v1.4.  Please use the
                  &lt;code&gt;doLayout()&lt;/code&gt; method instead.                
                <param>
                    resizingColumn    the column whose resizing made this adjustment
                      necessary or -1 if there is no such column                    
                </param>
                <see>
                    #doLayout                    
                </see>
            </javadoc>
            <method name="sizeColumnsToFit" type="void" line="3198">
                <params>
                    <param name="resizingColumn" type="int"/>
                </params>
                <scope line="3199"/>
                <scope line="3202">
                    <scope line="3203">
                        <declaration name="aColumn" type="TableColumn" line="3204"/>
                    </scope>
                    <scope line="3207">
                        <declaration name="delta" type="int" line="3208"/>
                    </scope>
                </scope>
            </method>
            <method name="setWidthsFromPreferredWidths" type="void" line="3215">
                <params>
                    <param name="inverse" type="boolean"/>
                </params>
                <declaration name="totalWidth" type="int" line="3216"/>
                <declaration name="totalPreferred" type="int" line="3217"/>
                <declaration name="target" type="int" line="3218"/>
                <declaration name="cm" type="TableColumnModel" line="3220"/>
                <anonymous_class line="3221">
                    <method name="getElementCount" type="int" line="3222"/>
                    <method name="getLowerBoundAt" type="int" line="3223">
                        <params>
                            <param name="i" type="int"/>
                        </params>
                    </method>
                    <method name="getUpperBoundAt" type="int" line="3224">
                        <params>
                            <param name="i" type="int"/>
                        </params>
                    </method>
                    <method name="getMidPointAt" type="int" line="3225">
                        <params>
                            <param name="i" type="int"/>
                        </params>
                        <scope line="3226"/>
                        <scope line="3229"/>
                    </method>
                    <method name="setSizeAt" type="void" line="3233">
                        <params>
                            <param name="s" type="int"/>
                            <param name="i" type="int"/>
                        </params>
                        <scope line="3234"/>
                        <scope line="3237"/>
                    </method>
                </anonymous_class>
                <declaration name="r" type="Resizable3" line="3221"/>
            </method>
            <method name="accommodateDelta" type="void" line="3248">
                <params>
                    <param name="resizingColumnIndex" type="int"/>
                    <param name="delta" type="int"/>
                </params>
                <comment line="3254">
                    Use the mode to determine how to absorb the changes.                    
                </comment>
                <declaration name="columnCount" type="int" line="3249"/>
                <declaration name="from" type="int" line="3250"/>
                <declaration name="to" type="int" line="3251"/>
                <declaration name="start" type="int" line="3271"/>
                <declaration name="end" type="int" line="3272"/>
                <declaration name="cm" type="TableColumnModel" line="3273"/>
                <anonymous_class line="3274">
                    <method name="getElementCount" type="int" line="3275"/>
                    <method name="getLowerBoundAt" type="int" line="3276">
                        <params>
                            <param name="i" type="int"/>
                        </params>
                    </method>
                    <method name="getUpperBoundAt" type="int" line="3277">
                        <params>
                            <param name="i" type="int"/>
                        </params>
                    </method>
                    <method name="getMidPointAt" type="int" line="3278">
                        <params>
                            <param name="i" type="int"/>
                        </params>
                    </method>
                    <method name="setSizeAt" type="void" line="3279">
                        <params>
                            <param name="s" type="int"/>
                            <param name="i" type="int"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="r" type="Resizable3" line="3274"/>
                <declaration name="totalWidth" type="int" line="3282"/>
                <scope line="3283">
                    <declaration name="aColumn" type="TableColumn" line="3284"/>
                    <declaration name="input" type="int" line="3285"/>
                </scope>
            </method>
            <interface name="Resizable2">
                <comment line="334">
                    If true, both a row selection and a column selection
                     can be non-empty at the same time, the selected cells are the
                     the cells whose row and column are both selected.                    
                </comment>
                <comment line="3837">
                    Selection, in terms of the model. This is lazily created
                     as needed.                    
                </comment>
                <comment line="3841">
                    Set to true while in the process of changing the selection.
                     If this is true the selection change is ignored.                    
                </comment>
                <comment line="3844">
                    Temporary cache of selection, in terms of model. This is only used
                     if we don&apos;t need the full weight of modelSelection.                    
                </comment>
                <comment line="3848">
                    Heights of the rows in terms of the model.                    
                </comment>
                <comment line="4066">
                    Starting index of the change, in terms of the model                    
                </comment>
                <comment line="4069">
                    Ending index of the change, in terms of the model                    
                </comment>
                <comment line="4072">
                    Type of change                    
                </comment>
                <comment line="4075">
                    Number of rows in the model                    
                </comment>
                <comment line="4078">
                    The event that triggered this.                    
                </comment>
                <comment line="4081">
                    Length of the change (end - start + 1)                    
                </comment>
                <comment line="4084">
                    True if the event indicates all the contents have changed                    
                </comment>
                <comment line="6610">
                    Listeners to track model, etc. changes to as to re-place the other
                     listeners                    
                </comment>
                <comment line="6691">
                    Listeners to echo changes to the AccessiblePropertyChange mechanism                    
                </comment>
                <comment line="6693">
                    Describes a change in the accessible table model.                    
                </comment>
                <comment line="6952">
                    AccessibleContext support                    
                </comment>
                <comment line="7047">
                    AccessibleSelection support                    
                </comment>
                <comment line="7290">
                    begin AccessibleExtendedTable implementation -------------                    
                </comment>
                <comment line="7329">
                    end of AccessibleExtendedTable implementation ------------                    
                </comment>
                <comment line="7331">
                    start of AccessibleTable implementation ------------------                    
                </comment>
                <comment line="7398">
                    Returns the total number of rows in this table.
                    
                     @return the total number of rows in this table                    
                </comment>
                <comment line="7407">
                    Returns the total number of columns in the table.
                    
                     @return the total number of columns in the table                    
                </comment>
                <comment line="7416">
                    Returns the &lt;code&gt;Accessible&lt;code&gt; at a specified row
                     and column in the table.
                    
                     @param r zero-based row of the table
                     @param c zero-based column of the table
                     @return the &lt;code&gt;Accessible&lt;code&gt; at the specified row and column
                     in the table                    
                </comment>
                <comment line="7489">
                    Private class representing a table column header                    
                </comment>
                <comment line="7904">
                    end of AccessibleTable implementation --------------------                    
                </comment>
                <comment line="8732">
                    inner class AccessibleJTableCell                    
                </comment>
                <comment line="8734">
                    Begin AccessibleJTableHeader ========== // TIGER - 4715503                    
                </comment>
                <comment line="9604">
                    inner class AccessibleJTableHeaderCell                    
                </comment>
                <method name="getElementCount" type="int" line="3293"/>
                <method name="getLowerBoundAt" type="int" line="3294"/>
                <method name="getUpperBoundAt" type="int" line="3295"/>
                <method name="setSizeAt" type="void" line="3296"/>
            </interface>
            <interface name="Resizable3">
                <implements interface="Resizable2"/>
                <comment line="334">
                    If true, both a row selection and a column selection
                     can be non-empty at the same time, the selected cells are the
                     the cells whose row and column are both selected.                    
                </comment>
                <comment line="3837">
                    Selection, in terms of the model. This is lazily created
                     as needed.                    
                </comment>
                <comment line="3841">
                    Set to true while in the process of changing the selection.
                     If this is true the selection change is ignored.                    
                </comment>
                <comment line="3844">
                    Temporary cache of selection, in terms of model. This is only used
                     if we don&apos;t need the full weight of modelSelection.                    
                </comment>
                <comment line="3848">
                    Heights of the rows in terms of the model.                    
                </comment>
                <comment line="4066">
                    Starting index of the change, in terms of the model                    
                </comment>
                <comment line="4069">
                    Ending index of the change, in terms of the model                    
                </comment>
                <comment line="4072">
                    Type of change                    
                </comment>
                <comment line="4075">
                    Number of rows in the model                    
                </comment>
                <comment line="4078">
                    The event that triggered this.                    
                </comment>
                <comment line="4081">
                    Length of the change (end - start + 1)                    
                </comment>
                <comment line="4084">
                    True if the event indicates all the contents have changed                    
                </comment>
                <comment line="6610">
                    Listeners to track model, etc. changes to as to re-place the other
                     listeners                    
                </comment>
                <comment line="6691">
                    Listeners to echo changes to the AccessiblePropertyChange mechanism                    
                </comment>
                <comment line="6693">
                    Describes a change in the accessible table model.                    
                </comment>
                <comment line="6952">
                    AccessibleContext support                    
                </comment>
                <comment line="7047">
                    AccessibleSelection support                    
                </comment>
                <comment line="7290">
                    begin AccessibleExtendedTable implementation -------------                    
                </comment>
                <comment line="7329">
                    end of AccessibleExtendedTable implementation ------------                    
                </comment>
                <comment line="7331">
                    start of AccessibleTable implementation ------------------                    
                </comment>
                <comment line="7398">
                    Returns the total number of rows in this table.
                    
                     @return the total number of rows in this table                    
                </comment>
                <comment line="7407">
                    Returns the total number of columns in the table.
                    
                     @return the total number of columns in the table                    
                </comment>
                <comment line="7416">
                    Returns the &lt;code&gt;Accessible&lt;code&gt; at a specified row
                     and column in the table.
                    
                     @param r zero-based row of the table
                     @param c zero-based column of the table
                     @return the &lt;code&gt;Accessible&lt;code&gt; at the specified row and column
                     in the table                    
                </comment>
                <comment line="7489">
                    Private class representing a table column header                    
                </comment>
                <comment line="7904">
                    end of AccessibleTable implementation --------------------                    
                </comment>
                <comment line="8732">
                    inner class AccessibleJTableCell                    
                </comment>
                <comment line="8734">
                    Begin AccessibleJTableHeader ========== // TIGER - 4715503                    
                </comment>
                <comment line="9604">
                    inner class AccessibleJTableHeaderCell                    
                </comment>
                <method name="getMidPointAt" type="int" line="3300"/>
            </interface>
            <method name="adjustSizes" type="void" line="3304">
                <params>
                    <param name="target" type="long"/>
                    <param name="r" type="Resizable3"/>
                    <param name="inverse" type="boolean"/>
                </params>
                <declaration name="N" type="int" line="3305"/>
                <declaration name="totalPreferred" type="long" line="3306"/>
                <scope line="3307"/>
                <declaration name="s" type="Resizable2" line="3310"/>
                <scope line="3311">
                    <anonymous_class line="3312">
                        <method name="getElementCount" type="int" line="3313"/>
                        <method name="getLowerBoundAt" type="int" line="3314">
                            <params>
                                <param name="i" type="int"/>
                            </params>
                        </method>
                        <method name="getUpperBoundAt" type="int" line="3315">
                            <params>
                                <param name="i" type="int"/>
                            </params>
                        </method>
                        <method name="setSizeAt" type="void" line="3316">
                            <params>
                                <param name="newSize" type="int"/>
                                <param name="i" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                </scope>
                <scope line="3320">
                    <anonymous_class line="3321">
                        <method name="getElementCount" type="int" line="3322"/>
                        <method name="getLowerBoundAt" type="int" line="3323">
                            <params>
                                <param name="i" type="int"/>
                            </params>
                        </method>
                        <method name="getUpperBoundAt" type="int" line="3324">
                            <params>
                                <param name="i" type="int"/>
                            </params>
                        </method>
                        <method name="setSizeAt" type="void" line="3325">
                            <params>
                                <param name="newSize" type="int"/>
                                <param name="i" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                </scope>
            </method>
            <method name="adjustSizes" type="void" line="3332">
                <params>
                    <param name="target" type="long"/>
                    <param name="r" type="Resizable2"/>
                    <param name="limitToRange" type="boolean"/>
                </params>
                <comment line="3348">
                    Check for zero. This happens when the distribution of the delta
                     finishes early due to a series of &quot;fixed&quot; entries at the end.
                     In this case, lowerBound == upperBound, for all subsequent terms.                    
                </comment>
                <comment line="3358">
                    We&apos;d need to round manually in an all integer version.
                     size[i] = (int)(((totalUpperBound - target) * lowerBound +
                         (target - totalLowerBound) * upperBound)/(totalUpperBound-totalLowerBound));                    
                </comment>
                <declaration name="totalLowerBound" type="long" line="3333"/>
                <declaration name="totalUpperBound" type="long" line="3334"/>
                <scope line="3335"/>
                <scope line="3340"/>
                <scope line="3344">
                    <declaration name="lowerBound" type="int" line="3345"/>
                    <declaration name="upperBound" type="int" line="3346"/>
                    <declaration name="newSize" type="int" line="3350"/>
                    <scope line="3351"/>
                    <scope line="3354">
                        <declaration name="f" type="double" line="3355"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="3368">
                Overrides &lt;code&gt;JComponent&lt;/code&gt;&apos;s &lt;code&gt;getToolTipText&lt;/code&gt;
                  method in order to allow the renderer&apos;s tips to be used
                  if it has text set.
                  &lt;p&gt;
                  &lt;bold&gt;Note:&lt;/bold&gt; For &lt;code&gt;JTable&lt;/code&gt; to properly display
                  tooltips of its renderers
                  &lt;code&gt;JTable&lt;/code&gt; must be a registered component with the
                  &lt;code&gt;ToolTipManager&lt;/code&gt;.
                  This is done automatically in &lt;code&gt;initializeLocalVars&lt;/code&gt;,
                  but if at a later point &lt;code&gt;JTable&lt;/code&gt; is told
                  &lt;code&gt;setToolTipText(null)&lt;/code&gt; it will unregister the table
                  component, and no tips from renderers will display anymore.                
                <see>
                    JComponent#getToolTipText                    
                </see>
            </javadoc>
            <method name="getToolTipText" type="String" line="3384">
                <params>
                    <param name="event" type="MouseEvent"/>
                </params>
                <comment line="3389">
                    Locate the renderer under the event location                    
                </comment>
                <comment line="3397">
                    Now have to see if the component is a JComponent before
                     getting the tip                    
                </comment>
                <comment line="3400">
                    Convert the event to the renderer&apos;s coordinate system                    
                </comment>
                <comment line="3416">
                    No tip from the renderer get our own tip                    
                </comment>
                <declaration name="tip" type="String" line="3385"/>
                <declaration name="p" type="Point" line="3386"/>
                <declaration name="hitColumnIndex" type="int" line="3389"/>
                <declaration name="hitRowIndex" type="int" line="3390"/>
                <scope line="3392">
                    <declaration name="renderer" type="TableCellRenderer" line="3393"/>
                    <declaration name="component" type="Component" line="3394"/>
                    <scope line="3398">
                        <declaration name="cellRect" type="Rectangle" line="3400"/>
                        <declaration name="newEvent" type="MouseEvent" line="3402"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="3426">
                Sets whether editors in this JTable get the keyboard focus
                  when an editor is activated as a result of the JTable
                  forwarding keyboard events for a cell.
                  By default, this property is false, and the JTable
                  retains the focus unless the cell is clicked.                
                <param>
                    surrendersFocusOnKeystroke true if the editor should get the focus
                      when keystrokes cause the editor to be
                      activated                    
                </param>
                <see>
                    #getSurrendersFocusOnKeystroke                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setSurrendersFocusOnKeystroke" type="void" line="3441">
                <params>
                    <param name="surrendersFocusOnKeystroke" type="boolean"/>
                </params>
            </method>
            <javadoc line="3445">
                Returns true if the editor should get the focus
                  when keystrokes cause the editor to be activated                
                <return>
                    true if the editor should get the focus
                      when keystrokes cause the editor to be
                      activated                    
                </return>
                <see>
                    #setSurrendersFocusOnKeystroke                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getSurrendersFocusOnKeystroke" type="boolean" line="3456"/>
            <javadoc line="3460">
                Programmatically starts editing the cell at &lt;code&gt;row&lt;/code&gt; and
                  &lt;code&gt;column&lt;/code&gt;, if those indices are in the valid range, and
                  the cell at those indices is editable.
                  Note that this is a convenience method for
                  &lt;code&gt;editCellAt(int, int, null)&lt;/code&gt;.                
                <param>
                    row                             the row to be edited                    
                </param>
                <param>
                    column                          the column to be edited                    
                </param>
                <return>
                    false if for any reason the cell cannot be edited,
                      or if the indices are invalid                    
                </return>
            </javadoc>
            <method name="editCellAt" type="boolean" line="3472">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
            </method>
            <javadoc line="3476">
                Programmatically starts editing the cell at &lt;code&gt;row&lt;/code&gt; and
                  &lt;code&gt;column&lt;/code&gt;, if those indices are in the valid range, and
                  the cell at those indices is editable.
                  To prevent the &lt;code&gt;JTable&lt;/code&gt; from
                  editing a particular table, column or cell value, return false from
                  the &lt;code&gt;isCellEditable&lt;/code&gt; method in the &lt;code&gt;TableModel&lt;/code&gt;
                  interface.                
                <param>
                    row     the row to be edited                    
                </param>
                <param>
                    column  the column to be edited                    
                </param>
                <param>
                    e       event to pass into <code>shouldSelectCell</code>;
                      note that as of Java 2 platform v1.2, the call to
                      <code>shouldSelectCell</code> is no longer made                    
                </param>
                <return>
                    false if for any reason the cell cannot be edited,
                      or if the indices are invalid                    
                </return>
            </javadoc>
            <method name="editCellAt" type="boolean" line="3493">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="e" type="EventObject"/>
                </params>
                <scope line="3494"/>
                <scope line="3499"/>
                <scope line="3506">
                    <declaration name="fm" type="KeyboardFocusManager" line="3507"/>
                </scope>
                <declaration name="editor" type="TableCellEditor" line="3513"/>
                <scope line="3514">
                    <scope line="3516"/>
                </scope>
            </method>
            <javadoc line="3535">
                Returns true if a cell is being edited.                
                <return>
                    true if the table is editing a cell                    
                </return>
                <see>
                    #editingColumn                    
                </see>
                <see>
                    #editingRow                    
                </see>
            </javadoc>
            <method name="isEditing" type="boolean" line="3542"/>
            <javadoc line="3546">
                Returns the component that is handling the editing session.
                  If nothing is being edited, returns null.                
                <return>
                    Component handling editing session                    
                </return>
            </javadoc>
            <method name="getEditorComponent" type="Component" line="3552"/>
            <javadoc line="3556">
                Returns the index of the column that contains the cell currently
                  being edited.  If nothing is being edited, returns -1.                
                <return>
                    the index of the column that contains the cell currently
                      being edited; returns -1 if nothing being edited                    
                </return>
                <see>
                    #editingRow                    
                </see>
            </javadoc>
            <method name="getEditingColumn" type="int" line="3564"/>
            <javadoc line="3568">
                Returns the index of the row that contains the cell currently
                  being edited.  If nothing is being edited, returns -1.                
                <return>
                    the index of the row that contains the cell currently
                      being edited; returns -1 if nothing being edited                    
                </return>
                <see>
                    #editingColumn                    
                </see>
            </javadoc>
            <method name="getEditingRow" type="int" line="3576"/>
            <javadoc line="3584">
                Returns the L&amp;F object that renders this component.                
                <return>
                    the <code>TableUI</code> object that renders this component                    
                </return>
            </javadoc>
            <method name="getUI" type="TableUI" line="3589"/>
            <javadoc line="3593">
                Sets the L&amp;F object that renders this component and repaints.                
                <param>
                    ui  the TableUI L&F object                    
                </param>
                <see>
                    UIDefaults#getUI                    
                </see>
                <beaninfo>
                    bound: true
                      hidden: true
                      attribute: visualUpdate true
                      description: The UI object that implements the Component's LookAndFeel.                    
                </beaninfo>
            </javadoc>
            <method name="setUI" type="void" line="3604">
                <params>
                    <param name="ui" type="TableUI"/>
                </params>
                <scope line="3605"/>
            </method>
            <javadoc line="3611">
                Notification from the &lt;code&gt;UIManager&lt;/code&gt; that the L&amp;F has changed.
                  Replaces the current UI object with the latest version from the
                  &lt;code&gt;UIManager&lt;/code&gt;.                
                <see>
                    JComponent#updateUI                    
                </see>
            </javadoc>
            <method name="updateUI" type="void" line="3618">
                <comment line="3620">
                    Update the UIs of the cell renderers, cell editors and header renderers.                    
                </comment>
                <comment line="3629">
                    Update the UIs of all the default renderers.                    
                </comment>
                <comment line="3635">
                    Update the UIs of all the default editors.                    
                </comment>
                <comment line="3641">
                    Update the UI of the table header                    
                </comment>
                <comment line="3646">
                    Update UI applied to parent ScrollPane                    
                </comment>
                <declaration name="cm" type="TableColumnModel" line="3620"/>
                <scope line="3621">
                    <declaration name="aColumn" type="TableColumn" line="3622"/>
                </scope>
                <declaration name="defaultRenderers" type="Enumeration" line="3629"/>
                <scope line="3630"/>
                <declaration name="defaultEditors" type="Enumeration" line="3635"/>
                <scope line="3636"/>
                <scope line="3641"/>
            </method>
            <javadoc line="3651">
                Returns the suffix used to construct the name of the L&amp;F class used to
                  render this component.                
                <return>
                    the string "TableUI"                    
                </return>
                <see>
                    JComponent#getUIClassID                    
                </see>
                <see>
                    UIDefaults#getUI                    
                </see>
            </javadoc>
            <method name="getUIClassID" type="String" line="3659"/>
            <javadoc line="3668">
                Sets the data model for this table to &lt;code&gt;newModel&lt;/code&gt; and registers
                  with it for listener notifications from the new data model.                
                <param>
                    dataModel        the new data source for this table                    
                </param>
                <exception>
                    IllegalArgumentException      if <code>newModel</code> is <code>null</code>                    
                </exception>
                <see>
                    #getModel                    
                </see>
                <beaninfo>
                    bound: true
                      description: The model that is the source of the data for this view.                    
                </beaninfo>
            </javadoc>
            <method name="setModel" type="void" line="3679">
                <params>
                    <param name="dataModel" type="TableModel"/>
                </params>
                <scope line="3680"/>
                <scope line="3683">
                    <declaration name="old" type="TableModel" line="3684"/>
                    <scope line="3685"/>
                    <scope line="3695"/>
                </scope>
            </method>
            <javadoc line="3701">
                Returns the &lt;code&gt;TableModel&lt;/code&gt; that provides the data displayed by this
                  &lt;code&gt;JTable&lt;/code&gt;.                
                <return>
                    the <code>TableModel</code> that provides the data displayed by this <code>JTable</code>                    
                </return>
                <see>
                    #setModel                    
                </see>
            </javadoc>
            <method name="getModel" type="TableModel" line="3708"/>
            <javadoc line="3712">
                Sets the column model for this table to &lt;code&gt;newModel&lt;/code&gt; and registers
                  for listener notifications from the new column model. Also sets
                  the column model of the &lt;code&gt;JTableHeader&lt;/code&gt; to &lt;code&gt;columnModel&lt;/code&gt;.                
                <param>
                    columnModel        the new data source for this table                    
                </param>
                <exception>
                    IllegalArgumentException      if <code>columnModel</code> is <code>null</code>                    
                </exception>
                <see>
                    #getColumnModel                    
                </see>
                <beaninfo>
                    bound: true
                      description: The object governing the way columns appear in the view.                    
                </beaninfo>
            </javadoc>
            <method name="setColumnModel" type="void" line="3724">
                <params>
                    <param name="columnModel" type="TableColumnModel"/>
                </params>
                <comment line="3737">
                    Set the column model of the header as well.                    
                </comment>
                <scope line="3725"/>
                <declaration name="old" type="TableColumnModel" line="3728"/>
                <scope line="3729">
                    <scope line="3730"/>
                    <scope line="3737"/>
                </scope>
            </method>
            <javadoc line="3746">
                Returns the &lt;code&gt;TableColumnModel&lt;/code&gt; that contains all column information
                  of this table.                
                <return>
                    the object that provides the column state of the table                    
                </return>
                <see>
                    #setColumnModel                    
                </see>
            </javadoc>
            <method name="getColumnModel" type="TableColumnModel" line="3753"/>
            <javadoc line="3757">
                Sets the row selection model for this table to &lt;code&gt;newModel&lt;/code&gt;
                  and registers for listener notifications from the new selection model.                
                <param>
                    newModel        the new selection model                    
                </param>
                <exception>
                    IllegalArgumentException      if <code>newModel</code> is <code>null</code>                    
                </exception>
                <see>
                    #getSelectionModel                    
                </see>
                <beaninfo>
                    bound: true
                      description: The selection model for rows.                    
                </beaninfo>
            </javadoc>
            <method name="setSelectionModel" type="void" line="3768">
                <params>
                    <param name="newModel" type="ListSelectionModel"/>
                </params>
                <scope line="3769"/>
                <declaration name="oldModel" type="ListSelectionModel" line="3773"/>
                <scope line="3775">
                    <scope line="3776"/>
                </scope>
            </method>
            <javadoc line="3788">
                Returns the &lt;code&gt;ListSelectionModel&lt;/code&gt; that is used to maintain row
                  selection state.                
                <return>
                    the object that provides row selection state, <code>null</code>
                      if row selection is not allowed                    
                </return>
                <see>
                    #setSelectionModel                    
                </see>
            </javadoc>
            <method name="getSelectionModel" type="ListSelectionModel" line="3796"/>
            <javadoc line="3804">
                &lt;code&gt;RowSorterListener&lt;/code&gt; notification that the
                  &lt;code&gt;RowSorter&lt;/code&gt; has changed in some way.                
                <param>
                    e the <code>RowSorterEvent</code> describing the change                    
                </param>
                <throws>
                    NullPointerException if <code>e</code> is <code>null</code>                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="sorterChanged" type="void" line="3812">
                <params>
                    <param name="e" type="RowSorterEvent"/>
                </params>
                <scope line="3813">
                    <declaration name="header" type="JTableHeader" line="3814"/>
                    <scope line="3815"/>
                </scope>
                <scope line="3819">
                    <scope line="3821"/>
                </scope>
            </method>
            <class name="SortManager" line="3828">
                <comment line="334">
                    If true, both a row selection and a column selection
                     can be non-empty at the same time, the selected cells are the
                     the cells whose row and column are both selected.                    
                </comment>
                <comment line="3837">
                    Selection, in terms of the model. This is lazily created
                     as needed.                    
                </comment>
                <comment line="3841">
                    Set to true while in the process of changing the selection.
                     If this is true the selection change is ignored.                    
                </comment>
                <comment line="3844">
                    Temporary cache of selection, in terms of model. This is only used
                     if we don&apos;t need the full weight of modelSelection.                    
                </comment>
                <comment line="3848">
                    Heights of the rows in terms of the model.                    
                </comment>
                <comment line="4066">
                    Starting index of the change, in terms of the model                    
                </comment>
                <comment line="4069">
                    Ending index of the change, in terms of the model                    
                </comment>
                <comment line="4072">
                    Type of change                    
                </comment>
                <comment line="4075">
                    Number of rows in the model                    
                </comment>
                <comment line="4078">
                    The event that triggered this.                    
                </comment>
                <comment line="4081">
                    Length of the change (end - start + 1)                    
                </comment>
                <comment line="4084">
                    True if the event indicates all the contents have changed                    
                </comment>
                <comment line="6610">
                    Listeners to track model, etc. changes to as to re-place the other
                     listeners                    
                </comment>
                <comment line="6691">
                    Listeners to echo changes to the AccessiblePropertyChange mechanism                    
                </comment>
                <comment line="6693">
                    Describes a change in the accessible table model.                    
                </comment>
                <comment line="6952">
                    AccessibleContext support                    
                </comment>
                <comment line="7047">
                    AccessibleSelection support                    
                </comment>
                <comment line="7290">
                    begin AccessibleExtendedTable implementation -------------                    
                </comment>
                <comment line="7329">
                    end of AccessibleExtendedTable implementation ------------                    
                </comment>
                <comment line="7331">
                    start of AccessibleTable implementation ------------------                    
                </comment>
                <comment line="7398">
                    Returns the total number of rows in this table.
                    
                     @return the total number of rows in this table                    
                </comment>
                <comment line="7407">
                    Returns the total number of columns in the table.
                    
                     @return the total number of columns in the table                    
                </comment>
                <comment line="7416">
                    Returns the &lt;code&gt;Accessible&lt;code&gt; at a specified row
                     and column in the table.
                    
                     @param r zero-based row of the table
                     @param c zero-based column of the table
                     @return the &lt;code&gt;Accessible&lt;code&gt; at the specified row and column
                     in the table                    
                </comment>
                <comment line="7489">
                    Private class representing a table column header                    
                </comment>
                <comment line="7904">
                    end of AccessibleTable implementation --------------------                    
                </comment>
                <comment line="8732">
                    inner class AccessibleJTableCell                    
                </comment>
                <comment line="8734">
                    Begin AccessibleJTableHeader ========== // TIGER - 4715503                    
                </comment>
                <comment line="9604">
                    inner class AccessibleJTableHeaderCell                    
                </comment>
                <javadoc line="3828">
                    SortManager provides support for managing the selection and variable
                      row heights when sorting is enabled. This information is encapsulated
                      into a class to avoid bulking up JTable.                    
                </javadoc>
                <declaration name="sorter" type="RowSorter&lt;? extends TableModel&gt;" line="3834"/>
                <declaration name="modelSelection" type="ListSelectionModel" line="3838"/>
                <declaration name="modelLeadIndex" type="int" line="3839"/>
                <declaration name="syncingSelection" type="boolean" line="3842"/>
                <declaration name="lastModelSelection" type="int[]" line="3845"/>
                <declaration name="modelRowSizes" type="SizeSequence" line="3848"/>
                <method name="SortManager" type="constructor" line="3851">
                    <params>
                        <param name="sorter" type="RowSorter<? extends TableModel>"/>
                    </params>
                </method>
                <javadoc line="3856">
                    Disposes any resources used by this SortManager.                    
                </javadoc>
                <method name="dispose" type="void" line="3859">
                    <scope line="3860"/>
                </method>
                <javadoc line="3865">
                    Sets the height for a row at a specified index.                    
                </javadoc>
                <method name="setViewRowHeight" type="void" line="3868">
                    <params>
                        <param name="viewIndex" type="int"/>
                        <param name="rowHeight" type="int"/>
                    </params>
                    <scope line="3869"/>
                </method>
                <javadoc line="3876">
                    Invoked when the underlying model has completely changed.                    
                </javadoc>
                <method name="allChanged" type="void" line="3879"/>
                <javadoc line="3885">
                    Invoked when the selection, on the view, has changed.                    
                </javadoc>
                <method name="viewSelectionChanged" type="void" line="3888">
                    <params>
                        <param name="e" type="ListSelectionEvent"/>
                    </params>
                    <scope line="3889"/>
                </method>
                <javadoc line="3894">
                    Invoked when either the table model has changed, or the RowSorter
                      has changed. This is invoked prior to notifying the sorter of the
                      change.                    
                </javadoc>
                <method name="prepareForChange" type="void" line="3900">
                    <params>
                        <param name="sortEvent" type="RowSorterEvent"/>
                        <param name="change" type="ModelChange"/>
                    </params>
                    <scope line="3901"/>
                </method>
                <javadoc line="3906">
                    Updates the internal cache of the selection based on the change.                    
                </javadoc>
                <method name="cacheSelection" type="void" line="3910">
                    <params>
                        <param name="sortEvent" type="RowSorterEvent"/>
                        <param name="change" type="ModelChange"/>
                    </params>
                    <comment line="3913">
                        sort order changed. If modelSelection is null and filtering
                         is enabled we need to cache the selection in terms of the
                         underlying model, this will allow us to correctly restore
                         the selection even if rows are filtered out.                        
                    </comment>
                    <comment line="3939">
                        Sorting changed, haven&apos;t cached selection in terms
                         of model and no filtering. Temporarily cache selection.                        
                    </comment>
                    <comment line="3944">
                        All the rows have changed, chuck any cached selection.                        
                    </comment>
                    <comment line="3947">
                        Table changed, reflect changes in cached selection model.                        
                    </comment>
                    <comment line="3962">
                        table changed, but haven&apos;t cached rows, temporarily
                         cache them.                        
                    </comment>
                    <scope line="3911">
                        <scope line="3917">
                            <declaration name="viewSelection" type="ListSelectionModel" line="3919"/>
                            <declaration name="min" type="int" line="3920"/>
                            <declaration name="max" type="int" line="3921"/>
                            <declaration name="modelIndex" type="int" line="3922"/>
                            <scope line="3923">
                                <scope line="3924">
                                    <scope line="3927"/>
                                </scope>
                            </scope>
                        </scope>
                        <scope line="3937"/>
                    </scope>
                    <scope line="3942"/>
                    <scope line="3945"/>
                    <scope line="3960"/>
                </method>
                <method name="cacheModelSelection" type="void" line="3967">
                    <params>
                        <param name="sortEvent" type="RowSorterEvent"/>
                    </params>
                </method>
                <javadoc line="3973">
                    Inovked when either the table has changed or the sorter has changed
                      and after the sorter has been notified. If necessary this will
                      reapply the selection and variable row heights.                    
                </javadoc>
                <method name="processChange" type="void" line="3980">
                    <params>
                        <param name="sortEvent" type="RowSorterEvent"/>
                        <param name="change" type="ModelChange"/>
                        <param name="sorterChanged" type="boolean"/>
                    </params>
                    <scope line="3981">
                        <scope line="3982"/>
                        <scope line="3985">
                            <scope line="3986"/>
                            <scope line="3991"/>
                        </scope>
                    </scope>
                    <scope line="3998"/>
                </method>
                <javadoc line="4004">
                    Resets the variable row heights in terms of the view from
                      that of the variable row heights in terms of the model.                    
                </javadoc>
                <method name="setViewRowHeightsFromModel" type="void" line="4008">
                    <scope line="4009">
                        <scope line="4012">
                            <declaration name="modelIndex" type="int" line="4013"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="4020">
                    Restores the selection from that in terms of the model.                    
                </javadoc>
                <method name="restoreSelection" type="void" line="4023">
                    <params>
                        <param name="change" type="ModelChange"/>
                    </params>
                    <comment line="4046">
                        Restore the lead                        
                    </comment>
                    <scope line="4025"/>
                    <scope line="4029">
                        <declaration name="viewSelection" type="ListSelectionModel" line="4030"/>
                        <declaration name="min" type="int" line="4033"/>
                        <declaration name="max" type="int" line="4034"/>
                        <declaration name="viewIndex" type="int" line="4035"/>
                        <scope line="4036">
                            <scope line="4037">
                                <scope line="4039"/>
                            </scope>
                        </scope>
                        <declaration name="viewLeadIndex" type="int" line="4046"/>
                        <scope line="4047"/>
                    </scope>
                </method>
            </class>
            <class name="ModelChange" line="4059">
                <comment line="334">
                    If true, both a row selection and a column selection
                     can be non-empty at the same time, the selected cells are the
                     the cells whose row and column are both selected.                    
                </comment>
                <comment line="3837">
                    Selection, in terms of the model. This is lazily created
                     as needed.                    
                </comment>
                <comment line="3841">
                    Set to true while in the process of changing the selection.
                     If this is true the selection change is ignored.                    
                </comment>
                <comment line="3844">
                    Temporary cache of selection, in terms of model. This is only used
                     if we don&apos;t need the full weight of modelSelection.                    
                </comment>
                <comment line="3848">
                    Heights of the rows in terms of the model.                    
                </comment>
                <comment line="4066">
                    Starting index of the change, in terms of the model                    
                </comment>
                <comment line="4069">
                    Ending index of the change, in terms of the model                    
                </comment>
                <comment line="4072">
                    Type of change                    
                </comment>
                <comment line="4075">
                    Number of rows in the model                    
                </comment>
                <comment line="4078">
                    The event that triggered this.                    
                </comment>
                <comment line="4081">
                    Length of the change (end - start + 1)                    
                </comment>
                <comment line="4084">
                    True if the event indicates all the contents have changed                    
                </comment>
                <comment line="6610">
                    Listeners to track model, etc. changes to as to re-place the other
                     listeners                    
                </comment>
                <comment line="6691">
                    Listeners to echo changes to the AccessiblePropertyChange mechanism                    
                </comment>
                <comment line="6693">
                    Describes a change in the accessible table model.                    
                </comment>
                <comment line="6952">
                    AccessibleContext support                    
                </comment>
                <comment line="7047">
                    AccessibleSelection support                    
                </comment>
                <comment line="7290">
                    begin AccessibleExtendedTable implementation -------------                    
                </comment>
                <comment line="7329">
                    end of AccessibleExtendedTable implementation ------------                    
                </comment>
                <comment line="7331">
                    start of AccessibleTable implementation ------------------                    
                </comment>
                <comment line="7398">
                    Returns the total number of rows in this table.
                    
                     @return the total number of rows in this table                    
                </comment>
                <comment line="7407">
                    Returns the total number of columns in the table.
                    
                     @return the total number of columns in the table                    
                </comment>
                <comment line="7416">
                    Returns the &lt;code&gt;Accessible&lt;code&gt; at a specified row
                     and column in the table.
                    
                     @param r zero-based row of the table
                     @param c zero-based column of the table
                     @return the &lt;code&gt;Accessible&lt;code&gt; at the specified row and column
                     in the table                    
                </comment>
                <comment line="7489">
                    Private class representing a table column header                    
                </comment>
                <comment line="7904">
                    end of AccessibleTable implementation --------------------                    
                </comment>
                <comment line="8732">
                    inner class AccessibleJTableCell                    
                </comment>
                <comment line="8734">
                    Begin AccessibleJTableHeader ========== // TIGER - 4715503                    
                </comment>
                <comment line="9604">
                    inner class AccessibleJTableHeaderCell                    
                </comment>
                <javadoc line="4059">
                    ModelChange is used when sorting to restore state, it corresponds
                      to data from a TableModelEvent.  The values are precalculated as
                      they are used extensively.                    
                </javadoc>
                <declaration name="startModelIndex" type="int" line="4066"/>
                <declaration name="endModelIndex" type="int" line="4069"/>
                <declaration name="type" type="int" line="4072"/>
                <declaration name="modelRowCount" type="int" line="4075"/>
                <declaration name="event" type="TableModelEvent" line="4078"/>
                <declaration name="length" type="int" line="4081"/>
                <declaration name="allRowsChanged" type="boolean" line="4084"/>
                <method name="ModelChange" type="constructor" line="4086">
                    <params>
                        <param name="e" type="TableModelEvent"/>
                    </params>
                    <scope line="4090"/>
                </method>
            </class>
            <javadoc line="4100">
                Invoked when &lt;code&gt;sorterChanged&lt;/code&gt; is invoked, or
                  when &lt;code&gt;tableChanged&lt;/code&gt; is invoked and sorting is enabled.                
            </javadoc>
            <method name="sortedTableChanged" type="void" line="4105">
                <params>
                    <param name="sortedEvent" type="RowSorterEvent"/>
                    <param name="e" type="TableModelEvent"/>
                </params>
                <comment line="4124">
                    If the Sorter is unsorted we will not have received
                     notification, force treating insert/delete as a change.                    
                </comment>
                <comment line="4136">
                    Update the editing row                    
                </comment>
                <comment line="4143">
                    And handle the appropriate repainting.                    
                </comment>
                <comment line="4149">
                    Check if lead/anchor need to be reset.                    
                </comment>
                <declaration name="editingModelIndex" type="int" line="4106"/>
                <declaration name="change" type="ModelChange" line="4107"/>
                <scope line="4110"/>
                <scope line="4117">
                    <scope line="4118"/>
                    <scope line="4122"/>
                </scope>
                <scope line="4128"/>
                <scope line="4134">
                    <scope line="4136">
                        <declaration name="newIndex" type="int" line="4137"/>
                    </scope>
                    <scope line="4143"/>
                </scope>
                <scope line="4149"/>
            </method>
            <javadoc line="4155">
                Repaints the sort of sorted rows in response to a TableModelEvent.                
            </javadoc>
            <method name="repaintSortedRows" type="void" line="4158">
                <params>
                    <param name="change" type="ModelChange"/>
                </params>
                <comment line="4162">
                    Too much has changed, punt                    
                </comment>
                <scope line="4160"/>
                <declaration name="eventColumn" type="int" line="4165"/>
                <declaration name="columnViewIndex" type="int" line="4166"/>
                <scope line="4167"/>
                <scope line="4170">
                    <scope line="4172"/>
                </scope>
                <declaration name="modelIndex" type="int" line="4176"/>
                <scope line="4177">
                    <declaration name="viewIndex" type="int" line="4178"/>
                    <scope line="4179">
                        <declaration name="dirty" type="Rectangle" line="4180"/>
                        <declaration name="x" type="int" line="4182"/>
                        <declaration name="w" type="int" line="4183"/>
                        <scope line="4184"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="4193">
                Restores the selection after a model event/sort order changes.
                  All coordinates are in terms of the model.                
            </javadoc>
            <method name="restoreSortingSelection" type="void" line="4198">
                <params>
                    <param name="selection" type="int[]"/>
                    <param name="lead" type="int"/>
                    <param name="change" type="ModelChange"/>
                </params>
                <comment line="4200">
                    Convert the selection from model to view                    
                </comment>
                <comment line="4206">
                    Check for the common case of no change in selection for 1 row                    
                </comment>
                <comment line="4212">
                    And apply the new selection                    
                </comment>
                <scope line="4200"/>
                <scope line="4207"/>
                <scope line="4214">
                    <scope line="4215"/>
                </scope>
            </method>
            <javadoc line="4225">
                Restores the editing row after a model event/sort order change.                
                <param>
                    editingRow new index of the editingRow, in terms of the view                    
                </param>
            </javadoc>
            <method name="restoreSortingEditingRow" type="void" line="4230">
                <params>
                    <param name="editingRow" type="int"/>
                </params>
                <comment line="4233">
                    Editing row no longer being shown, cancel editing                    
                </comment>
                <comment line="4236">
                    First try and cancel                    
                </comment>
                <comment line="4239">
                    CellEditor didn&apos;t cede control, forcefully
                     remove it                    
                </comment>
                <comment line="4246">
                    Repositioning handled in BasicTableUI                    
                </comment>
                <scope line="4231">
                    <declaration name="editor" type="TableCellEditor" line="4233"/>
                    <scope line="4234">
                        <scope line="4237"/>
                    </scope>
                </scope>
                <scope line="4244"/>
            </method>
            <javadoc line="4251">
                Notifies the sorter of a change in the underlying model.                
            </javadoc>
            <method name="notifySorter" type="void" line="4254">
                <params>
                    <param name="change" type="ModelChange"/>
                </params>
                <scope line="4255">
                    <scope line="4260"/>
                    <scope line="4263"/>
                    <scope line="4266"/>
                </scope>
                <scope line="4281"/>
            </method>
            <javadoc line="4286">
                Converts a model index to view index.  This is called when the
                  sorter or model changes and sorting is enabled.                
                <param>
                    change describes the TableModelEvent that initiated the change;
                      will be null if called as the result of a sort                    
                </param>
            </javadoc>
            <method name="convertRowIndexToView" type="int" line="4293">
                <params>
                    <param name="modelIndex" type="int"/>
                    <param name="change" type="ModelChange"/>
                </params>
                <comment line="4308">
                    deleted                    
                </comment>
                <comment line="4319">
                    else, updated                    
                </comment>
                <scope line="4294"/>
                <scope line="4297">
                    <scope line="4298">
                        <scope line="4299"/>
                    </scope>
                    <scope line="4305">
                        <scope line="4306"/>
                        <scope line="4310">
                            <scope line="4311"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="4320"/>
            </method>
            <javadoc line="4326">
                Converts the selection to model coordinates.  This is used when
                  the model changes or the sorter changes.                
            </javadoc>
            <method name="convertSelectionToModel" type="int[]" line="4330">
                <params>
                    <param name="e" type="RowSorterEvent"/>
                </params>
                <declaration name="selection" type="int[]" line="4331"/>
                <scope line="4332"/>
            </method>
            <method name="convertRowIndexToModel" type="int" line="4338">
                <params>
                    <param name="e" type="RowSorterEvent"/>
                    <param name="viewIndex" type="int"/>
                </params>
                <comment line="4344">
                    range checking handled by RowSorterEvent                    
                </comment>
                <comment line="4347">
                    Make sure the viewIndex is valid                    
                </comment>
                <scope line="4339">
                    <scope line="4340"/>
                </scope>
                <scope line="4347"/>
            </method>
            <javadoc line="4357">
                Invoked when this table&apos;s &lt;code&gt;TableModel&lt;/code&gt; generates
                  a &lt;code&gt;TableModelEvent&lt;/code&gt;.
                  The &lt;code&gt;TableModelEvent&lt;/code&gt; should be constructed in the
                  coordinate system of the model; the appropriate mapping to the
                  view coordinate system is performed by this &lt;code&gt;JTable&lt;/code&gt;
                  when it receives the event.
                  &lt;p&gt;
                  Application code will not use these methods explicitly, they
                  are used internally by &lt;code&gt;JTable&lt;/code&gt;.
                  &lt;p&gt;
                  Note that as of 1.3, this method clears the selection, if any.                
            </javadoc>
            <method name="tableChanged" type="void" line="4370">
                <params>
                    <param name="e" type="TableModelEvent"/>
                </params>
                <comment line="4373">
                    The whole thing changed                    
                </comment>
                <comment line="4389">
                    This will effect invalidation of the JTable and JTableHeader.                    
                </comment>
                <comment line="4403">
                    The totalRowHeight calculated below will be incorrect if
                     there are variable height rows. Repaint the visible region,
                     but don&apos;t return as a revalidate may be necessary as well.                    
                </comment>
                <comment line="4426">
                    1 or more rows changed                    
                </comment>
                <comment line="4431">
                    A cell or column of cells has changed.
                     Unlike the rest of the methods in the JTable, the TableModelEvent
                     uses the coordinate system of the model instead of the view.
                     This is the only place in the JTable where this &quot;reverse mapping&quot;
                     is used.                    
                </comment>
                <comment line="4440">
                    Now adjust the height of the dirty region according to the value of &quot;end&quot;.
                     Check for Integer.MAX_VALUE as this will cause an overflow.                    
                </comment>
                <comment line="4446">
                    In fact, if the end is Integer.MAX_VALUE we need to revalidate anyway
                     because the scrollbar may need repainting.                    
                </comment>
                <scope line="4371">
                    <scope line="4377">
                        <scope line="4378"/>
                        <scope line="4381"/>
                    </scope>
                    <scope line="4387"/>
                </scope>
                <scope line="4397"/>
                <scope line="4405"/>
                <scope line="4409"/>
                <scope line="4414"/>
                <declaration name="modelColumn" type="int" line="4419"/>
                <declaration name="start" type="int" line="4420"/>
                <declaration name="end" type="int" line="4421"/>
                <declaration name="dirtyRegion" type="Rectangle" line="4423"/>
                <scope line="4424"/>
                <scope line="4429">
                    <declaration name="column" type="int" line="4435"/>
                </scope>
                <scope line="4441"/>
                <scope line="4447"/>
            </method>
            <method name="tableRowsInserted" type="void" line="4462">
                <params>
                    <param name="e" type="TableModelEvent"/>
                </params>
                <comment line="4473">
                    Adjust the selection to account for the new rows.                    
                </comment>
                <comment line="4477">
                    If we have variable height rows, adjust the row model.                    
                </comment>
                <comment line="4487">
                    PENDING(milne) revalidate calls repaint() if parent is a ScrollPane
                     repaint still required in the unusual case where there is no ScrollPane                    
                </comment>
                <declaration name="start" type="int" line="4463"/>
                <declaration name="end" type="int" line="4464"/>
                <scope line="4465"/>
                <scope line="4468"/>
                <declaration name="length" type="int" line="4473"/>
                <scope line="4477"/>
                <declaration name="rh" type="int" line="4480"/>
                <declaration name="drawRect" type="Rectangle" line="4481"/>
            </method>
            <method name="tableRowsDeleted" type="void" line="4499">
                <params>
                    <param name="e" type="TableModelEvent"/>
                </params>
                <comment line="4512">
                    Adjust the selection to account for the new rows                    
                </comment>
                <comment line="4515">
                    If we have variable height rows, adjust the row model.                    
                </comment>
                <comment line="4526">
                    PENDING(milne) revalidate calls repaint() if parent is a ScrollPane
                     repaint still required in the unusual case where there is no ScrollPane                    
                </comment>
                <declaration name="start" type="int" line="4500"/>
                <declaration name="end" type="int" line="4501"/>
                <scope line="4502"/>
                <scope line="4505"/>
                <declaration name="deletedCount" type="int" line="4509"/>
                <declaration name="previousRowCount" type="int" line="4510"/>
                <scope line="4515"/>
                <declaration name="rh" type="int" line="4519"/>
                <declaration name="drawRect" type="Rectangle" line="4520"/>
            </method>
            <javadoc line="4534">
                Invoked when a column is added to the table column model.
                  &lt;p&gt;
                  Application code will not use these methods explicitly, they
                  are used internally by JTable.                
                <see>
                    TableColumnModelListener                    
                </see>
            </javadoc>
            <method name="columnAdded" type="void" line="4542">
                <params>
                    <param name="e" type="TableColumnModelEvent"/>
                </params>
                <comment line="4544">
                    If I&apos;m currently editing, then I should stop editing                    
                </comment>
                <scope line="4544"/>
            </method>
            <javadoc line="4550">
                Invoked when a column is removed from the table column model.
                  &lt;p&gt;
                  Application code will not use these methods explicitly, they
                  are used internally by JTable.                
                <see>
                    TableColumnModelListener                    
                </see>
            </javadoc>
            <method name="columnRemoved" type="void" line="4558">
                <params>
                    <param name="e" type="TableColumnModelEvent"/>
                </params>
                <comment line="4560">
                    If I&apos;m currently editing, then I should stop editing                    
                </comment>
                <scope line="4560"/>
            </method>
            <javadoc line="4566">
                Invoked when a column is repositioned. If a cell is being
                  edited, then editing is stopped and the cell is redrawn.
                  &lt;p&gt;
                  Application code will not use these methods explicitly, they
                  are used internally by JTable.                
                <param>
                    e   the event received                    
                </param>
                <see>
                    TableColumnModelListener                    
                </see>
            </javadoc>
            <method name="columnMoved" type="void" line="4576">
                <params>
                    <param name="e" type="TableColumnModelEvent"/>
                </params>
                <scope line="4577"/>
            </method>
            <javadoc line="4583">
                Invoked when a column is moved due to a margin change.
                  If a cell is being edited, then editing is stopped and the cell
                  is redrawn.
                  &lt;p&gt;
                  Application code will not use these methods explicitly, they
                  are used internally by JTable.                
                <param>
                    e    the event received                    
                </param>
                <see>
                    TableColumnModelListener                    
                </see>
            </javadoc>
            <method name="columnMarginChanged" type="void" line="4594">
                <params>
                    <param name="e" type="ChangeEvent"/>
                </params>
                <comment line="4600">
                    Need to do this here, before the parent&apos;s
                     layout manager calls getPreferredSize().                    
                </comment>
                <scope line="4595"/>
                <declaration name="resizingColumn" type="TableColumn" line="4598"/>
                <scope line="4601"/>
            </method>
            <method name="limit" type="int" line="4607">
                <params>
                    <param name="i" type="int"/>
                    <param name="a" type="int"/>
                    <param name="b" type="int"/>
                </params>
            </method>
            <javadoc line="4611">
                Invoked when the selection model of the &lt;code&gt;TableColumnModel&lt;/code&gt;
                  is changed.
                  &lt;p&gt;
                  Application code will not use these methods explicitly, they
                  are used internally by JTable.                
                <param>
                    e  the event received                    
                </param>
                <see>
                    TableColumnModelListener                    
                </see>
            </javadoc>
            <method name="columnSelectionChanged" type="void" line="4621">
                <params>
                    <param name="e" type="ListSelectionEvent"/>
                </params>
                <comment line="4625">
                    The assumption is that when the model is no longer adjusting
                     we will have already gotten all the changes, and therefore
                     don&apos;t need to do an additional paint.                    
                </comment>
                <comment line="4632">
                    The getCellRect() call will fail unless there is at least one row.                    
                </comment>
                <comment line="4647">
                    nothing to repaint, return                    
                </comment>
                <comment line="4651">
                    only thing to repaint is the lead                    
                </comment>
                <comment line="4654">
                    We need to consider more than just the range between
                     the min and max selected index. The lead row, which could
                     be outside this range, should be considered also.                    
                </comment>
                <declaration name="isAdjusting" type="boolean" line="4622"/>
                <scope line="4623"/>
                <scope line="4632"/>
                <declaration name="firstIndex" type="int" line="4635"/>
                <declaration name="lastIndex" type="int" line="4636"/>
                <declaration name="minRow" type="int" line="4637"/>
                <declaration name="maxRow" type="int" line="4638"/>
                <scope line="4639">
                    <declaration name="leadRow" type="int" line="4642"/>
                    <scope line="4644">
                        <scope line="4645"/>
                    </scope>
                    <scope line="4652">
                        <scope line="4656"/>
                    </scope>
                </scope>
                <declaration name="firstColumnRect" type="Rectangle" line="4662"/>
                <declaration name="lastColumnRect" type="Rectangle" line="4663"/>
                <declaration name="dirtyRegion" type="Rectangle" line="4664"/>
            </method>
            <javadoc line="4672">
                Invoked when the row selection changes -- repaints to show the new
                  selection.
                  &lt;p&gt;
                  Application code will not use these methods explicitly, they
                  are used internally by JTable.                
                <param>
                    e   the event received                    
                </param>
                <see>
                    ListSelectionListener                    
                </see>
            </javadoc>
            <method name="valueChanged" type="void" line="4682">
                <params>
                    <param name="e" type="ListSelectionEvent"/>
                </params>
                <comment line="4689">
                    The assumption is that when the model is no longer adjusting
                     we will have already gotten all the changes, and therefore
                     don&apos;t need to do an additional paint.                    
                </comment>
                <comment line="4696">
                    The getCellRect() calls will fail unless there is at least one column.                    
                </comment>
                <scope line="4683"/>
                <declaration name="isAdjusting" type="boolean" line="4686"/>
                <scope line="4687"/>
                <scope line="4696"/>
                <declaration name="firstIndex" type="int" line="4699"/>
                <declaration name="lastIndex" type="int" line="4700"/>
                <declaration name="firstRowRect" type="Rectangle" line="4701"/>
                <declaration name="lastRowRect" type="Rectangle" line="4702"/>
                <declaration name="dirtyRegion" type="Rectangle" line="4703"/>
            </method>
            <javadoc line="4711">
                Invoked when editing is finished. The changes are saved and the
                  editor is discarded.
                  &lt;p&gt;
                  Application code will not use these methods explicitly, they
                  are used internally by JTable.                
                <param>
                    e  the event received                    
                </param>
                <see>
                    CellEditorListener                    
                </see>
            </javadoc>
            <method name="editingStopped" type="void" line="4721">
                <params>
                    <param name="e" type="ChangeEvent"/>
                </params>
                <comment line="4723">
                    Take in the new value                    
                </comment>
                <declaration name="editor" type="TableCellEditor" line="4723"/>
                <scope line="4724">
                    <declaration name="value" type="Object" line="4725"/>
                </scope>
            </method>
            <javadoc line="4731">
                Invoked when editing is canceled. The editor object is discarded
                  and the cell is rendered once again.
                  &lt;p&gt;
                  Application code will not use these methods explicitly, they
                  are used internally by JTable.                
                <param>
                    e  the event received                    
                </param>
                <see>
                    CellEditorListener                    
                </see>
            </javadoc>
            <method name="editingCanceled" type="void" line="4741">
                <params>
                    <param name="e" type="ChangeEvent"/>
                </params>
            </method>
            <javadoc line="4749">
                Sets the preferred size of the viewport for this table.                
                <param>
                    size  a <code>Dimension</code> object specifying the <code>preferredSize</code> of a
                      <code>JViewport</code> whose view is this table                    
                </param>
                <see>
                    Scrollable#getPreferredScrollableViewportSize                    
                </see>
                <beaninfo>
                    description: The preferred size of the viewport.                    
                </beaninfo>
            </javadoc>
            <method name="setPreferredScrollableViewportSize" type="void" line="4758">
                <params>
                    <param name="size" type="Dimension"/>
                </params>
            </method>
            <javadoc line="4762">
                Returns the preferred size of the viewport for this table.                
                <return>
                    a <code>Dimension</code> object containing the <code>preferredSize</code> of the <code>JViewport</code>
                      which displays this table                    
                </return>
                <see>
                    Scrollable#getPreferredScrollableViewportSize                    
                </see>
            </javadoc>
            <method name="getPreferredScrollableViewportSize" type="Dimension" line="4769"/>
            <javadoc line="4773">
                Returns the scroll increment (in pixels) that completely exposes one new
                  row or column (depending on the orientation).
                  &lt;p&gt;
                  This method is called each time the user requests a unit scroll.                
                <param>
                    visibleRect the view area visible within the viewport                    
                </param>
                <param>
                    orientation either <code>SwingConstants.VERTICAL</code>
                      or <code>SwingConstants.HORIZONTAL</code>                    
                </param>
                <param>
                    direction less than zero to scroll up/left,
                      greater than zero for down/right                    
                </param>
                <return>
                    the "unit" increment for scrolling in the specified direction                    
                </return>
                <see>
                    Scrollable#getScrollableUnitIncrement                    
                </see>
            </javadoc>
            <method name="getScrollableUnitIncrement" type="int" line="4789">
                <params>
                    <param name="visibleRect" type="Rectangle"/>
                    <param name="orientation" type="int"/>
                    <param name="direction" type="int"/>
                </params>
                <comment line="4802">
                    Couldn&apos;t find leading row - return some default value                    
                </comment>
                <comment line="4806">
                    Couldn&apos;t find leading col - return some default value                    
                </comment>
                <comment line="4810">
                    Note that it&apos;s possible for one of leadingCol or leadingRow to be
                     -1, depending on the orientation.  This is okay, as getCellRect()
                     still provides enough information to calculate the unit increment.                    
                </comment>
                <comment line="4825">
                    4 cases:
                     #1: Leading cell fully visible, reveal next cell
                     #2: Leading cell fully visible, hide leading cell
                     #3: Leading cell partially visible, hide rest of leading cell
                     #4: Leading cell partially visible, reveal rest of leading cell                    
                </comment>
                <comment line="4831">
                    Leading cell is fully
                     visible                    
                </comment>
                <comment line="4833">
                    Case #1: Reveal previous cell                    
                </comment>
                <comment line="4838">
                    Loop past any zero-height rows                    
                </comment>
                <comment line="4846">
                    HORIZONTAL                    
                </comment>
                <comment line="4847">
                    Loop past any zero-width cols                    
                </comment>
                <comment line="4857">
                    Case #2: hide leading cell                    
                </comment>
                <comment line="4861">
                    Leading cell is partially hidden                    
                </comment>
                <comment line="4862">
                    Compute visible, hidden portions                    
                </comment>
                <comment line="4867">
                    Case #3: hide showing portion of leading cell                    
                </comment>
                <comment line="4870">
                    Case #4: reveal hidden portion of leading cell                    
                </comment>
                <declaration name="leadingRow" type="int" line="4790"/>
                <declaration name="leadingCol" type="int" line="4791"/>
                <declaration name="leadingCellRect" type="Rectangle" line="4792"/>
                <declaration name="leadingVisibleEdge" type="int" line="4794"/>
                <declaration name="leadingCellEdge" type="int" line="4795"/>
                <declaration name="leadingCellSize" type="int" line="4796"/>
                <scope line="4800"/>
                <scope line="4804"/>
                <scope line="4816"/>
                <scope line="4820"/>
                <scope line="4830">
                    <scope line="4833">
                        <declaration name="retVal" type="int" line="4834"/>
                        <scope line="4836">
                            <scope line="4838">
                                <scope line="4840"/>
                            </scope>
                        </scope>
                        <scope line="4845">
                            <scope line="4847">
                                <scope line="4849"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="4856"/>
                </scope>
                <scope line="4860">
                    <declaration name="hiddenAmt" type="int" line="4862"/>
                    <declaration name="visibleAmt" type="int" line="4863"/>
                    <scope line="4865"/>
                    <scope line="4869"/>
                </scope>
            </method>
            <javadoc line="4875">
                Returns &lt;code&gt;visibleRect.height&lt;/code&gt; or
                  &lt;code&gt;visibleRect.width&lt;/code&gt;,
                  depending on this table&apos;s orientation.  Note that as of Swing 1.1.1
                  (Java 2 v 1.2.2) the value
                  returned will ensure that the viewport is cleanly aligned on
                  a row boundary.                
                <return>
                    <code>visibleRect.height</code> or
                      <code>visibleRect.width</code>
                      per the orientation                    
                </return>
                <see>
                    Scrollable#getScrollableBlockIncrement                    
                </see>
            </javadoc>
            <method name="getScrollableBlockIncrement" type="int" line="4889">
                <params>
                    <param name="visibleRect" type="Rectangle"/>
                    <param name="orientation" type="int"/>
                    <param name="direction" type="int"/>
                </params>
                <comment line="4893">
                    Short-circuit empty table model                    
                </comment>
                <comment line="4903">
                    Shortcut for vertical scrolling of a table w/ uniform row height                    
                </comment>
                <scope line="4891">
                    <scope line="4893">
                        <declaration name="rh" type="int" line="4894"/>
                    </scope>
                    <scope line="4898"/>
                </scope>
                <scope line="4903">
                    <declaration name="row" type="int" line="4904"/>
                    <declaration name="col" type="int" line="4906"/>
                    <declaration name="cellRect" type="Rectangle" line="4907"/>
                    <scope line="4909">
                        <declaration name="rh" type="int" line="4910"/>
                    </scope>
                </scope>
                <scope line="4915"/>
                <scope line="4918"/>
            </method>
            <javadoc line="4923">
                Called to get the block increment for upward scrolling in cases of
                  horizontal scrolling, or for vertical scrolling of a table with
                  variable row heights.                
            </javadoc>
            <method name="getPreviousBlockIncrement" type="int" line="4929">
                <params>
                    <param name="visibleRect" type="Rectangle"/>
                    <param name="orientation" type="int"/>
                </params>
                <comment line="4931">
                    Measure back from visible leading edge
                     If we hit the cell on its leading edge, it becomes the leading cell.
                     Else, use following cell                    
                </comment>
                <comment line="4945">
                    Roughly determine the new leading edge by measuring back from the
                     leading visible edge by the size of the visible rect, and find the
                     cell there.                    
                </comment>
                <comment line="4957">
                    Horizontal, right-to-left                    
                </comment>
                <comment line="4964">
                    If we&apos;re measuring past the beginning of the table, we get an invalid
                     cell.  Just go to the beginning of the table in this case.                    
                </comment>
                <comment line="4978">
                    Refine our measurement                    
                </comment>
                <comment line="4983">
                    Usually, we hit in the middle of newCell, and want to scroll to
                     the beginning of the cell after newCell.  But there are a
                     couple corner cases where we want to scroll to the beginning of
                     newCell itself.  These cases are:
                     1) newCell is so large that it ends at or extends into the
                        visibleRect (newCell is the leading cell, or is adjacent to
                        the leading cell)
                     2) newEdge happens to fall right on the beginning of a cell                    
                </comment>
                <comment line="4992">
                    Case 1                    
                </comment>
                <comment line="5002">
                    Case 2:                    
                </comment>
                <comment line="5006">
                    Common case: scroll to cell after newCell                    
                </comment>
                <declaration name="row" type="int" line="4934"/>
                <declaration name="col" type="int" line="4935"/>
                <declaration name="newEdge" type="int" line="4937"/>
                <declaration name="newCellLoc" type="Point" line="4938"/>
                <declaration name="visibleLeadingEdge" type="int" line="4940"/>
                <declaration name="leftToRight" type="boolean" line="4941"/>
                <declaration name="newLeadingEdge" type="int" line="4942"/>
                <scope line="4947">
                    <declaration name="x" type="int" line="4949"/>
                </scope>
                <scope line="4952"/>
                <scope line="4956"/>
                <scope line="4965"/>
                <scope line="4968">
                    <scope line="4969"/>
                    <scope line="4972"/>
                </scope>
                <scope line="4976">
                    <declaration name="newCellRect" type="Rectangle" line="4978"/>
                    <declaration name="newCellLeadingEdge" type="int" line="4979"/>
                    <declaration name="newCellTrailingEdge" type="int" line="4980"/>
                    <scope line="4993"/>
                    <scope line="4998"/>
                    <scope line="5002"/>
                    <scope line="5006"/>
                </scope>
            </method>
            <javadoc line="5013">
                Called to get the block increment for downward scrolling in cases of
                  horizontal scrolling, or for vertical scrolling of a table with
                  variable row heights.                
            </javadoc>
            <method name="getNextBlockIncrement" type="int" line="5019">
                <params>
                    <param name="visibleRect" type="Rectangle"/>
                    <param name="orientation" type="int"/>
                </params>
                <comment line="5021">
                    Find the cell at the trailing edge.  Return the distance to put
                     that cell at the leading edge.                    
                </comment>
                <comment line="5034">
                    If we couldn&apos;t find trailing cell, just return the size of the
                     visibleRect.  Note that, for instance, we don&apos;t need the
                     trailingCol to proceed if we&apos;re scrolling vertically, because
                     cellRect will still fill in the required dimensions.  This would
                     happen if we&apos;re scrolling vertically, and the table is not wide
                     enough to fill the visibleRect.                    
                </comment>
                <comment line="5054">
                    Horizontal, right-to-left                    
                </comment>
                <comment line="5059">
                    The visibleRect contains a single large cell.  Scroll to the end
                     of this cell, so the following cell is the first cell.                    
                </comment>
                <comment line="5064">
                    The trailing cell happens to end right at the end of the
                     visibleRect.  Again, scroll to the beginning of the next cell.                    
                </comment>
                <comment line="5069">
                    Common case: the trailing cell is partially visible, and isn&apos;t
                     big enough to take up the entire visibleRect.  Scroll so it
                     becomes the leading cell.                    
                </comment>
                <declaration name="trailingRow" type="int" line="5022"/>
                <declaration name="trailingCol" type="int" line="5023"/>
                <declaration name="cellRect" type="Rectangle" line="5025"/>
                <declaration name="cellFillsVis" type="boolean" line="5026"/>
                <declaration name="cellLeadingEdge" type="int" line="5028"/>
                <declaration name="cellTrailingEdge" type="int" line="5029"/>
                <declaration name="newLeadingEdge" type="int" line="5030"/>
                <declaration name="visibleLeadingEdge" type="int" line="5031"/>
                <scope line="5039"/>
                <scope line="5042"/>
                <scope line="5050"/>
                <scope line="5053"/>
                <scope line="5057"/>
                <scope line="5062"/>
                <scope line="5067"/>
            </method>
            <method name="getLeadingRow" type="int" line="5081">
                <params>
                    <param name="visibleRect" type="Rectangle"/>
                </params>
                <declaration name="leadingPoint" type="Point" line="5082"/>
                <scope line="5084"/>
                <scope line="5087"/>
            </method>
            <method name="getLeadingCol" type="int" line="5099">
                <params>
                    <param name="visibleRect" type="Rectangle"/>
                </params>
                <declaration name="leadingPoint" type="Point" line="5100"/>
                <scope line="5102"/>
                <scope line="5105"/>
            </method>
            <method name="getTrailingRow" type="int" line="5117">
                <params>
                    <param name="visibleRect" type="Rectangle"/>
                </params>
                <declaration name="trailingPoint" type="Point" line="5118"/>
                <scope line="5120"/>
                <scope line="5124"/>
            </method>
            <method name="getTrailingCol" type="int" line="5136">
                <params>
                    <param name="visibleRect" type="Rectangle"/>
                </params>
                <declaration name="trailingPoint" type="Point" line="5137"/>
                <scope line="5139"/>
                <scope line="5143"/>
            </method>
            <method name="leadingEdge" type="int" line="5154">
                <params>
                    <param name="rect" type="Rectangle"/>
                    <param name="orientation" type="int"/>
                </params>
                <comment line="5162">
                    Horizontal, right-to-left                    
                </comment>
                <scope line="5155"/>
                <scope line="5158"/>
                <scope line="5161"/>
            </method>
            <method name="trailingEdge" type="int" line="5171">
                <params>
                    <param name="rect" type="Rectangle"/>
                    <param name="orientation" type="int"/>
                </params>
                <comment line="5179">
                    Horizontal, right-to-left                    
                </comment>
                <scope line="5172"/>
                <scope line="5175"/>
                <scope line="5178"/>
            </method>
            <javadoc line="5183">
                Returns false if &lt;code&gt;autoResizeMode&lt;/code&gt; is set to
                  &lt;code&gt;AUTO_RESIZE_OFF&lt;/code&gt;, which indicates that the
                  width of the viewport does not determine the width
                  of the table.  Otherwise returns true.                
                <return>
                    false if <code>autoResizeMode</code> is set
                      to <code>AUTO_RESIZE_OFF</code>, otherwise returns true                    
                </return>
                <see>
                    Scrollable#getScrollableTracksViewportWidth                    
                </see>
            </javadoc>
            <method name="getScrollableTracksViewportWidth" type="boolean" line="5193"/>
            <javadoc line="5197">
                Returns {@code false} to indicate that the height of the viewport does
                  not determine the height of the table, unless{@code getFillsViewportHeight} is {@code true} and the preferred height
                  of the table is smaller than the viewport&apos;s height.                
                <return>
                    {@code false} unless {@code getFillsViewportHeight} is{@code true} and the table needs to be stretched to fill
                      the viewport                    
                </return>
                <see>
                    Scrollable#getScrollableTracksViewportHeight                    
                </see>
                <see>
                    #setFillsViewportHeight                    
                </see>
                <see>
                    #getFillsViewportHeight                    
                </see>
            </javadoc>
            <method name="getScrollableTracksViewportHeight" type="boolean" line="5210">
                <declaration name="parent" type="Container" line="5211"/>
            </method>
            <javadoc line="5217">
                Sets whether or not this table is always made large enough
                  to fill the height of an enclosing viewport. If the preferred
                  height of the table is smaller than the viewport, then the table
                  will be stretched to fill the viewport. In other words, this
                  ensures the table is never smaller than the viewport.
                  The default for this property is {@code false}.                
                <param>
                    fillsViewportHeight whether or not this table is always
                      made large enough to fill the height of an enclosing
                      viewport                    
                </param>
                <see>
                    #getFillsViewportHeight                    
                </see>
                <see>
                    #getScrollableTracksViewportHeight                    
                </see>
                <since>
                    1.6                    
                </since>
                <beaninfo>
                    bound: true
                      description: Whether or not this table is always made large enough
                      to fill the height of an enclosing viewport                    
                </beaninfo>
            </javadoc>
            <method name="setFillsViewportHeight" type="void" line="5236">
                <params>
                    <param name="fillsViewportHeight" type="boolean"/>
                </params>
                <declaration name="old" type="boolean" line="5237"/>
            </method>
            <javadoc line="5243">
                Returns whether or not this table is always made large enough
                  to fill the height of an enclosing viewport.                
                <return>
                    whether or not this table is always made large enough
                      to fill the height of an enclosing viewport                    
                </return>
                <see>
                    #setFillsViewportHeight                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getFillsViewportHeight" type="boolean" line="5252"/>
            <method name="processKeyBinding" type="boolean" line="5261">
                <params>
                    <param name="ks" type="KeyStroke"/>
                    <param name="e" type="KeyEvent"/>
                    <param name="condition" type="int"/>
                    <param name="pressed" type="boolean"/>
                </params>
                <comment line="5265">
                    Start editing when a key is typed. UI classes can disable this behavior
                     by setting the client property JTable.autoStartsEdit to Boolean.FALSE.                    
                </comment>
                <comment line="5270">
                    We do not have a binding for the event.                    
                </comment>
                <comment line="5273">
                    Only attempt to install the editor on a KEY_PRESSED,                    
                </comment>
                <comment line="5277">
                    Don&apos;t start when just a modifier is pressed                    
                </comment>
                <comment line="5283">
                    Try to install the editor                    
                </comment>
                <comment line="5297">
                    If the editorComponent is a JComponent, pass the event to it.                    
                </comment>
                <comment line="5301">
                    If we have started an editor as a result of the user
                     pressing a key and the surrendersFocusOnKeystroke property
                     is true, give the focus to the new editor.                    
                </comment>
                <declaration name="retValue" type="boolean" line="5262"/>
                <scope line="5268">
                    <declaration name="editorComponent" type="Component" line="5270"/>
                    <scope line="5271">
                        <scope line="5273"/>
                        <declaration name="code" type="int" line="5277"/>
                        <scope line="5279"/>
                        <declaration name="leadRow" type="int" line="5283"/>
                        <declaration name="leadColumn" type="int" line="5284"/>
                        <scope line="5286">
                            <scope line="5287"/>
                        </scope>
                        <scope line="5292"/>
                    </scope>
                    <scope line="5297">
                        <scope line="5303"/>
                    </scope>
                </scope>
            </method>
            <method name="setLazyValue" type="void" line="5311">
                <params>
                    <param name="h" type="Hashtable"/>
                    <param name="c" type="Class"/>
                    <param name="s" type="String"/>
                </params>
            </method>
            <method name="setLazyRenderer" type="void" line="5315">
                <params>
                    <param name="c" type="Class"/>
                    <param name="s" type="String"/>
                </params>
            </method>
            <javadoc line="5319">
                Creates default cell renderers for objects, numbers, doubles, dates,
                  booleans, and icons.                
                <see>
                    javax.swing.table.DefaultTableCellRenderer                    
                </see>
            </javadoc>
            <method name="createDefaultRenderers" type="void" line="5325">
                <comment line="5329">
                    Objects                    
                </comment>
                <comment line="5332">
                    Numbers                    
                </comment>
                <comment line="5335">
                    Doubles and Floats                    
                </comment>
                <comment line="5339">
                    Dates                    
                </comment>
                <comment line="5342">
                    Icons and ImageIcons                    
                </comment>
                <comment line="5346">
                    Booleans                    
                </comment>
            </method>
            <class name="NumberRenderer" line="5349">
                <extends class="DefaultTableCellRenderer.UIResource"/>
                <comment line="334">
                    If true, both a row selection and a column selection
                     can be non-empty at the same time, the selected cells are the
                     the cells whose row and column are both selected.                    
                </comment>
                <comment line="3837">
                    Selection, in terms of the model. This is lazily created
                     as needed.                    
                </comment>
                <comment line="3841">
                    Set to true while in the process of changing the selection.
                     If this is true the selection change is ignored.                    
                </comment>
                <comment line="3844">
                    Temporary cache of selection, in terms of model. This is only used
                     if we don&apos;t need the full weight of modelSelection.                    
                </comment>
                <comment line="3848">
                    Heights of the rows in terms of the model.                    
                </comment>
                <comment line="4066">
                    Starting index of the change, in terms of the model                    
                </comment>
                <comment line="4069">
                    Ending index of the change, in terms of the model                    
                </comment>
                <comment line="4072">
                    Type of change                    
                </comment>
                <comment line="4075">
                    Number of rows in the model                    
                </comment>
                <comment line="4078">
                    The event that triggered this.                    
                </comment>
                <comment line="4081">
                    Length of the change (end - start + 1)                    
                </comment>
                <comment line="4084">
                    True if the event indicates all the contents have changed                    
                </comment>
                <comment line="6610">
                    Listeners to track model, etc. changes to as to re-place the other
                     listeners                    
                </comment>
                <comment line="6691">
                    Listeners to echo changes to the AccessiblePropertyChange mechanism                    
                </comment>
                <comment line="6693">
                    Describes a change in the accessible table model.                    
                </comment>
                <comment line="6952">
                    AccessibleContext support                    
                </comment>
                <comment line="7047">
                    AccessibleSelection support                    
                </comment>
                <comment line="7290">
                    begin AccessibleExtendedTable implementation -------------                    
                </comment>
                <comment line="7329">
                    end of AccessibleExtendedTable implementation ------------                    
                </comment>
                <comment line="7331">
                    start of AccessibleTable implementation ------------------                    
                </comment>
                <comment line="7398">
                    Returns the total number of rows in this table.
                    
                     @return the total number of rows in this table                    
                </comment>
                <comment line="7407">
                    Returns the total number of columns in the table.
                    
                     @return the total number of columns in the table                    
                </comment>
                <comment line="7416">
                    Returns the &lt;code&gt;Accessible&lt;code&gt; at a specified row
                     and column in the table.
                    
                     @param r zero-based row of the table
                     @param c zero-based column of the table
                     @return the &lt;code&gt;Accessible&lt;code&gt; at the specified row and column
                     in the table                    
                </comment>
                <comment line="7489">
                    Private class representing a table column header                    
                </comment>
                <comment line="7904">
                    end of AccessibleTable implementation --------------------                    
                </comment>
                <comment line="8732">
                    inner class AccessibleJTableCell                    
                </comment>
                <comment line="8734">
                    Begin AccessibleJTableHeader ========== // TIGER - 4715503                    
                </comment>
                <comment line="9604">
                    inner class AccessibleJTableHeaderCell                    
                </comment>
                <javadoc line="5349">
                    Default Renderers                    
                </javadoc>
                <method name="NumberRenderer" type="constructor" line="5353"/>
            </class>
            <class name="DoubleRenderer" line="5359">
                <extends class="NumberRenderer"/>
                <comment line="334">
                    If true, both a row selection and a column selection
                     can be non-empty at the same time, the selected cells are the
                     the cells whose row and column are both selected.                    
                </comment>
                <comment line="3837">
                    Selection, in terms of the model. This is lazily created
                     as needed.                    
                </comment>
                <comment line="3841">
                    Set to true while in the process of changing the selection.
                     If this is true the selection change is ignored.                    
                </comment>
                <comment line="3844">
                    Temporary cache of selection, in terms of model. This is only used
                     if we don&apos;t need the full weight of modelSelection.                    
                </comment>
                <comment line="3848">
                    Heights of the rows in terms of the model.                    
                </comment>
                <comment line="4066">
                    Starting index of the change, in terms of the model                    
                </comment>
                <comment line="4069">
                    Ending index of the change, in terms of the model                    
                </comment>
                <comment line="4072">
                    Type of change                    
                </comment>
                <comment line="4075">
                    Number of rows in the model                    
                </comment>
                <comment line="4078">
                    The event that triggered this.                    
                </comment>
                <comment line="4081">
                    Length of the change (end - start + 1)                    
                </comment>
                <comment line="4084">
                    True if the event indicates all the contents have changed                    
                </comment>
                <comment line="6610">
                    Listeners to track model, etc. changes to as to re-place the other
                     listeners                    
                </comment>
                <comment line="6691">
                    Listeners to echo changes to the AccessiblePropertyChange mechanism                    
                </comment>
                <comment line="6693">
                    Describes a change in the accessible table model.                    
                </comment>
                <comment line="6952">
                    AccessibleContext support                    
                </comment>
                <comment line="7047">
                    AccessibleSelection support                    
                </comment>
                <comment line="7290">
                    begin AccessibleExtendedTable implementation -------------                    
                </comment>
                <comment line="7329">
                    end of AccessibleExtendedTable implementation ------------                    
                </comment>
                <comment line="7331">
                    start of AccessibleTable implementation ------------------                    
                </comment>
                <comment line="7398">
                    Returns the total number of rows in this table.
                    
                     @return the total number of rows in this table                    
                </comment>
                <comment line="7407">
                    Returns the total number of columns in the table.
                    
                     @return the total number of columns in the table                    
                </comment>
                <comment line="7416">
                    Returns the &lt;code&gt;Accessible&lt;code&gt; at a specified row
                     and column in the table.
                    
                     @param r zero-based row of the table
                     @param c zero-based column of the table
                     @return the &lt;code&gt;Accessible&lt;code&gt; at the specified row and column
                     in the table                    
                </comment>
                <comment line="7489">
                    Private class representing a table column header                    
                </comment>
                <comment line="7904">
                    end of AccessibleTable implementation --------------------                    
                </comment>
                <comment line="8732">
                    inner class AccessibleJTableCell                    
                </comment>
                <comment line="8734">
                    Begin AccessibleJTableHeader ========== // TIGER - 4715503                    
                </comment>
                <comment line="9604">
                    inner class AccessibleJTableHeaderCell                    
                </comment>
                <declaration name="formatter" type="NumberFormat" line="5360"/>
                <method name="DoubleRenderer" type="constructor" line="5361"/>
                <method name="setValue" type="void" line="5363">
                    <params>
                        <param name="value" type="Object"/>
                    </params>
                    <scope line="5364"/>
                </method>
            </class>
            <class name="DateRenderer" line="5371">
                <extends class="DefaultTableCellRenderer.UIResource"/>
                <comment line="334">
                    If true, both a row selection and a column selection
                     can be non-empty at the same time, the selected cells are the
                     the cells whose row and column are both selected.                    
                </comment>
                <comment line="3837">
                    Selection, in terms of the model. This is lazily created
                     as needed.                    
                </comment>
                <comment line="3841">
                    Set to true while in the process of changing the selection.
                     If this is true the selection change is ignored.                    
                </comment>
                <comment line="3844">
                    Temporary cache of selection, in terms of model. This is only used
                     if we don&apos;t need the full weight of modelSelection.                    
                </comment>
                <comment line="3848">
                    Heights of the rows in terms of the model.                    
                </comment>
                <comment line="4066">
                    Starting index of the change, in terms of the model                    
                </comment>
                <comment line="4069">
                    Ending index of the change, in terms of the model                    
                </comment>
                <comment line="4072">
                    Type of change                    
                </comment>
                <comment line="4075">
                    Number of rows in the model                    
                </comment>
                <comment line="4078">
                    The event that triggered this.                    
                </comment>
                <comment line="4081">
                    Length of the change (end - start + 1)                    
                </comment>
                <comment line="4084">
                    True if the event indicates all the contents have changed                    
                </comment>
                <comment line="6610">
                    Listeners to track model, etc. changes to as to re-place the other
                     listeners                    
                </comment>
                <comment line="6691">
                    Listeners to echo changes to the AccessiblePropertyChange mechanism                    
                </comment>
                <comment line="6693">
                    Describes a change in the accessible table model.                    
                </comment>
                <comment line="6952">
                    AccessibleContext support                    
                </comment>
                <comment line="7047">
                    AccessibleSelection support                    
                </comment>
                <comment line="7290">
                    begin AccessibleExtendedTable implementation -------------                    
                </comment>
                <comment line="7329">
                    end of AccessibleExtendedTable implementation ------------                    
                </comment>
                <comment line="7331">
                    start of AccessibleTable implementation ------------------                    
                </comment>
                <comment line="7398">
                    Returns the total number of rows in this table.
                    
                     @return the total number of rows in this table                    
                </comment>
                <comment line="7407">
                    Returns the total number of columns in the table.
                    
                     @return the total number of columns in the table                    
                </comment>
                <comment line="7416">
                    Returns the &lt;code&gt;Accessible&lt;code&gt; at a specified row
                     and column in the table.
                    
                     @param r zero-based row of the table
                     @param c zero-based column of the table
                     @return the &lt;code&gt;Accessible&lt;code&gt; at the specified row and column
                     in the table                    
                </comment>
                <comment line="7489">
                    Private class representing a table column header                    
                </comment>
                <comment line="7904">
                    end of AccessibleTable implementation --------------------                    
                </comment>
                <comment line="8732">
                    inner class AccessibleJTableCell                    
                </comment>
                <comment line="8734">
                    Begin AccessibleJTableHeader ========== // TIGER - 4715503                    
                </comment>
                <comment line="9604">
                    inner class AccessibleJTableHeaderCell                    
                </comment>
                <declaration name="formatter" type="DateFormat" line="5372"/>
                <method name="DateRenderer" type="constructor" line="5373"/>
                <method name="setValue" type="void" line="5375">
                    <params>
                        <param name="value" type="Object"/>
                    </params>
                    <scope line="5376"/>
                </method>
            </class>
            <class name="IconRenderer" line="5383">
                <extends class="DefaultTableCellRenderer.UIResource"/>
                <comment line="334">
                    If true, both a row selection and a column selection
                     can be non-empty at the same time, the selected cells are the
                     the cells whose row and column are both selected.                    
                </comment>
                <comment line="3837">
                    Selection, in terms of the model. This is lazily created
                     as needed.                    
                </comment>
                <comment line="3841">
                    Set to true while in the process of changing the selection.
                     If this is true the selection change is ignored.                    
                </comment>
                <comment line="3844">
                    Temporary cache of selection, in terms of model. This is only used
                     if we don&apos;t need the full weight of modelSelection.                    
                </comment>
                <comment line="3848">
                    Heights of the rows in terms of the model.                    
                </comment>
                <comment line="4066">
                    Starting index of the change, in terms of the model                    
                </comment>
                <comment line="4069">
                    Ending index of the change, in terms of the model                    
                </comment>
                <comment line="4072">
                    Type of change                    
                </comment>
                <comment line="4075">
                    Number of rows in the model                    
                </comment>
                <comment line="4078">
                    The event that triggered this.                    
                </comment>
                <comment line="4081">
                    Length of the change (end - start + 1)                    
                </comment>
                <comment line="4084">
                    True if the event indicates all the contents have changed                    
                </comment>
                <comment line="6610">
                    Listeners to track model, etc. changes to as to re-place the other
                     listeners                    
                </comment>
                <comment line="6691">
                    Listeners to echo changes to the AccessiblePropertyChange mechanism                    
                </comment>
                <comment line="6693">
                    Describes a change in the accessible table model.                    
                </comment>
                <comment line="6952">
                    AccessibleContext support                    
                </comment>
                <comment line="7047">
                    AccessibleSelection support                    
                </comment>
                <comment line="7290">
                    begin AccessibleExtendedTable implementation -------------                    
                </comment>
                <comment line="7329">
                    end of AccessibleExtendedTable implementation ------------                    
                </comment>
                <comment line="7331">
                    start of AccessibleTable implementation ------------------                    
                </comment>
                <comment line="7398">
                    Returns the total number of rows in this table.
                    
                     @return the total number of rows in this table                    
                </comment>
                <comment line="7407">
                    Returns the total number of columns in the table.
                    
                     @return the total number of columns in the table                    
                </comment>
                <comment line="7416">
                    Returns the &lt;code&gt;Accessible&lt;code&gt; at a specified row
                     and column in the table.
                    
                     @param r zero-based row of the table
                     @param c zero-based column of the table
                     @return the &lt;code&gt;Accessible&lt;code&gt; at the specified row and column
                     in the table                    
                </comment>
                <comment line="7489">
                    Private class representing a table column header                    
                </comment>
                <comment line="7904">
                    end of AccessibleTable implementation --------------------                    
                </comment>
                <comment line="8732">
                    inner class AccessibleJTableCell                    
                </comment>
                <comment line="8734">
                    Begin AccessibleJTableHeader ========== // TIGER - 4715503                    
                </comment>
                <comment line="9604">
                    inner class AccessibleJTableHeaderCell                    
                </comment>
                <method name="IconRenderer" type="constructor" line="5384"/>
                <method name="setValue" type="void" line="5388">
                    <params>
                        <param name="value" type="Object"/>
                    </params>
                </method>
            </class>
            <class name="BooleanRenderer" line="5392">
                <extends class="JCheckBox"/>
                <comment line="334">
                    If true, both a row selection and a column selection
                     can be non-empty at the same time, the selected cells are the
                     the cells whose row and column are both selected.                    
                </comment>
                <comment line="3837">
                    Selection, in terms of the model. This is lazily created
                     as needed.                    
                </comment>
                <comment line="3841">
                    Set to true while in the process of changing the selection.
                     If this is true the selection change is ignored.                    
                </comment>
                <comment line="3844">
                    Temporary cache of selection, in terms of model. This is only used
                     if we don&apos;t need the full weight of modelSelection.                    
                </comment>
                <comment line="3848">
                    Heights of the rows in terms of the model.                    
                </comment>
                <comment line="4066">
                    Starting index of the change, in terms of the model                    
                </comment>
                <comment line="4069">
                    Ending index of the change, in terms of the model                    
                </comment>
                <comment line="4072">
                    Type of change                    
                </comment>
                <comment line="4075">
                    Number of rows in the model                    
                </comment>
                <comment line="4078">
                    The event that triggered this.                    
                </comment>
                <comment line="4081">
                    Length of the change (end - start + 1)                    
                </comment>
                <comment line="4084">
                    True if the event indicates all the contents have changed                    
                </comment>
                <comment line="6610">
                    Listeners to track model, etc. changes to as to re-place the other
                     listeners                    
                </comment>
                <comment line="6691">
                    Listeners to echo changes to the AccessiblePropertyChange mechanism                    
                </comment>
                <comment line="6693">
                    Describes a change in the accessible table model.                    
                </comment>
                <comment line="6952">
                    AccessibleContext support                    
                </comment>
                <comment line="7047">
                    AccessibleSelection support                    
                </comment>
                <comment line="7290">
                    begin AccessibleExtendedTable implementation -------------                    
                </comment>
                <comment line="7329">
                    end of AccessibleExtendedTable implementation ------------                    
                </comment>
                <comment line="7331">
                    start of AccessibleTable implementation ------------------                    
                </comment>
                <comment line="7398">
                    Returns the total number of rows in this table.
                    
                     @return the total number of rows in this table                    
                </comment>
                <comment line="7407">
                    Returns the total number of columns in the table.
                    
                     @return the total number of columns in the table                    
                </comment>
                <comment line="7416">
                    Returns the &lt;code&gt;Accessible&lt;code&gt; at a specified row
                     and column in the table.
                    
                     @param r zero-based row of the table
                     @param c zero-based column of the table
                     @return the &lt;code&gt;Accessible&lt;code&gt; at the specified row and column
                     in the table                    
                </comment>
                <comment line="7489">
                    Private class representing a table column header                    
                </comment>
                <comment line="7904">
                    end of AccessibleTable implementation --------------------                    
                </comment>
                <comment line="8732">
                    inner class AccessibleJTableCell                    
                </comment>
                <comment line="8734">
                    Begin AccessibleJTableHeader ========== // TIGER - 4715503                    
                </comment>
                <comment line="9604">
                    inner class AccessibleJTableHeaderCell                    
                </comment>
                <implements interface="TableCellRenderer"/>
                <implements interface="UIResource"/>
                <declaration name="noFocusBorder" type="Border" line="5394"/>
                <method name="BooleanRenderer" type="constructor" line="5396"/>
                <method name="getTableCellRendererComponent" type="Component" line="5403">
                    <params>
                        <param name="table" type="JTable"/>
                        <param name="value" type="Object"/>
                        <param name="isSelected" type="boolean"/>
                        <param name="hasFocus" type="boolean"/>
                        <param name="row" type="int"/>
                        <param name="column" type="int"/>
                    </params>
                    <scope line="5404"/>
                    <scope line="5408"/>
                    <scope line="5414"/>
                    <scope line="5416"/>
                </method>
            </class>
            <method name="setLazyEditor" type="void" line="5424">
                <params>
                    <param name="c" type="Class"/>
                    <param name="s" type="String"/>
                </params>
            </method>
            <javadoc line="5428">
                Creates default cell editors for objects, numbers, and boolean values.                
                <see>
                    DefaultCellEditor                    
                </see>
            </javadoc>
            <method name="createDefaultEditors" type="void" line="5432">
                <comment line="5436">
                    Objects                    
                </comment>
                <comment line="5439">
                    Numbers                    
                </comment>
                <comment line="5442">
                    Booleans                    
                </comment>
            </method>
            <class name="GenericEditor" line="5445">
                <extends class="DefaultCellEditor"/>
                <comment line="334">
                    If true, both a row selection and a column selection
                     can be non-empty at the same time, the selected cells are the
                     the cells whose row and column are both selected.                    
                </comment>
                <comment line="3837">
                    Selection, in terms of the model. This is lazily created
                     as needed.                    
                </comment>
                <comment line="3841">
                    Set to true while in the process of changing the selection.
                     If this is true the selection change is ignored.                    
                </comment>
                <comment line="3844">
                    Temporary cache of selection, in terms of model. This is only used
                     if we don&apos;t need the full weight of modelSelection.                    
                </comment>
                <comment line="3848">
                    Heights of the rows in terms of the model.                    
                </comment>
                <comment line="4066">
                    Starting index of the change, in terms of the model                    
                </comment>
                <comment line="4069">
                    Ending index of the change, in terms of the model                    
                </comment>
                <comment line="4072">
                    Type of change                    
                </comment>
                <comment line="4075">
                    Number of rows in the model                    
                </comment>
                <comment line="4078">
                    The event that triggered this.                    
                </comment>
                <comment line="4081">
                    Length of the change (end - start + 1)                    
                </comment>
                <comment line="4084">
                    True if the event indicates all the contents have changed                    
                </comment>
                <comment line="6610">
                    Listeners to track model, etc. changes to as to re-place the other
                     listeners                    
                </comment>
                <comment line="6691">
                    Listeners to echo changes to the AccessiblePropertyChange mechanism                    
                </comment>
                <comment line="6693">
                    Describes a change in the accessible table model.                    
                </comment>
                <comment line="6952">
                    AccessibleContext support                    
                </comment>
                <comment line="7047">
                    AccessibleSelection support                    
                </comment>
                <comment line="7290">
                    begin AccessibleExtendedTable implementation -------------                    
                </comment>
                <comment line="7329">
                    end of AccessibleExtendedTable implementation ------------                    
                </comment>
                <comment line="7331">
                    start of AccessibleTable implementation ------------------                    
                </comment>
                <comment line="7398">
                    Returns the total number of rows in this table.
                    
                     @return the total number of rows in this table                    
                </comment>
                <comment line="7407">
                    Returns the total number of columns in the table.
                    
                     @return the total number of columns in the table                    
                </comment>
                <comment line="7416">
                    Returns the &lt;code&gt;Accessible&lt;code&gt; at a specified row
                     and column in the table.
                    
                     @param r zero-based row of the table
                     @param c zero-based column of the table
                     @return the &lt;code&gt;Accessible&lt;code&gt; at the specified row and column
                     in the table                    
                </comment>
                <comment line="7489">
                    Private class representing a table column header                    
                </comment>
                <comment line="7904">
                    end of AccessibleTable implementation --------------------                    
                </comment>
                <comment line="8732">
                    inner class AccessibleJTableCell                    
                </comment>
                <comment line="8734">
                    Begin AccessibleJTableHeader ========== // TIGER - 4715503                    
                </comment>
                <comment line="9604">
                    inner class AccessibleJTableHeaderCell                    
                </comment>
                <javadoc line="5445">
                    Default Editors                    
                </javadoc>
                <declaration name="argTypes" type="Class[]" line="5450"/>
                <declaration name="constructor" type="java.lang.reflect.Constructor" line="5451"/>
                <declaration name="value" type="Object" line="5452"/>
                <method name="GenericEditor" type="constructor" line="5454"/>
                <method name="stopCellEditing" type="boolean" line="5459">
                    <comment line="5462">
                        Here we are dealing with the case where a user
                         has deleted the string value in a cell, possibly
                         after a failed validation. Return null, so that
                         they have the option to replace the value with
                         null or use escape to restore the original.
                         For Strings, return &quot;&quot; for backward compatibility.                        
                    </comment>
                    <declaration name="s" type="String" line="5460"/>
                    <scope line="5467">
                        <scope line="5468"/>
                    </scope>
                    <scope line="5474"/>
                    <scope line="5477"/>
                </method>
                <method name="getTableCellEditorComponent" type="Component" line="5486">
                    <params>
                        <param name="table" type="JTable"/>
                        <param name="value" type="Object"/>
                        <param name="isSelected" type="boolean"/>
                        <param name="row" type="int"/>
                        <param name="column" type="int"/>
                    </params>
                    <comment line="5492">
                        Since our obligation is to produce a value which is
                         assignable for the required type it is OK to use the
                         String constructor for columns which are declared
                         to contain Objects. A String is an Object.                        
                    </comment>
                    <scope line="5489">
                        <declaration name="type" type="Class&lt;?&gt;" line="5490"/>
                        <scope line="5495"/>
                    </scope>
                    <scope line="5500"/>
                </method>
                <method name="getCellEditorValue" type="Object" line="5506"/>
            </class>
            <class name="NumberEditor" line="5511">
                <extends class="GenericEditor"/>
                <comment line="334">
                    If true, both a row selection and a column selection
                     can be non-empty at the same time, the selected cells are the
                     the cells whose row and column are both selected.                    
                </comment>
                <comment line="3837">
                    Selection, in terms of the model. This is lazily created
                     as needed.                    
                </comment>
                <comment line="3841">
                    Set to true while in the process of changing the selection.
                     If this is true the selection change is ignored.                    
                </comment>
                <comment line="3844">
                    Temporary cache of selection, in terms of model. This is only used
                     if we don&apos;t need the full weight of modelSelection.                    
                </comment>
                <comment line="3848">
                    Heights of the rows in terms of the model.                    
                </comment>
                <comment line="4066">
                    Starting index of the change, in terms of the model                    
                </comment>
                <comment line="4069">
                    Ending index of the change, in terms of the model                    
                </comment>
                <comment line="4072">
                    Type of change                    
                </comment>
                <comment line="4075">
                    Number of rows in the model                    
                </comment>
                <comment line="4078">
                    The event that triggered this.                    
                </comment>
                <comment line="4081">
                    Length of the change (end - start + 1)                    
                </comment>
                <comment line="4084">
                    True if the event indicates all the contents have changed                    
                </comment>
                <comment line="6610">
                    Listeners to track model, etc. changes to as to re-place the other
                     listeners                    
                </comment>
                <comment line="6691">
                    Listeners to echo changes to the AccessiblePropertyChange mechanism                    
                </comment>
                <comment line="6693">
                    Describes a change in the accessible table model.                    
                </comment>
                <comment line="6952">
                    AccessibleContext support                    
                </comment>
                <comment line="7047">
                    AccessibleSelection support                    
                </comment>
                <comment line="7290">
                    begin AccessibleExtendedTable implementation -------------                    
                </comment>
                <comment line="7329">
                    end of AccessibleExtendedTable implementation ------------                    
                </comment>
                <comment line="7331">
                    start of AccessibleTable implementation ------------------                    
                </comment>
                <comment line="7398">
                    Returns the total number of rows in this table.
                    
                     @return the total number of rows in this table                    
                </comment>
                <comment line="7407">
                    Returns the total number of columns in the table.
                    
                     @return the total number of columns in the table                    
                </comment>
                <comment line="7416">
                    Returns the &lt;code&gt;Accessible&lt;code&gt; at a specified row
                     and column in the table.
                    
                     @param r zero-based row of the table
                     @param c zero-based column of the table
                     @return the &lt;code&gt;Accessible&lt;code&gt; at the specified row and column
                     in the table                    
                </comment>
                <comment line="7489">
                    Private class representing a table column header                    
                </comment>
                <comment line="7904">
                    end of AccessibleTable implementation --------------------                    
                </comment>
                <comment line="8732">
                    inner class AccessibleJTableCell                    
                </comment>
                <comment line="8734">
                    Begin AccessibleJTableHeader ========== // TIGER - 4715503                    
                </comment>
                <comment line="9604">
                    inner class AccessibleJTableHeaderCell                    
                </comment>
                <method name="NumberEditor" type="constructor" line="5513"/>
            </class>
            <class name="BooleanEditor" line="5518">
                <extends class="DefaultCellEditor"/>
                <comment line="334">
                    If true, both a row selection and a column selection
                     can be non-empty at the same time, the selected cells are the
                     the cells whose row and column are both selected.                    
                </comment>
                <comment line="3837">
                    Selection, in terms of the model. This is lazily created
                     as needed.                    
                </comment>
                <comment line="3841">
                    Set to true while in the process of changing the selection.
                     If this is true the selection change is ignored.                    
                </comment>
                <comment line="3844">
                    Temporary cache of selection, in terms of model. This is only used
                     if we don&apos;t need the full weight of modelSelection.                    
                </comment>
                <comment line="3848">
                    Heights of the rows in terms of the model.                    
                </comment>
                <comment line="4066">
                    Starting index of the change, in terms of the model                    
                </comment>
                <comment line="4069">
                    Ending index of the change, in terms of the model                    
                </comment>
                <comment line="4072">
                    Type of change                    
                </comment>
                <comment line="4075">
                    Number of rows in the model                    
                </comment>
                <comment line="4078">
                    The event that triggered this.                    
                </comment>
                <comment line="4081">
                    Length of the change (end - start + 1)                    
                </comment>
                <comment line="4084">
                    True if the event indicates all the contents have changed                    
                </comment>
                <comment line="6610">
                    Listeners to track model, etc. changes to as to re-place the other
                     listeners                    
                </comment>
                <comment line="6691">
                    Listeners to echo changes to the AccessiblePropertyChange mechanism                    
                </comment>
                <comment line="6693">
                    Describes a change in the accessible table model.                    
                </comment>
                <comment line="6952">
                    AccessibleContext support                    
                </comment>
                <comment line="7047">
                    AccessibleSelection support                    
                </comment>
                <comment line="7290">
                    begin AccessibleExtendedTable implementation -------------                    
                </comment>
                <comment line="7329">
                    end of AccessibleExtendedTable implementation ------------                    
                </comment>
                <comment line="7331">
                    start of AccessibleTable implementation ------------------                    
                </comment>
                <comment line="7398">
                    Returns the total number of rows in this table.
                    
                     @return the total number of rows in this table                    
                </comment>
                <comment line="7407">
                    Returns the total number of columns in the table.
                    
                     @return the total number of columns in the table                    
                </comment>
                <comment line="7416">
                    Returns the &lt;code&gt;Accessible&lt;code&gt; at a specified row
                     and column in the table.
                    
                     @param r zero-based row of the table
                     @param c zero-based column of the table
                     @return the &lt;code&gt;Accessible&lt;code&gt; at the specified row and column
                     in the table                    
                </comment>
                <comment line="7489">
                    Private class representing a table column header                    
                </comment>
                <comment line="7904">
                    end of AccessibleTable implementation --------------------                    
                </comment>
                <comment line="8732">
                    inner class AccessibleJTableCell                    
                </comment>
                <comment line="8734">
                    Begin AccessibleJTableHeader ========== // TIGER - 4715503                    
                </comment>
                <comment line="9604">
                    inner class AccessibleJTableHeaderCell                    
                </comment>
                <method name="BooleanEditor" type="constructor" line="5519">
                    <declaration name="checkBox" type="JCheckBox" line="5521"/>
                </method>
            </class>
            <javadoc line="5526">
                Initializes table properties to their default values.                
            </javadoc>
            <method name="initializeLocalVars" type="void" line="5529">
                <comment line="5550">
                    I&apos;m registered to do tool tips so we can draw tips for the renderers                    
                </comment>
                <declaration name="toolTipManager" type="ToolTipManager" line="5550"/>
            </method>
            <javadoc line="5556">
                Returns the default table model object, which is
                  a &lt;code&gt;DefaultTableModel&lt;/code&gt;.  A subclass can override this
                  method to return a different table model object.                
                <return>
                    the default table model object                    
                </return>
                <see>
                    javax.swing.table.DefaultTableModel                    
                </see>
            </javadoc>
            <method name="createDefaultDataModel" type="TableModel" line="5564"/>
            <javadoc line="5568">
                Returns the default column model object, which is
                  a &lt;code&gt;DefaultTableColumnModel&lt;/code&gt;.  A subclass can override this
                  method to return a different column model object.                
                <return>
                    the default column model object                    
                </return>
                <see>
                    javax.swing.table.DefaultTableColumnModel                    
                </see>
            </javadoc>
            <method name="createDefaultColumnModel" type="TableColumnModel" line="5576"/>
            <javadoc line="5580">
                Returns the default selection model object, which is
                  a &lt;code&gt;DefaultListSelectionModel&lt;/code&gt;.  A subclass can override this
                  method to return a different selection model object.                
                <return>
                    the default selection model object                    
                </return>
                <see>
                    javax.swing.DefaultListSelectionModel                    
                </see>
            </javadoc>
            <method name="createDefaultSelectionModel" type="ListSelectionModel" line="5588"/>
            <javadoc line="5592">
                Returns the default table header object, which is
                  a &lt;code&gt;JTableHeader&lt;/code&gt;.  A subclass can override this
                  method to return a different table header object.                
                <return>
                    the default table header object                    
                </return>
                <see>
                    javax.swing.table.JTableHeader                    
                </see>
            </javadoc>
            <method name="createDefaultTableHeader" type="JTableHeader" line="5600"/>
            <javadoc line="5604">
                Equivalent to &lt;code&gt;revalidate&lt;/code&gt; followed by &lt;code&gt;repaint&lt;/code&gt;.                
            </javadoc>
            <method name="resizeAndRepaint" type="void" line="5607"/>
            <javadoc line="5612">
                Returns the active cell editor, which is {@code null} if the table
                  is not currently editing.                
                <return>
                    the {@code TableCellEditor} that does the editing,
                      or {@code null} if the table is not currently editing.                    
                </return>
                <see>
                    #cellEditor                    
                </see>
                <see>
                    #getCellEditor(int,int)                    
                </see>
            </javadoc>
            <method name="getCellEditor" type="TableCellEditor" line="5621"/>
            <javadoc line="5625">
                Sets the active cell editor.                
                <param>
                    anEditor the active cell editor                    
                </param>
                <see>
                    #cellEditor                    
                </see>
                <beaninfo>
                    bound: true
                      description: The table's active cell editor.                    
                </beaninfo>
            </javadoc>
            <method name="setCellEditor" type="void" line="5634">
                <params>
                    <param name="anEditor" type="TableCellEditor"/>
                </params>
                <declaration name="oldEditor" type="TableCellEditor" line="5635"/>
            </method>
            <javadoc line="5640">
                Sets the &lt;code&gt;editingColumn&lt;/code&gt; variable.                
                <param>
                    aColumn  the column of the cell to be edited                    
                </param>
                <see>
                    #editingColumn                    
                </see>
            </javadoc>
            <method name="setEditingColumn" type="void" line="5646">
                <params>
                    <param name="aColumn" type="int"/>
                </params>
            </method>
            <javadoc line="5650">
                Sets the &lt;code&gt;editingRow&lt;/code&gt; variable.                
                <param>
                    aRow  the row of the cell to be edited                    
                </param>
                <see>
                    #editingRow                    
                </see>
            </javadoc>
            <method name="setEditingRow" type="void" line="5656">
                <params>
                    <param name="aRow" type="int"/>
                </params>
            </method>
            <javadoc line="5660">
                Returns an appropriate renderer for the cell specified by this row and
                  column. If the &lt;code&gt;TableColumn&lt;/code&gt; for this column has a non-null
                  renderer, returns that.  If not, finds the class of the data in
                  this column (using &lt;code&gt;getColumnClass&lt;/code&gt;)
                  and returns the default renderer for this type of data.
                  &lt;p&gt;
                  &lt;b&gt;Note:&lt;/b&gt;
                  Throughout the table package, the internal implementations always
                  use this method to provide renderers so that this default behavior
                  can be safely overridden by a subclass.                
                <param>
                    row       the row of the cell to render, where 0 is the first row                    
                </param>
                <param>
                    column    the column of the cell to render,
                      where 0 is the first column                    
                </param>
                <return>
                    the assigned renderer; if <code>null</code>
                      returns the default renderer
                      for this type of object                    
                </return>
                <see>
                    javax.swing.table.DefaultTableCellRenderer                    
                </see>
                <see>
                    javax.swing.table.TableColumn#setCellRenderer                    
                </see>
                <see>
                    #setDefaultRenderer                    
                </see>
            </javadoc>
            <method name="getCellRenderer" type="TableCellRenderer" line="5682">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
                <declaration name="tableColumn" type="TableColumn" line="5683"/>
                <declaration name="renderer" type="TableCellRenderer" line="5684"/>
                <scope line="5685"/>
            </method>
            <javadoc line="5691">
                Prepares the renderer by querying the data model for the
                  value and selection state
                  of the cell at &lt;code&gt;row&lt;/code&gt;, &lt;code&gt;column&lt;/code&gt;.
                  Returns the component (may be a &lt;code&gt;Component&lt;/code&gt;
                  or a &lt;code&gt;JComponent&lt;/code&gt;) under the event location.
                  &lt;p&gt;
                  During a printing operation, this method will configure the
                  renderer without indicating selection or focus, to prevent
                  them from appearing in the printed output. To do other
                  customizations based on whether or not the table is being
                  printed, you can check the value of{@link javax.swing.JComponent#isPaintingForPrint()}, either here
                  or within custom renderers.
                  &lt;p&gt;
                  &lt;b&gt;Note:&lt;/b&gt;
                  Throughout the table package, the internal implementations always
                  use this method to prepare renderers so that this default behavior
                  can be safely overridden by a subclass.                
                <param>
                    renderer  the <code>TableCellRenderer</code> to prepare                    
                </param>
                <param>
                    row       the row of the cell to render, where 0 is the first row                    
                </param>
                <param>
                    column    the column of the cell to render,
                      where 0 is the first column                    
                </param>
                <return>
                    the <code>Component</code> under the event location                    
                </return>
            </javadoc>
            <method name="prepareRenderer" type="Component" line="5717">
                <params>
                    <param name="renderer" type="TableCellRenderer"/>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
                <comment line="5724">
                    Only indicate the selection and focused cell if not printing                    
                </comment>
                <declaration name="value" type="Object" line="5718"/>
                <declaration name="isSelected" type="boolean" line="5720"/>
                <declaration name="hasFocus" type="boolean" line="5721"/>
                <scope line="5724">
                    <declaration name="rowIsLead" type="boolean" line="5727"/>
                    <declaration name="colIsLead" type="boolean" line="5729"/>
                </scope>
            </method>
            <javadoc line="5740">
                Returns an appropriate editor for the cell specified by
                  &lt;code&gt;row&lt;/code&gt; and &lt;code&gt;column&lt;/code&gt;. If the
                  &lt;code&gt;TableColumn&lt;/code&gt; for this column has a non-null editor,
                  returns that.  If not, finds the class of the data in this
                  column (using &lt;code&gt;getColumnClass&lt;/code&gt;)
                  and returns the default editor for this type of data.
                  &lt;p&gt;
                  &lt;b&gt;Note:&lt;/b&gt;
                  Throughout the table package, the internal implementations always
                  use this method to provide editors so that this default behavior
                  can be safely overridden by a subclass.                
                <param>
                    row       the row of the cell to edit, where 0 is the first row                    
                </param>
                <param>
                    column    the column of the cell to edit,
                      where 0 is the first column                    
                </param>
                <return>
                    the editor for this cell;
                      if <code>null</code> return the default editor for
                      this type of cell                    
                </return>
                <see>
                    DefaultCellEditor                    
                </see>
            </javadoc>
            <method name="getCellEditor" type="TableCellEditor" line="5761">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
                <declaration name="tableColumn" type="TableColumn" line="5762"/>
                <declaration name="editor" type="TableCellEditor" line="5763"/>
                <scope line="5764"/>
            </method>
            <javadoc line="5771">
                Prepares the editor by querying the data model for the value and
                  selection state of the cell at &lt;code&gt;row&lt;/code&gt;, &lt;code&gt;column&lt;/code&gt;.
                  &lt;p&gt;
                  &lt;b&gt;Note:&lt;/b&gt;
                  Throughout the table package, the internal implementations always
                  use this method to prepare editors so that this default behavior
                  can be safely overridden by a subclass.                
                <param>
                    editor  the <code>TableCellEditor</code> to set up                    
                </param>
                <param>
                    row     the row of the cell to edit,
                      where 0 is the first row                    
                </param>
                <param>
                    column  the column of the cell to edit,
                      where 0 is the first column                    
                </param>
                <return>
                    the <code>Component</code> being edited                    
                </return>
            </javadoc>
            <method name="prepareEditor" type="Component" line="5787">
                <params>
                    <param name="editor" type="TableCellEditor"/>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
                <declaration name="value" type="Object" line="5788"/>
                <declaration name="isSelected" type="boolean" line="5789"/>
                <declaration name="comp" type="Component" line="5790"/>
                <scope line="5792">
                    <declaration name="jComp" type="JComponent" line="5793"/>
                    <scope line="5794"/>
                </scope>
            </method>
            <javadoc line="5801">
                Discards the editor object and frees the real estate it used for
                  cell rendering.                
            </javadoc>
            <method name="removeEditor" type="void" line="5805">
                <declaration name="editor" type="TableCellEditor" line="5810"/>
                <scope line="5811">
                    <scope line="5813">
                        <declaration name="focusOwner" type="Component" line="5814"/>
                        <declaration name="isFocusOwnerInTheTable" type="boolean" line="5816"/>
                        <scope line="5819"/>
                    </scope>
                    <declaration name="cellRect" type="Rectangle" line="5824"/>
                </scope>
            </method>
            <javadoc line="5839">
                See readObject() and writeObject() in JComponent for more
                  information about serialization in Swing.                
            </javadoc>
            <method name="writeObject" type="void" line="5843">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
                <scope line="5845">
                    <declaration name="count" type="byte" line="5846"/>
                    <scope line="5848"/>
                </scope>
            </method>
            <method name="readObject" type="void" line="5856">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
                <comment line="5865">
                    If ToolTipText != null, then the tooltip has already been
                     registered by JComponent.readObject() and we don&apos;t want
                     to re-register here                    
                </comment>
                <scope line="5858"/>
                <scope line="5867"/>
            </method>
            <method name="compWriteObjectNotify" type="void" line="5875">
                <comment line="5878">
                    If ToolTipText != null, then the tooltip has already been
                     unregistered by JComponent.compWriteObjectNotify()                    
                </comment>
                <scope line="5879"/>
            </method>
            <javadoc line="5884">
                Returns a string representation of this table. This method
                  is intended to be used only for debugging purposes, and the
                  content and format of the returned string may vary between
                  implementations. The returned string may be empty but may not
                  be &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    a string representation of this table                    
                </return>
            </javadoc>
            <method name="paramString" type="String" line="5893">
                <declaration name="gridColorString" type="String" line="5894"/>
                <declaration name="showHorizontalLinesString" type="String" line="5896"/>
                <declaration name="showVerticalLinesString" type="String" line="5898"/>
                <declaration name="autoResizeModeString" type="String" line="5900"/>
                <scope line="5901"/>
                <scope line="5903"/>
                <scope line="5905"/>
                <scope line="5907"/>
                <scope line="5909"/>
                <declaration name="autoCreateColumnsFromModelString" type="String" line="5912"/>
                <declaration name="preferredViewportSizeString" type="String" line="5914"/>
                <declaration name="rowSelectionAllowedString" type="String" line="5917"/>
                <declaration name="cellSelectionEnabledString" type="String" line="5919"/>
                <declaration name="selectionForegroundString" type="String" line="5921"/>
                <declaration name="selectionBackgroundString" type="String" line="5924"/>
            </method>
            <class name="CellEditorRemover" line="5949">
                <comment line="334">
                    If true, both a row selection and a column selection
                     can be non-empty at the same time, the selected cells are the
                     the cells whose row and column are both selected.                    
                </comment>
                <comment line="3837">
                    Selection, in terms of the model. This is lazily created
                     as needed.                    
                </comment>
                <comment line="3841">
                    Set to true while in the process of changing the selection.
                     If this is true the selection change is ignored.                    
                </comment>
                <comment line="3844">
                    Temporary cache of selection, in terms of model. This is only used
                     if we don&apos;t need the full weight of modelSelection.                    
                </comment>
                <comment line="3848">
                    Heights of the rows in terms of the model.                    
                </comment>
                <comment line="4066">
                    Starting index of the change, in terms of the model                    
                </comment>
                <comment line="4069">
                    Ending index of the change, in terms of the model                    
                </comment>
                <comment line="4072">
                    Type of change                    
                </comment>
                <comment line="4075">
                    Number of rows in the model                    
                </comment>
                <comment line="4078">
                    The event that triggered this.                    
                </comment>
                <comment line="4081">
                    Length of the change (end - start + 1)                    
                </comment>
                <comment line="4084">
                    True if the event indicates all the contents have changed                    
                </comment>
                <comment line="6610">
                    Listeners to track model, etc. changes to as to re-place the other
                     listeners                    
                </comment>
                <comment line="6691">
                    Listeners to echo changes to the AccessiblePropertyChange mechanism                    
                </comment>
                <comment line="6693">
                    Describes a change in the accessible table model.                    
                </comment>
                <comment line="6952">
                    AccessibleContext support                    
                </comment>
                <comment line="7047">
                    AccessibleSelection support                    
                </comment>
                <comment line="7290">
                    begin AccessibleExtendedTable implementation -------------                    
                </comment>
                <comment line="7329">
                    end of AccessibleExtendedTable implementation ------------                    
                </comment>
                <comment line="7331">
                    start of AccessibleTable implementation ------------------                    
                </comment>
                <comment line="7398">
                    Returns the total number of rows in this table.
                    
                     @return the total number of rows in this table                    
                </comment>
                <comment line="7407">
                    Returns the total number of columns in the table.
                    
                     @return the total number of columns in the table                    
                </comment>
                <comment line="7416">
                    Returns the &lt;code&gt;Accessible&lt;code&gt; at a specified row
                     and column in the table.
                    
                     @param r zero-based row of the table
                     @param c zero-based column of the table
                     @return the &lt;code&gt;Accessible&lt;code&gt; at the specified row and column
                     in the table                    
                </comment>
                <comment line="7489">
                    Private class representing a table column header                    
                </comment>
                <comment line="7904">
                    end of AccessibleTable implementation --------------------                    
                </comment>
                <comment line="8732">
                    inner class AccessibleJTableCell                    
                </comment>
                <comment line="8734">
                    Begin AccessibleJTableHeader ========== // TIGER - 4715503                    
                </comment>
                <comment line="9604">
                    inner class AccessibleJTableHeaderCell                    
                </comment>
                <implements interface="PropertyChangeListener"/>
                <declaration name="focusManager" type="KeyboardFocusManager" line="5950"/>
                <method name="CellEditorRemover" type="constructor" line="5952">
                    <params>
                        <param name="fm" type="KeyboardFocusManager"/>
                    </params>
                </method>
                <method name="propertyChange" type="void" line="5956">
                    <params>
                        <param name="ev" type="PropertyChangeEvent"/>
                    </params>
                    <comment line="5965">
                        focus remains inside the table                        
                    </comment>
                    <scope line="5957"/>
                    <declaration name="c" type="Component" line="5961"/>
                    <scope line="5962">
                        <scope line="5963"/>
                        <scope line="5967">
                            <scope line="5968">
                                <scope line="5969"/>
                            </scope>
                        </scope>
                    </scope>
                </method>
            </class>
            <javadoc line="5984">
                A convenience method that displays a printing dialog, and then prints
                  this &lt;code&gt;JTable&lt;/code&gt; in mode &lt;code&gt;PrintMode.FIT_WIDTH&lt;/code&gt;,
                  with no header or footer text. A modal progress dialog, with an abort
                  option, will be shown for the duration of printing.
                  &lt;p&gt;
                  Note: In headless mode, no dialogs are shown and printing
                  occurs on the default printer.                
                <return>
                    true, unless printing is cancelled by the user                    
                </return>
                <throws>
                    SecurityException if this thread is not allowed to
                      initiate a print job request                    
                </throws>
                <throws>
                    PrinterException if an error in the print system causes the job
                      to be aborted                    
                </throws>
                <see>
                    #print(JTable.PrintMode,MessageFormat,MessageFormat,boolean,PrintRequestAttributeSet,boolean,PrintService)                    
                </see>
                <see>
                    #getPrintable                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="print" type="boolean" line="6004"/>
            <javadoc line="6009">
                A convenience method that displays a printing dialog, and then prints
                  this &lt;code&gt;JTable&lt;/code&gt; in the given printing mode,
                  with no header or footer text. A modal progress dialog, with an abort
                  option, will be shown for the duration of printing.
                  &lt;p&gt;
                  Note: In headless mode, no dialogs are shown and printing
                  occurs on the default printer.                
                <param>
                    printMode        the printing mode that the printable should use                    
                </param>
                <return>
                    true, unless printing is cancelled by the user                    
                </return>
                <throws>
                    SecurityException if this thread is not allowed to
                      initiate a print job request                    
                </throws>
                <throws>
                    PrinterException if an error in the print system causes the job
                      to be aborted                    
                </throws>
                <see>
                    #print(JTable.PrintMode,MessageFormat,MessageFormat,boolean,PrintRequestAttributeSet,boolean,PrintService)                    
                </see>
                <see>
                    #getPrintable                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="print" type="boolean" line="6030">
                <params>
                    <param name="printMode" type="PrintMode"/>
                </params>
            </method>
            <javadoc line="6035">
                A convenience method that displays a printing dialog, and then prints
                  this &lt;code&gt;JTable&lt;/code&gt; in the given printing mode,
                  with the specified header and footer text. A modal progress dialog,
                  with an abort option, will be shown for the duration of printing.
                  &lt;p&gt;
                  Note: In headless mode, no dialogs are shown and printing
                  occurs on the default printer.                
                <param>
                    printMode        the printing mode that the printable should use                    
                </param>
                <param>
                    headerFormat     a <code>MessageFormat</code> specifying the text
                      to be used in printing a header,
                      or null for none                    
                </param>
                <param>
                    footerFormat     a <code>MessageFormat</code> specifying the text
                      to be used in printing a footer,
                      or null for none                    
                </param>
                <return>
                    true, unless printing is cancelled by the user                    
                </return>
                <throws>
                    SecurityException if this thread is not allowed to
                      initiate a print job request                    
                </throws>
                <throws>
                    PrinterException if an error in the print system causes the job
                      to be aborted                    
                </throws>
                <see>
                    #print(JTable.PrintMode,MessageFormat,MessageFormat,boolean,PrintRequestAttributeSet,boolean,PrintService)                    
                </see>
                <see>
                    #getPrintable                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="print" type="boolean" line="6064">
                <params>
                    <param name="printMode" type="PrintMode"/>
                    <param name="headerFormat" type="MessageFormat"/>
                    <param name="footerFormat" type="MessageFormat"/>
                </params>
                <declaration name="showDialogs" type="boolean" line="6066"/>
            </method>
            <javadoc line="6071">
                Prints this table, as specified by the fully featured{@link #print(JTable.PrintMode,MessageFormat,MessageFormat,boolean,PrintRequestAttributeSet,boolean,PrintService) print}method, with the default printer specified as the print service.                
                <param>
                    printMode        the printing mode that the printable should use                    
                </param>
                <param>
                    headerFormat     a <code>MessageFormat</code> specifying the text
                      to be used in printing a header,
                      or <code>null</code> for none                    
                </param>
                <param>
                    footerFormat     a <code>MessageFormat</code> specifying the text
                      to be used in printing a footer,
                      or <code>null</code> for none                    
                </param>
                <param>
                    showPrintDialog  whether or not to display a print dialog                    
                </param>
                <param>
                    attr             a <code>PrintRequestAttributeSet</code>
                      specifying any printing attributes,
                      or <code>null</code> for none                    
                </param>
                <param>
                    interactive      whether or not to print in an interactive mode                    
                </param>
                <return>
                    true, unless printing is cancelled by the user                    
                </return>
                <throws>
                    HeadlessException if the method is asked to show a printing
                      dialog or run interactively, and
                      <code>GraphicsEnvironment.isHeadless</code>
                      returns <code>true</code>                    
                </throws>
                <throws>
                    SecurityException if this thread is not allowed to
                      initiate a print job request                    
                </throws>
                <throws>
                    PrinterException if an error in the print system causes the job
                      to be aborted                    
                </throws>
                <see>
                    #print(JTable.PrintMode,MessageFormat,MessageFormat,boolean,PrintRequestAttributeSet,boolean,PrintService)                    
                </see>
                <see>
                    #getPrintable                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="print" type="boolean" line="6110">
                <params>
                    <param name="printMode" type="PrintMode"/>
                    <param name="headerFormat" type="MessageFormat"/>
                    <param name="footerFormat" type="MessageFormat"/>
                    <param name="showPrintDialog" type="boolean"/>
                    <param name="attr" type="PrintRequestAttributeSet"/>
                    <param name="interactive" type="boolean"/>
                </params>
            </method>
            <javadoc line="6121">
                Prints this &lt;code&gt;JTable&lt;/code&gt;. Takes steps that the majority of
                  developers would take in order to print a &lt;code&gt;JTable&lt;/code&gt;.
                  In short, it prepares the table, calls &lt;code&gt;getPrintable&lt;/code&gt; to
                  fetch an appropriate &lt;code&gt;Printable&lt;/code&gt;, and then sends it to the
                  printer.
                  &lt;p&gt;
                  A &lt;code&gt;boolean&lt;/code&gt; parameter allows you to specify whether or not
                  a printing dialog is displayed to the user. When it is, the user may
                  use the dialog to change the destination printer or printing attributes,
                  or even to cancel the print. Another two parameters allow for a
                  &lt;code&gt;PrintService&lt;/code&gt; and printing attributes to be specified.
                  These parameters can be used either to provide initial values for the
                  print dialog, or to specify values when the dialog is not shown.
                  &lt;p&gt;
                  A second &lt;code&gt;boolean&lt;/code&gt; parameter allows you to specify whether
                  or not to perform printing in an interactive mode. If &lt;code&gt;true&lt;/code&gt;,
                  a modal progress dialog, with an abort option, is displayed for the
                  duration of printing . This dialog also prevents any user action which
                  may affect the table. However, it can not prevent the table from being
                  modified by code (for example, another thread that posts updates using
                  &lt;code&gt;SwingUtilities.invokeLater&lt;/code&gt;). It is therefore the
                  responsibility of the developer to ensure that no other code modifies
                  the table in any way during printing (invalid modifications include
                  changes in: size, renderers, or underlying data). Printing behavior is
                  undefined when the table is changed during printing.
                  &lt;p&gt;
                  If &lt;code&gt;false&lt;/code&gt; is specified for this parameter, no dialog will
                  be displayed and printing will begin immediately on the event-dispatch
                  thread. This blocks any other events, including repaints, from being
                  processed until printing is complete. Although this effectively prevents
                  the table from being changed, it doesn&apos;t provide a good user experience.
                  For this reason, specifying &lt;code&gt;false&lt;/code&gt; is only recommended when
                  printing from an application with no visible GUI.
                  &lt;p&gt;
                  Note: Attempting to show the printing dialog or run interactively, while
                  in headless mode, will result in a &lt;code&gt;HeadlessException&lt;/code&gt;.
                  &lt;p&gt;
                  Before fetching the printable, this method will gracefully terminate
                  editing, if necessary, to prevent an editor from showing in the printed
                  result. Additionally, &lt;code&gt;JTable&lt;/code&gt; will prepare its renderers
                  during printing such that selection and focus are not indicated.
                  As far as customizing further how the table looks in the printout,
                  developers can provide custom renderers or paint code that conditionalize
                  on the value of {@link javax.swing.JComponent#isPaintingForPrint()}.
                  &lt;p&gt;
                  See {@link #getPrintable} for more description on how the table is
                  printed.                
                <param>
                    printMode        the printing mode that the printable should use                    
                </param>
                <param>
                    headerFormat     a <code>MessageFormat</code> specifying the text
                      to be used in printing a header,
                      or <code>null</code> for none                    
                </param>
                <param>
                    footerFormat     a <code>MessageFormat</code> specifying the text
                      to be used in printing a footer,
                      or <code>null</code> for none                    
                </param>
                <param>
                    showPrintDialog  whether or not to display a print dialog                    
                </param>
                <param>
                    attr             a <code>PrintRequestAttributeSet</code>
                      specifying any printing attributes,
                      or <code>null</code> for none                    
                </param>
                <param>
                    interactive      whether or not to print in an interactive mode                    
                </param>
                <param>
                    service          the destination <code>PrintService</code>,
                      or <code>null</code> to use the default printer                    
                </param>
                <return>
                    true, unless printing is cancelled by the user                    
                </return>
                <throws>
                    HeadlessException if the method is asked to show a printing
                      dialog or run interactively, and
                      <code>GraphicsEnvironment.isHeadless</code>
                      returns <code>true</code>                    
                </throws>
                <throws>
                    SecurityException if a security manager exists and its{@link java.lang.SecurityManager#checkPrintJobAccess}method disallows this thread from creating a print job request                    
                </throws>
                <throws>
                    PrinterException if an error in the print system causes the job
                      to be aborted                    
                </throws>
                <see>
                    #getPrintable                    
                </see>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="print" type="boolean" line="6206">
                <params>
                    <param name="printMode" type="PrintMode"/>
                    <param name="headerFormat" type="MessageFormat"/>
                    <param name="footerFormat" type="MessageFormat"/>
                    <param name="showPrintDialog" type="boolean"/>
                    <param name="attr" type="PrintRequestAttributeSet"/>
                    <param name="interactive" type="boolean"/>
                    <param name="service" type="PrintService"/>
                </params>
                <comment line="6209">
                    complain early if an invalid parameter is specified for headless mode                    
                </comment>
                <comment line="6221">
                    Get a PrinterJob.
                     Do this before anything with side-effects since it may throw a
                     security exception - in which case we don&apos;t want to do anything else.                    
                </comment>
                <comment line="6227">
                    try to stop cell editing, and failing that, cancel it                    
                </comment>
                <comment line="6239">
                    fetch the Printable                    
                </comment>
                <comment line="6244">
                    wrap the Printable so that we can print on another thread                    
                </comment>
                <comment line="6249">
                    to please compiler                    
                </comment>
                <comment line="6253">
                    set the printable on the PrinterJob                    
                </comment>
                <comment line="6256">
                    if specified, set the PrintService on the PrinterJob                    
                </comment>
                <comment line="6261">
                    if requested, show the print dialog                    
                </comment>
                <comment line="6263">
                    the user cancelled the print dialog                    
                </comment>
                <comment line="6267">
                    if not interactive, just print on this thread (no dialog)                    
                </comment>
                <comment line="6269">
                    do the printing                    
                </comment>
                <comment line="6272">
                    we&apos;re done                    
                </comment>
                <comment line="6276">
                    make sure this is clear since we&apos;ll check it after                    
                </comment>
                <comment line="6279">
                    to synchronize on                    
                </comment>
                <comment line="6282">
                    copied so we can access from the inner class                    
                </comment>
                <comment line="6285">
                    this runnable will be used to do the printing
                     (and save any throwables) on another thread                    
                </comment>
                <comment line="6290">
                    do the printing                    
                </comment>
                <comment line="6293">
                    save any Throwable to be rethrown                    
                </comment>
                <comment line="6298">
                    we&apos;re finished - hide the dialog                    
                </comment>
                <comment line="6304">
                    start printing on another thread                    
                </comment>
                <comment line="6310">
                    look for any error that the printing may have generated                    
                </comment>
                <comment line="6317">
                    check the type of error and handle it                    
                </comment>
                <comment line="6319">
                    a subclass of PrinterException meaning the job was aborted,
                     in this case, by the user                    
                </comment>
                <comment line="6331">
                    can not happen                    
                </comment>
                <declaration name="isHeadless" type="boolean" line="6209"/>
                <scope line="6210">
                    <scope line="6211"/>
                    <scope line="6215"/>
                </scope>
                <declaration name="job" type="PrinterJob" line="6223"/>
                <scope line="6225">
                    <scope line="6227"/>
                </scope>
                <scope line="6232"/>
                <declaration name="printingStatus" type="PrintingStatus" line="6236"/>
                <declaration name="printable" type="Printable" line="6239"/>
                <scope line="6242"/>
                <scope line="6247"/>
                <scope line="6256"/>
                <scope line="6261"/>
                <scope line="6267"/>
                <declaration name="lock" type="Object" line="6279"/>
                <declaration name="copyAttr" type="PrintRequestAttributeSet" line="6282"/>
                <anonymous_class line="6286">
                    <method name="run" type="void" line="6287">
                        <comment line="6290">
                            do the printing                            
                        </comment>
                        <comment line="6293">
                            save any Throwable to be rethrown                            
                        </comment>
                        <comment line="6298">
                            we&apos;re finished - hide the dialog                            
                        </comment>
                        <scope line="6288"/>
                        <scope line="6291">
                            <scope line="6293"/>
                        </scope>
                        <scope line="6296"/>
                    </method>
                </anonymous_class>
                <declaration name="runnable" type="Runnable" line="6286"/>
                <declaration name="th" type="Thread" line="6304"/>
                <declaration name="pe" type="Throwable" line="6310"/>
                <scope line="6311"/>
                <scope line="6317">
                    <scope line="6320"/>
                    <scope line="6322"/>
                    <scope line="6324"/>
                    <scope line="6326"/>
                </scope>
            </method>
            <javadoc line="6337">
                Return a &lt;code&gt;Printable&lt;/code&gt; for use in printing this JTable.
                  &lt;p&gt;
                  This method is meant for those wishing to customize the default
                  &lt;code&gt;Printable&lt;/code&gt; implementation used by &lt;code&gt;JTable&lt;/code&gt;&apos;s
                  &lt;code&gt;print&lt;/code&gt; methods. Developers wanting simply to print the table
                  should use one of those methods directly.
                  &lt;p&gt;
                  The &lt;code&gt;Printable&lt;/code&gt; can be requested in one of two printing modes.
                  In both modes, it spreads table rows naturally in sequence across
                  multiple pages, fitting as many rows as possible per page.
                  &lt;code&gt;PrintMode.NORMAL&lt;/code&gt; specifies that the table be
                  printed at its current size. In this mode, there may be a need to spread
                  columns across pages in a similar manner to that of the rows. When the
                  need arises, columns are distributed in an order consistent with the
                  table&apos;s &lt;code&gt;ComponentOrientation&lt;/code&gt;.
                  &lt;code&gt;PrintMode.FIT_WIDTH&lt;/code&gt; specifies that the output be
                  scaled smaller, if necessary, to fit the table&apos;s entire width
                  (and thereby all columns) on each page. Width and height are scaled
                  equally, maintaining the aspect ratio of the output.
                  &lt;p&gt;
                  The &lt;code&gt;Printable&lt;/code&gt; heads the portion of table on each page
                  with the appropriate section from the table&apos;s &lt;code&gt;JTableHeader&lt;/code&gt;,
                  if it has one.
                  &lt;p&gt;
                  Header and footer text can be added to the output by providing
                  &lt;code&gt;MessageFormat&lt;/code&gt; arguments. The printing code requests
                  Strings from the formats, providing a single item which may be included
                  in the formatted string: an &lt;code&gt;Integer&lt;/code&gt; representing the current
                  page number.
                  &lt;p&gt;
                  You are encouraged to read the documentation for
                  &lt;code&gt;MessageFormat&lt;/code&gt; as some characters, such as single-quote,
                  are special and need to be escaped.
                  &lt;p&gt;
                  Here&apos;s an example of creating a &lt;code&gt;MessageFormat&lt;/code&gt; that can be
                  used to print &quot;Duke&apos;s Table: Page - &quot; and the current page number:
                  &lt;p&gt;
                  &lt;pre&gt;
                  // notice the escaping of the single quote
                  // notice how the page number is included with &quot;{0}&quot;
                  MessageFormat format = new MessageFormat(&quot;Duke&apos;&apos;s Table: Page - {0}&quot;);
                  &lt;/pre&gt;
                  &lt;p&gt;
                  The &lt;code&gt;Printable&lt;/code&gt; constrains what it draws to the printable
                  area of each page that it prints. Under certain circumstances, it may
                  find it impossible to fit all of a page&apos;s content into that area. In
                  these cases the output may be clipped, but the implementation
                  makes an effort to do something reasonable. Here are a few situations
                  where this is known to occur, and how they may be handled by this
                  particular implementation:
                  &lt;ul&gt;
                  &lt;li&gt;In any mode, when the header or footer text is too wide to fit
                  completely in the printable area -- print as much of the text as
                  possible starting from the beginning, as determined by the table&apos;s
                  &lt;code&gt;ComponentOrientation&lt;/code&gt;.
                  &lt;li&gt;In any mode, when a row is too tall to fit in the
                  printable area -- print the upper-most portion of the row
                  and paint no lower border on the table.
                  &lt;li&gt;In &lt;code&gt;PrintMode.NORMAL&lt;/code&gt; when a column
                  is too wide to fit in the printable area -- print the center
                  portion of the column and leave the left and right borders
                  off the table.
                  &lt;/ul&gt;
                  &lt;p&gt;
                  It is entirely valid for this &lt;code&gt;Printable&lt;/code&gt; to be wrapped
                  inside another in order to create complex reports and documents. You may
                  even request that different pages be rendered into different sized
                  printable areas. The implementation must be prepared to handle this
                  (possibly by doing its layout calculations on the fly). However,
                  providing different heights to each page will likely not work well
                  with &lt;code&gt;PrintMode.NORMAL&lt;/code&gt; when it has to spread columns
                  across pages.
                  &lt;p&gt;
                  As far as customizing how the table looks in the printed result,
                  &lt;code&gt;JTable&lt;/code&gt; itself will take care of hiding the selection
                  and focus during printing. For additional customizations, your
                  renderers or painting code can customize the look based on the value
                  of {@link javax.swing.JComponent#isPaintingForPrint()}&lt;p&gt;
                  Also, &lt;i&gt;before&lt;/i&gt; calling this method you may wish to &lt;i&gt;first&lt;/i&gt;
                  modify the state of the table, such as to cancel cell editing or
                  have the user size the table appropriately. However, you must not
                  modify the state of the table &lt;i&gt;after&lt;/i&gt; this &lt;code&gt;Printable&lt;/code&gt;
                  has been fetched (invalid modifications include changes in size or
                  underlying data). The behavior of the returned &lt;code&gt;Printable&lt;/code&gt;
                  is undefined once the table has been changed.                
                <param>
                    printMode     the printing mode that the printable should use                    
                </param>
                <param>
                    headerFormat  a <code>MessageFormat</code> specifying the text to
                      be used in printing a header, or null for none                    
                </param>
                <param>
                    footerFormat  a <code>MessageFormat</code> specifying the text to
                      be used in printing a footer, or null for none                    
                </param>
                <return>
                    a <code>Printable</code> for printing this JTable                    
                </return>
                <see>
                    #print(JTable.PrintMode,MessageFormat,MessageFormat,boolean,PrintRequestAttributeSet,boolean)                    
                </see>
                <see>
                    Printable                    
                </see>
                <see>
                    PrinterJob                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getPrintable" type="Printable" line="6440">
                <params>
                    <param name="printMode" type="PrintMode"/>
                    <param name="headerFormat" type="MessageFormat"/>
                    <param name="footerFormat" type="MessageFormat"/>
                </params>
            </method>
            <class name="ThreadSafePrintable" line="6446">
                <comment line="334">
                    If true, both a row selection and a column selection
                     can be non-empty at the same time, the selected cells are the
                     the cells whose row and column are both selected.                    
                </comment>
                <comment line="3837">
                    Selection, in terms of the model. This is lazily created
                     as needed.                    
                </comment>
                <comment line="3841">
                    Set to true while in the process of changing the selection.
                     If this is true the selection change is ignored.                    
                </comment>
                <comment line="3844">
                    Temporary cache of selection, in terms of model. This is only used
                     if we don&apos;t need the full weight of modelSelection.                    
                </comment>
                <comment line="3848">
                    Heights of the rows in terms of the model.                    
                </comment>
                <comment line="4066">
                    Starting index of the change, in terms of the model                    
                </comment>
                <comment line="4069">
                    Ending index of the change, in terms of the model                    
                </comment>
                <comment line="4072">
                    Type of change                    
                </comment>
                <comment line="4075">
                    Number of rows in the model                    
                </comment>
                <comment line="4078">
                    The event that triggered this.                    
                </comment>
                <comment line="4081">
                    Length of the change (end - start + 1)                    
                </comment>
                <comment line="4084">
                    True if the event indicates all the contents have changed                    
                </comment>
                <comment line="6610">
                    Listeners to track model, etc. changes to as to re-place the other
                     listeners                    
                </comment>
                <comment line="6691">
                    Listeners to echo changes to the AccessiblePropertyChange mechanism                    
                </comment>
                <comment line="6693">
                    Describes a change in the accessible table model.                    
                </comment>
                <comment line="6952">
                    AccessibleContext support                    
                </comment>
                <comment line="7047">
                    AccessibleSelection support                    
                </comment>
                <comment line="7290">
                    begin AccessibleExtendedTable implementation -------------                    
                </comment>
                <comment line="7329">
                    end of AccessibleExtendedTable implementation ------------                    
                </comment>
                <comment line="7331">
                    start of AccessibleTable implementation ------------------                    
                </comment>
                <comment line="7398">
                    Returns the total number of rows in this table.
                    
                     @return the total number of rows in this table                    
                </comment>
                <comment line="7407">
                    Returns the total number of columns in the table.
                    
                     @return the total number of columns in the table                    
                </comment>
                <comment line="7416">
                    Returns the &lt;code&gt;Accessible&lt;code&gt; at a specified row
                     and column in the table.
                    
                     @param r zero-based row of the table
                     @param c zero-based column of the table
                     @return the &lt;code&gt;Accessible&lt;code&gt; at the specified row and column
                     in the table                    
                </comment>
                <comment line="7489">
                    Private class representing a table column header                    
                </comment>
                <comment line="7904">
                    end of AccessibleTable implementation --------------------                    
                </comment>
                <comment line="8732">
                    inner class AccessibleJTableCell                    
                </comment>
                <comment line="8734">
                    Begin AccessibleJTableHeader ========== // TIGER - 4715503                    
                </comment>
                <comment line="9604">
                    inner class AccessibleJTableHeaderCell                    
                </comment>
                <implements interface="Printable"/>
                <javadoc line="6446">
                    A &lt;code&gt;Printable&lt;/code&gt; implementation that wraps another
                      &lt;code&gt;Printable&lt;/code&gt;, making it safe for printing on another thread.                    
                </javadoc>
                <declaration name="printDelegate" type="Printable" line="6452"/>
                <javadoc line="6452">
                    The delegate &lt;code&gt;Printable&lt;/code&gt;.                    
                </javadoc>
                <declaration name="retVal" type="int" line="6455"/>
                <javadoc line="6455">
                    To communicate any return value when delegating.                    
                </javadoc>
                <declaration name="retThrowable" type="Throwable" line="6460"/>
                <javadoc line="6460">
                    To communicate any &lt;code&gt;Throwable&lt;/code&gt; when delegating.                    
                </javadoc>
                <javadoc line="6465">
                    Construct a &lt;code&gt;ThreadSafePrintable&lt;/code&gt; around the given
                      delegate.                    
                    <param>
                        printDelegate the <code>Printable</code> to delegate to                        
                    </param>
                </javadoc>
                <method name="ThreadSafePrintable" type="constructor" line="6471">
                    <params>
                        <param name="printDelegate" type="Printable"/>
                    </params>
                </method>
                <javadoc line="6475">
                    Prints the specified page into the given {@link Graphics}context, in the specified format.
                      &lt;p&gt;
                      Regardless of what thread this method is called on, all calls into
                      the delegate will be done on the event-dispatch thread.                    
                    <param>
                        graphics    the context into which the page is drawn                        
                    </param>
                    <param>
                        pageFormat  the size and orientation of the page being drawn                        
                    </param>
                    <param>
                        pageIndex   the zero based index of the page to be drawn                        
                    </param>
                    <return>
                        PAGE_EXISTS if the page is rendered successfully, or
                          NO_SUCH_PAGE if a non-existent page index is specified                        
                    </return>
                    <throws>
                        PrinterException if an error causes printing to be aborted                        
                    </throws>
                </javadoc>
                <method name="print" type="int" line="6491">
                    <params>
                        <param name="graphics" type="Graphics"/>
                        <param name="pageFormat" type="PageFormat"/>
                        <param name="pageIndex" type="int"/>
                    </params>
                    <comment line="6494">
                        We&apos;ll use this Runnable                        
                    </comment>
                    <comment line="6498">
                        call into the delegate and save the return value                        
                    </comment>
                    <comment line="6501">
                        save any Throwable to be rethrown                        
                    </comment>
                    <comment line="6504">
                        notify the caller that we&apos;re done                        
                    </comment>
                    <comment line="6511">
                        make sure these are initialized                        
                    </comment>
                    <comment line="6515">
                        call into the EDT                        
                    </comment>
                    <comment line="6518">
                        wait for the runnable to finish                        
                    </comment>
                    <comment line="6523">
                        short process, safe to ignore interrupts                        
                    </comment>
                    <comment line="6527">
                        if the delegate threw a throwable, rethrow it here                        
                    </comment>
                    <comment line="6537">
                        can not happen                        
                    </comment>
                    <anonymous_class line="6494">
                        <method name="run" type="void" line="6495">
                            <comment line="6498">
                                call into the delegate and save the return value                                
                            </comment>
                            <comment line="6501">
                                save any Throwable to be rethrown                                
                            </comment>
                            <comment line="6504">
                                notify the caller that we&apos;re done                                
                            </comment>
                            <scope line="6496"/>
                            <scope line="6499"/>
                            <scope line="6502"/>
                        </method>
                    </anonymous_class>
                    <declaration name="runnable" type="Runnable" line="6494"/>
                    <scope line="6509">
                        <scope line="6518">
                            <scope line="6519"/>
                            <scope line="6521"/>
                        </scope>
                        <scope line="6527">
                            <scope line="6528"/>
                            <scope line="6530"/>
                            <scope line="6532"/>
                        </scope>
                    </scope>
                </method>
            </class>
            <javadoc line="6550">
                Gets the AccessibleContext associated with this JTable.
                  For tables, the AccessibleContext takes the form of an
                  AccessibleJTable.
                  A new AccessibleJTable instance is created if necessary.                
                <return>
                    an AccessibleJTable that serves as the
                      AccessibleContext of this JTable                    
                </return>
            </javadoc>
            <method name="getAccessibleContext" type="AccessibleContext" line="6559">
                <scope line="6560"/>
            </method>
            <class name="AccessibleJTable" line="6570">
                <extends class="AccessibleJComponent"/>
                <comment line="334">
                    If true, both a row selection and a column selection
                     can be non-empty at the same time, the selected cells are the
                     the cells whose row and column are both selected.                    
                </comment>
                <comment line="3837">
                    Selection, in terms of the model. This is lazily created
                     as needed.                    
                </comment>
                <comment line="3841">
                    Set to true while in the process of changing the selection.
                     If this is true the selection change is ignored.                    
                </comment>
                <comment line="3844">
                    Temporary cache of selection, in terms of model. This is only used
                     if we don&apos;t need the full weight of modelSelection.                    
                </comment>
                <comment line="3848">
                    Heights of the rows in terms of the model.                    
                </comment>
                <comment line="4066">
                    Starting index of the change, in terms of the model                    
                </comment>
                <comment line="4069">
                    Ending index of the change, in terms of the model                    
                </comment>
                <comment line="4072">
                    Type of change                    
                </comment>
                <comment line="4075">
                    Number of rows in the model                    
                </comment>
                <comment line="4078">
                    The event that triggered this.                    
                </comment>
                <comment line="4081">
                    Length of the change (end - start + 1)                    
                </comment>
                <comment line="4084">
                    True if the event indicates all the contents have changed                    
                </comment>
                <comment line="6610">
                    Listeners to track model, etc. changes to as to re-place the other
                     listeners                    
                </comment>
                <comment line="6691">
                    Listeners to echo changes to the AccessiblePropertyChange mechanism                    
                </comment>
                <comment line="6693">
                    Describes a change in the accessible table model.                    
                </comment>
                <comment line="6952">
                    AccessibleContext support                    
                </comment>
                <comment line="7047">
                    AccessibleSelection support                    
                </comment>
                <comment line="7290">
                    begin AccessibleExtendedTable implementation -------------                    
                </comment>
                <comment line="7329">
                    end of AccessibleExtendedTable implementation ------------                    
                </comment>
                <comment line="7331">
                    start of AccessibleTable implementation ------------------                    
                </comment>
                <comment line="7398">
                    Returns the total number of rows in this table.
                    
                     @return the total number of rows in this table                    
                </comment>
                <comment line="7407">
                    Returns the total number of columns in the table.
                    
                     @return the total number of columns in the table                    
                </comment>
                <comment line="7416">
                    Returns the &lt;code&gt;Accessible&lt;code&gt; at a specified row
                     and column in the table.
                    
                     @param r zero-based row of the table
                     @param c zero-based column of the table
                     @return the &lt;code&gt;Accessible&lt;code&gt; at the specified row and column
                     in the table                    
                </comment>
                <comment line="7489">
                    Private class representing a table column header                    
                </comment>
                <comment line="7904">
                    end of AccessibleTable implementation --------------------                    
                </comment>
                <comment line="8732">
                    inner class AccessibleJTableCell                    
                </comment>
                <comment line="8734">
                    Begin AccessibleJTableHeader ========== // TIGER - 4715503                    
                </comment>
                <comment line="9604">
                    inner class AccessibleJTableHeaderCell                    
                </comment>
                <implements interface="AccessibleSelection"/>
                <implements interface="ListSelectionListener"/>
                <implements interface="TableModelListener"/>
                <implements interface="TableColumnModelListener"/>
                <implements interface="CellEditorListener"/>
                <implements interface="PropertyChangeListener"/>
                <implements interface="AccessibleExtendedTable"/>
                <javadoc line="6570">
                    This class implements accessibility support for the
                      &lt;code&gt;JTable&lt;/code&gt; class.  It provides an implementation of the
                      Java Accessibility API appropriate to table user-interface elements.
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      Serialized objects of this class will not be compatible with
                      future Swing releases. The current serialization support is
                      appropriate for short term storage or RMI between applications running
                      the same version of Swing.  As of 1.4, support for long term storage
                      of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                      has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                      Please see {@link java.beans.XMLEncoder}.                    
                </javadoc>
                <declaration name="lastSelectedRow" type="int" line="6589"/>
                <declaration name="lastSelectedCol" type="int" line="6590"/>
                <javadoc line="6592">
                    AccessibleJTable constructor                    
                    <since>
                        1.5                        
                    </since>
                </javadoc>
                <method name="AccessibleJTable" type="constructor" line="6597">
                    <declaration name="tcm" type="TableColumnModel" line="6601"/>
                </method>
                <javadoc line="6612">
                    Track changes to selection model, column model, etc. so as to
                      be able to re-place listeners on those in order to pass on
                      information to the Accessibility PropertyChange mechanism                    
                </javadoc>
                <method name="propertyChange" type="void" line="6617">
                    <params>
                        <param name="e" type="PropertyChangeEvent"/>
                    </params>
                    <comment line="6623">
                        re-set tableModel listeners                        
                    </comment>
                    <comment line="6633">
                        re-set selectionModel listeners                        
                    </comment>
                    <comment line="6637">
                        row selection model                        
                    </comment>
                    <comment line="6660">
                        System.out.println(&quot;!!! Bug in source of selectionModel propertyChangeEvent&quot;);                        
                    </comment>
                    <comment line="6663">
                        re-set columnModel listeners
                         and column&apos;s selection property listener as well                        
                    </comment>
                    <comment line="6678">
                        re-se cellEditor listeners                        
                    </comment>
                    <declaration name="name" type="String" line="6618"/>
                    <declaration name="oldValue" type="Object" line="6619"/>
                    <declaration name="newValue" type="Object" line="6620"/>
                    <scope line="6623">
                        <scope line="6625"/>
                        <scope line="6628"/>
                    </scope>
                    <scope line="6633">
                        <declaration name="source" type="Object" line="6635"/>
                        <scope line="6636">
                            <scope line="6639"/>
                            <scope line="6643"/>
                        </scope>
                        <scope line="6647">
                            <scope line="6650"/>
                            <scope line="6654"/>
                        </scope>
                        <scope line="6658"/>
                    </scope>
                    <scope line="6664">
                        <scope line="6666">
                            <declaration name="tcm" type="TableColumnModel" line="6667"/>
                        </scope>
                        <scope line="6671">
                            <declaration name="tcm" type="TableColumnModel" line="6672"/>
                        </scope>
                    </scope>
                    <scope line="6678">
                        <scope line="6680"/>
                        <scope line="6683"/>
                    </scope>
                </method>
                <class name="AccessibleJTableModelChange" line="6695">
                    <comment line="7986">
                        AccessibleContext methods                        
                    </comment>
                    <comment line="8025">
                        *** should check toolTip text for desc. (needs MouseEvent)                        
                    </comment>
                    <comment line="8275">
                        AccessibleComponent methods                        
                    </comment>
                    <comment line="8777">
                        Returns the AccessibleContext for the header cell
                         renderer.                        
                    </comment>
                    <comment line="8785">
                        Returns the component that renders the header cell.                        
                    </comment>
                    <comment line="8792">
                        AccessibleContext methods ==========                        
                    </comment>
                    <comment line="9076">
                        AccessibleComponent methods ==========                        
                    </comment>
                    <implements interface="AccessibleTableModelChange"/>
                    <declaration name="type" type="int" line="6698"/>
                    <declaration name="firstRow" type="int" line="6699"/>
                    <declaration name="lastRow" type="int" line="6700"/>
                    <declaration name="firstColumn" type="int" line="6701"/>
                    <declaration name="lastColumn" type="int" line="6702"/>
                    <method name="AccessibleJTableModelChange" type="constructor" line="6706">
                        <params>
                            <param name="type" type="int"/>
                            <param name="firstRow" type="int"/>
                            <param name="lastRow" type="int"/>
                            <param name="firstColumn" type="int"/>
                            <param name="lastColumn" type="int"/>
                        </params>
                    </method>
                    <method name="getType" type="int" line="6714"/>
                    <method name="getFirstRow" type="int" line="6718"/>
                    <method name="getLastRow" type="int" line="6722"/>
                    <method name="getFirstColumn" type="int" line="6726"/>
                    <method name="getLastColumn" type="int" line="6730"/>
                </class>
                <javadoc line="6735">
                    Track changes to the table contents                    
                </javadoc>
                <method name="tableChanged" type="void" line="6738">
                    <params>
                        <param name="e" type="TableModelEvent"/>
                    </params>
                    <comment line="6750">
                        Fire a property change event indicating the table model
                         has changed.                        
                    </comment>
                    <scope line="6741">
                        <declaration name="firstColumn" type="int" line="6742"/>
                        <declaration name="lastColumn" type="int" line="6743"/>
                        <scope line="6744"/>
                        <declaration name="change" type="AccessibleJTableModelChange" line="6751"/>
                    </scope>
                </method>
                <javadoc line="6762">
                    Track changes to the table contents (row insertions)                    
                </javadoc>
                <method name="tableRowsInserted" type="void" line="6765">
                    <params>
                        <param name="e" type="TableModelEvent"/>
                    </params>
                    <comment line="6770">
                        Fire a property change event indicating the table model
                         has changed.                        
                    </comment>
                    <declaration name="firstColumn" type="int" line="6771"/>
                    <declaration name="lastColumn" type="int" line="6772"/>
                    <scope line="6773"/>
                    <declaration name="change" type="AccessibleJTableModelChange" line="6777"/>
                </method>
                <javadoc line="6787">
                    Track changes to the table contents (row deletions)                    
                </javadoc>
                <method name="tableRowsDeleted" type="void" line="6790">
                    <params>
                        <param name="e" type="TableModelEvent"/>
                    </params>
                    <comment line="6795">
                        Fire a property change event indicating the table model
                         has changed.                        
                    </comment>
                    <declaration name="firstColumn" type="int" line="6796"/>
                    <declaration name="lastColumn" type="int" line="6797"/>
                    <scope line="6798"/>
                    <declaration name="change" type="AccessibleJTableModelChange" line="6802"/>
                </method>
                <javadoc line="6812">
                    Track changes to the table contents (column insertions)                    
                </javadoc>
                <method name="columnAdded" type="void" line="6815">
                    <params>
                        <param name="e" type="TableColumnModelEvent"/>
                    </params>
                    <comment line="6820">
                        Fire a property change event indicating the table model
                         has changed.                        
                    </comment>
                    <declaration name="type" type="int" line="6821"/>
                    <declaration name="change" type="AccessibleJTableModelChange" line="6822"/>
                </method>
                <javadoc line="6832">
                    Track changes to the table contents (column deletions)                    
                </javadoc>
                <method name="columnRemoved" type="void" line="6835">
                    <params>
                        <param name="e" type="TableColumnModelEvent"/>
                    </params>
                    <comment line="6839">
                        Fire a property change event indicating the table model
                         has changed.                        
                    </comment>
                    <declaration name="type" type="int" line="6840"/>
                    <declaration name="change" type="AccessibleJTableModelChange" line="6841"/>
                </method>
                <javadoc line="6851">
                    Track changes of a column repositioning.                    
                    <see>
                        TableColumnModelListener                        
                    </see>
                </javadoc>
                <method name="columnMoved" type="void" line="6856">
                    <params>
                        <param name="e" type="TableColumnModelEvent"/>
                    </params>
                    <comment line="6861">
                        Fire property change events indicating the table model
                         has changed.                        
                    </comment>
                    <declaration name="type" type="int" line="6862"/>
                    <declaration name="change" type="AccessibleJTableModelChange" line="6863"/>
                    <declaration name="type2" type="int" line="6872"/>
                    <declaration name="change2" type="AccessibleJTableModelChange" line="6873"/>
                </method>
                <javadoc line="6883">
                    Track changes of a column moving due to margin changes.                    
                    <see>
                        TableColumnModelListener                        
                    </see>
                </javadoc>
                <method name="columnMarginChanged" type="void" line="6888">
                    <params>
                        <param name="e" type="ChangeEvent"/>
                    </params>
                </method>
                <javadoc line="6893">
                    Track that the selection model of the TableColumnModel changed.                    
                    <see>
                        TableColumnModelListener                        
                    </see>
                </javadoc>
                <method name="columnSelectionChanged" type="void" line="6898">
                    <params>
                        <param name="e" type="ListSelectionEvent"/>
                    </params>
                    <comment line="6900">
                        we should now re-place our TableColumn listener                        
                    </comment>
                </method>
                <javadoc line="6902">
                    Track changes to a cell&apos;s contents.
                      Invoked when editing is finished. The changes are saved, the
                      editor object is discarded, and the cell is rendered once again.                    
                    <see>
                        CellEditorListener                        
                    </see>
                </javadoc>
                <method name="editingStopped" type="void" line="6910">
                    <params>
                        <param name="e" type="ChangeEvent"/>
                    </params>
                    <comment line="6912">
                        it&apos;d be great if we could figure out which cell, and pass that
                         somehow as a parameter                        
                    </comment>
                </method>
                <javadoc line="6917">
                    Invoked when editing is canceled. The editor object is discarded
                      and the cell is rendered once again.                    
                    <see>
                        CellEditorListener                        
                    </see>
                </javadoc>
                <method name="editingCanceled" type="void" line="6923">
                    <params>
                        <param name="e" type="ChangeEvent"/>
                    </params>
                    <comment line="6925">
                        nothing to report, &apos;cause nothing changed                        
                    </comment>
                </method>
                <javadoc line="6927">
                    Track changes to table cell selections                    
                </javadoc>
                <method name="valueChanged" type="void" line="6930">
                    <params>
                        <param name="e" type="ListSelectionEvent"/>
                    </params>
                    <declaration name="selectedRow" type="int" line="6934"/>
                    <declaration name="selectedCol" type="int" line="6935"/>
                    <scope line="6937">
                        <declaration name="oldA" type="Accessible" line="6938"/>
                        <declaration name="newA" type="Accessible" line="6940"/>
                    </scope>
                </method>
                <javadoc line="6953">
                    Get the AccessibleSelection associated with this object.  In the
                      implementation of the Java Accessibility API for this class,
                      return this object, which is responsible for implementing the
                      AccessibleSelection interface on behalf of itself.                    
                    <return>
                        this object                        
                    </return>
                </javadoc>
                <method name="getAccessibleSelection" type="AccessibleSelection" line="6961"/>
                <javadoc line="6965">
                    Gets the role of this object.                    
                    <return>
                        an instance of AccessibleRole describing the role of the
                          object                        
                    </return>
                    <see>
                        AccessibleRole                        
                    </see>
                </javadoc>
                <method name="getAccessibleRole" type="AccessibleRole" line="6972"/>
                <javadoc line="6976">
                    Returns the &lt;code&gt;Accessible&lt;/code&gt; child, if one exists,
                      contained at the local coordinate &lt;code&gt;Point&lt;/code&gt;.                    
                    <param>
                        p the point defining the top-left corner of the
                          <code>Accessible</code>, given in the coordinate space
                          of the object's parent                        
                    </param>
                    <return>
                        the <code>Accessible</code>, if it exists,
                          at the specified location; else <code>null</code>                        
                    </return>
                </javadoc>
                <method name="getAccessibleAt" type="Accessible" line="6986">
                    <params>
                        <param name="p" type="Point"/>
                    </params>
                    <declaration name="column" type="int" line="6987"/>
                    <declaration name="row" type="int" line="6988"/>
                    <scope line="6990">
                        <declaration name="aColumn" type="TableColumn" line="6991"/>
                        <declaration name="renderer" type="TableCellRenderer" line="6992"/>
                        <scope line="6993">
                            <declaration name="columnClass" type="Class&lt;?&gt;" line="6994"/>
                        </scope>
                        <declaration name="component" type="Component" line="6997"/>
                    </scope>
                </method>
                <javadoc line="7006">
                    Returns the number of accessible children in the object.  If all
                      of the children of this object implement &lt;code&gt;Accessible&lt;/code&gt;,
                      then this method should return the number of children of this object.                    
                    <return>
                        the number of accessible children in the object                        
                    </return>
                </javadoc>
                <method name="getAccessibleChildrenCount" type="int" line="7013"/>
                <javadoc line="7017">
                    Returns the nth &lt;code&gt;Accessible&lt;/code&gt; child of the object.                    
                    <param>
                        i zero-based index of child                        
                    </param>
                    <return>
                        the nth Accessible child of the object                        
                    </return>
                </javadoc>
                <method name="getAccessibleChild" type="Accessible" line="7023">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                    <comment line="7028">
                        children increase across, and then down, for tables
                         (arbitrary decision)                        
                    </comment>
                    <scope line="7024"/>
                    <scope line="7026">
                        <declaration name="column" type="int" line="7029"/>
                        <declaration name="row" type="int" line="7030"/>
                        <declaration name="aColumn" type="TableColumn" line="7032"/>
                        <declaration name="renderer" type="TableCellRenderer" line="7033"/>
                        <scope line="7034">
                            <declaration name="columnClass" type="Class&lt;?&gt;" line="7035"/>
                        </scope>
                        <declaration name="component" type="Component" line="7038"/>
                    </scope>
                </method>
                <javadoc line="7048">
                    Returns the number of &lt;code&gt;Accessible&lt;/code&gt; children
                      currently selected.
                      If no children are selected, the return value will be 0.                    
                    <return>
                        the number of items currently selected                        
                    </return>
                </javadoc>
                <method name="getAccessibleSelectionCount" type="int" line="7055">
                    <comment line="7060">
                        a contiguous block                        
                    </comment>
                    <comment line="7064">
                        a column swath and a row swath, with a shared block                        
                    </comment>
                    <comment line="7071">
                        just one or more rows in selection                        
                    </comment>
                    <comment line="7075">
                        just one or more rows in selection                        
                    </comment>
                    <comment line="7080">
                        JTable doesn&apos;t allow selections                        
                    </comment>
                    <declaration name="rowsSel" type="int" line="7056"/>
                    <declaration name="colsSel" type="int" line="7057"/>
                    <scope line="7059"/>
                    <scope line="7062">
                        <scope line="7065"/>
                        <scope line="7071"/>
                        <scope line="7075"/>
                        <scope line="7078"/>
                    </scope>
                </method>
                <javadoc line="7084">
                    Returns an &lt;code&gt;Accessible&lt;/code&gt; representing the
                      specified selected child in the object.  If there
                      isn&apos;t a selection, or there are fewer children selected
                      than the integer passed in, the return
                      value will be &lt;code&gt;null&lt;/code&gt;.
                      &lt;p&gt;Note that the index represents the i-th selected child, which
                      is different from the i-th child.                    
                    <param>
                        i the zero-based index of selected children                        
                    </param>
                    <return>
                        the i-th selected child                        
                    </return>
                    <see>
                        #getAccessibleSelectionCount                        
                    </see>
                </javadoc>
                <method name="getAccessibleSelection" type="Accessible" line="7097">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                    <comment line="7112">
                        a contiguous block                        
                    </comment>
                    <comment line="7118">
                        a column swath and a row swath, with a shared block                        
                    </comment>
                    <comment line="7122">
                        Situation:
                           We have a table, like the 6x3 table below,
                           wherein three colums and one row selected
                           (selected cells marked with &quot;*&quot;, unselected &quot;0&quot;):
                        
                                    0 * 0 * * 0
                                    * * * * * *
                                    0 * 0 * * 0                        
                    </comment>
                    <comment line="7132">
                        State machine below walks through the array of
                         selected rows in two states: in a selected row,
                         and not in one; continuing until we are in a row
                         in which the ith selection exists.  Then we return
                         the appropriate cell.  In the state machine, we
                         always do rows above the &quot;current&quot; selected row first,
                         then the cells in the selected row.  If we&apos;re done
                         with the state machine before finding the requested
                         selected child, we handle the rows below the last
                         selected row at the end.                        
                    </comment>
                    <comment line="7152">
                        on individual row full of selections                        
                    </comment>
                    <comment line="7153">
                        it&apos;s here!                        
                    </comment>
                    <comment line="7157">
                        not here                        
                    </comment>
                    <comment line="7160">
                        is the next row in table selected or not?                        
                    </comment>
                    <comment line="7166">
                        we didn&apos;t return earlier, so go to next row                        
                    </comment>
                    <comment line="7169">
                        sparse bunch of rows of selections                        
                    </comment>
                    <comment line="7174">
                        it&apos;s here!                        
                    </comment>
                    <comment line="7179">
                        not here                        
                    </comment>
                    <comment line="7187">
                        we got here, so we didn&apos;t find it yet; find it in
                         the last sparse bunch of rows                        
                    </comment>
                    <comment line="7191">
                        it&apos;s here!                        
                    </comment>
                    <comment line="7195">
                        not here                        
                    </comment>
                    <comment line="7196">
                        we shouldn&apos;t get to this spot in the code!                        
                    </comment>
                    <comment line="7197">
                        System.out.println(&quot;Bug in AccessibleJTable.getAccessibleSelection()&quot;);                        
                    </comment>
                    <comment line="7200">
                        one or more rows selected                        
                    </comment>
                    <comment line="7206">
                        one or more columns selected                        
                    </comment>
                    <scope line="7098"/>
                    <declaration name="rowsSel" type="int" line="7102"/>
                    <declaration name="colsSel" type="int" line="7103"/>
                    <declaration name="rowIndicies" type="int" line="7104"/>
                    <declaration name="colIndicies" type="int" line="7105"/>
                    <declaration name="ttlCols" type="int" line="7106"/>
                    <declaration name="ttlRows" type="int" line="7107"/>
                    <declaration name="r" type="int" line="7108"/>
                    <declaration name="c" type="int" line="7109"/>
                    <scope line="7111"/>
                    <scope line="7115">
                        <scope line="7119">
                            <declaration name="curIndex" type="int" line="7142"/>
                            <declaration name="IN_ROW" type="int" line="7143"/>
                            <declaration name="NOT_IN_ROW" type="int" line="7144"/>
                            <declaration name="state" type="int" line="7145"/>
                            <declaration name="j" type="int" line="7146"/>
                            <declaration name="prevRow" type="int" line="7147"/>
                            <scope line="7148">
                                <scope line="7152"/>
                                <scope line="7156"/>
                                <scope line="7161"/>
                                <scope line="7171"/>
                                <scope line="7178"/>
                            </scope>
                            <scope line="7190"/>
                            <scope line="7194"/>
                        </scope>
                        <scope line="7200"/>
                        <scope line="7206"/>
                    </scope>
                </method>
                <javadoc line="7215">
                    Determines if the current child of this object is selected.                    
                    <param>
                        i the zero-based index of the child in this
                          <code>Accessible</code> object                        
                    </param>
                    <return>
                        true if the current child of this object is selected                        
                    </return>
                    <see>
                        AccessibleContext#getAccessibleChild                        
                    </see>
                </javadoc>
                <method name="isAccessibleChildSelected" type="boolean" line="7223">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                    <declaration name="column" type="int" line="7224"/>
                    <declaration name="row" type="int" line="7225"/>
                </method>
                <javadoc line="7229">
                    Adds the specified &lt;code&gt;Accessible&lt;/code&gt; child of the
                      object to the object&apos;s selection.  If the object supports
                      multiple selections, the specified child is added to
                      any existing selection, otherwise
                      it replaces any existing selection in the object.  If the
                      specified child is already selected, this method has no effect.
                      &lt;p&gt;
                      This method only works on &lt;code&gt;JTable&lt;/code&gt;s which have
                      individual cell selection enabled.                    
                    <param>
                        i the zero-based index of the child                        
                    </param>
                    <see>
                        AccessibleContext#getAccessibleChild                        
                    </see>
                </javadoc>
                <method name="addAccessibleSelection" type="void" line="7243">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                    <comment line="7245">
                        TIGER - 4495286                        
                    </comment>
                    <declaration name="column" type="int" line="7245"/>
                    <declaration name="row" type="int" line="7246"/>
                </method>
                <javadoc line="7250">
                    Removes the specified child of the object from the object&apos;s
                      selection.  If the specified item isn&apos;t currently selected, this
                      method has no effect.
                      &lt;p&gt;
                      This method only works on &lt;code&gt;JTables&lt;/code&gt; which have
                      individual cell selection enabled.                    
                    <param>
                        i the zero-based index of the child                        
                    </param>
                    <see>
                        AccessibleContext#getAccessibleChild                        
                    </see>
                </javadoc>
                <method name="removeAccessibleSelection" type="void" line="7261">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                    <scope line="7262">
                        <declaration name="column" type="int" line="7263"/>
                        <declaration name="row" type="int" line="7264"/>
                    </scope>
                </method>
                <javadoc line="7270">
                    Clears the selection in the object, so that no children in the
                      object are selected.                    
                </javadoc>
                <method name="clearAccessibleSelection" type="void" line="7274"/>
                <javadoc line="7278">
                    Causes every child of the object to be selected, but only
                      if the &lt;code&gt;JTable&lt;/code&gt; supports multiple selections,
                      and if individual cell selection is enabled.                    
                </javadoc>
                <method name="selectAllAccessibleSelection" type="void" line="7283">
                    <scope line="7284"/>
                </method>
                <javadoc line="7291">
                    Returns the row number of an index in the table.                    
                    <param>
                        index the zero-based index in the table                        
                    </param>
                    <return>
                        the zero-based row of the table if one exists;
                          otherwise -1.                        
                    </return>
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <method name="getAccessibleRow" type="int" line="7299">
                    <params>
                        <param name="index" type="int"/>
                    </params>
                </method>
                <javadoc line="7303">
                    Returns the column number of an index in the table.                    
                    <param>
                        index the zero-based index in the table                        
                    </param>
                    <return>
                        the zero-based column of the table if one exists;
                          otherwise -1.                        
                    </return>
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <method name="getAccessibleColumn" type="int" line="7311">
                    <params>
                        <param name="index" type="int"/>
                    </params>
                </method>
                <javadoc line="7315">
                    Returns the index at a row and column in the table.                    
                    <param>
                        r zero-based row of the table                        
                    </param>
                    <param>
                        c zero-based column of the table                        
                    </param>
                    <return>
                        the zero-based index in the table if one exists;
                          otherwise -1.                        
                    </return>
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <method name="getAccessibleIndex" type="int" line="7324">
                    <params>
                        <param name="r" type="int"/>
                        <param name="c" type="int"/>
                    </params>
                </method>
                <declaration name="caption" type="Accessible" line="7332"/>
                <declaration name="summary" type="Accessible" line="7333"/>
                <declaration name="rowDescription" type="Accessible[]" line="7334"/>
                <declaration name="columnDescription" type="Accessible[]" line="7335"/>
                <javadoc line="7337">
                    Gets the &lt;code&gt;AccessibleTable&lt;/code&gt; associated with this
                      object.  In the implementation of the Java Accessibility
                      API for this class, return this object, which is responsible
                      for implementing the &lt;code&gt;AccessibleTables&lt;/code&gt; interface
                      on behalf of itself.                    
                    <return>
                        this object                        
                    </return>
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <method name="getAccessibleTable" type="AccessibleTable" line="7347"/>
                <javadoc line="7351">
                    Returns the caption for the table.                    
                    <return>
                        the caption for the table                        
                    </return>
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <method name="getAccessibleCaption" type="Accessible" line="7357"/>
                <javadoc line="7361">
                    Sets the caption for the table.                    
                    <param>
                        a the caption for the table                        
                    </param>
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <method name="setAccessibleCaption" type="void" line="7367">
                    <params>
                        <param name="a" type="Accessible"/>
                    </params>
                    <declaration name="oldCaption" type="Accessible" line="7368"/>
                </method>
                <javadoc line="7374">
                    Returns the summary description of the table.                    
                    <return>
                        the summary description of the table                        
                    </return>
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <method name="getAccessibleSummary" type="Accessible" line="7380"/>
                <javadoc line="7384">
                    Sets the summary description of the table.                    
                    <param>
                        a the summary description of the table                        
                    </param>
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <method name="setAccessibleSummary" type="void" line="7390">
                    <params>
                        <param name="a" type="Accessible"/>
                    </params>
                    <declaration name="oldSummary" type="Accessible" line="7391"/>
                </method>
                <method name="getAccessibleRowCount" type="int" line="7402"/>
                <method name="getAccessibleColumnCount" type="int" line="7411"/>
                <method name="getAccessibleAt" type="Accessible" line="7424">
                    <params>
                        <param name="r" type="int"/>
                        <param name="c" type="int"/>
                    </params>
                </method>
                <javadoc line="7428">
                    Returns the number of rows occupied by the &lt;code&gt;Accessible&lt;/code&gt;
                      at a specified row and column in the table.                    
                    <return>
                        the number of rows occupied by the <code>Accessible</code>
                          at a specified row and column in the table                        
                    </return>
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <method name="getAccessibleRowExtentAt" type="int" line="7436">
                    <params>
                        <param name="r" type="int"/>
                        <param name="c" type="int"/>
                    </params>
                </method>
                <javadoc line="7440">
                    Returns the number of columns occupied by the
                      &lt;code&gt;Accessible&lt;/code&gt; at a given (row, column).                    
                    <return>
                        the number of columns occupied by the <code>Accessible</code>
                          at a specified row and column in the table                        
                    </return>
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <method name="getAccessibleColumnExtentAt" type="int" line="7448">
                    <params>
                        <param name="r" type="int"/>
                        <param name="c" type="int"/>
                    </params>
                </method>
                <javadoc line="7452">
                    Returns the row headers as an &lt;code&gt;AccessibleTable&lt;/code&gt;.                    
                    <return>
                        an <code>AccessibleTable</code> representing the row
                          headers                        
                    </return>
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <method name="getAccessibleRowHeader" type="AccessibleTable" line="7459">
                    <comment line="7461">
                        row headers are not supported                        
                    </comment>
                </method>
                <javadoc line="7464">
                    Sets the row headers as an &lt;code&gt;AccessibleTable&lt;/code&gt;.                    
                    <param>
                        a an <code>AccessibleTable</code> representing the row
                          headers                        
                    </param>
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <method name="setAccessibleRowHeader" type="void" line="7471">
                    <params>
                        <param name="a" type="AccessibleTable"/>
                    </params>
                    <comment line="7473">
                        row headers are not supported                        
                    </comment>
                </method>
                <javadoc line="7475">
                    Returns the column headers as an &lt;code&gt;AccessibleTable&lt;/code&gt;.                    
                    <return>
                        an <code>AccessibleTable</code> representing the column
                          headers, or <code>null</code> if the table header is
                          <code>null</code>                        
                    </return>
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <method name="getAccessibleColumnHeader" type="AccessibleTable" line="7483">
                    <declaration name="header" type="JTableHeader" line="7484"/>
                </method>
                <class name="AccessibleTableHeader" line="7491">
                    <comment line="7986">
                        AccessibleContext methods                        
                    </comment>
                    <comment line="8025">
                        *** should check toolTip text for desc. (needs MouseEvent)                        
                    </comment>
                    <comment line="8275">
                        AccessibleComponent methods                        
                    </comment>
                    <comment line="8777">
                        Returns the AccessibleContext for the header cell
                         renderer.                        
                    </comment>
                    <comment line="8785">
                        Returns the component that renders the header cell.                        
                    </comment>
                    <comment line="8792">
                        AccessibleContext methods ==========                        
                    </comment>
                    <comment line="9076">
                        AccessibleComponent methods ==========                        
                    </comment>
                    <implements interface="AccessibleTable"/>
                    <declaration name="header" type="JTableHeader" line="7492"/>
                    <declaration name="headerModel" type="TableColumnModel" line="7493"/>
                    <method name="AccessibleTableHeader" type="constructor" line="7495">
                        <params>
                            <param name="header" type="JTableHeader"/>
                        </params>
                    </method>
                    <javadoc line="7500">
                        Returns the caption for the table.                        
                        <return>
                            the caption for the table                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleCaption" type="Accessible" line="7505"/>
                    <javadoc line="7508">
                        Sets the caption for the table.                        
                        <param>
                            a the caption for the table                            
                        </param>
                    </javadoc>
                    <method name="setAccessibleCaption" type="void" line="7513">
                        <params>
                            <param name="a" type="Accessible"/>
                        </params>
                    </method>
                    <javadoc line="7515">
                        Returns the summary description of the table.                        
                        <return>
                            the summary description of the table                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleSummary" type="Accessible" line="7520"/>
                    <javadoc line="7522">
                        Sets the summary description of the table                        
                        <param>
                            a the summary description of the table                            
                        </param>
                    </javadoc>
                    <method name="setAccessibleSummary" type="void" line="7527">
                        <params>
                            <param name="a" type="Accessible"/>
                        </params>
                    </method>
                    <javadoc line="7529">
                        Returns the number of rows in the table.                        
                        <return>
                            the number of rows in the table                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleRowCount" type="int" line="7534"/>
                    <javadoc line="7536">
                        Returns the number of columns in the table.                        
                        <return>
                            the number of columns in the table                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleColumnCount" type="int" line="7541"/>
                    <javadoc line="7545">
                        Returns the Accessible at a specified row and column
                          in the table.                        
                        <param>
                            row zero-based row of the table                            
                        </param>
                        <param>
                            column zero-based column of the table                            
                        </param>
                        <return>
                            the Accessible at the specified row and column                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleAt" type="Accessible" line="7553">
                        <params>
                            <param name="row" type="int"/>
                            <param name="column" type="int"/>
                        </params>
                        <comment line="7557">
                            TIGER - 4715503                            
                        </comment>
                        <declaration name="aColumn" type="TableColumn" line="7557"/>
                        <declaration name="renderer" type="TableCellRenderer" line="7558"/>
                        <scope line="7559"/>
                        <declaration name="component" type="Component" line="7562"/>
                    </method>
                    <javadoc line="7572">
                        Returns the number of rows occupied by the Accessible at
                          a specified row and column in the table.                        
                        <return>
                            the number of rows occupied by the Accessible at a
                              given specified (row, column)                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleRowExtentAt" type="int" line="7579">
                        <params>
                            <param name="r" type="int"/>
                            <param name="c" type="int"/>
                        </params>
                    </method>
                    <javadoc line="7581">
                        Returns the number of columns occupied by the Accessible at
                          a specified row and column in the table.                        
                        <return>
                            the number of columns occupied by the Accessible at a
                              given specified row and column                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleColumnExtentAt" type="int" line="7588">
                        <params>
                            <param name="r" type="int"/>
                            <param name="c" type="int"/>
                        </params>
                    </method>
                    <javadoc line="7590">
                        Returns the row headers as an AccessibleTable.                        
                        <return>
                            an AccessibleTable representing the row
                              headers                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleRowHeader" type="AccessibleTable" line="7596"/>
                    <javadoc line="7598">
                        Sets the row headers.                        
                        <param>
                            table an AccessibleTable representing the
                              row headers                            
                        </param>
                    </javadoc>
                    <method name="setAccessibleRowHeader" type="void" line="7604">
                        <params>
                            <param name="table" type="AccessibleTable"/>
                        </params>
                    </method>
                    <javadoc line="7606">
                        Returns the column headers as an AccessibleTable.                        
                        <return>
                            an AccessibleTable representing the column
                              headers                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleColumnHeader" type="AccessibleTable" line="7612"/>
                    <javadoc line="7614">
                        Sets the column headers.                        
                        <param>
                            table an AccessibleTable representing the
                              column headers                            
                        </param>
                        <since>
                            1.3                            
                        </since>
                    </javadoc>
                    <method name="setAccessibleColumnHeader" type="void" line="7621">
                        <params>
                            <param name="table" type="AccessibleTable"/>
                        </params>
                    </method>
                    <javadoc line="7623">
                        Returns the description of the specified row in the table.                        
                        <param>
                            r zero-based row of the table                            
                        </param>
                        <return>
                            the description of the row                            
                        </return>
                        <since>
                            1.3                            
                        </since>
                    </javadoc>
                    <method name="getAccessibleRowDescription" type="Accessible" line="7630">
                        <params>
                            <param name="r" type="int"/>
                        </params>
                    </method>
                    <javadoc line="7632">
                        Sets the description text of the specified row of the table.                        
                        <param>
                            r zero-based row of the table                            
                        </param>
                        <param>
                            a the description of the row                            
                        </param>
                        <since>
                            1.3                            
                        </since>
                    </javadoc>
                    <method name="setAccessibleRowDescription" type="void" line="7639">
                        <params>
                            <param name="r" type="int"/>
                            <param name="a" type="Accessible"/>
                        </params>
                    </method>
                    <javadoc line="7641">
                        Returns the description text of the specified column in the table.                        
                        <param>
                            c zero-based column of the table                            
                        </param>
                        <return>
                            the text description of the column                            
                        </return>
                        <since>
                            1.3                            
                        </since>
                    </javadoc>
                    <method name="getAccessibleColumnDescription" type="Accessible" line="7648">
                        <params>
                            <param name="c" type="int"/>
                        </params>
                    </method>
                    <javadoc line="7650">
                        Sets the description text of the specified column in the table.                        
                        <param>
                            c zero-based column of the table                            
                        </param>
                        <param>
                            a the text description of the column                            
                        </param>
                        <since>
                            1.3                            
                        </since>
                    </javadoc>
                    <method name="setAccessibleColumnDescription" type="void" line="7657">
                        <params>
                            <param name="c" type="int"/>
                            <param name="a" type="Accessible"/>
                        </params>
                    </method>
                    <javadoc line="7659">
                        Returns a boolean value indicating whether the accessible at
                          a specified row and column is selected.                        
                        <param>
                            r zero-based row of the table                            
                        </param>
                        <param>
                            c zero-based column of the table                            
                        </param>
                        <return>
                            the boolean value true if the accessible at the
                              row and column is selected. Otherwise, the boolean value
                              false                            
                        </return>
                        <since>
                            1.3                            
                        </since>
                    </javadoc>
                    <method name="isAccessibleSelected" type="boolean" line="7670">
                        <params>
                            <param name="r" type="int"/>
                            <param name="c" type="int"/>
                        </params>
                    </method>
                    <javadoc line="7672">
                        Returns a boolean value indicating whether the specified row
                          is selected.                        
                        <param>
                            r zero-based row of the table                            
                        </param>
                        <return>
                            the boolean value true if the specified row is selected.
                              Otherwise, false.                            
                        </return>
                        <since>
                            1.3                            
                        </since>
                    </javadoc>
                    <method name="isAccessibleRowSelected" type="boolean" line="7681">
                        <params>
                            <param name="r" type="int"/>
                        </params>
                    </method>
                    <javadoc line="7683">
                        Returns a boolean value indicating whether the specified column
                          is selected.                        
                        <param>
                            r zero-based column of the table                            
                        </param>
                        <return>
                            the boolean value true if the specified column is selected.
                              Otherwise, false.                            
                        </return>
                        <since>
                            1.3                            
                        </since>
                    </javadoc>
                    <method name="isAccessibleColumnSelected" type="boolean" line="7692">
                        <params>
                            <param name="c" type="int"/>
                        </params>
                    </method>
                    <javadoc line="7694">
                        Returns the selected rows in a table.                        
                        <return>
                            an array of selected rows where each element is a
                              zero-based row of the table                            
                        </return>
                        <since>
                            1.3                            
                        </since>
                    </javadoc>
                    <method name="getSelectedAccessibleRows" type="int[]" line="7701"/>
                    <javadoc line="7703">
                        Returns the selected columns in a table.                        
                        <return>
                            an array of selected columns where each element is a
                              zero-based column of the table                            
                        </return>
                        <since>
                            1.3                            
                        </since>
                    </javadoc>
                    <method name="getSelectedAccessibleColumns" type="int[]" line="7710"/>
                </class>
                <javadoc line="7714">
                    Sets the column headers as an &lt;code&gt;AccessibleTable&lt;/code&gt;.                    
                    <param>
                        a an <code>AccessibleTable</code> representing the
                          column headers                        
                    </param>
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <method name="setAccessibleColumnHeader" type="void" line="7721">
                    <params>
                        <param name="a" type="AccessibleTable"/>
                    </params>
                    <comment line="7723">
                        XXX not implemented                        
                    </comment>
                </method>
                <javadoc line="7725">
                    Returns the description of the specified row in the table.                    
                    <param>
                        r zero-based row of the table                        
                    </param>
                    <return>
                        the description of the row                        
                    </return>
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <method name="getAccessibleRowDescription" type="Accessible" line="7732">
                    <params>
                        <param name="r" type="int"/>
                    </params>
                    <scope line="7733"/>
                    <scope line="7736"/>
                    <scope line="7738"/>
                </method>
                <javadoc line="7743">
                    Sets the description text of the specified row of the table.                    
                    <param>
                        r zero-based row of the table                        
                    </param>
                    <param>
                        a the description of the row                        
                    </param>
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <method name="setAccessibleRowDescription" type="void" line="7750">
                    <params>
                        <param name="r" type="int"/>
                        <param name="a" type="Accessible"/>
                    </params>
                    <scope line="7751"/>
                    <scope line="7754">
                        <declaration name="numRows" type="int" line="7755"/>
                    </scope>
                </method>
                <javadoc line="7761">
                    Returns the description of the specified column in the table.                    
                    <param>
                        c zero-based column of the table                        
                    </param>
                    <return>
                        the description of the column                        
                    </return>
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <method name="getAccessibleColumnDescription" type="Accessible" line="7768">
                    <params>
                        <param name="c" type="int"/>
                    </params>
                    <scope line="7769"/>
                    <scope line="7772"/>
                    <scope line="7774"/>
                </method>
                <javadoc line="7779">
                    Sets the description text of the specified column of the table.                    
                    <param>
                        c zero-based column of the table                        
                    </param>
                    <param>
                        a the description of the column                        
                    </param>
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <method name="setAccessibleColumnDescription" type="void" line="7786">
                    <params>
                        <param name="c" type="int"/>
                        <param name="a" type="Accessible"/>
                    </params>
                    <scope line="7787"/>
                    <scope line="7790">
                        <declaration name="numColumns" type="int" line="7791"/>
                    </scope>
                </method>
                <javadoc line="7797">
                    Returns a boolean value indicating whether the accessible at a
                      given (row, column) is selected.                    
                    <param>
                        r zero-based row of the table                        
                    </param>
                    <param>
                        c zero-based column of the table                        
                    </param>
                    <return>
                        the boolean value true if the accessible at (row, column)
                          is selected; otherwise, the boolean value false                        
                    </return>
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <method name="isAccessibleSelected" type="boolean" line="7807">
                    <params>
                        <param name="r" type="int"/>
                        <param name="c" type="int"/>
                    </params>
                </method>
                <javadoc line="7811">
                    Returns a boolean value indicating whether the specified row
                      is selected.                    
                    <param>
                        r zero-based row of the table                        
                    </param>
                    <return>
                        the boolean value true if the specified row is selected;
                          otherwise, false                        
                    </return>
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <method name="isAccessibleRowSelected" type="boolean" line="7820">
                    <params>
                        <param name="r" type="int"/>
                    </params>
                </method>
                <javadoc line="7824">
                    Returns a boolean value indicating whether the specified column
                      is selected.                    
                    <param>
                        c zero-based column of the table                        
                    </param>
                    <return>
                        the boolean value true if the specified column is selected;
                          otherwise, false                        
                    </return>
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <method name="isAccessibleColumnSelected" type="boolean" line="7833">
                    <params>
                        <param name="c" type="int"/>
                    </params>
                </method>
                <javadoc line="7837">
                    Returns the selected rows in a table.                    
                    <return>
                        an array of selected rows where each element is a
                          zero-based row of the table                        
                    </return>
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <method name="getSelectedAccessibleRows" type="int[]" line="7844"/>
                <javadoc line="7848">
                    Returns the selected columns in a table.                    
                    <return>
                        an array of selected columns where each element is a
                          zero-based column of the table                        
                    </return>
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <method name="getSelectedAccessibleColumns" type="int[]" line="7855"/>
                <javadoc line="7859">
                    Returns the row at a given index into the table.                    
                    <param>
                        i zero-based index into the table                        
                    </param>
                    <return>
                        the row at a given index                        
                    </return>
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <method name="getAccessibleRowAtIndex" type="int" line="7866">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                    <declaration name="columnCount" type="int" line="7867"/>
                    <scope line="7868"/>
                    <scope line="7870"/>
                </method>
                <javadoc line="7875">
                    Returns the column at a given index into the table.                    
                    <param>
                        i zero-based index into the table                        
                    </param>
                    <return>
                        the column at a given index                        
                    </return>
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <method name="getAccessibleColumnAtIndex" type="int" line="7882">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                    <declaration name="columnCount" type="int" line="7883"/>
                    <scope line="7884"/>
                    <scope line="7886"/>
                </method>
                <javadoc line="7891">
                    Returns the index at a given (row, column) in the table.                    
                    <param>
                        r zero-based row of the table                        
                    </param>
                    <param>
                        c zero-based column of the table                        
                    </param>
                    <return>
                        the index into the table                        
                    </return>
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <method name="getAccessibleIndexAt" type="int" line="7899">
                    <params>
                        <param name="r" type="int"/>
                        <param name="c" type="int"/>
                    </params>
                </method>
                <class name="AccessibleJTableCell" line="7905">
                    <extends class="AccessibleContext"/>
                    <comment line="7986">
                        AccessibleContext methods                        
                    </comment>
                    <comment line="8025">
                        *** should check toolTip text for desc. (needs MouseEvent)                        
                    </comment>
                    <comment line="8275">
                        AccessibleComponent methods                        
                    </comment>
                    <comment line="8777">
                        Returns the AccessibleContext for the header cell
                         renderer.                        
                    </comment>
                    <comment line="8785">
                        Returns the component that renders the header cell.                        
                    </comment>
                    <comment line="8792">
                        AccessibleContext methods ==========                        
                    </comment>
                    <comment line="9076">
                        AccessibleComponent methods ==========                        
                    </comment>
                    <implements interface="Accessible"/>
                    <implements interface="AccessibleComponent"/>
                    <javadoc line="7905">
                        The class provides an implementation of the Java Accessibility
                          API appropriate to table cells.                        
                    </javadoc>
                    <declaration name="parent" type="JTable" line="7912"/>
                    <declaration name="row" type="int" line="7913"/>
                    <declaration name="column" type="int" line="7914"/>
                    <declaration name="index" type="int" line="7915"/>
                    <javadoc line="7917">
                        Constructs an &lt;code&gt;AccessibleJTableHeaderEntry&lt;/code&gt;.                        
                        <since>
                            1.4                            
                        </since>
                    </javadoc>
                    <method name="AccessibleJTableCell" type="constructor" line="7921">
                        <params>
                            <param name="t" type="JTable"/>
                            <param name="r" type="int"/>
                            <param name="c" type="int"/>
                            <param name="i" type="int"/>
                        </params>
                    </method>
                    <javadoc line="7929">
                        Gets the &lt;code&gt;AccessibleContext&lt;/code&gt; associated with this
                          component. In the implementation of the Java Accessibility
                          API for this class, return this object, which is its own
                          &lt;code&gt;AccessibleContext&lt;/code&gt;.                        
                        <return>
                            this object                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleContext" type="AccessibleContext" line="7937"/>
                    <javadoc line="7941">
                        Gets the AccessibleContext for the table cell renderer.                        
                        <return>
                            the <code>AccessibleContext</code> for the table
                              cell renderer if one exists;
                              otherwise, returns <code>null</code>.                            
                        </return>
                        <since>
                            1.6                            
                        </since>
                    </javadoc>
                    <method name="getCurrentAccessibleContext" type="AccessibleContext" line="7949">
                        <declaration name="aColumn" type="TableColumn" line="7950"/>
                        <declaration name="renderer" type="TableCellRenderer" line="7951"/>
                        <scope line="7952">
                            <declaration name="columnClass" type="Class&lt;?&gt;" line="7953"/>
                        </scope>
                        <declaration name="component" type="Component" line="7956"/>
                        <scope line="7959"/>
                        <scope line="7961"/>
                    </method>
                    <javadoc line="7966">
                        Gets the table cell renderer component.                        
                        <return>
                            the table cell renderer component if one exists;
                              otherwise, returns <code>null</code>.                            
                        </return>
                        <since>
                            1.6                            
                        </since>
                    </javadoc>
                    <method name="getCurrentComponent" type="Component" line="7973">
                        <declaration name="aColumn" type="TableColumn" line="7974"/>
                        <declaration name="renderer" type="TableCellRenderer" line="7975"/>
                        <scope line="7976">
                            <declaration name="columnClass" type="Class&lt;?&gt;" line="7977"/>
                        </scope>
                    </method>
                    <javadoc line="7987">
                        Gets the accessible name of this object.                        
                        <return>
                            the localized name of the object; <code>null</code>
                              if this object does not have a name                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleName" type="String" line="7993">
                        <comment line="7999">
                            return the cell renderer&apos;s AccessibleName                            
                        </comment>
                        <comment line="8006">
                            fall back to the client property                            
                        </comment>
                        <declaration name="ac" type="AccessibleContext" line="7994"/>
                        <scope line="7995">
                            <declaration name="name" type="String" line="7996"/>
                            <scope line="7997"/>
                        </scope>
                        <scope line="8002"/>
                        <scope line="8004"/>
                    </method>
                    <javadoc line="8010">
                        Sets the localized accessible name of this object.                        
                        <param>
                            s the new localized name of the object                            
                        </param>
                    </javadoc>
                    <method name="setAccessibleName" type="void" line="8015">
                        <params>
                            <param name="s" type="String"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="8016"/>
                        <scope line="8017"/>
                        <scope line="8019"/>
                    </method>
                    <javadoc line="8027">
                        Gets the accessible description of this object.                        
                        <return>
                            the localized description of the object;
                              <code>null</code> if this object does not have
                              a description                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleDescription" type="String" line="8034">
                        <declaration name="ac" type="AccessibleContext" line="8035"/>
                        <scope line="8036"/>
                        <scope line="8038"/>
                    </method>
                    <javadoc line="8043">
                        Sets the accessible description of this object.                        
                        <param>
                            s the new localized description of the object                            
                        </param>
                    </javadoc>
                    <method name="setAccessibleDescription" type="void" line="8048">
                        <params>
                            <param name="s" type="String"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="8049"/>
                        <scope line="8050"/>
                        <scope line="8052"/>
                    </method>
                    <javadoc line="8057">
                        Gets the role of this object.                        
                        <return>
                            an instance of <code>AccessibleRole</code>
                              describing the role of the object                            
                        </return>
                        <see>
                            AccessibleRole                            
                        </see>
                    </javadoc>
                    <method name="getAccessibleRole" type="AccessibleRole" line="8064">
                        <declaration name="ac" type="AccessibleContext" line="8065"/>
                        <scope line="8066"/>
                        <scope line="8068"/>
                    </method>
                    <javadoc line="8073">
                        Gets the state set of this object.                        
                        <return>
                            an instance of <code>AccessibleStateSet</code>
                              containing the current state set of the object                            
                        </return>
                        <see>
                            AccessibleState                            
                        </see>
                    </javadoc>
                    <method name="getAccessibleStateSet" type="AccessibleStateSet" line="8080">
                        <declaration name="ac" type="AccessibleContext" line="8081"/>
                        <declaration name="as" type="AccessibleStateSet" line="8082"/>
                        <scope line="8084"/>
                        <scope line="8087"/>
                        <declaration name="rjt" type="Rectangle" line="8090"/>
                        <declaration name="rcell" type="Rectangle" line="8091"/>
                        <scope line="8092"/>
                        <scope line="8094">
                            <scope line="8095"/>
                        </scope>
                        <scope line="8099"/>
                        <scope line="8101"/>
                        <scope line="8104"/>
                    </method>
                    <javadoc line="8111">
                        Gets the &lt;code&gt;Accessible&lt;/code&gt; parent of this object.                        
                        <return>
                            the Accessible parent of this object;
                              <code>null</code> if this object does not
                              have an <code>Accessible</code> parent                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleParent" type="Accessible" line="8118"/>
                    <javadoc line="8122">
                        Gets the index of this object in its accessible parent.                        
                        <return>
                            the index of this object in its parent; -1 if this
                              object does not have an accessible parent                            
                        </return>
                        <see>
                            #getAccessibleParent                            
                        </see>
                    </javadoc>
                    <method name="getAccessibleIndexInParent" type="int" line="8129"/>
                    <javadoc line="8133">
                        Returns the number of accessible children in the object.                        
                        <return>
                            the number of accessible children in the object                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleChildrenCount" type="int" line="8138">
                        <declaration name="ac" type="AccessibleContext" line="8139"/>
                        <scope line="8140"/>
                        <scope line="8142"/>
                    </method>
                    <javadoc line="8147">
                        Returns the specified &lt;code&gt;Accessible&lt;/code&gt; child of the
                          object.                        
                        <param>
                            i zero-based index of child                            
                        </param>
                        <return>
                            the <code>Accessible</code> child of the object                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleChild" type="Accessible" line="8154">
                        <params>
                            <param name="i" type="int"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="8155"/>
                        <scope line="8156">
                            <declaration name="accessibleChild" type="Accessible" line="8157"/>
                        </scope>
                        <scope line="8160"/>
                    </method>
                    <javadoc line="8165">
                        Gets the locale of the component. If the component
                          does not have a locale, then the locale of its parent
                          is returned.                        
                        <return>
                            this component's locale; if this component does
                              not have a locale, the locale of its parent is returned                            
                        </return>
                        <exception>
                            IllegalComponentStateException if the
                              <code>Component</code> does not have its own locale
                              and has not yet been added to a containment hierarchy
                              such that the locale can be determined from the
                              containing parent                            
                        </exception>
                        <see>
                            #setLocale                            
                        </see>
                    </javadoc>
                    <method name="getLocale" type="Locale" line="8179">
                        <declaration name="ac" type="AccessibleContext" line="8180"/>
                        <scope line="8181"/>
                        <scope line="8183"/>
                    </method>
                    <javadoc line="8188">
                        Adds a &lt;code&gt;PropertyChangeListener&lt;/code&gt; to the listener list.
                          The listener is registered for all properties.                        
                        <param>
                            l  the <code>PropertyChangeListener</code>
                              to be added                            
                        </param>
                    </javadoc>
                    <method name="addPropertyChangeListener" type="void" line="8195">
                        <params>
                            <param name="l" type="PropertyChangeListener"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="8196"/>
                        <scope line="8197"/>
                        <scope line="8199"/>
                    </method>
                    <javadoc line="8204">
                        Removes a &lt;code&gt;PropertyChangeListener&lt;/code&gt; from the
                          listener list. This removes a &lt;code&gt;PropertyChangeListener&lt;/code&gt;
                          that was registered for all properties.                        
                        <param>
                            l  the <code>PropertyChangeListener</code>
                              to be removed                            
                        </param>
                    </javadoc>
                    <method name="removePropertyChangeListener" type="void" line="8212">
                        <params>
                            <param name="l" type="PropertyChangeListener"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="8213"/>
                        <scope line="8214"/>
                        <scope line="8216"/>
                    </method>
                    <javadoc line="8221">
                        Gets the &lt;code&gt;AccessibleAction&lt;/code&gt; associated with this
                          object if one exists.  Otherwise returns &lt;code&gt;null&lt;/code&gt;.                        
                        <return>
                            the <code>AccessibleAction</code>, or <code>null</code>                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleAction" type="AccessibleAction" line="8227"/>
                    <javadoc line="8231">
                        Gets the &lt;code&gt;AccessibleComponent&lt;/code&gt; associated with
                          this object if one exists.  Otherwise returns &lt;code&gt;null&lt;/code&gt;.                        
                        <return>
                            the <code>AccessibleComponent</code>, or
                              <code>null</code>                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleComponent" type="AccessibleComponent" line="8238">
                        <comment line="8240">
                            to override getBounds()                            
                        </comment>
                    </method>
                    <javadoc line="8242">
                        Gets the &lt;code&gt;AccessibleSelection&lt;/code&gt; associated with
                          this object if one exists.  Otherwise returns &lt;code&gt;null&lt;/code&gt;.                        
                        <return>
                            the <code>AccessibleSelection</code>, or
                              <code>null</code>                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleSelection" type="AccessibleSelection" line="8249"/>
                    <javadoc line="8253">
                        Gets the &lt;code&gt;AccessibleText&lt;/code&gt; associated with this
                          object if one exists.  Otherwise returns &lt;code&gt;null&lt;/code&gt;.                        
                        <return>
                            the <code>AccessibleText</code>, or <code>null</code>                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleText" type="AccessibleText" line="8259"/>
                    <javadoc line="8263">
                        Gets the &lt;code&gt;AccessibleValue&lt;/code&gt; associated with
                          this object if one exists.  Otherwise returns &lt;code&gt;null&lt;/code&gt;.                        
                        <return>
                            the <code>AccessibleValue</code>, or <code>null</code>                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleValue" type="AccessibleValue" line="8269"/>
                    <javadoc line="8276">
                        Gets the background color of this object.                        
                        <return>
                            the background color, if supported, of the object;
                              otherwise, <code>null</code>                            
                        </return>
                    </javadoc>
                    <method name="getBackground" type="Color" line="8282">
                        <declaration name="ac" type="AccessibleContext" line="8283"/>
                        <scope line="8284"/>
                        <scope line="8286">
                            <declaration name="c" type="Component" line="8287"/>
                            <scope line="8288"/>
                            <scope line="8290"/>
                        </scope>
                    </method>
                    <javadoc line="8296">
                        Sets the background color of this object.                        
                        <param>
                            c the new <code>Color</code> for the background                            
                        </param>
                    </javadoc>
                    <method name="setBackground" type="void" line="8301">
                        <params>
                            <param name="c" type="Color"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="8302"/>
                        <scope line="8303"/>
                        <scope line="8305">
                            <declaration name="cp" type="Component" line="8306"/>
                            <scope line="8307"/>
                        </scope>
                    </method>
                    <javadoc line="8313">
                        Gets the foreground color of this object.                        
                        <return>
                            the foreground color, if supported, of the object;
                              otherwise, <code>null</code>                            
                        </return>
                    </javadoc>
                    <method name="getForeground" type="Color" line="8319">
                        <declaration name="ac" type="AccessibleContext" line="8320"/>
                        <scope line="8321"/>
                        <scope line="8323">
                            <declaration name="c" type="Component" line="8324"/>
                            <scope line="8325"/>
                            <scope line="8327"/>
                        </scope>
                    </method>
                    <javadoc line="8333">
                        Sets the foreground color of this object.                        
                        <param>
                            c the new <code>Color</code> for the foreground                            
                        </param>
                    </javadoc>
                    <method name="setForeground" type="void" line="8338">
                        <params>
                            <param name="c" type="Color"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="8339"/>
                        <scope line="8340"/>
                        <scope line="8342">
                            <declaration name="cp" type="Component" line="8343"/>
                            <scope line="8344"/>
                        </scope>
                    </method>
                    <javadoc line="8350">
                        Gets the &lt;code&gt;Cursor&lt;/code&gt; of this object.                        
                        <return>
                            the <code>Cursor</code>, if supported,
                              of the object; otherwise, <code>null</code>                            
                        </return>
                    </javadoc>
                    <method name="getCursor" type="Cursor" line="8356">
                        <declaration name="ac" type="AccessibleContext" line="8357"/>
                        <scope line="8358"/>
                        <scope line="8360">
                            <declaration name="c" type="Component" line="8361"/>
                            <scope line="8362"/>
                            <scope line="8364">
                                <declaration name="ap" type="Accessible" line="8365"/>
                                <scope line="8366"/>
                                <scope line="8368"/>
                            </scope>
                        </scope>
                    </method>
                    <javadoc line="8375">
                        Sets the &lt;code&gt;Cursor&lt;/code&gt; of this object.                        
                        <param>
                            c the new <code>Cursor</code> for the object                            
                        </param>
                    </javadoc>
                    <method name="setCursor" type="void" line="8380">
                        <params>
                            <param name="c" type="Cursor"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="8381"/>
                        <scope line="8382"/>
                        <scope line="8384">
                            <declaration name="cp" type="Component" line="8385"/>
                            <scope line="8386"/>
                        </scope>
                    </method>
                    <javadoc line="8392">
                        Gets the &lt;code&gt;Font&lt;/code&gt; of this object.                        
                        <return>
                            the <code>Font</code>,if supported,
                              for the object; otherwise, <code>null</code>                            
                        </return>
                    </javadoc>
                    <method name="getFont" type="Font" line="8398">
                        <declaration name="ac" type="AccessibleContext" line="8399"/>
                        <scope line="8400"/>
                        <scope line="8402">
                            <declaration name="c" type="Component" line="8403"/>
                            <scope line="8404"/>
                            <scope line="8406"/>
                        </scope>
                    </method>
                    <javadoc line="8412">
                        Sets the &lt;code&gt;Font&lt;/code&gt; of this object.                        
                        <param>
                            f the new <code>Font</code> for the object                            
                        </param>
                    </javadoc>
                    <method name="setFont" type="void" line="8417">
                        <params>
                            <param name="f" type="Font"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="8418"/>
                        <scope line="8419"/>
                        <scope line="8421">
                            <declaration name="c" type="Component" line="8422"/>
                            <scope line="8423"/>
                        </scope>
                    </method>
                    <javadoc line="8429">
                        Gets the &lt;code&gt;FontMetrics&lt;/code&gt; of this object.                        
                        <param>
                            f the <code>Font</code>                            
                        </param>
                        <return>
                            the <code>FontMetrics</code> object, if supported;
                              otherwise <code>null</code>                            
                        </return>
                        <see>
                            #getFont                            
                        </see>
                    </javadoc>
                    <method name="getFontMetrics" type="FontMetrics" line="8437">
                        <params>
                            <param name="f" type="Font"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="8438"/>
                        <scope line="8439"/>
                        <scope line="8441">
                            <declaration name="c" type="Component" line="8442"/>
                            <scope line="8443"/>
                            <scope line="8445"/>
                        </scope>
                    </method>
                    <javadoc line="8451">
                        Determines if the object is enabled.                        
                        <return>
                            true if object is enabled; otherwise, false                            
                        </return>
                    </javadoc>
                    <method name="isEnabled" type="boolean" line="8456">
                        <declaration name="ac" type="AccessibleContext" line="8457"/>
                        <scope line="8458"/>
                        <scope line="8460">
                            <declaration name="c" type="Component" line="8461"/>
                            <scope line="8462"/>
                            <scope line="8464"/>
                        </scope>
                    </method>
                    <javadoc line="8470">
                        Sets the enabled state of the object.                        
                        <param>
                            b if true, enables this object; otherwise, disables it                            
                        </param>
                    </javadoc>
                    <method name="setEnabled" type="void" line="8475">
                        <params>
                            <param name="b" type="boolean"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="8476"/>
                        <scope line="8477"/>
                        <scope line="8479">
                            <declaration name="c" type="Component" line="8480"/>
                            <scope line="8481"/>
                        </scope>
                    </method>
                    <javadoc line="8487">
                        Determines if this object is visible.  Note: this means that the
                          object intends to be visible; however, it may not in fact be
                          showing on the screen because one of the objects that this object
                          is contained by is not visible.  To determine if an object is
                          showing on the screen, use &lt;code&gt;isShowing&lt;/code&gt;.                        
                        <return>
                            true if object is visible; otherwise, false                            
                        </return>
                    </javadoc>
                    <method name="isVisible" type="boolean" line="8496">
                        <declaration name="ac" type="AccessibleContext" line="8497"/>
                        <scope line="8498"/>
                        <scope line="8500">
                            <declaration name="c" type="Component" line="8501"/>
                            <scope line="8502"/>
                            <scope line="8504"/>
                        </scope>
                    </method>
                    <javadoc line="8510">
                        Sets the visible state of the object.                        
                        <param>
                            b if true, shows this object; otherwise, hides it                            
                        </param>
                    </javadoc>
                    <method name="setVisible" type="void" line="8515">
                        <params>
                            <param name="b" type="boolean"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="8516"/>
                        <scope line="8517"/>
                        <scope line="8519">
                            <declaration name="c" type="Component" line="8520"/>
                            <scope line="8521"/>
                        </scope>
                    </method>
                    <javadoc line="8527">
                        Determines if the object is showing.  This is determined
                          by checking the visibility of the object and ancestors
                          of the object.  Note: this will return true even if the
                          object is obscured by another (for example,
                          it happens to be underneath a menu that was pulled down).                        
                        <return>
                            true if the object is showing; otherwise, false                            
                        </return>
                    </javadoc>
                    <method name="isShowing" type="boolean" line="8536">
                        <comment line="8543">
                            Fixes 4529616 - AccessibleJTableCell.isShowing()
                             returns false when the cell on the screen
                             if no parent                            
                        </comment>
                        <declaration name="ac" type="AccessibleContext" line="8537"/>
                        <scope line="8538">
                            <scope line="8539"/>
                            <scope line="8541"/>
                        </scope>
                        <scope line="8547">
                            <declaration name="c" type="Component" line="8548"/>
                            <scope line="8549"/>
                            <scope line="8551"/>
                        </scope>
                    </method>
                    <javadoc line="8557">
                        Checks whether the specified point is within this
                          object&apos;s bounds, where the point&apos;s x and y coordinates
                          are defined to be relative to the coordinate system of
                          the object.                        
                        <param>
                            p the <code>Point</code> relative to the
                              coordinate system of the object                            
                        </param>
                        <return>
                            true if object contains <code>Point</code>;
                              otherwise false                            
                        </return>
                    </javadoc>
                    <method name="contains" type="boolean" line="8568">
                        <params>
                            <param name="p" type="Point"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="8569"/>
                        <scope line="8570">
                            <declaration name="r" type="Rectangle" line="8571"/>
                        </scope>
                        <scope line="8573">
                            <declaration name="c" type="Component" line="8574"/>
                            <scope line="8575">
                                <declaration name="r" type="Rectangle" line="8576"/>
                            </scope>
                            <scope line="8578"/>
                        </scope>
                    </method>
                    <javadoc line="8584">
                        Returns the location of the object on the screen.                        
                        <return>
                            location of object on screen -- can be
                              <code>null</code> if this object is not on the screen                            
                        </return>
                    </javadoc>
                    <method name="getLocationOnScreen" type="Point" line="8590">
                        <scope line="8591">
                            <declaration name="parentLocation" type="Point" line="8592"/>
                            <declaration name="componentLocation" type="Point" line="8593"/>
                        </scope>
                        <scope line="8596"/>
                    </method>
                    <javadoc line="8601">
                        Gets the location of the object relative to the parent
                          in the form of a point specifying the object&apos;s
                          top-left corner in the screen&apos;s coordinate space.                        
                        <return>
                            an instance of <code>Point</code> representing
                              the top-left corner of the object's bounds in the
                              coordinate space of the screen; <code>null</code> if
                              this object or its parent are not on the screen                            
                        </return>
                    </javadoc>
                    <method name="getLocation" type="Point" line="8611">
                        <scope line="8612">
                            <declaration name="r" type="Rectangle" line="8613"/>
                            <scope line="8614"/>
                        </scope>
                    </method>
                    <javadoc line="8621">
                        Sets the location of the object relative to the parent.                        
                    </javadoc>
                    <method name="setLocation" type="void" line="8624">
                        <params>
                            <param name="p" type="Point"/>
                        </params>
                        <comment line="8626">
                            if ((parent != null)  &amp;&amp; (parent.contains(p))) {
                                              ensureIndexIsVisible(indexInParent);
                                          }                            
                        </comment>
                    </method>
                    <method name="getBounds" type="Rectangle" line="8630">
                        <scope line="8631"/>
                        <scope line="8633"/>
                    </method>
                    <method name="setBounds" type="void" line="8638">
                        <params>
                            <param name="r" type="Rectangle"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="8639"/>
                        <scope line="8640"/>
                        <scope line="8642">
                            <declaration name="c" type="Component" line="8643"/>
                            <scope line="8644"/>
                        </scope>
                    </method>
                    <method name="getSize" type="Dimension" line="8650">
                        <scope line="8651">
                            <declaration name="r" type="Rectangle" line="8652"/>
                            <scope line="8653"/>
                        </scope>
                    </method>
                    <method name="setSize" type="void" line="8660">
                        <params>
                            <param name="d" type="Dimension"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="8661"/>
                        <scope line="8662"/>
                        <scope line="8664">
                            <declaration name="c" type="Component" line="8665"/>
                            <scope line="8666"/>
                        </scope>
                    </method>
                    <method name="getAccessibleAt" type="Accessible" line="8672">
                        <params>
                            <param name="p" type="Point"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="8673"/>
                        <scope line="8674"/>
                        <scope line="8676"/>
                    </method>
                    <method name="isFocusTraversable" type="boolean" line="8681">
                        <declaration name="ac" type="AccessibleContext" line="8682"/>
                        <scope line="8683"/>
                        <scope line="8685">
                            <declaration name="c" type="Component" line="8686"/>
                            <scope line="8687"/>
                            <scope line="8689"/>
                        </scope>
                    </method>
                    <method name="requestFocus" type="void" line="8695">
                        <declaration name="ac" type="AccessibleContext" line="8696"/>
                        <scope line="8697"/>
                        <scope line="8699">
                            <declaration name="c" type="Component" line="8700"/>
                            <scope line="8701"/>
                        </scope>
                    </method>
                    <method name="addFocusListener" type="void" line="8707">
                        <params>
                            <param name="l" type="FocusListener"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="8708"/>
                        <scope line="8709"/>
                        <scope line="8711">
                            <declaration name="c" type="Component" line="8712"/>
                            <scope line="8713"/>
                        </scope>
                    </method>
                    <method name="removeFocusListener" type="void" line="8719">
                        <params>
                            <param name="l" type="FocusListener"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="8720"/>
                        <scope line="8721"/>
                        <scope line="8723">
                            <declaration name="c" type="Component" line="8724"/>
                            <scope line="8725"/>
                        </scope>
                    </method>
                </class>
                <class name="AccessibleJTableHeaderCell" line="8735">
                    <extends class="AccessibleContext"/>
                    <comment line="7986">
                        AccessibleContext methods                        
                    </comment>
                    <comment line="8025">
                        *** should check toolTip text for desc. (needs MouseEvent)                        
                    </comment>
                    <comment line="8275">
                        AccessibleComponent methods                        
                    </comment>
                    <comment line="8777">
                        Returns the AccessibleContext for the header cell
                         renderer.                        
                    </comment>
                    <comment line="8785">
                        Returns the component that renders the header cell.                        
                    </comment>
                    <comment line="8792">
                        AccessibleContext methods ==========                        
                    </comment>
                    <comment line="9076">
                        AccessibleComponent methods ==========                        
                    </comment>
                    <implements interface="Accessible"/>
                    <implements interface="AccessibleComponent"/>
                    <javadoc line="8735">
                        This class implements accessibility for JTable header cells.                        
                    </javadoc>
                    <declaration name="row" type="int" line="8741"/>
                    <declaration name="column" type="int" line="8742"/>
                    <declaration name="parent" type="JTableHeader" line="8743"/>
                    <declaration name="rendererComponent" type="Component" line="8744"/>
                    <javadoc line="8746">
                        Constructs an &lt;code&gt;AccessibleJTableHeaderEntry&lt;/code&gt; instance.                        
                        <param>
                            row header cell row index                            
                        </param>
                        <param>
                            column header cell column index                            
                        </param>
                        <param>
                            parent header cell parent                            
                        </param>
                        <param>
                            rendererComponent component that renders the header cell                            
                        </param>
                    </javadoc>
                    <method name="AccessibleJTableHeaderCell" type="constructor" line="8756">
                        <params>
                            <param name="row" type="int"/>
                            <param name="column" type="int"/>
                            <param name="parent" type="JTableHeader"/>
                            <param name="rendererComponent" type="Component"/>
                        </params>
                    </method>
                    <javadoc line="8764">
                        Gets the &lt;code&gt;AccessibleContext&lt;/code&gt; associated with this
                          component. In the implementation of the Java Accessibility
                          API for this class, return this object, which is its own
                          &lt;code&gt;AccessibleContext&lt;/code&gt;.                        
                        <return>
                            this object                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleContext" type="AccessibleContext" line="8772"/>
                    <method name="getCurrentAccessibleContext" type="AccessibleContext" line="8780"/>
                    <method name="getCurrentComponent" type="Component" line="8787"/>
                    <javadoc line="8793">
                        Gets the accessible name of this object.                        
                        <return>
                            the localized name of the object; <code>null</code>
                              if this object does not have a name                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleName" type="String" line="8799">
                        <declaration name="ac" type="AccessibleContext" line="8800"/>
                        <scope line="8801">
                            <declaration name="name" type="String" line="8802"/>
                            <scope line="8803"/>
                        </scope>
                        <scope line="8807"/>
                        <scope line="8809"/>
                    </method>
                    <javadoc line="8814">
                        Sets the localized accessible name of this object.                        
                        <param>
                            s the new localized name of the object                            
                        </param>
                    </javadoc>
                    <method name="setAccessibleName" type="void" line="8819">
                        <params>
                            <param name="s" type="String"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="8820"/>
                        <scope line="8821"/>
                        <scope line="8823"/>
                    </method>
                    <javadoc line="8828">
                        Gets the accessible description of this object.                        
                        <return>
                            the localized description of the object;
                              <code>null</code> if this object does not have
                              a description                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleDescription" type="String" line="8835">
                        <declaration name="ac" type="AccessibleContext" line="8836"/>
                        <scope line="8837"/>
                        <scope line="8839"/>
                    </method>
                    <javadoc line="8844">
                        Sets the accessible description of this object.                        
                        <param>
                            s the new localized description of the object                            
                        </param>
                    </javadoc>
                    <method name="setAccessibleDescription" type="void" line="8849">
                        <params>
                            <param name="s" type="String"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="8850"/>
                        <scope line="8851"/>
                        <scope line="8853"/>
                    </method>
                    <javadoc line="8858">
                        Gets the role of this object.                        
                        <return>
                            an instance of <code>AccessibleRole</code>
                              describing the role of the object                            
                        </return>
                        <see>
                            AccessibleRole                            
                        </see>
                    </javadoc>
                    <method name="getAccessibleRole" type="AccessibleRole" line="8865">
                        <declaration name="ac" type="AccessibleContext" line="8866"/>
                        <scope line="8867"/>
                        <scope line="8869"/>
                    </method>
                    <javadoc line="8874">
                        Gets the state set of this object.                        
                        <return>
                            an instance of <code>AccessibleStateSet</code>
                              containing the current state set of the object                            
                        </return>
                        <see>
                            AccessibleState                            
                        </see>
                    </javadoc>
                    <method name="getAccessibleStateSet" type="AccessibleStateSet" line="8881">
                        <declaration name="ac" type="AccessibleContext" line="8882"/>
                        <declaration name="as" type="AccessibleStateSet" line="8883"/>
                        <scope line="8885"/>
                        <scope line="8888"/>
                        <declaration name="rjt" type="Rectangle" line="8891"/>
                        <declaration name="rcell" type="Rectangle" line="8892"/>
                        <scope line="8893"/>
                        <scope line="8895">
                            <scope line="8896"/>
                        </scope>
                        <scope line="8900"/>
                        <scope line="8902"/>
                        <scope line="8905"/>
                    </method>
                    <javadoc line="8912">
                        Gets the &lt;code&gt;Accessible&lt;/code&gt; parent of this object.                        
                        <return>
                            the Accessible parent of this object;
                              <code>null</code> if this object does not
                              have an <code>Accessible</code> parent                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleParent" type="Accessible" line="8919"/>
                    <javadoc line="8923">
                        Gets the index of this object in its accessible parent.                        
                        <return>
                            the index of this object in its parent; -1 if this
                              object does not have an accessible parent                            
                        </return>
                        <see>
                            #getAccessibleParent                            
                        </see>
                    </javadoc>
                    <method name="getAccessibleIndexInParent" type="int" line="8930"/>
                    <javadoc line="8934">
                        Returns the number of accessible children in the object.                        
                        <return>
                            the number of accessible children in the object                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleChildrenCount" type="int" line="8939">
                        <declaration name="ac" type="AccessibleContext" line="8940"/>
                        <scope line="8941"/>
                        <scope line="8943"/>
                    </method>
                    <javadoc line="8948">
                        Returns the specified &lt;code&gt;Accessible&lt;/code&gt; child of the
                          object.                        
                        <param>
                            i zero-based index of child                            
                        </param>
                        <return>
                            the <code>Accessible</code> child of the object                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleChild" type="Accessible" line="8955">
                        <params>
                            <param name="i" type="int"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="8956"/>
                        <scope line="8957">
                            <declaration name="accessibleChild" type="Accessible" line="8958"/>
                        </scope>
                        <scope line="8961"/>
                    </method>
                    <javadoc line="8966">
                        Gets the locale of the component. If the component
                          does not have a locale, then the locale of its parent
                          is returned.                        
                        <return>
                            this component's locale; if this component does
                              not have a locale, the locale of its parent is returned                            
                        </return>
                        <exception>
                            IllegalComponentStateException if the
                              <code>Component</code> does not have its own locale
                              and has not yet been added to a containment hierarchy
                              such that the locale can be determined from the
                              containing parent                            
                        </exception>
                        <see>
                            #setLocale                            
                        </see>
                    </javadoc>
                    <method name="getLocale" type="Locale" line="8980">
                        <declaration name="ac" type="AccessibleContext" line="8981"/>
                        <scope line="8982"/>
                        <scope line="8984"/>
                    </method>
                    <javadoc line="8989">
                        Adds a &lt;code&gt;PropertyChangeListener&lt;/code&gt; to the listener list.
                          The listener is registered for all properties.                        
                        <param>
                            l  the <code>PropertyChangeListener</code>
                              to be added                            
                        </param>
                    </javadoc>
                    <method name="addPropertyChangeListener" type="void" line="8996">
                        <params>
                            <param name="l" type="PropertyChangeListener"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="8997"/>
                        <scope line="8998"/>
                        <scope line="9000"/>
                    </method>
                    <javadoc line="9005">
                        Removes a &lt;code&gt;PropertyChangeListener&lt;/code&gt; from the
                          listener list. This removes a &lt;code&gt;PropertyChangeListener&lt;/code&gt;
                          that was registered for all properties.                        
                        <param>
                            l  the <code>PropertyChangeListener</code>
                              to be removed                            
                        </param>
                    </javadoc>
                    <method name="removePropertyChangeListener" type="void" line="9013">
                        <params>
                            <param name="l" type="PropertyChangeListener"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="9014"/>
                        <scope line="9015"/>
                        <scope line="9017"/>
                    </method>
                    <javadoc line="9022">
                        Gets the &lt;code&gt;AccessibleAction&lt;/code&gt; associated with this
                          object if one exists.  Otherwise returns &lt;code&gt;null&lt;/code&gt;.                        
                        <return>
                            the <code>AccessibleAction</code>, or <code>null</code>                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleAction" type="AccessibleAction" line="9028"/>
                    <javadoc line="9032">
                        Gets the &lt;code&gt;AccessibleComponent&lt;/code&gt; associated with
                          this object if one exists.  Otherwise returns &lt;code&gt;null&lt;/code&gt;.                        
                        <return>
                            the <code>AccessibleComponent</code>, or
                              <code>null</code>                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleComponent" type="AccessibleComponent" line="9039">
                        <comment line="9041">
                            to override getBounds()                            
                        </comment>
                    </method>
                    <javadoc line="9043">
                        Gets the &lt;code&gt;AccessibleSelection&lt;/code&gt; associated with
                          this object if one exists.  Otherwise returns &lt;code&gt;null&lt;/code&gt;.                        
                        <return>
                            the <code>AccessibleSelection</code>, or
                              <code>null</code>                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleSelection" type="AccessibleSelection" line="9050"/>
                    <javadoc line="9054">
                        Gets the &lt;code&gt;AccessibleText&lt;/code&gt; associated with this
                          object if one exists.  Otherwise returns &lt;code&gt;null&lt;/code&gt;.                        
                        <return>
                            the <code>AccessibleText</code>, or <code>null</code>                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleText" type="AccessibleText" line="9060"/>
                    <javadoc line="9064">
                        Gets the &lt;code&gt;AccessibleValue&lt;/code&gt; associated with
                          this object if one exists.  Otherwise returns &lt;code&gt;null&lt;/code&gt;.                        
                        <return>
                            the <code>AccessibleValue</code>, or <code>null</code>                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleValue" type="AccessibleValue" line="9070"/>
                    <javadoc line="9077">
                        Gets the background color of this object.                        
                        <return>
                            the background color, if supported, of the object;
                              otherwise, <code>null</code>                            
                        </return>
                    </javadoc>
                    <method name="getBackground" type="Color" line="9083">
                        <declaration name="ac" type="AccessibleContext" line="9084"/>
                        <scope line="9085"/>
                        <scope line="9087">
                            <declaration name="c" type="Component" line="9088"/>
                            <scope line="9089"/>
                            <scope line="9091"/>
                        </scope>
                    </method>
                    <javadoc line="9097">
                        Sets the background color of this object.                        
                        <param>
                            c the new <code>Color</code> for the background                            
                        </param>
                    </javadoc>
                    <method name="setBackground" type="void" line="9102">
                        <params>
                            <param name="c" type="Color"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="9103"/>
                        <scope line="9104"/>
                        <scope line="9106">
                            <declaration name="cp" type="Component" line="9107"/>
                            <scope line="9108"/>
                        </scope>
                    </method>
                    <javadoc line="9114">
                        Gets the foreground color of this object.                        
                        <return>
                            the foreground color, if supported, of the object;
                              otherwise, <code>null</code>                            
                        </return>
                    </javadoc>
                    <method name="getForeground" type="Color" line="9120">
                        <declaration name="ac" type="AccessibleContext" line="9121"/>
                        <scope line="9122"/>
                        <scope line="9124">
                            <declaration name="c" type="Component" line="9125"/>
                            <scope line="9126"/>
                            <scope line="9128"/>
                        </scope>
                    </method>
                    <javadoc line="9134">
                        Sets the foreground color of this object.                        
                        <param>
                            c the new <code>Color</code> for the foreground                            
                        </param>
                    </javadoc>
                    <method name="setForeground" type="void" line="9139">
                        <params>
                            <param name="c" type="Color"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="9140"/>
                        <scope line="9141"/>
                        <scope line="9143">
                            <declaration name="cp" type="Component" line="9144"/>
                            <scope line="9145"/>
                        </scope>
                    </method>
                    <javadoc line="9151">
                        Gets the &lt;code&gt;Cursor&lt;/code&gt; of this object.                        
                        <return>
                            the <code>Cursor</code>, if supported,
                              of the object; otherwise, <code>null</code>                            
                        </return>
                    </javadoc>
                    <method name="getCursor" type="Cursor" line="9157">
                        <declaration name="ac" type="AccessibleContext" line="9158"/>
                        <scope line="9159"/>
                        <scope line="9161">
                            <declaration name="c" type="Component" line="9162"/>
                            <scope line="9163"/>
                            <scope line="9165">
                                <declaration name="ap" type="Accessible" line="9166"/>
                                <scope line="9167"/>
                                <scope line="9169"/>
                            </scope>
                        </scope>
                    </method>
                    <javadoc line="9176">
                        Sets the &lt;code&gt;Cursor&lt;/code&gt; of this object.                        
                        <param>
                            c the new <code>Cursor</code> for the object                            
                        </param>
                    </javadoc>
                    <method name="setCursor" type="void" line="9181">
                        <params>
                            <param name="c" type="Cursor"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="9182"/>
                        <scope line="9183"/>
                        <scope line="9185">
                            <declaration name="cp" type="Component" line="9186"/>
                            <scope line="9187"/>
                        </scope>
                    </method>
                    <javadoc line="9193">
                        Gets the &lt;code&gt;Font&lt;/code&gt; of this object.                        
                        <return>
                            the <code>Font</code>,if supported,
                              for the object; otherwise, <code>null</code>                            
                        </return>
                    </javadoc>
                    <method name="getFont" type="Font" line="9199">
                        <declaration name="ac" type="AccessibleContext" line="9200"/>
                        <scope line="9201"/>
                        <scope line="9203">
                            <declaration name="c" type="Component" line="9204"/>
                            <scope line="9205"/>
                            <scope line="9207"/>
                        </scope>
                    </method>
                    <javadoc line="9213">
                        Sets the &lt;code&gt;Font&lt;/code&gt; of this object.                        
                        <param>
                            f the new <code>Font</code> for the object                            
                        </param>
                    </javadoc>
                    <method name="setFont" type="void" line="9218">
                        <params>
                            <param name="f" type="Font"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="9219"/>
                        <scope line="9220"/>
                        <scope line="9222">
                            <declaration name="c" type="Component" line="9223"/>
                            <scope line="9224"/>
                        </scope>
                    </method>
                    <javadoc line="9230">
                        Gets the &lt;code&gt;FontMetrics&lt;/code&gt; of this object.                        
                        <param>
                            f the <code>Font</code>                            
                        </param>
                        <return>
                            the <code>FontMetrics</code> object, if supported;
                              otherwise <code>null</code>                            
                        </return>
                        <see>
                            #getFont                            
                        </see>
                    </javadoc>
                    <method name="getFontMetrics" type="FontMetrics" line="9238">
                        <params>
                            <param name="f" type="Font"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="9239"/>
                        <scope line="9240"/>
                        <scope line="9242">
                            <declaration name="c" type="Component" line="9243"/>
                            <scope line="9244"/>
                            <scope line="9246"/>
                        </scope>
                    </method>
                    <javadoc line="9252">
                        Determines if the object is enabled.                        
                        <return>
                            true if object is enabled; otherwise, false                            
                        </return>
                    </javadoc>
                    <method name="isEnabled" type="boolean" line="9257">
                        <declaration name="ac" type="AccessibleContext" line="9258"/>
                        <scope line="9259"/>
                        <scope line="9261">
                            <declaration name="c" type="Component" line="9262"/>
                            <scope line="9263"/>
                            <scope line="9265"/>
                        </scope>
                    </method>
                    <javadoc line="9271">
                        Sets the enabled state of the object.                        
                        <param>
                            b if true, enables this object; otherwise, disables it                            
                        </param>
                    </javadoc>
                    <method name="setEnabled" type="void" line="9276">
                        <params>
                            <param name="b" type="boolean"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="9277"/>
                        <scope line="9278"/>
                        <scope line="9280">
                            <declaration name="c" type="Component" line="9281"/>
                            <scope line="9282"/>
                        </scope>
                    </method>
                    <javadoc line="9288">
                        Determines if this object is visible.  Note: this means that the
                          object intends to be visible; however, it may not in fact be
                          showing on the screen because one of the objects that this object
                          is contained by is not visible.  To determine if an object is
                          showing on the screen, use &lt;code&gt;isShowing&lt;/code&gt;.                        
                        <return>
                            true if object is visible; otherwise, false                            
                        </return>
                    </javadoc>
                    <method name="isVisible" type="boolean" line="9297">
                        <declaration name="ac" type="AccessibleContext" line="9298"/>
                        <scope line="9299"/>
                        <scope line="9301">
                            <declaration name="c" type="Component" line="9302"/>
                            <scope line="9303"/>
                            <scope line="9305"/>
                        </scope>
                    </method>
                    <javadoc line="9311">
                        Sets the visible state of the object.                        
                        <param>
                            b if true, shows this object; otherwise, hides it                            
                        </param>
                    </javadoc>
                    <method name="setVisible" type="void" line="9316">
                        <params>
                            <param name="b" type="boolean"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="9317"/>
                        <scope line="9318"/>
                        <scope line="9320">
                            <declaration name="c" type="Component" line="9321"/>
                            <scope line="9322"/>
                        </scope>
                    </method>
                    <javadoc line="9328">
                        Determines if the object is showing.  This is determined
                          by checking the visibility of the object and ancestors
                          of the object.  Note: this will return true even if the
                          object is obscured by another (for example,
                          it happens to be underneath a menu that was pulled down).                        
                        <return>
                            true if the object is showing; otherwise, false                            
                        </return>
                    </javadoc>
                    <method name="isShowing" type="boolean" line="9337">
                        <comment line="9344">
                            Fixes 4529616 - AccessibleJTableCell.isShowing()
                             returns false when the cell on the screen
                             if no parent                            
                        </comment>
                        <declaration name="ac" type="AccessibleContext" line="9338"/>
                        <scope line="9339">
                            <scope line="9340"/>
                            <scope line="9342"/>
                        </scope>
                        <scope line="9348">
                            <declaration name="c" type="Component" line="9349"/>
                            <scope line="9350"/>
                            <scope line="9352"/>
                        </scope>
                    </method>
                    <javadoc line="9358">
                        Checks whether the specified point is within this
                          object&apos;s bounds, where the point&apos;s x and y coordinates
                          are defined to be relative to the coordinate system of
                          the object.                        
                        <param>
                            p the <code>Point</code> relative to the
                              coordinate system of the object                            
                        </param>
                        <return>
                            true if object contains <code>Point</code>;
                              otherwise false                            
                        </return>
                    </javadoc>
                    <method name="contains" type="boolean" line="9369">
                        <params>
                            <param name="p" type="Point"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="9370"/>
                        <scope line="9371">
                            <declaration name="r" type="Rectangle" line="9372"/>
                        </scope>
                        <scope line="9374">
                            <declaration name="c" type="Component" line="9375"/>
                            <scope line="9376">
                                <declaration name="r" type="Rectangle" line="9377"/>
                            </scope>
                            <scope line="9379"/>
                        </scope>
                    </method>
                    <javadoc line="9385">
                        Returns the location of the object on the screen.                        
                        <return>
                            location of object on screen -- can be
                              <code>null</code> if this object is not on the screen                            
                        </return>
                    </javadoc>
                    <method name="getLocationOnScreen" type="Point" line="9391">
                        <scope line="9392">
                            <declaration name="parentLocation" type="Point" line="9393"/>
                            <declaration name="componentLocation" type="Point" line="9394"/>
                        </scope>
                        <scope line="9397"/>
                    </method>
                    <javadoc line="9402">
                        Gets the location of the object relative to the parent
                          in the form of a point specifying the object&apos;s
                          top-left corner in the screen&apos;s coordinate space.                        
                        <return>
                            an instance of <code>Point</code> representing
                              the top-left corner of the object's bounds in the
                              coordinate space of the screen; <code>null</code> if
                              this object or its parent are not on the screen                            
                        </return>
                    </javadoc>
                    <method name="getLocation" type="Point" line="9412">
                        <scope line="9413">
                            <declaration name="r" type="Rectangle" line="9414"/>
                            <scope line="9415"/>
                        </scope>
                    </method>
                    <javadoc line="9422">
                        Sets the location of the object relative to the parent.                        
                        <param>
                            p the new position for the top-left corner                            
                        </param>
                        <see>
                            #getLocation                            
                        </see>
                    </javadoc>
                    <method name="setLocation" type="void" line="9427">
                        <params>
                            <param name="p" type="Point"/>
                        </params>
                    </method>
                    <javadoc line="9430">
                        Gets the bounds of this object in the form of a Rectangle object.
                          The bounds specify this object&apos;s width, height, and location
                          relative to its parent.                        
                        <return>
                            A rectangle indicating this component's bounds; null if
                              this object is not on the screen.                            
                        </return>
                        <see>
                            #contains                            
                        </see>
                    </javadoc>
                    <method name="getBounds" type="Rectangle" line="9439">
                        <scope line="9440"/>
                        <scope line="9442"/>
                    </method>
                    <javadoc line="9447">
                        Sets the bounds of this object in the form of a Rectangle object.
                          The bounds specify this object&apos;s width, height, and location
                          relative to its parent.                        
                        <param>
                            r rectangle indicating this component's bounds                            
                        </param>
                        <see>
                            #getBounds                            
                        </see>
                    </javadoc>
                    <method name="setBounds" type="void" line="9455">
                        <params>
                            <param name="r" type="Rectangle"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="9456"/>
                        <scope line="9457"/>
                        <scope line="9459">
                            <declaration name="c" type="Component" line="9460"/>
                            <scope line="9461"/>
                        </scope>
                    </method>
                    <javadoc line="9467">
                        Returns the size of this object in the form of a Dimension object.
                          The height field of the Dimension object contains this object&apos;s
                          height, and the width field of the Dimension object contains this
                          object&apos;s width.                        
                        <return>
                            A Dimension object that indicates the size of this component;
                              null if this object is not on the screen                            
                        </return>
                        <see>
                            #setSize                            
                        </see>
                    </javadoc>
                    <method name="getSize" type="Dimension" line="9477">
                        <scope line="9478">
                            <declaration name="r" type="Rectangle" line="9479"/>
                            <scope line="9480"/>
                        </scope>
                    </method>
                    <javadoc line="9487">
                        Resizes this object so that it has width and height.                        
                        <param>
                            d The dimension specifying the new size of the object.                            
                        </param>
                        <see>
                            #getSize                            
                        </see>
                    </javadoc>
                    <method name="setSize" type="void" line="9493">
                        <params>
                            <param name="d" type="Dimension"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="9494"/>
                        <scope line="9495"/>
                        <scope line="9497">
                            <declaration name="c" type="Component" line="9498"/>
                            <scope line="9499"/>
                        </scope>
                    </method>
                    <javadoc line="9505">
                        Returns the Accessible child, if one exists, contained at the local
                          coordinate Point.                        
                        <param>
                            p The point relative to the coordinate system of this object.                            
                        </param>
                        <return>
                            the Accessible, if it exists, at the specified location;
                              otherwise null                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleAt" type="Accessible" line="9513">
                        <params>
                            <param name="p" type="Point"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="9514"/>
                        <scope line="9515"/>
                        <scope line="9517"/>
                    </method>
                    <javadoc line="9522">
                        Returns whether this object can accept focus or not.   Objects that
                          can accept focus will also have the AccessibleState.FOCUSABLE state
                          set in their AccessibleStateSets.                        
                        <return>
                            true if object can accept focus; otherwise false                            
                        </return>
                        <see>
                            AccessibleContext#getAccessibleStateSet                            
                        </see>
                        <see>
                            AccessibleState#FOCUSABLE                            
                        </see>
                        <see>
                            AccessibleState#FOCUSED                            
                        </see>
                        <see>
                            AccessibleStateSet                            
                        </see>
                    </javadoc>
                    <method name="isFocusTraversable" type="boolean" line="9533">
                        <declaration name="ac" type="AccessibleContext" line="9534"/>
                        <scope line="9535"/>
                        <scope line="9537">
                            <declaration name="c" type="Component" line="9538"/>
                            <scope line="9539"/>
                            <scope line="9541"/>
                        </scope>
                    </method>
                    <javadoc line="9547">
                        Requests focus for this object.  If this object cannot accept focus,
                          nothing will happen.  Otherwise, the object will attempt to take
                          focus.                        
                        <see>
                            #isFocusTraversable                            
                        </see>
                    </javadoc>
                    <method name="requestFocus" type="void" line="9553">
                        <declaration name="ac" type="AccessibleContext" line="9554"/>
                        <scope line="9555"/>
                        <scope line="9557">
                            <declaration name="c" type="Component" line="9558"/>
                            <scope line="9559"/>
                        </scope>
                    </method>
                    <javadoc line="9565">
                        Adds the specified focus listener to receive focus events from this
                          component.                        
                        <param>
                            l the focus listener                            
                        </param>
                        <see>
                            #removeFocusListener                            
                        </see>
                    </javadoc>
                    <method name="addFocusListener" type="void" line="9572">
                        <params>
                            <param name="l" type="FocusListener"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="9573"/>
                        <scope line="9574"/>
                        <scope line="9576">
                            <declaration name="c" type="Component" line="9577"/>
                            <scope line="9578"/>
                        </scope>
                    </method>
                    <javadoc line="9584">
                        Removes the specified focus listener so it no longer receives focus
                          events from this component.                        
                        <param>
                            l the focus listener                            
                        </param>
                        <see>
                            #addFocusListener                            
                        </see>
                    </javadoc>
                    <method name="removeFocusListener" type="void" line="9591">
                        <params>
                            <param name="l" type="FocusListener"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="9592"/>
                        <scope line="9593"/>
                        <scope line="9595">
                            <declaration name="c" type="Component" line="9596"/>
                            <scope line="9597"/>
                        </scope>
                    </method>
                </class>
            </class>
        </class>
    </source>