<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.awt.AWTEvent"/>
        <import package="java.awt.Component"/>
        <import package="java.awt.ComponentOrientation"/>
        <import package="java.awt.Container"/>
        <import package="java.awt.Dimension"/>
        <import package="java.awt.Frame"/>
        <import package="java.awt.Graphics"/>
        <import package="java.awt.GraphicsConfiguration"/>
        <import package="java.awt.GraphicsDevice"/>
        <import package="java.awt.GraphicsEnvironment"/>
        <import package="java.awt.Insets"/>
        <import package="java.awt.Point"/>
        <import package="java.awt.Polygon"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.Toolkit"/>
        <import package="java.awt.event"/>
        <import package="java.beans"/>
        <import package="java.util"/>
        <import package="java.io.Serializable"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.IOException"/>
        <import package="javax.swing.event"/>
        <import package="javax.swing.plaf"/>
        <import package="javax.swing.plaf.basic"/>
        <import package="javax.accessibility"/>
        <import package="java.lang.ref.WeakReference"/>
        <class name="JMenu" line="60">
            <extends class="JMenuItem"/>
            <comment line="121">
                The popup menu portion of the menu.                
            </comment>
            <comment line="126">
                The button&apos;s model listeners.  Default is &lt;code&gt;null&lt;code&gt;.                
            </comment>
            <comment line="131">
                Only one &lt;code&gt;MenuEvent&lt;code&gt; is needed for each menu since the
                 event&apos;s only state is the source property.  The source of events
                 generated is always &quot;this&quot;.  Default is &lt;code&gt;null&lt;code&gt;.                
            </comment>
            <comment line="138">
                Registry of listeners created for &lt;code&gt;Action-JMenuItem&lt;code&gt;
                 linkage.  This is needed so that references can
                 be cleaned up at remove time to allow garbage collection
                 Default is &lt;code&gt;null&lt;code&gt;.                
            </comment>
            <comment line="145">
                Used by the look and feel (L&amp;F) code to handle
                 implementation specific menu behaviors.                
            </comment>
            <comment line="151">
                Location of the popup component. Location is &lt;code&gt;null&lt;code&gt;
                 if it was not customized by &lt;code&gt;setMenuLocation&lt;code&gt;                
            </comment>
            <comment line="157">
                                
            </comment>
            <comment line="158">
                trace creates and disposes                
            </comment>
            <comment line="159">
                show reuse hits/misses                
            </comment>
            <comment line="160">
                show bad params, misc.                
            </comment>
            <comment line="245">
                public void repaint(long tm, int x, int y, int width, int height) {                
            </comment>
            <comment line="246">
                Thread.currentThread().dumpStack();                
            </comment>
            <comment line="247">
                super.repaint(tm,x,y,width,height);                
            </comment>
            <comment line="248">
                }                
            </comment>
            <comment line="552">
                Return the customized location of the popup component.                
            </comment>
            <comment line="946">
                Returns a point in the coordinate space of this menu&apos;s popupmenu
                 which corresponds to the point &lt;code&gt;p&lt;code&gt; in the menu&apos;s
                 coordinate space.
                
                 @param p the point to be translated
                 @return the point in the coordinate space of this menu&apos;s popupmenu                
            </comment>
            <comment line="958">
                Returns a point in the coordinate space of this menu&apos;s popupmenu
                 which corresponds to the point (x,y) in the menu&apos;s coordinate space.
                
                 @param x the x coordinate of the point to be translated
                 @param y the y coordinate of the point to be translated
                 @return the point in the coordinate space of this menu&apos;s popupmenu                
            </comment>
            <comment line="1111">
                Overriden to do nothing, JMenu doesn&apos;t support an accelerator                
            </comment>
            <comment line="1215">
                implements javax.swing.MenuElement                
            </comment>
            <comment line="1300">
                Build an array of menu elements - from &lt;code&gt;PopupMenu&lt;code&gt; to
                 the root &lt;code&gt;JMenuBar&lt;code&gt;.
                 @param  leaf  the leaf node from which to start building up the array
                 @return the array of menu items                
            </comment>
            <comment line="1364">
                ///////////////                
            </comment>
            <comment line="1365">
                Accessibility support                
            </comment>
            <comment line="1366">
                //////////////                
            </comment>
            <comment line="1623">
                inner class AccessibleJMenu                
            </comment>
            <implements interface="Accessible"/>
            <implements interface="MenuElement"/>
            <javadoc line="60">
                An implementation of a menu -- a popup window containing
                  &lt;code&gt;JMenuItem&lt;/code&gt;s that
                  is displayed when the user selects an item on the &lt;code&gt;JMenuBar&lt;/code&gt;.
                  In addition to &lt;code&gt;JMenuItem&lt;/code&gt;s, a &lt;code&gt;JMenu&lt;/code&gt; can
                  also contain &lt;code&gt;JSeparator&lt;/code&gt;s.
                  &lt;p&gt;
                  In essence, a menu is a button with an associated &lt;code&gt;JPopupMenu&lt;/code&gt;.
                  When the &quot;button&quot; is pressed, the &lt;code&gt;JPopupMenu&lt;/code&gt; appears. If the
                  &quot;button&quot; is on the &lt;code&gt;JMenuBar&lt;/code&gt;, the menu is a top-level window.
                  If the &quot;button&quot; is another menu item, then the &lt;code&gt;JPopupMenu&lt;/code&gt; is
                  &quot;pull-right&quot; menu.
                  &lt;p&gt;
                  Menus can be configured, and to some degree controlled, by
                  &lt;code&gt;&lt;a href=&quot;Action.html&quot;&gt;Action&lt;/a&gt;&lt;/code&gt;s.  Using an
                  &lt;code&gt;Action&lt;/code&gt; with a menu has many benefits beyond directly
                  configuring a menu.  Refer to &lt;a href=&quot;Action.html#buttonActions&quot;&gt;
                  Swing Components Supporting &lt;code&gt;Action&lt;/code&gt;&lt;/a&gt; for more
                  details, and you can find more information in &lt;a
                  href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/misc/action.html&quot;&gt;How
                  to Use Actions&lt;/a&gt;, a section in &lt;em&gt;The Java Tutorial&lt;/em&gt;.
                  &lt;p&gt;
                  For information and examples of using menus see
                  &lt;a href=&quot;http://java.sun.com/doc/books/tutorial/uiswing/components/menu.html&quot;&gt;How to Use Menus&lt;/a&gt;,
                  a section in &lt;em&gt;The Java Tutorial.&lt;/em&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt; Swing is not thread safe. For more
                  information see &lt;a
                  href=&quot;package-summary.html#threading&quot;&gt;Swing&apos;s Threading
                  Policy&lt;/a&gt;.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <beaninfo>
                    attribute: isContainer true
                      description: A popup window containing menu items displayed in a menu bar.                    
                </beaninfo>
                <author>
                    Georges Saab                    
                </author>
                <author>
                    David Karlton                    
                </author>
                <author>
                    Arnaud Weber                    
                </author>
                <see>
                    JMenuItem                    
                </see>
                <see>
                    JSeparator                    
                </see>
                <see>
                    JMenuBar                    
                </see>
                <see>
                    JPopupMenu                    
                </see>
            </javadoc>
            <declaration name="uiClassID" type="String" line="114"/>
            <javadoc line="114">
                @see #getUIClassID                
                <see>
                    #readObject                    
                </see>
            </javadoc>
            <declaration name="popupMenu" type="JPopupMenu" line="123"/>
            <declaration name="menuChangeListener" type="ChangeListener" line="128"/>
            <declaration name="menuEvent" type="MenuEvent" line="135"/>
            <declaration name="listenerRegistry" type="Hashtable" line="142"/>
            <declaration name="delay" type="int" line="148"/>
            <declaration name="customMenuLocation" type="Point" line="154"/>
            <declaration name="TRACE" type="boolean" line="157"/>
            <declaration name="VERBOSE" type="boolean" line="158"/>
            <declaration name="DEBUG" type="boolean" line="159"/>
            <javadoc line="161">
                Constructs a new &lt;code&gt;JMenu&lt;/code&gt; with no text.                
            </javadoc>
            <method name="JMenu" type="constructor" line="164"/>
            <javadoc line="168">
                Constructs a new &lt;code&gt;JMenu&lt;/code&gt; with the supplied string
                  as its text.                
                <param>
                    s  the text for the menu label                    
                </param>
            </javadoc>
            <method name="JMenu" type="constructor" line="174">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <javadoc line="178">
                Constructs a menu whose properties are taken from the
                  &lt;code&gt;Action&lt;/code&gt; supplied.                
                <param>
                    a an <code>Action</code>                    
                </param>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="JMenu" type="constructor" line="185">
                <params>
                    <param name="a" type="Action"/>
                </params>
            </method>
            <javadoc line="190">
                Constructs a new &lt;code&gt;JMenu&lt;/code&gt; with the supplied string as
                  its text and specified as a tear-off menu or not.                
                <param>
                    s the text for the menu label                    
                </param>
                <param>
                    b can the menu be torn off (not yet implemented)                    
                </param>
            </javadoc>
            <method name="JMenu" type="constructor" line="197">
                <params>
                    <param name="s" type="String"/>
                    <param name="b" type="boolean"/>
                </params>
            </method>
            <javadoc line="202">
                Overriden to do nothing. We want JMenu to be focusable, but
                  &lt;code&gt;JMenuItem&lt;/code&gt; doesn&apos;t want to be, thus we override this
                  do nothing. We don&apos;t invoke &lt;code&gt;setFocusable(true)&lt;/code&gt; after
                  super&apos;s constructor has completed as this has the side effect that
                  &lt;code&gt;JMenu&lt;/code&gt; will be considered traversable via the
                  keyboard, which we don&apos;t want. Making a Component traversable by
                  the keyboard after invoking &lt;code&gt;setFocusable(true)&lt;/code&gt; is OK,
                  as &lt;code&gt;setFocusable&lt;/code&gt; is new API
                  and is speced as such, but internally we don&apos;t want to use it like
                  this else we change the keyboard traversability.                
            </javadoc>
            <method name="initFocusability" type="void" line="214"/>
            <javadoc line="217">
                Resets the UI property with a value from the current look and feel.                
                <see>
                    JComponent#updateUI                    
                </see>
            </javadoc>
            <method name="updateUI" type="void" line="222">
                <scope line="226"/>
            </method>
            <javadoc line="233">
                Returns the name of the L&amp;F class that renders this component.                
                <return>
                    the string "MenuUI"                    
                </return>
                <see>
                    JComponent#getUIClassID                    
                </see>
                <see>
                    UIDefaults#getUI                    
                </see>
            </javadoc>
            <method name="getUIClassID" type="String" line="240"/>
            <javadoc line="249">
                Sets the data model for the &quot;menu button&quot; -- the label
                  that the user clicks to open or close the menu.                
                <param>
                    newModel the <code>ButtonModel</code>                    
                </param>
                <see>
                    #getModel                    
                </see>
                <beaninfo>
                    description: The menu's model
                      bound: true
                      expert: true
                      hidden: true                    
                </beaninfo>
            </javadoc>
            <method name="setModel" type="void" line="261">
                <params>
                    <param name="newModel" type="ButtonModel"/>
                </params>
                <declaration name="oldModel" type="ButtonModel" line="262"/>
                <scope line="266"/>
                <scope line="273"/>
            </method>
            <javadoc line="279">
                Returns true if the menu is currently selected (highlighted).                
                <return>
                    true if the menu is selected, else false                    
                </return>
            </javadoc>
            <method name="isSelected" type="boolean" line="284"/>
            <javadoc line="288">
                Sets the selection status of the menu.                
                <param>
                    b  true to select (highlight) the menu; false to de-select
                      the menu                    
                </param>
                <beaninfo>
                    description: When the menu is selected, its popup child is shown.
                      expert: true
                      hidden: true                    
                </beaninfo>
            </javadoc>
            <method name="setSelected" type="void" line="298">
                <params>
                    <param name="b" type="boolean"/>
                </params>
                <comment line="302">
                    TIGER - 4840653                    
                </comment>
                <comment line="303">
                    Removed code which fired an AccessibleState.SELECTED                    
                </comment>
                <comment line="304">
                    PropertyChangeEvent since this resulted in two                    
                </comment>
                <comment line="305">
                    identical events being fired since                    
                </comment>
                <comment line="306">
                    AbstractButton.fireItemStateChanged also fires the                    
                </comment>
                <comment line="307">
                    same event. This caused screen readers to speak the                    
                </comment>
                <comment line="308">
                    name of the item twice.                    
                </comment>
                <declaration name="model" type="ButtonModel" line="299"/>
                <declaration name="oldValue" type="boolean" line="300"/>
                <scope line="310"/>
            </method>
            <javadoc line="315">
                Returns true if the menu&apos;s popup window is visible.                
                <return>
                    true if the menu is visible, else false                    
                </return>
            </javadoc>
            <method name="isPopupMenuVisible" type="boolean" line="320"/>
            <javadoc line="325">
                Sets the visibility of the menu&apos;s popup.  If the menu is
                  not enabled, this method will have no effect.                
                <param>
                    b  a boolean value -- true to make the menu visible,
                      false to hide it                    
                </param>
                <beaninfo>
                    description: The popup menu's visibility
                      expert: true
                      hidden: true                    
                </beaninfo>
            </javadoc>
            <method name="setPopupMenuVisible" type="void" line="336">
                <params>
                    <param name="b" type="boolean"/>
                </params>
                <comment line="339">
                    Thread.dumpStack();                    
                </comment>
                <comment line="346">
                    Set location of popupMenu (pulldown or pullright)                    
                </comment>
                <scope line="337"/>
                <declaration name="isVisible" type="boolean" line="342"/>
                <scope line="343">
                    <scope line="345">
                        <declaration name="p" type="Point" line="347"/>
                        <scope line="348"/>
                    </scope>
                    <scope line="352"/>
                </scope>
            </method>
            <javadoc line="358">
                Computes the origin for the &lt;code&gt;JMenu&lt;/code&gt;&apos;s popup menu.
                  This method uses Look and Feel properties named
                  &lt;code&gt;Menu.menuPopupOffsetX&lt;/code&gt;,
                  &lt;code&gt;Menu.menuPopupOffsetY&lt;/code&gt;,
                  &lt;code&gt;Menu.submenuPopupOffsetX&lt;/code&gt;, and
                  &lt;code&gt;Menu.submenuPopupOffsetY&lt;/code&gt;
                  to adjust the exact location of popup.                
                <return>
                    a <code>Point</code> in the coordinate space of the
                      menu which should be used as the origin
                      of the <code>JMenu</code>'s popup menu                    
                </return>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getPopupMenuOrigin" type="Point" line="373">
                <comment line="377">
                    Figure out the sizes needed to caclulate the menu position                    
                </comment>
                <comment line="380">
                    For the first time the menu is popped up,                    
                </comment>
                <comment line="381">
                    the size has not yet been initiated                    
                </comment>
                <comment line="406">
                    take screen insets (e.g. taskbar) into account                    
                </comment>
                <comment line="419">
                    We are a submenu (pull-right)                    
                </comment>
                <comment line="424">
                    First determine x:                    
                </comment>
                <comment line="425">
                    Prefer placement to the right                    
                </comment>
                <comment line="428">
                    popup doesn&apos;t fit - place it wherever there&apos;s more room                    
                </comment>
                <comment line="435">
                    First determine x:                    
                </comment>
                <comment line="436">
                    Prefer placement to the left                    
                </comment>
                <comment line="438">
                    popup doesn&apos;t fit - place it wherever there&apos;s more room                    
                </comment>
                <comment line="445">
                    Then the y:                    
                </comment>
                <comment line="446">
                    Prefer dropping down                    
                </comment>
                <comment line="449">
                    popup doesn&apos;t fit - place it wherever there&apos;s more room                    
                </comment>
                <comment line="456">
                    We are a toplevel menu (pull-down)                    
                </comment>
                <comment line="461">
                    First determine the x:                    
                </comment>
                <comment line="462">
                    Extend to the right                    
                </comment>
                <comment line="465">
                    popup doesn&apos;t fit - place it wherever there&apos;s more room                    
                </comment>
                <comment line="472">
                    First determine the x:                    
                </comment>
                <comment line="473">
                    Extend to the left                    
                </comment>
                <comment line="475">
                    popup doesn&apos;t fit - place it wherever there&apos;s more room                    
                </comment>
                <comment line="482">
                    Then the y:                    
                </comment>
                <comment line="483">
                    Prefer dropping down                    
                </comment>
                <comment line="485">
                    popup doesn&apos;t fit - place it wherever there&apos;s more room                    
                </comment>
                <comment line="489">
                    Otherwise drop &apos;up&apos;                    
                </comment>
                <declaration name="x" type="int" line="374"/>
                <declaration name="y" type="int" line="375"/>
                <declaration name="pm" type="JPopupMenu" line="376"/>
                <declaration name="s" type="Dimension" line="378"/>
                <declaration name="pmSize" type="Dimension" line="379"/>
                <scope line="382"/>
                <declaration name="position" type="Point" line="385"/>
                <declaration name="toolkit" type="Toolkit" line="386"/>
                <declaration name="gc" type="GraphicsConfiguration" line="387"/>
                <declaration name="screenBounds" type="Rectangle" line="388"/>
                <declaration name="ge" type="GraphicsEnvironment" line="389"/>
                <declaration name="gd" type="GraphicsDevice[]" line="391"/>
                <scope line="392">
                    <scope line="393">
                        <declaration name="dgc" type="GraphicsConfiguration" line="394"/>
                        <scope line="396"/>
                    </scope>
                </scope>
                <scope line="404">
                    <declaration name="screenInsets" type="Insets" line="407"/>
                </scope>
                <declaration name="parent" type="Container" line="417"/>
                <scope line="418">
                    <declaration name="xOffset" type="int" line="420"/>
                    <declaration name="yOffset" type="int" line="421"/>
                    <scope line="423">
                        <scope line="430"/>
                    </scope>
                    <scope line="434">
                        <scope line="440"/>
                    </scope>
                    <scope line="451"/>
                </scope>
                <scope line="455">
                    <declaration name="xOffset" type="int" line="457"/>
                    <declaration name="yOffset" type="int" line="458"/>
                    <scope line="460">
                        <scope line="467"/>
                    </scope>
                    <scope line="471">
                        <scope line="477"/>
                    </scope>
                    <scope line="487"/>
                </scope>
            </method>
            <javadoc line="496">
                Returns the suggested delay, in milliseconds, before submenus
                  are popped up or down.
                  Each look and feel (L&amp;F) may determine its own policy for
                  observing the &lt;code&gt;delay&lt;/code&gt; property.
                  In most cases, the delay is not observed for top level menus
                  or while dragging.  The default for &lt;code&gt;delay&lt;/code&gt; is 0.
                  This method is a property of the look and feel code and is used
                  to manage the idiosyncracies of the various UI implementations.                
                <return>
                    the <code>delay</code> property                    
                </return>
            </javadoc>
            <method name="getDelay" type="int" line="509"/>
            <javadoc line="513">
                Sets the suggested delay before the menu&apos;s &lt;code&gt;PopupMenu&lt;/code&gt;
                  is popped up or down.  Each look and feel (L&amp;F) may determine
                  it&apos;s own policy for observing the delay property.  In most cases,
                  the delay is not observed for top level menus or while dragging.
                  This method is a property of the look and feel code and is used
                  to manage the idiosyncracies of the various UI implementations.                
                <param>
                    d the number of milliseconds to delay                    
                </param>
                <exception>
                    IllegalArgumentException if <code>d</code>
                      is less than 0                    
                </exception>
                <beaninfo>
                    description: The delay between menu selection and making the popup menu visible
                      expert: true                    
                </beaninfo>
            </javadoc>
            <method name="setDelay" type="void" line="528">
                <params>
                    <param name="d" type="int"/>
                </params>
            </method>
            <declaration name="popupListener" type="WinListener" line="535"/>
            <javadoc line="535">
                The window-closing listener for the popup.                
                <see>
                    WinListener                    
                </see>
            </javadoc>
            <method name="ensurePopupMenuCreated" type="void" line="542">
                <scope line="543">
                    <declaration name="thisMenu" type="JMenu" line="544"/>
                </scope>
            </method>
            <method name="getCustomMenuLocation" type="Point" line="554"/>
            <javadoc line="558">
                Sets the location of the popup component.                
                <param>
                    x the x coordinate of the popup's new position                    
                </param>
                <param>
                    y the y coordinate of the popup's new position                    
                </param>
            </javadoc>
            <method name="setMenuLocation" type="void" line="564">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
            </method>
            <javadoc line="570">
                Appends a menu item to the end of this menu.
                  Returns the menu item added.                
                <param>
                    menuItem the <code>JMenuitem</code> to be added                    
                </param>
                <return>
                    the <code>JMenuItem</code> added                    
                </return>
            </javadoc>
            <method name="add" type="JMenuItem" line="577">
                <params>
                    <param name="menuItem" type="JMenuItem"/>
                </params>
            </method>
            <javadoc line="582">
                Appends a component to the end of this menu.
                  Returns the component added.                
                <param>
                    c the <code>Component</code> to add                    
                </param>
                <return>
                    the <code>Component</code> added                    
                </return>
            </javadoc>
            <method name="add" type="Component" line="589">
                <params>
                    <param name="c" type="Component"/>
                </params>
            </method>
            <javadoc line="595">
                Adds the specified component to this container at the given
                  position. If &lt;code&gt;index&lt;/code&gt; equals -1, the component will
                  be appended to the end.                
                <param>
                    c   the <code>Component</code> to add                    
                </param>
                <param>
                    index    the position at which to insert the component                    
                </param>
                <return>
                    the <code>Component</code> added                    
                </return>
                <see>
                    #remove                    
                </see>
                <see>
                    java.awt.Container#add(Component,int)                    
                </see>
            </javadoc>
            <method name="add" type="Component" line="605">
                <params>
                    <param name="c" type="Component"/>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="611">
                Creates a new menu item with the specified text and appends
                  it to the end of this menu.                
                <param>
                    s the string for the menu item to be added                    
                </param>
            </javadoc>
            <method name="add" type="JMenuItem" line="617">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <javadoc line="621">
                Creates a new menu item attached to the specified
                  &lt;code&gt;Action&lt;/code&gt; object and appends it to the end of this menu.                
                <param>
                    a the <code>Action</code> for the menu item to be added                    
                </param>
                <see>
                    Action                    
                </see>
            </javadoc>
            <method name="add" type="JMenuItem" line="628">
                <params>
                    <param name="a" type="Action"/>
                </params>
                <declaration name="mi" type="JMenuItem" line="629"/>
            </method>
            <javadoc line="635">
                Factory method which creates the &lt;code&gt;JMenuItem&lt;/code&gt; for
                  &lt;code&gt;Action&lt;/code&gt;s added to the &lt;code&gt;JMenu&lt;/code&gt;.                
                <param>
                    a the <code>Action</code> for the menu item to be added                    
                </param>
                <return>
                    the new menu item                    
                </return>
                <see>
                    Action                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="createActionComponent" type="JMenuItem" line="645">
                <params>
                    <param name="a" type="Action"/>
                </params>
                <anonymous_class line="646">
                    <method name="createActionPropertyChangeListener" type="PropertyChangeListener" line="647">
                        <params>
                            <param name="a" type="Action"/>
                        </params>
                        <declaration name="pcl" type="PropertyChangeListener" line="648"/>
                        <scope line="649"/>
                    </method>
                </anonymous_class>
                <declaration name="mi" type="JMenuItem" line="646"/>
            </method>
            <javadoc line="660">
                Returns a properly configured &lt;code&gt;PropertyChangeListener&lt;/code&gt;
                  which updates the control as changes to the &lt;code&gt;Action&lt;/code&gt; occur.                
            </javadoc>
            <method name="createActionChangeListener" type="PropertyChangeListener" line="664">
                <params>
                    <param name="b" type="JMenuItem"/>
                </params>
            </method>
            <javadoc line="668">
                Appends a new separator to the end of the menu.                
            </javadoc>
            <method name="addSeparator" type="void" line="672"/>
            <javadoc line="677">
                Inserts a new menu item with the specified text at a
                  given position.                
                <param>
                    s the text for the menu item to add                    
                </param>
                <param>
                    pos an integer specifying the position at which to add the
                      new menu item                    
                </param>
                <exception>
                    IllegalArgumentException when the value of
                      <code>pos</code> < 0                    
                </exception>
            </javadoc>
            <method name="insert" type="void" line="687">
                <params>
                    <param name="s" type="String"/>
                    <param name="pos" type="int"/>
                </params>
                <scope line="688"/>
            </method>
            <javadoc line="696">
                Inserts the specified &lt;code&gt;JMenuitem&lt;/code&gt; at a given position.                
                <param>
                    mi the <code>JMenuitem</code> to add                    
                </param>
                <param>
                    pos an integer specifying the position at which to add the
                      new <code>JMenuitem</code>                    
                </param>
                <return>
                    the new menu item                    
                </return>
                <exception>
                    IllegalArgumentException if the value of
                      <code>pos</code> < 0                    
                </exception>
            </javadoc>
            <method name="insert" type="JMenuItem" line="706">
                <params>
                    <param name="mi" type="JMenuItem"/>
                    <param name="pos" type="int"/>
                </params>
                <scope line="707"/>
            </method>
            <javadoc line="715">
                Inserts a new menu item attached to the specified &lt;code&gt;Action&lt;/code&gt;
                  object at a given position.                
                <param>
                    a the <code>Action</code> object for the menu item to add                    
                </param>
                <param>
                    pos an integer specifying the position at which to add the
                      new menu item                    
                </param>
                <exception>
                    IllegalArgumentException if the value of
                      <code>pos</code> < 0                    
                </exception>
            </javadoc>
            <method name="insert" type="JMenuItem" line="725">
                <params>
                    <param name="a" type="Action"/>
                    <param name="pos" type="int"/>
                </params>
                <scope line="726"/>
                <declaration name="mi" type="JMenuItem" line="731"/>
            </method>
            <javadoc line="738">
                Inserts a separator at the specified position.                
                <param>
                    index an integer specifying the position at which to
                      insert the menu separator                    
                </param>
                <exception>
                    IllegalArgumentException if the value of
                      <code>index</code> < 0                    
                </exception>
            </javadoc>
            <method name="insertSeparator" type="void" line="746">
                <params>
                    <param name="index" type="int"/>
                </params>
                <scope line="747"/>
            </method>
            <javadoc line="755">
                Returns the &lt;code&gt;JMenuItem&lt;/code&gt; at the specified position.
                  If the component at &lt;code&gt;pos&lt;/code&gt; is not a menu item,
                  &lt;code&gt;null&lt;/code&gt; is returned.
                  This method is included for AWT compatibility.                
                <param>
                    pos    an integer specifying the position                    
                </param>
                <exception>
                    IllegalArgumentException if the value of
                      <code>pos</code> < 0                    
                </exception>
                <return>
                    the menu item at the specified position; or <code>null</code>
                      if the item as the specified position is not a menu item                    
                </return>
            </javadoc>
            <method name="getItem" type="JMenuItem" line="767">
                <params>
                    <param name="pos" type="int"/>
                </params>
                <comment line="778">
                    4173633                    
                </comment>
                <scope line="768"/>
                <declaration name="c" type="Component" line="772"/>
                <scope line="773">
                    <declaration name="mi" type="JMenuItem" line="774"/>
                </scope>
            </method>
            <javadoc line="782">
                Returns the number of items on the menu, including separators.
                  This method is included for AWT compatibility.                
                <return>
                    an integer equal to the number of items on the menu                    
                </return>
                <see>
                    #getMenuComponentCount                    
                </see>
            </javadoc>
            <method name="getItemCount" type="int" line="789"/>
            <javadoc line="793">
                Returns true if the menu can be torn off.  This method is not
                  yet implemented.                
                <return>
                    true if the menu can be torn off, else false                    
                </return>
                <exception>
                    Error  if invoked -- this method is not yet implemented                    
                </exception>
            </javadoc>
            <method name="isTearOff" type="boolean" line="800"/>
            <javadoc line="804">
                Removes the specified menu item from this menu.  If there is no
                  popup menu, this method will have no effect.                
                <param>
                    item the <code>JMenuItem</code> to be removed from the menu                    
                </param>
            </javadoc>
            <method name="remove" type="void" line="810">
                <params>
                    <param name="item" type="JMenuItem"/>
                </params>
            </method>
            <javadoc line="815">
                Removes the menu item at the specified index from this menu.                
                <param>
                    pos the position of the item to be removed                    
                </param>
                <exception>
                    IllegalArgumentException if the value of
                      <code>pos</code> < 0, or if <code>pos</code>
                      is greater than the number of menu items                    
                </exception>
            </javadoc>
            <method name="remove" type="void" line="823">
                <params>
                    <param name="pos" type="int"/>
                </params>
                <scope line="824"/>
                <scope line="827"/>
            </method>
            <javadoc line="834">
                Removes the component &lt;code&gt;c&lt;/code&gt; from this menu.                
                <param>
                    c the component to be removed                    
                </param>
            </javadoc>
            <method name="remove" type="void" line="839">
                <params>
                    <param name="c" type="Component"/>
                </params>
            </method>
            <javadoc line="844">
                Removes all menu items from this menu.                
            </javadoc>
            <method name="removeAll" type="void" line="847"/>
            <javadoc line="852">
                Returns the number of components on the menu.                
                <return>
                    an integer containing the number of components on the menu                    
                </return>
            </javadoc>
            <method name="getMenuComponentCount" type="int" line="857">
                <declaration name="componentCount" type="int" line="858"/>
            </method>
            <javadoc line="864">
                Returns the component at position &lt;code&gt;n&lt;/code&gt;.                
                <param>
                    n the position of the component to be returned                    
                </param>
                <return>
                    the component requested, or <code>null</code>
                      if there is no popup menu                    
                </return>
            </javadoc>
            <method name="getMenuComponent" type="Component" line="872">
                <params>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="879">
                Returns an array of &lt;code&gt;Component&lt;/code&gt;s of the menu&apos;s
                  subcomponents.  Note that this returns all &lt;code&gt;Component&lt;/code&gt;s
                  in the popup menu, including separators.                
                <return>
                    an array of <code>Component</code>s or an empty array
                      if there is no popup menu                    
                </return>
            </javadoc>
            <method name="getMenuComponents" type="Component[]" line="887"/>
            <javadoc line="894">
                Returns true if the menu is a &apos;top-level menu&apos;, that is, if it is
                  the direct child of a menubar.                
                <return>
                    true if the menu is activated from the menu bar;
                      false if the menu is activated from a menu item
                      on another menu                    
                </return>
            </javadoc>
            <method name="isTopLevelMenu" type="boolean" line="902"/>
            <javadoc line="907">
                Returns true if the specified component exists in the
                  submenu hierarchy.                
                <param>
                    c the <code>Component</code> to be tested                    
                </param>
                <return>
                    true if the <code>Component</code> exists, false otherwise                    
                </return>
            </javadoc>
            <method name="isMenuComponent" type="boolean" line="914">
                <params>
                    <param name="c" type="Component"/>
                </params>
                <comment line="915">
                    Are we in the MenuItem part of the menu                    
                </comment>
                <comment line="918">
                    Are we in the PopupMenu?                    
                </comment>
                <comment line="924">
                    Are we in a Component on the PopupMenu                    
                </comment>
                <comment line="929">
                    Are we in the current component?                    
                </comment>
                <comment line="932">
                    Hmmm, what about Non-menu containers?                    
                </comment>
                <comment line="934">
                    Recursive call for the Menu case                    
                </comment>
                <scope line="919">
                    <declaration name="comp" type="JPopupMenu" line="920"/>
                </scope>
                <declaration name="ncomponents" type="int" line="925"/>
                <declaration name="component" type="Component[]" line="926"/>
                <scope line="927">
                    <declaration name="comp" type="Component" line="928"/>
                    <scope line="935">
                        <declaration name="subMenu" type="JMenu" line="936"/>
                    </scope>
                </scope>
            </method>
            <method name="translateToPopupMenu" type="Point" line="953">
                <params>
                    <param name="p" type="Point"/>
                </params>
            </method>
            <method name="translateToPopupMenu" type="Point" line="965">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <declaration name="newX" type="int" line="966"/>
                <declaration name="newY" type="int" line="967"/>
                <scope line="969"/>
                <scope line="972"/>
            </method>
            <javadoc line="980">
                Returns the popupmenu associated with this menu.  If there is
                  no popupmenu, it will create one.                
            </javadoc>
            <method name="getPopupMenu" type="JPopupMenu" line="984"/>
            <javadoc line="989">
                Adds a listener for menu events.                
                <param>
                    l the listener to be added                    
                </param>
            </javadoc>
            <method name="addMenuListener" type="void" line="994">
                <params>
                    <param name="l" type="MenuListener"/>
                </params>
            </method>
            <javadoc line="998">
                Removes a listener for menu events.                
                <param>
                    l the listener to be removed                    
                </param>
            </javadoc>
            <method name="removeMenuListener" type="void" line="1003">
                <params>
                    <param name="l" type="MenuListener"/>
                </params>
            </method>
            <javadoc line="1007">
                Returns an array of all the &lt;code&gt;MenuListener&lt;/code&gt;s added
                  to this JMenu with addMenuListener().                
                <return>
                    all of the <code>MenuListener</code>s added or an empty
                      array if no listeners have been added                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getMenuListeners" type="MenuListener[]" line="1015"/>
            <javadoc line="1019">
                Notifies all listeners that have registered interest for
                  notification on this event type.  The event instance
                  is created lazily.                
                <exception>
                    Error  if there is a <code>null</code> listener                    
                </exception>
                <see>
                    EventListenerList                    
                </see>
            </javadoc>
            <method name="fireMenuSelected" type="void" line="1027">
                <comment line="1031">
                    Guaranteed to return a non-null array                    
                </comment>
                <comment line="1033">
                    Process the listeners last to first, notifying                    
                </comment>
                <comment line="1034">
                    those that are interested in this event                    
                </comment>
                <comment line="1040">
                    Lazily create the event:                    
                </comment>
                <scope line="1028"/>
                <declaration name="listeners" type="Object[]" line="1032"/>
                <scope line="1035">
                    <scope line="1036">
                        <scope line="1037"/>
                        <scope line="1039"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1049">
                Notifies all listeners that have registered interest for
                  notification on this event type.  The event instance
                  is created lazily.                
                <exception>
                    Error if there is a <code>null</code> listener                    
                </exception>
                <see>
                    EventListenerList                    
                </see>
            </javadoc>
            <method name="fireMenuDeselected" type="void" line="1057">
                <comment line="1061">
                    Guaranteed to return a non-null array                    
                </comment>
                <comment line="1063">
                    Process the listeners last to first, notifying                    
                </comment>
                <comment line="1064">
                    those that are interested in this event                    
                </comment>
                <comment line="1070">
                    Lazily create the event:                    
                </comment>
                <scope line="1058"/>
                <declaration name="listeners" type="Object[]" line="1062"/>
                <scope line="1065">
                    <scope line="1066">
                        <scope line="1067"/>
                        <scope line="1069"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1079">
                Notifies all listeners that have registered interest for
                  notification on this event type.  The event instance
                  is created lazily.                
                <exception>
                    Error if there is a <code>null</code> listener                    
                </exception>
                <see>
                    EventListenerList                    
                </see>
            </javadoc>
            <method name="fireMenuCanceled" type="void" line="1087">
                <comment line="1091">
                    Guaranteed to return a non-null array                    
                </comment>
                <comment line="1093">
                    Process the listeners last to first, notifying                    
                </comment>
                <comment line="1094">
                    those that are interested in this event                    
                </comment>
                <comment line="1101">
                    Lazily create the event:                    
                </comment>
                <scope line="1088"/>
                <declaration name="listeners" type="Object[]" line="1092"/>
                <scope line="1095">
                    <scope line="1096">
                        <scope line="1097"/>
                        <scope line="1100"/>
                    </scope>
                </scope>
            </method>
            <method name="configureAcceleratorFromAction" type="void" line="1111">
                <params>
                    <param name="a" type="Action"/>
                </params>
            </method>
            <class name="MenuChangeListener" line="1114">
                <implements interface="ChangeListener"/>
                <implements interface="Serializable"/>
                <declaration name="isSelected" type="boolean" line="1115"/>
                <method name="stateChanged" type="void" line="1116">
                    <params>
                        <param name="e" type="ChangeEvent"/>
                    </params>
                    <declaration name="model" type="ButtonModel" line="1117"/>
                    <declaration name="modelSelected" type="boolean" line="1118"/>
                    <scope line="1120">
                        <scope line="1121"/>
                        <scope line="1123"/>
                    </scope>
                </method>
            </class>
            <method name="createMenuChangeListener" type="ChangeListener" line="1131"/>
            <javadoc line="1136">
                Creates a window-closing listener for the popup.                
                <param>
                    p the <code>JPopupMenu</code>                    
                </param>
                <return>
                    the new window-closing listener                    
                </return>
                <see>
                    WinListener                    
                </see>
            </javadoc>
            <method name="createWinListener" type="WinListener" line="1144">
                <params>
                    <param name="p" type="JPopupMenu"/>
                </params>
            </method>
            <class name="WinListener" line="1148">
                <extends class="WindowAdapter"/>
                <implements interface="Serializable"/>
                <javadoc line="1148">
                    A listener class that watches for a popup window closing.
                      When the popup is closing, the listener deselects the menu.
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      Serialized objects of this class will not be compatible with
                      future Swing releases. The current serialization support is
                      appropriate for short term storage or RMI between applications running
                      the same version of Swing.  As of 1.4, support for long term storage
                      of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                      has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                      Please see {@link java.beans.XMLEncoder}.                    
                </javadoc>
                <declaration name="popupMenu" type="JPopupMenu" line="1162"/>
                <javadoc line="1163">
                    Create the window listener for the specified popup.                    
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <method name="WinListener" type="constructor" line="1167">
                    <params>
                        <param name="p" type="JPopupMenu"/>
                    </params>
                </method>
                <javadoc line="1170">
                    Deselect the menu when the popup is closed from outside.                    
                </javadoc>
                <method name="windowClosing" type="void" line="1173">
                    <params>
                        <param name="e" type="WindowEvent"/>
                    </params>
                </method>
            </class>
            <javadoc line="1178">
                Messaged when the menubar selection changes to activate or
                  deactivate this menu.
                  Overrides &lt;code&gt;JMenuItem.menuSelectionChanged&lt;/code&gt;.                
                <param>
                    isIncluded  true if this menu is active, false if
                      it is not                    
                </param>
            </javadoc>
            <method name="menuSelectionChanged" type="void" line="1186">
                <params>
                    <param name="isIncluded" type="boolean"/>
                </params>
                <scope line="1187"/>
            </method>
            <javadoc line="1193">
                Returns an array of &lt;code&gt;MenuElement&lt;/code&gt;s containing the submenu
                  for this menu component.  If popup menu is &lt;code&gt;null&lt;/code&gt; returns
                  an empty array.  This method is required to conform to the
                  &lt;code&gt;MenuElement&lt;/code&gt; interface.  Note that since
                  &lt;code&gt;JSeparator&lt;/code&gt;s do not conform to the &lt;code&gt;MenuElement&lt;/code&gt;
                  interface, this array will only contain &lt;code&gt;JMenuItem&lt;/code&gt;s.                
                <return>
                    an array of <code>MenuElement</code> objects                    
                </return>
            </javadoc>
            <method name="getSubElements" type="MenuElement[]" line="1203">
                <scope line="1206">
                    <declaration name="result" type="MenuElement" line="1207"/>
                </scope>
            </method>
            <javadoc line="1215">
                Returns the &lt;code&gt;java.awt.Component&lt;/code&gt; used to
                  paint this &lt;code&gt;MenuElement&lt;/code&gt;.
                  The returned component is used to convert events and detect if
                  an event is inside a menu component.                
            </javadoc>
            <method name="getComponent" type="Component" line="1221"/>
            <javadoc line="1226">
                Sets the &lt;code&gt;ComponentOrientation&lt;/code&gt; property of this menu
                  and all components contained within it. This includes all
                  components returned by {@link #getMenuComponents getMenuComponents}.                
                <param>
                    o the new component orientation of this menu and
                      the components contained within it.                    
                </param>
                <exception>
                    NullPointerException if <code>orientation</code> is null.                    
                </exception>
                <see>
                    java.awt.Component#setComponentOrientation                    
                </see>
                <see>
                    java.awt.Component#getComponentOrientation                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="applyComponentOrientation" type="void" line="1238">
                <params>
                    <param name="o" type="ComponentOrientation"/>
                </params>
                <scope line="1241">
                    <declaration name="ncomponents" type="int" line="1242"/>
                    <scope line="1243"/>
                </scope>
            </method>
            <method name="setComponentOrientation" type="void" line="1250">
                <params>
                    <param name="o" type="ComponentOrientation"/>
                </params>
                <scope line="1252"/>
            </method>
            <javadoc line="1257">
                &lt;code&gt;setAccelerator&lt;/code&gt; is not defined for &lt;code&gt;JMenu&lt;/code&gt;.
                  Use &lt;code&gt;setMnemonic&lt;/code&gt; instead.                
                <param>
                    keyStroke  the keystroke combination which will invoke
                      the <code>JMenuItem</code>'s actionlisteners
                      without navigating the menu hierarchy                    
                </param>
                <exception>
                    Error  if invoked -- this method is not defined for JMenu.
                      Use <code>setMnemonic</code> instead                    
                </exception>
                <beaninfo>
                    description: The keystroke combination which will invoke the JMenuItem's
                      actionlisteners without navigating the menu hierarchy
                      hidden: true                    
                </beaninfo>
            </javadoc>
            <method name="setAccelerator" type="void" line="1271">
                <params>
                    <param name="keyStroke" type="KeyStroke"/>
                </params>
            </method>
            <javadoc line="1275">
                Processes key stroke events such as mnemonics and accelerators.                
                <param>
                    evt  the key event to be processed                    
                </param>
            </javadoc>
            <method name="processKeyEvent" type="void" line="1280">
                <params>
                    <param name="evt" type="KeyEvent"/>
                </params>
            </method>
            <javadoc line="1288">
                Programmatically performs a &quot;click&quot;.  This overrides the method
                  &lt;code&gt;AbstractButton.doClick&lt;/code&gt; in order to make the menu pop up.                
                <param>
                    pressTime  indicates the number of milliseconds the
                      button was pressed for                    
                </param>
            </javadoc>
            <method name="doClick" type="void" line="1294">
                <params>
                    <param name="pressTime" type="int"/>
                </params>
                <declaration name="me" type="MenuElement" line="1295"/>
            </method>
            <method name="buildMenuElementArray" type="MenuElement[]" line="1305">
                <params>
                    <param name="leaf" type="JMenu"/>
                </params>
                <declaration name="elements" type="Vector&lt;MenuElement&gt;" line="1306"/>
                <declaration name="current" type="Component" line="1307"/>
                <declaration name="pop" type="JPopupMenu" line="1308"/>
                <declaration name="menu" type="JMenu" line="1309"/>
                <declaration name="bar" type="JMenuBar" line="1310"/>
                <scope line="1312">
                    <scope line="1313"/>
                    <scope line="1317"/>
                    <scope line="1321">
                        <declaration name="me" type="MenuElement" line="1324"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1332">
                See &lt;code&gt;readObject&lt;/code&gt; and &lt;code&gt;writeObject&lt;/code&gt; in
                  &lt;code&gt;JComponent&lt;/code&gt; for more
                  information about serialization in Swing.                
            </javadoc>
            <method name="writeObject" type="void" line="1337">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
                <scope line="1339">
                    <declaration name="count" type="byte" line="1340"/>
                    <scope line="1342"/>
                </scope>
            </method>
            <javadoc line="1349">
                Returns a string representation of this &lt;code&gt;JMenu&lt;/code&gt;. This
                  method is intended to be used only for debugging purposes, and the
                  content and format of the returned string may vary between
                  implementations. The returned string may be empty but may not
                  be &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    a string representation of this JMenu.                    
                </return>
            </javadoc>
            <method name="paramString" type="String" line="1358"/>
            <javadoc line="1367">
                Gets the AccessibleContext associated with this JMenu.
                  For JMenus, the AccessibleContext takes the form of an
                  AccessibleJMenu.
                  A new AccessibleJMenu instance is created if necessary.                
                <return>
                    an AccessibleJMenu that serves as the
                      AccessibleContext of this JMenu                    
                </return>
            </javadoc>
            <method name="getAccessibleContext" type="AccessibleContext" line="1376">
                <scope line="1377"/>
            </method>
            <class name="AccessibleJMenu" line="1383">
                <extends class="AccessibleJMenuItem"/>
                <implements interface="AccessibleSelection"/>
                <javadoc line="1383">
                    This class implements accessibility support for the
                      &lt;code&gt;JMenu&lt;/code&gt; class.  It provides an implementation of the
                      Java Accessibility API appropriate to menu user-interface elements.
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      Serialized objects of this class will not be compatible with
                      future Swing releases. The current serialization support is
                      appropriate for short term storage or RMI between applications running
                      the same version of Swing.  As of 1.4, support for long term storage
                      of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                      has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                      Please see {@link java.beans.XMLEncoder}.                    
                </javadoc>
                <javadoc line="1400">
                    Returns the number of accessible children in the object.  If all
                      of the children of this object implement Accessible, than this
                      method should return the number of children of this object.                    
                    <return>
                        the number of accessible children in the object.                        
                    </return>
                </javadoc>
                <method name="getAccessibleChildrenCount" type="int" line="1407">
                    <declaration name="children" type="Component[]" line="1408"/>
                    <declaration name="count" type="int" line="1409"/>
                    <scope line="1410">
                        <scope line="1411"/>
                    </scope>
                </method>
                <javadoc line="1418">
                    Returns the nth Accessible child of the object.                    
                    <param>
                        i zero-based index of child                        
                    </param>
                    <return>
                        the nth Accessible child of the object                        
                    </return>
                </javadoc>
                <method name="getAccessibleChild" type="Accessible" line="1424">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                    <comment line="1431">
                        FIXME:  [[[WDW - probably should set this when                        
                    </comment>
                    <comment line="1432">
                        the component is added to the menu.  I tried                        
                    </comment>
                    <comment line="1433">
                        to do this in most cases, but the separators                        
                    </comment>
                    <comment line="1434">
                        added by addSeparator are hard to get to.]]]                        
                    </comment>
                    <declaration name="children" type="Component[]" line="1425"/>
                    <declaration name="count" type="int" line="1426"/>
                    <scope line="1427">
                        <scope line="1428">
                            <scope line="1429">
                                <scope line="1430">
                                    <declaration name="ac" type="AccessibleContext" line="1435"/>
                                </scope>
                            </scope>
                            <scope line="1439"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="1447">
                    Get the role of this object.                    
                    <return>
                        an instance of AccessibleRole describing the role of the
                          object                        
                    </return>
                    <see>
                        AccessibleRole                        
                    </see>
                </javadoc>
                <method name="getAccessibleRole" type="AccessibleRole" line="1454"/>
                <javadoc line="1458">
                    Get the AccessibleSelection associated with this object.  In the
                      implementation of the Java Accessibility API for this class,
                      return this object, which is responsible for implementing the
                      AccessibleSelection interface on behalf of itself.                    
                    <return>
                        this object                        
                    </return>
                </javadoc>
                <method name="getAccessibleSelection" type="AccessibleSelection" line="1466"/>
                <javadoc line="1470">
                    Returns 1 if a sub-menu is currently selected in this menu.                    
                    <return>
                        1 if a menu is currently selected, else 0                        
                    </return>
                </javadoc>
                <method name="getAccessibleSelectionCount" type="int" line="1475">
                    <comment line="1480">
                        this menu is selected                        
                    </comment>
                    <declaration name="me" type="MenuElement" line="1476"/>
                    <scope line="1478">
                        <scope line="1479">
                            <scope line="1480">
                                <scope line="1481"/>
                            </scope>
                        </scope>
                    </scope>
                </method>
                <javadoc line="1490">
                    Returns the currently selected sub-menu if one is selected,
                      otherwise null (there can only be one selection, and it can
                      only be a sub-menu, as otherwise menu items don&apos;t remain
                      selected).                    
                </javadoc>
                <method name="getAccessibleSelection" type="Accessible" line="1496">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                    <comment line="1497">
                        if i is a sub-menu &amp; popped, return it                        
                    </comment>
                    <comment line="1505">
                        this menu is selected                        
                    </comment>
                    <comment line="1506">
                        so find the next JMenuItem in the MenuElement                        
                    </comment>
                    <comment line="1507">
                        array, and return it!                        
                    </comment>
                    <scope line="1498"/>
                    <declaration name="me" type="MenuElement" line="1501"/>
                    <scope line="1503">
                        <scope line="1504">
                            <scope line="1505">
                                <scope line="1508">
                                    <scope line="1509"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </method>
                <javadoc line="1519">
                    Returns true if the current child of this object is selected
                      (that is, if this child is a popped-up submenu).                    
                    <param>
                        i the zero-based index of the child in this Accessible
                          object.                        
                    </param>
                    <see>
                        AccessibleContext#getAccessibleChild                        
                    </see>
                </javadoc>
                <method name="isAccessibleChildSelected" type="boolean" line="1527">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                    <comment line="1528">
                        if i is a sub-menu and is pop-ed up, return true, else false                        
                    </comment>
                    <declaration name="me" type="MenuElement" line="1529"/>
                    <scope line="1531">
                        <declaration name="mi" type="JMenuItem" line="1532"/>
                        <scope line="1533">
                            <scope line="1534"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="1543">
                    Selects the &lt;code&gt;i&lt;/code&gt;th menu in the menu.
                      If that item is a submenu,
                      it will pop up in response.  If a different item is already
                      popped up, this will force it to close.  If this is a sub-menu
                      that is already popped up (selected), this method has no
                      effect.                    
                    <param>
                        i the index of the item to be selected                        
                    </param>
                    <see>
                        #getAccessibleStateSet                        
                    </see>
                </javadoc>
                <method name="addAccessibleSelection" type="void" line="1554">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                    <scope line="1555"/>
                    <declaration name="mi" type="JMenuItem" line="1558"/>
                    <scope line="1559">
                        <scope line="1560">
                            <declaration name="me" type="MenuElement" line="1561"/>
                        </scope>
                        <scope line="1563"/>
                    </scope>
                </method>
                <javadoc line="1569">
                    Removes the nth item from the selection.  In general, menus
                      can only have one item within them selected at a time
                      (e.g. one sub-menu popped open).                    
                    <param>
                        i the zero-based index of the selected item                        
                    </param>
                </javadoc>
                <method name="removeAccessibleSelection" type="void" line="1576">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                    <scope line="1577"/>
                    <declaration name="mi" type="JMenuItem" line="1580"/>
                    <scope line="1581">
                        <scope line="1582">
                            <declaration name="old" type="MenuElement" line="1583"/>
                            <declaration name="me" type="MenuElement" line="1585"/>
                            <scope line="1586"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="1594">
                    Clears the selection in the object, so that nothing in the
                      object is selected.  This will close any open sub-menu.                    
                </javadoc>
                <method name="clearAccessibleSelection" type="void" line="1598">
                    <comment line="1599">
                        if this menu is selected, reset selection to only go                        
                    </comment>
                    <comment line="1600">
                        to this menu; else do nothing                        
                    </comment>
                    <comment line="1605">
                        menu is in the selection!                        
                    </comment>
                    <declaration name="old" type="MenuElement" line="1601"/>
                    <scope line="1603">
                        <scope line="1604">
                            <scope line="1605">
                                <declaration name="me" type="MenuElement" line="1606"/>
                            </scope>
                        </scope>
                    </scope>
                </method>
                <javadoc line="1615">
                    Normally causes every selected item in the object to be selected
                      if the object supports multiple selections.  This method
                      makes no sense in a menu bar, and so does nothing.                    
                </javadoc>
                <method name="selectAllAccessibleSelection" type="void" line="1620"/>
            </class>
        </class>
    </source>