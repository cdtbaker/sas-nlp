<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.awt.Component"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Hashtable"/>
        <import package="java.awt.Color"/>
        <import package="java.awt.Graphics"/>
        <import package="java.awt.Rectangle"/>
        <import package="sun.awt.SunToolkit"/>
        <import package="javax.accessibility"/>
        <class name="JLayeredPane" line="37">
            <extends class="JComponent"/>
            <comment line="159">
                / Watch the values in getObjectForLayer()                
            </comment>
            <comment line="180">
                Hashtable to store layer values for non-JComponent components                
            </comment>
            <comment line="185">
                ////////////////////////////////////////////////////////////////////////////
                 Container Override methods                
            </comment>
            <comment line="282">
                ////////////////////////////////////////////////////////////////////////////
                 New methods for managing layers                
            </comment>
            <comment line="589">
                ////////////////////////////////////////////////////////////////////////////
                 Implementation Details                
            </comment>
            <comment line="737">
                ///////////////
                 Accessibility support                
            </comment>
            <implements interface="Accessible"/>
            <javadoc line="37">
                &lt;code&gt;JLayeredPane&lt;/code&gt; adds depth to a JFC/Swing container,
                  allowing components to overlap each other when needed.
                  An &lt;code&gt;Integer&lt;/code&gt; object specifies each component&apos;s depth in the
                  container, where higher-numbered components sit &amp;quot;on top&amp;quot; of other
                  components.
                  For task-oriented documentation and examples of using layered panes see
                  &lt;a href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/components/layeredpane.html&quot;&gt;How to Use a Layered Pane&lt;/a&gt;,
                  a section in &lt;em&gt;The Java Tutorial&lt;/em&gt;.
                  &lt;P&gt;
                  &lt;TABLE ALIGN=&quot;RIGHT&quot; BORDER=&quot;0&quot; SUMMARY=&quot;layout&quot;&gt;
                  &lt;TR&gt;
                  &lt;TD ALIGN=&quot;CENTER&quot;&gt;
                  &lt;P ALIGN=&quot;CENTER&quot;&gt;&lt;IMG SRC=&quot;doc-files/JLayeredPane-1.gif&quot;
                  alt=&quot;The following text describes this image.&quot;
                  WIDTH=&quot;269&quot; HEIGHT=&quot;264&quot; ALIGN=&quot;BOTTOM&quot; BORDER=&quot;0&quot;&gt;
                  &lt;/TD&gt;
                  &lt;/TR&gt;
                  &lt;/TABLE&gt;
                  For convenience, &lt;code&gt;JLayeredPane&lt;/code&gt; divides the depth-range
                  into several different layers. Putting a component into one of those
                  layers makes it easy to ensure that components overlap properly,
                  without having to worry about specifying numbers for specific depths:
                  &lt;DL&gt;
                  &lt;DT&gt;&lt;FONT SIZE=&quot;2&quot;&gt;DEFAULT_LAYER&lt;/FONT&gt;&lt;/DT&gt;
                  &lt;DD&gt;The standard layer, where most components go. This the bottommost
                  layer.
                  &lt;DT&gt;&lt;FONT SIZE=&quot;2&quot;&gt;PALETTE_LAYER&lt;/FONT&gt;&lt;/DT&gt;
                  &lt;DD&gt;The palette layer sits over the default layer. Useful for floating
                  toolbars and palettes, so they can be positioned above other components.
                  &lt;DT&gt;&lt;FONT SIZE=&quot;2&quot;&gt;MODAL_LAYER&lt;/FONT&gt;&lt;/DT&gt;
                  &lt;DD&gt;The layer used for modal dialogs. They will appear on top of any
                  toolbars, palettes, or standard components in the container.
                  &lt;DT&gt;&lt;FONT SIZE=&quot;2&quot;&gt;POPUP_LAYER&lt;/FONT&gt;&lt;/DT&gt;
                  &lt;DD&gt;The popup layer displays above dialogs. That way, the popup windows
                  associated with combo boxes, tooltips, and other help text will appear
                  above the component, palette, or dialog that generated them.
                  &lt;DT&gt;&lt;FONT SIZE=&quot;2&quot;&gt;DRAG_LAYER&lt;/FONT&gt;&lt;/DT&gt;
                  &lt;DD&gt;When dragging a component, reassigning it to the drag layer ensures
                  that it is positioned over every other component in the container. When
                  finished dragging, it can be reassigned to its normal layer.
                  &lt;/DL&gt;
                  The &lt;code&gt;JLayeredPane&lt;/code&gt; methods &lt;code&gt;moveToFront(Component)&lt;/code&gt;,
                  &lt;code&gt;moveToBack(Component)&lt;/code&gt; and &lt;code&gt;setPosition&lt;/code&gt; can be used
                  to reposition a component within its layer. The &lt;code&gt;setLayer&lt;/code&gt; method
                  can also be used to change the component&apos;s current layer.
                  &lt;h2&gt;Details&lt;/h2&gt;
                  &lt;code&gt;JLayeredPane&lt;/code&gt; manages its list of children like
                  &lt;code&gt;Container&lt;/code&gt;, but allows for the definition of a several
                  layers within itself. Children in the same layer are managed exactly
                  like the normal &lt;code&gt;Container&lt;/code&gt; object,
                  with the added feature that when children components overlap, children
                  in higher layers display above the children in lower layers.
                  &lt;p&gt;
                  Each layer is a distinct integer number. The layer attribute can be set
                  on a &lt;code&gt;Component&lt;/code&gt; by passing an &lt;code&gt;Integer&lt;/code&gt;
                  object during the add call.&lt;br&gt; For example:
                  &lt;PRE&gt;
                  layeredPane.add(child, JLayeredPane.DEFAULT_LAYER);
                  or
                  layeredPane.add(child, new Integer(10));
                  &lt;/PRE&gt;
                  The layer attribute can also be set on a Component by calling&lt;PRE&gt;
                  layeredPaneParent.setLayer(child, 10)&lt;/PRE&gt;
                  on the &lt;code&gt;JLayeredPane&lt;/code&gt; that is the parent of component. The layer
                  should be set &lt;i&gt;before&lt;/i&gt; adding the child to the parent.
                  &lt;p&gt;
                  Higher number layers display above lower number layers. So, using
                  numbers for the layers and letters for individual components, a
                  representative list order would look like this:&lt;PRE&gt;
                  5a, 5b, 5c, 2a, 2b, 2c, 1a &lt;/PRE&gt;
                  where the leftmost components are closest to the top of the display.
                  &lt;p&gt;
                  A component can be moved to the top or bottom position within its
                  layer by calling &lt;code&gt;moveToFront&lt;/code&gt; or &lt;code&gt;moveToBack&lt;/code&gt;.
                  &lt;p&gt;
                  The position of a component within a layer can also be specified directly.
                  Valid positions range from 0 up to one less than the number of
                  components in that layer. A value of -1 indicates the bottommost
                  position. A value of 0 indicates the topmost position. Unlike layer
                  numbers, higher position values are &lt;i&gt;lower&lt;/i&gt; in the display.
                  &lt;blockquote&gt;
                  &lt;b&gt;Note:&lt;/b&gt; This sequence (defined by java.awt.Container) is the reverse
                  of the layer numbering sequence. Usually though, you will use &lt;code&gt;moveToFront&lt;/code&gt;,
                  &lt;code&gt;moveToBack&lt;/code&gt;, and &lt;code&gt;setLayer&lt;/code&gt;.
                  &lt;/blockquote&gt;
                  Here are some examples using the method add(Component, layer, position):
                  Calling add(5x, 5, -1) results in:&lt;PRE&gt;
                  5a, 5b, 5c, 5x, 2a, 2b, 2c, 1a &lt;/PRE&gt;
                  Calling add(5z, 5, 2) results in:&lt;PRE&gt;
                  5a, 5b, 5z, 5c, 5x, 2a, 2b, 2c, 1a &lt;/PRE&gt;
                  Calling add(3a, 3, 7) results in:&lt;PRE&gt;
                  5a, 5b, 5z, 5c, 5x, 3a, 2a, 2b, 2c, 1a &lt;/PRE&gt;
                  Using normal paint/event mechanics results in 1a appearing at the bottom
                  and 5a being above all other components.
                  &lt;p&gt;
                  &lt;b&gt;Note:&lt;/b&gt; that these layers are simply a logical construct and LayoutManagers
                  will affect all child components of this container without regard for
                  layer settings.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt; Swing is not thread safe. For more
                  information see &lt;a
                  href=&quot;package-summary.html#threading&quot;&gt;Swing&apos;s Threading
                  Policy&lt;/a&gt;.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <author>
                    David Kloba                    
                </author>
            </javadoc>
            <declaration name="DEFAULT_LAYER" type="Integer" line="159"/>
            <javadoc line="159">
                Convenience object defining the Default layer. Equivalent to new Integer(0).                
            </javadoc>
            <declaration name="PALETTE_LAYER" type="Integer" line="161"/>
            <javadoc line="161">
                Convenience object defining the Palette layer. Equivalent to new Integer(100).                
            </javadoc>
            <declaration name="MODAL_LAYER" type="Integer" line="163"/>
            <javadoc line="163">
                Convenience object defining the Modal layer. Equivalent to new Integer(200).                
            </javadoc>
            <declaration name="POPUP_LAYER" type="Integer" line="165"/>
            <javadoc line="165">
                Convenience object defining the Popup layer. Equivalent to new Integer(300).                
            </javadoc>
            <declaration name="DRAG_LAYER" type="Integer" line="167"/>
            <javadoc line="167">
                Convenience object defining the Drag layer. Equivalent to new Integer(400).                
            </javadoc>
            <declaration name="FRAME_CONTENT_LAYER" type="Integer" line="169"/>
            <javadoc line="169">
                Convenience object defining the Frame Content layer.
                  This layer is normally only use to positon the contentPane and menuBar
                  components of JFrame.
                  Equivalent to new Integer(-30000).                
                <see>
                    JFrame                    
                </see>
            </javadoc>
            <declaration name="LAYER_PROPERTY" type="String" line="177"/>
            <javadoc line="177">
                Bound property                
            </javadoc>
            <declaration name="componentToLayer" type="Hashtable&lt;Component,Integer&gt;" line="180"/>
            <declaration name="optimizedDrawingPossible" type="boolean" line="181"/>
            <javadoc line="187">
                Create a new JLayeredPane                
            </javadoc>
            <method name="JLayeredPane" type="constructor" line="188"/>
            <method name="validateOptimizedDrawing" type="void" line="192">
                <declaration name="layeredComponentFound" type="boolean" line="193"/>
                <scope line="194">
                    <declaration name="layer" type="Integer" line="195"/>
                    <scope line="197">
                        <scope line="204"/>
                    </scope>
                </scope>
            </method>
            <method name="addImpl" type="void" line="219">
                <params>
                    <param name="comp" type="Component"/>
                    <param name="constraints" type="Object"/>
                    <param name="index" type="int"/>
                </params>
                <declaration name="layer" type="int" line="220"/>
                <declaration name="pos" type="int" line="221"/>
                <scope line="223"/>
            </method>
            <javadoc line="236">
                Remove the indexed component from this pane.
                  This is the absolute index, ignoring layers.                
                <param>
                    index  an int specifying the component to remove                    
                </param>
                <see>
                    #getIndexOf                    
                </see>
            </javadoc>
            <method name="remove" type="void" line="243">
                <params>
                    <param name="index" type="int"/>
                </params>
                <declaration name="c" type="Component" line="244"/>
                <scope line="246"/>
            </method>
            <javadoc line="252">
                Removes all the components from this container.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="removeAll" type="void" line="257">
                <declaration name="children" type="Component[]" line="258"/>
                <declaration name="cToL" type="Hashtable" line="259"/>
                <scope line="260">
                    <declaration name="c" type="Component" line="261"/>
                    <scope line="262"/>
                </scope>
            </method>
            <javadoc line="269">
                Returns false if components in the pane can overlap, which makes
                  optimized drawing impossible. Otherwise, returns true.                
                <return>
                    false if components can overlap, else true                    
                </return>
                <see>
                    JComponent#isOptimizedDrawingEnabled                    
                </see>
            </javadoc>
            <method name="isOptimizedDrawingEnabled" type="boolean" line="276"/>
            <javadoc line="284">
                Sets the layer property on a JComponent. This method does not cause
                  any side effects like setLayer() (painting, add/remove, etc).
                  Normally you should use the instance method setLayer(), in order to
                  get the desired side-effects (like repainting).                
                <param>
                    c      the JComponent to move                    
                </param>
                <param>
                    layer  an int specifying the layer to move it to                    
                </param>
                <see>
                    #setLayer                    
                </see>
            </javadoc>
            <method name="putLayer" type="void" line="293">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="layer" type="int"/>
                </params>
                <comment line="295">
                    / MAKE SURE THIS AND setLayer(Component c, int layer, int position)  are SYNCED                    
                </comment>
                <declaration name="layerObj" type="Integer" line="295"/>
            </method>
            <javadoc line="301">
                Gets the layer property for a JComponent, it
                  does not cause any side effects like setLayer(). (painting, add/remove, etc)
                  Normally you should use the instance method getLayer().                
                <param>
                    c  the JComponent to check                    
                </param>
                <return>
                    an int specifying the component's layer                    
                </return>
            </javadoc>
            <method name="getLayer" type="int" line="308">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <declaration name="i" type="Integer" line="309"/>
            </method>
            <javadoc line="315">
                Convenience method that returns the first JLayeredPane which
                  contains the specified component. Note that all JFrames have a
                  JLayeredPane at their root, so any component in a JFrame will
                  have a JLayeredPane parent.                
                <param>
                    c the Component to check                    
                </param>
                <return>
                    the JLayeredPane that contains the component, or
                      null if no JLayeredPane is found in the component
                      hierarchy                    
                </return>
                <see>
                    JFrame                    
                </see>
                <see>
                    JRootPane                    
                </see>
            </javadoc>
            <method name="getLayeredPaneAbove" type="JLayeredPane" line="327">
                <params>
                    <param name="c" type="Component"/>
                </params>
                <declaration name="parent" type="Component" line="330"/>
            </method>
            <javadoc line="336">
                Sets the layer attribute on the specified component,
                  making it the bottommost component in that layer.
                  Should be called before adding to parent.                
                <param>
                    c     the Component to set the layer for                    
                </param>
                <param>
                    layer an int specifying the layer to set, where
                      lower numbers are closer to the bottom                    
                </param>
            </javadoc>
            <method name="setLayer" type="void" line="344">
                <params>
                    <param name="c" type="Component"/>
                    <param name="layer" type="int"/>
                </params>
            </method>
            <javadoc line="348">
                Sets the layer attribute for the specified component and
                  also sets its position within that layer.                
                <param>
                    c         the Component to set the layer for                    
                </param>
                <param>
                    layer     an int specifying the layer to set, where
                      lower numbers are closer to the bottom                    
                </param>
                <param>
                    position  an int specifying the position within the
                      layer, where 0 is the topmost position and -1
                      is the bottommost position                    
                </param>
            </javadoc>
            <method name="setLayer" type="void" line="358">
                <params>
                    <param name="c" type="Component"/>
                    <param name="layer" type="int"/>
                    <param name="position" type="int"/>
                </params>
                <comment line="368">
                    / MAKE SURE THIS AND putLayer(JComponent c, int layer) are SYNCED                    
                </comment>
                <declaration name="layerObj" type="Integer" line="359"/>
                <scope line="362"/>
                <scope line="373"/>
                <declaration name="index" type="int" line="378"/>
            </method>
            <javadoc line="384">
                Returns the layer attribute for the specified Component.                
                <param>
                    c  the Component to check                    
                </param>
                <return>
                    an int specifying the component's current layer                    
                </return>
            </javadoc>
            <method name="getLayer" type="int" line="390">
                <params>
                    <param name="c" type="Component"/>
                </params>
                <declaration name="i" type="Integer" line="391"/>
            </method>
            <javadoc line="402">
                Returns the index of the specified Component.
                  This is the absolute index, ignoring layers.
                  Index numbers, like position numbers, have the topmost component
                  at index zero. Larger numbers are closer to the bottom.                
                <param>
                    c  the Component to check                    
                </param>
                <return>
                    an int specifying the component's index                    
                </return>
            </javadoc>
            <method name="getIndexOf" type="int" line="411">
                <params>
                    <param name="c" type="Component"/>
                </params>
                <declaration name="i" type="int" line="412"/>
                <scope line="415"/>
            </method>
            <javadoc line="421">
                Moves the component to the top of the components in its current layer
                  (position 0).                
                <param>
                    c the Component to move                    
                </param>
                <see>
                    #setPosition(Component,int)                    
                </see>
            </javadoc>
            <method name="moveToFront" type="void" line="428">
                <params>
                    <param name="c" type="Component"/>
                </params>
            </method>
            <javadoc line="432">
                Moves the component to the bottom of the components in its current layer
                  (position -1).                
                <param>
                    c the Component to move                    
                </param>
                <see>
                    #setPosition(Component,int)                    
                </see>
            </javadoc>
            <method name="moveToBack" type="void" line="439">
                <params>
                    <param name="c" type="Component"/>
                </params>
            </method>
            <javadoc line="443">
                Moves the component to &lt;code&gt;position&lt;/code&gt; within its current layer,
                  where 0 is the topmost position within the layer and -1 is the bottommost
                  position.
                  &lt;p&gt;
                  &lt;b&gt;Note:&lt;/b&gt; Position numbering is defined by java.awt.Container, and
                  is the opposite of layer numbering. Lower position numbers are closer
                  to the top (0 is topmost), and higher position numbers are closer to
                  the bottom.                
                <param>
                    c         the Component to move                    
                </param>
                <param>
                    position  an int in the range -1..N-1, where N is the number of
                      components in the component's current layer                    
                </param>
            </javadoc>
            <method name="setPosition" type="void" line="457">
                <params>
                    <param name="c" type="Component"/>
                    <param name="position" type="int"/>
                </params>
            </method>
            <javadoc line="461">
                Get the relative position of the component within its layer.                
                <param>
                    c  the Component to check                    
                </param>
                <return>
                    an int giving the component's position, where 0 is the
                      topmost position and the highest index value = the count
                      count of components at that layer, minus 1                    
                </return>
                <see>
                    #getComponentCountInLayer                    
                </see>
            </javadoc>
            <method name="getPosition" type="int" line="471">
                <params>
                    <param name="c" type="Component"/>
                </params>
                <declaration name="i" type="int" line="472"/>
                <scope line="481"/>
            </method>
            <javadoc line="491">
                Returns the highest layer value from all current children.
                  Returns 0 if there are no children.                
                <return>
                    an int indicating the layer of the topmost component in the
                      pane, or zero if there are no children                    
                </return>
            </javadoc>
            <method name="highestLayer" type="int" line="497"/>
            <javadoc line="503">
                Returns the lowest layer value from all current children.
                  Returns 0 if there are no children.                
                <return>
                    an int indicating the layer of the bottommost component in the
                      pane, or zero if there are no children                    
                </return>
            </javadoc>
            <method name="lowestLayer" type="int" line="509">
                <declaration name="count" type="int" line="510"/>
            </method>
            <javadoc line="516">
                Returns the number of children currently in the specified layer.                
                <param>
                    layer  an int specifying the layer to check                    
                </param>
                <return>
                    an int specifying the number of components in that layer                    
                </return>
            </javadoc>
            <method name="getComponentCountInLayer" type="int" line="522">
                <params>
                    <param name="layer" type="int"/>
                </params>
                <comment line="532">
                    / Short circut the counting when we have them all                    
                </comment>
                <declaration name="i" type="int" line="523"/>
                <declaration name="layerCount" type="int" line="524"/>
                <scope line="527">
                    <scope line="529"/>
                    <scope line="532"/>
                </scope>
            </method>
            <javadoc line="540">
                Returns an array of the components in the specified layer.                
                <param>
                    layer  an int specifying the layer to check                    
                </param>
                <return>
                    an array of Components contained in that layer                    
                </return>
            </javadoc>
            <method name="getComponentsInLayer" type="Component[]" line="546">
                <params>
                    <param name="layer" type="int"/>
                </params>
                <comment line="558">
                    / Short circut the counting when we have them all                    
                </comment>
                <declaration name="i" type="int" line="547"/>
                <declaration name="layerCount" type="int" line="548"/>
                <declaration name="results" type="Component[]" line="549"/>
                <scope line="553">
                    <scope line="555"/>
                    <scope line="558"/>
                </scope>
            </method>
            <javadoc line="566">
                Paints this JLayeredPane within the specified graphics context.                
                <param>
                    g  the Graphics context within which to paint                    
                </param>
            </javadoc>
            <method name="paint" type="void" line="571">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
                <scope line="572">
                    <declaration name="r" type="Rectangle" line="573"/>
                    <declaration name="c" type="Color" line="574"/>
                    <scope line="578"/>
                    <scope line="581"/>
                </scope>
            </method>
            <javadoc line="592">
                Returns the hashtable that maps components to layers.                
                <return>
                    the Hashtable used to map components to their layers                    
                </return>
            </javadoc>
            <method name="getComponentToLayer" type="Hashtable<Component,Integer>" line="597"/>
            <javadoc line="603">
                Returns the Integer object associated with a specified layer.                
                <param>
                    layer an int specifying the layer                    
                </param>
                <return>
                    an Integer object for that layer                    
                </return>
            </javadoc>
            <method name="getObjectForLayer" type="Integer" line="609">
                <params>
                    <param name="layer" type="int"/>
                </params>
                <declaration name="layerObj" type="Integer" line="610"/>
            </method>
            <javadoc line="633">
                Primitive method that determines the proper location to
                  insert a new child based on layer and position requests.                
                <param>
                    layer     an int specifying the layer                    
                </param>
                <param>
                    position  an int specifying the position within the layer                    
                </param>
                <return>
                    an int giving the (absolute) insertion-index                    
                </return>
                <see>
                    #getIndexOf                    
                </see>
            </javadoc>
            <method name="insertIndexForLayer" type="int" line="643">
                <params>
                    <param name="layer" type="int"/>
                    <param name="position" type="int"/>
                </params>
            </method>
            <javadoc line="647">
                This method is an extended version of insertIndexForLayer()
                  to support setLayer which uses Container.setZOrder which does
                  not remove the component from the containment heirarchy though
                  we need to ignore it when calculating the insertion index.                
                <param>
                    comp      component to ignore when determining index                    
                </param>
                <param>
                    layer     an int specifying the layer                    
                </param>
                <param>
                    position  an int specifying the position within the layer                    
                </param>
                <return>
                    an int giving the (absolute) insertion-index                    
                </return>
                <see>
                    #getIndexOf                    
                </see>
            </javadoc>
            <method name="insertIndexForLayer" type="int" line="660">
                <params>
                    <param name="comp" type="Component"/>
                    <param name="layer" type="int"/>
                    <param name="position" type="int"/>
                </params>
                <comment line="683">
                    layer is greater than any current layer
                     [ ASSERT(layer &gt; highestLayer()) ]                    
                </comment>
                <comment line="694">
                    layer requested is lower than any current layer
                     [ ASSERT(layer &lt; lowestLayer()) ]
                     put it on the bottom of the stack                    
                </comment>
                <comment line="700">
                    In the case of a single layer entry handle the degenerative cases                    
                </comment>
                <comment line="707">
                    If we are adding to the bottom, return the last element                    
                </comment>
                <comment line="711">
                    Otherwise make sure the requested position falls in the
                     proper range                    
                </comment>
                <comment line="716">
                    Otherwise return the end of the layer                    
                </comment>
                <declaration name="i" type="int" line="661"/>
                <declaration name="layerStart" type="int" line="662"/>
                <declaration name="layerEnd" type="int" line="663"/>
                <declaration name="componentCount" type="int" line="664"/>
                <declaration name="compList" type="ArrayList&lt;Component&gt;" line="666"/>
                <scope line="668">
                    <scope line="669"/>
                </scope>
                <scope line="675">
                    <scope line="677"/>
                    <scope line="680">
                        <scope line="681"/>
                        <scope line="686"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="719">
                Returns a string representation of this JLayeredPane. This method
                  is intended to be used only for debugging purposes, and the
                  content and format of the returned string may vary between
                  implementations. The returned string may be empty but may not
                  be &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    a string representation of this JLayeredPane.                    
                </return>
            </javadoc>
            <method name="paramString" type="String" line="728">
                <declaration name="optimizedDrawingPossibleString" type="String" line="729"/>
            </method>
            <javadoc line="740">
                Gets the AccessibleContext associated with this JLayeredPane.
                  For layered panes, the AccessibleContext takes the form of an
                  AccessibleJLayeredPane.
                  A new AccessibleJLayeredPane instance is created if necessary.                
                <return>
                    an AccessibleJLayeredPane that serves as the
                      AccessibleContext of this JLayeredPane                    
                </return>
            </javadoc>
            <method name="getAccessibleContext" type="AccessibleContext" line="749">
                <scope line="750"/>
            </method>
            <class name="AccessibleJLayeredPane" line="756">
                <extends class="AccessibleJComponent"/>
                <javadoc line="756">
                    This class implements accessibility support for the
                      &lt;code&gt;JLayeredPane&lt;/code&gt; class.  It provides an implementation of the
                      Java Accessibility API appropriate to layered pane user-interface
                      elements.
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      Serialized objects of this class will not be compatible with
                      future Swing releases. The current serialization support is
                      appropriate for short term storage or RMI between applications running
                      the same version of Swing.  As of 1.4, support for long term storage
                      of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                      has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                      Please see {@link java.beans.XMLEncoder}.                    
                </javadoc>
                <javadoc line="773">
                    Get the role of this object.                    
                    <return>
                        an instance of AccessibleRole describing the role of the
                          object                        
                    </return>
                    <see>
                        AccessibleRole                        
                    </see>
                </javadoc>
                <method name="getAccessibleRole" type="AccessibleRole" line="780"/>
            </class>
        </class>
    </source>