<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.awt"/>
        <import package="java.awt.event.ActionEvent"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.IOException"/>
        <import package="javax.swing.text"/>
        <import package="javax.swing.event"/>
        <import package="javax.swing.plaf"/>
        <class name="JTextPane" line="38">
            <extends class="JEditorPane"/>
            <comment line="451">
                --- JEditorPane ------------------------------------                
            </comment>
            <javadoc line="38">
                A text component that can be marked up with attributes that are
                  represented graphically.
                  You can find how-to information and examples of using text panes in
                  &lt;a href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/components/text.html&quot;&gt;Using Text Components&lt;/a&gt;,
                  a section in &lt;em&gt;The Java Tutorial.&lt;/em&gt;
                  &lt;p&gt;
                  This component models paragraphs
                  that are composed of runs of character level attributes.  Each
                  paragraph may have a logical style attached to it which contains
                  the default attributes to use if not overridden by attributes set
                  on the paragraph or character run.  Components and images may
                  be embedded in the flow of text.
                  &lt;p&gt;
                  &lt;dl&gt;
                  &lt;dt&gt;&lt;b&gt;&lt;font size=+1&gt;Newlines&lt;/font&gt;&lt;/b&gt;
                  &lt;dd&gt;
                  For a discussion on how newlines are handled, see
                  &lt;a href=&quot;text/DefaultEditorKit.html&quot;&gt;DefaultEditorKit&lt;/a&gt;.
                  &lt;/dl&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt; Swing is not thread safe. For more
                  information see &lt;a
                  href=&quot;package-summary.html#threading&quot;&gt;Swing&apos;s Threading
                  Policy&lt;/a&gt;.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <beaninfo>
                    attribute: isContainer true
                      description: A text component that can be marked up with attributes that are graphically represented.                    
                </beaninfo>
                <author>
                    Timothy Prinzing                    
                </author>
                <see>
                    javax.swing.text.StyledEditorKit                    
                </see>
            </javadoc>
            <javadoc line="84">
                Creates a new &lt;code&gt;JTextPane&lt;/code&gt;.  A new instance of
                  &lt;code&gt;StyledEditorKit&lt;/code&gt; is
                  created and set, and the document model set to &lt;code&gt;null&lt;/code&gt;.                
            </javadoc>
            <method name="JTextPane" type="constructor" line="89">
                <declaration name="editorKit" type="EditorKit" line="91"/>
                <declaration name="contentType" type="String" line="92"/>
                <scope line="95"/>
            </method>
            <javadoc line="101">
                Creates a new &lt;code&gt;JTextPane&lt;/code&gt;, with a specified document model.
                  A new instance of &lt;code&gt;javax.swing.text.StyledEditorKit&lt;/code&gt;
                  is created and set.                
                <param>
                    doc the document model                    
                </param>
            </javadoc>
            <method name="JTextPane" type="constructor" line="108">
                <params>
                    <param name="doc" type="StyledDocument"/>
                </params>
            </method>
            <javadoc line="113">
                Returns the class ID for the UI.                
                <return>
                    the string "TextPaneUI"                    
                </return>
                <see>
                    JComponent#getUIClassID                    
                </see>
                <see>
                    UIDefaults#getUI                    
                </see>
            </javadoc>
            <method name="getUIClassID" type="String" line="121"/>
            <javadoc line="125">
                Associates the editor with a text document.  This
                  must be a &lt;code&gt;StyledDocument&lt;/code&gt;.                
                <param>
                    doc  the document to display/edit                    
                </param>
                <exception>
                    IllegalArgumentException  if <code>doc</code> can't
                      be narrowed to a <code>StyledDocument</code> which is the
                      required type of model for this text component                    
                </exception>
            </javadoc>
            <method name="setDocument" type="void" line="134">
                <params>
                    <param name="doc" type="Document"/>
                </params>
                <scope line="135"/>
                <scope line="137"/>
            </method>
            <javadoc line="142">
                Associates the editor with a text document.
                  The currently registered factory is used to build a view for
                  the document, which gets displayed by the editor.                
                <param>
                    doc  the document to display/edit                    
                </param>
            </javadoc>
            <method name="setStyledDocument" type="void" line="149">
                <params>
                    <param name="doc" type="StyledDocument"/>
                </params>
            </method>
            <javadoc line="153">
                Fetches the model associated with the editor.                
                <return>
                    the model                    
                </return>
            </javadoc>
            <method name="getStyledDocument" type="StyledDocument" line="158"/>
            <javadoc line="162">
                Replaces the currently selected content with new content
                  represented by the given string.  If there is no selection
                  this amounts to an insert of the given text.  If there
                  is no replacement text this amounts to a removal of the
                  current selection.  The replacement text will have the
                  attributes currently defined for input at the point of
                  insertion.  If the document is not editable, beep and return.                
                <param>
                    content  the content to replace the selection with                    
                </param>
            </javadoc>
            <method name="replaceSelection" type="void" line="174">
                <params>
                    <param name="content" type="String"/>
                </params>
            </method>
            <method name="replaceSelection" type="void" line="178">
                <params>
                    <param name="content" type="String"/>
                    <param name="checkEditable" type="boolean"/>
                </params>
                <scope line="179"/>
                <declaration name="doc" type="Document" line="183"/>
                <scope line="184">
                    <scope line="185">
                        <declaration name="caret" type="Caret" line="186"/>
                        <declaration name="composedTextSaved" type="boolean" line="187"/>
                        <declaration name="p0" type="int" line="188"/>
                        <declaration name="p1" type="int" line="189"/>
                        <declaration name="attr" type="AttributeSet" line="190"/>
                        <scope line="191"/>
                        <scope line="194">
                            <scope line="195"/>
                            <scope line="198"/>
                        </scope>
                        <scope line="202"/>
                    </scope>
                    <scope line="205"/>
                </scope>
            </method>
            <javadoc line="211">
                Inserts a component into the document as a replacement
                  for the currently selected content.  If there is no
                  selection the component is effectively inserted at the
                  current position of the caret.  This is represented in
                  the associated document as an attribute of one character
                  of content.
                  &lt;p&gt;
                  The component given is the actual component used by the
                  JTextPane.  Since components cannot be a child of more than
                  one container, this method should not be used in situations
                  where the model is shared by text components.
                  &lt;p&gt;
                  The component is placed relative to the text baseline
                  according to the value returned by
                  &lt;code&gt;Component.getAlignmentY&lt;/code&gt;.  For Swing components
                  this value can be conveniently set using the method
                  &lt;code&gt;JComponent.setAlignmentY&lt;/code&gt;.  For example, setting
                  a value of &lt;code&gt;0.75&lt;/code&gt; will cause 75 percent of the
                  component to be above the baseline, and 25 percent of the
                  component to be below the baseline.                
                <param>
                    c    the component to insert                    
                </param>
            </javadoc>
            <method name="insertComponent" type="void" line="235">
                <params>
                    <param name="c" type="Component"/>
                </params>
                <declaration name="inputAttributes" type="MutableAttributeSet" line="236"/>
            </method>
            <javadoc line="243">
                Inserts an icon into the document as a replacement
                  for the currently selected content.  If there is no
                  selection the icon is effectively inserted at the
                  current position of the caret.  This is represented in
                  the associated document as an attribute of one character
                  of content.                
                <param>
                    g    the icon to insert                    
                </param>
                <see>
                    Icon                    
                </see>
            </javadoc>
            <method name="insertIcon" type="void" line="254">
                <params>
                    <param name="g" type="Icon"/>
                </params>
                <declaration name="inputAttributes" type="MutableAttributeSet" line="255"/>
            </method>
            <javadoc line="262">
                Adds a new style into the logical style hierarchy.  Style attributes
                  resolve from bottom up so an attribute specified in a child
                  will override an attribute specified in the parent.                
                <param>
                    nm   the name of the style (must be unique within the
                      collection of named styles).  The name may be <code>null</code>
                      if the style is unnamed, but the caller is responsible
                      for managing the reference returned as an unnamed style can't
                      be fetched by name.  An unnamed style may be useful for things
                      like character attribute overrides such as found in a style
                      run.                    
                </param>
                <param>
                    parent the parent style.  This may be <code>null</code>
                      if unspecified
                      attributes need not be resolved in some other style.                    
                </param>
                <return>
                    the new <code>Style</code>                    
                </return>
            </javadoc>
            <method name="addStyle" type="Style" line="279">
                <params>
                    <param name="nm" type="String"/>
                    <param name="parent" type="Style"/>
                </params>
                <declaration name="doc" type="StyledDocument" line="280"/>
            </method>
            <javadoc line="284">
                Removes a named non-&lt;code&gt;null&lt;/code&gt; style previously added to
                  the document.                
                <param>
                    nm  the name of the style to remove                    
                </param>
            </javadoc>
            <method name="removeStyle" type="void" line="290">
                <params>
                    <param name="nm" type="String"/>
                </params>
                <declaration name="doc" type="StyledDocument" line="291"/>
            </method>
            <javadoc line="295">
                Fetches a named non-&lt;code&gt;null&lt;/code&gt; style previously added.                
                <param>
                    nm  the name of the style                    
                </param>
                <return>
                    the <code>Style</code>                    
                </return>
            </javadoc>
            <method name="getStyle" type="Style" line="301">
                <params>
                    <param name="nm" type="String"/>
                </params>
                <declaration name="doc" type="StyledDocument" line="302"/>
            </method>
            <javadoc line="306">
                Sets the logical style to use for the paragraph at the
                  current caret position.  If attributes aren&apos;t explicitly set
                  for character and paragraph attributes they will resolve
                  through the logical style assigned to the paragraph, which
                  in term may resolve through some hierarchy completely
                  independent of the element hierarchy in the document.                
                <param>
                    s  the logical style to assign to the paragraph,
                      or <code>null</code> for no style                    
                </param>
            </javadoc>
            <method name="setLogicalStyle" type="void" line="317">
                <params>
                    <param name="s" type="Style"/>
                </params>
                <declaration name="doc" type="StyledDocument" line="318"/>
            </method>
            <javadoc line="322">
                Fetches the logical style assigned to the paragraph represented
                  by the current position of the caret, or &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    the <code>Style</code>                    
                </return>
            </javadoc>
            <method name="getLogicalStyle" type="Style" line="328">
                <declaration name="doc" type="StyledDocument" line="329"/>
            </method>
            <javadoc line="333">
                Fetches the character attributes in effect at the
                  current location of the caret, or &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    the attributes, or <code>null</code>                    
                </return>
            </javadoc>
            <method name="getCharacterAttributes" type="AttributeSet" line="339">
                <declaration name="doc" type="StyledDocument" line="340"/>
                <declaration name="run" type="Element" line="341"/>
                <scope line="342"/>
            </method>
            <javadoc line="348">
                Applies the given attributes to character
                  content.  If there is a selection, the attributes
                  are applied to the selection range.  If there
                  is no selection, the attributes are applied to
                  the input attribute set which defines the attributes
                  for any new text that gets inserted.                
                <param>
                    attr the attributes                    
                </param>
                <param>
                    replace if true, then replace the existing attributes first                    
                </param>
            </javadoc>
            <method name="setCharacterAttributes" type="void" line="359">
                <params>
                    <param name="attr" type="AttributeSet"/>
                    <param name="replace" type="boolean"/>
                </params>
                <declaration name="p0" type="int" line="360"/>
                <declaration name="p1" type="int" line="361"/>
                <scope line="362">
                    <declaration name="doc" type="StyledDocument" line="363"/>
                </scope>
                <scope line="365">
                    <declaration name="inputAttributes" type="MutableAttributeSet" line="366"/>
                    <scope line="367"/>
                </scope>
            </method>
            <javadoc line="374">
                Fetches the current paragraph attributes in effect
                  at the location of the caret, or &lt;code&gt;null&lt;/code&gt; if none.                
                <return>
                    the attributes                    
                </return>
            </javadoc>
            <method name="getParagraphAttributes" type="AttributeSet" line="380">
                <declaration name="doc" type="StyledDocument" line="381"/>
                <declaration name="paragraph" type="Element" line="382"/>
                <scope line="383"/>
            </method>
            <javadoc line="389">
                Applies the given attributes to paragraphs.  If
                  there is a selection, the attributes are applied
                  to the paragraphs that intersect the selection.
                  If there is no selection, the attributes are applied
                  to the paragraph at the current caret position.                
                <param>
                    attr the non-<code>null</code> attributes                    
                </param>
                <param>
                    replace if true, replace the existing attributes first                    
                </param>
            </javadoc>
            <method name="setParagraphAttributes" type="void" line="399">
                <params>
                    <param name="attr" type="AttributeSet"/>
                    <param name="replace" type="boolean"/>
                </params>
                <declaration name="p0" type="int" line="400"/>
                <declaration name="p1" type="int" line="401"/>
                <declaration name="doc" type="StyledDocument" line="402"/>
            </method>
            <javadoc line="406">
                Gets the input attributes for the pane.                
                <return>
                    the attributes                    
                </return>
            </javadoc>
            <method name="getInputAttributes" type="MutableAttributeSet" line="411"/>
            <javadoc line="415">
                Gets the editor kit.                
                <return>
                    the editor kit                    
                </return>
            </javadoc>
            <method name="getStyledEditorKit" type="StyledEditorKit" line="420"/>
            <declaration name="uiClassID" type="String" line="424"/>
            <javadoc line="424">
                @see #getUIClassID                
                <see>
                    #readObject                    
                </see>
            </javadoc>
            <javadoc line="431">
                See &lt;code&gt;readObject&lt;/code&gt; and &lt;code&gt;writeObject&lt;/code&gt; in
                  &lt;code&gt;JComponent&lt;/code&gt; for more
                  information about serialization in Swing.                
                <param>
                    s the output stream                    
                </param>
            </javadoc>
            <method name="writeObject" type="void" line="438">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
                <scope line="440">
                    <declaration name="count" type="byte" line="441"/>
                    <scope line="443"/>
                </scope>
            </method>
            <javadoc line="452">
                Creates the &lt;code&gt;EditorKit&lt;/code&gt; to use by default.  This
                  is implemented to return &lt;code&gt;javax.swing.text.StyledEditorKit&lt;/code&gt;.                
                <return>
                    the editor kit                    
                </return>
            </javadoc>
            <method name="createDefaultEditorKit" type="EditorKit" line="458"/>
            <javadoc line="462">
                Sets the currently installed kit for handling
                  content.  This is the bound property that
                  establishes the content type of the editor.                
                <param>
                    kit the desired editor behavior                    
                </param>
                <exception>
                    IllegalArgumentException if kit is not a
                      <code>StyledEditorKit</code>                    
                </exception>
            </javadoc>
            <method name="setEditorKit" type="void" line="471">
                <params>
                    <param name="kit" type="EditorKit"/>
                </params>
                <scope line="472"/>
                <scope line="474"/>
            </method>
            <javadoc line="479">
                Returns a string representation of this &lt;code&gt;JTextPane&lt;/code&gt;.
                  This method
                  is intended to be used only for debugging purposes, and the
                  content and format of the returned string may vary between
                  implementations. The returned string may be empty but may not
                  be &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    a string representation of this <code>JTextPane</code>                    
                </return>
            </javadoc>
            <method name="paramString" type="String" line="489"/>
        </class>
    </source>