<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="java.beans"/>
        <interface name="Action">
            <implements interface="ActionListener"/>
            <javadoc line="5">
                The &lt;code&gt;Action&lt;/code&gt; interface provides a useful extension to the
                  &lt;code&gt;ActionListener&lt;/code&gt;
                  interface in cases where the same functionality may be accessed by
                  several controls.
                  &lt;p&gt;
                  In addition to the &lt;code&gt;actionPerformed&lt;/code&gt; method defined by the
                  &lt;code&gt;ActionListener&lt;/code&gt; interface, this interface allows the
                  application to define, in a single place:
                  &lt;ul&gt;
                  &lt;li&gt;One or more text strings that describe the function. These strings
                  can be used, for example, to display the flyover text for a button
                  or to set the text in a menu item.
                  &lt;li&gt;One or more icons that depict the function. These icons can be used
                  for the images in a menu control, or for composite entries in a more
                  sophisticated user interface.
                  &lt;li&gt;The enabled/disabled state of the functionality. Instead of having
                  to separately disable the menu item and the toolbar button, the
                  application can disable the function that implements this interface.
                  All components which are registered as listeners for the state change
                  then know to disable event generation for that item and to modify the
                  display accordingly.
                  &lt;/ul&gt;
                  &lt;p&gt;
                  This interface can be added to an existing class or used to create an
                  adapter (typically, by subclassing &lt;code&gt;AbstractAction&lt;/code&gt;).
                  The &lt;code&gt;Action&lt;/code&gt; object
                  can then be added to multiple &lt;code&gt;Action&lt;/code&gt;-aware containers
                  and connected to &lt;code&gt;Action&lt;/code&gt;-capable
                  components. The GUI controls can then be activated or
                  deactivated all at once by invoking the &lt;code&gt;Action&lt;/code&gt; object&apos;s
                  &lt;code&gt;setEnabled&lt;/code&gt; method.
                  &lt;p&gt;
                  Note that &lt;code&gt;Action&lt;/code&gt; implementations tend to be more expensive
                  in terms of storage than a typical &lt;code&gt;ActionListener&lt;/code&gt;,
                  which does not offer the benefits of centralized control of
                  functionality and broadcast of property changes.  For this reason,
                  you should take care to only use &lt;code&gt;Action&lt;/code&gt;s where their benefits
                  are desired, and use simple &lt;code&gt;ActionListener&lt;/code&gt;s elsewhere.
                  &lt;p&gt;
                  &lt;h4&gt;&lt;a name=&quot;buttonActions&quot;&gt;&lt;/a&gt;Swing Components Supporting &lt;code&gt;Action&lt;/code&gt;&lt;/h4&gt;
                  &lt;p&gt;
                  Many of Swing&apos;s components have an &lt;code&gt;Action&lt;/code&gt; property.  When
                  an &lt;code&gt;Action&lt;/code&gt; is set on a component, the following things
                  happen:
                  &lt;ul&gt;
                  &lt;li&gt;The &lt;code&gt;Action&lt;/code&gt; is added as an &lt;code&gt;ActionListener&lt;/code&gt; to
                  the component.
                  &lt;li&gt;The component configures some of its properties to match the
                  &lt;code&gt;Action&lt;/code&gt;.
                  &lt;li&gt;The component installs a &lt;code&gt;PropertyChangeListener&lt;/code&gt; on the
                  &lt;code&gt;Action&lt;/code&gt; so that the component can change its properties
                  to reflect changes in the &lt;code&gt;Action&lt;/code&gt;&apos;s properties.
                  &lt;/ul&gt;
                  &lt;p&gt;
                  The following table describes the properties used by
                  &lt;code&gt;Swing&lt;/code&gt; components that support &lt;code&gt;Actions&lt;/code&gt;.
                  In the table, &lt;em&gt;button&lt;/em&gt; refers to any
                  &lt;code&gt;AbstractButton&lt;/code&gt; subclass, which includes not only
                  &lt;code&gt;JButton&lt;/code&gt; but also classes such as
                  &lt;code&gt;JMenuItem&lt;/code&gt;. Unless otherwise stated, a
                  &lt;code&gt;null&lt;/code&gt; property value in an &lt;code&gt;Action&lt;/code&gt; (or a
                  &lt;code&gt;Action&lt;/code&gt; that is &lt;code&gt;null&lt;/code&gt;) results in the
                  button&apos;s corresponding property being set to &lt;code&gt;null&lt;/code&gt;.
                  &lt;p&gt;
                  &lt;table border=&quot;1&quot; cellpadding=&quot;1&quot; cellspacing=&quot;0&quot;
                  summary=&quot;Supported Action properties&quot;
                  valign=&quot;top&quot; &gt;
                  &lt;tr valign=&quot;top&quot;  align=&quot;left&quot;&gt;
                  &lt;th bgcolor=&quot;#CCCCFF&quot; align=&quot;left&quot;&gt;Component Property
                  &lt;th bgcolor=&quot;#CCCCFF&quot; align=&quot;left&quot;&gt;Components
                  &lt;th bgcolor=&quot;#CCCCFF&quot; align=&quot;left&quot;&gt;Action Key
                  &lt;th bgcolor=&quot;#CCCCFF&quot; align=&quot;left&quot;&gt;Notes
                  &lt;tr valign=&quot;top&quot;  align=&quot;left&quot;&gt;
                  &lt;td&gt;&lt;b&gt;&lt;code&gt;enabled&lt;/code&gt;&lt;/b&gt;
                  &lt;td&gt;All
                  &lt;td&gt;The &lt;code&gt;isEnabled&lt;/code&gt; method
                  &lt;td&gt;&amp;nbsp;
                  &lt;tr valign=&quot;top&quot;  align=&quot;left&quot;&gt;
                  &lt;td&gt;&lt;b&gt;&lt;code&gt;toolTipText&lt;/code&gt;&lt;/b&gt;
                  &lt;td&gt;All
                  &lt;td&gt;&lt;code&gt;SHORT_DESCRIPTION&lt;/code&gt;
                  &lt;td&gt;&amp;nbsp;
                  &lt;tr valign=&quot;top&quot;  align=&quot;left&quot;&gt;
                  &lt;td&gt;&lt;b&gt;&lt;code&gt;actionCommand&lt;/code&gt;&lt;/b&gt;
                  &lt;td&gt;All
                  &lt;td&gt;&lt;code&gt;ACTION_COMMAND_KEY&lt;/code&gt;
                  &lt;td&gt;&amp;nbsp;
                  &lt;tr valign=&quot;top&quot;  align=&quot;left&quot;&gt;
                  &lt;td&gt;&lt;b&gt;&lt;code&gt;mnemonic&lt;/code&gt;&lt;/b&gt;
                  &lt;td&gt;All buttons
                  &lt;td&gt;&lt;code&gt;MNEMONIC_KEY&lt;/code&gt;
                  &lt;td&gt;A &lt;code&gt;null&lt;/code&gt; value or &lt;code&gt;Action&lt;/code&gt; results in the
                  button&apos;s &lt;code&gt;mnemonic&lt;/code&gt; property being set to
                  &lt;code&gt;&apos;\0&apos;&lt;/code&gt;.
                  &lt;tr valign=&quot;top&quot;  align=&quot;left&quot;&gt;
                  &lt;td&gt;&lt;b&gt;&lt;code&gt;text&lt;/code&gt;&lt;/b&gt;
                  &lt;td&gt;All buttons
                  &lt;td&gt;&lt;code&gt;NAME&lt;/code&gt;
                  &lt;td&gt;If you do not want the text of the button to mirror that
                  of the &lt;code&gt;Action&lt;/code&gt;, set the property
                  &lt;code&gt;hideActionText&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;.  If
                  &lt;code&gt;hideActionText&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, setting the
                  &lt;code&gt;Action&lt;/code&gt; changes the text of the button to
                  &lt;code&gt;null&lt;/code&gt; and any changes to &lt;code&gt;NAME&lt;/code&gt;
                  are ignored.  &lt;code&gt;hideActionText&lt;/code&gt; is useful for
                  tool bar buttons that typically only show an &lt;code&gt;Icon&lt;/code&gt;.
                  &lt;code&gt;JToolBar.add(Action)&lt;/code&gt; sets the property to
                  &lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;Action&lt;/code&gt; has a
                  non-&lt;code&gt;null&lt;/code&gt; value for &lt;code&gt;LARGE_ICON_KEY&lt;/code&gt; or
                  &lt;code&gt;SMALL_ICON&lt;/code&gt;.
                  &lt;tr valign=&quot;top&quot;  align=&quot;left&quot;&gt;
                  &lt;td&gt;&lt;b&gt;&lt;code&gt;displayedMnemonicIndex&lt;/code&gt;&lt;/b&gt;
                  &lt;td&gt;All buttons
                  &lt;td&gt;&lt;code&gt;DISPLAYED_MNEMONIC_INDEX_KEY&lt;/code&gt;
                  &lt;td&gt;If the value of &lt;code&gt;DISPLAYED_MNEMONIC_INDEX_KEY&lt;/code&gt; is
                  beyond the bounds of the text, it is ignored.  When
                  &lt;code&gt;setAction&lt;/code&gt; is called, if the value from the
                  &lt;code&gt;Action&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, the displayed
                  mnemonic index is not updated.  In any subsequent changes to
                  &lt;code&gt;DISPLAYED_MNEMONIC_INDEX_KEY&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;
                  is treated as -1.
                  &lt;tr valign=&quot;top&quot;  align=&quot;left&quot;&gt;
                  &lt;td&gt;&lt;b&gt;&lt;code&gt;icon&lt;/code&gt;&lt;/b&gt;
                  &lt;td&gt;All buttons except of &lt;code&gt;JCheckBox&lt;/code&gt;,
                  &lt;code&gt;JToggleButton&lt;/code&gt; and &lt;code&gt;JRadioButton&lt;/code&gt;.
                  &lt;td&gt;either &lt;code&gt;LARGE_ICON_KEY&lt;/code&gt; or
                  &lt;code&gt;SMALL_ICON&lt;/code&gt;
                  &lt;td&gt;The &lt;code&gt;JMenuItem&lt;/code&gt; subclasses only use
                  &lt;code&gt;SMALL_ICON&lt;/code&gt;.  All other buttons will use
                  &lt;code&gt;LARGE_ICON_KEY&lt;/code&gt;; if the value is &lt;code&gt;null&lt;/code&gt; they
                  use &lt;code&gt;SMALL_ICON&lt;/code&gt;.
                  &lt;tr valign=&quot;top&quot;  align=&quot;left&quot;&gt;
                  &lt;td&gt;&lt;b&gt;&lt;code&gt;accelerator&lt;/code&gt;&lt;/b&gt;
                  &lt;td&gt;All &lt;code&gt;JMenuItem&lt;/code&gt; subclasses, with the exception of
                  &lt;code&gt;JMenu&lt;/code&gt;.
                  &lt;td&gt;&lt;code&gt;ACCELERATOR_KEY&lt;/code&gt;
                  &lt;td&gt;&amp;nbsp;
                  &lt;tr valign=&quot;top&quot;  align=&quot;left&quot;&gt;
                  &lt;td&gt;&lt;b&gt;&lt;code&gt;selected&lt;/code&gt;&lt;/b&gt;
                  &lt;td&gt;&lt;code&gt;JToggleButton&lt;/code&gt;, &lt;code&gt;JCheckBox&lt;/code&gt;,
                  &lt;code&gt;JRadioButton&lt;/code&gt;, &lt;code&gt;JCheckBoxMenuItem&lt;/code&gt; and
                  &lt;code&gt;JRadioButtonMenuItem&lt;/code&gt;
                  &lt;td&gt;&lt;code&gt;SELECTED_KEY&lt;/code&gt;
                  &lt;td&gt;Components that honor this property only use
                  the value if it is {@code non-null}. For example, if
                  you set an {@code Action} that has a {@code null}value for {@code SELECTED_KEY} on a {@code JToggleButton}, the{@code JToggleButton} will not update it&apos;s selected state in
                  any way. Similarly, any time the {@code JToggleButton}&apos;s
                  selected state changes it will only set the value back on
                  the {@code Action} if the {@code Action} has a {@code non-null}value for {@code SELECTED_KEY}.
                  &lt;br&gt;
                  Components that honor this property keep their selected state
                  in sync with this property. When the same {@code Action} is used
                  with multiple components, all the components keep their selected
                  state in sync with this property. Mutually exclusive
                  buttons, such as {@code JToggleButton}s in a {@code ButtonGroup},
                  force only one of the buttons to be selected. As such, do not
                  use the same {@code Action} that defines a value for the{@code SELECTED_KEY} property with multiple mutually
                  exclusive buttons.
                  &lt;/table&gt;
                  &lt;p&gt;
                  &lt;code&gt;JPopupMenu&lt;/code&gt;, &lt;code&gt;JToolBar&lt;/code&gt; and &lt;code&gt;JMenu&lt;/code&gt;
                  all provide convenience methods for creating a component and setting the
                  &lt;code&gt;Action&lt;/code&gt; on the corresponding component.  Refer to each of
                  these classes for more information.
                  &lt;p&gt;
                  &lt;code&gt;Action&lt;/code&gt; uses &lt;code&gt;PropertyChangeListener&lt;/code&gt; to
                  inform listeners the &lt;code&gt;Action&lt;/code&gt; has changed.  The beans
                  specification indicates that a &lt;code&gt;null&lt;/code&gt; property name can
                  be used to indicate multiple values have changed.  By default Swing
                  components that take an &lt;code&gt;Action&lt;/code&gt; do not handle such a
                  change.  To indicate that Swing should treat &lt;code&gt;null&lt;/code&gt;
                  according to the beans specification set the system property
                  &lt;code&gt;swing.actions.reconfigureOnNull&lt;/code&gt; to the &lt;code&gt;String&lt;/code&gt;
                  value &lt;code&gt;true&lt;/code&gt;.                
                <author>
                    Georges Saab                    
                </author>
                <see>
                    AbstractAction                    
                </see>
            </javadoc>
            <declaration name="DEFAULT" type="String" line="184"/>
            <javadoc line="184">
                Not currently used.                
            </javadoc>
            <declaration name="NAME" type="String" line="188"/>
            <javadoc line="188">
                The key used for storing the &lt;code&gt;String&lt;/code&gt; name
                  for the action, used for a menu or button.                
            </javadoc>
            <declaration name="SHORT_DESCRIPTION" type="String" line="193"/>
            <javadoc line="193">
                The key used for storing a short &lt;code&gt;String&lt;/code&gt;
                  description for the action, used for tooltip text.                
            </javadoc>
            <declaration name="LONG_DESCRIPTION" type="String" line="198"/>
            <javadoc line="198">
                The key used for storing a longer &lt;code&gt;String&lt;/code&gt;
                  description for the action, could be used for context-sensitive help.                
            </javadoc>
            <declaration name="SMALL_ICON" type="String" line="203"/>
            <javadoc line="203">
                The key used for storing a small &lt;code&gt;Icon&lt;/code&gt;, such
                  as &lt;code&gt;ImageIcon&lt;/code&gt;.  This is typically used with
                  menus such as &lt;code&gt;JMenuItem&lt;/code&gt;.
                  &lt;p&gt;
                  If the same &lt;code&gt;Action&lt;/code&gt; is used with menus and buttons you&apos;ll
                  typically specify both a &lt;code&gt;SMALL_ICON&lt;/code&gt; and a
                  &lt;code&gt;LARGE_ICON_KEY&lt;/code&gt;.  The menu will use the
                  &lt;code&gt;SMALL_ICON&lt;/code&gt; and the button will use the
                  &lt;code&gt;LARGE_ICON_KEY&lt;/code&gt;.                
            </javadoc>
            <declaration name="ACTION_COMMAND_KEY" type="String" line="215"/>
            <javadoc line="215">
                The key used to determine the command &lt;code&gt;String&lt;/code&gt; for the
                  &lt;code&gt;ActionEvent&lt;/code&gt; that will be created when an
                  &lt;code&gt;Action&lt;/code&gt; is going to be notified as the result of
                  residing in a &lt;code&gt;Keymap&lt;/code&gt; associated with a
                  &lt;code&gt;JComponent&lt;/code&gt;.                
            </javadoc>
            <declaration name="ACCELERATOR_KEY" type="String" line="223"/>
            <javadoc line="223">
                The key used for storing a &lt;code&gt;KeyStroke&lt;/code&gt; to be used as the
                  accelerator for the action.                
                <since>
                    1.3                    
                </since>
            </javadoc>
            <declaration name="MNEMONIC_KEY" type="String" line="229"/>
            <javadoc line="229">
                The key used for storing an &lt;code&gt;Integer&lt;/code&gt; that corresponds to
                  one of the &lt;code&gt;KeyEvent&lt;/code&gt; key codes.  The value is
                  commonly used to specify a mnemonic.  For example:
                  &lt;code&gt;myAction.putValue(Action.MNEMONIC_KEY, KeyEvent.VK_A)&lt;/code&gt;
                  sets the mnemonic of &lt;code&gt;myAction&lt;/code&gt; to &apos;a&apos;, while
                  &lt;code&gt;myAction.putValue(Action.MNEMONIC_KEY, KeyEvent.getExtendedKeyCodeForChar(&apos;\u0444&apos;))&lt;/code&gt;
                  sets the mnemonic of &lt;code&gt;myAction&lt;/code&gt; to Cyrillic letter &quot;Ef&quot;.                
                <since>
                    1.3                    
                </since>
            </javadoc>
            <declaration name="SELECTED_KEY" type="String" line="240"/>
            <javadoc line="240">
                The key used for storing a &lt;code&gt;Boolean&lt;/code&gt; that corresponds
                  to the selected state.  This is typically used only for components
                  that have a meaningful selection state.  For example,
                  &lt;code&gt;JRadioButton&lt;/code&gt; and &lt;code&gt;JCheckBox&lt;/code&gt; make use of
                  this but instances of &lt;code&gt;JMenu&lt;/code&gt; don&apos;t.
                  &lt;p&gt;
                  This property differs from the others in that it is both read
                  by the component and set by the component.  For example,
                  if an &lt;code&gt;Action&lt;/code&gt; is attached to a &lt;code&gt;JCheckBox&lt;/code&gt;
                  the selected state of the &lt;code&gt;JCheckBox&lt;/code&gt; will be set from
                  that of the &lt;code&gt;Action&lt;/code&gt;.  If the user clicks on the
                  &lt;code&gt;JCheckBox&lt;/code&gt; the selected state of the &lt;code&gt;JCheckBox&lt;/code&gt;
                  &lt;b&gt;and&lt;/b&gt; the &lt;code&gt;Action&lt;/code&gt; will &lt;b&gt;both&lt;/b&gt; be updated.
                  &lt;p&gt;
                  Note: the value of this field is prefixed with &apos;Swing&apos; to
                  avoid possible collisions with existing &lt;code&gt;Actions&lt;/code&gt;.                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="DISPLAYED_MNEMONIC_INDEX_KEY" type="String" line="260"/>
            <javadoc line="260">
                The key used for storing an &lt;code&gt;Integer&lt;/code&gt; that corresponds
                  to the index in the text (identified by the &lt;code&gt;NAME&lt;/code&gt;
                  property) that the decoration for a mnemonic should be rendered at.  If
                  the value of this property is greater than or equal to the length of
                  the text, it will treated as -1.
                  &lt;p&gt;
                  Note: the value of this field is prefixed with &apos;Swing&apos; to
                  avoid possible collisions with existing &lt;code&gt;Actions&lt;/code&gt;.                
                <see>
                    AbstractButton#setDisplayedMnemonicIndex                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="LARGE_ICON_KEY" type="String" line="273"/>
            <javadoc line="273">
                The key used for storing an &lt;code&gt;Icon&lt;/code&gt;.  This is typically
                  used by buttons, such as &lt;code&gt;JButton&lt;/code&gt; and
                  &lt;code&gt;JToggleButton&lt;/code&gt;.
                  &lt;p&gt;
                  If the same &lt;code&gt;Action&lt;/code&gt; is used with menus and buttons you&apos;ll
                  typically specify both a &lt;code&gt;SMALL_ICON&lt;/code&gt; and a
                  &lt;code&gt;LARGE_ICON_KEY&lt;/code&gt;.  The menu will use the
                  &lt;code&gt;SMALL_ICON&lt;/code&gt; and the button the &lt;code&gt;LARGE_ICON_KEY&lt;/code&gt;.
                  &lt;p&gt;
                  Note: the value of this field is prefixed with &apos;Swing&apos; to
                  avoid possible collisions with existing &lt;code&gt;Actions&lt;/code&gt;.                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getValue" type="Object" line="288"/>
            <javadoc line="288">
                Gets one of this object&apos;s properties
                  using the associated key.                
                <see>
                    #putValue                    
                </see>
            </javadoc>
            <method name="putValue" type="void" line="294"/>
            <javadoc line="294">
                Sets one of this object&apos;s properties
                  using the associated key. If the value has
                  changed, a &lt;code&gt;PropertyChangeEvent&lt;/code&gt; is sent
                  to listeners.                
                <param>
                    key    a &lt;code&gt;String&lt;/code&gt; containing the key                    
                </param>
                <param>
                    value  an &lt;code&gt;Object&lt;/code&gt; value                    
                </param>
            </javadoc>
            <method name="setEnabled" type="void" line="303"/>
            <javadoc line="303">
                Sets the enabled state of the &lt;code&gt;Action&lt;/code&gt;.  When enabled,
                  any component associated with this object is active and
                  able to fire this object&apos;s &lt;code&gt;actionPerformed&lt;/code&gt; method.
                  If the value has changed, a &lt;code&gt;PropertyChangeEvent&lt;/code&gt; is sent
                  to listeners.                
                <param>
                    b true to enable this &lt;code&gt;Action&lt;/code&gt;, false to disable it                    
                </param>
            </javadoc>
            <method name="isEnabled" type="boolean" line="312"/>
            <javadoc line="312">
                Returns the enabled state of the &lt;code&gt;Action&lt;/code&gt;. When enabled,
                  any component associated with this object is active and
                  able to fire this object&apos;s &lt;code&gt;actionPerformed&lt;/code&gt; method.                
                <return>
                    true if this &lt;code&gt;Action&lt;/code&gt; is enabled                    
                </return>
            </javadoc>
            <method name="addPropertyChangeListener" type="void" line="319"/>
            <javadoc line="319">
                Adds a &lt;code&gt;PropertyChange&lt;/code&gt; listener. Containers and attached
                  components use these methods to register interest in this
                  &lt;code&gt;Action&lt;/code&gt; object. When its enabled state or other property
                  changes, the registered listeners are informed of the change.                
                <param>
                    listener  a &lt;code&gt;PropertyChangeListener&lt;/code&gt; object                    
                </param>
            </javadoc>
            <method name="removePropertyChangeListener" type="void" line="327"/>
            <javadoc line="327">
                Removes a &lt;code&gt;PropertyChange&lt;/code&gt; listener.                
                <param>
                    listener  a &lt;code&gt;PropertyChangeListener&lt;/code&gt; object                    
                </param>
                <see>
                    #addPropertyChangeListener                    
                </see>
            </javadoc>
        </interface>
    </source>