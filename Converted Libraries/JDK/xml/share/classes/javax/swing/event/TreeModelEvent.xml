<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.event">
        <import package="java.util.EventObject"/>
        <import package="javax.swing.tree.TreePath"/>
        <class name="TreeModelEvent" line="4">
            <extends class="EventObject"/>
            <javadoc line="4">
                Encapsulates information describing changes to a tree model, and
                  used to notify tree model listeners of the change.
                  For more information and examples see
                  &lt;a
                  href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/events/treemodellistener.html&quot;&gt;How to Write a Tree Model Listener&lt;/a&gt;,
                  a section in &lt;em&gt;The Java Tutorial.&lt;/em&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <author>
                    Rob Davis                    
                </author>
                <author>
                    Ray Ryan                    
                </author>
                <author>
                    Scott Violet                    
                </author>
            </javadoc>
            <declaration name="path" type="TreePath" line="25"/>
            <javadoc line="25">
                Path to the parent of the nodes that have changed.                
            </javadoc>
            <declaration name="childIndices" type="int[]" line="29"/>
            <javadoc line="29">
                Indices identifying the position of where the children were.                
            </javadoc>
            <declaration name="children" type="Object[]" line="33"/>
            <javadoc line="33">
                Children that have been removed.                
            </javadoc>
            <javadoc line="37">
                Used to create an event when nodes have been changed, inserted, or
                  removed, identifying the path to the parent of the modified items as
                  an array of Objects. All of the modified objects are siblings which are
                  direct descendents (not grandchildren) of the specified parent.
                  The positions at which the inserts, deletes, or changes occurred are
                  specified by an array of &lt;code&gt;int&lt;/code&gt;. The indexes in that array
                  must be in order, from lowest to highest.
                  &lt;p&gt;
                  For changes, the indexes in the model correspond exactly to the indexes
                  of items currently displayed in the UI. As a result, it is not really
                  critical if the indexes are not in their exact order. But after multiple
                  inserts or deletes, the items currently in the UI no longer correspond
                  to the items in the model. It is therefore critical to specify the
                  indexes properly for inserts and deletes.
                  &lt;p&gt;
                  For inserts, the indexes represent the &lt;i&gt;final&lt;/i&gt; state of the tree,
                  after the inserts have occurred. Since the indexes must be specified in
                  order, the most natural processing methodology is to do the inserts
                  starting at the lowest index and working towards the highest. Accumulate
                  a Vector of &lt;code&gt;Integer&lt;/code&gt; objects that specify the
                  insert-locations as you go, then convert the Vector to an
                  array of &lt;code&gt;int&lt;/code&gt; to create the event. When the postition-index
                  equals zero, the node is inserted at the beginning of the list. When the
                  position index equals the size of the list, the node is &quot;inserted&quot; at
                  (appended to) the end of the list.
                  &lt;p&gt;
                  For deletes, the indexes represent the &lt;i&gt;initial&lt;/i&gt; state of the tree,
                  before the deletes have occurred. Since the indexes must be specified in
                  order, the most natural processing methodology is to use a delete-counter.
                  Start by initializing the counter to zero and start work through the
                  list from lowest to higest. Every time you do a delete, add the current
                  value of the delete-counter to the index-position where the delete occurred,
                  and append the result to a Vector of delete-locations, using
                  &lt;code&gt;addElement()&lt;/code&gt;. Then increment the delete-counter. The index
                  positions stored in the Vector therefore reflect the effects of all previous
                  deletes, so they represent each object&apos;s position in the initial tree.
                  (You could also start at the highest index and working back towards the
                  lowest, accumulating a Vector of delete-locations as you go using the
                  &lt;code&gt;insertElementAt(Integer, 0)&lt;/code&gt;.) However you produce the Vector
                  of initial-positions, you then need to convert the Vector of &lt;code&gt;Integer&lt;/code&gt;
                  objects to an array of &lt;code&gt;int&lt;/code&gt; to create the event.
                  &lt;p&gt;
                  &lt;b&gt;Notes:&lt;/b&gt;&lt;ul&gt;
                  &lt;li&gt;Like the &lt;code&gt;insertNodeInto&lt;/code&gt; method in the
                  &lt;code&gt;DefaultTreeModel&lt;/code&gt; class, &lt;code&gt;insertElementAt&lt;/code&gt;
                  appends to the &lt;code&gt;Vector&lt;/code&gt; when the index matches the size
                  of the vector. So you can use &lt;code&gt;insertElementAt(Integer, 0)&lt;/code&gt;
                  even when the vector is empty.
                  &lt;ul&gt;To create a node changed event for the root node, specify the parent
                  and the child indices as &lt;code&gt;null&lt;/code&gt;.
                  &lt;/ul&gt;                
                <param>
                    source the Object responsible for generating the event (typically
                      the creator of the event object passes <code>this</code>
                      for its value)                    
                </param>
                <param>
                    path   an array of Object identifying the path to the
                      parent of the modified item(s), where the first element
                      of the array is the Object stored at the root node and
                      the last element is the Object stored at the parent node                    
                </param>
                <param>
                    childIndices an array of <code>int</code> that specifies the
                      index values of the removed items. The indices must be
                      in sorted order, from lowest to highest                    
                </param>
                <param>
                    children an array of Object containing the inserted, removed, or
                      changed objects                    
                </param>
                <see>
                    TreePath                    
                </see>
            </javadoc>
            <method name="TreeModelEvent" type="constructor" line="103">
                <params>
                    <param name="source" type="Object"/>
                    <param name="path" type="Object[]"/>
                    <param name="childIndices" type="int[]"/>
                    <param name="children" type="Object[]"/>
                </params>
            </method>
            <javadoc line="106">
                Used to create an event when nodes have been changed, inserted, or
                  removed, identifying the path to the parent of the modified items as
                  a TreePath object. For more information on how to specify the indexes
                  and objects, see
                  &lt;code&gt;TreeModelEvent(Object,Object[],int[],Object[])&lt;/code&gt;.                
                <param>
                    source the Object responsible for generating the event (typically
                      the creator of the event object passes <code>this</code>
                      for its value)                    
                </param>
                <param>
                    path   a TreePath object that identifies the path to the
                      parent of the modified item(s)                    
                </param>
                <param>
                    childIndices an array of <code>int</code> that specifies the
                      index values of the modified items                    
                </param>
                <param>
                    children an array of Object containing the inserted, removed, or
                      changed objects                    
                </param>
                <see>
                    #TreeModelEvent(Object,Object[],int[],Object[])                    
                </see>
            </javadoc>
            <method name="TreeModelEvent" type="constructor" line="123">
                <params>
                    <param name="source" type="Object"/>
                    <param name="path" type="TreePath"/>
                    <param name="childIndices" type="int[]"/>
                    <param name="children" type="Object[]"/>
                </params>
            </method>
            <javadoc line="129">
                Used to create an event when the node structure has changed in some way,
                  identifying the path to the root of a modified subtree as an array of
                  Objects. A structure change event might involve nodes swapping position,
                  for example, or it might encapsulate multiple inserts and deletes in the
                  subtree stemming from the node, where the changes may have taken place at
                  different levels of the subtree.
                  &lt;blockquote&gt;
                  &lt;b&gt;Note:&lt;/b&gt;&lt;br&gt;
                  JTree collapses all nodes under the specified node, so that only its
                  immediate children are visible.
                  &lt;/blockquote&gt;                
                <param>
                    source the Object responsible for generating the event (typically
                      the creator of the event object passes <code>this</code>
                      for its value)                    
                </param>
                <param>
                    path   an array of Object identifying the path to the root of the
                      modified subtree, where the first element of the array is
                      the object stored at the root node and the last element
                      is the object stored at the changed node                    
                </param>
                <see>
                    TreePath                    
                </see>
            </javadoc>
            <method name="TreeModelEvent" type="constructor" line="150">
                <params>
                    <param name="source" type="Object"/>
                    <param name="path" type="Object[]"/>
                </params>
            </method>
            <javadoc line="153">
                Used to create an event when the node structure has changed in some way,
                  identifying the path to the root of the modified subtree as a TreePath
                  object. For more information on this event specification, see
                  &lt;code&gt;TreeModelEvent(Object,Object[])&lt;/code&gt;.                
                <param>
                    source the Object responsible for generating the event (typically
                      the creator of the event object passes <code>this</code>
                      for its value)                    
                </param>
                <param>
                    path   a TreePath object that identifies the path to the
                      change. In the DefaultTreeModel,
                      this object contains an array of user-data objects,
                      but a subclass of TreePath could use some totally
                      different mechanism -- for example, a node ID number                    
                </param>
                <see>
                    #TreeModelEvent(Object,Object[])                    
                </see>
            </javadoc>
            <method name="TreeModelEvent" type="constructor" line="168">
                <params>
                    <param name="source" type="Object"/>
                    <param name="path" type="TreePath"/>
                </params>
            </method>
            <javadoc line="173">
                For all events, except treeStructureChanged,
                  returns the parent of the changed nodes.
                  For treeStructureChanged events, returns the ancestor of the
                  structure that has changed. This and
                  &lt;code&gt;getChildIndices&lt;/code&gt; are used to get a list of the effected
                  nodes.
                  &lt;p&gt;
                  The one exception to this is a treeNodesChanged event that is to
                  identify the root, in which case this will return the root
                  and &lt;code&gt;getChildIndices&lt;/code&gt; will return null.                
                <return>
                    the TreePath used in identifying the changed nodes.                    
                </return>
                <see>
                    TreePath#getLastPathComponent                    
                </see>
            </javadoc>
            <method name="getTreePath" type="TreePath" line="187"/>
            <javadoc line="190">
                Convenience method to get the array of objects from the TreePath
                  instance that this event wraps.                
                <return>
                    an array of Objects, where the first Object is the one
                      stored at the root and the last object is the one
                      stored at the node identified by the path                    
                </return>
            </javadoc>
            <method name="getPath" type="Object[]" line="197"/>
            <javadoc line="201">
                Returns the objects that are children of the node identified by
                  &lt;code&gt;getPath&lt;/code&gt; at the locations specified by
                  &lt;code&gt;getChildIndices&lt;/code&gt;. If this is a removal event the
                  returned objects are no longer children of the parent node.                
                <return>
                    an array of Object containing the children specified by
                      the event                    
                </return>
                <see>
                    #getPath                    
                </see>
                <see>
                    #getChildIndices                    
                </see>
            </javadoc>
            <method name="getChildren" type="Object[]" line="211">
                <scope line="212">
                    <declaration name="cCount" type="int" line="213"/>
                    <declaration name="retChildren" type="Object[]" line="214"/>
                </scope>
            </method>
            <javadoc line="220">
                Returns the values of the child indexes. If this is a removal event
                  the indexes point to locations in the initial list where items
                  were removed. If it is an insert, the indices point to locations
                  in the final list where the items were added. For node changes,
                  the indices point to the locations of the modified nodes.                
                <return>
                    an array of <code>int</code> containing index locations for
                      the children specified by the event                    
                </return>
            </javadoc>
            <method name="getChildIndices" type="int[]" line="229">
                <scope line="230">
                    <declaration name="cCount" type="int" line="231"/>
                    <declaration name="retArray" type="int[]" line="232"/>
                </scope>
            </method>
            <javadoc line="238">
                Returns a string that displays and identifies this object&apos;s
                  properties.                
                <return>
                    a String representation of this object                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="243">
                <declaration name="retBuffer" type="StringBuffer" line="244"/>
                <scope line="247"/>
                <scope line="252"/>
            </method>
        </class>
    </source>