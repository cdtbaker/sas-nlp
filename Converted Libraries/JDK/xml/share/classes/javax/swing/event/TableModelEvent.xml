<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.event">
        <import package="java.util.EventObject"/>
        <import package="javax.swing.table"/>
        <class name="TableModelEvent" line="4">
            <extends class="java.util.EventObject"/>
            <javadoc line="4">
                TableModelEvent is used to notify listeners that a table model
                  has changed. The model event describes changes to a TableModel
                  and all references to rows and columns are in the co-ordinate
                  system of the model.
                  Depending on the parameters used in the constructors, the TableModelevent
                  can be used to specify the following types of changes: &lt;p&gt;
                  &lt;pre&gt;
                  TableModelEvent(source);              //  The data, ie. all rows changed
                  TableModelEvent(source, HEADER_ROW);  //  Structure change, reallocate TableColumns
                  TableModelEvent(source, 1);           //  Row 1 changed
                  TableModelEvent(source, 3, 6);        //  Rows 3 to 6 inclusive changed
                  TableModelEvent(source, 2, 2, 6);     //  Cell at (2, 6) changed
                  TableModelEvent(source, 3, 6, ALL_COLUMNS, INSERT); // Rows (3, 6) were inserted
                  TableModelEvent(source, 3, 6, ALL_COLUMNS, DELETE); // Rows (3, 6) were deleted
                  &lt;/pre&gt;
                  It is possible to use other combinations of the parameters, not all of them
                  are meaningful. By subclassing, you can add other information, for example:
                  whether the event WILL happen or DID happen. This makes the specification
                  of rows in DELETE events more useful but has not been included in
                  the swing package as the JTable only needs post-event notification.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <author>
                    Alan Chung                    
                </author>
                <author>
                    Philip Milne                    
                </author>
                <see>
                    TableModel                    
                </see>
            </javadoc>
            <declaration name="INSERT" type="int" line="39"/>
            <javadoc line="39">
                Identifies the addtion of new rows or columns.                
            </javadoc>
            <declaration name="UPDATE" type="int" line="43"/>
            <javadoc line="43">
                Identifies a change to existing data.                
            </javadoc>
            <declaration name="DELETE" type="int" line="47"/>
            <javadoc line="47">
                Identifies the removal of rows or columns.                
            </javadoc>
            <declaration name="HEADER_ROW" type="int" line="51"/>
            <javadoc line="51">
                Identifies the header row.                
            </javadoc>
            <declaration name="ALL_COLUMNS" type="int" line="55"/>
            <javadoc line="55">
                Specifies all columns in a row or rows.                
            </javadoc>
            <declaration name="type" type="int" line="59"/>
            <declaration name="firstRow" type="int" line="60"/>
            <declaration name="lastRow" type="int" line="61"/>
            <declaration name="column" type="int" line="62"/>
            <javadoc line="63">
                All row data in the table has changed, listeners should discard any state
                  that was based on the rows and requery the &lt;code&gt;TableModel&lt;/code&gt;
                  to get the new row count and all the appropriate values.
                  The &lt;code&gt;JTable&lt;/code&gt; will repaint the entire visible region on
                  receiving this event, querying the model for the cell values that are visible.
                  The structure of the table ie, the column names, types and order
                  have not changed.                
            </javadoc>
            <method name="TableModelEvent" type="constructor" line="72">
                <params>
                    <param name="source" type="TableModel"/>
                </params>
            </method>
            <javadoc line="75">
                This row of data has been updated.
                  To denote the arrival of a completely new table with a different structure
                  use &lt;code&gt;HEADER_ROW&lt;/code&gt; as the value for the &lt;code&gt;row&lt;/code&gt;.
                  When the &lt;code&gt;JTable&lt;/code&gt; receives this event and its
                  &lt;code&gt;autoCreateColumnsFromModel&lt;/code&gt;
                  flag is set it discards any TableColumns that it had and reallocates
                  default ones in the order they appear in the model. This is the
                  same as calling &lt;code&gt;setModel(TableModel)&lt;/code&gt; on the &lt;code&gt;JTable&lt;/code&gt;.                
            </javadoc>
            <method name="TableModelEvent" type="constructor" line="85">
                <params>
                    <param name="source" type="TableModel"/>
                    <param name="row" type="int"/>
                </params>
            </method>
            <javadoc line="88">
                The data in rows [&lt;I&gt;firstRow&lt;/I&gt;, &lt;I&gt;lastRow&lt;/I&gt;] have been updated.                
            </javadoc>
            <method name="TableModelEvent" type="constructor" line="91">
                <params>
                    <param name="source" type="TableModel"/>
                    <param name="firstRow" type="int"/>
                    <param name="lastRow" type="int"/>
                </params>
            </method>
            <javadoc line="94">
                The cells in column &lt;I&gt;column&lt;/I&gt; in the range
                  [&lt;I&gt;firstRow&lt;/I&gt;, &lt;I&gt;lastRow&lt;/I&gt;] have been updated.                
            </javadoc>
            <method name="TableModelEvent" type="constructor" line="98">
                <params>
                    <param name="source" type="TableModel"/>
                    <param name="firstRow" type="int"/>
                    <param name="lastRow" type="int"/>
                    <param name="column" type="int"/>
                </params>
            </method>
            <javadoc line="101">
                The cells from (firstRow, column) to (lastRow, column) have been changed.
                  The &lt;I&gt;column&lt;/I&gt; refers to the column index of the cell in the model&apos;s
                  co-ordinate system. When &lt;I&gt;column&lt;/I&gt; is ALL_COLUMNS, all cells in the
                  specified range of rows are considered changed.
                  &lt;p&gt;
                  The &lt;I&gt;type&lt;/I&gt; should be one of: INSERT, UPDATE and DELETE.                
            </javadoc>
            <method name="TableModelEvent" type="constructor" line="109">
                <params>
                    <param name="source" type="TableModel"/>
                    <param name="firstRow" type="int"/>
                    <param name="lastRow" type="int"/>
                    <param name="column" type="int"/>
                    <param name="type" type="int"/>
                </params>
            </method>
            <javadoc line="116">
                Returns the first row that changed.  HEADER_ROW means the meta data,
                  ie. names, types and order of the columns.                
            </javadoc>
            <method name="getFirstRow" type="int" line="120"/>
            <javadoc line="123">
                Returns the last row that changed.                
            </javadoc>
            <method name="getLastRow" type="int" line="126"/>
            <javadoc line="129">
                Returns the column for the event.  If the return
                  value is ALL_COLUMNS; it means every column in the specified
                  rows changed.                
            </javadoc>
            <method name="getColumn" type="int" line="134"/>
            <javadoc line="137">
                Returns the type of event - one of: INSERT, UPDATE and DELETE.                
            </javadoc>
            <method name="getType" type="int" line="140"/>
        </class>
    </source>