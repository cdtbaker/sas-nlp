<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.event">
        <import package="java.io"/>
        <import package="java.util"/>
        <import package="java.lang.reflect.Array"/>
        <class name="EventListenerList" line="31">
            <comment line="101">
                                
            </comment>
            <comment line="103">
                                
            </comment>
            <comment line="247">
                Serialization support.                
            </comment>
            <implements interface="Serializable"/>
            <javadoc line="31">
                A class that holds a list of EventListeners.  A single instance
                  can be used to hold all listeners (of all types) for the instance
                  using the list.  It is the responsiblity of the class using the
                  EventListenerList to provide type-safe API (preferably conforming
                  to the JavaBeans spec) and methods which dispatch event notification
                  methods to appropriate Event Listeners on the list.
                  The main benefits that this class provides are that it is relatively
                  cheap in the case of no listeners, and it provides serialization for
                  event-listener lists in a single place, as well as a degree of MT safety
                  (when used correctly).
                  Usage example:
                  Say one is defining a class that sends out FooEvents, and one wants
                  to allow users of the class to register FooListeners and receive
                  notification when FooEvents occur.  The following should be added
                  to the class definition:
                  &lt;pre&gt;
                  EventListenerList listenerList = new EventListenerList();
                  FooEvent fooEvent = null;
                  public void addFooListener(FooListener l) {
                  listenerList.add(FooListener.class, l);
                  }
                  public void removeFooListener(FooListener l) {
                  listenerList.remove(FooListener.class, l);
                  }
                  // Notify all listeners that have registered interest for
                  // notification on this event type.  The event instance
                  // is lazily created using the parameters passed into
                  // the fire method.
                  protected void fireFooXXX() {
                  // Guaranteed to return a non-null array
                  Object[] listeners = listenerList.getListenerList();
                  // Process the listeners last to first, notifying
                  // those that are interested in this event
                  for (int i = listeners.length-2; i&gt;=0; i-=2) {
                  if (listeners[i]==FooListener.class) {
                  // Lazily create the event:
                  if (fooEvent == null)
                  fooEvent = new FooEvent(this);
                  ((FooListener)listeners[i+1]).fooXXX(fooEvent);
                  }
                  }
                  }
                  &lt;/pre&gt;
                  foo should be changed to the appropriate name, and fireFooXxx to the
                  appropriate method name.  One fire method should exist for each
                  notification method in the FooListener interface.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <author>
                    Georges Saab                    
                </author>
                <author>
                    Hans Muller                    
                </author>
                <author>
                    James Gosling                    
                </author>
            </javadoc>
            <declaration name="NULL_ARRAY" type="Object[]" line="101"/>
            <declaration name="listenerList" type="Object[]" line="103"/>
            <javadoc line="105">
                Passes back the event listener list as an array
                  of ListenerType-listener pairs.  Note that for
                  performance reasons, this implementation passes back
                  the actual data structure in which the listener data
                  is stored internally!
                  This method is guaranteed to pass back a non-null
                  array, so that no null-checking is required in
                  fire methods.  A zero-length array of Object should
                  be returned if there are currently no listeners.
                  WARNING!!! Absolutely NO modification of
                  the data contained in this array should be made -- if
                  any such manipulation is necessary, it should be done
                  on a copy of the array returned rather than the array
                  itself.                
            </javadoc>
            <method name="getListenerList" type="Object[]" line="122"/>
            <javadoc line="126">
                Return an array of all the listeners of the given type.                
                <return>
                    all of the listeners of the specified type.                    
                </return>
                <exception>
                    ClassCastException if the supplied class
                      is not assignable to EventListener                    
                </exception>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getListeners" type="T[]" line="134">
                <params>
                    <param name="t" type="Class<T>"/>
                </params>
                <declaration name="lList" type="Object[]" line="135"/>
                <declaration name="n" type="int" line="136"/>
                <declaration name="result" type="T[]" line="137"/>
                <declaration name="j" type="int" line="138"/>
                <scope line="139">
                    <scope line="140"/>
                </scope>
            </method>
            <javadoc line="147">
                Returns the total number of listeners for this listener list.                
            </javadoc>
            <method name="getListenerCount" type="int" line="150"/>
            <javadoc line="154">
                Returns the total number of listeners of the supplied type
                  for this listener list.                
            </javadoc>
            <method name="getListenerCount" type="int" line="158">
                <params>
                    <param name="t" type="Class<?>"/>
                </params>
                <declaration name="lList" type="Object[]" line="159"/>
            </method>
            <method name="getListenerCount" type="int" line="163">
                <params>
                    <param name="list" type="Object[]"/>
                    <param name="t" type="Class"/>
                </params>
                <declaration name="count" type="int" line="164"/>
                <scope line="165"/>
            </method>
            <javadoc line="172">
                Adds the listener as a listener of the specified type.                
                <param>
                    t the type of the listener to be added                    
                </param>
                <param>
                    l the listener to be added                    
                </param>
            </javadoc>
            <method name="add" type="void" line="177">
                <params>
                    <param name="t" type="Class<T>"/>
                    <param name="l" type="T"/>
                </params>
                <comment line="180">
                    In an ideal world, we would do an assertion here
                     to help developers know they are probably doing
                     something wrong                    
                </comment>
                <comment line="190">
                    if this is the first listener added,
                     initialize the lists                    
                </comment>
                <comment line="194">
                    Otherwise copy the array and add the new listener                    
                </comment>
                <scope line="178"/>
                <scope line="184"/>
                <scope line="188"/>
                <scope line="192">
                    <declaration name="i" type="int" line="194"/>
                    <declaration name="tmp" type="Object[]" line="195"/>
                </scope>
            </method>
            <javadoc line="205">
                Removes the listener as a listener of the specified type.                
                <param>
                    t the type of the listener to be removed                    
                </param>
                <param>
                    l the listener to be removed                    
                </param>
            </javadoc>
            <method name="remove" type="void" line="210">
                <params>
                    <param name="t" type="Class<T>"/>
                    <param name="l" type="T"/>
                </params>
                <comment line="213">
                    In an ideal world, we would do an assertion here
                     to help developers know they are probably doing
                     something wrong                    
                </comment>
                <comment line="222">
                    Is l on the list?                    
                </comment>
                <comment line="231">
                    If so,  remove it                    
                </comment>
                <comment line="234">
                    Copy the list up to index                    
                </comment>
                <comment line="236">
                    Copy from two past the index, up to
                     the end of tmp (which is two elements
                     shorter than the old list)                    
                </comment>
                <comment line="242">
                    set the listener array to the new array or null                    
                </comment>
                <scope line="211"/>
                <scope line="217"/>
                <declaration name="index" type="int" line="222"/>
                <scope line="223">
                    <scope line="224"/>
                </scope>
                <scope line="231">
                    <declaration name="tmp" type="Object[]" line="232"/>
                </scope>
            </method>
            <method name="writeObject" type="void" line="247">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
                <comment line="252">
                    Save the non-null event listeners:                    
                </comment>
                <declaration name="lList" type="Object[]" line="248"/>
                <scope line="252">
                    <declaration name="t" type="Class" line="253"/>
                    <declaration name="l" type="EventListener" line="254"/>
                    <scope line="255"/>
                </scope>
            </method>
            <method name="readObject" type="void" line="265">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
                <declaration name="listenerTypeOrNull" type="Object" line="268"/>
                <scope line="270">
                    <declaration name="cl" type="ClassLoader" line="271"/>
                    <declaration name="l" type="EventListener" line="272"/>
                </scope>
            </method>
            <javadoc line="277">
                Returns a string representation of the EventListenerList.                
            </javadoc>
            <method name="toString" type="String" line="280">
                <declaration name="lList" type="Object[]" line="281"/>
                <declaration name="s" type="String" line="282"/>
                <scope line="284"/>
            </method>
        </class>
    </source>