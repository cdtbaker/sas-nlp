<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.event">
        <import package="java.util.EventListener"/>
        <interface name="TreeModelListener">
            <implements interface="EventListener"/>
            <javadoc line="30">
                Defines the interface for an object that listens
                  to changes in a TreeModel.
                  For further information and examples see
                  &lt;a
                  href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/events/treemodellistener.html&quot;&gt;How to Write a Tree Model Listener&lt;/a&gt;,
                  a section in &lt;em&gt;The Java Tutorial.&lt;/em&gt;                
                <author>
                    Rob Davis                    
                </author>
                <author>
                    Ray Ryan                    
                </author>
            </javadoc>
            <method name="treeNodesChanged" type="void" line="43"/>
            <javadoc line="43">
                &lt;p&gt;Invoked after a node (or a set of siblings) has changed in some
                  way. The node(s) have not changed locations in the tree or
                  altered their children arrays, but other attributes have
                  changed and may affect presentation. Example: the name of a
                  file has changed, but it is in the same location in the file
                  system.&lt;/p&gt;
                  &lt;p&gt;To indicate the root has changed, childIndices and children
                  will be null. &lt;/p&gt;
                  &lt;p&gt;Use &lt;code&gt;e.getPath()&lt;/code&gt;
                  to get the parent of the changed node(s).
                  &lt;code&gt;e.getChildIndices()&lt;/code&gt;
                  returns the index(es) of the changed node(s).&lt;/p&gt;                
            </javadoc>
            <method name="treeNodesInserted" type="void" line="60"/>
            <javadoc line="60">
                &lt;p&gt;Invoked after nodes have been inserted into the tree.&lt;/p&gt;
                  &lt;p&gt;Use &lt;code&gt;e.getPath()&lt;/code&gt;
                  to get the parent of the new node(s).
                  &lt;code&gt;e.getChildIndices()&lt;/code&gt;
                  returns the index(es) of the new node(s)
                  in ascending order.&lt;/p&gt;                
            </javadoc>
            <method name="treeNodesRemoved" type="void" line="71"/>
            <javadoc line="71">
                &lt;p&gt;Invoked after nodes have been removed from the tree.  Note that
                  if a subtree is removed from the tree, this method may only be
                  invoked once for the root of the removed subtree, not once for
                  each individual set of siblings removed.&lt;/p&gt;
                  &lt;p&gt;Use &lt;code&gt;e.getPath()&lt;/code&gt;
                  to get the former parent of the deleted node(s).
                  &lt;code&gt;e.getChildIndices()&lt;/code&gt;
                  returns, in ascending order, the index(es)
                  the node(s) had before being deleted.&lt;/p&gt;                
            </javadoc>
            <method name="treeStructureChanged" type="void" line="85"/>
            <javadoc line="85">
                &lt;p&gt;Invoked after the tree has drastically changed structure from a
                  given node down.  If the path returned by e.getPath() is of length
                  one and the first element does not identify the current root node
                  the first element should become the new root of the tree.&lt;p&gt;
                  &lt;p&gt;Use &lt;code&gt;e.getPath()&lt;/code&gt;
                  to get the path to the node.
                  &lt;code&gt;e.getChildIndices()&lt;/code&gt;
                  returns null.&lt;/p&gt;                
            </javadoc>
        </interface>
    </source>