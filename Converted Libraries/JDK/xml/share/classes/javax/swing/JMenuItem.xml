<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.util.EventListener"/>
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="java.awt.image"/>
        <import package="java.beans.PropertyChangeEvent"/>
        <import package="java.beans.PropertyChangeListener"/>
        <import package="java.io.Serializable"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.IOException"/>
        <import package="javax.swing.plaf"/>
        <import package="javax.swing.plaf.basic"/>
        <import package="javax.swing.event"/>
        <import package="javax.accessibility"/>
        <class name="JMenuItem" line="16">
            <extends class="AbstractButton"/>
            <implements interface="Accessible"/>
            <implements interface="MenuElement"/>
            <javadoc line="16">
                An implementation of an item in a menu. A menu item is essentially a button
                  sitting in a list. When the user selects the &quot;button&quot;, the action
                  associated with the menu item is performed. A &lt;code&gt;JMenuItem&lt;/code&gt;
                  contained in a &lt;code&gt;JPopupMenu&lt;/code&gt; performs exactly that function.
                  &lt;p&gt;
                  Menu items can be configured, and to some degree controlled, by
                  &lt;code&gt;&lt;a href=&quot;Action.html&quot;&gt;Action&lt;/a&gt;&lt;/code&gt;s.  Using an
                  &lt;code&gt;Action&lt;/code&gt; with a menu item has many benefits beyond directly
                  configuring a menu item.  Refer to &lt;a href=&quot;Action.html#buttonActions&quot;&gt;
                  Swing Components Supporting &lt;code&gt;Action&lt;/code&gt;&lt;/a&gt; for more
                  details, and you can find more information in &lt;a
                  href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/misc/action.html&quot;&gt;How
                  to Use Actions&lt;/a&gt;, a section in &lt;em&gt;The Java Tutorial&lt;/em&gt;.
                  &lt;p&gt;
                  For further documentation and for examples, see
                  &lt;a
                  href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/components/menu.html&quot;&gt;How to Use Menus&lt;/a&gt;
                  in &lt;em&gt;The Java Tutorial.&lt;/em&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt; Swing is not thread safe. For more
                  information see &lt;a
                  href=&quot;package-summary.html#threading&quot;&gt;Swing&apos;s Threading
                  Policy&lt;/a&gt;.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <beaninfoattribute>
                    : isContainer false
                      description: An item which can be selected in a menu.                    
                </beaninfoattribute>
                <author>
                    Georges Saab                    
                </author>
                <author>
                    David Karlton                    
                </author>
                <see>
                    JPopupMenu                    
                </see>
                <see>
                    JMenu                    
                </see>
                <see>
                    JCheckBoxMenuItem                    
                </see>
                <see>
                    JRadioButtonMenuItem                    
                </see>
            </javadoc>
            <declaration name="uiClassID" type="String" line="59"/>
            <javadoc line="59">
                @see #getUIClassID                
                <see>
                    #readObject                    
                </see>
            </javadoc>
            <declaration name="TRACE" type="boolean" line="64"/>
            <declaration name="VERBOSE" type="boolean" line="65"/>
            <declaration name="DEBUG" type="boolean" line="66"/>
            <declaration name="isMouseDragged" type="boolean" line="67"/>
            <javadoc line="68">
                Creates a &lt;code&gt;JMenuItem&lt;/code&gt; with no set text or icon.                
            </javadoc>
            <method name="JMenuItem" type="constructor" line="71"/>
            <javadoc line="74">
                Creates a &lt;code&gt;JMenuItem&lt;/code&gt; with the specified icon.                
                <param>
                    icon the icon of the &lt;code&gt;JMenuItem&lt;/code&gt;                    
                </param>
            </javadoc>
            <method name="JMenuItem" type="constructor" line="78">
                <params>
                    <param name="icon" type="Icon"/>
                </params>
            </method>
            <javadoc line="81">
                Creates a &lt;code&gt;JMenuItem&lt;/code&gt; with the specified text.                
                <param>
                    text the text of the &lt;code&gt;JMenuItem&lt;/code&gt;                    
                </param>
            </javadoc>
            <method name="JMenuItem" type="constructor" line="85">
                <params>
                    <param name="text" type="String"/>
                </params>
            </method>
            <javadoc line="88">
                Creates a menu item whose properties are taken from the
                  specified &lt;code&gt;Action&lt;/code&gt;.                
                <param>
                    a the action of the &lt;code&gt;JMenuItem&lt;/code&gt;                    
                </param>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="JMenuItem" type="constructor" line="94">
                <params>
                    <param name="a" type="Action"/>
                </params>
            </method>
            <javadoc line="98">
                Creates a &lt;code&gt;JMenuItem&lt;/code&gt; with the specified text and icon.                
                <param>
                    text the text of the &lt;code&gt;JMenuItem&lt;/code&gt;                    
                </param>
                <param>
                    icon the icon of the &lt;code&gt;JMenuItem&lt;/code&gt;                    
                </param>
            </javadoc>
            <method name="JMenuItem" type="constructor" line="103">
                <params>
                    <param name="text" type="String"/>
                    <param name="icon" type="Icon"/>
                </params>
            </method>
            <javadoc line="108">
                Creates a &lt;code&gt;JMenuItem&lt;/code&gt; with the specified text and
                  keyboard mnemonic.                
                <param>
                    text the text of the &lt;code&gt;JMenuItem&lt;/code&gt;                    
                </param>
                <param>
                    mnemonic the keyboard mnemonic for the &lt;code&gt;JMenuItem&lt;/code&gt;                    
                </param>
            </javadoc>
            <method name="JMenuItem" type="constructor" line="114">
                <params>
                    <param name="text" type="String"/>
                    <param name="mnemonic" type="int"/>
                </params>
            </method>
            <javadoc line="120">
                {@inheritDoc}                
            </javadoc>
            <method name="setModel" type="void" line="123">
                <params>
                    <param name="newModel" type="ButtonModel"/>
                </params>
                <scope line="125"/>
            </method>
            <javadoc line="129">
                Inititalizes the focusability of the the &lt;code&gt;JMenuItem&lt;/code&gt;.
                  &lt;code&gt;JMenuItem&lt;/code&gt;&apos;s are focusable, but subclasses may
                  want to be, this provides them the opportunity to override this
                  and invoke something else, or nothing at all. Refer to{@link javax.swing.JMenu#initFocusability} for the motivation of
                  this.                
            </javadoc>
            <method name="initFocusability" type="void" line="136"/>
            <javadoc line="139">
                Initializes the menu item with the specified text and icon.                
                <param>
                    text the text of the &lt;code&gt;JMenuItem&lt;/code&gt;                    
                </param>
                <param>
                    icon the icon of the &lt;code&gt;JMenuItem&lt;/code&gt;                    
                </param>
            </javadoc>
            <method name="init" type="void" line="144">
                <params>
                    <param name="text" type="String"/>
                    <param name="icon" type="Icon"/>
                </params>
                <scope line="145"/>
                <scope line="148"/>
            </method>
            <class name="MenuItemFocusListener" line="158">
                <implements interface="FocusListener"/>
                <implements interface="Serializable"/>
                <method name="focusGained" type="void" line="159">
                    <params>
                        <param name="event" type="FocusEvent"/>
                    </params>
                </method>
                <method name="focusLost" type="void" line="161">
                    <params>
                        <param name="event" type="FocusEvent"/>
                    </params>
                    <declaration name="mi" type="JMenuItem" line="162"/>
                    <scope line="163"/>
                </method>
            </class>
            <javadoc line="168">
                Sets the look and feel object that renders this component.                
                <param>
                    ui  the &lt;code&gt;JMenuItemUI&lt;/code&gt; L&amp;F object                    
                </param>
                <see>
                    UIDefaults#getUI                    
                </see>
                <beaninfobound>
                    : true
                      hidden: true
                      attribute: visualUpdate true
                      description: The UI object that implements the Component&apos;s LookAndFeel.                    
                </beaninfobound>
            </javadoc>
            <method name="setUI" type="void" line="177">
                <params>
                    <param name="ui" type="MenuItemUI"/>
                </params>
            </method>
            <javadoc line="180">
                Resets the UI property with a value from the current look and feel.                
                <see>
                    JComponent#updateUI                    
                </see>
            </javadoc>
            <method name="updateUI" type="void" line="184"/>
            <javadoc line="187">
                Returns the suffix used to construct the name of the L&amp;F class used to
                  render this component.                
                <return>
                    the string &quot;MenuItemUI&quot;                    
                </return>
                <see>
                    JComponent#getUIClassID                    
                </see>
                <see>
                    UIDefaults#getUI                    
                </see>
            </javadoc>
            <method name="getUIClassID" type="String" line="194"/>
            <javadoc line="197">
                Identifies the menu item as &quot;armed&quot;. If the mouse button is
                  released while it is over this item, the menu&apos;s action event
                  will fire. If the mouse button is released elsewhere, the
                  event will not fire and the menu item will be disarmed.                
                <param>
                    b true to arm the menu item so it can be selected                    
                </param>
                <beaninfodescription>
                    : Mouse release will fire an action event
                      hidden: true                    
                </beaninfodescription>
            </javadoc>
            <method name="setArmed" type="void" line="206">
                <params>
                    <param name="b" type="boolean"/>
                </params>
                <declaration name="model" type="ButtonModel" line="207"/>
                <declaration name="oldValue" type="boolean" line="208"/>
                <scope line="209"/>
            </method>
            <javadoc line="213">
                Returns whether the menu item is &quot;armed&quot;.                
                <return>
                    true if the menu item is armed, and it can be selected                    
                </return>
                <see>
                    #setArmed                    
                </see>
            </javadoc>
            <method name="isArmed" type="boolean" line="218">
                <declaration name="model" type="ButtonModel" line="219"/>
            </method>
            <javadoc line="222">
                Enables or disables the menu item.                
                <param>
                    b  true to enable the item                    
                </param>
                <beaninfodescription>
                    : Does the component react to user interaction
                      bound: true
                      preferred: true                    
                </beaninfodescription>
            </javadoc>
            <method name="setEnabled" type="void" line="229">
                <params>
                    <param name="b" type="boolean"/>
                </params>
                <scope line="230"/>
            </method>
            <javadoc line="235">
                Returns true since &lt;code&gt;Menu&lt;/code&gt;s, by definition,
                  should always be on top of all other windows.  If the menu is
                  in an internal frame false is returned due to the rollover effect
                  for windows laf where the menu is not always on top.                
            </javadoc>
            <method name="alwaysOnTop" type="boolean" line="241">
                <scope line="242"/>
            </method>
            <declaration name="accelerator" type="KeyStroke" line="247"/>
            <javadoc line="248">
                Sets the key combination which invokes the menu item&apos;s
                  action listeners without navigating the menu hierarchy. It is the
                  UI&apos;s responsibility to install the correct action.  Note that
                  when the keyboard accelerator is typed, it will work whether or
                  not the menu is currently displayed.                
                <param>
                    keyStroke the &lt;code&gt;KeyStroke&lt;/code&gt; which will
                      serve as an accelerator                    
                </param>
                <beaninfodescription>
                    : The keystroke combination which will invoke the
                      JMenuItem&apos;s actionlisteners without navigating the
                      menu hierarchy
                      bound: true
                      preferred: true                    
                </beaninfodescription>
            </javadoc>
            <method name="setAccelerator" type="void" line="262">
                <params>
                    <param name="keyStroke" type="KeyStroke"/>
                </params>
                <declaration name="oldAccelerator" type="KeyStroke" line="263"/>
            </method>
            <javadoc line="269">
                Returns the &lt;code&gt;KeyStroke&lt;/code&gt; which serves as an accelerator
                  for the menu item.                
                <return>
                    a &lt;code&gt;KeyStroke&lt;/code&gt; object identifying the
                      accelerator key                    
                </return>
            </javadoc>
            <method name="getAccelerator" type="KeyStroke" line="275"/>
            <javadoc line="278">
                {@inheritDoc}                
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="configurePropertiesFromAction" type="void" line="282">
                <params>
                    <param name="a" type="Action"/>
                </params>
            </method>
            <method name="setIconFromAction" type="void" line="286">
                <params>
                    <param name="a" type="Action"/>
                </params>
                <declaration name="icon" type="Icon" line="287"/>
                <scope line="288"/>
            </method>
            <method name="largeIconChanged" type="void" line="293">
                <params>
                    <param name="a" type="Action"/>
                </params>
            </method>
            <method name="smallIconChanged" type="void" line="295">
                <params>
                    <param name="a" type="Action"/>
                </params>
            </method>
            <method name="configureAcceleratorFromAction" type="void" line="298">
                <params>
                    <param name="a" type="Action"/>
                </params>
                <declaration name="ks" type="KeyStroke" line="299"/>
            </method>
            <javadoc line="302">
                {@inheritDoc}                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="actionPropertyChanged" type="void" line="306">
                <params>
                    <param name="action" type="Action"/>
                    <param name="propertyName" type="String"/>
                </params>
                <scope line="307"/>
                <scope line="310"/>
            </method>
            <javadoc line="314">
                Processes a mouse event forwarded from the
                  &lt;code&gt;MenuSelectionManager&lt;/code&gt; and changes the menu
                  selection, if necessary, by using the
                  &lt;code&gt;MenuSelectionManager&lt;/code&gt;&apos;s API.
                  &lt;p&gt;
                  Note: you do not have to forward the event to sub-components.
                  This is done automatically by the &lt;code&gt;MenuSelectionManager&lt;/code&gt;.                
                <param>
                    e   a &lt;code&gt;MouseEvent&lt;/code&gt;                    
                </param>
                <param>
                    path  the &lt;code&gt;MenuElement&lt;/code&gt; path array                    
                </param>
                <param>
                    manager   the &lt;code&gt;MenuSelectionManager&lt;/code&gt;                    
                </param>
            </javadoc>
            <method name="processMouseEvent" type="void" line="326">
                <params>
                    <param name="e" type="MouseEvent"/>
                    <param name="path" type="MenuElement"/>
                    <param name="manager" type="MenuSelectionManager"/>
                </params>
            </method>
            <javadoc line="329">
                Processes a key event forwarded from the
                  &lt;code&gt;MenuSelectionManager&lt;/code&gt; and changes the menu selection,
                  if necessary, by using &lt;code&gt;MenuSelectionManager&lt;/code&gt;&apos;s API.
                  &lt;p&gt;
                  Note: you do not have to forward the event to sub-components.
                  This is done automatically by the &lt;code&gt;MenuSelectionManager&lt;/code&gt;.                
                <param>
                    e  a &lt;code&gt;KeyEvent&lt;/code&gt;                    
                </param>
                <param>
                    path the &lt;code&gt;MenuElement&lt;/code&gt; path array                    
                </param>
                <param>
                    manager   the &lt;code&gt;MenuSelectionManager&lt;/code&gt;                    
                </param>
            </javadoc>
            <method name="processKeyEvent" type="void" line="340">
                <params>
                    <param name="e" type="KeyEvent"/>
                    <param name="path" type="MenuElement"/>
                    <param name="manager" type="MenuSelectionManager"/>
                </params>
                <scope line="341"/>
                <declaration name="mke" type="MenuKeyEvent" line="344"/>
                <scope line="346"/>
            </method>
            <javadoc line="350">
                Handles mouse drag in a menu.                
                <param>
                    e  a &lt;code&gt;MenuDragMouseEvent&lt;/code&gt; object                    
                </param>
            </javadoc>
            <method name="processMenuDragMouseEvent" type="void" line="354">
                <params>
                    <param name="e" type="MenuDragMouseEvent"/>
                </params>
            </method>
            <javadoc line="375">
                Handles a keystroke in a menu.                
                <param>
                    e  a &lt;code&gt;MenuKeyEvent&lt;/code&gt; object                    
                </param>
            </javadoc>
            <method name="processMenuKeyEvent" type="void" line="379">
                <params>
                    <param name="e" type="MenuKeyEvent"/>
                </params>
                <scope line="380"/>
            </method>
            <javadoc line="397">
                Notifies all listeners that have registered interest for
                  notification on this event type.                
                <param>
                    event a &lt;code&gt;MenuMouseDragEvent&lt;/code&gt;                    
                </param>
                <see>
                    EventListenerList                    
                </see>
            </javadoc>
            <method name="fireMenuDragMouseEntered" type="void" line="403">
                <params>
                    <param name="event" type="MenuDragMouseEvent"/>
                </params>
                <declaration name="listeners" type="Object[]" line="404"/>
                <scope line="405">
                    <scope line="406"/>
                </scope>
            </method>
            <javadoc line="411">
                Notifies all listeners that have registered interest for
                  notification on this event type.                
                <param>
                    event a &lt;code&gt;MenuDragMouseEvent&lt;/code&gt;                    
                </param>
                <see>
                    EventListenerList                    
                </see>
            </javadoc>
            <method name="fireMenuDragMouseExited" type="void" line="417">
                <params>
                    <param name="event" type="MenuDragMouseEvent"/>
                </params>
                <declaration name="listeners" type="Object[]" line="418"/>
                <scope line="419">
                    <scope line="420"/>
                </scope>
            </method>
            <javadoc line="425">
                Notifies all listeners that have registered interest for
                  notification on this event type.                
                <param>
                    event a &lt;code&gt;MenuDragMouseEvent&lt;/code&gt;                    
                </param>
                <see>
                    EventListenerList                    
                </see>
            </javadoc>
            <method name="fireMenuDragMouseDragged" type="void" line="431">
                <params>
                    <param name="event" type="MenuDragMouseEvent"/>
                </params>
                <declaration name="listeners" type="Object[]" line="432"/>
                <scope line="433">
                    <scope line="434"/>
                </scope>
            </method>
            <javadoc line="439">
                Notifies all listeners that have registered interest for
                  notification on this event type.                
                <param>
                    event a &lt;code&gt;MenuDragMouseEvent&lt;/code&gt;                    
                </param>
                <see>
                    EventListenerList                    
                </see>
            </javadoc>
            <method name="fireMenuDragMouseReleased" type="void" line="445">
                <params>
                    <param name="event" type="MenuDragMouseEvent"/>
                </params>
                <declaration name="listeners" type="Object[]" line="446"/>
                <scope line="447">
                    <scope line="448"/>
                </scope>
            </method>
            <javadoc line="453">
                Notifies all listeners that have registered interest for
                  notification on this event type.                
                <param>
                    event a &lt;code&gt;MenuKeyEvent&lt;/code&gt;                    
                </param>
                <see>
                    EventListenerList                    
                </see>
            </javadoc>
            <method name="fireMenuKeyPressed" type="void" line="459">
                <params>
                    <param name="event" type="MenuKeyEvent"/>
                </params>
                <scope line="460"/>
                <declaration name="listeners" type="Object[]" line="463"/>
                <scope line="464">
                    <scope line="465"/>
                </scope>
            </method>
            <javadoc line="470">
                Notifies all listeners that have registered interest for
                  notification on this event type.                
                <param>
                    event a &lt;code&gt;MenuKeyEvent&lt;/code&gt;                    
                </param>
                <see>
                    EventListenerList                    
                </see>
            </javadoc>
            <method name="fireMenuKeyReleased" type="void" line="476">
                <params>
                    <param name="event" type="MenuKeyEvent"/>
                </params>
                <scope line="477"/>
                <declaration name="listeners" type="Object[]" line="480"/>
                <scope line="481">
                    <scope line="482"/>
                </scope>
            </method>
            <javadoc line="487">
                Notifies all listeners that have registered interest for
                  notification on this event type.                
                <param>
                    event a &lt;code&gt;MenuKeyEvent&lt;/code&gt;                    
                </param>
                <see>
                    EventListenerList                    
                </see>
            </javadoc>
            <method name="fireMenuKeyTyped" type="void" line="493">
                <params>
                    <param name="event" type="MenuKeyEvent"/>
                </params>
                <scope line="494"/>
                <declaration name="listeners" type="Object[]" line="497"/>
                <scope line="498">
                    <scope line="499"/>
                </scope>
            </method>
            <javadoc line="504">
                Called by the &lt;code&gt;MenuSelectionManager&lt;/code&gt; when the
                  &lt;code&gt;MenuElement&lt;/code&gt; is selected or unselected.                
                <param>
                    isIncluded  true if this menu item is on the part of the menu
                      path that changed, false if this menu is part of the
                      a menu path that changed, but this particular part of
                      that path is still the same                    
                </param>
                <see>
                    MenuSelectionManager#setSelectedPath(MenuElement[])                    
                </see>
            </javadoc>
            <method name="menuSelectionChanged" type="void" line="513">
                <params>
                    <param name="isIncluded" type="boolean"/>
                </params>
            </method>
            <javadoc line="516">
                This method returns an array containing the sub-menu
                  components for this menu component.                
                <return>
                    an array of &lt;code&gt;MenuElement&lt;/code&gt;s                    
                </return>
            </javadoc>
            <method name="getSubElements" type="MenuElement[]" line="521"/>
            <javadoc line="524">
                Returns the &lt;code&gt;java.awt.Component&lt;/code&gt; used to paint
                  this object. The returned component will be used to convert
                  events and detect if an event is inside a menu component.                
                <return>
                    the &lt;code&gt;Component&lt;/code&gt; that paints this menu item                    
                </return>
            </javadoc>
            <method name="getComponent" type="Component" line="530"/>
            <javadoc line="533">
                Adds a &lt;code&gt;MenuDragMouseListener&lt;/code&gt; to the menu item.                
                <param>
                    l the &lt;code&gt;MenuDragMouseListener&lt;/code&gt; to be added                    
                </param>
            </javadoc>
            <method name="addMenuDragMouseListener" type="void" line="537">
                <params>
                    <param name="l" type="MenuDragMouseListener"/>
                </params>
            </method>
            <javadoc line="540">
                Removes a &lt;code&gt;MenuDragMouseListener&lt;/code&gt; from the menu item.                
                <param>
                    l the &lt;code&gt;MenuDragMouseListener&lt;/code&gt; to be removed                    
                </param>
            </javadoc>
            <method name="removeMenuDragMouseListener" type="void" line="544">
                <params>
                    <param name="l" type="MenuDragMouseListener"/>
                </params>
            </method>
            <javadoc line="547">
                Returns an array of all the &lt;code&gt;MenuDragMouseListener&lt;/code&gt;s added
                  to this JMenuItem with addMenuDragMouseListener().                
                <return>
                    all of the &lt;code&gt;MenuDragMouseListener&lt;/code&gt;s added or an empty
                      array if no listeners have been added                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getMenuDragMouseListeners" type="MenuDragMouseListener[]" line="554"/>
            <javadoc line="557">
                Adds a &lt;code&gt;MenuKeyListener&lt;/code&gt; to the menu item.                
                <param>
                    l the &lt;code&gt;MenuKeyListener&lt;/code&gt; to be added                    
                </param>
            </javadoc>
            <method name="addMenuKeyListener" type="void" line="561">
                <params>
                    <param name="l" type="MenuKeyListener"/>
                </params>
            </method>
            <javadoc line="564">
                Removes a &lt;code&gt;MenuKeyListener&lt;/code&gt; from the menu item.                
                <param>
                    l the &lt;code&gt;MenuKeyListener&lt;/code&gt; to be removed                    
                </param>
            </javadoc>
            <method name="removeMenuKeyListener" type="void" line="568">
                <params>
                    <param name="l" type="MenuKeyListener"/>
                </params>
            </method>
            <javadoc line="571">
                Returns an array of all the &lt;code&gt;MenuKeyListener&lt;/code&gt;s added
                  to this JMenuItem with addMenuKeyListener().                
                <return>
                    all of the &lt;code&gt;MenuKeyListener&lt;/code&gt;s added or an empty
                      array if no listeners have been added                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getMenuKeyListeners" type="MenuKeyListener[]" line="578"/>
            <javadoc line="581">
                See JComponent.readObject() for information about serialization
                  in Swing.                
            </javadoc>
            <method name="readObject" type="void" line="585">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
                <scope line="587"/>
            </method>
            <method name="writeObject" type="void" line="591">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
                <scope line="593">
                    <declaration name="count" type="byte" line="594"/>
                    <scope line="596"/>
                </scope>
            </method>
            <javadoc line="601">
                Returns a string representation of this &lt;code&gt;JMenuItem&lt;/code&gt;.
                  This method is intended to be used only for debugging purposes,
                  and the content and format of the returned string may vary between
                  implementations. The returned string may be empty but may not
                  be &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    a string representation of this &lt;code&gt;JMenuItem&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="paramString" type="String" line="609"/>
            <javadoc line="612">
                Returns the &lt;code&gt;AccessibleContext&lt;/code&gt; associated with this
                  &lt;code&gt;JMenuItem&lt;/code&gt;. For &lt;code&gt;JMenuItem&lt;/code&gt;s,
                  the &lt;code&gt;AccessibleContext&lt;/code&gt; takes the form of an
                  &lt;code&gt;AccessibleJMenuItem&lt;/code&gt;.
                  A new AccessibleJMenuItme instance is created if necessary.                
                <return>
                    an &lt;code&gt;AccessibleJMenuItem&lt;/code&gt; that serves as the
                      &lt;code&gt;AccessibleContext&lt;/code&gt; of this &lt;code&gt;JMenuItem&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="getAccessibleContext" type="AccessibleContext" line="621">
                <scope line="622"/>
            </method>
            <class name="AccessibleJMenuItem" line="627">
                <extends class="AccessibleAbstractButton"/>
                <implements interface="ChangeListener"/>
                <javadoc line="627">
                    This class implements accessibility support for the
                      &lt;code&gt;JMenuItem&lt;/code&gt; class.  It provides an implementation of the
                      Java Accessibility API appropriate to menu item user-interface
                      elements.
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      Serialized objects of this class will not be compatible with
                      future Swing releases. The current serialization support is
                      appropriate for short term storage or RMI between applications running
                      the same version of Swing.  As of 1.4, support for long term storage
                      of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                      has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                      Please see {@link java.beans.XMLEncoder}.                    
                </javadoc>
                <declaration name="isArmed" type="boolean" line="643"/>
                <declaration name="hasFocus" type="boolean" line="644"/>
                <declaration name="isPressed" type="boolean" line="645"/>
                <declaration name="isSelected" type="boolean" line="646"/>
                <method name="AccessibleJMenuItem" type="constructor" line="647"/>
                <javadoc line="651">
                    Get the role of this object.                    
                    <return>
                        an instance of AccessibleRole describing the role of the
                          object                        
                    </return>
                </javadoc>
                <method name="getAccessibleRole" type="AccessibleRole" line="656"/>
                <method name="fireAccessibilityFocusedEvent" type="void" line="659">
                    <params>
                        <param name="toCheck" type="JMenuItem"/>
                    </params>
                    <declaration name="path" type="MenuElement[]" line="660"/>
                    <scope line="661">
                        <declaration name="menuItem" type="Object" line="662"/>
                        <scope line="663"/>
                    </scope>
                </method>
                <javadoc line="668">
                    Supports the change listener interface and fires property changes.                    
                </javadoc>
                <method name="stateChanged" type="void" line="671">
                    <params>
                        <param name="e" type="ChangeEvent"/>
                    </params>
                    <scope line="673">
                        <scope line="674"/>
                    </scope>
                    <scope line="680">
                        <scope line="681"/>
                    </scope>
                    <scope line="686">
                        <scope line="687"/>
                    </scope>
                    <scope line="692">
                        <scope line="693"/>
                    </scope>
                    <scope line="698">
                        <scope line="699"/>
                    </scope>
                    <scope line="704">
                        <scope line="705"/>
                    </scope>
                    <scope line="710">
                        <scope line="711"/>
                    </scope>
                    <scope line="717">
                        <scope line="718"/>
                    </scope>
                </method>
            </class>
        </class>
    </source>