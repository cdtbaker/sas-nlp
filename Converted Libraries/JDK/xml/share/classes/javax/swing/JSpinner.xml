<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="javax.swing.event"/>
        <import package="javax.swing.text"/>
        <import package="javax.swing.plaf.SpinnerUI"/>
        <import package="java.util"/>
        <import package="java.beans"/>
        <import package="java.text"/>
        <import package="java.io"/>
        <import package="java.util.HashMap"/>
        <import package="sun.util.resources.LocaleData"/>
        <import package="javax.accessibility"/>
        <class name="JSpinner" line="14">
            <extends class="JComponent"/>
            <implements interface="Accessible"/>
            <javadoc line="14">
                A single line input field that lets the user select a
                  number or an object value from an ordered sequence. Spinners typically
                  provide a pair of tiny arrow buttons for stepping through the elements
                  of the sequence. The keyboard up/down arrow keys also cycle through the
                  elements. The user may also be allowed to type a (legal) value directly
                  into the spinner. Although combo boxes provide similar functionality,
                  spinners are sometimes preferred because they don&apos;t require a drop down list
                  that can obscure important data.
                  &lt;p&gt;
                  A &lt;code&gt;JSpinner&lt;/code&gt;&apos;s sequence value is defined by its
                  &lt;code&gt;SpinnerModel&lt;/code&gt;.
                  The &lt;code&gt;model&lt;/code&gt; can be specified as a constructor argument and
                  changed with the &lt;code&gt;model&lt;/code&gt; property.  &lt;code&gt;SpinnerModel&lt;/code&gt;
                  classes for some common types are provided: &lt;code&gt;SpinnerListModel&lt;/code&gt;,
                  &lt;code&gt;SpinnerNumberModel&lt;/code&gt;, and &lt;code&gt;SpinnerDateModel&lt;/code&gt;.
                  &lt;p&gt;
                  A &lt;code&gt;JSpinner&lt;/code&gt; has a single child component that&apos;s
                  responsible for displaying
                  and potentially changing the current element or &lt;i&gt;value&lt;/i&gt; of
                  the model, which is called the &lt;code&gt;editor&lt;/code&gt;.  The editor is created
                  by the &lt;code&gt;JSpinner&lt;/code&gt;&apos;s constructor and can be changed with the
                  &lt;code&gt;editor&lt;/code&gt; property.  The &lt;code&gt;JSpinner&lt;/code&gt;&apos;s editor stays
                  in sync with the model by listening for &lt;code&gt;ChangeEvent&lt;/code&gt;s. If the
                  user has changed the value displayed by the &lt;code&gt;editor&lt;/code&gt; it is
                  possible for the &lt;code&gt;model&lt;/code&gt;&apos;s value to differ from that of
                  the &lt;code&gt;editor&lt;/code&gt;. To make sure the &lt;code&gt;model&lt;/code&gt; has the same
                  value as the editor use the &lt;code&gt;commitEdit&lt;/code&gt; method, eg:
                  &lt;pre&gt;
                  try {
                  spinner.commitEdit();
                  }
                  catch (ParseException pe) {{
                  // Edited value is invalid, spinner.getValue() will return
                  // the last valid value, you could revert the spinner to show that:
                  JComponent editor = spinner.getEditor()
                  if (editor instanceof DefaultEditor) {
                  ((DefaultEditor)editor).getTextField().setValue(spinner.getValue();
                  }
                  // reset the value to some known value:
                  spinner.setValue(fallbackValue);
                  // or treat the last valid value as the current, in which
                  // case you don&apos;t need to do anything.
                  }
                  return spinner.getValue();
                  &lt;/pre&gt;
                  &lt;p&gt;
                  For information and examples of using spinner see
                  &lt;a href=&quot;http://java.sun.com/doc/books/tutorial/uiswing/components/spinner.html&quot;&gt;How to Use Spinners&lt;/a&gt;,
                  a section in &lt;em&gt;The Java Tutorial.&lt;/em&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt; Swing is not thread safe. For more
                  information see &lt;a
                  href=&quot;package-summary.html#threading&quot;&gt;Swing&apos;s Threading
                  Policy&lt;/a&gt;.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <beaninfoattribute>
                    : isContainer false
                      description: A single line input field that lets the user select a
                      number or an object value from an ordered set.                    
                </beaninfoattribute>
                <see>
                    SpinnerModel                    
                </see>
                <see>
                    AbstractSpinnerModel                    
                </see>
                <see>
                    SpinnerListModel                    
                </see>
                <see>
                    SpinnerNumberModel                    
                </see>
                <see>
                    SpinnerDateModel                    
                </see>
                <see>
                    JFormattedTextField                    
                </see>
                <author>
                    Hans Muller                    
                </author>
                <author>
                    Lynn Monsanto (accessibility)                    
                </author>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="uiClassID" type="String" line="92"/>
            <javadoc line="92">
                @see #getUIClassID                
                <see>
                    #readObject                    
                </see>
            </javadoc>
            <declaration name="DISABLED_ACTION" type="Action" line="97"/>
            <declaration name="model" type="SpinnerModel" line="98"/>
            <declaration name="editor" type="JComponent" line="99"/>
            <declaration name="modelListener" type="ChangeListener" line="100"/>
            <declaration name="changeEvent" type="ChangeEvent" line="101"/>
            <declaration name="editorExplicitlySet" type="boolean" line="102"/>
            <javadoc line="103">
                Constructs a spinner for the given model. The spinner has
                  a set of previous/next buttons, and an editor appropriate
                  for the model.                
                <throws>
                    NullPointerException if the model is {@code null}                    
                </throws>
            </javadoc>
            <method name="JSpinner" type="constructor" line="109">
                <params>
                    <param name="model" type="SpinnerModel"/>
                </params>
                <scope line="110"/>
            </method>
            <javadoc line="118">
                Constructs a spinner with an &lt;code&gt;Integer SpinnerNumberModel&lt;/code&gt;
                  with initial value 0 and no minimum or maximum limits.                
            </javadoc>
            <method name="JSpinner" type="constructor" line="122"/>
            <javadoc line="125">
                Returns the look and feel (L&amp;F) object that renders this component.                
                <return>
                    the <code>SpinnerUI</code> object that renders this component                    
                </return>
            </javadoc>
            <method name="getUI" type="SpinnerUI" line="129"/>
            <javadoc line="132">
                Sets the look and feel (L&amp;F) object that renders this component.                
                <param>
                    ui  the <code>SpinnerUI</code> L&F object                    
                </param>
                <see>
                    UIDefaults#getUI                    
                </see>
            </javadoc>
            <method name="setUI" type="void" line="137">
                <params>
                    <param name="ui" type="SpinnerUI"/>
                </params>
            </method>
            <javadoc line="140">
                Returns the suffix used to construct the name of the look and feel
                  (L&amp;F) class used to render this component.                
                <return>
                    the string "SpinnerUI"                    
                </return>
                <see>
                    JComponent#getUIClassID                    
                </see>
                <see>
                    UIDefaults#getUI                    
                </see>
            </javadoc>
            <method name="getUIClassID" type="String" line="147"/>
            <javadoc line="150">
                Resets the UI property with the value from the current look and feel.                
                <see>
                    UIManager#getUI                    
                </see>
            </javadoc>
            <method name="updateUI" type="void" line="154"/>
            <javadoc line="158">
                This method is called by the constructors to create the
                  &lt;code&gt;JComponent&lt;/code&gt;
                  that displays the current value of the sequence.  The editor may
                  also allow the user to enter an element of the sequence directly.
                  An editor must listen for &lt;code&gt;ChangeEvents&lt;/code&gt; on the
                  &lt;code&gt;model&lt;/code&gt; and keep the value it displays
                  in sync with the value of the model.
                  &lt;p&gt;
                  Subclasses may override this method to add support for new
                  &lt;code&gt;SpinnerModel&lt;/code&gt; classes.  Alternatively one can just
                  replace the editor created here with the &lt;code&gt;setEditor&lt;/code&gt;
                  method.  The default mapping from model type to editor is:
                  &lt;ul&gt;
                  &lt;li&gt; &lt;code&gt;SpinnerNumberModel =&amp;gt; JSpinner.NumberEditor&lt;/code&gt;
                  &lt;li&gt; &lt;code&gt;SpinnerDateModel =&amp;gt; JSpinner.DateEditor&lt;/code&gt;
                  &lt;li&gt; &lt;code&gt;SpinnerListModel =&amp;gt; JSpinner.ListEditor&lt;/code&gt;
                  &lt;li&gt; &lt;i&gt;all others&lt;/i&gt; =&amp;gt; &lt;code&gt;JSpinner.DefaultEditor&lt;/code&gt;
                  &lt;/ul&gt;                
                <return>
                    a component that displays the current value of the sequence                    
                </return>
                <param>
                    model the value of getModel                    
                </param>
                <see>
                    #getModel                    
                </see>
                <see>
                    #setEditor                    
                </see>
            </javadoc>
            <method name="createEditor" type="JComponent" line="182">
                <params>
                    <param name="model" type="SpinnerModel"/>
                </params>
                <scope line="183"/>
                <scope line="186"/>
                <scope line="189"/>
                <scope line="192"/>
            </method>
            <javadoc line="196">
                Changes the model that represents the value of this spinner.
                  If the editor property has not been explicitly set,
                  the editor property is (implicitly) set after the &lt;code&gt;&quot;model&quot;&lt;/code&gt;
                  &lt;code&gt;PropertyChangeEvent&lt;/code&gt; has been fired.  The editor
                  property is set to the value returned by &lt;code&gt;createEditor&lt;/code&gt;,
                  as in:
                  &lt;pre&gt;
                  setEditor(createEditor(model));
                  &lt;/pre&gt;                
                <param>
                    model the new <code>SpinnerModel</code>                    
                </param>
                <see>
                    #getModel                    
                </see>
                <see>
                    #getEditor                    
                </see>
                <see>
                    #setEditor                    
                </see>
                <throws>
                    IllegalArgumentException if model is <code>null</code>                    
                </throws>
                <beaninfobound>
                    : true
                      attribute: visualUpdate true
                      description: Model that represents the value of this spinner.                    
                </beaninfobound>
            </javadoc>
            <method name="setModel" type="void" line="215">
                <params>
                    <param name="model" type="SpinnerModel"/>
                </params>
                <scope line="216"/>
                <scope line="219">
                    <declaration name="oldModel" type="SpinnerModel" line="220"/>
                    <scope line="222"/>
                    <scope line="227"/>
                </scope>
            </method>
            <javadoc line="235">
                Returns the &lt;code&gt;SpinnerModel&lt;/code&gt; that defines
                  this spinners sequence of values.                
                <return>
                    the value of the model property                    
                </return>
                <see>
                    #setModel                    
                </see>
            </javadoc>
            <method name="getModel" type="SpinnerModel" line="241"/>
            <javadoc line="244">
                Returns the current value of the model, typically
                  this value is displayed by the &lt;code&gt;editor&lt;/code&gt;. If the
                  user has changed the value displayed by the &lt;code&gt;editor&lt;/code&gt; it is
                  possible for the &lt;code&gt;model&lt;/code&gt;&apos;s value to differ from that of
                  the &lt;code&gt;editor&lt;/code&gt;, refer to the class level javadoc for examples
                  of how to deal with this.
                  &lt;p&gt;
                  This method simply delegates to the &lt;code&gt;model&lt;/code&gt;.
                  It is equivalent to:
                  &lt;pre&gt;
                  getModel().getValue()
                  &lt;/pre&gt;                
                <see>
                    #setValue                    
                </see>
                <see>
                    SpinnerModel#getValue                    
                </see>
            </javadoc>
            <method name="getValue" type="Object" line="260"/>
            <javadoc line="263">
                Changes current value of the model, typically
                  this value is displayed by the &lt;code&gt;editor&lt;/code&gt;.
                  If the &lt;code&gt;SpinnerModel&lt;/code&gt; implementation
                  doesn&apos;t support the specified value then an
                  &lt;code&gt;IllegalArgumentException&lt;/code&gt; is thrown.
                  &lt;p&gt;
                  This method simply delegates to the &lt;code&gt;model&lt;/code&gt;.
                  It is equivalent to:
                  &lt;pre&gt;
                  getModel().setValue(value)
                  &lt;/pre&gt;                
                <throws>
                    IllegalArgumentException if <code>value</code> isn't allowed                    
                </throws>
                <see>
                    #getValue                    
                </see>
                <see>
                    SpinnerModel#setValue                    
                </see>
            </javadoc>
            <method name="setValue" type="void" line="279">
                <params>
                    <param name="value" type="Object"/>
                </params>
            </method>
            <javadoc line="282">
                Returns the object in the sequence that comes after the object returned
                  by &lt;code&gt;getValue()&lt;/code&gt;. If the end of the sequence has been reached
                  then return &lt;code&gt;null&lt;/code&gt;.
                  Calling this method does not effect &lt;code&gt;value&lt;/code&gt;.
                  &lt;p&gt;
                  This method simply delegates to the &lt;code&gt;model&lt;/code&gt;.
                  It is equivalent to:
                  &lt;pre&gt;
                  getModel().getNextValue()
                  &lt;/pre&gt;                
                <return>
                    the next legal value or <code>null</code> if one doesn't exist                    
                </return>
                <see>
                    #getValue                    
                </see>
                <see>
                    #getPreviousValue                    
                </see>
                <see>
                    SpinnerModel#getNextValue                    
                </see>
            </javadoc>
            <method name="getNextValue" type="Object" line="298"/>
            <class name="ModelListener" line="301">
                <implements interface="ChangeListener"/>
                <implements interface="Serializable"/>
                <javadoc line="301">
                    We pass &lt;code&gt;Change&lt;/code&gt; events along to the listeners with the
                      the slider (instead of the model itself) as the event source.                    
                </javadoc>
                <method name="stateChanged" type="void" line="306">
                    <params>
                        <param name="e" type="ChangeEvent"/>
                    </params>
                </method>
            </class>
            <javadoc line="310">
                Adds a listener to the list that is notified each time a change
                  to the model occurs.  The source of &lt;code&gt;ChangeEvents&lt;/code&gt;
                  delivered to &lt;code&gt;ChangeListeners&lt;/code&gt; will be this
                  &lt;code&gt;JSpinner&lt;/code&gt;.  Note also that replacing the model
                  will not affect listeners added directly to JSpinner.
                  Applications can add listeners to  the model directly.  In that
                  case is that the source of the event would be the
                  &lt;code&gt;SpinnerModel&lt;/code&gt;.                
                <param>
                    listener the <code>ChangeListener</code> to add                    
                </param>
                <see>
                    #removeChangeListener                    
                </see>
                <see>
                    #getModel                    
                </see>
            </javadoc>
            <method name="addChangeListener" type="void" line="323">
                <params>
                    <param name="listener" type="ChangeListener"/>
                </params>
                <scope line="324"/>
            </method>
            <javadoc line="330">
                Removes a &lt;code&gt;ChangeListener&lt;/code&gt; from this spinner.                
                <param>
                    listener the <code>ChangeListener</code> to remove                    
                </param>
                <see>
                    #fireStateChanged                    
                </see>
                <see>
                    #addChangeListener                    
                </see>
            </javadoc>
            <method name="removeChangeListener" type="void" line="336">
                <params>
                    <param name="listener" type="ChangeListener"/>
                </params>
            </method>
            <javadoc line="339">
                Returns an array of all the &lt;code&gt;ChangeListener&lt;/code&gt;s added
                  to this JSpinner with addChangeListener().                
                <return>
                    all of the <code>ChangeListener</code>s added or an empty
                      array if no listeners have been added                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getChangeListeners" type="ChangeListener[]" line="346"/>
            <javadoc line="349">
                Sends a &lt;code&gt;ChangeEvent&lt;/code&gt;, whose source is this
                  &lt;code&gt;JSpinner&lt;/code&gt;, to each &lt;code&gt;ChangeListener&lt;/code&gt;.
                  When a &lt;code&gt;ChangeListener&lt;/code&gt; has been added
                  to the spinner, this method method is called each time
                  a &lt;code&gt;ChangeEvent&lt;/code&gt; is received from the model.                
                <see>
                    #addChangeListener                    
                </see>
                <see>
                    #removeChangeListener                    
                </see>
                <see>
                    EventListenerList                    
                </see>
            </javadoc>
            <method name="fireStateChanged" type="void" line="359">
                <declaration name="listeners" type="Object[]" line="360"/>
                <scope line="361">
                    <scope line="362">
                        <scope line="363"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="370">
                Returns the object in the sequence that comes
                  before the object returned by &lt;code&gt;getValue()&lt;/code&gt;.
                  If the end of the sequence has been reached then
                  return &lt;code&gt;null&lt;/code&gt;. Calling this method does
                  not effect &lt;code&gt;value&lt;/code&gt;.
                  &lt;p&gt;
                  This method simply delegates to the &lt;code&gt;model&lt;/code&gt;.
                  It is equivalent to:
                  &lt;pre&gt;
                  getModel().getPreviousValue()
                  &lt;/pre&gt;                
                <return>
                    the previous legal value or <code>null</code>
                      if one doesn't exist                    
                </return>
                <see>
                    #getValue                    
                </see>
                <see>
                    #getNextValue                    
                </see>
                <see>
                    SpinnerModel#getPreviousValue                    
                </see>
            </javadoc>
            <method name="getPreviousValue" type="Object" line="388"/>
            <javadoc line="391">
                Changes the &lt;code&gt;JComponent&lt;/code&gt; that displays the current value
                  of the &lt;code&gt;SpinnerModel&lt;/code&gt;.  It is the responsibility of this
                  method to &lt;i&gt;disconnect&lt;/i&gt; the old editor from the model and to
                  connect the new editor.  This may mean removing the
                  old editors &lt;code&gt;ChangeListener&lt;/code&gt; from the model or the
                  spinner itself and adding one for the new editor.                
                <param>
                    editor the new editor                    
                </param>
                <see>
                    #getEditor                    
                </see>
                <see>
                    #createEditor                    
                </see>
                <see>
                    #getModel                    
                </see>
                <throws>
                    IllegalArgumentException if editor is <code>null</code>                    
                </throws>
                <beaninfobound>
                    : true
                      attribute: visualUpdate true
                      description: JComponent that displays the current value of the model                    
                </beaninfobound>
            </javadoc>
            <method name="setEditor" type="void" line="407">
                <params>
                    <param name="editor" type="JComponent"/>
                </params>
                <scope line="408"/>
                <scope line="411">
                    <declaration name="oldEditor" type="JComponent" line="412"/>
                    <scope line="414"/>
                </scope>
            </method>
            <javadoc line="423">
                Returns the component that displays and potentially
                  changes the model&apos;s value.                
                <return>
                    the component that displays and potentially
                      changes the model's value                    
                </return>
                <see>
                    #setEditor                    
                </see>
                <see>
                    #createEditor                    
                </see>
            </javadoc>
            <method name="getEditor" type="JComponent" line="431"/>
            <javadoc line="434">
                Commits the currently edited value to the &lt;code&gt;SpinnerModel&lt;/code&gt;.
                  &lt;p&gt;
                  If the editor is an instance of &lt;code&gt;DefaultEditor&lt;/code&gt;, the
                  call if forwarded to the editor, otherwise this does nothing.                
                <throws>
                    ParseException if the currently edited value couldn't
                      be commited.                    
                </throws>
            </javadoc>
            <method name="commitEdit" type="void" line="442">
                <declaration name="editor" type="JComponent" line="443"/>
                <scope line="444"/>
            </method>
            <method name="writeObject" type="void" line="448">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
                <scope line="450">
                    <declaration name="count" type="byte" line="451"/>
                    <scope line="453"/>
                </scope>
            </method>
            <class name="DefaultEditor" line="458">
                <extends class="JPanel"/>
                <implements interface="ChangeListener"/>
                <implements interface="PropertyChangeListener"/>
                <implements interface="LayoutManager"/>
                <javadoc line="458">
                    A simple base class for more specialized editors
                      that displays a read-only view of the model&apos;s current
                      value with a &lt;code&gt;JFormattedTextField&lt;/code&gt;.  Subclasses
                      can configure the &lt;code&gt;JFormattedTextField&lt;/code&gt; to create
                      an editor that&apos;s appropriate for the type of model they
                      support and they may want to override
                      the &lt;code&gt;stateChanged&lt;/code&gt; and &lt;code&gt;propertyChanged&lt;/code&gt;
                      methods, which keep the model and the text field in sync.
                      &lt;p&gt;
                      This class defines a &lt;code&gt;dismiss&lt;/code&gt; method that removes the
                      editors &lt;code&gt;ChangeListener&lt;/code&gt; from the &lt;code&gt;JSpinner&lt;/code&gt;
                      that it&apos;s part of.   The &lt;code&gt;setEditor&lt;/code&gt; method knows about
                      &lt;code&gt;DefaultEditor.dismiss&lt;/code&gt;, so if the developer
                      replaces an editor that&apos;s derived from &lt;code&gt;JSpinner.DefaultEditor&lt;/code&gt;
                      its &lt;code&gt;ChangeListener&lt;/code&gt; connection back to the
                      &lt;code&gt;JSpinner&lt;/code&gt; will be removed.  However after that,
                      it&apos;s up to the developer to manage their editor listeners.
                      Similarly, if a subclass overrides &lt;code&gt;createEditor&lt;/code&gt;,
                      it&apos;s up to the subclasser to deal with their editor
                      subsequently being replaced (with &lt;code&gt;setEditor&lt;/code&gt;).
                      We expect that in most cases, and in editor installed
                      with &lt;code&gt;setEditor&lt;/code&gt; or created by a &lt;code&gt;createEditor&lt;/code&gt;
                      override, will not be replaced anyway.
                      &lt;p&gt;
                      This class is the &lt;code&gt;LayoutManager&lt;/code&gt; for it&apos;s single
                      &lt;code&gt;JFormattedTextField&lt;/code&gt; child.   By default the
                      child is just centered with the parents insets.                    
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <javadoc line="489">
                    Constructs an editor component for the specified &lt;code&gt;JSpinner&lt;/code&gt;.
                      This &lt;code&gt;DefaultEditor&lt;/code&gt; is it&apos;s own layout manager and
                      it is added to the spinner&apos;s &lt;code&gt;ChangeListener&lt;/code&gt; list.
                      The constructor creates a single &lt;code&gt;JFormattedTextField&lt;/code&gt; child,
                      initializes it&apos;s value to be the spinner model&apos;s current value
                      and adds it to &lt;code&gt;this&lt;/code&gt; &lt;code&gt;DefaultEditor&lt;/code&gt;.                    
                    <param>
                        spinner the spinner whose model <code>this</code> editor will monitor                        
                    </param>
                    <see>
                        #getTextField                        
                    </see>
                    <see>
                        JSpinner#addChangeListener                        
                    </see>
                </javadoc>
                <method name="DefaultEditor" type="constructor" line="500">
                    <params>
                        <param name="spinner" type="JSpinner"/>
                    </params>
                    <declaration name="ftf" type="JFormattedTextField" line="502"/>
                    <declaration name="toolTipText" type="String" line="508"/>
                    <scope line="509"/>
                    <declaration name="ftfMap" type="ActionMap" line="515"/>
                    <scope line="516"/>
                </method>
                <javadoc line="521">
                    Disconnect &lt;code&gt;this&lt;/code&gt; editor from the specified
                      &lt;code&gt;JSpinner&lt;/code&gt;.  By default, this method removes
                      itself from the spinners &lt;code&gt;ChangeListener&lt;/code&gt; list.                    
                    <param>
                        spinner the <code>JSpinner</code> to disconnect this
                          editor from; the same spinner as was passed to the constructor.                        
                    </param>
                </javadoc>
                <method name="dismiss" type="void" line="528">
                    <params>
                        <param name="spinner" type="JSpinner"/>
                    </params>
                </method>
                <javadoc line="531">
                    Returns the &lt;code&gt;JSpinner&lt;/code&gt; ancestor of this editor or
                      &lt;code&gt;null&lt;/code&gt; if none of the ancestors are a
                      &lt;code&gt;JSpinner&lt;/code&gt;.
                      Typically the editor&apos;s parent is a &lt;code&gt;JSpinner&lt;/code&gt; however
                      subclasses of &lt;code&gt;JSpinner&lt;/code&gt; may override the
                      the &lt;code&gt;createEditor&lt;/code&gt; method and insert one or more containers
                      between the &lt;code&gt;JSpinner&lt;/code&gt; and it&apos;s editor.                    
                    <return>
                        <code>JSpinner</code> ancestor; <code>null</code>
                          if none of the ancestors are a <code>JSpinner</code>                        
                    </return>
                    <see>
                        JSpinner#createEditor                        
                    </see>
                </javadoc>
                <method name="getSpinner" type="JSpinner" line="543">
                    <scope line="544">
                        <scope line="545"/>
                    </scope>
                </method>
                <javadoc line="551">
                    Returns the &lt;code&gt;JFormattedTextField&lt;/code&gt; child of this
                      editor.  By default the text field is the first and only
                      child of editor.                    
                    <return>
                        the <code>JFormattedTextField</code> that gives the user
                          access to the <code>SpinnerDateModel's</code> value.                        
                    </return>
                    <see>
                        #getSpinner                        
                    </see>
                    <see>
                        #getModel                        
                    </see>
                </javadoc>
                <method name="getTextField" type="JFormattedTextField" line="560"/>
                <javadoc line="563">
                    This method is called when the spinner&apos;s model&apos;s state changes.
                      It sets the &lt;code&gt;value&lt;/code&gt; of the text field to the current
                      value of the spinners model.                    
                    <param>
                        e the <code>ChangeEvent</code> whose source is the
                          <code>JSpinner</code> whose model has changed.                        
                    </param>
                    <see>
                        #getTextField                        
                    </see>
                    <see>
                        JSpinner#getValue                        
                    </see>
                </javadoc>
                <method name="stateChanged" type="void" line="572">
                    <params>
                        <param name="e" type="ChangeEvent"/>
                    </params>
                    <declaration name="spinner" type="JSpinner" line="573"/>
                </method>
                <javadoc line="576">
                    Called by the &lt;code&gt;JFormattedTextField&lt;/code&gt;
                      &lt;code&gt;PropertyChangeListener&lt;/code&gt;.  When the &lt;code&gt;&quot;value&quot;&lt;/code&gt;
                      property changes, which implies that the user has typed a new
                      number, we set the value of the spinners model.
                      &lt;p&gt;
                      This class ignores &lt;code&gt;PropertyChangeEvents&lt;/code&gt; whose
                      source is not the &lt;code&gt;JFormattedTextField&lt;/code&gt;, so subclasses
                      may safely make &lt;code&gt;this&lt;/code&gt; &lt;code&gt;DefaultEditor&lt;/code&gt; a
                      &lt;code&gt;PropertyChangeListener&lt;/code&gt; on other objects.                    
                    <param>
                        e the <code>PropertyChangeEvent</code> whose source is
                          the <code>JFormattedTextField</code> created by this class.                        
                    </param>
                    <see>
                        #getTextField                        
                    </see>
                </javadoc>
                <method name="propertyChange" type="void" line="590">
                    <params>
                        <param name="e" type="PropertyChangeEvent"/>
                    </params>
                    <declaration name="spinner" type="JSpinner" line="591"/>
                    <scope line="592"/>
                    <declaration name="source" type="Object" line="595"/>
                    <declaration name="name" type="String" line="596"/>
                    <scope line="597">
                        <declaration name="lastValue" type="Object" line="598"/>
                        <scope line="599"/>
                        <scope line="602">
                            <scope line="603"/>
                            <scope line="606"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="611">
                    This &lt;code&gt;LayoutManager&lt;/code&gt; method does nothing.  We&apos;re
                      only managing a single child and there&apos;s no support
                      for layout constraints.                    
                    <param>
                        name ignored                        
                    </param>
                    <param>
                        child ignored                        
                    </param>
                </javadoc>
                <method name="addLayoutComponent" type="void" line="618">
                    <params>
                        <param name="name" type="String"/>
                        <param name="child" type="Component"/>
                    </params>
                </method>
                <javadoc line="620">
                    This &lt;code&gt;LayoutManager&lt;/code&gt; method does nothing.  There
                      isn&apos;t any per-child state.                    
                    <param>
                        child ignored                        
                    </param>
                </javadoc>
                <method name="removeLayoutComponent" type="void" line="625">
                    <params>
                        <param name="child" type="Component"/>
                    </params>
                </method>
                <javadoc line="627">
                    Returns the size of the parents insets.                    
                </javadoc>
                <method name="insetSize" type="Dimension" line="630">
                    <params>
                        <param name="parent" type="Container"/>
                    </params>
                    <declaration name="insets" type="Insets" line="631"/>
                    <declaration name="w" type="int" line="632"/>
                    <declaration name="h" type="int" line="633"/>
                </method>
                <javadoc line="636">
                    Returns the preferred size of first (and only) child plus the
                      size of the parents insets.                    
                    <param>
                        parent the Container that's managing the layout                        
                    </param>
                    <return>
                        the preferred dimensions to lay out the subcomponents
                          of the specified container.                        
                    </return>
                </javadoc>
                <method name="preferredLayoutSize" type="Dimension" line="643">
                    <params>
                        <param name="parent" type="Container"/>
                    </params>
                    <declaration name="preferredSize" type="Dimension" line="644"/>
                    <scope line="645">
                        <declaration name="childSize" type="Dimension" line="646"/>
                    </scope>
                </method>
                <javadoc line="652">
                    Returns the minimum size of first (and only) child plus the
                      size of the parents insets.                    
                    <param>
                        parent the Container that's managing the layout                        
                    </param>
                    <return>
                        the minimum dimensions needed to lay out the subcomponents
                          of the specified container.                        
                    </return>
                </javadoc>
                <method name="minimumLayoutSize" type="Dimension" line="659">
                    <params>
                        <param name="parent" type="Container"/>
                    </params>
                    <declaration name="minimumSize" type="Dimension" line="660"/>
                    <scope line="661">
                        <declaration name="childSize" type="Dimension" line="662"/>
                    </scope>
                </method>
                <javadoc line="668">
                    Resize the one (and only) child to completely fill the area
                      within the parents insets.                    
                </javadoc>
                <method name="layoutContainer" type="void" line="672">
                    <params>
                        <param name="parent" type="Container"/>
                    </params>
                    <scope line="673">
                        <declaration name="insets" type="Insets" line="674"/>
                        <declaration name="w" type="int" line="675"/>
                        <declaration name="h" type="int" line="676"/>
                    </scope>
                </method>
                <javadoc line="680">
                    Pushes the currently edited value to the &lt;code&gt;SpinnerModel&lt;/code&gt;.
                      &lt;p&gt;
                      The default implementation invokes &lt;code&gt;commitEdit&lt;/code&gt; on the
                      &lt;code&gt;JFormattedTextField&lt;/code&gt;.                    
                    <throws>
                        ParseException if the edited value is not legal                        
                    </throws>
                </javadoc>
                <method name="commitEdit" type="void" line="687">
                    <declaration name="ftf" type="JFormattedTextField" line="688"/>
                </method>
                <javadoc line="691">
                    Returns the baseline.                    
                    <throws>
                        IllegalArgumentException {@inheritDoc}                        
                    </throws>
                    <see>
                        javax.swing.JComponent#getBaseline(int,int)                        
                    </see>
                    <see>
                        javax.swing.JComponent#getBaselineResizeBehavior()                        
                    </see>
                    <since>
                        1.6                        
                    </since>
                </javadoc>
                <method name="getBaseline" type="int" line="698">
                    <params>
                        <param name="width" type="int"/>
                        <param name="height" type="int"/>
                    </params>
                    <declaration name="insets" type="Insets" line="700"/>
                    <declaration name="baseline" type="int" line="703"/>
                    <scope line="704"/>
                </method>
                <javadoc line="709">
                    Returns an enum indicating how the baseline of the component
                      changes as the size changes.                    
                    <throws>
                        NullPointerException {@inheritDoc}                        
                    </throws>
                    <see>
                        javax.swing.JComponent#getBaseline(int,int)                        
                    </see>
                    <since>
                        1.6                        
                    </since>
                </javadoc>
                <method name="getBaselineResizeBehavior" type="BaselineResizeBehavior" line="716"/>
            </class>
            <class name="DateEditorFormatter" line="720">
                <extends class="DateFormatter"/>
                <javadoc line="720">
                    This subclass of javax.swing.DateFormatter maps the minimum/maximum
                      properties to te start/end properties of a SpinnerDateModel.                    
                </javadoc>
                <declaration name="model" type="SpinnerDateModel" line="725"/>
                <method name="DateEditorFormatter" type="constructor" line="726">
                    <params>
                        <param name="model" type="SpinnerDateModel"/>
                        <param name="format" type="DateFormat"/>
                    </params>
                </method>
                <method name="setMinimum" type="void" line="730">
                    <params>
                        <param name="min" type="Comparable"/>
                    </params>
                </method>
                <method name="getMinimum" type="Comparable" line="733"/>
                <method name="setMaximum" type="void" line="736">
                    <params>
                        <param name="max" type="Comparable"/>
                    </params>
                </method>
                <method name="getMaximum" type="Comparable" line="739"/>
            </class>
            <class name="DateEditor" line="743">
                <extends class="DefaultEditor"/>
                <javadoc line="743">
                    An editor for a &lt;code&gt;JSpinner&lt;/code&gt; whose model is a
                      &lt;code&gt;SpinnerDateModel&lt;/code&gt;.  The value of the editor is
                      displayed with a &lt;code&gt;JFormattedTextField&lt;/code&gt; whose format
                      is defined by a &lt;code&gt;DateFormatter&lt;/code&gt; instance whose
                      &lt;code&gt;minimum&lt;/code&gt; and &lt;code&gt;maximum&lt;/code&gt; properties
                      are mapped to the &lt;code&gt;SpinnerDateModel&lt;/code&gt;.                    
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <method name="getDefaultPattern" type="String" line="753">
                    <params>
                        <param name="loc" type="Locale"/>
                    </params>
                    <declaration name="r" type="ResourceBundle" line="754"/>
                    <declaration name="dateTimePatterns" type="String[]" line="755"/>
                    <declaration name="dateTimeArgs" type="Object[]" line="756"/>
                </method>
                <javadoc line="759">
                    Construct a &lt;code&gt;JSpinner&lt;/code&gt; editor that supports displaying
                      and editing the value of a &lt;code&gt;SpinnerDateModel&lt;/code&gt;
                      with a &lt;code&gt;JFormattedTextField&lt;/code&gt;.  &lt;code&gt;This&lt;/code&gt;
                      &lt;code&gt;DateEditor&lt;/code&gt; becomes both a &lt;code&gt;ChangeListener&lt;/code&gt;
                      on the spinners model and a &lt;code&gt;PropertyChangeListener&lt;/code&gt;
                      on the new &lt;code&gt;JFormattedTextField&lt;/code&gt;.                    
                    <param>
                        spinner the spinner whose model <code>this</code> editor will monitor                        
                    </param>
                    <exception>
                        IllegalArgumentException if the spinners model is not
                          an instance of <code>SpinnerDateModel</code>                        
                    </exception>
                    <see>
                        #getModel                        
                    </see>
                    <see>
                        #getFormat                        
                    </see>
                    <see>
                        SpinnerDateModel                        
                    </see>
                </javadoc>
                <method name="DateEditor" type="constructor" line="773">
                    <params>
                        <param name="spinner" type="JSpinner"/>
                    </params>
                </method>
                <javadoc line="776">
                    Construct a &lt;code&gt;JSpinner&lt;/code&gt; editor that supports displaying
                      and editing the value of a &lt;code&gt;SpinnerDateModel&lt;/code&gt;
                      with a &lt;code&gt;JFormattedTextField&lt;/code&gt;.  &lt;code&gt;This&lt;/code&gt;
                      &lt;code&gt;DateEditor&lt;/code&gt; becomes both a &lt;code&gt;ChangeListener&lt;/code&gt;
                      on the spinner and a &lt;code&gt;PropertyChangeListener&lt;/code&gt;
                      on the new &lt;code&gt;JFormattedTextField&lt;/code&gt;.                    
                    <param>
                        spinner the spinner whose model <code>this</code> editor will monitor                        
                    </param>
                    <param>
                        dateFormatPattern the initial pattern for the
                          <code>SimpleDateFormat</code> object that's used to display
                          and parse the value of the text field.                        
                    </param>
                    <exception>
                        IllegalArgumentException if the spinners model is not
                          an instance of <code>SpinnerDateModel</code>                        
                    </exception>
                    <see>
                        #getModel                        
                    </see>
                    <see>
                        #getFormat                        
                    </see>
                    <see>
                        SpinnerDateModel                        
                    </see>
                    <see>
                        java.text.SimpleDateFormat                        
                    </see>
                </javadoc>
                <method name="DateEditor" type="constructor" line="794">
                    <params>
                        <param name="spinner" type="JSpinner"/>
                        <param name="dateFormatPattern" type="String"/>
                    </params>
                </method>
                <javadoc line="797">
                    Construct a &lt;code&gt;JSpinner&lt;/code&gt; editor that supports displaying
                      and editing the value of a &lt;code&gt;SpinnerDateModel&lt;/code&gt;
                      with a &lt;code&gt;JFormattedTextField&lt;/code&gt;.  &lt;code&gt;This&lt;/code&gt;
                      &lt;code&gt;DateEditor&lt;/code&gt; becomes both a &lt;code&gt;ChangeListener&lt;/code&gt;
                      on the spinner and a &lt;code&gt;PropertyChangeListener&lt;/code&gt;
                      on the new &lt;code&gt;JFormattedTextField&lt;/code&gt;.                    
                    <param>
                        spinner the spinner whose model <code>this</code> editor
                          will monitor                        
                    </param>
                    <param>
                        format <code>DateFormat</code> object that's used to display
                          and parse the value of the text field.                        
                    </param>
                    <exception>
                        IllegalArgumentException if the spinners model is not
                          an instance of <code>SpinnerDateModel</code>                        
                    </exception>
                    <see>
                        #getModel                        
                    </see>
                    <see>
                        #getFormat                        
                    </see>
                    <see>
                        SpinnerDateModel                        
                    </see>
                    <see>
                        java.text.SimpleDateFormat                        
                    </see>
                </javadoc>
                <method name="DateEditor" type="constructor" line="815">
                    <params>
                        <param name="spinner" type="JSpinner"/>
                        <param name="format" type="DateFormat"/>
                    </params>
                    <scope line="817"/>
                    <declaration name="model" type="SpinnerDateModel" line="820"/>
                    <declaration name="formatter" type="DateFormatter" line="821"/>
                    <declaration name="factory" type="DefaultFormatterFactory" line="822"/>
                    <declaration name="ftf" type="JFormattedTextField" line="823"/>
                    <scope line="826">
                        <declaration name="maxString" type="String" line="827"/>
                        <declaration name="minString" type="String" line="828"/>
                    </scope>
                    <scope line="831"/>
                </method>
                <javadoc line="834">
                    Returns the &lt;code&gt;java.text.SimpleDateFormat&lt;/code&gt; object the
                      &lt;code&gt;JFormattedTextField&lt;/code&gt; uses to parse and format
                      numbers.                    
                    <return>
                        the value of <code>getTextField().getFormatter().getFormat()</code>.                        
                    </return>
                    <see>
                        #getTextField                        
                    </see>
                    <see>
                        java.text.SimpleDateFormat                        
                    </see>
                </javadoc>
                <method name="getFormat" type="SimpleDateFormat" line="842"/>
                <javadoc line="845">
                    Return our spinner ancestor&apos;s &lt;code&gt;SpinnerDateModel&lt;/code&gt;.                    
                    <return>
                        <code>getSpinner().getModel()</code>                        
                    </return>
                    <see>
                        #getSpinner                        
                    </see>
                    <see>
                        #getTextField                        
                    </see>
                </javadoc>
                <method name="getModel" type="SpinnerDateModel" line="851"/>
            </class>
            <class name="NumberEditorFormatter" line="855">
                <extends class="NumberFormatter"/>
                <javadoc line="855">
                    This subclass of javax.swing.NumberFormatter maps the minimum/maximum
                      properties to a SpinnerNumberModel and initializes the valueClass
                      of the NumberFormatter to match the type of the initial models value.                    
                </javadoc>
                <declaration name="model" type="SpinnerNumberModel" line="861"/>
                <method name="NumberEditorFormatter" type="constructor" line="862">
                    <params>
                        <param name="model" type="SpinnerNumberModel"/>
                        <param name="format" type="NumberFormat"/>
                    </params>
                </method>
                <method name="setMinimum" type="void" line="867">
                    <params>
                        <param name="min" type="Comparable"/>
                    </params>
                </method>
                <method name="getMinimum" type="Comparable" line="870"/>
                <method name="setMaximum" type="void" line="873">
                    <params>
                        <param name="max" type="Comparable"/>
                    </params>
                </method>
                <method name="getMaximum" type="Comparable" line="876"/>
            </class>
            <class name="NumberEditor" line="880">
                <extends class="DefaultEditor"/>
                <javadoc line="880">
                    An editor for a &lt;code&gt;JSpinner&lt;/code&gt; whose model is a
                      &lt;code&gt;SpinnerNumberModel&lt;/code&gt;.  The value of the editor is
                      displayed with a &lt;code&gt;JFormattedTextField&lt;/code&gt; whose format
                      is defined by a &lt;code&gt;NumberFormatter&lt;/code&gt; instance whose
                      &lt;code&gt;minimum&lt;/code&gt; and &lt;code&gt;maximum&lt;/code&gt; properties
                      are mapped to the &lt;code&gt;SpinnerNumberModel&lt;/code&gt;.                    
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <method name="getDefaultPattern" type="String" line="890">
                    <params>
                        <param name="locale" type="Locale"/>
                    </params>
                    <declaration name="rb" type="ResourceBundle" line="891"/>
                    <declaration name="all" type="String[]" line="892"/>
                </method>
                <javadoc line="895">
                    Construct a &lt;code&gt;JSpinner&lt;/code&gt; editor that supports displaying
                      and editing the value of a &lt;code&gt;SpinnerNumberModel&lt;/code&gt;
                      with a &lt;code&gt;JFormattedTextField&lt;/code&gt;.  &lt;code&gt;This&lt;/code&gt;
                      &lt;code&gt;NumberEditor&lt;/code&gt; becomes both a &lt;code&gt;ChangeListener&lt;/code&gt;
                      on the spinner and a &lt;code&gt;PropertyChangeListener&lt;/code&gt;
                      on the new &lt;code&gt;JFormattedTextField&lt;/code&gt;.                    
                    <param>
                        spinner the spinner whose model <code>this</code> editor will monitor                        
                    </param>
                    <exception>
                        IllegalArgumentException if the spinners model is not
                          an instance of <code>SpinnerNumberModel</code>                        
                    </exception>
                    <see>
                        #getModel                        
                    </see>
                    <see>
                        #getFormat                        
                    </see>
                    <see>
                        SpinnerNumberModel                        
                    </see>
                </javadoc>
                <method name="NumberEditor" type="constructor" line="909">
                    <params>
                        <param name="spinner" type="JSpinner"/>
                    </params>
                </method>
                <javadoc line="912">
                    Construct a &lt;code&gt;JSpinner&lt;/code&gt; editor that supports displaying
                      and editing the value of a &lt;code&gt;SpinnerNumberModel&lt;/code&gt;
                      with a &lt;code&gt;JFormattedTextField&lt;/code&gt;.  &lt;code&gt;This&lt;/code&gt;
                      &lt;code&gt;NumberEditor&lt;/code&gt; becomes both a &lt;code&gt;ChangeListener&lt;/code&gt;
                      on the spinner and a &lt;code&gt;PropertyChangeListener&lt;/code&gt;
                      on the new &lt;code&gt;JFormattedTextField&lt;/code&gt;.                    
                    <param>
                        spinner the spinner whose model <code>this</code> editor will monitor                        
                    </param>
                    <param>
                        decimalFormatPattern the initial pattern for the
                          <code>DecimalFormat</code> object that's used to display
                          and parse the value of the text field.                        
                    </param>
                    <exception>
                        IllegalArgumentException if the spinners model is not
                          an instance of <code>SpinnerNumberModel</code> or if
                          <code>decimalFormatPattern</code> is not a legal
                          argument to <code>DecimalFormat</code>                        
                    </exception>
                    <see>
                        #getTextField                        
                    </see>
                    <see>
                        SpinnerNumberModel                        
                    </see>
                    <see>
                        java.text.DecimalFormat                        
                    </see>
                </javadoc>
                <method name="NumberEditor" type="constructor" line="931">
                    <params>
                        <param name="spinner" type="JSpinner"/>
                        <param name="decimalFormatPattern" type="String"/>
                    </params>
                </method>
                <javadoc line="934">
                    Construct a &lt;code&gt;JSpinner&lt;/code&gt; editor that supports displaying
                      and editing the value of a &lt;code&gt;SpinnerNumberModel&lt;/code&gt;
                      with a &lt;code&gt;JFormattedTextField&lt;/code&gt;.  &lt;code&gt;This&lt;/code&gt;
                      &lt;code&gt;NumberEditor&lt;/code&gt; becomes both a &lt;code&gt;ChangeListener&lt;/code&gt;
                      on the spinner and a &lt;code&gt;PropertyChangeListener&lt;/code&gt;
                      on the new &lt;code&gt;JFormattedTextField&lt;/code&gt;.                    
                    <param>
                        spinner the spinner whose model <code>this</code> editor will monitor                        
                    </param>
                    <param>
                        decimalFormatPattern the initial pattern for the
                          <code>DecimalFormat</code> object that's used to display
                          and parse the value of the text field.                        
                    </param>
                    <exception>
                        IllegalArgumentException if the spinners model is not
                          an instance of <code>SpinnerNumberModel</code>                        
                    </exception>
                    <see>
                        #getTextField                        
                    </see>
                    <see>
                        SpinnerNumberModel                        
                    </see>
                    <see>
                        java.text.DecimalFormat                        
                    </see>
                </javadoc>
                <method name="NumberEditor" type="constructor" line="951">
                    <params>
                        <param name="spinner" type="JSpinner"/>
                        <param name="format" type="DecimalFormat"/>
                    </params>
                    <scope line="953"/>
                    <declaration name="model" type="SpinnerNumberModel" line="956"/>
                    <declaration name="formatter" type="NumberFormatter" line="957"/>
                    <declaration name="factory" type="DefaultFormatterFactory" line="958"/>
                    <declaration name="ftf" type="JFormattedTextField" line="959"/>
                    <scope line="963">
                        <declaration name="maxString" type="String" line="964"/>
                        <declaration name="minString" type="String" line="965"/>
                    </scope>
                    <scope line="968"/>
                </method>
                <javadoc line="971">
                    Returns the &lt;code&gt;java.text.DecimalFormat&lt;/code&gt; object the
                      &lt;code&gt;JFormattedTextField&lt;/code&gt; uses to parse and format
                      numbers.                    
                    <return>
                        the value of <code>getTextField().getFormatter().getFormat()</code>.                        
                    </return>
                    <see>
                        #getTextField                        
                    </see>
                    <see>
                        java.text.DecimalFormat                        
                    </see>
                </javadoc>
                <method name="getFormat" type="DecimalFormat" line="979"/>
                <javadoc line="982">
                    Return our spinner ancestor&apos;s &lt;code&gt;SpinnerNumberModel&lt;/code&gt;.                    
                    <return>
                        <code>getSpinner().getModel()</code>                        
                    </return>
                    <see>
                        #getSpinner                        
                    </see>
                    <see>
                        #getTextField                        
                    </see>
                </javadoc>
                <method name="getModel" type="SpinnerNumberModel" line="988"/>
            </class>
            <class name="ListEditor" line="992">
                <extends class="DefaultEditor"/>
                <javadoc line="992">
                    An editor for a &lt;code&gt;JSpinner&lt;/code&gt; whose model is a
                      &lt;code&gt;SpinnerListModel&lt;/code&gt;.                    
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <javadoc line="998">
                    Construct a &lt;code&gt;JSpinner&lt;/code&gt; editor that supports displaying
                      and editing the value of a &lt;code&gt;SpinnerListModel&lt;/code&gt;
                      with a &lt;code&gt;JFormattedTextField&lt;/code&gt;.  &lt;code&gt;This&lt;/code&gt;
                      &lt;code&gt;ListEditor&lt;/code&gt; becomes both a &lt;code&gt;ChangeListener&lt;/code&gt;
                      on the spinner and a &lt;code&gt;PropertyChangeListener&lt;/code&gt;
                      on the new &lt;code&gt;JFormattedTextField&lt;/code&gt;.                    
                    <param>
                        spinner the spinner whose model <code>this</code> editor will monitor                        
                    </param>
                    <exception>
                        IllegalArgumentException if the spinners model is not
                          an instance of <code>SpinnerListModel</code>                        
                    </exception>
                    <see>
                        #getModel                        
                    </see>
                    <see>
                        SpinnerListModel                        
                    </see>
                </javadoc>
                <method name="ListEditor" type="constructor" line="1011">
                    <params>
                        <param name="spinner" type="JSpinner"/>
                    </params>
                    <scope line="1013"/>
                </method>
                <javadoc line="1019">
                    Return our spinner ancestor&apos;s &lt;code&gt;SpinnerNumberModel&lt;/code&gt;.                    
                    <return>
                        <code>getSpinner().getModel()</code>                        
                    </return>
                    <see>
                        #getSpinner                        
                    </see>
                    <see>
                        #getTextField                        
                    </see>
                </javadoc>
                <method name="getModel" type="SpinnerListModel" line="1025"/>
                <class name="ListFormatter" line="1028">
                    <extends class="JFormattedTextField.AbstractFormatter"/>
                    <javadoc line="1028">
                        ListFormatter provides completion while text is being input
                          into the JFormattedTextField. Completion is only done if the
                          user is inserting text at the end of the document. Completion
                          is done by way of the SpinnerListModel method findNextMatch.                        
                    </javadoc>
                    <declaration name="filter" type="DocumentFilter" line="1035"/>
                    <method name="valueToString" type="String" line="1036">
                        <params>
                            <param name="value" type="Object"/>
                        </params>
                        <scope line="1037"/>
                    </method>
                    <method name="stringToValue" type="Object" line="1042">
                        <params>
                            <param name="string" type="String"/>
                        </params>
                    </method>
                    <method name="getDocumentFilter" type="DocumentFilter" line="1045">
                        <scope line="1046"/>
                    </method>
                    <class name="Filter" line="1051">
                        <extends class="DocumentFilter"/>
                        <method name="replace" type="void" line="1052">
                            <params>
                                <param name="fb" type="FilterBypass"/>
                                <param name="offset" type="int"/>
                                <param name="length" type="int"/>
                                <param name="string" type="String"/>
                                <param name="attrs" type="AttributeSet"/>
                            </params>
                            <scope line="1053">
                                <declaration name="next" type="Object" line="1054"/>
                                <declaration name="value" type="String" line="1055"/>
                                <scope line="1056"/>
                            </scope>
                        </method>
                        <method name="insertString" type="void" line="1065">
                            <params>
                                <param name="fb" type="FilterBypass"/>
                                <param name="offset" type="int"/>
                                <param name="string" type="String"/>
                                <param name="attr" type="AttributeSet"/>
                            </params>
                        </method>
                    </class>
                </class>
            </class>
            <class name="DisabledAction" line="1071">
                <implements interface="Action"/>
                <javadoc line="1071">
                    An Action implementation that is always disabled.                    
                </javadoc>
                <method name="getValue" type="Object" line="1075">
                    <params>
                        <param name="key" type="String"/>
                    </params>
                </method>
                <method name="putValue" type="void" line="1078">
                    <params>
                        <param name="key" type="String"/>
                        <param name="value" type="Object"/>
                    </params>
                </method>
                <method name="setEnabled" type="void" line="1080">
                    <params>
                        <param name="b" type="boolean"/>
                    </params>
                </method>
                <method name="isEnabled" type="boolean" line="1082"/>
                <method name="addPropertyChangeListener" type="void" line="1085">
                    <params>
                        <param name="l" type="PropertyChangeListener"/>
                    </params>
                </method>
                <method name="removePropertyChangeListener" type="void" line="1087">
                    <params>
                        <param name="l" type="PropertyChangeListener"/>
                    </params>
                </method>
                <method name="actionPerformed" type="void" line="1089">
                    <params>
                        <param name="ae" type="ActionEvent"/>
                    </params>
                </method>
            </class>
            <javadoc line="1092">
                Gets the &lt;code&gt;AccessibleContext&lt;/code&gt; for the &lt;code&gt;JSpinner&lt;/code&gt;                
                <return>
                    the <code>AccessibleContext</code> for the <code>JSpinner</code>                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getAccessibleContext" type="AccessibleContext" line="1097">
                <scope line="1098"/>
            </method>
            <class name="AccessibleJSpinner" line="1103">
                <extends class="AccessibleJComponent"/>
                <implements interface="AccessibleValue"/>
                <implements interface="AccessibleAction"/>
                <implements interface="AccessibleText"/>
                <implements interface="AccessibleEditableText"/>
                <implements interface="ChangeListener"/>
                <javadoc line="1103">
                    &lt;code&gt;AccessibleJSpinner&lt;/code&gt; implements accessibility
                      support for the &lt;code&gt;JSpinner&lt;/code&gt; class.                    
                    <since>
                        1.5                        
                    </since>
                </javadoc>
                <declaration name="oldModelValue" type="Object" line="1109"/>
                <javadoc line="1110">
                    AccessibleJSpinner constructor                    
                </javadoc>
                <method name="AccessibleJSpinner" type="constructor" line="1113"/>
                <javadoc line="1117">
                    Invoked when the target of the listener has changed its state.                    
                    <param>
                        e  a <code>ChangeEvent</code> object. Must not be null.                        
                    </param>
                    <throws>
                        NullPointerException if the parameter is null.                        
                    </throws>
                </javadoc>
                <method name="stateChanged" type="void" line="1122">
                    <params>
                        <param name="e" type="ChangeEvent"/>
                    </params>
                    <scope line="1123"/>
                    <declaration name="newModelValue" type="Object" line="1126"/>
                </method>
                <javadoc line="1131">
                    Gets the role of this object.  The role of the object is the generic
                      purpose or use of the class of this object.  For example, the role
                      of a push button is AccessibleRole.PUSH_BUTTON.  The roles in
                      AccessibleRole are provided so component developers can pick from
                      a set of predefined roles.  This enables assistive technologies to
                      provide a consistent interface to various tweaked subclasses of
                      components (e.g., use AccessibleRole.PUSH_BUTTON for all components
                      that act like a push button) as well as distinguish between sublasses
                      that behave differently (e.g., AccessibleRole.CHECK_BOX for check boxes
                      and AccessibleRole.RADIO_BUTTON for radio buttons).
                      &lt;p&gt;Note that the AccessibleRole class is also extensible, so
                      custom component developers can define their own AccessibleRole&apos;s
                      if the set of predefined roles is inadequate.                    
                    <return>
                        an instance of AccessibleRole describing the role of the object                        
                    </return>
                    <see>
                        AccessibleRole                        
                    </see>
                </javadoc>
                <method name="getAccessibleRole" type="AccessibleRole" line="1148"/>
                <javadoc line="1151">
                    Returns the number of accessible children of the object.                    
                    <return>
                        the number of accessible children of the object.                        
                    </return>
                </javadoc>
                <method name="getAccessibleChildrenCount" type="int" line="1155">
                    <scope line="1156"/>
                </method>
                <javadoc line="1161">
                    Returns the specified Accessible child of the object.  The Accessible
                      children of an Accessible object are zero-based, so the first child
                      of an Accessible child is at index 0, the second child is at index 1,
                      and so on.                    
                    <param>
                        i zero-based index of child                        
                    </param>
                    <return>
                        the Accessible child of the object                        
                    </return>
                    <see>
                        #getAccessibleChildrenCount                        
                    </see>
                </javadoc>
                <method name="getAccessibleChild" type="Accessible" line="1170">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                    <scope line="1171"/>
                    <scope line="1174"/>
                </method>
                <javadoc line="1179">
                    Gets the AccessibleAction associated with this object that supports
                      one or more actions.                    
                    <return>
                        AccessibleAction if supported by object; else return null                        
                    </return>
                    <see>
                        AccessibleAction                        
                    </see>
                </javadoc>
                <method name="getAccessibleAction" type="AccessibleAction" line="1185"/>
                <javadoc line="1188">
                    Gets the AccessibleText associated with this object presenting
                      text on the display.                    
                    <return>
                        AccessibleText if supported by object; else return null                        
                    </return>
                    <see>
                        AccessibleText                        
                    </see>
                </javadoc>
                <method name="getAccessibleText" type="AccessibleText" line="1194"/>
                <method name="getEditorAccessibleContext" type="AccessibleContext" line="1197">
                    <scope line="1198">
                        <declaration name="textField" type="JTextField" line="1199"/>
                        <scope line="1200"/>
                    </scope>
                    <scope line="1204"/>
                </method>
                <method name="getEditorAccessibleText" type="AccessibleText" line="1209">
                    <declaration name="ac" type="AccessibleContext" line="1210"/>
                    <scope line="1211"/>
                </method>
                <method name="getEditorAccessibleEditableText" type="AccessibleEditableText" line="1216">
                    <declaration name="at" type="AccessibleText" line="1217"/>
                    <scope line="1218"/>
                </method>
                <javadoc line="1223">
                    Gets the AccessibleValue associated with this object.                    
                    <return>
                        AccessibleValue if supported by object; else return null                        
                    </return>
                    <see>
                        AccessibleValue                        
                    </see>
                </javadoc>
                <method name="getAccessibleValue" type="AccessibleValue" line="1228"/>
                <javadoc line="1231">
                    Get the value of this object as a Number.  If the value has not been
                      set, the return value will be null.                    
                    <return>
                        value of the object                        
                    </return>
                    <see>
                        #setCurrentAccessibleValue                        
                    </see>
                </javadoc>
                <method name="getCurrentAccessibleValue" type="Number" line="1237">
                    <declaration name="o" type="Object" line="1238"/>
                    <scope line="1239"/>
                </method>
                <javadoc line="1244">
                    Set the value of this object as a Number.                    
                    <param>
                        n the value to set for this object                        
                    </param>
                    <return>
                        true if the value was set; else False                        
                    </return>
                    <see>
                        #getCurrentAccessibleValue                        
                    </see>
                </javadoc>
                <method name="setCurrentAccessibleValue" type="boolean" line="1250">
                    <params>
                        <param name="n" type="Number"/>
                    </params>
                    <scope line="1251"/>
                    <scope line="1255"/>
                </method>
                <javadoc line="1259">
                    Get the minimum value of this object as a Number.                    
                    <return>
                        Minimum value of the object; null if this object does not
                          have a minimum value                        
                    </return>
                    <see>
                        #getMaximumAccessibleValue                        
                    </see>
                </javadoc>
                <method name="getMinimumAccessibleValue" type="Number" line="1265">
                    <scope line="1266">
                        <declaration name="numberModel" type="SpinnerNumberModel" line="1267"/>
                        <declaration name="o" type="Object" line="1268"/>
                        <scope line="1269"/>
                    </scope>
                </method>
                <javadoc line="1275">
                    Get the maximum value of this object as a Number.                    
                    <return>
                        Maximum value of the object; null if this object does not
                          have a maximum value                        
                    </return>
                    <see>
                        #getMinimumAccessibleValue                        
                    </see>
                </javadoc>
                <method name="getMaximumAccessibleValue" type="Number" line="1281">
                    <scope line="1282">
                        <declaration name="numberModel" type="SpinnerNumberModel" line="1283"/>
                        <declaration name="o" type="Object" line="1284"/>
                        <scope line="1285"/>
                    </scope>
                </method>
                <javadoc line="1291">
                    Returns the number of accessible actions available in this object
                      If there are more than one, the first one is considered the &quot;default&quot;
                      action of the object.
                      Two actions are supported: AccessibleAction.INCREMENT which
                      increments the spinner value and AccessibleAction.DECREMENT
                      which decrements the spinner value                    
                    <return>
                        the zero-based number of Actions in this object                        
                    </return>
                </javadoc>
                <method name="getAccessibleActionCount" type="int" line="1300"/>
                <javadoc line="1303">
                    Returns a description of the specified action of the object.                    
                    <param>
                        i zero-based index of the actions                        
                    </param>
                    <return>
                        a String description of the action                        
                    </return>
                    <see>
                        #getAccessibleActionCount                        
                    </see>
                </javadoc>
                <method name="getAccessibleActionDescription" type="String" line="1309">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                    <scope line="1310"/>
                    <scope line="1313"/>
                </method>
                <javadoc line="1318">
                    Performs the specified Action on the object                    
                    <param>
                        i zero-based index of actions. The first action
                          (index 0) is AccessibleAction.INCREMENT and the second
                          action (index 1) is AccessibleAction.DECREMENT.                        
                    </param>
                    <return>
                        true if the action was performed; otherwise false.                        
                    </return>
                    <see>
                        #getAccessibleActionCount                        
                    </see>
                </javadoc>
                <method name="doAccessibleAction" type="boolean" line="1326">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                    <scope line="1327"/>
                    <declaration name="o" type="Object" line="1330"/>
                    <scope line="1331"/>
                    <scope line="1334"/>
                    <scope line="1337"/>
                    <scope line="1341"/>
                </method>
                <method name="sameWindowAncestor" type="boolean" line="1345">
                    <params>
                        <param name="src" type="Component"/>
                        <param name="dest" type="Component"/>
                    </params>
                    <scope line="1346"/>
                </method>
                <javadoc line="1351">
                    Given a point in local coordinates, return the zero-based index
                      of the character under that Point.  If the point is invalid,
                      this method returns -1.                    
                    <param>
                        p the Point in local coordinates                        
                    </param>
                    <return>
                        the zero-based index of the character under Point p; if
                          Point is invalid return -1.                        
                    </return>
                </javadoc>
                <method name="getIndexAtPoint" type="int" line="1359">
                    <params>
                        <param name="p" type="Point"/>
                    </params>
                    <declaration name="at" type="AccessibleText" line="1360"/>
                    <scope line="1361">
                        <declaration name="editorPoint" type="Point" line="1362"/>
                        <scope line="1363"/>
                    </scope>
                </method>
                <javadoc line="1369">
                    Determines the bounding box of the character at the given
                      index into the string.  The bounds are returned in local
                      coordinates.  If the index is invalid an empty rectangle is
                      returned.                    
                    <param>
                        i the index into the String                        
                    </param>
                    <return>
                        the screen coordinates of the character's bounding box,
                          if index is invalid return an empty rectangle.                        
                    </return>
                </javadoc>
                <method name="getCharacterBounds" type="Rectangle" line="1378">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                    <declaration name="at" type="AccessibleText" line="1379"/>
                    <scope line="1380">
                        <declaration name="editorRect" type="Rectangle" line="1381"/>
                        <scope line="1382"/>
                    </scope>
                </method>
                <javadoc line="1388">
                    Returns the number of characters (valid indicies)                    
                    <return>
                        the number of characters                        
                    </return>
                </javadoc>
                <method name="getCharCount" type="int" line="1392">
                    <declaration name="at" type="AccessibleText" line="1393"/>
                    <scope line="1394"/>
                </method>
                <javadoc line="1399">
                    Returns the zero-based offset of the caret.
                      Note: That to the right of the caret will have the same index
                      value as the offset (the caret is between two characters).                    
                    <return>
                        the zero-based offset of the caret.                        
                    </return>
                </javadoc>
                <method name="getCaretPosition" type="int" line="1405">
                    <declaration name="at" type="AccessibleText" line="1406"/>
                    <scope line="1407"/>
                </method>
                <javadoc line="1412">
                    Returns the String at a given index.                    
                    <param>
                        part the CHARACTER, WORD, or SENTENCE to retrieve                        
                    </param>
                    <param>
                        index an index within the text                        
                    </param>
                    <return>
                        the letter, word, or sentence                        
                    </return>
                </javadoc>
                <method name="getAtIndex" type="String" line="1418">
                    <params>
                        <param name="part" type="int"/>
                        <param name="index" type="int"/>
                    </params>
                    <declaration name="at" type="AccessibleText" line="1419"/>
                    <scope line="1420"/>
                </method>
                <javadoc line="1425">
                    Returns the String after a given index.                    
                    <param>
                        part the CHARACTER, WORD, or SENTENCE to retrieve                        
                    </param>
                    <param>
                        index an index within the text                        
                    </param>
                    <return>
                        the letter, word, or sentence                        
                    </return>
                </javadoc>
                <method name="getAfterIndex" type="String" line="1431">
                    <params>
                        <param name="part" type="int"/>
                        <param name="index" type="int"/>
                    </params>
                    <declaration name="at" type="AccessibleText" line="1432"/>
                    <scope line="1433"/>
                </method>
                <javadoc line="1438">
                    Returns the String before a given index.                    
                    <param>
                        part the CHARACTER, WORD, or SENTENCE to retrieve                        
                    </param>
                    <param>
                        index an index within the text                        
                    </param>
                    <return>
                        the letter, word, or sentence                        
                    </return>
                </javadoc>
                <method name="getBeforeIndex" type="String" line="1444">
                    <params>
                        <param name="part" type="int"/>
                        <param name="index" type="int"/>
                    </params>
                    <declaration name="at" type="AccessibleText" line="1445"/>
                    <scope line="1446"/>
                </method>
                <javadoc line="1451">
                    Returns the AttributeSet for a given character at a given index                    
                    <param>
                        i the zero-based index into the text                        
                    </param>
                    <return>
                        the AttributeSet of the character                        
                    </return>
                </javadoc>
                <method name="getCharacterAttribute" type="AttributeSet" line="1456">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                    <declaration name="at" type="AccessibleText" line="1457"/>
                    <scope line="1458"/>
                </method>
                <javadoc line="1463">
                    Returns the start offset within the selected text.
                      If there is no selection, but there is
                      a caret, the start and end offsets will be the same.                    
                    <return>
                        the index into the text of the start of the selection                        
                    </return>
                </javadoc>
                <method name="getSelectionStart" type="int" line="1469">
                    <declaration name="at" type="AccessibleText" line="1470"/>
                    <scope line="1471"/>
                </method>
                <javadoc line="1476">
                    Returns the end offset within the selected text.
                      If there is no selection, but there is
                      a caret, the start and end offsets will be the same.                    
                    <return>
                        the index into teh text of the end of the selection                        
                    </return>
                </javadoc>
                <method name="getSelectionEnd" type="int" line="1482">
                    <declaration name="at" type="AccessibleText" line="1483"/>
                    <scope line="1484"/>
                </method>
                <javadoc line="1489">
                    Returns the portion of the text that is selected.                    
                    <return>
                        the String portion of the text that is selected                        
                    </return>
                </javadoc>
                <method name="getSelectedText" type="String" line="1493">
                    <declaration name="at" type="AccessibleText" line="1494"/>
                    <scope line="1495"/>
                </method>
                <javadoc line="1500">
                    Sets the text contents to the specified string.                    
                    <param>
                        s the string to set the text contents                        
                    </param>
                </javadoc>
                <method name="setTextContents" type="void" line="1504">
                    <params>
                        <param name="s" type="String"/>
                    </params>
                    <declaration name="at" type="AccessibleEditableText" line="1505"/>
                    <scope line="1506"/>
                </method>
                <javadoc line="1510">
                    Inserts the specified string at the given index/                    
                    <param>
                        index the index in the text where the string will
                          be inserted                        
                    </param>
                    <param>
                        s the string to insert in the text                        
                    </param>
                </javadoc>
                <method name="insertTextAtIndex" type="void" line="1516">
                    <params>
                        <param name="index" type="int"/>
                        <param name="s" type="String"/>
                    </params>
                    <declaration name="at" type="AccessibleEditableText" line="1517"/>
                    <scope line="1518"/>
                </method>
                <javadoc line="1522">
                    Returns the text string between two indices.                    
                    <param>
                        startIndex the starting index in the text                        
                    </param>
                    <param>
                        endIndex the ending index in the text                        
                    </param>
                    <return>
                        the text string between the indices                        
                    </return>
                </javadoc>
                <method name="getTextRange" type="String" line="1528">
                    <params>
                        <param name="startIndex" type="int"/>
                        <param name="endIndex" type="int"/>
                    </params>
                    <declaration name="at" type="AccessibleEditableText" line="1529"/>
                    <scope line="1530"/>
                </method>
                <javadoc line="1535">
                    Deletes the text between two indices                    
                    <param>
                        startIndex the starting index in the text                        
                    </param>
                    <param>
                        endIndex the ending index in the text                        
                    </param>
                </javadoc>
                <method name="delete" type="void" line="1540">
                    <params>
                        <param name="startIndex" type="int"/>
                        <param name="endIndex" type="int"/>
                    </params>
                    <declaration name="at" type="AccessibleEditableText" line="1541"/>
                    <scope line="1542"/>
                </method>
                <javadoc line="1546">
                    Cuts the text between two indices into the system clipboard.                    
                    <param>
                        startIndex the starting index in the text                        
                    </param>
                    <param>
                        endIndex the ending index in the text                        
                    </param>
                </javadoc>
                <method name="cut" type="void" line="1551">
                    <params>
                        <param name="startIndex" type="int"/>
                        <param name="endIndex" type="int"/>
                    </params>
                    <declaration name="at" type="AccessibleEditableText" line="1552"/>
                    <scope line="1553"/>
                </method>
                <javadoc line="1557">
                    Pastes the text from the system clipboard into the text
                      starting at the specified index.                    
                    <param>
                        startIndex the starting index in the text                        
                    </param>
                </javadoc>
                <method name="paste" type="void" line="1562">
                    <params>
                        <param name="startIndex" type="int"/>
                    </params>
                    <declaration name="at" type="AccessibleEditableText" line="1563"/>
                    <scope line="1564"/>
                </method>
                <javadoc line="1568">
                    Replaces the text between two indices with the specified
                      string.                    
                    <param>
                        startIndex the starting index in the text                        
                    </param>
                    <param>
                        endIndex the ending index in the text                        
                    </param>
                    <param>
                        s the string to replace the text between two indices                        
                    </param>
                </javadoc>
                <method name="replaceText" type="void" line="1575">
                    <params>
                        <param name="startIndex" type="int"/>
                        <param name="endIndex" type="int"/>
                        <param name="s" type="String"/>
                    </params>
                    <declaration name="at" type="AccessibleEditableText" line="1576"/>
                    <scope line="1577"/>
                </method>
                <javadoc line="1581">
                    Selects the text between two indices.                    
                    <param>
                        startIndex the starting index in the text                        
                    </param>
                    <param>
                        endIndex the ending index in the text                        
                    </param>
                </javadoc>
                <method name="selectText" type="void" line="1586">
                    <params>
                        <param name="startIndex" type="int"/>
                        <param name="endIndex" type="int"/>
                    </params>
                    <declaration name="at" type="AccessibleEditableText" line="1587"/>
                    <scope line="1588"/>
                </method>
                <javadoc line="1592">
                    Sets attributes for the text between two indices.                    
                    <param>
                        startIndex the starting index in the text                        
                    </param>
                    <param>
                        endIndex the ending index in the text                        
                    </param>
                    <param>
                        as the attribute set                        
                    </param>
                    <see>
                        AttributeSet                        
                    </see>
                </javadoc>
                <method name="setAttributes" type="void" line="1599">
                    <params>
                        <param name="startIndex" type="int"/>
                        <param name="endIndex" type="int"/>
                        <param name="as" type="AttributeSet"/>
                    </params>
                    <declaration name="at" type="AccessibleEditableText" line="1600"/>
                    <scope line="1601"/>
                </method>
            </class>
        </class>
    </source>