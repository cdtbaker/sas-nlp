<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="javax.swing.event"/>
        <import package="java.io.Serializable"/>
        <import package="java.util.EventListener"/>
        <class name="DefaultBoundedRangeModel" line="32">
            <implements interface="BoundedRangeModel"/>
            <implements interface="Serializable"/>
            <javadoc line="32">
                A generic implementation of BoundedRangeModel.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <author>
                    David Kloba                    
                </author>
                <author>
                    Hans Muller                    
                </author>
                <see>
                    BoundedRangeModel                    
                </see>
            </javadoc>
            <declaration name="changeEvent" type="ChangeEvent" line="50"/>
            <javadoc line="50">
                Only one &lt;code&gt;ChangeEvent&lt;/code&gt; is needed per model instance since the
                  event&apos;s only (read-only) state is the source property.  The source
                  of events generated here is always &quot;this&quot;.                
            </javadoc>
            <declaration name="listenerList" type="EventListenerList" line="57"/>
            <javadoc line="57">
                The listeners waiting for model changes.                
            </javadoc>
            <declaration name="value" type="int" line="60"/>
            <declaration name="extent" type="int" line="61"/>
            <declaration name="min" type="int" line="62"/>
            <declaration name="max" type="int" line="63"/>
            <declaration name="isAdjusting" type="boolean" line="64"/>
            <javadoc line="67">
                Initializes all of the properties with default values.
                  Those values are:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;code&gt;value&lt;/code&gt; = 0
                  &lt;li&gt;&lt;code&gt;extent&lt;/code&gt; = 0
                  &lt;li&gt;&lt;code&gt;minimum&lt;/code&gt; = 0
                  &lt;li&gt;&lt;code&gt;maximum&lt;/code&gt; = 100
                  &lt;li&gt;&lt;code&gt;adjusting&lt;/code&gt; = false
                  &lt;/ul&gt;                
            </javadoc>
            <method name="DefaultBoundedRangeModel" type="constructor" line="78"/>
            <javadoc line="82">
                Initializes value, extent, minimum and maximum. Adjusting is false.
                  Throws an &lt;code&gt;IllegalArgumentException&lt;/code&gt; if the following
                  constraints aren&apos;t satisfied:
                  &lt;pre&gt;
                  min &amp;lt;= value &amp;lt;= value+extent &amp;lt;= max
                  &lt;/pre&gt;                
            </javadoc>
            <method name="DefaultBoundedRangeModel" type="constructor" line="91">
                <params>
                    <param name="value" type="int"/>
                    <param name="extent" type="int"/>
                    <param name="min" type="int"/>
                    <param name="max" type="int"/>
                </params>
                <scope line="95"/>
                <scope line="101"/>
            </method>
            <javadoc line="107">
                Returns the model&apos;s current value.                
                <return>
                    the model's current value                    
                </return>
                <see>
                    #setValue                    
                </see>
                <see>
                    BoundedRangeModel#getValue                    
                </see>
            </javadoc>
            <method name="getValue" type="int" line="113"/>
            <javadoc line="118">
                Returns the model&apos;s extent.                
                <return>
                    the model's extent                    
                </return>
                <see>
                    #setExtent                    
                </see>
                <see>
                    BoundedRangeModel#getExtent                    
                </see>
            </javadoc>
            <method name="getExtent" type="int" line="124"/>
            <javadoc line="129">
                Returns the model&apos;s minimum.                
                <return>
                    the model's minimum                    
                </return>
                <see>
                    #setMinimum                    
                </see>
                <see>
                    BoundedRangeModel#getMinimum                    
                </see>
            </javadoc>
            <method name="getMinimum" type="int" line="135"/>
            <javadoc line="140">
                Returns the model&apos;s maximum.                
                <return>
                    the model's maximum                    
                </return>
                <see>
                    #setMaximum                    
                </see>
                <see>
                    BoundedRangeModel#getMaximum                    
                </see>
            </javadoc>
            <method name="getMaximum" type="int" line="146"/>
            <javadoc line="151">
                Sets the current value of the model. For a slider, that
                  determines where the knob appears. Ensures that the new
                  value, &lt;I&gt;n&lt;/I&gt; falls within the model&apos;s constraints:
                  &lt;pre&gt;
                  minimum &amp;lt;= value &amp;lt;= value+extent &amp;lt;= maximum
                  &lt;/pre&gt;                
                <see>
                    BoundedRangeModel#setValue                    
                </see>
            </javadoc>
            <method name="setValue" type="void" line="161">
                <params>
                    <param name="n" type="int"/>
                </params>
                <declaration name="newValue" type="int" line="164"/>
                <scope line="165"/>
            </method>
            <javadoc line="172">
                Sets the extent to &lt;I&gt;n&lt;/I&gt; after ensuring that &lt;I&gt;n&lt;/I&gt;
                  is greater than or equal to zero and falls within the model&apos;s
                  constraints:
                  &lt;pre&gt;
                  minimum &amp;lt;= value &amp;lt;= value+extent &amp;lt;= maximum
                  &lt;/pre&gt;                
                <see>
                    BoundedRangeModel#setExtent                    
                </see>
            </javadoc>
            <method name="setExtent" type="void" line="181">
                <params>
                    <param name="n" type="int"/>
                </params>
                <declaration name="newExtent" type="int" line="182"/>
                <scope line="183"/>
            </method>
            <javadoc line="190">
                Sets the minimum to &lt;I&gt;n&lt;/I&gt; after ensuring that &lt;I&gt;n&lt;/I&gt;
                  that the other three properties obey the model&apos;s constraints:
                  &lt;pre&gt;
                  minimum &amp;lt;= value &amp;lt;= value+extent &amp;lt;= maximum
                  &lt;/pre&gt;                
                <see>
                    #getMinimum                    
                </see>
                <see>
                    BoundedRangeModel#setMinimum                    
                </see>
            </javadoc>
            <method name="setMinimum" type="void" line="199">
                <params>
                    <param name="n" type="int"/>
                </params>
                <declaration name="newMax" type="int" line="200"/>
                <declaration name="newValue" type="int" line="201"/>
                <declaration name="newExtent" type="int" line="202"/>
            </method>
            <javadoc line="207">
                Sets the maximum to &lt;I&gt;n&lt;/I&gt; after ensuring that &lt;I&gt;n&lt;/I&gt;
                  that the other three properties obey the model&apos;s constraints:
                  &lt;pre&gt;
                  minimum &amp;lt;= value &amp;lt;= value+extent &amp;lt;= maximum
                  &lt;/pre&gt;                
                <see>
                    BoundedRangeModel#setMaximum                    
                </see>
            </javadoc>
            <method name="setMaximum" type="void" line="215">
                <params>
                    <param name="n" type="int"/>
                </params>
                <declaration name="newMin" type="int" line="216"/>
                <declaration name="newExtent" type="int" line="217"/>
                <declaration name="newValue" type="int" line="218"/>
            </method>
            <javadoc line="223">
                Sets the &lt;code&gt;valueIsAdjusting&lt;/code&gt; property.                
                <see>
                    #getValueIsAdjusting                    
                </see>
                <see>
                    #setValue                    
                </see>
                <see>
                    BoundedRangeModel#setValueIsAdjusting                    
                </see>
            </javadoc>
            <method name="setValueIsAdjusting" type="void" line="230">
                <params>
                    <param name="b" type="boolean"/>
                </params>
            </method>
            <javadoc line="235">
                Returns true if the value is in the process of changing
                  as a result of actions being taken by the user.                
                <return>
                    the value of the <code>valueIsAdjusting</code> property                    
                </return>
                <see>
                    #setValue                    
                </see>
                <see>
                    BoundedRangeModel#getValueIsAdjusting                    
                </see>
            </javadoc>
            <method name="getValueIsAdjusting" type="boolean" line="243"/>
            <javadoc line="248">
                Sets all of the &lt;code&gt;BoundedRangeModel&lt;/code&gt; properties after forcing
                  the arguments to obey the usual constraints:
                  &lt;pre&gt;
                  minimum &amp;lt;= value &amp;lt;= value+extent &amp;lt;= maximum
                  &lt;/pre&gt;
                  &lt;p&gt;
                  At most, one &lt;code&gt;ChangeEvent&lt;/code&gt; is generated.                
                <see>
                    BoundedRangeModel#setRangeProperties                    
                </see>
                <see>
                    #setValue                    
                </see>
                <see>
                    #setExtent                    
                </see>
                <see>
                    #setMinimum                    
                </see>
                <see>
                    #setMaximum                    
                </see>
                <see>
                    #setValueIsAdjusting                    
                </see>
            </javadoc>
            <method name="setRangeProperties" type="void" line="265">
                <params>
                    <param name="newValue" type="int"/>
                    <param name="newExtent" type="int"/>
                    <param name="newMin" type="int"/>
                    <param name="newMax" type="int"/>
                    <param name="adjusting" type="boolean"/>
                </params>
                <comment line="277">
                    Convert the addends to long so that extent can be
                     Integer.MAX_VALUE without rolling over the sum.
                     A JCK test covers this, see bug 4097718.                    
                </comment>
                <scope line="266"/>
                <scope line="269"/>
                <scope line="272"/>
                <scope line="280"/>
                <scope line="284"/>
                <declaration name="isChange" type="boolean" line="288"/>
                <scope line="295"/>
            </method>
            <javadoc line="307">
                Adds a &lt;code&gt;ChangeListener&lt;/code&gt;.  The change listeners are run each
                  time any one of the Bounded Range model properties changes.                
                <param>
                    l the ChangeListener to add                    
                </param>
                <see>
                    #removeChangeListener                    
                </see>
                <see>
                    BoundedRangeModel#addChangeListener                    
                </see>
            </javadoc>
            <method name="addChangeListener" type="void" line="315">
                <params>
                    <param name="l" type="ChangeListener"/>
                </params>
            </method>
            <javadoc line="320">
                Removes a &lt;code&gt;ChangeListener&lt;/code&gt;.                
                <param>
                    l the <code>ChangeListener</code> to remove                    
                </param>
                <see>
                    #addChangeListener                    
                </see>
                <see>
                    BoundedRangeModel#removeChangeListener                    
                </see>
            </javadoc>
            <method name="removeChangeListener" type="void" line="327">
                <params>
                    <param name="l" type="ChangeListener"/>
                </params>
            </method>
            <javadoc line="332">
                Returns an array of all the change listeners
                  registered on this &lt;code&gt;DefaultBoundedRangeModel&lt;/code&gt;.                
                <return>
                    all of this model's <code>ChangeListener</code>s
                      or an empty
                      array if no change listeners are currently registered                    
                </return>
                <see>
                    #addChangeListener                    
                </see>
                <see>
                    #removeChangeListener                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getChangeListeners" type="ChangeListener[]" line="345"/>
            <javadoc line="350">
                Runs each &lt;code&gt;ChangeListener&lt;/code&gt;&apos;s &lt;code&gt;stateChanged&lt;/code&gt; method.                
                <see>
                    #setRangeProperties                    
                </see>
                <see>
                    EventListenerList                    
                </see>
            </javadoc>
            <method name="fireStateChanged" type="void" line="357">
                <declaration name="listeners" type="Object[]" line="358"/>
                <scope line="359">
                    <scope line="360">
                        <scope line="361"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="370">
                Returns a string that displays all of the
                  &lt;code&gt;BoundedRangeModel&lt;/code&gt; properties.                
            </javadoc>
            <method name="toString" type="String" line="374">
                <declaration name="modelString" type="String" line="375"/>
            </method>
            <javadoc line="385">
                Returns an array of all the objects currently registered as
                  &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt;s
                  upon this model.
                  &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt;s
                  are registered using the &lt;code&gt;add&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt; method.
                  &lt;p&gt;
                  You can specify the &lt;code&gt;listenerType&lt;/code&gt; argument
                  with a class literal, such as &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener.class&lt;/code&gt;.
                  For example, you can query a &lt;code&gt;DefaultBoundedRangeModel&lt;/code&gt;
                  instance &lt;code&gt;m&lt;/code&gt;
                  for its change listeners
                  with the following code:
                  &lt;pre&gt;ChangeListener[] cls = (ChangeListener[])(m.getListeners(ChangeListener.class));&lt;/pre&gt;
                  If no such listeners exist,
                  this method returns an empty array.                
                <param>
                    listenerType  the type of listeners requested;
                      this parameter should specify an interface
                      that descends from <code>java.util.EventListener</code>                    
                </param>
                <return>
                    an array of all objects registered as
                      <code><em>Foo</em>Listener</code>s
                      on this model,
                      or an empty array if no such
                      listeners have been added                    
                </return>
                <exception>
                    ClassCastException if <code>listenerType</code> doesn't
                      specify a class or interface that implements
                      <code>java.util.EventListener</code>                    
                </exception>
                <see>
                    #getChangeListeners                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getListeners" type="T[]" line="420">
                <params>
                    <param name="listenerType" type="Class<T>"/>
                </params>
            </method>
        </class>
    </source>