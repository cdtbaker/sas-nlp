<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.awt.Component"/>
        <import package="java.awt.Container"/>
        <import package="java.awt.Dimension"/>
        <import package="java.awt.FontMetrics"/>
        <import package="java.awt.Insets"/>
        <import package="java.awt.LayoutManager2"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.util"/>
        <class name="SpringLayout" line="10">
            <implements interface="LayoutManager2"/>
            <javadoc line="10">
                A &lt;code&gt;SpringLayout&lt;/code&gt; lays out the children of its associated container
                  according to a set of constraints.
                  See &lt;a href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/layout/spring.html&quot;&gt;How to Use SpringLayout&lt;/a&gt;
                  in &lt;em&gt;The Java Tutorial&lt;/em&gt; for examples of using
                  &lt;code&gt;SpringLayout&lt;/code&gt;.
                  &lt;p&gt;
                  Each constraint,
                  represented by a &lt;code&gt;Spring&lt;/code&gt; object,
                  controls the vertical or horizontal distance
                  between two component edges.
                  The edges can belong to
                  any child of the container,
                  or to the container itself.
                  For example,
                  the allowable width of a component
                  can be expressed using a constraint
                  that controls the distance between the west (left) and east (right)
                  edges of the component.
                  The allowable &lt;em&gt;y&lt;/em&gt; coordinates for a component
                  can be expressed by constraining the distance between
                  the north (top) edge of the component
                  and the north edge of its container.
                  &lt;P&gt;
                  Every child of a &lt;code&gt;SpringLayout&lt;/code&gt;-controlled container,
                  as well as the container itself,
                  has exactly one set of constraints
                  associated with it.
                  These constraints are represented by
                  a &lt;code&gt;SpringLayout.Constraints&lt;/code&gt; object.
                  By default,
                  &lt;code&gt;SpringLayout&lt;/code&gt; creates constraints
                  that make their associated component
                  have the minimum, preferred, and maximum sizes
                  returned by the component&apos;s{@link java.awt.Component#getMinimumSize},{@link java.awt.Component#getPreferredSize}, and{@link java.awt.Component#getMaximumSize}methods. The &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt; positions are initially not
                  constrained, so that until you constrain them the &lt;code&gt;Component&lt;/code&gt;
                  will be positioned at 0,0 relative to the &lt;code&gt;Insets&lt;/code&gt; of the
                  parent &lt;code&gt;Container&lt;/code&gt;.
                  &lt;p&gt;
                  You can change
                  a component&apos;s constraints in several ways.
                  You can
                  use one of the{@link #putConstraint putConstraint}methods
                  to establish a spring
                  linking the edges of two components within the same container.
                  Or you can get the appropriate &lt;code&gt;SpringLayout.Constraints&lt;/code&gt;
                  object using{@link #getConstraints getConstraints}and then modify one or more of its springs.
                  Or you can get the spring for a particular edge of a component
                  using {@link #getConstraint getConstraint},
                  and modify it.
                  You can also associate
                  your own &lt;code&gt;SpringLayout.Constraints&lt;/code&gt; object
                  with a component by specifying the constraints object
                  when you add the component to its container
                  (using{@link Container#add(Component,Object)}).
                  &lt;p&gt;
                  The &lt;code&gt;Spring&lt;/code&gt; object representing each constraint
                  has a minimum, preferred, maximum, and current value.
                  The current value of the spring
                  is somewhere between the minimum and maximum values,
                  according to the formula given in the{@link Spring#sum} method description.
                  When the minimum, preferred, and maximum values are the same,
                  the current value is always equal to them;
                  this inflexible spring is called a &lt;em&gt;strut&lt;/em&gt;.
                  You can create struts using the factory method{@link Spring#constant(int)}.
                  The &lt;code&gt;Spring&lt;/code&gt; class also provides factory methods
                  for creating other kinds of springs,
                  including springs that depend on other springs.
                  &lt;p&gt;
                  In a &lt;code&gt;SpringLayout&lt;/code&gt;, the position of each edge is dependent on
                  the position of just one other edge. If a constraint is subsequently added
                  to create a new binding for an edge, the previous binding is discarded
                  and the edge remains dependent on a single edge.
                  Springs should only be attached
                  between edges of the container and its immediate children; the behavior
                  of the &lt;code&gt;SpringLayout&lt;/code&gt; when presented with constraints linking
                  the edges of components from different containers (either internal or
                  external) is undefined.
                  &lt;h3&gt;
                  SpringLayout vs. Other Layout Managers
                  &lt;/h3&gt;
                  &lt;blockquote&gt;
                  &lt;hr&gt;
                  &lt;strong&gt;Note:&lt;/strong&gt;
                  Unlike many layout managers,
                  &lt;code&gt;SpringLayout&lt;/code&gt; doesn&apos;t automatically set the location of
                  the components it manages.
                  If you hand-code a GUI that uses &lt;code&gt;SpringLayout&lt;/code&gt;,
                  remember to initialize component locations by constraining the west/east
                  and north/south locations.
                  &lt;p&gt;
                  Depending on the constraints you use,
                  you may also need to set the size of the container explicitly.
                  &lt;hr&gt;
                  &lt;/blockquote&gt;
                  &lt;p&gt;
                  Despite the simplicity of &lt;code&gt;SpringLayout&lt;/code&gt;,
                  it can emulate the behavior of most other layout managers.
                  For some features,
                  such as the line breaking provided by &lt;code&gt;FlowLayout&lt;/code&gt;,
                  you&apos;ll need to
                  create a special-purpose subclass of the &lt;code&gt;Spring&lt;/code&gt; class.
                  &lt;p&gt;
                  &lt;code&gt;SpringLayout&lt;/code&gt; also provides a way to solve
                  many of the difficult layout
                  problems that cannot be solved by nesting combinations
                  of &lt;code&gt;Box&lt;/code&gt;es. That said, &lt;code&gt;SpringLayout&lt;/code&gt; honors the
                  &lt;code&gt;LayoutManager2&lt;/code&gt; contract correctly and so can be nested with
                  other layout managers -- a technique that can be preferable to
                  creating the constraints implied by the other layout managers.
                  &lt;p&gt;
                  The asymptotic complexity of the layout operation of a &lt;code&gt;SpringLayout&lt;/code&gt;
                  is linear in the number of constraints (and/or components).
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <see>
                    Spring                    
                </see>
                <see>
                    SpringLayout.Constraints                    
                </see>
                <author>
                    Philip Milne                    
                </author>
                <author>
                    Scott Violet                    
                </author>
                <author>
                    Joe Winchester                    
                </author>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="componentConstraints" type="Map&lt;Component,Constraints&gt;" line="140"/>
            <declaration name="cyclicReference" type="Spring" line="141"/>
            <declaration name="cyclicSprings" type="Set&lt;Spring&gt;" line="142"/>
            <declaration name="acyclicSprings" type="Set&lt;Spring&gt;" line="143"/>
            <declaration name="NORTH" type="String" line="144"/>
            <javadoc line="144">
                Specifies the top edge of a component&apos;s bounding rectangle.                
            </javadoc>
            <declaration name="SOUTH" type="String" line="148"/>
            <javadoc line="148">
                Specifies the bottom edge of a component&apos;s bounding rectangle.                
            </javadoc>
            <declaration name="EAST" type="String" line="152"/>
            <javadoc line="152">
                Specifies the right edge of a component&apos;s bounding rectangle.                
            </javadoc>
            <declaration name="WEST" type="String" line="156"/>
            <javadoc line="156">
                Specifies the left edge of a component&apos;s bounding rectangle.                
            </javadoc>
            <declaration name="HORIZONTAL_CENTER" type="String" line="160"/>
            <javadoc line="160">
                Specifies the horizontal center of a component&apos;s bounding rectangle.                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="VERTICAL_CENTER" type="String" line="165"/>
            <javadoc line="165">
                Specifies the vertical center of a component&apos;s bounding rectangle.                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="BASELINE" type="String" line="170"/>
            <javadoc line="170">
                Specifies the baseline of a component.                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="WIDTH" type="String" line="175"/>
            <javadoc line="175">
                Specifies the width of a component&apos;s bounding rectangle.                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="HEIGHT" type="String" line="180"/>
            <javadoc line="180">
                Specifies the height of a component&apos;s bounding rectangle.                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="ALL_HORIZONTAL" type="String[]" line="185"/>
            <declaration name="ALL_VERTICAL" type="String[]" line="186"/>
            <class name="Constraints" line="187">
                <javadoc line="187">
                    A &lt;code&gt;Constraints&lt;/code&gt; object holds the
                      constraints that govern the way a component&apos;s size and position
                      change in a container controlled by a &lt;code&gt;SpringLayout&lt;/code&gt;.
                      A &lt;code&gt;Constraints&lt;/code&gt; object is
                      like a &lt;code&gt;Rectangle&lt;/code&gt;, in that it
                      has &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;,
                      &lt;code&gt;width&lt;/code&gt;, and &lt;code&gt;height&lt;/code&gt; properties.
                      In the &lt;code&gt;Constraints&lt;/code&gt; object, however,
                      these properties have
                      &lt;code&gt;Spring&lt;/code&gt; values instead of integers.
                      In addition,
                      a &lt;code&gt;Constraints&lt;/code&gt; object
                      can be manipulated as four edges
                      -- north, south, east, and west --
                      using the &lt;code&gt;constraint&lt;/code&gt; property.
                      &lt;p&gt;
                      The following formulas are always true
                      for a &lt;code&gt;Constraints&lt;/code&gt; object (here WEST and &lt;code&gt;x&lt;/code&gt; are synonyms, as are and NORTH and &lt;code&gt;y&lt;/code&gt;):
                      &lt;pre&gt;
                      EAST = WEST + WIDTH
                      SOUTH = NORTH + HEIGHT
                      HORIZONTAL_CENTER = WEST + WIDTH/2
                      VERTICAL_CENTER = NORTH + HEIGHT/2
                      ABSOLUTE_BASELINE = NORTH + RELATIVE_BASELINE
                      &lt;/pre&gt;
                      &lt;p&gt;
                      For example, if you have specified the WIDTH and WEST (X) location
                      the EAST is calculated as WEST + WIDTH.  If you instead specified
                      the WIDTH and EAST locations the WEST (X) location is then calculated
                      as EAST - WIDTH.
                      &lt;p&gt;
                      [RELATIVE_BASELINE is a private constraint that is set automatically when
                      the SpringLayout.Constraints(Component) constuctor is called or when
                      a constraints object is registered with a SpringLayout object.]
                      &lt;p&gt;
                      &lt;b&gt;Note&lt;/b&gt;: In this document,
                      operators represent methods
                      in the &lt;code&gt;Spring&lt;/code&gt; class.
                      For example, &quot;a + b&quot; is equal to
                      &lt;code&gt;Spring.sum(a, b)&lt;/code&gt;,
                      and &quot;a - b&quot; is equal to
                      &lt;code&gt;Spring.sum(a, Spring.minus(b))&lt;/code&gt;.
                      See the{@link Spring &lt;code&gt;Spring&lt;/code&gt; API documentation}for further details
                      of spring arithmetic.
                      &lt;p&gt;
                      Because a &lt;code&gt;Constraints&lt;/code&gt; object&apos;s properties --
                      representing its edges, size, and location -- can all be set
                      independently and yet are interrelated,
                      a &lt;code&gt;Constraints&lt;/code&gt; object can become &lt;em&gt;over-constrained&lt;/em&gt;.
                      For example, if the &lt;code&gt;WEST&lt;/code&gt;, &lt;code&gt;WIDTH&lt;/code&gt; and
                      &lt;code&gt;EAST&lt;/code&gt; edges are all set, steps must be taken to ensure that
                      the first of the formulas above holds.  To do this, the
                      &lt;code&gt;Constraints&lt;/code&gt;
                      object throws away the &lt;em&gt;least recently set&lt;/em&gt;
                      constraint so as to make the formulas hold.                    
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <declaration name="x" type="Spring" line="246"/>
                <declaration name="y" type="Spring" line="247"/>
                <declaration name="width" type="Spring" line="248"/>
                <declaration name="height" type="Spring" line="249"/>
                <declaration name="east" type="Spring" line="250"/>
                <declaration name="south" type="Spring" line="251"/>
                <declaration name="horizontalCenter" type="Spring" line="252"/>
                <declaration name="verticalCenter" type="Spring" line="253"/>
                <declaration name="baseline" type="Spring" line="254"/>
                <declaration name="horizontalHistory" type="List&lt;String&gt;" line="255"/>
                <declaration name="verticalHistory" type="List&lt;String&gt;" line="256"/>
                <declaration name="c" type="Component" line="257"/>
                <javadoc line="258">
                    Creates an empty &lt;code&gt;Constraints&lt;/code&gt; object.                    
                </javadoc>
                <method name="Constraints" type="constructor" line="261"/>
                <javadoc line="263">
                    Creates a &lt;code&gt;Constraints&lt;/code&gt; object with the
                      specified values for its
                      &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; properties.
                      The &lt;code&gt;height&lt;/code&gt; and &lt;code&gt;width&lt;/code&gt; springs
                      have &lt;code&gt;null&lt;/code&gt; values.                    
                    <param>
                        x  the spring controlling the component's <em>x</em> value                        
                    </param>
                    <param>
                        y  the spring controlling the component's <em>y</em> value                        
                    </param>
                </javadoc>
                <method name="Constraints" type="constructor" line="272">
                    <params>
                        <param name="x" type="Spring"/>
                        <param name="y" type="Spring"/>
                    </params>
                </method>
                <javadoc line="276">
                    Creates a &lt;code&gt;Constraints&lt;/code&gt; object with the
                      specified values for its
                      &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, &lt;code&gt;width&lt;/code&gt;,
                      and &lt;code&gt;height&lt;/code&gt; properties.
                      Note: If the &lt;code&gt;SpringLayout&lt;/code&gt; class
                      encounters &lt;code&gt;null&lt;/code&gt; values in the
                      &lt;code&gt;Constraints&lt;/code&gt; object of a given component,
                      it replaces them with suitable defaults.                    
                    <param>
                        x  the spring value for the <code>x</code> property                        
                    </param>
                    <param>
                        y  the spring value for the <code>y</code> property                        
                    </param>
                    <param>
                        width  the spring value for the <code>width</code> property                        
                    </param>
                    <param>
                        height  the spring value for the <code>height</code> property                        
                    </param>
                </javadoc>
                <method name="Constraints" type="constructor" line="290">
                    <params>
                        <param name="x" type="Spring"/>
                        <param name="y" type="Spring"/>
                        <param name="width" type="Spring"/>
                        <param name="height" type="Spring"/>
                    </params>
                </method>
                <javadoc line="296">
                    Creates a &lt;code&gt;Constraints&lt;/code&gt; object with
                      suitable &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, &lt;code&gt;width&lt;/code&gt; and
                      &lt;code&gt;height&lt;/code&gt; springs for component, &lt;code&gt;c&lt;/code&gt;.
                      The &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; springs are constant
                      springs  initialised with the component&apos;s location at
                      the time this method is called. The &lt;code&gt;width&lt;/code&gt; and
                      &lt;code&gt;height&lt;/code&gt; springs are special springs, created by
                      the &lt;code&gt;Spring.width()&lt;/code&gt; and &lt;code&gt;Spring.height()&lt;/code&gt;
                      methods, which track the size characteristics of the component
                      when they change.                    
                    <param>
                        c  the component whose characteristics will be reflected by this Constraints object                        
                    </param>
                    <throws>
                        NullPointerException if <code>c</code> is null.                        
                    </throws>
                    <since>
                        1.5                        
                    </since>
                </javadoc>
                <method name="Constraints" type="constructor" line="311">
                    <params>
                        <param name="c" type="Component"/>
                    </params>
                </method>
                <method name="pushConstraint" type="void" line="318">
                    <params>
                        <param name="name" type="String"/>
                        <param name="value" type="Spring"/>
                        <param name="horizontal" type="boolean"/>
                    </params>
                    <declaration name="valid" type="boolean" line="319"/>
                    <declaration name="history" type="List&lt;String&gt;" line="320"/>
                    <scope line="321"/>
                    <scope line="325"/>
                    <scope line="329"/>
                    <scope line="332">
                        <declaration name="all" type="String[]" line="333"/>
                        <scope line="334">
                            <scope line="335"/>
                        </scope>
                    </scope>
                </method>
                <method name="sum" type="Spring" line="341">
                    <params>
                        <param name="s1" type="Spring"/>
                        <param name="s2" type="Spring"/>
                    </params>
                </method>
                <method name="difference" type="Spring" line="344">
                    <params>
                        <param name="s1" type="Spring"/>
                        <param name="s2" type="Spring"/>
                    </params>
                </method>
                <method name="scale" type="Spring" line="347">
                    <params>
                        <param name="s" type="Spring"/>
                        <param name="factor" type="float"/>
                    </params>
                </method>
                <method name="getBaselineFromHeight" type="int" line="350">
                    <params>
                        <param name="height" type="int"/>
                    </params>
                    <scope line="351"/>
                </method>
                <method name="getHeightFromBaseLine" type="int" line="356">
                    <params>
                        <param name="baseline" type="int"/>
                    </params>
                    <declaration name="prefSize" type="Dimension" line="357"/>
                    <declaration name="prefHeight" type="int" line="358"/>
                    <declaration name="prefBaseline" type="int" line="359"/>
                    <scope line="360"/>
                </method>
                <method name="heightToRelativeBaseline" type="Spring" line="373">
                    <params>
                        <param name="s" type="Spring"/>
                    </params>
                    <anonymous_class line="374">
                        <method name="map" type="int" line="375">
                            <params>
                                <param name="i" type="int"/>
                            </params>
                        </method>
                        <method name="inv" type="int" line="378">
                            <params>
                                <param name="i" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                </method>
                <method name="relativeBaselineToHeight" type="Spring" line="384">
                    <params>
                        <param name="s" type="Spring"/>
                    </params>
                    <anonymous_class line="385">
                        <method name="map" type="int" line="386">
                            <params>
                                <param name="i" type="int"/>
                            </params>
                        </method>
                        <method name="inv" type="int" line="389">
                            <params>
                                <param name="i" type="int"/>
                            </params>
                        </method>
                    </anonymous_class>
                </method>
                <method name="defined" type="boolean" line="395">
                    <params>
                        <param name="history" type="List"/>
                        <param name="s1" type="String"/>
                        <param name="s2" type="String"/>
                    </params>
                </method>
                <javadoc line="398">
                    Sets the &lt;code&gt;x&lt;/code&gt; property,
                      which controls the &lt;code&gt;x&lt;/code&gt; value
                      of a component&apos;s location.                    
                    <param>
                        x the spring controlling the <code>x</code> value
                          of a component's location                        
                    </param>
                    <see>
                        #getX                        
                    </see>
                    <see>
                        SpringLayout.Constraints                        
                    </see>
                </javadoc>
                <method name="setX" type="void" line="407">
                    <params>
                        <param name="x" type="Spring"/>
                    </params>
                </method>
                <javadoc line="411">
                    Returns the value of the &lt;code&gt;x&lt;/code&gt; property.                    
                    <return>
                        the spring controlling the <code>x</code> value
                          of a component's location                        
                    </return>
                    <see>
                        #setX                        
                    </see>
                    <see>
                        SpringLayout.Constraints                        
                    </see>
                </javadoc>
                <method name="getX" type="Spring" line="418">
                    <scope line="419">
                        <scope line="420"/>
                        <scope line="423"/>
                        <scope line="426"/>
                    </scope>
                </method>
                <javadoc line="432">
                    Sets the &lt;code&gt;y&lt;/code&gt; property,
                      which controls the &lt;code&gt;y&lt;/code&gt; value
                      of a component&apos;s location.                    
                    <param>
                        y the spring controlling the <code>y</code> value
                          of a component's location                        
                    </param>
                    <see>
                        #getY                        
                    </see>
                    <see>
                        SpringLayout.Constraints                        
                    </see>
                </javadoc>
                <method name="setY" type="void" line="441">
                    <params>
                        <param name="y" type="Spring"/>
                    </params>
                </method>
                <javadoc line="445">
                    Returns the value of the &lt;code&gt;y&lt;/code&gt; property.                    
                    <return>
                        the spring controlling the <code>y</code> value
                          of a component's location                        
                    </return>
                    <see>
                        #setY                        
                    </see>
                    <see>
                        SpringLayout.Constraints                        
                    </see>
                </javadoc>
                <method name="getY" type="Spring" line="452">
                    <scope line="453">
                        <scope line="454"/>
                        <scope line="457"/>
                        <scope line="460"/>
                        <scope line="463"/>
                        <scope line="466"/>
                    </scope>
                </method>
                <javadoc line="472">
                    Sets the &lt;code&gt;width&lt;/code&gt; property,
                      which controls the width of a component.                    
                    <param>
                        width the spring controlling the width of this
                          <code>Constraints</code> object                        
                    </param>
                    <see>
                        #getWidth                        
                    </see>
                    <see>
                        SpringLayout.Constraints                        
                    </see>
                </javadoc>
                <method name="setWidth" type="void" line="480">
                    <params>
                        <param name="width" type="Spring"/>
                    </params>
                </method>
                <javadoc line="484">
                    Returns the value of the &lt;code&gt;width&lt;/code&gt; property.                    
                    <return>
                        the spring controlling the width of a component                        
                    </return>
                    <see>
                        #setWidth                        
                    </see>
                    <see>
                        SpringLayout.Constraints                        
                    </see>
                </javadoc>
                <method name="getWidth" type="Spring" line="490">
                    <scope line="491">
                        <scope line="492"/>
                        <scope line="495"/>
                    </scope>
                </method>
                <javadoc line="501">
                    Sets the &lt;code&gt;height&lt;/code&gt; property,
                      which controls the height of a component.                    
                    <param>
                        height the spring controlling the height of this <code>Constraints</code>
                          object                        
                    </param>
                    <see>
                        #getHeight                        
                    </see>
                    <see>
                        SpringLayout.Constraints                        
                    </see>
                </javadoc>
                <method name="setHeight" type="void" line="509">
                    <params>
                        <param name="height" type="Spring"/>
                    </params>
                </method>
                <javadoc line="513">
                    Returns the value of the &lt;code&gt;height&lt;/code&gt; property.                    
                    <return>
                        the spring controlling the height of a component                        
                    </return>
                    <see>
                        #setHeight                        
                    </see>
                    <see>
                        SpringLayout.Constraints                        
                    </see>
                </javadoc>
                <method name="getHeight" type="Spring" line="519">
                    <scope line="520">
                        <scope line="521"/>
                        <scope line="524"/>
                        <scope line="527"/>
                    </scope>
                </method>
                <method name="setEast" type="void" line="533">
                    <params>
                        <param name="east" type="Spring"/>
                    </params>
                </method>
                <method name="getEast" type="Spring" line="537">
                    <scope line="538"/>
                </method>
                <method name="setSouth" type="void" line="543">
                    <params>
                        <param name="south" type="Spring"/>
                    </params>
                </method>
                <method name="getSouth" type="Spring" line="547">
                    <scope line="548"/>
                </method>
                <method name="getHorizontalCenter" type="Spring" line="553">
                    <scope line="554"/>
                </method>
                <method name="setHorizontalCenter" type="void" line="559">
                    <params>
                        <param name="horizontalCenter" type="Spring"/>
                    </params>
                </method>
                <method name="getVerticalCenter" type="Spring" line="563">
                    <scope line="564"/>
                </method>
                <method name="setVerticalCenter" type="void" line="569">
                    <params>
                        <param name="verticalCenter" type="Spring"/>
                    </params>
                </method>
                <method name="getBaseline" type="Spring" line="573">
                    <scope line="574"/>
                </method>
                <method name="setBaseline" type="void" line="579">
                    <params>
                        <param name="baseline" type="Spring"/>
                    </params>
                </method>
                <javadoc line="583">
                    Sets the spring controlling the specified edge.
                      The edge must have one of the following values:
                      &lt;code&gt;SpringLayout.NORTH&lt;/code&gt;,
                      &lt;code&gt;SpringLayout.SOUTH&lt;/code&gt;,
                      &lt;code&gt;SpringLayout.EAST&lt;/code&gt;,
                      &lt;code&gt;SpringLayout.WEST&lt;/code&gt;,
                      &lt;code&gt;SpringLayout.HORIZONTAL_CENTER&lt;/code&gt;,
                      &lt;code&gt;SpringLayout.VERTICAL_CENTER&lt;/code&gt;,
                      &lt;code&gt;SpringLayout.BASELINE&lt;/code&gt;,
                      &lt;code&gt;SpringLayout.WIDTH&lt;/code&gt; or
                      &lt;code&gt;SpringLayout.HEIGHT&lt;/code&gt;.
                      For any other &lt;code&gt;String&lt;/code&gt; value passed as the edge,
                      no action is taken. For a &lt;code&gt;null&lt;/code&gt; edge, a
                      &lt;code&gt;NullPointerException&lt;/code&gt; is thrown.
                      &lt;p/&gt;
                      &lt;b&gt;Note:&lt;/b&gt; This method can affect {@code x} and {@code y} values
                      previously set for this {@code Constraints}.                    
                    <param>
                        edgeName the edge to be set                        
                    </param>
                    <param>
                        s the spring controlling the specified edge                        
                    </param>
                    <throws>
                        NullPointerException if <code>edgeName</code> is <code>null</code>                        
                    </throws>
                    <see>
                        #getConstraint                        
                    </see>
                    <see>
                        #NORTH                        
                    </see>
                    <see>
                        #SOUTH                        
                    </see>
                    <see>
                        #EAST                        
                    </see>
                    <see>
                        #WEST                        
                    </see>
                    <see>
                        #HORIZONTAL_CENTER                        
                    </see>
                    <see>
                        #VERTICAL_CENTER                        
                    </see>
                    <see>
                        #BASELINE                        
                    </see>
                    <see>
                        #WIDTH                        
                    </see>
                    <see>
                        #HEIGHT                        
                    </see>
                    <see>
                        SpringLayout.Constraints                        
                    </see>
                </javadoc>
                <method name="setConstraint" type="void" line="616">
                    <params>
                        <param name="edgeName" type="String"/>
                        <param name="s" type="Spring"/>
                    </params>
                    <scope line="618"/>
                    <scope line="621"/>
                    <scope line="624"/>
                    <scope line="627"/>
                    <scope line="630"/>
                    <scope line="633"/>
                    <scope line="636"/>
                    <scope line="639"/>
                    <scope line="642"/>
                </method>
                <javadoc line="646">
                    Returns the value of the specified edge, which may be
                      a derived value, or even &lt;code&gt;null&lt;/code&gt;.
                      The edge must have one of the following values:
                      &lt;code&gt;SpringLayout.NORTH&lt;/code&gt;,
                      &lt;code&gt;SpringLayout.SOUTH&lt;/code&gt;,
                      &lt;code&gt;SpringLayout.EAST&lt;/code&gt;,
                      &lt;code&gt;SpringLayout.WEST&lt;/code&gt;,
                      &lt;code&gt;SpringLayout.HORIZONTAL_CENTER&lt;/code&gt;,
                      &lt;code&gt;SpringLayout.VERTICAL_CENTER&lt;/code&gt;,
                      &lt;code&gt;SpringLayout.BASELINE&lt;/code&gt;,
                      &lt;code&gt;SpringLayout.WIDTH&lt;/code&gt; or
                      &lt;code&gt;SpringLayout.HEIGHT&lt;/code&gt;.
                      For any other &lt;code&gt;String&lt;/code&gt; value passed as the edge,
                      &lt;code&gt;null&lt;/code&gt; will be returned. Throws
                      &lt;code&gt;NullPointerException&lt;/code&gt; for a &lt;code&gt;null&lt;/code&gt; edge.                    
                    <param>
                        edgeName the edge whose value
                          is to be returned                        
                    </param>
                    <return>
                        the spring controlling the specified edge, may be <code>null</code>                        
                    </return>
                    <throws>
                        NullPointerException if <code>edgeName</code> is <code>null</code>                        
                    </throws>
                    <see>
                        #setConstraint                        
                    </see>
                    <see>
                        #NORTH                        
                    </see>
                    <see>
                        #SOUTH                        
                    </see>
                    <see>
                        #EAST                        
                    </see>
                    <see>
                        #WEST                        
                    </see>
                    <see>
                        #HORIZONTAL_CENTER                        
                    </see>
                    <see>
                        #VERTICAL_CENTER                        
                    </see>
                    <see>
                        #BASELINE                        
                    </see>
                    <see>
                        #WIDTH                        
                    </see>
                    <see>
                        #HEIGHT                        
                    </see>
                    <see>
                        SpringLayout.Constraints                        
                    </see>
                </javadoc>
                <method name="getConstraint" type="Spring" line="678">
                    <params>
                        <param name="edgeName" type="String"/>
                    </params>
                </method>
                <method name="reset" type="void" line="682">
                    <declaration name="allSprings" type="Spring[]" line="683"/>
                    <scope line="684">
                        <scope line="685"/>
                    </scope>
                </method>
            </class>
            <class name="SpringProxy" line="691">
                <extends class="Spring"/>
                <declaration name="edgeName" type="String" line="692"/>
                <declaration name="c" type="Component" line="693"/>
                <declaration name="l" type="SpringLayout" line="694"/>
                <method name="SpringProxy" type="constructor" line="695">
                    <params>
                        <param name="edgeName" type="String"/>
                        <param name="c" type="Component"/>
                        <param name="l" type="SpringLayout"/>
                    </params>
                </method>
                <method name="getConstraint" type="Spring" line="700"/>
                <method name="getMinimumValue" type="int" line="703"/>
                <method name="getPreferredValue" type="int" line="706"/>
                <method name="getMaximumValue" type="int" line="709"/>
                <method name="getValue" type="int" line="712"/>
                <method name="setValue" type="void" line="715">
                    <params>
                        <param name="size" type="int"/>
                    </params>
                </method>
                <method name="isCyclic" type="boolean" line="718">
                    <params>
                        <param name="l" type="SpringLayout"/>
                    </params>
                </method>
                <method name="toString" type="String" line="721"/>
            </class>
            <javadoc line="725">
                Constructs a new &lt;code&gt;SpringLayout&lt;/code&gt;.                
            </javadoc>
            <method name="SpringLayout" type="constructor" line="728"/>
            <method name="resetCyclicStatuses" type="void" line="730"/>
            <method name="setParent" type="void" line="734">
                <params>
                    <param name="p" type="Container"/>
                </params>
                <declaration name="pc" type="Constraints" line="736"/>
                <declaration name="width" type="Spring" line="739"/>
                <scope line="740"/>
                <declaration name="height" type="Spring" line="743"/>
                <scope line="744"/>
            </method>
            <method name="isCyclic" type="boolean" line="748">
                <params>
                    <param name="s" type="Spring"/>
                </params>
                <scope line="749"/>
                <scope line="752"/>
                <scope line="755"/>
                <declaration name="result" type="boolean" line="759"/>
                <scope line="760"/>
                <scope line="764"/>
            </method>
            <method name="abandonCycles" type="Spring" line="769">
                <params>
                    <param name="s" type="Spring"/>
                </params>
            </method>
            <javadoc line="772">
                Has no effect,
                  since this layout manager does not
                  use a per-component string.                
            </javadoc>
            <method name="addLayoutComponent" type="void" line="777">
                <params>
                    <param name="name" type="String"/>
                    <param name="c" type="Component"/>
                </params>
            </method>
            <javadoc line="779">
                Removes the constraints associated with the specified component.                
                <param>
                    c the component being removed from the container                    
                </param>
            </javadoc>
            <method name="removeLayoutComponent" type="void" line="783">
                <params>
                    <param name="c" type="Component"/>
                </params>
            </method>
            <method name="addInsets" type="Dimension" line="786">
                <params>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="p" type="Container"/>
                </params>
                <declaration name="i" type="Insets" line="787"/>
            </method>
            <method name="minimumLayoutSize" type="Dimension" line="790">
                <params>
                    <param name="parent" type="Container"/>
                </params>
                <declaration name="pc" type="Constraints" line="792"/>
            </method>
            <method name="preferredLayoutSize" type="Dimension" line="795">
                <params>
                    <param name="parent" type="Container"/>
                </params>
                <declaration name="pc" type="Constraints" line="797"/>
            </method>
            <method name="maximumLayoutSize" type="Dimension" line="800">
                <params>
                    <param name="parent" type="Container"/>
                </params>
                <declaration name="pc" type="Constraints" line="802"/>
            </method>
            <javadoc line="805">
                If &lt;code&gt;constraints&lt;/code&gt; is an instance of
                  &lt;code&gt;SpringLayout.Constraints&lt;/code&gt;,
                  associates the constraints with the specified component.
                  &lt;p&gt;                
                <param>
                    component the component being added                    
                </param>
                <param>
                    constraints the component's constraints                    
                </param>
                <see>
                    SpringLayout.Constraints                    
                </see>
            </javadoc>
            <method name="addLayoutComponent" type="void" line="814">
                <params>
                    <param name="component" type="Component"/>
                    <param name="constraints" type="Object"/>
                </params>
                <scope line="815"/>
            </method>
            <javadoc line="819">
                Returns 0.5f (centered).                
            </javadoc>
            <method name="getLayoutAlignmentX" type="float" line="822">
                <params>
                    <param name="p" type="Container"/>
                </params>
            </method>
            <javadoc line="825">
                Returns 0.5f (centered).                
            </javadoc>
            <method name="getLayoutAlignmentY" type="float" line="828">
                <params>
                    <param name="p" type="Container"/>
                </params>
            </method>
            <method name="invalidateLayout" type="void" line="831">
                <params>
                    <param name="p" type="Container"/>
                </params>
            </method>
            <javadoc line="833">
                Links edge &lt;code&gt;e1&lt;/code&gt; of component &lt;code&gt;c1&lt;/code&gt; to
                  edge &lt;code&gt;e2&lt;/code&gt; of component &lt;code&gt;c2&lt;/code&gt;,
                  with a fixed distance between the edges. This
                  constraint will cause the assignment
                  &lt;pre&gt;
                  value(e1, c1) = value(e2, c2) + pad&lt;/pre&gt;
                  to take place during all subsequent layout operations.
                  &lt;p&gt;                
                <param>
                    e1 the edge of the dependent                    
                </param>
                <param>
                    c1 the component of the dependent                    
                </param>
                <param>
                    pad the fixed distance between dependent and anchor                    
                </param>
                <param>
                    e2 the edge of the anchor                    
                </param>
                <param>
                    c2 the component of the anchor                    
                </param>
                <see>
                    #putConstraint(String,Component,Spring,String,Component)                    
                </see>
            </javadoc>
            <method name="putConstraint" type="void" line="849">
                <params>
                    <param name="e1" type="String"/>
                    <param name="c1" type="Component"/>
                    <param name="pad" type="int"/>
                    <param name="e2" type="String"/>
                    <param name="c2" type="Component"/>
                </params>
            </method>
            <javadoc line="852">
                Links edge &lt;code&gt;e1&lt;/code&gt; of component &lt;code&gt;c1&lt;/code&gt; to
                  edge &lt;code&gt;e2&lt;/code&gt; of component &lt;code&gt;c2&lt;/code&gt;. As edge
                  &lt;code&gt;(e2, c2)&lt;/code&gt; changes value, edge &lt;code&gt;(e1, c1)&lt;/code&gt; will
                  be calculated by taking the (spring) sum of &lt;code&gt;(e2, c2)&lt;/code&gt;
                  and &lt;code&gt;s&lt;/code&gt;.
                  Each edge must have one of the following values:
                  &lt;code&gt;SpringLayout.NORTH&lt;/code&gt;,
                  &lt;code&gt;SpringLayout.SOUTH&lt;/code&gt;,
                  &lt;code&gt;SpringLayout.EAST&lt;/code&gt;,
                  &lt;code&gt;SpringLayout.WEST&lt;/code&gt;,
                  &lt;code&gt;SpringLayout.VERTICAL_CENTER&lt;/code&gt;,
                  &lt;code&gt;SpringLayout.HORIZONTAL_CENTER&lt;/code&gt; or
                  &lt;code&gt;SpringLayout.BASELINE&lt;/code&gt;.
                  &lt;p&gt;                
                <param>
                    e1 the edge of the dependent                    
                </param>
                <param>
                    c1 the component of the dependent                    
                </param>
                <param>
                    s the spring linking dependent and anchor                    
                </param>
                <param>
                    e2 the edge of the anchor                    
                </param>
                <param>
                    c2 the component of the anchor                    
                </param>
                <see>
                    #putConstraint(String,Component,int,String,Component)                    
                </see>
                <see>
                    #NORTH                    
                </see>
                <see>
                    #SOUTH                    
                </see>
                <see>
                    #EAST                    
                </see>
                <see>
                    #WEST                    
                </see>
                <see>
                    #VERTICAL_CENTER                    
                </see>
                <see>
                    #HORIZONTAL_CENTER                    
                </see>
                <see>
                    #BASELINE                    
                </see>
            </javadoc>
            <method name="putConstraint" type="void" line="881">
                <params>
                    <param name="e1" type="String"/>
                    <param name="c1" type="Component"/>
                    <param name="s" type="Spring"/>
                    <param name="e2" type="String"/>
                    <param name="c2" type="Component"/>
                </params>
            </method>
            <method name="putConstraint" type="void" line="884">
                <params>
                    <param name="e" type="String"/>
                    <param name="c" type="Component"/>
                    <param name="s" type="Spring"/>
                </params>
                <scope line="885"/>
            </method>
            <method name="applyDefaults" type="Constraints" line="889">
                <params>
                    <param name="c" type="Component"/>
                    <param name="constraints" type="Constraints"/>
                </params>
                <scope line="890"/>
                <scope line="893"/>
                <scope line="896"/>
                <scope line="899"/>
            </method>
            <method name="applyDefaults" type="void" line="904">
                <params>
                    <param name="constraints" type="Constraints"/>
                    <param name="name1" type="String"/>
                    <param name="spring1" type="Spring"/>
                    <param name="name2" type="String"/>
                    <param name="spring2" type="Spring"/>
                    <param name="history" type="List<String>"/>
                </params>
                <scope line="905"/>
                <scope line="909">
                    <scope line="910"/>
                    <scope line="913"/>
                </scope>
            </method>
            <method name="putConstraints" type="void" line="919">
                <params>
                    <param name="component" type="Component"/>
                    <param name="constraints" type="Constraints"/>
                </params>
            </method>
            <javadoc line="922">
                Returns the constraints for the specified component.
                  Note that,
                  unlike the &lt;code&gt;GridBagLayout&lt;/code&gt;
                  &lt;code&gt;getConstraints&lt;/code&gt; method,
                  this method does not clone constraints.
                  If no constraints
                  have been associated with this component,
                  this method
                  returns a default constraints object positioned at
                  0,0 relative to the parent&apos;s Insets and its width/height
                  constrained to the minimum, maximum, and preferred sizes of the
                  component. The size characteristics
                  are not frozen at the time this method is called;
                  instead this method returns a constraints object
                  whose characteristics track the characteristics
                  of the component as they change.                
                <param>
                    c the component whose constraints will be returned                    
                </param>
                <return>
                    the constraints for the specified component                    
                </return>
            </javadoc>
            <method name="getConstraints" type="Constraints" line="942">
                <params>
                    <param name="c" type="Component"/>
                </params>
                <declaration name="result" type="Constraints" line="943"/>
                <scope line="944">
                    <scope line="945">
                        <declaration name="cp" type="Object" line="946"/>
                        <scope line="947"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="956">
                Returns the spring controlling the distance between
                  the specified edge of
                  the component and the top or left edge of its parent. This
                  method, instead of returning the current binding for the
                  edge, returns a proxy that tracks the characteristics
                  of the edge even if the edge is subsequently rebound.
                  Proxies are intended to be used in builder envonments
                  where it is useful to allow the user to define the
                  constraints for a layout in any order. Proxies do, however,
                  provide the means to create cyclic dependencies amongst
                  the constraints of a layout. Such cycles are detected
                  internally by &lt;code&gt;SpringLayout&lt;/code&gt; so that
                  the layout operation always terminates.                
                <param>
                    edgeName must be one of
                      <code>SpringLayout.NORTH</code>,
                      <code>SpringLayout.SOUTH</code>,
                      <code>SpringLayout.EAST</code>,
                      <code>SpringLayout.WEST</code>,
                      <code>SpringLayout.VERTICAL_CENTER</code>,
                      <code>SpringLayout.HORIZONTAL_CENTER</code> or
                      <code>SpringLayout.BASELINE</code>                    
                </param>
                <param>
                    c the component whose edge spring is desired                    
                </param>
                <return>
                    a proxy for the spring controlling the distance between the
                      specified edge and the top or left edge of its parent                    
                </return>
                <see>
                    #NORTH                    
                </see>
                <see>
                    #SOUTH                    
                </see>
                <see>
                    #EAST                    
                </see>
                <see>
                    #WEST                    
                </see>
                <see>
                    #VERTICAL_CENTER                    
                </see>
                <see>
                    #HORIZONTAL_CENTER                    
                </see>
                <see>
                    #BASELINE                    
                </see>
            </javadoc>
            <method name="getConstraint" type="Spring" line="989">
                <params>
                    <param name="edgeName" type="String"/>
                    <param name="c" type="Component"/>
                </params>
            </method>
            <method name="layoutContainer" type="void" line="993">
                <params>
                    <param name="parent" type="Container"/>
                </params>
                <declaration name="n" type="int" line="995"/>
                <scope line="997"/>
                <declaration name="insets" type="Insets" line="1000"/>
                <declaration name="pc" type="Constraints" line="1001"/>
                <scope line="1006">
                    <declaration name="c" type="Component" line="1007"/>
                    <declaration name="cc" type="Constraints" line="1008"/>
                    <declaration name="x" type="int" line="1009"/>
                    <declaration name="y" type="int" line="1010"/>
                    <declaration name="width" type="int" line="1011"/>
                    <declaration name="height" type="int" line="1012"/>
                </scope>
            </method>
        </class>
    </source>