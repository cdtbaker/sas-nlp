<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.accessibility">
        <import package="java.util.Enumeration"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.Vector"/>
        <import package="java.util.Locale"/>
        <import package="java.util.MissingResourceException"/>
        <import package="java.util.ResourceBundle"/>
        <class name="AccessibleBundle" line="35">
            <comment line="127">
                Loads the Accessibility resource bundle if necessary.                
            </comment>
            <javadoc line="35">
                &lt;p&gt;Base class used to maintain a strongly typed enumeration.  This is
                  the superclass of {@link AccessibleState} and {@link AccessibleRole}.
                  &lt;p&gt;The toDisplayString method allows you to obtain the localized string
                  for a locale independent key from a predefined ResourceBundle for the
                  keys defined in this class.  This localized string is intended to be
                  readable by humans.                
                <see>
                    AccessibleRole                    
                </see>
                <see>
                    AccessibleState                    
                </see>
                <author>
                    Willie Walker                    
                </author>
                <author>
                    Peter Korn                    
                </author>
                <author>
                    Lynn Monsanto                    
                </author>
            </javadoc>
            <declaration name="table" type="Hashtable" line="52"/>
            <declaration name="defaultResourceBundleName" type="String" line="53"/>
            <method name="AccessibleBundle" type="constructor" line="56"/>
            <declaration name="key" type="String" line="59"/>
            <javadoc line="59">
                The locale independent name of the state.  This is a programmatic
                  name that is not intended to be read by humans.                
                <see>
                    #toDisplayString                    
                </see>
            </javadoc>
            <javadoc line="66">
                Obtains the key as a localized string.
                  If a localized string cannot be found for the key, the
                  locale independent key stored in the role will be returned.
                  This method is intended to be used only by subclasses so that they
                  can specify their own resource bundles which contain localized
                  strings for their keys.                
                <param>
                    resourceBundleName the name of the resource bundle to use for
                      lookup                    
                </param>
                <param>
                    locale the locale for which to obtain a localized string                    
                </param>
                <return>
                    a localized String for the key.                    
                </return>
            </javadoc>
            <method name="toDisplayString" type="String" line="79">
                <params>
                    <param name="resourceBundleName" type="String"/>
                    <param name="locale" type="Locale"/>
                </params>
                <comment line="82">
                    loads the resource bundle if necessary                    
                </comment>
                <comment line="85">
                    returns the localized string                    
                </comment>
                <declaration name="o" type="Object" line="85"/>
                <scope line="86">
                    <declaration name="resourceTable" type="Hashtable" line="87"/>
                    <scope line="90"/>
                </scope>
            </method>
            <javadoc line="97">
                Obtains the key as a localized string.
                  If a localized string cannot be found for the key, the
                  locale independent key stored in the role will be returned.                
                <param>
                    locale the locale for which to obtain a localized string                    
                </param>
                <return>
                    a localized String for the key.                    
                </return>
            </javadoc>
            <method name="toDisplayString" type="String" line="105">
                <params>
                    <param name="locale" type="Locale"/>
                </params>
            </method>
            <javadoc line="109">
                Gets localized string describing the key using the default locale.                
                <return>
                    a localized String describing the key for the default locale                    
                </return>
            </javadoc>
            <method name="toDisplayString" type="String" line="113"/>
            <javadoc line="117">
                Gets localized string describing the key using the default locale.                
                <return>
                    a localized String describing the key using the default locale                    
                </return>
                <see>
                    #toDisplayString                    
                </see>
            </javadoc>
            <method name="toString" type="String" line="122"/>
            <method name="loadResourceBundle" type="void" line="130">
                <params>
                    <param name="resourceBundleName" type="String"/>
                    <param name="locale" type="Locale"/>
                </params>
                <comment line="149">
                    Just return so toDisplayString() returns the
                     non-localized key.                    
                </comment>
                <scope line="131">
                    <scope line="133">
                        <declaration name="resourceTable" type="Hashtable" line="134"/>
                        <declaration name="bundle" type="ResourceBundle" line="136"/>
                        <declaration name="iter" type="Enumeration" line="138"/>
                        <scope line="139">
                            <declaration name="key" type="String" line="140"/>
                        </scope>
                    </scope>
                    <scope line="146"/>
                </scope>
            </method>
        </class>
    </source>