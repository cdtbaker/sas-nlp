<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.accessibility">
        <import package="java.util.Vector"/>
        <import package="java.util.Locale"/>
        <import package="java.util.MissingResourceException"/>
        <import package="java.util.ResourceBundle"/>
        <class name="AccessibleState" line="6">
            <extends class="AccessibleBundle"/>
            <javadoc line="6">
                &lt;P&gt;Class AccessibleState describes a component&apos;s particular state.  The actual
                  state of the component is defined as an AccessibleStateSet, which is a
                  composed set of AccessibleStates.
                  &lt;p&gt;The toDisplayString method allows you to obtain the localized string
                  for a locale independent key from a predefined ResourceBundle for the
                  keys defined in this class.
                  &lt;p&gt;The constants in this class present a strongly typed enumeration
                  of common object roles.  A public constructor for this class has been
                  purposely omitted and applications should use one of the constants
                  from this class.  If the constants in this class are not sufficient
                  to describe the role of an object, a subclass should be generated
                  from this class and it should provide constants in a similar manner.                
                <author>
                    Willie Walker                    
                </author>
                <author>
                    Peter Korn                    
                </author>
            </javadoc>
            <declaration name="ACTIVE" type="AccessibleState" line="23"/>
            <javadoc line="23">
                Indicates a window is currently the active window.  This includes
                  windows, dialogs, frames, etc.  In addition, this state is used
                  to indicate the currently active child of a component such as a
                  list, table, or tree.  For example, the active child of a list
                  is the child that is drawn with a rectangle around it.                
                <see>
                    AccessibleRole#WINDOW                    
                </see>
                <see>
                    AccessibleRole#FRAME                    
                </see>
                <see>
                    AccessibleRole#DIALOG                    
                </see>
            </javadoc>
            <declaration name="PRESSED" type="AccessibleState" line="34"/>
            <javadoc line="34">
                Indicates this object is currently pressed.  This is usually
                  associated with buttons and indicates the user has pressed a
                  mouse button while the pointer was over the button and has
                  not yet released the mouse button.                
                <see>
                    AccessibleRole#PUSH_BUTTON                    
                </see>
            </javadoc>
            <declaration name="ARMED" type="AccessibleState" line="42"/>
            <javadoc line="42">
                Indicates that the object is armed.  This is usually used on buttons
                  that have been pressed but not yet released, and the mouse pointer
                  is still over the button.                
                <see>
                    AccessibleRole#PUSH_BUTTON                    
                </see>
            </javadoc>
            <declaration name="BUSY" type="AccessibleState" line="49"/>
            <javadoc line="49">
                Indicates the current object is busy.  This is usually used on objects
                  such as progress bars, sliders, or scroll bars to indicate they are
                  in a state of transition.                
                <see>
                    AccessibleRole#PROGRESS_BAR                    
                </see>
                <see>
                    AccessibleRole#SCROLL_BAR                    
                </see>
                <see>
                    AccessibleRole#SLIDER                    
                </see>
            </javadoc>
            <declaration name="CHECKED" type="AccessibleState" line="58"/>
            <javadoc line="58">
                Indicates this object is currently checked.  This is usually used on
                  objects such as toggle buttons, radio buttons, and check boxes.                
                <see>
                    AccessibleRole#TOGGLE_BUTTON                    
                </see>
                <see>
                    AccessibleRole#RADIO_BUTTON                    
                </see>
                <see>
                    AccessibleRole#CHECK_BOX                    
                </see>
            </javadoc>
            <declaration name="EDITABLE" type="AccessibleState" line="66"/>
            <javadoc line="66">
                Indicates the user can change the contents of this object.  This
                  is usually used primarily for objects that allow the user to
                  enter text.  Other objects, such as scroll bars and sliders,
                  are automatically editable if they are enabled.                
                <see>
                    #ENABLED                    
                </see>
            </javadoc>
            <declaration name="EXPANDABLE" type="AccessibleState" line="74"/>
            <javadoc line="74">
                Indicates this object allows progressive disclosure of its children.
                  This is usually used with hierarchical objects such as trees and
                  is often paired with the EXPANDED or COLLAPSED states.                
                <see>
                    #EXPANDED                    
                </see>
                <see>
                    #COLLAPSED                    
                </see>
                <see>
                    AccessibleRole#TREE                    
                </see>
            </javadoc>
            <declaration name="COLLAPSED" type="AccessibleState" line="83"/>
            <javadoc line="83">
                Indicates this object is collapsed.  This is usually paired with the
                  EXPANDABLE state and is used on objects that provide progressive
                  disclosure such as trees.                
                <see>
                    #EXPANDABLE                    
                </see>
                <see>
                    #EXPANDED                    
                </see>
                <see>
                    AccessibleRole#TREE                    
                </see>
            </javadoc>
            <declaration name="EXPANDED" type="AccessibleState" line="92"/>
            <javadoc line="92">
                Indicates this object is expanded.  This is usually paired with the
                  EXPANDABLE state and is used on objects that provide progressive
                  disclosure such as trees.                
                <see>
                    #EXPANDABLE                    
                </see>
                <see>
                    #COLLAPSED                    
                </see>
                <see>
                    AccessibleRole#TREE                    
                </see>
            </javadoc>
            <declaration name="ENABLED" type="AccessibleState" line="101"/>
            <javadoc line="101">
                Indicates this object is enabled.  The absence of this state from an
                  object&apos;s state set indicates this object is not enabled.  An object
                  that is not enabled cannot be manipulated by the user.  In a graphical
                  display, it is usually grayed out.                
            </javadoc>
            <declaration name="FOCUSABLE" type="AccessibleState" line="108"/>
            <javadoc line="108">
                Indicates this object can accept keyboard focus, which means all
                  events resulting from typing on the keyboard will normally be
                  passed to it when it has focus.                
                <see>
                    #FOCUSED                    
                </see>
            </javadoc>
            <declaration name="FOCUSED" type="AccessibleState" line="115"/>
            <javadoc line="115">
                Indicates this object currently has the keyboard focus.                
                <see>
                    #FOCUSABLE                    
                </see>
            </javadoc>
            <declaration name="ICONIFIED" type="AccessibleState" line="120"/>
            <javadoc line="120">
                Indicates this object is minimized and is represented only by an
                  icon.  This is usually only associated with frames and internal
                  frames.                
                <see>
                    AccessibleRole#FRAME                    
                </see>
                <see>
                    AccessibleRole#INTERNAL_FRAME                    
                </see>
            </javadoc>
            <declaration name="MODAL" type="AccessibleState" line="128"/>
            <javadoc line="128">
                Indicates something must be done with this object before the
                  user can interact with an object in a different window.  This
                  is usually associated only with dialogs.                
                <see>
                    AccessibleRole#DIALOG                    
                </see>
            </javadoc>
            <declaration name="OPAQUE" type="AccessibleState" line="135"/>
            <javadoc line="135">
                Indicates this object paints every pixel within its
                  rectangular region. A non-opaque component paints only some of
                  its pixels, allowing the pixels underneath it to &quot;show through&quot;.
                  A component that does not fully paint its pixels therefore
                  provides a degree of transparency.                
                <see>
                    Accessible#getAccessibleContext                    
                </see>
                <see>
                    AccessibleContext#getAccessibleComponent                    
                </see>
                <see>
                    AccessibleComponent#getBounds                    
                </see>
            </javadoc>
            <declaration name="RESIZABLE" type="AccessibleState" line="146"/>
            <javadoc line="146">
                Indicates the size of this object is not fixed.                
                <see>
                    Accessible#getAccessibleContext                    
                </see>
                <see>
                    AccessibleContext#getAccessibleComponent                    
                </see>
                <see>
                    AccessibleComponent#getSize                    
                </see>
                <see>
                    AccessibleComponent#setSize                    
                </see>
            </javadoc>
            <declaration name="MULTISELECTABLE" type="AccessibleState" line="154"/>
            <javadoc line="154">
                Indicates this object allows more than one of its children to
                  be selected at the same time.                
                <see>
                    Accessible#getAccessibleContext                    
                </see>
                <see>
                    AccessibleContext#getAccessibleSelection                    
                </see>
                <see>
                    AccessibleSelection                    
                </see>
            </javadoc>
            <declaration name="SELECTABLE" type="AccessibleState" line="162"/>
            <javadoc line="162">
                Indicates this object is the child of an object that allows its
                  children to be selected, and that this child is one of those
                  children that can be selected.                
                <see>
                    #SELECTED                    
                </see>
                <see>
                    Accessible#getAccessibleContext                    
                </see>
                <see>
                    AccessibleContext#getAccessibleSelection                    
                </see>
                <see>
                    AccessibleSelection                    
                </see>
            </javadoc>
            <declaration name="SELECTED" type="AccessibleState" line="172"/>
            <javadoc line="172">
                Indicates this object is the child of an object that allows its
                  children to be selected, and that this child is one of those
                  children that has been selected.                
                <see>
                    #SELECTABLE                    
                </see>
                <see>
                    Accessible#getAccessibleContext                    
                </see>
                <see>
                    AccessibleContext#getAccessibleSelection                    
                </see>
                <see>
                    AccessibleSelection                    
                </see>
            </javadoc>
            <declaration name="SHOWING" type="AccessibleState" line="182"/>
            <javadoc line="182">
                Indicates this object, the object&apos;s parent, the object&apos;s parent&apos;s
                  parent, and so on, are all visible.  Note that this does not
                  necessarily mean the object is painted on the screen.  It might
                  be occluded by some other showing object.                
                <see>
                    #VISIBLE                    
                </see>
            </javadoc>
            <declaration name="VISIBLE" type="AccessibleState" line="190"/>
            <javadoc line="190">
                Indicates this object is visible.  Note: this means that the
                  object intends to be visible; however, it may not in fact be
                  showing on the screen because one of the objects that this object
                  is contained by is not visible.                
                <see>
                    #SHOWING                    
                </see>
            </javadoc>
            <declaration name="VERTICAL" type="AccessibleState" line="198"/>
            <javadoc line="198">
                Indicates the orientation of this object is vertical.  This is
                  usually associated with objects such as scrollbars, sliders, and
                  progress bars.                
                <see>
                    #VERTICAL                    
                </see>
                <see>
                    AccessibleRole#SCROLL_BAR                    
                </see>
                <see>
                    AccessibleRole#SLIDER                    
                </see>
                <see>
                    AccessibleRole#PROGRESS_BAR                    
                </see>
            </javadoc>
            <declaration name="HORIZONTAL" type="AccessibleState" line="208"/>
            <javadoc line="208">
                Indicates the orientation of this object is horizontal.  This is
                  usually associated with objects such as scrollbars, sliders, and
                  progress bars.                
                <see>
                    #HORIZONTAL                    
                </see>
                <see>
                    AccessibleRole#SCROLL_BAR                    
                </see>
                <see>
                    AccessibleRole#SLIDER                    
                </see>
                <see>
                    AccessibleRole#PROGRESS_BAR                    
                </see>
            </javadoc>
            <declaration name="SINGLE_LINE" type="AccessibleState" line="218"/>
            <javadoc line="218">
                Indicates this (text) object can contain only a single line of text                
            </javadoc>
            <declaration name="MULTI_LINE" type="AccessibleState" line="222"/>
            <javadoc line="222">
                Indicates this (text) object can contain multiple lines of text                
            </javadoc>
            <declaration name="TRANSIENT" type="AccessibleState" line="226"/>
            <javadoc line="226">
                Indicates this object is transient.  An assistive technology should
                  not add a PropertyChange listener to an object with transient state,
                  as that object will never generate any events.  Transient objects
                  are typically created to answer Java Accessibility method queries,
                  but otherwise do not remain linked to the underlying object (for
                  example, those objects underneath lists, tables, and trees in Swing,
                  where only one actual UI Component does shared rendering duty for
                  all of the data objects underneath the actual list/table/tree elements).                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="MANAGES_DESCENDANTS" type="AccessibleState" line="238"/>
            <javadoc line="238">
                Indicates this object is responsible for managing its
                  subcomponents.  This is typically used for trees and tables
                  that have a large number of subcomponents and where the
                  objects are created only when needed and otherwise remain virtual.
                  The application should not manage the subcomponents directly.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="INDETERMINATE" type="AccessibleState" line="247"/>
            <javadoc line="247">
                Indicates that the object state is indeterminate.  An example
                  is selected text that is partially bold and partially not
                  bold. In this case the attributes associated with the selected
                  text are indeterminate.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="TRUNCATED" type="AccessibleState" line="255"/>
            <javadoc line="255">
                A state indicating that text is truncated by a bounding rectangle
                  and that some of the text is not displayed on the screen.  An example
                  is text in a spreadsheet cell that is truncated by the bounds of
                  the cell.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <javadoc line="263">
                Creates a new AccessibleState using the given locale independent key.
                  This should not be a public method.  Instead, it is used to create
                  the constants in this file to make it a strongly typed enumeration.
                  Subclasses of this class should enforce similar policy.
                  &lt;p&gt;
                  The key String should be a locale independent key for the state.
                  It is not intended to be used as the actual String to display
                  to the user.  To get the localized string, use toDisplayString.                
                <param>
                    key the locale independent name of the state.                    
                </param>
                <see>
                    AccessibleBundle#toDisplayString                    
                </see>
            </javadoc>
            <method name="AccessibleState" type="constructor" line="275">
                <params>
                    <param name="key" type="String"/>
                </params>
            </method>
        </class>
    </source>