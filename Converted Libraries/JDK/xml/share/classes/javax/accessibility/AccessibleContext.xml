<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.accessibility">
        <import package="java.util.Locale"/>
        <import package="java.beans.PropertyChangeListener"/>
        <import package="java.beans.PropertyChangeSupport"/>
        <import package="java.beans.PropertyChangeEvent"/>
        <import package="java.awt.IllegalComponentStateException"/>
        <class name="AccessibleContext" line="7">
            <javadoc line="7">
                AccessibleContext represents the minimum information all accessible objects
                  return.  This information includes the accessible name, description, role,
                  and state of the object, as well as information about its parent and
                  children.  AccessibleContext also contains methods for
                  obtaining more specific accessibility information about a component.
                  If the component supports them, these methods will return an object that
                  implements one or more of the following interfaces:
                  &lt;P&gt;&lt;ul&gt;
                  &lt;li&gt;{@link AccessibleAction} - the object can perform one or more actions.
                  This interface provides the standard mechanism for an assistive
                  technology to determine what those actions are and tell the object
                  to perform them.  Any object that can be manipulated should
                  support this interface.
                  &lt;li&gt;{@link AccessibleComponent} - the object has a graphical representation.
                  This interface provides the standard mechanism for an assistive
                  technology to determine and set the graphical representation of the
                  object.  Any object that is rendered on the screen should support
                  this interface.
                  &lt;li&gt;{@link AccessibleSelection} - the object allows its children to be
                  selected.  This interface provides the standard mechanism for an
                  assistive technology to determine the currently selected children of the object
                  as well as modify its selection set.  Any object that has children
                  that can be selected should support this interface.
                  &lt;li&gt;{@link AccessibleText} - the object presents editable textual information
                  on the display.  This interface provides the standard mechanism for
                  an assistive technology to access that text via its content, attributes,
                  and spatial location.  Any object that contains editable text should
                  support this interface.
                  &lt;li&gt;{@link AccessibleValue} - the object supports a numerical value.  This
                  interface provides the standard mechanism for an assistive technology
                  to determine and set the current value of the object, as well as obtain its
                  minimum and maximum values.  Any object that supports a numerical value
                  should support this interface.&lt;/ul&gt;                
                <beaninfoattribute>
                    : isContainer false
                      description: Minimal information that all accessible objects return                    
                </beaninfoattribute>
                <author>
                    Peter Korn                    
                </author>
                <author>
                    Hans Muller                    
                </author>
                <author>
                    Willie Walker                    
                </author>
                <author>
                    Lynn Monsanto                    
                </author>
            </javadoc>
            <declaration name="ACCESSIBLE_NAME_PROPERTY" type="String" line="49"/>
            <javadoc line="49">
                Constant used to determine when the accessibleName property has
                  changed.  The old value in the PropertyChangeEvent will be the old
                  accessibleName and the new value will be the new accessibleName.                
                <see>
                    #getAccessibleName                    
                </see>
                <see>
                    #addPropertyChangeListener                    
                </see>
            </javadoc>
            <declaration name="ACCESSIBLE_DESCRIPTION_PROPERTY" type="String" line="57"/>
            <javadoc line="57">
                Constant used to determine when the accessibleDescription property has
                  changed.  The old value in the PropertyChangeEvent will be the
                  old accessibleDescription and the new value will be the new
                  accessibleDescription.                
                <see>
                    #getAccessibleDescription                    
                </see>
                <see>
                    #addPropertyChangeListener                    
                </see>
            </javadoc>
            <declaration name="ACCESSIBLE_STATE_PROPERTY" type="String" line="66"/>
            <javadoc line="66">
                Constant used to determine when the accessibleStateSet property has
                  changed.  The old value will be the old AccessibleState and the new
                  value will be the new AccessibleState in the accessibleStateSet.
                  For example, if a component that supports the vertical and horizontal
                  states changes its orientation from vertical to horizontal, the old
                  value will be AccessibleState.VERTICAL and the new value will be
                  AccessibleState.HORIZONTAL.  Please note that either value can also
                  be null.  For example, when a component changes from being enabled
                  to disabled, the old value will be AccessibleState.ENABLED
                  and the new value will be null.                
                <see>
                    #getAccessibleStateSet                    
                </see>
                <see>
                    AccessibleState                    
                </see>
                <see>
                    AccessibleStateSet                    
                </see>
                <see>
                    #addPropertyChangeListener                    
                </see>
            </javadoc>
            <declaration name="ACCESSIBLE_VALUE_PROPERTY" type="String" line="83"/>
            <javadoc line="83">
                Constant used to determine when the accessibleValue property has
                  changed.  The old value in the PropertyChangeEvent will be a Number
                  representing the old value and the new value will be a Number
                  representing the new value                
                <see>
                    #getAccessibleValue                    
                </see>
                <see>
                    #addPropertyChangeListener                    
                </see>
            </javadoc>
            <declaration name="ACCESSIBLE_SELECTION_PROPERTY" type="String" line="92"/>
            <javadoc line="92">
                Constant used to determine when the accessibleSelection has changed.
                  The old and new values in the PropertyChangeEvent are currently
                  reserved for future use.                
                <see>
                    #getAccessibleSelection                    
                </see>
                <see>
                    #addPropertyChangeListener                    
                </see>
            </javadoc>
            <declaration name="ACCESSIBLE_CARET_PROPERTY" type="String" line="100"/>
            <javadoc line="100">
                Constant used to determine when the accessibleText caret has changed.
                  The old value in the PropertyChangeEvent will be an
                  integer representing the old caret position, and the new value will
                  be an integer representing the new/current caret position.                
                <see>
                    #addPropertyChangeListener                    
                </see>
            </javadoc>
            <declaration name="ACCESSIBLE_VISIBLE_DATA_PROPERTY" type="String" line="108"/>
            <javadoc line="108">
                Constant used to determine when the visual appearance of the object
                  has changed.  The old and new values in the PropertyChangeEvent are
                  currently reserved for future use.                
                <see>
                    #addPropertyChangeListener                    
                </see>
            </javadoc>
            <declaration name="ACCESSIBLE_CHILD_PROPERTY" type="String" line="115"/>
            <javadoc line="115">
                Constant used to determine when Accessible children are added/removed
                  from the object.  If an Accessible child is being added, the old
                  value will be null and the new value will be the Accessible child.  If an
                  Accessible child is being removed, the old value will be the Accessible
                  child, and the new value will be null.                
                <see>
                    #addPropertyChangeListener                    
                </see>
            </javadoc>
            <declaration name="ACCESSIBLE_ACTIVE_DESCENDANT_PROPERTY" type="String" line="124"/>
            <javadoc line="124">
                Constant used to determine when the active descendant of a component
                  has changed.  The active descendant is used for objects such as
                  list, tree, and table, which may have transient children.  When the
                  active descendant has changed, the old value of the property change
                  event will be the Accessible representing the previous active child, and
                  the new value will be the Accessible representing the current active
                  child.                
                <see>
                    #addPropertyChangeListener                    
                </see>
            </javadoc>
            <declaration name="ACCESSIBLE_TABLE_CAPTION_CHANGED" type="String" line="135"/>
            <javadoc line="135">
                Constant used to indicate that the table caption has changed
                  The old value in the PropertyChangeEvent will be an Accessible
                  representing the previous table caption and the new value will
                  be an Accessible representing the new table caption.                
                <see>
                    Accessible                    
                </see>
                <see>
                    AccessibleTable                    
                </see>
            </javadoc>
            <declaration name="ACCESSIBLE_TABLE_SUMMARY_CHANGED" type="String" line="144"/>
            <javadoc line="144">
                Constant used to indicate that the table summary has changed
                  The old value in the PropertyChangeEvent will be an Accessible
                  representing the previous table summary and the new value will
                  be an Accessible representing the new table summary.                
                <see>
                    Accessible                    
                </see>
                <see>
                    AccessibleTable                    
                </see>
            </javadoc>
            <declaration name="ACCESSIBLE_TABLE_MODEL_CHANGED" type="String" line="153"/>
            <javadoc line="153">
                Constant used to indicate that table data has changed.
                  The old value in the PropertyChangeEvent will be null and the
                  new value will be an AccessibleTableModelChange representing
                  the table change.                
                <see>
                    AccessibleTable                    
                </see>
                <see>
                    AccessibleTableModelChange                    
                </see>
            </javadoc>
            <declaration name="ACCESSIBLE_TABLE_ROW_HEADER_CHANGED" type="String" line="162"/>
            <javadoc line="162">
                Constant used to indicate that the row header has changed
                  The old value in the PropertyChangeEvent will be null and the
                  new value will be an AccessibleTableModelChange representing
                  the header change.                
                <see>
                    AccessibleTable                    
                </see>
                <see>
                    AccessibleTableModelChange                    
                </see>
            </javadoc>
            <declaration name="ACCESSIBLE_TABLE_ROW_DESCRIPTION_CHANGED" type="String" line="171"/>
            <javadoc line="171">
                Constant used to indicate that the row description has changed
                  The old value in the PropertyChangeEvent will be null and the
                  new value will be an Integer representing the row index.                
                <see>
                    AccessibleTable                    
                </see>
            </javadoc>
            <declaration name="ACCESSIBLE_TABLE_COLUMN_HEADER_CHANGED" type="String" line="178"/>
            <javadoc line="178">
                Constant used to indicate that the column header has changed
                  The old value in the PropertyChangeEvent will be null and the
                  new value will be an AccessibleTableModelChange representing
                  the header change.                
                <see>
                    AccessibleTable                    
                </see>
                <see>
                    AccessibleTableModelChange                    
                </see>
            </javadoc>
            <declaration name="ACCESSIBLE_TABLE_COLUMN_DESCRIPTION_CHANGED" type="String" line="187"/>
            <javadoc line="187">
                Constant used to indicate that the column description has changed
                  The old value in the PropertyChangeEvent will be null and the
                  new value will be an Integer representing the column index.                
                <see>
                    AccessibleTable                    
                </see>
            </javadoc>
            <declaration name="ACCESSIBLE_ACTION_PROPERTY" type="String" line="194"/>
            <javadoc line="194">
                Constant used to indicate that the supported set of actions
                  has changed.  The old value in the PropertyChangeEvent will
                  be an Integer representing the old number of actions supported
                  and the new value will be an Integer representing the new
                  number of actions supported.                
                <see>
                    AccessibleAction                    
                </see>
            </javadoc>
            <declaration name="ACCESSIBLE_HYPERTEXT_OFFSET" type="String" line="203"/>
            <javadoc line="203">
                Constant used to indicate that a hypertext element has received focus.
                  The old value in the PropertyChangeEvent will be an Integer
                  representing the start index in the document of the previous element
                  that had focus and the new value will be an Integer representing
                  the start index in the document of the current element that has
                  focus.  A value of -1 indicates that an element does not or did
                  not have focus.                
                <see>
                    AccessibleHyperlink                    
                </see>
            </javadoc>
            <declaration name="ACCESSIBLE_TEXT_PROPERTY" type="String" line="214"/>
            <javadoc line="214">
                PropertyChangeEvent which indicates that text has changed.
                  &lt;br&gt;
                  For text insertion, the oldValue is null and the newValue
                  is an AccessibleTextSequence specifying the text that was
                  inserted.
                  &lt;br&gt;
                  For text deletion, the oldValue is an AccessibleTextSequence
                  specifying the text that was deleted and the newValue is null.
                  &lt;br&gt;
                  For text replacement, the oldValue is an AccessibleTextSequence
                  specifying the old text and the newValue is an AccessibleTextSequence
                  specifying the new text.                
                <see>
                    #getAccessibleText                    
                </see>
                <see>
                    #addPropertyChangeListener                    
                </see>
                <see>
                    AccessibleTextSequence                    
                </see>
            </javadoc>
            <declaration name="ACCESSIBLE_INVALIDATE_CHILDREN" type="String" line="232"/>
            <javadoc line="232">
                PropertyChangeEvent which indicates that a significant change
                  has occurred to the children of a component like a tree or text.
                  This change notifies the event listener that it needs to
                  reacquire the state of the subcomponents. The oldValue is
                  null and the newValue is the component whose children have
                  become invalid.                
                <see>
                    #getAccessibleText                    
                </see>
                <see>
                    #addPropertyChangeListener                    
                </see>
                <see>
                    AccessibleTextSequence                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="ACCESSIBLE_TEXT_ATTRIBUTES_CHANGED" type="String" line="245"/>
            <javadoc line="245">
                PropertyChangeEvent which indicates that text attributes have changed.
                  &lt;br&gt;
                  For attribute insertion, the oldValue is null and the newValue
                  is an AccessibleAttributeSequence specifying the attributes that were
                  inserted.
                  &lt;br&gt;
                  For attribute deletion, the oldValue is an AccessibleAttributeSequence
                  specifying the attributes that were deleted and the newValue is null.
                  &lt;br&gt;
                  For attribute replacement, the oldValue is an AccessibleAttributeSequence
                  specifying the old attributes and the newValue is an
                  AccessibleAttributeSequence specifying the new attributes.                
                <see>
                    #getAccessibleText                    
                </see>
                <see>
                    #addPropertyChangeListener                    
                </see>
                <see>
                    AccessibleAttributeSequence                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="ACCESSIBLE_COMPONENT_BOUNDS_CHANGED" type="String" line="264"/>
            <javadoc line="264">
                PropertyChangeEvent which indicates that a change has occurred
                  in a component&apos;s bounds.
                  The oldValue is the old component bounds and the newValue is
                  the new component bounds.                
                <see>
                    #addPropertyChangeListener                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="accessibleParent" type="Accessible" line="273"/>
            <javadoc line="273">
                The accessible parent of this object.                
                <see>
                    #getAccessibleParent                    
                </see>
                <see>
                    #setAccessibleParent                    
                </see>
            </javadoc>
            <declaration name="accessibleName" type="String" line="279"/>
            <javadoc line="279">
                A localized String containing the name of the object.                
                <see>
                    #getAccessibleName                    
                </see>
                <see>
                    #setAccessibleName                    
                </see>
            </javadoc>
            <declaration name="accessibleDescription" type="String" line="285"/>
            <javadoc line="285">
                A localized String containing the description of the object.                
                <see>
                    #getAccessibleDescription                    
                </see>
                <see>
                    #setAccessibleDescription                    
                </see>
            </javadoc>
            <declaration name="accessibleChangeSupport" type="PropertyChangeSupport" line="291"/>
            <javadoc line="291">
                Used to handle the listener list for property change events.                
                <see>
                    #addPropertyChangeListener                    
                </see>
                <see>
                    #removePropertyChangeListener                    
                </see>
                <see>
                    #firePropertyChangeListener                    
                </see>
            </javadoc>
            <declaration name="relationSet" type="AccessibleRelationSet" line="298"/>
            <javadoc line="298">
                Used to represent the context&apos;s relation set                
                <see>
                    #getAccessibleRelationSet                    
                </see>
            </javadoc>
            <javadoc line="303">
                Gets the accessibleName property of this object.  The accessibleName
                  property of an object is a localized String that designates the purpose
                  of the object.  For example, the accessibleName property of a label
                  or button might be the text of the label or button itself.  In the
                  case of an object that doesn&apos;t display its name, the accessibleName
                  should still be set.  For example, in the case of a text field used
                  to enter the name of a city, the accessibleName for the en_US locale
                  could be &apos;city.&apos;                
                <return>
                    the localized name of the object; null if this
                      object does not have a name                    
                </return>
                <see>
                    #setAccessibleName                    
                </see>
            </javadoc>
            <method name="getAccessibleName" type="String" line="316"/>
            <javadoc line="319">
                Sets the localized accessible name of this object.  Changing the
                  name will cause a PropertyChangeEvent to be fired for the
                  ACCESSIBLE_NAME_PROPERTY property.                
                <param>
                    s the new localized name of the object.                    
                </param>
                <see>
                    #getAccessibleName                    
                </see>
                <see>
                    #addPropertyChangeListener                    
                </see>
                <beaninfopreferred>
                    :   true
                      description: Sets the accessible name for the component.                    
                </beaninfopreferred>
            </javadoc>
            <method name="setAccessibleName" type="void" line="329">
                <params>
                    <param name="s" type="String"/>
                </params>
                <declaration name="oldName" type="String" line="330"/>
            </method>
            <javadoc line="334">
                Gets the accessibleDescription property of this object.  The
                  accessibleDescription property of this object is a short localized
                  phrase describing the purpose of the object.  For example, in the
                  case of a &apos;Cancel&apos; button, the accessibleDescription could be
                  &apos;Ignore changes and close dialog box.&apos;                
                <return>
                    the localized description of the object; null if
                      this object does not have a description                    
                </return>
                <see>
                    #setAccessibleDescription                    
                </see>
            </javadoc>
            <method name="getAccessibleDescription" type="String" line="344"/>
            <javadoc line="347">
                Sets the accessible description of this object.  Changing the
                  name will cause a PropertyChangeEvent to be fired for the
                  ACCESSIBLE_DESCRIPTION_PROPERTY property.                
                <param>
                    s the new localized description of the object                    
                </param>
                <see>
                    #setAccessibleName                    
                </see>
                <see>
                    #addPropertyChangeListener                    
                </see>
                <beaninfopreferred>
                    :   true
                      description: Sets the accessible description for the component.                    
                </beaninfopreferred>
            </javadoc>
            <method name="setAccessibleDescription" type="void" line="357">
                <params>
                    <param name="s" type="String"/>
                </params>
                <declaration name="oldDescription" type="String" line="358"/>
            </method>
            <method name="getAccessibleRole" type="AccessibleRole" line="362"/>
            <javadoc line="362">
                Gets the role of this object.  The role of the object is the generic
                  purpose or use of the class of this object.  For example, the role
                  of a push button is AccessibleRole.PUSH_BUTTON.  The roles in
                  AccessibleRole are provided so component developers can pick from
                  a set of predefined roles.  This enables assistive technologies to
                  provide a consistent interface to various tweaked subclasses of
                  components (e.g., use AccessibleRole.PUSH_BUTTON for all components
                  that act like a push button) as well as distinguish between sublasses
                  that behave differently (e.g., AccessibleRole.CHECK_BOX for check boxes
                  and AccessibleRole.RADIO_BUTTON for radio buttons).
                  &lt;p&gt;Note that the AccessibleRole class is also extensible, so
                  custom component developers can define their own AccessibleRole&apos;s
                  if the set of predefined roles is inadequate.                
                <return>
                    an instance of AccessibleRole describing the role of the object                    
                </return>
                <see>
                    AccessibleRole                    
                </see>
            </javadoc>
            <method name="getAccessibleStateSet" type="AccessibleStateSet" line="380"/>
            <javadoc line="380">
                Gets the state set of this object.  The AccessibleStateSet of an object
                  is composed of a set of unique AccessibleStates.  A change in the
                  AccessibleStateSet of an object will cause a PropertyChangeEvent to
                  be fired for the ACCESSIBLE_STATE_PROPERTY property.                
                <return>
                    an instance of AccessibleStateSet containing the
                      current state set of the object                    
                </return>
                <see>
                    AccessibleStateSet                    
                </see>
                <see>
                    AccessibleState                    
                </see>
                <see>
                    #addPropertyChangeListener                    
                </see>
            </javadoc>
            <javadoc line="392">
                Gets the Accessible parent of this object.                
                <return>
                    the Accessible parent of this object; null if this
                      object does not have an Accessible parent                    
                </return>
            </javadoc>
            <method name="getAccessibleParent" type="Accessible" line="397"/>
            <javadoc line="400">
                Sets the Accessible parent of this object.  This is meant to be used
                  only in the situations where the actual component&apos;s parent should
                  not be treated as the component&apos;s accessible parent and is a method
                  that should only be called by the parent of the accessible child.                
                <param>
                    a - Accessible to be set as the parent                    
                </param>
            </javadoc>
            <method name="setAccessibleParent" type="void" line="407">
                <params>
                    <param name="a" type="Accessible"/>
                </params>
            </method>
            <method name="getAccessibleIndexInParent" type="int" line="410"/>
            <javadoc line="410">
                Gets the 0-based index of this object in its accessible parent.                
                <return>
                    the 0-based index of this object in its parent; -1 if this
                      object does not have an accessible parent.                    
                </return>
                <see>
                    #getAccessibleParent                    
                </see>
                <see>
                    #getAccessibleChildrenCount                    
                </see>
                <see>
                    #getAccessibleChild                    
                </see>
            </javadoc>
            <method name="getAccessibleChildrenCount" type="int" line="419"/>
            <javadoc line="419">
                Returns the number of accessible children of the object.                
                <return>
                    the number of accessible children of the object.                    
                </return>
            </javadoc>
            <method name="getAccessibleChild" type="Accessible" line="424"/>
            <javadoc line="424">
                Returns the specified Accessible child of the object.  The Accessible
                  children of an Accessible object are zero-based, so the first child
                  of an Accessible child is at index 0, the second child is at index 1,
                  and so on.                
                <param>
                    i zero-based index of child                    
                </param>
                <return>
                    the Accessible child of the object                    
                </return>
                <see>
                    #getAccessibleChildrenCount                    
                </see>
            </javadoc>
            <method name="getLocale" type="Locale" line="434"/>
            <javadoc line="434">
                Gets the locale of the component. If the component does not have a
                  locale, then the locale of its parent is returned.                
                <return>
                    this component&apos;s locale.  If this component does not have
                      a locale, the locale of its parent is returned.                    
                </return>
                <exception>
                    IllegalComponentStateExceptionIf the Component does not have its own locale and has not yet been
                      added to a containment hierarchy such that the locale can be
                      determined from the containing parent.                    
                </exception>
            </javadoc>
            <javadoc line="444">
                Adds a PropertyChangeListener to the listener list.
                  The listener is registered for all Accessible properties and will
                  be called when those properties change.                
                <see>
                    #ACCESSIBLE_NAME_PROPERTY                    
                </see>
                <see>
                    #ACCESSIBLE_DESCRIPTION_PROPERTY                    
                </see>
                <see>
                    #ACCESSIBLE_STATE_PROPERTY                    
                </see>
                <see>
                    #ACCESSIBLE_VALUE_PROPERTY                    
                </see>
                <see>
                    #ACCESSIBLE_SELECTION_PROPERTY                    
                </see>
                <see>
                    #ACCESSIBLE_TEXT_PROPERTY                    
                </see>
                <see>
                    #ACCESSIBLE_VISIBLE_DATA_PROPERTY                    
                </see>
                <param>
                    listener  The PropertyChangeListener to be added                    
                </param>
            </javadoc>
            <method name="addPropertyChangeListener" type="void" line="457">
                <params>
                    <param name="listener" type="PropertyChangeListener"/>
                </params>
                <scope line="458"/>
            </method>
            <javadoc line="463">
                Removes a PropertyChangeListener from the listener list.
                  This removes a PropertyChangeListener that was registered
                  for all properties.                
                <param>
                    listener  The PropertyChangeListener to be removed                    
                </param>
            </javadoc>
            <method name="removePropertyChangeListener" type="void" line="469">
                <params>
                    <param name="listener" type="PropertyChangeListener"/>
                </params>
                <scope line="470"/>
            </method>
            <javadoc line="474">
                Gets the AccessibleAction associated with this object that supports
                  one or more actions.                
                <return>
                    AccessibleAction if supported by object; else return null                    
                </return>
                <see>
                    AccessibleAction                    
                </see>
            </javadoc>
            <method name="getAccessibleAction" type="AccessibleAction" line="480"/>
            <javadoc line="483">
                Gets the AccessibleComponent associated with this object that has a
                  graphical representation.                
                <return>
                    AccessibleComponent if supported by object; else return null                    
                </return>
                <see>
                    AccessibleComponent                    
                </see>
            </javadoc>
            <method name="getAccessibleComponent" type="AccessibleComponent" line="489"/>
            <javadoc line="492">
                Gets the AccessibleSelection associated with this object which allows its
                  Accessible children to be selected.                
                <return>
                    AccessibleSelection if supported by object; else return null                    
                </return>
                <see>
                    AccessibleSelection                    
                </see>
            </javadoc>
            <method name="getAccessibleSelection" type="AccessibleSelection" line="498"/>
            <javadoc line="501">
                Gets the AccessibleText associated with this object presenting
                  text on the display.                
                <return>
                    AccessibleText if supported by object; else return null                    
                </return>
                <see>
                    AccessibleText                    
                </see>
            </javadoc>
            <method name="getAccessibleText" type="AccessibleText" line="507"/>
            <javadoc line="510">
                Gets the AccessibleEditableText associated with this object
                  presenting editable text on the display.                
                <return>
                    AccessibleEditableText if supported by object; else return null                    
                </return>
                <see>
                    AccessibleEditableText                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getAccessibleEditableText" type="AccessibleEditableText" line="517"/>
            <javadoc line="520">
                Gets the AccessibleValue associated with this object that supports a
                  Numerical value.                
                <return>
                    AccessibleValue if supported by object; else return null                    
                </return>
                <see>
                    AccessibleValue                    
                </see>
            </javadoc>
            <method name="getAccessibleValue" type="AccessibleValue" line="526"/>
            <javadoc line="529">
                Gets the AccessibleIcons associated with an object that has
                  one or more associated icons                
                <return>
                    an array of AccessibleIcon if supported by object;
                      otherwise return null                    
                </return>
                <see>
                    AccessibleIcon                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getAccessibleIcon" type="AccessibleIcon[]" line="537"/>
            <javadoc line="540">
                Gets the AccessibleRelationSet associated with an object                
                <return>
                    an AccessibleRelationSet if supported by object;
                      otherwise return null                    
                </return>
                <see>
                    AccessibleRelationSet                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getAccessibleRelationSet" type="AccessibleRelationSet" line="547"/>
            <javadoc line="550">
                Gets the AccessibleTable associated with an object                
                <return>
                    an AccessibleTable if supported by object;
                      otherwise return null                    
                </return>
                <see>
                    AccessibleTable                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getAccessibleTable" type="AccessibleTable" line="557"/>
            <javadoc line="560">
                Support for reporting bound property changes.  If oldValue and
                  newValue are not equal and the PropertyChangeEvent listener list
                  is not empty, then fire a PropertyChange event to each listener.
                  In general, this is for use by the Accessible objects themselves
                  and should not be called by an application program.                
                <param>
                    propertyName  The programmatic name of the property that
                      was changed.                    
                </param>
                <param>
                    oldValue  The old value of the property.                    
                </param>
                <param>
                    newValue  The new value of the property.                    
                </param>
                <see>
                    java.beans.PropertyChangeSupport                    
                </see>
                <see>
                    #addPropertyChangeListener                    
                </see>
                <see>
                    #removePropertyChangeListener                    
                </see>
                <see>
                    #ACCESSIBLE_NAME_PROPERTY                    
                </see>
                <see>
                    #ACCESSIBLE_DESCRIPTION_PROPERTY                    
                </see>
                <see>
                    #ACCESSIBLE_STATE_PROPERTY                    
                </see>
                <see>
                    #ACCESSIBLE_VALUE_PROPERTY                    
                </see>
                <see>
                    #ACCESSIBLE_SELECTION_PROPERTY                    
                </see>
                <see>
                    #ACCESSIBLE_TEXT_PROPERTY                    
                </see>
                <see>
                    #ACCESSIBLE_VISIBLE_DATA_PROPERTY                    
                </see>
            </javadoc>
            <method name="firePropertyChange" type="void" line="581">
                <params>
                    <param name="propertyName" type="String"/>
                    <param name="oldValue" type="Object"/>
                    <param name="newValue" type="Object"/>
                </params>
                <scope line="582">
                    <scope line="583">
                        <declaration name="pce" type="PropertyChangeEvent" line="584"/>
                    </scope>
                    <scope line="587"/>
                </scope>
            </method>
        </class>
    </source>