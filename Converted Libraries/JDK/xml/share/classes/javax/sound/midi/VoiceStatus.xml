<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.sound.midi">
        <class name="VoiceStatus" line="2">
            <javadoc line="2">
                A &lt;code&gt;VoiceStatus&lt;/code&gt; object contains information about the current
                  status of one of the voices produced by a {@link Synthesizer}.
                  &lt;p&gt;
                  MIDI synthesizers are generally capable of producing some maximum number of
                  simultaneous notes, also referred to as voices.  A voice is a stream
                  of successive single notes, and the process of assigning incoming MIDI notes to
                  specific voices is known as voice allocation.
                  However, the voice-allocation algorithm and the contents of each voice are
                  normally internal to a MIDI synthesizer and hidden from outside view.  One can, of
                  course, learn from MIDI messages which notes the synthesizer is playing, and
                  one might be able deduce something about the assignment of notes to voices.
                  But MIDI itself does not provide a means to report which notes a
                  synthesizer has assigned to which voice, nor even to report how many voices
                  the synthesizer is capable of synthesizing.
                  &lt;p&gt;
                  In Java Sound, however, a
                  &lt;code&gt;Synthesizer&lt;/code&gt; class can expose the contents of its voices through its{@link Synthesizer#getVoiceStatus() getVoiceStatus()} method.
                  This behavior is recommended but optional;
                  synthesizers that don&apos;t expose their voice allocation simply return a
                  zero-length array. A &lt;code&gt;Synthesizer&lt;/code&gt; that does report its voice status
                  should maintain this information at
                  all times for all of its voices, whether they are currently sounding or
                  not.  In other words, a given type of &lt;code&gt;Synthesizer&lt;/code&gt; always has a fixed
                  number of voices, equal to the maximum number of simultaneous notes it is
                  capable of sounding.
                  &lt;p&gt;
                  &lt;A NAME=&quot;description_of_active&quot;&gt;&lt;/A&gt;
                  If the voice is not currently processing a MIDI note, it
                  is considered inactive.  A voice is inactive when it has
                  been given no note-on commands, or when every note-on command received has
                  been terminated by a corresponding note-off (or by an &quot;all notes off&quot;
                  message).  For example, this happens when a synthesizer capable of playing 16
                  simultaneous notes is told to play a four-note chord; only
                  four voices are active in this case (assuming no earlier notes are still playing).
                  Usually, a voice whose status is reported as active is producing audible sound, but this
                  is not always true; it depends on the details of the instrument (that
                  is, the synthesis algorithm) and how long the note has been going on.
                  For example, a voice may be synthesizing the sound of a single hand-clap.  Because
                  this sound dies away so quickly, it may become inaudible before a note-off
                  message is received.  In such a situation, the voice is still considered active
                  even though no sound is currently being produced.
                  &lt;p&gt;
                  Besides its active or inactive status, the &lt;code&gt;VoiceStatus&lt;/code&gt; class
                  provides fields that reveal the voice&apos;s current MIDI channel, bank and
                  program number, MIDI note number, and MIDI volume.  All of these can
                  change during the course of a voice.  While the voice is inactive, each
                  of these fields has an unspecified value, so you should check the active
                  field first.                
                <see>
                    Synthesizer#getMaxPolyphony                    
                </see>
                <see>
                    Synthesizer#getVoiceStatus                    
                </see>
                <author>
                    David Rivas                    
                </author>
                <author>
                    Kara Kytle                    
                </author>
            </javadoc>
            <declaration name="active" type="boolean" line="57"/>
            <javadoc line="57">
                Indicates whether the voice is currently processing a MIDI note.
                  See the explanation of
                  &lt;A HREF=&quot;#description_of_active&quot;&gt;active and inactive voices&lt;/A&gt;.                
            </javadoc>
            <declaration name="channel" type="int" line="63"/>
            <javadoc line="63">
                The MIDI channel on which this voice is playing.  The value is a
                  zero-based channel number if the voice is active, or
                  unspecified if the voice is inactive.                
                <see>
                    MidiChannel                    
                </see>
                <see>
                    #active                    
                </see>
            </javadoc>
            <declaration name="bank" type="int" line="71"/>
            <javadoc line="71">
                The bank number of the instrument that this voice is currently using.
                  This is a number dictated by the MIDI bank-select message; it does not
                  refer to a &lt;code&gt;SoundBank&lt;/code&gt; object.
                  The value ranges from 0 to 16383 if the voice is active, and is
                  unspecified if the voice is inactive.                
                <see>
                    Patch                    
                </see>
                <see>
                    Soundbank                    
                </see>
                <see>
                    #active                    
                </see>
                <see>
                    MidiChannel#programChange(int,int)                    
                </see>
            </javadoc>
            <declaration name="program" type="int" line="83"/>
            <javadoc line="83">
                The program number of the instrument that this voice is currently using.
                  The value ranges from 0 to 127 if the voice is active, and is
                  unspecified if the voice is inactive.                
                <see>
                    MidiChannel#getProgram                    
                </see>
                <see>
                    Patch                    
                </see>
                <see>
                    #active                    
                </see>
            </javadoc>
            <declaration name="note" type="int" line="92"/>
            <javadoc line="92">
                The MIDI note that this voice is playing.  The range for an active voice
                  is from 0 to 127 in semitones, with 60 referring to Middle C.
                  The value is unspecified if the voice is inactive.                
                <see>
                    MidiChannel#noteOn                    
                </see>
                <see>
                    #active                    
                </see>
            </javadoc>
            <declaration name="volume" type="int" line="100"/>
            <javadoc line="100">
                The current MIDI volume level for the voice.
                  The value ranges from 0 to 127 if the voice is active, and is
                  unspecified if the voice is inactive.
                  &lt;p&gt;
                  Note that this value does not necessarily reflect
                  the instantaneous level of the sound produced by this
                  voice; that level is the result of  many contributing
                  factors, including the current instrument and the
                  shape of the amplitude envelope it produces.                
                <see>
                    #active                    
                </see>
            </javadoc>
        </class>
    </source>