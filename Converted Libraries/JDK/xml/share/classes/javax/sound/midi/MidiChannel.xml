<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.sound.midi">
        <interface name="MidiChannel">
            <javadoc line="2">
                A &lt;code&gt;MidiChannel&lt;/code&gt; object represents a single MIDI channel.
                  Generally, each &lt;code&gt;MidiChannel&lt;/code&gt; method processes a like-named MIDI
                  &quot;channel voice&quot; or &quot;channel mode&quot; message as defined by the MIDI specification. However,
                  &lt;code&gt;MidiChannel&lt;/code&gt; adds some &quot;get&quot; methods  that retrieve the value
                  most recently set by one of the standard MIDI channel messages.  Similarly,
                  methods for per-channel solo and mute have been added.
                  &lt;p&gt;
                  A &lt;code&gt;{@link Synthesizer}&lt;/code&gt; object has a collection
                  of &lt;code&gt;MidiChannels&lt;/code&gt;, usually one for each of the 16 channels
                  prescribed by the MIDI 1.0 specification.  The &lt;code&gt;Synthesizer&lt;/code&gt;
                  generates sound when its &lt;code&gt;MidiChannels&lt;/code&gt; receive
                  &lt;code&gt;noteOn&lt;/code&gt; messages.
                  &lt;p&gt;
                  See the MIDI 1.0 Specification for more information about the prescribed
                  behavior of the MIDI channel messages, which are not exhaustively
                  documented here.  The specification is titled &lt;code&gt;MIDI Reference:
                  The Complete MIDI 1.0 Detailed Specification&lt;/code&gt;, and is published by
                  the MIDI Manufacturer&apos;s Association (&lt;a href = http://www.midi.org&gt;
                  http://www.midi.org&lt;/a&gt;).
                  &lt;p&gt;
                  MIDI was originally a protocol for reporting the gestures of a keyboard
                  musician.  This genesis is visible in the &lt;code&gt;MidiChannel&lt;/code&gt; API, which
                  preserves such MIDI concepts as key number, key velocity, and key pressure.
                  It should be understood that the MIDI data does not necessarily originate
                  with a keyboard player (the source could be a different kind of musician, or
                  software).  Some devices might generate constant values for velocity
                  and pressure, regardless of how the note was performed.
                  Also, the MIDI specification often leaves it up to the
                  synthesizer to use the data in the way the implementor sees fit.  For
                  example, velocity data need not always be mapped to volume and/or brightness.                
                <see>
                    Synthesizer#getChannels                    
                </see>
                <author>
                    David Rivas                    
                </author>
                <author>
                    Kara Kytle                    
                </author>
            </javadoc>
            <method name="noteOn" type="void" line="38"/>
            <javadoc line="38">
                Starts the specified note sounding.  The key-down velocity
                  usually controls the note&apos;s volume and/or brightness.
                  If &lt;code&gt;velocity&lt;/code&gt; is zero, this method instead acts like{@link #noteOff(int)}, terminating the note.                
                <param>
                    noteNumber the MIDI note number, from 0 to 127 (60 = Middle C)                    
                </param>
                <param>
                    velocity the speed with which the key was depressed                    
                </param>
                <see>
                    #noteOff(int,int)                    
                </see>
            </javadoc>
            <method name="noteOff" type="void" line="47"/>
            <javadoc line="47">
                Turns the specified note off.  The key-up velocity, if not ignored, can
                  be used to affect how quickly the note decays.
                  In any case, the note might not die away instantaneously; its decay
                  rate is determined by the internals of the &lt;code&gt;Instrument&lt;/code&gt;.
                  If the Hold Pedal (a controller; see{@link #controlChange(int,int) controlChange})
                  is down, the effect of this method is deferred until the pedal is
                  released.                
                <param>
                    noteNumber the MIDI note number, from 0 to 127 (60 = Middle C)                    
                </param>
                <param>
                    velocity the speed with which the key was released                    
                </param>
                <see>
                    #noteOff(int)                    
                </see>
                <see>
                    #noteOn                    
                </see>
                <see>
                    #allNotesOff                    
                </see>
                <see>
                    #allSoundOff                    
                </see>
            </javadoc>
            <method name="noteOff" type="void" line="63"/>
            <javadoc line="63">
                Turns the specified note off.                
                <param>
                    noteNumber the MIDI note number, from 0 to 127 (60 = Middle C)                    
                </param>
                <see>
                    #noteOff(int,int)                    
                </see>
            </javadoc>
            <method name="setPolyPressure" type="void" line="69"/>
            <javadoc line="69">
                Reacts to a change in the specified note&apos;s key pressure.
                  Polyphonic key pressure
                  allows a keyboard player to press multiple keys simultaneously, each
                  with a different amount of pressure.  The pressure, if not ignored,
                  is typically used to vary such features as the volume, brightness,
                  or vibrato of the note.
                  It is possible that the underlying synthesizer
                  does not support this MIDI message. In order
                  to verify that &lt;code&gt;setPolyPressure&lt;/code&gt;
                  was successful, use &lt;code&gt;getPolyPressure&lt;/code&gt;.                
                <param>
                    noteNumber the MIDI note number, from 0 to 127 (60 = Middle C)                    
                </param>
                <param>
                    pressure value for the specified key, from 0 to 127 (127 =
                      maximum pressure)                    
                </param>
                <see>
                    #getPolyPressure(int)                    
                </see>
            </javadoc>
            <method name="getPolyPressure" type="int" line="86"/>
            <javadoc line="86">
                Obtains the pressure with which the specified key is being depressed.                
                <param>
                    noteNumber the MIDI note number, from 0 to 127 (60 = Middle C)
                      If the device does not support setting poly pressure,
                      this method always returns 0. Calling
                      &lt;code&gt;setPolyPressure&lt;/code&gt; will have no effect then.                    
                </param>
                <return>
                    the amount of pressure for that note, from 0 to 127
                      (127 = maximum pressure)                    
                </return>
                <see>
                    #setPolyPressure(int,int)                    
                </see>
            </javadoc>
            <method name="setChannelPressure" type="void" line="97"/>
            <javadoc line="97">
                Reacts to a change in the keyboard pressure.  Channel
                  pressure indicates how hard the keyboard player is depressing
                  the entire keyboard.  This can be the maximum or
                  average of the per-key pressure-sensor values, as set by
                  &lt;code&gt;setPolyPressure&lt;/code&gt;.  More commonly, it is a measurement of
                  a single sensor on a device that doesn&apos;t implement polyphonic key
                  pressure.  Pressure can be used to control various aspects of the sound,
                  as described under {@link #setPolyPressure(int,int) setPolyPressure}.
                  It is possible that the underlying synthesizer
                  does not support this MIDI message. In order
                  to verify that &lt;code&gt;setChannelPressure&lt;/code&gt;
                  was successful, use &lt;code&gt;getChannelPressure&lt;/code&gt;.                
                <param>
                    pressure the pressure with which the keyboard is being depressed,
                      from 0 to 127 (127 = maximum pressure)                    
                </param>
                <see>
                    #setPolyPressure(int,int)                    
                </see>
                <see>
                    #getChannelPressure                    
                </see>
            </javadoc>
            <method name="getChannelPressure" type="int" line="116"/>
            <javadoc line="116">
                Obtains the channel&apos;s keyboard pressure.
                  If the device does not support setting channel pressure,
                  this method always returns 0. Calling
                  &lt;code&gt;setChannelPressure&lt;/code&gt; will have no effect then.                
                <return>
                    the amount of pressure for that note,
                      from 0 to 127 (127 = maximum pressure)                    
                </return>
                <see>
                    #setChannelPressure(int)                    
                </see>
            </javadoc>
            <method name="controlChange" type="void" line="126"/>
            <javadoc line="126">
                Reacts to a change in the specified controller&apos;s value.  A controller
                  is some control other than a keyboard key, such as a
                  switch, slider, pedal, wheel, or breath-pressure sensor.
                  The MIDI 1.0 Specification provides standard numbers for typical
                  controllers on MIDI devices, and describes the intended effect
                  for some of the controllers.
                  The way in which an
                  &lt;code&gt;Instrument&lt;/code&gt; reacts to a controller change may be
                  specific to the &lt;code&gt;Instrument&lt;/code&gt;.
                  &lt;p&gt;
                  The MIDI 1.0 Specification defines both 7-bit controllers
                  and 14-bit controllers.  Continuous controllers, such
                  as wheels and sliders, typically have 14 bits (two MIDI bytes),
                  while discrete controllers, such as switches, typically have 7 bits
                  (one MIDI byte).  Refer to the specification to see the
                  expected resolution for each type of control.
                  &lt;p&gt;
                  Controllers 64 through 95 (0x40 - 0x5F) allow 7-bit precision.
                  The value of a 7-bit controller is set completely by the
                  &lt;code&gt;value&lt;/code&gt; argument.  An additional set of controllers
                  provide 14-bit precision by using two controller numbers, one
                  for the most significant 7 bits and another for the least significant
                  7 bits.  Controller numbers 0 through 31 (0x00 - 0x1F) control the
                  most significant 7 bits of 14-bit controllers; controller numbers
                  32 through 63 (0x20 - 0x3F) control the least significant 7 bits of
                  these controllers.  For example, controller number 7 (0x07) controls
                  the upper 7 bits of the channel volume controller, and controller
                  number 39 (0x27) controls the lower 7 bits.
                  The value of a 14-bit controller is determined
                  by the interaction of the two halves.  When the most significant 7 bits
                  of a controller are set (using controller numbers 0 through 31), the
                  lower 7 bits are automatically set to 0.  The corresponding controller
                  number for the lower 7 bits may then be used to further modulate the
                  controller value.
                  It is possible that the underlying synthesizer
                  does not support a specific controller message. In order
                  to verify that a call to &lt;code&gt;controlChange&lt;/code&gt;
                  was successful, use &lt;code&gt;getController&lt;/code&gt;.                
                <param>
                    controller the controller number (0 to 127; see the MIDI
                      1.0 Specification for the interpretation)                    
                </param>
                <param>
                    value the value to which the specified controller is changed (0 to 127)                    
                </param>
                <see>
                    #getController(int)                    
                </see>
            </javadoc>
            <method name="getController" type="int" line="171"/>
            <javadoc line="171">
                Obtains the current value of the specified controller.  The return
                  value is represented with 7 bits. For 14-bit controllers, the MSB and
                  LSB controller value needs to be obtained separately. For example,
                  the 14-bit value of the volume controller can be calculated by
                  multiplying the value of controller 7 (0x07, channel volume MSB)
                  with 128 and adding the
                  value of controller 39 (0x27, channel volume LSB).
                  If the device does not support setting a specific controller,
                  this method returns 0 for that controller.
                  Calling &lt;code&gt;controlChange&lt;/code&gt; will have no effect then.                
                <param>
                    controller the number of the controller whose value is desired.
                      The allowed range is 0-127; see the MIDI
                      1.0 Specification for the interpretation.                    
                </param>
                <return>
                    the current value of the specified controller (0 to 127)                    
                </return>
                <see>
                    #controlChange(int,int)                    
                </see>
            </javadoc>
            <method name="programChange" type="void" line="189"/>
            <javadoc line="189">
                Changes a program (patch).  This selects a specific
                  instrument from the currently selected bank of instruments.
                  &lt;p&gt;
                  The MIDI specification does not
                  dictate whether notes that are already sounding should switch
                  to the new instrument (timbre) or continue with their original timbre
                  until terminated by a note-off.
                  &lt;p&gt;
                  The program number is zero-based (expressed from 0 to 127).
                  Note that MIDI hardware displays and literature about MIDI
                  typically use the range 1 to 128 instead.
                  It is possible that the underlying synthesizer
                  does not support a specific program. In order
                  to verify that a call to &lt;code&gt;programChange&lt;/code&gt;
                  was successful, use &lt;code&gt;getProgram&lt;/code&gt;.                
                <param>
                    program the program number to switch to (0 to 127)                    
                </param>
                <see>
                    #programChange(int,int)                    
                </see>
                <see>
                    #getProgram()                    
                </see>
            </javadoc>
            <method name="programChange" type="void" line="210"/>
            <javadoc line="210">
                Changes the program using bank and program (patch) numbers.
                  It is possible that the underlying synthesizer
                  does not support a specific bank, or program. In order
                  to verify that a call to &lt;code&gt;programChange&lt;/code&gt;
                  was successful, use &lt;code&gt;getProgram&lt;/code&gt; and
                  &lt;code&gt;getController&lt;/code&gt;.
                  Since banks are changed by way of control changes,
                  you can verify the current bank with the following
                  statement:
                  &lt;pre&gt;
                  int bank = (getController(0)  128)
                  + getController(32);
                  &lt;/pre&gt;                
                <param>
                    bank the bank number to switch to (0 to 16383)                    
                </param>
                <param>
                    program the program (patch) to use in the specified bank (0 to 127)                    
                </param>
                <see>
                    #programChange(int)                    
                </see>
                <see>
                    #getProgram()                    
                </see>
            </javadoc>
            <method name="getProgram" type="int" line="230"/>
            <javadoc line="230">
                Obtains the current program number for this channel.                
                <return>
                    the program number of the currently selected patch                    
                </return>
                <see>
                    Patch#getProgram                    
                </see>
                <see>
                    Synthesizer#loadInstrument                    
                </see>
                <see>
                    #programChange(int)                    
                </see>
            </javadoc>
            <method name="setPitchBend" type="void" line="238"/>
            <javadoc line="238">
                Changes the pitch offset for all notes on this channel.
                  This affects all currently sounding notes as well as subsequent ones.
                  (For pitch bend to cease, the value needs to be reset to the
                  center position.)
                  &lt;p&gt; The MIDI specification
                  stipulates that pitch bend be a 14-bit value, where zero
                  is maximum downward bend, 16383 is maximum upward bend, and
                  8192 is the center (no pitch bend).  The actual
                  amount of pitch change is not specified; it can be changed by
                  a pitch-bend sensitivity setting.  However, the General MIDI
                  specification says that the default range should be two semitones
                  up and down from center.
                  It is possible that the underlying synthesizer
                  does not support this MIDI message. In order
                  to verify that &lt;code&gt;setPitchBend&lt;/code&gt;
                  was successful, use &lt;code&gt;getPitchBend&lt;/code&gt;.                
                <param>
                    bend the amount of pitch change, as a nonnegative 14-bit value
                      (8192 = no bend)                    
                </param>
                <see>
                    #getPitchBend                    
                </see>
            </javadoc>
            <method name="getPitchBend" type="int" line="260"/>
            <javadoc line="260">
                Obtains the upward or downward pitch offset for this channel.
                  If the device does not support setting pitch bend,
                  this method always returns 8192. Calling
                  &lt;code&gt;setPitchBend&lt;/code&gt; will have no effect then.                
                <return>
                    bend amount, as a nonnegative 14-bit value (8192 = no bend)                    
                </return>
                <see>
                    #setPitchBend(int)                    
                </see>
            </javadoc>
            <method name="resetAllControllers" type="void" line="269"/>
            <javadoc line="269">
                Resets all the implemented controllers to their default values.                
                <see>
                    #controlChange(int,int)                    
                </see>
            </javadoc>
            <method name="allNotesOff" type="void" line="274"/>
            <javadoc line="274">
                Turns off all notes that are currently sounding on this channel.
                  The notes might not die away instantaneously; their decay
                  rate is determined by the internals of the &lt;code&gt;Instrument&lt;/code&gt;.
                  If the Hold Pedal controller (see{@link #controlChange(int,int) controlChange})
                  is down, the effect of this method is deferred until the pedal is
                  released.                
                <see>
                    #allSoundOff                    
                </see>
                <see>
                    #noteOff(int)                    
                </see>
            </javadoc>
            <method name="allSoundOff" type="void" line="285"/>
            <javadoc line="285">
                Immediately turns off all sounding notes on this channel, ignoring the
                  state of the Hold Pedal and the internal decay rate of the current
                  &lt;code&gt;Instrument&lt;/code&gt;.                
                <see>
                    #allNotesOff                    
                </see>
            </javadoc>
            <method name="localControl" type="boolean" line="292"/>
            <javadoc line="292">
                Turns local control on or off.  The default is for local control
                  to be on.  The &quot;on&quot; setting means that if a device is capable
                  of both synthesizing sound and transmitting MIDI messages,
                  it will synthesize sound in response to the note-on and
                  note-off messages that it itself transmits.  It will also respond
                  to messages received from other transmitting devices.
                  The &quot;off&quot; setting means that the synthesizer will ignore its
                  own transmitted MIDI messages, but not those received from other devices.
                  It is possible that the underlying synthesizer
                  does not support local control. In order
                  to verify that a call to &lt;code&gt;localControl&lt;/code&gt;
                  was successful, check the return value.                
                <param>
                    on &lt;code&gt;true&lt;/code&gt; to turn local control on, &lt;code&gt;false&lt;/code&gt;
                      to turn local control off                    
                </param>
                <return>
                    the new local-control value, or false
                      if local control is not supported                    
                </return>
            </javadoc>
            <method name="setMono" type="void" line="311"/>
            <javadoc line="311">
                Turns mono mode on or off.  In mono mode, the channel synthesizes
                  only one note at a time.  In poly mode (identical to mono mode off),
                  the channel can synthesize multiple notes simultaneously.
                  The default is mono off (poly mode on).
                  &lt;p&gt;
                  &quot;Mono&quot; is short for the word &quot;monophonic,&quot; which in this context
                  is opposed to the word &quot;polyphonic&quot; and refers to a single synthesizer
                  voice per MIDI channel.  It
                  has nothing to do with how many audio channels there might be
                  (as in &quot;monophonic&quot; versus &quot;stereophonic&quot; recordings).
                  It is possible that the underlying synthesizer
                  does not support mono mode. In order
                  to verify that a call to &lt;code&gt;setMono&lt;/code&gt;
                  was successful, use &lt;code&gt;getMono&lt;/code&gt;.                
                <param>
                    on &lt;code&gt;true&lt;/code&gt; to turn mono mode on, &lt;code&gt;false&lt;/code&gt; to
                      turn it off (which means turning poly mode on).                    
                </param>
                <see>
                    #getMono                    
                </see>
                <see>
                    VoiceStatus                    
                </see>
            </javadoc>
            <method name="getMono" type="boolean" line="332"/>
            <javadoc line="332">
                Obtains the current mono/poly mode.
                  Synthesizers that do not allow changing mono/poly mode
                  will always return the same value, regardless
                  of calls to &lt;code&gt;setMono&lt;/code&gt;.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if mono mode is on, otherwise
                      &lt;code&gt;false&lt;/code&gt; (meaning poly mode is on).                    
                </return>
                <see>
                    #setMono(boolean)                    
                </see>
            </javadoc>
            <method name="setOmni" type="void" line="342"/>
            <javadoc line="342">
                Turns omni mode on or off.  In omni mode, the channel responds
                  to messages sent on all channels.  When omni is off, the channel
                  responds only to messages sent on its channel number.
                  The default is omni off.
                  It is possible that the underlying synthesizer
                  does not support omni mode. In order
                  to verify that &lt;code&gt;setOmni&lt;/code&gt;
                  was successful, use &lt;code&gt;getOmni&lt;/code&gt;.                
                <param>
                    on &lt;code&gt;true&lt;/code&gt; to turn omni mode on, &lt;code&gt;false&lt;/code&gt; to
                      turn it off.                    
                </param>
                <see>
                    #getOmni                    
                </see>
                <see>
                    VoiceStatus                    
                </see>
            </javadoc>
            <method name="getOmni" type="boolean" line="357"/>
            <javadoc line="357">
                Obtains the current omni mode.
                  Synthesizers that do not allow changing the omni mode
                  will always return the same value, regardless
                  of calls to &lt;code&gt;setOmni&lt;/code&gt;.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if omni mode is on, otherwise
                      &lt;code&gt;false&lt;/code&gt; (meaning omni mode is off).                    
                </return>
                <see>
                    #setOmni(boolean)                    
                </see>
            </javadoc>
            <method name="setMute" type="void" line="367"/>
            <javadoc line="367">
                Sets the mute state for this channel. A value of
                  &lt;code&gt;true&lt;/code&gt; means the channel is to be muted, &lt;code&gt;false&lt;/code&gt;
                  means the channel can sound (if other channels are not soloed).
                  &lt;p&gt;
                  Unlike {@link #allSoundOff()}, this method
                  applies to only a specific channel, not to all channels.  Further, it
                  silences not only currently sounding notes, but also subsequently
                  received notes.
                  It is possible that the underlying synthesizer
                  does not support muting channels. In order
                  to verify that a call to &lt;code&gt;setMute&lt;/code&gt;
                  was successful, use &lt;code&gt;getMute&lt;/code&gt;.                
                <param>
                    mute the new mute state                    
                </param>
                <see>
                    #getMute                    
                </see>
                <see>
                    #setSolo(boolean)                    
                </see>
            </javadoc>
            <method name="getMute" type="boolean" line="385"/>
            <javadoc line="385">
                Obtains the current mute state for this channel.
                  If the underlying synthesizer does not support
                  muting this channel, this method always returns
                  &lt;code&gt;false&lt;/code&gt;.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; the channel is muted,
                      or &lt;code&gt;false&lt;/code&gt; if not                    
                </return>
                <see>
                    #setMute(boolean)                    
                </see>
            </javadoc>
            <method name="setSolo" type="void" line="395"/>
            <javadoc line="395">
                Sets the solo state for this channel.
                  If &lt;code&gt;solo&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; only this channel
                  and other soloed channels will sound. If &lt;code&gt;solo&lt;/code&gt;
                  is &lt;code&gt;false&lt;/code&gt; then only other soloed channels will
                  sound, unless no channels are soloed, in which case all
                  unmuted channels will sound.
                  It is possible that the underlying synthesizer
                  does not support solo channels. In order
                  to verify that a call to &lt;code&gt;setSolo&lt;/code&gt;
                  was successful, use &lt;code&gt;getSolo&lt;/code&gt;.                
                <param>
                    soloState new solo state for the channel                    
                </param>
                <see>
                    #getSolo()                    
                </see>
            </javadoc>
            <method name="getSolo" type="boolean" line="410"/>
            <javadoc line="410">
                Obtains the current solo state for this channel.
                  If the underlying synthesizer does not support
                  solo on this channel, this method always returns
                  &lt;code&gt;false&lt;/code&gt;.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; the channel is solo,
                      or &lt;code&gt;false&lt;/code&gt; if not                    
                </return>
                <see>
                    #setSolo(boolean)                    
                </see>
            </javadoc>
        </interface>
    </source>