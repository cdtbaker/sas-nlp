<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.sound.midi">
        <class name="SysexMessage" line="2">
            <extends class="MidiMessage"/>
            <javadoc line="2">
                A &lt;code&gt;SysexMessage&lt;/code&gt; object represents a MIDI system exclusive message.
                  &lt;p&gt;
                  When a system exclusive message is read from a MIDI file, it always has
                  a defined length.  Data from a system exclusive message from a MIDI file
                  should be stored in the data array of a &lt;code&gt;SysexMessage&lt;/code&gt; as
                  follows: the system exclusive message status byte (0xF0 or 0xF7), all
                  message data bytes, and finally the end-of-exclusive flag (0xF7).
                  The length reported by the &lt;code&gt;SysexMessage&lt;/code&gt; object is therefore
                  the length of the system exclusive data plus two: one byte for the status
                  byte and one for the end-of-exclusive flag.
                  &lt;p&gt;
                  As dictated by the Standard MIDI Files specification, two status byte values are legal
                  for a &lt;code&gt;SysexMessage&lt;/code&gt; read from a MIDI file:
                  &lt;ul&gt;
                  &lt;li&gt;0xF0: System Exclusive message (same as in MIDI wire protocol)&lt;/li&gt;
                  &lt;li&gt;0xF7: Special System Exclusive message&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;
                  When Java Sound is used to handle system exclusive data that is being received
                  using MIDI wire protocol, it should place the data in one or more
                  &lt;code&gt;SysexMessages&lt;/code&gt;.  In this case, the length of the system exclusive data
                  is not known in advance; the end of the system exclusive data is marked by an
                  end-of-exclusive flag (0xF7) in the MIDI wire byte stream.
                  &lt;ul&gt;
                  &lt;li&gt;0xF0: System Exclusive message (same as in MIDI wire protocol)&lt;/li&gt;
                  &lt;li&gt;0xF7: End of Exclusive (EOX)&lt;/li&gt;
                  &lt;/ul&gt;
                  The first &lt;code&gt;SysexMessage&lt;/code&gt; object containing data for a particular system
                  exclusive message should have the status value 0xF0.  If this message contains all
                  the system exclusive data
                  for the message, it should end with the status byte 0xF7 (EOX).
                  Otherwise, additional system exclusive data should be sent in one or more
                  &lt;code&gt;SysexMessages&lt;/code&gt; with a status value of 0xF7.  The &lt;code&gt;SysexMessage&lt;/code&gt;
                  containing the last of the data for the system exclusive message should end with the
                  value 0xF7 (EOX) to mark the end of the system exclusive message.
                  &lt;p&gt;
                  If system exclusive data from &lt;code&gt;SysexMessages&lt;/code&gt; objects is being transmitted
                  using MIDI wire protocol, only the initial 0xF0 status byte, the system exclusive
                  data itself, and the final 0xF7 (EOX) byte should be propagated; any 0xF7 status
                  bytes used to indicate that a &lt;code&gt;SysexMessage&lt;/code&gt; contains continuing system
                  exclusive data should not be propagated via MIDI wire protocol.                
                <author>
                    David Rivas                    
                </author>
                <author>
                    Kara Kytle                    
                </author>
                <author>
                    Florian Bomers                    
                </author>
            </javadoc>
            <declaration name="SYSTEM_EXCLUSIVE" type="int" line="49"/>
            <javadoc line="49">
                Status byte for System Exclusive message (0xF0, or 240).                
                <see>
                    MidiMessage#getStatus                    
                </see>
            </javadoc>
            <declaration name="SPECIAL_SYSTEM_EXCLUSIVE" type="int" line="54"/>
            <javadoc line="54">
                Status byte for Special System Exclusive message (0xF7, or 247), which is used
                  in MIDI files.  It has the same value as END_OF_EXCLUSIVE, which
                  is used in the real-time &quot;MIDI wire&quot; protocol.                
                <see>
                    MidiMessage#getStatus                    
                </see>
            </javadoc>
            <javadoc line="61">
                Constructs a new &lt;code&gt;SysexMessage&lt;/code&gt;. The
                  contents of the new message are guaranteed to specify
                  a valid MIDI message.  Subsequently, you may set the
                  contents of the message using one of the &lt;code&gt;setMessage&lt;/code&gt;
                  methods.                
                <see>
                    #setMessage                    
                </see>
            </javadoc>
            <method name="SysexMessage" type="constructor" line="69"/>
            <javadoc line="74">
                Constructs a new {@code SysexMessage} and sets the data for
                  the message. The first byte of the data array must be a valid system
                  exclusive status byte (0xF0 or 0xF7).
                  The contents of the message can be changed by using one of
                  the {@code setMessage} methods.                
                <param>
                    data the system exclusive message data including the status byte                    
                </param>
                <param>
                    length the length of the valid message data in the array,
                      including the status byte; it should be non-negative and less than
                      or equal to {@code data.length}                    
                </param>
                <throws>
                    InvalidMidiDataException if the parameter values
                      do not specify a valid MIDI meta message.                    
                </throws>
                <see>
                    #setMessage(byte[],int)                    
                </see>
                <see>
                    #setMessage(int,byte[],int)                    
                </see>
                <see>
                    #getData()                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="SysexMessage" type="constructor" line="91">
                <params>
                    <param name="data" type="byte[]"/>
                    <param name="length" type="int"/>
                </params>
            </method>
            <javadoc line="95">
                Constructs a new {@code SysexMessage} and sets the data for the message.
                  The contents of the message can be changed by using one of
                  the {@code setMessage} methods.                
                <param>
                    status the status byte for the message; it must be a valid system
                      exclusive status byte (0xF0 or 0xF7)                    
                </param>
                <param>
                    data the system exclusive message data (without the status byte)                    
                </param>
                <param>
                    length the length of the valid message data in the array;
                      it should be non-negative and less than or equal to{@code data.length}                    
                </param>
                <throws>
                    InvalidMidiDataException if the parameter values
                      do not specify a valid MIDI meta message.                    
                </throws>
                <see>
                    #setMessage(byte[],int)                    
                </see>
                <see>
                    #setMessage(int,byte[],int)                    
                </see>
                <see>
                    #getData()                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="SysexMessage" type="constructor" line="111">
                <params>
                    <param name="status" type="int"/>
                    <param name="data" type="byte[]"/>
                    <param name="length" type="int"/>
                </params>
            </method>
            <javadoc line="115">
                Constructs a new &lt;code&gt;SysexMessage&lt;/code&gt;.                
                <param>
                    data an array of bytes containing the complete message.
                      The message data may be changed using the <code>setMessage</code>
                      method.                    
                </param>
                <see>
                    #setMessage                    
                </see>
            </javadoc>
            <method name="SysexMessage" type="constructor" line="122">
                <params>
                    <param name="data" type="byte[]"/>
                </params>
            </method>
            <javadoc line="125">
                Sets the data for the system exclusive message.   The
                  first byte of the data array must be a valid system
                  exclusive status byte (0xF0 or 0xF7).                
                <param>
                    data the system exclusive message data                    
                </param>
                <param>
                    length the length of the valid message data in
                      the array, including the status byte.                    
                </param>
            </javadoc>
            <method name="setMessage" type="void" line="133">
                <params>
                    <param name="data" type="byte[]"/>
                    <param name="length" type="int"/>
                </params>
                <declaration name="status" type="int" line="134"/>
                <scope line="135"/>
            </method>
            <javadoc line="140">
                Sets the data for the system exclusive message.                
                <param>
                    status the status byte for the message (0xF0 or 0xF7)                    
                </param>
                <param>
                    data the system exclusive message data                    
                </param>
                <param>
                    length the length of the valid message data in
                      the array                    
                </param>
            </javadoc>
            <method name="setMessage" type="void" line="147">
                <params>
                    <param name="status" type="int"/>
                    <param name="data" type="byte[]"/>
                    <param name="length" type="int"/>
                </params>
                <scope line="148"/>
                <scope line="151"/>
                <scope line="155"/>
                <scope line="159"/>
            </method>
            <javadoc line="163">
                Obtains a copy of the data for the system exclusive message.
                  The returned array of bytes does not include the status byte.                
                <return>
                    array containing the system exclusive message data.                    
                </return>
            </javadoc>
            <method name="getData" type="byte[]" line="168">
                <declaration name="returnedArray" type="byte[]" line="169"/>
            </method>
            <javadoc line="173">
                Creates a new object of the same class and with the same contents
                  as this object.                
                <return>
                    a clone of this instance                    
                </return>
            </javadoc>
            <method name="clone" type="Object" line="178">
                <declaration name="newData" type="byte[]" line="179"/>
                <declaration name="event" type="SysexMessage" line="181"/>
            </method>
        </class>
    </source>