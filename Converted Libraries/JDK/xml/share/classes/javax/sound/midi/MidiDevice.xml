<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.sound.midi">
        <import package="java.util.List"/>
        <interface name="MidiDevice">
            <implements interface="AutoCloseable"/>
            <comment line="391">
                class Info                
            </comment>
            <javadoc line="30">
                &lt;code&gt;MidiDevice&lt;/code&gt; is the base interface for all MIDI devices.
                  Common devices include synthesizers, sequencers, MIDI input ports, and MIDI
                  output ports.
                  &lt;p&gt;A &lt;code&gt;MidiDevice&lt;/code&gt; can be a transmitter or a receiver of
                  MIDI events, or both. Therefore, it can provide {@link Transmitter}or {@link Receiver} instances (or both). Typically, MIDI IN ports
                  provide transmitters, MIDI OUT ports and synthesizers provide
                  receivers. A Sequencer typically provides transmitters for playback
                  and receivers for recording.
                  &lt;p&gt;A &lt;code&gt;MidiDevice&lt;/code&gt; can be opened and closed explicitly as
                  well as implicitly. Explicit opening is accomplished by calling{@link #open}, explicit closing is done by calling {@link #close} on the &lt;code&gt;MidiDevice&lt;/code&gt; instance.
                  If an application opens a &lt;code&gt;MidiDevice&lt;/code&gt;
                  explicitly, it has to close it explicitly to free system resources
                  and enable the application to exit cleanly. Implicit opening is
                  done by calling {@link javax.sound.midi.MidiSystem#getReceiverMidiSystem.getReceiver} and {@link javax.sound.midi.MidiSystem#getTransmitterMidiSystem.getTransmitter}. The &lt;code&gt;MidiDevice&lt;/code&gt; used by
                  &lt;code&gt;MidiSystem.getReceiver&lt;/code&gt; and
                  &lt;code&gt;MidiSystem.getTransmitter&lt;/code&gt; is implementation-dependant
                  unless the properties &lt;code&gt;javax.sound.midi.Receiver&lt;/code&gt;
                  and &lt;code&gt;javax.sound.midi.Transmitter&lt;/code&gt; are used (see the
                  description of properties to select default providers in{@link javax.sound.midi.MidiSystem}). A &lt;code&gt;MidiDevice&lt;/code&gt;
                  that was opened implicitly, is closed implicitly by closing the
                  &lt;code&gt;Receiver&lt;/code&gt; or &lt;code&gt;Transmitter&lt;/code&gt; that resulted in
                  opening it. If more than one implicitly opening
                  &lt;code&gt;Receiver&lt;/code&gt; or &lt;code&gt;Transmitter&lt;/code&gt; were obtained by
                  the application, the decive is closed after the last
                  &lt;code&gt;Receiver&lt;/code&gt; or &lt;code&gt;Transmitter&lt;/code&gt; has been
                  closed. On the other hand, calling &lt;code&gt;getReceiver&lt;/code&gt; or
                  &lt;code&gt;getTransmitter&lt;/code&gt; on the device instance directly does
                  not open the device implicitly. Closing these
                  &lt;code&gt;Transmitter&lt;/code&gt;s and &lt;code&gt;Receiver&lt;/code&gt;s does not close
                  the device implicitly. To use a device with &lt;code&gt;Receiver&lt;/code&gt;s
                  or &lt;code&gt;Transmitter&lt;/code&gt;s obtained this way, the device has to
                  be opened and closed explicitly.
                  &lt;p&gt;If implicit and explicit opening and closing are mixed on the
                  same &lt;code&gt;MidiDevice&lt;/code&gt; instance, the following rules apply:
                  &lt;ul&gt;
                  &lt;li&gt;After an explicit open (either before or after implicit
                  opens), the device will not be closed by implicit closing. The only
                  way to close an explicitly opened device is an explicit close.&lt;/li&gt;
                  &lt;li&gt;An explicit close always closes the device, even if it also has
                  been opened implicitly. A subsequent implicit close has no further
                  effect.&lt;/li&gt;
                  &lt;/ul&gt;
                  To detect if a MidiDevice represents a hardware MIDI port, the
                  following programming technique can be used:
                  &lt;pre&gt;
                  MidiDevice device = ...;
                  if ( ! (device instanceof Sequencer) &amp;&amp; ! (device instanceof Synthesizer)) {
                  // we&apos;re now sure that device represents a MIDI port
                  // ...
                  }
                  &lt;/pre&gt;
                  &lt;p&gt;
                  A &lt;code&gt;MidiDevice&lt;/code&gt; includes a &lt;code&gt;{@link MidiDevice.Info}&lt;/code&gt; object
                  to provide manufacturer information and so on.                
                <see>
                    Synthesizer                    
                </see>
                <see>
                    Sequencer                    
                </see>
                <see>
                    Receiver                    
                </see>
                <see>
                    Transmitter                    
                </see>
                <author>
                    Kara Kytle                    
                </author>
                <author>
                    Florian Bomers                    
                </author>
            </javadoc>
            <method name="getDeviceInfo" type="Info" line="113"/>
            <javadoc line="113">
                Obtains information about the device, including its Java class and
                  &lt;code&gt;Strings&lt;/code&gt; containing its name, vendor, and description.                
                <return>
                    device info                    
                </return>
            </javadoc>
            <method name="open" type="void" line="122"/>
            <javadoc line="122">
                Opens the device, indicating that it should now acquire any
                  system resources it requires and become operational.
                  &lt;p&gt;An application opening a device explicitly with this call
                  has to close the device by calling {@link #close}. This is
                  necessary to release system resources and allow applications to
                  exit cleanly.
                  &lt;p&gt;
                  Note that some devices, once closed, cannot be reopened.  Attempts
                  to reopen such a device will always result in a MidiUnavailableException.                
                <throws>
                    MidiUnavailableException thrown if the device cannot be
                      opened due to resource restrictions.                    
                </throws>
                <throws>
                    SecurityException thrown if the device cannot be
                      opened due to security restrictions.                    
                </throws>
                <see>
                    #close                    
                </see>
                <see>
                    #isOpen                    
                </see>
            </javadoc>
            <method name="close" type="void" line="146"/>
            <javadoc line="146">
                Closes the device, indicating that the device should now release
                  any system resources it is using.
                  &lt;p&gt;All &lt;code&gt;Receiver&lt;/code&gt; and &lt;code&gt;Transmitter&lt;/code&gt; instances
                  open from this device are closed. This includes instances retrieved
                  via &lt;code&gt;MidiSystem&lt;/code&gt;.                
                <see>
                    #open                    
                </see>
                <see>
                    #isOpen                    
                </see>
            </javadoc>
            <method name="isOpen" type="boolean" line="160"/>
            <javadoc line="160">
                Reports whether the device is open.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the device is open, otherwise
                      &lt;code&gt;false&lt;/code&gt;                    
                </return>
                <see>
                    #open                    
                </see>
                <see>
                    #close                    
                </see>
            </javadoc>
            <method name="getMicrosecondPosition" type="long" line="171"/>
            <javadoc line="171">
                Obtains the current time-stamp of the device, in microseconds.
                  If a device supports time-stamps, it should start counting at
                  0 when the device is opened and continue incrementing its
                  time-stamp in microseconds until the device is closed.
                  If it does not support time-stamps, it should always return
                  -1.                
                <return>
                    the current time-stamp of the device in microseconds,
                      or -1 if time-stamping is not supported by the device.                    
                </return>
            </javadoc>
            <method name="getMaxReceivers" type="int" line="184"/>
            <javadoc line="184">
                Obtains the maximum number of MIDI IN connections available on this
                  MIDI device for receiving MIDI data.                
                <return>
                    maximum number of MIDI IN connections,
                      or -1 if an unlimited number of connections is available.                    
                </return>
            </javadoc>
            <method name="getMaxTransmitters" type="int" line="193"/>
            <javadoc line="193">
                Obtains the maximum number of MIDI OUT connections available on this
                  MIDI device for transmitting MIDI data.                
                <return>
                    maximum number of MIDI OUT connections,
                      or -1 if an unlimited number of connections is available.                    
                </return>
            </javadoc>
            <method name="getReceiver" type="Receiver" line="202"/>
            <javadoc line="202">
                Obtains a MIDI IN receiver through which the MIDI device may receive
                  MIDI data.  The returned receiver must be closed when the application
                  has finished using it.
                  &lt;p&gt;Usually the returned receiver implements
                  the {@code MidiDeviceReceiver} interface.
                  &lt;p&gt;Obtaining a &lt;code&gt;Receiver&lt;/code&gt; with this method does not
                  open the device. To be able to use the device, it has to be
                  opened explicitly by calling {@link #open}. Also, closing the
                  &lt;code&gt;Receiver&lt;/code&gt; does not close the device. It has to be
                  closed explicitly by calling {@link #close}.                
                <return>
                    a receiver for the device.                    
                </return>
                <throws>
                    MidiUnavailableException thrown if a receiver is not available
                      due to resource restrictions                    
                </throws>
                <see>
                    Receiver#close()                    
                </see>
            </javadoc>
            <method name="getReceivers" type="List<Receiver>" line="224"/>
            <javadoc line="224">
                Returns all currently active, non-closed receivers
                  connected with this MidiDevice.
                  A receiver can be removed
                  from the device by closing it.
                  &lt;p&gt;Usually the returned receivers implement
                  the {@code MidiDeviceReceiver} interface.                
                <return>
                    an unmodifiable list of the open receivers                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getTransmitter" type="Transmitter" line="239"/>
            <javadoc line="239">
                Obtains a MIDI OUT connection from which the MIDI device will transmit
                  MIDI data  The returned transmitter must be closed when the application
                  has finished using it.
                  &lt;p&gt;Usually the returned transmitter implements
                  the {@code MidiDeviceTransmitter} interface.
                  &lt;p&gt;Obtaining a &lt;code&gt;Transmitter&lt;/code&gt; with this method does not
                  open the device. To be able to use the device, it has to be
                  opened explicitly by calling {@link #open}. Also, closing the
                  &lt;code&gt;Transmitter&lt;/code&gt; does not close the device. It has to be
                  closed explicitly by calling {@link #close}.                
                <return>
                    a MIDI OUT transmitter for the device.                    
                </return>
                <throws>
                    MidiUnavailableException thrown if a transmitter is not available
                      due to resource restrictions                    
                </throws>
                <see>
                    Transmitter#close()                    
                </see>
            </javadoc>
            <method name="getTransmitters" type="List<Transmitter>" line="261"/>
            <javadoc line="261">
                Returns all currently active, non-closed transmitters
                  connected with this MidiDevice.
                  A transmitter can be removed
                  from the device by closing it.
                  &lt;p&gt;Usually the returned transmitters implement
                  the {@code MidiDeviceTransmitter} interface.                
                <return>
                    an unmodifiable list of the open transmitters                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <class name="Info" line="277">
                <javadoc line="277">
                    A &lt;code&gt;MidiDevice.Info&lt;/code&gt; object contains assorted
                      data about a &lt;code&gt;{@link MidiDevice}&lt;/code&gt;, including its
                      name, the company who created it, and descriptive text.                    
                    <see>
                        MidiDevice#getDeviceInfo                        
                    </see>
                </javadoc>
                <declaration name="name" type="String" line="286"/>
                <javadoc line="286">
                    The device&apos;s name.                    
                </javadoc>
                <declaration name="vendor" type="String" line="291"/>
                <javadoc line="291">
                    The name of the company who provides the device.                    
                </javadoc>
                <declaration name="description" type="String" line="296"/>
                <javadoc line="296">
                    A description of the device.                    
                </javadoc>
                <declaration name="version" type="String" line="301"/>
                <javadoc line="301">
                    Device version.                    
                </javadoc>
                <javadoc line="307">
                    Constructs a device info object.                    
                    <param>
                        name the name of the device                        
                    </param>
                    <param>
                        vendor the name of the company who provides the device                        
                    </param>
                    <param>
                        description a description of the device                        
                    </param>
                    <param>
                        version version information for the device                        
                    </param>
                </javadoc>
                <method name="Info" type="constructor" line="315">
                    <params>
                        <param name="name" type="String"/>
                        <param name="vendor" type="String"/>
                        <param name="description" type="String"/>
                        <param name="version" type="String"/>
                    </params>
                </method>
                <javadoc line="324">
                    Reports whether two objects are equal.
                      Returns &lt;code&gt;true&lt;/code&gt; if the objects are identical.                    
                    <param>
                        obj the reference object with which to compare this
                          object                        
                    </param>
                    <return>
                        &lt;code&gt;true&lt;/code&gt; if this object is the same as the
                          &lt;code&gt;obj&lt;/code&gt; argument; &lt;code&gt;false&lt;/code&gt; otherwise                        
                    </return>
                </javadoc>
                <method name="equals" type="boolean" line="332">
                    <params>
                        <param name="obj" type="Object"/>
                    </params>
                </method>
                <javadoc line="337">
                    Finalizes the hashcode method.                    
                </javadoc>
                <method name="hashCode" type="int" line="340"/>
                <javadoc line="345">
                    Obtains the name of the device.                    
                    <return>
                        a string containing the device&apos;s name                        
                    </return>
                </javadoc>
                <method name="getName" type="String" line="350"/>
                <javadoc line="355">
                    Obtains the name of the company who supplies the device.                    
                    <return>
                        device the vendor&apos;s name                        
                    </return>
                </javadoc>
                <method name="getVendor" type="String" line="359"/>
                <javadoc line="364">
                    Obtains the description of the device.                    
                    <return>
                        a description of the device                        
                    </return>
                </javadoc>
                <method name="getDescription" type="String" line="368"/>
                <javadoc line="373">
                    Obtains the version of the device.                    
                    <return>
                        textual version information for the device.                        
                    </return>
                </javadoc>
                <method name="getVersion" type="String" line="377"/>
                <javadoc line="382">
                    Provides a string representation of the device information.                    
                    <return>
                        a description of the info object                        
                    </return>
                </javadoc>
                <method name="toString" type="String" line="387"/>
            </class>
        </interface>
    </source>