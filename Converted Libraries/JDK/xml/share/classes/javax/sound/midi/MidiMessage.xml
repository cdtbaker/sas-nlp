<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.sound.midi">
        <class name="MidiMessage" line="2">
            <implements interface="Cloneable"/>
            <javadoc line="2">
                &lt;code&gt;MidiMessage&lt;/code&gt; is the base class for MIDI messages.  They include
                  not only the standard MIDI messages that a synthesizer can respond to, but also
                  &quot;meta-events&quot; that can be used by sequencer programs.  There are meta-events
                  for such information as lyrics, copyrights, tempo indications, time and key
                  signatures, markers, etc.  For more information, see the Standard MIDI Files 1.0
                  specification, which is part of the Complete MIDI 1.0 Detailed Specification
                  published by the MIDI Manufacturer&apos;s Association
                  (&lt;a href = http://www.midi.org&gt;http://www.midi.org&lt;/a&gt;).
                  &lt;p&gt;
                  The base &lt;code&gt;MidiMessage&lt;/code&gt; class provides access to three types of
                  information about a MIDI message:
                  &lt;ul&gt;
                  &lt;li&gt;The messages&apos;s status byte&lt;/li&gt;
                  &lt;li&gt;The total length of the message in bytes (the status byte plus any data bytes)&lt;/li&gt;
                  &lt;li&gt;A byte array containing the complete message&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;code&gt;MidiMessage&lt;/code&gt; includes methods to get, but not set, these values.
                  Setting them is a subclass responsibility.
                  &lt;p&gt;
                  &lt;a name=&quot;integersVsBytes&quot;&gt;&lt;/a&gt;
                  The MIDI standard expresses MIDI data in bytes.  However, because
                  Java&lt;sup&gt;TM&lt;/sup&gt; uses signed bytes, the Java Sound API uses integers
                  instead of bytes when expressing MIDI data.  For example, the{@link #getStatus()} method of
                  &lt;code&gt;MidiMessage&lt;/code&gt; returns MIDI status bytes as integers.  If you are
                  processing MIDI data that originated outside Java Sound and now
                  is encoded as signed bytes, the bytes can
                  can be converted to integers using this conversion:
                  &lt;center&gt;&lt;code&gt;int i = (int)(byte &amp; 0xFF)&lt;/code&gt;&lt;/center&gt;
                  &lt;p&gt;
                  If you simply need to pass a known MIDI byte value as a method parameter,
                  it can be expressed directly as an integer, using (for example) decimal or
                  hexidecimal notation.  For instance, to pass the &quot;active sensing&quot; status byte
                  as the first argument to ShortMessage&apos;s{@link ShortMessage#setMessage(int) setMessage(int)}method, you can express it as 254 or 0xFE.                
                <see>
                    Track                    
                </see>
                <see>
                    Sequence                    
                </see>
                <see>
                    Receiver                    
                </see>
                <author>
                    David Rivas                    
                </author>
                <author>
                    Kara Kytle                    
                </author>
            </javadoc>
            <declaration name="data" type="byte[]" line="43"/>
            <javadoc line="43">
                The MIDI message data.  The first byte is the status
                  byte for the message; subsequent bytes up to the length
                  of the message are data bytes for this message.                
                <see>
                    #getLength                    
                </see>
            </javadoc>
            <declaration name="length" type="int" line="50"/>
            <javadoc line="50">
                The number of bytes in the MIDI message, including the
                  status byte and any data bytes.                
                <see>
                    #getLength                    
                </see>
            </javadoc>
            <javadoc line="56">
                Constructs a new &lt;code&gt;MidiMessage&lt;/code&gt;.  This protected
                  constructor is called by concrete subclasses, which should
                  ensure that the data array specifies a complete, valid MIDI
                  message.                
                <param>
                    data an array of bytes containing the complete message.
                      The message data may be changed using the <code>setMessage</code>
                      method.                    
                </param>
                <see>
                    #setMessage                    
                </see>
            </javadoc>
            <method name="MidiMessage" type="constructor" line="66">
                <params>
                    <param name="data" type="byte[]"/>
                </params>
                <scope line="68"/>
            </method>
            <javadoc line="72">
                Sets the data for the MIDI message.   This protected
                  method is called by concrete subclasses, which should
                  ensure that the data array specifies a complete, valid MIDI
                  message.                
            </javadoc>
            <method name="setMessage" type="void" line="78">
                <params>
                    <param name="data" type="byte[]"/>
                    <param name="length" type="int"/>
                </params>
                <scope line="79"/>
                <scope line="83"/>
            </method>
            <javadoc line="88">
                Obtains the MIDI message data.  The first byte of the returned byte
                  array is the status byte of the message.  Any subsequent bytes up to
                  the length of the message are data bytes.  The byte array may have a
                  length which is greater than that of the actual message; the total
                  length of the message in bytes is reported by the &lt;code&gt;{@link #getLength}&lt;/code&gt;
                  method.                
                <return>
                    the byte array containing the complete <code>MidiMessage</code> data                    
                </return>
            </javadoc>
            <method name="getMessage" type="byte[]" line="97">
                <declaration name="returnedArray" type="byte[]" line="98"/>
            </method>
            <javadoc line="102">
                Obtains the status byte for the MIDI message.  The status &quot;byte&quot; is
                  represented as an integer; see the
                  &lt;a href=&quot;#integersVsBytes&quot;&gt;discussion&lt;/a&gt; in the
                  &lt;code&gt;MidiMessage&lt;/code&gt; class description.                
                <return>
                    the integer representation of this event's status byte                    
                </return>
            </javadoc>
            <method name="getStatus" type="int" line="109">
                <scope line="110"/>
            </method>
            <javadoc line="115">
                Obtains the total length of the MIDI message in bytes.  A
                  MIDI message consists of one status byte and zero or more
                  data bytes.  The return value ranges from 1 for system real-time messages,
                  to 2 or 3 for channel messages, to any value for meta and system
                  exclusive messages.                
                <return>
                    the length of the message in bytes                    
                </return>
            </javadoc>
            <method name="getLength" type="int" line="123"/>
            <method name="clone" type="Object" line="126"/>
            <javadoc line="126">
                Creates a new object of the same class and with the same contents
                  as this object.                
                <return>
                    a clone of this instance.                    
                </return>
            </javadoc>
        </class>
    </source>