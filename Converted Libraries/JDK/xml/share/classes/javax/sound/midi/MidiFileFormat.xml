<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.sound.midi">
        <import package="java.io.InputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.util.Collections"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Map"/>
        <class name="MidiFileFormat" line="7">
            <javadoc line="7">
                A &lt;code&gt;MidiFileFormat&lt;/code&gt; object encapsulates a MIDI file&apos;s
                  type, as well as its length and timing information.
                  &lt;p&gt;A &lt;code&gt;MidiFileFormat&lt;/code&gt; object can
                  include a set of properties. A property is a pair of key and value:
                  the key is of type &lt;code&gt;String&lt;/code&gt;, the associated property
                  value is an arbitrary object.
                  Properties specify additional informational
                  meta data (like a author, or copyright).
                  Properties are optional information, and file reader and file
                  writer implementations are not required to provide or
                  recognize properties.
                  &lt;p&gt;The following table lists some common properties that should
                  be used in implementations:
                  &lt;table border=1&gt;
                  &lt;tr&gt;
                  &lt;th&gt;Property key&lt;/th&gt;
                  &lt;th&gt;Value type&lt;/th&gt;
                  &lt;th&gt;Description&lt;/th&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;&amp;quot;author&amp;quot;&lt;/td&gt;
                  &lt;td&gt;{@link java.lang.String String}&lt;/td&gt;
                  &lt;td&gt;name of the author of this file&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;&amp;quot;title&amp;quot;&lt;/td&gt;
                  &lt;td&gt;{@link java.lang.String String}&lt;/td&gt;
                  &lt;td&gt;title of this file&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;&amp;quot;copyright&amp;quot;&lt;/td&gt;
                  &lt;td&gt;{@link java.lang.String String}&lt;/td&gt;
                  &lt;td&gt;copyright message&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;&amp;quot;date&amp;quot;&lt;/td&gt;
                  &lt;td&gt;{@link java.util.Date Date}&lt;/td&gt;
                  &lt;td&gt;date of the recording or release&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;&amp;quot;comment&amp;quot;&lt;/td&gt;
                  &lt;td&gt;{@link java.lang.String String}&lt;/td&gt;
                  &lt;td&gt;an arbitrary text&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;                
                <see>
                    MidiSystem#getMidiFileFormat(java.io.File)                    
                </see>
                <see>
                    Sequencer#setSequence(java.io.InputStream stream)                    
                </see>
                <author>
                    Kara Kytle                    
                </author>
                <author>
                    Florian Bomers                    
                </author>
            </javadoc>
            <declaration name="UNKNOWN_LENGTH" type="int" line="59"/>
            <javadoc line="59">
                Represents unknown length.                
                <see>
                    #getByteLength                    
                </see>
                <see>
                    #getMicrosecondLength                    
                </see>
            </javadoc>
            <declaration name="type" type="int" line="65"/>
            <javadoc line="65">
                The type of MIDI file.                
            </javadoc>
            <declaration name="divisionType" type="float" line="69"/>
            <javadoc line="69">
                The division type of the MIDI file.                
                <see>
                    Sequence#PPQ                    
                </see>
                <see>
                    Sequence#SMPTE_24                    
                </see>
                <see>
                    Sequence#SMPTE_25                    
                </see>
                <see>
                    Sequence#SMPTE_30DROP                    
                </see>
                <see>
                    Sequence#SMPTE_30                    
                </see>
            </javadoc>
            <declaration name="resolution" type="int" line="78"/>
            <javadoc line="78">
                The timing resolution of the MIDI file.                
            </javadoc>
            <declaration name="byteLength" type="int" line="82"/>
            <javadoc line="82">
                The length of the MIDI file in bytes.                
            </javadoc>
            <declaration name="microsecondLength" type="long" line="86"/>
            <javadoc line="86">
                The duration of the MIDI file in microseconds.                
            </javadoc>
            <declaration name="properties" type="HashMap&amp;lt;String,Object&amp;gt;" line="90"/>
            <javadoc line="90">
                The set of properties                
            </javadoc>
            <javadoc line="94">
                Constructs a &lt;code&gt;MidiFileFormat&lt;/code&gt;.                
                <param>
                    type the MIDI file type (0, 1, or 2)                    
                </param>
                <param>
                    divisionType the timing division type (PPQ or one of the SMPTE types)                    
                </param>
                <param>
                    resolution the timing resolution                    
                </param>
                <param>
                    bytes the length of the MIDI file in bytes, or UNKNOWN_LENGTH if not known                    
                </param>
                <param>
                    microseconds the duration of the file in microseconds, or UNKNOWN_LENGTH if not known                    
                </param>
                <see>
                    #UNKNOWN_LENGTH                    
                </see>
                <see>
                    Sequence#PPQ                    
                </see>
                <see>
                    Sequence#SMPTE_24                    
                </see>
                <see>
                    Sequence#SMPTE_25                    
                </see>
                <see>
                    Sequence#SMPTE_30DROP                    
                </see>
                <see>
                    Sequence#SMPTE_30                    
                </see>
            </javadoc>
            <method name="MidiFileFormat" type="constructor" line="108">
                <params>
                    <param name="type" type="int"/>
                    <param name="divisionType" type="float"/>
                    <param name="resolution" type="int"/>
                    <param name="bytes" type="int"/>
                    <param name="microseconds" type="long"/>
                </params>
            </method>
            <javadoc line="116">
                Construct a &lt;code&gt;MidiFileFormat&lt;/code&gt; with a set of properties.                
                <param>
                    type         the MIDI file type (0, 1, or 2)                    
                </param>
                <param>
                    divisionType the timing division type
                      (PPQ or one of the SMPTE types)                    
                </param>
                <param>
                    resolution   the timing resolution                    
                </param>
                <param>
                    bytes the length of the MIDI file in bytes,
                      or UNKNOWN_LENGTH if not known                    
                </param>
                <param>
                    microseconds the duration of the file in microseconds,
                      or UNKNOWN_LENGTH if not known                    
                </param>
                <param>
                    properties  a &lt;code&gt;Map&amp;lt;String,Object&amp;gt;&lt;/code&gt; object
                      with properties                    
                </param>
                <see>
                    #UNKNOWN_LENGTH                    
                </see>
                <see>
                    Sequence#PPQ                    
                </see>
                <see>
                    Sequence#SMPTE_24                    
                </see>
                <see>
                    Sequence#SMPTE_25                    
                </see>
                <see>
                    Sequence#SMPTE_30DROP                    
                </see>
                <see>
                    Sequence#SMPTE_30                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="MidiFileFormat" type="constructor" line="136">
                <params>
                    <param name="type" type="int"/>
                    <param name="divisionType" type="float"/>
                    <param name="resolution" type="int"/>
                    <param name="bytes" type="int"/>
                    <param name="microseconds" type="long"/>
                    <param name="properties" type="Map&lt;String,Object&gt;"/>
                </params>
            </method>
            <javadoc line="140">
                Obtains the MIDI file type.                
                <return>
                    the file&apos;s type (0, 1, or 2)                    
                </return>
            </javadoc>
            <method name="getType" type="int" line="144"/>
            <javadoc line="147">
                Obtains the timing division type for the MIDI file.                
                <return>
                    the division type (PPQ or one of the SMPTE types)                    
                </return>
                <see>
                    Sequence#Sequence(float,int)                    
                </see>
                <see>
                    Sequence#PPQ                    
                </see>
                <see>
                    Sequence#SMPTE_24                    
                </see>
                <see>
                    Sequence#SMPTE_25                    
                </see>
                <see>
                    Sequence#SMPTE_30DROP                    
                </see>
                <see>
                    Sequence#SMPTE_30                    
                </see>
                <see>
                    Sequence#getDivisionType()                    
                </see>
            </javadoc>
            <method name="getDivisionType" type="float" line="158"/>
            <javadoc line="161">
                Obtains the timing resolution for the MIDI file.
                  If the division type is PPQ, the resolution is specified in ticks per beat.
                  For SMTPE timing, the resolution is specified in ticks per frame.                
                <return>
                    the number of ticks per beat (PPQ) or per frame (SMPTE)                    
                </return>
                <see>
                    #getDivisionType                    
                </see>
                <see>
                    Sequence#getResolution()                    
                </see>
            </javadoc>
            <method name="getResolution" type="int" line="169"/>
            <javadoc line="172">
                Obtains the length of the MIDI file, expressed in 8-bit bytes.                
                <return>
                    the number of bytes in the file, or UNKNOWN_LENGTH if not known                    
                </return>
                <see>
                    #UNKNOWN_LENGTH                    
                </see>
            </javadoc>
            <method name="getByteLength" type="int" line="177"/>
            <javadoc line="180">
                Obtains the length of the MIDI file, expressed in microseconds.                
                <return>
                    the file&apos;s duration in microseconds, or UNKNOWN_LENGTH if not known                    
                </return>
                <see>
                    Sequence#getMicrosecondLength()                    
                </see>
                <see>
                    #getByteLength                    
                </see>
                <see>
                    #UNKNOWN_LENGTH                    
                </see>
            </javadoc>
            <method name="getMicrosecondLength" type="long" line="187"/>
            <javadoc line="190">
                Obtain an unmodifiable map of properties.
                  The concept of properties is further explained in
                  the {@link MidiFileFormat class description}.                
                <return>
                    a &lt;code&gt;Map&amp;lt;String,Object&amp;gt;&lt;/code&gt; object containing
                      all properties. If no properties are recognized, an empty map is
                      returned.                    
                </return>
                <see>
                    #getProperty(String)                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="properties" type="Map&lt;String,Object&gt;" line="200">
                <declaration name="ret" type="Map&amp;lt;String,Object&amp;gt;" line="201"/>
                <scope line="202"/>
                <scope line="205"/>
            </method>
            <javadoc line="210">
                Obtain the property value specified by the key.
                  The concept of properties is further explained in
                  the {@link MidiFileFormat class description}.
                  &lt;p&gt;If the specified property is not defined for a
                  particular file format, this method returns
                  &lt;code&gt;null&lt;/code&gt;.                
                <param>
                    key the key of the desired property                    
                </param>
                <return>
                    the value of the property with the specified key,
                      or &lt;code&gt;null&lt;/code&gt; if the property does not exist.                    
                </return>
                <see>
                    #properties()                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getProperty" type="Object" line="223">
                <params>
                    <param name="key" type="String"/>
                </params>
                <scope line="224"/>
            </method>
        </class>
    </source>