<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.sound.midi">
        <import package="java.util.Vector"/>
        <import package="com.sun.media.sound.MidiUtils"/>
        <class name="Sequence" line="32">
            <comment line="59">
                Timing types                
            </comment>
            <comment line="92">
                Variables                
            </comment>
            <javadoc line="32">
                A &lt;code&gt;Sequence&lt;/code&gt; is a data structure containing musical
                  information (often an entire song or composition) that can be played
                  back by a &lt;code&gt;{@link Sequencer}&lt;/code&gt; object. Specifically, the
                  &lt;code&gt;Sequence&lt;/code&gt; contains timing
                  information and one or more tracks.  Each &lt;code&gt;{@link Track track}&lt;/code&gt; consists of a
                  series of MIDI events (such as note-ons, note-offs, program changes, and meta-events).
                  The sequence&apos;s timing information specifies the type of unit that is used
                  to time-stamp the events in the sequence.
                  &lt;p&gt;
                  A &lt;code&gt;Sequence&lt;/code&gt; can be created from a MIDI file by reading the file
                  into an input stream and invoking one of the &lt;code&gt;getSequence&lt;/code&gt; methods of{@link MidiSystem}.  A sequence can also be built from scratch by adding new
                  &lt;code&gt;Tracks&lt;/code&gt; to an empty &lt;code&gt;Sequence&lt;/code&gt;, and adding
                  &lt;code&gt;{@link MidiEvent}&lt;/code&gt; objects to these &lt;code&gt;Tracks&lt;/code&gt;.                
                <see>
                    Sequencer#setSequence(java.io.InputStream stream)                    
                </see>
                <see>
                    Sequencer#setSequence(Sequence sequence)                    
                </see>
                <see>
                    Track#add(MidiEvent)                    
                </see>
                <see>
                    MidiFileFormat                    
                </see>
                <author>
                    Kara Kytle                    
                </author>
            </javadoc>
            <declaration name="PPQ" type="float" line="60"/>
            <javadoc line="60">
                The tempo-based timing type, for which the resolution is expressed in pulses (ticks) per quarter note.                
                <see>
                    #Sequence(float,int)                    
                </see>
            </javadoc>
            <declaration name="SMPTE_24" type="float" line="66"/>
            <javadoc line="66">
                The SMPTE-based timing type with 24 frames per second (resolution is expressed in ticks per frame).                
                <see>
                    #Sequence(float,int)                    
                </see>
            </javadoc>
            <declaration name="SMPTE_25" type="float" line="72"/>
            <javadoc line="72">
                The SMPTE-based timing type with 25 frames per second (resolution is expressed in ticks per frame).                
                <see>
                    #Sequence(float,int)                    
                </see>
            </javadoc>
            <declaration name="SMPTE_30DROP" type="float" line="78"/>
            <javadoc line="78">
                The SMPTE-based timing type with 29.97 frames per second (resolution is expressed in ticks per frame).                
                <see>
                    #Sequence(float,int)                    
                </see>
            </javadoc>
            <declaration name="SMPTE_30" type="float" line="84"/>
            <javadoc line="84">
                The SMPTE-based timing type with 30 frames per second (resolution is expressed in ticks per frame).                
                <see>
                    #Sequence(float,int)                    
                </see>
            </javadoc>
            <declaration name="divisionType" type="float" line="93"/>
            <javadoc line="93">
                The timing division type of the sequence.                
                <see>
                    #PPQ                    
                </see>
                <see>
                    #SMPTE_24                    
                </see>
                <see>
                    #SMPTE_25                    
                </see>
                <see>
                    #SMPTE_30DROP                    
                </see>
                <see>
                    #SMPTE_30                    
                </see>
                <see>
                    #getDivisionType                    
                </see>
            </javadoc>
            <declaration name="resolution" type="int" line="104"/>
            <javadoc line="104">
                The timing resolution of the sequence.                
                <see>
                    #getResolution                    
                </see>
            </javadoc>
            <declaration name="tracks" type="Vector&lt;Track&gt;" line="110"/>
            <javadoc line="110">
                The MIDI tracks in this sequence.                
                <see>
                    #getTracks                    
                </see>
            </javadoc>
            <javadoc line="117">
                Constructs a new MIDI sequence with the specified timing division
                  type and timing resolution.  The division type must be one of the
                  recognized MIDI timing types.  For tempo-based timing,
                  &lt;code&gt;divisionType&lt;/code&gt; is PPQ (pulses per quarter note) and
                  the resolution is specified in ticks per beat.  For SMTPE timing,
                  &lt;code&gt;divisionType&lt;/code&gt; specifies the number of frames per
                  second and the resolution is specified in ticks per frame.
                  The sequence will contain no initial tracks.  Tracks may be
                  added to or removed from the sequence using &lt;code&gt;{@link #createTrack}&lt;/code&gt;
                  and &lt;code&gt;{@link #deleteTrack}&lt;/code&gt;.                
                <param>
                    divisionType the timing division type (PPQ or one of the SMPTE types)                    
                </param>
                <param>
                    resolution the timing resolution                    
                </param>
                <throws>
                    InvalidMidiDataException if <code>divisionType</code> is not valid                    
                </throws>
                <see>
                    #PPQ                    
                </see>
                <see>
                    #SMPTE_24                    
                </see>
                <see>
                    #SMPTE_25                    
                </see>
                <see>
                    #SMPTE_30DROP                    
                </see>
                <see>
                    #SMPTE_30                    
                </see>
                <see>
                    #getDivisionType                    
                </see>
                <see>
                    #getResolution                    
                </see>
                <see>
                    #getTracks                    
                </see>
            </javadoc>
            <method name="Sequence" type="constructor" line="142">
                <params>
                    <param name="divisionType" type="float"/>
                    <param name="resolution" type="int"/>
                </params>
            </method>
            <javadoc line="160">
                Constructs a new MIDI sequence with the specified timing division
                  type, timing resolution, and number of tracks.  The division type must be one of the
                  recognized MIDI timing types.  For tempo-based timing,
                  &lt;code&gt;divisionType&lt;/code&gt; is PPQ (pulses per quarter note) and
                  the resolution is specified in ticks per beat.  For SMTPE timing,
                  &lt;code&gt;divisionType&lt;/code&gt; specifies the number of frames per
                  second and the resolution is specified in ticks per frame.
                  The sequence will be initialized with the number of tracks specified by
                  &lt;code&gt;numTracks&lt;/code&gt;. These tracks are initially empty (i.e.
                  they contain only the meta-event End of Track).
                  The tracks may be retrieved for editing using the &lt;code&gt;{@link #getTracks}&lt;/code&gt;
                  method.  Additional tracks may be added, or existing tracks removed,
                  using &lt;code&gt;{@link #createTrack}&lt;/code&gt; and &lt;code&gt;{@link #deleteTrack}&lt;/code&gt;.                
                <param>
                    divisionType the timing division type (PPQ or one of the SMPTE types)                    
                </param>
                <param>
                    resolution the timing resolution                    
                </param>
                <param>
                    numTracks the initial number of tracks in the sequence.                    
                </param>
                <throws>
                    InvalidMidiDataException if <code>divisionType</code> is not valid                    
                </throws>
                <see>
                    #PPQ                    
                </see>
                <see>
                    #SMPTE_24                    
                </see>
                <see>
                    #SMPTE_25                    
                </see>
                <see>
                    #SMPTE_30DROP                    
                </see>
                <see>
                    #SMPTE_30                    
                </see>
                <see>
                    #getDivisionType                    
                </see>
                <see>
                    #getResolution                    
                </see>
            </javadoc>
            <method name="Sequence" type="constructor" line="188">
                <params>
                    <param name="divisionType" type="float"/>
                    <param name="resolution" type="int"/>
                    <param name="numTracks" type="int"/>
                </params>
                <scope line="204"/>
            </method>
            <javadoc line="210">
                Obtains the timing division type for this sequence.                
                <return>
                    the division type (PPQ or one of the SMPTE types)                    
                </return>
                <see>
                    #PPQ                    
                </see>
                <see>
                    #SMPTE_24                    
                </see>
                <see>
                    #SMPTE_25                    
                </see>
                <see>
                    #SMPTE_30DROP                    
                </see>
                <see>
                    #SMPTE_30                    
                </see>
                <see>
                    #Sequence(float,int)                    
                </see>
                <see>
                    MidiFileFormat#getDivisionType()                    
                </see>
            </javadoc>
            <method name="getDivisionType" type="float" line="222"/>
            <javadoc line="227">
                Obtains the timing resolution for this sequence.
                  If the sequence&apos;s division type is PPQ, the resolution is specified in ticks per beat.
                  For SMTPE timing, the resolution is specified in ticks per frame.                
                <return>
                    the number of ticks per beat (PPQ) or per frame (SMPTE)                    
                </return>
                <see>
                    #getDivisionType                    
                </see>
                <see>
                    #Sequence(float,int)                    
                </see>
                <see>
                    MidiFileFormat#getResolution()                    
                </see>
            </javadoc>
            <method name="getResolution" type="int" line="237"/>
            <javadoc line="242">
                Creates a new, initially empty track as part of this sequence.
                  The track initially contains the meta-event End of Track.
                  The newly created track is returned.  All tracks in the sequence
                  may be retrieved using &lt;code&gt;{@link #getTracks}&lt;/code&gt;.  Tracks may be
                  removed from the sequence using &lt;code&gt;{@link #deleteTrack}&lt;/code&gt;.                
                <return>
                    the newly created track                    
                </return>
            </javadoc>
            <method name="createTrack" type="Track" line="250">
                <declaration name="track" type="Track" line="252"/>
            </method>
            <javadoc line="259">
                Removes the specified track from the sequence.                
                <param>
                    track the track to remove                    
                </param>
                <return>
                    <code>true</code> if the track existed in the track and was removed,
                      otherwise <code>false</code>.                    
                </return>
                <see>
                    #createTrack                    
                </see>
                <see>
                    #getTracks                    
                </see>
            </javadoc>
            <method name="deleteTrack" type="boolean" line="268">
                <params>
                    <param name="track" type="Track"/>
                </params>
                <scope line="270"/>
            </method>
            <javadoc line="277">
                Obtains an array containing all the tracks in this sequence.
                  If the sequence contains no tracks, an array of length 0 is returned.                
                <return>
                    the array of tracks                    
                </return>
                <see>
                    #createTrack                    
                </see>
                <see>
                    #deleteTrack                    
                </see>
            </javadoc>
            <method name="getTracks" type="Track[]" line="285"/>
            <javadoc line="291">
                Obtains the duration of this sequence, expressed in microseconds.                
                <return>
                    this sequence's duration in microseconds.                    
                </return>
            </javadoc>
            <method name="getMicrosecondLength" type="long" line="295"/>
            <javadoc line="301">
                Obtains the duration of this sequence, expressed in MIDI ticks.                
                <return>
                    this sequence's length in ticks                    
                </return>
                <see>
                    #getMicrosecondLength                    
                </see>
            </javadoc>
            <method name="getTickLength" type="long" line="308">
                <declaration name="length" type="long" line="310"/>
                <scope line="312">
                    <scope line="314">
                        <declaration name="temp" type="long" line="315"/>
                        <scope line="316"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="325">
                Obtains a list of patches referenced in this sequence.
                  This patch list may be used to load the required
                  &lt;code&gt;{@link Instrument}&lt;/code&gt; objects
                  into a &lt;code&gt;{@link Synthesizer}&lt;/code&gt;.                
                <return>
                    an array of <code>{@link Patch}</code> objects used in this sequence                    
                </return>
                <see>
                    Synthesizer#loadInstruments(Soundbank,Patch[])                    
                </see>
            </javadoc>
            <method name="getPatchList" type="Patch[]" line="335">
                <comment line="337">
                    $$kk: 04.09.99: need to implement!!                    
                </comment>
            </method>
        </class>
    </source>