<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.sound.midi">
        <import package="java.util.Vector"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.HashSet"/>
        <import package="com.sun.media.sound.MidiUtils"/>
        <class name="Track" line="33">
            <comment line="67">
                TODO: use arrays for faster access                
            </comment>
            <comment line="69">
                the list containing the events                
            </comment>
            <comment line="72">
                use a hashset to detect duplicate events in add(MidiEvent)                
            </comment>
            <javadoc line="33">
                A MIDI track is an independent stream of MIDI events (time-stamped MIDI
                  data) that can be stored along with other tracks in a standard MIDI file.
                  The MIDI specification allows only 16 channels of MIDI data, but tracks
                  are a way to get around this limitation.  A MIDI file can contain any number
                  of tracks, each containing its own stream of up to 16 channels of MIDI data.
                  &lt;p&gt;
                  A &lt;code&gt;Track&lt;/code&gt; occupies a middle level in the hierarchy of data played
                  by a &lt;code&gt;{@link Sequencer}&lt;/code&gt;: sequencers play sequences, which contain tracks,
                  which contain MIDI events.  A sequencer may provide controls that mute
                  or solo individual tracks.
                  &lt;p&gt;
                  The timing information and resolution for a track is controlled by and stored
                  in the sequence containing the track. A given &lt;code&gt;Track&lt;/code&gt;
                  is considered to belong to the particular &lt;code&gt;{@link Sequence}&lt;/code&gt; that
                  maintains its timing. For this reason, a new (empty) track is created by calling the
                  &lt;code&gt;{@link Sequence#createTrack}&lt;/code&gt; method, rather than by directly invoking a
                  &lt;code&gt;Track&lt;/code&gt; constructor.
                  &lt;p&gt;
                  The &lt;code&gt;Track&lt;/code&gt; class provides methods to edit the track by adding
                  or removing &lt;code&gt;MidiEvent&lt;/code&gt; objects from it.  These operations keep
                  the event list in the correct time order.  Methods are also
                  included to obtain the track&apos;s size, in terms of either the number of events
                  it contains or its duration in ticks.                
                <see>
                    Sequencer#setTrackMute                    
                </see>
                <see>
                    Sequencer#setTrackSolo                    
                </see>
                <author>
                    Kara Kytle                    
                </author>
                <author>
                    Florian Bomers                    
                </author>
            </javadoc>
            <declaration name="eventsList" type="ArrayList" line="69"/>
            <declaration name="set" type="HashSet" line="72"/>
            <declaration name="eotEvent" type="MidiEvent" line="74"/>
            <javadoc line="77">
                Package-private constructor.  Constructs a new, empty Track object,
                  which initially contains one event, the meta-event End of Track.                
            </javadoc>
            <method name="Track" type="constructor" line="81">
                <comment line="82">
                    start with the end of track event                    
                </comment>
                <declaration name="eot" type="MetaMessage" line="83"/>
            </method>
            <javadoc line="89">
                Adds a new event to the track.  However, if the event is already
                  contained in the track, it is not added again.  The list of events
                  is kept in time order, meaning that this event inserted at the
                  appropriate place in the list, not necessarily at the end.                
                <param>
                    event the event to add                    
                </param>
                <return>
                    <code>true</code> if the event did not already exist in the
                      track and was added, otherwise <code>false</code>                    
                </return>
            </javadoc>
            <method name="add" type="boolean" line="99">
                <params>
                    <param name="event" type="MidiEvent"/>
                </params>
                <comment line="108">
                    get the last event                    
                </comment>
                <comment line="113">
                    sanity check that we have a correct end-of-track                    
                </comment>
                <comment line="115">
                    if there is no eot event, add our immutable instance again                    
                </comment>
                <comment line="117">
                    set eotEvent&apos;s tick to the last tick of the track                    
                </comment>
                <comment line="120">
                    if the events list is empty, just set the tick to 0                    
                </comment>
                <comment line="123">
                    we needn&apos;t check for a duplicate of eotEvent in &quot;eventsList&quot;,                    
                </comment>
                <comment line="124">
                    since then it would appear in the set.                    
                </comment>
                <comment line="130">
                    first see if we are trying to add                    
                </comment>
                <comment line="131">
                    and endoftrack event.                    
                </comment>
                <comment line="133">
                    since end of track event is useful                    
                </comment>
                <comment line="134">
                    for delays at the end of a track, we want to keep                    
                </comment>
                <comment line="135">
                    the tick value requested here if it is greater                    
                </comment>
                <comment line="136">
                    than the one on the eot we are maintaining.                    
                </comment>
                <comment line="137">
                    Otherwise, we only want a single eot event, so ignore.                    
                </comment>
                <comment line="144">
                    prevent duplicates                    
                </comment>
                <comment line="147">
                    insert event such that events is sorted in increasing                    
                </comment>
                <comment line="148">
                    tick order                    
                </comment>
                <comment line="156">
                    we&apos;re adding an event after the                    
                </comment>
                <comment line="157">
                    tick value of our eot, so push the eot out.                    
                </comment>
                <comment line="158">
                    Always add at the end for better performance:                    
                </comment>
                <comment line="159">
                    this saves all the checks and arraycopy when inserting                    
                </comment>
                <comment line="161">
                    overwrite eot with new event                    
                </comment>
                <comment line="163">
                    set new time of eot, if necessary                    
                </comment>
                <comment line="167">
                    add eot again at the end                    
                </comment>
                <scope line="100"/>
                <scope line="103">
                    <scope line="105">
                        <declaration name="eventsCount" type="int" line="106"/>
                        <declaration name="lastEvent" type="MidiEvent" line="109"/>
                        <scope line="110"/>
                        <scope line="114">
                            <scope line="116"/>
                            <scope line="119"/>
                        </scope>
                        <scope line="132">
                            <scope line="138"/>
                        </scope>
                        <declaration name="i" type="int" line="149"/>
                        <scope line="150">
                            <scope line="151"/>
                        </scope>
                        <scope line="155">
                            <scope line="164"/>
                        </scope>
                        <scope line="169"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="180">
                Removes the specified event from the track.                
                <param>
                    event the event to remove                    
                </param>
                <return>
                    <code>true</code> if the event existed in the track and was removed,
                      otherwise <code>false</code>                    
                </return>
            </javadoc>
            <method name="remove" type="boolean" line="186">
                <params>
                    <param name="event" type="MidiEvent"/>
                </params>
                <comment line="188">
                    this implementation allows removing the EOT event.                    
                </comment>
                <comment line="189">
                    pretty bad, but would probably be too risky to                    
                </comment>
                <comment line="190">
                    change behavior now, in case someone does tricks like:                    
                </comment>
                <comment line="191">
                                        
                </comment>
                <comment line="192">
                    while (track.size() &gt; 0) track.remove(track.get(track.size() - 1));                    
                </comment>
                <comment line="194">
                    also, would it make sense to adjust the EOT&apos;s time                    
                </comment>
                <comment line="195">
                    to the last event, if the last non-EOT event is removed?                    
                </comment>
                <comment line="196">
                    Or: document that the ticks() length will not be reduced                    
                </comment>
                <comment line="197">
                    by deleting events (unless the EOT event is removed)                    
                </comment>
                <scope line="198">
                    <scope line="199">
                        <declaration name="i" type="int" line="200"/>
                        <scope line="201"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="211">
                Obtains the event at the specified index.                
                <param>
                    index the location of the desired event in the event vector                    
                </param>
                <throws>
                    <code>ArrayIndexOutOfBoundsException</code>  if the
                      specified index is negative or not less than the current size of
                      this track.                    
                </throws>
                <see>
                    #size                    
                </see>
            </javadoc>
            <method name="get" type="MidiEvent" line="219">
                <params>
                    <param name="index" type="int"/>
                </params>
                <scope line="220">
                    <scope line="221"/>
                </scope>
                <scope line="224"/>
            </method>
            <javadoc line="230">
                Obtains the number of events in this track.                
                <return>
                    the size of the track's event vector                    
                </return>
            </javadoc>
            <method name="size" type="int" line="234">
                <scope line="235"/>
            </method>
            <javadoc line="241">
                Obtains the length of the track, expressed in MIDI ticks.  (The
                  duration of a tick in seconds is determined by the timing resolution
                  of the &lt;code&gt;Sequence&lt;/code&gt; containing this track, and also by
                  the tempo of the music as set by the sequencer.)                
                <return>
                    the duration, in ticks                    
                </return>
                <see>
                    Sequence#Sequence(float,int)                    
                </see>
                <see>
                    Sequencer#setTempoInBPM(float)                    
                </see>
                <see>
                    Sequencer#getTickPosition()                    
                </see>
            </javadoc>
            <method name="ticks" type="long" line="251">
                <declaration name="ret" type="long" line="252"/>
                <scope line="253">
                    <scope line="254"/>
                </scope>
            </method>
            <class name="ImmutableEndOfTrack" line="261">
                <extends class="MetaMessage"/>
                <method name="ImmutableEndOfTrack" type="constructor" line="262"/>
                <method name="setMessage" type="void" line="269">
                    <params>
                        <param name="type" type="int"/>
                        <param name="data" type="byte[]"/>
                        <param name="length" type="int"/>
                    </params>
                </method>
            </class>
        </class>
    </source>