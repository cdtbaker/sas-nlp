<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.sound.midi">
        <import package="javax.sound.sampled.Control"/>
        <interface name="Synthesizer">
            <implements interface="MidiDevice"/>
            <comment line="82">
                SYNTHESIZER METHODS                
            </comment>
            <comment line="340">
                RECEIVER METHODS                
            </comment>
            <comment line="342">
                Obtains the name of the receiver.
                 @return receiver name                
            </comment>
            <comment line="346">
                public abstract String getName();                
            </comment>
            <comment line="349">
                Opens the receiver.
                 @throws MidiUnavailableException if the receiver is cannot be opened,
                 usually because the MIDI device is in use by another application.
                 @throws SecurityException if the receiver cannot be opened due to security
                 restrictions.                
            </comment>
            <comment line="356">
                public abstract void open() throws MidiUnavailableException, SecurityException;                
            </comment>
            <comment line="359">
                Closes the receiver.                
            </comment>
            <comment line="362">
                public abstract void close();                
            </comment>
            <comment line="365">
                Sends a MIDI event to the receiver.
                 @param event event to send.
                 @throws IllegalStateException if the receiver is not open.                
            </comment>
            <comment line="370">
                public void send(MidiEvent event) throws IllegalStateException {
                
                  }                
            </comment>
            <comment line="375">
                Obtains the set of controls supported by the
                 element.  If no controls are supported, returns an
                 array of length 0.
                 @return set of controls                
            </comment>
            <comment line="381">
                $$kk: 03.04.99: josh bloch recommends getting rid of this:
                 what can you really do with a set of untyped controls??
                 $$kk: 03.05.99: i am putting this back in.  for one thing,
                 you can check the length and know whether you should keep
                 looking....
                 public Control[] getControls();                
            </comment>
            <comment line="388">
                Obtains the specified control.
                 @param controlClass class of the requested control
                 @return requested control object, or null if the
                 control is not supported.                
            </comment>
            <comment line="394">
                public Control getControl(Class controlClass);                
            </comment>
            <javadoc line="31">
                A &lt;code&gt;Synthesizer&lt;/code&gt; generates sound.  This usually happens when one of
                  the &lt;code&gt;Synthesizer&lt;/code&gt;&apos;s {@link MidiChannel} objects receives a{@link MidiChannel#noteOn(int,int) noteOn} message, either
                  directly or via the &lt;code&gt;Synthesizer&lt;/code&gt; object.
                  Many &lt;code&gt;Synthesizer&lt;/code&gt;s support &lt;code&gt;Receivers&lt;/code&gt;, through which
                  MIDI events can be delivered to the &lt;code&gt;Synthesizer&lt;/code&gt;.
                  In such cases, the &lt;code&gt;Synthesizer&lt;/code&gt; typically responds by sending
                  a corresponding message to the appropriate &lt;code&gt;MidiChannel&lt;/code&gt;, or by
                  processing the event itself if the event isn&apos;t one of the MIDI channel
                  messages.
                  &lt;p&gt;
                  The &lt;code&gt;Synthesizer&lt;/code&gt; interface includes methods for loading and
                  unloading instruments from soundbanks.  An instrument is a specification for synthesizing a
                  certain type of sound, whether that sound emulates a traditional instrument or is
                  some kind of sound effect or other imaginary sound. A soundbank is a collection of instruments, organized
                  by bank and program number (via the instrument&apos;s &lt;code&gt;Patch&lt;/code&gt; object).
                  Different &lt;code&gt;Synthesizer&lt;/code&gt; classes might implement different sound-synthesis
                  techniques, meaning that some instruments and not others might be compatible with a
                  given synthesizer.
                  Also, synthesizers may have a limited amount of memory for instruments, meaning
                  that not every soundbank and instrument can be used by every synthesizer, even if
                  the synthesis technique is compatible.
                  To see whether the instruments from
                  a certain soundbank can be played by a given synthesizer, invoke the{@link #isSoundbankSupported(Soundbank) isSoundbankSupported} method of
                  &lt;code&gt;Synthesizer&lt;/code&gt;.
                  &lt;p&gt;
                  &quot;Loading&quot; an instrument means that that instrument becomes available for
                  synthesizing notes.  The instrument is loaded into the bank and
                  program location specified by its &lt;code&gt;Patch&lt;/code&gt; object.  Loading does
                  not necessarily mean that subsequently played notes will immediately have
                  the sound of this newly loaded instrument.  For the instrument to play notes,
                  one of the synthesizer&apos;s &lt;code&gt;MidiChannel&lt;/code&gt; objects must receive (or have received)
                  a program-change message that causes that particular instrument&apos;s
                  bank and program number to be selected.                
                <see>
                    MidiSystem#getSynthesizer                    
                </see>
                <see>
                    Soundbank                    
                </see>
                <see>
                    Instrument                    
                </see>
                <see>
                    MidiChannel#programChange(int,int)                    
                </see>
                <see>
                    Receiver                    
                </see>
                <see>
                    Transmitter                    
                </see>
                <see>
                    MidiDevice                    
                </see>
                <author>
                    Kara Kytle                    
                </author>
            </javadoc>
            <method name="getMaxPolyphony" type="int" line="84"/>
            <javadoc line="84">
                Obtains the maximum number of notes that this synthesizer can sound simultaneously.                
                <return>
                    the maximum number of simultaneous notes                    
                </return>
                <see>
                    #getVoiceStatus                    
                </see>
            </javadoc>
            <method name="getLatency" type="long" line="92"/>
            <javadoc line="92">
                Obtains the processing latency incurred by this synthesizer, expressed in
                  microseconds.  This latency measures the worst-case delay between the
                  time a MIDI message is delivered to the synthesizer and the time that the
                  synthesizer actually produces the corresponding result.
                  &lt;p&gt;
                  Although the latency is expressed in microseconds, a synthesizer&apos;s actual measured
                  delay may vary over a wider range than this resolution suggests.  For example,
                  a synthesizer might have a worst-case delay of a few milliseconds or more.                
                <return>
                    the worst-case delay, in microseconds                    
                </return>
            </javadoc>
            <method name="getChannels" type="MidiChannel[]" line="107"/>
            <javadoc line="107">
                Obtains the set of MIDI channels controlled by this synthesizer.  Each
                  non-null element in the returned array is a &lt;code&gt;MidiChannel&lt;/code&gt; that
                  receives the MIDI messages sent on that channel number.
                  &lt;p&gt;
                  The MIDI 1.0 specification provides for 16 channels, so this
                  method returns an array of at least 16 elements.  However, if this synthesizer
                  doesn&apos;t make use of all 16 channels, some of the elements of the array
                  might be &lt;code&gt;null&lt;/code&gt;, so you should check each element
                  before using it.                
                <return>
                    an array of the <code>MidiChannel</code> objects managed by this
                      <code>Synthesizer</code>.  Some of the array elements may be <code>null</code>.                    
                </return>
            </javadoc>
            <method name="getVoiceStatus" type="VoiceStatus[]" line="123"/>
            <javadoc line="123">
                Obtains the current status of the voices produced by this synthesizer.
                  If this class of &lt;code&gt;Synthesizer&lt;/code&gt; does not provide voice
                  information, the returned array will always be of length 0.  Otherwise,
                  its length is always equal to the total number of voices, as returned by
                  &lt;code&gt;getMaxPolyphony()&lt;/code&gt;.  (See the &lt;code&gt;VoiceStatus&lt;/code&gt; class
                  description for an explanation of synthesizer voices.)                
                <return>
                    an array of <code>VoiceStatus</code> objects that supply
                      information about the corresponding synthesizer voices                    
                </return>
                <see>
                    #getMaxPolyphony                    
                </see>
                <see>
                    VoiceStatus                    
                </see>
            </javadoc>
            <method name="isSoundbankSupported" type="boolean" line="139"/>
            <javadoc line="139">
                Informs the caller whether this synthesizer is capable of loading
                  instruments from the specified soundbank.
                  If the soundbank is unsupported, any attempts to load instruments from
                  it will result in an &lt;code&gt;IllegalArgumentException&lt;/code&gt;.                
                <param>
                    soundbank soundbank for which support is queried                    
                </param>
                <return>
                    <code>true</code> if the soundbank is supported, otherwise <code>false</code>                    
                </return>
                <see>
                    #loadInstruments                    
                </see>
                <see>
                    #loadAllInstruments                    
                </see>
                <see>
                    #unloadInstruments                    
                </see>
                <see>
                    #unloadAllInstruments                    
                </see>
                <see>
                    #getDefaultSoundbank                    
                </see>
            </javadoc>
            <method name="loadInstrument" type="boolean" line="155"/>
            <javadoc line="155">
                Makes a particular instrument available for synthesis.  This instrument
                  is loaded into the patch location specified by its &lt;code&gt;Patch&lt;/code&gt;
                  object, so that if a program-change message is
                  received (or has been received) that causes that patch to be selected,
                  subsequent notes will be played using the sound of
                  &lt;code&gt;instrument&lt;/code&gt;.  If the specified instrument is already loaded,
                  this method does nothing and returns &lt;code&gt;true&lt;/code&gt;.
                  &lt;p&gt;
                  The instrument must be part of a soundbank
                  that this &lt;code&gt;Synthesizer&lt;/code&gt; supports.  (To make sure, you can use
                  the &lt;code&gt;getSoundbank&lt;/code&gt; method of &lt;code&gt;Instrument&lt;/code&gt; and the
                  &lt;code&gt;isSoundbankSupported&lt;/code&gt; method of &lt;code&gt;Synthesizer&lt;/code&gt;.)                
                <param>
                    instrument instrument to load                    
                </param>
                <return>
                    <code>true</code> if the instrument is successfully loaded (or
                      already had been), <code>false</code> if the instrument could not be
                      loaded (for example, if the synthesizer has insufficient
                      memory to load it)                    
                </return>
                <throws>
                    <code>IllegalArgumentException</code> if this
                      <code>Synthesizer</code> doesn't support the specified instrument's
                      soundbank                    
                </throws>
                <see>
                    #unloadInstrument                    
                </see>
                <see>
                    #loadInstruments                    
                </see>
                <see>
                    #loadAllInstruments                    
                </see>
                <see>
                    #remapInstrument                    
                </see>
                <see>
                    SoundbankResource#getSoundbank                    
                </see>
                <see>
                    MidiChannel#programChange(int,int)                    
                </see>
            </javadoc>
            <method name="unloadInstrument" type="void" line="186"/>
            <javadoc line="186">
                Unloads a particular instrument.                
                <param>
                    instrument instrument to unload                    
                </param>
                <throws>
                    <code>IllegalArgumentException</code> if this
                      <code>Synthesizer</code> doesn't support the specified instrument's
                      soundbank                    
                </throws>
                <see>
                    #loadInstrument                    
                </see>
                <see>
                    #unloadInstruments                    
                </see>
                <see>
                    #unloadAllInstruments                    
                </see>
                <see>
                    #getLoadedInstruments                    
                </see>
                <see>
                    #remapInstrument                    
                </see>
            </javadoc>
            <method name="remapInstrument" type="boolean" line="201"/>
            <javadoc line="201">
                Remaps an instrument. Instrument &lt;code&gt;to&lt;/code&gt; takes the
                  place of instrument &lt;code&gt;from&lt;/code&gt;.&lt;br&gt;
                  For example, if &lt;code&gt;from&lt;/code&gt; was located at bank number 2,
                  program number 11, remapping causes that bank and program location
                  to be occupied instead by &lt;code&gt;to&lt;/code&gt;.&lt;br&gt;
                  If the function succeeds,  instrument &lt;code&gt;from&lt;/code&gt; is unloaded.
                  &lt;p&gt;To cancel the remapping reload instrument &lt;code&gt;from&lt;/code&gt; by
                  invoking one of {@link #loadInstrument}, {@link #loadInstruments}or {@link #loadAllInstruments}.                
                <param>
                    from the <code>Instrument</code> object to be replaced                    
                </param>
                <param>
                    to the <code>Instrument</code> object to be used in place
                      of the old instrument, it should be loaded into the synthesizer                    
                </param>
                <return>
                    <code>true</code> if the instrument succeessfully remapped,
                      <code>false</code> if feature is not implemented by synthesizer                    
                </return>
                <throws>
                    <code>IllegalArgumentException</code> if instrument
                      <code>from</code> or instrument <code>to</code> aren't supported by
                      synthesizer or if instrument <code>to</code> is not loaded                    
                </throws>
                <throws>
                    <code>NullPointerException</code> if <code>from</code> or
                      <code>to</code> parameters have null value                    
                </throws>
                <see>
                    #loadInstrument                    
                </see>
                <see>
                    #loadInstruments                    
                </see>
                <see>
                    #loadAllInstruments                    
                </see>
            </javadoc>
            <method name="getDefaultSoundbank" type="Soundbank" line="229"/>
            <javadoc line="229">
                Obtains the default soundbank for the synthesizer, if one exists.
                  (Some synthesizers provide a default or built-in soundbank.)
                  If a synthesizer doesn&apos;t have a default soundbank, instruments must
                  be loaded explicitly from an external soundbank.                
                <return>
                    default soundbank, or <code>null</code> if one does not exist.                    
                </return>
                <see>
                    #isSoundbankSupported                    
                </see>
            </javadoc>
            <method name="getAvailableInstruments" type="Instrument[]" line="240"/>
            <javadoc line="240">
                Obtains a list of instruments that come with the synthesizer.  These
                  instruments might be built into the synthesizer, or they might be
                  part of a default soundbank provided with the synthesizer, etc.
                  &lt;p&gt;
                  Note that you don&apos;t use this method  to find out which instruments are
                  currently loaded onto the synthesizer; for that purpose, you use
                  &lt;code&gt;getLoadedInstruments()&lt;/code&gt;.
                  Nor does the method indicate all the instruments that can be loaded onto
                  the synthesizer; it only indicates the subset that come with the synthesizer.
                  To learn whether another instrument can be loaded, you can invoke
                  &lt;code&gt;isSoundbankSupported()&lt;/code&gt;, and if the instrument&apos;s
                  &lt;code&gt;Soundbank&lt;/code&gt; is supported, you can try loading the instrument.                
                <return>
                    list of available instruments. If the synthesizer
                      has no instruments coming with it, an array of length 0 is returned.                    
                </return>
                <see>
                    #getLoadedInstruments                    
                </see>
                <see>
                    #isSoundbankSupported(Soundbank)                    
                </see>
                <see>
                    #loadInstrument                    
                </see>
            </javadoc>
            <method name="getLoadedInstruments" type="Instrument[]" line="263"/>
            <javadoc line="263">
                Obtains a list of the instruments that are currently loaded onto this
                  &lt;code&gt;Synthesizer&lt;/code&gt;.                
                <return>
                    a list of currently loaded instruments                    
                </return>
                <see>
                    #loadInstrument                    
                </see>
                <see>
                    #getAvailableInstruments                    
                </see>
                <see>
                    Soundbank#getInstruments                    
                </see>
            </javadoc>
            <method name="loadAllInstruments" type="boolean" line="274"/>
            <javadoc line="274">
                Loads onto the &lt;code&gt;Synthesizer&lt;/code&gt; all instruments contained
                  in the specified &lt;code&gt;Soundbank&lt;/code&gt;.                
                <param>
                    soundbank the <code>Soundbank</code> whose are instruments are
                      to be loaded                    
                </param>
                <return>
                    <code>true</code> if the instruments are all successfully loaded (or
                      already had been), <code>false</code> if any instrument could not be
                      loaded (for example, if the <code>Synthesizer</code> had insufficient memory)                    
                </return>
                <throws>
                    IllegalArgumentException if the requested soundbank is
                      incompatible with this synthesizer.                    
                </throws>
                <see>
                    #isSoundbankSupported                    
                </see>
                <see>
                    #loadInstrument                    
                </see>
                <see>
                    #loadInstruments                    
                </see>
            </javadoc>
            <method name="unloadAllInstruments" type="void" line="292"/>
            <javadoc line="292">
                Unloads all instruments contained in the specified &lt;code&gt;Soundbank&lt;/code&gt;.                
                <param>
                    soundbank soundbank containing instruments to unload                    
                </param>
                <throws>
                    IllegalArgumentException thrown if the soundbank is not supported.                    
                </throws>
                <see>
                    #isSoundbankSupported                    
                </see>
                <see>
                    #unloadInstrument                    
                </see>
                <see>
                    #unloadInstruments                    
                </see>
            </javadoc>
            <method name="loadInstruments" type="boolean" line="303"/>
            <javadoc line="303">
                Loads the instruments referenced by the specified patches, from the
                  specified &lt;code&gt;Soundbank&lt;/code&gt;.  Each of the &lt;code&gt;Patch&lt;/code&gt; objects
                  indicates a bank and program number; the &lt;code&gt;Instrument&lt;/code&gt; that
                  has the matching &lt;code&gt;Patch&lt;/code&gt; is loaded into that bank and program
                  location.                
                <param>
                    soundbank the <code>Soundbank</code> containing the instruments to load                    
                </param>
                <param>
                    patchList list of patches for which instruments should be loaded                    
                </param>
                <return>
                    <code>true</code> if the instruments are all successfully loaded (or
                      already had been), <code>false</code> if any instrument could not be
                      loaded (for example, if the <code>Synthesizer</code> had insufficient memory)                    
                </return>
                <throws>
                    IllegalArgumentException thrown if the soundbank is not supported.                    
                </throws>
                <see>
                    #isSoundbankSupported                    
                </see>
                <see>
                    Instrument#getPatch                    
                </see>
                <see>
                    #loadAllInstruments                    
                </see>
                <see>
                    #loadInstrument                    
                </see>
                <see>
                    Soundbank#getInstrument(Patch)                    
                </see>
                <see>
                    Sequence#getPatchList()                    
                </see>
            </javadoc>
            <method name="unloadInstruments" type="void" line="324"/>
            <javadoc line="324">
                Unloads the instruments referenced by the specified patches, from the MIDI sound bank specified.                
                <param>
                    soundbank soundbank containing instruments to unload                    
                </param>
                <param>
                    patchList list of patches for which instruments should be unloaded                    
                </param>
                <throws>
                    IllegalArgumentException thrown if the soundbank is not supported.                    
                </throws>
                <see>
                    #unloadInstrument                    
                </see>
                <see>
                    #unloadAllInstruments                    
                </see>
                <see>
                    #isSoundbankSupported                    
                </see>
                <see>
                    Instrument#getPatch                    
                </see>
                <see>
                    #loadInstruments                    
                </see>
            </javadoc>
        </interface>
    </source>