<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.sound.midi">
        <import package="java.io.FileInputStream"/>
        <import package="java.io.File"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="java.util.Set"/>
        <import package="java.net.URL"/>
        <import package="javax.sound.midi.spi.MidiFileWriter"/>
        <import package="javax.sound.midi.spi.MidiFileReader"/>
        <import package="javax.sound.midi.spi.SoundbankReader"/>
        <import package="javax.sound.midi.spi.MidiDeviceProvider"/>
        <import package="com.sun.media.sound.JDK13Services"/>
        <import package="com.sun.media.sound.ReferenceCountingDevice"/>
        <import package="com.sun.media.sound.AutoConnectSequencer"/>
        <import package="com.sun.media.sound.MidiDeviceReceiverEnvelope"/>
        <import package="com.sun.media.sound.MidiDeviceTransmitterEnvelope"/>
        <class name="MidiSystem" line="22">
            <javadoc line="22">
                The &lt;code&gt;MidiSystem&lt;/code&gt; class provides access to the installed MIDI
                  system resources, including devices such as synthesizers, sequencers, and
                  MIDI input and output ports.  A typical simple MIDI application might
                  begin by invoking one or more &lt;code&gt;MidiSystem&lt;/code&gt; methods to learn
                  what devices are installed and to obtain the ones needed in that
                  application.
                  &lt;p&gt;
                  The class also has methods for reading files, streams, and  URLs that
                  contain standard MIDI file data or soundbanks.  You can query the
                  &lt;code&gt;MidiSystem&lt;/code&gt; for the format of a specified MIDI file.
                  &lt;p&gt;
                  You cannot instantiate a &lt;code&gt;MidiSystem&lt;/code&gt;; all the methods are
                  static.
                  &lt;p&gt;Properties can be used to specify default MIDI devices.
                  Both system properties and a properties file are considered.
                  The properties file is &amp;quot;lib/sound.properties&amp;quot; in the JRE
                  directory. If a property exists both as a system property and in the
                  properties file, the system property takes precedence. If none is
                  specified, a suitable default is chosen among the available devices.
                  The syntax of the properties file is specified in{@link java.util.Properties#load(InputStream) Properties.load}. The
                  following table lists the available property keys and which methods
                  consider them:
                  &lt;table border=0&gt;
                  &lt;tr&gt;
                  &lt;th&gt;Property Key&lt;/th&gt;
                  &lt;th&gt;Interface&lt;/th&gt;
                  &lt;th&gt;Affected Method&lt;/th&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;&lt;code&gt;javax.sound.midi.Receiver&lt;/code&gt;&lt;/td&gt;
                  &lt;td&gt;{@link Receiver}&lt;/td&gt;
                  &lt;td&gt;{@link #getReceiver}&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;&lt;code&gt;javax.sound.midi.Sequencer&lt;/code&gt;&lt;/td&gt;
                  &lt;td&gt;{@link Sequencer}&lt;/td&gt;
                  &lt;td&gt;{@link #getSequencer}&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;&lt;code&gt;javax.sound.midi.Synthesizer&lt;/code&gt;&lt;/td&gt;
                  &lt;td&gt;{@link Synthesizer}&lt;/td&gt;
                  &lt;td&gt;{@link #getSynthesizer}&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;&lt;code&gt;javax.sound.midi.Transmitter&lt;/code&gt;&lt;/td&gt;
                  &lt;td&gt;{@link Transmitter}&lt;/td&gt;
                  &lt;td&gt;{@link #getTransmitter}&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;
                  The property value consists of the provider class name
                  and the device name, separated by the hash mark (&amp;quot;#&amp;quot;).
                  The provider class name is the fully-qualified
                  name of a concrete {@link javax.sound.midi.spi.MidiDeviceProviderMIDI device provider} class. The device name is matched against
                  the &lt;code&gt;String&lt;/code&gt; returned by the &lt;code&gt;getName&lt;/code&gt;
                  method of &lt;code&gt;MidiDevice.Info&lt;/code&gt;.
                  Either the class name, or the device name may be omitted.
                  If only the class name is specified, the trailing hash mark
                  is optional.
                  &lt;p&gt;If the provider class is specified, and it can be
                  successully retrieved from the installed providers,
                  the list of
                  &lt;code&gt;MidiDevice.Info&lt;/code&gt; objects is retrieved
                  from the provider. Otherwise, or when these devices
                  do not provide a subsequent match, the list is retrieved
                  from {@link #getMidiDeviceInfo} to contain
                  all available &lt;code&gt;MidiDevice.Info&lt;/code&gt; objects.
                  &lt;p&gt;If a device name is specified, the resulting list of
                  &lt;code&gt;MidiDevice.Info&lt;/code&gt; objects is searched:
                  the first one with a matching name, and whose
                  &lt;code&gt;MidiDevice&lt;/code&gt; implements the
                  respective interface, will be returned.
                  If no matching &lt;code&gt;MidiDevice.Info&lt;/code&gt; object
                  is found, or the device name is not specified,
                  the first suitable device from the resulting
                  list will be returned. For Sequencer and Synthesizer,
                  a device is suitable if it implements the respective
                  interface; whereas for Receiver and Transmitter, a device is
                  suitable if it
                  implements neither Sequencer nor Synthesizer and provides
                  at least one Receiver or Transmitter, respectively.
                  For example, the property &lt;code&gt;javax.sound.midi.Receiver&lt;/code&gt;
                  with a value
                  &lt;code&gt;&amp;quot;com.sun.media.sound.MidiProvider#SunMIDI1&amp;quot;&lt;/code&gt;
                  will have the following consequences when
                  &lt;code&gt;getReceiver&lt;/code&gt; is called:
                  if the class &lt;code&gt;com.sun.media.sound.MidiProvider&lt;/code&gt; exists
                  in the list of installed MIDI device providers,
                  the first &lt;code&gt;Receiver&lt;/code&gt; device with name
                  &lt;code&gt;&amp;quot;SunMIDI1&amp;quot;&lt;/code&gt; will be returned. If it cannot
                  be found, the first &lt;code&gt;Receiver&lt;/code&gt; from that provider
                  will be returned, regardless of name.
                  If there is none, the first &lt;code&gt;Receiver&lt;/code&gt; with name
                  &lt;code&gt;&amp;quot;SunMIDI1&amp;quot;&lt;/code&gt; in the list of all devices
                  (as returned by &lt;code&gt;getMidiDeviceInfo&lt;/code&gt;) will be returned,
                  or, if not found, the first &lt;code&gt;Receiver&lt;/code&gt; that can
                  be found in the list of all devices is returned.
                  If that fails, too, a &lt;code&gt;MidiUnavailableException&lt;/code&gt;
                  is thrown.                
                <author>
                    Kara Kytle                    
                </author>
                <author>
                    Florian Bomers                    
                </author>
                <author>
                    Matthias Pfisterer                    
                </author>
            </javadoc>
            <javadoc line="126">
                Private no-args constructor for ensuring against instantiation.                
            </javadoc>
            <method name="MidiSystem" type="constructor" line="129"/>
            <javadoc line="131">
                Obtains an array of information objects representing
                  the set of all MIDI devices available on the system.
                  A returned information object can then be used to obtain the
                  corresponding device object, by invoking{@link #getMidiDevice(MidiDevice.Info) getMidiDevice}.                
                <return>
                    an array of &lt;code&gt;MidiDevice.Info&lt;/code&gt; objects, one
                      for each installed MIDI device.  If no such devices are installed,
                      an array of length 0 is returned.                    
                </return>
            </javadoc>
            <method name="getMidiDeviceInfo" type="MidiDevice.Info[]" line="140">
                <declaration name="allInfos" type="List" line="141"/>
                <declaration name="providers" type="List" line="142"/>
                <scope line="143">
                    <declaration name="provider" type="MidiDeviceProvider" line="144"/>
                    <declaration name="tmpinfo" type="MidiDevice.Info[]" line="145"/>
                    <scope line="146"/>
                </scope>
                <declaration name="infosArray" type="MidiDevice.Info[]" line="150"/>
            </method>
            <javadoc line="153">
                Obtains the requested MIDI device.                
                <param>
                    info a device information object representing the desired device.                    
                </param>
                <return>
                    the requested device                    
                </return>
                <throws>
                    MidiUnavailableException if the requested device is not available
                      due to resource restrictions                    
                </throws>
                <throws>
                    IllegalArgumentException if the info object does not represent
                      a MIDI device installed on the system                    
                </throws>
                <see>
                    #getMidiDeviceInfo                    
                </see>
            </javadoc>
            <method name="getMidiDevice" type="MidiDevice" line="163">
                <params>
                    <param name="info" type="MidiDevice.Info"/>
                </params>
                <declaration name="providers" type="List" line="164"/>
                <scope line="165">
                    <declaration name="provider" type="MidiDeviceProvider" line="166"/>
                    <scope line="167">
                        <declaration name="device" type="MidiDevice" line="168"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="174">
                Obtains a MIDI receiver from an external MIDI port
                  or other default device.
                  The returned receiver always implements
                  the {@code MidiDeviceReceiver} interface.
                  &lt;p&gt;If the system property
                  &lt;code&gt;javax.sound.midi.Receiver&lt;/code&gt;
                  is defined or it is defined in the file &amp;quot;sound.properties&amp;quot;,
                  it is used to identify the device that provides the default receiver.
                  For details, refer to the {@link MidiSystem class description}.
                  If a suitable MIDI port is not available, the Receiver is
                  retrieved from an installed synthesizer.
                  &lt;p&gt;If a native receiver provided by the default device does not implement
                  the {@code MidiDeviceReceiver} interface, it will be wrapped in a
                  wrapper class that implements the {@code MidiDeviceReceiver} interface.
                  The corresponding {@code Receiver} method calls will be forwarded
                  to the native receiver.
                  &lt;p&gt;If this method returns successfully, the {@link javax.sound.midi.MidiDevice MidiDevice} the
                  &lt;code&gt;Receiver&lt;/code&gt; belongs to is opened implicitly, if it is
                  not already open. It is possible to close an implicitly opened
                  device by calling {@link javax.sound.midi.Receiver#close close}on the returned &lt;code&gt;Receiver&lt;/code&gt;. All open &lt;code&gt;Receiver&lt;/code&gt;
                  instances have to be closed in order to release system resources
                  hold by the &lt;code&gt;MidiDevice&lt;/code&gt;. For a
                  detailed description of open/close behaviour see the class
                  description of {@link javax.sound.midi.MidiDevice MidiDevice}.                
                <return>
                    the default MIDI receiver                    
                </return>
                <throws>
                    MidiUnavailableException if the default receiver is not
                      available due to resource restrictions,
                      or no device providing receivers is installed in the system                    
                </throws>
            </javadoc>
            <method name="getReceiver" type="Receiver" line="204">
                <declaration name="device" type="MidiDevice" line="205"/>
                <declaration name="receiver" type="Receiver" line="206"/>
                <scope line="207"/>
                <scope line="210"/>
                <scope line="213"/>
            </method>
            <javadoc line="218">
                Obtains a MIDI transmitter from an external MIDI port
                  or other default source.
                  The returned transmitter always implements
                  the {@code MidiDeviceTransmitter} interface.
                  &lt;p&gt;If the system property
                  &lt;code&gt;javax.sound.midi.Transmitter&lt;/code&gt;
                  is defined or it is defined in the file &amp;quot;sound.properties&amp;quot;,
                  it is used to identify the device that provides the default transmitter.
                  For details, refer to the {@link MidiSystem class description}.
                  &lt;p&gt;If a native transmitter provided by the default device does not implement
                  the {@code MidiDeviceTransmitter} interface, it will be wrapped in a
                  wrapper class that implements the {@code MidiDeviceTransmitter} interface.
                  The corresponding {@code Transmitter} method calls will be forwarded
                  to the native transmitter.
                  &lt;p&gt;If this method returns successfully, the {@link javax.sound.midi.MidiDevice MidiDevice} the
                  &lt;code&gt;Transmitter&lt;/code&gt; belongs to is opened implicitly, if it
                  is not already open. It is possible to close an implicitly
                  opened device by calling {@link javax.sound.midi.Transmitter#close close} on the returned
                  &lt;code&gt;Transmitter&lt;/code&gt;. All open &lt;code&gt;Transmitter&lt;/code&gt;
                  instances have to be closed in order to release system resources
                  hold by the &lt;code&gt;MidiDevice&lt;/code&gt;. For a detailed description
                  of open/close behaviour see the class description of {@link javax.sound.midi.MidiDevice MidiDevice}.                
                <return>
                    the default MIDI transmitter                    
                </return>
                <throws>
                    MidiUnavailableException if the default transmitter is not
                      available due to resource restrictions,
                      or no device providing transmitters is installed in the system                    
                </throws>
            </javadoc>
            <method name="getTransmitter" type="Transmitter" line="246">
                <declaration name="device" type="MidiDevice" line="247"/>
                <declaration name="transmitter" type="Transmitter" line="248"/>
                <scope line="249"/>
                <scope line="252"/>
                <scope line="255"/>
            </method>
            <javadoc line="260">
                Obtains the default synthesizer.
                  &lt;p&gt;If the system property
                  &lt;code&gt;javax.sound.midi.Synthesizer&lt;/code&gt;
                  is defined or it is defined in the file &amp;quot;sound.properties&amp;quot;,
                  it is used to identify the default synthesizer.
                  For details, refer to the {@link MidiSystem class description}.                
                <return>
                    the default synthesizer                    
                </return>
                <throws>
                    MidiUnavailableException if the synthesizer is not
                      available due to resource restrictions,
                      or no synthesizer is installed in the system                    
                </throws>
            </javadoc>
            <method name="getSynthesizer" type="Synthesizer" line="272"/>
            <javadoc line="275">
                Obtains the default &lt;code&gt;Sequencer&lt;/code&gt;, connected to
                  a default device.
                  The returned &lt;code&gt;Sequencer&lt;/code&gt; instance is
                  connected to the default &lt;code&gt;Synthesizer&lt;/code&gt;,
                  as returned by {@link #getSynthesizer}.
                  If there is no &lt;code&gt;Synthesizer&lt;/code&gt;
                  available, or the default &lt;code&gt;Synthesizer&lt;/code&gt;
                  cannot be opened, the &lt;code&gt;sequencer&lt;/code&gt; is connected
                  to the default &lt;code&gt;Receiver&lt;/code&gt;, as returned
                  by {@link #getReceiver}.
                  The connection is made by retrieving a &lt;code&gt;Transmitter&lt;/code&gt;
                  instance from the &lt;code&gt;Sequencer&lt;/code&gt; and setting its
                  &lt;code&gt;Receiver&lt;/code&gt;.
                  Closing and re-opening the sequencer will restore the
                  connection to the default device.
                  &lt;p&gt;This method is equivalent to calling
                  &lt;code&gt;getSequencer(true)&lt;/code&gt;.
                  &lt;p&gt;If the system property
                  &lt;code&gt;javax.sound.midi.Sequencer&lt;/code&gt;
                  is defined or it is defined in the file &amp;quot;sound.properties&amp;quot;,
                  it is used to identify the default sequencer.
                  For details, refer to the {@link MidiSystem class description}.                
                <return>
                    the default sequencer, connected to a default Receiver                    
                </return>
                <throws>
                    MidiUnavailableException if the sequencer is not
                      available due to resource restrictions,
                      or there is no &lt;code&gt;Receiver&lt;/code&gt; available by any
                      installed &lt;code&gt;MidiDevice&lt;/code&gt;,
                      or no sequencer is installed in the system.                    
                </throws>
                <see>
                    #getSequencer(boolean)                    
                </see>
                <see>
                    #getSynthesizer                    
                </see>
                <see>
                    #getReceiver                    
                </see>
            </javadoc>
            <method name="getSequencer" type="Sequencer" line="308"/>
            <javadoc line="311">
                Obtains the default &lt;code&gt;Sequencer&lt;/code&gt;, optionally
                  connected to a default device.
                  &lt;p&gt;If &lt;code&gt;connected&lt;/code&gt; is true, the returned
                  &lt;code&gt;Sequencer&lt;/code&gt; instance is
                  connected to the default &lt;code&gt;Synthesizer&lt;/code&gt;,
                  as returned by {@link #getSynthesizer}.
                  If there is no &lt;code&gt;Synthesizer&lt;/code&gt;
                  available, or the default &lt;code&gt;Synthesizer&lt;/code&gt;
                  cannot be opened, the &lt;code&gt;sequencer&lt;/code&gt; is connected
                  to the default &lt;code&gt;Receiver&lt;/code&gt;, as returned
                  by {@link #getReceiver}.
                  The connection is made by retrieving a &lt;code&gt;Transmitter&lt;/code&gt;
                  instance from the &lt;code&gt;Sequencer&lt;/code&gt; and setting its
                  &lt;code&gt;Receiver&lt;/code&gt;.
                  Closing and re-opening the sequencer will restore the
                  connection to the default device.
                  &lt;p&gt;If &lt;code&gt;connected&lt;/code&gt; is false, the returned
                  &lt;code&gt;Sequencer&lt;/code&gt; instance is not connected, it
                  has no open &lt;code&gt;Transmitters&lt;/code&gt;. In order to
                  play the sequencer on a MIDI device, or a &lt;code&gt;Synthesizer&lt;/code&gt;,
                  it is necessary to get a &lt;code&gt;Transmitter&lt;/code&gt; and set its
                  &lt;code&gt;Receiver&lt;/code&gt;.
                  &lt;p&gt;If the system property
                  &lt;code&gt;javax.sound.midi.Sequencer&lt;/code&gt;
                  is defined or it is defined in the file &quot;sound.properties&quot;,
                  it is used to identify the default sequencer.
                  For details, refer to the {@link MidiSystem class description}.                
                <return>
                    the default sequencer                    
                </return>
                <throws>
                    MidiUnavailableException if the sequencer is not
                      available due to resource restrictions,
                      or no sequencer is installed in the system,
                      or if &lt;code&gt;connected&lt;/code&gt; is true, and there is
                      no &lt;code&gt;Receiver&lt;/code&gt; available by any installed
                      &lt;code&gt;MidiDevice&lt;/code&gt;                    
                </throws>
                <see>
                    #getSynthesizer                    
                </see>
                <see>
                    #getReceiver                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getSequencer" type="Sequencer" line="350">
                <params>
                    <param name="connected" type="boolean"/>
                </params>
                <declaration name="seq" type="Sequencer" line="351"/>
                <scope line="352">
                    <declaration name="rec" type="Receiver" line="353"/>
                    <declaration name="mue" type="MidiUnavailableException" line="354"/>
                    <scope line="355">
                        <declaration name="synth" type="Synthesizer" line="356"/>
                        <scope line="357"/>
                        <scope line="360">
                            <scope line="362"/>
                            <scope line="365">
                                <scope line="366"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="372">
                        <scope line="373"/>
                    </scope>
                    <scope line="377">
                        <scope line="378"/>
                        <scope line="381">
                            <scope line="382"/>
                        </scope>
                    </scope>
                    <scope line="387">
                        <scope line="389"/>
                    </scope>
                    <scope line="393">
                        <scope line="394"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="402">
                Constructs a MIDI sound bank by reading it from the specified stream.
                  The stream must point to
                  a valid MIDI soundbank file.  In general, MIDI soundbank providers may
                  need to read some data from the stream before determining whether they
                  support it.  These parsers must
                  be able to mark the stream, read enough data to determine whether they
                  support the stream, and, if not, reset the stream&apos;s read pointer to
                  its original position.  If the input stream does not support this,
                  this method may fail with an IOException.                
                <param>
                    stream the source of the sound bank data.                    
                </param>
                <return>
                    the sound bank                    
                </return>
                <throws>
                    InvalidMidiDataException if the stream does not point to
                      valid MIDI soundbank data recognized by the system                    
                </throws>
                <throws>
                    IOException if an I/O error occurred when loading the soundbank                    
                </throws>
                <see>
                    InputStream#markSupported                    
                </see>
                <see>
                    InputStream#mark                    
                </see>
            </javadoc>
            <method name="getSoundbank" type="Soundbank" line="420">
                <params>
                    <param name="stream" type="InputStream"/>
                </params>
                <declaration name="sp" type="SoundbankReader" line="421"/>
                <declaration name="s" type="Soundbank" line="422"/>
                <declaration name="providers" type="List" line="423"/>
                <scope line="424">
                    <scope line="427"/>
                </scope>
            </method>
            <javadoc line="433">
                Constructs a &lt;code&gt;Soundbank&lt;/code&gt; by reading it from the specified URL.
                  The URL must point to a valid MIDI soundbank file.                
                <param>
                    url the source of the sound bank data                    
                </param>
                <return>
                    the sound bank                    
                </return>
                <throws>
                    InvalidMidiDataException if the URL does not point to valid MIDI
                      soundbank data recognized by the system                    
                </throws>
                <throws>
                    IOException if an I/O error occurred when loading the soundbank                    
                </throws>
            </javadoc>
            <method name="getSoundbank" type="Soundbank" line="442">
                <params>
                    <param name="url" type="URL"/>
                </params>
                <declaration name="sp" type="SoundbankReader" line="443"/>
                <declaration name="s" type="Soundbank" line="444"/>
                <declaration name="providers" type="List" line="445"/>
                <scope line="446">
                    <scope line="449"/>
                </scope>
            </method>
            <javadoc line="455">
                Constructs a &lt;code&gt;Soundbank&lt;/code&gt; by reading it from the specified
                  &lt;code&gt;File&lt;/code&gt;.
                  The &lt;code&gt;File&lt;/code&gt; must point to a valid MIDI soundbank file.                
                <param>
                    file the source of the sound bank data                    
                </param>
                <return>
                    the sound bank                    
                </return>
                <throws>
                    InvalidMidiDataException if the &lt;code&gt;File&lt;/code&gt; does not
                      point to valid MIDI soundbank data recognized by the system                    
                </throws>
                <throws>
                    IOException if an I/O error occurred when loading the soundbank                    
                </throws>
            </javadoc>
            <method name="getSoundbank" type="Soundbank" line="465">
                <params>
                    <param name="file" type="File"/>
                </params>
                <declaration name="sp" type="SoundbankReader" line="466"/>
                <declaration name="s" type="Soundbank" line="467"/>
                <declaration name="providers" type="List" line="468"/>
                <scope line="469">
                    <scope line="472"/>
                </scope>
            </method>
            <javadoc line="478">
                Obtains the MIDI file format of the data in the specified input stream.
                  The stream must point to valid MIDI file data for a file type recognized
                  by the system.
                  &lt;p&gt;
                  This method and/or the code it invokes may need to read some data from
                  the stream to determine whether its data format is supported.  The
                  implementation may therefore
                  need to mark the stream, read enough data to determine whether it is in
                  a supported format, and reset the stream&apos;s read pointer to its original
                  position.  If the input stream does not permit this set of operations,
                  this method may fail with an &lt;code&gt;IOException&lt;/code&gt;.
                  &lt;p&gt;
                  This operation can only succeed for files of a type which can be parsed
                  by an installed file reader.  It may fail with an InvalidMidiDataException
                  even for valid files if no compatible file reader is installed.  It
                  will also fail with an InvalidMidiDataException if a compatible file reader
                  is installed, but encounters errors while determining the file format.                
                <param>
                    stream the input stream from which file format information
                      should be extracted                    
                </param>
                <return>
                    an &lt;code&gt;MidiFileFormat&lt;/code&gt; object describing the MIDI file
                      format                    
                </return>
                <throws>
                    InvalidMidiDataException if the stream does not point to valid
                      MIDI file data recognized by the system                    
                </throws>
                <throws>
                    IOException if an I/O exception occurs while accessing the
                      stream                    
                </throws>
                <see>
                    #getMidiFileFormat(URL)                    
                </see>
                <see>
                    #getMidiFileFormat(File)                    
                </see>
                <see>
                    InputStream#markSupported                    
                </see>
                <see>
                    InputStream#mark                    
                </see>
            </javadoc>
            <method name="getMidiFileFormat" type="MidiFileFormat" line="509">
                <params>
                    <param name="stream" type="InputStream"/>
                </params>
                <declaration name="providers" type="List" line="510"/>
                <declaration name="format" type="MidiFileFormat" line="511"/>
                <scope line="512">
                    <declaration name="reader" type="MidiFileReader" line="513"/>
                    <scope line="514"/>
                    <scope line="518"/>
                </scope>
                <scope line="522"/>
                <scope line="525"/>
            </method>
            <javadoc line="529">
                Obtains the MIDI file format of the data in the specified URL.  The URL
                  must point to valid MIDI file data for a file type recognized
                  by the system.
                  &lt;p&gt;
                  This operation can only succeed for files of a type which can be parsed
                  by an installed file reader.  It may fail with an InvalidMidiDataException
                  even for valid files if no compatible file reader is installed.  It
                  will also fail with an InvalidMidiDataException if a compatible file reader
                  is installed, but encounters errors while determining the file format.                
                <param>
                    url the URL from which file format information should be
                      extracted                    
                </param>
                <return>
                    a &lt;code&gt;MidiFileFormat&lt;/code&gt; object describing the MIDI file
                      format                    
                </return>
                <throws>
                    InvalidMidiDataException if the URL does not point to valid MIDI
                      file data recognized by the system                    
                </throws>
                <throws>
                    IOException if an I/O exception occurs while accessing the URL                    
                </throws>
                <see>
                    #getMidiFileFormat(InputStream)                    
                </see>
                <see>
                    #getMidiFileFormat(File)                    
                </see>
            </javadoc>
            <method name="getMidiFileFormat" type="MidiFileFormat" line="549">
                <params>
                    <param name="url" type="URL"/>
                </params>
                <declaration name="providers" type="List" line="550"/>
                <declaration name="format" type="MidiFileFormat" line="551"/>
                <scope line="552">
                    <declaration name="reader" type="MidiFileReader" line="553"/>
                    <scope line="554"/>
                    <scope line="558"/>
                </scope>
                <scope line="562"/>
                <scope line="565"/>
            </method>
            <javadoc line="569">
                Obtains the MIDI file format of the specified &lt;code&gt;File&lt;/code&gt;.  The
                  &lt;code&gt;File&lt;/code&gt; must point to valid MIDI file data for a file type
                  recognized by the system.
                  &lt;p&gt;
                  This operation can only succeed for files of a type which can be parsed
                  by an installed file reader.  It may fail with an InvalidMidiDataException
                  even for valid files if no compatible file reader is installed.  It
                  will also fail with an InvalidMidiDataException if a compatible file reader
                  is installed, but encounters errors while determining the file format.                
                <param>
                    file the &lt;code&gt;File&lt;/code&gt; from which file format information
                      should be extracted                    
                </param>
                <return>
                    a &lt;code&gt;MidiFileFormat&lt;/code&gt; object describing the MIDI file
                      format                    
                </return>
                <throws>
                    InvalidMidiDataException if the &lt;code&gt;File&lt;/code&gt; does not point
                      to valid MIDI file data recognized by the system                    
                </throws>
                <throws>
                    IOException if an I/O exception occurs while accessing the file                    
                </throws>
                <see>
                    #getMidiFileFormat(InputStream)                    
                </see>
                <see>
                    #getMidiFileFormat(URL)                    
                </see>
            </javadoc>
            <method name="getMidiFileFormat" type="MidiFileFormat" line="589">
                <params>
                    <param name="file" type="File"/>
                </params>
                <declaration name="providers" type="List" line="590"/>
                <declaration name="format" type="MidiFileFormat" line="591"/>
                <scope line="592">
                    <declaration name="reader" type="MidiFileReader" line="593"/>
                    <scope line="594"/>
                    <scope line="598"/>
                </scope>
                <scope line="602"/>
                <scope line="605"/>
            </method>
            <javadoc line="609">
                Obtains a MIDI sequence from the specified input stream.  The stream must
                  point to valid MIDI file data for a file type recognized
                  by the system.
                  &lt;p&gt;
                  This method and/or the code it invokes may need to read some data
                  from the stream to determine whether
                  its data format is supported.  The implementation may therefore
                  need to mark the stream, read enough data to determine whether it is in
                  a supported format, and reset the stream&apos;s read pointer to its original
                  position.  If the input stream does not permit this set of operations,
                  this method may fail with an &lt;code&gt;IOException&lt;/code&gt;.
                  &lt;p&gt;
                  This operation can only succeed for files of a type which can be parsed
                  by an installed file reader.  It may fail with an InvalidMidiDataException
                  even for valid files if no compatible file reader is installed.  It
                  will also fail with an InvalidMidiDataException if a compatible file reader
                  is installed, but encounters errors while constructing the &lt;code&gt;Sequence&lt;/code&gt;
                  object from the file data.                
                <param>
                    stream the input stream from which the &lt;code&gt;Sequence&lt;/code&gt;
                      should be constructed                    
                </param>
                <return>
                    a &lt;code&gt;Sequence&lt;/code&gt; object based on the MIDI file data
                      contained in the input stream                    
                </return>
                <throws>
                    InvalidMidiDataException if the stream does not point to
                      valid MIDI file data recognized by the system                    
                </throws>
                <throws>
                    IOException if an I/O exception occurs while accessing the
                      stream                    
                </throws>
                <see>
                    InputStream#markSupported                    
                </see>
                <see>
                    InputStream#mark                    
                </see>
            </javadoc>
            <method name="getSequence" type="Sequence" line="639">
                <params>
                    <param name="stream" type="InputStream"/>
                </params>
                <declaration name="providers" type="List" line="640"/>
                <declaration name="sequence" type="Sequence" line="641"/>
                <scope line="642">
                    <declaration name="reader" type="MidiFileReader" line="643"/>
                    <scope line="644"/>
                    <scope line="648"/>
                </scope>
                <scope line="652"/>
                <scope line="655"/>
            </method>
            <javadoc line="659">
                Obtains a MIDI sequence from the specified URL.  The URL must
                  point to valid MIDI file data for a file type recognized
                  by the system.
                  &lt;p&gt;
                  This operation can only succeed for files of a type which can be parsed
                  by an installed file reader.  It may fail with an InvalidMidiDataException
                  even for valid files if no compatible file reader is installed.  It
                  will also fail with an InvalidMidiDataException if a compatible file reader
                  is installed, but encounters errors while constructing the &lt;code&gt;Sequence&lt;/code&gt;
                  object from the file data.                
                <param>
                    url the URL from which the &lt;code&gt;Sequence&lt;/code&gt; should be
                      constructed                    
                </param>
                <return>
                    a &lt;code&gt;Sequence&lt;/code&gt; object based on the MIDI file data
                      pointed to by the URL                    
                </return>
                <throws>
                    InvalidMidiDataException if the URL does not point to valid MIDI
                      file data recognized by the system                    
                </throws>
                <throws>
                    IOException if an I/O exception occurs while accessing the URL                    
                </throws>
            </javadoc>
            <method name="getSequence" type="Sequence" line="678">
                <params>
                    <param name="url" type="URL"/>
                </params>
                <declaration name="providers" type="List" line="679"/>
                <declaration name="sequence" type="Sequence" line="680"/>
                <scope line="681">
                    <declaration name="reader" type="MidiFileReader" line="682"/>
                    <scope line="683"/>
                    <scope line="687"/>
                </scope>
                <scope line="691"/>
                <scope line="694"/>
            </method>
            <javadoc line="698">
                Obtains a MIDI sequence from the specified &lt;code&gt;File&lt;/code&gt;.
                  The &lt;code&gt;File&lt;/code&gt; must point to valid MIDI file data
                  for a file type recognized by the system.
                  &lt;p&gt;
                  This operation can only succeed for files of a type which can be parsed
                  by an installed file reader.  It may fail with an InvalidMidiDataException
                  even for valid files if no compatible file reader is installed.  It
                  will also fail with an InvalidMidiDataException if a compatible file reader
                  is installed, but encounters errors while constructing the &lt;code&gt;Sequence&lt;/code&gt;
                  object from the file data.                
                <param>
                    file the &lt;code&gt;File&lt;/code&gt; from which the &lt;code&gt;Sequence&lt;/code&gt;
                      should be constructed                    
                </param>
                <return>
                    a &lt;code&gt;Sequence&lt;/code&gt; object based on the MIDI file data
                      pointed to by the File                    
                </return>
                <throws>
                    InvalidMidiDataException if the File does not point to valid MIDI
                      file data recognized by the system                    
                </throws>
                <throws>
                    IOException if an I/O exception occurs                    
                </throws>
            </javadoc>
            <method name="getSequence" type="Sequence" line="717">
                <params>
                    <param name="file" type="File"/>
                </params>
                <declaration name="providers" type="List" line="718"/>
                <declaration name="sequence" type="Sequence" line="719"/>
                <scope line="720">
                    <declaration name="reader" type="MidiFileReader" line="721"/>
                    <scope line="722"/>
                    <scope line="726"/>
                </scope>
                <scope line="730"/>
                <scope line="733"/>
            </method>
            <javadoc line="737">
                Obtains the set of MIDI file types for which file writing support is
                  provided by the system.                
                <return>
                    array of unique file types.  If no file types are supported,
                      an array of length 0 is returned.                    
                </return>
            </javadoc>
            <method name="getMidiFileTypes" type="int[]" line="743">
                <declaration name="providers" type="List" line="744"/>
                <declaration name="allTypes" type="Set" line="745"/>
                <scope line="746">
                    <declaration name="writer" type="MidiFileWriter" line="747"/>
                    <declaration name="types" type="int[]" line="748"/>
                    <scope line="749"/>
                </scope>
                <declaration name="resultTypes" type="int" line="753"/>
                <declaration name="index" type="int" line="754"/>
                <declaration name="iterator" type="Iterator" line="755"/>
                <scope line="756">
                    <declaration name="integer" type="Integer" line="757"/>
                </scope>
            </method>
            <javadoc line="762">
                Indicates whether file writing support for the specified MIDI file type
                  is provided by the system.                
                <param>
                    fileType the file type for which write capabilities are queried                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the file type is supported,
                      otherwise &lt;code&gt;false&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="isFileTypeSupported" type="boolean" line="769">
                <params>
                    <param name="fileType" type="int"/>
                </params>
                <declaration name="providers" type="List" line="770"/>
                <scope line="771">
                    <declaration name="writer" type="MidiFileWriter" line="772"/>
                    <scope line="773"/>
                </scope>
            </method>
            <javadoc line="779">
                Obtains the set of MIDI file types that the system can write from the
                  sequence specified.                
                <param>
                    sequence the sequence for which MIDI file type support
                      is queried                    
                </param>
                <return>
                    the set of unique supported file types.  If no file types are supported,
                      returns an array of length 0.                    
                </return>
            </javadoc>
            <method name="getMidiFileTypes" type="int[]" line="787">
                <params>
                    <param name="sequence" type="Sequence"/>
                </params>
                <declaration name="providers" type="List" line="788"/>
                <declaration name="allTypes" type="Set" line="789"/>
                <scope line="790">
                    <declaration name="writer" type="MidiFileWriter" line="791"/>
                    <declaration name="types" type="int[]" line="792"/>
                    <scope line="793"/>
                </scope>
                <declaration name="resultTypes" type="int" line="797"/>
                <declaration name="index" type="int" line="798"/>
                <declaration name="iterator" type="Iterator" line="799"/>
                <scope line="800">
                    <declaration name="integer" type="Integer" line="801"/>
                </scope>
            </method>
            <javadoc line="806">
                Indicates whether a MIDI file of the file type specified can be written
                  from the sequence indicated.                
                <param>
                    fileType the file type for which write capabilities
                      are queried                    
                </param>
                <param>
                    sequence the sequence for which file writing support is queried                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the file type is supported for this
                      sequence, otherwise &lt;code&gt;false&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="isFileTypeSupported" type="boolean" line="815">
                <params>
                    <param name="fileType" type="int"/>
                    <param name="sequence" type="Sequence"/>
                </params>
                <declaration name="providers" type="List" line="816"/>
                <scope line="817">
                    <declaration name="writer" type="MidiFileWriter" line="818"/>
                    <scope line="819"/>
                </scope>
            </method>
            <javadoc line="825">
                Writes a stream of bytes representing a file of the MIDI file type
                  indicated to the output stream provided.                
                <param>
                    in sequence containing MIDI data to be written to the file                    
                </param>
                <param>
                    fileType the file type of the file to be written to the output stream                    
                </param>
                <param>
                    out stream to which the file data should be written                    
                </param>
                <return>
                    the number of bytes written to the output stream                    
                </return>
                <throws>
                    IOException if an I/O exception occurs                    
                </throws>
                <throws>
                    IllegalArgumentException if the file format is not supported by
                      the system                    
                </throws>
                <see>
                    #isFileTypeSupported(int,Sequence)                    
                </see>
                <see>
                    #getMidiFileTypes(Sequence)                    
                </see>
            </javadoc>
            <method name="write" type="int" line="838">
                <params>
                    <param name="in" type="Sequence"/>
                    <param name="fileType" type="int"/>
                    <param name="out" type="OutputStream"/>
                </params>
                <declaration name="providers" type="List" line="839"/>
                <declaration name="bytesWritten" type="int" line="840"/>
                <scope line="841">
                    <declaration name="writer" type="MidiFileWriter" line="842"/>
                    <scope line="843"/>
                </scope>
                <scope line="848"/>
            </method>
            <javadoc line="853">
                Writes a stream of bytes representing a file of the MIDI file type
                  indicated to the external file provided.                
                <param>
                    in sequence containing MIDI data to be written to the file                    
                </param>
                <param>
                    type the file type of the file to be written to the output stream                    
                </param>
                <param>
                    out external file to which the file data should be written                    
                </param>
                <return>
                    the number of bytes written to the file                    
                </return>
                <throws>
                    IOException if an I/O exception occurs                    
                </throws>
                <throws>
                    IllegalArgumentException if the file type is not supported by
                      the system                    
                </throws>
                <see>
                    #isFileTypeSupported(int,Sequence)                    
                </see>
                <see>
                    #getMidiFileTypes(Sequence)                    
                </see>
            </javadoc>
            <method name="write" type="int" line="866">
                <params>
                    <param name="in" type="Sequence"/>
                    <param name="type" type="int"/>
                    <param name="out" type="File"/>
                </params>
                <declaration name="providers" type="List" line="867"/>
                <declaration name="bytesWritten" type="int" line="868"/>
                <scope line="869">
                    <declaration name="writer" type="MidiFileWriter" line="870"/>
                    <scope line="871"/>
                </scope>
                <scope line="876"/>
            </method>
            <method name="getMidiDeviceProviders" type="List" line="881"/>
            <method name="getSoundbankReaders" type="List" line="884"/>
            <method name="getMidiFileWriters" type="List" line="887"/>
            <method name="getMidiFileReaders" type="List" line="890"/>
            <javadoc line="893">
                Attempts to locate and return a default MidiDevice of the specified
                  type.
                  This method wraps {@link #getDefaultDevice}. It catches the
                  &lt;code&gt;IllegalArgumentException&lt;/code&gt; thrown by
                  &lt;code&gt;getDefaultDevice&lt;/code&gt; and instead throws a
                  &lt;code&gt;MidiUnavailableException&lt;/code&gt;, with the catched
                  exception chained.                
                <param>
                    deviceClass The requested device type, one of Synthesizer.class,
                      Sequencer.class, Receiver.class or Transmitter.class.                    
                </param>
                <throws>
                    MidiUnavalableException on failure.                    
                </throws>
            </javadoc>
            <method name="getDefaultDeviceWrapper" type="MidiDevice" line="905">
                <params>
                    <param name="deviceClass" type="Class"/>
                </params>
                <scope line="906"/>
                <scope line="909">
                    <declaration name="mae" type="MidiUnavailableException" line="910"/>
                </scope>
            </method>
            <javadoc line="915">
                Attempts to locate and return a default MidiDevice of the specified
                  type.                
                <param>
                    deviceClass The requested device type, one of Synthesizer.class,
                      Sequencer.class, Receiver.class or Transmitter.class.                    
                </param>
                <throws>
                    IllegalArgumentException on failure.                    
                </throws>
            </javadoc>
            <method name="getDefaultDevice" type="MidiDevice" line="922">
                <params>
                    <param name="deviceClass" type="Class"/>
                </params>
                <declaration name="providers" type="List" line="923"/>
                <declaration name="providerClassName" type="String" line="924"/>
                <declaration name="instanceName" type="String" line="925"/>
                <declaration name="device" type="MidiDevice" line="926"/>
                <scope line="927">
                    <declaration name="defaultProvider" type="MidiDeviceProvider" line="928"/>
                    <scope line="929">
                        <scope line="930">
                            <scope line="932"/>
                        </scope>
                        <scope line="937"/>
                    </scope>
                </scope>
                <scope line="942">
                    <scope line="944"/>
                </scope>
                <scope line="949"/>
            </method>
            <javadoc line="954">
                Return a MidiDeviceProcider of a given class from the list of
                  MidiDeviceProviders.                
                <param>
                    providerClassName The class name of the provider to be returned.                    
                </param>
                <param>
                    provider The list of MidiDeviceProviders that is searched.                    
                </param>
                <return>
                    A MidiDeviceProvider of the requested class, or null if none
                      is found.                    
                </return>
            </javadoc>
            <method name="getNamedProvider" type="MidiDeviceProvider" line="962">
                <params>
                    <param name="providerClassName" type="String"/>
                    <param name="providers" type="List"/>
                </params>
                <scope line="963">
                    <declaration name="provider" type="MidiDeviceProvider" line="964"/>
                    <scope line="965"/>
                </scope>
            </method>
            <javadoc line="971">
                Return a MidiDevice with a given name from a given MidiDeviceProvider.                
                <param>
                    deviceName The name of the MidiDevice to be returned.                    
                </param>
                <param>
                    provider The MidiDeviceProvider to check for MidiDevices.                    
                </param>
                <param>
                    deviceClass The requested device type, one of Synthesizer.class,
                      Sequencer.class, Receiver.class or Transmitter.class.                    
                </param>
                <return>
                    A MidiDevice matching the requirements, or null if none is found.                    
                </return>
            </javadoc>
            <method name="getNamedDevice" type="MidiDevice" line="979">
                <params>
                    <param name="deviceName" type="String"/>
                    <param name="provider" type="MidiDeviceProvider"/>
                    <param name="deviceClass" type="Class"/>
                </params>
                <declaration name="device" type="MidiDevice" line="980"/>
                <scope line="982"/>
                <scope line="985">
                    <scope line="987"/>
                </scope>
            </method>
            <javadoc line="993">
                Return a MidiDevice with a given name from a given MidiDeviceProvider.                
                <param>
                    deviceName The name of the MidiDevice to be returned.                    
                </param>
                <param>
                    provider The MidiDeviceProvider to check for MidiDevices.                    
                </param>
                <param>
                    deviceClass The requested device type, one of Synthesizer.class,
                      Sequencer.class, Receiver.class or Transmitter.class.                    
                </param>
                <return>
                    A MidiDevice matching the requirements, or null if none is found.                    
                </return>
            </javadoc>
            <method name="getNamedDevice" type="MidiDevice" line="1001">
                <params>
                    <param name="deviceName" type="String"/>
                    <param name="provider" type="MidiDeviceProvider"/>
                    <param name="deviceClass" type="Class"/>
                    <param name="allowSynthesizer" type="boolean"/>
                    <param name="allowSequencer" type="boolean"/>
                </params>
                <declaration name="infos" type="MidiDevice.Info[]" line="1002"/>
                <scope line="1003">
                    <scope line="1004">
                        <declaration name="device" type="MidiDevice" line="1005"/>
                        <scope line="1006"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1013">
                Return a MidiDevice with a given name from a list of
                  MidiDeviceProviders.                
                <param>
                    deviceName The name of the MidiDevice to be returned.                    
                </param>
                <param>
                    providers The List of MidiDeviceProviders to check for
                      MidiDevices.                    
                </param>
                <param>
                    deviceClass The requested device type, one of Synthesizer.class,
                      Sequencer.class, Receiver.class or Transmitter.class.                    
                </param>
                <return>
                    A Mixer matching the requirements, or null if none is found.                    
                </return>
            </javadoc>
            <method name="getNamedDevice" type="MidiDevice" line="1023">
                <params>
                    <param name="deviceName" type="String"/>
                    <param name="providers" type="List"/>
                    <param name="deviceClass" type="Class"/>
                </params>
                <declaration name="device" type="MidiDevice" line="1024"/>
                <scope line="1026"/>
                <scope line="1029">
                    <scope line="1031"/>
                </scope>
            </method>
            <javadoc line="1037">
                Return a MidiDevice with a given name from a list of
                  MidiDeviceProviders.                
                <param>
                    deviceName The name of the MidiDevice to be returned.                    
                </param>
                <param>
                    providers The List of MidiDeviceProviders to check for
                      MidiDevices.                    
                </param>
                <param>
                    deviceClass The requested device type, one of Synthesizer.class,
                      Sequencer.class, Receiver.class or Transmitter.class.                    
                </param>
                <return>
                    A Mixer matching the requirements, or null if none is found.                    
                </return>
            </javadoc>
            <method name="getNamedDevice" type="MidiDevice" line="1047">
                <params>
                    <param name="deviceName" type="String"/>
                    <param name="providers" type="List"/>
                    <param name="deviceClass" type="Class"/>
                    <param name="allowSynthesizer" type="boolean"/>
                    <param name="allowSequencer" type="boolean"/>
                </params>
                <scope line="1048">
                    <declaration name="provider" type="MidiDeviceProvider" line="1049"/>
                    <declaration name="device" type="MidiDevice" line="1050"/>
                    <scope line="1051"/>
                </scope>
            </method>
            <javadoc line="1057">
                From a given MidiDeviceProvider, return the first appropriate device.                
                <param>
                    provider The MidiDeviceProvider to check for MidiDevices.                    
                </param>
                <param>
                    deviceClass The requested device type, one of Synthesizer.class,
                      Sequencer.class, Receiver.class or Transmitter.class.                    
                </param>
                <return>
                    A MidiDevice is considered appropriate, or null if no
                      appropriate device is found.                    
                </return>
            </javadoc>
            <method name="getFirstDevice" type="MidiDevice" line="1065">
                <params>
                    <param name="provider" type="MidiDeviceProvider"/>
                    <param name="deviceClass" type="Class"/>
                </params>
                <declaration name="device" type="MidiDevice" line="1066"/>
                <scope line="1068"/>
                <scope line="1071">
                    <scope line="1073"/>
                </scope>
            </method>
            <javadoc line="1079">
                From a given MidiDeviceProvider, return the first appropriate device.                
                <param>
                    provider The MidiDeviceProvider to check for MidiDevices.                    
                </param>
                <param>
                    deviceClass The requested device type, one of Synthesizer.class,
                      Sequencer.class, Receiver.class or Transmitter.class.                    
                </param>
                <return>
                    A MidiDevice is considered appropriate, or null if no
                      appropriate device is found.                    
                </return>
            </javadoc>
            <method name="getFirstDevice" type="MidiDevice" line="1087">
                <params>
                    <param name="provider" type="MidiDeviceProvider"/>
                    <param name="deviceClass" type="Class"/>
                    <param name="allowSynthesizer" type="boolean"/>
                    <param name="allowSequencer" type="boolean"/>
                </params>
                <declaration name="infos" type="MidiDevice.Info[]" line="1088"/>
                <scope line="1089">
                    <declaration name="device" type="MidiDevice" line="1090"/>
                    <scope line="1091"/>
                </scope>
            </method>
            <javadoc line="1097">
                From a List of MidiDeviceProviders, return the first appropriate
                  MidiDevice.                
                <param>
                    providers The List of MidiDeviceProviders to search.                    
                </param>
                <param>
                    deviceClass The requested device type, one of Synthesizer.class,
                      Sequencer.class, Receiver.class or Transmitter.class.                    
                </param>
                <return>
                    A MidiDevice that is considered appropriate, or null
                      if none is found.                    
                </return>
            </javadoc>
            <method name="getFirstDevice" type="MidiDevice" line="1106">
                <params>
                    <param name="providers" type="List"/>
                    <param name="deviceClass" type="Class"/>
                </params>
                <declaration name="device" type="MidiDevice" line="1107"/>
                <scope line="1109"/>
                <scope line="1112">
                    <scope line="1114"/>
                </scope>
            </method>
            <javadoc line="1120">
                From a List of MidiDeviceProviders, return the first appropriate
                  MidiDevice.                
                <param>
                    providers The List of MidiDeviceProviders to search.                    
                </param>
                <param>
                    deviceClass The requested device type, one of Synthesizer.class,
                      Sequencer.class, Receiver.class or Transmitter.class.                    
                </param>
                <return>
                    A MidiDevice that is considered appropriate, or null
                      if none is found.                    
                </return>
            </javadoc>
            <method name="getFirstDevice" type="MidiDevice" line="1129">
                <params>
                    <param name="providers" type="List"/>
                    <param name="deviceClass" type="Class"/>
                    <param name="allowSynthesizer" type="boolean"/>
                    <param name="allowSequencer" type="boolean"/>
                </params>
                <scope line="1130">
                    <declaration name="provider" type="MidiDeviceProvider" line="1131"/>
                    <declaration name="device" type="MidiDevice" line="1132"/>
                    <scope line="1133"/>
                </scope>
            </method>
            <javadoc line="1139">
                Checks if a MidiDevice is appropriate.
                  If deviceClass is Synthesizer or Sequencer, a device implementing
                  the respective interface is considered appropriate. If deviceClass
                  is Receiver or Transmitter, a device is considered appropriate if
                  it implements neither Synthesizer nor Transmitter, and if it can
                  provide at least one Receiver or Transmitter, respectively.                
                <param>
                    device the MidiDevice to test                    
                </param>
                <param>
                    allowSynthesizer if true, Synthesizers are considered
                      appropriate. Otherwise only pure MidiDevices are considered
                      appropriate (unless allowSequencer is true). This flag only has an
                      effect for deviceClass Receiver and Transmitter. For other device
                      classes (Sequencer and Synthesizer), this flag has no effect.                    
                </param>
                <param>
                    allowSequencer if true, Sequencers are considered
                      appropriate. Otherwise only pure MidiDevices are considered
                      appropriate (unless allowSynthesizer is true). This flag only has an
                      effect for deviceClass Receiver and Transmitter. For other device
                      classes (Sequencer and Synthesizer), this flag has no effect.                    
                </param>
                <return>
                    true if the device is considered appropriate according to the
                      rules given above, false otherwise.                    
                </return>
            </javadoc>
            <method name="isAppropriateDevice" type="boolean" line="1160">
                <params>
                    <param name="device" type="MidiDevice"/>
                    <param name="deviceClass" type="Class"/>
                    <param name="allowSynthesizer" type="boolean"/>
                    <param name="allowSequencer" type="boolean"/>
                </params>
                <scope line="1161"/>
                <scope line="1164">
                    <scope line="1165">
                        <scope line="1166"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1173">
                Obtains the set of services currently installed on the system
                  using sun.misc.Service, the SPI mechanism in 1.3.                
                <return>
                    a List of instances of providers for the requested service.
                      If no providers are available, a List of length 0 will be returned.                    
                </return>
            </javadoc>
            <method name="getProviders" type="List" line="1179">
                <params>
                    <param name="providerClass" type="Class"/>
                </params>
            </method>
        </class>
    </source>