<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.sound.midi">
        <class name="ShortMessage" line="28">
            <extends class="MidiMessage"/>
            <comment line="59">
                Status byte defines                
            </comment>
            <comment line="62">
                System common messages                
            </comment>
            <comment line="68">
                241                
            </comment>
            <comment line="74">
                242                
            </comment>
            <comment line="80">
                243                
            </comment>
            <comment line="86">
                246                
            </comment>
            <comment line="92">
                247                
            </comment>
            <comment line="95">
                System real-time messages                
            </comment>
            <comment line="101">
                248                
            </comment>
            <comment line="107">
                250                
            </comment>
            <comment line="113">
                251                
            </comment>
            <comment line="119">
                252                
            </comment>
            <comment line="125">
                254                
            </comment>
            <comment line="131">
                255                
            </comment>
            <comment line="134">
                Channel voice message upper nibble defines                
            </comment>
            <comment line="139">
                128                
            </comment>
            <comment line="144">
                144                
            </comment>
            <comment line="149">
                160                
            </comment>
            <comment line="154">
                176                
            </comment>
            <comment line="159">
                192                
            </comment>
            <comment line="164">
                208                
            </comment>
            <comment line="169">
                224                
            </comment>
            <comment line="172">
                Instance variables                
            </comment>
            <javadoc line="28">
                A &lt;code&gt;ShortMessage&lt;/code&gt; contains a MIDI message that has at most
                  two data bytes following its status byte.  The types of MIDI message
                  that satisfy this criterion are channel voice, channel mode, system common,
                  and system real-time--in other words, everything except system exclusive
                  and meta-events.  The &lt;code&gt;ShortMessage&lt;/code&gt; class provides methods
                  for getting and setting the contents of the MIDI message.
                  &lt;p&gt;
                  A number of &lt;code&gt;ShortMessage&lt;/code&gt; methods have integer parameters by which
                  you specify a MIDI status or data byte.  If you know the numeric value, you
                  can express it directly.  For system common and system real-time messages,
                  you can often use the corresponding fields of &lt;code&gt;ShortMessage&lt;/code&gt;, such as{@link #SYSTEM_RESET SYSTEM_RESET}.  For channel messages,
                  the upper four bits of the status byte are specified by a command value and
                  the lower four bits are specified by a MIDI channel number. To
                  convert incoming MIDI data bytes that are in the form of Java&apos;s signed bytes,
                  you can use the &lt;A HREF=&quot;MidiMessage.html#integersVsBytes&quot;&gt;conversion code&lt;/A&gt;
                  given in the &lt;code&gt;{@link MidiMessage}&lt;/code&gt; class description.                
                <see>
                    SysexMessage                    
                </see>
                <see>
                    MetaMessage                    
                </see>
                <author>
                    David Rivas                    
                </author>
                <author>
                    Kara Kytle                    
                </author>
                <author>
                    Florian Bomers                    
                </author>
            </javadoc>
            <declaration name="MIDI_TIME_CODE" type="int" line="63"/>
            <javadoc line="63">
                Status byte for MIDI Time Code Quarter Frame message (0xF1, or 241).                
                <see>
                    MidiMessage#getStatus                    
                </see>
            </javadoc>
            <declaration name="SONG_POSITION_POINTER" type="int" line="69"/>
            <javadoc line="69">
                Status byte for Song Position Pointer message (0xF2, or 242).                
                <see>
                    MidiMessage#getStatus                    
                </see>
            </javadoc>
            <declaration name="SONG_SELECT" type="int" line="75"/>
            <javadoc line="75">
                Status byte for MIDI Song Select message (0xF3, or 243).                
                <see>
                    MidiMessage#getStatus                    
                </see>
            </javadoc>
            <declaration name="TUNE_REQUEST" type="int" line="81"/>
            <javadoc line="81">
                Status byte for Tune Request message (0xF6, or 246).                
                <see>
                    MidiMessage#getStatus                    
                </see>
            </javadoc>
            <declaration name="END_OF_EXCLUSIVE" type="int" line="87"/>
            <javadoc line="87">
                Status byte for End of System Exclusive message (0xF7, or 247).                
                <see>
                    MidiMessage#getStatus                    
                </see>
            </javadoc>
            <declaration name="TIMING_CLOCK" type="int" line="96"/>
            <javadoc line="96">
                Status byte for Timing Clock messagem (0xF8, or 248).                
                <see>
                    MidiMessage#getStatus                    
                </see>
            </javadoc>
            <declaration name="START" type="int" line="102"/>
            <javadoc line="102">
                Status byte for Start message (0xFA, or 250).                
                <see>
                    MidiMessage#getStatus                    
                </see>
            </javadoc>
            <declaration name="CONTINUE" type="int" line="108"/>
            <javadoc line="108">
                Status byte for Continue message (0xFB, or 251).                
                <see>
                    MidiMessage#getStatus                    
                </see>
            </javadoc>
            <declaration name="STOP" type="int" line="114"/>
            <javadoc line="114">
                Status byte for Stop message (0xFC, or 252).                
                <see>
                    MidiMessage#getStatus                    
                </see>
            </javadoc>
            <declaration name="ACTIVE_SENSING" type="int" line="120"/>
            <javadoc line="120">
                Status byte for Active Sensing message (0xFE, or 254).                
                <see>
                    MidiMessage#getStatus                    
                </see>
            </javadoc>
            <declaration name="SYSTEM_RESET" type="int" line="126"/>
            <javadoc line="126">
                Status byte for System Reset message (0xFF, or 255).                
                <see>
                    MidiMessage#getStatus                    
                </see>
            </javadoc>
            <declaration name="NOTE_OFF" type="int" line="135"/>
            <javadoc line="135">
                Command value for Note Off message (0x80, or 128)                
            </javadoc>
            <declaration name="NOTE_ON" type="int" line="140"/>
            <javadoc line="140">
                Command value for Note On message (0x90, or 144)                
            </javadoc>
            <declaration name="POLY_PRESSURE" type="int" line="145"/>
            <javadoc line="145">
                Command value for Polyphonic Key Pressure (Aftertouch) message (0xA0, or 160)                
            </javadoc>
            <declaration name="CONTROL_CHANGE" type="int" line="150"/>
            <javadoc line="150">
                Command value for Control Change message (0xB0, or 176)                
            </javadoc>
            <declaration name="PROGRAM_CHANGE" type="int" line="155"/>
            <javadoc line="155">
                Command value for Program Change message (0xC0, or 192)                
            </javadoc>
            <declaration name="CHANNEL_PRESSURE" type="int" line="160"/>
            <javadoc line="160">
                Command value for Channel Pressure (Aftertouch) message (0xD0, or 208)                
            </javadoc>
            <declaration name="PITCH_BEND" type="int" line="165"/>
            <javadoc line="165">
                Command value for Pitch Bend message (0xE0, or 224)                
            </javadoc>
            <javadoc line="173">
                Constructs a new &lt;code&gt;ShortMessage&lt;/code&gt;.  The
                  contents of the new message are guaranteed to specify
                  a valid MIDI message.  Subsequently, you may set the
                  contents of the message using one of the &lt;code&gt;setMessage&lt;/code&gt;
                  methods.                
                <see>
                    #setMessage                    
                </see>
            </javadoc>
            <method name="ShortMessage" type="constructor" line="181">
                <comment line="184">
                    Default message data: NOTE_ON on Channel 0 with max volume                    
                </comment>
            </method>
            <javadoc line="190">
                Constructs a new {@code ShortMessage} which represents a MIDI
                  message that takes no data bytes.
                  The contents of the message can be changed by using one of
                  the {@code setMessage} methods.                
                <param>
                    status the MIDI status byte                    
                </param>
                <throws>
                    InvalidMidiDataException if {@code status} does not specify
                      a valid MIDI status byte for a message that requires no data bytes                    
                </throws>
                <see>
                    #setMessage(int)                    
                </see>
                <see>
                    #setMessage(int,int,int)                    
                </see>
                <see>
                    #setMessage(int,int,int,int)                    
                </see>
                <see>
                    #getStatus()                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="ShortMessage" type="constructor" line="205">
                <params>
                    <param name="status" type="int"/>
                </params>
                <comment line="208">
                    can throw InvalidMidiDataException                    
                </comment>
            </method>
            <javadoc line="210">
                Constructs a new {@code ShortMessage} which represents a MIDI message
                  that takes up to two data bytes. If the message only takes one data byte,
                  the second data byte is ignored. If the message does not take
                  any data bytes, both data bytes are ignored.
                  The contents of the message can be changed by using one of
                  the {@code setMessage} methods.                
                <param>
                    status   the MIDI status byte                    
                </param>
                <param>
                    data1    the first data byte                    
                </param>
                <param>
                    data2    the second data byte                    
                </param>
                <throws>
                    InvalidMidiDataException if the status byte or all data bytes
                      belonging to the message do not specify a valid MIDI message                    
                </throws>
                <see>
                    #setMessage(int)                    
                </see>
                <see>
                    #setMessage(int,int,int)                    
                </see>
                <see>
                    #setMessage(int,int,int,int)                    
                </see>
                <see>
                    #getStatus()                    
                </see>
                <see>
                    #getData1()                    
                </see>
                <see>
                    #getData2()                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="ShortMessage" type="constructor" line="232">
                <params>
                    <param name="status" type="int"/>
                    <param name="data1" type="int"/>
                    <param name="data2" type="int"/>
                </params>
                <comment line="235">
                    can throw InvalidMidiDataException                    
                </comment>
            </method>
            <javadoc line="237">
                Constructs a new {@code ShortMessage} which represents a channel
                  MIDI message that takes up to two data bytes. If the message only takes
                  one data byte, the second data byte is ignored. If the message does not
                  take any data bytes, both data bytes are ignored.
                  The contents of the message can be changed by using one of
                  the {@code setMessage} methods.                
                <param>
                    command  the MIDI command represented by this message                    
                </param>
                <param>
                    channel  the channel associated with the message                    
                </param>
                <param>
                    data1    the first data byte                    
                </param>
                <param>
                    data2    the second data byte                    
                </param>
                <throws>
                    InvalidMidiDataException if the command value, channel value
                      or all data bytes belonging to the message do not specify
                      a valid MIDI message                    
                </throws>
                <see>
                    #setMessage(int)                    
                </see>
                <see>
                    #setMessage(int,int,int)                    
                </see>
                <see>
                    #setMessage(int,int,int,int)                    
                </see>
                <see>
                    #getCommand()                    
                </see>
                <see>
                    #getChannel()                    
                </see>
                <see>
                    #getData1()                    
                </see>
                <see>
                    #getData2()                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="ShortMessage" type="constructor" line="262">
                <params>
                    <param name="command" type="int"/>
                    <param name="channel" type="int"/>
                    <param name="data1" type="int"/>
                    <param name="data2" type="int"/>
                </params>
            </method>
            <javadoc line="268">
                Constructs a new &lt;code&gt;ShortMessage&lt;/code&gt;.                
                <param>
                    data an array of bytes containing the complete message.
                      The message data may be changed using the <code>setMessage</code>
                      method.                    
                </param>
                <see>
                    #setMessage                    
                </see>
            </javadoc>
            <method name="ShortMessage" type="constructor" line="276">
                <params>
                    <param name="data" type="byte[]"/>
                </params>
                <comment line="276">
                    $$fb this should throw an Exception in case of an illegal message!                    
                </comment>
                <comment line="278">
                    $$fb this may set an invalid message.
                     Can&apos;t correct without compromising compatibility                    
                </comment>
            </method>
            <javadoc line="283">
                Sets the parameters for a MIDI message that takes no data bytes.                
                <param>
                    status    the MIDI status byte                    
                </param>
                <throws>
                    <code>InvalidMidiDataException</code> if <code>status</code> does not
                      specify a valid MIDI status byte for a message that requires no data bytes.                    
                </throws>
                <see>
                    #setMessage(int,int,int)                    
                </see>
                <see>
                    #setMessage(int,int,int,int)                    
                </see>
            </javadoc>
            <method name="setMessage" type="void" line="291">
                <params>
                    <param name="status" type="int"/>
                </params>
                <comment line="293">
                    check for valid values                    
                </comment>
                <comment line="294">
                    can throw InvalidMidiDataException                    
                </comment>
                <declaration name="dataLength" type="int" line="293"/>
                <scope line="294"/>
            </method>
            <javadoc line="301">
                Sets the  parameters for a MIDI message that takes one or two data
                  bytes.  If the message takes only one data byte, the second data
                  byte is ignored; if the message does not take any data bytes, both
                  data bytes are ignored.                
                <param>
                    status    the MIDI status byte                    
                </param>
                <param>
                    data1             the first data byte                    
                </param>
                <param>
                    data2             the second data byte                    
                </param>
                <throws>
                    <code>InvalidMidiDataException</code> if the
                      the status byte, or all data bytes belonging to the message, do
                      not specify a valid MIDI message.                    
                </throws>
                <see>
                    #setMessage(int,int,int,int)                    
                </see>
                <see>
                    #setMessage(int)                    
                </see>
            </javadoc>
            <method name="setMessage" type="void" line="316">
                <params>
                    <param name="status" type="int"/>
                    <param name="data1" type="int"/>
                    <param name="data2" type="int"/>
                </params>
                <comment line="318">
                    check for valid values                    
                </comment>
                <comment line="319">
                    can throw InvalidMidiDataException                    
                </comment>
                <comment line="332">
                    set the length                    
                </comment>
                <comment line="334">
                    re-allocate array if ShortMessage(byte[]) constructor gave array with fewer elements                    
                </comment>
                <comment line="339">
                    set the data                    
                </comment>
                <declaration name="dataLength" type="int" line="318"/>
                <scope line="319">
                    <scope line="320"/>
                    <scope line="323">
                        <scope line="324"/>
                    </scope>
                </scope>
                <scope line="334"/>
                <scope line="340">
                    <scope line="342"/>
                </scope>
            </method>
            <javadoc line="349">
                Sets the short message parameters for a  channel message
                  which takes up to two data bytes.  If the message only
                  takes one data byte, the second data byte is ignored; if
                  the message does not take any data bytes, both data bytes
                  are ignored.                
                <param>
                    command   the MIDI command represented by this message                    
                </param>
                <param>
                    channel   the channel associated with the message                    
                </param>
                <param>
                    data1             the first data byte                    
                </param>
                <param>
                    data2             the second data byte                    
                </param>
                <throws>
                    <code>InvalidMidiDataException</code> if the
                      status byte or all data bytes belonging to the message, do
                      not specify a valid MIDI message                    
                </throws>
                <see>
                    #setMessage(int,int,int)                    
                </see>
                <see>
                    #setMessage(int)                    
                </see>
                <see>
                    #getCommand                    
                </see>
                <see>
                    #getChannel                    
                </see>
                <see>
                    #getData1                    
                </see>
                <see>
                    #getData2                    
                </see>
            </javadoc>
            <method name="setMessage" type="void" line="371">
                <params>
                    <param name="command" type="int"/>
                    <param name="channel" type="int"/>
                    <param name="data1" type="int"/>
                    <param name="data2" type="int"/>
                </params>
                <comment line="373">
                    check for valid values                    
                </comment>
                <comment line="377">
                    &lt;=&gt; (channel&lt;0 || channel&gt;15)                    
                </comment>
                <scope line="373"/>
                <scope line="376"/>
            </method>
            <javadoc line="383">
                Obtains the MIDI channel associated with this event.  This method
                  assumes that the event is a MIDI channel message; if not, the return
                  value will not be meaningful.                
                <return>
                    MIDI channel associated with the message.                    
                </return>
                <see>
                    #setMessage(int,int,int,int)                    
                </see>
            </javadoc>
            <method name="getChannel" type="int" line="390">
                <comment line="392">
                    this returns 0 if an invalid message is set                    
                </comment>
            </method>
            <javadoc line="396">
                Obtains the MIDI command associated with this event.  This method
                  assumes that the event is a MIDI channel message; if not, the return
                  value will not be meaningful.                
                <see>
                    #setMessage(int,int,int,int)                    
                </see>
            </javadoc>
            <method name="getCommand" type="int" line="402">
                <comment line="404">
                    this returns 0 if an invalid message is set                    
                </comment>
            </method>
            <javadoc line="408">
                Obtains the first data byte in the message.                
                <return>
                    the value of the <code>data1</code> field                    
                </return>
                <see>
                    #setMessage(int,int,int)                    
                </see>
            </javadoc>
            <method name="getData1" type="int" line="413">
                <scope line="414"/>
            </method>
            <javadoc line="421">
                Obtains the second data byte in the message.                
                <return>
                    the value of the <code>data2</code> field                    
                </return>
                <see>
                    #setMessage(int,int,int)                    
                </see>
            </javadoc>
            <method name="getData2" type="int" line="426">
                <scope line="427"/>
            </method>
            <javadoc line="434">
                Creates a new object of the same class and with the same contents
                  as this object.                
                <return>
                    a clone of this instance.                    
                </return>
            </javadoc>
            <method name="clone" type="Object" line="439">
                <declaration name="newData" type="byte[]" line="440"/>
                <declaration name="msg" type="ShortMessage" line="443"/>
            </method>
            <javadoc line="448">
                Retrieves the number of data bytes associated with a particular
                  status byte value.                
                <param>
                    status status byte value, which must represent a short MIDI message                    
                </param>
                <return>
                    data length in bytes (0, 1, or 2)                    
                </return>
                <throws>
                    <code>InvalidMidiDataException</code> if the
                      <code>status</code> argument does not represent the status byte for any
                      short message                    
                </throws>
            </javadoc>
            <method name="getDataLength" type="int" line="457">
                <params>
                    <param name="status" type="int"/>
                </params>
                <comment line="459">
                    system common and system real-time messages                    
                </comment>
                <comment line="461">
                    Tune Request                    
                </comment>
                <comment line="462">
                    EOX                    
                </comment>
                <comment line="463">
                    System real-time messages                    
                </comment>
                <comment line="464">
                    Timing Clock                    
                </comment>
                <comment line="465">
                    Undefined                    
                </comment>
                <comment line="466">
                    Start                    
                </comment>
                <comment line="467">
                    Continue                    
                </comment>
                <comment line="468">
                    Stop                    
                </comment>
                <comment line="469">
                    Undefined                    
                </comment>
                <comment line="470">
                    Active Sensing                    
                </comment>
                <comment line="471">
                    System Reset                    
                </comment>
                <comment line="473">
                    MTC Quarter Frame                    
                </comment>
                <comment line="474">
                    Song Select                    
                </comment>
                <comment line="476">
                    Song Position Pointer                    
                </comment>
                <comment line="481">
                    channel voice and mode messages                    
                </comment>
            </method>
        </class>
    </source>