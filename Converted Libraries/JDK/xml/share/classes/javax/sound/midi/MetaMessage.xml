<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.sound.midi">
        <import package="java.io.ByteArrayOutputStream"/>
        <import package="java.io.DataOutputStream"/>
        <import package="java.io.IOException"/>
        <class name="MetaMessage" line="5">
            <extends class="MidiMessage"/>
            <javadoc line="5">
                A &lt;code&gt;MetaMessage&lt;/code&gt; is a &lt;code&gt;{@link MidiMessage}&lt;/code&gt; that is not meaningful to synthesizers, but
                  that can be stored in a MIDI file and interpreted by a sequencer program.
                  (See the discussion in the &lt;code&gt;MidiMessage&lt;/code&gt;
                  class description.)  The Standard MIDI Files specification defines
                  various types of meta-events, such as sequence number, lyric, cue point,
                  and set tempo.  There are also meta-events
                  for such information as lyrics, copyrights, tempo indications, time and key
                  signatures, markers, etc.  For more information, see the Standard MIDI Files 1.0
                  specification, which is part of the Complete MIDI 1.0 Detailed Specification
                  published by the MIDI Manufacturer&apos;s Association
                  (&lt;a href = http://www.midi.org&gt;http://www.midi.org&lt;/a&gt;).
                  &lt;p&gt;
                  When data is being transported using MIDI wire protocol,
                  a &lt;code&gt;{@link ShortMessage}&lt;/code&gt; with the status value &lt;code&gt;0xFF&lt;/code&gt; represents
                  a system reset message.  In MIDI files, this same status value denotes a &lt;code&gt;MetaMessage&lt;/code&gt;.
                  The types of meta-message are distinguished from each other by the first byte
                  that follows the status byte &lt;code&gt;0xFF&lt;/code&gt;.  The subsequent bytes are data
                  bytes.  As with system exclusive messages, there are an arbitrary number of
                  data bytes, depending on the type of &lt;code&gt;MetaMessage&lt;/code&gt;.                
                <see>
                    MetaEventListener                    
                </see>
                <author>
                    David Rivas                    
                </author>
                <author>
                    Kara Kytle                    
                </author>
            </javadoc>
            <declaration name="META" type="int" line="30"/>
            <javadoc line="30">
                Status byte for &lt;code&gt;MetaMessage&lt;/code&gt; (0xFF, or 255), which is used
                  in MIDI files.  It has the same value as SYSTEM_RESET, which
                  is used in the real-time &quot;MIDI wire&quot; protocol.                
                <see>
                    MidiMessage#getStatus                    
                </see>
            </javadoc>
            <declaration name="defaultMessage" type="byte[]" line="37"/>
            <declaration name="dataLength" type="int" line="38"/>
            <javadoc line="38">
                The length of the actual message in the data array.
                  This is used to determine how many bytes of the data array
                  is the message, and how many are the status byte, the
                  type byte, and the variable-length-int describing the
                  length of the message.                
            </javadoc>
            <javadoc line="46">
                Constructs a new &lt;code&gt;MetaMessage&lt;/code&gt;. The contents of
                  the message are not set here; use{@link #setMessage(int,byte[],int) setMessage}to set them subsequently.                
            </javadoc>
            <method name="MetaMessage" type="constructor" line="50"/>
            <javadoc line="53">
                Constructs a new {@code MetaMessage} and sets the message parameters.
                  The contents of the message can be changed by using
                  the {@code setMessage} method.                
                <param>
                    type   meta-message type (must be less than 128)                    
                </param>
                <param>
                    data   the data bytes in the MIDI message                    
                </param>
                <param>
                    length an amount of bytes in the {@code data} byte array;
                      it should be non-negative and less than or equal to{@code data.length}                    
                </param>
                <throws>
                    InvalidMidiDataException if the parameter values do not specify
                      a valid MIDI meta message                    
                </throws>
                <see>
                    #setMessage(int,byte[],int)                    
                </see>
                <see>
                    #getType()                    
                </see>
                <see>
                    #getData()                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="MetaMessage" type="constructor" line="68">
                <params>
                    <param name="type" type="int"/>
                    <param name="data" type="byte[]"/>
                    <param name="length" type="int"/>
                </params>
            </method>
            <javadoc line="72">
                Constructs a new &lt;code&gt;MetaMessage&lt;/code&gt;.                
                <param>
                    data an array of bytes containing the complete message.
                      The message data may be changed using the <code>setMessage</code>
                      method.                    
                </param>
                <see>
                    #setMessage                    
                </see>
            </javadoc>
            <method name="MetaMessage" type="constructor" line="79">
                <params>
                    <param name="data" type="byte[]"/>
                </params>
                <scope line="81">
                    <declaration name="pos" type="int" line="83"/>
                    <scope line="84"/>
                </scope>
            </method>
            <javadoc line="90">
                Sets the message parameters for a &lt;code&gt;MetaMessage&lt;/code&gt;.
                  Since only one status byte value, &lt;code&gt;0xFF&lt;/code&gt;, is allowed for meta-messages,
                  it does not need to be specified here.  Calls to &lt;code&gt;{@link MidiMessage#getStatus getStatus}&lt;/code&gt; return
                  &lt;code&gt;0xFF&lt;/code&gt; for all meta-messages.
                  &lt;p&gt;
                  The &lt;code&gt;type&lt;/code&gt; argument should be a valid value for the byte that
                  follows the status byte in the &lt;code&gt;MetaMessage&lt;/code&gt;.  The &lt;code&gt;data&lt;/code&gt; argument
                  should contain all the subsequent bytes of the &lt;code&gt;MetaMessage&lt;/code&gt;.  In other words,
                  the byte that specifies the type of &lt;code&gt;MetaMessage&lt;/code&gt; is not considered a data byte.                
                <param>
                    type              meta-message type (must be less than 128)                    
                </param>
                <param>
                    data              the data bytes in the MIDI message                    
                </param>
                <param>
                    length    the number of bytes in the <code>data</code>
                      byte array                    
                </param>
                <throws>
                    <code>InvalidMidiDataException</code>  if the
                      parameter values do not specify a valid MIDI meta message                    
                </throws>
            </javadoc>
            <method name="setMessage" type="void" line="107">
                <params>
                    <param name="type" type="int"/>
                    <param name="data" type="byte[]"/>
                    <param name="length" type="int"/>
                </params>
                <scope line="108"/>
                <scope line="111"/>
                <scope line="120"/>
            </method>
            <javadoc line="124">
                Obtains the type of the &lt;code&gt;MetaMessage&lt;/code&gt;.                
                <return>
                    an integer representing the <code>MetaMessage</code> type                    
                </return>
            </javadoc>
            <method name="getType" type="int" line="128">
                <scope line="129"/>
            </method>
            <javadoc line="134">
                Obtains a copy of the data for the meta message.  The returned
                  array of bytes does not include the status byte or the message
                  length data.  The length of the data for the meta message is
                  the length of the array.  Note that the length of the entire
                  message includes the status byte and the meta message type
                  byte, and therefore may be longer than the returned array.                
                <return>
                    array containing the meta message data.                    
                </return>
                <see>
                    MidiMessage#getLength                    
                </see>
            </javadoc>
            <method name="getData" type="byte[]" line="144">
                <declaration name="returnedArray" type="byte[]" line="145"/>
            </method>
            <javadoc line="149">
                Creates a new object of the same class and with the same contents
                  as this object.                
                <return>
                    a clone of this instance                    
                </return>
            </javadoc>
            <method name="clone" type="Object" line="154">
                <declaration name="newData" type="byte[]" line="155"/>
                <declaration name="event" type="MetaMessage" line="157"/>
            </method>
            <method name="getVarIntLength" type="int" line="160">
                <params>
                    <param name="value" type="long"/>
                </params>
                <declaration name="length" type="int" line="161"/>
                <scope line="162"/>
            </method>
            <declaration name="mask" type="long" line="169"/>
            <method name="writeVarInt" type="void" line="170">
                <params>
                    <param name="data" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="value" type="long"/>
                </params>
                <declaration name="shift" type="int" line="171"/>
                <scope line="173"/>
            </method>
        </class>
    </source>