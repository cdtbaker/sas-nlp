<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.sound.midi.spi">
        <import package="java.io.File"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.net.URL"/>
        <import package="javax.sound.midi.MidiFileFormat"/>
        <import package="javax.sound.midi.Sequence"/>
        <import package="javax.sound.midi.InvalidMidiDataException"/>
        <class name="MidiFileReader" line="9">
            <javadoc line="9">
                A &lt;code&gt;MidiFileReader&lt;/code&gt; supplies MIDI file-reading services.  Classes implementing this
                  interface can parse the format information from one or more types of
                  MIDI file, and can produce a &lt;code&gt;Sequence&lt;/code&gt; object from files of these types.                
                <author>
                    Kara Kytle                    
                </author>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getMidiFileFormat" type="MidiFileFormat" line="17"/>
            <javadoc line="17">
                Obtains the MIDI file format of the input stream provided.  The stream must
                  point to valid MIDI file data.  In general, MIDI file readers may
                  need to read some data from the stream before determining whether they
                  support it.  These parsers must
                  be able to mark the stream, read enough data to determine whether they
                  support the stream, and, if not, reset the stream&apos;s read pointer to its original
                  position.  If the input stream does not support this, this method may fail
                  with an &lt;code&gt;IOException&lt;/code&gt;.                
                <param>
                    stream the input stream from which file format information should be
                      extracted                    
                </param>
                <return>
                    a <code>MidiFileFormat</code> object describing the MIDI file format                    
                </return>
                <throws>
                    InvalidMidiDataException if the stream does not point to valid MIDI
                      file data recognized by the system                    
                </throws>
                <throws>
                    IOException if an I/O exception occurs                    
                </throws>
                <see>
                    InputStream#markSupported                    
                </see>
                <see>
                    InputStream#mark                    
                </see>
            </javadoc>
            <method name="getMidiFileFormat" type="MidiFileFormat" line="36"/>
            <javadoc line="36">
                Obtains the MIDI file format of the URL provided.  The URL must
                  point to valid MIDI file data.                
                <param>
                    url the URL from which file format information should be
                      extracted                    
                </param>
                <return>
                    a <code>MidiFileFormat</code> object describing the MIDI file format                    
                </return>
                <throws>
                    InvalidMidiDataException if the URL does not point to valid MIDI
                      file data recognized by the system                    
                </throws>
                <throws>
                    IOException if an I/O exception occurs                    
                </throws>
            </javadoc>
            <method name="getMidiFileFormat" type="MidiFileFormat" line="47"/>
            <javadoc line="47">
                Obtains the MIDI file format of the &lt;code&gt;File&lt;/code&gt; provided.
                  The &lt;code&gt;File&lt;/code&gt; must point to valid MIDI file data.                
                <param>
                    file the <code>File</code> from which file format information should be
                      extracted                    
                </param>
                <return>
                    a <code>MidiFileFormat</code> object describing the MIDI file format                    
                </return>
                <throws>
                    InvalidMidiDataException if the <code>File</code> does not point to valid MIDI
                      file data recognized by the system                    
                </throws>
                <throws>
                    IOException if an I/O exception occurs                    
                </throws>
            </javadoc>
            <method name="getSequence" type="Sequence" line="58"/>
            <javadoc line="58">
                Obtains a MIDI sequence from the input stream provided.  The stream must
                  point to valid MIDI file data.  In general, MIDI file readers may
                  need to read some data from the stream before determining whether they
                  support it.  These parsers must
                  be able to mark the stream, read enough data to determine whether they
                  support the stream, and, if not, reset the stream&apos;s read pointer to its original
                  position.  If the input stream does not support this, this method may fail
                  with an IOException.                
                <param>
                    stream the input stream from which the <code>Sequence</code> should be
                      constructed                    
                </param>
                <return>
                    a <code>Sequence</code> object based on the MIDI file data contained
                      in the input stream.                    
                </return>
                <throws>
                    InvalidMidiDataException if the stream does not point to valid MIDI
                      file data recognized by the system                    
                </throws>
                <throws>
                    IOException if an I/O exception occurs                    
                </throws>
                <see>
                    InputStream#markSupported                    
                </see>
                <see>
                    InputStream#mark                    
                </see>
            </javadoc>
            <method name="getSequence" type="Sequence" line="78"/>
            <javadoc line="78">
                Obtains a MIDI sequence from the URL provided.  The URL must
                  point to valid MIDI file data.                
                <param>
                    url the URL for which the <code>Sequence</code> should be
                      constructed                    
                </param>
                <return>
                    a <code>Sequence</code> object based on the MIDI file data pointed
                      to by the URL                    
                </return>
                <throws>
                    InvalidMidiDataException if the URL does not point to valid MIDI
                      file data recognized by the system                    
                </throws>
                <throws>
                    IOException if an I/O exception occurs                    
                </throws>
            </javadoc>
            <method name="getSequence" type="Sequence" line="90"/>
            <javadoc line="90">
                Obtains a MIDI sequence from the &lt;code&gt;File&lt;/code&gt; provided.  The &lt;code&gt;File&lt;/code&gt; must
                  point to valid MIDI file data.                
                <param>
                    file the <code>File</code> from which the <code>Sequence</code> should be
                      constructed                    
                </param>
                <return>
                    a <code>Sequence</code> object based on the MIDI file data pointed
                      to by the <code>File</code>                    
                </return>
                <throws>
                    InvalidMidiDataException if the <code>File</code> does not point to valid MIDI
                      file data recognized by the system                    
                </throws>
                <throws>
                    IOException if an I/O exception occurs                    
                </throws>
            </javadoc>
        </class>
    </source>