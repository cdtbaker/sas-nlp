<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.sound.midi">
        <import package="java.io.InputStream"/>
        <import package="java.io.IOException"/>
        <interface name="Sequencer">
            <implements interface="MidiDevice"/>
            <javadoc line="4">
                A hardware or software device that plays back a MIDI
                  &lt;code&gt;{@link Sequence sequence}&lt;/code&gt; is known as a &lt;em&gt;sequencer&lt;/em&gt;.
                  A MIDI sequence contains lists of time-stamped MIDI data, such as
                  might be read from a standard MIDI file.  Most
                  sequencers also provide functions for creating and editing sequences.
                  &lt;p&gt;
                  The &lt;code&gt;Sequencer&lt;/code&gt; interface includes methods for the following
                  basic MIDI sequencer operations:
                  &lt;ul&gt;
                  &lt;li&gt;obtaining a sequence from MIDI file data&lt;/li&gt;
                  &lt;li&gt;starting and stopping playback&lt;/li&gt;
                  &lt;li&gt;moving to an arbitrary position in the sequence&lt;/li&gt;
                  &lt;li&gt;changing the tempo (speed) of playback&lt;/li&gt;
                  &lt;li&gt;synchronizing playback to an internal clock or to received MIDI
                  messages&lt;/li&gt;
                  &lt;li&gt;controlling the timing of another device&lt;/li&gt;
                  &lt;/ul&gt;
                  In addition, the following operations are supported, either directly, or
                  indirectly through objects that the &lt;code&gt;Sequencer&lt;/code&gt; has access to:
                  &lt;ul&gt;
                  &lt;li&gt;editing the data by adding or deleting individual MIDI events or entire
                  tracks&lt;/li&gt;
                  &lt;li&gt;muting or soloing individual tracks in the sequence&lt;/li&gt;
                  &lt;li&gt;notifying listener objects about any meta-events or
                  control-change events encountered while playing back the sequence.&lt;/li&gt;
                  &lt;/ul&gt;                
                <see>
                    Sequencer.SyncMode                    
                </see>
                <see>
                    #addMetaEventListener                    
                </see>
                <see>
                    ControllerEventListener                    
                </see>
                <see>
                    Receiver                    
                </see>
                <see>
                    Transmitter                    
                </see>
                <see>
                    MidiDevice                    
                </see>
                <author>
                    Kara Kytle                    
                </author>
                <author>
                    Florian Bomers                    
                </author>
            </javadoc>
            <declaration name="LOOP_CONTINUOUSLY" type="int" line="41"/>
            <javadoc line="41">
                A value indicating that looping should continue
                  indefinitely rather than complete after a specific
                  number of loops.                
                <see>
                    #setLoopCount                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="setSequence" type="void" line="49"/>
            <javadoc line="49">
                Sets the current sequence on which the sequencer operates.
                  &lt;p&gt;This method can be called even if the
                  &lt;code&gt;Sequencer&lt;/code&gt; is closed.                
                <param>
                    sequence the sequence to be loaded.                    
                </param>
                <throws>
                    InvalidMidiDataException if the sequence contains invalid
                      MIDI data, or is not supported.                    
                </throws>
            </javadoc>
            <method name="setSequence" type="void" line="58"/>
            <javadoc line="58">
                Sets the current sequence on which the sequencer operates.
                  The stream must point to MIDI file data.
                  &lt;p&gt;This method can be called even if the
                  &lt;code&gt;Sequencer&lt;/code&gt; is closed.                
                <param>
                    stream stream containing MIDI file data.                    
                </param>
                <throws>
                    IOException if an I/O exception occurs during reading of the stream.                    
                </throws>
                <throws>
                    InvalidMidiDataException if invalid data is encountered
                      in the stream, or the stream is not supported.                    
                </throws>
            </javadoc>
            <method name="getSequence" type="Sequence" line="69"/>
            <javadoc line="69">
                Obtains the sequence on which the Sequencer is currently operating.
                  &lt;p&gt;This method can be called even if the
                  &lt;code&gt;Sequencer&lt;/code&gt; is closed.                
                <return>
                    the current sequence, or <code>null</code> if no sequence is currently set.                    
                </return>
            </javadoc>
            <method name="start" type="void" line="76"/>
            <javadoc line="76">
                Starts playback of the MIDI data in the currently
                  loaded sequence.
                  Playback will begin from the current position.
                  If the playback position reaches the loop end point,
                  and the loop count is greater than 0, playback will
                  resume at the loop start point for the number of
                  repetitions set with &lt;code&gt;setLoopCount&lt;/code&gt;.
                  After that, or if the loop count is 0, playback will
                  continue to play to the end of the sequence.
                  &lt;p&gt;The implementation ensures that the synthesizer
                  is brought to a consistent state when jumping
                  to the loop start point by sending appropriate
                  controllers, pitch bend, and program change events.                
                <throws>
                    IllegalStateException if the <code>Sequencer</code> is
                      closed.                    
                </throws>
                <see>
                    #setLoopStartPoint                    
                </see>
                <see>
                    #setLoopEndPoint                    
                </see>
                <see>
                    #setLoopCount                    
                </see>
                <see>
                    #stop                    
                </see>
            </javadoc>
            <method name="stop" type="void" line="98"/>
            <javadoc line="98">
                Stops recording, if active, and playback of the currently loaded sequence,
                  if any.                
                <throws>
                    IllegalStateException if the <code>Sequencer</code> is
                      closed.                    
                </throws>
                <see>
                    #start                    
                </see>
                <see>
                    #isRunning                    
                </see>
            </javadoc>
            <method name="isRunning" type="boolean" line="107"/>
            <javadoc line="107">
                Indicates whether the Sequencer is currently running.  The default is &lt;code&gt;false&lt;/code&gt;.
                  The Sequencer starts running when either &lt;code&gt;{@link #start}&lt;/code&gt; or &lt;code&gt;{@link #startRecording}&lt;/code&gt;
                  is called.  &lt;code&gt;isRunning&lt;/code&gt; then returns &lt;code&gt;true&lt;/code&gt; until playback of the
                  sequence completes or &lt;code&gt;{@link #stop}&lt;/code&gt; is called.                
                <return>
                    <code>true</code> if the Sequencer is running, otherwise <code>false</code>                    
                </return>
            </javadoc>
            <method name="startRecording" type="void" line="115"/>
            <javadoc line="115">
                Starts recording and playback of MIDI data.  Data is recorded to all enabled tracks,
                  on the channel(s) for which they were enabled.  Recording begins at the current position
                  of the sequencer.   Any events already in the track are overwritten for the duration
                  of the recording session.  Events from the currently loaded sequence,
                  if any, are delivered to the sequencer&apos;s transmitter(s) along with messages
                  received during recording.
                  &lt;p&gt;
                  Note that tracks are not by default enabled for recording.  In order to record MIDI data,
                  at least one track must be specifically enabled for recording.                
                <throws>
                    IllegalStateException if the <code>Sequencer</code> is
                      closed.                    
                </throws>
                <see>
                    #startRecording                    
                </see>
                <see>
                    #recordEnable                    
                </see>
                <see>
                    #recordDisable                    
                </see>
            </javadoc>
            <method name="stopRecording" type="void" line="132"/>
            <javadoc line="132">
                Stops recording, if active.  Playback of the current sequence continues.                
                <throws>
                    IllegalStateException if the <code>Sequencer</code> is
                      closed.                    
                </throws>
                <see>
                    #startRecording                    
                </see>
                <see>
                    #isRecording                    
                </see>
            </javadoc>
            <method name="isRecording" type="boolean" line="140"/>
            <javadoc line="140">
                Indicates whether the Sequencer is currently recording.  The default is &lt;code&gt;false&lt;/code&gt;.
                  The Sequencer begins recording when &lt;code&gt;{@link #startRecording}&lt;/code&gt; is called,
                  and then returns &lt;code&gt;true&lt;/code&gt; until &lt;code&gt;{@link #stop}&lt;/code&gt; or &lt;code&gt;{@link #stopRecording}&lt;/code&gt;
                  is called.                
                <return>
                    <code>true</code> if the Sequencer is recording, otherwise <code>false</code>                    
                </return>
            </javadoc>
            <method name="recordEnable" type="void" line="148"/>
            <javadoc line="148">
                Prepares the specified track for recording events received on a particular channel.
                  Once enabled, a track will receive events when recording is active.                
                <param>
                    track the track to which events will be recorded                    
                </param>
                <param>
                    channel the channel on which events will be received.  If -1 is specified
                      for the channel value, the track will receive data from all channels.                    
                </param>
                <throws>
                    IllegalArgumentException thrown if the track is not part of the current
                      sequence.                    
                </throws>
            </javadoc>
            <method name="recordDisable" type="void" line="158"/>
            <javadoc line="158">
                Disables recording to the specified track.  Events will no longer be recorded
                  into this track.                
                <param>
                    track the track to disable for recording, or <code>null</code> to disable
                      recording for all tracks.                    
                </param>
            </javadoc>
            <method name="getTempoInBPM" type="float" line="165"/>
            <javadoc line="165">
                Obtains the current tempo, expressed in beats per minute.  The
                  actual tempo of playback is the product of the returned value
                  and the tempo factor.                
                <return>
                    the current tempo in beats per minute                    
                </return>
                <see>
                    #getTempoFactor                    
                </see>
                <see>
                    #setTempoInBPM(float)                    
                </see>
                <see>
                    #getTempoInMPQ                    
                </see>
            </javadoc>
            <method name="setTempoInBPM" type="void" line="175"/>
            <javadoc line="175">
                Sets the tempo in beats per minute.   The actual tempo of playback
                  is the product of the specified value and the tempo factor.                
                <param>
                    bpm desired new tempo in beats per minute                    
                </param>
                <see>
                    #getTempoFactor                    
                </see>
                <see>
                    #setTempoInMPQ(float)                    
                </see>
                <see>
                    #getTempoInBPM                    
                </see>
            </javadoc>
            <method name="getTempoInMPQ" type="float" line="184"/>
            <javadoc line="184">
                Obtains the current tempo, expressed in microseconds per quarter
                  note.  The actual tempo of playback is the product of the returned
                  value and the tempo factor.                
                <return>
                    the current tempo in microseconds per quarter note                    
                </return>
                <see>
                    #getTempoFactor                    
                </see>
                <see>
                    #setTempoInMPQ(float)                    
                </see>
                <see>
                    #getTempoInBPM                    
                </see>
            </javadoc>
            <method name="setTempoInMPQ" type="void" line="194"/>
            <javadoc line="194">
                Sets the tempo in microseconds per quarter note.  The actual tempo
                  of playback is the product of the specified value and the tempo
                  factor.                
                <param>
                    mpq desired new tempo in microseconds per quarter note.                    
                </param>
                <see>
                    #getTempoFactor                    
                </see>
                <see>
                    #setTempoInBPM(float)                    
                </see>
                <see>
                    #getTempoInMPQ                    
                </see>
            </javadoc>
            <method name="setTempoFactor" type="void" line="204"/>
            <javadoc line="204">
                Scales the sequencer&apos;s actual playback tempo by the factor provided.
                  The default is 1.0.  A value of 1.0 represents the natural rate (the
                  tempo specified in the sequence), 2.0 means twice as fast, etc.
                  The tempo factor does not affect the values returned by
                  &lt;code&gt;{@link #getTempoInMPQ}&lt;/code&gt; and &lt;code&gt;{@link #getTempoInBPM}&lt;/code&gt;.
                  Those values indicate the tempo prior to scaling.
                  &lt;p&gt;
                  Note that the tempo factor cannot be adjusted when external
                  synchronization is used.  In that situation,
                  &lt;code&gt;setTempoFactor&lt;/code&gt; always sets the tempo factor to 1.0.                
                <param>
                    factor the requested tempo scalar                    
                </param>
                <see>
                    #getTempoFactor                    
                </see>
            </javadoc>
            <method name="getTempoFactor" type="float" line="219"/>
            <javadoc line="219">
                Returns the current tempo factor for the sequencer.  The default is
                  1.0.                
                <return>
                    tempo factor.                    
                </return>
                <see>
                    #setTempoFactor(float)                    
                </see>
            </javadoc>
            <method name="getTickLength" type="long" line="226"/>
            <javadoc line="226">
                Obtains the length of the current sequence, expressed in MIDI ticks,
                  or 0 if no sequence is set.                
                <return>
                    length of the sequence in ticks                    
                </return>
            </javadoc>
            <method name="getTickPosition" type="long" line="232"/>
            <javadoc line="232">
                Obtains the current position in the sequence, expressed in MIDI
                  ticks.  (The duration of a tick in seconds is determined both by
                  the tempo and by the timing resolution stored in the
                  &lt;code&gt;{@link Sequence}&lt;/code&gt;.)                
                <return>
                    current tick                    
                </return>
                <see>
                    #setTickPosition                    
                </see>
            </javadoc>
            <method name="setTickPosition" type="void" line="241"/>
            <javadoc line="241">
                Sets the current sequencer position in MIDI ticks                
                <param>
                    tick the desired tick position                    
                </param>
                <see>
                    #getTickPosition                    
                </see>
            </javadoc>
            <method name="getMicrosecondLength" type="long" line="247"/>
            <javadoc line="247">
                Obtains the length of the current sequence, expressed in microseconds,
                  or 0 if no sequence is set.                
                <return>
                    length of the sequence in microseconds.                    
                </return>
            </javadoc>
            <method name="getMicrosecondPosition" type="long" line="253"/>
            <javadoc line="253">
                Obtains the current position in the sequence, expressed in
                  microseconds.                
                <return>
                    the current position in microseconds                    
                </return>
                <see>
                    #setMicrosecondPosition                    
                </see>
            </javadoc>
            <method name="setMicrosecondPosition" type="void" line="260"/>
            <javadoc line="260">
                Sets the current position in the sequence, expressed in microseconds                
                <param>
                    microseconds desired position in microseconds                    
                </param>
                <see>
                    #getMicrosecondPosition                    
                </see>
            </javadoc>
            <method name="setMasterSyncMode" type="void" line="266"/>
            <javadoc line="266">
                Sets the source of timing information used by this sequencer.
                  The sequencer synchronizes to the master, which is the internal clock,
                  MIDI clock, or MIDI time code, depending on the value of
                  &lt;code&gt;sync&lt;/code&gt;.  The &lt;code&gt;sync&lt;/code&gt; argument must be one
                  of the supported modes, as returned by
                  &lt;code&gt;{@link #getMasterSyncModes}&lt;/code&gt;.                
                <param>
                    sync the desired master synchronization mode                    
                </param>
                <see>
                    SyncMode#INTERNAL_CLOCK                    
                </see>
                <see>
                    SyncMode#MIDI_SYNC                    
                </see>
                <see>
                    SyncMode#MIDI_TIME_CODE                    
                </see>
                <see>
                    #getMasterSyncMode                    
                </see>
            </javadoc>
            <method name="getMasterSyncMode" type="SyncMode" line="280"/>
            <javadoc line="280">
                Obtains the current master synchronization mode for this sequencer.                
                <return>
                    the current master synchronization mode                    
                </return>
                <see>
                    #setMasterSyncMode(Sequencer.SyncMode)                    
                </see>
                <see>
                    #getMasterSyncModes                    
                </see>
            </javadoc>
            <method name="getMasterSyncModes" type="SyncMode[]" line="287"/>
            <javadoc line="287">
                Obtains the set of master synchronization modes supported by this
                  sequencer.                
                <return>
                    the available master synchronization modes                    
                </return>
                <see>
                    SyncMode#INTERNAL_CLOCK                    
                </see>
                <see>
                    SyncMode#MIDI_SYNC                    
                </see>
                <see>
                    SyncMode#MIDI_TIME_CODE                    
                </see>
                <see>
                    #getMasterSyncMode                    
                </see>
                <see>
                    #setMasterSyncMode(Sequencer.SyncMode)                    
                </see>
            </javadoc>
            <method name="setSlaveSyncMode" type="void" line="298"/>
            <javadoc line="298">
                Sets the slave synchronization mode for the sequencer.
                  This indicates the type of timing information sent by the sequencer
                  to its receiver.  The &lt;code&gt;sync&lt;/code&gt; argument must be one
                  of the supported modes, as returned by
                  &lt;code&gt;{@link #getSlaveSyncModes}&lt;/code&gt;.                
                <param>
                    sync the desired slave synchronization mode                    
                </param>
                <see>
                    SyncMode#MIDI_SYNC                    
                </see>
                <see>
                    SyncMode#MIDI_TIME_CODE                    
                </see>
                <see>
                    SyncMode#NO_SYNC                    
                </see>
                <see>
                    #getSlaveSyncModes                    
                </see>
            </javadoc>
            <method name="getSlaveSyncMode" type="SyncMode" line="311"/>
            <javadoc line="311">
                Obtains the current slave synchronization mode for this sequencer.                
                <return>
                    the current slave synchronization mode                    
                </return>
                <see>
                    #setSlaveSyncMode(Sequencer.SyncMode)                    
                </see>
                <see>
                    #getSlaveSyncModes                    
                </see>
            </javadoc>
            <method name="getSlaveSyncModes" type="SyncMode[]" line="318"/>
            <javadoc line="318">
                Obtains the set of slave synchronization modes supported by the sequencer.                
                <return>
                    the available slave synchronization modes                    
                </return>
                <see>
                    SyncMode#MIDI_SYNC                    
                </see>
                <see>
                    SyncMode#MIDI_TIME_CODE                    
                </see>
                <see>
                    SyncMode#NO_SYNC                    
                </see>
            </javadoc>
            <method name="setTrackMute" type="void" line="326"/>
            <javadoc line="326">
                Sets the mute state for a track.  This method may fail for a number
                  of reasons.  For example, the track number specified may not be valid
                  for the current sequence, or the sequencer may not support this functionality.
                  An application which needs to verify whether this operation succeeded should
                  follow this call with a call to &lt;code&gt;{@link #getTrackMute}&lt;/code&gt;.                
                <param>
                    track the track number.  Tracks in the current sequence are numbered
                      from 0 to the number of tracks in the sequence minus 1.                    
                </param>
                <param>
                    mute the new mute state for the track.  <code>true</code> implies the
                      track should be muted, <code>false</code> implies the track should be unmuted.                    
                </param>
                <see>
                    #getSequence                    
                </see>
            </javadoc>
            <method name="getTrackMute" type="boolean" line="339"/>
            <javadoc line="339">
                Obtains the current mute state for a track.  The default mute
                  state for all tracks which have not been muted is false.  In any
                  case where the specified track has not been muted, this method should
                  return false.  This applies if the sequencer does not support muting
                  of tracks, and if the specified track index is not valid.                
                <param>
                    track the track number.  Tracks in the current sequence are numbered
                      from 0 to the number of tracks in the sequence minus 1.                    
                </param>
                <return>
                    <code>true</code> if muted, <code>false</code> if not.                    
                </return>
            </javadoc>
            <method name="setTrackSolo" type="void" line="350"/>
            <javadoc line="350">
                Sets the solo state for a track.  If &lt;code&gt;solo&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;
                  only this track and other solo&apos;d tracks will sound. If &lt;code&gt;solo&lt;/code&gt;
                  is &lt;code&gt;false&lt;/code&gt; then only other solo&apos;d tracks will sound, unless no
                  tracks are solo&apos;d in which case all un-muted tracks will sound.
                  &lt;p&gt;
                  This method may fail for a number
                  of reasons.  For example, the track number specified may not be valid
                  for the current sequence, or the sequencer may not support this functionality.
                  An application which needs to verify whether this operation succeeded should
                  follow this call with a call to &lt;code&gt;{@link #getTrackSolo}&lt;/code&gt;.                
                <param>
                    track the track number.  Tracks in the current sequence are numbered
                      from 0 to the number of tracks in the sequence minus 1.                    
                </param>
                <param>
                    solo the new solo state for the track.  <code>true</code> implies the
                      track should be solo'd, <code>false</code> implies the track should not be solo'd.                    
                </param>
                <see>
                    #getSequence                    
                </see>
            </javadoc>
            <method name="getTrackSolo" type="boolean" line="368"/>
            <javadoc line="368">
                Obtains the current solo state for a track.  The default mute
                  state for all tracks which have not been solo&apos;d is false.  In any
                  case where the specified track has not been solo&apos;d, this method should
                  return false.  This applies if the sequencer does not support soloing
                  of tracks, and if the specified track index is not valid.                
                <param>
                    track the track number.  Tracks in the current sequence are numbered
                      from 0 to the number of tracks in the sequence minus 1.                    
                </param>
                <return>
                    <code>true</code> if solo'd, <code>false</code> if not.                    
                </return>
            </javadoc>
            <method name="addMetaEventListener" type="boolean" line="379"/>
            <javadoc line="379">
                Registers a meta-event listener to receive
                  notification whenever a meta-event is encountered in the sequence
                  and processed by the sequencer. This method can fail if, for
                  instance,this class of sequencer does not support meta-event
                  notification.                
                <param>
                    listener listener to add                    
                </param>
                <return>
                    <code>true</code> if the listener was successfully added,
                      otherwise <code>false</code>                    
                </return>
                <see>
                    #removeMetaEventListener                    
                </see>
                <see>
                    MetaEventListener                    
                </see>
                <see>
                    MetaMessage                    
                </see>
            </javadoc>
            <method name="removeMetaEventListener" type="void" line="393"/>
            <javadoc line="393">
                Removes the specified meta-event listener from this sequencer&apos;s
                  list of registered listeners, if in fact the listener is registered.                
                <param>
                    listener the meta-event listener to remove                    
                </param>
                <see>
                    #addMetaEventListener                    
                </see>
            </javadoc>
            <method name="addControllerEventListener" type="int[]" line="400"/>
            <javadoc line="400">
                Registers a controller event listener to receive notification
                  whenever the sequencer processes a control-change event of the
                  requested type or types.  The types are specified by the
                  &lt;code&gt;controllers&lt;/code&gt; argument, which should contain an array of
                  MIDI controller numbers.  (Each number should be between 0 and 127,
                  inclusive.  See the MIDI 1.0 Specification for the numbers that
                  correspond to various types of controllers.)
                  &lt;p&gt;
                  The returned array contains the MIDI controller
                  numbers for which the listener will now receive events.
                  Some sequencers might not support controller event notification, in
                  which case the array has a length of 0.  Other sequencers might
                  support notification for some controllers but not all.
                  This method may be invoked repeatedly.
                  Each time, the returned array indicates all the controllers
                  that the listener will be notified about, not only the controllers
                  requested in that particular invocation.                
                <param>
                    listener the controller event listener to add to the list of
                      registered listeners                    
                </param>
                <param>
                    controllers the MIDI controller numbers for which change
                      notification is requested                    
                </param>
                <return>
                    the numbers of all the MIDI controllers whose changes will
                      now be reported to the specified listener                    
                </return>
                <see>
                    #removeControllerEventListener                    
                </see>
                <see>
                    ControllerEventListener                    
                </see>
            </javadoc>
            <method name="removeControllerEventListener" type="int[]" line="428"/>
            <javadoc line="428">
                Removes a controller event listener&apos;s interest in one or more
                  types of controller event. The &lt;code&gt;controllers&lt;/code&gt; argument
                  is an array of MIDI numbers corresponding to the  controllers for
                  which the listener should no longer receive change notifications.
                  To completely remove this listener from the list of registered
                  listeners, pass in &lt;code&gt;null&lt;/code&gt; for &lt;code&gt;controllers&lt;/code&gt;.
                  The returned array contains the MIDI controller
                  numbers for which the listener will now receive events.  The
                  array has a length of 0 if the listener will not receive
                  change notifications for any controllers.                
                <param>
                    listener old listener                    
                </param>
                <param>
                    controllers the MIDI controller numbers for which change
                      notification should be cancelled, or <code>null</code> to cancel
                      for all controllers                    
                </param>
                <return>
                    the numbers of all the MIDI controllers whose changes will
                      now be reported to the specified listener                    
                </return>
                <see>
                    #addControllerEventListener                    
                </see>
            </javadoc>
            <method name="setLoopStartPoint" type="void" line="448"/>
            <javadoc line="448">
                Sets the first MIDI tick that will be
                  played in the loop. If the loop count is
                  greater than 0, playback will jump to this
                  point when reaching the loop end point.
                  &lt;p&gt;A value of 0 for the starting point means the
                  beginning of the loaded sequence. The starting
                  point must be lower than or equal to the ending
                  point, and it must fall within the size of the
                  loaded sequence.
                  &lt;p&gt;A sequencer&apos;s loop start point defaults to
                  start of the sequence.                
                <param>
                    tick the loop's starting position,
                      in MIDI ticks (zero-based)                    
                </param>
                <throws>
                    IllegalArgumentException if the requested
                      loop start point cannot be set, usually because
                      it falls outside the sequence's
                      duration or because the start point is
                      after the end point                    
                </throws>
                <see>
                    #setLoopEndPoint                    
                </see>
                <see>
                    #setLoopCount                    
                </see>
                <see>
                    #getLoopStartPoint                    
                </see>
                <see>
                    #start                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getLoopStartPoint" type="long" line="474"/>
            <javadoc line="474">
                Obtains the start position of the loop,
                  in MIDI ticks.                
                <return>
                    the start position of the loop,
                      in MIDI ticks (zero-based)                    
                </return>
                <see>
                    #setLoopStartPoint                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="setLoopEndPoint" type="void" line="483"/>
            <javadoc line="483">
                Sets the last MIDI tick that will be played in
                  the loop. If the loop count is 0, the loop end
                  point has no effect and playback continues to
                  play when reaching the loop end point.
                  &lt;p&gt;A value of -1 for the ending point
                  indicates the last tick of the sequence.
                  Otherwise, the ending point must be greater
                  than or equal to the starting point, and it must
                  fall within the size of the loaded sequence.
                  &lt;p&gt;A sequencer&apos;s loop end point defaults to -1,
                  meaning the end of the sequence.                
                <param>
                    tick the loop's ending position,
                      in MIDI ticks (zero-based), or
                      -1 to indicate the final tick                    
                </param>
                <throws>
                    IllegalArgumentException if the requested
                      loop point cannot be set, usually because
                      it falls outside the sequence's
                      duration or because the ending point is
                      before the starting point                    
                </throws>
                <see>
                    #setLoopStartPoint                    
                </see>
                <see>
                    #setLoopCount                    
                </see>
                <see>
                    #getLoopEndPoint                    
                </see>
                <see>
                    #start                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getLoopEndPoint" type="long" line="510"/>
            <javadoc line="510">
                Obtains the end position of the loop,
                  in MIDI ticks.                
                <return>
                    the end position of the loop, in MIDI
                      ticks (zero-based), or -1 to indicate
                      the end of the sequence                    
                </return>
                <see>
                    #setLoopEndPoint                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="setLoopCount" type="void" line="520"/>
            <javadoc line="520">
                Sets the number of repetitions of the loop for
                  playback.
                  When the playback position reaches the loop end point,
                  it will loop back to the loop start point
                  &lt;code&gt;count&lt;/code&gt; times, after which playback will
                  continue to play to the end of the sequence.
                  &lt;p&gt;
                  If the current position when this method is invoked
                  is greater than the loop end point, playback
                  continues to the end of the sequence without looping,
                  unless the loop end point is changed subsequently.
                  &lt;p&gt;
                  A &lt;code&gt;count&lt;/code&gt; value of 0 disables looping:
                  playback will continue at the loop end point, and it
                  will not loop back to the loop start point.
                  This is a sequencer&apos;s default.
                  &lt;p&gt;If playback is stopped during looping, the
                  current loop status is cleared; subsequent start
                  requests are not affected by an interrupted loop
                  operation.                
                <param>
                    count the number of times playback should
                      loop back from the loop's end position
                      to the loop's start position, or
                      <code>{@link #LOOP_CONTINUOUSLY}</code>
                      to indicate that looping should
                      continue until interrupted                    
                </param>
                <throws>
                    IllegalArgumentException if <code>count</code> is
                      negative and not equal to {@link #LOOP_CONTINUOUSLY}                    
                </throws>
                <see>
                    #setLoopStartPoint                    
                </see>
                <see>
                    #setLoopEndPoint                    
                </see>
                <see>
                    #getLoopCount                    
                </see>
                <see>
                    #start                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getLoopCount" type="int" line="556"/>
            <javadoc line="556">
                Obtains the number of repetitions for
                  playback.                
                <return>
                    the number of loops after which
                      playback plays to the end of the
                      sequence                    
                </return>
                <see>
                    #setLoopCount                    
                </see>
                <see>
                    #start                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <class name="SyncMode" line="567">
                <javadoc line="567">
                    A &lt;code&gt;SyncMode&lt;/code&gt; object represents one of the ways in which
                      a MIDI sequencer&apos;s notion of time can be synchronized with a master
                      or slave device.
                      If the sequencer is being synchronized to a master, the
                      sequencer revises its current time in response to messages from
                      the master.  If the sequencer has a slave, the sequencer
                      similarly sends messages to control the slave&apos;s timing.
                      &lt;p&gt;
                      There are three predefined modes that specify possible masters
                      for a sequencer: &lt;code&gt;INTERNAL_CLOCK&lt;/code&gt;,
                      &lt;code&gt;MIDI_SYNC&lt;/code&gt;, and &lt;code&gt;MIDI_TIME_CODE&lt;/code&gt;.  The
                      latter two work if the sequencer receives MIDI messages from
                      another device.  In these two modes, the sequencer&apos;s time gets reset
                      based on system real-time timing clock messages or MIDI time code
                      (MTC) messages, respectively.  These two modes can also be used
                      as slave modes, in which case the sequencer sends the corresponding
                      types of MIDI messages to its receiver (whether or not the sequencer
                      is also receiving them from a master).  A fourth mode,
                      &lt;code&gt;NO_SYNC&lt;/code&gt;, is used to indicate that the sequencer should
                      not control its receiver&apos;s timing.                    
                    <see>
                        Sequencer#setMasterSyncMode(Sequencer.SyncMode)                        
                    </see>
                    <see>
                        Sequencer#setSlaveSyncMode(Sequencer.SyncMode)                        
                    </see>
                </javadoc>
                <declaration name="name" type="String" line="592"/>
                <javadoc line="592">
                    Synchronization mode name.                    
                </javadoc>
                <javadoc line="596">
                    Constructs a synchronization mode.                    
                    <param>
                        name name of the synchronization mode                        
                    </param>
                </javadoc>
                <method name="SyncMode" type="constructor" line="600">
                    <params>
                        <param name="name" type="String"/>
                    </params>
                </method>
                <javadoc line="603">
                    Determines whether two objects are equal.
                      Returns &lt;code&gt;true&lt;/code&gt; if the objects are identical                    
                    <param>
                        obj the reference object with which to compare                        
                    </param>
                    <return>
                        <code>true</code> if this object is the same as the
                          <code>obj</code> argument, <code>false</code> otherwise                        
                    </return>
                </javadoc>
                <method name="equals" type="boolean" line="610">
                    <params>
                        <param name="obj" type="Object"/>
                    </params>
                </method>
                <javadoc line="613">
                    Finalizes the hashcode method.                    
                </javadoc>
                <method name="hashCode" type="int" line="616"/>
                <javadoc line="619">
                    Provides this synchronization mode&apos;s name as the string
                      representation of the mode.                    
                    <return>
                        the name of this synchronization mode                        
                    </return>
                </javadoc>
                <method name="toString" type="String" line="624"/>
                <declaration name="INTERNAL_CLOCK" type="SyncMode" line="627"/>
                <javadoc line="627">
                    A master synchronization mode that makes the sequencer get
                      its timing information from its internal clock.  This is not
                      a legal slave sync mode.                    
                </javadoc>
                <declaration name="MIDI_SYNC" type="SyncMode" line="633"/>
                <javadoc line="633">
                    A master or slave synchronization mode that specifies the
                      use of MIDI clock
                      messages.  If this mode is used as the master sync mode,
                      the sequencer gets its timing information from system real-time
                      MIDI clock messages.  This mode only applies as the master sync
                      mode for sequencers that are also MIDI receivers.  If this is the
                      slave sync mode, the sequencer sends system real-time MIDI clock
                      messages to its receiver.  MIDI clock messages are sent at a rate
                      of 24 per quarter note.                    
                </javadoc>
                <declaration name="MIDI_TIME_CODE" type="SyncMode" line="645"/>
                <javadoc line="645">
                    A master or slave synchronization mode that specifies the
                      use of MIDI Time Code.
                      If this mode is used as the master sync mode,
                      the sequencer gets its timing information from MIDI Time Code
                      messages.  This mode only applies as the master sync
                      mode to sequencers that are also MIDI receivers.  If this
                      mode is used as the
                      slave sync mode, the sequencer sends MIDI Time Code
                      messages to its receiver.  (See the MIDI 1.0 Detailed
                      Specification for a description of MIDI Time Code.)                    
                </javadoc>
                <declaration name="NO_SYNC" type="SyncMode" line="658"/>
                <javadoc line="658">
                    A slave synchronization mode indicating that no timing information
                      should be sent to the receiver.  This is not a legal master sync
                      mode.                    
                </javadoc>
            </class>
        </interface>
    </source>