<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.sound.sampled">
        <class name="EnumControl" line="28">
            <extends class="Control"/>
            <comment line="56">
                TYPE DEFINES                
            </comment>
            <comment line="59">
                INSTANCE VARIABLES                
            </comment>
            <comment line="75">
                CONSTRUCTORS                
            </comment>
            <comment line="95">
                METHODS                
            </comment>
            <comment line="163">
                ABSTRACT METHOD IMPLEMENTATIONS: CONTROL                
            </comment>
            <comment line="175">
                INNER CLASSES                
            </comment>
            <comment line="213">
                class Type                
            </comment>
            <javadoc line="28">
                A &lt;code&gt;EnumControl&lt;/code&gt; provides control over a set of
                  discrete possible values, each represented by an object.  In a
                  graphical user interface, such a control might be represented
                  by a set of buttons, each of which chooses one value or setting.  For
                  example, a reverb control might provide several preset reverberation
                  settings, instead of providing continuously adjustable parameters
                  of the sort that would be represented by &lt;code&gt;{@link FloatControl}&lt;/code&gt;
                  objects.
                  &lt;p&gt;
                  Controls that provide a choice between only two settings can often be implemented
                  instead as a &lt;code&gt;{@link BooleanControl}&lt;/code&gt;, and controls that provide
                  a set of values along some quantifiable dimension might be implemented
                  instead as a &lt;code&gt;FloatControl&lt;/code&gt; with a coarse resolution.
                  However, a key feature of &lt;code&gt;EnumControl&lt;/code&gt; is that the returned values
                  are arbitrary objects, rather than numerical or boolean values.  This means that each
                  returned object can provide further information.  As an example, the settings
                  of a &lt;code&gt;{@link EnumControl.Type#REVERB REVERB}&lt;/code&gt; control are instances of
                  &lt;code&gt;{@link ReverbType}&lt;/code&gt; that can be queried for the parameter values
                  used for each setting.                
                <author>
                    Kara Kytle                    
                </author>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <declaration name="values" type="Object[]" line="61"/>
            <javadoc line="61">
                The set of possible values.                
            </javadoc>
            <declaration name="value" type="Object" line="67"/>
            <javadoc line="67">
                The current value.                
            </javadoc>
            <javadoc line="77">
                Constructs a new enumerated control object with the given parameters.                
                <param>
                    type the type of control represented this enumerated control object                    
                </param>
                <param>
                    values the set of possible values for the control                    
                </param>
                <param>
                    value the initial control value                    
                </param>
            </javadoc>
            <method name="EnumControl" type="constructor" line="84">
                <params>
                    <param name="type" type="Type"/>
                    <param name="values" type="Object[]"/>
                    <param name="value" type="Object"/>
                </params>
            </method>
            <javadoc line="97">
                Sets the current value for the control.  The default implementation
                  simply sets the value as indicated.  If the value indicated is not
                  supported, an IllegalArgumentException is thrown.
                  Some controls require that their line be open before they can be affected
                  by setting a value.                
                <param>
                    value the desired new value                    
                </param>
                <throws>
                    IllegalArgumentException if the value indicated does not fall
                      within the allowable range                    
                </throws>
            </javadoc>
            <method name="setValue" type="void" line="107">
                <params>
                    <param name="value" type="Object"/>
                </params>
                <scope line="108"/>
            </method>
            <javadoc line="116">
                Obtains this control&apos;s current value.                
                <return>
                    the current value                    
                </return>
            </javadoc>
            <method name="getValue" type="Object" line="120"/>
            <javadoc line="125">
                Returns the set of possible values for this control.                
                <return>
                    the set of possible values                    
                </return>
            </javadoc>
            <method name="getValues" type="Object[]" line="129">
                <declaration name="localArray" type="Object[]" line="131"/>
                <scope line="133"/>
            </method>
            <javadoc line="141">
                Indicates whether the value specified is supported.                
                <param>
                    value the value for which support is queried                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the value is supported,
                      otherwise &lt;code&gt;false&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="isValueSupported" type="boolean" line="147">
                <params>
                    <param name="value" type="Object"/>
                </params>
                <comment line="151">
                    $$fb 2001-07-20: Fix for bug 4400392: setValue() in ReverbControl always throws Exception
                    if (values.equals(values[i])) {                    
                </comment>
                <scope line="149">
                    <scope line="152"/>
                </scope>
            </method>
            <javadoc line="165">
                Provides a string representation of the control.                
                <return>
                    a string description                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="169"/>
            <class name="Type" line="177">
                <extends class="Control.Type"/>
                <comment line="191">
                    TYPE DEFINES                    
                </comment>
                <comment line="203">
                    CONSTRUCTOR                    
                </comment>
                <javadoc line="177">
                    An instance of the &lt;code&gt;EnumControl.Type&lt;/code&gt; inner class identifies one kind of
                      enumerated control.  Static instances are provided for the
                      common types.                    
                    <see>
                        EnumControl                        
                    </see>
                    <author>
                        Kara Kytle                        
                    </author>
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <declaration name="REVERB" type="Type" line="192"/>
                <javadoc line="192">
                    Represents a control over a set of possible reverberation settings.
                      Each reverberation setting is described by an instance of the{@link ReverbType} class.  (To access these settings,
                      invoke &lt;code&gt;{@link EnumControl#getValues}&lt;/code&gt; on an
                      enumerated control of type &lt;code&gt;REVERB&lt;/code&gt;.)                    
                </javadoc>
                <javadoc line="205">
                    Constructs a new enumerated control type.                    
                    <param>
                        name  the name of the new enumerated control type                        
                    </param>
                </javadoc>
                <method name="Type" type="constructor" line="209">
                    <params>
                        <param name="name" type="String"/>
                    </params>
                </method>
            </class>
        </class>
    </source>