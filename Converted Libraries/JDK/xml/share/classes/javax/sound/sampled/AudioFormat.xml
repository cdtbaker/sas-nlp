<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.sound.sampled">
        <import package="java.util.Collections"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Map"/>
        <class name="AudioFormat" line="5">
            <javadoc line="5">
                &lt;code&gt;AudioFormat&lt;/code&gt; is the class that specifies a particular arrangement of data in a sound stream.
                  By examing the information stored in the audio format, you can discover how to interpret the bits in the
                  binary sound data.
                  &lt;p&gt;
                  Every data line has an audio format associated with its data stream. The audio format of a source (playback) data line indicates
                  what kind of data the data line expects to receive for output.  For a target (capture) data line, the audio format specifies the kind
                  of the data that can be read from the line.
                  Sound files also have audio formats, of course.  The &lt;code&gt;{@link AudioFileFormat}&lt;/code&gt;
                  class encapsulates an &lt;code&gt;AudioFormat&lt;/code&gt; in addition to other,
                  file-specific information.  Similarly, an &lt;code&gt;{@link AudioInputStream}&lt;/code&gt; has an
                  &lt;code&gt;AudioFormat&lt;/code&gt;.
                  &lt;p&gt;
                  The &lt;code&gt;AudioFormat&lt;/code&gt; class accommodates a number of common sound-file encoding techniques, including
                  pulse-code modulation (PCM), mu-law encoding, and a-law encoding.  These encoding techniques are predefined,
                  but service providers can create new encoding types.
                  The encoding that a specific format uses is named by its &lt;code&gt;encoding&lt;/code&gt; field.
                  &lt;p&gt;
                  In addition to the encoding, the audio format includes other properties that further specify the exact
                  arrangement of the data.
                  These include the number of channels, sample rate, sample size, byte order, frame rate, and frame size.
                  Sounds may have different numbers of audio channels: one for mono, two for stereo.
                  The sample rate measures how many &quot;snapshots&quot; (samples) of the sound pressure are taken per second, per channel.
                  (If the sound is stereo rather than mono, two samples are actually measured at each instant of time: one for the left channel,
                  and another for the right channel; however, the sample rate still measures the number per channel, so the rate is the same
                  regardless of the number of channels.   This is the standard use of the term.)
                  The sample size indicates how many bits are used to store each snapshot; 8 and 16 are typical values.
                  For 16-bit samples (or any other sample size larger than a byte),
                  byte order is important; the bytes in each sample are arranged in
                  either the &quot;little-endian&quot; or &quot;big-endian&quot; style.
                  For encodings like PCM, a frame consists of the set of samples for all channels at a given
                  point in time, and so the size of a frame (in bytes) is always equal to the size of a sample (in bytes) times
                  the number of channels.  However, with some other sorts of encodings a frame can contain
                  a bundle of compressed data for a whole series of samples, as well as additional, non-sample
                  data.  For such encodings, the sample rate and sample size refer to the data after it is decoded into PCM,
                  and so they are completely different from the frame rate and frame size.
                  &lt;p&gt;An &lt;code&gt;AudioFormat&lt;/code&gt; object can include a set of
                  properties. A property is a pair of key and value: the key
                  is of type &lt;code&gt;String&lt;/code&gt;, the associated property
                  value is an arbitrary object. Properties specify
                  additional format specifications, like the bit rate for
                  compressed formats. Properties are mainly used as a means
                  to transport additional information of the audio format
                  to and from the service providers. Therefore, properties
                  are ignored in the {@link #matches(AudioFormat)} method.
                  However, methods which rely on the installed service
                  providers, like {@link AudioSystem#isConversionSupported(AudioFormat,AudioFormat) isConversionSupported} may consider
                  properties, depending on the respective service provider
                  implementation.
                  &lt;p&gt;The following table lists some common properties which
                  service providers should use, if applicable:
                  &lt;table border=0&gt;
                  &lt;tr&gt;
                  &lt;th&gt;Property key&lt;/th&gt;
                  &lt;th&gt;Value type&lt;/th&gt;
                  &lt;th&gt;Description&lt;/th&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;&amp;quot;bitrate&amp;quot;&lt;/td&gt;
                  &lt;td&gt;{@link java.lang.Integer Integer}&lt;/td&gt;
                  &lt;td&gt;average bit rate in bits per second&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;&amp;quot;vbr&amp;quot;&lt;/td&gt;
                  &lt;td&gt;{@link java.lang.Boolean Boolean}&lt;/td&gt;
                  &lt;td&gt;&lt;code&gt;true&lt;/code&gt;, if the file is encoded in variable bit
                  rate (VBR)&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;&amp;quot;quality&amp;quot;&lt;/td&gt;
                  &lt;td&gt;{@link java.lang.Integer Integer}&lt;/td&gt;
                  &lt;td&gt;encoding/conversion quality, 1..100&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;
                  &lt;p&gt;Vendors of service providers (plugins) are encouraged
                  to seek information about other already established
                  properties in third party plugins, and follow the same
                  conventions.                
                <author>
                    Kara Kytle                    
                </author>
                <author>
                    Florian Bomers                    
                </author>
                <see>
                    DataLine#getFormat                    
                </see>
                <see>
                    AudioInputStream#getFormat                    
                </see>
                <see>
                    AudioFileFormat                    
                </see>
                <see>
                    javax.sound.sampled.spi.FormatConversionProvider                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <declaration name="encoding" type="Encoding" line="92"/>
            <javadoc line="92">
                The audio encoding technique used by this format.                
            </javadoc>
            <declaration name="sampleRate" type="float" line="96"/>
            <javadoc line="96">
                The number of samples played or recorded per second, for sounds that have this format.                
            </javadoc>
            <declaration name="sampleSizeInBits" type="int" line="100"/>
            <javadoc line="100">
                The number of bits in each sample of a sound that has this format.                
            </javadoc>
            <declaration name="channels" type="int" line="104"/>
            <javadoc line="104">
                The number of audio channels in this format (1 for mono, 2 for stereo).                
            </javadoc>
            <declaration name="frameSize" type="int" line="108"/>
            <javadoc line="108">
                The number of bytes in each frame of a sound that has this format.                
            </javadoc>
            <declaration name="frameRate" type="float" line="112"/>
            <javadoc line="112">
                The number of frames played or recorded per second, for sounds that have this format.                
            </javadoc>
            <declaration name="bigEndian" type="boolean" line="116"/>
            <javadoc line="116">
                Indicates whether the audio data is stored in big-endian or little-endian order.                
            </javadoc>
            <declaration name="properties" type="HashMap&lt;String,Object&gt;" line="120"/>
            <javadoc line="120">
                The set of properties                
            </javadoc>
            <javadoc line="124">
                Constructs an &lt;code&gt;AudioFormat&lt;/code&gt; with the given parameters.
                  The encoding specifies the convention used to represent the data.
                  The other parameters are further explained in the {@link AudioFormatclass description}.                
                <param>
                    encoding                  the audio encoding technique                    
                </param>
                <param>
                    sampleRate                the number of samples per second                    
                </param>
                <param>
                    sampleSizeInBits  the number of bits in each sample                    
                </param>
                <param>
                    channels                  the number of channels (1 for mono, 2 for stereo, and so on)                    
                </param>
                <param>
                    frameSize                 the number of bytes in each frame                    
                </param>
                <param>
                    frameRate                 the number of frames per second                    
                </param>
                <param>
                    bigEndian                 indicates whether the data for a single sample
                      is stored in big-endian byte order (<code>false</code>
                      means little-endian)                    
                </param>
            </javadoc>
            <method name="AudioFormat" type="constructor" line="138">
                <params>
                    <param name="encoding" type="Encoding"/>
                    <param name="sampleRate" type="float"/>
                    <param name="sampleSizeInBits" type="int"/>
                    <param name="channels" type="int"/>
                    <param name="frameSize" type="int"/>
                    <param name="frameRate" type="float"/>
                    <param name="bigEndian" type="boolean"/>
                </params>
            </method>
            <javadoc line="148">
                Constructs an &lt;code&gt;AudioFormat&lt;/code&gt; with the given parameters.
                  The encoding specifies the convention used to represent the data.
                  The other parameters are further explained in the {@link AudioFormatclass description}.                
                <param>
                    encoding         the audio encoding technique                    
                </param>
                <param>
                    sampleRate       the number of samples per second                    
                </param>
                <param>
                    sampleSizeInBits the number of bits in each sample                    
                </param>
                <param>
                    channels         the number of channels (1 for mono, 2 for
                      stereo, and so on)                    
                </param>
                <param>
                    frameSize        the number of bytes in each frame                    
                </param>
                <param>
                    frameRate        the number of frames per second                    
                </param>
                <param>
                    bigEndian        indicates whether the data for a single sample
                      is stored in big-endian byte order
                      (<code>false</code> means little-endian)                    
                </param>
                <param>
                    properties       a <code>Map&lt;String,Object&gt;</code> object
                      containing format properties                    
                </param>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="AudioFormat" type="constructor" line="166">
                <params>
                    <param name="encoding" type="Encoding"/>
                    <param name="sampleRate" type="float"/>
                    <param name="sampleSizeInBits" type="int"/>
                    <param name="channels" type="int"/>
                    <param name="frameSize" type="int"/>
                    <param name="frameRate" type="float"/>
                    <param name="bigEndian" type="boolean"/>
                    <param name="properties" type="Map<String,Object>"/>
                </params>
            </method>
            <javadoc line="170">
                Constructs an &lt;code&gt;AudioFormat&lt;/code&gt; with a linear PCM encoding and
                  the given parameters.  The frame size is set to the number of bytes
                  required to contain one sample from each channel, and the frame rate
                  is set to the sample rate.                
                <param>
                    sampleRate                the number of samples per second                    
                </param>
                <param>
                    sampleSizeInBits  the number of bits in each sample                    
                </param>
                <param>
                    channels                  the number of channels (1 for mono, 2 for stereo, and so on)                    
                </param>
                <param>
                    signed                    indicates whether the data is signed or unsigned                    
                </param>
                <param>
                    bigEndian                 indicates whether the data for a single sample
                      is stored in big-endian byte order (<code>false</code>
                      means little-endian)                    
                </param>
            </javadoc>
            <method name="AudioFormat" type="constructor" line="183">
                <params>
                    <param name="sampleRate" type="float"/>
                    <param name="sampleSizeInBits" type="int"/>
                    <param name="channels" type="int"/>
                    <param name="signed" type="boolean"/>
                    <param name="bigEndian" type="boolean"/>
                </params>
            </method>
            <javadoc line="186">
                Obtains the type of encoding for sounds in this format.                
                <return>
                    the encoding type                    
                </return>
                <see>
                    Encoding#PCM_SIGNED                    
                </see>
                <see>
                    Encoding#PCM_UNSIGNED                    
                </see>
                <see>
                    Encoding#ULAW                    
                </see>
                <see>
                    Encoding#ALAW                    
                </see>
            </javadoc>
            <method name="getEncoding" type="Encoding" line="194"/>
            <javadoc line="197">
                Obtains the sample rate.
                  For compressed formats, the return value is the sample rate of the uncompressed
                  audio data.
                  When this AudioFormat is used for queries (e.g. {@link AudioSystem#isConversionSupported(AudioFormat,AudioFormat)AudioSystem.isConversionSupported}) or capabilities (e.g. {@link DataLine.Info#getFormats() DataLine.Info.getFormats}), a sample rate of
                  &lt;code&gt;AudioSystem.NOT_SPECIFIED&lt;/code&gt; means that any sample rate is
                  acceptable. &lt;code&gt;AudioSystem.NOT_SPECIFIED&lt;/code&gt; is also returned when
                  the sample rate is not defined for this audio format.                
                <return>
                    the number of samples per second,
                      or <code>AudioSystem.NOT_SPECIFIED</code>                    
                </return>
                <see>
                    #getFrameRate()                    
                </see>
                <see>
                    AudioSystem#NOT_SPECIFIED                    
                </see>
            </javadoc>
            <method name="getSampleRate" type="float" line="210"/>
            <javadoc line="213">
                Obtains the size of a sample.
                  For compressed formats, the return value is the sample size of the
                  uncompressed audio data.
                  When this AudioFormat is used for queries (e.g. {@link AudioSystem#isConversionSupported(AudioFormat,AudioFormat)AudioSystem.isConversionSupported}) or capabilities (e.g. {@link DataLine.Info#getFormats() DataLine.Info.getFormats}), a sample size of
                  &lt;code&gt;AudioSystem.NOT_SPECIFIED&lt;/code&gt; means that any sample size is
                  acceptable. &lt;code&gt;AudioSystem.NOT_SPECIFIED&lt;/code&gt; is also returned when
                  the sample size is not defined for this audio format.                
                <return>
                    the number of bits in each sample,
                      or <code>AudioSystem.NOT_SPECIFIED</code>                    
                </return>
                <see>
                    #getFrameSize()                    
                </see>
                <see>
                    AudioSystem#NOT_SPECIFIED                    
                </see>
            </javadoc>
            <method name="getSampleSizeInBits" type="int" line="226"/>
            <javadoc line="229">
                Obtains the number of channels.
                  When this AudioFormat is used for queries (e.g. {@link AudioSystem#isConversionSupported(AudioFormat,AudioFormat)AudioSystem.isConversionSupported}) or capabilities (e.g. {@link DataLine.Info#getFormats() DataLine.Info.getFormats}), a return value of
                  &lt;code&gt;AudioSystem.NOT_SPECIFIED&lt;/code&gt; means that any (positive) number of channels is
                  acceptable.                
                <return>
                    The number of channels (1 for mono, 2 for stereo, etc.),
                      or <code>AudioSystem.NOT_SPECIFIED</code>                    
                </return>
                <see>
                    AudioSystem#NOT_SPECIFIED                    
                </see>
            </javadoc>
            <method name="getChannels" type="int" line="238"/>
            <javadoc line="241">
                Obtains the frame size in bytes.
                  When this AudioFormat is used for queries (e.g. {@link AudioSystem#isConversionSupported(AudioFormat,AudioFormat)AudioSystem.isConversionSupported}) or capabilities (e.g. {@link DataLine.Info#getFormats() DataLine.Info.getFormats}), a frame size of
                  &lt;code&gt;AudioSystem.NOT_SPECIFIED&lt;/code&gt; means that any frame size is
                  acceptable. &lt;code&gt;AudioSystem.NOT_SPECIFIED&lt;/code&gt; is also returned when
                  the frame size is not defined for this audio format.                
                <return>
                    the number of bytes per frame,
                      or <code>AudioSystem.NOT_SPECIFIED</code>                    
                </return>
                <see>
                    #getSampleSizeInBits()                    
                </see>
                <see>
                    AudioSystem#NOT_SPECIFIED                    
                </see>
            </javadoc>
            <method name="getFrameSize" type="int" line="252"/>
            <javadoc line="255">
                Obtains the frame rate in frames per second.
                  When this AudioFormat is used for queries (e.g. {@link AudioSystem#isConversionSupported(AudioFormat,AudioFormat)AudioSystem.isConversionSupported}) or capabilities (e.g. {@link DataLine.Info#getFormats() DataLine.Info.getFormats}), a frame rate of
                  &lt;code&gt;AudioSystem.NOT_SPECIFIED&lt;/code&gt; means that any frame rate is
                  acceptable. &lt;code&gt;AudioSystem.NOT_SPECIFIED&lt;/code&gt; is also returned when
                  the frame rate is not defined for this audio format.                
                <return>
                    the number of frames per second,
                      or <code>AudioSystem.NOT_SPECIFIED</code>                    
                </return>
                <see>
                    #getSampleRate()                    
                </see>
                <see>
                    AudioSystem#NOT_SPECIFIED                    
                </see>
            </javadoc>
            <method name="getFrameRate" type="float" line="266"/>
            <javadoc line="269">
                Indicates whether the audio data is stored in big-endian or little-endian
                  byte order.  If the sample size is not more than one byte, the return value is
                  irrelevant.                
                <return>
                    <code>true</code> if the data is stored in big-endian byte order,
                      <code>false</code> if little-endian                    
                </return>
            </javadoc>
            <method name="isBigEndian" type="boolean" line="276"/>
            <javadoc line="279">
                Obtain an unmodifiable map of properties.
                  The concept of properties is further explained in
                  the {@link AudioFileFormat class description}.                
                <return>
                    a <code>Map&lt;String,Object&gt;</code> object containing
                      all properties. If no properties are recognized, an empty map is
                      returned.                    
                </return>
                <see>
                    #getProperty(String)                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="properties" type="Map<String,Object>" line="289">
                <declaration name="ret" type="Map&lt;String,Object&gt;" line="290"/>
                <scope line="291"/>
                <scope line="294"/>
            </method>
            <javadoc line="299">
                Obtain the property value specified by the key.
                  The concept of properties is further explained in
                  the {@link AudioFileFormat class description}.
                  &lt;p&gt;If the specified property is not defined for a
                  particular file format, this method returns
                  &lt;code&gt;null&lt;/code&gt;.                
                <param>
                    key the key of the desired property                    
                </param>
                <return>
                    the value of the property with the specified key,
                      or <code>null</code> if the property does not exist.                    
                </return>
                <see>
                    #properties()                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getProperty" type="Object" line="312">
                <params>
                    <param name="key" type="String"/>
                </params>
                <scope line="313"/>
            </method>
            <javadoc line="318">
                Indicates whether this format matches the one specified.
                  To match, two formats must have the same encoding,
                  and consistent values of the number of channels, sample rate, sample size,
                  frame rate, and frame size.
                  The values of the property are consistent if they are equal
                  or the specified format has the property value{@code AudioSystem.NOT_SPECIFIED}.
                  The byte order (big-endian or little-endian) must be the same
                  if the sample size is greater than one byte.                
                <param>
                    format format to test for match                    
                </param>
                <return>
                    {@code true} if this format matches the one specified,{@code false} otherwise.                    
                </return>
            </javadoc>
            <method name="matches" type="boolean" line="330">
                <params>
                    <param name="format" type="AudioFormat"/>
                </params>
                <scope line="331"/>
            </method>
            <javadoc line="336">
                Returns a string that describes the format, such as:
                  &quot;PCM SIGNED 22050 Hz 16 bit mono big-endian&quot;.  The contents of the string
                  may vary between implementations of Java Sound.                
                <return>
                    a string that describes the format parameters                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="342">
                <declaration name="sEncoding" type="String" line="343"/>
                <scope line="344"/>
                <declaration name="sSampleRate" type="String" line="347"/>
                <scope line="348"/>
                <scope line="351"/>
                <declaration name="sSampleSizeInBits" type="String" line="354"/>
                <scope line="355"/>
                <scope line="358"/>
                <declaration name="sChannels" type="String" line="361"/>
                <scope line="362"/>
                <scope line="365"/>
                <scope line="368">
                    <scope line="369"/>
                    <scope line="372"/>
                </scope>
                <declaration name="sFrameSize" type="String" line="376"/>
                <scope line="377"/>
                <scope line="380"/>
                <declaration name="sFrameRate" type="String" line="383"/>
                <scope line="384">
                    <scope line="385"/>
                    <scope line="388"/>
                </scope>
                <declaration name="sEndian" type="String" line="392"/>
                <scope line="393">
                    <scope line="394"/>
                    <scope line="397"/>
                </scope>
            </method>
            <class name="Encoding" line="403">
                <javadoc line="403">
                    The &lt;code&gt;Encoding&lt;/code&gt; class  names the  specific type of data representation
                      used for an audio stream.   The encoding includes aspects of the
                      sound format other than the number of channels, sample rate, sample size,
                      frame rate, frame size, and byte order.
                      &lt;p&gt;
                      One ubiquitous type of audio encoding is pulse-code modulation (PCM),
                      which is simply a linear (proportional) representation of the sound
                      waveform.  With PCM, the number stored in each sample is proportional
                      to the instantaneous amplitude of the sound pressure at that point in
                      time.  The numbers may be signed or unsigned integers or floats.
                      Besides PCM, other encodings include mu-law and a-law, which are nonlinear
                      mappings of the sound amplitude that are often used for recording speech.
                      &lt;p&gt;
                      You can use a predefined encoding by referring to one of the static
                      objects created by this class, such as PCM_SIGNED or
                      PCM_UNSIGNED.  Service providers can create new encodings, such as
                      compressed audio formats, and make
                      these available through the &lt;code&gt;{@link AudioSystem}&lt;/code&gt; class.
                      &lt;p&gt;
                      The &lt;code&gt;Encoding&lt;/code&gt; class is static, so that all
                      &lt;code&gt;AudioFormat&lt;/code&gt; objects that have the same encoding will refer
                      to the same object (rather than different instances of the same class).
                      This allows matches to be made by checking that two format&apos;s encodings
                      are equal.                    
                    <see>
                        AudioFormat                        
                    </see>
                    <see>
                        javax.sound.sampled.spi.FormatConversionProvider                        
                    </see>
                    <author>
                        Kara Kytle                        
                    </author>
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <declaration name="PCM_SIGNED" type="Encoding" line="434"/>
                <javadoc line="434">
                    Specifies signed, linear PCM data.                    
                </javadoc>
                <declaration name="PCM_UNSIGNED" type="Encoding" line="438"/>
                <javadoc line="438">
                    Specifies unsigned, linear PCM data.                    
                </javadoc>
                <declaration name="PCM_FLOAT" type="Encoding" line="442"/>
                <javadoc line="442">
                    Specifies floating-point PCM data.                    
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <declaration name="ULAW" type="Encoding" line="447"/>
                <javadoc line="447">
                    Specifies u-law encoded data.                    
                </javadoc>
                <declaration name="ALAW" type="Encoding" line="451"/>
                <javadoc line="451">
                    Specifies a-law encoded data.                    
                </javadoc>
                <declaration name="name" type="String" line="455"/>
                <javadoc line="455">
                    Encoding name.                    
                </javadoc>
                <javadoc line="459">
                    Constructs a new encoding.                    
                    <param>
                        name  the name of the new type of encoding                        
                    </param>
                </javadoc>
                <method name="Encoding" type="constructor" line="463">
                    <params>
                        <param name="name" type="String"/>
                    </params>
                </method>
                <javadoc line="466">
                    Finalizes the equals method                    
                </javadoc>
                <method name="equals" type="boolean" line="469">
                    <params>
                        <param name="obj" type="Object"/>
                    </params>
                    <scope line="470"/>
                    <scope line="473"/>
                </method>
                <javadoc line="478">
                    Finalizes the hashCode method                    
                </javadoc>
                <method name="hashCode" type="int" line="481">
                    <scope line="482"/>
                </method>
                <javadoc line="487">
                    Provides the &lt;code&gt;String&lt;/code&gt; representation of the encoding.  This &lt;code&gt;String&lt;/code&gt; is
                      the same name that was passed to the constructor.  For the predefined encodings, the name
                      is similar to the encoding&apos;s variable (field) name.  For example, &lt;code&gt;PCM_SIGNED.toString()&lt;/code&gt; returns
                      the name &quot;pcm_signed&quot;.                    
                    <return>
                        the encoding name                        
                    </return>
                </javadoc>
                <method name="toString" type="String" line="494"/>
            </class>
        </class>
    </source>