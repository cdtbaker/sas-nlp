<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.sound.sampled">
        <interface name="Line">
            <implements interface="AutoCloseable"/>
            <javadoc line="2">
                The &lt;code&gt;Line&lt;/code&gt; interface represents a mono or multi-channel
                  audio feed. A line is an element of the digital audio
                  &quot;pipeline,&quot; such as a mixer, an input or output port,
                  or a data path into or out of a mixer.
                  &lt;p&gt;
                  A line can have controls, such as gain, pan, and reverb.
                  The controls themselves are instances of classes that extend the
                  base &lt;code&gt;{@link Control}&lt;/code&gt; class.
                  The &lt;code&gt;Line&lt;/code&gt; interface provides two accessor methods for
                  obtaining the line&apos;s controls: &lt;code&gt;{@link #getControls getControls}&lt;/code&gt; returns the
                  entire set, and &lt;code&gt;{@link #getControl getControl}&lt;/code&gt; returns a single control of
                  specified type.
                  &lt;p&gt;
                  Lines exist in various states at different times.  When a line opens, it reserves system
                  resources for itself, and when it closes, these resources are freed for
                  other objects or applications. The &lt;code&gt;{@link #isOpen()}&lt;/code&gt; method lets
                  you discover whether a line is open or closed.
                  An open line need not be processing data, however.  Such processing is
                  typically initiated by subinterface methods such as
                  &lt;code&gt;{@link SourceDataLine#write SourceDataLine.write}&lt;/code&gt; and
                  &lt;code&gt;{@link TargetDataLine#read TargetDataLine.read}&lt;/code&gt;.
                  &lt;p&gt;
                  You can register an object to receive notifications whenever the line&apos;s
                  state changes.  The object must implement the &lt;code&gt;{@link LineListener}&lt;/code&gt;
                  interface, which consists of the single method
                  &lt;code&gt;{@link LineListener#update update}&lt;/code&gt;.
                  This method will be invoked when a line opens and closes (and, if it&apos;s a{@link DataLine}, when it starts and stops).
                  &lt;p&gt;
                  An object can be registered to listen to multiple lines.  The event it
                  receives in its &lt;code&gt;update&lt;/code&gt; method will specify which line created
                  the event, what type of event it was
                  (&lt;code&gt;OPEN&lt;/code&gt;, &lt;code&gt;CLOSE&lt;/code&gt;, &lt;code&gt;START&lt;/code&gt;, or &lt;code&gt;STOP&lt;/code&gt;),
                  and how many sample frames the line had processed at the time the event occurred.
                  &lt;p&gt;
                  Certain line operations, such as open and close, can generate security
                  exceptions if invoked by unprivileged code when the line is a shared audio
                  resource.                
                <author>
                    Kara Kytle                    
                </author>
                <see>
                    LineEvent                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getLineInfo" type="Line.Info" line="45"/>
            <javadoc line="45">
                Obtains the &lt;code&gt;Line.Info&lt;/code&gt; object describing this
                  line.                
                <return>
                    description of the line                    
                </return>
            </javadoc>
            <method name="open" type="void" line="51"/>
            <javadoc line="51">
                Opens the line, indicating that it should acquire any required
                  system resources and become operational.
                  If this operation
                  succeeds, the line is marked as open, and an &lt;code&gt;OPEN&lt;/code&gt; event is dispatched
                  to the line&apos;s listeners.
                  &lt;p&gt;
                  Note that some lines, once closed, cannot be reopened.  Attempts
                  to reopen such a line will always result in an &lt;code&gt;LineUnavailableException&lt;/code&gt;.
                  &lt;p&gt;
                  Some types of lines have configurable properties that may affect
                  resource allocation.   For example, a &lt;code&gt;DataLine&lt;/code&gt; must
                  be opened with a particular format and buffer size.  Such lines
                  should provide a mechanism for configuring these properties, such
                  as an additional &lt;code&gt;open&lt;/code&gt; method or methods which allow
                  an application to specify the desired settings.
                  &lt;p&gt;
                  This method takes no arguments, and opens the line with the current
                  settings.  For &lt;code&gt;{@link SourceDataLine}&lt;/code&gt; and
                  &lt;code&gt;{@link TargetDataLine}&lt;/code&gt; objects, this means that the line is
                  opened with default settings.  For a &lt;code&gt;{@link Clip}&lt;/code&gt;, however,
                  the buffer size is determined when data is loaded.  Since this method does not
                  allow the application to specify any data to load, an IllegalArgumentException
                  is thrown. Therefore, you should instead use one of the &lt;code&gt;open&lt;/code&gt; methods
                  provided in the &lt;code&gt;Clip&lt;/code&gt; interface to load data into the &lt;code&gt;Clip&lt;/code&gt;.
                  &lt;p&gt;
                  For &lt;code&gt;DataLine&lt;/code&gt;&apos;s, if the &lt;code&gt;DataLine.Info&lt;/code&gt;
                  object which was used to retrieve the line, specifies at least
                  one fully qualified audio format, the last one will be used
                  as the default format.                
                <throws>
                    IllegalArgumentException if this method is called on a Clip instance.                    
                </throws>
                <throws>
                    LineUnavailableException if the line cannot be
                      opened due to resource restrictions.                    
                </throws>
                <throws>
                    SecurityException if the line cannot be
                      opened due to security restrictions.                    
                </throws>
                <see>
                    #close                    
                </see>
                <see>
                    #isOpen                    
                </see>
                <see>
                    LineEvent                    
                </see>
                <see>
                    DataLine                    
                </see>
                <see>
                    Clip#open(AudioFormat,byte[],int,int)                    
                </see>
                <see>
                    Clip#open(AudioInputStream)                    
                </see>
            </javadoc>
            <method name="close" type="void" line="94"/>
            <javadoc line="94">
                Closes the line, indicating that any system resources
                  in use by the line can be released.  If this operation
                  succeeds, the line is marked closed and a &lt;code&gt;CLOSE&lt;/code&gt; event is dispatched
                  to the line&apos;s listeners.                
                <throws>
                    SecurityException if the line cannot be
                      closed due to security restrictions.                    
                </throws>
                <see>
                    #open                    
                </see>
                <see>
                    #isOpen                    
                </see>
                <see>
                    LineEvent                    
                </see>
            </javadoc>
            <method name="isOpen" type="boolean" line="106"/>
            <javadoc line="106">
                Indicates whether the line is open, meaning that it has reserved
                  system resources and is operational, although it might not currently be
                  playing or capturing sound.                
                <return>
                    <code>true</code> if the line is open, otherwise <code>false</code>                    
                </return>
                <see>
                    #open()                    
                </see>
                <see>
                    #close()                    
                </see>
            </javadoc>
            <method name="getControls" type="Control[]" line="115"/>
            <javadoc line="115">
                Obtains the set of controls associated with this line.
                  Some controls may only be available when the line is open.
                  If there are no controls, this method returns an array of length 0.                
                <return>
                    the array of controls                    
                </return>
                <see>
                    #getControl                    
                </see>
            </javadoc>
            <method name="isControlSupported" type="boolean" line="123"/>
            <javadoc line="123">
                Indicates whether the line supports a control of the specified type.
                  Some controls may only be available when the line is open.                
                <param>
                    control the type of the control for which support is queried                    
                </param>
                <return>
                    <code>true</code> if at least one control of the specified type is
                      supported, otherwise <code>false</code>.                    
                </return>
            </javadoc>
            <method name="getControl" type="Control" line="131"/>
            <javadoc line="131">
                Obtains a control of the specified type,
                  if there is any.
                  Some controls may only be available when the line is open.                
                <param>
                    control the type of the requested control                    
                </param>
                <return>
                    a control of the specified type                    
                </return>
                <throws>
                    IllegalArgumentException if a control of the specified type
                      is not supported                    
                </throws>
                <see>
                    #getControls                    
                </see>
                <see>
                    #isControlSupported(Control.Type control)                    
                </see>
            </javadoc>
            <method name="addLineListener" type="void" line="143"/>
            <javadoc line="143">
                Adds a listener to this line.  Whenever the line&apos;s status changes, the
                  listener&apos;s &lt;code&gt;update()&lt;/code&gt; method is called with a &lt;code&gt;LineEvent&lt;/code&gt; object
                  that describes the change.                
                <param>
                    listener the object to add as a listener to this line                    
                </param>
                <see>
                    #removeLineListener                    
                </see>
                <see>
                    LineListener#update                    
                </see>
                <see>
                    LineEvent                    
                </see>
            </javadoc>
            <method name="removeLineListener" type="void" line="153"/>
            <javadoc line="153">
                Removes the specified listener from this line&apos;s list of listeners.                
                <param>
                    listener listener to remove                    
                </param>
                <see>
                    #addLineListener                    
                </see>
            </javadoc>
            <class name="Info" line="159">
                <javadoc line="159">
                    A &lt;code&gt;Line.Info&lt;/code&gt; object contains information about a line.
                      The only information provided by &lt;code&gt;Line.Info&lt;/code&gt; itself
                      is the Java class of the line.
                      A subclass of &lt;code&gt;Line.Info&lt;/code&gt; adds other kinds of information
                      about the line.  This additional information depends on which &lt;code&gt;Line&lt;/code&gt;
                      subinterface is implemented by the kind of line that the &lt;code&gt;Line.Info&lt;/code&gt;
                      subclass describes.
                      &lt;p&gt;
                      A &lt;code&gt;Line.Info&lt;/code&gt; can be retrieved using various methods of
                      the &lt;code&gt;Line&lt;/code&gt;, &lt;code&gt;Mixer&lt;/code&gt;, and &lt;code&gt;AudioSystem&lt;/code&gt;
                      interfaces.  Other such methods let you pass a &lt;code&gt;Line.Info&lt;/code&gt; as
                      an argument, to learn whether lines matching the specified configuration
                      are available and to obtain them.                    
                    <author>
                        Kara Kytle                        
                    </author>
                    <see>
                        Line#getLineInfo                        
                    </see>
                    <see>
                        Mixer#getSourceLineInfo                        
                    </see>
                    <see>
                        Mixer#getTargetLineInfo                        
                    </see>
                    <see>
                        Mixer#getLine <code>Mixer.getLine(Line.Info)</code>                        
                    </see>
                    <see>
                        Mixer#getSourceLineInfo(Line.Info) <code>Mixer.getSourceLineInfo(Line.Info)</code>                        
                    </see>
                    <see>
                        Mixer#getSourceLineInfo(Line.Info) <code>Mixer.getTargetLineInfo(Line.Info)</code>                        
                    </see>
                    <see>
                        Mixer#isLineSupported <code>Mixer.isLineSupported(Line.Info)</code>                        
                    </see>
                    <see>
                        AudioSystem#getLine <code>AudioSystem.getLine(Line.Info)</code>                        
                    </see>
                    <see>
                        AudioSystem#getSourceLineInfo <code>AudioSystem.getSourceLineInfo(Line.Info)</code>                        
                    </see>
                    <see>
                        AudioSystem#getTargetLineInfo <code>AudioSystem.getTargetLineInfo(Line.Info)</code>                        
                    </see>
                    <see>
                        AudioSystem#isLineSupported <code>AudioSystem.isLineSupported(Line.Info)</code>                        
                    </see>
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <declaration name="lineClass" type="Class" line="188"/>
                <javadoc line="188">
                    The class of the line described by the info object.                    
                </javadoc>
                <javadoc line="192">
                    Constructs an info object that describes a line of the specified class.
                      This constructor is typically used by an application to
                      describe a desired line.                    
                    <param>
                        lineClass the class of the line that the new Line.Info object describes                        
                    </param>
                </javadoc>
                <method name="Info" type="constructor" line="198">
                    <params>
                        <param name="lineClass" type="Class<?>"/>
                    </params>
                    <scope line="199"/>
                    <scope line="202"/>
                </method>
                <javadoc line="206">
                    Obtains the class of the line that this Line.Info object describes.                    
                    <return>
                        the described line's class                        
                    </return>
                </javadoc>
                <method name="getLineClass" type="Class<?>" line="210"/>
                <javadoc line="213">
                    Indicates whether the specified info object matches this one.
                      To match, the specified object must be identical to or
                      a special case of this one.  The specified info object
                      must be either an instance of the same class as this one,
                      or an instance of a sub-type of this one.  In addition, the
                      attributes of the specified object must be compatible with the
                      capabilities of this one.  Specifically, the routing configuration
                      for the specified info object must be compatible with that of this
                      one.
                      Subclasses may add other criteria to determine whether the two objects
                      match.                    
                    <param>
                        info the info object which is being compared to this one                        
                    </param>
                    <return>
                        <code>true</code> if the specified object matches this one,
                          <code>false</code> otherwise                        
                    </return>
                </javadoc>
                <method name="matches" type="boolean" line="229">
                    <params>
                        <param name="info" type="Info"/>
                    </params>
                    <scope line="230"/>
                    <scope line="233"/>
                </method>
                <javadoc line="238">
                    Obtains a textual description of the line info.                    
                    <return>
                        a string description                        
                    </return>
                </javadoc>
                <method name="toString" type="String" line="242">
                    <declaration name="fullPackagePath" type="String" line="243"/>
                    <declaration name="initialString" type="String" line="244"/>
                    <declaration name="finalString" type="String" line="245"/>
                    <declaration name="index" type="int" line="246"/>
                    <scope line="247"/>
                    <scope line="250"/>
                </method>
            </class>
        </interface>
    </source>