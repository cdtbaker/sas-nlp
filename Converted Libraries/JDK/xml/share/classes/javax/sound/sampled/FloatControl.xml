<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.sound.sampled">
        <class name="FloatControl" line="2">
            <extends class="Control"/>
            <javadoc line="2">
                A &lt;code&gt;FloatControl&lt;/code&gt; object provides control over a range of
                  floating-point values.  Float controls are often
                  represented in graphical user interfaces by continuously
                  adjustable objects such as sliders or rotary knobs.  Concrete subclasses
                  of &lt;code&gt;FloatControl&lt;/code&gt; implement controls, such as gain and pan, that
                  affect a line&apos;s audio signal in some way that an application can manipulate.
                  The &lt;code&gt;{@link FloatControl.Type}&lt;/code&gt;
                  inner class provides static instances of types that are used to
                  identify some common kinds of float control.
                  &lt;p&gt;
                  The &lt;code&gt;FloatControl&lt;/code&gt; abstract class provides methods to set and get
                  the control&apos;s current floating-point value.  Other methods obtain the possible
                  range of values and the control&apos;s resolution (the smallest increment between
                  returned values).  Some float controls allow ramping to a
                  new value over a specified period of time.  &lt;code&gt;FloatControl&lt;/code&gt; also
                  includes methods that return string labels for the minimum, maximum, and midpoint
                  positions of the control.                
                <see>
                    Line#getControls                    
                </see>
                <see>
                    Line#isControlSupported                    
                </see>
                <author>
                    David Rivas                    
                </author>
                <author>
                    Kara Kytle                    
                </author>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <declaration name="minimum" type="float" line="27"/>
            <javadoc line="27">
                The minimum supported value.                
            </javadoc>
            <declaration name="maximum" type="float" line="31"/>
            <javadoc line="31">
                The maximum supported value.                
            </javadoc>
            <declaration name="precision" type="float" line="35"/>
            <javadoc line="35">
                The control&apos;s precision.                
            </javadoc>
            <declaration name="updatePeriod" type="int" line="39"/>
            <javadoc line="39">
                The smallest time increment in which a value change
                  can be effected during a value shift, in microseconds.                
            </javadoc>
            <declaration name="units" type="String" line="44"/>
            <javadoc line="44">
                A label for the units in which the control values are expressed,
                  such as &quot;dB&quot; for decibels.                
            </javadoc>
            <declaration name="minLabel" type="String" line="49"/>
            <javadoc line="49">
                A label for the minimum value, such as &quot;Left.&quot;                
            </javadoc>
            <declaration name="maxLabel" type="String" line="53"/>
            <javadoc line="53">
                A label for the maximum value, such as &quot;Right.&quot;                
            </javadoc>
            <declaration name="midLabel" type="String" line="57"/>
            <javadoc line="57">
                A label for the mid-point value, such as &quot;Center.&quot;                
            </javadoc>
            <declaration name="value" type="float" line="61"/>
            <javadoc line="61">
                The current value.                
            </javadoc>
            <javadoc line="65">
                Constructs a new float control object with the given parameters                
                <param>
                    type the kind of control represented by this float control object                    
                </param>
                <param>
                    minimum the smallest value permitted for the control                    
                </param>
                <param>
                    maximum the largest value permitted for the control                    
                </param>
                <param>
                    precision the resolution or granularity of the control.
                      This is the size of the increment between discrete valid values.                    
                </param>
                <param>
                    updatePeriod the smallest time interval, in microseconds, over which the control
                      can change from one discrete value to the next during a {@link #shift(float,float,int) shift}                    
                </param>
                <param>
                    initialValue the value that the control starts with when constructed                    
                </param>
                <param>
                    units the label for the units in which the control's values are expressed,
                      such as "dB" or "frames per second"                    
                </param>
                <param>
                    minLabel the label for the minimum value, such as "Left" or "Off"                    
                </param>
                <param>
                    midLabel the label for the midpoint value, such as "Center" or "Default"                    
                </param>
                <param>
                    maxLabel the label for the maximum value, such as "Right" or "Full"                    
                </param>
                <throws>
                    IllegalArgumentException if {@code minimum} is greater
                      than {@code maximum} or {@code initialValue} does not fall
                      within the allowable range                    
                </throws>
            </javadoc>
            <method name="FloatControl" type="constructor" line="84">
                <params>
                    <param name="type" type="Type"/>
                    <param name="minimum" type="float"/>
                    <param name="maximum" type="float"/>
                    <param name="precision" type="float"/>
                    <param name="updatePeriod" type="int"/>
                    <param name="initialValue" type="float"/>
                    <param name="units" type="String"/>
                    <param name="minLabel" type="String"/>
                    <param name="midLabel" type="String"/>
                    <param name="maxLabel" type="String"/>
                </params>
                <scope line="86"/>
                <scope line="89"/>
                <scope line="92"/>
            </method>
            <javadoc line="105">
                Constructs a new float control object with the given parameters.
                  The labels for the minimum, maximum, and mid-point values are set
                  to zero-length strings.                
                <param>
                    type the kind of control represented by this float control object                    
                </param>
                <param>
                    minimum the smallest value permitted for the control                    
                </param>
                <param>
                    maximum the largest value permitted for the control                    
                </param>
                <param>
                    precision the resolution or granularity of the control.
                      This is the size of the increment between discrete valid values.                    
                </param>
                <param>
                    updatePeriod the smallest time interval, in microseconds, over which the control
                      can change from one discrete value to the next during a {@link #shift(float,float,int) shift}                    
                </param>
                <param>
                    initialValue the value that the control starts with when constructed                    
                </param>
                <param>
                    units the label for the units in which the control's values are expressed,
                      such as "dB" or "frames per second"                    
                </param>
                <throws>
                    IllegalArgumentException if {@code minimum} is greater
                      than {@code maximum} or {@code initialValue} does not fall
                      within the allowable range                    
                </throws>
            </javadoc>
            <method name="FloatControl" type="constructor" line="123">
                <params>
                    <param name="type" type="Type"/>
                    <param name="minimum" type="float"/>
                    <param name="maximum" type="float"/>
                    <param name="precision" type="float"/>
                    <param name="updatePeriod" type="int"/>
                    <param name="initialValue" type="float"/>
                    <param name="units" type="String"/>
                </params>
            </method>
            <javadoc line="126">
                Sets the current value for the control.  The default implementation
                  simply sets the value as indicated.  If the value indicated is greater
                  than the maximum value, or smaller than the minimum value, an
                  IllegalArgumentException is thrown.
                  Some controls require that their line be open before they can be affected
                  by setting a value.                
                <param>
                    newValue desired new value                    
                </param>
                <throws>
                    IllegalArgumentException if the value indicated does not fall
                      within the allowable range                    
                </throws>
            </javadoc>
            <method name="setValue" type="void" line="137">
                <params>
                    <param name="newValue" type="float"/>
                </params>
                <scope line="138"/>
                <scope line="141"/>
            </method>
            <javadoc line="146">
                Obtains this control&apos;s current value.                
                <return>
                    the current value                    
                </return>
            </javadoc>
            <method name="getValue" type="float" line="150"/>
            <javadoc line="153">
                Obtains the maximum value permitted.                
                <return>
                    the maximum allowable value                    
                </return>
            </javadoc>
            <method name="getMaximum" type="float" line="157"/>
            <javadoc line="160">
                Obtains the minimum value permitted.                
                <return>
                    the minimum allowable value                    
                </return>
            </javadoc>
            <method name="getMinimum" type="float" line="164"/>
            <javadoc line="167">
                Obtains the label for the units in which the control&apos;s values are expressed,
                  such as &quot;dB&quot; or &quot;frames per second.&quot;                
                <return>
                    the units label, or a zero-length string if no label                    
                </return>
            </javadoc>
            <method name="getUnits" type="String" line="172"/>
            <javadoc line="175">
                Obtains the label for the minimum value, such as &quot;Left&quot; or &quot;Off.&quot;                
                <return>
                    the minimum value label, or a zero-length string if no label       has been set                    
                </return>
            </javadoc>
            <method name="getMinLabel" type="String" line="179"/>
            <javadoc line="182">
                Obtains the label for the mid-point value, such as &quot;Center&quot; or &quot;Default.&quot;                
                <return>
                    the mid-point value label, or a zero-length string if no label     has been set                    
                </return>
            </javadoc>
            <method name="getMidLabel" type="String" line="186"/>
            <javadoc line="189">
                Obtains the label for the maximum value, such as &quot;Right&quot; or &quot;Full.&quot;                
                <return>
                    the maximum value label, or a zero-length string if no label       has been set                    
                </return>
            </javadoc>
            <method name="getMaxLabel" type="String" line="193"/>
            <javadoc line="196">
                Obtains the resolution or granularity of the control, in the units
                  that the control measures.
                  The precision is the size of the increment between discrete valid values
                  for this control, over the set of supported floating-point values.                
                <return>
                    the control's precision                    
                </return>
            </javadoc>
            <method name="getPrecision" type="float" line="203"/>
            <javadoc line="206">
                Obtains the smallest time interval, in microseconds, over which the control&apos;s value can
                  change during a shift.  The update period is the inverse of the frequency with which
                  the control updates its value during a shift.  If the implementation does not support value shifting over
                  time, it should set the control&apos;s value to the final value immediately
                  and return -1 from this method.                
                <return>
                    update period in microseconds, or -1 if shifting over time is unsupported                    
                </return>
                <see>
                    #shift                    
                </see>
            </javadoc>
            <method name="getUpdatePeriod" type="int" line="215"/>
            <javadoc line="218">
                Changes the control value from the initial value to the final
                  value linearly over the specified time period, specified in microseconds.
                  This method returns without blocking; it does not wait for the shift
                  to complete.  An implementation should complete the operation within the time
                  specified.  The default implementation simply changes the value
                  to the final value immediately.                
                <param>
                    from initial value at the beginning of the shift                    
                </param>
                <param>
                    to final value after the shift                    
                </param>
                <param>
                    microseconds maximum duration of the shift in microseconds                    
                </param>
                <throws>
                    IllegalArgumentException if either {@code from} or {@code to}value does not fall within the allowable range                    
                </throws>
                <see>
                    #getUpdatePeriod                    
                </see>
            </javadoc>
            <method name="shift" type="void" line="231">
                <params>
                    <param name="from" type="float"/>
                    <param name="to" type="float"/>
                    <param name="microseconds" type="int"/>
                </params>
                <scope line="232"/>
                <scope line="235"/>
            </method>
            <javadoc line="240">
                Provides a string representation of the control                
                <return>
                    a string description                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="244"/>
            <class name="Type" line="247">
                <extends class="Control.Type"/>
                <javadoc line="247">
                    An instance of the &lt;code&gt;FloatControl.Type&lt;/code&gt; inner class identifies one kind of
                      float control.  Static instances are provided for the
                      common types.                    
                    <author>
                        Kara Kytle                        
                    </author>
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <declaration name="MASTER_GAIN" type="Type" line="255"/>
                <javadoc line="255">
                    Represents a control for the overall gain on a line.
                      &lt;p&gt;
                      Gain is a quantity in decibels (dB) that is added to the intrinsic
                      decibel level of the audio signal--that is, the level of
                      the signal before it is altered by the gain control.  A positive
                      gain amplifies (boosts) the signal&apos;s volume, and a negative gain
                      attenuates (cuts) it.
                      The gain setting defaults to a value of 0.0 dB, meaning the signal&apos;s
                      loudness is unaffected.   Note that gain measures dB, not amplitude.
                      The relationship between a gain in decibels and the corresponding
                      linear amplitude multiplier is:
                      &lt;CENTER&gt;&lt;CODE&gt; linearScalar = pow(10.0, gainDB/20.0) &lt;/CODE&gt;&lt;/CENTER&gt;
                      &lt;p&gt;
                      The &lt;code&gt;FloatControl&lt;/code&gt; class has methods to impose a maximum and
                      minimum allowable value for gain.  However, because an audio signal might
                      already be at a high amplitude, the maximum setting does not guarantee
                      that the signal will be undistorted when the gain is applied to it (unless
                      the maximum is zero or negative). To avoid numeric overflow from excessively
                      large gain settings, a gain control can implement
                      clipping, meaning that the signal&apos;s amplitude will be limited to the maximum
                      value representable by its audio format, instead of wrapping around.
                      &lt;p&gt;
                      These comments apply to gain controls in general, not just master gain controls.
                      A line can have more than one gain control.  For example, a mixer (which is
                      itself a line) might have a master gain control, an auxiliary return control,
                      a reverb return control, and, on each of its source lines, an individual aux
                      send and reverb send.                    
                    <see>
                        #AUX_SEND                        
                    </see>
                    <see>
                        #AUX_RETURN                        
                    </see>
                    <see>
                        #REVERB_SEND                        
                    </see>
                    <see>
                        #REVERB_RETURN                        
                    </see>
                    <see>
                        #VOLUME                        
                    </see>
                </javadoc>
                <declaration name="AUX_SEND" type="Type" line="290"/>
                <javadoc line="290">
                    Represents a control for the auxiliary send gain on a line.                    
                    <see>
                        #MASTER_GAIN                        
                    </see>
                    <see>
                        #AUX_RETURN                        
                    </see>
                </javadoc>
                <declaration name="AUX_RETURN" type="Type" line="296"/>
                <javadoc line="296">
                    Represents a control for the auxiliary return gain on a line.                    
                    <see>
                        #MASTER_GAIN                        
                    </see>
                    <see>
                        #AUX_SEND                        
                    </see>
                </javadoc>
                <declaration name="REVERB_SEND" type="Type" line="302"/>
                <javadoc line="302">
                    Represents a control for the pre-reverb gain on a line.
                      This control may be used to affect how much
                      of a line&apos;s signal is directed to a mixer&apos;s internal reverberation unit.                    
                    <see>
                        #MASTER_GAIN                        
                    </see>
                    <see>
                        #REVERB_RETURN                        
                    </see>
                    <see>
                        EnumControl.Type#REVERB                        
                    </see>
                </javadoc>
                <declaration name="REVERB_RETURN" type="Type" line="311"/>
                <javadoc line="311">
                    Represents a control for the post-reverb gain on a line.
                      This control may be used to control the relative amplitude
                      of the signal returned from an internal reverberation unit.                    
                    <see>
                        #MASTER_GAIN                        
                    </see>
                    <see>
                        #REVERB_SEND                        
                    </see>
                </javadoc>
                <declaration name="VOLUME" type="Type" line="319"/>
                <javadoc line="319">
                    Represents a control for the volume on a line.                    
                </javadoc>
                <declaration name="PAN" type="Type" line="323"/>
                <javadoc line="323">
                    Represents a control for the relative pan (left-right positioning)
                      of the signal.  The signal may be mono; the pan setting affects how
                      it is distributed by the mixer in a stereo mix.  The valid range of values is -1.0
                      (left channel only) to 1.0 (right channel
                      only).  The default is 0.0 (centered).                    
                    <see>
                        #BALANCE                        
                    </see>
                </javadoc>
                <declaration name="BALANCE" type="Type" line="332"/>
                <javadoc line="332">
                    Represents a control for the relative balance of a stereo signal
                      between two stereo speakers.  The valid range of values is -1.0 (left channel only) to 1.0 (right channel
                      only).  The default is 0.0 (centered).                    
                    <see>
                        #PAN                        
                    </see>
                </javadoc>
                <declaration name="SAMPLE_RATE" type="Type" line="339"/>
                <javadoc line="339">
                    Represents a control that changes the sample rate of audio playback.  The net effect
                      of changing the sample rate depends on the relationship between
                      the media&apos;s natural rate and the rate that is set via this control.
                      The natural rate is the sample rate that is specified in the data line&apos;s
                      &lt;code&gt;AudioFormat&lt;/code&gt; object.  For example, if the natural rate
                      of the media is 11025 samples per second and the sample rate is set
                      to 22050 samples per second, the media will play back at twice the
                      normal speed.
                      &lt;p&gt;
                      Changing the sample rate with this control does not affect the data line&apos;s
                      audio format.  Also note that whenever you change a sound&apos;s sample rate, a
                      change in the sound&apos;s pitch results.  For example, doubling the sample
                      rate has the effect of doubling the frequencies in the sound&apos;s spectrum,
                      which raises the pitch by an octave.                    
                </javadoc>
                <javadoc line="356">
                    Constructs a new float control type.                    
                    <param>
                        name  the name of the new float control type                        
                    </param>
                </javadoc>
                <method name="Type" type="constructor" line="360">
                    <params>
                        <param name="name" type="String"/>
                    </params>
                </method>
            </class>
        </class>
    </source>