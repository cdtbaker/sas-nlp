<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.sound.sampled">
        <class name="LineEvent" line="28">
            <extends class="java.util.EventObject"/>
            <comment line="51">
                INSTANCE VARIABLES                
            </comment>
            <comment line="280">
                class Type                
            </comment>
            <javadoc line="28">
                The &lt;code&gt;LineEvent&lt;/code&gt; class encapsulates information that a line
                  sends its listeners whenever the line opens, closes, starts, or stops.
                  Each of these four state changes is represented by a corresponding
                  type of event.  A listener receives the event as a parameter to its{@link LineListener#update update} method.  By querying the event,
                  the listener can learn the type of event, the line responsible for
                  the event, and how much data the line had processed when the event occurred.
                  &lt;p&gt;Although this class implements Serializable, attempts to
                  serialize a &lt;code&gt;LineEvent&lt;/code&gt; object will fail.                
                <author>
                    Kara Kytle                    
                </author>
                <see>
                    Line                    
                </see>
                <see>
                    LineListener#update                    
                </see>
                <since>
                    1.3                    
                </since>
                <serial>
                    exclude                    
                </serial>
            </javadoc>
            <declaration name="type" type="Type" line="52"/>
            <javadoc line="52">
                The kind of line event (&lt;code&gt;OPEN&lt;/code&gt;, &lt;code&gt;CLOSE&lt;/code&gt;,
                  &lt;code&gt;START&lt;/code&gt;, or &lt;code&gt;STOP&lt;/code&gt;).                
                <see>
                    #getType                    
                </see>
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="position" type="long" line="60"/>
            <javadoc line="60">
                The media position when the event occurred, expressed in sample frames.
                  Note that this field is only relevant to certain events generated by
                  data lines, such as &lt;code&gt;START&lt;/code&gt; and &lt;code&gt;STOP&lt;/code&gt;.  For
                  events generated by lines that do not count sample frames, and for any
                  other events for which this value is not known, the position value
                  should be {@link AudioSystem#NOT_SPECIFIED}.                
                <serial>
                                        
                </serial>
                <see>
                    #getFramePosition                    
                </see>
            </javadoc>
            <javadoc line="73">
                Constructs a new event of the specified type, originating from the specified line.                
                <param>
                    line the source of this event                    
                </param>
                <param>
                    type the event type (<code>OPEN</code>, <code>CLOSE</code>, <code>START</code>, or <code>STOP</code>)                    
                </param>
                <param>
                    position the number of sample frames that the line had already processed when the event occurred,
                      or {@link AudioSystem#NOT_SPECIFIED}                    
                </param>
                <throws>
                    IllegalArgumentException if <code>line</code> is
                      <code>null</code>.                    
                </throws>
            </javadoc>
            <method name="LineEvent" type="constructor" line="83">
                <params>
                    <param name="line" type="Line"/>
                    <param name="type" type="Type"/>
                    <param name="position" type="long"/>
                </params>
            </method>
            <javadoc line="90">
                Obtains the audio line that is the source of this event.                
                <return>
                    the line responsible for this event                    
                </return>
            </javadoc>
            <method name="getLine" type="Line" line="94"/>
            <javadoc line="100">
                Obtains the event&apos;s type.                
                <return>
                    this event's type ({@link Type#OPEN}, {@link Type#CLOSE},{@link Type#START}, or {@link Type#STOP})                    
                </return>
            </javadoc>
            <method name="getType" type="Type" line="105"/>
            <javadoc line="110">
                Obtains the position in the line&apos;s audio data when the event occurred, expressed in sample frames.
                  For example, if a source line had already played back 14 sample frames at the time it was
                  paused, the pause event would report the line&apos;s position as 14.  The next frame to be processed
                  would be frame number 14 using zero-based numbering, or 15 using one-based numbering.
                  &lt;p&gt;
                  Note that this field is relevant only to certain events generated by
                  data lines, such as &lt;code&gt;START&lt;/code&gt; and &lt;code&gt;STOP&lt;/code&gt;.  For
                  events generated by lines that do not count sample frames, and for any
                  other events for which this value is not known, the position value
                  should be {@link AudioSystem#NOT_SPECIFIED}.                
                <return>
                    the line's position as a sample frame number                    
                </return>
            </javadoc>
            <method name="getFramePosition" type="long" line="128">
                <comment line="124">
                    $$kk: 04.20.99: note to myself: should make sure our implementation is consistent with this.
                     which is a reasonable definition....                    
                </comment>
            </method>
            <javadoc line="133">
                Obtains a string representation of the event.  The contents of the string may vary
                  between implementations of Java Sound.                
                <return>
                    a string describing the event.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="138">
                <declaration name="sType" type="String" line="139"/>
                <declaration name="sLine" type="String" line="141"/>
                <scope line="142"/>
                <scope line="144"/>
            </method>
            <class name="Type" line="151">
                <comment line="125">
                    $$kk: 04.20.99: note to myself: should make sure our implementation is consistent with this.
                     which is a reasonable definition....                    
                </comment>
                <comment line="176">
                    $$fb 2002-11-26: fix for 4695001: SPEC: description of equals() method contains typo                    
                </comment>
                <comment line="205">
                    LINE EVENT TYPE DEFINES                    
                </comment>
                <comment line="245">
                    A type of event that is sent when a line ceases to engage in active
                     input or output of audio data because the end of media has been reached.                    
                </comment>
                <comment line="249">
                    ISSUE: we may want to get rid of this.  Is JavaSound
                     responsible for reporting this??
                    
                     [If it&apos;s decided to keep this API, the docs will need to be updated to include mention
                     of EOM events elsewhere.]                    
                </comment>
                <comment line="256">
                    public static final Type EOM  = new Type(&quot;EOM&quot;);                    
                </comment>
                <comment line="259">
                    A type of event that is sent when a line begins to engage in active
                     input or output of audio data.  Examples of when this happens are
                     when a source line begins or resumes writing data to its mixer, and
                     when a target line begins or resumes reading data from its mixer.
                     @see #STOP
                     @see SourceDataLine#write
                     @see TargetDataLine#read
                     @see DataLine#start                    
                </comment>
                <comment line="269">
                    public static final Type ACTIVE       = new Type(&quot;ACTIVE&quot;);                    
                </comment>
                <comment line="272">
                    A type of event that is sent when a line ceases active input or output
                     of audio data.
                     @see #START
                     @see DataLine#stop                    
                </comment>
                <comment line="278">
                    public static final Type INACTIVE     = new Type(&quot;INACTIVE&quot;);                    
                </comment>
                <javadoc line="151">
                    The LineEvent.Type inner class identifies what kind of event occurred on a line.
                      Static instances are provided for the common types (OPEN, CLOSE, START, and STOP).                    
                    <see>
                        LineEvent#getType()                        
                    </see>
                </javadoc>
                <declaration name="name" type="String" line="160"/>
                <javadoc line="160">
                    Type name.                    
                </javadoc>
                <javadoc line="166">
                    Constructs a new event type.                    
                    <param>
                        name name of the type                        
                    </param>
                </javadoc>
                <method name="Type" type="constructor" line="170">
                    <params>
                        <param name="name" type="String"/>
                    </params>
                </method>
                <javadoc line="176">
                    Indicates whether the specified object is equal to this event type,
                      returning &lt;code&gt;true&lt;/code&gt; if the objects are identical.                    
                    <param>
                        obj the reference object with which to compare                        
                    </param>
                    <return>
                        <code>true</code> if this event type is the same as
                          <code>obj</code>; <code>false</code> otherwise                        
                    </return>
                </javadoc>
                <method name="equals" type="boolean" line="183">
                    <params>
                        <param name="obj" type="Object"/>
                    </params>
                </method>
                <javadoc line="188">
                    Finalizes the hashcode method.                    
                </javadoc>
                <method name="hashCode" type="int" line="191"/>
                <javadoc line="196">
                    Returns the type name as the string representation.                    
                </javadoc>
                <method name="toString" type="String" line="199"/>
                <declaration name="OPEN" type="Type" line="206"/>
                <javadoc line="206">
                    A type of event that is sent when a line opens, reserving system
                      resources for itself.                    
                    <see>
                        #CLOSE                        
                    </see>
                    <see>
                        Line#open                        
                    </see>
                </javadoc>
                <declaration name="CLOSE" type="Type" line="215"/>
                <javadoc line="215">
                    A type of event that is sent when a line closes, freeing the system
                      resources it had obtained when it was opened.                    
                    <see>
                        #OPEN                        
                    </see>
                    <see>
                        Line#close                        
                    </see>
                </javadoc>
                <declaration name="START" type="Type" line="224"/>
                <javadoc line="224">
                    A type of event that is sent when a line begins to engage in active
                      input or output of audio data in response to a{@link DataLine#start start} request.                    
                    <see>
                        #STOP                        
                    </see>
                    <see>
                        DataLine#start                        
                    </see>
                </javadoc>
                <declaration name="STOP" type="Type" line="234"/>
                <javadoc line="234">
                    A type of event that is sent when a line ceases active input or output
                      of audio data in response to a {@link DataLine#stop stop} request,
                      or because the end of media has been reached.                    
                    <see>
                        #START                        
                    </see>
                    <see>
                        DataLine#stop                        
                    </see>
                </javadoc>
            </class>
        </class>
    </source>