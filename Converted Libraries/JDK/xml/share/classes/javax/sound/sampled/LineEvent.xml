<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.sound.sampled">
        <class name="LineEvent" line="2">
            <extends class="java.util.EventObject"/>
            <javadoc line="2">
                The &lt;code&gt;LineEvent&lt;/code&gt; class encapsulates information that a line
                  sends its listeners whenever the line opens, closes, starts, or stops.
                  Each of these four state changes is represented by a corresponding
                  type of event.  A listener receives the event as a parameter to its{@link LineListener#update update} method.  By querying the event,
                  the listener can learn the type of event, the line responsible for
                  the event, and how much data the line had processed when the event occurred.
                  &lt;p&gt;Although this class implements Serializable, attempts to
                  serialize a &lt;code&gt;LineEvent&lt;/code&gt; object will fail.                
                <author>
                    Kara Kytle                    
                </author>
                <see>
                    Line                    
                </see>
                <see>
                    LineListener#update                    
                </see>
                <since>
                    1.3                    
                </since>
                <serial>
                    exclude                    
                </serial>
            </javadoc>
            <declaration name="type" type="Type" line="18"/>
            <javadoc line="18">
                The kind of line event (&lt;code&gt;OPEN&lt;/code&gt;, &lt;code&gt;CLOSE&lt;/code&gt;,
                  &lt;code&gt;START&lt;/code&gt;, or &lt;code&gt;STOP&lt;/code&gt;).                
                <see>
                    #getType                    
                </see>
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="position" type="long" line="25"/>
            <javadoc line="25">
                The media position when the event occurred, expressed in sample frames.
                  Note that this field is only relevant to certain events generated by
                  data lines, such as &lt;code&gt;START&lt;/code&gt; and &lt;code&gt;STOP&lt;/code&gt;.  For
                  events generated by lines that do not count sample frames, and for any
                  other events for which this value is not known, the position value
                  should be {@link AudioSystem#NOT_SPECIFIED}.                
                <serial>
                                        
                </serial>
                <see>
                    #getFramePosition                    
                </see>
            </javadoc>
            <javadoc line="36">
                Constructs a new event of the specified type, originating from the specified line.                
                <param>
                    line the source of this event                    
                </param>
                <param>
                    type the event type (&lt;code&gt;OPEN&lt;/code&gt;, &lt;code&gt;CLOSE&lt;/code&gt;, &lt;code&gt;START&lt;/code&gt;, or &lt;code&gt;STOP&lt;/code&gt;)                    
                </param>
                <param>
                    position the number of sample frames that the line had already processed when the event occurred,
                      or {@link AudioSystem#NOT_SPECIFIED}                    
                </param>
                <throws>
                    IllegalArgumentException if &lt;code&gt;line&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;.                    
                </throws>
            </javadoc>
            <method name="LineEvent" type="constructor" line="45">
                <params>
                    <param name="line" type="Line"/>
                    <param name="type" type="Type"/>
                    <param name="position" type="long"/>
                </params>
            </method>
            <javadoc line="50">
                Obtains the audio line that is the source of this event.                
                <return>
                    the line responsible for this event                    
                </return>
            </javadoc>
            <method name="getLine" type="Line" line="54"/>
            <javadoc line="57">
                Obtains the event&apos;s type.                
                <return>
                    this event&apos;s type ({@link Type#OPEN}, {@link Type#CLOSE},{@link Type#START}, or {@link Type#STOP})                    
                </return>
            </javadoc>
            <method name="getType" type="Type" line="61"/>
            <javadoc line="64">
                Obtains the position in the line&apos;s audio data when the event occurred, expressed in sample frames.
                  For example, if a source line had already played back 14 sample frames at the time it was
                  paused, the pause event would report the line&apos;s position as 14.  The next frame to be processed
                  would be frame number 14 using zero-based numbering, or 15 using one-based numbering.
                  &lt;p&gt;
                  Note that this field is relevant only to certain events generated by
                  data lines, such as &lt;code&gt;START&lt;/code&gt; and &lt;code&gt;STOP&lt;/code&gt;.  For
                  events generated by lines that do not count sample frames, and for any
                  other events for which this value is not known, the position value
                  should be {@link AudioSystem#NOT_SPECIFIED}.                
                <return>
                    the line&apos;s position as a sample frame number                    
                </return>
            </javadoc>
            <method name="getFramePosition" type="long" line="77"/>
            <javadoc line="80">
                Obtains a string representation of the event.  The contents of the string may vary
                  between implementations of Java Sound.                
                <return>
                    a string describing the event.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="85">
                <declaration name="sType" type="String" line="86"/>
                <declaration name="sLine" type="String" line="88"/>
                <scope line="89"/>
                <scope line="92"/>
            </method>
            <class name="Type" line="97">
                <javadoc line="97">
                    The LineEvent.Type inner class identifies what kind of event occurred on a line.
                      Static instances are provided for the common types (OPEN, CLOSE, START, and STOP).                    
                    <see>
                        LineEvent#getType()                        
                    </see>
                </javadoc>
                <declaration name="name" type="String" line="103"/>
                <javadoc line="103">
                    Type name.                    
                </javadoc>
                <javadoc line="107">
                    Constructs a new event type.                    
                    <param>
                        name name of the type                        
                    </param>
                </javadoc>
                <method name="Type" type="constructor" line="111">
                    <params>
                        <param name="name" type="String"/>
                    </params>
                </method>
                <javadoc line="114">
                    Indicates whether the specified object is equal to this event type,
                      returning &lt;code&gt;true&lt;/code&gt; if the objects are identical.                    
                    <param>
                        obj the reference object with which to compare                        
                    </param>
                    <return>
                        &lt;code&gt;true&lt;/code&gt; if this event type is the same as
                          &lt;code&gt;obj&lt;/code&gt;; &lt;code&gt;false&lt;/code&gt; otherwise                        
                    </return>
                </javadoc>
                <method name="equals" type="boolean" line="121">
                    <params>
                        <param name="obj" type="Object"/>
                    </params>
                </method>
                <javadoc line="124">
                    Finalizes the hashcode method.                    
                </javadoc>
                <method name="hashCode" type="int" line="127"/>
                <javadoc line="130">
                    Returns the type name as the string representation.                    
                </javadoc>
                <method name="toString" type="String" line="133"/>
                <declaration name="OPEN" type="Type" line="136"/>
                <javadoc line="136">
                    A type of event that is sent when a line opens, reserving system
                      resources for itself.                    
                    <see>
                        #CLOSE                        
                    </see>
                    <see>
                        Line#open                        
                    </see>
                </javadoc>
                <declaration name="CLOSE" type="Type" line="143"/>
                <javadoc line="143">
                    A type of event that is sent when a line closes, freeing the system
                      resources it had obtained when it was opened.                    
                    <see>
                        #OPEN                        
                    </see>
                    <see>
                        Line#close                        
                    </see>
                </javadoc>
                <declaration name="START" type="Type" line="150"/>
                <javadoc line="150">
                    A type of event that is sent when a line begins to engage in active
                      input or output of audio data in response to a{@link DataLine#start start} request.                    
                    <see>
                        #STOP                        
                    </see>
                    <see>
                        DataLine#start                        
                    </see>
                </javadoc>
                <declaration name="STOP" type="Type" line="157"/>
                <javadoc line="157">
                    A type of event that is sent when a line ceases active input or output
                      of audio data in response to a {@link DataLine#stop stop} request,
                      or because the end of media has been reached.                    
                    <see>
                        #START                        
                    </see>
                    <see>
                        DataLine#stop                        
                    </see>
                </javadoc>
            </class>
        </class>
    </source>