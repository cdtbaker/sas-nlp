<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.sound.sampled">
        <import package="java.io.InputStream"/>
        <import package="java.io.IOException"/>
        <interface name="Clip">
            <implements interface="DataLine"/>
            <javadoc line="31">
                The &lt;code&gt;Clip&lt;/code&gt; interface represents a special kind of data line whose
                  audio data can be loaded prior to playback, instead of being streamed in
                  real time.
                  &lt;p&gt;
                  Because the data is pre-loaded and has a known length, you can set a clip
                  to start playing at any position in its audio data.  You can also create a
                  loop, so that when the clip is played it will cycle repeatedly.  Loops are
                  specified with a starting and ending sample frame, along with the number of
                  times that the loop should be played.
                  &lt;p&gt;
                  Clips may be obtained from a &lt;code&gt;{@link Mixer}&lt;/code&gt; that supports lines
                  of this type.  Data is loaded into a clip when it is opened.
                  &lt;p&gt;
                  Playback of an audio clip may be started and stopped using the &lt;code&gt;start&lt;/code&gt;
                  and &lt;code&gt;stop&lt;/code&gt; methods.  These methods do not reset the media position;
                  &lt;code&gt;start&lt;/code&gt; causes playback to continue from the position where playback
                  was last stopped.  To restart playback from the beginning of the clip&apos;s audio
                  data, simply follow the invocation of &lt;code&gt;{@link DataLine#stop stop}&lt;/code&gt;
                  with setFramePosition(0), which rewinds the media to the beginning
                  of the clip.                
                <author>
                    Kara Kytle                    
                </author>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <declaration name="LOOP_CONTINUOUSLY" type="int" line="59"/>
            <javadoc line="59">
                A value indicating that looping should continue indefinitely rather than
                  complete after a specific number of loops.                
                <see>
                    #loop                    
                </see>
            </javadoc>
            <method name="open" type="void" line="66"/>
            <javadoc line="66">
                Opens the clip, meaning that it should acquire any required
                  system resources and become operational.  The clip is opened
                  with the format and audio data indicated.
                  If this operation succeeds, the line is marked as open and an
                  &lt;code&gt;{@link LineEvent.Type#OPEN OPEN}&lt;/code&gt; event is dispatched
                  to the line&apos;s listeners.
                  &lt;p&gt;
                  Invoking this method on a line which is already open is illegal
                  and may result in an IllegalStateException.
                  &lt;p&gt;
                  Note that some lines, once closed, cannot be reopened.  Attempts
                  to reopen such a line will always result in a
                  &lt;code&gt;{@link LineUnavailableException}&lt;/code&gt;.                
                <param>
                    format the format of the supplied audio data                    
                </param>
                <param>
                    data a byte array containing audio data to load into the clip                    
                </param>
                <param>
                    offset the point at which to start copying, expressed in
                      &lt;em&gt;bytes&lt;/em&gt; from the beginning of the array                    
                </param>
                <param>
                    bufferSize the number of &lt;em&gt;bytes&lt;/em&gt;
                      of data to load into the clip from the array.                    
                </param>
                <throws>
                    LineUnavailableException if the line cannot be
                      opened due to resource restrictions                    
                </throws>
                <throws>
                    IllegalArgumentException if the buffer size does not represent
                      an integral number of sample frames,
                      or if &lt;code&gt;format&lt;/code&gt; is not fully specified or invalid                    
                </throws>
                <throws>
                    IllegalStateException if the line is already open                    
                </throws>
                <throws>
                    SecurityException if the line cannot be
                      opened due to security restrictions                    
                </throws>
                <see>
                    #close                    
                </see>
                <see>
                    #isOpen                    
                </see>
                <see>
                    LineListener                    
                </see>
            </javadoc>
            <method name="open" type="void" line="102"/>
            <javadoc line="102">
                Opens the clip with the format and audio data present in the provided audio
                  input stream.  Opening a clip means that it should acquire any required
                  system resources and become operational.  If this operation
                  input stream.  If this operation
                  succeeds, the line is marked open and an
                  &lt;code&gt;{@link LineEvent.Type#OPEN OPEN}&lt;/code&gt; event is dispatched
                  to the line&apos;s listeners.
                  &lt;p&gt;
                  Invoking this method on a line which is already open is illegal
                  and may result in an IllegalStateException.
                  &lt;p&gt;
                  Note that some lines, once closed, cannot be reopened.  Attempts
                  to reopen such a line will always result in a
                  &lt;code&gt;{@link LineUnavailableException}&lt;/code&gt;.                
                <param>
                    stream an audio input stream from which audio data will be read into
                      the clip                    
                </param>
                <throws>
                    LineUnavailableException if the line cannot be
                      opened due to resource restrictions                    
                </throws>
                <throws>
                    IOException if an I/O exception occurs during reading of
                      the stream                    
                </throws>
                <throws>
                    IllegalArgumentException if the stream&apos;s audio format
                      is not fully specified or invalid                    
                </throws>
                <throws>
                    IllegalStateException if the line is already open                    
                </throws>
                <throws>
                    SecurityException if the line cannot be
                      opened due to security restrictions                    
                </throws>
                <see>
                    #close                    
                </see>
                <see>
                    #isOpen                    
                </see>
                <see>
                    LineListener                    
                </see>
            </javadoc>
            <method name="getFrameLength" type="int" line="136"/>
            <javadoc line="136">
                Obtains the media length in sample frames.                
                <return>
                    the media length, expressed in sample frames,
                      or &lt;code&gt;AudioSystem.NOT_SPECIFIED&lt;/code&gt; if the line is not open.                    
                </return>
                <see>
                    AudioSystem#NOT_SPECIFIED                    
                </see>
            </javadoc>
            <method name="getMicrosecondLength" type="long" line="144"/>
            <javadoc line="144">
                Obtains the media duration in microseconds                
                <return>
                    the media duration, expressed in microseconds,
                      or &lt;code&gt;AudioSystem.NOT_SPECIFIED&lt;/code&gt; if the line is not open.                    
                </return>
                <see>
                    AudioSystem#NOT_SPECIFIED                    
                </see>
            </javadoc>
            <method name="setFramePosition" type="void" line="152"/>
            <javadoc line="152">
                Sets the media position in sample frames.  The position is zero-based;
                  the first frame is frame number zero.  When the clip begins playing the
                  next time, it will start by playing the frame at this position.
                  &lt;p&gt;
                  To obtain the current position in sample frames, use the
                  &lt;code&gt;{@link DataLine#getFramePosition getFramePosition}&lt;/code&gt;
                  method of &lt;code&gt;DataLine&lt;/code&gt;.                
                <param>
                    frames the desired new media position, expressed in sample frames                    
                </param>
            </javadoc>
            <method name="setMicrosecondPosition" type="void" line="165"/>
            <javadoc line="165">
                Sets the media position in microseconds.  When the clip begins playing the
                  next time, it will start at this position.
                  The level of precision is not guaranteed.  For example, an implementation
                  might calculate the microsecond position from the current frame position
                  and the audio sample frame rate.  The precision in microseconds would
                  then be limited to the number of microseconds per sample frame.
                  &lt;p&gt;
                  To obtain the current position in microseconds, use the
                  &lt;code&gt;{@link DataLine#getMicrosecondPosition getMicrosecondPosition}&lt;/code&gt;
                  method of &lt;code&gt;DataLine&lt;/code&gt;.                
                <param>
                    microseconds the desired new media position, expressed in microseconds                    
                </param>
            </javadoc>
            <method name="setLoopPoints" type="void" line="181"/>
            <javadoc line="181">
                Sets the first and last sample frames that will be played in
                  the loop.  The ending point must be greater than
                  or equal to the starting point, and both must fall within the
                  the size of the loaded media.  A value of 0 for the starting
                  point means the beginning of the loaded media.  Similarly, a value of -1
                  for the ending point indicates the last frame of the media.                
                <param>
                    start the loop&apos;s starting position, in sample frames (zero-based)                    
                </param>
                <param>
                    end the loop&apos;s ending position, in sample frames (zero-based), or
                      -1 to indicate the final frame                    
                </param>
                <throws>
                    IllegalArgumentException if the requested
                      loop points cannot be set, usually because one or both falls outside
                      the media&apos;s duration or because the ending point is
                      before the starting point                    
                </throws>
            </javadoc>
            <method name="loop" type="void" line="198"/>
            <javadoc line="198">
                Starts looping playback from the current position.   Playback will
                  continue to the loop&apos;s end point, then loop back to the loop start point
                  &lt;code&gt;count&lt;/code&gt; times, and finally continue playback to the end of
                  the clip.
                  &lt;p&gt;
                  If the current position when this method is invoked is greater than the
                  loop end point, playback simply continues to the
                  end of the clip without looping.
                  &lt;p&gt;
                  A &lt;code&gt;count&lt;/code&gt; value of 0 indicates that any current looping should
                  cease and playback should continue to the end of the clip.  The behavior
                  is undefined when this method is invoked with any other value during a
                  loop operation.
                  &lt;p&gt;
                  If playback is stopped during looping, the current loop status is
                  cleared; the behavior of subsequent loop and start requests is not
                  affected by an interrupted loop operation.                
                <param>
                    count the number of times playback should loop back from the
                      loop&apos;s end position to the loop&apos;s  start position, or
                      &lt;code&gt;{@link #LOOP_CONTINUOUSLY}&lt;/code&gt; to indicate that looping should
                      continue until interrupted                    
                </param>
            </javadoc>
        </interface>
    </source>