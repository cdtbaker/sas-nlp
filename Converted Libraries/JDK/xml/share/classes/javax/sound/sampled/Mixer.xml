<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.sound.sampled">
        <interface name="Mixer">
            <implements interface="Line"/>
            <comment line="146">
                $$fb 2002-04-12: fix for 4667258: behavior of Mixer.getMaxLines(Line.Info) method doesn&apos;t match the spec                
            </comment>
            <comment line="352">
                class Info                
            </comment>
            <javadoc line="29">
                A mixer is an audio device with one or more lines.  It need not be
                  designed for mixing audio signals.  A mixer that actually mixes audio
                  has multiple input (source) lines and at least one output (target) line.
                  The former are often instances of classes that implement
                  &lt;code&gt;{@link SourceDataLine}&lt;/code&gt;,
                  and the latter, &lt;code&gt;{@link TargetDataLine}&lt;/code&gt;.  &lt;code&gt;{@link Port}&lt;/code&gt;
                  objects, too, are either source lines or target lines.
                  A mixer can accept prerecorded, loopable sound as input, by having
                  some of its source lines be instances of objects that implement the
                  &lt;code&gt;{@link Clip}&lt;/code&gt; interface.
                  &lt;p&gt;
                  Through methods of the &lt;code&gt;Line&lt;/code&gt; interface, which &lt;code&gt;Mixer&lt;/code&gt; extends,
                  a mixer might provide a set of controls that are global to the mixer.  For example,
                  the mixer can have a master gain control.  These global controls are distinct
                  from the controls belonging to each of the mixer&apos;s individual lines.
                  &lt;p&gt;
                  Some mixers, especially
                  those with internal digital mixing capabilities, may provide
                  additional capabilities by implementing the &lt;code&gt;DataLine&lt;/code&gt; interface.
                  &lt;p&gt;
                  A mixer can support synchronization of its lines.  When one line in
                  a synchronized group is started or stopped, the other lines in the group
                  automatically start or stop simultaneously with the explicitly affected one.                
                <author>
                    Kara Kytle                    
                </author>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getMixerInfo" type="Info" line="59"/>
            <javadoc line="59">
                Obtains information about this mixer, including the product&apos;s name,
                  version, vendor, etc.                
                <return>
                    a mixer info object that describes this mixer                    
                </return>
                <see>
                    Mixer.Info                    
                </see>
            </javadoc>
            <method name="getSourceLineInfo" type="Line.Info[]" line="68"/>
            <javadoc line="68">
                Obtains information about the set of source lines supported
                  by this mixer.
                  Some source lines may only be available when this mixer is open.                
                <return>
                    array of <code>Line.Info</code> objects representing source lines
                      for this mixer.  If no source lines are supported,
                      an array of length 0 is returned.                    
                </return>
            </javadoc>
            <method name="getTargetLineInfo" type="Line.Info[]" line="78"/>
            <javadoc line="78">
                Obtains information about the set of target lines supported
                  by this mixer.
                  Some target lines may only be available when this mixer is open.                
                <return>
                    array of <code>Line.Info</code> objects representing target lines
                      for this mixer.  If no target lines are supported,
                      an array of length 0 is returned.                    
                </return>
            </javadoc>
            <method name="getSourceLineInfo" type="Line.Info[]" line="89"/>
            <javadoc line="89">
                Obtains information about source lines of a particular type supported
                  by the mixer.
                  Some source lines may only be available when this mixer is open.                
                <param>
                    info a <code>Line.Info</code> object describing lines about which information
                      is queried                    
                </param>
                <return>
                    an array of <code>Line.Info</code> objects describing source lines matching
                      the type requested.  If no matching source lines are supported, an array of length 0
                      is returned.                    
                </return>
            </javadoc>
            <method name="getTargetLineInfo" type="Line.Info[]" line="102"/>
            <javadoc line="102">
                Obtains information about target lines of a particular type supported
                  by the mixer.
                  Some target lines may only be available when this mixer is open.                
                <param>
                    info a <code>Line.Info</code> object describing lines about which information
                      is queried                    
                </param>
                <return>
                    an array of <code>Line.Info</code> objects describing target lines matching
                      the type requested.  If no matching target lines are supported, an array of length 0
                      is returned.                    
                </return>
            </javadoc>
            <method name="isLineSupported" type="boolean" line="115"/>
            <javadoc line="115">
                Indicates whether the mixer supports a line (or lines) that match
                  the specified &lt;code&gt;Line.Info&lt;/code&gt; object.
                  Some lines may only be supported when this mixer is open.                
                <param>
                    info describes the line for which support is queried                    
                </param>
                <return>
                    <code>true</code> if at least one matching line is
                      supported, <code>false</code> otherwise                    
                </return>
            </javadoc>
            <method name="getLine" type="Line" line="125"/>
            <javadoc line="125">
                Obtains a line that is available for use and that matches the description
                  in the specified &lt;code&gt;Line.Info&lt;/code&gt; object.
                  &lt;p&gt;If a &lt;code&gt;DataLine&lt;/code&gt; is requested, and &lt;code&gt;info&lt;/code&gt;
                  is an instance of &lt;code&gt;DataLine.Info&lt;/code&gt; specifying at
                  least one fully qualified audio format, the last one
                  will be used as the default format of the returned
                  &lt;code&gt;DataLine&lt;/code&gt;.                
                <param>
                    info describes the desired line                    
                </param>
                <throws>
                    LineUnavailableException if a matching line
                      is not available due to resource restrictions                    
                </throws>
                <throws>
                    IllegalArgumentException if this mixer does
                      not support any lines matching the description                    
                </throws>
                <throws>
                    SecurityException if a matching line
                      is not available due to security restrictions                    
                </throws>
            </javadoc>
            <method name="getMaxLines" type="int" line="146"/>
            <javadoc line="146">
                Obtains the approximate maximum number of lines of the requested type that can be open
                  simultaneously on the mixer.
                  Certain types of mixers do not have a hard bound and may allow opening more lines.
                  Since certain lines are a shared resource, a mixer may not be able to open the maximum
                  number of lines if another process has opened lines of this mixer.
                  The requested type is any line that matches the description in
                  the provided &lt;code&gt;Line.Info&lt;/code&gt; object.  For example, if the info
                  object represents a speaker
                  port, and the mixer supports exactly one speaker port, this method
                  should return 1.  If the info object represents a source data line
                  and the mixer supports the use of 32 source data lines simultaneously,
                  the return value should be 32.
                  If there is no limit, this function returns &lt;code&gt;AudioSystem.NOT_SPECIFIED&lt;/code&gt;.                
                <param>
                    info a <code>Line.Info</code> that describes the line for which
                      the number of supported instances is queried                    
                </param>
                <return>
                    the maximum number of matching lines supported, or <code>AudioSystem.NOT_SPECIFIED</code>                    
                </return>
            </javadoc>
            <method name="getSourceLines" type="Line[]" line="169"/>
            <javadoc line="169">
                Obtains the set of all source lines currently open to this mixer.                
                <return>
                    the source lines currently open to the mixer.
                      If no source lines are currently open to this mixer,  an
                      array of length 0 is returned.                    
                </return>
                <throws>
                    SecurityException if the matching lines
                      are not available due to security restrictions                    
                </throws>
            </javadoc>
            <method name="getTargetLines" type="Line[]" line="180"/>
            <javadoc line="180">
                Obtains the set of all target lines currently open from this mixer.                
                <return>
                    target lines currently open from the mixer.
                      If no target lines are currently open from this mixer, an
                      array of length 0 is returned.                    
                </return>
                <throws>
                    SecurityException if the matching lines
                      are not available due to security restrictions                    
                </throws>
            </javadoc>
            <method name="synchronize" type="void" line="191"/>
            <javadoc line="191">
                Synchronizes two or more lines.  Any subsequent command that starts or stops
                  audio playback or capture for one of these lines will exert the
                  same effect on the other lines in the group, so that they start or stop playing or
                  capturing data simultaneously.                
                <param>
                    lines the lines that should be synchronized                    
                </param>
                <param>
                    maintainSync <code>true</code> if the synchronization
                      must be precisely maintained (i.e., the synchronization must be sample-accurate)
                      at all times during operation of the lines , or <code>false</code>
                      if precise synchronization is required only during start and stop operations                    
                </param>
                <throws>
                    IllegalArgumentException if the lines cannot be synchronized.
                      This may occur if the lines are of different types or have different
                      formats for which this mixer does not support synchronization, or if
                      all lines specified do not belong to this mixer.                    
                </throws>
            </javadoc>
            <method name="unsynchronize" type="void" line="210"/>
            <javadoc line="210">
                Releases synchronization for the specified lines.  The array must
                  be identical to one for which synchronization has already been
                  established; otherwise an exception may be thrown.  However, &lt;code&gt;null&lt;/code&gt;
                  may be specified, in which case all currently synchronized lines that belong
                  to this mixer are unsynchronized.                
                <param>
                    lines the synchronized lines for which synchronization should be
                      released, or <code>null</code> for all this mixer's synchronized lines                    
                </param>
                <throws>
                    IllegalArgumentException if the lines cannot be unsynchronized.
                      This may occur if the argument specified does not exactly match a set
                      of lines for which synchronization has already been established.                    
                </throws>
            </javadoc>
            <method name="isSynchronizationSupported" type="boolean" line="226"/>
            <javadoc line="226">
                Reports whether this mixer supports synchronization of the specified set of lines.                
                <param>
                    lines the set of lines for which synchronization support is queried                    
                </param>
                <param>
                    maintainSync <code>true</code> if the synchronization
                      must be precisely maintained (i.e., the synchronization must be sample-accurate)
                      at all times during operation of the lines , or <code>false</code>
                      if precise synchronization is required only during start and stop operations                    
                </param>
                <return>
                    <code>true</code> if the lines can be synchronized, <code>false</code>
                      otherwise                    
                </return>
            </javadoc>
            <class name="Info" line="241">
                <javadoc line="241">
                    The &lt;code&gt;Mixer.Info&lt;/code&gt; class represents information about an audio mixer,
                      including the product&apos;s name, version, and vendor, along with a textual
                      description.  This information may be retrieved through the{@link Mixer#getMixerInfo() getMixerInfo}method of the &lt;code&gt;Mixer&lt;/code&gt; interface.                    
                    <author>
                        Kara Kytle                        
                    </author>
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <declaration name="name" type="String" line="253"/>
                <javadoc line="253">
                    Mixer name.                    
                </javadoc>
                <declaration name="vendor" type="String" line="258"/>
                <javadoc line="258">
                    Mixer vendor.                    
                </javadoc>
                <declaration name="description" type="String" line="263"/>
                <javadoc line="263">
                    Mixer description.                    
                </javadoc>
                <declaration name="version" type="String" line="268"/>
                <javadoc line="268">
                    Mixer version.                    
                </javadoc>
                <javadoc line="273">
                    Constructs a mixer&apos;s info object, passing it the given
                      textual information.                    
                    <param>
                        name the name of the mixer                        
                    </param>
                    <param>
                        vendor the company who manufactures or creates the hardware
                          or software mixer                        
                    </param>
                    <param>
                        description descriptive text about the mixer                        
                    </param>
                    <param>
                        version version information for the mixer                        
                    </param>
                </javadoc>
                <method name="Info" type="constructor" line="282">
                    <params>
                        <param name="name" type="String"/>
                        <param name="vendor" type="String"/>
                        <param name="description" type="String"/>
                        <param name="version" type="String"/>
                    </params>
                </method>
                <javadoc line="291">
                    Indicates whether two info objects are equal, returning &lt;code&gt;true&lt;/code&gt; if
                      they are identical.                    
                    <param>
                        obj the reference object with which to compare this info
                          object                        
                    </param>
                    <return>
                        <code>true</code> if this info object is the same as the
                          <code>obj</code> argument; <code>false</code> otherwise                        
                    </return>
                </javadoc>
                <method name="equals" type="boolean" line="299">
                    <params>
                        <param name="obj" type="Object"/>
                    </params>
                </method>
                <javadoc line="303">
                    Finalizes the hashcode method.                    
                    <return>
                        the hashcode for this object                        
                    </return>
                </javadoc>
                <method name="hashCode" type="int" line="308"/>
                <javadoc line="312">
                    Obtains the name of the mixer.                    
                    <return>
                        a string that names the mixer                        
                    </return>
                </javadoc>
                <method name="getName" type="String" line="316"/>
                <javadoc line="320">
                    Obtains the vendor of the mixer.                    
                    <return>
                        a string that names the mixer's vendor                        
                    </return>
                </javadoc>
                <method name="getVendor" type="String" line="324"/>
                <javadoc line="328">
                    Obtains the description of the mixer.                    
                    <return>
                        a textual description of the mixer                        
                    </return>
                </javadoc>
                <method name="getDescription" type="String" line="332"/>
                <javadoc line="336">
                    Obtains the version of the mixer.                    
                    <return>
                        textual version information for the mixer                        
                    </return>
                </javadoc>
                <method name="getVersion" type="String" line="340"/>
                <javadoc line="344">
                    Provides a string representation of the mixer info.                    
                    <return>
                        a string describing the info object                        
                    </return>
                </javadoc>
                <method name="toString" type="String" line="348"/>
            </class>
        </interface>
    </source>