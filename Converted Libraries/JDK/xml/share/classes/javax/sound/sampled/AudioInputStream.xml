<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.sound.sampled">
        <import package="java.io.InputStream"/>
        <import package="java.io.PushbackInputStream"/>
        <import package="java.io.IOException"/>
        <class name="AudioInputStream" line="5">
            <extends class="InputStream"/>
            <javadoc line="5">
                An audio input stream is an input stream with a specified audio format and
                  length.  The length is expressed in sample frames, not bytes.
                  Several methods are provided for reading a certain number of bytes from
                  the stream, or an unspecified number of bytes.
                  The audio input stream keeps track  of the last byte that was read.
                  You can skip over an arbitrary number of bytes to get to a later position
                  for reading. An audio input stream may support marks.  When you set a mark,
                  the current position is remembered so that you can return to it later.
                  &lt;p&gt;
                  The &lt;code&gt;AudioSystem&lt;/code&gt; class includes many methods that manipulate
                  &lt;code&gt;AudioInputStream&lt;/code&gt; objects.
                  For example, the methods let you:
                  &lt;ul&gt;
                  &lt;li&gt; obtain an
                  audio input stream from an external audio file, stream, or URL
                  &lt;li&gt; write an external file from an audio input stream
                  &lt;li&gt; convert an audio input stream to a different audio format
                  &lt;/ul&gt;                
                <author>
                    David Rivas                    
                </author>
                <author>
                    Kara Kytle                    
                </author>
                <author>
                    Florian Bomers                    
                </author>
                <see>
                    AudioSystem                    
                </see>
                <see>
                    Clip#open(AudioInputStream) Clip.open(AudioInputStream)                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <declaration name="stream" type="InputStream" line="32"/>
            <javadoc line="32">
                The &lt;code&gt;InputStream&lt;/code&gt; from which this &lt;code&gt;AudioInputStream&lt;/code&gt;
                  object was constructed.                
            </javadoc>
            <declaration name="format" type="AudioFormat" line="37"/>
            <javadoc line="37">
                The format of the audio data contained in the stream.                
            </javadoc>
            <declaration name="frameLength" type="long" line="41"/>
            <javadoc line="41">
                This stream&apos;s length, in sample frames.                
            </javadoc>
            <declaration name="frameSize" type="int" line="45"/>
            <javadoc line="45">
                The size of each frame, in bytes.                
            </javadoc>
            <declaration name="framePos" type="long" line="49"/>
            <javadoc line="49">
                The current position in this stream, in sample frames (zero-based).                
            </javadoc>
            <declaration name="markpos" type="long" line="53"/>
            <javadoc line="53">
                The position where a mark was set.                
            </javadoc>
            <declaration name="pushBackBuffer" type="byte[]" line="57"/>
            <javadoc line="57">
                When the underlying stream could only return
                  a non-integral number of frames, store
                  the remainder in a temporary buffer                
            </javadoc>
            <declaration name="pushBackLen" type="int" line="63"/>
            <javadoc line="63">
                number of valid bytes in the pushBackBuffer                
            </javadoc>
            <declaration name="markPushBackBuffer" type="byte[]" line="67"/>
            <javadoc line="67">
                MarkBuffer at mark position                
            </javadoc>
            <declaration name="markPushBackLen" type="int" line="71"/>
            <javadoc line="71">
                number of valid bytes in the markPushBackBuffer                
            </javadoc>
            <javadoc line="75">
                Constructs an audio input stream that has the requested format and length in sample frames,
                  using audio data from the specified input stream.                
                <param>
                    stream the stream on which this &lt;code&gt;AudioInputStream&lt;/code&gt;
                      object is based                    
                </param>
                <param>
                    format the format of this stream&apos;s audio data                    
                </param>
                <param>
                    length the length in sample frames of the data in this stream                    
                </param>
            </javadoc>
            <method name="AudioInputStream" type="constructor" line="83">
                <params>
                    <param name="stream" type="InputStream"/>
                    <param name="format" type="AudioFormat"/>
                    <param name="length" type="long"/>
                </params>
                <scope line="88"/>
            </method>
            <javadoc line="95">
                Constructs an audio input stream that reads its data from the target
                  data line indicated.  The format of the stream is the same as that of
                  the target data line, and the length is AudioSystem#NOT_SPECIFIED.                
                <param>
                    line the target data line from which this stream obtains its data.                    
                </param>
                <see>
                    AudioSystem#NOT_SPECIFIED                    
                </see>
            </javadoc>
            <method name="AudioInputStream" type="constructor" line="102">
                <params>
                    <param name="line" type="TargetDataLine"/>
                </params>
                <declaration name="tstream" type="TargetDataLineInputStream" line="103"/>
                <scope line="107"/>
            </method>
            <javadoc line="114">
                Obtains the audio format of the sound data in this audio input stream.                
                <return>
                    an audio format object describing this stream&apos;s format                    
                </return>
            </javadoc>
            <method name="getFormat" type="AudioFormat" line="118"/>
            <javadoc line="121">
                Obtains the length of the stream, expressed in sample frames rather than bytes.                
                <return>
                    the length in sample frames                    
                </return>
            </javadoc>
            <method name="getFrameLength" type="long" line="125"/>
            <javadoc line="128">
                Reads the next byte of data from the audio input stream.  The audio input
                  stream&apos;s frame size must be one byte, or an &lt;code&gt;IOException&lt;/code&gt;
                  will be thrown.                
                <return>
                    the next byte of data, or -1 if the end of the stream is reached                    
                </return>
                <throws>
                    IOException if an input or output error occurs                    
                </throws>
                <see>
                    #read(byte[],int,int)                    
                </see>
                <see>
                    #read(byte[])                    
                </see>
                <see>
                    #available&lt;p&gt;                    
                </see>
            </javadoc>
            <method name="read" type="int" line="138">
                <scope line="139"/>
                <declaration name="data" type="byte[]" line="142"/>
                <declaration name="temp" type="int" line="143"/>
                <scope line="144"/>
            </method>
            <javadoc line="149">
                Reads some number of bytes from the audio input stream and stores them into
                  the buffer array &lt;code&gt;b&lt;/code&gt;. The number of bytes actually read is
                  returned as an integer. This method blocks until input data is
                  available, the end of the stream is detected, or an exception is thrown.
                  &lt;p&gt;This method will always read an integral number of frames.
                  If the length of the array is not an integral number
                  of frames, a maximum of &lt;code&gt;b.length - (b.length % frameSize)
                  &lt;/code&gt; bytes will be read.                
                <param>
                    b the buffer into which the data is read                    
                </param>
                <return>
                    the total number of bytes read into the buffer, or -1 if there
                      is no more data because the end of the stream has been reached                    
                </return>
                <throws>
                    IOException if an input or output error occurs                    
                </throws>
                <see>
                    #read(byte[],int,int)                    
                </see>
                <see>
                    #read()                    
                </see>
                <see>
                    #available                    
                </see>
            </javadoc>
            <method name="read" type="int" line="166">
                <params>
                    <param name="b" type="byte[]"/>
                </params>
            </method>
            <javadoc line="169">
                Reads up to a specified maximum number of bytes of data from the audio
                  stream, putting them into the given byte array.
                  &lt;p&gt;This method will always read an integral number of frames.
                  If &lt;code&gt;len&lt;/code&gt; does not specify an integral number
                  of frames, a maximum of &lt;code&gt;len - (len % frameSize)
                  &lt;/code&gt; bytes will be read.                
                <param>
                    b the buffer into which the data is read                    
                </param>
                <param>
                    off the offset, from the beginning of array &lt;code&gt;b&lt;/code&gt;, at which
                      the data will be written                    
                </param>
                <param>
                    len the maximum number of bytes to read                    
                </param>
                <return>
                    the total number of bytes read into the buffer, or -1 if there
                      is no more data because the end of the stream has been reached                    
                </return>
                <throws>
                    IOException if an input or output error occurs                    
                </throws>
                <see>
                    #read(byte[])                    
                </see>
                <see>
                    #read()                    
                </see>
                <see>
                    #skip                    
                </see>
                <see>
                    #available                    
                </see>
            </javadoc>
            <method name="read" type="int" line="188">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="off" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="189">
                    <scope line="191"/>
                </scope>
                <scope line="195">
                    <scope line="196"/>
                    <scope line="199">
                        <scope line="200"/>
                    </scope>
                </scope>
                <declaration name="bytesRead" type="int" line="205"/>
                <declaration name="thisOff" type="int" line="206"/>
                <scope line="207"/>
                <declaration name="thisBytesRead" type="int" line="214"/>
                <scope line="215"/>
                <scope line="218"/>
                <scope line="221">
                    <scope line="223">
                        <scope line="224"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="234">
                Skips over and discards a specified number of bytes from this
                  audio input stream.                
                <param>
                    n the requested number of bytes to be skipped                    
                </param>
                <return>
                    the actual number of bytes skipped                    
                </return>
                <throws>
                    IOException if an input or output error occurs                    
                </throws>
                <see>
                    #read                    
                </see>
                <see>
                    #available                    
                </see>
            </javadoc>
            <method name="skip" type="long" line="243">
                <params>
                    <param name="n" type="long"/>
                </params>
                <scope line="244"/>
                <scope line="247">
                    <scope line="248"/>
                </scope>
                <declaration name="temp" type="long" line="252"/>
                <scope line="253"/>
                <scope line="256"/>
            </method>
            <javadoc line="261">
                Returns the maximum number of bytes that can be read (or skipped over) from this
                  audio input stream without blocking.  This limit applies only to the next invocation of
                  a &lt;code&gt;read&lt;/code&gt; or &lt;code&gt;skip&lt;/code&gt; method for this audio input stream; the limit
                  can vary each time these methods are invoked.
                  Depending on the underlying stream,an IOException may be thrown if this
                  stream is closed.                
                <return>
                    the number of bytes that can be read from this audio input stream without blocking                    
                </return>
                <throws>
                    IOException if an input or output error occurs                    
                </throws>
                <see>
                    #read(byte[],int,int)                    
                </see>
                <see>
                    #read(byte[])                    
                </see>
                <see>
                    #read()                    
                </see>
                <see>
                    #skip                    
                </see>
            </javadoc>
            <method name="available" type="int" line="275">
                <declaration name="temp" type="int" line="276"/>
                <scope line="277"/>
                <scope line="280"/>
            </method>
            <javadoc line="284">
                Closes this audio input stream and releases any system resources associated
                  with the stream.                
                <throws>
                    IOException if an input or output error occurs                    
                </throws>
            </javadoc>
            <method name="close" type="void" line="289"/>
            <javadoc line="292">
                Marks the current position in this audio input stream.                
                <param>
                    readlimit the maximum number of bytes that can be read before
                      the mark position becomes invalid.                    
                </param>
                <see>
                    #reset                    
                </see>
                <see>
                    #markSupported                    
                </see>
            </javadoc>
            <method name="mark" type="void" line="299">
                <params>
                    <param name="readlimit" type="int"/>
                </params>
                <scope line="301">
                    <scope line="304">
                        <scope line="305"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="312">
                Repositions this audio input stream to the position it had at the time its
                  &lt;code&gt;mark&lt;/code&gt; method was last invoked.                
                <throws>
                    IOException if an input or output error occurs.                    
                </throws>
                <see>
                    #mark                    
                </see>
                <see>
                    #markSupported                    
                </see>
            </javadoc>
            <method name="reset" type="void" line="319">
                <scope line="323">
                    <scope line="324"/>
                </scope>
            </method>
            <javadoc line="330">
                Tests whether this audio input stream supports the &lt;code&gt;mark&lt;/code&gt; and
                  &lt;code&gt;reset&lt;/code&gt; methods.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if this stream supports the &lt;code&gt;mark&lt;/code&gt;
                      and &lt;code&gt;reset&lt;/code&gt; methods; &lt;code&gt;false&lt;/code&gt; otherwise                    
                </return>
                <see>
                    #mark                    
                </see>
                <see>
                    #reset                    
                </see>
            </javadoc>
            <method name="markSupported" type="boolean" line="338"/>
            <class name="TargetDataLineInputStream" line="341">
                <extends class="InputStream"/>
                <javadoc line="341">
                    Private inner class that makes a TargetDataLine look like an InputStream.                    
                </javadoc>
                <declaration name="line" type="TargetDataLine" line="345"/>
                <javadoc line="345">
                    The TargetDataLine on which this TargetDataLineInputStream is based.                    
                </javadoc>
                <method name="TargetDataLineInputStream" type="constructor" line="349">
                    <params>
                        <param name="line" type="TargetDataLine"/>
                    </params>
                </method>
                <method name="available" type="int" line="353"/>
                <method name="close" type="void" line="356">
                    <scope line="357"/>
                </method>
                <method name="read" type="int" line="363">
                    <declaration name="b" type="byte[]" line="364"/>
                    <declaration name="value" type="int" line="365"/>
                    <scope line="366"/>
                    <scope line="370"/>
                </method>
                <method name="read" type="int" line="375">
                    <params>
                        <param name="b" type="byte[]"/>
                        <param name="off" type="int"/>
                        <param name="len" type="int"/>
                    </params>
                    <scope line="376"/>
                    <scope line="379"/>
                </method>
            </class>
        </class>
    </source>