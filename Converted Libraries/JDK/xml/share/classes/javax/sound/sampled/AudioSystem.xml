<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.sound.sampled">
        <import package="java.io.File"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.OutputStream"/>
        <import package="java.net.URL"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.List"/>
        <import package="java.util.Set"/>
        <import package="java.util.Vector"/>
        <import package="java.util.ArrayList"/>
        <import package="javax.sound.sampled.spi.AudioFileWriter"/>
        <import package="javax.sound.sampled.spi.AudioFileReader"/>
        <import package="javax.sound.sampled.spi.FormatConversionProvider"/>
        <import package="javax.sound.sampled.spi.MixerProvider"/>
        <import package="com.sun.media.sound.JDK13Services"/>
        <class name="AudioSystem" line="17">
            <javadoc line="17">
                The &lt;code&gt;AudioSystem&lt;/code&gt; class acts as the entry point to the
                  sampled-audio system resources. This class lets you query and
                  access the mixers that are installed on the system.
                  &lt;code&gt;AudioSystem&lt;/code&gt; includes a number of
                  methods for converting audio data between different formats, and for
                  translating between audio files and streams. It also provides a method
                  for obtaining a &lt;code&gt;{@link Line}&lt;/code&gt; directly from the
                  &lt;code&gt;AudioSystem&lt;/code&gt; without dealing explicitly
                  with mixers.
                  &lt;p&gt;Properties can be used to specify the default mixer
                  for specific line types.
                  Both system properties and a properties file are considered.
                  In the Oracle reference implementation, the properties file is
                  &amp;quot;lib/sound.properties&amp;quot; in the JRE
                  directory. If a property exists both as a system property and in the
                  properties file, the system property takes precedence. If none is
                  specified, a suitable default is chosen among the available devices.
                  The syntax of the properties file is specified in{@link java.util.Properties#load(InputStream) Properties.load}. The
                  following table lists the available property keys and which methods
                  consider them:
                  &lt;table border=0&gt;
                  &lt;tr&gt;
                  &lt;th&gt;Property Key&lt;/th&gt;
                  &lt;th&gt;Interface&lt;/th&gt;
                  &lt;th&gt;Affected Method(s)&lt;/th&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;&lt;code&gt;javax.sound.sampled.Clip&lt;/code&gt;&lt;/td&gt;
                  &lt;td&gt;{@link Clip}&lt;/td&gt;
                  &lt;td&gt;{@link #getLine}, {@link #getClip}&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;&lt;code&gt;javax.sound.sampled.Port&lt;/code&gt;&lt;/td&gt;
                  &lt;td&gt;{@link Port}&lt;/td&gt;
                  &lt;td&gt;{@link #getLine}&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;&lt;code&gt;javax.sound.sampled.SourceDataLine&lt;/code&gt;&lt;/td&gt;
                  &lt;td&gt;{@link SourceDataLine}&lt;/td&gt;
                  &lt;td&gt;{@link #getLine}, {@link #getSourceDataLine}&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;&lt;code&gt;javax.sound.sampled.TargetDataLine&lt;/code&gt;&lt;/td&gt;
                  &lt;td&gt;{@link TargetDataLine}&lt;/td&gt;
                  &lt;td&gt;{@link #getLine}, {@link #getTargetDataLine}&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;
                  The property value consists of the provider class name
                  and the mixer name, separated by the hash mark (&amp;quot;#&amp;quot;).
                  The provider class name is the fully-qualified
                  name of a concrete {@link javax.sound.sampled.spi.MixerProvidermixer provider} class. The mixer name is matched against
                  the &lt;code&gt;String&lt;/code&gt; returned by the &lt;code&gt;getName&lt;/code&gt;
                  method of &lt;code&gt;Mixer.Info&lt;/code&gt;.
                  Either the class name, or the mixer name may be omitted.
                  If only the class name is specified, the trailing hash mark
                  is optional.
                  &lt;p&gt;If the provider class is specified, and it can be
                  successully retrieved from the installed providers, the list of
                  &lt;code&gt;Mixer.Info&lt;/code&gt; objects is retrieved
                  from the provider. Otherwise, or when these mixers
                  do not provide a subsequent match, the list is retrieved
                  from {@link #getMixerInfo} to contain
                  all available &lt;code&gt;Mixer.Info&lt;/code&gt; objects.
                  &lt;p&gt;If a mixer name is specified, the resulting list of
                  &lt;code&gt;Mixer.Info&lt;/code&gt; objects is searched:
                  the first one with a matching name, and whose
                  &lt;code&gt;Mixer&lt;/code&gt; provides the
                  respective line interface, will be returned.
                  If no matching &lt;code&gt;Mixer.Info&lt;/code&gt; object
                  is found, or the mixer name is not specified,
                  the first mixer from the resulting
                  list, which provides the respective line
                  interface, will be returned.
                  For example, the property &lt;code&gt;javax.sound.sampled.Clip&lt;/code&gt;
                  with a value
                  &lt;code&gt;&amp;quot;com.sun.media.sound.MixerProvider#SunClip&amp;quot;&lt;/code&gt;
                  will have the following consequences when
                  &lt;code&gt;getLine&lt;/code&gt; is called requesting a &lt;code&gt;Clip&lt;/code&gt;
                  instance:
                  if the class &lt;code&gt;com.sun.media.sound.MixerProvider&lt;/code&gt; exists
                  in the list of installed mixer providers,
                  the first &lt;code&gt;Clip&lt;/code&gt; from the first mixer with name
                  &lt;code&gt;&amp;quot;SunClip&amp;quot;&lt;/code&gt; will be returned. If it cannot
                  be found, the first &lt;code&gt;Clip&lt;/code&gt; from the first mixer
                  of the specified provider will be returned, regardless of name.
                  If there is none, the first &lt;code&gt;Clip&lt;/code&gt; from the first
                  &lt;code&gt;Mixer&lt;/code&gt; with name
                  &lt;code&gt;&amp;quot;SunClip&amp;quot;&lt;/code&gt; in the list of all mixers
                  (as returned by &lt;code&gt;getMixerInfo&lt;/code&gt;) will be returned,
                  or, if not found, the first &lt;code&gt;Clip&lt;/code&gt; of the first
                  &lt;code&gt;Mixer&lt;/code&gt;that can be found in the list of all
                  mixers is returned.
                  If that fails, too, an &lt;code&gt;IllegalArgumentException&lt;/code&gt;
                  is thrown.                
                <author>
                    Kara Kytle                    
                </author>
                <author>
                    Florian Bomers                    
                </author>
                <author>
                    Matthias Pfisterer                    
                </author>
                <author>
                    Kevin P. Smith                    
                </author>
                <see>
                    AudioFormat                    
                </see>
                <see>
                    AudioInputStream                    
                </see>
                <see>
                    Mixer                    
                </see>
                <see>
                    Line                    
                </see>
                <see>
                    Line.Info                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <declaration name="NOT_SPECIFIED" type="int" line="124"/>
            <javadoc line="124">
                An integer that stands for an unknown numeric value.
                  This value is appropriate only for signed quantities that do not
                  normally take negative values.  Examples include file sizes, frame
                  sizes, buffer sizes, and sample rates.
                  A number of Java Sound constructors accept
                  a value of &lt;code&gt;NOT_SPECIFIED&lt;/code&gt; for such parameters.  Other
                  methods may also accept or return this value, as documented.                
            </javadoc>
            <javadoc line="134">
                Private no-args constructor for ensuring against instantiation.                
            </javadoc>
            <method name="AudioSystem" type="constructor" line="137"/>
            <javadoc line="139">
                Obtains an array of mixer info objects that represents
                  the set of audio mixers that are currently installed on the system.                
                <return>
                    an array of info objects for the currently installed mixers.  If no mixers
                      are available on the system, an array of length 0 is returned.                    
                </return>
                <see>
                    #getMixer                    
                </see>
            </javadoc>
            <method name="getMixerInfo" type="Mixer.Info[]" line="146">
                <declaration name="infos" type="List" line="147"/>
                <declaration name="allInfos" type="Mixer.Info[]" line="148"/>
            </method>
            <javadoc line="151">
                Obtains the requested audio mixer.                
                <param>
                    info a <code>Mixer.Info</code> object representing the desired
                      mixer, or <code>null</code> for the system default mixer                    
                </param>
                <return>
                    the requested mixer                    
                </return>
                <throws>
                    SecurityException if the requested mixer
                      is unavailable because of security restrictions                    
                </throws>
                <throws>
                    IllegalArgumentException if the info object does not represent
                      a mixer installed on the system                    
                </throws>
                <see>
                    #getMixerInfo                    
                </see>
            </javadoc>
            <method name="getMixer" type="Mixer" line="162">
                <params>
                    <param name="info" type="Mixer.Info"/>
                </params>
                <declaration name="mixer" type="Mixer" line="163"/>
                <declaration name="providers" type="List" line="164"/>
                <scope line="165">
                    <scope line="166"/>
                    <scope line="169"/>
                    <scope line="171"/>
                </scope>
                <scope line="174">
                    <scope line="175">
                        <scope line="176">
                            <declaration name="provider" type="MixerProvider" line="177"/>
                            <declaration name="infos" type="Mixer.Info[]" line="178"/>
                            <scope line="179">
                                <scope line="180"/>
                                <scope line="183"/>
                            </scope>
                        </scope>
                        <scope line="187"/>
                        <scope line="189"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="195">
                Obtains information about all source lines of a particular type that are supported
                  by the installed mixers.                
                <param>
                    info a <code>Line.Info</code> object that specifies the kind of
                      lines about which information is requested                    
                </param>
                <return>
                    an array of <code>Line.Info</code> objects describing source lines matching
                      the type requested.  If no matching source lines are supported, an array of length 0
                      is returned.                    
                </return>
                <see>
                    Mixer#getSourceLineInfo(Line.Info)                    
                </see>
            </javadoc>
            <method name="getSourceLineInfo" type="Line.Info[]" line="205">
                <params>
                    <param name="info" type="Line.Info"/>
                </params>
                <declaration name="vector" type="Vector" line="206"/>
                <declaration name="currentInfoArray" type="Line.Info[]" line="207"/>
                <declaration name="mixer" type="Mixer" line="208"/>
                <declaration name="fullInfo" type="Line.Info" line="209"/>
                <declaration name="infoArray" type="Mixer.Info[]" line="210"/>
                <scope line="211">
                    <scope line="214"/>
                </scope>
                <declaration name="returnedArray" type="Line.Info[]" line="218"/>
                <scope line="219"/>
            </method>
            <javadoc line="224">
                Obtains information about all target lines of a particular type that are supported
                  by the installed mixers.                
                <param>
                    info a <code>Line.Info</code> object that specifies the kind of
                      lines about which information is requested                    
                </param>
                <return>
                    an array of <code>Line.Info</code> objects describing target lines matching
                      the type requested.  If no matching target lines are supported, an array of length 0
                      is returned.                    
                </return>
                <see>
                    Mixer#getTargetLineInfo(Line.Info)                    
                </see>
            </javadoc>
            <method name="getTargetLineInfo" type="Line.Info[]" line="234">
                <params>
                    <param name="info" type="Line.Info"/>
                </params>
                <declaration name="vector" type="Vector" line="235"/>
                <declaration name="currentInfoArray" type="Line.Info[]" line="236"/>
                <declaration name="mixer" type="Mixer" line="237"/>
                <declaration name="fullInfo" type="Line.Info" line="238"/>
                <declaration name="infoArray" type="Mixer.Info[]" line="239"/>
                <scope line="240">
                    <scope line="243"/>
                </scope>
                <declaration name="returnedArray" type="Line.Info[]" line="247"/>
                <scope line="248"/>
            </method>
            <javadoc line="253">
                Indicates whether the system supports any lines that match
                  the specified &lt;code&gt;Line.Info&lt;/code&gt; object.  A line is supported if
                  any installed mixer supports it.                
                <param>
                    info a <code>Line.Info</code> object describing the line for which support is queried                    
                </param>
                <return>
                    <code>true</code> if at least one matching line is
                      supported, otherwise <code>false</code>                    
                </return>
                <see>
                    Mixer#isLineSupported(Line.Info)                    
                </see>
            </javadoc>
            <method name="isLineSupported" type="boolean" line="262">
                <params>
                    <param name="info" type="Line.Info"/>
                </params>
                <declaration name="mixer" type="Mixer" line="263"/>
                <declaration name="infoArray" type="Mixer.Info[]" line="264"/>
                <scope line="265">
                    <scope line="266">
                        <scope line="268"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="275">
                Obtains a line that matches the description in the specified
                  &lt;code&gt;Line.Info&lt;/code&gt; object.
                  &lt;p&gt;If a &lt;code&gt;DataLine&lt;/code&gt; is requested, and &lt;code&gt;info&lt;/code&gt;
                  is an instance of &lt;code&gt;DataLine.Info&lt;/code&gt; specifying at least
                  one fully qualified audio format, the last one
                  will be used as the default format of the returned
                  &lt;code&gt;DataLine&lt;/code&gt;.
                  &lt;p&gt;If system properties
                  &lt;code&gt;javax.sound.sampled.Clip&lt;/code&gt;,
                  &lt;code&gt;javax.sound.sampled.Port&lt;/code&gt;,
                  &lt;code&gt;javax.sound.sampled.SourceDataLine&lt;/code&gt; and
                  &lt;code&gt;javax.sound.sampled.TargetDataLine&lt;/code&gt; are defined
                  or they are defined in the file &amp;quot;sound.properties&amp;quot;,
                  they are used to retrieve default lines.
                  For details, refer to the {@link AudioSystem class description}.
                  If the respective property is not set, or the mixer
                  requested in the property is not installed or does not provide the
                  requested line, all installed mixers are queried for the
                  requested line type. A Line will be returned from the first mixer
                  providing the requested line type.                
                <param>
                    info a <code>Line.Info</code> object describing the desired kind of line                    
                </param>
                <return>
                    a line of the requested kind                    
                </return>
                <throws>
                    LineUnavailableException if a matching line
                      is not available due to resource restrictions                    
                </throws>
                <throws>
                    SecurityException if a matching line
                      is not available due to security restrictions                    
                </throws>
                <throws>
                    IllegalArgumentException if the system does not
                      support at least one line matching the specified
                      <code>Line.Info</code> object
                      through any installed mixer                    
                </throws>
            </javadoc>
            <method name="getLine" type="Line" line="307">
                <params>
                    <param name="info" type="Line.Info"/>
                </params>
                <declaration name="lue" type="LineUnavailableException" line="308"/>
                <declaration name="providers" type="List" line="309"/>
                <scope line="310">
                    <declaration name="mixer" type="Mixer" line="311"/>
                    <scope line="312"/>
                </scope>
                <scope line="316"/>
                <scope line="319"/>
                <scope line="321">
                    <declaration name="provider" type="MixerProvider" line="322"/>
                    <declaration name="infos" type="Mixer.Info[]" line="323"/>
                    <scope line="324">
                        <scope line="325">
                            <declaration name="mixer" type="Mixer" line="326"/>
                            <scope line="327"/>
                        </scope>
                        <scope line="331"/>
                        <scope line="334"/>
                    </scope>
                </scope>
                <scope line="338">
                    <declaration name="provider" type="MixerProvider" line="339"/>
                    <declaration name="infos" type="Mixer.Info[]" line="340"/>
                    <scope line="341">
                        <scope line="342">
                            <declaration name="mixer" type="Mixer" line="343"/>
                            <scope line="344"/>
                        </scope>
                        <scope line="348"/>
                        <scope line="351"/>
                    </scope>
                </scope>
                <scope line="355"/>
            </method>
            <javadoc line="360">
                Obtains a clip that can be used for playing back
                  an audio file or an audio stream. The returned clip
                  will be provided by the default system mixer, or,
                  if not possible, by any other mixer installed in the
                  system that supports a &lt;code&gt;Clip&lt;/code&gt;
                  object.
                  &lt;p&gt;The returned clip must be opened with the
                  &lt;code&gt;open(AudioFormat)&lt;/code&gt; or
                  &lt;code&gt;open(AudioInputStream)&lt;/code&gt; method.
                  &lt;p&gt;This is a high-level method that uses &lt;code&gt;getMixer&lt;/code&gt;
                  and &lt;code&gt;getLine&lt;/code&gt; internally.
                  &lt;p&gt;If the system property
                  &lt;code&gt;javax.sound.sampled.Clip&lt;/code&gt;
                  is defined or it is defined in the file &amp;quot;sound.properties&amp;quot;,
                  it is used to retrieve the default clip.
                  For details, refer to the {@link AudioSystem class description}.                
                <return>
                    the desired clip object                    
                </return>
                <throws>
                    LineUnavailableException if a clip object
                      is not available due to resource restrictions                    
                </throws>
                <throws>
                    SecurityException if a clip object
                      is not available due to security restrictions                    
                </throws>
                <throws>
                    IllegalArgumentException if the system does not
                      support at least one clip instance through any installed mixer                    
                </throws>
                <see>
                    #getClip(Mixer.Info)                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getClip" type="Clip" line="387">
                <declaration name="format" type="AudioFormat" line="388"/>
                <declaration name="info" type="DataLine.Info" line="389"/>
            </method>
            <javadoc line="392">
                Obtains a clip from the specified mixer that can be
                  used for playing back an audio file or an audio stream.
                  &lt;p&gt;The returned clip must be opened with the
                  &lt;code&gt;open(AudioFormat)&lt;/code&gt; or
                  &lt;code&gt;open(AudioInputStream)&lt;/code&gt; method.
                  &lt;p&gt;This is a high-level method that uses &lt;code&gt;getMixer&lt;/code&gt;
                  and &lt;code&gt;getLine&lt;/code&gt; internally.                
                <param>
                    mixerInfo a <code>Mixer.Info</code> object representing the
                      desired mixer, or <code>null</code> for the system default mixer                    
                </param>
                <return>
                    a clip object from the specified mixer                    
                </return>
                <throws>
                    LineUnavailableException if a clip
                      is not available from this mixer due to resource restrictions                    
                </throws>
                <throws>
                    SecurityException if a clip
                      is not available from this mixer due to security restrictions                    
                </throws>
                <throws>
                    IllegalArgumentException if the system does not
                      support at least one clip through the specified mixer                    
                </throws>
                <see>
                    #getClip()                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getClip" type="Clip" line="412">
                <params>
                    <param name="mixerInfo" type="Mixer.Info"/>
                </params>
                <declaration name="format" type="AudioFormat" line="413"/>
                <declaration name="info" type="DataLine.Info" line="414"/>
                <declaration name="mixer" type="Mixer" line="415"/>
            </method>
            <javadoc line="418">
                Obtains a source data line that can be used for playing back
                  audio data in the format specified by the
                  &lt;code&gt;AudioFormat&lt;/code&gt; object. The returned line
                  will be provided by the default system mixer, or,
                  if not possible, by any other mixer installed in the
                  system that supports a matching
                  &lt;code&gt;SourceDataLine&lt;/code&gt; object.
                  &lt;p&gt;The returned line should be opened with the
                  &lt;code&gt;open(AudioFormat)&lt;/code&gt; or
                  &lt;code&gt;open(AudioFormat, int)&lt;/code&gt; method.
                  &lt;p&gt;This is a high-level method that uses &lt;code&gt;getMixer&lt;/code&gt;
                  and &lt;code&gt;getLine&lt;/code&gt; internally.
                  &lt;p&gt;The returned &lt;code&gt;SourceDataLine&lt;/code&gt;&apos;s default
                  audio format will be initialized with &lt;code&gt;format&lt;/code&gt;.
                  &lt;p&gt;If the system property
                  &lt;code&gt;javax.sound.sampled.SourceDataLine&lt;/code&gt;
                  is defined or it is defined in the file &amp;quot;sound.properties&amp;quot;,
                  it is used to retrieve the default source data line.
                  For details, refer to the {@link AudioSystem class description}.                
                <param>
                    format an <code>AudioFormat</code> object specifying
                      the supported audio format of the returned line,
                      or <code>null</code> for any audio format                    
                </param>
                <return>
                    the desired <code>SourceDataLine</code> object                    
                </return>
                <throws>
                    LineUnavailableException if a matching source data line
                      is not available due to resource restrictions                    
                </throws>
                <throws>
                    SecurityException if a matching source data line
                      is not available due to security restrictions                    
                </throws>
                <throws>
                    IllegalArgumentException if the system does not
                      support at least one source data line supporting the
                      specified audio format through any installed mixer                    
                </throws>
                <see>
                    #getSourceDataLine(AudioFormat,Mixer.Info)                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getSourceDataLine" type="SourceDataLine" line="452">
                <params>
                    <param name="format" type="AudioFormat"/>
                </params>
                <declaration name="info" type="DataLine.Info" line="453"/>
            </method>
            <javadoc line="456">
                Obtains a source data line that can be used for playing back
                  audio data in the format specified by the
                  &lt;code&gt;AudioFormat&lt;/code&gt; object, provided by the mixer
                  specified by the &lt;code&gt;Mixer.Info&lt;/code&gt; object.
                  &lt;p&gt;The returned line should be opened with the
                  &lt;code&gt;open(AudioFormat)&lt;/code&gt; or
                  &lt;code&gt;open(AudioFormat, int)&lt;/code&gt; method.
                  &lt;p&gt;This is a high-level method that uses &lt;code&gt;getMixer&lt;/code&gt;
                  and &lt;code&gt;getLine&lt;/code&gt; internally.
                  &lt;p&gt;The returned &lt;code&gt;SourceDataLine&lt;/code&gt;&apos;s default
                  audio format will be initialized with &lt;code&gt;format&lt;/code&gt;.                
                <param>
                    format an <code>AudioFormat</code> object specifying
                      the supported audio format of the returned line,
                      or <code>null</code> for any audio format                    
                </param>
                <param>
                    mixerinfo a <code>Mixer.Info</code> object representing
                      the desired mixer, or <code>null</code> for the system
                      default mixer                    
                </param>
                <return>
                    the desired <code>SourceDataLine</code> object                    
                </return>
                <throws>
                    LineUnavailableException if a matching source data
                      line is not available from the specified mixer due
                      to resource restrictions                    
                </throws>
                <throws>
                    SecurityException if a matching source data line
                      is not available from the specified mixer due to
                      security restrictions                    
                </throws>
                <throws>
                    IllegalArgumentException if the specified mixer does
                      not support at least one source data line supporting
                      the specified audio format                    
                </throws>
                <see>
                    #getSourceDataLine(AudioFormat)                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getSourceDataLine" type="SourceDataLine" line="487">
                <params>
                    <param name="format" type="AudioFormat"/>
                    <param name="mixerinfo" type="Mixer.Info"/>
                </params>
                <declaration name="info" type="DataLine.Info" line="488"/>
                <declaration name="mixer" type="Mixer" line="489"/>
            </method>
            <javadoc line="492">
                Obtains a target data line that can be used for recording
                  audio data in the format specified by the
                  &lt;code&gt;AudioFormat&lt;/code&gt; object. The returned line
                  will be provided by the default system mixer, or,
                  if not possible, by any other mixer installed in the
                  system that supports a matching
                  &lt;code&gt;TargetDataLine&lt;/code&gt; object.
                  &lt;p&gt;The returned line should be opened with the
                  &lt;code&gt;open(AudioFormat)&lt;/code&gt; or
                  &lt;code&gt;open(AudioFormat, int)&lt;/code&gt; method.
                  &lt;p&gt;This is a high-level method that uses &lt;code&gt;getMixer&lt;/code&gt;
                  and &lt;code&gt;getLine&lt;/code&gt; internally.
                  &lt;p&gt;The returned &lt;code&gt;TargetDataLine&lt;/code&gt;&apos;s default
                  audio format will be initialized with &lt;code&gt;format&lt;/code&gt;.
                  &lt;p&gt;If the system property{@code javax.sound.sampled.TargetDataLine}is defined or it is defined in the file &amp;quot;sound.properties&amp;quot;,
                  it is used to retrieve the default target data line.
                  For details, refer to the {@link AudioSystem class description}.                
                <param>
                    format an <code>AudioFormat</code> object specifying
                      the supported audio format of the returned line,
                      or <code>null</code> for any audio format                    
                </param>
                <return>
                    the desired <code>TargetDataLine</code> object                    
                </return>
                <throws>
                    LineUnavailableException if a matching target data line
                      is not available due to resource restrictions                    
                </throws>
                <throws>
                    SecurityException if a matching target data line
                      is not available due to security restrictions                    
                </throws>
                <throws>
                    IllegalArgumentException if the system does not
                      support at least one target data line supporting the
                      specified audio format through any installed mixer                    
                </throws>
                <see>
                    #getTargetDataLine(AudioFormat,Mixer.Info)                    
                </see>
                <see>
                    AudioPermission                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getTargetDataLine" type="TargetDataLine" line="525">
                <params>
                    <param name="format" type="AudioFormat"/>
                </params>
                <declaration name="info" type="DataLine.Info" line="526"/>
            </method>
            <javadoc line="529">
                Obtains a target data line that can be used for recording
                  audio data in the format specified by the
                  &lt;code&gt;AudioFormat&lt;/code&gt; object, provided by the mixer
                  specified by the &lt;code&gt;Mixer.Info&lt;/code&gt; object.
                  &lt;p&gt;The returned line should be opened with the
                  &lt;code&gt;open(AudioFormat)&lt;/code&gt; or
                  &lt;code&gt;open(AudioFormat, int)&lt;/code&gt; method.
                  &lt;p&gt;This is a high-level method that uses &lt;code&gt;getMixer&lt;/code&gt;
                  and &lt;code&gt;getLine&lt;/code&gt; internally.
                  &lt;p&gt;The returned &lt;code&gt;TargetDataLine&lt;/code&gt;&apos;s default
                  audio format will be initialized with &lt;code&gt;format&lt;/code&gt;.                
                <param>
                    format an <code>AudioFormat</code> object specifying
                      the supported audio format of the returned line,
                      or <code>null</code> for any audio format                    
                </param>
                <param>
                    mixerinfo a <code>Mixer.Info</code> object representing the
                      desired mixer, or <code>null</code> for the system default mixer                    
                </param>
                <return>
                    the desired <code>TargetDataLine</code> object                    
                </return>
                <throws>
                    LineUnavailableException if a matching target data
                      line is not available from the specified mixer due
                      to resource restrictions                    
                </throws>
                <throws>
                    SecurityException if a matching target data line
                      is not available from the specified mixer due to
                      security restrictions                    
                </throws>
                <throws>
                    IllegalArgumentException if the specified mixer does
                      not support at least one target data line supporting
                      the specified audio format                    
                </throws>
                <see>
                    #getTargetDataLine(AudioFormat)                    
                </see>
                <see>
                    AudioPermission                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getTargetDataLine" type="TargetDataLine" line="560">
                <params>
                    <param name="format" type="AudioFormat"/>
                    <param name="mixerinfo" type="Mixer.Info"/>
                </params>
                <declaration name="info" type="DataLine.Info" line="561"/>
                <declaration name="mixer" type="Mixer" line="562"/>
            </method>
            <javadoc line="565">
                Obtains the encodings that the system can obtain from an
                  audio input stream with the specified encoding using the set
                  of installed format converters.                
                <param>
                    sourceEncoding the encoding for which conversion support
                      is queried                    
                </param>
                <return>
                    array of encodings.  If <code>sourceEncoding</code>is not supported,
                      an array of length 0 is returned. Otherwise, the array will have a length
                      of at least 1, representing <code>sourceEncoding</code> (no conversion).                    
                </return>
            </javadoc>
            <method name="getTargetEncodings" type="AudioFormat.Encoding[]" line="575">
                <params>
                    <param name="sourceEncoding" type="AudioFormat.Encoding"/>
                </params>
                <declaration name="codecs" type="List" line="576"/>
                <declaration name="encodings" type="Vector" line="577"/>
                <declaration name="encs" type="AudioFormat.Encoding" line="578"/>
                <scope line="579">
                    <declaration name="codec" type="FormatConversionProvider" line="580"/>
                    <scope line="581">
                        <scope line="583"/>
                    </scope>
                </scope>
                <declaration name="encs2" type="AudioFormat.Encoding" line="588"/>
            </method>
            <javadoc line="591">
                Obtains the encodings that the system can obtain from an
                  audio input stream with the specified format using the set
                  of installed format converters.                
                <param>
                    sourceFormat the audio format for which conversion
                      is queried                    
                </param>
                <return>
                    array of encodings. If <code>sourceFormat</code>is not supported,
                      an array of length 0 is returned. Otherwise, the array will have a length
                      of at least 1, representing the encoding of <code>sourceFormat</code> (no conversion).                    
                </return>
            </javadoc>
            <method name="getTargetEncodings" type="AudioFormat.Encoding[]" line="601">
                <params>
                    <param name="sourceFormat" type="AudioFormat"/>
                </params>
                <declaration name="codecs" type="List" line="602"/>
                <declaration name="encodings" type="Vector" line="603"/>
                <declaration name="size" type="int" line="604"/>
                <declaration name="index" type="int" line="605"/>
                <declaration name="encs" type="AudioFormat.Encoding" line="606"/>
                <scope line="607"/>
                <declaration name="encs2" type="AudioFormat.Encoding" line="612"/>
                <scope line="613">
                    <scope line="615"/>
                </scope>
            </method>
            <javadoc line="621">
                Indicates whether an audio input stream of the specified encoding
                  can be obtained from an audio input stream that has the specified
                  format.                
                <param>
                    targetEncoding the desired encoding after conversion                    
                </param>
                <param>
                    sourceFormat the audio format before conversion                    
                </param>
                <return>
                    <code>true</code> if the conversion is supported,
                      otherwise <code>false</code>                    
                </return>
            </javadoc>
            <method name="isConversionSupported" type="boolean" line="630">
                <params>
                    <param name="targetEncoding" type="AudioFormat.Encoding"/>
                    <param name="sourceFormat" type="AudioFormat"/>
                </params>
                <declaration name="codecs" type="List" line="631"/>
                <scope line="632">
                    <declaration name="codec" type="FormatConversionProvider" line="633"/>
                    <scope line="634"/>
                </scope>
            </method>
            <javadoc line="640">
                Obtains an audio input stream of the indicated encoding, by converting the
                  provided audio input stream.                
                <param>
                    targetEncoding the desired encoding after conversion                    
                </param>
                <param>
                    sourceStream the stream to be converted                    
                </param>
                <return>
                    an audio input stream of the indicated encoding                    
                </return>
                <throws>
                    IllegalArgumentException if the conversion is not supported                    
                </throws>
                <see>
                    #getTargetEncodings(AudioFormat.Encoding)                    
                </see>
                <see>
                    #getTargetEncodings(AudioFormat)                    
                </see>
                <see>
                    #isConversionSupported(AudioFormat.Encoding,AudioFormat)                    
                </see>
                <see>
                    #getAudioInputStream(AudioFormat,AudioInputStream)                    
                </see>
            </javadoc>
            <method name="getAudioInputStream" type="AudioInputStream" line="652">
                <params>
                    <param name="targetEncoding" type="AudioFormat.Encoding"/>
                    <param name="sourceStream" type="AudioInputStream"/>
                </params>
                <declaration name="codecs" type="List" line="653"/>
                <scope line="654">
                    <declaration name="codec" type="FormatConversionProvider" line="655"/>
                    <scope line="656"/>
                </scope>
            </method>
            <javadoc line="662">
                Obtains the formats that have a particular encoding and that the system can
                  obtain from a stream of the specified format using the set of
                  installed format converters.                
                <param>
                    targetEncoding the desired encoding after conversion                    
                </param>
                <param>
                    sourceFormat the audio format before conversion                    
                </param>
                <return>
                    array of formats.  If no formats of the specified
                      encoding are supported, an array of length 0 is returned.                    
                </return>
            </javadoc>
            <method name="getTargetFormats" type="AudioFormat[]" line="671">
                <params>
                    <param name="targetEncoding" type="AudioFormat.Encoding"/>
                    <param name="sourceFormat" type="AudioFormat"/>
                </params>
                <declaration name="codecs" type="List" line="672"/>
                <declaration name="formats" type="Vector" line="673"/>
                <declaration name="size" type="int" line="674"/>
                <declaration name="index" type="int" line="675"/>
                <declaration name="fmts" type="AudioFormat" line="676"/>
                <scope line="677">
                    <declaration name="codec" type="FormatConversionProvider" line="678"/>
                </scope>
                <declaration name="fmts2" type="AudioFormat" line="683"/>
                <scope line="684">
                    <scope line="686"/>
                </scope>
            </method>
            <javadoc line="692">
                Indicates whether an audio input stream of a specified format
                  can be obtained from an audio input stream of another specified format.                
                <param>
                    targetFormat the desired audio format after conversion                    
                </param>
                <param>
                    sourceFormat the audio format before conversion                    
                </param>
                <return>
                    <code>true</code> if the conversion is supported,
                      otherwise <code>false</code>                    
                </return>
            </javadoc>
            <method name="isConversionSupported" type="boolean" line="700">
                <params>
                    <param name="targetFormat" type="AudioFormat"/>
                    <param name="sourceFormat" type="AudioFormat"/>
                </params>
                <declaration name="codecs" type="List" line="701"/>
                <scope line="702">
                    <declaration name="codec" type="FormatConversionProvider" line="703"/>
                    <scope line="704"/>
                </scope>
            </method>
            <javadoc line="710">
                Obtains an audio input stream of the indicated format, by converting the
                  provided audio input stream.                
                <param>
                    targetFormat the desired audio format after conversion                    
                </param>
                <param>
                    sourceStream the stream to be converted                    
                </param>
                <return>
                    an audio input stream of the indicated format                    
                </return>
                <throws>
                    IllegalArgumentException if the conversion is not supported
                      #see #getTargetEncodings(AudioFormat)                    
                </throws>
                <see>
                    #getTargetFormats(AudioFormat.Encoding,AudioFormat)                    
                </see>
                <see>
                    #isConversionSupported(AudioFormat,AudioFormat)                    
                </see>
                <see>
                    #getAudioInputStream(AudioFormat.Encoding,AudioInputStream)                    
                </see>
            </javadoc>
            <method name="getAudioInputStream" type="AudioInputStream" line="722">
                <params>
                    <param name="targetFormat" type="AudioFormat"/>
                    <param name="sourceStream" type="AudioInputStream"/>
                </params>
                <scope line="723"/>
                <declaration name="codecs" type="List" line="726"/>
                <scope line="727">
                    <declaration name="codec" type="FormatConversionProvider" line="728"/>
                    <scope line="729"/>
                </scope>
            </method>
            <javadoc line="735">
                Obtains the audio file format of the provided input stream.  The stream must
                  point to valid audio file data.  The implementation of this method may require
                  multiple parsers to examine the stream to determine whether they support it.
                  These parsers must be able to mark the stream, read enough data to determine whether they
                  support the stream, and, if not, reset the stream&apos;s read pointer to its original
                  position.  If the input stream does not support these operations, this method may fail
                  with an &lt;code&gt;IOException&lt;/code&gt;.                
                <param>
                    stream the input stream from which file format information should be
                      extracted                    
                </param>
                <return>
                    an <code>AudioFileFormat</code> object describing the stream's audio file format                    
                </return>
                <throws>
                    UnsupportedAudioFileException if the stream does not point to valid audio
                      file data recognized by the system                    
                </throws>
                <throws>
                    IOException if an input/output exception occurs                    
                </throws>
                <see>
                    InputStream#markSupported                    
                </see>
                <see>
                    InputStream#mark                    
                </see>
            </javadoc>
            <method name="getAudioFileFormat" type="AudioFileFormat" line="752">
                <params>
                    <param name="stream" type="InputStream"/>
                </params>
                <declaration name="providers" type="List" line="753"/>
                <declaration name="format" type="AudioFileFormat" line="754"/>
                <scope line="755">
                    <declaration name="reader" type="AudioFileReader" line="756"/>
                    <scope line="757"/>
                    <scope line="761"/>
                </scope>
                <scope line="765"/>
                <scope line="768"/>
            </method>
            <javadoc line="772">
                Obtains the audio file format of the specified URL.  The URL must
                  point to valid audio file data.                
                <param>
                    url the URL from which file format information should be
                      extracted                    
                </param>
                <return>
                    an <code>AudioFileFormat</code> object describing the audio file format                    
                </return>
                <throws>
                    UnsupportedAudioFileException if the URL does not point to valid audio
                      file data recognized by the system                    
                </throws>
                <throws>
                    IOException if an input/output exception occurs                    
                </throws>
            </javadoc>
            <method name="getAudioFileFormat" type="AudioFileFormat" line="782">
                <params>
                    <param name="url" type="URL"/>
                </params>
                <declaration name="providers" type="List" line="783"/>
                <declaration name="format" type="AudioFileFormat" line="784"/>
                <scope line="785">
                    <declaration name="reader" type="AudioFileReader" line="786"/>
                    <scope line="787"/>
                    <scope line="791"/>
                </scope>
                <scope line="795"/>
                <scope line="798"/>
            </method>
            <javadoc line="802">
                Obtains the audio file format of the specified &lt;code&gt;File&lt;/code&gt;.  The &lt;code&gt;File&lt;/code&gt; must
                  point to valid audio file data.                
                <param>
                    file the <code>File</code> from which file format information should be
                      extracted                    
                </param>
                <return>
                    an <code>AudioFileFormat</code> object describing the audio file format                    
                </return>
                <throws>
                    UnsupportedAudioFileException if the <code>File</code> does not point to valid audio
                      file data recognized by the system                    
                </throws>
                <throws>
                    IOException if an I/O exception occurs                    
                </throws>
            </javadoc>
            <method name="getAudioFileFormat" type="AudioFileFormat" line="812">
                <params>
                    <param name="file" type="File"/>
                </params>
                <declaration name="providers" type="List" line="813"/>
                <declaration name="format" type="AudioFileFormat" line="814"/>
                <scope line="815">
                    <declaration name="reader" type="AudioFileReader" line="816"/>
                    <scope line="817"/>
                    <scope line="821"/>
                </scope>
                <scope line="825"/>
                <scope line="828"/>
            </method>
            <javadoc line="832">
                Obtains an audio input stream from the provided input stream.  The stream must
                  point to valid audio file data.  The implementation of this method may
                  require multiple parsers to
                  examine the stream to determine whether they support it.  These parsers must
                  be able to mark the stream, read enough data to determine whether they
                  support the stream, and, if not, reset the stream&apos;s read pointer to its original
                  position.  If the input stream does not support these operation, this method may fail
                  with an &lt;code&gt;IOException&lt;/code&gt;.                
                <param>
                    stream the input stream from which the <code>AudioInputStream</code> should be
                      constructed                    
                </param>
                <return>
                    an <code>AudioInputStream</code> object based on the audio file data contained
                      in the input stream.                    
                </return>
                <throws>
                    UnsupportedAudioFileException if the stream does not point to valid audio
                      file data recognized by the system                    
                </throws>
                <throws>
                    IOException if an I/O exception occurs                    
                </throws>
                <see>
                    InputStream#markSupported                    
                </see>
                <see>
                    InputStream#mark                    
                </see>
            </javadoc>
            <method name="getAudioInputStream" type="AudioInputStream" line="851">
                <params>
                    <param name="stream" type="InputStream"/>
                </params>
                <declaration name="providers" type="List" line="852"/>
                <declaration name="audioStream" type="AudioInputStream" line="853"/>
                <scope line="854">
                    <declaration name="reader" type="AudioFileReader" line="855"/>
                    <scope line="856"/>
                    <scope line="860"/>
                </scope>
                <scope line="864"/>
                <scope line="867"/>
            </method>
            <javadoc line="871">
                Obtains an audio input stream from the URL provided.  The URL must
                  point to valid audio file data.                
                <param>
                    url the URL for which the <code>AudioInputStream</code> should be
                      constructed                    
                </param>
                <return>
                    an <code>AudioInputStream</code> object based on the audio file data pointed
                      to by the URL                    
                </return>
                <throws>
                    UnsupportedAudioFileException if the URL does not point to valid audio
                      file data recognized by the system                    
                </throws>
                <throws>
                    IOException if an I/O exception occurs                    
                </throws>
            </javadoc>
            <method name="getAudioInputStream" type="AudioInputStream" line="882">
                <params>
                    <param name="url" type="URL"/>
                </params>
                <declaration name="providers" type="List" line="883"/>
                <declaration name="audioStream" type="AudioInputStream" line="884"/>
                <scope line="885">
                    <declaration name="reader" type="AudioFileReader" line="886"/>
                    <scope line="887"/>
                    <scope line="891"/>
                </scope>
                <scope line="895"/>
                <scope line="898"/>
            </method>
            <javadoc line="902">
                Obtains an audio input stream from the provided &lt;code&gt;File&lt;/code&gt;.  The &lt;code&gt;File&lt;/code&gt; must
                  point to valid audio file data.                
                <param>
                    file the <code>File</code> for which the <code>AudioInputStream</code> should be
                      constructed                    
                </param>
                <return>
                    an <code>AudioInputStream</code> object based on the audio file data pointed
                      to by the <code>File</code>                    
                </return>
                <throws>
                    UnsupportedAudioFileException if the <code>File</code> does not point to valid audio
                      file data recognized by the system                    
                </throws>
                <throws>
                    IOException if an I/O exception occurs                    
                </throws>
            </javadoc>
            <method name="getAudioInputStream" type="AudioInputStream" line="913">
                <params>
                    <param name="file" type="File"/>
                </params>
                <declaration name="providers" type="List" line="914"/>
                <declaration name="audioStream" type="AudioInputStream" line="915"/>
                <scope line="916">
                    <declaration name="reader" type="AudioFileReader" line="917"/>
                    <scope line="918"/>
                    <scope line="922"/>
                </scope>
                <scope line="926"/>
                <scope line="929"/>
            </method>
            <javadoc line="933">
                Obtains the file types for which file writing support is provided by the system.                
                <return>
                    array of unique file types.  If no file types are supported,
                      an array of length 0 is returned.                    
                </return>
            </javadoc>
            <method name="getAudioFileTypes" type="AudioFileFormat.Type[]" line="938">
                <declaration name="providers" type="List" line="939"/>
                <declaration name="returnTypesSet" type="Set" line="940"/>
                <scope line="941">
                    <declaration name="writer" type="AudioFileWriter" line="942"/>
                    <declaration name="fileTypes" type="AudioFileFormat.Type[]" line="943"/>
                    <scope line="944"/>
                </scope>
                <declaration name="returnTypes" type="AudioFileFormat.Type" line="948"/>
            </method>
            <javadoc line="951">
                Indicates whether file writing support for the specified file type is provided
                  by the system.                
                <param>
                    fileType the file type for which write capabilities are queried                    
                </param>
                <return>
                    <code>true</code> if the file type is supported,
                      otherwise <code>false</code>                    
                </return>
            </javadoc>
            <method name="isFileTypeSupported" type="boolean" line="958">
                <params>
                    <param name="fileType" type="AudioFileFormat.Type"/>
                </params>
                <declaration name="providers" type="List" line="959"/>
                <scope line="960">
                    <declaration name="writer" type="AudioFileWriter" line="961"/>
                    <scope line="962"/>
                </scope>
            </method>
            <javadoc line="968">
                Obtains the file types that the system can write from the
                  audio input stream specified.                
                <param>
                    stream the audio input stream for which audio file type support
                      is queried                    
                </param>
                <return>
                    array of file types.  If no file types are supported,
                      an array of length 0 is returned.                    
                </return>
            </javadoc>
            <method name="getAudioFileTypes" type="AudioFileFormat.Type[]" line="976">
                <params>
                    <param name="stream" type="AudioInputStream"/>
                </params>
                <declaration name="providers" type="List" line="977"/>
                <declaration name="returnTypesSet" type="Set" line="978"/>
                <scope line="979">
                    <declaration name="writer" type="AudioFileWriter" line="980"/>
                    <declaration name="fileTypes" type="AudioFileFormat.Type[]" line="981"/>
                    <scope line="982"/>
                </scope>
                <declaration name="returnTypes" type="AudioFileFormat.Type" line="986"/>
            </method>
            <javadoc line="989">
                Indicates whether an audio file of the specified file type can be written
                  from the indicated audio input stream.                
                <param>
                    fileType the file type for which write capabilities are queried                    
                </param>
                <param>
                    stream the stream for which file-writing support is queried                    
                </param>
                <return>
                    <code>true</code> if the file type is supported for this audio input stream,
                      otherwise <code>false</code>                    
                </return>
            </javadoc>
            <method name="isFileTypeSupported" type="boolean" line="997">
                <params>
                    <param name="fileType" type="AudioFileFormat.Type"/>
                    <param name="stream" type="AudioInputStream"/>
                </params>
                <declaration name="providers" type="List" line="998"/>
                <scope line="999">
                    <declaration name="writer" type="AudioFileWriter" line="1000"/>
                    <scope line="1001"/>
                </scope>
            </method>
            <javadoc line="1007">
                Writes a stream of bytes representing an audio file of the specified file type
                  to the output stream provided.  Some file types require that
                  the length be written into the file header; such files cannot be written from
                  start to finish unless the length is known in advance.  An attempt
                  to write a file of such a type will fail with an IOException if the length in
                  the audio file type is &lt;code&gt;AudioSystem.NOT_SPECIFIED&lt;/code&gt;.                
                <param>
                    stream the audio input stream containing audio data to be
                      written to the file                    
                </param>
                <param>
                    fileType the kind of audio file to write                    
                </param>
                <param>
                    out the stream to which the file data should be written                    
                </param>
                <return>
                    the number of bytes written to the output stream                    
                </return>
                <throws>
                    IOException if an input/output exception occurs                    
                </throws>
                <throws>
                    IllegalArgumentException if the file type is not supported by
                      the system                    
                </throws>
                <see>
                    #isFileTypeSupported                    
                </see>
                <see>
                    #getAudioFileTypes                    
                </see>
            </javadoc>
            <method name="write" type="int" line="1025">
                <params>
                    <param name="stream" type="AudioInputStream"/>
                    <param name="fileType" type="AudioFileFormat.Type"/>
                    <param name="out" type="OutputStream"/>
                </params>
                <declaration name="providers" type="List" line="1026"/>
                <declaration name="bytesWritten" type="int" line="1027"/>
                <declaration name="flag" type="boolean" line="1028"/>
                <scope line="1029">
                    <declaration name="writer" type="AudioFileWriter" line="1030"/>
                    <scope line="1031"/>
                    <scope line="1036"/>
                </scope>
                <scope line="1040"/>
                <scope line="1043"/>
            </method>
            <javadoc line="1047">
                Writes a stream of bytes representing an audio file of the specified file type
                  to the external file provided.                
                <param>
                    stream the audio input stream containing audio data to be
                      written to the file                    
                </param>
                <param>
                    fileType the kind of audio file to write                    
                </param>
                <param>
                    out the external file to which the file data should be written                    
                </param>
                <return>
                    the number of bytes written to the file                    
                </return>
                <throws>
                    IOException if an I/O exception occurs                    
                </throws>
                <throws>
                    IllegalArgumentException if the file type is not supported by
                      the system                    
                </throws>
                <see>
                    #isFileTypeSupported                    
                </see>
                <see>
                    #getAudioFileTypes                    
                </see>
            </javadoc>
            <method name="write" type="int" line="1061">
                <params>
                    <param name="stream" type="AudioInputStream"/>
                    <param name="fileType" type="AudioFileFormat.Type"/>
                    <param name="out" type="File"/>
                </params>
                <declaration name="providers" type="List" line="1062"/>
                <declaration name="bytesWritten" type="int" line="1063"/>
                <declaration name="flag" type="boolean" line="1064"/>
                <scope line="1065">
                    <declaration name="writer" type="AudioFileWriter" line="1066"/>
                    <scope line="1067"/>
                    <scope line="1072"/>
                </scope>
                <scope line="1076"/>
                <scope line="1079"/>
            </method>
            <javadoc line="1083">
                Obtains the set of MixerProviders on the system.                
            </javadoc>
            <method name="getMixerProviders" type="List" line="1086"/>
            <javadoc line="1089">
                Obtains the set of format converters (codecs, transcoders, etc.)
                  that are currently installed on the system.                
                <return>
                    an array of{@link javax.sound.sampled.spi.FormatConversionProviderFormatConversionProvider}objects representing the available format converters.  If no format
                      converters readers are available on the system, an array of length 0 is
                      returned.                    
                </return>
            </javadoc>
            <method name="getFormatConversionProviders" type="List" line="1096"/>
            <javadoc line="1099">
                Obtains the set of audio file readers that are currently installed on the system.                
                <return>
                    a List of{@link javax.sound.sampled.spi.AudioFileReaderAudioFileReader}objects representing the installed audio file readers.  If no audio file
                      readers are available on the system, an empty List is returned.                    
                </return>
            </javadoc>
            <method name="getAudioFileReaders" type="List" line="1104"/>
            <javadoc line="1107">
                Obtains the set of audio file writers that are currently installed on the system.                
                <return>
                    a List of{@link javax.sound.samples.spi.AudioFileWriter AudioFileWriter}objects representing the available audio file writers.  If no audio file
                      writers are available on the system, an empty List is returned.                    
                </return>
            </javadoc>
            <method name="getAudioFileWriters" type="List" line="1112"/>
            <javadoc line="1115">
                Attempts to locate and return a default Mixer that provides lines
                  of the specified type.                
                <param>
                    providers the installed mixer providers                    
                </param>
                <param>
                    info The requested line type
                      TargetDataLine.class, Clip.class or Port.class.                    
                </param>
                <return>
                    a Mixer that matches the requirements, or null if no default mixer found                    
                </return>
            </javadoc>
            <method name="getDefaultMixer" type="Mixer" line="1123">
                <params>
                    <param name="providers" type="List"/>
                    <param name="info" type="Line.Info"/>
                </params>
                <declaration name="lineClass" type="Class" line="1124"/>
                <declaration name="providerClassName" type="String" line="1125"/>
                <declaration name="instanceName" type="String" line="1126"/>
                <declaration name="mixer" type="Mixer" line="1127"/>
                <scope line="1128">
                    <declaration name="defaultProvider" type="MixerProvider" line="1129"/>
                    <scope line="1130">
                        <scope line="1131">
                            <scope line="1133"/>
                        </scope>
                        <scope line="1137">
                            <scope line="1139"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="1145">
                    <scope line="1147"/>
                </scope>
            </method>
            <javadoc line="1153">
                Return a MixerProvider of a given class from the list of
                  MixerProviders.
                  This method never requires the returned Mixer to do mixing.                
                <param>
                    providerClassName The class name of the provider to be returned.                    
                </param>
                <param>
                    providers The list of MixerProviders that is searched.                    
                </param>
                <return>
                    A MixerProvider of the requested class, or null if none is
                      found.                    
                </return>
            </javadoc>
            <method name="getNamedProvider" type="MixerProvider" line="1162">
                <params>
                    <param name="providerClassName" type="String"/>
                    <param name="providers" type="List"/>
                </params>
                <scope line="1163">
                    <declaration name="provider" type="MixerProvider" line="1164"/>
                    <scope line="1165"/>
                </scope>
            </method>
            <javadoc line="1171">
                Return a Mixer with a given name from a given MixerProvider.
                  This method never requires the returned Mixer to do mixing.                
                <param>
                    mixerName The name of the Mixer to be returned.                    
                </param>
                <param>
                    provider The MixerProvider to check for Mixers.                    
                </param>
                <param>
                    info The type of line the returned Mixer is required to
                      support.                    
                </param>
                <return>
                    A Mixer matching the requirements, or null if none is found.                    
                </return>
            </javadoc>
            <method name="getNamedMixer" type="Mixer" line="1180">
                <params>
                    <param name="mixerName" type="String"/>
                    <param name="provider" type="MixerProvider"/>
                    <param name="info" type="Line.Info"/>
                </params>
                <declaration name="infos" type="Mixer.Info[]" line="1181"/>
                <scope line="1182">
                    <scope line="1183">
                        <declaration name="mixer" type="Mixer" line="1184"/>
                        <scope line="1185"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1192">
                From a List of MixerProviders, return a Mixer with a given name.
                  This method never requires the returned Mixer to do mixing.                
                <param>
                    mixerName The name of the Mixer to be returned.                    
                </param>
                <param>
                    providers The List of MixerProviders to check for Mixers.                    
                </param>
                <param>
                    info The type of line the returned Mixer is required to
                      support.                    
                </param>
                <return>
                    A Mixer matching the requirements, or null if none is found.                    
                </return>
            </javadoc>
            <method name="getNamedMixer" type="Mixer" line="1201">
                <params>
                    <param name="mixerName" type="String"/>
                    <param name="providers" type="List"/>
                    <param name="info" type="Line.Info"/>
                </params>
                <scope line="1202">
                    <declaration name="provider" type="MixerProvider" line="1203"/>
                    <declaration name="mixer" type="Mixer" line="1204"/>
                    <scope line="1205"/>
                </scope>
            </method>
            <javadoc line="1211">
                From a given MixerProvider, return the first appropriate Mixer.                
                <param>
                    provider The MixerProvider to check for Mixers.                    
                </param>
                <param>
                    info The type of line the returned Mixer is required to
                      support.                    
                </param>
                <param>
                    isMixingRequired If true, only Mixers that support mixing are
                      returned for line types of SourceDataLine and Clip.                    
                </param>
                <return>
                    A Mixer that is considered appropriate, or null
                      if none is found.                    
                </return>
            </javadoc>
            <method name="getFirstMixer" type="Mixer" line="1221">
                <params>
                    <param name="provider" type="MixerProvider"/>
                    <param name="info" type="Line.Info"/>
                    <param name="isMixingRequired" type="boolean"/>
                </params>
                <declaration name="infos" type="Mixer.Info[]" line="1222"/>
                <scope line="1223">
                    <declaration name="mixer" type="Mixer" line="1224"/>
                    <scope line="1225"/>
                </scope>
            </method>
            <javadoc line="1231">
                Checks if a Mixer is appropriate.
                  A Mixer is considered appropriate if it support the given line type.
                  If isMixingRequired is true and the line type is an output one
                  (SourceDataLine, Clip), the mixer is appropriate if it supports
                  at least 2 (concurrent) lines of the given type.                
                <return>
                    true if the mixer is considered appropriate according to the
                      rules given above, false otherwise.                    
                </return>
            </javadoc>
            <method name="isAppropriateMixer" type="boolean" line="1240">
                <params>
                    <param name="mixer" type="Mixer"/>
                    <param name="lineInfo" type="Line.Info"/>
                    <param name="isMixingRequired" type="boolean"/>
                </params>
                <scope line="1241"/>
                <declaration name="lineClass" type="Class" line="1244"/>
                <scope line="1245">
                    <declaration name="maxLines" type="int" line="1246"/>
                </scope>
            </method>
            <javadoc line="1251">
                Like getMixerInfo, but return List                
            </javadoc>
            <method name="getMixerInfoList" type="List" line="1254">
                <declaration name="providers" type="List" line="1255"/>
            </method>
            <javadoc line="1258">
                Like getMixerInfo, but return List                
            </javadoc>
            <method name="getMixerInfoList" type="List" line="1261">
                <params>
                    <param name="providers" type="List"/>
                </params>
                <declaration name="infos" type="List" line="1262"/>
                <declaration name="someInfos" type="Mixer.Info[]" line="1263"/>
                <declaration name="allInfos" type="Mixer.Info[]" line="1264"/>
                <scope line="1265">
                    <scope line="1267"/>
                </scope>
            </method>
            <javadoc line="1273">
                Obtains the set of services currently installed on the system
                  using sun.misc.Service, the SPI mechanism in 1.3.                
                <return>
                    a List of instances of providers for the requested service.
                      If no providers are available, a vector of length 0 will be returned.                    
                </return>
            </javadoc>
            <method name="getProviders" type="List" line="1279">
                <params>
                    <param name="providerClass" type="Class"/>
                </params>
            </method>
        </class>
    </source>