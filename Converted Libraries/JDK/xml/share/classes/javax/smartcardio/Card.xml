<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.smartcardio">
        <import package="java.nio.ByteBuffer"/>
        <class name="Card" line="3">
            <javadoc line="3">
                A Smart Card with which a connection has been established. Card objects
                  are obtained by calling {@link CardTerminal#connect CardTerminal.connect()}.                
                <see>
                    CardTerminal                    
                </see>
                <since>
                    1.6                    
                </since>
                <author>
                    Andreas Sterbenz                    
                </author>
                <author>
                    JSR 268 Expert Group                    
                </author>
            </javadoc>
            <javadoc line="12">
                Constructs a new Card object.
                  &lt;p&gt;This constructor is called by subclasses only. Application should
                  call the {@linkplain CardTerminal#connect CardTerminal.connect()}method to obtain a Card
                  object.                
            </javadoc>
            <method name="Card" type="constructor" line="18"/>
            <method name="getATR" type="ATR" line="20"/>
            <javadoc line="20">
                Returns the ATR of this card.                
                <return>
                    the ATR of this card.                    
                </return>
            </javadoc>
            <method name="getProtocol" type="String" line="25"/>
            <javadoc line="25">
                Returns the protocol in use for this card.                
                <return>
                    the protocol in use for this card, for example "T=0" or "T=1"                    
                </return>
            </javadoc>
            <method name="getBasicChannel" type="CardChannel" line="30"/>
            <javadoc line="30">
                Returns the CardChannel for the basic logical channel. The basic
                  logical channel has a channel number of 0.                
                <throws>
                    SecurityException if a SecurityManager exists and the
                      caller does not have the required{@linkplain CardPermission permission}                    
                </throws>
                <throws>
                    IllegalStateException if this card object has been disposed of
                      via the {@linkplain #disconnect disconnect()} method                    
                </throws>
            </javadoc>
            <method name="openLogicalChannel" type="CardChannel" line="39"/>
            <javadoc line="39">
                Opens a new logical channel to the card and returns it. The channel is
                  opened by issuing a &lt;code&gt;MANAGE CHANNEL&lt;/code&gt; command that should use
                  the format &lt;code&gt;[00 70 00 00 01]&lt;/code&gt;.                
                <throws>
                    SecurityException if a SecurityManager exists and the
                      caller does not have the required{@linkplain CardPermission permission}                    
                </throws>
                <throws>
                    CardException is a new logical channel could not be opened                    
                </throws>
                <throws>
                    IllegalStateException if this card object has been disposed of
                      via the {@linkplain #disconnect disconnect()} method                    
                </throws>
            </javadoc>
            <method name="beginExclusive" type="void" line="50"/>
            <javadoc line="50">
                Requests exclusive access to this card.
                  &lt;p&gt;Once a thread has invoked &lt;code&gt;beginExclusive&lt;/code&gt;, only this
                  thread is allowed to communicate with this card until it calls
                  &lt;code&gt;endExclusive&lt;/code&gt;. Other threads attempting communication
                  will receive a CardException.
                  &lt;p&gt;Applications have to ensure that exclusive access is correctly
                  released. This can be achieved by executing
                  the &lt;code&gt;beginExclusive()&lt;/code&gt; and &lt;code&gt;endExclusive&lt;/code&gt; calls
                  in a &lt;code&gt;try ... finally&lt;/code&gt; block.                
                <throws>
                    SecurityException if a SecurityManager exists and the
                      caller does not have the required{@linkplain CardPermission permission}                    
                </throws>
                <throws>
                    CardException if exclusive access has already been set
                      or if exclusive access could not be established                    
                </throws>
                <throws>
                    IllegalStateException if this card object has been disposed of
                      via the {@linkplain #disconnect disconnect()} method                    
                </throws>
            </javadoc>
            <method name="endExclusive" type="void" line="68"/>
            <javadoc line="68">
                Releases the exclusive access previously established using
                  &lt;code&gt;beginExclusive&lt;/code&gt;.                
                <throws>
                    SecurityException if a SecurityManager exists and the
                      caller does not have the required{@linkplain CardPermission permission}                    
                </throws>
                <throws>
                    IllegalStateException if the active Thread does not currently have
                      exclusive access to this card or
                      if this card object has been disposed of
                      via the {@linkplain #disconnect disconnect()} method                    
                </throws>
                <throws>
                    CardException if the operation failed                    
                </throws>
            </javadoc>
            <method name="transmitControlCommand" type="byte[]" line="80"/>
            <javadoc line="80">
                Transmits a control command to the terminal device.
                  &lt;p&gt;This can be used to, for example, control terminal functions like
                  a built-in PIN pad or biometrics.                
                <param>
                    controlCode the control code of the command                    
                </param>
                <param>
                    command the command data                    
                </param>
                <throws>
                    SecurityException if a SecurityManager exists and the
                      caller does not have the required{@linkplain CardPermission permission}                    
                </throws>
                <throws>
                    NullPointerException if command is null                    
                </throws>
                <throws>
                    CardException if the card operation failed                    
                </throws>
                <throws>
                    IllegalStateException if this card object has been disposed of
                      via the {@linkplain #disconnect disconnect()} method                    
                </throws>
            </javadoc>
            <method name="disconnect" type="void" line="94"/>
            <javadoc line="94">
                Disconnects the connection with this card. After this method returns,
                  calling methods on this object or in CardChannels associated with this
                  object that require interaction with the card will raise an
                  IllegalStateException.                
                <param>
                    reset whether to reset the card after disconnecting.                    
                </param>
                <throws>
                    CardException if the card operation failed                    
                </throws>
                <throws>
                    SecurityException if a SecurityManager exists and the
                      caller does not have the required{@linkplain CardPermission permission}                    
                </throws>
            </javadoc>
        </class>
    </source>