<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.smartcardio">
        <import package="java.util"/>
        <import package="java.security"/>
        <import package="sun.security.jca"/>
        <import package="sun.security.jca.GetInstance"/>
        <import package="sun.security.action.GetPropertyAction"/>
        <class name="TerminalFactory" line="37">
            <javadoc line="37">
                A factory for CardTerminal objects.
                  It allows an application to
                  &lt;ul&gt;
                  &lt;li&gt;obtain a TerminalFactory by calling
                  one of the static factory methods in this class
                  ({@linkplain #getDefault} or {@linkplain #getInstance getInstance()}).
                  &lt;li&gt;use this TerminalFactory object to access the CardTerminals by
                  calling the {@linkplain #terminals} method.
                  &lt;/ul&gt;
                  &lt;p&gt;Each TerminalFactory has a &lt;code&gt;type&lt;/code&gt; indicating how it
                  was implemented. It must be specified when the implementation is obtained
                  using a {@linkplain #getInstance getInstance()} method and can be retrieved
                  via the {@linkplain #getType} method.
                  &lt;P&gt;The following standard type names have been defined:
                  &lt;dl&gt;
                  &lt;dt&gt;&lt;code&gt;PC/SC&lt;/code&gt;
                  &lt;dd&gt;an implementation that calls into the PC/SC Smart Card stack
                  of the host platform.
                  Implementations do not require parameters and accept &quot;null&quot; as argument
                  in the getInstance() calls.
                  &lt;dt&gt;&lt;code&gt;None&lt;/code&gt;
                  &lt;dd&gt;an implementation that does not supply any CardTerminals. On platforms
                  that do not support other implementations,{@linkplain #getDefaultType} returns &lt;code&gt;None&lt;/code&gt; and{@linkplain #getDefault} returns an instance of a &lt;code&gt;None&lt;/code&gt;
                  TerminalFactory. Factories of this type cannot be obtained by calling the
                  &lt;code&gt;getInstance()&lt;/code&gt; methods.
                  &lt;/dl&gt;
                  Additional standard types may be defined in the future.
                  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;
                  Provider implementations that accept initialization parameters via the
                  &lt;code&gt;getInstance()&lt;/code&gt; methods are strongly
                  encouraged to use a {@linkplain java.util.Properties} object as the
                  representation for String name-value pair based parameters whenever
                  possible. This allows applications to more easily interoperate with
                  multiple providers than if each provider used different provider
                  specific class as parameters.
                  &lt;P&gt;TerminalFactory utilizes an extensible service provider framework.
                  Service providers that wish to add a new implementation should see the{@linkplain TerminalFactorySpi} class for more information.                
                <see>
                    CardTerminals                    
                </see>
                <see>
                    Provider                    
                </see>
                <since>
                    1.6                    
                </since>
                <author>
                    Andreas Sterbenz                    
                </author>
                <author>
                    JSR 268 Expert Group                    
                </author>
            </javadoc>
            <declaration name="PROP_NAME" type="String" line="93"/>
            <declaration name="defaultType" type="String" line="96"/>
            <declaration name="defaultFactory" type="TerminalFactory" line="98"/>
            <scope line="100">
                <declaration name="type" type="String" line="102"/>
                <declaration name="factory" type="TerminalFactory" line="104"/>
                <scope line="105"/>
                <scope line="107"/>
                <scope line="110">
                    <scope line="112">
                        <declaration name="sun" type="Provider" line="114"/>
                        <scope line="115">
                            <declaration name="clazz" type="Class" line="116"/>
                        </scope>
                    </scope>
                    <scope line="120"/>
                </scope>
                <scope line="124"/>
            </scope>
            <class name="NoneProvider" line="133">
                <extends class="Provider"/>
                <declaration name="INSTANCE" type="Provider" line="134"/>
                <method name="NoneProvider" type="constructor" line="135"/>
            </class>
            <class name="NoneFactorySpi" line="140">
                <extends class="TerminalFactorySpi"/>
                <declaration name="INSTANCE" type="TerminalFactorySpi" line="141"/>
                <method name="NoneFactorySpi" type="constructor" line="142">
                    <comment line="144">
                        empty                        
                    </comment>
                </method>
                <method name="engineTerminals" type="CardTerminals" line="145"/>
            </class>
            <class name="NoneCardTerminals" line="150">
                <extends class="CardTerminals"/>
                <declaration name="INSTANCE" type="CardTerminals" line="151"/>
                <method name="NoneCardTerminals" type="constructor" line="152">
                    <comment line="154">
                        empty                        
                    </comment>
                </method>
                <method name="list" type="List<CardTerminal>" line="155">
                    <params>
                        <param name="state" type="State"/>
                    </params>
                    <scope line="156"/>
                </method>
                <method name="waitForChange" type="boolean" line="161">
                    <params>
                        <param name="timeout" type="long"/>
                    </params>
                </method>
            </class>
            <declaration name="spi" type="TerminalFactorySpi" line="166"/>
            <declaration name="provider" type="Provider" line="168"/>
            <declaration name="type" type="String" line="170"/>
            <method name="TerminalFactory" type="constructor" line="172">
                <params>
                    <param name="spi" type="TerminalFactorySpi"/>
                    <param name="provider" type="Provider"/>
                    <param name="type" type="String"/>
                </params>
            </method>
            <javadoc line="178">
                Get the default TerminalFactory type.
                  &lt;p&gt;It is determined as follows:
                  when this class is initialized, the system property
                  &lt;code&gt;javax.smartcardio.TerminalFactory.DefaultType&lt;/code&gt;
                  is examined. If it is set, a TerminalFactory of this type is
                  instantiated by calling the {@linkplain #getInstancegetInstance(String,Object)} method passing
                  &lt;code&gt;null&lt;/code&gt; as the value for &lt;code&gt;params&lt;/code&gt;. If the call
                  succeeds, the type becomes the default type and the factory becomes
                  the {@linkplain #getDefault default} factory.
                  &lt;p&gt;If the system property is not set or the getInstance() call fails
                  for any reason, the system defaults to an implementation specific
                  default type and TerminalFactory.                
                <return>
                    the default TerminalFactory type                    
                </return>
            </javadoc>
            <method name="getDefaultType" type="String" line="198"/>
            <javadoc line="202">
                Returns the default TerminalFactory instance. See{@linkplain #getDefaultType} for more information.
                  &lt;p&gt;A default TerminalFactory is always available. However, depending
                  on the implementation, it may not offer any terminals.                
                <return>
                    the default TerminalFactory                    
                </return>
            </javadoc>
            <method name="getDefault" type="TerminalFactory" line="211"/>
            <javadoc line="215">
                Returns a TerminalFactory of the specified type that is initialized
                  with the specified parameters.
                  &lt;p&gt; This method traverses the list of registered security Providers,
                  starting with the most preferred Provider.
                  A new TerminalFactory object encapsulating the
                  TerminalFactorySpi implementation from the first
                  Provider that supports the specified type is returned.
                  &lt;p&gt; Note that the list of registered providers may be retrieved via
                  the {@linkplain Security#getProviders() Security.getProviders()} method.
                  &lt;p&gt;The &lt;code&gt;TerminalFactory&lt;/code&gt; is initialized with the
                  specified parameters Object. The type of parameters
                  needed may vary between different types of &lt;code&gt;TerminalFactory&lt;/code&gt;s.                
                <param>
                    type the type of the requested TerminalFactory                    
                </param>
                <param>
                    params the parameters to pass to the TerminalFactorySpi
                      implementation, or null if no parameters are needed                    
                </param>
                <return>
                    a TerminalFactory of the specified type                    
                </return>
                <throws>
                    NullPointerException if type is null                    
                </throws>
                <throws>
                    NoSuchAlgorithmException if no Provider supports a
                      TerminalFactorySpi of the specified type                    
                </throws>
            </javadoc>
            <method name="getInstance" type="TerminalFactory" line="242">
                <params>
                    <param name="type" type="String"/>
                    <param name="params" type="Object"/>
                </params>
                <declaration name="instance" type="Instance" line="243"/>
            </method>
            <javadoc line="249">
                Returns a TerminalFactory of the specified type that is initialized
                  with the specified parameters.
                  &lt;p&gt; A new TerminalFactory object encapsulating the
                  TerminalFactorySpi implementation from the specified provider
                  is returned.  The specified provider must be registered
                  in the security provider list.
                  &lt;p&gt; Note that the list of registered providers may be retrieved via
                  the {@linkplain Security#getProviders() Security.getProviders()} method.
                  &lt;p&gt;The &lt;code&gt;TerminalFactory&lt;/code&gt; is initialized with the
                  specified parameters Object. The type of parameters
                  needed may vary between different types of &lt;code&gt;TerminalFactory&lt;/code&gt;s.                
                <param>
                    type the type of the requested TerminalFactory                    
                </param>
                <param>
                    params the parameters to pass to the TerminalFactorySpi
                      implementation, or null if no parameters are needed                    
                </param>
                <param>
                    provider the name of the provider                    
                </param>
                <return>
                    a TerminalFactory of the specified type                    
                </return>
                <throws>
                    NullPointerException if type is null                    
                </throws>
                <throws>
                    IllegalArgumentException if provider is null or the empty String                    
                </throws>
                <throws>
                    NoSuchAlgorithmException if a TerminalFactorySpi implementation
                      of the specified type is not available from the specified provider                    
                </throws>
                <throws>
                    NoSuchAlgorithmException if no TerminalFactory of the
                      specified type could be found                    
                </throws>
                <throws>
                    NoSuchProviderException if the specified provider could not
                      be found                    
                </throws>
            </javadoc>
            <method name="getInstance" type="TerminalFactory" line="281">
                <params>
                    <param name="type" type="String"/>
                    <param name="params" type="Object"/>
                    <param name="provider" type="String"/>
                </params>
                <declaration name="instance" type="Instance" line="282"/>
            </method>
            <javadoc line="288">
                Returns a TerminalFactory of the specified type that is initialized
                  with the specified parameters.
                  &lt;p&gt; A new TerminalFactory object encapsulating the
                  TerminalFactorySpi implementation from the specified provider object
                  is returned. Note that the specified provider object does not have to be
                  registered in the provider list.
                  &lt;p&gt;The &lt;code&gt;TerminalFactory&lt;/code&gt; is initialized with the
                  specified parameters Object. The type of parameters
                  needed may vary between different types of &lt;code&gt;TerminalFactory&lt;/code&gt;s.                
                <param>
                    type the type of the requested TerminalFactory                    
                </param>
                <param>
                    params the parameters to pass to the TerminalFactorySpi
                      implementation, or null if no parameters are needed                    
                </param>
                <param>
                    provider the provider                    
                </param>
                <return>
                    a TerminalFactory of the specified type                    
                </return>
                <throws>
                    NullPointerException if type is null                    
                </throws>
                <throws>
                    IllegalArgumentException if provider is null                    
                </throws>
                <throws>
                    NoSuchAlgorithmException if a TerminalFactorySpi implementation
                      of the specified type is not available from the specified Provider                    
                </throws>
            </javadoc>
            <method name="getInstance" type="TerminalFactory" line="313">
                <params>
                    <param name="type" type="String"/>
                    <param name="params" type="Object"/>
                    <param name="provider" type="Provider"/>
                </params>
                <declaration name="instance" type="Instance" line="314"/>
            </method>
            <javadoc line="320">
                Returns the provider of this TerminalFactory.                
                <return>
                    the provider of this TerminalFactory.                    
                </return>
            </javadoc>
            <method name="getProvider" type="Provider" line="325"/>
            <javadoc line="329">
                Returns the type of this TerminalFactory. This is the value that was
                  specified in the getInstance() method that returned this object.                
                <return>
                    the type of this TerminalFactory                    
                </return>
            </javadoc>
            <method name="getType" type="String" line="335"/>
            <javadoc line="339">
                Returns a new CardTerminals object encapsulating the terminals
                  supported by this factory.
                  See the class comment of the {@linkplain CardTerminals} class
                  regarding how the returned objects can be shared and reused.                
                <return>
                    a new CardTerminals object encapsulating the terminals
                      supported by this factory.                    
                </return>
            </javadoc>
            <method name="terminals" type="CardTerminals" line="348"/>
            <javadoc line="352">
                Returns a string representation of this TerminalFactory.                
                <return>
                    a string representation of this TerminalFactory.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="357"/>
        </class>
    </source>