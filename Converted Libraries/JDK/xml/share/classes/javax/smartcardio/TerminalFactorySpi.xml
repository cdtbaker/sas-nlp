<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.smartcardio">
        <import package="java.util"/>
        <class name="TerminalFactorySpi" line="3">
            <javadoc line="3">
                The TerminalFactorySpi class defines the service provider interface.
                  Applications do not access this class directly, instead see{@linkplain TerminalFactory}.
                  &lt;P&gt;Service providers that want to write a new implementation should define
                  a concrete subclass of TerminalFactorySpi with a constructor that takes
                  an &lt;code&gt;Object&lt;/code&gt; as parameter. That class needs to be registered
                  in a {@linkplain java.security.Provider}. The engine{@linkplain java.security.Provider.Service#getType type} is
                  &lt;code&gt;TerminalFactory&lt;/code&gt;.
                  Service providers also need to implement subclasses of the abstract classes{@linkplain CardTerminals}, {@linkplain CardTerminal}, {@linkplain Card},
                  and {@linkplain CardChannel}.
                  &lt;p&gt;For example:
                  &lt;pre&gt;&lt;em&gt;file MyProvider.java:&lt;/em&gt;
                  package com.somedomain.card;
                  import java.security.Provider;
                  public class MyProvider extends Provider {
                  public MyProvider() {
                  super(&quot;MyProvider&quot;, 1.0d, &quot;Smart Card Example&quot;);
                  put(&quot;TerminalFactory.MyType&quot;, &quot;com.somedomain.card.MySpi&quot;);
                  }
                  }
                  &lt;em&gt;file MySpi.java&lt;/em&gt;
                  package com.somedomain.card;
                  import javax.smartcardio.;
                  public class MySpi extends TerminalFactoySpi {
                  public MySpi(Object parameter) {
                  // initialize as appropriate
                  }
                  protected CardTerminals engineTerminals() {
                  // add implementation code here
                  }
                  }
                  &lt;/pre&gt;                
                <see>
                    TerminalFactory                    
                </see>
                <see>
                    java.security.Provider                    
                </see>
                <since>
                    1.6                    
                </since>
                <author>
                    Andreas Sterbenz                    
                </author>
                <author>
                    JSR 268 Expert Group                    
                </author>
            </javadoc>
            <javadoc line="42">
                Constructs a new TerminalFactorySpi object.
                  &lt;p&gt;This class is part of the service provider interface and not accessed
                  directly by applications. Applications
                  should use TerminalFactory objects, which can be obtained by calling
                  one of the{@linkplain TerminalFactory#getInstance TerminalFactory.getInstance()}methods.
                  &lt;p&gt;Concrete subclasses should define a constructor that takes an
                  &lt;code&gt;Object&lt;/code&gt; as parameter. It will be invoked when an
                  application calls one of the {@linkplain TerminalFactory#getInstance()} methods and receives the &lt;code&gt;params&lt;/code&gt;
                  object specified by the application.                
            </javadoc>
            <method name="TerminalFactorySpi" type="constructor" line="53"/>
            <method name="engineTerminals" type="CardTerminals" line="55"/>
            <javadoc line="55">
                Returns the CardTerminals created by this factory.                
                <return>
                    the CardTerminals created by this factory.                    
                </return>
            </javadoc>
        </class>
    </source>