<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.smartcardio">
        <import package="java.io"/>
        <import package="java.security.Permission"/>
        <class name="CardPermission" line="32">
            <extends class="Permission"/>
            <comment line="85">
                sum of all the actions above                
            </comment>
            <javadoc line="32">
                A permission for Smart Card operations. A CardPermission consists of the
                  name of the card terminal the permission applies to and a set of actions
                  that are valid for that terminal.
                  &lt;p&gt;A CardPermission with a name of &lt;code&gt;&lt;/code&gt; applies to all
                  card terminals. The actions string is a comma separated list of the actions
                  listed below, or &lt;code&gt;&lt;/code&gt; to signify &quot;all actions.&quot;
                  &lt;p&gt;Individual actions are:
                  &lt;dl&gt;
                  &lt;dt&gt;connect
                  &lt;dd&gt;connect to a card using{@linkplain CardTerminal#connect CardTerminal.connect()}&lt;dt&gt;reset
                  &lt;dd&gt;reset the card using {@linkplain Card#disconnect Card.disconnect(true)}&lt;dt&gt;exclusive
                  &lt;dd&gt;establish exclusive access to a card using{@linkplain Card#beginExclusive} and {@linkplain Card#endExclusiveendExclusive()}&lt;dt&gt;transmitControl
                  &lt;dd&gt;transmit a control command using{@linkplain Card#transmitControlCommand Card.transmitControlCommand()}&lt;dt&gt;getBasicChannel
                  &lt;dd&gt;obtain the basic logical channel using{@linkplain Card#getBasicChannel}&lt;dt&gt;openLogicalChannel
                  &lt;dd&gt;open a new logical channel using{@linkplain Card#openLogicalChannel}&lt;/dl&gt;                
                <since>
                    1.6                    
                </since>
                <author>
                    Andreas Sterbenz                    
                </author>
                <author>
                    JSR 268 Expert Group                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="75"/>
            <declaration name="A_CONNECT" type="int" line="77"/>
            <declaration name="A_EXCLUSIVE" type="int" line="78"/>
            <declaration name="A_GET_BASIC_CHANNEL" type="int" line="79"/>
            <declaration name="A_OPEN_LOGICAL_CHANNEL" type="int" line="80"/>
            <declaration name="A_RESET" type="int" line="81"/>
            <declaration name="A_TRANSMIT_CONTROL" type="int" line="82"/>
            <declaration name="A_ALL" type="int" line="85"/>
            <declaration name="ARRAY_MASKS" type="int[]" line="87"/>
            <declaration name="S_CONNECT" type="String" line="97"/>
            <declaration name="S_EXCLUSIVE" type="String" line="98"/>
            <declaration name="S_GET_BASIC_CHANNEL" type="String" line="99"/>
            <declaration name="S_OPEN_LOGICAL_CHANNEL" type="String" line="100"/>
            <declaration name="S_RESET" type="String" line="101"/>
            <declaration name="S_TRANSMIT_CONTROL" type="String" line="102"/>
            <declaration name="S_ALL" type="String" line="104"/>
            <declaration name="ARRAY_STRINGS" type="String[]" line="106"/>
            <declaration name="mask" type="int" line="116"/>
            <declaration name="actions" type="String" line="118"/>
            <javadoc line="118">
                @serial                
            </javadoc>
            <javadoc line="123">
                Constructs a new CardPermission with the specified actions.
                  &lt;code&gt;terminalName&lt;/code&gt; is the name of a CardTerminal or &lt;code&gt;&lt;/code&gt;
                  if this permission applies to all terminals. &lt;code&gt;actions&lt;/code&gt;
                  contains a comma-separated list of the individual actions
                  or &lt;code&gt;&lt;/code&gt; to signify all actions. For more information,
                  see the documentation at the top of this {@linkplain CardPermissionclass}.                
                <param>
                    terminalName the name of the card terminal, or <code></code>                    
                </param>
                <param>
                    actions the action string (or null if the set of permitted
                      actions is empty)                    
                </param>
                <throws>
                    NullPointerException if terminalName is null                    
                </throws>
                <throws>
                    IllegalArgumentException if actions is an invalid actions
                      specification                    
                </throws>
            </javadoc>
            <method name="CardPermission" type="constructor" line="140">
                <params>
                    <param name="terminalName" type="String"/>
                    <param name="actions" type="String"/>
                </params>
                <scope line="142"/>
            </method>
            <method name="getMask" type="int" line="148">
                <params>
                    <param name="actions" type="String"/>
                </params>
                <comment line="153">
                    try exact matches for simple actions first                    
                </comment>
                <scope line="149"/>
                <scope line="154">
                    <scope line="155"/>
                </scope>
                <scope line="160"/>
                <declaration name="mask" type="int" line="163"/>
                <declaration name="split" type="String[]" line="164"/>
                <scope line="166">
                    <scope line="167">
                        <scope line="168"/>
                    </scope>
                </scope>
            </method>
            <method name="getActions" type="String" line="179">
                <params>
                    <param name="mask" type="int"/>
                </params>
                <scope line="180"/>
                <declaration name="first" type="boolean" line="183"/>
                <declaration name="sb" type="StringBuilder" line="184"/>
                <scope line="185">
                    <declaration name="action" type="int" line="186"/>
                    <scope line="187">
                        <scope line="188"/>
                        <scope line="190"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="200">
                Returns the canonical string representation of the actions.
                  It is &lt;code&gt;&lt;/code&gt; to signify all actions defined by this class or
                  the string concatenation of the comma-separated,
                  lexicographically sorted list of individual actions.                
                <return>
                    the canonical string representation of the actions.                    
                </return>
            </javadoc>
            <method name="getActions" type="String" line="208">
                <scope line="209"/>
            </method>
            <javadoc line="215">
                Checks if this CardPermission object implies the specified permission.
                  That is the case, if and only if
                  &lt;ul&gt;
                  &lt;li&gt;&lt;p&gt;&lt;code&gt;permission&lt;/code&gt; is an instance of CardPermission,&lt;/p&gt;
                  &lt;li&gt;&lt;p&gt;&lt;code&gt;permission&lt;/code&gt;&apos;s actions are a proper subset of this
                  object&apos;s actions, and&lt;/p&gt;
                  &lt;li&gt;&lt;p&gt;this object&apos;s &lt;code&gt;getName()&lt;/code&gt; method is either
                  &lt;code&gt;&lt;/code&gt; or equal to &lt;code&gt;permission&lt;/code&gt;&apos;s &lt;code&gt;name&lt;/code&gt;.
                  &lt;/p&gt;
                  &lt;/ul&gt;                
                <param>
                    permission the permission to check against                    
                </param>
                <return>
                    true if and only if this CardPermission object implies the
                      specified permission.                    
                </return>
            </javadoc>
            <method name="implies" type="boolean" line="231">
                <params>
                    <param name="permission" type="Permission"/>
                </params>
                <scope line="232"/>
                <declaration name="other" type="CardPermission" line="235"/>
                <scope line="236"/>
                <declaration name="thisName" type="String" line="239"/>
                <scope line="240"/>
                <scope line="243"/>
            </method>
            <javadoc line="249">
                Compares the specified object with this CardPermission for equality.
                  This CardPermission is equal to another Object &lt;code&gt;object&lt;/code&gt;, if
                  and only if
                  &lt;ul&gt;
                  &lt;li&gt;&lt;p&gt;&lt;code&gt;object&lt;/code&gt; is an instance of CardPermission,&lt;/p&gt;
                  &lt;li&gt;&lt;p&gt;&lt;code&gt;this.getName()&lt;/code&gt; is equal to
                  &lt;code&gt;((CardPermission)object).getName()&lt;/code&gt;, and&lt;/p&gt;
                  &lt;li&gt;&lt;p&gt;&lt;code&gt;this.getActions()&lt;/code&gt; is equal to
                  &lt;code&gt;((CardPermission)object).getActions()&lt;/code&gt;.&lt;/p&gt;
                  &lt;/ul&gt;                
                <param>
                    obj the object to be compared for equality with this CardPermission                    
                </param>
                <return>
                    true if and only if the specified object is equal to this
                      CardPermission                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="265">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="266"/>
                <scope line="269"/>
                <declaration name="other" type="CardPermission" line="272"/>
            </method>
            <javadoc line="276">
                Returns the hash code value for this CardPermission object.                
                <return>
                    the hash code value for this CardPermission object.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="281"/>
            <method name="writeObject" type="void" line="285">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
                <comment line="286">
                    Write out the actions. The superclass takes care of the name.                    
                </comment>
                <comment line="287">
                    Call getActions to make sure actions field is initialized                    
                </comment>
                <scope line="288"/>
            </method>
            <method name="readObject" type="void" line="295">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
                <comment line="296">
                    Read in the actions, then restore the mask.                    
                </comment>
            </method>
        </class>
    </source>