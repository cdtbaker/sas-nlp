<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.smartcardio">
        <import package="java.io"/>
        <import package="java.security.Permission"/>
        <class name="CardPermission" line="4">
            <extends class="Permission"/>
            <javadoc line="4">
                A permission for Smart Card operations. A CardPermission consists of the
                  name of the card terminal the permission applies to and a set of actions
                  that are valid for that terminal.
                  &lt;p&gt;A CardPermission with a name of &lt;code&gt;&lt;/code&gt; applies to all
                  card terminals. The actions string is a comma separated list of the actions
                  listed below, or &lt;code&gt;&lt;/code&gt; to signify &quot;all actions.&quot;
                  &lt;p&gt;Individual actions are:
                  &lt;dl&gt;
                  &lt;dt&gt;connect
                  &lt;dd&gt;connect to a card using{@linkplain CardTerminal#connect CardTerminal.connect()}&lt;dt&gt;reset
                  &lt;dd&gt;reset the card using {@linkplain Card#disconnect Card.disconnect(true)}&lt;dt&gt;exclusive
                  &lt;dd&gt;establish exclusive access to a card using{@linkplain Card#beginExclusive} and {@linkplain Card#endExclusiveendExclusive()}&lt;dt&gt;transmitControl
                  &lt;dd&gt;transmit a control command using{@linkplain Card#transmitControlCommand Card.transmitControlCommand()}&lt;dt&gt;getBasicChannel
                  &lt;dd&gt;obtain the basic logical channel using{@linkplain Card#getBasicChannel}&lt;dt&gt;openLogicalChannel
                  &lt;dd&gt;open a new logical channel using{@linkplain Card#openLogicalChannel}&lt;/dl&gt;                
                <since>
                    1.6                    
                </since>
                <author>
                    Andreas Sterbenz                    
                </author>
                <author>
                    JSR 268 Expert Group                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="25"/>
            <declaration name="A_CONNECT" type="int" line="26"/>
            <declaration name="A_EXCLUSIVE" type="int" line="27"/>
            <declaration name="A_GET_BASIC_CHANNEL" type="int" line="28"/>
            <declaration name="A_OPEN_LOGICAL_CHANNEL" type="int" line="29"/>
            <declaration name="A_RESET" type="int" line="30"/>
            <declaration name="A_TRANSMIT_CONTROL" type="int" line="31"/>
            <declaration name="A_ALL" type="int" line="32"/>
            <declaration name="ARRAY_MASKS" type="int[]" line="33"/>
            <declaration name="S_CONNECT" type="String" line="34"/>
            <declaration name="S_EXCLUSIVE" type="String" line="35"/>
            <declaration name="S_GET_BASIC_CHANNEL" type="String" line="36"/>
            <declaration name="S_OPEN_LOGICAL_CHANNEL" type="String" line="37"/>
            <declaration name="S_RESET" type="String" line="38"/>
            <declaration name="S_TRANSMIT_CONTROL" type="String" line="39"/>
            <declaration name="S_ALL" type="String" line="40"/>
            <declaration name="ARRAY_STRINGS" type="String[]" line="41"/>
            <declaration name="mask" type="int" line="42"/>
            <declaration name="actions" type="String" line="43"/>
            <javadoc line="43">
                @serial                
            </javadoc>
            <javadoc line="47">
                Constructs a new CardPermission with the specified actions.
                  &lt;code&gt;terminalName&lt;/code&gt; is the name of a CardTerminal or &lt;code&gt;&lt;/code&gt;
                  if this permission applies to all terminals. &lt;code&gt;actions&lt;/code&gt;
                  contains a comma-separated list of the individual actions
                  or &lt;code&gt;&lt;/code&gt; to signify all actions. For more information,
                  see the documentation at the top of this {@linkplain CardPermissionclass}.                
                <param>
                    terminalName the name of the card terminal, or &lt;code&gt;&lt;/code&gt;                    
                </param>
                <param>
                    actions the action string (or null if the set of permitted
                      actions is empty)                    
                </param>
                <throws>
                    NullPointerException if terminalName is null                    
                </throws>
                <throws>
                    IllegalArgumentException if actions is an invalid actions
                      specification                    
                </throws>
            </javadoc>
            <method name="CardPermission" type="constructor" line="61">
                <params>
                    <param name="terminalName" type="String"/>
                    <param name="actions" type="String"/>
                </params>
                <scope line="63"/>
            </method>
            <method name="getMask" type="int" line="68">
                <params>
                    <param name="actions" type="String"/>
                </params>
                <scope line="69"/>
                <scope line="72">
                    <scope line="73"/>
                </scope>
                <scope line="77"/>
                <declaration name="mask" type="int" line="80"/>
                <declaration name="split" type="String[]" line="81"/>
                <scope line="82">
                    <scope line="83">
                        <scope line="84"/>
                    </scope>
                </scope>
            </method>
            <method name="getActions" type="String" line="93">
                <params>
                    <param name="mask" type="int"/>
                </params>
                <scope line="94"/>
                <declaration name="first" type="boolean" line="97"/>
                <declaration name="sb" type="StringBuilder" line="98"/>
                <scope line="99">
                    <declaration name="action" type="int" line="100"/>
                    <scope line="101">
                        <scope line="102"/>
                        <scope line="105"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="113">
                Returns the canonical string representation of the actions.
                  It is &lt;code&gt;&lt;/code&gt; to signify all actions defined by this class or
                  the string concatenation of the comma-separated,
                  lexicographically sorted list of individual actions.                
                <return>
                    the canonical string representation of the actions.                    
                </return>
            </javadoc>
            <method name="getActions" type="String" line="120">
                <scope line="121"/>
            </method>
            <javadoc line="126">
                Checks if this CardPermission object implies the specified permission.
                  That is the case, if and only if
                  &lt;ul&gt;
                  &lt;li&gt;&lt;p&gt;&lt;code&gt;permission&lt;/code&gt; is an instance of CardPermission,&lt;/p&gt;
                  &lt;li&gt;&lt;p&gt;&lt;code&gt;permission&lt;/code&gt;&apos;s actions are a proper subset of this
                  object&apos;s actions, and&lt;/p&gt;
                  &lt;li&gt;&lt;p&gt;this object&apos;s &lt;code&gt;getName()&lt;/code&gt; method is either
                  &lt;code&gt;&lt;/code&gt; or equal to &lt;code&gt;permission&lt;/code&gt;&apos;s &lt;code&gt;name&lt;/code&gt;.
                  &lt;/p&gt;
                  &lt;/ul&gt;                
                <param>
                    permission the permission to check against                    
                </param>
                <return>
                    true if and only if this CardPermission object implies the
                      specified permission.                    
                </return>
            </javadoc>
            <method name="implies" type="boolean" line="141">
                <params>
                    <param name="permission" type="Permission"/>
                </params>
                <scope line="142"/>
                <declaration name="other" type="CardPermission" line="145"/>
                <scope line="146"/>
                <declaration name="thisName" type="String" line="149"/>
                <scope line="150"/>
                <scope line="153"/>
            </method>
            <javadoc line="158">
                Compares the specified object with this CardPermission for equality.
                  This CardPermission is equal to another Object &lt;code&gt;object&lt;/code&gt;, if
                  and only if
                  &lt;ul&gt;
                  &lt;li&gt;&lt;p&gt;&lt;code&gt;object&lt;/code&gt; is an instance of CardPermission,&lt;/p&gt;
                  &lt;li&gt;&lt;p&gt;&lt;code&gt;this.getName()&lt;/code&gt; is equal to
                  &lt;code&gt;((CardPermission)object).getName()&lt;/code&gt;, and&lt;/p&gt;
                  &lt;li&gt;&lt;p&gt;&lt;code&gt;this.getActions()&lt;/code&gt; is equal to
                  &lt;code&gt;((CardPermission)object).getActions()&lt;/code&gt;.&lt;/p&gt;
                  &lt;/ul&gt;                
                <param>
                    obj the object to be compared for equality with this CardPermission                    
                </param>
                <return>
                    true if and only if the specified object is equal to this
                      CardPermission                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="173">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="174"/>
                <scope line="177"/>
                <declaration name="other" type="CardPermission" line="180"/>
            </method>
            <javadoc line="183">
                Returns the hash code value for this CardPermission object.                
                <return>
                    the hash code value for this CardPermission object.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="187"/>
            <method name="writeObject" type="void" line="190">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
                <scope line="191"/>
            </method>
            <method name="readObject" type="void" line="196">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
            </method>
        </class>
    </source>