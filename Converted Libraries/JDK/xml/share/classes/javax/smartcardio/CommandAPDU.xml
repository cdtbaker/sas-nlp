<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.smartcardio">
        <import package="java.util.Arrays"/>
        <import package="java.nio.ByteBuffer"/>
        <class name="CommandAPDU" line="4">
            <implements interface="java.io.Serializable"/>
            <javadoc line="4">
                A command APDU following the structure defined in ISO/IEC 7816-4.
                  It consists of a four byte header and a conditional body of variable length.
                  This class does not attempt to verify that the APDU encodes a semantically
                  valid command.
                  &lt;p&gt;Note that when the expected length of the response APDU is specified
                  in the {@linkplain #CommandAPDU(int,int,int,int,int) constructors},
                  the actual length (Ne) must be specified, not its
                  encoded form (Le). Similarly, {@linkplain #getNe} returns the actual
                  value Ne. In other words, a value of 0 means &quot;no data in the response APDU&quot;
                  rather than &quot;maximum length.&quot;
                  &lt;p&gt;This class supports both the short and extended forms of length
                  encoding for Ne and Nc. However, note that not all terminals and Smart Cards
                  are capable of accepting APDUs that use the extended form.
                  &lt;p&gt;For the header bytes CLA, INS, P1, and P2 the Java type &lt;code&gt;int&lt;/code&gt;
                  is used to represent the 8 bit unsigned values. In the constructors, only
                  the 8 lowest bits of the &lt;code&gt;int&lt;/code&gt; value specified by the application
                  are significant. The accessor methods always return the byte as an unsigned
                  value between 0 and 255.
                  &lt;p&gt;Instances of this class are immutable. Where data is passed in or out
                  via byte arrays, defensive cloning is performed.                
                <see>
                    ResponseAPDU                    
                </see>
                <see>
                    CardChannel#transmit CardChannel.transmit                    
                </see>
                <since>
                    1.6                    
                </since>
                <author>
                    Andreas Sterbenz                    
                </author>
                <author>
                    JSR 268 Expert Group                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="32"/>
            <declaration name="MAX_APDU_SIZE" type="int" line="33"/>
            <declaration name="apdu" type="byte[]" line="34"/>
            <javadoc line="34">
                @serial                
            </javadoc>
            <declaration name="nc" type="int" line="38"/>
            <declaration name="ne" type="int" line="39"/>
            <declaration name="dataOffset" type="int" line="40"/>
            <javadoc line="41">
                Constructs a CommandAPDU from a byte array containing the complete
                  APDU contents (header and body).
                  &lt;p&gt;Note that the apdu bytes are copied to protect against
                  subsequent modification.                
                <param>
                    apdu the complete command APDU                    
                </param>
                <throws>
                    NullPointerException if apdu is null                    
                </throws>
                <throws>
                    IllegalArgumentException if apdu does not contain a valid
                      command APDU                    
                </throws>
            </javadoc>
            <method name="CommandAPDU" type="constructor" line="51">
                <params>
                    <param name="apdu" type="byte[]"/>
                </params>
            </method>
            <javadoc line="55">
                Constructs a CommandAPDU from a byte array containing the complete
                  APDU contents (header and body). The APDU starts at the index
                  &lt;code&gt;apduOffset&lt;/code&gt; in the byte array and is &lt;code&gt;apduLength&lt;/code&gt;
                  bytes long.
                  &lt;p&gt;Note that the apdu bytes are copied to protect against
                  subsequent modification.                
                <param>
                    apdu the complete command APDU                    
                </param>
                <param>
                    apduOffset the offset in the byte array at which the apdu
                      data begins                    
                </param>
                <param>
                    apduLength the length of the APDU                    
                </param>
                <throws>
                    NullPointerException if apdu is null                    
                </throws>
                <throws>
                    IllegalArgumentException if apduOffset or apduLength are
                      negative or if apduOffset + apduLength are greater than apdu.length,
                      or if the specified bytes are not a valid APDU                    
                </throws>
            </javadoc>
            <method name="CommandAPDU" type="constructor" line="71">
                <params>
                    <param name="apdu" type="byte[]"/>
                    <param name="apduOffset" type="int"/>
                    <param name="apduLength" type="int"/>
                </params>
            </method>
            <method name="checkArrayBounds" type="void" line="77">
                <params>
                    <param name="b" type="byte[]"/>
                    <param name="ofs" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="78"/>
                <scope line="81">
                    <scope line="82"/>
                </scope>
                <scope line="86">
                    <scope line="87"/>
                </scope>
            </method>
            <javadoc line="92">
                Creates a CommandAPDU from the ByteBuffer containing the complete APDU
                  contents (header and body).
                  The buffer&apos;s &lt;code&gt;position&lt;/code&gt; must be set to the start of the APDU,
                  its &lt;code&gt;limit&lt;/code&gt; to the end of the APDU. Upon return, the buffer&apos;s
                  &lt;code&gt;position&lt;/code&gt; is equal to its limit; its limit remains unchanged.
                  &lt;p&gt;Note that the data in the ByteBuffer is copied to protect against
                  subsequent modification.                
                <param>
                    apdu the ByteBuffer containing the complete APDU                    
                </param>
                <throws>
                    NullPointerException if apdu is null                    
                </throws>
                <throws>
                    IllegalArgumentException if apdu does not contain a valid
                      command APDU                    
                </throws>
            </javadoc>
            <method name="CommandAPDU" type="constructor" line="105">
                <params>
                    <param name="apdu" type="ByteBuffer"/>
                </params>
            </method>
            <javadoc line="110">
                Constructs a CommandAPDU from the four header bytes. This is case 1
                  in ISO 7816, no command body.                
                <param>
                    cla the class byte CLA                    
                </param>
                <param>
                    ins the instruction byte INS                    
                </param>
                <param>
                    p1 the parameter byte P1                    
                </param>
                <param>
                    p2 the parameter byte P2                    
                </param>
            </javadoc>
            <method name="CommandAPDU" type="constructor" line="118">
                <params>
                    <param name="cla" type="int"/>
                    <param name="ins" type="int"/>
                    <param name="p1" type="int"/>
                    <param name="p2" type="int"/>
                </params>
            </method>
            <javadoc line="121">
                Constructs a CommandAPDU from the four header bytes and the expected
                  response data length. This is case 2 in ISO 7816, empty command data
                  field with Ne specified. If Ne is 0, the APDU is encoded as ISO 7816
                  case 1.                
                <param>
                    cla the class byte CLA                    
                </param>
                <param>
                    ins the instruction byte INS                    
                </param>
                <param>
                    p1 the parameter byte P1                    
                </param>
                <param>
                    p2 the parameter byte P2                    
                </param>
                <param>
                    ne the maximum number of expected data bytes in a response APDU                    
                </param>
                <throws>
                    IllegalArgumentException if ne is negative or greater than
                      65536                    
                </throws>
            </javadoc>
            <method name="CommandAPDU" type="constructor" line="134">
                <params>
                    <param name="cla" type="int"/>
                    <param name="ins" type="int"/>
                    <param name="p1" type="int"/>
                    <param name="p2" type="int"/>
                    <param name="ne" type="int"/>
                </params>
            </method>
            <javadoc line="137">
                Constructs a CommandAPDU from the four header bytes and command data.
                  This is case 3 in ISO 7816, command data present and Ne absent. The
                  value Nc is taken as data.length. If &lt;code&gt;data&lt;/code&gt; is null or
                  its length is 0, the APDU is encoded as ISO 7816 case 1.
                  &lt;p&gt;Note that the data bytes are copied to protect against
                  subsequent modification.                
                <param>
                    cla the class byte CLA                    
                </param>
                <param>
                    ins the instruction byte INS                    
                </param>
                <param>
                    p1 the parameter byte P1                    
                </param>
                <param>
                    p2 the parameter byte P2                    
                </param>
                <param>
                    data the byte array containing the data bytes of the command body                    
                </param>
                <throws>
                    IllegalArgumentException if data.length is greater than 65535                    
                </throws>
            </javadoc>
            <method name="CommandAPDU" type="constructor" line="151">
                <params>
                    <param name="cla" type="int"/>
                    <param name="ins" type="int"/>
                    <param name="p1" type="int"/>
                    <param name="p2" type="int"/>
                    <param name="data" type="byte[]"/>
                </params>
            </method>
            <javadoc line="154">
                Constructs a CommandAPDU from the four header bytes and command data.
                  This is case 3 in ISO 7816, command data present and Ne absent. The
                  value Nc is taken as dataLength. If &lt;code&gt;dataLength&lt;/code&gt;
                  is 0, the APDU is encoded as ISO 7816 case 1.
                  &lt;p&gt;Note that the data bytes are copied to protect against
                  subsequent modification.                
                <param>
                    cla the class byte CLA                    
                </param>
                <param>
                    ins the instruction byte INS                    
                </param>
                <param>
                    p1 the parameter byte P1                    
                </param>
                <param>
                    p2 the parameter byte P2                    
                </param>
                <param>
                    data the byte array containing the data bytes of the command body                    
                </param>
                <param>
                    dataOffset the offset in the byte array at which the data
                      bytes of the command body begin                    
                </param>
                <param>
                    dataLength the number of the data bytes in the command body                    
                </param>
                <throws>
                    NullPointerException if data is null and dataLength is not 0                    
                </throws>
                <throws>
                    IllegalArgumentException if dataOffset or dataLength are
                      negative or if dataOffset + dataLength are greater than data.length
                      or if dataLength is greater than 65535                    
                </throws>
            </javadoc>
            <method name="CommandAPDU" type="constructor" line="174">
                <params>
                    <param name="cla" type="int"/>
                    <param name="ins" type="int"/>
                    <param name="p1" type="int"/>
                    <param name="p2" type="int"/>
                    <param name="data" type="byte[]"/>
                    <param name="dataOffset" type="int"/>
                    <param name="dataLength" type="int"/>
                </params>
            </method>
            <javadoc line="177">
                Constructs a CommandAPDU from the four header bytes, command data,
                  and expected response data length. This is case 4 in ISO 7816,
                  command data and Ne present. The value Nc is taken as data.length
                  if &lt;code&gt;data&lt;/code&gt; is non-null and as 0 otherwise. If Ne or Nc
                  are zero, the APDU is encoded as case 1, 2, or 3 per ISO 7816.
                  &lt;p&gt;Note that the data bytes are copied to protect against
                  subsequent modification.                
                <param>
                    cla the class byte CLA                    
                </param>
                <param>
                    ins the instruction byte INS                    
                </param>
                <param>
                    p1 the parameter byte P1                    
                </param>
                <param>
                    p2 the parameter byte P2                    
                </param>
                <param>
                    data the byte array containing the data bytes of the command body                    
                </param>
                <param>
                    ne the maximum number of expected data bytes in a response APDU                    
                </param>
                <throws>
                    IllegalArgumentException if data.length is greater than 65535
                      or if ne is negative or greater than 65536                    
                </throws>
            </javadoc>
            <method name="CommandAPDU" type="constructor" line="194">
                <params>
                    <param name="cla" type="int"/>
                    <param name="ins" type="int"/>
                    <param name="p1" type="int"/>
                    <param name="p2" type="int"/>
                    <param name="data" type="byte[]"/>
                    <param name="ne" type="int"/>
                </params>
            </method>
            <method name="arrayLength" type="int" line="197">
                <params>
                    <param name="b" type="byte[]"/>
                </params>
            </method>
            <javadoc line="200">
                Command APDU encoding options:
                  case 1:  |CLA|INS|P1 |P2 |                                 len = 4
                  case 2s: |CLA|INS|P1 |P2 |LE |                             len = 5
                  case 3s: |CLA|INS|P1 |P2 |LC |...BODY...|                  len = 6..260
                  case 4s: |CLA|INS|P1 |P2 |LC |...BODY...|LE |              len = 7..261
                  case 2e: |CLA|INS|P1 |P2 |00 |LE1|LE2|                     len = 7
                  case 3e: |CLA|INS|P1 |P2 |00 |LC1|LC2|...BODY...|          len = 8..65542
                  case 4e: |CLA|INS|P1 |P2 |00 |LC1|LC2|...BODY...|LE1|LE2|  len =10..65544
                  LE, LE1, LE2 may be 0x00.
                  LC must not be 0x00 and LC1|LC2 must not be 0x00|0x00                
            </javadoc>
            <method name="parse" type="void" line="212">
                <scope line="213"/>
                <scope line="216"/>
                <declaration name="l1" type="int" line="219"/>
                <scope line="220"/>
                <scope line="224">
                    <scope line="225"/>
                    <scope line="230">
                        <declaration name="l2" type="int" line="233"/>
                    </scope>
                    <scope line="237"/>
                </scope>
                <scope line="241"/>
                <declaration name="l2" type="int" line="244"/>
                <scope line="245"/>
                <scope line="249"/>
                <scope line="252"/>
                <scope line="257">
                    <declaration name="leOfs" type="int" line="260"/>
                    <declaration name="l3" type="int" line="261"/>
                </scope>
                <scope line="264"/>
            </method>
            <javadoc line="268">
                Constructs a CommandAPDU from the four header bytes, command data,
                  and expected response data length. This is case 4 in ISO 7816,
                  command data and Le present. The value Nc is taken as
                  &lt;code&gt;dataLength&lt;/code&gt;.
                  If Ne or Nc
                  are zero, the APDU is encoded as case 1, 2, or 3 per ISO 7816.
                  &lt;p&gt;Note that the data bytes are copied to protect against
                  subsequent modification.                
                <param>
                    cla the class byte CLA                    
                </param>
                <param>
                    ins the instruction byte INS                    
                </param>
                <param>
                    p1 the parameter byte P1                    
                </param>
                <param>
                    p2 the parameter byte P2                    
                </param>
                <param>
                    data the byte array containing the data bytes of the command body                    
                </param>
                <param>
                    dataOffset the offset in the byte array at which the data
                      bytes of the command body begin                    
                </param>
                <param>
                    dataLength the number of the data bytes in the command body                    
                </param>
                <param>
                    ne the maximum number of expected data bytes in a response APDU                    
                </param>
                <throws>
                    NullPointerException if data is null and dataLength is not 0                    
                </throws>
                <throws>
                    IllegalArgumentException if dataOffset or dataLength are
                      negative or if dataOffset + dataLength are greater than data.length,
                      or if ne is negative or greater than 65536,
                      or if dataLength is greater than 65535                    
                </throws>
            </javadoc>
            <method name="CommandAPDU" type="constructor" line="292">
                <params>
                    <param name="cla" type="int"/>
                    <param name="ins" type="int"/>
                    <param name="p1" type="int"/>
                    <param name="p2" type="int"/>
                    <param name="data" type="byte[]"/>
                    <param name="dataOffset" type="int"/>
                    <param name="dataLength" type="int"/>
                    <param name="ne" type="int"/>
                </params>
                <scope line="294"/>
                <scope line="297"/>
                <scope line="300"/>
                <scope line="305">
                    <scope line="306"/>
                    <scope line="310">
                        <scope line="311">
                            <declaration name="len" type="byte" line="312"/>
                        </scope>
                        <scope line="317">
                            <declaration name="l1" type="byte" line="318"/>
                            <scope line="319"/>
                            <scope line="323"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="334">
                    <scope line="335">
                        <scope line="336"/>
                        <scope line="343"/>
                    </scope>
                    <scope line="353">
                        <scope line="354"/>
                        <scope line="362">
                            <scope line="370">
                                <declaration name="leOfs" type="int" line="371"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="setHeader" type="void" line="379">
                <params>
                    <param name="cla" type="int"/>
                    <param name="ins" type="int"/>
                    <param name="p1" type="int"/>
                    <param name="p2" type="int"/>
                </params>
            </method>
            <javadoc line="385">
                Returns the value of the class byte CLA.                
                <return>
                    the value of the class byte CLA.                    
                </return>
            </javadoc>
            <method name="getCLA" type="int" line="389"/>
            <javadoc line="392">
                Returns the value of the instruction byte INS.                
                <return>
                    the value of the instruction byte INS.                    
                </return>
            </javadoc>
            <method name="getINS" type="int" line="396"/>
            <javadoc line="399">
                Returns the value of the parameter byte P1.                
                <return>
                    the value of the parameter byte P1.                    
                </return>
            </javadoc>
            <method name="getP1" type="int" line="403"/>
            <javadoc line="406">
                Returns the value of the parameter byte P2.                
                <return>
                    the value of the parameter byte P2.                    
                </return>
            </javadoc>
            <method name="getP2" type="int" line="410"/>
            <javadoc line="413">
                Returns the number of data bytes in the command body (Nc) or 0 if this
                  APDU has no body. This call is equivalent to
                  &lt;code&gt;getData().length&lt;/code&gt;.                
                <return>
                    the number of data bytes in the command body or 0 if this APDU
                      has no body.                    
                </return>
            </javadoc>
            <method name="getNc" type="int" line="420"/>
            <javadoc line="423">
                Returns a copy of the data bytes in the command body. If this APDU as
                  no body, this method returns a byte array with length zero.                
                <return>
                    a copy of the data bytes in the command body or the empty
                      byte array if this APDU has no body.                    
                </return>
            </javadoc>
            <method name="getData" type="byte[]" line="429">
                <declaration name="data" type="byte[]" line="430"/>
            </method>
            <javadoc line="434">
                Returns the maximum number of expected data bytes in a response
                  APDU (Ne).                
                <return>
                    the maximum number of expected data bytes in a response APDU.                    
                </return>
            </javadoc>
            <method name="getNe" type="int" line="439"/>
            <javadoc line="442">
                Returns a copy of the bytes in this APDU.                
                <return>
                    a copy of the bytes in this APDU.                    
                </return>
            </javadoc>
            <method name="getBytes" type="byte[]" line="446"/>
            <javadoc line="449">
                Returns a string representation of this command APDU.                
                <return>
                    a String representation of this command APDU.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="453"/>
            <javadoc line="456">
                Compares the specified object with this command APDU for equality.
                  Returns true if the given object is also a CommandAPDU and its bytes are
                  identical to the bytes in this CommandAPDU.                
                <param>
                    obj the object to be compared for equality with this command APDU                    
                </param>
                <return>
                    true if the specified object is equal to this command APDU                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="463">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="464"/>
                <scope line="467"/>
                <declaration name="other" type="CommandAPDU" line="470"/>
            </method>
            <javadoc line="473">
                Returns the hash code value for this command APDU.                
                <return>
                    the hash code value for this command APDU.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="477"/>
            <method name="readObject" type="void" line="480">
                <params>
                    <param name="in" type="java.io.ObjectInputStream"/>
                </params>
            </method>
        </class>
    </source>