<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.smartcardio">
        <import package="java.nio"/>
        <class name="CardChannel" line="30">
            <javadoc line="30">
                A logical channel connection to a Smart Card. It is used to exchange APDUs
                  with a Smart Card.
                  A CardChannel object can be obtained by calling the method{@linkplain Card#getBasicChannel} or {@linkplain Card#openLogicalChannel}.                
                <see>
                    Card                    
                </see>
                <see>
                    CommandAPDU                    
                </see>
                <see>
                    ResponseAPDU                    
                </see>
                <since>
                    1.6                    
                </since>
                <author>
                    Andreas Sterbenz                    
                </author>
                <author>
                    JSR 268 Expert Group                    
                </author>
            </javadoc>
            <javadoc line="46">
                Constructs a new CardChannel object.
                  &lt;p&gt;This constructor is called by subclasses only. Application should
                  call the {@linkplain Card#getBasicChannel} and{@linkplain Card#openLogicalChannel} methods to obtain a CardChannel
                  object.                
            </javadoc>
            <method name="CardChannel" type="constructor" line="54">
                <comment line="56">
                    empty                    
                </comment>
            </method>
            <method name="getCard" type="Card" line="58"/>
            <javadoc line="58">
                Returns the Card this channel is associated with.                
                <return>
                    the Card this channel is associated with                    
                </return>
            </javadoc>
            <method name="getChannelNumber" type="int" line="65"/>
            <javadoc line="65">
                Returns the channel number of this CardChannel. A channel number of
                  0 indicates the basic logical channel.                
                <return>
                    the channel number of this CardChannel.                    
                </return>
                <throws>
                    IllegalStateException if this channel has been{@linkplain #close closed} or if the corresponding Card has been{@linkplain Card#disconnect disconnected}.                    
                </throws>
            </javadoc>
            <method name="transmit" type="ResponseAPDU" line="77"/>
            <javadoc line="77">
                Transmits the specified command APDU to the Smart Card and returns the
                  response APDU.
                  &lt;p&gt;The CLA byte of the command APDU is automatically adjusted to
                  match the channel number of this CardChannel.
                  &lt;p&gt;Note that this method cannot be used to transmit
                  &lt;code&gt;MANAGE CHANNEL&lt;/code&gt; APDUs. Logical channels should be managed
                  using the {@linkplain Card#openLogicalChannel} and {@linkplain CardChannel#close CardChannel.close()} methods.
                  &lt;p&gt;Implementations should transparently handle artifacts
                  of the transmission protocol.
                  For example, when using the T=0 protocol, the following processing
                  should occur as described in ISO/IEC 7816-4:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;p&gt;if the response APDU has an SW1 of &lt;code&gt;61&lt;/code&gt;, the
                  implementation should issue a &lt;code&gt;GET RESPONSE&lt;/code&gt; command
                  using &lt;code&gt;SW2&lt;/code&gt; as the &lt;code&gt;Le&lt;/code&gt;field.
                  This process is repeated as long as an SW1 of &lt;code&gt;61&lt;/code&gt; is
                  received. The response body of these exchanges is concatenated
                  to form the final response body.
                  &lt;li&gt;&lt;p&gt;if the response APDU is &lt;code&gt;6C XX&lt;/code&gt;, the implementation
                  should reissue the command using &lt;code&gt;XX&lt;/code&gt; as the
                  &lt;code&gt;Le&lt;/code&gt; field.
                  &lt;/ul&gt;
                  &lt;p&gt;The ResponseAPDU returned by this method is the result
                  after this processing has been performed.                
                <param>
                    command the command APDU                    
                </param>
                <return>
                    the response APDU received from the card                    
                </return>
                <throws>
                    IllegalStateException if this channel has been{@linkplain #close closed} or if the corresponding Card has been{@linkplain Card#disconnect disconnected}.                    
                </throws>
                <throws>
                    IllegalArgumentException if the APDU encodes a
                      <code>MANAGE CHANNEL</code> command                    
                </throws>
                <throws>
                    NullPointerException if command is null                    
                </throws>
                <throws>
                    CardException if the card operation failed                    
                </throws>
            </javadoc>
            <method name="transmit" type="int" line="123"/>
            <javadoc line="123">
                Transmits the command APDU stored in the command ByteBuffer and receives
                  the reponse APDU in the response ByteBuffer.
                  &lt;p&gt;The command buffer must contain valid command APDU data starting
                  at &lt;code&gt;command.position()&lt;/code&gt; and the APDU must be
                  &lt;code&gt;command.remaining()&lt;/code&gt; bytes long.
                  Upon return, the command buffer&apos;s position will be equal
                  to its limit; its limit will not have changed. The output buffer
                  will have received the response APDU bytes. Its position will have
                  advanced by the number of bytes received, which is also the return
                  value of this method.
                  &lt;p&gt;The CLA byte of the command APDU is automatically adjusted to
                  match the channel number of this CardChannel.
                  &lt;p&gt;Note that this method cannot be used to transmit
                  &lt;code&gt;MANAGE CHANNEL&lt;/code&gt; APDUs. Logical channels should be managed
                  using the {@linkplain Card#openLogicalChannel} and {@linkplain CardChannel#close CardChannel.close()} methods.
                  &lt;p&gt;See {@linkplain #transmit transmit()} for a discussion of the handling
                  of response APDUs with the SW1 values &lt;code&gt;61&lt;/code&gt; or &lt;code&gt;6C&lt;/code&gt;.                
                <param>
                    command the buffer containing the command APDU                    
                </param>
                <param>
                    response the buffer that shall receive the response APDU from
                      the card                    
                </param>
                <return>
                    the length of the received response APDU                    
                </return>
                <throws>
                    IllegalStateException if this channel has been{@linkplain #close closed} or if the corresponding Card has been{@linkplain Card#disconnect disconnected}.                    
                </throws>
                <throws>
                    NullPointerException if command or response is null                    
                </throws>
                <throws>
                    ReadOnlyBufferException if the response buffer is read-only                    
                </throws>
                <throws>
                    IllegalArgumentException if command and response are the
                      same object, if <code>response</code> may not have
                      sufficient space to receive the response APDU
                      or if the APDU encodes a <code>MANAGE CHANNEL</code> command                    
                </throws>
                <throws>
                    CardException if the card operation failed                    
                </throws>
            </javadoc>
            <method name="close" type="void" line="166"/>
            <javadoc line="166">
                Closes this CardChannel. The logical channel is closed by issuing
                  a &lt;code&gt;MANAGE CHANNEL&lt;/code&gt; command that should use the format
                  &lt;code&gt;[xx 70 80 0n]&lt;/code&gt; where &lt;code&gt;n&lt;/code&gt; is the channel number
                  of this channel and &lt;code&gt;xx&lt;/code&gt; is the &lt;code&gt;CLA&lt;/code&gt;
                  byte that encodes this logical channel and has all other bits set to 0.
                  After this method returns, calling other
                  methods in this class will raise an IllegalStateException.
                  &lt;p&gt;Note that the basic logical channel cannot be closed using this
                  method. It can be closed by calling {@link Card#disconnect}.                
                <throws>
                    CardException if the card operation failed                    
                </throws>
                <throws>
                    IllegalStateException if this CardChannel represents a
                      connection the basic logical channel                    
                </throws>
            </javadoc>
        </class>
    </source>