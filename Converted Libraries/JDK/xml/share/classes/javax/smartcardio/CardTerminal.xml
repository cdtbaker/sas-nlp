<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.smartcardio">
        <import package="java.util"/>
        <class name="CardTerminal" line="30">
            <javadoc line="30">
                A Smart Card terminal, sometimes refered to as a Smart Card Reader.
                  A CardTerminal object can be obtained by calling{@linkplain CardTerminals#list}or {@linkplain CardTerminals#getTerminal CardTerminals.getTerminal()}.
                  &lt;p&gt;Note that physical card readers with slots for multiple cards are
                  represented by one &lt;code&gt;CardTerminal&lt;/code&gt; object per such slot.                
                <see>
                    CardTerminals                    
                </see>
                <see>
                    TerminalFactory                    
                </see>
                <since>
                    1.6                    
                </since>
                <author>
                    Andreas Sterbenz                    
                </author>
                <author>
                    JSR 268 Expert Group                    
                </author>
            </javadoc>
            <javadoc line="48">
                Constructs a new CardTerminal object.
                  &lt;p&gt;This constructor is called by subclasses only. Application should
                  call {@linkplain CardTerminals#list list()}or {@linkplain CardTerminals#getTerminal getTerminal()}to obtain a CardTerminal object.                
            </javadoc>
            <method name="CardTerminal" type="constructor" line="56">
                <comment line="58">
                    empty                    
                </comment>
            </method>
            <method name="getName" type="String" line="60"/>
            <javadoc line="60">
                Returns the unique name of this terminal.                
                <return>
                    the unique name of this terminal.                    
                </return>
            </javadoc>
            <method name="connect" type="Card" line="67"/>
            <javadoc line="67">
                Establishes a connection to the card.
                  If a connection has previously established using
                  the specified protocol, this method returns the same Card object as
                  the previous call.                
                <param>
                    protocol the protocol to use (&quot;T=0&quot;, &quot;T=1&quot;, or &quot;T=CL&quot;), or &quot;&quot; to
                      connect using any available protocol.                    
                </param>
                <throws>
                    NullPointerException if protocol is null                    
                </throws>
                <throws>
                    IllegalArgumentException if protocol is an invalid protocol
                      specification                    
                </throws>
                <throws>
                    CardNotPresentException if no card is present in this terminal                    
                </throws>
                <throws>
                    CardException if a connection could not be established
                      using the specified protocol or if a connection has previously been
                      established using a different protocol                    
                </throws>
                <throws>
                    SecurityException if a SecurityManager exists and the
                      caller does not have the required{@linkplain CardPermission permission}                    
                </throws>
            </javadoc>
            <method name="isCardPresent" type="boolean" line="89"/>
            <javadoc line="89">
                Returns whether a card is present in this terminal.                
                <return>
                    whether a card is present in this terminal.                    
                </return>
                <throws>
                    CardException if the status could not be determined                    
                </throws>
            </javadoc>
            <method name="waitForCardPresent" type="boolean" line="98"/>
            <javadoc line="98">
                Waits until a card is present in this terminal or the timeout
                  expires. If the method returns due to an expired timeout, it returns
                  false. Otherwise it return true.
                  &lt;P&gt;If a card is present in this terminal when this
                  method is called, it returns immediately.                
                <param>
                    timeout if positive, block for up to &lt;code&gt;timeout&lt;/code&gt;
                      milliseconds; if zero, block indefinitely; must not be negative                    
                </param>
                <return>
                    false if the method returns due to an expired timeout,
                      true otherwise.                    
                </return>
                <throws>
                    IllegalArgumentException if timeout is negative                    
                </throws>
                <throws>
                    CardException if the operation failed                    
                </throws>
            </javadoc>
            <method name="waitForCardAbsent" type="boolean" line="116"/>
            <javadoc line="116">
                Waits until a card is absent in this terminal or the timeout
                  expires. If the method returns due to an expired timeout, it returns
                  false. Otherwise it return true.
                  &lt;P&gt;If no card is present in this terminal when this
                  method is called, it returns immediately.                
                <param>
                    timeout if positive, block for up to &lt;code&gt;timeout&lt;/code&gt;
                      milliseconds; if zero, block indefinitely; must not be negative                    
                </param>
                <return>
                    false if the method returns due to an expired timeout,
                      true otherwise.                    
                </return>
                <throws>
                    IllegalArgumentException if timeout is negative                    
                </throws>
                <throws>
                    CardException if the operation failed                    
                </throws>
            </javadoc>
        </class>
    </source>