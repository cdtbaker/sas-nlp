<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.net">
        <import package="java.io.IOException"/>
        <import package="java.net.InetAddress"/>
        <import package="java.net.Socket"/>
        <import package="java.net.SocketException"/>
        <import package="java.net.UnknownHostException"/>
        <class name="SocketFactory" line="35">
            <comment line="74">
                NOTE:  JDK 1.1 bug in class GC, this can get collected
                 even though it&apos;s always accessible via getDefault().                
            </comment>
            <javadoc line="35">
                This class creates sockets.  It may be subclassed by other factories,
                  which create particular subclasses of sockets and thus provide a general
                  framework for the addition of public socket-level functionality.
                  &lt;P&gt; Socket factories are a simple way to capture a variety of policies
                  related to the sockets being constructed, producing such sockets in
                  a way which does not require special configuration of the code which
                  asks for the sockets:  &lt;UL&gt;
                  &lt;LI&gt; Due to polymorphism of both factories and sockets, different
                  kinds of sockets can be used by the same application code just
                  by passing it different kinds of factories.
                  &lt;LI&gt; Factories can themselves be customized with parameters used
                  in socket construction.  So for example, factories could be
                  customized to return sockets with different networking timeouts
                  or security parameters already configured.
                  &lt;LI&gt; The sockets returned to the application can be subclasses
                  of java.net.Socket, so that they can directly expose new APIs
                  for features such as compression, security, record marking,
                  statistics collection, or firewall tunneling.
                  &lt;/UL&gt;
                  &lt;P&gt; Factory classes are specified by environment-specific configuration
                  mechanisms.  For example, the &lt;em&gt;getDefault&lt;/em&gt; method could return
                  a factory that was appropriate for a particular user or applet, and a
                  framework could use a factory customized to its own purposes.                
                <since>
                    1.4                    
                </since>
                <see>
                    ServerSocketFactory                    
                </see>
                <author>
                    David Brownell                    
                </author>
            </javadoc>
            <declaration name="theFactory" type="SocketFactory" line="77"/>
            <javadoc line="79">
                Creates a &lt;code&gt;SocketFactory&lt;/code&gt;.                
            </javadoc>
            <method name="SocketFactory" type="constructor" line="82"/>
            <javadoc line="85">
                Returns a copy of the environment&apos;s default socket factory.                
                <return>
                    the default &lt;code&gt;SocketFactory&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="getDefault" type="SocketFactory" line="91">
                <comment line="95">
                    Different implementations of this method SHOULD
                     work rather differently.  For example, driving
                     this from a system property, or using a different
                     implementation than JavaSoft&apos;s.                    
                </comment>
                <scope line="92">
                    <scope line="93"/>
                </scope>
            </method>
            <javadoc line="108">
                Creates an unconnected socket.                
                <return>
                    the unconnected socket                    
                </return>
                <throws>
                    IOException if the socket cannot be created                    
                </throws>
                <see>
                    java.net.Socket#connect(java.net.SocketAddress)                    
                </see>
                <see>
                    java.net.Socket#connect(java.net.SocketAddress,int)                    
                </see>
                <see>
                    java.net.Socket#Socket()                    
                </see>
            </javadoc>
            <method name="createSocket" type="Socket" line="117">
                <comment line="119">
                    bug 6771432:
                     The Exception is used by HttpsClient to signal that
                     unconnected sockets have not been implemented.                    
                </comment>
                <declaration name="uop" type="UnsupportedOperationException" line="123"/>
                <declaration name="se" type="SocketException" line="125"/>
            </method>
            <method name="createSocket" type="Socket" line="132"/>
            <javadoc line="132">
                Creates a socket and connects it to the specified remote host
                  at the specified remote port.  This socket is configured using
                  the socket options established for this factory.
                  &lt;p&gt;
                  If there is a security manager, its &lt;code&gt;checkConnect&lt;/code&gt;
                  method is called with the host address and &lt;code&gt;port&lt;/code&gt;
                  as its arguments. This could result in a SecurityException.                
                <param>
                    host the server host name with which to connect, or
                      &lt;code&gt;null&lt;/code&gt; for the loopback address.                    
                </param>
                <param>
                    port the server port                    
                </param>
                <return>
                    the &lt;code&gt;Socket&lt;/code&gt;                    
                </return>
                <throws>
                    IOException if an I/O error occurs when creating the socket                    
                </throws>
                <throws>
                    SecurityException if a security manager exists and its
                      &lt;code&gt;checkConnect&lt;/code&gt; method doesn&apos;t allow the operation.                    
                </throws>
                <throws>
                    UnknownHostException if the host is not known                    
                </throws>
                <throws>
                    IllegalArgumentException if the port parameter is outside the
                      specified range of valid port values, which is between 0 and
                      65535, inclusive.                    
                </throws>
                <see>
                    SecurityManager#checkConnect                    
                </see>
                <see>
                    java.net.Socket#Socket(String,int)                    
                </see>
            </javadoc>
            <method name="createSocket" type="Socket" line="159"/>
            <javadoc line="159">
                Creates a socket and connects it to the specified remote host
                  on the specified remote port.
                  The socket will also be bound to the local address and port supplied.
                  This socket is configured using
                  the socket options established for this factory.
                  &lt;p&gt;
                  If there is a security manager, its &lt;code&gt;checkConnect&lt;/code&gt;
                  method is called with the host address and &lt;code&gt;port&lt;/code&gt;
                  as its arguments. This could result in a SecurityException.                
                <param>
                    host the server host name with which to connect, or
                      &lt;code&gt;null&lt;/code&gt; for the loopback address.                    
                </param>
                <param>
                    port the server port                    
                </param>
                <param>
                    localHost the local address the socket is bound to                    
                </param>
                <param>
                    localPort the local port the socket is bound to                    
                </param>
                <return>
                    the &lt;code&gt;Socket&lt;/code&gt;                    
                </return>
                <throws>
                    IOException if an I/O error occurs when creating the socket                    
                </throws>
                <throws>
                    SecurityException if a security manager exists and its
                      &lt;code&gt;checkConnect&lt;/code&gt; method doesn&apos;t allow the operation.                    
                </throws>
                <throws>
                    UnknownHostException if the host is not known                    
                </throws>
                <throws>
                    IllegalArgumentException if the port parameter or localPort
                      parameter is outside the specified range of valid port values,
                      which is between 0 and 65535, inclusive.                    
                </throws>
                <see>
                    SecurityManager#checkConnect                    
                </see>
                <see>
                    java.net.Socket#Socket(String,int,java.net.InetAddress,int)                    
                </see>
            </javadoc>
            <method name="createSocket" type="Socket" line="191"/>
            <javadoc line="191">
                Creates a socket and connects it to the specified port number
                  at the specified address.  This socket is configured using
                  the socket options established for this factory.
                  &lt;p&gt;
                  If there is a security manager, its &lt;code&gt;checkConnect&lt;/code&gt;
                  method is called with the host address and &lt;code&gt;port&lt;/code&gt;
                  as its arguments. This could result in a SecurityException.                
                <param>
                    host the server host                    
                </param>
                <param>
                    port the server port                    
                </param>
                <return>
                    the &lt;code&gt;Socket&lt;/code&gt;                    
                </return>
                <throws>
                    IOException if an I/O error occurs when creating the socket                    
                </throws>
                <throws>
                    SecurityException if a security manager exists and its
                      &lt;code&gt;checkConnect&lt;/code&gt; method doesn&apos;t allow the operation.                    
                </throws>
                <throws>
                    IllegalArgumentException if the port parameter is outside the
                      specified range of valid port values, which is between 0 and
                      65535, inclusive.                    
                </throws>
                <throws>
                    NullPointerException if &lt;code&gt;host&lt;/code&gt; is null.                    
                </throws>
                <see>
                    SecurityManager#checkConnect                    
                </see>
                <see>
                    java.net.Socket#Socket(java.net.InetAddress,int)                    
                </see>
            </javadoc>
            <method name="createSocket" type="Socket" line="217"/>
            <javadoc line="217">
                Creates a socket and connect it to the specified remote address
                  on the specified remote port.  The socket will also be bound
                  to the local address and port suplied.  The socket is configured using
                  the socket options established for this factory.
                  &lt;p&gt;
                  If there is a security manager, its &lt;code&gt;checkConnect&lt;/code&gt;
                  method is called with the host address and &lt;code&gt;port&lt;/code&gt;
                  as its arguments. This could result in a SecurityException.                
                <param>
                    address the server network address                    
                </param>
                <param>
                    port the server port                    
                </param>
                <param>
                    localAddress the client network address                    
                </param>
                <param>
                    localPort the client port                    
                </param>
                <return>
                    the &lt;code&gt;Socket&lt;/code&gt;                    
                </return>
                <throws>
                    IOException if an I/O error occurs when creating the socket                    
                </throws>
                <throws>
                    SecurityException if a security manager exists and its
                      &lt;code&gt;checkConnect&lt;/code&gt; method doesn&apos;t allow the operation.                    
                </throws>
                <throws>
                    IllegalArgumentException if the port parameter or localPort
                      parameter is outside the specified range of valid port values,
                      which is between 0 and 65535, inclusive.                    
                </throws>
                <throws>
                    NullPointerException if &lt;code&gt;address&lt;/code&gt; is null.                    
                </throws>
                <see>
                    SecurityManager#checkConnect                    
                </see>
                <see>
                    java.net.Socket#Socket(java.net.InetAddress,int,java.net.InetAddress,int)                    
                </see>
            </javadoc>
        </class>
        <class name="DefaultSocketFactory" line="262">
            <extends class="SocketFactory"/>
            <comment line="74">
                NOTE:  JDK 1.1 bug in class GC, this can get collected
                 even though it&apos;s always accessible via getDefault().                
            </comment>
            <method name="createSocket" type="Socket" line="264"/>
            <method name="createSocket" type="Socket" line="270">
                <params>
                    <param name="host" type="String"/>
                    <param name="port" type="int"/>
                </params>
            </method>
            <method name="createSocket" type="Socket" line="276">
                <params>
                    <param name="address" type="InetAddress"/>
                    <param name="port" type="int"/>
                </params>
            </method>
            <method name="createSocket" type="Socket" line="283">
                <params>
                    <param name="host" type="String"/>
                    <param name="port" type="int"/>
                    <param name="clientAddress" type="InetAddress"/>
                    <param name="clientPort" type="int"/>
                </params>
            </method>
            <method name="createSocket" type="Socket" line="290">
                <params>
                    <param name="address" type="InetAddress"/>
                    <param name="port" type="int"/>
                    <param name="clientAddress" type="InetAddress"/>
                    <param name="clientPort" type="int"/>
                </params>
            </method>
        </class>
    </source>