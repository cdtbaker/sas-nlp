<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.net.ssl">
        <import package="java.net.InetAddress"/>
        <import package="java.security.Principal"/>
        <interface name="SSLSession">
            <javadoc line="31">
                In SSL, sessions are used to describe an ongoing relationship between
                  two entities.  Each SSL connection involves one session at a time, but
                  that session may be used on many connections between those entities,
                  simultaneously or sequentially.  The session used on a connection may
                  also be replaced by a different session.  Sessions are created, or
                  rejoined, as part of the SSL handshaking protocol. Sessions may be
                  invalidated due to policies affecting security or resource usage,
                  or by an application explicitly calling &lt;code&gt;invalidate&lt;/code&gt;.
                  Session management policies are typically used to tune performance.
                  &lt;P&gt; In addition to the standard session attributes, SSL sessions expose
                  these read-only attributes:  &lt;UL&gt;
                  &lt;LI&gt; &lt;em&gt;Peer Identity.&lt;/em&gt;  Sessions are between a particular
                  client and a particular server.  The identity of the peer may
                  have been established as part of session setup.  Peers are
                  generally identified by X.509 certificate chains.
                  &lt;LI&gt; &lt;em&gt;Cipher Suite Name.&lt;/em&gt;  Cipher suites describe the
                  kind of cryptographic protection that&apos;s used by connections
                  in a particular session.
                  &lt;LI&gt; &lt;em&gt;Peer Host.&lt;/em&gt;  All connections in a session are
                  between the same two hosts.  The address of the host on the other
                  side of the connection is available.
                  &lt;/UL&gt;
                  &lt;P&gt; Sessions may be explicitly invalidated.  Invalidation may also
                  be done implicitly, when faced with certain kinds of errors.                
                <since>
                    1.4                    
                </since>
                <author>
                    David Brownell                    
                </author>
            </javadoc>
            <method name="getId" type="byte[]" line="68"/>
            <javadoc line="68">
                Returns the identifier assigned to this Session.                
                <return>
                    the Session identifier                    
                </return>
            </javadoc>
            <method name="getSessionContext" type="SSLSessionContext" line="76"/>
            <javadoc line="76">
                Returns the context in which this session is bound.
                  &lt;P&gt;
                  This context may be unavailable in some environments,
                  in which case this method returns null.
                  &lt;P&gt;
                  If the context is available and there is a
                  security manager installed, the caller may require
                  permission to access it or a security exception may be thrown.
                  In a Java environment, the security manager&apos;s
                  &lt;code&gt;checkPermission&lt;/code&gt; method is called with a
                  &lt;code&gt;SSLPermission(&quot;getSSLSessionContext&quot;)&lt;/code&gt; permission.                
                <throws>
                    SecurityException if the calling thread does not have
                      permission to get SSL session context.                    
                </throws>
                <return>
                    the session context used for this session, or null
                      if the context is unavailable.                    
                </return>
            </javadoc>
            <method name="getCreationTime" type="long" line="97"/>
            <javadoc line="97">
                Returns the time at which this Session representation was created,
                  in milliseconds since midnight, January 1, 1970 UTC.                
                <return>
                    the time this Session was created                    
                </return>
            </javadoc>
            <method name="getLastAccessedTime" type="long" line="106"/>
            <javadoc line="106">
                Returns the last time this Session representation was accessed by the
                  session level infrastructure, in milliseconds since
                  midnight, January 1, 1970 UTC.
                  &lt;P&gt;
                  Access indicates a new connection being established using session data.
                  Application level operations, such as getting or setting a value
                  associated with the session, are not reflected in this access time.
                  &lt;P&gt; This information is particularly useful in session management
                  policies.  For example, a session manager thread could leave all
                  sessions in a given context which haven&apos;t been used in a long time;
                  or, the sessions might be sorted according to age to optimize some task.                
                <return>
                    the last time this Session was accessed                    
                </return>
            </javadoc>
            <method name="invalidate" type="void" line="125"/>
            <javadoc line="125">
                Invalidates the session.
                  &lt;P&gt;
                  Future connections will not be able to
                  resume or join this session.  However, any existing connection
                  using this session can continue to use the session until the
                  connection is closed.                
                <see>
                    #isValid()                    
                </see>
            </javadoc>
            <method name="isValid" type="boolean" line="138"/>
            <javadoc line="138">
                Returns whether this session is valid and available for resuming or
                  joining.                
                <return>
                    true if this session may be rejoined.                    
                </return>
                <see>
                    #invalidate()                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="putValue" type="void" line="150"/>
            <javadoc line="150">
                Binds the specified &lt;code&gt;value&lt;/code&gt; object into the
                  session&apos;s application layer data
                  with the given &lt;code&gt;name&lt;/code&gt;.
                  &lt;P&gt;
                  Any existing binding using the same &lt;code&gt;name&lt;/code&gt; is
                  replaced.  If the new (or existing) &lt;code&gt;value&lt;/code&gt; implements the
                  &lt;code&gt;SSLSessionBindingListener&lt;/code&gt; interface, the object
                  represented by &lt;code&gt;value&lt;/code&gt; is notified appropriately.
                  &lt;p&gt;
                  For security reasons, the same named values may not be
                  visible across different access control contexts.                
                <param>
                    name the name to which the data object will be bound.
                      This may not be null.                    
                </param>
                <param>
                    value the data object to be bound. This may not be null.                    
                </param>
                <throws>
                    IllegalArgumentException if either argument is null.                    
                </throws>
            </javadoc>
            <method name="getValue" type="Object" line="172"/>
            <javadoc line="172">
                Returns the object bound to the given name in the session&apos;s
                  application layer data.  Returns null if there is no such binding.
                  &lt;p&gt;
                  For security reasons, the same named values may not be
                  visible across different access control contexts.                
                <param>
                    name the name of the binding to find.                    
                </param>
                <return>
                    the value bound to that name, or null if the binding does
                      not exist.                    
                </return>
                <throws>
                    IllegalArgumentException if the argument is null.                    
                </throws>
            </javadoc>
            <method name="removeValue" type="void" line="187"/>
            <javadoc line="187">
                Removes the object bound to the given name in the session&apos;s
                  application layer data.  Does nothing if there is no object
                  bound to the given name.  If the bound existing object
                  implements the &lt;code&gt;SessionBindingListener&lt;/code&gt; interface,
                  it is notified appropriately.
                  &lt;p&gt;
                  For security reasons, the same named values may not be
                  visible across different access control contexts.                
                <param>
                    name the name of the object to remove visible
                      across different access control contexts                    
                </param>
                <throws>
                    IllegalArgumentException if the argument is null.                    
                </throws>
            </javadoc>
            <method name="getValueNames" type="String[]" line="204"/>
            <javadoc line="204">
                Returns an array of the names of all the application layer
                  data objects bound into the Session.
                  &lt;p&gt;
                  For security reasons, the same named values may not be
                  visible across different access control contexts.                
                <return>
                    a non-null (possibly empty) array of names of the objects
                      bound to this Session.                    
                </return>
            </javadoc>
            <method name="getPeerCertificates" type="java.security.cert.Certificate[]" line="216"/>
            <javadoc line="216">
                Returns the identity of the peer which was established as part
                  of defining the session.
                  &lt;P&gt;
                  Note: This method can be used only when using certificate-based
                  cipher suites; using it with non-certificate-based cipher suites,
                  such as Kerberos, will throw an SSLPeerUnverifiedException.                
                <return>
                    an ordered array of peer certificates,
                      with the peer's own certificate first followed by any
                      certificate authorities.                    
                </return>
                <exception>
                    SSLPeerUnverifiedException if the peer's identity has not
                      been verified                    
                </exception>
                <see>
                    #getPeerPrincipal()                    
                </see>
            </javadoc>
            <method name="getLocalCertificates" type="java.security.cert.Certificate[]" line="234"/>
            <javadoc line="234">
                Returns the certificate(s) that were sent to the peer during
                  handshaking.
                  &lt;P&gt;
                  Note: This method is useful only when using certificate-based
                  cipher suites.
                  &lt;P&gt;
                  When multiple certificates are available for use in a
                  handshake, the implementation chooses what it considers the
                  &quot;best&quot; certificate chain available, and transmits that to
                  the other side.  This method allows the caller to know
                  which certificate chain was actually used.                
                <return>
                    an ordered array of certificates,
                      with the local certificate first followed by any
                      certificate authorities.  If no certificates were sent,
                      then null is returned.                    
                </return>
                <see>
                    #getLocalPrincipal()                    
                </see>
            </javadoc>
            <method name="getPeerCertificateChain" type="javax.security.cert.X509Certificate[]" line="256"/>
            <javadoc line="256">
                Returns the identity of the peer which was identified as part
                  of defining the session.
                  &lt;P&gt;
                  Note: This method can be used only when using certificate-based
                  cipher suites; using it with non-certificate-based cipher suites,
                  such as Kerberos, will throw an SSLPeerUnverifiedException.
                  &lt;p&gt;&lt;em&gt;Note: this method exists for compatibility with previous
                  releases. New applications should use{@link #getPeerCertificates} instead.&lt;/em&gt;&lt;/p&gt;                
                <return>
                    an ordered array of peer X.509 certificates,
                      with the peer's own certificate first followed by any
                      certificate authorities.  (The certificates are in
                      the original JSSE certificate{@link javax.security.cert.X509Certificate} format.)                    
                </return>
                <exception>
                    SSLPeerUnverifiedException if the peer's identity
                      has not been verified                    
                </exception>
                <see>
                    #getPeerPrincipal()                    
                </see>
            </javadoc>
            <method name="getPeerPrincipal" type="Principal" line="280"/>
            <javadoc line="280">
                Returns the identity of the peer which was established as part of
                  defining the session.                
                <return>
                    the peer's principal. Returns an X500Principal of the
                      end-entity certiticate for X509-based cipher suites, and
                      KerberosPrincipal for Kerberos cipher suites.                    
                </return>
                <throws>
                    SSLPeerUnverifiedException if the peer's identity has not
                      been verified                    
                </throws>
                <see>
                    #getPeerCertificates()                    
                </see>
                <see>
                    #getLocalPrincipal()                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getLocalPrincipal" type="Principal" line="299"/>
            <javadoc line="299">
                Returns the principal that was sent to the peer during handshaking.                
                <return>
                    the principal sent to the peer. Returns an X500Principal
                      of the end-entity certificate for X509-based cipher suites, and
                      KerberosPrincipal for Kerberos cipher suites. If no principal was
                      sent, then null is returned.                    
                </return>
                <see>
                    #getLocalCertificates()                    
                </see>
                <see>
                    #getPeerPrincipal()                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getCipherSuite" type="String" line="314"/>
            <javadoc line="314">
                Returns the name of the SSL cipher suite which is used for all
                  connections in the session.
                  &lt;P&gt; This defines the level of protection
                  provided to the data sent on the connection, including the kind
                  of encryption used and most aspects of how authentication is done.                
                <return>
                    the name of the session's cipher suite                    
                </return>
            </javadoc>
            <method name="getProtocol" type="String" line="326"/>
            <javadoc line="326">
                Returns the standard name of the protocol used for all
                  connections in the session.
                  &lt;P&gt; This defines the protocol used in the connection.                
                <return>
                    the standard name of the protocol used for all
                      connections in the session.                    
                </return>
            </javadoc>
            <method name="getPeerHost" type="String" line="337"/>
            <javadoc line="337">
                Returns the host name of the peer in this session.
                  &lt;P&gt;
                  For the server, this is the client&apos;s host;  and for
                  the client, it is the server&apos;s host. The name may not be
                  a fully qualified host name or even a host name at all as
                  it may represent a string encoding of the peer&apos;s network address.
                  If such a name is desired, it might
                  be resolved through a name service based on the value returned
                  by this method.
                  &lt;P&gt;
                  This value is not authenticated and should not be relied upon.
                  It is mainly used as a hint for &lt;code&gt;SSLSession&lt;/code&gt; caching
                  strategies.                
                <return>
                    the host name of the peer host, or null if no information
                      is available.                    
                </return>
            </javadoc>
            <method name="getPeerPort" type="int" line="357"/>
            <javadoc line="357">
                Returns the port number of the peer in this session.
                  &lt;P&gt;
                  For the server, this is the client&apos;s port number;  and for
                  the client, it is the server&apos;s port number.
                  &lt;P&gt;
                  This value is not authenticated and should not be relied upon.
                  It is mainly used as a hint for &lt;code&gt;SSLSession&lt;/code&gt; caching
                  strategies.                
                <return>
                    the port number of the peer host, or -1 if no information
                      is available.                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getPacketBufferSize" type="int" line="374"/>
            <javadoc line="374">
                Gets the current size of the largest SSL/TLS packet that is expected
                  when using this session.
                  &lt;P&gt;
                  A &lt;code&gt;SSLEngine&lt;/code&gt; using this session may generate SSL/TLS
                  packets of any size up to and including the value returned by this
                  method. All &lt;code&gt;SSLEngine&lt;/code&gt; network buffers should be sized
                  at least this large to avoid insufficient space problems when
                  performing &lt;code&gt;wrap&lt;/code&gt; and &lt;code&gt;unwrap&lt;/code&gt; calls.                
                <return>
                    the current maximum expected network packet size                    
                </return>
                <see>
                    SSLEngine#wrap(ByteBuffer,ByteBuffer)                    
                </see>
                <see>
                    SSLEngine#unwrap(ByteBuffer,ByteBuffer)                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getApplicationBufferSize" type="int" line="394"/>
            <javadoc line="394">
                Gets the current size of the largest application data that is
                  expected when using this session.
                  &lt;P&gt;
                  &lt;code&gt;SSLEngine&lt;/code&gt; application data buffers must be large
                  enough to hold the application data from any inbound network
                  application data packet received.  Typically, outbound
                  application data buffers can be of any size.                
                <return>
                    the current maximum expected application packet size                    
                </return>
                <see>
                    SSLEngine#wrap(ByteBuffer,ByteBuffer)                    
                </see>
                <see>
                    SSLEngine#unwrap(ByteBuffer,ByteBuffer)                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
        </interface>
    </source>