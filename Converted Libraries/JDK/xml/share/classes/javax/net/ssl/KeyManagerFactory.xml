<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.net.ssl">
        <import package="java.security.Security"/>
        <import package="java.security"/>
        <import package="sun.security.jca.GetInstance"/>
        <class name="KeyManagerFactory" line="33">
            <comment line="44">
                The provider                
            </comment>
            <comment line="47">
                The provider implementation (delegate)                
            </comment>
            <comment line="50">
                The name of the key management algorithm.                
            </comment>
            <javadoc line="33">
                This class acts as a factory for key managers based on a
                  source of key material. Each key manager manages a specific
                  type of key material for use by secure sockets. The key
                  material is based on a KeyStore and/or provider specific sources.                
                <since>
                    1.4                    
                </since>
                <see>
                    KeyManager                    
                </see>
            </javadoc>
            <declaration name="provider" type="Provider" line="44"/>
            <declaration name="factorySpi" type="KeyManagerFactorySpi" line="47"/>
            <declaration name="algorithm" type="String" line="50"/>
            <javadoc line="52">
                Obtains the default KeyManagerFactory algorithm name.
                  &lt;p&gt;The default algorithm can be changed at runtime by setting
                  the value of the &quot;ssl.KeyManagerFactory.algorithm&quot; security
                  property (set in the Java security properties file or by calling{@link java.security.Security#setProperty(java.lang.String,java.lang.String)})
                  to the desired algorithm name.                
                <see>
                    java.security.Security#setProperty(java.lang.String,java.lang.String)                    
                </see>
                <return>
                    the default algorithm name as specified in the
                      Java security properties, or an implementation-specific
                      default if no such property exists.                    
                </return>
            </javadoc>
            <method name="getDefaultAlgorithm" type="String" line="68">
                <declaration name="type" type="String" line="69"/>
                <anonymous_class line="70">
                    <method name="run" type="String" line="71"/>
                </anonymous_class>
                <scope line="76"/>
            </method>
            <javadoc line="82">
                Creates a KeyManagerFactory object.                
                <param>
                    factorySpi the delegate                    
                </param>
                <param>
                    provider the provider                    
                </param>
                <param>
                    algorithm the algorithm                    
                </param>
            </javadoc>
            <method name="KeyManagerFactory" type="constructor" line="90">
                <params>
                    <param name="factorySpi" type="KeyManagerFactorySpi"/>
                    <param name="provider" type="Provider"/>
                    <param name="algorithm" type="String"/>
                </params>
            </method>
            <javadoc line="96">
                Returns the algorithm name of this &lt;code&gt;KeyManagerFactory&lt;/code&gt; object.
                  &lt;p&gt;This is the same name that was specified in one of the
                  &lt;code&gt;getInstance&lt;/code&gt; calls that created this
                  &lt;code&gt;KeyManagerFactory&lt;/code&gt; object.                
                <return>
                    the algorithm name of this <code>KeyManagerFactory</code> object.                    
                </return>
            </javadoc>
            <method name="getAlgorithm" type="String" line="105"/>
            <javadoc line="109">
                Returns a &lt;code&gt;KeyManagerFactory&lt;/code&gt; object that acts as a
                  factory for key managers.
                  &lt;p&gt; This method traverses the list of registered security Providers,
                  starting with the most preferred Provider.
                  A new KeyManagerFactory object encapsulating the
                  KeyManagerFactorySpi implementation from the first
                  Provider that supports the specified algorithm is returned.
                  &lt;p&gt; Note that the list of registered providers may be retrieved via
                  the {@link Security#getProviders() Security.getProviders()} method.                
                <param>
                    algorithm the standard name of the requested algorithm.
                      See the <a href=
                      "{@docRoot}/../technotes/guides/security/jsse/JSSERefGuide.html">
                      Java Secure Socket Extension Reference Guide </a>
                      for information about standard algorithm names.                    
                </param>
                <return>
                    the new <code>KeyManagerFactory</code> object.                    
                </return>
                <exception>
                    NoSuchAlgorithmException if no Provider supports a
                      KeyManagerFactorySpi implementation for the
                      specified algorithm.                    
                </exception>
                <exception>
                    NullPointerException if <code>algorithm</code> is null.                    
                </exception>
                <see>
                    java.security.Provider                    
                </see>
            </javadoc>
            <method name="getInstance" type="KeyManagerFactory" line="138">
                <params>
                    <param name="algorithm" type="String"/>
                </params>
                <declaration name="instance" type="GetInstance.Instance" line="139"/>
            </method>
            <javadoc line="146">
                Returns a &lt;code&gt;KeyManagerFactory&lt;/code&gt; object that acts as a
                  factory for key managers.
                  &lt;p&gt; A new KeyManagerFactory object encapsulating the
                  KeyManagerFactorySpi implementation from the specified provider
                  is returned.  The specified provider must be registered
                  in the security provider list.
                  &lt;p&gt; Note that the list of registered providers may be retrieved via
                  the {@link Security#getProviders() Security.getProviders()} method.                
                <param>
                    algorithm the standard name of the requested algorithm.
                      See the <a href=
                      "{@docRoot}/../technotes/guides/security/jsse/JSSERefGuide.html">
                      Java Secure Socket Extension Reference Guide </a>
                      for information about standard algorithm names.                    
                </param>
                <param>
                    provider the name of the provider.                    
                </param>
                <return>
                    the new <code>KeyManagerFactory</code> object.                    
                </return>
                <throws>
                    NoSuchAlgorithmException if a KeyManagerFactorySpi
                      implementation for the specified algorithm is not
                      available from the specified provider.                    
                </throws>
                <throws>
                    NoSuchProviderException if the specified provider is not
                      registered in the security provider list.                    
                </throws>
                <throws>
                    IllegalArgumentException if the provider name is null or empty.                    
                </throws>
                <throws>
                    NullPointerException if <code>algorithm</code> is null.                    
                </throws>
                <see>
                    java.security.Provider                    
                </see>
            </javadoc>
            <method name="getInstance" type="KeyManagerFactory" line="182">
                <params>
                    <param name="algorithm" type="String"/>
                    <param name="provider" type="String"/>
                </params>
                <declaration name="instance" type="GetInstance.Instance" line="183"/>
            </method>
            <javadoc line="190">
                Returns a &lt;code&gt;KeyManagerFactory&lt;/code&gt; object that acts as a
                  factory for key managers.
                  &lt;p&gt; A new KeyManagerFactory object encapsulating the
                  KeyManagerFactorySpi implementation from the specified Provider
                  object is returned.  Note that the specified Provider object
                  does not have to be registered in the provider list.                
                <param>
                    algorithm the standard name of the requested algorithm.
                      See the <a href=
                      "{@docRoot}/../technotes/guides/security/jsse/JSSERefGuide.html">
                      Java Secure Socket Extension Reference Guide </a>
                      for information about standard algorithm names.                    
                </param>
                <param>
                    provider an instance of the provider.                    
                </param>
                <return>
                    the new <code>KeyManagerFactory</code> object.                    
                </return>
                <throws>
                    NoSuchAlgorithmException if a KeyManagerFactorySpi
                      implementation for the specified algorithm is not available
                      from the specified Provider object.                    
                </throws>
                <throws>
                    IllegalArgumentException if provider is null.                    
                </throws>
                <throws>
                    NullPointerException if <code>algorithm</code> is null.                    
                </throws>
                <see>
                    java.security.Provider                    
                </see>
            </javadoc>
            <method name="getInstance" type="KeyManagerFactory" line="219">
                <params>
                    <param name="algorithm" type="String"/>
                    <param name="provider" type="Provider"/>
                </params>
                <declaration name="instance" type="GetInstance.Instance" line="220"/>
            </method>
            <javadoc line="227">
                Returns the provider of this &lt;code&gt;KeyManagerFactory&lt;/code&gt; object.                
                <return>
                    the provider of this <code>KeyManagerFactory</code> object                    
                </return>
            </javadoc>
            <method name="getProvider" type="Provider" line="232"/>
            <javadoc line="237">
                Initializes this factory with a source of key material.
                  &lt;P&gt;
                  The provider typically uses a KeyStore for obtaining
                  key material for use during secure socket negotiations.
                  The KeyStore is generally password-protected.
                  &lt;P&gt;
                  For more flexible initialization, please see{@link #init(ManagerFactoryParameters)}.
                  &lt;P&gt;                
                <param>
                    ks the key store or null                    
                </param>
                <param>
                    password the password for recovering keys in the KeyStore                    
                </param>
                <throws>
                    KeyStoreException if this operation fails                    
                </throws>
                <throws>
                    NoSuchAlgorithmException if the specified algorithm is not
                      available from the specified provider.                    
                </throws>
                <throws>
                    UnrecoverableKeyException if the key cannot be recovered
                      (e.g. the given password is wrong).                    
                </throws>
            </javadoc>
            <method name="init" type="void" line="258">
                <params>
                    <param name="ks" type="KeyStore"/>
                    <param name="password" type="char[]"/>
                </params>
            </method>
            <javadoc line="263">
                Initializes this factory with a source of provider-specific
                  key material.
                  &lt;P&gt;
                  In some cases, initialization parameters other than a keystore
                  and password may be needed by a provider.  Users of that
                  particular provider are expected to pass an implementation of
                  the appropriate &lt;CODE&gt;ManagerFactoryParameters&lt;/CODE&gt; as
                  defined by the provider.  The provider can then call the
                  specified methods in the &lt;CODE&gt;ManagerFactoryParameters&lt;/CODE&gt;
                  implementation to obtain the needed information.                
                <param>
                    spec an implementation of a provider-specific parameter
                      specification                    
                </param>
                <throws>
                    InvalidAlgorithmParameterException if an error is encountered                    
                </throws>
            </javadoc>
            <method name="init" type="void" line="280">
                <params>
                    <param name="spec" type="ManagerFactoryParameters"/>
                </params>
            </method>
            <javadoc line="285">
                Returns one key manager for each type of key material.                
                <return>
                    the key managers                    
                </return>
                <throws>
                    IllegalStateException if the KeyManagerFactory is not initialized                    
                </throws>
            </javadoc>
            <method name="getKeyManagers" type="KeyManager[]" line="291"/>
        </class>
    </source>