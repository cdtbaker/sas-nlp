<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.net.ssl">
        <import package="java.security.Security"/>
        <import package="java.security"/>
        <import package="sun.security.jca.GetInstance"/>
        <class name="TrustManagerFactory" line="5">
            <javadoc line="5">
                This class acts as a factory for trust managers based on a
                  source of trust material. Each trust manager manages a specific
                  type of trust material for use by secure sockets. The trust
                  material is based on a KeyStore and/or provider specific sources.                
                <since>
                    1.4                    
                </since>
                <see>
                    TrustManager                    
                </see>
            </javadoc>
            <declaration name="provider" type="Provider" line="14"/>
            <declaration name="factorySpi" type="TrustManagerFactorySpi" line="15"/>
            <declaration name="algorithm" type="String" line="16"/>
            <javadoc line="17">
                Obtains the default TrustManagerFactory algorithm name.
                  &lt;p&gt;The default TrustManager can be changed at runtime by setting
                  the value of the &quot;ssl.TrustManagerFactory.algorithm&quot; security
                  property (set in the Java security properties file or by calling{@link java.security.Security#setProperty(String,String) })
                  to the desired algorithm name.                
                <return>
                    the default algorithm name as specified in the
                      Java security properties, or an implementation-specific default
                      if no such property exists.                    
                </return>
            </javadoc>
            <method name="getDefaultAlgorithm" type="String" line="27">
                <declaration name="type" type="String" line="28"/>
                <anonymous_class line="29">
                    <method name="run" type="String" line="30"/>
                </anonymous_class>
                <scope line="35"/>
            </method>
            <javadoc line="40">
                Creates a TrustManagerFactory object.                
                <param>
                    factorySpi the delegate                    
                </param>
                <param>
                    provider the provider                    
                </param>
                <param>
                    algorithm the algorithm                    
                </param>
            </javadoc>
            <method name="TrustManagerFactory" type="constructor" line="46">
                <params>
                    <param name="factorySpi" type="TrustManagerFactorySpi"/>
                    <param name="provider" type="Provider"/>
                    <param name="algorithm" type="String"/>
                </params>
            </method>
            <javadoc line="51">
                Returns the algorithm name of this &lt;code&gt;TrustManagerFactory&lt;/code&gt;
                  object.
                  &lt;p&gt;This is the same name that was specified in one of the
                  &lt;code&gt;getInstance&lt;/code&gt; calls that created this
                  &lt;code&gt;TrustManagerFactory&lt;/code&gt; object.                
                <return>
                    the algorithm name of this <code>TrustManagerFactory</code>
                      object                    
                </return>
            </javadoc>
            <method name="getAlgorithm" type="String" line="60"/>
            <javadoc line="63">
                Returns a &lt;code&gt;TrustManagerFactory&lt;/code&gt; object that acts as a
                  factory for trust managers.
                  &lt;p&gt; This method traverses the list of registered security Providers,
                  starting with the most preferred Provider.
                  A new TrustManagerFactory object encapsulating the
                  TrustManagerFactorySpi implementation from the first
                  Provider that supports the specified algorithm is returned.
                  &lt;p&gt; Note that the list of registered providers may be retrieved via
                  the {@link Security#getProviders() Security.getProviders()} method.                
                <param>
                    algorithm the standard name of the requested trust management
                      algorithm.  See the <a href=
                      "{@docRoot}/../technotes/guides/security/jsse/JSSERefGuide.html">
                      Java Secure Socket Extension Reference Guide </a>
                      for information about standard algorithm names.                    
                </param>
                <return>
                    the new <code>TrustManagerFactory</code> object.                    
                </return>
                <exception>
                    NoSuchAlgorithmException if no Provider supports a
                      TrustManagerFactorySpi implementation for the
                      specified algorithm.                    
                </exception>
                <exception>
                    NullPointerException if algorithm is null.                    
                </exception>
                <see>
                    java.security.Provider                    
                </see>
            </javadoc>
            <method name="getInstance" type="TrustManagerFactory" line="85">
                <params>
                    <param name="algorithm" type="String"/>
                </params>
                <declaration name="instance" type="GetInstance.Instance" line="86"/>
            </method>
            <javadoc line="89">
                Returns a &lt;code&gt;TrustManagerFactory&lt;/code&gt; object that acts as a
                  factory for trust managers.
                  &lt;p&gt; A new KeyManagerFactory object encapsulating the
                  KeyManagerFactorySpi implementation from the specified provider
                  is returned.  The specified provider must be registered
                  in the security provider list.
                  &lt;p&gt; Note that the list of registered providers may be retrieved via
                  the {@link Security#getProviders() Security.getProviders()} method.                
                <param>
                    algorithm the standard name of the requested trust management
                      algorithm.  See the <a href=
                      "{@docRoot}/../technotes/guides/security/jsse/JSSERefGuide.html">
                      Java Secure Socket Extension Reference Guide </a>
                      for information about standard algorithm names.                    
                </param>
                <param>
                    provider the name of the provider.                    
                </param>
                <return>
                    the new <code>TrustManagerFactory</code> object                    
                </return>
                <throws>
                    NoSuchAlgorithmException if a TrustManagerFactorySpi
                      implementation for the specified algorithm is not
                      available from the specified provider.                    
                </throws>
                <throws>
                    NoSuchProviderException if the specified provider is not
                      registered in the security provider list.                    
                </throws>
                <throws>
                    IllegalArgumentException if the provider name is null or empty.                    
                </throws>
                <throws>
                    NullPointerException if algorithm is null.                    
                </throws>
                <see>
                    java.security.Provider                    
                </see>
            </javadoc>
            <method name="getInstance" type="TrustManagerFactory" line="114">
                <params>
                    <param name="algorithm" type="String"/>
                    <param name="provider" type="String"/>
                </params>
                <declaration name="instance" type="GetInstance.Instance" line="115"/>
            </method>
            <javadoc line="118">
                Returns a &lt;code&gt;TrustManagerFactory&lt;/code&gt; object that acts as a
                  factory for trust managers.
                  &lt;p&gt; A new TrustManagerFactory object encapsulating the
                  TrustManagerFactorySpi implementation from the specified Provider
                  object is returned.  Note that the specified Provider object
                  does not have to be registered in the provider list.                
                <param>
                    algorithm the standard name of the requested trust management
                      algorithm.  See the <a href=
                      "{@docRoot}/../technotes/guides/security/jsse/JSSERefGuide.html">
                      Java Secure Socket Extension Reference Guide </a>
                      for information about standard algorithm names.                    
                </param>
                <param>
                    provider an instance of the provider.                    
                </param>
                <return>
                    the new <code>TrustManagerFactory</code> object.                    
                </return>
                <throws>
                    NoSuchAlgorithmException if a TrustManagerFactorySpi
                      implementation for the specified algorithm is not available
                      from the specified Provider object.                    
                </throws>
                <throws>
                    IllegalArgumentException if the provider is null.                    
                </throws>
                <throws>
                    NullPointerException if algorithm is null.                    
                </throws>
                <see>
                    java.security.Provider                    
                </see>
            </javadoc>
            <method name="getInstance" type="TrustManagerFactory" line="139">
                <params>
                    <param name="algorithm" type="String"/>
                    <param name="provider" type="Provider"/>
                </params>
                <declaration name="instance" type="GetInstance.Instance" line="140"/>
            </method>
            <javadoc line="143">
                Returns the provider of this &lt;code&gt;TrustManagerFactory&lt;/code&gt; object.                
                <return>
                    the provider of this <code>TrustManagerFactory</code> object                    
                </return>
            </javadoc>
            <method name="getProvider" type="Provider" line="147"/>
            <javadoc line="150">
                Initializes this factory with a source of certificate
                  authorities and related trust material.
                  &lt;P&gt;
                  The provider typically uses a KeyStore as a basis for making
                  trust decisions.
                  &lt;P&gt;
                  For more flexible initialization, please see{@link #init(ManagerFactoryParameters)}.                
                <param>
                    ks the key store, or null                    
                </param>
                <throws>
                    KeyStoreException if this operation fails                    
                </throws>
            </javadoc>
            <method name="init" type="void" line="161">
                <params>
                    <param name="ks" type="KeyStore"/>
                </params>
            </method>
            <javadoc line="164">
                Initializes this factory with a source of provider-specific
                  trust material.
                  &lt;P&gt;
                  In some cases, initialization parameters other than a keystore
                  may be needed by a provider.  Users of that particular provider
                  are expected to pass an implementation of the appropriate
                  &lt;CODE&gt;ManagerFactoryParameters&lt;/CODE&gt; as defined by the
                  provider.  The provider can then call the specified methods in
                  the &lt;CODE&gt;ManagerFactoryParameters&lt;/CODE&gt; implementation to obtain the
                  needed information.                
                <param>
                    spec an implementation of a provider-specific parameter
                      specification                    
                </param>
                <throws>
                    InvalidAlgorithmParameterException if an error is
                      encountered                    
                </throws>
            </javadoc>
            <method name="init" type="void" line="180">
                <params>
                    <param name="spec" type="ManagerFactoryParameters"/>
                </params>
            </method>
            <javadoc line="183">
                Returns one trust manager for each type of trust material.                
                <throws>
                    IllegalStateException if the factory is not initialized.                    
                </throws>
                <return>
                    the trust managers                    
                </return>
            </javadoc>
            <method name="getTrustManagers" type="TrustManager[]" line="188"/>
        </class>
    </source>