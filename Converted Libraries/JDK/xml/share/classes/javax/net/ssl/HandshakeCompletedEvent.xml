<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.net.ssl">
        <import package="java.util.EventObject"/>
        <import package="java.security.cert.Certificate"/>
        <import package="java.security.Principal"/>
        <import package="java.security.cert.X509Certificate"/>
        <import package="javax.security.auth.x500.X500Principal"/>
        <class name="HandshakeCompletedEvent" line="7">
            <extends class="EventObject"/>
            <javadoc line="7">
                This event indicates that an SSL handshake completed on a given
                  SSL connection.  All of the core information about that handshake&apos;s
                  result is captured through an &quot;SSLSession&quot; object.  As a convenience,
                  this event class provides direct access to some important session
                  attributes.
                  &lt;P&gt; The source of this event is the SSLSocket on which handshaking
                  just completed.                
                <see>
                    SSLSocket                    
                </see>
                <see>
                    HandshakeCompletedListener                    
                </see>
                <see>
                    SSLSession                    
                </see>
                <since>
                    1.4                    
                </since>
                <author>
                    David Brownell                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="22"/>
            <declaration name="session" type="SSLSession" line="23"/>
            <javadoc line="24">
                Constructs a new HandshakeCompletedEvent.                
                <param>
                    sock the SSLSocket acting as the source of the event                    
                </param>
                <param>
                    s the SSLSession this event is associated with                    
                </param>
            </javadoc>
            <method name="HandshakeCompletedEvent" type="constructor" line="29">
                <params>
                    <param name="sock" type="SSLSocket"/>
                    <param name="s" type="SSLSession"/>
                </params>
            </method>
            <javadoc line="33">
                Returns the session that triggered this event.                
                <return>
                    the &lt;code&gt;SSLSession&lt;/code&gt; for this handshake                    
                </return>
            </javadoc>
            <method name="getSession" type="SSLSession" line="37"/>
            <javadoc line="40">
                Returns the cipher suite in use by the session which was produced
                  by the handshake.  (This is a convenience method for
                  getting the ciphersuite from the SSLsession.)                
                <return>
                    the name of the cipher suite negotiated during this session.                    
                </return>
            </javadoc>
            <method name="getCipherSuite" type="String" line="46"/>
            <javadoc line="49">
                Returns the certificate(s) that were sent to the peer during
                  handshaking.
                  Note: This method is useful only when using certificate-based
                  cipher suites.
                  When multiple certificates are available for use in a
                  handshake, the implementation chooses what it considers the
                  &quot;best&quot; certificate chain available, and transmits that to
                  the other side.  This method allows the caller to know
                  which certificate chain was actually used.                
                <return>
                    an ordered array of certificates, with the local
                      certificate first followed by any
                      certificate authorities.  If no certificates were sent,
                      then null is returned.                    
                </return>
                <see>
                    #getLocalPrincipal()                    
                </see>
            </javadoc>
            <method name="getLocalCertificates" type="java.security.cert.Certificate[]" line="65"/>
            <javadoc line="68">
                Returns the identity of the peer which was established as part
                  of defining the session.
                  Note: This method can be used only when using certificate-based
                  cipher suites; using it with non-certificate-based cipher suites,
                  such as Kerberos, will throw an SSLPeerUnverifiedException.                
                <return>
                    an ordered array of the peer certificates,
                      with the peer&apos;s own certificate first followed by
                      any certificate authorities.                    
                </return>
                <exception>
                    SSLPeerUnverifiedException if the peer is not verified.                    
                </exception>
                <see>
                    #getPeerPrincipal()                    
                </see>
            </javadoc>
            <method name="getPeerCertificates" type="java.security.cert.Certificate[]" line="80"/>
            <javadoc line="83">
                Returns the identity of the peer which was identified as part
                  of defining the session.
                  Note: This method can be used only when using certificate-based
                  cipher suites; using it with non-certificate-based cipher suites,
                  such as Kerberos, will throw an SSLPeerUnverifiedException.
                  &lt;p&gt;&lt;em&gt;Note: this method exists for compatibility with previous
                  releases. New applications should use{@link #getPeerCertificates} instead.&lt;/em&gt;&lt;/p&gt;                
                <return>
                    an ordered array of peer X.509 certificates,
                      with the peer&apos;s own certificate first followed by any
                      certificate authorities.  (The certificates are in
                      the original JSSE{@link javax.security.cert.X509Certificate} format).                    
                </return>
                <exception>
                    SSLPeerUnverifiedException if the peer is not verified.                    
                </exception>
                <see>
                    #getPeerPrincipal()                    
                </see>
            </javadoc>
            <method name="getPeerCertificateChain" type="javax.security.cert.X509Certificate[]" line="98"/>
            <javadoc line="101">
                Returns the identity of the peer which was established as part of
                  defining the session.                
                <return>
                    the peer&apos;s principal. Returns an X500Principal of the
                      end-entity certiticate for X509-based cipher suites, and
                      KerberosPrincipal for Kerberos cipher suites.                    
                </return>
                <throws>
                    SSLPeerUnverifiedException if the peer&apos;s identity has not
                      been verified                    
                </throws>
                <see>
                    #getPeerCertificates()                    
                </see>
                <see>
                    #getLocalPrincipal()                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getPeerPrincipal" type="Principal" line="113">
                <declaration name="principal" type="Principal" line="114"/>
                <scope line="115"/>
                <scope line="118">
                    <declaration name="certs" type="Certificate[]" line="119"/>
                </scope>
            </method>
            <javadoc line="124">
                Returns the principal that was sent to the peer during handshaking.                
                <return>
                    the principal sent to the peer. Returns an X500Principal
                      of the end-entity certificate for X509-based cipher suites, and
                      KerberosPrincipal for Kerberos cipher suites. If no principal was
                      sent, then null is returned.                    
                </return>
                <see>
                    #getLocalCertificates()                    
                </see>
                <see>
                    #getPeerPrincipal()                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getLocalPrincipal" type="Principal" line="134">
                <declaration name="principal" type="Principal" line="135"/>
                <scope line="136"/>
                <scope line="139">
                    <declaration name="certs" type="Certificate[]" line="141"/>
                    <scope line="142"/>
                </scope>
            </method>
            <javadoc line="148">
                Returns the socket which is the source of this event.
                  (This is a convenience function, to let applications
                  write code without type casts.)                
                <return>
                    the socket on which the connection was made.                    
                </return>
            </javadoc>
            <method name="getSocket" type="SSLSocket" line="154"/>
        </class>
    </source>