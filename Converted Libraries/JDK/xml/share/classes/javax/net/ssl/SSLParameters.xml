<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.net.ssl">
        <import package="java.security.AlgorithmConstraints"/>
        <class name="SSLParameters" line="30">
            <javadoc line="30">
                Encapsulates parameters for an SSL/TLS connection. The parameters
                  are the list of ciphersuites to be accepted in an SSL/TLS handshake,
                  the list of protocols to be allowed, the endpoint identification
                  algorithm during SSL/TLS handshaking, the algorithm constraints and
                  whether SSL/TLS servers should request or require client authentication.
                  &lt;p&gt;
                  SSLParameters can be created via the constructors in this class.
                  Objects can also be obtained using the &lt;code&gt;getSSLParameters()&lt;/code&gt;
                  methods in{@link SSLSocket#getSSLParameters SSLSocket} and{@link SSLServerSocket#getSSLParameters SSLServerSocket} and{@link SSLEngine#getSSLParameters SSLEngine} or the{@link SSLContext#getDefaultSSLParameters getDefaultSSLParameters()} and{@link SSLContext#getSupportedSSLParameters getSupportedSSLParameters()}methods in &lt;code&gt;SSLContext&lt;/code&gt;.
                  &lt;p&gt;
                  SSLParameters can be applied to a connection via the methods{@link SSLSocket#setSSLParameters SSLSocket.setSSLParameters()} and{@link SSLServerSocket#setSSLParameters SSLServerSocket.setSSLParameters()}and {@link SSLEngine#setSSLParameters SSLEngine.getSSLParameters()}.                
                <see>
                    SSLSocket                    
                </see>
                <see>
                    SSLEngine                    
                </see>
                <see>
                    SSLContext                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="cipherSuites" type="String[]" line="60"/>
            <declaration name="protocols" type="String[]" line="61"/>
            <declaration name="wantClientAuth" type="boolean" line="62"/>
            <declaration name="needClientAuth" type="boolean" line="63"/>
            <declaration name="identificationAlgorithm" type="String" line="64"/>
            <declaration name="algorithmConstraints" type="AlgorithmConstraints" line="65"/>
            <javadoc line="67">
                Constructs SSLParameters.
                  &lt;p&gt;
                  The cipherSuites and protocols values are set to &lt;code&gt;null&lt;/code&gt;,
                  wantClientAuth and needClientAuth are set to &lt;code&gt;false&lt;/code&gt;.                
            </javadoc>
            <method name="SSLParameters" type="constructor" line="73">
                <comment line="74">
                    empty                    
                </comment>
            </method>
            <javadoc line="77">
                Constructs SSLParameters from the specified array of ciphersuites.
                  &lt;p&gt;
                  Calling this constructor is equivalent to calling the no-args
                  constructor followed by
                  &lt;code&gt;setCipherSuites(cipherSuites);&lt;/code&gt;.                
                <param>
                    cipherSuites the array of ciphersuites (or null)                    
                </param>
            </javadoc>
            <method name="SSLParameters" type="constructor" line="86">
                <params>
                    <param name="cipherSuites" type="String[]"/>
                </params>
            </method>
            <javadoc line="90">
                Constructs SSLParameters from the specified array of ciphersuites
                  and protocols.
                  &lt;p&gt;
                  Calling this constructor is equivalent to calling the no-args
                  constructor followed by
                  &lt;code&gt;setCipherSuites(cipherSuites); setProtocols(protocols);&lt;/code&gt;.                
                <param>
                    cipherSuites the array of ciphersuites (or null)                    
                </param>
                <param>
                    protocols the array of protocols (or null)                    
                </param>
            </javadoc>
            <method name="SSLParameters" type="constructor" line="101">
                <params>
                    <param name="cipherSuites" type="String[]"/>
                    <param name="protocols" type="String[]"/>
                </params>
            </method>
            <method name="clone" type="String[]" line="106">
                <params>
                    <param name="s" type="String[]"/>
                </params>
            </method>
            <javadoc line="110">
                Returns a copy of the array of ciphersuites or null if none
                  have been set.                
                <return>
                    a copy of the array of ciphersuites or null if none
                      have been set.                    
                </return>
            </javadoc>
            <method name="getCipherSuites" type="String[]" line="117"/>
            <javadoc line="121">
                Sets the array of ciphersuites.                
                <param>
                    cipherSuites the array of ciphersuites (or null)                    
                </param>
            </javadoc>
            <method name="setCipherSuites" type="void" line="126">
                <params>
                    <param name="cipherSuites" type="String[]"/>
                </params>
            </method>
            <javadoc line="130">
                Returns a copy of the array of protocols or null if none
                  have been set.                
                <return>
                    a copy of the array of protocols or null if none
                      have been set.                    
                </return>
            </javadoc>
            <method name="getProtocols" type="String[]" line="137"/>
            <javadoc line="141">
                Sets the array of protocols.                
                <param>
                    protocols the array of protocols (or null)                    
                </param>
            </javadoc>
            <method name="setProtocols" type="void" line="146">
                <params>
                    <param name="protocols" type="String[]"/>
                </params>
            </method>
            <javadoc line="150">
                Returns whether client authentication should be requested.                
                <return>
                    whether client authentication should be requested.                    
                </return>
            </javadoc>
            <method name="getWantClientAuth" type="boolean" line="155"/>
            <javadoc line="159">
                Sets whether client authentication should be requested. Calling
                  this method clears the &lt;code&gt;needClientAuth&lt;/code&gt; flag.                
                <param>
                    wantClientAuth whether client authentication should be requested                    
                </param>
            </javadoc>
            <method name="setWantClientAuth" type="void" line="165">
                <params>
                    <param name="wantClientAuth" type="boolean"/>
                </params>
            </method>
            <javadoc line="170">
                Returns whether client authentication should be required.                
                <return>
                    whether client authentication should be required.                    
                </return>
            </javadoc>
            <method name="getNeedClientAuth" type="boolean" line="175"/>
            <javadoc line="179">
                Sets whether client authentication should be required. Calling
                  this method clears the &lt;code&gt;wantClientAuth&lt;/code&gt; flag.                
                <param>
                    needClientAuth whether client authentication should be required                    
                </param>
            </javadoc>
            <method name="setNeedClientAuth" type="void" line="185">
                <params>
                    <param name="needClientAuth" type="boolean"/>
                </params>
            </method>
            <javadoc line="190">
                Returns the cryptographic algorithm constraints.                
                <return>
                    the cryptographic algorithm constraints, or null if the
                      constraints have not been set                    
                </return>
                <see>
                    #setAlgorithmConstraints(AlgorithmConstraints)                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="getAlgorithmConstraints" type="AlgorithmConstraints" line="200"/>
            <javadoc line="204">
                Sets the cryptographic algorithm constraints, which will be used
                  in addition to any configured by the runtime environment.
                  &lt;p&gt;
                  If the &lt;code&gt;constraints&lt;/code&gt; parameter is non-null, every
                  cryptographic algorithm, key and algorithm parameters used in the
                  SSL/TLS handshake must be permitted by the constraints.                
                <param>
                    constraints the algorithm constraints (or null)                    
                </param>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="setAlgorithmConstraints" type="void" line="216">
                <params>
                    <param name="constraints" type="AlgorithmConstraints"/>
                </params>
                <comment line="217">
                    the constraints object is immutable                    
                </comment>
            </method>
            <javadoc line="221">
                Gets the endpoint identification algorithm.                
                <return>
                    the endpoint identification algorithm, or null if none
                      has been set.                    
                </return>
                <see>
                    X509ExtendedTrustManager                    
                </see>
                <see>
                    #setEndpointIdentificationAlgorithm(String)                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="getEndpointIdentificationAlgorithm" type="String" line="232"/>
            <javadoc line="236">
                Sets the endpoint identification algorithm.
                  &lt;p&gt;
                  If the &lt;code&gt;algorithm&lt;/code&gt; parameter is non-null or non-empty, the
                  endpoint identification/verification procedures must be handled during
                  SSL/TLS handshaking.  This is to prevent man-in-the-middle attacks.                
                <param>
                    algorithm The standard string name of the endpoint
                      identification algorithm (or null).  See Appendix A in the <a href=
                      "../../../technotes/guides/security/crypto/CryptoSpec.html#AppA">
                      Java Cryptography Architecture API Specification &amp; Reference </a>
                      for information about standard algorithm names.                    
                </param>
                <see>
                    X509ExtendedTrustManager                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="setEndpointIdentificationAlgorithm" type="void" line="253">
                <params>
                    <param name="algorithm" type="String"/>
                </params>
            </method>
        </class>
    </source>