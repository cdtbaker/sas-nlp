<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.net.ssl">
        <import package="java.net.URL"/>
        <import package="java.net.HttpURLConnection"/>
        <import package="java.security.Principal"/>
        <import package="java.security.cert.X509Certificate"/>
        <import package="javax.security.auth.x500.X500Principal"/>
        <class name="HttpsURLConnection" line="7">
            <extends class="HttpURLConnection"/>
            <javadoc line="7">
                &lt;code&gt;HttpsURLConnection&lt;/code&gt; extends &lt;code&gt;HttpURLConnection&lt;/code&gt;
                  with support for https-specific features.
                  &lt;P&gt;
                  See &lt;A HREF=&quot;http://www.w3.org/pub/WWW/Protocols/&quot;&gt;
                  http://www.w3.org/pub/WWW/Protocols/&lt;/A&gt; and
                  &lt;A HREF=&quot;http://www.ietf.org/&quot;&gt; RFC 2818 &lt;/A&gt;
                  for more details on the
                  https specification.
                  &lt;P&gt;
                  This class uses &lt;code&gt;HostnameVerifier&lt;/code&gt; and
                  &lt;code&gt;SSLSocketFactory&lt;/code&gt;.
                  There are default implementations defined for both classes.
                  However, the implementations can be replaced on a per-class (static) or
                  per-instance basis.  All new &lt;code&gt;HttpsURLConnection&lt;/code&gt;s instances
                  will be assigned
                  the &quot;default&quot; static values at instance creation, but they can be overriden
                  by calling the appropriate per-instance set method(s) before
                  &lt;code&gt;connect&lt;/code&gt;ing.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <javadoc line="29">
                Creates an &lt;code&gt;HttpsURLConnection&lt;/code&gt; using the
                  URL specified.                
                <param>
                    url the URL                    
                </param>
            </javadoc>
            <method name="HttpsURLConnection" type="constructor" line="34">
                <params>
                    <param name="url" type="URL"/>
                </params>
            </method>
            <method name="getCipherSuite" type="String" line="37"/>
            <javadoc line="37">
                Returns the cipher suite in use on this connection.                
                <return>
                    the cipher suite                    
                </return>
                <throws>
                    IllegalStateException if this method is called before
                      the connection has been established.                    
                </throws>
            </javadoc>
            <method name="getLocalCertificates" type="java.security.cert.Certificate[]" line="44"/>
            <javadoc line="44">
                Returns the certificate(s) that were sent to the server during
                  handshaking.
                  &lt;P&gt;
                  Note: This method is useful only when using certificate-based
                  cipher suites.
                  &lt;P&gt;
                  When multiple certificates are available for use in a
                  handshake, the implementation chooses what it considers the
                  &quot;best&quot; certificate chain available, and transmits that to
                  the other side.  This method allows the caller to know
                  which certificate chain was actually sent.                
                <return>
                    an ordered array of certificates,
                      with the client&apos;s own certificate first followed by any
                      certificate authorities.  If no certificates were sent,
                      then null is returned.                    
                </return>
                <throws>
                    IllegalStateException if this method is called before
                      the connection has been established.                    
                </throws>
                <see>
                    #getLocalPrincipal()                    
                </see>
            </javadoc>
            <method name="getServerCertificates" type="java.security.cert.Certificate[]" line="65"/>
            <javadoc line="65">
                Returns the server&apos;s certificate chain which was established
                  as part of defining the session.
                  &lt;P&gt;
                  Note: This method can be used only when using certificate-based
                  cipher suites; using it with non-certificate-based cipher suites,
                  such as Kerberos, will throw an SSLPeerUnverifiedException.                
                <return>
                    an ordered array of server certificates,
                      with the peer&apos;s own certificate first followed by
                      any certificate authorities.                    
                </return>
                <throws>
                    SSLPeerUnverifiedException if the peer is not verified.                    
                </throws>
                <throws>
                    IllegalStateException if this method is called before
                      the connection has been established.                    
                </throws>
                <see>
                    #getPeerPrincipal()                    
                </see>
            </javadoc>
            <javadoc line="81">
                Returns the server&apos;s principal which was established as part of
                  defining the session.
                  &lt;P&gt;
                  Note: Subclasses should override this method. If not overridden, it
                  will default to returning the X500Principal of the server&apos;s end-entity
                  certificate for certificate-based ciphersuites, or throw an
                  SSLPeerUnverifiedException for non-certificate based ciphersuites,
                  such as Kerberos.                
                <return>
                    the server&apos;s principal. Returns an X500Principal of the
                      end-entity certiticate for X509-based cipher suites, and
                      KerberosPrincipal for Kerberos cipher suites.                    
                </return>
                <throws>
                    SSLPeerUnverifiedException if the peer was not verified                    
                </throws>
                <throws>
                    IllegalStateException if this method is called before
                      the connection has been established.                    
                </throws>
                <see>
                    #getServerCertificates()                    
                </see>
                <see>
                    #getLocalPrincipal()                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getPeerPrincipal" type="Principal" line="100">
                <declaration name="certs" type="java.security.cert.Certificate[]" line="101"/>
            </method>
            <javadoc line="104">
                Returns the principal that was sent to the server during handshaking.
                  &lt;P&gt;
                  Note: Subclasses should override this method. If not overridden, it
                  will default to returning the X500Principal of the end-entity certificate
                  that was sent to the server for certificate-based ciphersuites or,
                  return null for non-certificate based ciphersuites, such as Kerberos.                
                <return>
                    the principal sent to the server. Returns an X500Principal
                      of the end-entity certificate for X509-based cipher suites, and
                      KerberosPrincipal for Kerberos cipher suites. If no principal was
                      sent, then null is returned.                    
                </return>
                <throws>
                    IllegalStateException if this method is called before
                      the connection has been established.                    
                </throws>
                <see>
                    #getLocalCertificates()                    
                </see>
                <see>
                    #getPeerPrincipal()                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getLocalPrincipal" type="Principal" line="121">
                <declaration name="certs" type="java.security.cert.Certificate[]" line="122"/>
                <scope line="123"/>
                <scope line="126"/>
            </method>
            <declaration name="defaultHostnameVerifier" type="HostnameVerifier" line="130"/>
            <javadoc line="130">
                &lt;code&gt;HostnameVerifier&lt;/code&gt; provides a callback mechanism so that
                  implementers of this interface can supply a policy for
                  handling the case where the host to connect to and
                  the server name from the certificate mismatch.
                  &lt;p&gt;
                  The default implementation will deny such connections.                
            </javadoc>
            <class name="DefaultHostnameVerifier" line="139">
                <implements interface="HostnameVerifier"/>
                <method name="verify" type="boolean" line="140">
                    <params>
                        <param name="hostname" type="String"/>
                        <param name="session" type="SSLSession"/>
                    </params>
                </method>
            </class>
            <declaration name="hostnameVerifier" type="HostnameVerifier" line="144"/>
            <javadoc line="144">
                The &lt;code&gt;hostnameVerifier&lt;/code&gt; for this object.                
            </javadoc>
            <javadoc line="148">
                Sets the default &lt;code&gt;HostnameVerifier&lt;/code&gt; inherited by a
                  new instance of this class.
                  &lt;P&gt;
                  If this method is not called, the default
                  &lt;code&gt;HostnameVerifier&lt;/code&gt; assumes the connection should not
                  be permitted.                
                <param>
                    v the default host name verifier                    
                </param>
                <throws>
                    IllegalArgumentException if the &lt;code&gt;HostnameVerifier&lt;/code&gt;
                      parameter is null.                    
                </throws>
                <throws>
                    SecurityException if a security manager exists and its
                      &lt;code&gt;checkPermission&lt;/code&gt; method does not allow
                      &lt;code&gt;SSLPermission(&quot;setHostnameVerifier&quot;)&lt;/code&gt;                    
                </throws>
                <see>
                    #getDefaultHostnameVerifier()                    
                </see>
            </javadoc>
            <method name="setDefaultHostnameVerifier" type="void" line="163">
                <params>
                    <param name="v" type="HostnameVerifier"/>
                </params>
                <scope line="164"/>
                <declaration name="sm" type="SecurityManager" line="167"/>
                <scope line="168"/>
            </method>
            <javadoc line="173">
                Gets the default &lt;code&gt;HostnameVerifier&lt;/code&gt; that is inherited
                  by new instances of this class.                
                <return>
                    the default host name verifier                    
                </return>
                <see>
                    #setDefaultHostnameVerifier(HostnameVerifier)                    
                </see>
            </javadoc>
            <method name="getDefaultHostnameVerifier" type="HostnameVerifier" line="179"/>
            <javadoc line="182">
                Sets the &lt;code&gt;HostnameVerifier&lt;/code&gt; for this instance.
                  &lt;P&gt;
                  New instances of this class inherit the default static hostname
                  verifier set by {@link #setDefaultHostnameVerifier(HostnameVerifier)setDefaultHostnameVerifier}.  Calls to this method replace
                  this object&apos;s &lt;code&gt;HostnameVerifier&lt;/code&gt;.                
                <param>
                    v the host name verifier                    
                </param>
                <throws>
                    IllegalArgumentException if the &lt;code&gt;HostnameVerifier&lt;/code&gt;
                      parameter is null.                    
                </throws>
                <see>
                    #getHostnameVerifier()                    
                </see>
                <see>
                    #setDefaultHostnameVerifier(HostnameVerifier)                    
                </see>
            </javadoc>
            <method name="setHostnameVerifier" type="void" line="194">
                <params>
                    <param name="v" type="HostnameVerifier"/>
                </params>
                <scope line="195"/>
            </method>
            <javadoc line="200">
                Gets the &lt;code&gt;HostnameVerifier&lt;/code&gt; in place on this instance.                
                <return>
                    the host name verifier                    
                </return>
                <see>
                    #setHostnameVerifier(HostnameVerifier)                    
                </see>
                <see>
                    #setDefaultHostnameVerifier(HostnameVerifier)                    
                </see>
            </javadoc>
            <method name="getHostnameVerifier" type="HostnameVerifier" line="206"/>
            <declaration name="defaultSSLSocketFactory" type="SSLSocketFactory" line="209"/>
            <declaration name="sslSocketFactory" type="SSLSocketFactory" line="210"/>
            <javadoc line="210">
                The &lt;code&gt;SSLSocketFactory&lt;/code&gt; inherited when an instance
                  of this class is created.                
            </javadoc>
            <javadoc line="215">
                Sets the default &lt;code&gt;SSLSocketFactory&lt;/code&gt; inherited by new
                  instances of this class.
                  &lt;P&gt;
                  The socket factories are used when creating sockets for secure
                  https URL connections.                
                <param>
                    sf the default SSL socket factory                    
                </param>
                <throws>
                    IllegalArgumentException if the SSLSocketFactory
                      parameter is null.                    
                </throws>
                <throws>
                    SecurityException if a security manager exists and its
                      &lt;code&gt;checkSetFactory&lt;/code&gt; method does not allow
                      a socket factory to be specified.                    
                </throws>
                <see>
                    #getDefaultSSLSocketFactory()                    
                </see>
            </javadoc>
            <method name="setDefaultSSLSocketFactory" type="void" line="229">
                <params>
                    <param name="sf" type="SSLSocketFactory"/>
                </params>
                <scope line="230"/>
                <declaration name="sm" type="SecurityManager" line="233"/>
                <scope line="234"/>
            </method>
            <javadoc line="239">
                Gets the default static &lt;code&gt;SSLSocketFactory&lt;/code&gt; that is
                  inherited by new instances of this class.
                  &lt;P&gt;
                  The socket factories are used when creating sockets for secure
                  https URL connections.                
                <return>
                    the default &lt;code&gt;SSLSocketFactory&lt;/code&gt;                    
                </return>
                <see>
                    #setDefaultSSLSocketFactory(SSLSocketFactory)                    
                </see>
            </javadoc>
            <method name="getDefaultSSLSocketFactory" type="SSLSocketFactory" line="248">
                <scope line="249"/>
            </method>
            <javadoc line="254">
                Sets the &lt;code&gt;SSLSocketFactory&lt;/code&gt; to be used when this instance
                  creates sockets for secure https URL connections.
                  &lt;P&gt;
                  New instances of this class inherit the default static
                  &lt;code&gt;SSLSocketFactory&lt;/code&gt; set by{@link #setDefaultSSLSocketFactory(SSLSocketFactory)setDefaultSSLSocketFactory}.  Calls to this method replace
                  this object&apos;s &lt;code&gt;SSLSocketFactory&lt;/code&gt;.                
                <param>
                    sf the SSL socket factory                    
                </param>
                <throws>
                    IllegalArgumentException if the &lt;code&gt;SSLSocketFactory&lt;/code&gt;
                      parameter is null.                    
                </throws>
                <see>
                    #getSSLSocketFactory()                    
                </see>
            </javadoc>
            <method name="setSSLSocketFactory" type="void" line="266">
                <params>
                    <param name="sf" type="SSLSocketFactory"/>
                </params>
                <scope line="267"/>
            </method>
            <javadoc line="272">
                Gets the SSL socket factory to be used when creating sockets
                  for secure https URL connections.                
                <return>
                    the &lt;code&gt;SSLSocketFactory&lt;/code&gt;                    
                </return>
                <see>
                    #setSSLSocketFactory(SSLSocketFactory)                    
                </see>
            </javadoc>
            <method name="getSSLSocketFactory" type="SSLSocketFactory" line="278"/>
        </class>
    </source>