<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.net.ssl">
        <import package="java.io"/>
        <import package="java.net"/>
        <class name="SSLServerSocket" line="33">
            <extends class="ServerSocket"/>
            <javadoc line="33">
                This class extends &lt;code&gt;ServerSocket&lt;/code&gt;s and
                  provides secure server sockets using protocols such as the Secure
                  Sockets Layer (SSL) or Transport Layer Security (TLS) protocols.
                  &lt;P&gt;
                  Instances of this class are generally created using a
                  &lt;code&gt;SSLServerSocketFactory&lt;/code&gt;.  The primary function
                  of &lt;code&gt;SSLServerSocket&lt;/code&gt;s
                  is to create &lt;code&gt;SSLSocket&lt;/code&gt;s by &lt;code&gt;accept&lt;/code&gt;ing
                  connections.
                  &lt;P&gt;
                  &lt;code&gt;SSLServerSocket&lt;/code&gt;s contain several pieces of state data
                  which are inherited by the &lt;code&gt;SSLSocket&lt;/code&gt; at
                  socket creation.  These include the enabled cipher
                  suites and protocols, whether client
                  authentication is necessary, and whether created sockets should
                  begin handshaking in client or server mode.  The state
                  inherited by the created &lt;code&gt;SSLSocket&lt;/code&gt; can be
                  overriden by calling the appropriate methods.                
                <see>
                    java.net.ServerSocket                    
                </see>
                <see>
                    SSLSocket                    
                </see>
                <since>
                    1.4                    
                </since>
                <author>
                    David Brownell                    
                </author>
            </javadoc>
            <javadoc line="61">
                Used only by subclasses.
                  &lt;P&gt;
                  Create an unbound TCP server socket using the default authentication
                  context.                
                <throws>
                    IOException if an I/O error occurs when creating the socket                    
                </throws>
            </javadoc>
            <method name="SSLServerSocket" type="constructor" line="71"/>
            <javadoc line="74">
                Used only by subclasses.
                  &lt;P&gt;
                  Create a TCP server socket on a port, using the default
                  authentication context.  The connection backlog defaults to
                  fifty connections queued up before the system starts to
                  reject new connection requests.
                  &lt;P&gt;
                  A port number of &lt;code&gt;0&lt;/code&gt; creates a socket on any free port.
                  &lt;P&gt;
                  If there is a security manager, its &lt;code&gt;checkListen&lt;/code&gt;
                  method is called with the &lt;code&gt;port&lt;/code&gt; argument as its
                  argument to ensure the operation is allowed. This could result
                  in a SecurityException.                
                <param>
                    port the port on which to listen                    
                </param>
                <throws>
                    IOException if an I/O error occurs when creating the socket                    
                </throws>
                <throws>
                    SecurityException if a security manager exists and its
                      <code>checkListen</code> method doesn't allow the operation.                    
                </throws>
                <throws>
                    IllegalArgumentException if the port parameter is outside the
                      specified range of valid port values, which is between 0 and
                      65535, inclusive.                    
                </throws>
                <see>
                    SecurityManager#checkListen                    
                </see>
            </javadoc>
            <method name="SSLServerSocket" type="constructor" line="100">
                <params>
                    <param name="port" type="int"/>
                </params>
            </method>
            <javadoc line="103">
                Used only by subclasses.
                  &lt;P&gt;
                  Create a TCP server socket on a port, using the default
                  authentication context and a specified backlog of connections.
                  &lt;P&gt;
                  A port number of &lt;code&gt;0&lt;/code&gt; creates a socket on any free port.
                  &lt;P&gt;
                  The &lt;code&gt;backlog&lt;/code&gt; argument is the requested maximum number of
                  pending connections on the socket. Its exact semantics are implementation
                  specific. In particular, an implementation may impose a maximum length
                  or may choose to ignore the parameter altogther. The value provided
                  should be greater than &lt;code&gt;0&lt;/code&gt;. If it is less than or equal to
                  &lt;code&gt;0&lt;/code&gt;, then an implementation specific default will be used.
                  &lt;P&gt;
                  If there is a security manager, its &lt;code&gt;checkListen&lt;/code&gt;
                  method is called with the &lt;code&gt;port&lt;/code&gt; argument as its
                  argument to ensure the operation is allowed. This could result
                  in a SecurityException.                
                <param>
                    port the port on which to listen                    
                </param>
                <param>
                    backlog  requested maximum length of the queue of incoming
                      connections.                    
                </param>
                <throws>
                    IOException if an I/O error occurs when creating the socket                    
                </throws>
                <throws>
                    SecurityException if a security manager exists and its
                      <code>checkListen</code> method doesn't allow the operation.                    
                </throws>
                <throws>
                    IllegalArgumentException if the port parameter is outside the
                      specified range of valid port values, which is between 0 and
                      65535, inclusive.                    
                </throws>
                <see>
                    SecurityManager#checkListen                    
                </see>
            </javadoc>
            <method name="SSLServerSocket" type="constructor" line="136">
                <params>
                    <param name="port" type="int"/>
                    <param name="backlog" type="int"/>
                </params>
            </method>
            <javadoc line="139">
                Used only by subclasses.
                  &lt;P&gt;
                  Create a TCP server socket on a port, using the default
                  authentication context and a specified backlog of connections
                  as well as a particular specified network interface.  This
                  constructor is used on multihomed hosts, such as those used
                  for firewalls or as routers, to control through which interface
                  a network service is provided.
                  &lt;P&gt;
                  If there is a security manager, its &lt;code&gt;checkListen&lt;/code&gt;
                  method is called with the &lt;code&gt;port&lt;/code&gt; argument as its
                  argument to ensure the operation is allowed. This could result
                  in a SecurityException.
                  &lt;P&gt;
                  A port number of &lt;code&gt;0&lt;/code&gt; creates a socket on any free port.
                  &lt;P&gt;
                  The &lt;code&gt;backlog&lt;/code&gt; argument is the requested maximum number of
                  pending connections on the socket. Its exact semantics are implementation
                  specific. In particular, an implementation may impose a maximum length
                  or may choose to ignore the parameter altogther. The value provided
                  should be greater than &lt;code&gt;0&lt;/code&gt;. If it is less than or equal to
                  &lt;code&gt;0&lt;/code&gt;, then an implementation specific default will be used.
                  &lt;P&gt;
                  If &lt;i&gt;address&lt;/i&gt; is null, it will default accepting connections
                  on any/all local addresses.                
                <param>
                    port the port on which to listen                    
                </param>
                <param>
                    backlog  requested maximum length of the queue of incoming
                      connections.                    
                </param>
                <param>
                    address the address of the network interface through
                      which connections will be accepted                    
                </param>
                <throws>
                    IOException if an I/O error occurs when creating the socket                    
                </throws>
                <throws>
                    SecurityException if a security manager exists and its
                      <code>checkListen</code> method doesn't allow the operation.                    
                </throws>
                <throws>
                    IllegalArgumentException if the port parameter is outside the
                      specified range of valid port values, which is between 0 and
                      65535, inclusive.                    
                </throws>
                <see>
                    SecurityManager#checkListen                    
                </see>
            </javadoc>
            <method name="SSLServerSocket" type="constructor" line="181">
                <params>
                    <param name="port" type="int"/>
                    <param name="backlog" type="int"/>
                    <param name="address" type="InetAddress"/>
                </params>
            </method>
            <method name="getEnabledCipherSuites" type="String[]" line="185"/>
            <javadoc line="185">
                Returns the list of cipher suites which are currently enabled
                  for use by newly accepted connections.
                  &lt;P&gt;
                  If this list has not been explicitly modified, a system-provided
                  default guarantees a minimum quality of service in all enabled
                  cipher suites.
                  &lt;P&gt;
                  There are several reasons why an enabled cipher suite might
                  not actually be used.  For example:  the server socket might
                  not have appropriate private keys available to it or the cipher
                  suite might be anonymous, precluding the use of client authentication,
                  while the server socket has been told to require that sort of
                  authentication.                
                <return>
                    an array of cipher suites enabled                    
                </return>
                <see>
                    #getSupportedCipherSuites()                    
                </see>
                <see>
                    #setEnabledCipherSuites(String[])                    
                </see>
            </javadoc>
            <method name="setEnabledCipherSuites" type="void" line="207"/>
            <javadoc line="207">
                Sets the cipher suites enabled for use by accepted connections.
                  &lt;P&gt;
                  The cipher suites must have been listed by getSupportedCipherSuites()
                  as being supported.  Following a successful call to this method,
                  only suites listed in the &lt;code&gt;suites&lt;/code&gt; parameter are enabled
                  for use.
                  &lt;P&gt;
                  Suites that require authentication information which is not available
                  in this ServerSocket&apos;s authentication context will not be used
                  in any case, even if they are enabled.
                  &lt;P&gt;
                  &lt;code&gt;SSLSocket&lt;/code&gt;s returned from &lt;code&gt;accept()&lt;/code&gt;
                  inherit this setting.                
                <param>
                    suites Names of all the cipher suites to enable                    
                </param>
                <exception>
                    IllegalArgumentException when one or more of ciphers
                      named by the parameter is not supported, or when
                      the parameter is null.                    
                </exception>
                <see>
                    #getSupportedCipherSuites()                    
                </see>
                <see>
                    #getEnabledCipherSuites()                    
                </see>
            </javadoc>
            <method name="getSupportedCipherSuites" type="String[]" line="232"/>
            <javadoc line="232">
                Returns the names of the cipher suites which could be enabled for use
                  on an SSL connection.
                  &lt;P&gt;
                  Normally, only a subset of these will actually
                  be enabled by default, since this list may include cipher suites which
                  do not meet quality of service requirements for those defaults.  Such
                  cipher suites are useful in specialized applications.                
                <return>
                    an array of cipher suite names                    
                </return>
                <see>
                    #getEnabledCipherSuites()                    
                </see>
                <see>
                    #setEnabledCipherSuites(String[])                    
                </see>
            </javadoc>
            <method name="getSupportedProtocols" type="String[]" line="248"/>
            <javadoc line="248">
                Returns the names of the protocols which could be enabled for use.                
                <return>
                    an array of protocol names supported                    
                </return>
                <see>
                    #getEnabledProtocols()                    
                </see>
                <see>
                    #setEnabledProtocols(String[])                    
                </see>
            </javadoc>
            <method name="getEnabledProtocols" type="String[]" line="258"/>
            <javadoc line="258">
                Returns the names of the protocols which are currently
                  enabled for use by the newly accepted connections.                
                <return>
                    an array of protocol names                    
                </return>
                <see>
                    #getSupportedProtocols()                    
                </see>
                <see>
                    #setEnabledProtocols(String[])                    
                </see>
            </javadoc>
            <method name="setEnabledProtocols" type="void" line="269"/>
            <javadoc line="269">
                Controls which particular protocols are enabled for use by
                  accepted connections.
                  &lt;P&gt;
                  The protocols must have been listed by
                  getSupportedProtocols() as being supported.
                  Following a successful call to this method, only protocols listed
                  in the &lt;code&gt;protocols&lt;/code&gt; parameter are enabled for use.
                  &lt;P&gt;
                  &lt;code&gt;SSLSocket&lt;/code&gt;s returned from &lt;code&gt;accept()&lt;/code&gt;
                  inherit this setting.                
                <param>
                    protocols Names of all the protocols to enable.                    
                </param>
                <exception>
                    IllegalArgumentException when one or more of
                      the protocols named by the parameter is not supported or
                      when the protocols parameter is null.                    
                </exception>
                <see>
                    #getEnabledProtocols()                    
                </see>
                <see>
                    #getSupportedProtocols()                    
                </see>
            </javadoc>
            <method name="setNeedClientAuth" type="void" line="291"/>
            <javadoc line="291">
                Controls whether &lt;code&gt;accept&lt;/code&gt;ed server-mode
                  &lt;code&gt;SSLSockets&lt;/code&gt; will be initially configured to
                  &lt;i&gt;require&lt;/i&gt; client authentication.
                  &lt;P&gt;
                  A socket&apos;s client authentication setting is one of the following:
                  &lt;ul&gt;
                  &lt;li&gt; client authentication required
                  &lt;li&gt; client authentication requested
                  &lt;li&gt; no client authentication desired
                  &lt;/ul&gt;
                  &lt;P&gt;
                  Unlike {@link #setWantClientAuth(boolean)}, if the accepted
                  socket&apos;s option is set and the client chooses not to provide
                  authentication information about itself, &lt;i&gt;the negotiations
                  will stop and the connection will be dropped&lt;/i&gt;.
                  &lt;P&gt;
                  Calling this method overrides any previous setting made by
                  this method or {@link #setWantClientAuth(boolean)}.
                  &lt;P&gt;
                  The initial inherited setting may be overridden by calling{@link SSLSocket#setNeedClientAuth(boolean)} or{@link SSLSocket#setWantClientAuth(boolean)}.                
                <param>
                    need set to true if client authentication is required,
                      or false if no client authentication is desired.                    
                </param>
                <see>
                    #getNeedClientAuth()                    
                </see>
                <see>
                    #setWantClientAuth(boolean)                    
                </see>
                <see>
                    #getWantClientAuth()                    
                </see>
                <see>
                    #setUseClientMode(boolean)                    
                </see>
            </javadoc>
            <method name="getNeedClientAuth" type="boolean" line="325"/>
            <javadoc line="325">
                Returns true if client authentication will be &lt;i&gt;required&lt;/i&gt; on
                  newly &lt;code&gt;accept&lt;/code&gt;ed server-mode &lt;code&gt;SSLSocket&lt;/code&gt;s.
                  &lt;P&gt;
                  The initial inherited setting may be overridden by calling{@link SSLSocket#setNeedClientAuth(boolean)} or{@link SSLSocket#setWantClientAuth(boolean)}.                
                <return>
                    true if client authentication is required,
                      or false if no client authentication is desired.                    
                </return>
                <see>
                    #setNeedClientAuth(boolean)                    
                </see>
                <see>
                    #setWantClientAuth(boolean)                    
                </see>
                <see>
                    #getWantClientAuth()                    
                </see>
                <see>
                    #setUseClientMode(boolean)                    
                </see>
            </javadoc>
            <method name="setWantClientAuth" type="void" line="343"/>
            <javadoc line="343">
                Controls whether &lt;code&gt;accept&lt;/code&gt;ed server-mode
                  &lt;code&gt;SSLSockets&lt;/code&gt; will be initially configured to
                  &lt;i&gt;request&lt;/i&gt; client authentication.
                  &lt;P&gt;
                  A socket&apos;s client authentication setting is one of the following:
                  &lt;ul&gt;
                  &lt;li&gt; client authentication required
                  &lt;li&gt; client authentication requested
                  &lt;li&gt; no client authentication desired
                  &lt;/ul&gt;
                  &lt;P&gt;
                  Unlike {@link #setNeedClientAuth(boolean)}, if the accepted
                  socket&apos;s option is set and the client chooses not to provide
                  authentication information about itself, &lt;i&gt;the negotiations
                  will continue&lt;/i&gt;.
                  &lt;P&gt;
                  Calling this method overrides any previous setting made by
                  this method or {@link #setNeedClientAuth(boolean)}.
                  &lt;P&gt;
                  The initial inherited setting may be overridden by calling{@link SSLSocket#setNeedClientAuth(boolean)} or{@link SSLSocket#setWantClientAuth(boolean)}.                
                <param>
                    want set to true if client authentication is requested,
                      or false if no client authentication is desired.                    
                </param>
                <see>
                    #getWantClientAuth()                    
                </see>
                <see>
                    #setNeedClientAuth(boolean)                    
                </see>
                <see>
                    #getNeedClientAuth()                    
                </see>
                <see>
                    #setUseClientMode(boolean)                    
                </see>
            </javadoc>
            <method name="getWantClientAuth" type="boolean" line="377"/>
            <javadoc line="377">
                Returns true if client authentication will be &lt;i&gt;requested&lt;/i&gt; on
                  newly accepted server-mode connections.
                  &lt;P&gt;
                  The initial inherited setting may be overridden by calling{@link SSLSocket#setNeedClientAuth(boolean)} or{@link SSLSocket#setWantClientAuth(boolean)}.                
                <return>
                    true if client authentication is requested,
                      or false if no client authentication is desired.                    
                </return>
                <see>
                    #setWantClientAuth(boolean)                    
                </see>
                <see>
                    #setNeedClientAuth(boolean)                    
                </see>
                <see>
                    #getNeedClientAuth()                    
                </see>
                <see>
                    #setUseClientMode(boolean)                    
                </see>
            </javadoc>
            <method name="setUseClientMode" type="void" line="395"/>
            <javadoc line="395">
                Controls whether accepted connections are in the (default) SSL
                  server mode, or the SSL client mode.
                  &lt;P&gt;
                  Servers normally authenticate themselves, and clients are not
                  required to do so.
                  &lt;P&gt;
                  In rare cases, TCP servers
                  need to act in the SSL client mode on newly accepted
                  connections. For example, FTP clients acquire server sockets
                  and listen there for reverse connections from the server. An
                  FTP client would use an SSLServerSocket in &quot;client&quot; mode to
                  accept the reverse connection while the FTP server uses an
                  SSLSocket with &quot;client&quot; mode disabled to initiate the
                  connection. During the resulting handshake, existing SSL
                  sessions may be reused.
                  &lt;P&gt;
                  &lt;code&gt;SSLSocket&lt;/code&gt;s returned from &lt;code&gt;accept()&lt;/code&gt;
                  inherit this setting.                
                <param>
                    mode true if newly accepted connections should use SSL
                      client mode.                    
                </param>
                <see>
                    #getUseClientMode()                    
                </see>
            </javadoc>
            <method name="getUseClientMode" type="boolean" line="422"/>
            <javadoc line="422">
                Returns true if accepted connections will be in SSL client mode.                
                <see>
                    #setUseClientMode(boolean)                    
                </see>
                <return>
                    true if the connection should use SSL client mode.                    
                </return>
            </javadoc>
            <method name="setEnableSessionCreation" type="void" line="431"/>
            <javadoc line="431">
                Controls whether new SSL sessions may be established by the
                  sockets which are created from this server socket.
                  &lt;P&gt;
                  &lt;code&gt;SSLSocket&lt;/code&gt;s returned from &lt;code&gt;accept()&lt;/code&gt;
                  inherit this setting.                
                <param>
                    flag true indicates that sessions may be created; this
                      is the default. false indicates that an existing session
                      must be resumed.                    
                </param>
                <see>
                    #getEnableSessionCreation()                    
                </see>
            </javadoc>
            <method name="getEnableSessionCreation" type="boolean" line="446"/>
            <javadoc line="446">
                Returns true if new SSL sessions may be established by the
                  sockets which are created from this server socket.                
                <return>
                    true indicates that sessions may be created; this
                      is the default.  false indicates that an existing
                      session must be resumed                    
                </return>
                <see>
                    #setEnableSessionCreation(boolean)                    
                </see>
            </javadoc>
            <javadoc line="457">
                Returns the SSLParameters in effect for newly accepted connections.
                  The ciphersuites and protocols of the returned SSLParameters
                  are always non-null.                
                <return>
                    the SSLParameters in effect for newly accepted connections                    
                </return>
                <see>
                    #setSSLParameters(SSLParameters)                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="getSSLParameters" type="SSLParameters" line="468">
                <declaration name="parameters" type="SSLParameters" line="469"/>
                <scope line="473"/>
                <scope line="475"/>
            </method>
            <javadoc line="482">
                Applies SSLParameters to newly accepted connections.
                  &lt;p&gt;This means:
                  &lt;ul&gt;
                  &lt;li&gt;if &lt;code&gt;params.getCipherSuites()&lt;/code&gt; is non-null,
                  &lt;code&gt;setEnabledCipherSuites()&lt;/code&gt; is called with that value
                  &lt;li&gt;if &lt;code&gt;params.getProtocols()&lt;/code&gt; is non-null,
                  &lt;code&gt;setEnabledProtocols()&lt;/code&gt; is called with that value
                  &lt;li&gt;if &lt;code&gt;params.getNeedClientAuth()&lt;/code&gt; or
                  &lt;code&gt;params.getWantClientAuth()&lt;/code&gt; return &lt;code&gt;true&lt;/code&gt;,
                  &lt;code&gt;setNeedClientAuth(true)&lt;/code&gt; and
                  &lt;code&gt;setWantClientAuth(true)&lt;/code&gt; are called, respectively;
                  otherwise &lt;code&gt;setWantClientAuth(false)&lt;/code&gt; is called.
                  &lt;/ul&gt;                
                <param>
                    params the parameters                    
                </param>
                <throws>
                    IllegalArgumentException if the setEnabledCipherSuites() or
                      the setEnabledProtocols() call fails                    
                </throws>
                <see>
                    #getSSLParameters()                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="setSSLParameters" type="void" line="506">
                <params>
                    <param name="params" type="SSLParameters"/>
                </params>
                <declaration name="s" type="String[]" line="507"/>
                <scope line="509"/>
                <scope line="514"/>
                <scope line="518"/>
                <scope line="520"/>
                <scope line="522"/>
            </method>
        </class>
    </source>