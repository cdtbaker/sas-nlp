<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.net.ssl">
        <import package="java.net.Socket"/>
        <import package="javax.net.ssl.X509TrustManager"/>
        <import package="java.security.cert.X509Certificate"/>
        <import package="java.security.cert.CertificateException"/>
        <class name="X509ExtendedTrustManager" line="34">
            <implements interface="X509TrustManager"/>
            <javadoc line="34">
                Extensions to the &lt;code&gt;X509TrustManager&lt;/code&gt; interface to support
                  SSL/TLS connection sensitive trust management.
                  &lt;p&gt;
                  To prevent man-in-the-middle attacks, hostname checks can be done
                  to verify that the hostname in an end-entity certificate matches the
                  targeted hostname.  TLS does not require such checks, but some protocols
                  over TLS (such as HTTPS) do.  In earlier versions of the JDK, the
                  certificate chain checks were done at the SSL/TLS layer, and the hostname
                  verification checks were done at the layer over TLS.  This class allows
                  for the checking to be done during a single call to this class.
                  &lt;p&gt;
                  RFC 2830 defines the server identification specification for the &quot;LDAPS&quot;
                  algorithm. RFC 2818 defines both the server identification and the
                  client identification specification for the &quot;HTTPS&quot; algorithm.                
                <see>
                    X509TrustManager                    
                </see>
                <see>
                    HostnameVerifier                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="checkClientTrusted" type="void" line="56"/>
            <javadoc line="56">
                Given the partial or complete certificate chain provided by the
                  peer, build and validate the certificate path based on the
                  authentication type and ssl parameters.
                  &lt;p&gt;
                  The authentication type is determined by the actual certificate
                  used. For instance, if RSAPublicKey is used, the authType
                  should be &quot;RSA&quot;. Checking is case-sensitive.
                  &lt;p&gt;
                  If the &lt;code&gt;socket&lt;/code&gt; parameter is an instance of{@link javax.net.ssl.SSLSocket}, and the endpoint identification
                  algorithm of the &lt;code&gt;SSLParameters&lt;/code&gt; is non-empty, to prevent
                  man-in-the-middle attacks, the address that the &lt;code&gt;socket&lt;/code&gt;
                  connected to should be checked against the peer&apos;s identity presented
                  in the end-entity X509 certificate, as specified in the endpoint
                  identification algorithm.
                  &lt;p&gt;
                  If the &lt;code&gt;socket&lt;/code&gt; parameter is an instance of{@link javax.net.ssl.SSLSocket}, and the algorithm constraints of the
                  &lt;code&gt;SSLParameters&lt;/code&gt; is non-null, for every certificate in the
                  certification path, fields such as subject public key, the signature
                  algorithm, key usage, extended key usage, etc. need to conform to the
                  algorithm constraints in place on this socket.                
                <param>
                    chain the peer certificate chain                    
                </param>
                <param>
                    authType the key exchange algorithm used                    
                </param>
                <param>
                    socket the socket used for this connection. This parameter
                      can be null, which indicates that implementations need not check
                      the ssl parameters                    
                </param>
                <throws>
                    IllegalArgumentException if null or zero-length array is passed
                      in for the &lt;code&gt;chain&lt;/code&gt; parameter or if null or zero-length
                      string is passed in for the &lt;code&gt;authType&lt;/code&gt; parameter                    
                </throws>
                <throws>
                    CertificateException if the certificate chain is not trusted
                      by this TrustManager                    
                </throws>
                <see>
                    SSLParameters#getEndpointIdentificationAlgorithm                    
                </see>
                <see>
                    SSLParameters#setEndpointIdentificationAlgorithm(String)                    
                </see>
                <see>
                    SSLParameters#getAlgorithmConstraints                    
                </see>
                <see>
                    SSLParameters#setAlgorithmConstraints(AlgorithmConstraints)                    
                </see>
            </javadoc>
            <method name="checkServerTrusted" type="void" line="99"/>
            <javadoc line="99">
                Given the partial or complete certificate chain provided by the
                  peer, build and validate the certificate path based on the
                  authentication type and ssl parameters.
                  &lt;p&gt;
                  The authentication type is the key exchange algorithm portion
                  of the cipher suites represented as a String, such as &quot;RSA&quot;,
                  &quot;DHE_DSS&quot;. Note: for some exportable cipher suites, the key
                  exchange algorithm is determined at run time during the
                  handshake. For instance, for TLS_RSA_EXPORT_WITH_RC4_40_MD5,
                  the authType should be RSA_EXPORT when an ephemeral RSA key is
                  used for the key exchange, and RSA when the key from the server
                  certificate is used. Checking is case-sensitive.
                  &lt;p&gt;
                  If the &lt;code&gt;socket&lt;/code&gt; parameter is an instance of{@link javax.net.ssl.SSLSocket}, and the endpoint identification
                  algorithm of the &lt;code&gt;SSLParameters&lt;/code&gt; is non-empty, to prevent
                  man-in-the-middle attacks, the address that the &lt;code&gt;socket&lt;/code&gt;
                  connected to should be checked against the peer&apos;s identity presented
                  in the end-entity X509 certificate, as specified in the endpoint
                  identification algorithm.
                  &lt;p&gt;
                  If the &lt;code&gt;socket&lt;/code&gt; parameter is an instance of{@link javax.net.ssl.SSLSocket}, and the algorithm constraints of the
                  &lt;code&gt;SSLParameters&lt;/code&gt; is non-null, for every certificate in the
                  certification path, fields such as subject public key, the signature
                  algorithm, key usage, extended key usage, etc. need to conform to the
                  algorithm constraints in place on this socket.                
                <param>
                    chain the peer certificate chain                    
                </param>
                <param>
                    authType the key exchange algorithm used                    
                </param>
                <param>
                    socket the socket used for this connection. This parameter
                      can be null, which indicates that implementations need not check
                      the ssl parameters                    
                </param>
                <throws>
                    IllegalArgumentException if null or zero-length array is passed
                      in for the &lt;code&gt;chain&lt;/code&gt; parameter or if null or zero-length
                      string is passed in for the &lt;code&gt;authType&lt;/code&gt; parameter                    
                </throws>
                <throws>
                    CertificateException if the certificate chain is not trusted
                      by this TrustManager                    
                </throws>
                <see>
                    SSLParameters#getEndpointIdentificationAlgorithm                    
                </see>
                <see>
                    SSLParameters#setEndpointIdentificationAlgorithm(String)                    
                </see>
                <see>
                    SSLParameters#getAlgorithmConstraints                    
                </see>
                <see>
                    SSLParameters#setAlgorithmConstraints(AlgorithmConstraints)                    
                </see>
            </javadoc>
            <method name="checkClientTrusted" type="void" line="147"/>
            <javadoc line="147">
                Given the partial or complete certificate chain provided by the
                  peer, build and validate the certificate path based on the
                  authentication type and ssl parameters.
                  &lt;p&gt;
                  The authentication type is determined by the actual certificate
                  used. For instance, if RSAPublicKey is used, the authType
                  should be &quot;RSA&quot;. Checking is case-sensitive.
                  &lt;p&gt;
                  If the &lt;code&gt;engine&lt;/code&gt; parameter is available, and the endpoint
                  identification algorithm of the &lt;code&gt;SSLParameters&lt;/code&gt; is
                  non-empty, to prevent man-in-the-middle attacks, the address that
                  the &lt;code&gt;engine&lt;/code&gt; connected to should be checked against
                  the peer&apos;s identity presented in the end-entity X509 certificate,
                  as specified in the endpoint identification algorithm.
                  &lt;p&gt;
                  If the &lt;code&gt;engine&lt;/code&gt; parameter is available, and the algorithm
                  constraints of the &lt;code&gt;SSLParameters&lt;/code&gt; is non-null, for every
                  certificate in the certification path, fields such as subject public
                  key, the signature algorithm, key usage, extended key usage, etc.
                  need to conform to the algorithm constraints in place on this engine.                
                <param>
                    chain the peer certificate chain                    
                </param>
                <param>
                    authType the key exchange algorithm used                    
                </param>
                <param>
                    engine the engine used for this connection. This parameter
                      can be null, which indicates that implementations need not check
                      the ssl parameters                    
                </param>
                <throws>
                    IllegalArgumentException if null or zero-length array is passed
                      in for the &lt;code&gt;chain&lt;/code&gt; parameter or if null or zero-length
                      string is passed in for the &lt;code&gt;authType&lt;/code&gt; parameter                    
                </throws>
                <throws>
                    CertificateException if the certificate chain is not trusted
                      by this TrustManager                    
                </throws>
                <see>
                    SSLParameters#getEndpointIdentificationAlgorithm                    
                </see>
                <see>
                    SSLParameters#setEndpointIdentificationAlgorithm(String)                    
                </see>
                <see>
                    SSLParameters#getAlgorithmConstraints                    
                </see>
                <see>
                    SSLParameters#setAlgorithmConstraints(AlgorithmConstraints)                    
                </see>
            </javadoc>
            <method name="checkServerTrusted" type="void" line="188"/>
            <javadoc line="188">
                Given the partial or complete certificate chain provided by the
                  peer, build and validate the certificate path based on the
                  authentication type and ssl parameters.
                  &lt;p&gt;
                  The authentication type is the key exchange algorithm portion
                  of the cipher suites represented as a String, such as &quot;RSA&quot;,
                  &quot;DHE_DSS&quot;. Note: for some exportable cipher suites, the key
                  exchange algorithm is determined at run time during the
                  handshake. For instance, for TLS_RSA_EXPORT_WITH_RC4_40_MD5,
                  the authType should be RSA_EXPORT when an ephemeral RSA key is
                  used for the key exchange, and RSA when the key from the server
                  certificate is used. Checking is case-sensitive.
                  &lt;p&gt;
                  If the &lt;code&gt;engine&lt;/code&gt; parameter is available, and the endpoint
                  identification algorithm of the &lt;code&gt;SSLParameters&lt;/code&gt; is
                  non-empty, to prevent man-in-the-middle attacks, the address that
                  the &lt;code&gt;engine&lt;/code&gt; connected to should be checked against
                  the peer&apos;s identity presented in the end-entity X509 certificate,
                  as specified in the endpoint identification algorithm.
                  &lt;p&gt;
                  If the &lt;code&gt;engine&lt;/code&gt; parameter is available, and the algorithm
                  constraints of the &lt;code&gt;SSLParameters&lt;/code&gt; is non-null, for every
                  certificate in the certification path, fields such as subject public
                  key, the signature algorithm, key usage, extended key usage, etc.
                  need to conform to the algorithm constraints in place on this engine.                
                <param>
                    chain the peer certificate chain                    
                </param>
                <param>
                    authType the key exchange algorithm used                    
                </param>
                <param>
                    engine the engine used for this connection. This parameter
                      can be null, which indicates that implementations need not check
                      the ssl parameters                    
                </param>
                <throws>
                    IllegalArgumentException if null or zero-length array is passed
                      in for the &lt;code&gt;chain&lt;/code&gt; parameter or if null or zero-length
                      string is passed in for the &lt;code&gt;authType&lt;/code&gt; parameter                    
                </throws>
                <throws>
                    CertificateException if the certificate chain is not trusted
                      by this TrustManager                    
                </throws>
                <see>
                    SSLParameters#getEndpointIdentificationAlgorithm                    
                </see>
                <see>
                    SSLParameters#setEndpointIdentificationAlgorithm(String)                    
                </see>
                <see>
                    SSLParameters#getAlgorithmConstraints                    
                </see>
                <see>
                    SSLParameters#setAlgorithmConstraints(AlgorithmConstraints)                    
                </see>
            </javadoc>
        </class>
    </source>