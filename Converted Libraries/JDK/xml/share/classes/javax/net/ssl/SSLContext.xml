<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.net.ssl">
        <import package="java.security"/>
        <import package="java.util"/>
        <import package="sun.security.jca.GetInstance"/>
        <class name="SSLContext" line="33">
            <javadoc line="33">
                Instances of this class represent a secure socket protocol
                  implementation which acts as a factory for secure socket
                  factories or &lt;code&gt;SSLEngine&lt;/code&gt;s. This class is initialized
                  with an optional set of key and trust managers and source of
                  secure random bytes.
                  &lt;p&gt; Every implementation of the Java platform is required to support the
                  following standard &lt;code&gt;SSLContext&lt;/code&gt; protocol:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;tt&gt;TLSv1&lt;/tt&gt;&lt;/li&gt;
                  &lt;/ul&gt;
                  This protocol is described in the &lt;a href=
                  &quot;{@docRoot}/../technotes/guides/security/StandardNames.html#SSLContext&quot;&gt;
                  SSLContext section&lt;/a&gt; of the
                  Java Cryptography Architecture Standard Algorithm Name Documentation.
                  Consult the release documentation for your implementation to see if any
                  other algorithms are supported.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="provider" type="Provider" line="55"/>
            <declaration name="contextSpi" type="SSLContextSpi" line="57"/>
            <declaration name="protocol" type="String" line="59"/>
            <javadoc line="61">
                Creates an SSLContext object.                
                <param>
                    contextSpi the delegate                    
                </param>
                <param>
                    provider the provider                    
                </param>
                <param>
                    protocol the protocol                    
                </param>
            </javadoc>
            <method name="SSLContext" type="constructor" line="69">
                <params>
                    <param name="contextSpi" type="SSLContextSpi"/>
                    <param name="provider" type="Provider"/>
                    <param name="protocol" type="String"/>
                </params>
            </method>
            <declaration name="defaultContext" type="SSLContext" line="75"/>
            <javadoc line="77">
                Returns the default SSL context.
                  &lt;p&gt;If a default context was set using the {@link #setDefaultSSLContext.setDefault()} method, it is returned. Otherwise, the first
                  call of this method triggers the call
                  &lt;code&gt;SSLContext.getInstance(&quot;Default&quot;)&lt;/code&gt;.
                  If successful, that object is made the default SSL context and returned.
                  &lt;p&gt;The default context is immediately
                  usable and does not require {@linkplain #init initialization}.                
                <return>
                    the default SSL context                    
                </return>
                <throws>
                    NoSuchAlgorithmException if the{@link SSLContext#getInstance SSLContext.getInstance()} call fails                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getDefault" type="SSLContext" line="95">
                <scope line="96"/>
            </method>
            <javadoc line="102">
                Sets the default SSL context. It will be returned by subsequent calls
                  to {@link #getDefault}. The default context must be immediately usable
                  and not require {@linkplain #init initialization}.                
                <param>
                    context the SSLContext                    
                </param>
                <throws>
                    NullPointerException if context is null                    
                </throws>
                <throws>
                    SecurityException if a security manager exists and its
                      &lt;code&gt;checkPermission&lt;/code&gt; method does not allow
                      &lt;code&gt;SSLPermission(&quot;setDefaultSSLContext&quot;)&lt;/code&gt;                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setDefault" type="void" line="114">
                <params>
                    <param name="context" type="SSLContext"/>
                </params>
                <scope line="115"/>
                <declaration name="sm" type="SecurityManager" line="118"/>
                <scope line="119"/>
            </method>
            <javadoc line="125">
                Returns a &lt;code&gt;SSLContext&lt;/code&gt; object that implements the
                  specified secure socket protocol.
                  &lt;p&gt; This method traverses the list of registered security Providers,
                  starting with the most preferred Provider.
                  A new SSLContext object encapsulating the
                  SSLContextSpi implementation from the first
                  Provider that supports the specified protocol is returned.
                  &lt;p&gt; Note that the list of registered providers may be retrieved via
                  the {@link Security#getProviders() Security.getProviders()} method.                
                <param>
                    protocol the standard name of the requested protocol.
                      See the SSLContext section in the &lt;a href=
                      &quot;{@docRoot}/../technotes/guides/security/StandardNames.html#SSLContext&quot;&gt;
                      Java Cryptography Architecture Standard Algorithm Name
                      Documentation&lt;/a&gt;
                      for information about standard protocol names.                    
                </param>
                <return>
                    the new &lt;code&gt;SSLContext&lt;/code&gt; object.                    
                </return>
                <exception>
                    NoSuchAlgorithmException if no Provider supports a
                      TrustManagerFactorySpi implementation for the
                      specified protocol.                    
                </exception>
                <exception>
                    NullPointerException if protocol is null.                    
                </exception>
                <see>
                    java.security.Provider                    
                </see>
            </javadoc>
            <method name="getInstance" type="SSLContext" line="155">
                <params>
                    <param name="protocol" type="String"/>
                </params>
                <declaration name="instance" type="GetInstance.Instance" line="156"/>
            </method>
            <javadoc line="162">
                Returns a &lt;code&gt;SSLContext&lt;/code&gt; object that implements the
                  specified secure socket protocol.
                  &lt;p&gt; A new SSLContext object encapsulating the
                  SSLContextSpi implementation from the specified provider
                  is returned.  The specified provider must be registered
                  in the security provider list.
                  &lt;p&gt; Note that the list of registered providers may be retrieved via
                  the {@link Security#getProviders() Security.getProviders()} method.                
                <param>
                    protocol the standard name of the requested protocol.
                      See the SSLContext section in the &lt;a href=
                      &quot;{@docRoot}/../technotes/guides/security/StandardNames.html#SSLContext&quot;&gt;
                      Java Cryptography Architecture Standard Algorithm Name
                      Documentation&lt;/a&gt;
                      for information about standard protocol names.                    
                </param>
                <param>
                    provider the name of the provider.                    
                </param>
                <return>
                    the new &lt;code&gt;SSLContext&lt;/code&gt; object.                    
                </return>
                <throws>
                    NoSuchAlgorithmException if a SSLContextSpi
                      implementation for the specified protocol is not
                      available from the specified provider.                    
                </throws>
                <throws>
                    NoSuchProviderException if the specified provider is not
                      registered in the security provider list.                    
                </throws>
                <throws>
                    IllegalArgumentException if the provider name is null or empty.                    
                </throws>
                <throws>
                    NullPointerException if protocol is null.                    
                </throws>
                <see>
                    java.security.Provider                    
                </see>
            </javadoc>
            <method name="getInstance" type="SSLContext" line="198">
                <params>
                    <param name="protocol" type="String"/>
                    <param name="provider" type="String"/>
                </params>
                <declaration name="instance" type="GetInstance.Instance" line="199"/>
            </method>
            <javadoc line="205">
                Returns a &lt;code&gt;SSLContext&lt;/code&gt; object that implements the
                  specified secure socket protocol.
                  &lt;p&gt; A new SSLContext object encapsulating the
                  SSLContextSpi implementation from the specified Provider
                  object is returned.  Note that the specified Provider object
                  does not have to be registered in the provider list.                
                <param>
                    protocol the standard name of the requested protocol.
                      See the SSLContext section in the &lt;a href=
                      &quot;{@docRoot}/../technotes/guides/security/StandardNames.html#SSLContext&quot;&gt;
                      Java Cryptography Architecture Standard Algorithm Name
                      Documentation&lt;/a&gt;
                      for information about standard protocol names.                    
                </param>
                <param>
                    provider an instance of the provider.                    
                </param>
                <return>
                    the new &lt;code&gt;SSLContext&lt;/code&gt; object.                    
                </return>
                <throws>
                    NoSuchAlgorithmException if a KeyManagerFactorySpi
                      implementation for the specified protocol is not available
                      from the specified Provider object.                    
                </throws>
                <throws>
                    IllegalArgumentException if the provider name is null.                    
                </throws>
                <throws>
                    NullPointerException if protocol is null.                    
                </throws>
                <see>
                    java.security.Provider                    
                </see>
            </javadoc>
            <method name="getInstance" type="SSLContext" line="235">
                <params>
                    <param name="protocol" type="String"/>
                    <param name="provider" type="Provider"/>
                </params>
                <declaration name="instance" type="GetInstance.Instance" line="236"/>
            </method>
            <javadoc line="242">
                Returns the protocol name of this &lt;code&gt;SSLContext&lt;/code&gt; object.
                  &lt;p&gt;This is the same name that was specified in one of the
                  &lt;code&gt;getInstance&lt;/code&gt; calls that created this
                  &lt;code&gt;SSLContext&lt;/code&gt; object.                
                <return>
                    the protocol name of this &lt;code&gt;SSLContext&lt;/code&gt; object.                    
                </return>
            </javadoc>
            <method name="getProtocol" type="String" line="251"/>
            <javadoc line="255">
                Returns the provider of this &lt;code&gt;SSLContext&lt;/code&gt; object.                
                <return>
                    the provider of this &lt;code&gt;SSLContext&lt;/code&gt; object                    
                </return>
            </javadoc>
            <method name="getProvider" type="Provider" line="260"/>
            <javadoc line="264">
                Initializes this context. Either of the first two parameters
                  may be null in which case the installed security providers will
                  be searched for the highest priority implementation of the
                  appropriate factory. Likewise, the secure random parameter may
                  be null in which case the default implementation will be used.
                  &lt;P&gt;
                  Only the first instance of a particular key and/or trust manager
                  implementation type in the array is used.  (For example, only
                  the first javax.net.ssl.X509KeyManager in the array will be used.)                
                <param>
                    km the sources of authentication keys or null                    
                </param>
                <param>
                    tm the sources of peer authentication trust decisions or null                    
                </param>
                <param>
                    random the source of randomness for this generator or null                    
                </param>
                <throws>
                    KeyManagementException if this operation fails                    
                </throws>
            </javadoc>
            <method name="init" type="void" line="282">
                <params>
                    <param name="km" type="KeyManager[]"/>
                    <param name="tm" type="TrustManager[]"/>
                    <param name="random" type="SecureRandom"/>
                </params>
            </method>
            <javadoc line="286">
                Returns a &lt;code&gt;SocketFactory&lt;/code&gt; object for this
                  context.                
                <return>
                    the &lt;code&gt;SocketFactory&lt;/code&gt; object                    
                </return>
                <throws>
                    IllegalStateException if the SSLContextImpl requires
                      initialization and the &lt;code&gt;init()&lt;/code&gt; has not been called                    
                </throws>
            </javadoc>
            <method name="getSocketFactory" type="SSLSocketFactory" line="294"/>
            <javadoc line="298">
                Returns a &lt;code&gt;ServerSocketFactory&lt;/code&gt; object for
                  this context.                
                <return>
                    the &lt;code&gt;ServerSocketFactory&lt;/code&gt; object                    
                </return>
                <throws>
                    IllegalStateException if the SSLContextImpl requires
                      initialization and the &lt;code&gt;init()&lt;/code&gt; has not been called                    
                </throws>
            </javadoc>
            <method name="getServerSocketFactory" type="SSLServerSocketFactory" line="306"/>
            <javadoc line="310">
                Creates a new &lt;code&gt;SSLEngine&lt;/code&gt; using this context.
                  &lt;P&gt;
                  Applications using this factory method are providing no hints
                  for an internal session reuse strategy. If hints are desired,{@link #createSSLEngine(String,int)} should be used
                  instead.
                  &lt;P&gt;
                  Some cipher suites (such as Kerberos) require remote hostname
                  information, in which case this factory method should not be used.                
                <return>
                    the &lt;code&gt;SSLEngine&lt;/code&gt; object                    
                </return>
                <throws>
                    UnsupportedOperationException if the underlying provider
                      does not implement the operation.                    
                </throws>
                <throws>
                    IllegalStateException if the SSLContextImpl requires
                      initialization and the &lt;code&gt;init()&lt;/code&gt; has not been called                    
                </throws>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="createSSLEngine" type="SSLEngine" line="328">
                <scope line="329"/>
                <scope line="331">
                    <declaration name="unsup" type="UnsupportedOperationException" line="332"/>
                </scope>
            </method>
            <javadoc line="341">
                Creates a new &lt;code&gt;SSLEngine&lt;/code&gt; using this context using
                  advisory peer information.
                  &lt;P&gt;
                  Applications using this factory method are providing hints
                  for an internal session reuse strategy.
                  &lt;P&gt;
                  Some cipher suites (such as Kerberos) require remote hostname
                  information, in which case peerHost needs to be specified.                
                <param>
                    peerHost the non-authoritative name of the host                    
                </param>
                <param>
                    peerPort the non-authoritative port                    
                </param>
                <return>
                    the new &lt;code&gt;SSLEngine&lt;/code&gt; object                    
                </return>
                <throws>
                    UnsupportedOperationException if the underlying provider
                      does not implement the operation.                    
                </throws>
                <throws>
                    IllegalStateException if the SSLContextImpl requires
                      initialization and the &lt;code&gt;init()&lt;/code&gt; has not been called                    
                </throws>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="createSSLEngine" type="SSLEngine" line="360">
                <params>
                    <param name="peerHost" type="String"/>
                    <param name="peerPort" type="int"/>
                </params>
                <scope line="361"/>
                <scope line="363">
                    <declaration name="unsup" type="UnsupportedOperationException" line="364"/>
                </scope>
            </method>
            <javadoc line="373">
                Returns the server session context, which represents the set of
                  SSL sessions available for use during the handshake phase of
                  server-side SSL sockets.
                  &lt;P&gt;
                  This context may be unavailable in some environments, in which
                  case this method returns null. For example, when the underlying
                  SSL provider does not provide an implementation of SSLSessionContext
                  interface, this method returns null. A non-null session context
                  is returned otherwise.                
                <return>
                    server session context bound to this SSL context                    
                </return>
            </javadoc>
            <method name="getServerSessionContext" type="SSLSessionContext" line="386"/>
            <javadoc line="390">
                Returns the client session context, which represents the set of
                  SSL sessions available for use during the handshake phase of
                  client-side SSL sockets.
                  &lt;P&gt;
                  This context may be unavailable in some environments, in which
                  case this method returns null. For example, when the underlying
                  SSL provider does not provide an implementation of SSLSessionContext
                  interface, this method returns null. A non-null session context
                  is returned otherwise.                
                <return>
                    client session context bound to this SSL context                    
                </return>
            </javadoc>
            <method name="getClientSessionContext" type="SSLSessionContext" line="403"/>
            <javadoc line="407">
                Returns a copy of the SSLParameters indicating the default
                  settings for this SSL context.
                  &lt;p&gt;The parameters will always have the ciphersuites and protocols
                  arrays set to non-null values.                
                <return>
                    a copy of the SSLParameters object with the default settings                    
                </return>
                <throws>
                    UnsupportedOperationException if the default SSL parameters
                      could not be obtained.                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getDefaultSSLParameters" type="SSLParameters" line="419"/>
            <javadoc line="423">
                Returns a copy of the SSLParameters indicating the supported
                  settings for this SSL context.
                  &lt;p&gt;The parameters will always have the ciphersuites and protocols
                  arrays set to non-null values.                
                <return>
                    a copy of the SSLParameters object with the supported
                      settings                    
                </return>
                <throws>
                    UnsupportedOperationException if the supported SSL parameters
                      could not be obtained.                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getSupportedSSLParameters" type="SSLParameters" line="436"/>
        </class>
    </source>