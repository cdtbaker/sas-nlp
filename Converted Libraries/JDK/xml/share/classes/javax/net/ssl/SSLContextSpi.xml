<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.net.ssl">
        <import package="java.util"/>
        <import package="java.security"/>
        <class name="SSLContextSpi" line="4">
            <javadoc line="4">
                This class defines the &lt;i&gt;Service Provider Interface&lt;/i&gt; (&lt;b&gt;SPI&lt;/b&gt;)
                  for the &lt;code&gt;SSLContext&lt;/code&gt; class.
                  &lt;p&gt; All the abstract methods in this class must be implemented by each
                  cryptographic service provider who wishes to supply the implementation
                  of a particular SSL context.                
                <since>
                    1.4                    
                </since>
                <see>
                    SSLContext                    
                </see>
            </javadoc>
            <method name="engineInit" type="void" line="14"/>
            <javadoc line="14">
                Initializes this context.                
                <param>
                    km the sources of authentication keys                    
                </param>
                <param>
                    tm the sources of peer authentication trust decisions                    
                </param>
                <param>
                    sr the source of randomness                    
                </param>
                <throws>
                    KeyManagementException if this operation fails                    
                </throws>
                <see>
                    SSLContext#init(KeyManager[],TrustManager[],SecureRandom)                    
                </see>
            </javadoc>
            <method name="engineGetSocketFactory" type="SSLSocketFactory" line="23"/>
            <javadoc line="23">
                Returns a &lt;code&gt;SocketFactory&lt;/code&gt; object for this
                  context.                
                <return>
                    the <code>SocketFactory</code> object                    
                </return>
                <throws>
                    IllegalStateException if the SSLContextImpl requires
                      initialization and the <code>engineInit()</code>
                      has not been called                    
                </throws>
                <see>
                    javax.net.ssl.SSLContext#getSocketFactory()                    
                </see>
            </javadoc>
            <method name="engineGetServerSocketFactory" type="SSLServerSocketFactory" line="33"/>
            <javadoc line="33">
                Returns a &lt;code&gt;ServerSocketFactory&lt;/code&gt; object for
                  this context.                
                <return>
                    the <code>ServerSocketFactory</code> object                    
                </return>
                <throws>
                    IllegalStateException if the SSLContextImpl requires
                      initialization and the <code>engineInit()</code>
                      has not been called                    
                </throws>
                <see>
                    javax.net.ssl.SSLContext#getServerSocketFactory()                    
                </see>
            </javadoc>
            <method name="engineCreateSSLEngine" type="SSLEngine" line="43"/>
            <javadoc line="43">
                Creates a new &lt;code&gt;SSLEngine&lt;/code&gt; using this context.
                  &lt;P&gt;
                  Applications using this factory method are providing no hints
                  for an internal session reuse strategy. If hints are desired,{@link #engineCreateSSLEngine(String,int)} should be used
                  instead.
                  &lt;P&gt;
                  Some cipher suites (such as Kerberos) require remote hostname
                  information, in which case this factory method should not be used.                
                <return>
                    the <code>SSLEngine</code> Object                    
                </return>
                <throws>
                    IllegalStateException if the SSLContextImpl requires
                      initialization and the <code>engineInit()</code>
                      has not been called                    
                </throws>
                <see>
                    SSLContext#createSSLEngine()                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="engineCreateSSLEngine" type="SSLEngine" line="60"/>
            <javadoc line="60">
                Creates a &lt;code&gt;SSLEngine&lt;/code&gt; using this context.
                  &lt;P&gt;
                  Applications using this factory method are providing hints
                  for an internal session reuse strategy.
                  &lt;P&gt;
                  Some cipher suites (such as Kerberos) require remote hostname
                  information, in which case peerHost needs to be specified.                
                <param>
                    host the non-authoritative name of the host                    
                </param>
                <param>
                    port the non-authoritative port                    
                </param>
                <return>
                    the <code>SSLEngine</code> Object                    
                </return>
                <throws>
                    IllegalStateException if the SSLContextImpl requires
                      initialization and the <code>engineInit()</code>
                      has not been called                    
                </throws>
                <see>
                    SSLContext#createSSLEngine(String,int)                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="engineGetServerSessionContext" type="SSLSessionContext" line="78"/>
            <javadoc line="78">
                Returns a server &lt;code&gt;SSLSessionContext&lt;/code&gt; object for
                  this context.                
                <return>
                    the <code>SSLSessionContext</code> object                    
                </return>
                <see>
                    javax.net.ssl.SSLContext#getServerSessionContext()                    
                </see>
            </javadoc>
            <method name="engineGetClientSessionContext" type="SSLSessionContext" line="85"/>
            <javadoc line="85">
                Returns a client &lt;code&gt;SSLSessionContext&lt;/code&gt; object for
                  this context.                
                <return>
                    the <code>SSLSessionContext</code> object                    
                </return>
                <see>
                    javax.net.ssl.SSLContext#getClientSessionContext()                    
                </see>
            </javadoc>
            <method name="getDefaultSocket" type="SSLSocket" line="92">
                <scope line="93">
                    <declaration name="factory" type="SSLSocketFactory" line="94"/>
                </scope>
                <scope line="97"/>
            </method>
            <javadoc line="101">
                Returns a copy of the SSLParameters indicating the default
                  settings for this SSL context.
                  &lt;p&gt;The parameters will always have the ciphersuite and protocols
                  arrays set to non-null values.
                  &lt;p&gt;The default implementation obtains the parameters from an
                  SSLSocket created by calling the{@linkplain javax.net.SocketFactory#createSocket()} method of this context&apos;s SocketFactory.                
                <return>
                    a copy of the SSLParameters object with the default settings                    
                </return>
                <throws>
                    UnsupportedOperationException if the default SSL parameters
                      could not be obtained.                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="engineGetDefaultSSLParameters" type="SSLParameters" line="113">
                <declaration name="socket" type="SSLSocket" line="114"/>
            </method>
            <javadoc line="117">
                Returns a copy of the SSLParameters indicating the maximum supported
                  settings for this SSL context.
                  &lt;p&gt;The parameters will always have the ciphersuite and protocols
                  arrays set to non-null values.
                  &lt;p&gt;The default implementation obtains the parameters from an
                  SSLSocket created by calling the{@linkplain javax.net.SocketFactory#createSocket()} method of this context&apos;s SocketFactory.                
                <return>
                    a copy of the SSLParameters object with the maximum supported
                      settings                    
                </return>
                <throws>
                    UnsupportedOperationException if the supported SSL parameters
                      could not be obtained.                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="engineGetSupportedSSLParameters" type="SSLParameters" line="130">
                <declaration name="socket" type="SSLSocket" line="131"/>
                <declaration name="params" type="SSLParameters" line="132"/>
            </method>
        </class>
    </source>