<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.net.ssl">
        <import package="java.io.IOException"/>
        <import package="java.net.InetAddress"/>
        <import package="java.net.ServerSocket"/>
        <import package="java.net.SocketException"/>
        <import package="javax.net.ServerSocketFactory"/>
        <import package="java.security"/>
        <class name="SSLServerSocketFactory" line="36">
            <extends class="ServerSocketFactory"/>
            <javadoc line="36">
                &lt;code&gt;SSLServerSocketFactory&lt;/code&gt;s create
                  &lt;code&gt;SSLServerSocket&lt;/code&gt;s.                
                <since>
                    1.4                    
                </since>
                <see>
                    SSLSocket                    
                </see>
                <see>
                    SSLServerSocket                    
                </see>
                <author>
                    David Brownell                    
                </author>
            </javadoc>
            <declaration name="theFactory" type="SSLServerSocketFactory" line="47"/>
            <declaration name="propertyChecked" type="boolean" line="49"/>
            <method name="log" type="void" line="51">
                <params>
                    <param name="msg" type="String"/>
                </params>
                <scope line="52"/>
            </method>
            <javadoc line="57">
                Constructor is used only by subclasses.                
            </javadoc>
            <method name="SSLServerSocketFactory" type="constructor" line="60"/>
            <javadoc line="62">
                Returns the default SSL server socket factory.
                  &lt;p&gt;The first time this method is called, the security property
                  &quot;ssl.ServerSocketFactory.provider&quot; is examined. If it is non-null, a
                  class by that name is loaded and instantiated. If that is successful and
                  the object is an instance of SSLServerSocketFactory, it is made the
                  default SSL server socket factory.
                  &lt;p&gt;Otherwise, this method returns
                  &lt;code&gt;SSLContext.getDefault().getServerSocketFactory()&lt;/code&gt;. If that
                  call fails, an inoperative factory is returned.                
                <return>
                    the default &lt;code&gt;ServerSocketFactory&lt;/code&gt;                    
                </return>
                <see>
                    SSLContext#getDefault                    
                </see>
            </javadoc>
            <method name="getDefault" type="ServerSocketFactory" line="78">
                <scope line="79"/>
                <scope line="83">
                    <declaration name="clsName" type="String" line="85"/>
                    <scope line="87">
                        <scope line="89">
                            <declaration name="cls" type="Class" line="90"/>
                            <scope line="91"/>
                            <scope line="93">
                                <declaration name="cl" type="ClassLoader" line="94"/>
                                <scope line="95"/>
                            </scope>
                            <declaration name="fac" type="SSLServerSocketFactory" line="100"/>
                        </scope>
                        <scope line="104"/>
                    </scope>
                </scope>
                <scope line="112"/>
                <scope line="114"/>
            </method>
            <method name="getDefaultCipherSuites" type="String[]" line="119"/>
            <javadoc line="119">
                Returns the list of cipher suites which are enabled by default.
                  Unless a different list is enabled, handshaking on an SSL connection
                  will use one of these cipher suites.  The minimum quality of service
                  for these defaults requires confidentiality protection and server
                  authentication (that is, no anonymous cipher suites).                
                <see>
                    #getSupportedCipherSuites()                    
                </see>
                <return>
                    array of the cipher suites enabled by default                    
                </return>
            </javadoc>
            <method name="getSupportedCipherSuites" type="String[]" line="132"/>
            <javadoc line="132">
                Returns the names of the cipher suites which could be enabled for use
                  on an SSL connection created by this factory.
                  Normally, only a subset of these will actually
                  be enabled by default, since this list may include cipher suites which
                  do not meet quality of service requirements for those defaults.  Such
                  cipher suites are useful in specialized applications.                
                <return>
                    an array of cipher suite names                    
                </return>
                <see>
                    #getDefaultCipherSuites()                    
                </see>
            </javadoc>
        </class>
        <class name="DefaultSSLServerSocketFactory" line="150">
            <extends class="SSLServerSocketFactory"/>
            <declaration name="reason" type="Exception" line="152"/>
            <method name="DefaultSSLServerSocketFactory" type="constructor" line="154">
                <params>
                    <param name="reason" type="Exception"/>
                </params>
            </method>
            <method name="throwException" type="ServerSocket" line="158"/>
            <method name="createServerSocket" type="ServerSocket" line="163"/>
            <method name="createServerSocket" type="ServerSocket" line="170">
                <params>
                    <param name="port" type="int"/>
                </params>
            </method>
            <method name="createServerSocket" type="ServerSocket" line="176">
                <params>
                    <param name="port" type="int"/>
                    <param name="backlog" type="int"/>
                </params>
            </method>
            <method name="createServerSocket" type="ServerSocket" line="183">
                <params>
                    <param name="port" type="int"/>
                    <param name="backlog" type="int"/>
                    <param name="ifAddress" type="InetAddress"/>
                </params>
            </method>
            <method name="getDefaultCipherSuites" type="String[]" line="187"/>
            <method name="getSupportedCipherSuites" type="String[]" line="191"/>
        </class>
    </source>