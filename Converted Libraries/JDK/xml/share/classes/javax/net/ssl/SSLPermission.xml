<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.net.ssl">
        <import package="java.security"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.StringTokenizer"/>
        <import package="java.security.Permissions"/>
        <import package="java.lang.SecurityManager"/>
        <class name="SSLPermission" line="8">
            <extends class="BasicPermission"/>
            <javadoc line="8">
                This class is for various network permissions.
                  An SSLPermission contains a name (also referred to as a &quot;target name&quot;) but
                  no actions list; you either have the named permission
                  or you don&apos;t.
                  &lt;P&gt;
                  The target name is the name of the network permission (see below). The naming
                  convention follows the  hierarchical property naming convention.
                  Also, an asterisk
                  may appear at the end of the name, following a &quot;.&quot;, or by itself, to
                  signify a wildcard match. For example: &quot;foo.&quot; or &quot;&quot; is valid,
                  &quot;foo&quot; or &quot;ab&quot; is not valid.
                  &lt;P&gt;
                  The following table lists all the possible SSLPermission target names,
                  and for each provides a description of what the permission allows
                  and a discussion of the risks of granting code the permission.
                  &lt;P&gt;
                  &lt;table border=1 cellpadding=5
                  summary=&quot;permission name, what it allows, and associated risks&quot;&gt;
                  &lt;tr&gt;
                  &lt;th&gt;Permission Target Name&lt;/th&gt;
                  &lt;th&gt;What the Permission Allows&lt;/th&gt;
                  &lt;th&gt;Risks of Allowing this Permission&lt;/th&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;setHostnameVerifier&lt;/td&gt;
                  &lt;td&gt;The ability to set a callback which can decide whether to
                  allow a mismatch between the host being connected to by
                  an HttpsURLConnection and the common name field in
                  server certificate.
                  &lt;/td&gt;
                  &lt;td&gt;Malicious
                  code can set a verifier that monitors host names visited by
                  HttpsURLConnection requests or that allows server certificates
                  with invalid common names.
                  &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;getSSLSessionContext&lt;/td&gt;
                  &lt;td&gt;The ability to get the SSLSessionContext of an SSLSession.
                  &lt;/td&gt;
                  &lt;td&gt;Malicious code may monitor sessions which have been established
                  with SSL peers or might invalidate sessions to slow down performance.
                  &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;setDefaultSSLContext&lt;/td&gt;
                  &lt;td&gt;The ability to set the default SSL context
                  &lt;/td&gt;
                  &lt;td&gt;Malicious code can set a context that monitors the opening of
                  connections or the plaintext data that is transmitted.
                  &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;                
                <see>
                    java.security.BasicPermission                    
                </see>
                <see>
                    java.security.Permission                    
                </see>
                <see>
                    java.security.Permissions                    
                </see>
                <see>
                    java.security.PermissionCollection                    
                </see>
                <see>
                    java.lang.SecurityManager                    
                </see>
                <since>
                    1.4                    
                </since>
                <author>
                    Marianne Mueller                    
                </author>
                <author>
                    Roland Schemers                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="72"/>
            <javadoc line="73">
                Creates a new SSLPermission with the specified name.
                  The name is the symbolic name of the SSLPermission, such as
                  &quot;setDefaultAuthenticator&quot;, etc. An asterisk
                  may appear at the end of the name, following a &quot;.&quot;, or by itself, to
                  signify a wildcard match.                
                <param>
                    name the name of the SSLPermission.                    
                </param>
                <throws>
                    NullPointerException if <code>name</code> is null.                    
                </throws>
                <throws>
                    IllegalArgumentException if <code>name</code> is empty.                    
                </throws>
            </javadoc>
            <method name="SSLPermission" type="constructor" line="83">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="86">
                Creates a new SSLPermission object with the specified name.
                  The name is the symbolic name of the SSLPermission, and the
                  actions String is currently unused and should be null.                
                <param>
                    name the name of the SSLPermission.                    
                </param>
                <param>
                    actions ignored.                    
                </param>
                <throws>
                    NullPointerException if <code>name</code> is null.                    
                </throws>
                <throws>
                    IllegalArgumentException if <code>name</code> is empty.                    
                </throws>
            </javadoc>
            <method name="SSLPermission" type="constructor" line="95">
                <params>
                    <param name="name" type="String"/>
                    <param name="actions" type="String"/>
                </params>
            </method>
        </class>
    </source>