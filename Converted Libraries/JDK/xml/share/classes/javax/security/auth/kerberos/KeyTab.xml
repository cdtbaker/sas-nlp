<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.security.auth.kerberos">
        <import package="java.io.File"/>
        <import package="java.util.Objects"/>
        <import package="sun.misc.SharedSecrets"/>
        <import package="sun.security.krb5.EncryptionKey"/>
        <import package="sun.security.krb5.PrincipalName"/>
        <import package="sun.security.krb5.RealmException"/>
        <class name="KeyTab" line="8">
            <javadoc line="8">
                This class encapsulates a keytab file.
                  &lt;p&gt;
                  A Kerberos JAAS login module that obtains long term secret keys from a
                  keytab file should use this class. The login module will store
                  an instance of this class in the private credential set of a{@link javax.security.auth.Subject Subject} during the commit phase of the
                  authentication process.
                  &lt;p&gt;
                  It might be necessary for the application to be granted a{@link javax.security.auth.PrivateCredentialPermissionPrivateCredentialPermission} if it needs to access the KeyTab
                  instance from a Subject. This permission is not needed when the
                  application depends on the default JGSS Kerberos mechanism to access the
                  KeyTab. In that case, however, the application will need an appropriate{@link javax.security.auth.kerberos.ServicePermission ServicePermission}.
                  &lt;p&gt;
                  The keytab file format is described at
                  &lt;a href=&quot;http://www.ioplex.com/utilities/keytab.txt&quot;&gt;
                  http://www.ioplex.com/utilities/keytab.txt&lt;/a&gt;.                
                <since>
                    1.7                    
                </since>
            </javadoc>
            <declaration name="file" type="File" line="27"/>
            <scope line="28"/>
            <method name="KeyTab" type="constructor" line="31">
                <params>
                    <param name="file" type="File"/>
                </params>
            </method>
            <javadoc line="34">
                Returns a {@code KeyTab} instance from a {@code File} object.
                  &lt;p&gt;
                  The result of this method is never null. This method only associates
                  the returned {@code KeyTab} object with the file and does not read it.                
                <param>
                    file the keytab {@code File} object, must not be null                    
                </param>
                <return>
                    the keytab instance                    
                </return>
                <throws>
                    NullPointerException if the {@code file} argument is null                    
                </throws>
            </javadoc>
            <method name="getInstance" type="KeyTab" line="43">
                <params>
                    <param name="file" type="File"/>
                </params>
                <scope line="44"/>
            </method>
            <javadoc line="49">
                Returns the default {@code KeyTab} instance.
                  &lt;p&gt;
                  The result of this method is never null. This method only associates
                  the returned {@code KeyTab} object with the default keytab file and
                  does not read it.                
                <return>
                    the default keytab instance.                    
                </return>
            </javadoc>
            <method name="getInstance" type="KeyTab" line="57"/>
            <method name="takeSnapshot" type="sun.security.krb5.internal.ktab.KeyTab" line="60"/>
            <javadoc line="63">
                Returns fresh keys for the given Kerberos principal.
                  &lt;p&gt;
                  Implementation of this method should make sure the returned keys match
                  the latest content of the keytab file. The result is a newly created
                  copy that can be modified by the caller without modifying the keytab
                  object. The caller should {@link KerberosKey#destroy() destroy} the
                  result keys after they are used.
                  &lt;p&gt;
                  Please note that the keytab file can be created after the{@code KeyTab} object is instantiated and its content may change over
                  time. Therefore, an application should call this method only when it
                  needs to use the keys. Any previous result from an earlier invocation
                  could potentially be expired.
                  &lt;p&gt;
                  If there is any error (say, I/O error or format error)
                  during the reading process of the KeyTab file, a saved result should be
                  returned. If there is no saved result (say, this is the first time this
                  method is called, or, all previous read attempts failed), an empty array
                  should be returned. This can make sure the result is not drastically
                  changed during the (probably slow) update of the keytab file.
                  &lt;p&gt;
                  Each time this method is called and the reading of the file succeeds
                  with no exception (say, I/O error or file format error),
                  the result should be saved for {@code principal}. The implementation can
                  also save keys for other principals having keys in the same keytab object
                  if convenient.
                  &lt;p&gt;
                  Any unsupported key read from the keytab is ignored and not included
                  in the result.                
                <param>
                    principal the Kerberos principal, must not be null.                    
                </param>
                <return>
                    the keys (never null, may be empty)                    
                </return>
                <throws>
                    NullPointerException if the {@code principal}argument is null                    
                </throws>
                <throws>
                    SecurityException if a security manager exists and the read
                      access to the keytab file is not permitted                    
                </throws>
            </javadoc>
            <method name="getKeys" type="KerberosKey[]" line="98">
                <params>
                    <param name="principal" type="KerberosPrincipal"/>
                </params>
                <scope line="99">
                    <declaration name="keys" type="EncryptionKey[]" line="100"/>
                    <declaration name="kks" type="KerberosKey[]" line="101"/>
                    <scope line="102">
                        <declaration name="tmp" type="Integer" line="103"/>
                    </scope>
                </scope>
                <scope line="109"/>
            </method>
            <method name="getEncryptionKeys" type="EncryptionKey[]" line="113">
                <params>
                    <param name="principal" type="PrincipalName"/>
                </params>
            </method>
            <javadoc line="116">
                Checks if the keytab file exists. Implementation of this method
                  should make sure that the result matches the latest status of the
                  keytab file.
                  &lt;p&gt;
                  The caller can use the result to determine if it should fallback to
                  another mechanism to read the keys.                
                <return>
                    true if the keytab file exists; false otherwise.                    
                </return>
                <throws>
                    SecurityException if a security manager exists and the read
                      access to the keytab file is not permitted                    
                </throws>
            </javadoc>
            <method name="exists" type="boolean" line="127"/>
            <method name="toString" type="String" line="130"/>
            <javadoc line="133">
                Returns a hashcode for this KeyTab.                
                <return>
                    a hashCode() for the <code>KeyTab</code>                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="137"/>
            <javadoc line="140">
                Compares the specified Object with this KeyTab for equality.
                  Returns true if the given object is also a
                  &lt;code&gt;KeyTab&lt;/code&gt; and the two
                  &lt;code&gt;KeyTab&lt;/code&gt; instances are equivalent.                
                <param>
                    other the Object to compare to                    
                </param>
                <return>
                    true if the specified object is equal to this KeyTab                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="148">
                <params>
                    <param name="other" type="Object"/>
                </params>
                <scope line="150"/>
                <declaration name="otherKtab" type="KeyTab" line="153"/>
            </method>
        </class>
    </source>