<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.security.auth.kerberos">
        <import package="java.io"/>
        <import package="sun.security.krb5.Asn1Exception"/>
        <import package="sun.security.krb5.KrbException"/>
        <import package="sun.security.krb5.PrincipalName"/>
        <import package="sun.security.krb5.Realm"/>
        <import package="sun.security.util"/>
        <class name="KerberosPrincipal" line="8">
            <implements interface="java.security.Principal"/>
            <implements interface="java.io.Serializable"/>
            <javadoc line="8">
                This class encapsulates a Kerberos principal.                
                <author>
                    Mayank Upadhyay                    
                </author>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="14"/>
            <declaration name="KRB_NT_UNKNOWN" type="int" line="15"/>
            <javadoc line="15">
                unknown name type.                
            </javadoc>
            <declaration name="KRB_NT_PRINCIPAL" type="int" line="19"/>
            <javadoc line="19">
                user principal name type.                
            </javadoc>
            <declaration name="KRB_NT_SRV_INST" type="int" line="23"/>
            <javadoc line="23">
                service and other unique instance (krbtgt) name type.                
            </javadoc>
            <declaration name="KRB_NT_SRV_HST" type="int" line="27"/>
            <javadoc line="27">
                service with host name as instance (telnet, rcommands) name type.                
            </javadoc>
            <declaration name="KRB_NT_SRV_XHST" type="int" line="31"/>
            <javadoc line="31">
                service with host as remaining components name type.                
            </javadoc>
            <declaration name="KRB_NT_UID" type="int" line="35"/>
            <javadoc line="35">
                unique ID name type.                
            </javadoc>
            <declaration name="fullName" type="String" line="39"/>
            <declaration name="realm" type="String" line="40"/>
            <declaration name="nameType" type="int" line="41"/>
            <declaration name="NAME_REALM_SEPARATOR" type="char" line="42"/>
            <javadoc line="43">
                Constructs a KerberosPrincipal from the provided string input. The
                  name type for this  principal defaults to{@link #KRB_NT_PRINCIPAL KRB_NT_PRINCIPAL}This string is assumed to contain a name in the format
                  that is specified in Section 2.1.1. (Kerberos Principal Name Form) of
                  &lt;a href=http://www.ietf.org/rfc/rfc1964.txt&gt; RFC 1964 &lt;/a&gt;
                  (for example, &lt;i&gt;duke@FOO.COM&lt;/i&gt;, where &lt;i&gt;duke&lt;/i&gt;
                  represents a principal, and &lt;i&gt;FOO.COM&lt;/i&gt; represents a realm).
                  &lt;p&gt;If the input name does not contain a realm, the default realm
                  is used. The default realm can be specified either in a Kerberos
                  configuration file or via the java.security.krb5.realm
                  system property. For more information,
                  &lt;a href=&quot;../../../../../technotes/guides/security/jgss/tutorials/index.html&quot;&gt;
                  Kerberos Requirements &lt;/a&gt;                
                <param>
                    name the principal name                    
                </param>
                <throws>
                    IllegalArgumentException if name is improperly
                      formatted, if name is null, or if name does not contain
                      the realm to use and the default realm is not specified
                      in either a Kerberos configuration file or via the
                      java.security.krb5.realm system property.                    
                </throws>
            </javadoc>
            <method name="KerberosPrincipal" type="constructor" line="63">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="krb5Principal" type="PrincipalName" line="64"/>
                <scope line="65"/>
                <scope line="68"/>
            </method>
            <javadoc line="75">
                Constructs a KerberosPrincipal from the provided string and
                  name type input.  The string is assumed to contain a name in the
                  format that is specified in Section 2.1 (Mandatory Name Forms) of
                  &lt;a href=http://www.ietf.org/rfc/rfc1964.txt&gt;RFC 1964&lt;/a&gt;.
                  Valid name types are specified in Section 6.2 (Principal Names) of
                  &lt;a href=http://www.ietf.org/rfc/rfc4120.txt&gt;RFC 4120&lt;/a&gt;.
                  The input name must be consistent with the provided name type.
                  (for example, &lt;i&gt;duke@FOO.COM&lt;/i&gt;, is a valid input string for the
                  name type, KRB_NT_PRINCIPAL where &lt;i&gt;duke&lt;/i&gt;
                  represents a principal, and &lt;i&gt;FOO.COM&lt;/i&gt; represents a realm).
                  &lt;p&gt; If the input name does not contain a realm, the default realm
                  is used. The default realm can be specified either in a Kerberos
                  configuration file or via the java.security.krb5.realm
                  system property. For more information, see
                  &lt;a href=&quot;../../../../../technotes/guides/security/jgss/tutorials/index.html&quot;&gt;
                  Kerberos Requirements&lt;/a&gt;.                
                <param>
                    name the principal name                    
                </param>
                <param>
                    nameType the name type of the principal                    
                </param>
                <throws>
                    IllegalArgumentException if name is improperly
                      formatted, if name is null, if the nameType is not supported,
                      or if name does not contain the realm to use and the default
                      realm is not specified in either a Kerberos configuration
                      file or via the java.security.krb5.realm system property.                    
                </throws>
            </javadoc>
            <method name="KerberosPrincipal" type="constructor" line="100">
                <params>
                    <param name="name" type="String"/>
                    <param name="nameType" type="int"/>
                </params>
                <declaration name="krb5Principal" type="PrincipalName" line="101"/>
                <scope line="102"/>
                <scope line="105"/>
            </method>
            <javadoc line="112">
                Returns the realm component of this Kerberos principal.                
                <return>
                    the realm component of this Kerberos principal.                    
                </return>
            </javadoc>
            <method name="getRealm" type="String" line="116"/>
            <javadoc line="119">
                Returns a hashcode for this principal. The hash code is defined to
                  be the result of the following  calculation:
                  &lt;pre&gt;&lt;code&gt;
                  hashCode = getName().hashCode();
                  &lt;/code&gt;&lt;/pre&gt;                
                <return>
                    a hashCode() for the &lt;code&gt;KerberosPrincipal&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="127"/>
            <javadoc line="130">
                Compares the specified Object with this Principal for equality.
                  Returns true if the given object is also a
                  &lt;code&gt;KerberosPrincipal&lt;/code&gt; and the two
                  &lt;code&gt;KerberosPrincipal&lt;/code&gt; instances are equivalent.
                  More formally two &lt;code&gt;KerberosPrincipal&lt;/code&gt; instances are equal
                  if the values returned by &lt;code&gt;getName()&lt;/code&gt; are equal and the
                  values returned by &lt;code&gt;getNameType()&lt;/code&gt; are equal.                
                <param>
                    other the Object to compare to                    
                </param>
                <return>
                    true if the Object passed in represents the same principal
                      as this one, false otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="142">
                <params>
                    <param name="other" type="Object"/>
                </params>
                <scope line="144"/>
                <scope line="147">
                    <declaration name="myFullName" type="String" line="148"/>
                    <declaration name="otherFullName" type="String" line="149"/>
                    <scope line="150"/>
                </scope>
            </method>
            <javadoc line="156">
                Save the KerberosPrincipal object to a stream                
                <serialData>
                    this &lt;code&gt;KerberosPrincipal&lt;/code&gt; is serialized
                      by writing out the PrincipalName and the
                      realm in their DER-encoded form as specified in Section 5.2.2 of
                      &lt;a href=http://www.ietf.org/rfc/rfc4120.txt&gt; RFC4120&lt;/a&gt;.                    
                </serialData>
            </javadoc>
            <method name="writeObject" type="void" line="163">
                <params>
                    <param name="oos" type="ObjectOutputStream"/>
                </params>
                <declaration name="krb5Principal" type="PrincipalName" line="164"/>
                <scope line="165"/>
                <scope line="170">
                    <declaration name="ioe" type="IOException" line="171"/>
                </scope>
            </method>
            <javadoc line="176">
                Reads this object from a stream (i.e., deserializes it)                
            </javadoc>
            <method name="readObject" type="void" line="179">
                <params>
                    <param name="ois" type="ObjectInputStream"/>
                </params>
                <declaration name="asn1EncPrincipal" type="byte[]" line="180"/>
                <declaration name="encRealm" type="byte[]" line="181"/>
                <scope line="182">
                    <declaration name="krb5Principal" type="PrincipalName" line="183"/>
                </scope>
                <scope line="188">
                    <declaration name="ioe" type="IOException" line="189"/>
                </scope>
            </method>
            <javadoc line="194">
                The returned string corresponds to the single-string
                  representation of a Kerberos Principal name as specified in
                  Section 2.1 of &lt;a href=http://www.ietf.org/rfc/rfc1964.txt&gt;RFC 1964&lt;/a&gt;.                
                <return>
                    the principal name.                    
                </return>
            </javadoc>
            <method name="getName" type="String" line="200"/>
            <javadoc line="203">
                Returns the name type of the KerberosPrincipal. Valid name types
                  are specified in Section 6.2 of
                  &lt;a href=http://www.ietf.org/rfc/rfc4120.txt&gt; RFC4120&lt;/a&gt;.                
                <return>
                    the name type.                    
                </return>
            </javadoc>
            <method name="getNameType" type="int" line="209"/>
            <method name="toString" type="String" line="212"/>
        </class>
    </source>