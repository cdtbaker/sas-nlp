<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.security.auth">
        <import package="java.util"/>
        <import package="java.text.MessageFormat"/>
        <import package="java.security.Permission"/>
        <import package="java.security.PermissionCollection"/>
        <import package="java.security.Principal"/>
        <import package="sun.security.util.ResourcesMgr"/>
        <class name="PrivateCredentialPermission" line="35">
            <extends class="Permission"/>
            <comment line="121">
                ignored - kept around for compatibility                
            </comment>
            <javadoc line="35">
                This class is used to protect access to private Credentials
                  belonging to a particular &lt;code&gt;Subject&lt;/code&gt;.  The &lt;code&gt;Subject&lt;/code&gt;
                  is represented by a Set of Principals.
                  &lt;p&gt; The target name of this &lt;code&gt;Permission&lt;/code&gt; specifies
                  a Credential class name, and a Set of Principals.
                  The only valid value for this Permission&apos;s actions is, &quot;read&quot;.
                  The target name must abide by the following syntax:
                  &lt;pre&gt;
                  CredentialClass {PrincipalClass &quot;PrincipalName&quot;}
                  &lt;/pre&gt;
                  For example, the following permission grants access to the
                  com.sun.PrivateCredential owned by Subjects which have
                  a com.sun.Principal with the name, &quot;duke&quot;.  Note that although
                  this example, as well as all the examples below, do not contain
                  Codebase, SignedBy, or Principal information in the grant statement
                  (for simplicity reasons), actual policy configurations should
                  specify that information when appropriate.
                  &lt;pre&gt;
                  grant {
                  permission javax.security.auth.PrivateCredentialPermission
                  &quot;com.sun.PrivateCredential com.sun.Principal \&quot;duke\&quot;&quot;,
                  &quot;read&quot;;
                  };
                  &lt;/pre&gt;
                  If CredentialClass is &quot;&quot;, then access is granted to
                  all private Credentials belonging to the specified
                  &lt;code&gt;Subject&lt;/code&gt;.
                  If &quot;PrincipalName&quot; is &quot;&quot;, then access is granted to the
                  specified Credential owned by any &lt;code&gt;Subject&lt;/code&gt; that has the
                  specified &lt;code&gt;Principal&lt;/code&gt; (the actual PrincipalName doesn&apos;t matter).
                  For example, the following grants access to the
                  a.b.Credential owned by any &lt;code&gt;Subject&lt;/code&gt; that has
                  an a.b.Principal.
                  &lt;pre&gt;
                  grant {
                  permission javax.security.auth.PrivateCredentialPermission
                  &quot;a.b.Credential a.b.Principal &quot;&quot;&quot;,
                  &quot;read&quot;;
                  };
                  &lt;/pre&gt;
                  If both the PrincipalClass and &quot;PrincipalName&quot; are &quot;&quot;,
                  then access is granted to the specified Credential owned by
                  any &lt;code&gt;Subject&lt;/code&gt;.
                  &lt;p&gt; In addition, the PrincipalClass/PrincipalName pairing may be repeated:
                  &lt;pre&gt;
                  grant {
                  permission javax.security.auth.PrivateCredentialPermission
                  &quot;a.b.Credential a.b.Principal &quot;duke&quot; c.d.Principal &quot;dukette&quot;&quot;,
                  &quot;read&quot;;
                  };
                  &lt;/pre&gt;
                  The above grants access to the private Credential, &quot;a.b.Credential&quot;,
                  belonging to a &lt;code&gt;Subject&lt;/code&gt; with at least two associated Principals:
                  &quot;a.b.Principal&quot; with the name, &quot;duke&quot;, and &quot;c.d.Principal&quot;, with the name,
                  &quot;dukette&quot;.                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="106"/>
            <declaration name="EMPTY_PRINCIPALS" type="CredOwner[]" line="108"/>
            <declaration name="credentialClass" type="String" line="110"/>
            <javadoc line="110">
                @serial                
            </javadoc>
            <declaration name="principals" type="Set" line="115"/>
            <javadoc line="115">
                @serial The Principals associated with this permission.
                  The set contains elements of type,
                  &lt;code&gt;PrivateCredentialPermission.CredOwner&lt;/code&gt;.                
            </javadoc>
            <declaration name="credOwners" type="CredOwner[]" line="121"/>
            <declaration name="testing" type="boolean" line="123"/>
            <javadoc line="123">
                @serial                
            </javadoc>
            <javadoc line="128">
                Create a new &lt;code&gt;PrivateCredentialPermission&lt;/code&gt;
                  with the specified &lt;code&gt;credentialClass&lt;/code&gt; and Principals.                
            </javadoc>
            <method name="PrivateCredentialPermission" type="constructor" line="133">
                <params>
                    <param name="credentialClass" type="String"/>
                    <param name="principals" type="Set<Principal>"/>
                </params>
                <scope line="138">
                    <scope line="139"/>
                    <scope line="141">
                        <declaration name="index" type="int" line="143"/>
                        <declaration name="i" type="Iterator&lt;Principal&gt;" line="144"/>
                        <scope line="145">
                            <declaration name="p" type="Principal" line="146"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="155">
                Creates a new &lt;code&gt;PrivateCredentialPermission&lt;/code&gt;
                  with the specified &lt;code&gt;name&lt;/code&gt;.  The &lt;code&gt;name&lt;/code&gt;
                  specifies both a Credential class and a &lt;code&gt;Principal&lt;/code&gt; Set.
                  &lt;p&gt;                
                <param>
                    name the name specifying the Credential class and
                      <code>Principal</code> Set. <p>                    
                </param>
                <param>
                    actions the actions specifying that the Credential can be read.                    
                </param>
                <throws>
                    IllegalArgumentException if <code>name</code> does not conform
                      to the correct syntax or if <code>actions</code> is not "read".                    
                </throws>
            </javadoc>
            <method name="PrivateCredentialPermission" type="constructor" line="170">
                <params>
                    <param name="name" type="String"/>
                    <param name="actions" type="String"/>
                </params>
            </method>
            <javadoc line="179">
                Returns the Class name of the Credential associated with this
                  &lt;code&gt;PrivateCredentialPermission&lt;/code&gt;.
                  &lt;p&gt;                
                <return>
                    the Class name of the Credential associated with this
                      <code>PrivateCredentialPermission</code>.                    
                </return>
            </javadoc>
            <method name="getCredentialClass" type="String" line="188"/>
            <javadoc line="192">
                Returns the &lt;code&gt;Principal&lt;/code&gt; classes and names
                  associated with this &lt;code&gt;PrivateCredentialPermission&lt;/code&gt;.
                  The information is returned as a two-dimensional array (array[x][y]).
                  The &apos;x&apos; value corresponds to the number of &lt;code&gt;Principal&lt;/code&gt;
                  class and name pairs.  When (y==0), it corresponds to
                  the &lt;code&gt;Principal&lt;/code&gt; class value, and when (y==1),
                  it corresponds to the &lt;code&gt;Principal&lt;/code&gt; name value.
                  For example, array[0][0] corresponds to the class name of
                  the first &lt;code&gt;Principal&lt;/code&gt; in the array.  array[0][1]
                  corresponds to the &lt;code&gt;Principal&lt;/code&gt; name of the
                  first &lt;code&gt;Principal&lt;/code&gt; in the array.
                  &lt;p&gt;                
                <return>
                    the <code>Principal</code> class and names associated
                      with this <code>PrivateCredentialPermission</code>.                    
                </return>
            </javadoc>
            <method name="getPrincipals" type="String[][]" line="210">
                <scope line="212"/>
                <declaration name="pArray" type="String[][]" line="216"/>
                <scope line="217"/>
            </method>
            <javadoc line="224">
                Checks if this &lt;code&gt;PrivateCredentialPermission&lt;/code&gt; implies
                  the specified &lt;code&gt;Permission&lt;/code&gt;.
                  &lt;p&gt;
                  This method returns true if:
                  &lt;p&gt;&lt;ul&gt;
                  &lt;li&gt; &lt;i&gt;p&lt;/i&gt; is an instanceof PrivateCredentialPermission and &lt;p&gt;
                  &lt;li&gt; the target name for &lt;i&gt;p&lt;/i&gt; is implied by this object&apos;s
                  target name.  For example:
                  &lt;pre&gt;
                  [ P1 &quot;duke&quot;] implies [a.b.Credential P1 &quot;duke&quot;].
                  [C1 P1 &quot;duke&quot;] implies [C1 P1 &quot;duke&quot; P2 &quot;dukette&quot;].
                  [C1 P2 &quot;dukette&quot;] implies [C1 P1 &quot;duke&quot; P2 &quot;dukette&quot;].
                  &lt;/pre&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;                
                <param>
                    p the <code>Permission</code> to check against.                    
                </param>
                <return>
                    true if this <code>PrivateCredentialPermission</code> implies
                      the specified <code>Permission</code>, false if not.                    
                </return>
            </javadoc>
            <method name="implies" type="boolean" line="249">
                <params>
                    <param name="p" type="Permission"/>
                </params>
                <declaration name="that" type="PrivateCredentialPermission" line="254"/>
            </method>
            <javadoc line="262">
                Checks two &lt;code&gt;PrivateCredentialPermission&lt;/code&gt; objects for
                  equality.  Checks that &lt;i&gt;obj&lt;/i&gt; is a
                  &lt;code&gt;PrivateCredentialPermission&lt;/code&gt;,
                  and has the same credential class as this object,
                  as well as the same Principals as this object.
                  The order of the Principals in the respective Permission&apos;s
                  target names is not relevant.
                  &lt;p&gt;                
                <param>
                    obj the object we are testing for equality with this object.                    
                </param>
                <return>
                    true if obj is a <code>PrivateCredentialPermission</code>,
                      has the same credential class as this object,
                      and has the same Principals as this object.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="279">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <declaration name="that" type="PrivateCredentialPermission" line="286"/>
            </method>
            <javadoc line="291">
                Returns the hash code value for this object.                
                <return>
                    a hash code value for this object.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="296"/>
            <javadoc line="300">
                Returns the &quot;canonical string representation&quot; of the actions.
                  This method always returns the String, &quot;read&quot;.
                  &lt;p&gt;                
                <return>
                    the actions (always returns "read").                    
                </return>
            </javadoc>
            <method name="getActions" type="String" line="308"/>
            <javadoc line="312">
                Return a homogeneous collection of PrivateCredentialPermissions
                  in a &lt;code&gt;PermissionCollection&lt;/code&gt;.
                  No such &lt;code&gt;PermissionCollection&lt;/code&gt; is defined,
                  so this method always returns &lt;code&gt;null&lt;/code&gt;.
                  &lt;p&gt;                
                <return>
                    null in all cases.                    
                </return>
            </javadoc>
            <method name="newPermissionCollection" type="PermissionCollection" line="322"/>
            <method name="init" type="void" line="326">
                <params>
                    <param name="name" type="String"/>
                </params>
                <comment line="340">
                    get the Credential Class                    
                </comment>
                <comment line="356">
                    skip delimiter                    
                </comment>
                <comment line="359">
                    get the Principal Class                    
                </comment>
                <comment line="373">
                    skip delimiter                    
                </comment>
                <comment line="376">
                    get the Principal Name                    
                </comment>
                <comment line="390">
                    we have a name with spaces in it --                    
                </comment>
                <comment line="391">
                    keep parsing until we find the end quote,                    
                </comment>
                <comment line="392">
                    and keep the spaces in the name                    
                </comment>
                <scope line="328"/>
                <declaration name="pList" type="ArrayList&lt;CredOwner&gt;" line="332"/>
                <declaration name="tokenizer" type="StringTokenizer" line="333"/>
                <declaration name="principalClass" type="String" line="334"/>
                <declaration name="principalName" type="String" line="335"/>
                <scope line="345">
                    <declaration name="form" type="MessageFormat" line="346"/>
                    <declaration name="source" type="Object[]" line="348"/>
                </scope>
                <scope line="354">
                    <scope line="364">
                        <declaration name="form" type="MessageFormat" line="365"/>
                        <declaration name="source" type="Object[]" line="367"/>
                    </scope>
                    <scope line="379">
                        <declaration name="form" type="MessageFormat" line="380"/>
                        <declaration name="source" type="Object[]" line="382"/>
                    </scope>
                    <scope line="388">
                        <scope line="394"/>
                        <scope line="400">
                            <declaration name="form" type="MessageFormat" line="401"/>
                            <declaration name="source" type="Object[]" line="404"/>
                        </scope>
                    </scope>
                    <scope line="418"/>
                </scope>
            </method>
            <method name="impliesCredentialClass" type="boolean" line="433">
                <params>
                    <param name="thisC" type="String"/>
                    <param name="thatC" type="String"/>
                </params>
                <comment line="435">
                    this should never happen                    
                </comment>
                <comment line="446">
                    XXX let&apos;s not enable this for now --
                          if people want it, we&apos;ll enable it later                    
                </comment>
                <comment line="450">
                    if (thisC.endsWith(&quot;&quot;)) {
                    String cClass = thisC.substring(0, thisC.length() - 2);
                    return thatC.startsWith(cClass);
                    }                    
                </comment>
            </method>
            <method name="impliesPrincipalSet" type="boolean" line="460">
                <params>
                    <param name="thisP" type="CredOwner[]"/>
                    <param name="thatP" type="CredOwner[]"/>
                </params>
                <comment line="462">
                    this should never happen                    
                </comment>
                <scope line="472">
                    <declaration name="foundMatch" type="boolean" line="473"/>
                    <scope line="474">
                        <scope line="475"/>
                    </scope>
                    <scope line="480"/>
                </scope>
            </method>
            <javadoc line="487">
                Reads this object from a stream (i.e., deserializes it)                
            </javadoc>
            <method name="readObject" type="void" line="492">
                <params>
                    <param name="s" type="java.io.ObjectInputStream"/>
                </params>
                <comment line="496">
                    perform new initialization from the permission name                    
                </comment>
                <comment line="500">
                    name only has a credential class specified                    
                </comment>
                <comment line="506">
                    perform regular initialization                    
                </comment>
                <scope line="498"/>
                <scope line="504"/>
            </method>
            <class name="CredOwner" line="511">
                <implements interface="java.io.Serializable"/>
                <javadoc line="511">
                    @serial include                    
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="516"/>
                <declaration name="principalClass" type="String" line="518"/>
                <javadoc line="518">
                    @serial                    
                </javadoc>
                <declaration name="principalName" type="String" line="522"/>
                <javadoc line="522">
                    @serial                    
                </javadoc>
                <method name="CredOwner" type="constructor" line="527">
                    <params>
                        <param name="principalClass" type="String"/>
                        <param name="principalName" type="String"/>
                    </params>
                </method>
                <method name="implies" type="boolean" line="532">
                    <params>
                        <param name="obj" type="Object"/>
                    </params>
                    <comment line="547">
                        XXX no code yet to support a.b.                        
                    </comment>
                    <declaration name="that" type="CredOwner" line="536"/>
                    <scope line="539">
                        <scope line="542"/>
                    </scope>
                </method>
                <method name="toString" type="String" line="554">
                    <declaration name="form" type="MessageFormat" line="555"/>
                    <declaration name="source" type="Object[]" line="557"/>
                </method>
            </class>
        </class>
    </source>