<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.security.auth.kerberos">
        <import package="java.util"/>
        <import package="java.security.Permission"/>
        <import package="java.security.PermissionCollection"/>
        <import package="java.io.ObjectStreamField"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.IOException"/>
        <class name="ServicePermission" line="36">
            <extends class="Permission"/>
            <comment line="126">
                the actions mask                
            </comment>
            <comment line="135">
                Left null as long as possible, then                
            </comment>
            <comment line="136">
                created and re-used in the getAction function.                
            </comment>
            <comment line="420">
                public static void main(String args[]) throws Exception {
                ServicePermission this_ =
                new ServicePermission(args[0], &quot;accept&quot;);
                ServicePermission that_ =
                new ServicePermission(args[1], &quot;accept,initiate&quot;);
                System.out.println(&quot;-----\n&quot;);
                System.out.println(&quot;this.implies(that) = &quot; + this_.implies(that_));
                System.out.println(&quot;-----\n&quot;);
                System.out.println(&quot;this = &quot;+this_);
                System.out.println(&quot;-----\n&quot;);
                System.out.println(&quot;that = &quot;+that_);
                System.out.println(&quot;-----\n&quot;);
                
                KrbServicePermissionCollection nps =
                new KrbServicePermissionCollection();
                nps.add(this_);
                nps.add(new ServicePermission(&quot;nfsexample.com@EXAMPLE.COM&quot;,
                &quot;accept&quot;));
                nps.add(new ServicePermission(&quot;hostexample.com@EXAMPLE.COM&quot;,
                &quot;initiate&quot;));
                System.out.println(&quot;nps.implies(that) = &quot; + nps.implies(that_));
                System.out.println(&quot;-----\n&quot;);
                
                Enumeration e = nps.elements();
                
                while (e.hasMoreElements()) {
                ServicePermission x =
                (ServicePermission) e.nextElement();
                System.out.println(&quot;nps.e = &quot; + x);
                }
                
                }                
            </comment>
            <comment line="461">
                Not serialized; see serialization section at end of class                
            </comment>
            <comment line="550">
                Need to maintain serialization interoperability with earlier releases,                
            </comment>
            <comment line="551">
                which had the serializable field:                
            </comment>
            <comment line="552">
                private Vector permissions;                
            </comment>
            <comment line="584">
                Reads in a Vector of ServicePermissions and saves them in the perms field.                
            </comment>
            <implements interface="java.io.Serializable"/>
            <javadoc line="36">
                This class is used to protect Kerberos services and the
                  credentials necessary to access those services. There is a one to
                  one mapping of a service principal and the credentials necessary
                  to access the service. Therefore granting access to a service
                  principal implicitly grants access to the credential necessary to
                  establish a security context with the service principal. This
                  applies regardless of whether the credentials are in a cache
                  or acquired via an exchange with the KDC. The credential can
                  be either a ticket granting ticket, a service ticket or a secret
                  key from a key table.
                  &lt;p&gt;
                  A ServicePermission contains a service principal name and
                  a list of actions which specify the context the credential can be
                  used within.
                  &lt;p&gt;
                  The service principal name is the canonical name of the
                  &lt;code&gt;KereberosPrincipal&lt;/code&gt; supplying the service, that is
                  the KerberosPrincipal represents a Kerberos service
                  principal. This name is treated in a case sensitive manner.
                  An asterisk may appear by itself, to signify any service principal.
                  &lt;p&gt;
                  Granting this permission implies that the caller can use a cached
                  credential (TGT, service ticket or secret key) within the context
                  designated by the action. In the case of the TGT, granting this
                  permission also implies that the TGT can be obtained by an
                  Authentication Service exchange.
                  &lt;p&gt;
                  The possible actions are:
                  &lt;p&gt;
                  &lt;pre&gt;
                  initiate -              allow the caller to use the credential to
                  initiate a security context with a service
                  principal.
                  accept -                allow the caller to use the credential to
                  accept security context as a particular
                  principal.
                  &lt;/pre&gt;
                  For example, to specify the permission to access to the TGT to
                  initiate a security context the permission is constructed as follows:
                  &lt;p&gt;
                  &lt;pre&gt;
                  ServicePermission(&quot;krbtgt/EXAMPLE.COM@EXAMPLE.COM&quot;, &quot;initiate&quot;);
                  &lt;/pre&gt;
                  &lt;p&gt;
                  To obtain a service ticket to initiate a context with the &quot;host&quot;
                  service the permission is constructed as follows:
                  &lt;pre&gt;
                  ServicePermission(&quot;host/foo.example.com@EXAMPLE.COM&quot;, &quot;initiate&quot;);
                  &lt;/pre&gt;
                  &lt;p&gt;
                  For a Kerberized server the action is &quot;accept&quot;. For example, the permission
                  necessary to access and use the secret key of the  Kerberized &quot;host&quot;
                  service (telnet and the likes)  would be constructed as follows:
                  &lt;p&gt;
                  &lt;pre&gt;
                  ServicePermission(&quot;host/foo.example.com@EXAMPLE.COM&quot;, &quot;accept&quot;);
                  &lt;/pre&gt;                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="103"/>
            <declaration name="INITIATE" type="int" line="105"/>
            <javadoc line="105">
                Initiate a security context to the specified service                
            </javadoc>
            <declaration name="ACCEPT" type="int" line="110"/>
            <javadoc line="110">
                Accept a security context                
            </javadoc>
            <declaration name="ALL" type="int" line="115"/>
            <javadoc line="115">
                All actions                
            </javadoc>
            <declaration name="NONE" type="int" line="120"/>
            <javadoc line="120">
                No actions.                
            </javadoc>
            <declaration name="mask" type="int" line="126"/>
            <declaration name="actions" type="String" line="128"/>
            <javadoc line="128">
                the actions string.                
                <serial>
                                        
                </serial>
            </javadoc>
            <javadoc line="137">
                Create a new &lt;code&gt;ServicePermission&lt;/code&gt;
                  with the specified &lt;code&gt;servicePrincipal&lt;/code&gt;
                  and &lt;code&gt;action&lt;/code&gt;.                
                <param>
                    servicePrincipal the name of the service principal.
                      An asterisk may appear by itself, to signify any service principal.
                      <p>                    
                </param>
                <param>
                    action the action string                    
                </param>
            </javadoc>
            <method name="ServicePermission" type="constructor" line="147">
                <params>
                    <param name="servicePrincipal" type="String"/>
                    <param name="action" type="String"/>
                </params>
            </method>
            <javadoc line="153">
                Initialize the ServicePermission object.                
            </javadoc>
            <method name="init" type="void" line="156">
                <params>
                    <param name="servicePrincipal" type="String"/>
                    <param name="mask" type="int"/>
                </params>
            </method>
            <javadoc line="168">
                Checks if this Kerberos service permission object &quot;implies&quot; the
                  specified permission.
                  &lt;P&gt;
                  If none of the above are true, &lt;code&gt;implies&lt;/code&gt; returns false.                
                <param>
                    p the permission to check against.                    
                </param>
                <return>
                    true if the specified permission is implied by this object,
                      false if not.                    
                </return>
            </javadoc>
            <method name="implies" type="boolean" line="178">
                <params>
                    <param name="p" type="Permission"/>
                </params>
                <declaration name="that" type="ServicePermission" line="182"/>
            </method>
            <method name="impliesIgnoreMask" type="boolean" line="189">
                <params>
                    <param name="p" type="ServicePermission"/>
                </params>
            </method>
            <javadoc line="194">
                Checks two ServicePermission objects for equality.
                  &lt;P&gt;                
                <param>
                    obj the object to test for equality with this object.                    
                </param>
                <return>
                    true if <i>obj</i> is a ServicePermission, and has the
                      same service principal, and actions as this
                      ServicePermission object.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="203">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <declaration name="that" type="ServicePermission" line="210"/>
            </method>
            <javadoc line="217">
                Returns the hash code value for this object.                
                <return>
                    a hash code value for this object.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="223"/>
            <javadoc line="228">
                Returns the &quot;canonical string representation&quot; of the actions in the
                  specified mask.
                  Always returns present actions in the following order:
                  initiate, accept.                
                <param>
                    mask a specific integer action mask to translate into a string                    
                </param>
                <return>
                    the canonical string representation of the actions                    
                </return>
            </javadoc>
            <method name="getActions" type="String" line="238">
                <params>
                    <param name="mask" type="int"/>
                </params>
                <declaration name="sb" type="StringBuilder" line="239"/>
                <declaration name="comma" type="boolean" line="240"/>
                <scope line="242"/>
                <scope line="248"/>
            </method>
            <javadoc line="257">
                Returns the canonical string representation of the actions.
                  Always returns present actions in the following order:
                  initiate, accept.                
            </javadoc>
            <method name="getActions" type="String" line="263"/>
            <javadoc line="271">
                Returns a PermissionCollection object for storing
                  ServicePermission objects.
                  &lt;br&gt;
                  ServicePermission objects must be stored in a manner that
                  allows them to be inserted into the collection in any order, but
                  that also enables the PermissionCollection implies method to
                  be implemented in an efficient (and consistent) manner.                
                <return>
                    a new PermissionCollection object suitable for storing
                      ServicePermissions.                    
                </return>
            </javadoc>
            <method name="newPermissionCollection" type="PermissionCollection" line="284"/>
            <javadoc line="288">
                Return the current action mask.                
                <return>
                    the actions mask.                    
                </return>
            </javadoc>
            <method name="getMask" type="int" line="294"/>
            <javadoc line="298">
                Convert an action string to an integer actions mask.                
                <param>
                    action the action string                    
                </param>
                <return>
                    the action mask                    
                </return>
            </javadoc>
            <method name="getMask" type="int" line="305">
                <params>
                    <param name="action" type="String"/>
                </params>
                <comment line="326">
                    skip whitespace                    
                </comment>
                <comment line="334">
                    check for the known strings                    
                </comment>
                <comment line="360">
                    parse error                    
                </comment>
                <comment line="365">
                    make sure we didn&apos;t just match the tail of a word                    
                </comment>
                <comment line="366">
                    like &quot;ackbarfaccept&quot;.  Also, skip to the comma.                    
                </comment>
                <comment line="372">
                                        
                </comment>
                <comment line="383">
                    point i at the location of the comma minus one (or -1).                    
                </comment>
                <scope line="307"/>
                <scope line="311"/>
                <declaration name="mask" type="int" line="315"/>
                <declaration name="a" type="char[]" line="317"/>
                <declaration name="i" type="int" line="319"/>
                <scope line="323">
                    <declaration name="c" type="char" line="324"/>
                    <declaration name="matchlen" type="int" line="335"/>
                    <scope line="345"/>
                    <scope line="355"/>
                    <scope line="359"/>
                    <declaration name="seencomma" type="boolean" line="367"/>
                    <scope line="368"/>
                </scope>
            </method>
            <javadoc line="391">
                WriteObject is called to save the state of the ServicePermission
                  to a stream. The actions are serialized, and the superclass
                  takes care of the name.                
            </javadoc>
            <method name="writeObject" type="void" line="398">
                <params>
                    <param name="s" type="java.io.ObjectOutputStream"/>
                </params>
                <comment line="399">
                    Write out the actions. The superclass takes care of the name                    
                </comment>
                <comment line="400">
                    call getActions to make sure actions field is initialized                    
                </comment>
            </method>
            <javadoc line="406">
                readObject is called to restore the state of the
                  ServicePermission from a stream.                
            </javadoc>
            <method name="readObject" type="void" line="412">
                <params>
                    <param name="s" type="java.io.ObjectInputStream"/>
                </params>
                <comment line="413">
                    Read in the action, then initialize the rest                    
                </comment>
            </method>
        </class>
        <class name="KrbServicePermissionCollection" line="457">
            <extends class="PermissionCollection"/>
            <comment line="126">
                the actions mask                
            </comment>
            <comment line="135">
                Left null as long as possible, then                
            </comment>
            <comment line="136">
                created and re-used in the getAction function.                
            </comment>
            <comment line="420">
                public static void main(String args[]) throws Exception {
                ServicePermission this_ =
                new ServicePermission(args[0], &quot;accept&quot;);
                ServicePermission that_ =
                new ServicePermission(args[1], &quot;accept,initiate&quot;);
                System.out.println(&quot;-----\n&quot;);
                System.out.println(&quot;this.implies(that) = &quot; + this_.implies(that_));
                System.out.println(&quot;-----\n&quot;);
                System.out.println(&quot;this = &quot;+this_);
                System.out.println(&quot;-----\n&quot;);
                System.out.println(&quot;that = &quot;+that_);
                System.out.println(&quot;-----\n&quot;);
                
                KrbServicePermissionCollection nps =
                new KrbServicePermissionCollection();
                nps.add(this_);
                nps.add(new ServicePermission(&quot;nfsexample.com@EXAMPLE.COM&quot;,
                &quot;accept&quot;));
                nps.add(new ServicePermission(&quot;hostexample.com@EXAMPLE.COM&quot;,
                &quot;initiate&quot;));
                System.out.println(&quot;nps.implies(that) = &quot; + nps.implies(that_));
                System.out.println(&quot;-----\n&quot;);
                
                Enumeration e = nps.elements();
                
                while (e.hasMoreElements()) {
                ServicePermission x =
                (ServicePermission) e.nextElement();
                System.out.println(&quot;nps.e = &quot; + x);
                }
                
                }                
            </comment>
            <comment line="461">
                Not serialized; see serialization section at end of class                
            </comment>
            <comment line="550">
                Need to maintain serialization interoperability with earlier releases,                
            </comment>
            <comment line="551">
                which had the serializable field:                
            </comment>
            <comment line="552">
                private Vector permissions;                
            </comment>
            <comment line="584">
                Reads in a Vector of ServicePermissions and saves them in the perms field.                
            </comment>
            <implements interface="java.io.Serializable"/>
            <declaration name="perms" type="List&lt;Permission&gt;" line="461"/>
            <method name="KrbServicePermissionCollection" type="constructor" line="463"/>
            <javadoc line="467">
                Check and see if this collection of permissions implies the permissions
                  expressed in &quot;permission&quot;.                
                <param>
                    p the Permission object to compare                    
                </param>
                <return>
                    true if "permission" is a proper subset of a permission in
                      the collection, false if not.                    
                </return>
            </javadoc>
            <method name="implies" type="boolean" line="477">
                <params>
                    <param name="permission" type="Permission"/>
                </params>
                <comment line="489">
                    need to deal with the case where the needed permission has                    
                </comment>
                <comment line="490">
                    more than one action and the collection has individual permissions                    
                </comment>
                <comment line="491">
                    that sum up to the needed.                    
                </comment>
                <comment line="496">
                    System.out.println(&quot;  trying &quot;+x);                    
                </comment>
                <declaration name="np" type="ServicePermission" line="481"/>
                <declaration name="desired" type="int" line="482"/>
                <declaration name="effective" type="int" line="483"/>
                <declaration name="needed" type="int" line="484"/>
                <scope line="486">
                    <declaration name="len" type="int" line="487"/>
                    <scope line="493">
                        <declaration name="x" type="ServicePermission" line="494"/>
                        <scope line="497"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="508">
                Adds a permission to the ServicePermissions. The key for
                  the hash is the name.                
                <param>
                    permission the Permission object to add.                    
                </param>
                <exception>
                    IllegalArgumentException - if the permission is not a
                      ServicePermission                    
                </exception>
                <exception>
                    SecurityException - if this PermissionCollection object
                      has been marked readonly                    
                </exception>
            </javadoc>
            <method name="add" type="void" line="521">
                <params>
                    <param name="permission" type="Permission"/>
                </params>
                <scope line="528"/>
            </method>
            <javadoc line="533">
                Returns an enumeration of all the ServicePermission objects
                  in the container.                
                <return>
                    an enumeration of all the ServicePermission objects.                    
                </return>
            </javadoc>
            <method name="elements" type="Enumeration<Permission>" line="540">
                <comment line="541">
                    Convert Iterator into Enumeration                    
                </comment>
                <scope line="542"/>
            </method>
            <declaration name="serialVersionUID" type="long" line="547"/>
            <declaration name="serialPersistentFields" type="ObjectStreamField[]" line="553"/>
            <javadoc line="553">
                @serialField permissions java.util.Vector
                  A list of ServicePermission objects.                
            </javadoc>
            <javadoc line="561">
                @serialData &quot;permissions&quot; field (a Vector containing the ServicePermissions).                
            </javadoc>
            <method name="writeObject" type="void" line="568">
                <params>
                    <param name="out" type="ObjectOutputStream"/>
                </params>
                <comment line="564">
                    Writes the contents of the perms field out as a Vector for
                     serialization compatibility with earlier releases.                    
                </comment>
                <comment line="569">
                    Don&apos;t call out.defaultWriteObject()                    
                </comment>
                <comment line="571">
                    Write out Vector                    
                </comment>
                <declaration name="permissions" type="Vector&lt;Permission&gt;" line="572"/>
                <scope line="574"/>
                <declaration name="pfields" type="ObjectOutputStream.PutField" line="578"/>
            </method>
            <method name="readObject" type="void" line="587">
                <params>
                    <param name="in" type="ObjectInputStream"/>
                </params>
                <comment line="588">
                    Don&apos;t call defaultReadObject()                    
                </comment>
                <comment line="590">
                    Read in serialized fields                    
                </comment>
                <comment line="593">
                    Get the one we want                    
                </comment>
                <declaration name="gfields" type="ObjectInputStream.GetField" line="591"/>
                <declaration name="permissions" type="Vector&lt;Permission&gt;" line="594"/>
            </method>
        </class>
    </source>