<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.security.auth">
        <import package="java.security.Security"/>
        <import package="sun.security.util.Debug"/>
        <class name="Policy" line="4">
            <javadoc line="4">
                &lt;p&gt; This is an abstract class for representing the system policy for
                  Subject-based authorization.  A subclass implementation
                  of this class provides a means to specify a Subject-based
                  access control &lt;code&gt;Policy&lt;/code&gt;.
                  &lt;p&gt; A &lt;code&gt;Policy&lt;/code&gt; object can be queried for the set of
                  Permissions granted to code running as a
                  &lt;code&gt;Principal&lt;/code&gt; in the following manner:
                  &lt;pre&gt;
                  policy = Policy.getPolicy();
                  PermissionCollection perms = policy.getPermissions(subject,
                  codeSource);
                  &lt;/pre&gt;
                  The &lt;code&gt;Policy&lt;/code&gt; object consults the local policy and returns
                  and appropriate &lt;code&gt;Permissions&lt;/code&gt; object with the
                  Permissions granted to the Principals associated with the
                  provided &lt;i&gt;subject&lt;/i&gt;, and granted to the code specified
                  by the provided &lt;i&gt;codeSource&lt;/i&gt;.
                  &lt;p&gt; A &lt;code&gt;Policy&lt;/code&gt; contains the following information.
                  Note that this example only represents the syntax for the default
                  &lt;code&gt;Policy&lt;/code&gt; implementation. Subclass implementations of this class
                  may implement alternative syntaxes and may retrieve the
                  &lt;code&gt;Policy&lt;/code&gt; from any source such as files, databases,
                  or servers.
                  &lt;p&gt; Each entry in the &lt;code&gt;Policy&lt;/code&gt; is represented as
                  a &lt;b&gt;&lt;i&gt;grant&lt;/i&gt;&lt;/b&gt; entry.  Each &lt;b&gt;&lt;i&gt;grant&lt;/i&gt;&lt;/b&gt; entry
                  specifies a codebase, code signers, and Principals triplet,
                  as well as the Permissions granted to that triplet.
                  &lt;pre&gt;
                  grant CodeBase [&quot;URL&quot;], Signedby [&quot;signers&quot;],
                  Principal [Principal_Class] &quot;Principal_Name&quot; {
                  Permission Permission_Class [&quot;Target_Name&quot;]
                  [, &quot;Permission_Actions&quot;]
                  [, signedBy &quot;SignerName&quot;];
                  };
                  &lt;/pre&gt;
                  The CodeBase and Signedby components of the triplet name/value pairs
                  are optional.  If they are not present, then any any codebase will match,
                  and any signer (including unsigned code) will match.
                  For Example,
                  &lt;pre&gt;
                  grant CodeBase &quot;foo.com&quot;, Signedby &quot;foo&quot;,
                  Principal com.sun.security.auth.SolarisPrincipal &quot;duke&quot; {
                  permission java.io.FilePermission &quot;/home/duke&quot;, &quot;read, write&quot;;
                  };
                  &lt;/pre&gt;
                  This &lt;b&gt;&lt;i&gt;grant&lt;/i&gt;&lt;/b&gt; entry specifies that code from &quot;foo.com&quot;,
                  signed by &quot;foo&apos;, and running as a &lt;code&gt;SolarisPrincipal&lt;/code&gt; with the
                  name, duke, has one &lt;code&gt;Permission&lt;/code&gt;.  This &lt;code&gt;Permission&lt;/code&gt;
                  permits the executing code to read and write files in the directory,
                  &quot;/home/duke&quot;.
                  &lt;p&gt; To &quot;run&quot; as a particular &lt;code&gt;Principal&lt;/code&gt;,
                  code invokes the &lt;code&gt;Subject.doAs(subject, ...)&lt;/code&gt; method.
                  After invoking that method, the code runs as all the Principals
                  associated with the specified &lt;code&gt;Subject&lt;/code&gt;.
                  Note that this &lt;code&gt;Policy&lt;/code&gt; (and the Permissions
                  granted in this &lt;code&gt;Policy&lt;/code&gt;) only become effective
                  after the call to &lt;code&gt;Subject.doAs&lt;/code&gt; has occurred.
                  &lt;p&gt; Multiple Principals may be listed within one &lt;b&gt;&lt;i&gt;grant&lt;/i&gt;&lt;/b&gt; entry.
                  All the Principals in the grant entry must be associated with
                  the &lt;code&gt;Subject&lt;/code&gt; provided to &lt;code&gt;Subject.doAs&lt;/code&gt;
                  for that &lt;code&gt;Subject&lt;/code&gt; to be granted the specified Permissions.
                  &lt;pre&gt;
                  grant Principal com.sun.security.auth.SolarisPrincipal &quot;duke&quot;,
                  Principal com.sun.security.auth.SolarisNumericUserPrincipal &quot;0&quot; {
                  permission java.io.FilePermission &quot;/home/duke&quot;, &quot;read, write&quot;;
                  permission java.net.SocketPermission &quot;duke.com&quot;, &quot;connect&quot;;
                  };
                  &lt;/pre&gt;
                  This entry grants any code running as both &quot;duke&quot; and &quot;0&quot;
                  permission to read and write files in duke&apos;s home directory,
                  as well as permission to make socket connections to &quot;duke.com&quot;.
                  &lt;p&gt; Note that non Principal-based grant entries are not permitted
                  in this &lt;code&gt;Policy&lt;/code&gt;.  Therefore, grant entries such as:
                  &lt;pre&gt;
                  grant CodeBase &quot;foo.com&quot;, Signedby &quot;foo&quot; {
                  permission java.io.FilePermission &quot;/tmp/scratch&quot;, &quot;read, write&quot;;
                  };
                  &lt;/pre&gt;
                  are rejected.  Such permission must be listed in the
                  &lt;code&gt;java.security.Policy&lt;/code&gt;.
                  &lt;p&gt; The default &lt;code&gt;Policy&lt;/code&gt; implementation can be changed by
                  setting the value of the &quot;auth.policy.provider&quot; security property
                  (in the Java security properties file) to the fully qualified name of
                  the desired &lt;code&gt;Policy&lt;/code&gt; implementation class.
                  The Java security properties file is located in the file named
                  &amp;lt;JAVA_HOME&amp;gt;/lib/security/java.security.
                  &amp;lt;JAVA_HOME&amp;gt; refers to the value of the java.home system property,
                  and specifies the directory where the JRE is installed.                
                <deprecated>
                    as of JDK version 1.4 -- Replaced by java.security.Policy.
                      java.security.Policy has a method:
                      <pre>
                      public PermissionCollection getPermissions
                      (java.security.ProtectionDomain pd)
                      </pre>
                      and ProtectionDomain has a constructor:
                      <pre>
                      public ProtectionDomain
                      (CodeSource cs,
                      PermissionCollection permissions,
                      ClassLoader loader,
                      Principal[] principals)
                      </pre>
                      These two APIs provide callers the means to query the
                      Policy for Principal-based Permission entries.                    
                </deprecated>
            </javadoc>
            <declaration name="policy" type="Policy" line="111"/>
            <declaration name="contextClassLoader" type="ClassLoader" line="112"/>
            <declaration name="isCustomPolicy" type="boolean" line="113"/>
            <scope line="114">
                <anonymous_class line="115">
                    <method name="run" type="ClassLoader" line="116"/>
                </anonymous_class>
            </scope>
            <javadoc line="122">
                Sole constructor.  (For invocation by subclass constructors, typically
                  implicit.)                
            </javadoc>
            <method name="Policy" type="constructor" line="126"/>
            <javadoc line="128">
                Returns the installed Policy object.
                  This method first calls
                  &lt;code&gt;SecurityManager.checkPermission&lt;/code&gt; with the
                  &lt;code&gt;AuthPermission(&quot;getPolicy&quot;)&lt;/code&gt; permission
                  to ensure the caller has permission to get the Policy object.
                  &lt;p&gt;                
                <return>
                    the installed Policy.  The return value cannot be
                      <code>null</code>.                    
                </return>
                <exception>
                    java.lang.SecurityException if the current thread does not
                      have permission to get the Policy object.                    
                </exception>
                <see>
                    #setPolicy                    
                </see>
            </javadoc>
            <method name="getPolicy" type="Policy" line="141">
                <declaration name="sm" type="java.lang.SecurityManager" line="142"/>
            </method>
            <javadoc line="146">
                Returns the installed Policy object, skipping the security check.                
                <return>
                    the installed Policy.                    
                </return>
            </javadoc>
            <method name="getPolicyNoCheck" type="Policy" line="150">
                <scope line="151">
                    <scope line="152">
                        <scope line="153">
                            <declaration name="policy_class" type="String" line="154"/>
                            <anonymous_class line="155">
                                <method name="run" type="String" line="156"/>
                            </anonymous_class>
                            <scope line="161"/>
                            <scope line="164">
                                <declaration name="finalClass" type="String" line="165"/>
                                <anonymous_class line="166">
                                    <method name="run" type="Policy" line="167"/>
                                </anonymous_class>
                            </scope>
                            <scope line="174"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="182">
                Sets the system-wide Policy object. This method first calls
                  &lt;code&gt;SecurityManager.checkPermission&lt;/code&gt; with the
                  &lt;code&gt;AuthPermission(&quot;setPolicy&quot;)&lt;/code&gt;
                  permission to ensure the caller has permission to set the Policy.
                  &lt;p&gt;                
                <param>
                    policy the new system Policy object.                    
                </param>
                <exception>
                    java.lang.SecurityException if the current thread does not
                      have permission to set the Policy.                    
                </exception>
                <see>
                    #getPolicy                    
                </see>
            </javadoc>
            <method name="setPolicy" type="void" line="193">
                <params>
                    <param name="policy" type="Policy"/>
                </params>
                <declaration name="sm" type="java.lang.SecurityManager" line="194"/>
            </method>
            <javadoc line="199">
                Returns true if a custom (not com.sun.security.auth.PolicyFile)
                  system-wide policy object has been set or installed. This method is
                  called by SubjectDomainCombiner to provide backwards compatibility for
                  developers that provide their own javax.security.auth.Policy
                  implementations.                
                <return>
                    true if a custom (not com.sun.security.auth.PolicyFile)
                      system-wide policy object has been set; false otherwise                    
                </return>
            </javadoc>
            <method name="isCustomPolicySet" type="boolean" line="208">
                <params>
                    <param name="debug" type="Debug"/>
                </params>
                <scope line="209">
                    <scope line="210"/>
                </scope>
                <anonymous_class line="215">
                    <method name="run" type="String" line="216"/>
                </anonymous_class>
                <declaration name="policyClass" type="String" line="215"/>
                <scope line="221">
                    <scope line="222"/>
                </scope>
            </method>
            <method name="getPermissions" type="java.security.PermissionCollection" line="229"/>
            <javadoc line="229">
                Retrieve the Permissions granted to the Principals associated with
                  the specified &lt;code&gt;CodeSource&lt;/code&gt;.
                  &lt;p&gt;                
                <param>
                    subject the <code>Subject</code>
                      whose associated Principals,
                      in conjunction with the provided
                      <code>CodeSource</code>, determines the Permissions
                      returned by this method.  This parameter
                      may be <code>null</code>. <p>                    
                </param>
                <param>
                    cs the code specified by its <code>CodeSource</code>
                      that determines, in conjunction with the provided
                      <code>Subject</code>, the Permissions
                      returned by this method.  This parameter may be
                      <code>null</code>.                    
                </param>
                <return>
                    the Collection of Permissions granted to all the
                      <code>Subject</code> and code specified in
                      the provided <i>subject</i> and <i>cs</i>
                      parameters.                    
                </return>
            </javadoc>
            <method name="refresh" type="void" line="250"/>
            <javadoc line="250">
                Refresh and reload the Policy.
                  &lt;p&gt;This method causes this object to refresh/reload its current
                  Policy. This is implementation-dependent.
                  For example, if the Policy object is stored in
                  a file, calling &lt;code&gt;refresh&lt;/code&gt; will cause the file to be re-read.
                  &lt;p&gt;                
                <exception>
                    SecurityException if the caller does not have permission
                      to refresh the Policy.                    
                </exception>
            </javadoc>
        </class>
    </source>