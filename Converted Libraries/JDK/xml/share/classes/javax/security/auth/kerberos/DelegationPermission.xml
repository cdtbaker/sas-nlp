<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.security.auth.kerberos">
        <import package="java.util"/>
        <import package="java.security.Permission"/>
        <import package="java.security.BasicPermission"/>
        <import package="java.security.PermissionCollection"/>
        <import package="java.io.ObjectStreamField"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.IOException"/>
        <class name="DelegationPermission" line="10">
            <extends class="BasicPermission"/>
            <implements interface="java.io.Serializable"/>
            <javadoc line="10">
                This class is used to restrict the usage of the Kerberos
                  delegation model, ie: forwardable and proxiable tickets.
                  &lt;p&gt;
                  The target name of this &lt;code&gt;Permission&lt;/code&gt; specifies a pair of
                  kerberos service principals. The first is the subordinate service principal
                  being entrusted to use the TGT. The second service principal designates
                  the target service the subordinate service principal is to
                  interact with on behalf of the initiating KerberosPrincipal. This
                  latter service principal is specified to restrict the use of a
                  proxiable ticket.
                  &lt;p&gt;
                  For example, to specify the &quot;host&quot; service use of a forwardable TGT the
                  target permission is specified as follows:
                  &lt;p&gt;
                  &lt;pre&gt;
                  DelegationPermission(&quot;\&quot;host/foo.example.com@EXAMPLE.COM\&quot; \&quot;krbtgt/EXAMPLE.COM@EXAMPLE.COM\&quot;&quot;);
                  &lt;/pre&gt;
                  &lt;p&gt;
                  To give the &quot;backup&quot; service a proxiable nfs service ticket the target permission
                  might be specified:
                  &lt;p&gt;
                  &lt;pre&gt;
                  DelegationPermission(&quot;\&quot;backup/bar.example.com@EXAMPLE.COM\&quot; \&quot;nfs/home.EXAMPLE.COM@EXAMPLE.COM\&quot;&quot;);
                  &lt;/pre&gt;                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="38"/>
            <declaration name="subordinate" type="String" line="39"/>
            <javadoc line="40">
                Create a new &lt;code&gt;DelegationPermission&lt;/code&gt;
                  with the specified subordinate and target principals.
                  &lt;p&gt;                
                <param>
                    principals the name of the subordinate and target principals                    
                </param>
                <throws>
                    NullPointerException if &lt;code&gt;principals&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.                    
                </throws>
                <throws>
                    IllegalArgumentException if &lt;code&gt;principals&lt;/code&gt; is empty.                    
                </throws>
            </javadoc>
            <method name="DelegationPermission" type="constructor" line="48">
                <params>
                    <param name="principals" type="String"/>
                </params>
            </method>
            <javadoc line="52">
                Create a new &lt;code&gt;DelegationPermission&lt;/code&gt;
                  with the specified subordinate and target principals.
                  &lt;p&gt;                
                <param>
                    principals the name of the subordinate and target principals
                      &lt;p&gt;                    
                </param>
                <param>
                    actions should be null.                    
                </param>
                <throws>
                    NullPointerException if &lt;code&gt;principals&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.                    
                </throws>
                <throws>
                    IllegalArgumentException if &lt;code&gt;principals&lt;/code&gt; is empty.                    
                </throws>
            </javadoc>
            <method name="DelegationPermission" type="constructor" line="62">
                <params>
                    <param name="principals" type="String"/>
                    <param name="actions" type="String"/>
                </params>
            </method>
            <javadoc line="66">
                Initialize the DelegationPermission object.                
            </javadoc>
            <method name="init" type="void" line="69">
                <params>
                    <param name="target" type="String"/>
                </params>
                <declaration name="t" type="StringTokenizer" line="70"/>
                <scope line="71"/>
                <scope line="74">
                    <scope line="77"/>
                    <scope line="81"/>
                </scope>
            </method>
            <javadoc line="86">
                Checks if this Kerberos delegation permission object &quot;implies&quot; the
                  specified permission.
                  &lt;P&gt;
                  If none of the above are true, &lt;code&gt;implies&lt;/code&gt; returns false.                
                <param>
                    p the permission to check against.                    
                </param>
                <return>
                    true if the specified permission is implied by this object,
                      false if not.                    
                </return>
            </javadoc>
            <method name="implies" type="boolean" line="95">
                <params>
                    <param name="p" type="Permission"/>
                </params>
                <declaration name="that" type="DelegationPermission" line="97"/>
            </method>
            <javadoc line="101">
                Checks two DelegationPermission objects for equality.
                  &lt;P&gt;                
                <param>
                    obj the object to test for equality with this object.                    
                </param>
                <return>
                    true if &lt;i&gt;obj&lt;/i&gt; is a DelegationPermission, and
                      has the same subordinate and service principal as this.
                      DelegationPermission object.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="109">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <declaration name="that" type="DelegationPermission" line="112"/>
            </method>
            <javadoc line="115">
                Returns the hash code value for this object.                
                <return>
                    a hash code value for this object.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="119"/>
            <javadoc line="122">
                Returns a PermissionCollection object for storing
                  DelegationPermission objects.
                  &lt;br&gt;
                  DelegationPermission objects must be stored in a manner that
                  allows them to be inserted into the collection in any order, but
                  that also enables the PermissionCollection implies method to
                  be implemented in an efficient (and consistent) manner.                
                <return>
                    a new PermissionCollection object suitable for storing
                      DelegationPermissions.                    
                </return>
            </javadoc>
            <method name="newPermissionCollection" type="PermissionCollection" line="133"/>
            <javadoc line="136">
                WriteObject is called to save the state of the DelegationPermission
                  to a stream. The actions are serialized, and the superclass
                  takes care of the name.                
            </javadoc>
            <method name="writeObject" type="void" line="141">
                <params>
                    <param name="s" type="java.io.ObjectOutputStream"/>
                </params>
            </method>
            <javadoc line="144">
                readObject is called to restore the state of the
                  DelegationPermission from a stream.                
            </javadoc>
            <method name="readObject" type="void" line="148">
                <params>
                    <param name="s" type="java.io.ObjectInputStream"/>
                </params>
            </method>
        </class>
        <class name="KrbDelegationPermissionCollection" line="153">
            <extends class="PermissionCollection"/>
            <implements interface="java.io.Serializable"/>
            <declaration name="perms" type="List&amp;lt;Permission&amp;gt;" line="154"/>
            <method name="KrbDelegationPermissionCollection" type="constructor" line="155"/>
            <javadoc line="158">
                Check and see if this collection of permissions implies the permissions
                  expressed in &quot;permission&quot;.                
                <param>
                    p the Permission object to compare                    
                </param>
                <return>
                    true if &quot;permission&quot; is a proper subset of a permission in
                      the collection, false if not.                    
                </return>
            </javadoc>
            <method name="implies" type="boolean" line="165">
                <params>
                    <param name="permission" type="Permission"/>
                </params>
                <scope line="167">
                    <scope line="168"/>
                </scope>
            </method>
            <javadoc line="174">
                Adds a permission to the DelegationPermissions. The key for
                  the hash is the name.                
                <param>
                    permission the Permission object to add.                    
                </param>
                <exception>
                    IllegalArgumentException - if the permission is not a
                      DelegationPermission                    
                </exception>
                <exception>
                    SecurityException - if this PermissionCollection object
                      has been marked readonly                    
                </exception>
            </javadoc>
            <method name="add" type="void" line="183">
                <params>
                    <param name="permission" type="Permission"/>
                </params>
                <scope line="186"/>
            </method>
            <javadoc line="190">
                Returns an enumeration of all the DelegationPermission objects
                  in the container.                
                <return>
                    an enumeration of all the DelegationPermission objects.                    
                </return>
            </javadoc>
            <method name="elements" type="Enumeration&lt;Permission&gt;" line="195">
                <scope line="196"/>
            </method>
            <declaration name="serialVersionUID" type="long" line="200"/>
            <declaration name="serialPersistentFields" type="ObjectStreamField[]" line="201"/>
            <javadoc line="201">
                @serialField permissions java.util.Vector
                  A list of DelegationPermission objects.                
            </javadoc>
            <javadoc line="206">
                @serialData &quot;permissions&quot; field (a Vector containing the DelegationPermissions).                
            </javadoc>
            <method name="writeObject" type="void" line="209">
                <params>
                    <param name="out" type="ObjectOutputStream"/>
                </params>
                <declaration name="permissions" type="Vector&amp;lt;Permission&amp;gt;" line="210"/>
                <scope line="211"/>
                <declaration name="pfields" type="ObjectOutputStream.PutField" line="214"/>
            </method>
            <method name="readObject" type="void" line="218">
                <params>
                    <param name="in" type="ObjectInputStream"/>
                </params>
                <declaration name="gfields" type="ObjectInputStream.GetField" line="219"/>
                <declaration name="permissions" type="Vector&amp;lt;Permission&amp;gt;" line="220"/>
            </method>
        </class>
    </source>