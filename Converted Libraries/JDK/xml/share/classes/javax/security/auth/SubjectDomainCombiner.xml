<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.security.auth">
        <import package="java.security.AccessController"/>
        <import package="java.security.Permission"/>
        <import package="java.security.Permissions"/>
        <import package="java.security.PermissionCollection"/>
        <import package="java.security.Policy"/>
        <import package="java.security.Principal"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.security.ProtectionDomain"/>
        <import package="java.security.Security"/>
        <import package="java.util.Set"/>
        <import package="java.util.WeakHashMap"/>
        <import package="java.lang.ref.WeakReference"/>
        <class name="SubjectDomainCombiner" line="41">
            <comment line="60">
                Note: check only at classloading time, not dynamically during combine()                
            </comment>
            <comment line="64">
                Relevant only when useJavaxPolicy is true                
            </comment>
            <implements interface="java.security.DomainCombiner"/>
            <javadoc line="41">
                A &lt;code&gt;SubjectDomainCombiner&lt;/code&gt; updates ProtectionDomains
                  with Principals from the &lt;code&gt;Subject&lt;/code&gt; associated with this
                  &lt;code&gt;SubjectDomainCombiner&lt;/code&gt;.                
            </javadoc>
            <declaration name="subject" type="Subject" line="49"/>
            <declaration name="cachedPDs" type="WeakKeyValueMap&lt;ProtectionDomain,ProtectionDomain&gt;" line="50"/>
            <declaration name="principalSet" type="Set&lt;Principal&gt;" line="52"/>
            <declaration name="principals" type="Principal[]" line="53"/>
            <declaration name="debug" type="sun.security.util.Debug" line="55"/>
            <declaration name="useJavaxPolicy" type="boolean" line="60"/>
            <declaration name="allowCaching" type="boolean" line="64"/>
            <javadoc line="67">
                Associate the provided &lt;code&gt;Subject&lt;/code&gt; with this
                  &lt;code&gt;SubjectDomainCombiner&lt;/code&gt;.
                  &lt;p&gt;                
                <param>
                    subject the <code>Subject</code> to be associated with
                      with this <code>SubjectDomainCombiner</code>.                    
                </param>
            </javadoc>
            <method name="SubjectDomainCombiner" type="constructor" line="76">
                <params>
                    <param name="subject" type="Subject"/>
                </params>
                <scope line="79"/>
            </method>
            <javadoc line="86">
                Get the &lt;code&gt;Subject&lt;/code&gt; associated with this
                  &lt;code&gt;SubjectDomainCombiner&lt;/code&gt;.
                  &lt;p&gt;                
                <return>
                    the <code>Subject</code> associated with this
                      <code>SubjectDomainCombiner</code>, or <code>null</code>
                      if no <code>Subject</code> is associated with this
                      <code>SubjectDomainCombiner</code>.                    
                </return>
                <exception>
                    SecurityException if the caller does not have permission
                      to get the <code>Subject</code> associated with this
                      <code>SubjectDomainCombiner</code>.                    
                </exception>
            </javadoc>
            <method name="getSubject" type="Subject" line="101">
                <declaration name="sm" type="java.lang.SecurityManager" line="102"/>
                <scope line="103"/>
            </method>
            <javadoc line="110">
                Update the relevant ProtectionDomains with the Principals
                  from the &lt;code&gt;Subject&lt;/code&gt; associated with this
                  &lt;code&gt;SubjectDomainCombiner&lt;/code&gt;.
                  &lt;p&gt; A new &lt;code&gt;ProtectionDomain&lt;/code&gt; instance is created
                  for each &lt;code&gt;ProtectionDomain&lt;/code&gt; in the
                  &lt;i&gt;currentDomains&lt;/i&gt; array.  Each new &lt;code&gt;ProtectionDomain&lt;/code&gt;
                  instance is created using the &lt;code&gt;CodeSource&lt;/code&gt;,
                  &lt;code&gt;Permission&lt;/code&gt;s and &lt;code&gt;ClassLoader&lt;/code&gt;
                  from the corresponding &lt;code&gt;ProtectionDomain&lt;/code&gt; in
                  &lt;i&gt;currentDomains&lt;/i&gt;, as well as with the Principals from
                  the &lt;code&gt;Subject&lt;/code&gt; associated with this
                  &lt;code&gt;SubjectDomainCombiner&lt;/code&gt;.
                  &lt;p&gt; All of the newly instantiated ProtectionDomains are
                  combined into a new array.  The ProtectionDomains from the
                  &lt;i&gt;assignedDomains&lt;/i&gt; array are appended to this new array,
                  and the result is returned.
                  &lt;p&gt; Note that optimizations such as the removal of duplicate
                  ProtectionDomains may have occurred.
                  In addition, caching of ProtectionDomains may be permitted.
                  &lt;p&gt;                
                <param>
                    currentDomains the ProtectionDomains associated with the
                      current execution Thread, up to the most recent
                      privileged <code>ProtectionDomain</code>.
                      The ProtectionDomains are are listed in order of execution,
                      with the most recently executing <code>ProtectionDomain</code>
                      residing at the beginning of the array. This parameter may
                      be <code>null</code> if the current execution Thread
                      has no associated ProtectionDomains.<p>                    
                </param>
                <param>
                    assignedDomains the ProtectionDomains inherited from the
                      parent Thread, or the ProtectionDomains from the
                      privileged <i>context</i>, if a call to
                      AccessController.doPrivileged(..., <i>context</i>)
                      had occurred  This parameter may be <code>null</code>
                      if there were no ProtectionDomains inherited from the
                      parent Thread, or from the privileged <i>context</i>.                    
                </param>
                <return>
                    a new array consisting of the updated ProtectionDomains,
                      or <code>null</code>.                    
                </return>
            </javadoc>
            <method name="combine" type="ProtectionDomain[]" line="157">
                <params>
                    <param name="currentDomains" type="ProtectionDomain[]"/>
                    <param name="assignedDomains" type="ProtectionDomain[]"/>
                </params>
                <comment line="175">
                    No need to optimize assignedDomains because it should                    
                </comment>
                <comment line="176">
                    have been previously optimized (when it was set).                    
                </comment>
                <comment line="178">
                    Note that we are returning a direct reference                    
                </comment>
                <comment line="179">
                    to the input array - since ACC does not clone                    
                </comment>
                <comment line="180">
                    the arrays when it calls combiner.combine,                    
                </comment>
                <comment line="181">
                    multiple ACC instances may share the same                    
                </comment>
                <comment line="182">
                    array instance in this case                    
                </comment>
                <comment line="187">
                    optimize currentDomains                    
                </comment>
                <comment line="188">
                                        
                </comment>
                <comment line="189">
                    No need to optimize assignedDomains because it should                    
                </comment>
                <comment line="190">
                    have been previously optimized (when it was set).                    
                </comment>
                <comment line="202">
                    maintain backwards compatibility for developers who provide                    
                </comment>
                <comment line="203">
                    their own custom javax.security.auth.Policy implementations                    
                </comment>
                <comment line="211">
                    the ProtectionDomains for the new AccessControlContext                    
                </comment>
                <comment line="212">
                    that we will return                    
                </comment>
                <comment line="220">
                    if the Subject was mutated, clear the PD cache                    
                </comment>
                <comment line="261">
                    now add on the assigned domains                    
                </comment>
                <comment line="265">
                    optimize the result (cached PDs might exist in assignedDomains)                    
                </comment>
                <comment line="271">
                    if aLen == 0 || allNew, no need to further optimize newDomains                    
                </comment>
                <comment line="285">
                    return the new ProtectionDomains                    
                </comment>
                <scope line="158">
                    <scope line="159"/>
                    <scope line="161">
                        <declaration name="s" type="Subject" line="162"/>
                        <anonymous_class line="164">
                            <method name="run" type="Void" line="165"/>
                        </anonymous_class>
                    </scope>
                </scope>
                <scope line="174"/>
                <scope line="193"/>
                <scope line="198"/>
                <scope line="204"/>
                <declaration name="cLen" type="int" line="208"/>
                <declaration name="aLen" type="int" line="209"/>
                <declaration name="newDomains" type="ProtectionDomain[]" line="213"/>
                <declaration name="allNew" type="boolean" line="215"/>
                <scope line="216">
                    <scope line="218">
                        <declaration name="newSet" type="Set&lt;Principal&gt;" line="221"/>
                        <scope line="222"/>
                        <scope line="229"/>
                    </scope>
                    <declaration name="subjectPd" type="ProtectionDomain" line="234"/>
                    <scope line="235">
                        <declaration name="pd" type="ProtectionDomain" line="236"/>
                        <scope line="240"/>
                        <scope line="246"/>
                    </scope>
                </scope>
                <scope line="253">
                    <scope line="255"/>
                </scope>
                <scope line="262">
                    <scope line="266"/>
                </scope>
                <scope line="273">
                    <scope line="274"/>
                    <scope line="276">
                        <scope line="278"/>
                    </scope>
                </scope>
                <scope line="286"/>
                <scope line="288"/>
            </method>
            <javadoc line="293">
                Use the javax.security.auth.Policy implementation                
            </javadoc>
            <method name="combineJavaxPolicy" type="ProtectionDomain[]" line="298">
                <params>
                    <param name="currentDomains" type="ProtectionDomain[]"/>
                    <param name="assignedDomains" type="ProtectionDomain[]"/>
                </params>
                <comment line="304">
                    Call refresh only caching is disallowed                    
                </comment>
                <comment line="314">
                    the ProtectionDomains for the new AccessControlContext                    
                </comment>
                <comment line="315">
                    that we will return                    
                </comment>
                <comment line="322">
                    if the Subject was mutated, clear the PD cache                    
                </comment>
                <comment line="342">
                    XXX                    
                </comment>
                <comment line="343">
                    we must first add the original permissions.                    
                </comment>
                <comment line="344">
                    that way when we later add the new JAAS permissions,                    
                </comment>
                <comment line="345">
                    any unresolved JAAS-related permissions will                    
                </comment>
                <comment line="346">
                    automatically get resolved.                    
                </comment>
                <comment line="348">
                    get the original perms                    
                </comment>
                <comment line="363">
                    get perms from the policy                    
                </comment>
                <comment line="377">
                    add the newly granted perms,                    
                </comment>
                <comment line="378">
                    avoiding duplicates                    
                </comment>
                <comment line="408">
                    now add on the assigned domains                    
                </comment>
                <comment line="425">
                    return the new ProtectionDomains                    
                </comment>
                <scope line="300">
                    <anonymous_class line="302">
                        <method name="run" type="Void" line="303">
                            <comment line="304">
                                Call refresh only caching is disallowed                                
                            </comment>
                        </method>
                    </anonymous_class>
                </scope>
                <declaration name="cLen" type="int" line="311"/>
                <declaration name="aLen" type="int" line="312"/>
                <declaration name="newDomains" type="ProtectionDomain[]" line="316"/>
                <scope line="318">
                    <scope line="320">
                        <declaration name="newSet" type="Set&lt;Principal&gt;" line="323"/>
                        <scope line="324"/>
                        <scope line="331"/>
                    </scope>
                    <scope line="336">
                        <declaration name="pd" type="ProtectionDomain" line="337"/>
                        <declaration name="subjectPd" type="ProtectionDomain" line="338"/>
                        <scope line="340">
                            <declaration name="perms" type="Permissions" line="349"/>
                            <declaration name="coll" type="PermissionCollection" line="350"/>
                            <declaration name="e" type="java.util.Enumeration" line="351"/>
                            <scope line="352">
                                <scope line="353">
                                    <scope line="355">
                                        <declaration name="newPerm" type="Permission" line="356"/>
                                    </scope>
                                </scope>
                            </scope>
                            <declaration name="finalCs" type="java.security.CodeSource" line="365"/>
                            <declaration name="finalS" type="Subject" line="366"/>
                            <anonymous_class line="369">
                                <method name="run" type="PermissionCollection" line="370"/>
                            </anonymous_class>
                            <declaration name="newPerms" type="PermissionCollection" line="367"/>
                            <scope line="379">
                                <scope line="381">
                                    <declaration name="newPerm" type="Permission" line="382"/>
                                    <scope line="383"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="401">
                    <scope line="403"/>
                </scope>
                <scope line="409"/>
                <scope line="413">
                    <scope line="414"/>
                    <scope line="416">
                        <scope line="418"/>
                    </scope>
                </scope>
                <scope line="426"/>
                <scope line="428"/>
            </method>
            <method name="optimize" type="ProtectionDomain[]" line="433">
                <params>
                    <param name="domains" type="ProtectionDomain[]"/>
                </params>
                <comment line="442">
                    skip domains with AllPermission                    
                </comment>
                <comment line="443">
                    XXX                    
                </comment>
                <comment line="444">
                                        
                </comment>
                <comment line="445">
                    if (domains[i].implies(ALL_PERMISSION))                    
                </comment>
                <comment line="446">
                    continue;                    
                </comment>
                <comment line="448">
                    skip System Domains                    
                </comment>
                <comment line="451">
                    remove duplicates                    
                </comment>
                <comment line="462">
                    resize the array if necessary                    
                </comment>
                <declaration name="optimized" type="ProtectionDomain[]" line="437"/>
                <declaration name="pd" type="ProtectionDomain" line="438"/>
                <declaration name="num" type="int" line="439"/>
                <scope line="440">
                    <scope line="449">
                        <declaration name="found" type="boolean" line="452"/>
                        <scope line="453"/>
                        <scope line="456"/>
                    </scope>
                </scope>
                <scope line="463">
                    <declaration name="downSize" type="ProtectionDomain[]" line="464"/>
                </scope>
            </method>
            <method name="cachePolicy" type="boolean" line="472">
                <comment line="483">
                    cache by default                    
                </comment>
                <anonymous_class line="474">
                    <method name="run" type="String" line="475"/>
                </anonymous_class>
                <declaration name="s" type="String" line="473"/>
                <scope line="479"/>
            </method>
            <method name="printInputDomains" type="void" line="488">
                <params>
                    <param name="currentDomains" type="ProtectionDomain[]"/>
                    <param name="assignedDomains" type="ProtectionDomain[]"/>
                </params>
                <scope line="489"/>
                <scope line="491">
                    <scope line="493">
                        <scope line="494"/>
                        <scope line="496"/>
                    </scope>
                </scope>
                <scope line="503"/>
                <scope line="505">
                    <scope line="508">
                        <scope line="509"/>
                        <scope line="511"/>
                    </scope>
                </scope>
            </method>
            <method name="printDomain" type="String" line="519">
                <params>
                    <param name="pd" type="ProtectionDomain"/>
                </params>
                <scope line="520"/>
                <anonymous_class line="523">
                    <method name="run" type="String" line="524"/>
                </anonymous_class>
            </method>
            <class name="WeakKeyValueMap" line="530">
                <type_params>
                    <type_param name="K"/>
                    <type_param name="V"/>
                </type_params>
                <extends class="WeakHashMap">
                    <type_params>
                        <type_param name="K"/>
                        <type_param name="WeakReference<V>"/>
                    </type_params>
                </extends>
                <javadoc line="530">
                    A HashMap that has weak keys and values.
                      Key objects in this map are the &quot;current&quot; ProtectionDomain instances
                      received via the combine method.  Each &quot;current&quot; PD is mapped to a
                      new PD instance that holds both the contents of the &quot;current&quot; PD,
                      as well as the principals from the Subject associated with this combiner.
                      The newly created &quot;principal-based&quot; PD values must be stored as
                      WeakReferences since they contain strong references to the
                      corresponding key object (the &quot;current&quot; non-principal-based PD),
                      which will prevent the key from being GC&apos;d.  Specifically,
                      a &quot;principal-based&quot; PD contains strong references to the CodeSource,
                      signer certs, PermissionCollection and ClassLoader objects
                      in the &quot;current PD&quot;.                    
                </javadoc>
                <method name="getValue" type="V" line="549">
                    <params>
                        <param name="key" type="K"/>
                    </params>
                    <declaration name="wr" type="WeakReference&lt;V&gt;" line="550"/>
                    <scope line="551"/>
                </method>
                <method name="putValue" type="V" line="557">
                    <params>
                        <param name="key" type="K"/>
                        <param name="value" type="V"/>
                    </params>
                    <declaration name="wr" type="WeakReference&lt;V&gt;" line="558"/>
                    <scope line="559"/>
                </method>
            </class>
        </class>
    </source>