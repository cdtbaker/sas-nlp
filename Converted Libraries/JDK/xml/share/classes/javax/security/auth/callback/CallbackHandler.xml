<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.security.auth.callback">
        <interface name="CallbackHandler">
            <javadoc line="2">
                &lt;p&gt; An application implements a &lt;code&gt;CallbackHandler&lt;/code&gt; and passes
                  it to underlying security services so that they may interact with
                  the application to retrieve specific authentication data,
                  such as usernames and passwords, or to display certain information,
                  such as error and warning messages.
                  &lt;p&gt; CallbackHandlers are implemented in an application-dependent fashion.
                  For example, implementations for an application with a graphical user
                  interface (GUI) may pop up windows to prompt for requested information
                  or to display error messages.  An implementation may also choose to obtain
                  requested information from an alternate source without asking the end user.
                  &lt;p&gt; Underlying security services make requests for different types
                  of information by passing individual Callbacks to the
                  &lt;code&gt;CallbackHandler&lt;/code&gt;.  The &lt;code&gt;CallbackHandler&lt;/code&gt;
                  implementation decides how to retrieve and display information
                  depending on the Callbacks passed to it.  For example,
                  if the underlying service needs a username and password to
                  authenticate a user, it uses a &lt;code&gt;NameCallback&lt;/code&gt; and
                  &lt;code&gt;PasswordCallback&lt;/code&gt;.  The &lt;code&gt;CallbackHandler&lt;/code&gt;
                  can then choose to prompt for a username and password serially,
                  or to prompt for both in a single window.
                  &lt;p&gt; A default &lt;code&gt;CallbackHandler&lt;/code&gt; class implementation
                  may be specified in the &lt;i&gt;auth.login.defaultCallbackHandler&lt;/i&gt;
                  security property.  The security property can be set
                  in the Java security properties file located in the file named
                  &amp;lt;JAVA_HOME&amp;gt;/lib/security/java.security.
                  &amp;lt;JAVA_HOME&amp;gt; refers to the value of the java.home system property,
                  and specifies the directory where the JRE is installed.
                  &lt;p&gt; If the security property is set to the fully qualified name of a
                  &lt;code&gt;CallbackHandler&lt;/code&gt; implementation class,
                  then a &lt;code&gt;LoginContext&lt;/code&gt; will load the specified
                  &lt;code&gt;CallbackHandler&lt;/code&gt; and pass it to the underlying LoginModules.
                  The &lt;code&gt;LoginContext&lt;/code&gt; only loads the default handler
                  if it was not provided one.
                  &lt;p&gt; All default handler implementations must provide a public
                  zero-argument constructor.                
            </javadoc>
            <method name="handle" type="void" line="40"/>
            <javadoc line="40">
                &lt;p&gt; Retrieve or display the information requested in the
                  provided Callbacks.
                  &lt;p&gt; The &lt;code&gt;handle&lt;/code&gt; method implementation checks the
                  instance(s) of the &lt;code&gt;Callback&lt;/code&gt; object(s) passed in
                  to retrieve or display the requested information.
                  The following example is provided to help demonstrate what an
                  &lt;code&gt;handle&lt;/code&gt; method implementation might look like.
                  This example code is for guidance only.  Many details,
                  including proper error handling, are left out for simplicity.
                  &lt;pre&gt;
                  public void handle(Callback[] callbacks)
                  throws IOException, UnsupportedCallbackException {
                  for (int i = 0; i &lt; callbacks.length; i++) {
                  if (callbacks[i] instanceof TextOutputCallback) {
                  // display the message according to the specified type
                  TextOutputCallback toc = (TextOutputCallback)callbacks[i];
                  switch (toc.getMessageType()) {
                  case TextOutputCallback.INFORMATION:
                  System.out.println(toc.getMessage());
                  break;
                  case TextOutputCallback.ERROR:
                  System.out.println(&quot;ERROR: &quot; + toc.getMessage());
                  break;
                  case TextOutputCallback.WARNING:
                  System.out.println(&quot;WARNING: &quot; + toc.getMessage());
                  break;
                  default:
                  throw new IOException(&quot;Unsupported message type: &quot; +
                  toc.getMessageType());
                  }
                  } else if (callbacks[i] instanceof NameCallback) {
                  // prompt the user for a username
                  NameCallback nc = (NameCallback)callbacks[i];
                  // ignore the provided defaultName
                  System.err.print(nc.getPrompt());
                  System.err.flush();
                  nc.setName((new BufferedReader
                  (new InputStreamReader(System.in))).readLine());
                  } else if (callbacks[i] instanceof PasswordCallback) {
                  // prompt the user for sensitive information
                  PasswordCallback pc = (PasswordCallback)callbacks[i];
                  System.err.print(pc.getPrompt());
                  System.err.flush();
                  pc.setPassword(readPassword(System.in));
                  } else {
                  throw new UnsupportedCallbackException
                  (callbacks[i], &quot;Unrecognized Callback&quot;);
                  }
                  }
                  }
                  // Reads user password from given input stream.
                  private char[] readPassword(InputStream in) throws IOException {
                  // insert code to read a user password from the input stream
                  }
                  &lt;/pre&gt;                
                <param>
                    callbacks an array of <code>Callback</code> objects provided
                      by an underlying security service which contains
                      the information requested to be retrieved or displayed.                    
                </param>
                <exception>
                    java.io.IOException if an input or output error occurs. <p>                    
                </exception>
                <exception>
                    UnsupportedCallbackException if the implementation of this
                      method does not support one or more of the Callbacks
                      specified in the <code>callbacks</code> parameter.                    
                </exception>
            </javadoc>
        </interface>
    </source>