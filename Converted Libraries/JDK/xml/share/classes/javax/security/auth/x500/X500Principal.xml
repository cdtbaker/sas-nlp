<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.security.auth.x500">
        <import package="java.io"/>
        <import package="java.security.Principal"/>
        <import package="java.util.Collections"/>
        <import package="java.util.Map"/>
        <import package="sun.security.x509.X500Name"/>
        <import package="sun.security.util"/>
        <class name="X500Principal" line="8">
            <implements interface="Principal"/>
            <implements interface="java.io.Serializable"/>
            <javadoc line="8">
                &lt;p&gt; This class represents an X.500 &lt;code&gt;Principal&lt;/code&gt;.
                  &lt;code&gt;X500Principal&lt;/code&gt;s are represented by distinguished names such as
                  &quot;CN=Duke, OU=JavaSoft, O=Sun Microsystems, C=US&quot;.
                  &lt;p&gt; This class can be instantiated by using a string representation
                  of the distinguished name, or by using the ASN.1 DER encoded byte
                  representation of the distinguished name.  The current specification
                  for the string representation of a distinguished name is defined in
                  &lt;a href=&quot;http://www.ietf.org/rfc/rfc2253.txt&quot;&gt;RFC 2253: Lightweight
                  Directory Access Protocol (v3): UTF-8 String Representation of
                  Distinguished Names&lt;/a&gt;. This class, however, accepts string formats from
                  both RFC 2253 and &lt;a href=&quot;http://www.ietf.org/rfc/rfc1779.txt&quot;&gt;RFC 1779:
                  A String Representation of Distinguished Names&lt;/a&gt;, and also recognizes
                  attribute type keywords whose OIDs (Object Identifiers) are defined in
                  &lt;a href=&quot;http://www.ietf.org/rfc/rfc3280.txt&quot;&gt;RFC 3280: Internet X.509
                  Public Key Infrastructure Certificate and CRL Profile&lt;/a&gt;.
                  &lt;p&gt; The string representation for this &lt;code&gt;X500Principal&lt;/code&gt;
                  can be obtained by calling the &lt;code&gt;getName&lt;/code&gt; methods.
                  &lt;p&gt; Note that the &lt;code&gt;getSubjectX500Principal&lt;/code&gt; and
                  &lt;code&gt;getIssuerX500Principal&lt;/code&gt; methods of
                  &lt;code&gt;X509Certificate&lt;/code&gt; return X500Principals representing the
                  issuer and subject fields of the certificate.                
                <see>
                    java.security.cert.X509Certificate                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="34"/>
            <declaration name="RFC1779" type="String" line="35"/>
            <javadoc line="35">
                RFC 1779 String format of Distinguished Names.                
            </javadoc>
            <declaration name="RFC2253" type="String" line="39"/>
            <javadoc line="39">
                RFC 2253 String format of Distinguished Names.                
            </javadoc>
            <declaration name="CANONICAL" type="String" line="43"/>
            <javadoc line="43">
                Canonical String format of Distinguished Names.                
            </javadoc>
            <declaration name="thisX500Name" type="X500Name" line="47"/>
            <javadoc line="47">
                The X500Name representing this principal.
                  NOTE: this field is reflectively accessed from within X500Name.                
            </javadoc>
            <javadoc line="52">
                Creates an X500Principal by wrapping an X500Name.
                  NOTE: The constructor is package private. It is intended to be accessed
                  using privileged reflection from classes in sun.security..
                  Currently referenced from sun.security.x509.X500Name.asX500Principal().                
            </javadoc>
            <method name="X500Principal" type="constructor" line="58">
                <params>
                    <param name="x500Name" type="X500Name"/>
                </params>
            </method>
            <javadoc line="61">
                Creates an &lt;code&gt;X500Principal&lt;/code&gt; from a string representation of
                  an X.500 distinguished name (ex:
                  &quot;CN=Duke, OU=JavaSoft, O=Sun Microsystems, C=US&quot;).
                  The distinguished name must be specified using the grammar defined in
                  RFC 1779 or RFC 2253 (either format is acceptable).
                  &lt;p&gt;This constructor recognizes the attribute type keywords
                  defined in RFC 1779 and RFC 2253
                  (and listed in {@link #getName(String format) getName(String format)}),
                  as well as the T, DNQ or DNQUALIFIER, SURNAME, GIVENNAME, INITIALS,
                  GENERATION, EMAILADDRESS, and SERIALNUMBER keywords whose OIDs are
                  defined in RFC 3280 and its successor.
                  Any other attribute type must be specified as an OID.                
                <param>
                    name an X.500 distinguished name in RFC 1779 or RFC 2253 format                    
                </param>
                <exception>
                    NullPointerException if the &lt;code&gt;name&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt;                    
                </exception>
                <exception>
                    IllegalArgumentException if the &lt;code&gt;name&lt;/code&gt;
                      is improperly specified                    
                </exception>
            </javadoc>
            <method name="X500Principal" type="constructor" line="80">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="83">
                Creates an &lt;code&gt;X500Principal&lt;/code&gt; from a string representation of
                  an X.500 distinguished name (ex:
                  &quot;CN=Duke, OU=JavaSoft, O=Sun Microsystems, C=US&quot;).
                  The distinguished name must be specified using the grammar defined in
                  RFC 1779 or RFC 2253 (either format is acceptable).
                  &lt;p&gt; This constructor recognizes the attribute type keywords specified
                  in {@link #X500Principal(String)} and also recognizes additional
                  keywords that have entries in the &lt;code&gt;keywordMap&lt;/code&gt; parameter.
                  Keyword entries in the keywordMap take precedence over the default
                  keywords recognized by &lt;code&gt;X500Principal(String)&lt;/code&gt;. Keywords
                  MUST be specified in all upper-case, otherwise they will be ignored.
                  Improperly specified keywords are ignored; however if a keyword in the
                  name maps to an improperly specified OID, an
                  &lt;code&gt;IllegalArgumentException&lt;/code&gt; is thrown. It is permissible to
                  have 2 different keywords that map to the same OID.                
                <param>
                    name an X.500 distinguished name in RFC 1779 or RFC 2253 format                    
                </param>
                <param>
                    keywordMap an attribute type keyword map, where each key is a
                      keyword String that maps to a corresponding object identifier in String
                      form (a sequence of nonnegative integers separated by periods). The map
                      may be empty but never &lt;code&gt;null&lt;/code&gt;.                    
                </param>
                <exception>
                    NullPointerException if &lt;code&gt;name&lt;/code&gt; or
                      &lt;code&gt;keywordMap&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;                    
                </exception>
                <exception>
                    IllegalArgumentException if the &lt;code&gt;name&lt;/code&gt; is
                      improperly specified or a keyword in the &lt;code&gt;name&lt;/code&gt; maps to an
                      OID that is not in the correct form                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="X500Principal" type="constructor" line="111">
                <params>
                    <param name="name" type="String"/>
                    <param name="keywordMap" type="Map&lt;String,String&gt;"/>
                </params>
                <scope line="112"/>
                <scope line="115"/>
                <scope line="118"/>
                <scope line="121">
                    <declaration name="iae" type="IllegalArgumentException" line="122"/>
                </scope>
            </method>
            <javadoc line="127">
                Creates an &lt;code&gt;X500Principal&lt;/code&gt; from a distinguished name in
                  ASN.1 DER encoded form. The ASN.1 notation for this structure is as
                  follows.
                  &lt;pre&gt;&lt;code&gt;
                  Name ::= CHOICE {
                  RDNSequence }
                  RDNSequence ::= SEQUENCE OF RelativeDistinguishedName
                  RelativeDistinguishedName ::=
                  SET SIZE (1 .. MAX) OF AttributeTypeAndValue
                  AttributeTypeAndValue ::= SEQUENCE {
                  type     AttributeType,
                  value    AttributeValue }
                  AttributeType ::= OBJECT IDENTIFIER
                  AttributeValue ::= ANY DEFINED BY AttributeType
                  ....
                  DirectoryString ::= CHOICE {
                  teletexString           TeletexString (SIZE (1..MAX)),
                  printableString         PrintableString (SIZE (1..MAX)),
                  universalString         UniversalString (SIZE (1..MAX)),
                  utf8String              UTF8String (SIZE (1.. MAX)),
                  bmpString               BMPString (SIZE (1..MAX)) }
                  &lt;/code&gt;&lt;/pre&gt;                
                <param>
                    name a byte array containing the distinguished name in ASN.1
                      DER encoded form                    
                </param>
                <throws>
                    IllegalArgumentException if an encoding error occurs
                      (incorrect form for DN)                    
                </throws>
            </javadoc>
            <method name="X500Principal" type="constructor" line="155">
                <params>
                    <param name="name" type="byte[]"/>
                </params>
                <scope line="156"/>
                <scope line="159">
                    <declaration name="iae" type="IllegalArgumentException" line="160"/>
                </scope>
            </method>
            <javadoc line="165">
                Creates an &lt;code&gt;X500Principal&lt;/code&gt; from an &lt;code&gt;InputStream&lt;/code&gt;
                  containing the distinguished name in ASN.1 DER encoded form.
                  The ASN.1 notation for this structure is supplied in the
                  documentation for{@link #X500Principal(byte[] name) X500Principal(byte[] name)}.
                  &lt;p&gt; The read position of the input stream is positioned
                  to the next available byte after the encoded distinguished name.                
                <param>
                    is an &lt;code&gt;InputStream&lt;/code&gt; containing the distinguished
                      name in ASN.1 DER encoded form                    
                </param>
                <exception>
                    NullPointerException if the &lt;code&gt;InputStream&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt;                    
                </exception>
                <exception>
                    IllegalArgumentException if an encoding error occurs
                      (incorrect form for DN)                    
                </exception>
            </javadoc>
            <method name="X500Principal" type="constructor" line="179">
                <params>
                    <param name="is" type="InputStream"/>
                </params>
                <scope line="180"/>
                <scope line="183">
                    <declaration name="der" type="DerValue" line="185"/>
                </scope>
                <scope line="188">
                    <scope line="189">
                        <scope line="190"/>
                        <scope line="193">
                            <declaration name="iae" type="IllegalArgumentException" line="194"/>
                        </scope>
                    </scope>
                    <declaration name="iae" type="IllegalArgumentException" line="199"/>
                </scope>
            </method>
            <javadoc line="204">
                Returns a string representation of the X.500 distinguished name using
                  the format defined in RFC 2253.
                  &lt;p&gt;This method is equivalent to calling
                  &lt;code&gt;getName(X500Principal.RFC2253)&lt;/code&gt;.                
                <return>
                    the distinguished name of this &lt;code&gt;X500Principal&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="getName" type="String" line="211"/>
            <javadoc line="214">
                Returns a string representation of the X.500 distinguished name
                  using the specified format. Valid values for the format are
                  &quot;RFC1779&quot;, &quot;RFC2253&quot;, and &quot;CANONICAL&quot; (case insensitive).
                  &lt;p&gt; If &quot;RFC1779&quot; is specified as the format,
                  this method emits the attribute type keywords defined in
                  RFC 1779 (CN, L, ST, O, OU, C, STREET).
                  Any other attribute type is emitted as an OID.
                  &lt;p&gt; If &quot;RFC2253&quot; is specified as the format,
                  this method emits the attribute type keywords defined in
                  RFC 2253 (CN, L, ST, O, OU, C, STREET, DC, UID).
                  Any other attribute type is emitted as an OID.
                  Under a strict reading, RFC 2253 only specifies a UTF-8 string
                  representation. The String returned by this method is the
                  Unicode string achieved by decoding this UTF-8 representation.
                  &lt;p&gt; If &quot;CANONICAL&quot; is specified as the format,
                  this method returns an RFC 2253 conformant string representation
                  with the following additional canonicalizations:
                  &lt;p&gt;&lt;ol&gt;
                  &lt;li&gt; Leading zeros are removed from attribute types
                  that are encoded as dotted decimal OIDs
                  &lt;li&gt; DirectoryString attribute values of type
                  PrintableString and UTF8String are not
                  output in hexadecimal format
                  &lt;li&gt; DirectoryString attribute values of types
                  other than PrintableString and UTF8String
                  are output in hexadecimal format
                  &lt;li&gt; Leading and trailing white space characters
                  are removed from non-hexadecimal attribute values
                  (unless the value consists entirely of white space characters)
                  &lt;li&gt; Internal substrings of one or more white space characters are
                  converted to a single space in non-hexadecimal
                  attribute values
                  &lt;li&gt; Relative Distinguished Names containing more than one
                  Attribute Value Assertion (AVA) are output in the
                  following order: an alphabetical ordering of AVAs
                  containing standard keywords, followed by a numeric
                  ordering of AVAs containing OID keywords.
                  &lt;li&gt; The only characters in attribute values that are escaped are
                  those which section 2.4 of RFC 2253 states must be escaped
                  (they are escaped using a preceding backslash character)
                  &lt;li&gt; The entire name is converted to upper case
                  using &lt;code&gt;String.toUpperCase(Locale.US)&lt;/code&gt;
                  &lt;li&gt; The entire name is converted to lower case
                  using &lt;code&gt;String.toLowerCase(Locale.US)&lt;/code&gt;
                  &lt;li&gt; The name is finally normalized using normalization form KD,
                  as described in the Unicode Standard and UAX #15
                  &lt;/ol&gt;
                  &lt;p&gt; Additional standard formats may be introduced in the future.                
                <param>
                    format the format to use                    
                </param>
                <return>
                    a string representation of this &lt;code&gt;X500Principal&lt;/code&gt;
                      using the specified format                    
                </return>
                <throws>
                    IllegalArgumentException if the specified format is invalid
                      or null                    
                </throws>
            </javadoc>
            <method name="getName" type="String" line="269">
                <params>
                    <param name="format" type="String"/>
                </params>
                <scope line="270">
                    <scope line="271"/>
                    <scope line="274"/>
                    <scope line="277"/>
                </scope>
            </method>
            <javadoc line="283">
                Returns a string representation of the X.500 distinguished name
                  using the specified format. Valid values for the format are
                  &quot;RFC1779&quot; and &quot;RFC2253&quot; (case insensitive). &quot;CANONICAL&quot; is not
                  permitted and an &lt;code&gt;IllegalArgumentException&lt;/code&gt; will be thrown.
                  &lt;p&gt;This method returns Strings in the format as specified in{@link #getName(String)} and also emits additional attribute type
                  keywords for OIDs that have entries in the &lt;code&gt;oidMap&lt;/code&gt;
                  parameter. OID entries in the oidMap take precedence over the default
                  OIDs recognized by &lt;code&gt;getName(String)&lt;/code&gt;.
                  Improperly specified OIDs are ignored; however if an OID
                  in the name maps to an improperly specified keyword, an
                  &lt;code&gt;IllegalArgumentException&lt;/code&gt; is thrown.
                  &lt;p&gt; Additional standard formats may be introduced in the future.
                  &lt;p&gt; Warning: additional attribute type keywords may not be recognized
                  by other implementations; therefore do not use this method if
                  you are unsure if these keywords will be recognized by other
                  implementations.                
                <param>
                    format the format to use                    
                </param>
                <param>
                    oidMap an OID map, where each key is an object identifier in
                      String form (a sequence of nonnegative integers separated by periods)
                      that maps to a corresponding attribute type keyword String.
                      The map may be empty but never &lt;code&gt;null&lt;/code&gt;.                    
                </param>
                <return>
                    a string representation of this &lt;code&gt;X500Principal&lt;/code&gt;
                      using the specified format                    
                </return>
                <throws>
                    IllegalArgumentException if the specified format is invalid,
                      null, or an OID in the name maps to an improperly specified keyword                    
                </throws>
                <throws>
                    NullPointerException if &lt;code&gt;oidMap&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getName" type="String" line="312">
                <params>
                    <param name="format" type="String"/>
                    <param name="oidMap" type="Map&lt;String,String&gt;"/>
                </params>
                <scope line="313"/>
                <scope line="316">
                    <scope line="317"/>
                    <scope line="320"/>
                </scope>
            </method>
            <javadoc line="326">
                Returns the distinguished name in ASN.1 DER encoded form. The ASN.1
                  notation for this structure is supplied in the documentation for{@link #X500Principal(byte[] name) X500Principal(byte[] name)}.
                  &lt;p&gt;Note that the byte array returned is cloned to protect against
                  subsequent modifications.                
                <return>
                    a byte array containing the distinguished name in ASN.1 DER
                      encoded form                    
                </return>
            </javadoc>
            <method name="getEncoded" type="byte[]" line="334">
                <scope line="335"/>
                <scope line="338"/>
            </method>
            <javadoc line="342">
                Return a user-friendly string representation of this
                  &lt;code&gt;X500Principal&lt;/code&gt;.                
                <return>
                    a string representation of this &lt;code&gt;X500Principal&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="347"/>
            <javadoc line="350">
                Compares the specified &lt;code&gt;Object&lt;/code&gt; with this
                  &lt;code&gt;X500Principal&lt;/code&gt; for equality.
                  &lt;p&gt; Specifically, this method returns &lt;code&gt;true&lt;/code&gt; if
                  the &lt;code&gt;Object&lt;/code&gt; &lt;i&gt;o&lt;/i&gt; is an &lt;code&gt;X500Principal&lt;/code&gt;
                  and if the respective canonical string representations
                  (obtained via the &lt;code&gt;getName(X500Principal.CANONICAL)&lt;/code&gt; method)
                  of this object and &lt;i&gt;o&lt;/i&gt; are equal.
                  &lt;p&gt; This implementation is compliant with the requirements of RFC 3280.                
                <param>
                    o Object to be compared for equality with this
                      &lt;code&gt;X500Principal&lt;/code&gt;                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the specified &lt;code&gt;Object&lt;/code&gt; is equal
                      to this &lt;code&gt;X500Principal&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="364">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <scope line="365"/>
                <scope line="368"/>
                <declaration name="other" type="X500Principal" line="371"/>
            </method>
            <javadoc line="374">
                Return a hash code for this &lt;code&gt;X500Principal&lt;/code&gt;.
                  &lt;p&gt; The hash code is calculated via:
                  &lt;code&gt;getName(X500Principal.CANONICAL).hashCode()&lt;/code&gt;                
                <return>
                    a hash code for this &lt;code&gt;X500Principal&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="380"/>
            <javadoc line="383">
                Save the X500Principal object to a stream.                
                <serialData>
                    this &lt;code&gt;X500Principal&lt;/code&gt; is serialized
                      by writing out its DER-encoded form
                      (the value of &lt;code&gt;getEncoded&lt;/code&gt; is serialized).                    
                </serialData>
            </javadoc>
            <method name="writeObject" type="void" line="389">
                <params>
                    <param name="s" type="java.io.ObjectOutputStream"/>
                </params>
            </method>
            <javadoc line="392">
                Reads this object from a stream (i.e., deserializes it).                
            </javadoc>
            <method name="readObject" type="void" line="395">
                <params>
                    <param name="s" type="java.io.ObjectInputStream"/>
                </params>
            </method>
        </class>
    </source>