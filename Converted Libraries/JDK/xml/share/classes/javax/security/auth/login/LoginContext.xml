<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.security.auth.login">
        <import package="java.lang.reflect.Constructor"/>
        <import package="java.lang.reflect.Method"/>
        <import package="java.lang.reflect.InvocationTargetException"/>
        <import package="java.util.LinkedList"/>
        <import package="java.util.Map"/>
        <import package="java.util.HashMap"/>
        <import package="java.text.MessageFormat"/>
        <import package="javax.security.auth.Subject"/>
        <import package="javax.security.auth.AuthPermission"/>
        <import package="javax.security.auth.callback"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.AccessControlContext"/>
        <import package="sun.security.util.PendingException"/>
        <import package="sun.security.util.ResourcesMgr"/>
        <class name="LoginContext" line="16">
            <javadoc line="16">
                &lt;p&gt; The &lt;code&gt;LoginContext&lt;/code&gt; class describes the basic methods used
                  to authenticate Subjects and provides a way to develop an
                  application independent of the underlying authentication technology.
                  A &lt;code&gt;Configuration&lt;/code&gt; specifies the authentication technology, or
                  &lt;code&gt;LoginModule&lt;/code&gt;, to be used with a particular application.
                  Different LoginModules can be plugged in under an application
                  without requiring any modifications to the application itself.
                  &lt;p&gt; In addition to supporting &lt;i&gt;pluggable&lt;/i&gt; authentication, this class
                  also supports the notion of &lt;i&gt;stacked&lt;/i&gt; authentication.
                  Applications may be configured to use more than one
                  LoginModule.  For example, one could
                  configure both a Kerberos LoginModule and a smart card
                  LoginModule under an application.
                  &lt;p&gt; A typical caller instantiates a LoginContext with
                  a &lt;i&gt;name&lt;/i&gt; and a &lt;code&gt;CallbackHandler&lt;/code&gt;.
                  LoginContext uses the &lt;i&gt;name&lt;/i&gt; as the index into a
                  Configuration to determine which LoginModules should be used,
                  and which ones must succeed in order for the overall authentication to
                  succeed.  The &lt;code&gt;CallbackHandler&lt;/code&gt; is passed to the underlying
                  LoginModules so they may communicate and interact with users
                  (prompting for a username and password via a graphical user interface,
                  for example).
                  &lt;p&gt; Once the caller has instantiated a LoginContext,
                  it invokes the &lt;code&gt;login&lt;/code&gt; method to authenticate
                  a &lt;code&gt;Subject&lt;/code&gt;.  The &lt;code&gt;login&lt;/code&gt; method invokes
                  the configured modules to perform their respective types of authentication
                  (username/password, smart card pin verification, etc.).
                  Note that the LoginModules will not attempt authentication retries nor
                  introduce delays if the authentication fails.
                  Such tasks belong to the LoginContext caller.
                  &lt;p&gt; If the &lt;code&gt;login&lt;/code&gt; method returns without
                  throwing an exception, then the overall authentication succeeded.
                  The caller can then retrieve
                  the newly authenticated Subject by invoking the
                  &lt;code&gt;getSubject&lt;/code&gt; method.  Principals and Credentials associated
                  with the Subject may be retrieved by invoking the Subject&apos;s
                  respective &lt;code&gt;getPrincipals&lt;/code&gt;, &lt;code&gt;getPublicCredentials&lt;/code&gt;,
                  and &lt;code&gt;getPrivateCredentials&lt;/code&gt; methods.
                  &lt;p&gt; To logout the Subject, the caller calls
                  the &lt;code&gt;logout&lt;/code&gt; method.  As with the &lt;code&gt;login&lt;/code&gt;
                  method, this &lt;code&gt;logout&lt;/code&gt; method invokes the &lt;code&gt;logout&lt;/code&gt;
                  method for the configured modules.
                  &lt;p&gt; A LoginContext should not be used to authenticate
                  more than one Subject.  A separate LoginContext
                  should be used to authenticate each different Subject.
                  &lt;p&gt; The following documentation applies to all LoginContext constructors:
                  &lt;ol&gt;
                  &lt;li&gt; &lt;code&gt;Subject&lt;/code&gt;
                  &lt;ul&gt;
                  &lt;li&gt; If the constructor has a Subject
                  input parameter, the LoginContext uses the caller-specified
                  Subject object.
                  &lt;p&gt;
                  &lt;li&gt; If the caller specifies a &lt;code&gt;null&lt;/code&gt; Subject
                  and a &lt;code&gt;null&lt;/code&gt; value is permitted,
                  the LoginContext instantiates a new Subject.
                  &lt;p&gt;
                  &lt;li&gt; If the constructor does &lt;b&gt;not&lt;/b&gt; have a Subject
                  input parameter, the LoginContext instantiates a new Subject.
                  &lt;p&gt;
                  &lt;/ul&gt;
                  &lt;li&gt; &lt;code&gt;Configuration&lt;/code&gt;
                  &lt;ul&gt;
                  &lt;li&gt; If the constructor has a Configuration
                  input parameter and the caller specifies a non-null Configuration,
                  the LoginContext uses the caller-specified Configuration.
                  &lt;p&gt;
                  If the constructor does &lt;b&gt;not&lt;/b&gt; have a Configuration
                  input parameter, or if the caller specifies a &lt;code&gt;null&lt;/code&gt;
                  Configuration object, the constructor uses the following call to
                  get the installed Configuration:
                  &lt;pre&gt;
                  config = Configuration.getConfiguration();
                  &lt;/pre&gt;
                  For both cases,
                  the &lt;i&gt;name&lt;/i&gt; argument given to the constructor is passed to the
                  &lt;code&gt;Configuration.getAppConfigurationEntry&lt;/code&gt; method.
                  If the Configuration has no entries for the specified &lt;i&gt;name&lt;/i&gt;,
                  then the &lt;code&gt;LoginContext&lt;/code&gt; calls
                  &lt;code&gt;getAppConfigurationEntry&lt;/code&gt; with the name, &quot;&lt;i&gt;other&lt;/i&gt;&quot;
                  (the default entry name).  If there is no entry for &quot;&lt;i&gt;other&lt;/i&gt;&quot;,
                  then a &lt;code&gt;LoginException&lt;/code&gt; is thrown.
                  &lt;p&gt;
                  &lt;li&gt; When LoginContext uses the installed Configuration, the caller
                  requires the createLoginContext.&lt;em&gt;name&lt;/em&gt; and possibly
                  createLoginContext.other AuthPermissions. Furthermore, the
                  LoginContext will invoke configured modules from within an
                  &lt;code&gt;AccessController.doPrivileged&lt;/code&gt; call so that modules that
                  perform security-sensitive tasks (such as connecting to remote hosts,
                  and updating the Subject) will require the respective permissions, but
                  the callers of the LoginContext will not require those permissions.
                  &lt;p&gt;
                  &lt;li&gt; When LoginContext uses a caller-specified Configuration, the caller
                  does not require any createLoginContext AuthPermission.  The LoginContext
                  saves the &lt;code&gt;AccessControlContext&lt;/code&gt; for the caller,
                  and invokes the configured modules from within an
                  &lt;tt&gt;AccessController.doPrivileged&lt;/tt&gt; call constrained by that context.
                  This means the caller context (stored when the LoginContext was created)
                  must have sufficient permissions to perform any security-sensitive tasks
                  that the modules may perform.
                  &lt;p&gt;
                  &lt;/ul&gt;
                  &lt;li&gt; &lt;code&gt;CallbackHandler&lt;/code&gt;
                  &lt;ul&gt;
                  &lt;li&gt; If the constructor has a CallbackHandler
                  input parameter, the LoginContext uses the caller-specified
                  CallbackHandler object.
                  &lt;p&gt;
                  &lt;li&gt; If the constructor does &lt;b&gt;not&lt;/b&gt; have a CallbackHandler
                  input parameter, or if the caller specifies a &lt;code&gt;null&lt;/code&gt;
                  CallbackHandler object (and a &lt;code&gt;null&lt;/code&gt; value is permitted),
                  the LoginContext queries the
                  &lt;i&gt;auth.login.defaultCallbackHandler&lt;/i&gt; security property
                  for the fully qualified class name of a default handler implementation.
                  If the security property is not set,
                  then the underlying modules will not have a
                  CallbackHandler for use in communicating
                  with users.  The caller thus assumes that the configured
                  modules have alternative means for authenticating the user.
                  &lt;p&gt;
                  &lt;li&gt; When the LoginContext uses the installed Configuration (instead of
                  a caller-specified Configuration, see above),
                  then this LoginContext must wrap any
                  caller-specified or default CallbackHandler implementation
                  in a new CallbackHandler implementation
                  whose &lt;code&gt;handle&lt;/code&gt; method implementation invokes the
                  specified CallbackHandler&apos;s &lt;code&gt;handle&lt;/code&gt; method in a
                  &lt;code&gt;java.security.AccessController.doPrivileged&lt;/code&gt; call
                  constrained by the caller&apos;s current &lt;code&gt;AccessControlContext&lt;/code&gt;.
                  &lt;/ul&gt;
                  &lt;/ol&gt;
                  &lt;p&gt; Note that Security Properties
                  (such as &lt;code&gt;auth.login.defaultCallbackHandler&lt;/code&gt;)
                  can be set programmatically via the
                  &lt;code&gt;java.security.Security&lt;/code&gt; class,
                  or statically in the Java security properties file located in the
                  file named &amp;lt;JAVA_HOME&amp;gt;/lib/security/java.security.
                  &amp;lt;JAVA_HOME&amp;gt; refers to the value of the java.home system property,
                  and specifies the directory where the JRE is installed.                
                <see>
                    java.security.Security                    
                </see>
                <see>
                    javax.security.auth.AuthPermission                    
                </see>
                <see>
                    javax.security.auth.Subject                    
                </see>
                <see>
                    javax.security.auth.callback.CallbackHandler                    
                </see>
                <see>
                    javax.security.auth.login.Configuration                    
                </see>
                <see>
                    javax.security.auth.spi.LoginModule                    
                </see>
            </javadoc>
            <declaration name="INIT_METHOD" type="String" line="164"/>
            <declaration name="LOGIN_METHOD" type="String" line="165"/>
            <declaration name="COMMIT_METHOD" type="String" line="166"/>
            <declaration name="ABORT_METHOD" type="String" line="167"/>
            <declaration name="LOGOUT_METHOD" type="String" line="168"/>
            <declaration name="OTHER" type="String" line="169"/>
            <declaration name="DEFAULT_HANDLER" type="String" line="170"/>
            <declaration name="subject" type="Subject" line="171"/>
            <declaration name="subjectProvided" type="boolean" line="172"/>
            <declaration name="loginSucceeded" type="boolean" line="173"/>
            <declaration name="callbackHandler" type="CallbackHandler" line="174"/>
            <declaration name="state" type="Map" line="175"/>
            <declaration name="config" type="Configuration" line="176"/>
            <declaration name="configProvided" type="boolean" line="177"/>
            <declaration name="creatorAcc" type="AccessControlContext" line="178"/>
            <declaration name="moduleStack" type="ModuleInfo[]" line="179"/>
            <declaration name="contextClassLoader" type="ClassLoader" line="180"/>
            <declaration name="PARAMS" type="Class[]" line="181"/>
            <declaration name="moduleIndex" type="int" line="182"/>
            <declaration name="firstError" type="LoginException" line="183"/>
            <declaration name="firstRequiredError" type="LoginException" line="184"/>
            <declaration name="success" type="boolean" line="185"/>
            <declaration name="debug" type="sun.security.util.Debug" line="186"/>
            <method name="init" type="void" line="187">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="sm" type="SecurityManager" line="188"/>
                <scope line="189"/>
                <scope line="193">
                    <anonymous_class line="194">
                        <method name="run" type="Configuration" line="195"/>
                    </anonymous_class>
                </scope>
                <declaration name="entries" type="AppConfigurationEntry[]" line="201"/>
                <scope line="202">
                    <scope line="203"/>
                    <scope line="207">
                        <declaration name="form" type="MessageFormat" line="208"/>
                        <declaration name="source" type="Object[]" line="209"/>
                    </scope>
                </scope>
                <scope line="214"/>
                <anonymous_class line="217">
                    <method name="run" type="ClassLoader" line="218"/>
                </anonymous_class>
            </method>
            <method name="loadDefaultCallbackHandler" type="void" line="224">
                <scope line="225">
                    <declaration name="finalLoader" type="ClassLoader" line="226"/>
                    <anonymous_class line="227">
                        <method name="run" type="CallbackHandler" line="228">
                            <declaration name="defaultHandler" type="String" line="229"/>
                            <declaration name="c" type="Class" line="231"/>
                        </method>
                    </anonymous_class>
                </scope>
                <scope line="237"/>
                <scope line="240"/>
            </method>
            <javadoc line="244">
                Instantiate a new &lt;code&gt;LoginContext&lt;/code&gt; object with a name.                
                <param>
                    name the name used as the index into the
                      <code>Configuration</code>.                    
                </param>
                <exception>
                    LoginException if the caller-specified <code>name</code>
                      does not appear in the <code>Configuration</code>
                      and there is no <code>Configuration</code> entry
                      for "<i>other</i>", or if the
                      <i>auth.login.defaultCallbackHandler</i>
                      security property was set, but the implementation
                      class could not be loaded.
                      <p>                    
                </exception>
                <exception>
                    SecurityException if a SecurityManager is set and
                      the caller does not have
                      AuthPermission("createLoginContext.<i>name</i>"),
                      or if a configuration entry for <i>name</i> does not exist and
                      the caller does not additionally have
                      AuthPermission("createLoginContext.other")                    
                </exception>
            </javadoc>
            <method name="LoginContext" type="constructor" line="263">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="267">
                Instantiate a new &lt;code&gt;LoginContext&lt;/code&gt; object with a name
                  and a &lt;code&gt;Subject&lt;/code&gt; object.
                  &lt;p&gt;                
                <param>
                    name the name used as the index into the
                      <code>Configuration</code>. <p>                    
                </param>
                <param>
                    subject the <code>Subject</code> to authenticate.                    
                </param>
                <exception>
                    LoginException if the caller-specified <code>name</code>
                      does not appear in the <code>Configuration</code>
                      and there is no <code>Configuration</code> entry
                      for "<i>other</i>", if the caller-specified <code>subject</code>
                      is <code>null</code>, or if the
                      <i>auth.login.defaultCallbackHandler</i>
                      security property was set, but the implementation
                      class could not be loaded.
                      <p>                    
                </exception>
                <exception>
                    SecurityException if a SecurityManager is set and
                      the caller does not have
                      AuthPermission("createLoginContext.<i>name</i>"),
                      or if a configuration entry for <i>name</i> does not exist and
                      the caller does not additionally have
                      AuthPermission("createLoginContext.other")                    
                </exception>
            </javadoc>
            <method name="LoginContext" type="constructor" line="290">
                <params>
                    <param name="name" type="String"/>
                    <param name="subject" type="Subject"/>
                </params>
            </method>
            <javadoc line="297">
                Instantiate a new &lt;code&gt;LoginContext&lt;/code&gt; object with a name
                  and a &lt;code&gt;CallbackHandler&lt;/code&gt; object.
                  &lt;p&gt;                
                <param>
                    name the name used as the index into the
                      <code>Configuration</code>. <p>                    
                </param>
                <param>
                    callbackHandler the <code>CallbackHandler</code> object used by
                      LoginModules to communicate with the user.                    
                </param>
                <exception>
                    LoginException if the caller-specified <code>name</code>
                      does not appear in the <code>Configuration</code>
                      and there is no <code>Configuration</code> entry
                      for "<i>other</i>", or if the caller-specified
                      <code>callbackHandler</code> is <code>null</code>.
                      <p>                    
                </exception>
                <exception>
                    SecurityException if a SecurityManager is set and
                      the caller does not have
                      AuthPermission("createLoginContext.<i>name</i>"),
                      or if a configuration entry for <i>name</i> does not exist and
                      the caller does not additionally have
                      AuthPermission("createLoginContext.other")                    
                </exception>
            </javadoc>
            <method name="LoginContext" type="constructor" line="318">
                <params>
                    <param name="name" type="String"/>
                    <param name="callbackHandler" type="CallbackHandler"/>
                </params>
            </method>
            <javadoc line="323">
                Instantiate a new &lt;code&gt;LoginContext&lt;/code&gt; object with a name,
                  a &lt;code&gt;Subject&lt;/code&gt; to be authenticated, and a
                  &lt;code&gt;CallbackHandler&lt;/code&gt; object.
                  &lt;p&gt;                
                <param>
                    name the name used as the index into the
                      <code>Configuration</code>. <p>                    
                </param>
                <param>
                    subject the <code>Subject</code> to authenticate. <p>                    
                </param>
                <param>
                    callbackHandler the <code>CallbackHandler</code> object used by
                      LoginModules to communicate with the user.                    
                </param>
                <exception>
                    LoginException if the caller-specified <code>name</code>
                      does not appear in the <code>Configuration</code>
                      and there is no <code>Configuration</code> entry
                      for "<i>other</i>", or if the caller-specified
                      <code>subject</code> is <code>null</code>,
                      or if the caller-specified
                      <code>callbackHandler</code> is <code>null</code>.
                      <p>                    
                </exception>
                <exception>
                    SecurityException if a SecurityManager is set and
                      the caller does not have
                      AuthPermission("createLoginContext.<i>name</i>"),
                      or if a configuration entry for <i>name</i> does not exist and
                      the caller does not additionally have
                      AuthPermission("createLoginContext.other")                    
                </exception>
            </javadoc>
            <method name="LoginContext" type="constructor" line="348">
                <params>
                    <param name="name" type="String"/>
                    <param name="subject" type="Subject"/>
                    <param name="callbackHandler" type="CallbackHandler"/>
                </params>
            </method>
            <javadoc line="353">
                Instantiate a new &lt;code&gt;LoginContext&lt;/code&gt; object with a name,
                  a &lt;code&gt;Subject&lt;/code&gt; to be authenticated,
                  a &lt;code&gt;CallbackHandler&lt;/code&gt; object, and a login
                  &lt;code&gt;Configuration&lt;/code&gt;.
                  &lt;p&gt;                
                <param>
                    name the name used as the index into the caller-specified
                      <code>Configuration</code>. <p>                    
                </param>
                <param>
                    subject the <code>Subject</code> to authenticate,
                      or <code>null</code>. <p>                    
                </param>
                <param>
                    callbackHandler the <code>CallbackHandler</code> object used by
                      LoginModules to communicate with the user, or <code>null</code>.
                      <p>                    
                </param>
                <param>
                    config the <code>Configuration</code> that lists the
                      login modules to be called to perform the authentication,
                      or <code>null</code>.                    
                </param>
                <exception>
                    LoginException if the caller-specified <code>name</code>
                      does not appear in the <code>Configuration</code>
                      and there is no <code>Configuration</code> entry
                      for "<i>other</i>".
                      <p>                    
                </exception>
                <exception>
                    SecurityException if a SecurityManager is set,
                      <i>config</i> is <code>null</code>,
                      and either the caller does not have
                      AuthPermission("createLoginContext.<i>name</i>"),
                      or if a configuration entry for <i>name</i> does not exist and
                      the caller does not additionally have
                      AuthPermission("createLoginContext.other")                    
                </exception>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="LoginContext" type="constructor" line="383">
                <params>
                    <param name="name" type="String"/>
                    <param name="subject" type="Subject"/>
                    <param name="callbackHandler" type="CallbackHandler"/>
                    <param name="config" type="Configuration"/>
                </params>
                <scope line="386"/>
                <scope line="390"/>
                <scope line="394"/>
                <scope line="397"/>
                <scope line="400"/>
            </method>
            <javadoc line="404">
                Perform the authentication.
                  &lt;p&gt; This method invokes the &lt;code&gt;login&lt;/code&gt; method for each
                  LoginModule configured for the &lt;i&gt;name&lt;/i&gt; specified to the
                  &lt;code&gt;LoginContext&lt;/code&gt; constructor, as determined by the login
                  &lt;code&gt;Configuration&lt;/code&gt;.  Each &lt;code&gt;LoginModule&lt;/code&gt;
                  then performs its respective type of authentication
                  (username/password, smart card pin verification, etc.).
                  &lt;p&gt; This method completes a 2-phase authentication process by
                  calling each configured LoginModule&apos;s &lt;code&gt;commit&lt;/code&gt; method
                  if the overall authentication succeeded (the relevant REQUIRED,
                  REQUISITE, SUFFICIENT, and OPTIONAL LoginModules succeeded),
                  or by calling each configured LoginModule&apos;s &lt;code&gt;abort&lt;/code&gt; method
                  if the overall authentication failed.  If authentication succeeded,
                  each successful LoginModule&apos;s &lt;code&gt;commit&lt;/code&gt; method associates
                  the relevant Principals and Credentials with the &lt;code&gt;Subject&lt;/code&gt;.
                  If authentication failed, each LoginModule&apos;s &lt;code&gt;abort&lt;/code&gt; method
                  removes/destroys any previously stored state.
                  &lt;p&gt; If the &lt;code&gt;commit&lt;/code&gt; phase of the authentication process
                  fails, then the overall authentication fails and this method
                  invokes the &lt;code&gt;abort&lt;/code&gt; method for each configured
                  &lt;code&gt;LoginModule&lt;/code&gt;.
                  &lt;p&gt; If the &lt;code&gt;abort&lt;/code&gt; phase
                  fails for any reason, then this method propagates the
                  original exception thrown either during the &lt;code&gt;login&lt;/code&gt; phase
                  or the &lt;code&gt;commit&lt;/code&gt; phase.  In either case, the overall
                  authentication fails.
                  &lt;p&gt; In the case where multiple LoginModules fail,
                  this method propagates the exception raised by the first
                  &lt;code&gt;LoginModule&lt;/code&gt; which failed.
                  &lt;p&gt; Note that if this method enters the &lt;code&gt;abort&lt;/code&gt; phase
                  (either the &lt;code&gt;login&lt;/code&gt; or &lt;code&gt;commit&lt;/code&gt; phase failed),
                  this method invokes all LoginModules configured for the
                  application regardless of their respective &lt;code&gt;Configuration&lt;/code&gt;
                  flag parameters.  Essentially this means that &lt;code&gt;Requisite&lt;/code&gt;
                  and &lt;code&gt;Sufficient&lt;/code&gt; semantics are ignored during the
                  &lt;code&gt;abort&lt;/code&gt; phase.  This guarantees that proper cleanup
                  and state restoration can take place.
                  &lt;p&gt;                
                <exception>
                    LoginException if the authentication fails.                    
                </exception>
            </javadoc>
            <method name="login" type="void" line="445">
                <scope line="447"/>
                <scope line="450">
                    <scope line="451"/>
                    <scope line="455"/>
                </scope>
                <scope line="461">
                    <scope line="462">
                        <scope line="463"/>
                        <scope line="466"/>
                    </scope>
                    <scope line="470"/>
                </scope>
            </method>
            <javadoc line="476">
                Logout the &lt;code&gt;Subject&lt;/code&gt;.
                  &lt;p&gt; This method invokes the &lt;code&gt;logout&lt;/code&gt; method for each
                  &lt;code&gt;LoginModule&lt;/code&gt; configured for this &lt;code&gt;LoginContext&lt;/code&gt;.
                  Each &lt;code&gt;LoginModule&lt;/code&gt; performs its respective logout procedure
                  which may include removing/destroying
                  &lt;code&gt;Principal&lt;/code&gt; and &lt;code&gt;Credential&lt;/code&gt; information
                  from the &lt;code&gt;Subject&lt;/code&gt; and state cleanup.
                  &lt;p&gt; Note that this method invokes all LoginModules configured for the
                  application regardless of their respective
                  &lt;code&gt;Configuration&lt;/code&gt; flag parameters.  Essentially this means
                  that &lt;code&gt;Requisite&lt;/code&gt; and &lt;code&gt;Sufficient&lt;/code&gt; semantics are
                  ignored for this method.  This guarantees that proper cleanup
                  and state restoration can take place.
                  &lt;p&gt;                
                <exception>
                    LoginException if the logout fails.                    
                </exception>
            </javadoc>
            <method name="logout" type="void" line="493">
                <scope line="494"/>
                <scope line="497"/>
                <scope line="500"/>
            </method>
            <javadoc line="504">
                Return the authenticated Subject.
                  &lt;p&gt;                
                <return>
                    the authenticated Subject.  If the caller specified a
                      Subject to this LoginContext's constructor,
                      this method returns the caller-specified Subject.
                      If a Subject was not specified and authentication succeeds,
                      this method returns the Subject instantiated and used for
                      authentication by this LoginContext.
                      If a Subject was not specified, and authentication fails or
                      has not been attempted, this method returns null.                    
                </return>
            </javadoc>
            <method name="getSubject" type="Subject" line="516"/>
            <method name="clearState" type="void" line="520"/>
            <method name="throwException" type="void" line="526">
                <params>
                    <param name="originalError" type="LoginException"/>
                    <param name="le" type="LoginException"/>
                </params>
                <declaration name="error" type="LoginException" line="528"/>
            </method>
            <javadoc line="531">
                Invokes the login, commit, and logout methods
                  from a LoginModule inside a doPrivileged block.
                  This version is called if the caller did not instantiate
                  the LoginContext with a Configuration object.                
            </javadoc>
            <method name="invokePriv" type="void" line="537">
                <params>
                    <param name="methodName" type="String"/>
                </params>
                <scope line="538">
                    <anonymous_class line="539">
                        <method name="run" type="Void" line="540"/>
                    </anonymous_class>
                </scope>
                <scope line="547"/>
            </method>
            <javadoc line="551">
                Invokes the login, commit, and logout methods
                  from a LoginModule inside a doPrivileged block restricted
                  by creatorAcc
                  This version is called if the caller instantiated
                  the LoginContext with a Configuration object.                
            </javadoc>
            <method name="invokeCreatorPriv" type="void" line="558">
                <params>
                    <param name="methodName" type="String"/>
                </params>
                <scope line="559">
                    <anonymous_class line="560">
                        <method name="run" type="Void" line="561"/>
                    </anonymous_class>
                </scope>
                <scope line="568"/>
            </method>
            <method name="invoke" type="void" line="572">
                <params>
                    <param name="methodName" type="String"/>
                </params>
                <scope line="573">
                    <scope line="574">
                        <declaration name="mIndex" type="int" line="575"/>
                        <declaration name="methods" type="Method[]" line="576"/>
                        <scope line="577"/>
                        <scope line="580">
                            <declaration name="c" type="Class" line="581"/>
                            <declaration name="constructor" type="Constructor" line="582"/>
                            <declaration name="args" type="Object[]" line="583"/>
                            <scope line="586"/>
                            <declaration name="initArgs" type="Object[]" line="589"/>
                        </scope>
                        <scope line="592"/>
                        <declaration name="args" type="Object[]" line="595"/>
                        <declaration name="status" type="boolean" line="596"/>
                        <scope line="597">
                            <scope line="598"/>
                        </scope>
                        <scope line="606"/>
                    </scope>
                    <scope line="610">
                        <declaration name="form" type="MessageFormat" line="611"/>
                        <declaration name="source" type="Object[]" line="612"/>
                    </scope>
                    <scope line="615"/>
                    <scope line="618"/>
                    <scope line="621"/>
                    <scope line="624">
                        <declaration name="le" type="LoginException" line="625"/>
                        <scope line="626"/>
                        <scope line="629"/>
                        <scope line="632">
                            <scope line="635"/>
                        </scope>
                        <scope line="640">
                            <declaration name="sw" type="java.io.StringWriter" line="641"/>
                        </scope>
                        <scope line="646">
                            <scope line="648"/>
                            <scope line="651"/>
                        </scope>
                        <scope line="655"/>
                        <scope line="659"/>
                    </scope>
                </scope>
                <scope line="665"/>
                <scope line="668"/>
                <scope line="671"/>
                <scope line="674"/>
            </method>
            <class name="SecureCallbackHandler" line="679">
                <implements interface="CallbackHandler"/>
                <javadoc line="679">
                    Wrap the caller-specified CallbackHandler in our own
                      and invoke it within a privileged block, constrained by
                      the caller&apos;s AccessControlContext.                    
                </javadoc>
                <declaration name="acc" type="java.security.AccessControlContext" line="685"/>
                <declaration name="ch" type="CallbackHandler" line="686"/>
                <method name="SecureCallbackHandler" type="constructor" line="687">
                    <params>
                        <param name="acc" type="java.security.AccessControlContext"/>
                        <param name="ch" type="CallbackHandler"/>
                    </params>
                </method>
                <method name="handle" type="void" line="691">
                    <params>
                        <param name="callbacks" type="Callback[]"/>
                    </params>
                    <scope line="692">
                        <anonymous_class line="693">
                            <method name="run" type="Void" line="694"/>
                        </anonymous_class>
                    </scope>
                    <scope line="701">
                        <scope line="702"/>
                        <scope line="705"/>
                    </scope>
                </method>
            </class>
            <class name="ModuleInfo" line="711">
                <javadoc line="711">
                    LoginModule information -
                      incapsulates Configuration info and actual module instances                    
                </javadoc>
                <declaration name="entry" type="AppConfigurationEntry" line="716"/>
                <declaration name="module" type="Object" line="717"/>
                <method name="ModuleInfo" type="constructor" line="718">
                    <params>
                        <param name="newEntry" type="AppConfigurationEntry"/>
                        <param name="newModule" type="Object"/>
                    </params>
                </method>
            </class>
        </class>
    </source>