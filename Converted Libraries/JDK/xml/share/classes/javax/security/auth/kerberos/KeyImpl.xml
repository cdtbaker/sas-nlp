<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.security.auth.kerberos">
        <import package="java.io"/>
        <import package="java.util.Arrays"/>
        <import package="javax.crypto.SecretKey"/>
        <import package="javax.security.auth.Destroyable"/>
        <import package="javax.security.auth.DestroyFailedException"/>
        <import package="sun.misc.HexDumpEncoder"/>
        <import package="sun.security.krb5.Asn1Exception"/>
        <import package="sun.security.krb5.PrincipalName"/>
        <import package="sun.security.krb5.EncryptionKey"/>
        <import package="sun.security.krb5.EncryptedData"/>
        <import package="sun.security.krb5.KrbException"/>
        <import package="sun.security.krb5.KrbCryptoException"/>
        <import package="sun.security.util.DerValue"/>
        <class name="KeyImpl" line="42">
            <comment line="108">
                Methods from java.security.Key                
            </comment>
            <implements interface="SecretKey"/>
            <implements interface="Destroyable"/>
            <implements interface="Serializable"/>
            <javadoc line="42">
                This class encapsulates a Kerberos encryption key. It is not associated
                  with a principal and may represent an ephemeral session key.                
                <author>
                    Mayank Upadhyay                    
                </author>
                <since>
                    1.4                    
                </since>
                <serial>
                    include                    
                </serial>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="53"/>
            <declaration name="keyBytes" type="byte[]" line="55"/>
            <declaration name="keyType" type="int" line="56"/>
            <declaration name="destroyed" type="boolean" line="57"/>
            <javadoc line="60">
                Constructs a KeyImpl from the given bytes.                
                <param>
                    keyBytes the raw bytes for the secret key                    
                </param>
                <param>
                    keyType the key type for the secret key as defined by the
                      Kerberos protocol specification.                    
                </param>
            </javadoc>
            <method name="KeyImpl" type="constructor" line="68">
                <params>
                    <param name="keyBytes" type="byte[]"/>
                    <param name="keyType" type="int"/>
                </params>
            </method>
            <javadoc line="73">
                Constructs a KeyImpl from a password.                
                <param>
                    principal the principal from which to derive the salt                    
                </param>
                <param>
                    password the password that should be used to compute the
                      key.                    
                </param>
                <param>
                    algorithm the name for the algorithm that this key wil be
                      used for. This parameter may be null in which case &quot;DES&quot; will be
                      assumed.                    
                </param>
            </javadoc>
            <method name="KeyImpl" type="constructor" line="85">
                <params>
                    <param name="principal" type="KerberosPrincipal"/>
                    <param name="password" type="char[]"/>
                    <param name="algorithm" type="String"/>
                </params>
                <scope line="87">
                    <declaration name="princ" type="PrincipalName" line="88"/>
                    <declaration name="key" type="EncryptionKey" line="89"/>
                </scope>
                <scope line="93"/>
            </method>
            <javadoc line="98">
                Returns the keyType for this key as defined in the Kerberos Spec.                
            </javadoc>
            <method name="getKeyType" type="int" line="101"/>
            <method name="getAlgorithm" type="String" line="111"/>
            <method name="getAlgorithmName" type="String" line="115">
                <params>
                    <param name="eType" type="int"/>
                </params>
            </method>
            <method name="getFormat" type="String" line="145"/>
            <method name="getEncoded" type="byte[]" line="151"/>
            <method name="destroy" type="void" line="157">
                <scope line="158"/>
            </method>
            <method name="isDestroyed" type="boolean" line="164"/>
            <javadoc line="168">
                @serialData this &lt;code&gt;KeyImpl&lt;/code&gt; is serialized by
                  writing out the ASN1 Encoded bytes of the encryption key.
                  The ASN1 encoding is defined in RFC4120 and as  follows:
                  EncryptionKey   ::= SEQUENCE {
                  keytype    [0] Int32 -- actually encryption type --,
                  keyvalue   [1] OCTET STRING
                  }                
            </javadoc>
            <method name="writeObject" type="void" line="178">
                <params>
                    <param name="ois" type="ObjectOutputStream"/>
                </params>
                <scope line="179"/>
                <scope line="183"/>
                <scope line="185"/>
            </method>
            <method name="readObject" type="void" line="191">
                <params>
                    <param name="ois" type="ObjectInputStream"/>
                </params>
                <scope line="192">
                    <declaration name="encKey" type="EncryptionKey" line="193"/>
                </scope>
                <scope line="197"/>
            </method>
            <method name="toString" type="String" line="202">
                <declaration name="hd" type="HexDumpEncoder" line="203"/>
            </method>
            <method name="hashCode" type="int" line="214">
                <declaration name="result" type="int" line="215"/>
                <scope line="216"/>
            </method>
            <method name="equals" type="boolean" line="223">
                <params>
                    <param name="other" type="Object"/>
                </params>
                <scope line="228"/>
                <declaration name="otherKey" type="KeyImpl" line="232"/>
                <scope line="233"/>
                <scope line="238"/>
            </method>
        </class>
    </source>