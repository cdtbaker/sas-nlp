<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.security.auth.spi">
        <import package="javax.security.auth.Subject"/>
        <import package="javax.security.auth.AuthPermission"/>
        <import package="javax.security.auth.callback"/>
        <import package="javax.security.auth.login"/>
        <import package="java.util.Map"/>
        <interface name="LoginModule">
            <javadoc line="7">
                &lt;p&gt; &lt;code&gt;LoginModule&lt;/code&gt; describes the interface
                  implemented by authentication technology providers.  LoginModules
                  are plugged in under applications to provide a particular type of
                  authentication.
                  &lt;p&gt; While applications write to the &lt;code&gt;LoginContext&lt;/code&gt; API,
                  authentication technology providers implement the
                  &lt;code&gt;LoginModule&lt;/code&gt; interface.
                  A &lt;code&gt;Configuration&lt;/code&gt; specifies the LoginModule(s)
                  to be used with a particular login application.  Therefore different
                  LoginModules can be plugged in under the application without
                  requiring any modifications to the application itself.
                  &lt;p&gt; The &lt;code&gt;LoginContext&lt;/code&gt; is responsible for reading the
                  &lt;code&gt;Configuration&lt;/code&gt; and instantiating the appropriate
                  LoginModules.  Each &lt;code&gt;LoginModule&lt;/code&gt; is initialized with
                  a &lt;code&gt;Subject&lt;/code&gt;, a &lt;code&gt;CallbackHandler&lt;/code&gt;, shared
                  &lt;code&gt;LoginModule&lt;/code&gt; state, and LoginModule-specific options.
                  The &lt;code&gt;Subject&lt;/code&gt; represents the
                  &lt;code&gt;Subject&lt;/code&gt; currently being authenticated and is updated
                  with relevant Credentials if authentication succeeds.
                  LoginModules use the &lt;code&gt;CallbackHandler&lt;/code&gt; to
                  communicate with users.  The &lt;code&gt;CallbackHandler&lt;/code&gt; may be
                  used to prompt for usernames and passwords, for example.
                  Note that the &lt;code&gt;CallbackHandler&lt;/code&gt; may be null.  LoginModules
                  which absolutely require a &lt;code&gt;CallbackHandler&lt;/code&gt; to authenticate
                  the &lt;code&gt;Subject&lt;/code&gt; may throw a &lt;code&gt;LoginException&lt;/code&gt;.
                  LoginModules optionally use the shared state to share information
                  or data among themselves.
                  &lt;p&gt; The LoginModule-specific options represent the options
                  configured for this &lt;code&gt;LoginModule&lt;/code&gt; by an administrator or user
                  in the login &lt;code&gt;Configuration&lt;/code&gt;.
                  The options are defined by the &lt;code&gt;LoginModule&lt;/code&gt; itself
                  and control the behavior within it.  For example, a
                  &lt;code&gt;LoginModule&lt;/code&gt; may define options to support debugging/testing
                  capabilities.  Options are defined using a key-value syntax,
                  such as &lt;i&gt;debug=true&lt;/i&gt;.  The &lt;code&gt;LoginModule&lt;/code&gt;
                  stores the options as a &lt;code&gt;Map&lt;/code&gt; so that the values may
                  be retrieved using the key.  Note that there is no limit to the number
                  of options a &lt;code&gt;LoginModule&lt;/code&gt; chooses to define.
                  &lt;p&gt; The calling application sees the authentication process as a single
                  operation.  However, the authentication process within the
                  &lt;code&gt;LoginModule&lt;/code&gt; proceeds in two distinct phases.
                  In the first phase, the LoginModule&apos;s
                  &lt;code&gt;login&lt;/code&gt; method gets invoked by the LoginContext&apos;s
                  &lt;code&gt;login&lt;/code&gt; method.  The &lt;code&gt;login&lt;/code&gt;
                  method for the &lt;code&gt;LoginModule&lt;/code&gt; then performs
                  the actual authentication (prompt for and verify a password for example)
                  and saves its authentication status as private state
                  information.  Once finished, the LoginModule&apos;s &lt;code&gt;login&lt;/code&gt;
                  method either returns &lt;code&gt;true&lt;/code&gt; (if it succeeded) or
                  &lt;code&gt;false&lt;/code&gt; (if it should be ignored), or throws a
                  &lt;code&gt;LoginException&lt;/code&gt; to specify a failure.
                  In the failure case, the &lt;code&gt;LoginModule&lt;/code&gt; must not retry the
                  authentication or introduce delays.  The responsibility of such tasks
                  belongs to the application.  If the application attempts to retry
                  the authentication, the LoginModule&apos;s &lt;code&gt;login&lt;/code&gt; method will be
                  called again.
                  &lt;p&gt; In the second phase, if the LoginContext&apos;s overall authentication
                  succeeded (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL
                  LoginModules succeeded), then the &lt;code&gt;commit&lt;/code&gt;
                  method for the &lt;code&gt;LoginModule&lt;/code&gt; gets invoked.
                  The &lt;code&gt;commit&lt;/code&gt; method for a &lt;code&gt;LoginModule&lt;/code&gt; checks its
                  privately saved state to see if its own authentication succeeded.
                  If the overall &lt;code&gt;LoginContext&lt;/code&gt; authentication succeeded
                  and the LoginModule&apos;s own authentication succeeded, then the
                  &lt;code&gt;commit&lt;/code&gt; method associates the relevant
                  Principals (authenticated identities) and Credentials (authentication data
                  such as cryptographic keys) with the &lt;code&gt;Subject&lt;/code&gt;
                  located within the &lt;code&gt;LoginModule&lt;/code&gt;.
                  &lt;p&gt; If the LoginContext&apos;s overall authentication failed (the relevant
                  REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL LoginModules did not succeed),
                  then the &lt;code&gt;abort&lt;/code&gt; method for each &lt;code&gt;LoginModule&lt;/code&gt;
                  gets invoked.  In this case, the &lt;code&gt;LoginModule&lt;/code&gt; removes/destroys
                  any authentication state originally saved.
                  &lt;p&gt; Logging out a &lt;code&gt;Subject&lt;/code&gt; involves only one phase.
                  The &lt;code&gt;LoginContext&lt;/code&gt; invokes the LoginModule&apos;s &lt;code&gt;logout&lt;/code&gt;
                  method.  The &lt;code&gt;logout&lt;/code&gt; method for the &lt;code&gt;LoginModule&lt;/code&gt;
                  then performs the logout procedures, such as removing Principals or
                  Credentials from the &lt;code&gt;Subject&lt;/code&gt; or logging session information.
                  &lt;p&gt; A &lt;code&gt;LoginModule&lt;/code&gt; implementation must have a constructor with
                  no arguments.  This allows classes which load the &lt;code&gt;LoginModule&lt;/code&gt;
                  to instantiate it.                
                <see>
                    javax.security.auth.login.LoginContext                    
                </see>
                <see>
                    javax.security.auth.login.Configuration                    
                </see>
            </javadoc>
            <method name="initialize" type="void" line="93"/>
            <javadoc line="93">
                Initialize this LoginModule.
                  &lt;p&gt; This method is called by the &lt;code&gt;LoginContext&lt;/code&gt;
                  after this &lt;code&gt;LoginModule&lt;/code&gt; has been instantiated.
                  The purpose of this method is to initialize this
                  &lt;code&gt;LoginModule&lt;/code&gt; with the relevant information.
                  If this &lt;code&gt;LoginModule&lt;/code&gt; does not understand
                  any of the data stored in &lt;code&gt;sharedState&lt;/code&gt; or
                  &lt;code&gt;options&lt;/code&gt; parameters, they can be ignored.
                  &lt;p&gt;                
                <param>
                    subject the <code>Subject</code> to be authenticated. <p>                    
                </param>
                <param>
                    callbackHandler a <code>CallbackHandler</code> for communicating
                      with the end user (prompting for usernames and
                      passwords, for example). <p>                    
                </param>
                <param>
                    sharedState state shared with other configured LoginModules. <p>                    
                </param>
                <param>
                    options options specified in the login
                      <code>Configuration</code> for this particular
                      <code>LoginModule</code>.                    
                </param>
            </javadoc>
            <method name="login" type="boolean" line="113"/>
            <javadoc line="113">
                Method to authenticate a &lt;code&gt;Subject&lt;/code&gt; (phase 1).
                  &lt;p&gt; The implementation of this method authenticates
                  a &lt;code&gt;Subject&lt;/code&gt;.  For example, it may prompt for
                  &lt;code&gt;Subject&lt;/code&gt; information such
                  as a username and password and then attempt to verify the password.
                  This method saves the result of the authentication attempt
                  as private state within the LoginModule.
                  &lt;p&gt;                
                <exception>
                    LoginException if the authentication fails                    
                </exception>
                <return>
                    true if the authentication succeeded, or false if this
                      <code>LoginModule</code> should be ignored.                    
                </return>
            </javadoc>
            <method name="commit" type="boolean" line="127"/>
            <javadoc line="127">
                Method to commit the authentication process (phase 2).
                  &lt;p&gt; This method is called if the LoginContext&apos;s
                  overall authentication succeeded
                  (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL LoginModules
                  succeeded).
                  &lt;p&gt; If this LoginModule&apos;s own authentication attempt
                  succeeded (checked by retrieving the private state saved by the
                  &lt;code&gt;login&lt;/code&gt; method), then this method associates relevant
                  Principals and Credentials with the &lt;code&gt;Subject&lt;/code&gt; located in the
                  &lt;code&gt;LoginModule&lt;/code&gt;.  If this LoginModule&apos;s own
                  authentication attempted failed, then this method removes/destroys
                  any state that was originally saved.
                  &lt;p&gt;                
                <exception>
                    LoginException if the commit fails                    
                </exception>
                <return>
                    true if this method succeeded, or false if this
                      <code>LoginModule</code> should be ignored.                    
                </return>
            </javadoc>
            <method name="abort" type="boolean" line="146"/>
            <javadoc line="146">
                Method to abort the authentication process (phase 2).
                  &lt;p&gt; This method is called if the LoginContext&apos;s
                  overall authentication failed.
                  (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL LoginModules
                  did not succeed).
                  &lt;p&gt; If this LoginModule&apos;s own authentication attempt
                  succeeded (checked by retrieving the private state saved by the
                  &lt;code&gt;login&lt;/code&gt; method), then this method cleans up any state
                  that was originally saved.
                  &lt;p&gt;                
                <exception>
                    LoginException if the abort fails                    
                </exception>
                <return>
                    true if this method succeeded, or false if this
                      <code>LoginModule</code> should be ignored.                    
                </return>
            </javadoc>
            <method name="logout" type="boolean" line="162"/>
            <javadoc line="162">
                Method which logs out a &lt;code&gt;Subject&lt;/code&gt;.
                  &lt;p&gt;An implementation of this method might remove/destroy a Subject&apos;s
                  Principals and Credentials.
                  &lt;p&gt;                
                <exception>
                    LoginException if the logout fails                    
                </exception>
                <return>
                    true if this method succeeded, or false if this
                      <code>LoginModule</code> should be ignored.                    
                </return>
            </javadoc>
        </interface>
    </source>