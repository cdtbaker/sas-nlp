<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.security.auth.kerberos">
        <import package="java.util.Arrays"/>
        <import package="javax.crypto.SecretKey"/>
        <import package="javax.security.auth.Destroyable"/>
        <import package="javax.security.auth.DestroyFailedException"/>
        <class name="KerberosKey" line="6">
            <implements interface="SecretKey"/>
            <implements interface="Destroyable"/>
            <javadoc line="6">
                This class encapsulates a long term secret key for a Kerberos
                  principal.&lt;p&gt;
                  All Kerberos JAAS login modules that obtain a principal&apos;s password and
                  generate the secret key from it should use this class.
                  Sometimes, such as when authenticating a server in
                  the absence of user-to-user authentication, the login module will store
                  an instance of this class in the private credential set of a{@link javax.security.auth.Subject Subject} during the commit phase of the
                  authentication process.&lt;p&gt;
                  A Kerberos service using a keytab to read secret keys should use
                  the {@link KeyTab} class, where latest keys can be read when needed.&lt;p&gt;
                  It might be necessary for the application to be granted a{@link javax.security.auth.PrivateCredentialPermissionPrivateCredentialPermission} if it needs to access the KerberosKey
                  instance from a Subject. This permission is not needed when the
                  application depends on the default JGSS Kerberos mechanism to access the
                  KerberosKey. In that case, however, the application will need an
                  appropriate{@link javax.security.auth.kerberos.ServicePermission ServicePermission}.                
                <author>
                    Mayank Upadhyay                    
                </author>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="26"/>
            <declaration name="principal" type="KerberosPrincipal" line="27"/>
            <javadoc line="27">
                The principal that this secret key belongs to.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="versionNum" type="int" line="32"/>
            <javadoc line="32">
                the version number of this secret key                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="key" type="KeyImpl" line="37"/>
            <javadoc line="37">
                &lt;code&gt;KeyImpl&lt;/code&gt; is serialized by writing out the ASN1 Encoded bytes
                  of the encryption key.
                  The ASN1 encoding is defined in RFC4120 and as  follows:
                  &lt;pre&gt;
                  EncryptionKey   ::= SEQUENCE {
                  keytype   [0] Int32 -- actually encryption type --,
                  keyvalue  [1] OCTET STRING
                  }
                  &lt;/pre&gt;                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="destroyed" type="boolean" line="50"/>
            <javadoc line="51">
                Constructs a KerberosKey from the given bytes when the key type and
                  key version number are known. This can be used when reading the secret
                  key information from a Kerberos &quot;keytab&quot;.                
                <param>
                    principal the principal that this secret key belongs to                    
                </param>
                <param>
                    keyBytes the raw bytes for the secret key                    
                </param>
                <param>
                    keyType the key type for the secret key as defined by the
                      Kerberos protocol specification.                    
                </param>
                <param>
                    versionNum the version number of this secret key                    
                </param>
            </javadoc>
            <method name="KerberosKey" type="constructor" line="61">
                <params>
                    <param name="principal" type="KerberosPrincipal"/>
                    <param name="keyBytes" type="byte[]"/>
                    <param name="keyType" type="int"/>
                    <param name="versionNum" type="int"/>
                </params>
            </method>
            <javadoc line="66">
                Constructs a KerberosKey from a principal&apos;s password.                
                <param>
                    principal the principal that this password belongs to                    
                </param>
                <param>
                    password the password that should be used to compute the key                    
                </param>
                <param>
                    algorithm the name for the algorithm that this key will be
                      used for. This parameter may be null in which case the default
                      algorithm &quot;DES&quot; will be assumed.                    
                </param>
                <throws>
                    IllegalArgumentException if the name of the
                      algorithm passed is unsupported.                    
                </throws>
            </javadoc>
            <method name="KerberosKey" type="constructor" line="76">
                <params>
                    <param name="principal" type="KerberosPrincipal"/>
                    <param name="password" type="char[]"/>
                    <param name="algorithm" type="String"/>
                </params>
            </method>
            <javadoc line="80">
                Returns the principal that this key belongs to.                
                <return>
                    the principal this key belongs to.                    
                </return>
            </javadoc>
            <method name="getPrincipal" type="KerberosPrincipal" line="84"/>
            <javadoc line="88">
                Returns the key version number.                
                <return>
                    the key version number.                    
                </return>
            </javadoc>
            <method name="getVersionNumber" type="int" line="92"/>
            <javadoc line="96">
                Returns the key type for this long-term key.                
                <return>
                    the key type.                    
                </return>
            </javadoc>
            <method name="getKeyType" type="int" line="100"/>
            <javadoc line="104">
                Returns the standard algorithm name for this key. For
                  example, &quot;DES&quot; would indicate that this key is a DES key.
                  See Appendix A in the &lt;a href=
                  &quot;../../../../../technotes/guides/security/crypto/CryptoSpec.html#AppA&quot;&gt;
                  Java Cryptography Architecture API Specification &amp;amp; Reference
                  &lt;/a&gt;
                  for information about standard algorithm names.                
                <return>
                    the name of the algorithm associated with this key.                    
                </return>
            </javadoc>
            <method name="getAlgorithm" type="String" line="114"/>
            <javadoc line="118">
                Returns the name of the encoding format for this secret key.                
                <return>
                    the String &quot;RAW&quot;                    
                </return>
            </javadoc>
            <method name="getFormat" type="String" line="122"/>
            <javadoc line="126">
                Returns the key material of this secret key.                
                <return>
                    the key material                    
                </return>
            </javadoc>
            <method name="getEncoded" type="byte[]" line="130"/>
            <javadoc line="134">
                Destroys this key. A call to any of its other methods after this
                  will cause an  IllegalStateException to be thrown.                
                <throws>
                    DestroyFailedException if some error occurs while destorying
                      this key.                    
                </throws>
            </javadoc>
            <method name="destroy" type="void" line="140">
                <scope line="141"/>
            </method>
            <javadoc line="147">
                Determines if this key has been destroyed.                
            </javadoc>
            <method name="isDestroyed" type="boolean" line="150"/>
            <method name="toString" type="String" line="153">
                <scope line="154"/>
            </method>
            <javadoc line="159">
                Returns a hashcode for this KerberosKey.                
                <return>
                    a hashCode() for the &lt;code&gt;KerberosKey&lt;/code&gt;                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="hashCode" type="int" line="164">
                <declaration name="result" type="int" line="165"/>
                <scope line="166"/>
                <scope line="171"/>
            </method>
            <javadoc line="176">
                Compares the specified Object with this KerberosKey for equality.
                  Returns true if the given object is also a
                  &lt;code&gt;KerberosKey&lt;/code&gt; and the two
                  &lt;code&gt;KerberosKey&lt;/code&gt; instances are equivalent.                
                <param>
                    other the Object to compare to                    
                </param>
                <return>
                    true if the specified object is equal to this KerberosKey,
                      false otherwise. NOTE: Returns false if either of the KerberosKey
                      objects has been destroyed.                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="equals" type="boolean" line="187">
                <params>
                    <param name="other" type="Object"/>
                </params>
                <scope line="189"/>
                <declaration name="otherKey" type="KerberosKey" line="192"/>
                <scope line="193"/>
                <scope line="196"/>
                <scope line="199">
                    <scope line="200"/>
                </scope>
                <scope line="204">
                    <scope line="205"/>
                </scope>
            </method>
        </class>
    </source>