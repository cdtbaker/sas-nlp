<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.security.auth.kerberos">
        <import package="java.io"/>
        <import package="java.util.Date"/>
        <import package="java.util.Arrays"/>
        <import package="java.net.InetAddress"/>
        <import package="javax.crypto.SecretKey"/>
        <import package="javax.security.auth.Refreshable"/>
        <import package="javax.security.auth.Destroyable"/>
        <import package="javax.security.auth.RefreshFailedException"/>
        <import package="javax.security.auth.DestroyFailedException"/>
        <import package="sun.misc.HexDumpEncoder"/>
        <import package="sun.security.krb5.EncryptionKey"/>
        <import package="sun.security.krb5.Asn1Exception"/>
        <import package="sun.security.util"/>
        <class name="KerberosTicket" line="42">
            <comment line="85">
                XXX Make these flag indices public                
            </comment>
            <implements interface="Destroyable"/>
            <implements interface="Refreshable"/>
            <implements interface="java.io.Serializable"/>
            <javadoc line="42">
                This class encapsulates a Kerberos ticket and associated
                  information as viewed from the client&apos;s point of view. It captures all
                  information that the Key Distribution Center (KDC) sends to the client
                  in the reply message KDC-REP defined in the Kerberos Protocol
                  Specification (&lt;a href=http://www.ietf.org/rfc/rfc4120.txt&gt;RFC 4120&lt;/a&gt;).
                  &lt;p&gt;
                  All Kerberos JAAS login modules that authenticate a user to a KDC should
                  use this class. Where available, the login module might even read this
                  information from a ticket cache in the operating system instead of
                  directly communicating with the KDC. During the commit phase of the JAAS
                  authentication process, the JAAS login module should instantiate this
                  class and store the instance in the private credential set of a{@link javax.security.auth.Subject Subject}.&lt;p&gt;
                  It might be necessary for the application to be granted a{@link javax.security.auth.PrivateCredentialPermissionPrivateCredentialPermission} if it needs to access a KerberosTicket
                  instance from a Subject. This permission is not needed when the
                  application depends on the default JGSS Kerberos mechanism to access the
                  KerberosTicket. In that case, however, the application will need an
                  appropriate{@link javax.security.auth.kerberos.ServicePermission ServicePermission}.
                  &lt;p&gt;
                  Note that this class is applicable to both ticket granting tickets and
                  other regular service tickets. A ticket granting ticket is just a
                  special case of a more generalized service ticket.                
                <see>
                    javax.security.auth.Subject                    
                </see>
                <see>
                    javax.security.auth.PrivateCredentialPermission                    
                </see>
                <see>
                    javax.security.auth.login.LoginContext                    
                </see>
                <see>
                    org.ietf.jgss.GSSCredential                    
                </see>
                <see>
                    org.ietf.jgss.GSSManager                    
                </see>
                <author>
                    Mayank Upadhyay                    
                </author>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="82"/>
            <declaration name="FORWARDABLE_TICKET_FLAG" type="int" line="85"/>
            <declaration name="FORWARDED_TICKET_FLAG" type="int" line="86"/>
            <declaration name="PROXIABLE_TICKET_FLAG" type="int" line="87"/>
            <declaration name="PROXY_TICKET_FLAG" type="int" line="88"/>
            <declaration name="POSTDATED_TICKET_FLAG" type="int" line="89"/>
            <declaration name="RENEWABLE_TICKET_FLAG" type="int" line="90"/>
            <declaration name="INITIAL_TICKET_FLAG" type="int" line="91"/>
            <declaration name="NUM_FLAGS" type="int" line="93"/>
            <declaration name="asn1Encoding" type="byte[]" line="95"/>
            <javadoc line="95">
                ASN.1 DER Encoding of the Ticket as defined in the
                  Kerberos Protocol Specification RFC4120.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="sessionKey" type="KeyImpl" line="105"/>
            <javadoc line="105">
                &lt;code&gt;KeyImpl&lt;/code&gt; is serialized by writing out the ASN1 Encoded bytes
                  of the encryption key. The ASN1 encoding is defined in RFC4120 and as
                  follows:
                  &lt;pre&gt;
                  EncryptionKey   ::= SEQUENCE {
                  keytype    [0] Int32 -- actually encryption type --,
                  keyvalue   [1] OCTET STRING
                  }
                  &lt;/pre&gt;                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="flags" type="boolean[]" line="121"/>
            <javadoc line="121">
                Ticket Flags as defined in the Kerberos Protocol Specification RFC4120.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="authTime" type="Date" line="130"/>
            <javadoc line="130">
                Time of initial authentication                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="startTime" type="Date" line="139"/>
            <javadoc line="139">
                Time after which the ticket is valid.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="endTime" type="Date" line="146"/>
            <javadoc line="146">
                Time after which the ticket will not be honored. (its expiration time).                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="renewTill" type="Date" line="155"/>
            <javadoc line="155">
                For renewable Tickets it indicates the maximum endtime that may be
                  included in a renewal. It can be thought of as the absolute expiration
                  time for the ticket, including all renewals. This field may be null
                  for tickets that are not renewable.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="client" type="KerberosPrincipal" line="167"/>
            <javadoc line="167">
                Client that owns the service ticket                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="server" type="KerberosPrincipal" line="176"/>
            <javadoc line="176">
                The service for which the ticket was issued.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="clientAddresses" type="InetAddress[]" line="185"/>
            <javadoc line="185">
                The addresses from where the ticket may be used by the client.
                  This field may be null when the ticket is usable from any address.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="destroyed" type="boolean" line="196"/>
            <javadoc line="198">
                Constructs a KerberosTicket using credentials information that a
                  client either receives from a KDC or reads from a cache.                
                <param>
                    asn1Encoding the ASN.1 encoding of the ticket as defined by
                      the Kerberos protocol specification.                    
                </param>
                <param>
                    client the client that owns this service
                      ticket                    
                </param>
                <param>
                    server the service that this ticket is for                    
                </param>
                <param>
                    sessionKey the raw bytes for the session key that must be
                      used to encrypt the authenticator that will be sent to the server                    
                </param>
                <param>
                    keyType the key type for the session key as defined by the
                      Kerberos protocol specification.                    
                </param>
                <param>
                    flags the ticket flags. Each element in this array indicates
                      the value for the corresponding bit in the ASN.1 BitString that
                      represents the ticket flags. If the number of elements in this array
                      is less than the number of flags used by the Kerberos protocol,
                      then the missing flags will be filled in with false.                    
                </param>
                <param>
                    authTime the time of initial authentication for the client                    
                </param>
                <param>
                    startTime the time after which the ticket will be valid. This
                      may be null in which case the value of authTime is treated as the
                      startTime.                    
                </param>
                <param>
                    endTime the time after which the ticket will no longer be
                      valid                    
                </param>
                <param>
                    renewTill an absolute expiration time for the ticket,
                      including all renewal that might be possible. This field may be null
                      for tickets that are not renewable.                    
                </param>
                <param>
                    clientAddresses the addresses from where the ticket may be
                      used by the client. This field may be null when the ticket is usable
                      from any address.                    
                </param>
            </javadoc>
            <method name="KerberosTicket" type="constructor" line="239">
                <params>
                    <param name="asn1Encoding" type="byte[]"/>
                    <param name="client" type="KerberosPrincipal"/>
                    <param name="server" type="KerberosPrincipal"/>
                    <param name="sessionKey" type="byte[]"/>
                    <param name="keyType" type="int"/>
                    <param name="flags" type="boolean[]"/>
                    <param name="authTime" type="Date"/>
                    <param name="startTime" type="Date"/>
                    <param name="endTime" type="Date"/>
                    <param name="renewTill" type="Date"/>
                    <param name="clientAddresses" type="InetAddress[]"/>
                </params>
            </method>
            <method name="init" type="void" line="255">
                <params>
                    <param name="asn1Encoding" type="byte[]"/>
                    <param name="client" type="KerberosPrincipal"/>
                    <param name="server" type="KerberosPrincipal"/>
                    <param name="sessionKey" type="byte[]"/>
                    <param name="keyType" type="int"/>
                    <param name="flags" type="boolean[]"/>
                    <param name="authTime" type="Date"/>
                    <param name="startTime" type="Date"/>
                    <param name="endTime" type="Date"/>
                    <param name="renewTill" type="Date"/>
                    <param name="clientAddresses" type="InetAddress[]"/>
                </params>
            </method>
            <method name="init" type="void" line="273">
                <params>
                    <param name="asn1Encoding" type="byte[]"/>
                    <param name="client" type="KerberosPrincipal"/>
                    <param name="server" type="KerberosPrincipal"/>
                    <param name="sessionKey" type="KeyImpl"/>
                    <param name="flags" type="boolean[]"/>
                    <param name="authTime" type="Date"/>
                    <param name="startTime" type="Date"/>
                    <param name="endTime" type="Date"/>
                    <param name="renewTill" type="Date"/>
                    <param name="clientAddresses" type="InetAddress[]"/>
                </params>
                <comment line="290">
                    Caller needs to make sure `sessionKey` will not be null                    
                </comment>
                <comment line="298">
                    Fill in whatever we have                    
                </comment>
                <scope line="292">
                    <scope line="295"/>
                </scope>
                <scope line="304"/>
                <scope line="312"/>
                <scope line="315"/>
                <scope line="317"/>
            </method>
            <javadoc line="330">
                Returns the client principal associated with this ticket.                
                <return>
                    the client principal.                    
                </return>
            </javadoc>
            <method name="getClient" type="KerberosPrincipal" line="335"/>
            <javadoc line="339">
                Returns the service principal associated with this ticket.                
                <return>
                    the service principal.                    
                </return>
            </javadoc>
            <method name="getServer" type="KerberosPrincipal" line="344"/>
            <javadoc line="348">
                Returns the session key associated with this ticket.                
                <return>
                    the session key.                    
                </return>
            </javadoc>
            <method name="getSessionKey" type="SecretKey" line="353"/>
            <javadoc line="359">
                Returns the key type of the session key associated with this
                  ticket as defined by the Kerberos Protocol Specification.                
                <return>
                    the key type of the session key associated with this
                      ticket.                    
                </return>
                <see>
                    #getSessionKey()                    
                </see>
            </javadoc>
            <method name="getSessionKeyType" type="int" line="368"/>
            <javadoc line="374">
                Determines if this ticket is forwardable.                
                <return>
                    true if this ticket is forwardable, false if not.                    
                </return>
            </javadoc>
            <method name="isForwardable" type="boolean" line="379"/>
            <javadoc line="383">
                Determines if this ticket had been forwarded or was issued based on
                  authentication involving a forwarded ticket-granting ticket.                
                <return>
                    true if this ticket had been forwarded or was issued based on
                      authentication involving a forwarded ticket-granting ticket,
                      false otherwise.                    
                </return>
            </javadoc>
            <method name="isForwarded" type="boolean" line="391"/>
            <javadoc line="395">
                Determines if this ticket is proxiable.                
                <return>
                    true if this ticket is proxiable, false if not.                    
                </return>
            </javadoc>
            <method name="isProxiable" type="boolean" line="400"/>
            <javadoc line="404">
                Determines is this ticket is a proxy-ticket.                
                <return>
                    true if this ticket is a proxy-ticket, false if not.                    
                </return>
            </javadoc>
            <method name="isProxy" type="boolean" line="409"/>
            <javadoc line="414">
                Determines is this ticket is post-dated.                
                <return>
                    true if this ticket is post-dated, false if not.                    
                </return>
            </javadoc>
            <method name="isPostdated" type="boolean" line="419"/>
            <javadoc line="423">
                Determines is this ticket is renewable. If so, the {@link #refresh()refresh} method can be called, assuming the validity period for
                  renewing is not already over.                
                <return>
                    true if this ticket is renewable, false if not.                    
                </return>
            </javadoc>
            <method name="isRenewable" type="boolean" line="430"/>
            <javadoc line="434">
                Determines if this ticket was issued using the Kerberos AS-Exchange
                  protocol, and not issued based on some ticket-granting ticket.                
                <return>
                    true if this ticket was issued using the Kerberos AS-Exchange
                      protocol, false if not.                    
                </return>
            </javadoc>
            <method name="isInitial" type="boolean" line="441"/>
            <javadoc line="445">
                Returns the flags associated with this ticket. Each element in the
                  returned array indicates the value for the corresponding bit in the
                  ASN.1 BitString that represents the ticket flags.                
                <return>
                    the flags associated with this ticket.                    
                </return>
            </javadoc>
            <method name="getFlags" type="boolean[]" line="452"/>
            <javadoc line="456">
                Returns the time that the client was authenticated.                
                <return>
                    the time that the client was authenticated
                      or null if not set.                    
                </return>
            </javadoc>
            <method name="getAuthTime" type="java.util.Date" line="462"/>
            <javadoc line="466">
                Returns the start time for this ticket&apos;s validity period.                
                <return>
                    the start time for this ticket&apos;s validity period
                      or null if not set.                    
                </return>
            </javadoc>
            <method name="getStartTime" type="java.util.Date" line="472"/>
            <javadoc line="476">
                Returns the expiration time for this ticket&apos;s validity period.                
                <return>
                    the expiration time for this ticket&apos;s validity period.                    
                </return>
            </javadoc>
            <method name="getEndTime" type="java.util.Date" line="481"/>
            <javadoc line="485">
                Returns the latest expiration time for this ticket, including all
                  renewals. This will return a null value for non-renewable tickets.                
                <return>
                    the latest expiration time for this ticket.                    
                </return>
            </javadoc>
            <method name="getRenewTill" type="java.util.Date" line="491"/>
            <javadoc line="495">
                Returns a list of addresses from where the ticket can be used.                
                <return>
                    ths list of addresses or null, if the field was not
                      provided.                    
                </return>
            </javadoc>
            <method name="getClientAddresses" type="java.net.InetAddress[]" line="501"/>
            <javadoc line="505">
                Returns an ASN.1 encoding of the entire ticket.                
                <return>
                    an ASN.1 encoding of the entire ticket.                    
                </return>
            </javadoc>
            <method name="getEncoded" type="byte[]" line="510"/>
            <javadoc line="516">
                Determines if this ticket is still current.                
            </javadoc>
            <method name="isCurrent" type="boolean" line="517"/>
            <javadoc line="521">
                Extends the validity period of this ticket. The ticket will contain
                  a new session key if the refresh operation succeeds. The refresh
                  operation will fail if the ticket is not renewable or the latest
                  allowable renew time has passed. Any other error returned by the
                  KDC will also cause this method to fail.
                  Note: This method is not synchronized with the the accessor
                  methods of this object. Hence callers need to be aware of multiple
                  threads that might access this and try to renew it at the same
                  time.                
                <throws>
                    RefreshFailedException if the ticket is not renewable, or
                      the latest allowable renew time has passed, or the KDC returns some
                      error.                    
                </throws>
                <see>
                    #isRenewable()                    
                </see>
                <see>
                    #getRenewTill()                    
                </see>
            </javadoc>
            <method name="refresh" type="void" line="540">
                <comment line="585">
                    In case multiple threads try to refresh it at the same time.                    
                </comment>
                <comment line="592">
                    Squelch it since we don&apos;t care about the old ticket.                    
                </comment>
                <declaration name="e" type="Throwable" line="552"/>
                <declaration name="krb5Creds" type="sun.security.krb5.Credentials" line="553"/>
                <scope line="555"/>
                <scope line="568"/>
                <scope line="570"/>
                <scope line="574">
                    <declaration name="rfException" type="RefreshFailedException" line="575"/>
                </scope>
                <scope line="587">
                    <scope line="588"/>
                    <scope line="590"/>
                </scope>
            </method>
            <javadoc line="609">
                Destroys the ticket and destroys any sensitive information stored in
                  it.                
            </javadoc>
            <method name="destroy" type="void" line="613">
                <scope line="614"/>
            </method>
            <javadoc line="629">
                Determines if this ticket has been destroyed.                
            </javadoc>
            <method name="isDestroyed" type="boolean" line="632"/>
            <method name="toString" type="String" line="636">
                <declaration name="caddrBuf" type="StringBuffer" line="639"/>
                <scope line="640">
                    <scope line="641"/>
                </scope>
            </method>
            <javadoc line="667">
                Returns a hashcode for this KerberosTicket.                
                <return>
                    a hashCode() for the &lt;code&gt;KerberosTicket&lt;/code&gt;                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="hashCode" type="int" line="673">
                <comment line="685">
                    authTime may be null                    
                </comment>
                <comment line="690">
                    startTime may be null                    
                </comment>
                <comment line="695">
                    renewTill may be null                    
                </comment>
                <comment line="700">
                    clientAddress may be null, the array&apos;s hashCode is 0                    
                </comment>
                <declaration name="result" type="int" line="674"/>
                <scope line="675"/>
                <scope line="685"/>
                <scope line="690"/>
                <scope line="695"/>
            </method>
            <javadoc line="704">
                Compares the specified Object with this KerberosTicket for equality.
                  Returns true if the given object is also a
                  &lt;code&gt;KerberosTicket&lt;/code&gt; and the two
                  &lt;code&gt;KerberosTicket&lt;/code&gt; instances are equivalent.                
                <param>
                    other the Object to compare to                    
                </param>
                <return>
                    true if the specified object is equal to this KerberosTicket,
                      false otherwise. NOTE: Returns false if either of the KerberosTicket
                      objects has been destroyed.                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="equals" type="boolean" line="716">
                <params>
                    <param name="other" type="Object"/>
                </params>
                <comment line="741">
                    authTime may be null                    
                </comment>
                <comment line="750">
                    startTime may be null                    
                </comment>
                <scope line="721"/>
                <declaration name="otherTicket" type="KerberosTicket" line="725"/>
                <scope line="726"/>
                <scope line="736"/>
                <scope line="741"/>
                <scope line="744"/>
                <scope line="750"/>
                <scope line="753"/>
                <scope line="758"/>
                <scope line="761"/>
            </method>
            <method name="readObject" type="void" line="770">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
                <scope line="772"/>
                <scope line="775"/>
                <scope line="779"/>
            </method>
        </class>
    </source>