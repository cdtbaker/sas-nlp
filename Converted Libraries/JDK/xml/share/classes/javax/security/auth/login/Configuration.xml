<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.security.auth.login">
        <import package="javax.security.auth.AuthPermission"/>
        <import package="java.io"/>
        <import package="java.util"/>
        <import package="java.net.URI"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.security.PrivilegedExceptionAction"/>
        <import package="java.security.PrivilegedActionException"/>
        <import package="java.security.NoSuchAlgorithmException"/>
        <import package="java.security.NoSuchProviderException"/>
        <import package="java.security.Provider"/>
        <import package="java.security.Security"/>
        <import package="java.security.SecurityPermission"/>
        <import package="sun.security.jca.GetInstance"/>
        <class name="Configuration" line="16">
            <javadoc line="16">
                A Configuration object is responsible for specifying which LoginModules
                  should be used for a particular application, and in what order the
                  LoginModules should be invoked.
                  &lt;p&gt; A login configuration contains the following information.
                  Note that this example only represents the default syntax for the
                  &lt;code&gt;Configuration&lt;/code&gt;.  Subclass implementations of this class
                  may implement alternative syntaxes and may retrieve the
                  &lt;code&gt;Configuration&lt;/code&gt; from any source such as files, databases,
                  or servers.
                  &lt;pre&gt;
                  Name {
                  ModuleClass  Flag    ModuleOptions;
                  ModuleClass  Flag    ModuleOptions;
                  ModuleClass  Flag    ModuleOptions;
                  };
                  Name {
                  ModuleClass  Flag    ModuleOptions;
                  ModuleClass  Flag    ModuleOptions;
                  };
                  other {
                  ModuleClass  Flag    ModuleOptions;
                  ModuleClass  Flag    ModuleOptions;
                  };
                  &lt;/pre&gt;
                  &lt;p&gt; Each entry in the &lt;code&gt;Configuration&lt;/code&gt; is indexed via an
                  application name, &lt;i&gt;Name&lt;/i&gt;, and contains a list of
                  LoginModules configured for that application.  Each &lt;code&gt;LoginModule&lt;/code&gt;
                  is specified via its fully qualified class name.
                  Authentication proceeds down the module list in the exact order specified.
                  If an application does not have specific entry,
                  it defaults to the specific entry for &quot;&lt;i&gt;other&lt;/i&gt;&quot;.
                  &lt;p&gt; The &lt;i&gt;Flag&lt;/i&gt; value controls the overall behavior as authentication
                  proceeds down the stack.  The following represents a description of the
                  valid values for &lt;i&gt;Flag&lt;/i&gt; and their respective semantics:
                  &lt;pre&gt;
                  1) Required     - The &lt;code&gt;LoginModule&lt;/code&gt; is required to succeed.
                  If it succeeds or fails, authentication still continues
                  to proceed down the &lt;code&gt;LoginModule&lt;/code&gt; list.
                  2) Requisite    - The &lt;code&gt;LoginModule&lt;/code&gt; is required to succeed.
                  If it succeeds, authentication continues down the
                  &lt;code&gt;LoginModule&lt;/code&gt; list.  If it fails,
                  control immediately returns to the application
                  (authentication does not proceed down the
                  &lt;code&gt;LoginModule&lt;/code&gt; list).
                  3) Sufficient   - The &lt;code&gt;LoginModule&lt;/code&gt; is not required to
                  succeed.  If it does succeed, control immediately
                  returns to the application (authentication does not
                  proceed down the &lt;code&gt;LoginModule&lt;/code&gt; list).
                  If it fails, authentication continues down the
                  &lt;code&gt;LoginModule&lt;/code&gt; list.
                  4) Optional     - The &lt;code&gt;LoginModule&lt;/code&gt; is not required to
                  succeed.  If it succeeds or fails,
                  authentication still continues to proceed down the
                  &lt;code&gt;LoginModule&lt;/code&gt; list.
                  &lt;/pre&gt;
                  &lt;p&gt; The overall authentication succeeds only if all &lt;i&gt;Required&lt;/i&gt; and
                  &lt;i&gt;Requisite&lt;/i&gt; LoginModules succeed.  If a &lt;i&gt;Sufficient&lt;/i&gt;
                  &lt;code&gt;LoginModule&lt;/code&gt; is configured and succeeds,
                  then only the &lt;i&gt;Required&lt;/i&gt; and &lt;i&gt;Requisite&lt;/i&gt; LoginModules prior to
                  that &lt;i&gt;Sufficient&lt;/i&gt; &lt;code&gt;LoginModule&lt;/code&gt; need to have succeeded for
                  the overall authentication to succeed. If no &lt;i&gt;Required&lt;/i&gt; or
                  &lt;i&gt;Requisite&lt;/i&gt; LoginModules are configured for an application,
                  then at least one &lt;i&gt;Sufficient&lt;/i&gt; or &lt;i&gt;Optional&lt;/i&gt;
                  &lt;code&gt;LoginModule&lt;/code&gt; must succeed.
                  &lt;p&gt; &lt;i&gt;ModuleOptions&lt;/i&gt; is a space separated list of
                  &lt;code&gt;LoginModule&lt;/code&gt;-specific values which are passed directly to
                  the underlying LoginModules.  Options are defined by the
                  &lt;code&gt;LoginModule&lt;/code&gt; itself, and control the behavior within it.
                  For example, a &lt;code&gt;LoginModule&lt;/code&gt; may define options to support
                  debugging/testing capabilities.  The correct way to specify options in the
                  &lt;code&gt;Configuration&lt;/code&gt; is by using the following key-value pairing:
                  &lt;i&gt;debug=&quot;true&quot;&lt;/i&gt;.  The key and value should be separated by an
                  &apos;equals&apos; symbol, and the value should be surrounded by double quotes.
                  If a String in the form, ${system.property}, occurs in the value,
                  it will be expanded to the value of the system property.
                  Note that there is no limit to the number of
                  options a &lt;code&gt;LoginModule&lt;/code&gt; may define.
                  &lt;p&gt; The following represents an example &lt;code&gt;Configuration&lt;/code&gt; entry
                  based on the syntax above:
                  &lt;pre&gt;
                  Login {
                  com.sun.security.auth.module.UnixLoginModule required;
                  com.sun.security.auth.module.Krb5LoginModule optional
                  useTicketCache=&quot;true&quot;
                  ticketCache=&quot;${user.home}${/}tickets&quot;;
                  };
                  &lt;/pre&gt;
                  &lt;p&gt; This &lt;code&gt;Configuration&lt;/code&gt; specifies that an application named,
                  &quot;Login&quot;, requires users to first authenticate to the
                  &lt;i&gt;com.sun.security.auth.module.UnixLoginModule&lt;/i&gt;, which is
                  required to succeed.  Even if the &lt;i&gt;UnixLoginModule&lt;/i&gt;
                  authentication fails, the
                  &lt;i&gt;com.sun.security.auth.module.Krb5LoginModule&lt;/i&gt;
                  still gets invoked.  This helps hide the source of failure.
                  Since the &lt;i&gt;Krb5LoginModule&lt;/i&gt; is &lt;i&gt;Optional&lt;/i&gt;, the overall
                  authentication succeeds only if the &lt;i&gt;UnixLoginModule&lt;/i&gt;
                  (&lt;i&gt;Required&lt;/i&gt;) succeeds.
                  &lt;p&gt; Also note that the LoginModule-specific options,
                  &lt;i&gt;useTicketCache=&quot;true&quot;&lt;/i&gt; and
                  &lt;i&gt;ticketCache=${user.home}${/}tickets&quot;&lt;/i&gt;,
                  are passed to the &lt;i&gt;Krb5LoginModule&lt;/i&gt;.
                  These options instruct the &lt;i&gt;Krb5LoginModule&lt;/i&gt; to
                  use the ticket cache at the specified location.
                  The system properties, &lt;i&gt;user.home&lt;/i&gt; and &lt;i&gt;/&lt;/i&gt;
                  (file.separator), are expanded to their respective values.
                  &lt;p&gt; There is only one Configuration object installed in the runtime at any
                  given time.  A Configuration object can be installed by calling the
                  &lt;code&gt;setConfiguration&lt;/code&gt; method.  The installed Configuration object
                  can be obtained by calling the &lt;code&gt;getConfiguration&lt;/code&gt; method.
                  &lt;p&gt; If no Configuration object has been installed in the runtime, a call to
                  &lt;code&gt;getConfiguration&lt;/code&gt; installs an instance of the default
                  Configuration implementation (a default subclass implementation of this
                  abstract class).
                  The default Configuration implementation can be changed by setting the value
                  of the &quot;login.configuration.provider&quot; security property (in the Java
                  security properties file) to the fully qualified name of the desired
                  Configuration subclass implementation.  The Java security properties file
                  is located in the file named &amp;lt;JAVA_HOME&amp;gt;/lib/security/java.security.
                  &amp;lt;JAVA_HOME&amp;gt; refers to the value of the java.home system property,
                  and specifies the directory where the JRE is installed.
                  &lt;p&gt; Application code can directly subclass Configuration to provide a custom
                  implementation.  In addition, an instance of a Configuration object can be
                  constructed by invoking one of the &lt;code&gt;getInstance&lt;/code&gt; factory methods
                  with a standard type.  The default policy type is &quot;JavaLoginConfig&quot;.
                  See the Configuration section in the &lt;a href=
                  &quot;{@docRoot}/../technotes/guides/security/StandardNames.html#Configuration&quot;&gt;
                  Java Cryptography Architecture Standard Algorithm Name Documentation&lt;/a&gt;
                  for a list of standard Configuration types.                
                <see>
                    javax.security.auth.login.LoginContext                    
                </see>
            </javadoc>
            <declaration name="configuration" type="Configuration" line="148"/>
            <declaration name="contextClassLoader" type="ClassLoader" line="149"/>
            <scope line="150">
                <anonymous_class line="151">
                    <method name="run" type="ClassLoader" line="152"/>
                </anonymous_class>
            </scope>
            <method name="checkPermission" type="void" line="158">
                <params>
                    <param name="type" type="String"/>
                </params>
                <declaration name="sm" type="SecurityManager" line="159"/>
                <scope line="160"/>
            </method>
            <javadoc line="164">
                Sole constructor.  (For invocation by subclass constructors, typically
                  implicit.)                
            </javadoc>
            <method name="Configuration" type="constructor" line="168"/>
            <javadoc line="170">
                Get the installed login Configuration.
                  &lt;p&gt;                
                <return>
                    the login Configuration.  If a Configuration object was set
                      via the &lt;code&gt;Configuration.setConfiguration&lt;/code&gt; method,
                      then that object is returned.  Otherwise, a default
                      Configuration object is returned.                    
                </return>
                <exception>
                    SecurityException if the caller does not have permission
                      to retrieve the Configuration.                    
                </exception>
                <see>
                    #setConfiguration                    
                </see>
            </javadoc>
            <method name="getConfiguration" type="Configuration" line="181">
                <declaration name="sm" type="SecurityManager" line="182"/>
                <scope line="184">
                    <scope line="185">
                        <declaration name="config_class" type="String" line="186"/>
                        <anonymous_class line="187">
                            <method name="run" type="String" line="188"/>
                        </anonymous_class>
                        <scope line="193"/>
                        <scope line="196">
                            <declaration name="finalClass" type="String" line="197"/>
                            <anonymous_class line="198">
                                <method name="run" type="Configuration" line="199"/>
                            </anonymous_class>
                        </scope>
                        <scope line="205">
                            <declaration name="ee" type="Exception" line="206"/>
                            <scope line="207"/>
                            <scope line="210"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="218">
                Set the login &lt;code&gt;Configuration&lt;/code&gt;.
                  &lt;p&gt;                
                <param>
                    configuration the new &lt;code&gt;Configuration&lt;/code&gt;                    
                </param>
                <exception>
                    SecurityException if the current thread does not have
                      Permission to set the &lt;code&gt;Configuration&lt;/code&gt;.                    
                </exception>
                <see>
                    #getConfiguration                    
                </see>
            </javadoc>
            <method name="setConfiguration" type="void" line="226">
                <params>
                    <param name="configuration" type="Configuration"/>
                </params>
                <declaration name="sm" type="SecurityManager" line="227"/>
            </method>
            <javadoc line="231">
                Returns a Configuration object of the specified type.
                  &lt;p&gt; This method traverses the list of registered security providers,
                  starting with the most preferred Provider.
                  A new Configuration object encapsulating the
                  ConfigurationSpi implementation from the first
                  Provider that supports the specified type is returned.
                  &lt;p&gt; Note that the list of registered providers may be retrieved via
                  the {@link Security#getProviders() Security.getProviders()} method.                
                <param>
                    type the specified Configuration type.  See the Configuration
                      section in the &lt;a href=
                      &quot;{@docRoot}/../technotes/guides/security/StandardNames.html#Configuration&quot;&gt;
                      Java Cryptography Architecture Standard Algorithm Name
                      Documentation&lt;/a&gt; for a list of standard Configuration types.                    
                </param>
                <param>
                    params parameters for the Configuration, which may be null.                    
                </param>
                <return>
                    the new Configuration object.                    
                </return>
                <exception>
                    SecurityException if the caller does not have permission
                      to get a Configuration instance for the specified type.                    
                </exception>
                <exception>
                    NullPointerException if the specified type is null.                    
                </exception>
                <exception>
                    IllegalArgumentException if the specified parameters
                      are not understood by the ConfigurationSpi implementation
                      from the selected Provider.                    
                </exception>
                <exception>
                    NoSuchAlgorithmException if no Provider supports a
                      ConfigurationSpi implementation for the specified type.                    
                </exception>
                <see>
                    Provider                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getInstance" type="Configuration" line="258">
                <params>
                    <param name="type" type="String"/>
                    <param name="params" type="Configuration.Parameters"/>
                </params>
                <scope line="260">
                    <declaration name="instance" type="GetInstance.Instance" line="261"/>
                </scope>
                <scope line="264"/>
            </method>
            <javadoc line="268">
                Returns a Configuration object of the specified type.
                  &lt;p&gt; A new Configuration object encapsulating the
                  ConfigurationSpi implementation from the specified provider
                  is returned.   The specified provider must be registered
                  in the provider list.
                  &lt;p&gt; Note that the list of registered providers may be retrieved via
                  the {@link Security#getProviders() Security.getProviders()} method.                
                <param>
                    type the specified Configuration type.  See the Configuration
                      section in the &lt;a href=
                      &quot;{@docRoot}/../technotes/guides/security/StandardNames.html#Configuration&quot;&gt;
                      Java Cryptography Architecture Standard Algorithm Name
                      Documentation&lt;/a&gt; for a list of standard Configuration types.                    
                </param>
                <param>
                    params parameters for the Configuration, which may be null.                    
                </param>
                <param>
                    provider the provider.                    
                </param>
                <return>
                    the new Configuration object.                    
                </return>
                <exception>
                    SecurityException if the caller does not have permission
                      to get a Configuration instance for the specified type.                    
                </exception>
                <exception>
                    NullPointerException if the specified type is null.                    
                </exception>
                <exception>
                    IllegalArgumentException if the specified provider
                      is null or empty,
                      or if the specified parameters are not understood by
                      the ConfigurationSpi implementation from the specified provider.                    
                </exception>
                <exception>
                    NoSuchProviderException if the specified provider is not
                      registered in the security provider list.                    
                </exception>
                <exception>
                    NoSuchAlgorithmException if the specified provider does not
                      support a ConfigurationSpi implementation for the specified
                      type.                    
                </exception>
                <see>
                    Provider                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getInstance" type="Configuration" line="299">
                <params>
                    <param name="type" type="String"/>
                    <param name="params" type="Configuration.Parameters"/>
                    <param name="provider" type="String"/>
                </params>
                <scope line="300"/>
                <scope line="304">
                    <declaration name="instance" type="GetInstance.Instance" line="305"/>
                </scope>
                <scope line="308"/>
            </method>
            <javadoc line="312">
                Returns a Configuration object of the specified type.
                  &lt;p&gt; A new Configuration object encapsulating the
                  ConfigurationSpi implementation from the specified Provider
                  object is returned.  Note that the specified Provider object
                  does not have to be registered in the provider list.                
                <param>
                    type the specified Configuration type.  See the Configuration
                      section in the &lt;a href=
                      &quot;{@docRoot}/../technotes/guides/security/StandardNames.html#Configuration&quot;&gt;
                      Java Cryptography Architecture Standard Algorithm Name
                      Documentation&lt;/a&gt; for a list of standard Configuration types.                    
                </param>
                <param>
                    params parameters for the Configuration, which may be null.                    
                </param>
                <param>
                    provider the Provider.                    
                </param>
                <return>
                    the new Configuration object.                    
                </return>
                <exception>
                    SecurityException if the caller does not have permission
                      to get a Configuration instance for the specified type.                    
                </exception>
                <exception>
                    NullPointerException if the specified type is null.                    
                </exception>
                <exception>
                    IllegalArgumentException if the specified Provider is null,
                      or if the specified parameters are not understood by
                      the ConfigurationSpi implementation from the specified Provider.                    
                </exception>
                <exception>
                    NoSuchAlgorithmException if the specified Provider does not
                      support a ConfigurationSpi implementation for the specified
                      type.                    
                </exception>
                <see>
                    Provider                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getInstance" type="Configuration" line="338">
                <params>
                    <param name="type" type="String"/>
                    <param name="params" type="Configuration.Parameters"/>
                    <param name="provider" type="Provider"/>
                </params>
                <scope line="339"/>
                <scope line="343">
                    <declaration name="instance" type="GetInstance.Instance" line="344"/>
                </scope>
                <scope line="347"/>
            </method>
            <method name="handleException" type="Configuration" line="351">
                <params>
                    <param name="nsae" type="NoSuchAlgorithmException"/>
                </params>
                <declaration name="cause" type="Throwable" line="352"/>
                <scope line="353"/>
            </method>
            <javadoc line="358">
                Return the Provider of this Configuration.
                  &lt;p&gt; This Configuration instance will only have a Provider if it
                  was obtained via a call to &lt;code&gt;Configuration.getInstance&lt;/code&gt;.
                  Otherwise this method returns null.                
                <return>
                    the Provider of this Configuration, or null.                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getProvider" type="Provider" line="366"/>
            <javadoc line="369">
                Return the type of this Configuration.
                  &lt;p&gt; This Configuration instance will only have a type if it
                  was obtained via a call to &lt;code&gt;Configuration.getInstance&lt;/code&gt;.
                  Otherwise this method returns null.                
                <return>
                    the type of this Configuration, or null.                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getType" type="String" line="377"/>
            <javadoc line="380">
                Return Configuration parameters.
                  &lt;p&gt; This Configuration instance will only have parameters if it
                  was obtained via a call to &lt;code&gt;Configuration.getInstance&lt;/code&gt;.
                  Otherwise this method returns null.                
                <return>
                    Configuration parameters, or null.                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getParameters" type="Configuration.Parameters" line="388"/>
            <method name="getAppConfigurationEntry" type="AppConfigurationEntry[]" line="391"/>
            <javadoc line="391">
                Retrieve the AppConfigurationEntries for the specified &lt;i&gt;name&lt;/i&gt;
                  from this Configuration.
                  &lt;p&gt;                
                <param>
                    name the name used to index the Configuration.                    
                </param>
                <return>
                    an array of AppConfigurationEntries for the specified &lt;i&gt;name&lt;/i&gt;
                      from this Configuration, or null if there are no entries
                      for the specified &lt;i&gt;name&lt;/i&gt;                    
                </return>
            </javadoc>
            <javadoc line="401">
                Refresh and reload the Configuration.
                  &lt;p&gt; This method causes this Configuration object to refresh/reload its
                  contents in an implementation-dependent manner.
                  For example, if this Configuration object stores its entries in a file,
                  calling &lt;code&gt;refresh&lt;/code&gt; may cause the file to be re-read.
                  &lt;p&gt; The default implementation of this method does nothing.
                  This method should be overridden if a refresh operation is supported
                  by the implementation.                
                <exception>
                    SecurityException if the caller does not have permission
                      to refresh its Configuration.                    
                </exception>
            </javadoc>
            <method name="refresh" type="void" line="413"/>
            <class name="ConfigDelegate" line="415">
                <extends class="Configuration"/>
                <javadoc line="415">
                    This subclass is returned by the getInstance calls.  All Configuration
                      calls are delegated to the underlying ConfigurationSpi.                    
                </javadoc>
                <declaration name="spi" type="ConfigurationSpi" line="420"/>
                <declaration name="p" type="Provider" line="421"/>
                <declaration name="type" type="String" line="422"/>
                <declaration name="params" type="Configuration.Parameters" line="423"/>
                <method name="ConfigDelegate" type="constructor" line="424">
                    <params>
                        <param name="spi" type="ConfigurationSpi"/>
                        <param name="p" type="Provider"/>
                        <param name="type" type="String"/>
                        <param name="params" type="Configuration.Parameters"/>
                    </params>
                </method>
                <method name="getType" type="String" line="430"/>
                <method name="getParameters" type="Configuration.Parameters" line="433"/>
                <method name="getProvider" type="Provider" line="436"/>
                <method name="getAppConfigurationEntry" type="AppConfigurationEntry[]" line="439">
                    <params>
                        <param name="name" type="String"/>
                    </params>
                </method>
                <method name="refresh" type="void" line="442"/>
            </class>
            <interface name="Parameters">
                <javadoc line="446">
                    This represents a marker interface for Configuration parameters.                    
                    <since>
                        1.6                        
                    </since>
                </javadoc>
            </interface>
        </class>
    </source>