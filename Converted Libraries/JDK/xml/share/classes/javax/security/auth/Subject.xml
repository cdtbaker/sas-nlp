<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.security.auth">
        <import package="java.util"/>
        <import package="java.io"/>
        <import package="java.lang.reflect"/>
        <import package="java.text.MessageFormat"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.AccessControlContext"/>
        <import package="java.security.DomainCombiner"/>
        <import package="java.security.Permission"/>
        <import package="java.security.PermissionCollection"/>
        <import package="java.security.Principal"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.security.PrivilegedExceptionAction"/>
        <import package="java.security.PrivilegedActionException"/>
        <import package="java.security.ProtectionDomain"/>
        <import package="sun.security.util.ResourcesMgr"/>
        <class name="Subject" line="44">
            <implements interface="java.io.Serializable"/>
            <javadoc line="44">
                &lt;p&gt; A &lt;code&gt;Subject&lt;/code&gt; represents a grouping of related information
                  for a single entity, such as a person.
                  Such information includes the Subject&apos;s identities as well as
                  its security-related attributes
                  (passwords and cryptographic keys, for example).
                  &lt;p&gt; Subjects may potentially have multiple identities.
                  Each identity is represented as a &lt;code&gt;Principal&lt;/code&gt;
                  within the &lt;code&gt;Subject&lt;/code&gt;.  Principals simply bind names to a
                  &lt;code&gt;Subject&lt;/code&gt;.  For example, a &lt;code&gt;Subject&lt;/code&gt; that happens
                  to be a person, Alice, might have two Principals:
                  one which binds &quot;Alice Bar&quot;, the name on her driver license,
                  to the &lt;code&gt;Subject&lt;/code&gt;, and another which binds,
                  &quot;999-99-9999&quot;, the number on her student identification card,
                  to the &lt;code&gt;Subject&lt;/code&gt;.  Both Principals refer to the same
                  &lt;code&gt;Subject&lt;/code&gt; even though each has a different name.
                  &lt;p&gt; A &lt;code&gt;Subject&lt;/code&gt; may also own security-related attributes,
                  which are referred to as credentials.
                  Sensitive credentials that require special protection, such as
                  private cryptographic keys, are stored within a private credential
                  &lt;code&gt;Set&lt;/code&gt;.  Credentials intended to be shared, such as
                  public key certificates or Kerberos server tickets are stored
                  within a public credential &lt;code&gt;Set&lt;/code&gt;.  Different permissions
                  are required to access and modify the different credential Sets.
                  &lt;p&gt; To retrieve all the Principals associated with a &lt;code&gt;Subject&lt;/code&gt;,
                  invoke the &lt;code&gt;getPrincipals&lt;/code&gt; method.  To retrieve
                  all the public or private credentials belonging to a &lt;code&gt;Subject&lt;/code&gt;,
                  invoke the &lt;code&gt;getPublicCredentials&lt;/code&gt; method or
                  &lt;code&gt;getPrivateCredentials&lt;/code&gt; method, respectively.
                  To modify the returned &lt;code&gt;Set&lt;/code&gt; of Principals and credentials,
                  use the methods defined in the &lt;code&gt;Set&lt;/code&gt; class.
                  For example:
                  &lt;pre&gt;
                  Subject subject;
                  Principal principal;
                  Object credential;
                  // add a Principal and credential to the Subject
                  subject.getPrincipals().add(principal);
                  subject.getPublicCredentials().add(credential);
                  &lt;/pre&gt;
                  &lt;p&gt; This &lt;code&gt;Subject&lt;/code&gt; class implements &lt;code&gt;Serializable&lt;/code&gt;.
                  While the Principals associated with the &lt;code&gt;Subject&lt;/code&gt; are serialized,
                  the credentials associated with the &lt;code&gt;Subject&lt;/code&gt; are not.
                  Note that the &lt;code&gt;java.security.Principal&lt;/code&gt; class
                  does not implement &lt;code&gt;Serializable&lt;/code&gt;.  Therefore all concrete
                  &lt;code&gt;Principal&lt;/code&gt; implementations associated with Subjects
                  must implement &lt;code&gt;Serializable&lt;/code&gt;.                
                <see>
                    java.security.Principal                    
                </see>
                <see>
                    java.security.DomainCombiner                    
                </see>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="102"/>
            <declaration name="principals" type="Set&lt;Principal&gt;" line="104"/>
            <javadoc line="104">
                A &lt;code&gt;Set&lt;/code&gt; that provides a view of all of this
                  Subject&apos;s Principals
                  &lt;p&gt;                
                <serial>
                    Each element in this set is a
                      <code>java.security.Principal</code>.
                      The set is a <code>Subject.SecureSet</code>.                    
                </serial>
            </javadoc>
            <declaration name="pubCredentials" type="Set&lt;Object&gt;" line="116"/>
            <javadoc line="116">
                Sets that provide a view of all of this
                  Subject&apos;s Credentials                
            </javadoc>
            <declaration name="privCredentials" type="Set&lt;Object&gt;" line="121"/>
            <declaration name="readOnly" type="boolean" line="123"/>
            <javadoc line="123">
                Whether this Subject is read-only                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="PRINCIPAL_SET" type="int" line="130"/>
            <declaration name="PUB_CREDENTIAL_SET" type="int" line="131"/>
            <declaration name="PRIV_CREDENTIAL_SET" type="int" line="132"/>
            <declaration name="NULL_PD_ARRAY" type="ProtectionDomain[]" line="134"/>
            <javadoc line="137">
                Create an instance of a &lt;code&gt;Subject&lt;/code&gt;
                  with an empty &lt;code&gt;Set&lt;/code&gt; of Principals and empty
                  Sets of public and private credentials.
                  &lt;p&gt; The newly constructed Sets check whether this &lt;code&gt;Subject&lt;/code&gt;
                  has been set read-only before permitting subsequent modifications.
                  The newly created Sets also prevent illegal modifications
                  by ensuring that callers have sufficient permissions.
                  &lt;p&gt; To modify the Principals Set, the caller must have
                  &lt;code&gt;AuthPermission(&quot;modifyPrincipals&quot;)&lt;/code&gt;.
                  To modify the public credential Set, the caller must have
                  &lt;code&gt;AuthPermission(&quot;modifyPublicCredentials&quot;)&lt;/code&gt;.
                  To modify the private credential Set, the caller must have
                  &lt;code&gt;AuthPermission(&quot;modifyPrivateCredentials&quot;)&lt;/code&gt;.                
            </javadoc>
            <method name="Subject" type="constructor" line="154"/>
            <javadoc line="164">
                Create an instance of a &lt;code&gt;Subject&lt;/code&gt; with
                  Principals and credentials.
                  &lt;p&gt; The Principals and credentials from the specified Sets
                  are copied into newly constructed Sets.
                  These newly created Sets check whether this &lt;code&gt;Subject&lt;/code&gt;
                  has been set read-only before permitting subsequent modifications.
                  The newly created Sets also prevent illegal modifications
                  by ensuring that callers have sufficient permissions.
                  &lt;p&gt; To modify the Principals Set, the caller must have
                  &lt;code&gt;AuthPermission(&quot;modifyPrincipals&quot;)&lt;/code&gt;.
                  To modify the public credential Set, the caller must have
                  &lt;code&gt;AuthPermission(&quot;modifyPublicCredentials&quot;)&lt;/code&gt;.
                  To modify the private credential Set, the caller must have
                  &lt;code&gt;AuthPermission(&quot;modifyPrivateCredentials&quot;)&lt;/code&gt;.
                  &lt;p&gt;                
                <param>
                    readOnly true if the <code>Subject</code> is to be read-only,
                      and false otherwise. <p>                    
                </param>
                <param>
                    principals the <code>Set</code> of Principals
                      to be associated with this <code>Subject</code>. <p>                    
                </param>
                <param>
                    pubCredentials the <code>Set</code> of public credentials
                      to be associated with this <code>Subject</code>. <p>                    
                </param>
                <param>
                    privCredentials the <code>Set</code> of private credentials
                      to be associated with this <code>Subject</code>.                    
                </param>
                <exception>
                    NullPointerException if the specified
                      <code>principals</code>, <code>pubCredentials</code>,
                      or <code>privCredentials</code> are <code>null</code>.                    
                </exception>
            </javadoc>
            <method name="Subject" type="constructor" line="201">
                <params>
                    <param name="readOnly" type="boolean"/>
                    <param name="principals" type="Set<? extends Principal>"/>
                    <param name="pubCredentials" type="Set<?>"/>
                    <param name="privCredentials" type="Set<?>"/>
                </params>
            </method>
            <javadoc line="218">
                Set this &lt;code&gt;Subject&lt;/code&gt; to be read-only.
                  &lt;p&gt; Modifications (additions and removals) to this Subject&apos;s
                  &lt;code&gt;Principal&lt;/code&gt; &lt;code&gt;Set&lt;/code&gt; and
                  credential Sets will be disallowed.
                  The &lt;code&gt;destroy&lt;/code&gt; operation on this Subject&apos;s credentials will
                  still be permitted.
                  &lt;p&gt; Subsequent attempts to modify the Subject&apos;s &lt;code&gt;Principal&lt;/code&gt;
                  and credential Sets will result in an
                  &lt;code&gt;IllegalStateException&lt;/code&gt; being thrown.
                  Also, once a &lt;code&gt;Subject&lt;/code&gt; is read-only,
                  it can not be reset to being writable again.
                  &lt;p&gt;                
                <exception>
                    SecurityException if the caller does not have permission
                      to set this <code>Subject</code> to be read-only.                    
                </exception>
            </javadoc>
            <method name="setReadOnly" type="void" line="238">
                <declaration name="sm" type="java.lang.SecurityManager" line="239"/>
                <scope line="240"/>
            </method>
            <javadoc line="247">
                Query whether this &lt;code&gt;Subject&lt;/code&gt; is read-only.
                  &lt;p&gt;                
                <return>
                    true if this <code>Subject</code> is read-only, false otherwise.                    
                </return>
            </javadoc>
            <method name="isReadOnly" type="boolean" line="254"/>
            <javadoc line="258">
                Get the &lt;code&gt;Subject&lt;/code&gt; associated with the provided
                  &lt;code&gt;AccessControlContext&lt;/code&gt;.
                  &lt;p&gt; The &lt;code&gt;AccessControlContext&lt;/code&gt; may contain many
                  Subjects (from nested &lt;code&gt;doAs&lt;/code&gt; calls).
                  In this situation, the most recent &lt;code&gt;Subject&lt;/code&gt; associated
                  with the &lt;code&gt;AccessControlContext&lt;/code&gt; is returned.
                  &lt;p&gt;                
                <param>
                    acc the <code>AccessControlContext</code> from which to retrieve
                      the <code>Subject</code>.                    
                </param>
                <return>
                    the <code>Subject</code> associated with the provided
                      <code>AccessControlContext</code>, or <code>null</code>
                      if no <code>Subject</code> is associated
                      with the provided <code>AccessControlContext</code>.                    
                </return>
                <exception>
                    SecurityException if the caller does not have permission
                      to get the <code>Subject</code>. <p>                    
                </exception>
                <exception>
                    NullPointerException if the provided
                      <code>AccessControlContext</code> is <code>null</code>.                    
                </exception>
            </javadoc>
            <method name="getSubject" type="Subject" line="283">
                <params>
                    <param name="acc" type="AccessControlContext"/>
                </params>
                <comment line="295">
                    return the Subject from the DomainCombiner of the provided context                    
                </comment>
                <declaration name="sm" type="java.lang.SecurityManager" line="285"/>
                <scope line="286"/>
                <scope line="290"/>
                <anonymous_class line="297">
                    <method name="run" type="Subject" line="298">
                        <declaration name="dc" type="DomainCombiner" line="299"/>
                        <declaration name="sdc" type="SubjectDomainCombiner" line="302"/>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="308">
                Perform work as a particular &lt;code&gt;Subject&lt;/code&gt;.
                  &lt;p&gt; This method first retrieves the current Thread&apos;s
                  &lt;code&gt;AccessControlContext&lt;/code&gt; via
                  &lt;code&gt;AccessController.getContext&lt;/code&gt;,
                  and then instantiates a new &lt;code&gt;AccessControlContext&lt;/code&gt;
                  using the retrieved context along with a new
                  &lt;code&gt;SubjectDomainCombiner&lt;/code&gt; (constructed using
                  the provided &lt;code&gt;Subject&lt;/code&gt;).
                  Finally, this method invokes &lt;code&gt;AccessController.doPrivileged&lt;/code&gt;,
                  passing it the provided &lt;code&gt;PrivilegedAction&lt;/code&gt;,
                  as well as the newly constructed &lt;code&gt;AccessControlContext&lt;/code&gt;.
                  &lt;p&gt;                
                <param>
                    subject the <code>Subject</code> that the specified
                      <code>action</code> will run as.  This parameter
                      may be <code>null</code>. <p>                    
                </param>
                <param>
                    action the code to be run as the specified
                      <code>Subject</code>. <p>                    
                </param>
                <return>
                    the value returned by the PrivilegedAction's
                      <code>run</code> method.                    
                </return>
                <exception>
                    NullPointerException if the <code>PrivilegedAction</code>
                      is <code>null</code>. <p>                    
                </exception>
                <exception>
                    SecurityException if the caller does not have permission
                      to invoke this method.                    
                </exception>
            </javadoc>
            <method name="doAs" type="T" line="341">
                <params>
                    <param name="subject" type="Subject"/>
                    <param name="action" type="java.security.PrivilegedAction<T>"/>
                </params>
                <comment line="351">
                    set up the new Subject-based AccessControlContext                    
                </comment>
                <comment line="352">
                    for doPrivileged                    
                </comment>
                <comment line="355">
                    call doPrivileged and push this new context on the stack                    
                </comment>
                <declaration name="sm" type="java.lang.SecurityManager" line="343"/>
                <scope line="344"/>
                <declaration name="currentAcc" type="AccessControlContext" line="353"/>
            </method>
            <javadoc line="361">
                Perform work as a particular &lt;code&gt;Subject&lt;/code&gt;.
                  &lt;p&gt; This method first retrieves the current Thread&apos;s
                  &lt;code&gt;AccessControlContext&lt;/code&gt; via
                  &lt;code&gt;AccessController.getContext&lt;/code&gt;,
                  and then instantiates a new &lt;code&gt;AccessControlContext&lt;/code&gt;
                  using the retrieved context along with a new
                  &lt;code&gt;SubjectDomainCombiner&lt;/code&gt; (constructed using
                  the provided &lt;code&gt;Subject&lt;/code&gt;).
                  Finally, this method invokes &lt;code&gt;AccessController.doPrivileged&lt;/code&gt;,
                  passing it the provided &lt;code&gt;PrivilegedExceptionAction&lt;/code&gt;,
                  as well as the newly constructed &lt;code&gt;AccessControlContext&lt;/code&gt;.
                  &lt;p&gt;                
                <param>
                    subject the <code>Subject</code> that the specified
                      <code>action</code> will run as.  This parameter
                      may be <code>null</code>. <p>                    
                </param>
                <param>
                    action the code to be run as the specified
                      <code>Subject</code>. <p>                    
                </param>
                <return>
                    the value returned by the
                      PrivilegedExceptionAction's <code>run</code> method.                    
                </return>
                <exception>
                    PrivilegedActionException if the
                      <code>PrivilegedExceptionAction.run</code>
                      method throws a checked exception. <p>                    
                </exception>
                <exception>
                    NullPointerException if the specified
                      <code>PrivilegedExceptionAction</code> is
                      <code>null</code>. <p>                    
                </exception>
                <exception>
                    SecurityException if the caller does not have permission
                      to invoke this method.                    
                </exception>
            </javadoc>
            <method name="doAs" type="T" line="400">
                <params>
                    <param name="subject" type="Subject"/>
                    <param name="action" type="java.security.PrivilegedExceptionAction<T>"/>
                </params>
                <comment line="411">
                    set up the new Subject-based AccessControlContext for doPrivileged                    
                </comment>
                <comment line="414">
                    call doPrivileged and push this new context on the stack                    
                </comment>
                <declaration name="sm" type="java.lang.SecurityManager" line="402"/>
                <scope line="403"/>
                <declaration name="currentAcc" type="AccessControlContext" line="412"/>
            </method>
            <javadoc line="420">
                Perform privileged work as a particular &lt;code&gt;Subject&lt;/code&gt;.
                  &lt;p&gt; This method behaves exactly as &lt;code&gt;Subject.doAs&lt;/code&gt;,
                  except that instead of retrieving the current Thread&apos;s
                  &lt;code&gt;AccessControlContext&lt;/code&gt;, it uses the provided
                  &lt;code&gt;AccessControlContext&lt;/code&gt;.  If the provided
                  &lt;code&gt;AccessControlContext&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;,
                  this method instantiates a new &lt;code&gt;AccessControlContext&lt;/code&gt;
                  with an empty collection of ProtectionDomains.
                  &lt;p&gt;                
                <param>
                    subject the <code>Subject</code> that the specified
                      <code>action</code> will run as.  This parameter
                      may be <code>null</code>. <p>                    
                </param>
                <param>
                    action the code to be run as the specified
                      <code>Subject</code>. <p>                    
                </param>
                <param>
                    acc the <code>AccessControlContext</code> to be tied to the
                      specified <i>subject</i> and <i>action</i>. <p>                    
                </param>
                <return>
                    the value returned by the PrivilegedAction's
                      <code>run</code> method.                    
                </return>
                <exception>
                    NullPointerException if the <code>PrivilegedAction</code>
                      is <code>null</code>. <p>                    
                </exception>
                <exception>
                    SecurityException if the caller does not have permission
                      to invoke this method.                    
                </exception>
            </javadoc>
            <method name="doAsPrivileged" type="T" line="454">
                <params>
                    <param name="subject" type="Subject"/>
                    <param name="action" type="java.security.PrivilegedAction<T>"/>
                    <param name="acc" type="java.security.AccessControlContext"/>
                </params>
                <comment line="465">
                    set up the new Subject-based AccessControlContext                    
                </comment>
                <comment line="466">
                    for doPrivileged                    
                </comment>
                <comment line="472">
                    call doPrivileged and push this new context on the stack                    
                </comment>
                <declaration name="sm" type="java.lang.SecurityManager" line="456"/>
                <scope line="457"/>
                <declaration name="callerAcc" type="AccessControlContext" line="467"/>
            </method>
            <javadoc line="478">
                Perform privileged work as a particular &lt;code&gt;Subject&lt;/code&gt;.
                  &lt;p&gt; This method behaves exactly as &lt;code&gt;Subject.doAs&lt;/code&gt;,
                  except that instead of retrieving the current Thread&apos;s
                  &lt;code&gt;AccessControlContext&lt;/code&gt;, it uses the provided
                  &lt;code&gt;AccessControlContext&lt;/code&gt;.  If the provided
                  &lt;code&gt;AccessControlContext&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;,
                  this method instantiates a new &lt;code&gt;AccessControlContext&lt;/code&gt;
                  with an empty collection of ProtectionDomains.
                  &lt;p&gt;                
                <param>
                    subject the <code>Subject</code> that the specified
                      <code>action</code> will run as.  This parameter
                      may be <code>null</code>. <p>                    
                </param>
                <param>
                    action the code to be run as the specified
                      <code>Subject</code>. <p>                    
                </param>
                <param>
                    acc the <code>AccessControlContext</code> to be tied to the
                      specified <i>subject</i> and <i>action</i>. <p>                    
                </param>
                <return>
                    the value returned by the
                      PrivilegedExceptionAction's <code>run</code> method.                    
                </return>
                <exception>
                    PrivilegedActionException if the
                      <code>PrivilegedExceptionAction.run</code>
                      method throws a checked exception. <p>                    
                </exception>
                <exception>
                    NullPointerException if the specified
                      <code>PrivilegedExceptionAction</code> is
                      <code>null</code>. <p>                    
                </exception>
                <exception>
                    SecurityException if the caller does not have permission
                      to invoke this method.                    
                </exception>
            </javadoc>
            <method name="doAsPrivileged" type="T" line="518">
                <params>
                    <param name="subject" type="Subject"/>
                    <param name="action" type="java.security.PrivilegedExceptionAction<T>"/>
                    <param name="acc" type="java.security.AccessControlContext"/>
                </params>
                <comment line="529">
                    set up the new Subject-based AccessControlContext for doPrivileged                    
                </comment>
                <comment line="535">
                    call doPrivileged and push this new context on the stack                    
                </comment>
                <declaration name="sm" type="java.lang.SecurityManager" line="520"/>
                <scope line="521"/>
                <declaration name="callerAcc" type="AccessControlContext" line="530"/>
            </method>
            <method name="createContext" type="AccessControlContext" line="542">
                <params>
                    <param name="subject" type="Subject"/>
                    <param name="acc" type="AccessControlContext"/>
                </params>
                <anonymous_class line="546">
                    <method name="run" type="AccessControlContext" line="547"/>
                </anonymous_class>
            </method>
            <javadoc line="558">
                Return the &lt;code&gt;Set&lt;/code&gt; of Principals associated with this
                  &lt;code&gt;Subject&lt;/code&gt;.  Each &lt;code&gt;Principal&lt;/code&gt; represents
                  an identity for this &lt;code&gt;Subject&lt;/code&gt;.
                  &lt;p&gt; The returned &lt;code&gt;Set&lt;/code&gt; is backed by this Subject&apos;s
                  internal &lt;code&gt;Principal&lt;/code&gt; &lt;code&gt;Set&lt;/code&gt;.  Any modification
                  to the returned &lt;code&gt;Set&lt;/code&gt; affects the internal
                  &lt;code&gt;Principal&lt;/code&gt; &lt;code&gt;Set&lt;/code&gt; as well.
                  &lt;p&gt;                
                <return>
                    The <code>Set</code> of Principals associated with this
                      <code>Subject</code>.                    
                </return>
            </javadoc>
            <method name="getPrincipals" type="Set<Principal>" line="573">
                <comment line="575">
                    always return an empty Set instead of null                    
                </comment>
                <comment line="576">
                    so LoginModules can add to the Set if necessary                    
                </comment>
            </method>
            <javadoc line="580">
                Return a &lt;code&gt;Set&lt;/code&gt; of Principals associated with this
                  &lt;code&gt;Subject&lt;/code&gt; that are instances or subclasses of the specified
                  &lt;code&gt;Class&lt;/code&gt;.
                  &lt;p&gt; The returned &lt;code&gt;Set&lt;/code&gt; is not backed by this Subject&apos;s
                  internal &lt;code&gt;Principal&lt;/code&gt; &lt;code&gt;Set&lt;/code&gt;.  A new
                  &lt;code&gt;Set&lt;/code&gt; is created and returned for each method invocation.
                  Modifications to the returned &lt;code&gt;Set&lt;/code&gt;
                  will not affect the internal &lt;code&gt;Principal&lt;/code&gt; &lt;code&gt;Set&lt;/code&gt;.
                  &lt;p&gt;                
                <param>
                    c the returned <code>Set</code> of Principals will all be
                      instances of this class.                    
                </param>
                <return>
                    a <code>Set</code> of Principals that are instances of the
                      specified <code>Class</code>.                    
                </return>
                <exception>
                    NullPointerException if the specified <code>Class</code>
                      is <code>null</code>.                    
                </exception>
            </javadoc>
            <method name="getPrincipals" type="Set<T>" line="602">
                <params>
                    <param name="c" type="Class<T>"/>
                </params>
                <comment line="608">
                    always return an empty Set instead of null                    
                </comment>
                <comment line="609">
                    so LoginModules can add to the Set if necessary                    
                </comment>
            </method>
            <javadoc line="613">
                Return the &lt;code&gt;Set&lt;/code&gt; of public credentials held by this
                  &lt;code&gt;Subject&lt;/code&gt;.
                  &lt;p&gt; The returned &lt;code&gt;Set&lt;/code&gt; is backed by this Subject&apos;s
                  internal public Credential &lt;code&gt;Set&lt;/code&gt;.  Any modification
                  to the returned &lt;code&gt;Set&lt;/code&gt; affects the internal public
                  Credential &lt;code&gt;Set&lt;/code&gt; as well.
                  &lt;p&gt;                
                <return>
                    A <code>Set</code> of public credentials held by this
                      <code>Subject</code>.                    
                </return>
            </javadoc>
            <method name="getPublicCredentials" type="Set<Object>" line="627">
                <comment line="629">
                    always return an empty Set instead of null                    
                </comment>
                <comment line="630">
                    so LoginModules can add to the Set if necessary                    
                </comment>
            </method>
            <javadoc line="634">
                Return the &lt;code&gt;Set&lt;/code&gt; of private credentials held by this
                  &lt;code&gt;Subject&lt;/code&gt;.
                  &lt;p&gt; The returned &lt;code&gt;Set&lt;/code&gt; is backed by this Subject&apos;s
                  internal private Credential &lt;code&gt;Set&lt;/code&gt;.  Any modification
                  to the returned &lt;code&gt;Set&lt;/code&gt; affects the internal private
                  Credential &lt;code&gt;Set&lt;/code&gt; as well.
                  &lt;p&gt; A caller requires permissions to access the Credentials
                  in the returned &lt;code&gt;Set&lt;/code&gt;, or to modify the
                  &lt;code&gt;Set&lt;/code&gt; itself.  A &lt;code&gt;SecurityException&lt;/code&gt;
                  is thrown if the caller does not have the proper permissions.
                  &lt;p&gt; While iterating through the &lt;code&gt;Set&lt;/code&gt;,
                  a &lt;code&gt;SecurityException&lt;/code&gt; is thrown
                  if the caller does not have permission to access a
                  particular Credential.  The &lt;code&gt;Iterator&lt;/code&gt;
                  is nevertheless advanced to next element in the &lt;code&gt;Set&lt;/code&gt;.
                  &lt;p&gt;                
                <return>
                    A <code>Set</code> of private credentials held by this
                      <code>Subject</code>.                    
                </return>
            </javadoc>
            <method name="getPrivateCredentials" type="Set<Object>" line="659">
                <comment line="661">
                    XXX                    
                </comment>
                <comment line="662">
                    we do not need a security check for                    
                </comment>
                <comment line="663">
                    AuthPermission(getPrivateCredentials)                    
                </comment>
                <comment line="664">
                    because we already restrict access to private credentials                    
                </comment>
                <comment line="665">
                    via the PrivateCredentialPermission.  all the extra AuthPermission                    
                </comment>
                <comment line="666">
                    would do is protect the set operations themselves                    
                </comment>
                <comment line="667">
                    (like size()), which don&apos;t seem security-sensitive.                    
                </comment>
                <comment line="669">
                    always return an empty Set instead of null                    
                </comment>
                <comment line="670">
                    so LoginModules can add to the Set if necessary                    
                </comment>
            </method>
            <javadoc line="674">
                Return a &lt;code&gt;Set&lt;/code&gt; of public credentials associated with this
                  &lt;code&gt;Subject&lt;/code&gt; that are instances or subclasses of the specified
                  &lt;code&gt;Class&lt;/code&gt;.
                  &lt;p&gt; The returned &lt;code&gt;Set&lt;/code&gt; is not backed by this Subject&apos;s
                  internal public Credential &lt;code&gt;Set&lt;/code&gt;.  A new
                  &lt;code&gt;Set&lt;/code&gt; is created and returned for each method invocation.
                  Modifications to the returned &lt;code&gt;Set&lt;/code&gt;
                  will not affect the internal public Credential &lt;code&gt;Set&lt;/code&gt;.
                  &lt;p&gt;                
                <param>
                    c the returned <code>Set</code> of public credentials will all be
                      instances of this class.                    
                </param>
                <return>
                    a <code>Set</code> of public credentials that are instances
                      of the  specified <code>Class</code>.                    
                </return>
                <exception>
                    NullPointerException if the specified <code>Class</code>
                      is <code>null</code>.                    
                </exception>
            </javadoc>
            <method name="getPublicCredentials" type="Set<T>" line="696">
                <params>
                    <param name="c" type="Class<T>"/>
                </params>
                <comment line="702">
                    always return an empty Set instead of null                    
                </comment>
                <comment line="703">
                    so LoginModules can add to the Set if necessary                    
                </comment>
            </method>
            <javadoc line="707">
                Return a &lt;code&gt;Set&lt;/code&gt; of private credentials associated with this
                  &lt;code&gt;Subject&lt;/code&gt; that are instances or subclasses of the specified
                  &lt;code&gt;Class&lt;/code&gt;.
                  &lt;p&gt; The caller must have permission to access all of the
                  requested Credentials, or a &lt;code&gt;SecurityException&lt;/code&gt;
                  will be thrown.
                  &lt;p&gt; The returned &lt;code&gt;Set&lt;/code&gt; is not backed by this Subject&apos;s
                  internal private Credential &lt;code&gt;Set&lt;/code&gt;.  A new
                  &lt;code&gt;Set&lt;/code&gt; is created and returned for each method invocation.
                  Modifications to the returned &lt;code&gt;Set&lt;/code&gt;
                  will not affect the internal private Credential &lt;code&gt;Set&lt;/code&gt;.
                  &lt;p&gt;                
                <param>
                    c the returned <code>Set</code> of private credentials will all be
                      instances of this class.                    
                </param>
                <return>
                    a <code>Set</code> of private credentials that are instances
                      of the  specified <code>Class</code>.                    
                </return>
                <exception>
                    NullPointerException if the specified <code>Class</code>
                      is <code>null</code>.                    
                </exception>
            </javadoc>
            <method name="getPrivateCredentials" type="Set<T>" line="733">
                <params>
                    <param name="c" type="Class<T>"/>
                </params>
                <comment line="735">
                    XXX                    
                </comment>
                <comment line="736">
                    we do not need a security check for                    
                </comment>
                <comment line="737">
                    AuthPermission(getPrivateCredentials)                    
                </comment>
                <comment line="738">
                    because we already restrict access to private credentials                    
                </comment>
                <comment line="739">
                    via the PrivateCredentialPermission.  all the extra AuthPermission                    
                </comment>
                <comment line="740">
                    would do is protect the set operations themselves                    
                </comment>
                <comment line="741">
                    (like size()), which don&apos;t seem security-sensitive.                    
                </comment>
                <comment line="747">
                    always return an empty Set instead of null                    
                </comment>
                <comment line="748">
                    so LoginModules can add to the Set if necessary                    
                </comment>
            </method>
            <javadoc line="752">
                Compares the specified Object with this &lt;code&gt;Subject&lt;/code&gt;
                  for equality.  Returns true if the given object is also a Subject
                  and the two &lt;code&gt;Subject&lt;/code&gt; instances are equivalent.
                  More formally, two &lt;code&gt;Subject&lt;/code&gt; instances are
                  equal if their &lt;code&gt;Principal&lt;/code&gt; and &lt;code&gt;Credential&lt;/code&gt;
                  Sets are equal.
                  &lt;p&gt;                
                <param>
                    o Object to be compared for equality with this
                      <code>Subject</code>.                    
                </param>
                <return>
                    true if the specified Object is equal to this
                      <code>Subject</code>.                    
                </return>
                <exception>
                    SecurityException if the caller does not have permission
                      to access the private credentials for this <code>Subject</code>,
                      or if the caller does not have permission to access the
                      private credentials for the provided <code>Subject</code>.                    
                </exception>
            </javadoc>
            <method name="equals" type="boolean" line="773">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <comment line="785">
                    check the principal and credential sets                    
                </comment>
                <comment line="788">
                    avoid deadlock from dual locks                    
                </comment>
                <comment line="797">
                    avoid deadlock from dual locks                    
                </comment>
                <comment line="806">
                    avoid deadlock from dual locks                    
                </comment>
                <scope line="781">
                    <declaration name="that" type="Subject" line="783"/>
                    <declaration name="thatPrincipals" type="Set&lt;Principal&gt;" line="786"/>
                    <scope line="787"/>
                    <scope line="791"/>
                    <declaration name="thatPubCredentials" type="Set&lt;Object&gt;" line="795"/>
                    <scope line="796"/>
                    <scope line="800"/>
                    <declaration name="thatPrivCredentials" type="Set&lt;Object&gt;" line="804"/>
                    <scope line="805"/>
                    <scope line="809"/>
                </scope>
            </method>
            <javadoc line="817">
                Return the String representation of this &lt;code&gt;Subject&lt;/code&gt;.
                  &lt;p&gt;                
                <return>
                    the String representation of this <code>Subject</code>.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="824"/>
            <javadoc line="828">
                package private convenience method to print out the Subject
                  without firing off a security check when trying to access
                  the Private Credentials                
            </javadoc>
            <method name="toString" type="String" line="833">
                <params>
                    <param name="includePrivateCredentials" type="boolean"/>
                </params>
                <declaration name="s" type="String" line="835"/>
                <declaration name="suffix" type="String" line="836"/>
                <scope line="838">
                    <declaration name="pI" type="Iterator&lt;Principal&gt;" line="839"/>
                    <scope line="840">
                        <declaration name="p" type="Principal" line="841"/>
                    </scope>
                </scope>
                <scope line="847">
                    <declaration name="pI" type="Iterator&lt;Object&gt;" line="848"/>
                    <scope line="849">
                        <declaration name="o" type="Object" line="850"/>
                    </scope>
                </scope>
                <scope line="857">
                    <scope line="858">
                        <declaration name="pI" type="Iterator&lt;Object&gt;" line="859"/>
                        <scope line="860">
                            <scope line="861">
                                <declaration name="o" type="Object" line="862"/>
                            </scope>
                            <scope line="867"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="878">
                Returns a hashcode for this &lt;code&gt;Subject&lt;/code&gt;.
                  &lt;p&gt;                
                <return>
                    a hashcode for this <code>Subject</code>.                    
                </return>
                <exception>
                    SecurityException if the caller does not have permission
                      to access this Subject's private credentials.                    
                </exception>
            </javadoc>
            <method name="hashCode" type="int" line="888">
                <comment line="890">
                    The hashcode is derived exclusive or-ing the
                     hashcodes of this Subject&apos;s Principals and credentials.
                    
                     If a particular credential was destroyed
                     (&lt;code&gt;credential.hashCode()&lt;code&gt; throws an
                     &lt;code&gt;IllegalStateException&lt;code&gt;),
                     the hashcode for that credential is derived via:
                     &lt;code&gt;credential.getClass().toString().hashCode()&lt;code&gt;.                    
                </comment>
                <declaration name="hashCode" type="int" line="901"/>
                <scope line="903">
                    <declaration name="pIterator" type="Iterator&lt;Principal&gt;" line="904"/>
                    <scope line="905">
                        <declaration name="p" type="Principal" line="906"/>
                    </scope>
                </scope>
                <scope line="911">
                    <declaration name="pubCIterator" type="Iterator&lt;Object&gt;" line="912"/>
                    <scope line="913"/>
                </scope>
            </method>
            <javadoc line="920">
                get a credential&apos;s hashcode                
            </javadoc>
            <method name="getCredHashCode" type="int" line="923">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <scope line="924"/>
                <scope line="926"/>
            </method>
            <javadoc line="931">
                Writes this object out to a stream (i.e., serializes it).                
            </javadoc>
            <method name="writeObject" type="void" line="935">
                <params>
                    <param name="oos" type="java.io.ObjectOutputStream"/>
                </params>
                <scope line="936"/>
            </method>
            <javadoc line="941">
                Reads this object from a stream (i.e., deserializes it)                
            </javadoc>
            <method name="readObject" type="void" line="945">
                <params>
                    <param name="s" type="java.io.ObjectInputStream"/>
                </params>
                <comment line="949">
                    The Credential &lt;code&gt;Set&lt;/code&gt; is not serialized, but we do not                    
                </comment>
                <comment line="950">
                    want the default deserialization routine to set it to null.                    
                </comment>
            </method>
            <class name="SecureSet" line="957">
                <type_params>
                    <type_param name="E"/>
                </type_params>
                <extends class="AbstractSet">
                    <type_params>
                        <type_param name="E"/>
                    </type_params>
                </extends>
                <implements interface="java.io.Serializable"/>
                <javadoc line="957">
                    Prevent modifications unless caller has permission.                    
                    <serial>
                        include                        
                    </serial>
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="966"/>
                <declaration name="serialPersistentFields" type="ObjectStreamField[]" line="968"/>
                <javadoc line="968">
                    @serialField this$0 Subject The outer Subject instance.                    
                    <serialField>
                        elements LinkedList The elements in this set.                        
                    </serialField>
                </javadoc>
                <declaration name="subject" type="Subject" line="978"/>
                <declaration name="elements" type="LinkedList&lt;E&gt;" line="979"/>
                <declaration name="which" type="int" line="981"/>
                <javadoc line="981">
                    @serial An integer identifying the type of objects contained
                      in this set.  If &lt;code&gt;which == 1&lt;/code&gt;,
                      this is a Principal set and all the elements are
                      of type &lt;code&gt;java.security.Principal&lt;/code&gt;.
                      If &lt;code&gt;which == 2&lt;/code&gt;, this is a public credential
                      set and all the elements are of type &lt;code&gt;Object&lt;/code&gt;.
                      If &lt;code&gt;which == 3&lt;/code&gt;, this is a private credential
                      set and all the elements are of type &lt;code&gt;Object&lt;/code&gt;.                    
                </javadoc>
                <method name="SecureSet" type="constructor" line="993">
                    <params>
                        <param name="subject" type="Subject"/>
                        <param name="which" type="int"/>
                    </params>
                </method>
                <method name="SecureSet" type="constructor" line="999">
                    <params>
                        <param name="subject" type="Subject"/>
                        <param name="which" type="int"/>
                        <param name="set" type="Set<? extends E>"/>
                    </params>
                </method>
                <method name="size" type="int" line="1005"/>
                <method name="iterator" type="Iterator<E>" line="1009">
                    <declaration name="list" type="LinkedList&lt;E&gt;" line="1010"/>
                    <anonymous_class line="1011">
                        <declaration name="i" type="ListIterator&lt;E&gt;" line="1012"/>
                        <method name="hasNext" type="boolean" line="1014"/>
                        <method name="next" type="E" line="1016">
                            <scope line="1017"/>
                            <declaration name="sm" type="SecurityManager" line="1021"/>
                            <scope line="1022">
                                <scope line="1023"/>
                                <scope line="1027"/>
                            </scope>
                        </method>
                        <method name="remove" type="void" line="1035">
                            <scope line="1037"/>
                            <declaration name="sm" type="java.lang.SecurityManager" line="1042"/>
                            <scope line="1043"/>
                        </method>
                    </anonymous_class>
                </method>
                <method name="add" type="boolean" line="1061">
                    <params>
                        <param name="o" type="E"/>
                    </params>
                    <comment line="1091">
                        ok to add Objects of any kind to credential sets                        
                    </comment>
                    <comment line="1095">
                        check for duplicates                        
                    </comment>
                    <scope line="1063"/>
                    <declaration name="sm" type="java.lang.SecurityManager" line="1068"/>
                    <scope line="1069"/>
                    <scope line="1085"/>
                </method>
                <method name="remove" type="boolean" line="1102">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <declaration name="e" type="Iterator&lt;E&gt;" line="1104"/>
                    <scope line="1105">
                        <declaration name="next" type="E" line="1106"/>
                        <scope line="1107"/>
                        <scope line="1109">
                            <anonymous_class line="1111">
                                <method name="run" type="E" line="1112"/>
                            </anonymous_class>
                        </scope>
                        <scope line="1118">
                            <scope line="1119"/>
                        </scope>
                        <scope line="1123"/>
                    </scope>
                </method>
                <method name="contains" type="boolean" line="1131">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <comment line="1139">
                        For private credentials:                        
                    </comment>
                    <comment line="1140">
                        If the caller does not have read permission for                        
                    </comment>
                    <comment line="1141">
                        for o.getClass(), we throw a SecurityException.                        
                    </comment>
                    <comment line="1142">
                        Otherwise we check the private cred set to see whether                        
                    </comment>
                    <comment line="1143">
                        it contains the Object                        
                    </comment>
                    <declaration name="e" type="Iterator&lt;E&gt;" line="1132"/>
                    <scope line="1133">
                        <declaration name="next" type="E" line="1134"/>
                        <scope line="1135"/>
                        <scope line="1137">
                            <declaration name="sm" type="SecurityManager" line="1145"/>
                            <scope line="1146"/>
                            <anonymous_class line="1152">
                                <method name="run" type="E" line="1153"/>
                            </anonymous_class>
                        </scope>
                        <scope line="1159">
                            <scope line="1160"/>
                        </scope>
                        <scope line="1163"/>
                    </scope>
                </method>
                <method name="removeAll" type="boolean" line="1170">
                    <params>
                        <param name="c" type="Collection<?>"/>
                    </params>
                    <declaration name="modified" type="boolean" line="1172"/>
                    <declaration name="e" type="Iterator&lt;E&gt;" line="1173"/>
                    <scope line="1174">
                        <declaration name="next" type="E" line="1175"/>
                        <scope line="1176"/>
                        <scope line="1178">
                            <anonymous_class line="1180">
                                <method name="run" type="E" line="1181"/>
                            </anonymous_class>
                        </scope>
                        <declaration name="ce" type="Iterator&lt;?&gt;" line="1187"/>
                        <scope line="1188">
                            <declaration name="o" type="Object" line="1189"/>
                            <scope line="1190">
                                <scope line="1191"/>
                            </scope>
                            <scope line="1196"/>
                        </scope>
                    </scope>
                </method>
                <method name="retainAll" type="boolean" line="1206">
                    <params>
                        <param name="c" type="Collection<?>"/>
                    </params>
                    <declaration name="modified" type="boolean" line="1208"/>
                    <declaration name="retain" type="boolean" line="1209"/>
                    <declaration name="e" type="Iterator&lt;E&gt;" line="1210"/>
                    <scope line="1211">
                        <declaration name="next" type="E" line="1213"/>
                        <scope line="1214"/>
                        <scope line="1216">
                            <anonymous_class line="1218">
                                <method name="run" type="E" line="1219"/>
                            </anonymous_class>
                        </scope>
                        <declaration name="ce" type="Iterator&lt;?&gt;" line="1225"/>
                        <scope line="1226">
                            <declaration name="o" type="Object" line="1227"/>
                            <scope line="1228">
                                <scope line="1229"/>
                            </scope>
                            <scope line="1233"/>
                        </scope>
                        <scope line="1239"/>
                    </scope>
                </method>
                <method name="clear" type="void" line="1248">
                    <declaration name="e" type="Iterator&lt;E&gt;" line="1249"/>
                    <scope line="1250">
                        <declaration name="next" type="E" line="1251"/>
                        <scope line="1252"/>
                        <scope line="1254">
                            <anonymous_class line="1256">
                                <method name="run" type="E" line="1257"/>
                            </anonymous_class>
                        </scope>
                    </scope>
                </method>
                <javadoc line="1266">
                    Writes this object out to a stream (i.e., serializes it).
                      &lt;p&gt;                    
                    <serialData>
                        If this is a private credential set,
                          a security check is performed to ensure that
                          the caller has permission to access each credential
                          in the set.  If the security check passes,
                          the set is serialized.                        
                    </serialData>
                </javadoc>
                <method name="writeObject" type="void" line="1278">
                    <params>
                        <param name="oos" type="java.io.ObjectOutputStream"/>
                    </params>
                    <comment line="1281">
                        check permissions before serializing                        
                    </comment>
                    <scope line="1280">
                        <declaration name="i" type="Iterator&lt;E&gt;" line="1282"/>
                        <scope line="1283"/>
                    </scope>
                    <declaration name="fields" type="ObjectOutputStream.PutField" line="1287"/>
                </method>
                <method name="readObject" type="void" line="1296">
                    <params>
                        <param name="ois" type="ObjectInputStream"/>
                    </params>
                    <declaration name="fields" type="ObjectInputStream.GetField" line="1297"/>
                </method>
            </class>
            <class name="ClassSet" line="1304">
                <type_params>
                    <type_param name="T"/>
                </type_params>
                <extends class="AbstractSet">
                    <type_params>
                        <type_param name="T"/>
                    </type_params>
                </extends>
                <javadoc line="1304">
                    This class implements a &lt;code&gt;Set&lt;/code&gt; which returns only
                      members that are an instance of a specified Class.                    
                </javadoc>
                <declaration name="which" type="int" line="1310"/>
                <declaration name="c" type="Class&lt;T&gt;" line="1311"/>
                <declaration name="set" type="Set&lt;T&gt;" line="1312"/>
                <method name="ClassSet" type="constructor" line="1314">
                    <params>
                        <param name="which" type="int"/>
                        <param name="c" type="Class<T>"/>
                    </params>
                    <scope line="1321"/>
                    <scope line="1324"/>
                    <scope line="1327"/>
                </method>
                <method name="populateSet" type="void" line="1332">
                    <comment line="1346">
                        Check whether the caller has permisson to get                        
                    </comment>
                    <comment line="1347">
                        credentials of Class c                        
                    </comment>
                    <comment line="1365">
                        Check permission for private creds                        
                    </comment>
                    <declaration name="iterator" type="Iterator&lt;?&gt;" line="1333"/>
                    <scope line="1349">
                        <declaration name="next" type="Object" line="1350"/>
                        <scope line="1351">
                            <anonymous_class line="1353">
                                <method name="run" type="Object" line="1354"/>
                            </anonymous_class>
                        </scope>
                        <scope line="1358"/>
                        <scope line="1361">
                            <scope line="1362"/>
                            <scope line="1364">
                                <declaration name="sm" type="SecurityManager" line="1366"/>
                                <scope line="1367"/>
                            </scope>
                        </scope>
                    </scope>
                </method>
                <method name="size" type="int" line="1378"/>
                <method name="iterator" type="Iterator<T>" line="1382"/>
                <method name="add" type="boolean" line="1386">
                    <params>
                        <param name="o" type="T"/>
                    </params>
                    <scope line="1388">
                        <declaration name="form" type="MessageFormat" line="1389"/>
                        <declaration name="source" type="Object[]" line="1391"/>
                    </scope>
                </method>
            </class>
            <class name="AuthPermissionHolder" line="1399">
                <declaration name="DO_AS_PERMISSION" type="AuthPermission" line="1400"/>
                <declaration name="DO_AS_PRIVILEGED_PERMISSION" type="AuthPermission" line="1403"/>
                <declaration name="SET_READ_ONLY_PERMISSION" type="AuthPermission" line="1406"/>
                <declaration name="GET_SUBJECT_PERMISSION" type="AuthPermission" line="1409"/>
                <declaration name="MODIFY_PRINCIPALS_PERMISSION" type="AuthPermission" line="1412"/>
                <declaration name="MODIFY_PUBLIC_CREDENTIALS_PERMISSION" type="AuthPermission" line="1415"/>
                <declaration name="MODIFY_PRIVATE_CREDENTIALS_PERMISSION" type="AuthPermission" line="1418"/>
            </class>
        </class>
    </source>