<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.security.auth">
        <import package="java.util"/>
        <import package="java.io"/>
        <import package="java.lang.reflect"/>
        <import package="java.text.MessageFormat"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.AccessControlContext"/>
        <import package="java.security.DomainCombiner"/>
        <import package="java.security.Permission"/>
        <import package="java.security.PermissionCollection"/>
        <import package="java.security.Principal"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.security.PrivilegedExceptionAction"/>
        <import package="java.security.PrivilegedActionException"/>
        <import package="java.security.ProtectionDomain"/>
        <import package="sun.security.util.ResourcesMgr"/>
        <class name="Subject" line="17">
            <implements interface="java.io.Serializable"/>
            <javadoc line="17">
                &lt;p&gt; A &lt;code&gt;Subject&lt;/code&gt; represents a grouping of related information
                  for a single entity, such as a person.
                  Such information includes the Subject&apos;s identities as well as
                  its security-related attributes
                  (passwords and cryptographic keys, for example).
                  &lt;p&gt; Subjects may potentially have multiple identities.
                  Each identity is represented as a &lt;code&gt;Principal&lt;/code&gt;
                  within the &lt;code&gt;Subject&lt;/code&gt;.  Principals simply bind names to a
                  &lt;code&gt;Subject&lt;/code&gt;.  For example, a &lt;code&gt;Subject&lt;/code&gt; that happens
                  to be a person, Alice, might have two Principals:
                  one which binds &quot;Alice Bar&quot;, the name on her driver license,
                  to the &lt;code&gt;Subject&lt;/code&gt;, and another which binds,
                  &quot;999-99-9999&quot;, the number on her student identification card,
                  to the &lt;code&gt;Subject&lt;/code&gt;.  Both Principals refer to the same
                  &lt;code&gt;Subject&lt;/code&gt; even though each has a different name.
                  &lt;p&gt; A &lt;code&gt;Subject&lt;/code&gt; may also own security-related attributes,
                  which are referred to as credentials.
                  Sensitive credentials that require special protection, such as
                  private cryptographic keys, are stored within a private credential
                  &lt;code&gt;Set&lt;/code&gt;.  Credentials intended to be shared, such as
                  public key certificates or Kerberos server tickets are stored
                  within a public credential &lt;code&gt;Set&lt;/code&gt;.  Different permissions
                  are required to access and modify the different credential Sets.
                  &lt;p&gt; To retrieve all the Principals associated with a &lt;code&gt;Subject&lt;/code&gt;,
                  invoke the &lt;code&gt;getPrincipals&lt;/code&gt; method.  To retrieve
                  all the public or private credentials belonging to a &lt;code&gt;Subject&lt;/code&gt;,
                  invoke the &lt;code&gt;getPublicCredentials&lt;/code&gt; method or
                  &lt;code&gt;getPrivateCredentials&lt;/code&gt; method, respectively.
                  To modify the returned &lt;code&gt;Set&lt;/code&gt; of Principals and credentials,
                  use the methods defined in the &lt;code&gt;Set&lt;/code&gt; class.
                  For example:
                  &lt;pre&gt;
                  Subject subject;
                  Principal principal;
                  Object credential;
                  // add a Principal and credential to the Subject
                  subject.getPrincipals().add(principal);
                  subject.getPublicCredentials().add(credential);
                  &lt;/pre&gt;
                  &lt;p&gt; This &lt;code&gt;Subject&lt;/code&gt; class implements &lt;code&gt;Serializable&lt;/code&gt;.
                  While the Principals associated with the &lt;code&gt;Subject&lt;/code&gt; are serialized,
                  the credentials associated with the &lt;code&gt;Subject&lt;/code&gt; are not.
                  Note that the &lt;code&gt;java.security.Principal&lt;/code&gt; class
                  does not implement &lt;code&gt;Serializable&lt;/code&gt;.  Therefore all concrete
                  &lt;code&gt;Principal&lt;/code&gt; implementations associated with Subjects
                  must implement &lt;code&gt;Serializable&lt;/code&gt;.                
                <see>
                    java.security.Principal                    
                </see>
                <see>
                    java.security.DomainCombiner                    
                </see>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="68"/>
            <declaration name="principals" type="Set&amp;lt;Principal&amp;gt;" line="69"/>
            <javadoc line="69">
                A &lt;code&gt;Set&lt;/code&gt; that provides a view of all of this
                  Subject&apos;s Principals
                  &lt;p&gt;                
                <serial>
                    Each element in this set is a
                      &lt;code&gt;java.security.Principal&lt;/code&gt;.
                      The set is a &lt;code&gt;Subject.SecureSet&lt;/code&gt;.                    
                </serial>
            </javadoc>
            <declaration name="pubCredentials" type="Set&amp;lt;Object&amp;gt;" line="78"/>
            <javadoc line="78">
                Sets that provide a view of all of this
                  Subject&apos;s Credentials                
            </javadoc>
            <declaration name="privCredentials" type="Set&amp;lt;Object&amp;gt;" line="83"/>
            <declaration name="readOnly" type="boolean" line="84"/>
            <javadoc line="84">
                Whether this Subject is read-only                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="PRINCIPAL_SET" type="int" line="89"/>
            <declaration name="PUB_CREDENTIAL_SET" type="int" line="90"/>
            <declaration name="PRIV_CREDENTIAL_SET" type="int" line="91"/>
            <declaration name="NULL_PD_ARRAY" type="ProtectionDomain[]" line="92"/>
            <javadoc line="93">
                Create an instance of a &lt;code&gt;Subject&lt;/code&gt;
                  with an empty &lt;code&gt;Set&lt;/code&gt; of Principals and empty
                  Sets of public and private credentials.
                  &lt;p&gt; The newly constructed Sets check whether this &lt;code&gt;Subject&lt;/code&gt;
                  has been set read-only before permitting subsequent modifications.
                  The newly created Sets also prevent illegal modifications
                  by ensuring that callers have sufficient permissions.
                  &lt;p&gt; To modify the Principals Set, the caller must have
                  &lt;code&gt;AuthPermission(&quot;modifyPrincipals&quot;)&lt;/code&gt;.
                  To modify the public credential Set, the caller must have
                  &lt;code&gt;AuthPermission(&quot;modifyPublicCredentials&quot;)&lt;/code&gt;.
                  To modify the private credential Set, the caller must have
                  &lt;code&gt;AuthPermission(&quot;modifyPrivateCredentials&quot;)&lt;/code&gt;.                
            </javadoc>
            <method name="Subject" type="constructor" line="108"/>
            <javadoc line="113">
                Create an instance of a &lt;code&gt;Subject&lt;/code&gt; with
                  Principals and credentials.
                  &lt;p&gt; The Principals and credentials from the specified Sets
                  are copied into newly constructed Sets.
                  These newly created Sets check whether this &lt;code&gt;Subject&lt;/code&gt;
                  has been set read-only before permitting subsequent modifications.
                  The newly created Sets also prevent illegal modifications
                  by ensuring that callers have sufficient permissions.
                  &lt;p&gt; To modify the Principals Set, the caller must have
                  &lt;code&gt;AuthPermission(&quot;modifyPrincipals&quot;)&lt;/code&gt;.
                  To modify the public credential Set, the caller must have
                  &lt;code&gt;AuthPermission(&quot;modifyPublicCredentials&quot;)&lt;/code&gt;.
                  To modify the private credential Set, the caller must have
                  &lt;code&gt;AuthPermission(&quot;modifyPrivateCredentials&quot;)&lt;/code&gt;.
                  &lt;p&gt;                
                <param>
                    readOnly true if the &lt;code&gt;Subject&lt;/code&gt; is to be read-only,
                      and false otherwise. &lt;p&gt;                    
                </param>
                <param>
                    principals the &lt;code&gt;Set&lt;/code&gt; of Principals
                      to be associated with this &lt;code&gt;Subject&lt;/code&gt;. &lt;p&gt;                    
                </param>
                <param>
                    pubCredentials the &lt;code&gt;Set&lt;/code&gt; of public credentials
                      to be associated with this &lt;code&gt;Subject&lt;/code&gt;. &lt;p&gt;                    
                </param>
                <param>
                    privCredentials the &lt;code&gt;Set&lt;/code&gt; of private credentials
                      to be associated with this &lt;code&gt;Subject&lt;/code&gt;.                    
                </param>
                <exception>
                    NullPointerException if the specified
                      &lt;code&gt;principals&lt;/code&gt;, &lt;code&gt;pubCredentials&lt;/code&gt;,
                      or &lt;code&gt;privCredentials&lt;/code&gt; are &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="Subject" type="constructor" line="141">
                <params>
                    <param name="readOnly" type="boolean"/>
                    <param name="principals" type="Set&lt;? extends Principal&gt;"/>
                    <param name="pubCredentials" type="Set&lt;?&gt;"/>
                    <param name="privCredentials" type="Set&lt;?&gt;"/>
                </params>
            </method>
            <javadoc line="148">
                Set this &lt;code&gt;Subject&lt;/code&gt; to be read-only.
                  &lt;p&gt; Modifications (additions and removals) to this Subject&apos;s
                  &lt;code&gt;Principal&lt;/code&gt; &lt;code&gt;Set&lt;/code&gt; and
                  credential Sets will be disallowed.
                  The &lt;code&gt;destroy&lt;/code&gt; operation on this Subject&apos;s credentials will
                  still be permitted.
                  &lt;p&gt; Subsequent attempts to modify the Subject&apos;s &lt;code&gt;Principal&lt;/code&gt;
                  and credential Sets will result in an
                  &lt;code&gt;IllegalStateException&lt;/code&gt; being thrown.
                  Also, once a &lt;code&gt;Subject&lt;/code&gt; is read-only,
                  it can not be reset to being writable again.
                  &lt;p&gt;                
                <exception>
                    SecurityException if the caller does not have permission
                      to set this &lt;code&gt;Subject&lt;/code&gt; to be read-only.                    
                </exception>
            </javadoc>
            <method name="setReadOnly" type="void" line="164">
                <declaration name="sm" type="java.lang.SecurityManager" line="165"/>
                <scope line="166"/>
            </method>
            <javadoc line="171">
                Query whether this &lt;code&gt;Subject&lt;/code&gt; is read-only.
                  &lt;p&gt;                
                <return>
                    true if this &lt;code&gt;Subject&lt;/code&gt; is read-only, false otherwise.                    
                </return>
            </javadoc>
            <method name="isReadOnly" type="boolean" line="176"/>
            <javadoc line="179">
                Get the &lt;code&gt;Subject&lt;/code&gt; associated with the provided
                  &lt;code&gt;AccessControlContext&lt;/code&gt;.
                  &lt;p&gt; The &lt;code&gt;AccessControlContext&lt;/code&gt; may contain many
                  Subjects (from nested &lt;code&gt;doAs&lt;/code&gt; calls).
                  In this situation, the most recent &lt;code&gt;Subject&lt;/code&gt; associated
                  with the &lt;code&gt;AccessControlContext&lt;/code&gt; is returned.
                  &lt;p&gt;                
                <param>
                    acc the &lt;code&gt;AccessControlContext&lt;/code&gt; from which to retrieve
                      the &lt;code&gt;Subject&lt;/code&gt;.                    
                </param>
                <return>
                    the &lt;code&gt;Subject&lt;/code&gt; associated with the provided
                      &lt;code&gt;AccessControlContext&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt;
                      if no &lt;code&gt;Subject&lt;/code&gt; is associated
                      with the provided &lt;code&gt;AccessControlContext&lt;/code&gt;.                    
                </return>
                <exception>
                    SecurityException if the caller does not have permission
                      to get the &lt;code&gt;Subject&lt;/code&gt;. &lt;p&gt;                    
                </exception>
                <exception>
                    NullPointerException if the provided
                      &lt;code&gt;AccessControlContext&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="getSubject" type="Subject" line="198">
                <params>
                    <param name="acc" type="AccessControlContext"/>
                </params>
                <declaration name="sm" type="java.lang.SecurityManager" line="199"/>
                <scope line="200"/>
                <scope line="203"/>
                <anonymous_class line="206">
                    <method name="run" type="Subject" line="207">
                        <declaration name="dc" type="DomainCombiner" line="208"/>
                        <declaration name="sdc" type="SubjectDomainCombiner" line="210"/>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="216">
                Perform work as a particular &lt;code&gt;Subject&lt;/code&gt;.
                  &lt;p&gt; This method first retrieves the current Thread&apos;s
                  &lt;code&gt;AccessControlContext&lt;/code&gt; via
                  &lt;code&gt;AccessController.getContext&lt;/code&gt;,
                  and then instantiates a new &lt;code&gt;AccessControlContext&lt;/code&gt;
                  using the retrieved context along with a new
                  &lt;code&gt;SubjectDomainCombiner&lt;/code&gt; (constructed using
                  the provided &lt;code&gt;Subject&lt;/code&gt;).
                  Finally, this method invokes &lt;code&gt;AccessController.doPrivileged&lt;/code&gt;,
                  passing it the provided &lt;code&gt;PrivilegedAction&lt;/code&gt;,
                  as well as the newly constructed &lt;code&gt;AccessControlContext&lt;/code&gt;.
                  &lt;p&gt;                
                <param>
                    subject the &lt;code&gt;Subject&lt;/code&gt; that the specified
                      &lt;code&gt;action&lt;/code&gt; will run as.  This parameter
                      may be &lt;code&gt;null&lt;/code&gt;. &lt;p&gt;                    
                </param>
                <param>
                    action the code to be run as the specified
                      &lt;code&gt;Subject&lt;/code&gt;. &lt;p&gt;                    
                </param>
                <return>
                    the value returned by the PrivilegedAction&apos;s
                      &lt;code&gt;run&lt;/code&gt; method.                    
                </return>
                <exception>
                    NullPointerException if the &lt;code&gt;PrivilegedAction&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt;. &lt;p&gt;                    
                </exception>
                <exception>
                    SecurityException if the caller does not have permission
                      to invoke this method.                    
                </exception>
            </javadoc>
            <method name="doAs" type="T" line="241">
                <params>
                    <param name="subject" type="Subject"/>
                    <param name="action" type="java.security.PrivilegedAction&lt;T&gt;"/>
                </params>
                <declaration name="sm" type="java.lang.SecurityManager" line="242"/>
                <scope line="243"/>
                <declaration name="currentAcc" type="AccessControlContext" line="247"/>
            </method>
            <javadoc line="250">
                Perform work as a particular &lt;code&gt;Subject&lt;/code&gt;.
                  &lt;p&gt; This method first retrieves the current Thread&apos;s
                  &lt;code&gt;AccessControlContext&lt;/code&gt; via
                  &lt;code&gt;AccessController.getContext&lt;/code&gt;,
                  and then instantiates a new &lt;code&gt;AccessControlContext&lt;/code&gt;
                  using the retrieved context along with a new
                  &lt;code&gt;SubjectDomainCombiner&lt;/code&gt; (constructed using
                  the provided &lt;code&gt;Subject&lt;/code&gt;).
                  Finally, this method invokes &lt;code&gt;AccessController.doPrivileged&lt;/code&gt;,
                  passing it the provided &lt;code&gt;PrivilegedExceptionAction&lt;/code&gt;,
                  as well as the newly constructed &lt;code&gt;AccessControlContext&lt;/code&gt;.
                  &lt;p&gt;                
                <param>
                    subject the &lt;code&gt;Subject&lt;/code&gt; that the specified
                      &lt;code&gt;action&lt;/code&gt; will run as.  This parameter
                      may be &lt;code&gt;null&lt;/code&gt;. &lt;p&gt;                    
                </param>
                <param>
                    action the code to be run as the specified
                      &lt;code&gt;Subject&lt;/code&gt;. &lt;p&gt;                    
                </param>
                <return>
                    the value returned by the
                      PrivilegedExceptionAction&apos;s &lt;code&gt;run&lt;/code&gt; method.                    
                </return>
                <exception>
                    PrivilegedActionException if the
                      &lt;code&gt;PrivilegedExceptionAction.run&lt;/code&gt;
                      method throws a checked exception. &lt;p&gt;                    
                </exception>
                <exception>
                    NullPointerException if the specified
                      &lt;code&gt;PrivilegedExceptionAction&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;. &lt;p&gt;                    
                </exception>
                <exception>
                    SecurityException if the caller does not have permission
                      to invoke this method.                    
                </exception>
            </javadoc>
            <method name="doAs" type="T" line="279">
                <params>
                    <param name="subject" type="Subject"/>
                    <param name="action" type="java.security.PrivilegedExceptionAction&lt;T&gt;"/>
                </params>
                <declaration name="sm" type="java.lang.SecurityManager" line="280"/>
                <scope line="281"/>
                <declaration name="currentAcc" type="AccessControlContext" line="285"/>
            </method>
            <javadoc line="288">
                Perform privileged work as a particular &lt;code&gt;Subject&lt;/code&gt;.
                  &lt;p&gt; This method behaves exactly as &lt;code&gt;Subject.doAs&lt;/code&gt;,
                  except that instead of retrieving the current Thread&apos;s
                  &lt;code&gt;AccessControlContext&lt;/code&gt;, it uses the provided
                  &lt;code&gt;AccessControlContext&lt;/code&gt;.  If the provided
                  &lt;code&gt;AccessControlContext&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;,
                  this method instantiates a new &lt;code&gt;AccessControlContext&lt;/code&gt;
                  with an empty collection of ProtectionDomains.
                  &lt;p&gt;                
                <param>
                    subject the &lt;code&gt;Subject&lt;/code&gt; that the specified
                      &lt;code&gt;action&lt;/code&gt; will run as.  This parameter
                      may be &lt;code&gt;null&lt;/code&gt;. &lt;p&gt;                    
                </param>
                <param>
                    action the code to be run as the specified
                      &lt;code&gt;Subject&lt;/code&gt;. &lt;p&gt;                    
                </param>
                <param>
                    acc the &lt;code&gt;AccessControlContext&lt;/code&gt; to be tied to the
                      specified &lt;i&gt;subject&lt;/i&gt; and &lt;i&gt;action&lt;/i&gt;. &lt;p&gt;                    
                </param>
                <return>
                    the value returned by the PrivilegedAction&apos;s
                      &lt;code&gt;run&lt;/code&gt; method.                    
                </return>
                <exception>
                    NullPointerException if the &lt;code&gt;PrivilegedAction&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt;. &lt;p&gt;                    
                </exception>
                <exception>
                    SecurityException if the caller does not have permission
                      to invoke this method.                    
                </exception>
            </javadoc>
            <method name="doAsPrivileged" type="T" line="312">
                <params>
                    <param name="subject" type="Subject"/>
                    <param name="action" type="java.security.PrivilegedAction&lt;T&gt;"/>
                    <param name="acc" type="java.security.AccessControlContext"/>
                </params>
                <declaration name="sm" type="java.lang.SecurityManager" line="313"/>
                <scope line="314"/>
                <declaration name="callerAcc" type="AccessControlContext" line="318"/>
            </method>
            <javadoc line="321">
                Perform privileged work as a particular &lt;code&gt;Subject&lt;/code&gt;.
                  &lt;p&gt; This method behaves exactly as &lt;code&gt;Subject.doAs&lt;/code&gt;,
                  except that instead of retrieving the current Thread&apos;s
                  &lt;code&gt;AccessControlContext&lt;/code&gt;, it uses the provided
                  &lt;code&gt;AccessControlContext&lt;/code&gt;.  If the provided
                  &lt;code&gt;AccessControlContext&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;,
                  this method instantiates a new &lt;code&gt;AccessControlContext&lt;/code&gt;
                  with an empty collection of ProtectionDomains.
                  &lt;p&gt;                
                <param>
                    subject the &lt;code&gt;Subject&lt;/code&gt; that the specified
                      &lt;code&gt;action&lt;/code&gt; will run as.  This parameter
                      may be &lt;code&gt;null&lt;/code&gt;. &lt;p&gt;                    
                </param>
                <param>
                    action the code to be run as the specified
                      &lt;code&gt;Subject&lt;/code&gt;. &lt;p&gt;                    
                </param>
                <param>
                    acc the &lt;code&gt;AccessControlContext&lt;/code&gt; to be tied to the
                      specified &lt;i&gt;subject&lt;/i&gt; and &lt;i&gt;action&lt;/i&gt;. &lt;p&gt;                    
                </param>
                <return>
                    the value returned by the
                      PrivilegedExceptionAction&apos;s &lt;code&gt;run&lt;/code&gt; method.                    
                </return>
                <exception>
                    PrivilegedActionException if the
                      &lt;code&gt;PrivilegedExceptionAction.run&lt;/code&gt;
                      method throws a checked exception. &lt;p&gt;                    
                </exception>
                <exception>
                    NullPointerException if the specified
                      &lt;code&gt;PrivilegedExceptionAction&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;. &lt;p&gt;                    
                </exception>
                <exception>
                    SecurityException if the caller does not have permission
                      to invoke this method.                    
                </exception>
            </javadoc>
            <method name="doAsPrivileged" type="T" line="349">
                <params>
                    <param name="subject" type="Subject"/>
                    <param name="action" type="java.security.PrivilegedExceptionAction&lt;T&gt;"/>
                    <param name="acc" type="java.security.AccessControlContext"/>
                </params>
                <declaration name="sm" type="java.lang.SecurityManager" line="350"/>
                <scope line="351"/>
                <declaration name="callerAcc" type="AccessControlContext" line="355"/>
            </method>
            <method name="createContext" type="AccessControlContext" line="358">
                <params>
                    <param name="subject" type="Subject"/>
                    <param name="acc" type="AccessControlContext"/>
                </params>
                <anonymous_class line="359">
                    <method name="run" type="AccessControlContext" line="360"/>
                </anonymous_class>
            </method>
            <javadoc line="367">
                Return the &lt;code&gt;Set&lt;/code&gt; of Principals associated with this
                  &lt;code&gt;Subject&lt;/code&gt;.  Each &lt;code&gt;Principal&lt;/code&gt; represents
                  an identity for this &lt;code&gt;Subject&lt;/code&gt;.
                  &lt;p&gt; The returned &lt;code&gt;Set&lt;/code&gt; is backed by this Subject&apos;s
                  internal &lt;code&gt;Principal&lt;/code&gt; &lt;code&gt;Set&lt;/code&gt;.  Any modification
                  to the returned &lt;code&gt;Set&lt;/code&gt; affects the internal
                  &lt;code&gt;Principal&lt;/code&gt; &lt;code&gt;Set&lt;/code&gt; as well.
                  &lt;p&gt;                
                <return>
                    The &lt;code&gt;Set&lt;/code&gt; of Principals associated with this
                      &lt;code&gt;Subject&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getPrincipals" type="Set&lt;Principal&gt;" line="379"/>
            <javadoc line="382">
                Return a &lt;code&gt;Set&lt;/code&gt; of Principals associated with this
                  &lt;code&gt;Subject&lt;/code&gt; that are instances or subclasses of the specified
                  &lt;code&gt;Class&lt;/code&gt;.
                  &lt;p&gt; The returned &lt;code&gt;Set&lt;/code&gt; is not backed by this Subject&apos;s
                  internal &lt;code&gt;Principal&lt;/code&gt; &lt;code&gt;Set&lt;/code&gt;.  A new
                  &lt;code&gt;Set&lt;/code&gt; is created and returned for each method invocation.
                  Modifications to the returned &lt;code&gt;Set&lt;/code&gt;
                  will not affect the internal &lt;code&gt;Principal&lt;/code&gt; &lt;code&gt;Set&lt;/code&gt;.
                  &lt;p&gt;                
                <param>
                    c the returned &lt;code&gt;Set&lt;/code&gt; of Principals will all be
                      instances of this class.                    
                </param>
                <return>
                    a &lt;code&gt;Set&lt;/code&gt; of Principals that are instances of the
                      specified &lt;code&gt;Class&lt;/code&gt;.                    
                </return>
                <exception>
                    NullPointerException if the specified &lt;code&gt;Class&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="getPrincipals" type="Set&lt;T&gt;" line="399">
                <params>
                    <param name="c" type="Class&lt;T&gt;"/>
                </params>
            </method>
            <javadoc line="403">
                Return the &lt;code&gt;Set&lt;/code&gt; of public credentials held by this
                  &lt;code&gt;Subject&lt;/code&gt;.
                  &lt;p&gt; The returned &lt;code&gt;Set&lt;/code&gt; is backed by this Subject&apos;s
                  internal public Credential &lt;code&gt;Set&lt;/code&gt;.  Any modification
                  to the returned &lt;code&gt;Set&lt;/code&gt; affects the internal public
                  Credential &lt;code&gt;Set&lt;/code&gt; as well.
                  &lt;p&gt;                
                <return>
                    A &lt;code&gt;Set&lt;/code&gt; of public credentials held by this
                      &lt;code&gt;Subject&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getPublicCredentials" type="Set&lt;Object&gt;" line="414"/>
            <javadoc line="417">
                Return the &lt;code&gt;Set&lt;/code&gt; of private credentials held by this
                  &lt;code&gt;Subject&lt;/code&gt;.
                  &lt;p&gt; The returned &lt;code&gt;Set&lt;/code&gt; is backed by this Subject&apos;s
                  internal private Credential &lt;code&gt;Set&lt;/code&gt;.  Any modification
                  to the returned &lt;code&gt;Set&lt;/code&gt; affects the internal private
                  Credential &lt;code&gt;Set&lt;/code&gt; as well.
                  &lt;p&gt; A caller requires permissions to access the Credentials
                  in the returned &lt;code&gt;Set&lt;/code&gt;, or to modify the
                  &lt;code&gt;Set&lt;/code&gt; itself.  A &lt;code&gt;SecurityException&lt;/code&gt;
                  is thrown if the caller does not have the proper permissions.
                  &lt;p&gt; While iterating through the &lt;code&gt;Set&lt;/code&gt;,
                  a &lt;code&gt;SecurityException&lt;/code&gt; is thrown
                  if the caller does not have permission to access a
                  particular Credential.  The &lt;code&gt;Iterator&lt;/code&gt;
                  is nevertheless advanced to next element in the &lt;code&gt;Set&lt;/code&gt;.
                  &lt;p&gt;                
                <return>
                    A &lt;code&gt;Set&lt;/code&gt; of private credentials held by this
                      &lt;code&gt;Subject&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getPrivateCredentials" type="Set&lt;Object&gt;" line="437"/>
            <javadoc line="440">
                Return a &lt;code&gt;Set&lt;/code&gt; of public credentials associated with this
                  &lt;code&gt;Subject&lt;/code&gt; that are instances or subclasses of the specified
                  &lt;code&gt;Class&lt;/code&gt;.
                  &lt;p&gt; The returned &lt;code&gt;Set&lt;/code&gt; is not backed by this Subject&apos;s
                  internal public Credential &lt;code&gt;Set&lt;/code&gt;.  A new
                  &lt;code&gt;Set&lt;/code&gt; is created and returned for each method invocation.
                  Modifications to the returned &lt;code&gt;Set&lt;/code&gt;
                  will not affect the internal public Credential &lt;code&gt;Set&lt;/code&gt;.
                  &lt;p&gt;                
                <param>
                    c the returned &lt;code&gt;Set&lt;/code&gt; of public credentials will all be
                      instances of this class.                    
                </param>
                <return>
                    a &lt;code&gt;Set&lt;/code&gt; of public credentials that are instances
                      of the  specified &lt;code&gt;Class&lt;/code&gt;.                    
                </return>
                <exception>
                    NullPointerException if the specified &lt;code&gt;Class&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="getPublicCredentials" type="Set&lt;T&gt;" line="457">
                <params>
                    <param name="c" type="Class&lt;T&gt;"/>
                </params>
            </method>
            <javadoc line="461">
                Return a &lt;code&gt;Set&lt;/code&gt; of private credentials associated with this
                  &lt;code&gt;Subject&lt;/code&gt; that are instances or subclasses of the specified
                  &lt;code&gt;Class&lt;/code&gt;.
                  &lt;p&gt; The caller must have permission to access all of the
                  requested Credentials, or a &lt;code&gt;SecurityException&lt;/code&gt;
                  will be thrown.
                  &lt;p&gt; The returned &lt;code&gt;Set&lt;/code&gt; is not backed by this Subject&apos;s
                  internal private Credential &lt;code&gt;Set&lt;/code&gt;.  A new
                  &lt;code&gt;Set&lt;/code&gt; is created and returned for each method invocation.
                  Modifications to the returned &lt;code&gt;Set&lt;/code&gt;
                  will not affect the internal private Credential &lt;code&gt;Set&lt;/code&gt;.
                  &lt;p&gt;                
                <param>
                    c the returned &lt;code&gt;Set&lt;/code&gt; of private credentials will all be
                      instances of this class.                    
                </param>
                <return>
                    a &lt;code&gt;Set&lt;/code&gt; of private credentials that are instances
                      of the  specified &lt;code&gt;Class&lt;/code&gt;.                    
                </return>
                <exception>
                    NullPointerException if the specified &lt;code&gt;Class&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="getPrivateCredentials" type="Set&lt;T&gt;" line="481">
                <params>
                    <param name="c" type="Class&lt;T&gt;"/>
                </params>
            </method>
            <javadoc line="485">
                Compares the specified Object with this &lt;code&gt;Subject&lt;/code&gt;
                  for equality.  Returns true if the given object is also a Subject
                  and the two &lt;code&gt;Subject&lt;/code&gt; instances are equivalent.
                  More formally, two &lt;code&gt;Subject&lt;/code&gt; instances are
                  equal if their &lt;code&gt;Principal&lt;/code&gt; and &lt;code&gt;Credential&lt;/code&gt;
                  Sets are equal.
                  &lt;p&gt;                
                <param>
                    o Object to be compared for equality with this
                      &lt;code&gt;Subject&lt;/code&gt;.                    
                </param>
                <return>
                    true if the specified Object is equal to this
                      &lt;code&gt;Subject&lt;/code&gt;.                    
                </return>
                <exception>
                    SecurityException if the caller does not have permission
                      to access the private credentials for this &lt;code&gt;Subject&lt;/code&gt;,
                      or if the caller does not have permission to access the
                      private credentials for the provided &lt;code&gt;Subject&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="equals" type="boolean" line="502">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <scope line="505">
                    <declaration name="that" type="Subject" line="506"/>
                    <declaration name="thatPrincipals" type="Set&amp;lt;Principal&amp;gt;" line="507"/>
                    <scope line="508"/>
                    <scope line="511"/>
                    <declaration name="thatPubCredentials" type="Set&amp;lt;Object&amp;gt;" line="514"/>
                    <scope line="515"/>
                    <scope line="518"/>
                    <declaration name="thatPrivCredentials" type="Set&amp;lt;Object&amp;gt;" line="521"/>
                    <scope line="522"/>
                    <scope line="525"/>
                </scope>
            </method>
            <javadoc line="532">
                Return the String representation of this &lt;code&gt;Subject&lt;/code&gt;.
                  &lt;p&gt;                
                <return>
                    the String representation of this &lt;code&gt;Subject&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="537"/>
            <javadoc line="540">
                package private convenience method to print out the Subject
                  without firing off a security check when trying to access
                  the Private Credentials                
            </javadoc>
            <method name="toString" type="String" line="545">
                <params>
                    <param name="includePrivateCredentials" type="boolean"/>
                </params>
                <declaration name="s" type="String" line="546"/>
                <declaration name="suffix" type="String" line="547"/>
                <scope line="548">
                    <declaration name="pI" type="Iterator&amp;lt;Principal&amp;gt;" line="549"/>
                    <scope line="550">
                        <declaration name="p" type="Principal" line="551"/>
                    </scope>
                </scope>
                <scope line="555">
                    <declaration name="pI" type="Iterator&amp;lt;Object&amp;gt;" line="556"/>
                    <scope line="557">
                        <declaration name="o" type="Object" line="558"/>
                    </scope>
                </scope>
                <scope line="562">
                    <scope line="563">
                        <declaration name="pI" type="Iterator&amp;lt;Object&amp;gt;" line="564"/>
                        <scope line="565">
                            <scope line="566">
                                <declaration name="o" type="Object" line="567"/>
                            </scope>
                            <scope line="570"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="579">
                Returns a hashcode for this &lt;code&gt;Subject&lt;/code&gt;.
                  &lt;p&gt;                
                <return>
                    a hashcode for this &lt;code&gt;Subject&lt;/code&gt;.                    
                </return>
                <exception>
                    SecurityException if the caller does not have permission
                      to access this Subject&apos;s private credentials.                    
                </exception>
            </javadoc>
            <method name="hashCode" type="int" line="586">
                <declaration name="hashCode" type="int" line="587"/>
                <scope line="588">
                    <declaration name="pIterator" type="Iterator&amp;lt;Principal&amp;gt;" line="589"/>
                    <scope line="590">
                        <declaration name="p" type="Principal" line="591"/>
                    </scope>
                </scope>
                <scope line="595">
                    <declaration name="pubCIterator" type="Iterator&amp;lt;Object&amp;gt;" line="596"/>
                    <scope line="597"/>
                </scope>
            </method>
            <javadoc line="603">
                get a credential&apos;s hashcode                
            </javadoc>
            <method name="getCredHashCode" type="int" line="606">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <scope line="607"/>
                <scope line="610"/>
            </method>
            <javadoc line="614">
                Writes this object out to a stream (i.e., serializes it).                
            </javadoc>
            <method name="writeObject" type="void" line="617">
                <params>
                    <param name="oos" type="java.io.ObjectOutputStream"/>
                </params>
                <scope line="618"/>
            </method>
            <javadoc line="622">
                Reads this object from a stream (i.e., deserializes it)                
            </javadoc>
            <method name="readObject" type="void" line="625">
                <params>
                    <param name="s" type="java.io.ObjectInputStream"/>
                </params>
            </method>
            <class name="SecureSet" line="630">
                <type_params>
                    <type_param name="E"/>
                </type_params>
                <extends class="AbstractSet">
                    <type_params>
                        <type_param name="E"/>
                    </type_params>
                </extends>
                <implements interface="java.io.Serializable"/>
                <javadoc line="630">
                    Prevent modifications unless caller has permission.                    
                    <serial>
                        include                        
                    </serial>
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="635"/>
                <declaration name="serialPersistentFields" type="ObjectStreamField[]" line="636"/>
                <javadoc line="636">
                    @serialField this$0 Subject The outer Subject instance.                    
                    <serialField>
                        elements LinkedList The elements in this set.                        
                    </serialField>
                </javadoc>
                <declaration name="subject" type="Subject" line="641"/>
                <declaration name="elements" type="LinkedList&amp;lt;E&amp;gt;" line="642"/>
                <declaration name="which" type="int" line="643"/>
                <javadoc line="643">
                    @serial An integer identifying the type of objects contained
                      in this set.  If &lt;code&gt;which == 1&lt;/code&gt;,
                      this is a Principal set and all the elements are
                      of type &lt;code&gt;java.security.Principal&lt;/code&gt;.
                      If &lt;code&gt;which == 2&lt;/code&gt;, this is a public credential
                      set and all the elements are of type &lt;code&gt;Object&lt;/code&gt;.
                      If &lt;code&gt;which == 3&lt;/code&gt;, this is a private credential
                      set and all the elements are of type &lt;code&gt;Object&lt;/code&gt;.                    
                </javadoc>
                <method name="SecureSet" type="constructor" line="654">
                    <params>
                        <param name="subject" type="Subject"/>
                        <param name="which" type="int"/>
                    </params>
                </method>
                <method name="SecureSet" type="constructor" line="659">
                    <params>
                        <param name="subject" type="Subject"/>
                        <param name="which" type="int"/>
                        <param name="set" type="Set&lt;? extends E&gt;"/>
                    </params>
                </method>
                <method name="size" type="int" line="664"/>
                <method name="iterator" type="Iterator&lt;E&gt;" line="667">
                    <declaration name="list" type="LinkedList&amp;lt;E&amp;gt;" line="668"/>
                    <anonymous_class line="669">
                        <declaration name="i" type="ListIterator&amp;lt;E&amp;gt;" line="670"/>
                        <method name="hasNext" type="boolean" line="671"/>
                        <method name="next" type="E" line="674">
                            <scope line="675"/>
                            <declaration name="sm" type="SecurityManager" line="678"/>
                            <scope line="679">
                                <scope line="680"/>
                                <scope line="683"/>
                            </scope>
                        </method>
                        <method name="remove" type="void" line="690">
                            <scope line="691"/>
                            <declaration name="sm" type="java.lang.SecurityManager" line="694"/>
                            <scope line="695"/>
                        </method>
                    </anonymous_class>
                </method>
                <method name="add" type="boolean" line="713">
                    <params>
                        <param name="o" type="E"/>
                    </params>
                    <scope line="714"/>
                    <declaration name="sm" type="java.lang.SecurityManager" line="717"/>
                    <scope line="718"/>
                    <scope line="733"/>
                </method>
                <method name="remove" type="boolean" line="743">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <declaration name="e" type="Iterator&amp;lt;E&amp;gt;" line="744"/>
                    <scope line="745">
                        <declaration name="next" type="E" line="746"/>
                        <scope line="747"/>
                        <scope line="750">
                            <anonymous_class line="751">
                                <method name="run" type="E" line="752"/>
                            </anonymous_class>
                        </scope>
                        <scope line="758">
                            <scope line="759"/>
                        </scope>
                        <scope line="764"/>
                    </scope>
                </method>
                <method name="contains" type="boolean" line="771">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <declaration name="e" type="Iterator&amp;lt;E&amp;gt;" line="772"/>
                    <scope line="773">
                        <declaration name="next" type="E" line="774"/>
                        <scope line="775"/>
                        <scope line="778">
                            <declaration name="sm" type="SecurityManager" line="779"/>
                            <scope line="780"/>
                            <anonymous_class line="783">
                                <method name="run" type="E" line="784"/>
                            </anonymous_class>
                        </scope>
                        <scope line="790">
                            <scope line="791"/>
                        </scope>
                        <scope line="795"/>
                    </scope>
                </method>
                <method name="removeAll" type="boolean" line="801">
                    <params>
                        <param name="c" type="Collection&lt;?&gt;"/>
                    </params>
                    <declaration name="modified" type="boolean" line="802"/>
                    <declaration name="e" type="Iterator&amp;lt;E&amp;gt;" line="803"/>
                    <scope line="804">
                        <declaration name="next" type="E" line="805"/>
                        <scope line="806"/>
                        <scope line="809">
                            <anonymous_class line="810">
                                <method name="run" type="E" line="811"/>
                            </anonymous_class>
                        </scope>
                        <declaration name="ce" type="Iterator&amp;lt;?&amp;gt;" line="817"/>
                        <scope line="818">
                            <declaration name="o" type="Object" line="819"/>
                            <scope line="820">
                                <scope line="821"/>
                            </scope>
                            <scope line="827"/>
                        </scope>
                    </scope>
                </method>
                <method name="retainAll" type="boolean" line="836">
                    <params>
                        <param name="c" type="Collection&lt;?&gt;"/>
                    </params>
                    <declaration name="modified" type="boolean" line="837"/>
                    <declaration name="retain" type="boolean" line="838"/>
                    <declaration name="e" type="Iterator&amp;lt;E&amp;gt;" line="839"/>
                    <scope line="840">
                        <declaration name="next" type="E" line="842"/>
                        <scope line="843"/>
                        <scope line="846">
                            <anonymous_class line="847">
                                <method name="run" type="E" line="848"/>
                            </anonymous_class>
                        </scope>
                        <declaration name="ce" type="Iterator&amp;lt;?&amp;gt;" line="854"/>
                        <scope line="855">
                            <declaration name="o" type="Object" line="856"/>
                            <scope line="857">
                                <scope line="858"/>
                            </scope>
                            <scope line="863"/>
                        </scope>
                        <scope line="868"/>
                    </scope>
                </method>
                <method name="clear" type="void" line="876">
                    <declaration name="e" type="Iterator&amp;lt;E&amp;gt;" line="877"/>
                    <scope line="878">
                        <declaration name="next" type="E" line="879"/>
                        <scope line="880"/>
                        <scope line="883">
                            <anonymous_class line="884">
                                <method name="run" type="E" line="885"/>
                            </anonymous_class>
                        </scope>
                    </scope>
                </method>
                <javadoc line="894">
                    Writes this object out to a stream (i.e., serializes it).
                      &lt;p&gt;                    
                    <serialData>
                        If this is a private credential set,
                          a security check is performed to ensure that
                          the caller has permission to access each credential
                          in the set.  If the security check passes,
                          the set is serialized.                        
                    </serialData>
                </javadoc>
                <method name="writeObject" type="void" line="903">
                    <params>
                        <param name="oos" type="java.io.ObjectOutputStream"/>
                    </params>
                    <scope line="904">
                        <declaration name="i" type="Iterator&amp;lt;E&amp;gt;" line="905"/>
                        <scope line="906"/>
                    </scope>
                    <declaration name="fields" type="ObjectOutputStream.PutField" line="910"/>
                </method>
                <method name="readObject" type="void" line="916">
                    <params>
                        <param name="ois" type="ObjectInputStream"/>
                    </params>
                    <declaration name="fields" type="ObjectInputStream.GetField" line="917"/>
                </method>
            </class>
            <class name="ClassSet" line="923">
                <type_params>
                    <type_param name="T"/>
                </type_params>
                <extends class="AbstractSet">
                    <type_params>
                        <type_param name="T"/>
                    </type_params>
                </extends>
                <javadoc line="923">
                    This class implements a &lt;code&gt;Set&lt;/code&gt; which returns only
                      members that are an instance of a specified Class.                    
                </javadoc>
                <declaration name="which" type="int" line="928"/>
                <declaration name="c" type="Class&amp;lt;T&amp;gt;" line="929"/>
                <declaration name="set" type="Set&amp;lt;T&amp;gt;" line="930"/>
                <method name="ClassSet" type="constructor" line="931">
                    <params>
                        <param name="which" type="int"/>
                        <param name="c" type="Class&lt;T&gt;"/>
                    </params>
                    <scope line="937"/>
                    <scope line="942"/>
                    <scope line="947"/>
                </method>
                <method name="populateSet" type="void" line="953">
                    <declaration name="iterator" type="Iterator&amp;lt;?&amp;gt;" line="954"/>
                    <scope line="966">
                        <declaration name="next" type="Object" line="967"/>
                        <scope line="968">
                            <anonymous_class line="969">
                                <method name="run" type="Object" line="970"/>
                            </anonymous_class>
                        </scope>
                        <scope line="976"/>
                        <scope line="979">
                            <scope line="980"/>
                            <scope line="983">
                                <declaration name="sm" type="SecurityManager" line="984"/>
                                <scope line="985"/>
                            </scope>
                        </scope>
                    </scope>
                </method>
                <method name="size" type="int" line="993"/>
                <method name="iterator" type="Iterator&lt;T&gt;" line="996"/>
                <method name="add" type="boolean" line="999">
                    <params>
                        <param name="o" type="T"/>
                    </params>
                    <scope line="1000">
                        <declaration name="form" type="MessageFormat" line="1001"/>
                        <declaration name="source" type="Object[]" line="1002"/>
                    </scope>
                </method>
            </class>
            <class name="AuthPermissionHolder" line="1008">
                <declaration name="DO_AS_PERMISSION" type="AuthPermission" line="1009"/>
                <declaration name="DO_AS_PRIVILEGED_PERMISSION" type="AuthPermission" line="1010"/>
                <declaration name="SET_READ_ONLY_PERMISSION" type="AuthPermission" line="1011"/>
                <declaration name="GET_SUBJECT_PERMISSION" type="AuthPermission" line="1012"/>
                <declaration name="MODIFY_PRINCIPALS_PERMISSION" type="AuthPermission" line="1013"/>
                <declaration name="MODIFY_PUBLIC_CREDENTIALS_PERMISSION" type="AuthPermission" line="1014"/>
                <declaration name="MODIFY_PRIVATE_CREDENTIALS_PERMISSION" type="AuthPermission" line="1015"/>
            </class>
        </class>
    </source>