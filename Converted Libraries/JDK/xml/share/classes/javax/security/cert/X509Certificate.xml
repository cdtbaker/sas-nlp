<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.security.cert">
        <import package="java.io.InputStream"/>
        <import package="java.lang.Class"/>
        <import package="java.lang.reflect.Constructor"/>
        <import package="java.lang.reflect.InvocationTargetException"/>
        <import package="java.security.Security"/>
        <import package="java.math.BigInteger"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.Principal"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.security.PublicKey"/>
        <import package="java.util.BitSet"/>
        <import package="java.util.Date"/>
        <class name="X509Certificate" line="43">
            <extends class="Certificate"/>
            <comment line="134">
                Constant to lookup in the Security properties file.
                 In the Security properties file the default implementation
                 for X.509 v3 is given as:
                 &lt;pre&gt;
                 cert.provider.x509v1=com.sun.security.cert.internal.x509.X509V1CertImpl
                 &lt;pre&gt;                
            </comment>
            <javadoc line="43">
                Abstract class for X.509 v1 certificates. This provides a standard
                  way to access all the version 1 attributes of an X.509 certificate.
                  Attributes that are specific to X.509 v2 or v3 are not available
                  through this interface. Future API evolution will provide full access to
                  complete X.509 v3 attributes.
                  &lt;p&gt;
                  The basic X.509 format was defined by
                  ISO/IEC and ANSI X9 and is described below in ASN.1:
                  &lt;pre&gt;
                  Certificate  ::=  SEQUENCE  {
                  tbsCertificate       TBSCertificate,
                  signatureAlgorithm   AlgorithmIdentifier,
                  signature            BIT STRING  }
                  &lt;/pre&gt;
                  &lt;p&gt;
                  These certificates are widely used to support authentication and
                  other functionality in Internet security systems. Common applications
                  include Privacy Enhanced Mail (PEM), Transport Layer Security (SSL),
                  code signing for trusted software distribution, and Secure Electronic
                  Transactions (SET).
                  &lt;p&gt;
                  These certificates are managed and vouched for by &lt;em&gt;Certificate
                  Authorities&lt;/em&gt; (CAs). CAs are services which create certificates by
                  placing data in the X.509 standard format and then digitally signing
                  that data. CAs act as trusted third parties, making introductions
                  between principals who have no direct knowledge of each other.
                  CA certificates are either signed by themselves, or by some other
                  CA such as a &quot;root&quot; CA.
                  &lt;p&gt;
                  The ASN.1 definition of &lt;code&gt;tbsCertificate&lt;/code&gt; is:
                  &lt;pre&gt;
                  TBSCertificate  ::=  SEQUENCE  {
                  version         [0]  EXPLICIT Version DEFAULT v1,
                  serialNumber         CertificateSerialNumber,
                  signature            AlgorithmIdentifier,
                  issuer               Name,
                  validity             Validity,
                  subject              Name,
                  subjectPublicKeyInfo SubjectPublicKeyInfo,
                  }
                  &lt;/pre&gt;
                  &lt;p&gt;
                  Here is sample code to instantiate an X.509 certificate:
                  &lt;pre&gt;
                  InputStream inStream = new FileInputStream(&quot;fileName-of-cert&quot;);
                  X509Certificate cert = X509Certificate.getInstance(inStream);
                  inStream.close();
                  &lt;/pre&gt;
                  OR
                  &lt;pre&gt;
                  byte[] certData = &amp;lt;certificate read from a file, say&amp;gt;
                  X509Certificate cert = X509Certificate.getInstance(certData);
                  &lt;/pre&gt;
                  &lt;p&gt;
                  In either case, the code that instantiates an X.509 certificate
                  consults the Java security properties file to locate the actual
                  implementation or instantiates a default implementation.
                  &lt;p&gt;
                  The Java security properties file is located in the file named
                  &amp;lt;JAVA_HOME&amp;gt;/lib/security/java.security.
                  &amp;lt;JAVA_HOME&amp;gt; refers to the value of the java.home system property,
                  and specifies the directory where the JRE is installed.
                  In the Security properties file, a default implementation
                  for X.509 v1 may be given such as:
                  &lt;pre&gt;
                  cert.provider.x509v1=com.sun.security.cert.internal.x509.X509V1CertImpl
                  &lt;/pre&gt;
                  &lt;p&gt;
                  The value of this &lt;code&gt;cert.provider.x509v1&lt;/code&gt; property has to be
                  changed to instatiate another implementation. If this security
                  property is not set, a default implementation will be used.
                  Currently, due to possible security restrictions on access to
                  Security properties, this value is looked up and cached at class
                  initialization time and will fallback on a default implementation if
                  the Security property is not accessible.
                  &lt;p&gt;&lt;em&gt;Note: The classes in the package &lt;code&gt;javax.security.cert&lt;/code&gt;
                  exist for compatibility with earlier versions of the
                  Java Secure Sockets Extension (JSSE). New applications should instead
                  use the standard Java SE certificate classes located in
                  &lt;code&gt;java.security.cert&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;                
                <author>
                    Hemma Prafullchandra                    
                </author>
                <since>
                    1.4                    
                </since>
                <see>
                    Certificate                    
                </see>
                <see>
                    java.security.cert.X509Extension                    
                </see>
            </javadoc>
            <declaration name="X509_PROVIDER" type="String" line="141"/>
            <declaration name="X509Provider" type="String" line="142"/>
            <scope line="144">
                <anonymous_class line="146">
                    <method name="run" type="String" line="147"/>
                </anonymous_class>
            </scope>
            <javadoc line="154">
                Instantiates an X509Certificate object, and initializes it with
                  the data read from the input stream &lt;code&gt;inStream&lt;/code&gt;.
                  The implementation (X509Certificate is an abstract class) is
                  provided by the class specified as the value of the
                  &lt;code&gt;cert.provider.x509v1&lt;/code&gt;
                  property in the security properties file.
                  &lt;p&gt;Note: Only one DER-encoded
                  certificate is expected to be in the input stream.
                  Also, all X509Certificate
                  subclasses must provide a constructor of the form:
                  &lt;code&gt;&lt;pre&gt;
                  public &amp;lt;subClass&amp;gt;(InputStream inStream) ...
                  &lt;/pre&gt;&lt;/code&gt;                
                <param>
                    inStream an input stream with the data to be read to
                      initialize the certificate.                    
                </param>
                <return>
                    an X509Certificate object initialized with the data
                      from the input stream.                    
                </return>
                <exception>
                    CertificateException if a class initialization
                      or certificate parsing error occurs.                    
                </exception>
            </javadoc>
            <method name="getInstance" type="X509Certificate" line="178">
                <params>
                    <param name="inStream" type="InputStream"/>
                </params>
            </method>
            <javadoc line="182">
                Instantiates an X509Certificate object, and initializes it with
                  the specified byte array.
                  The implementation (X509Certificate is an abstract class) is
                  provided by the class specified as the value of the
                  &lt;code&gt;cert.provider.x509v1&lt;/code&gt;
                  property in the security properties file.
                  &lt;p&gt;Note: All X509Certificate
                  subclasses must provide a constructor of the form:
                  &lt;code&gt;&lt;pre&gt;
                  public &amp;lt;subClass&amp;gt;(InputStream inStream) ...
                  &lt;/pre&gt;&lt;/code&gt;                
                <param>
                    certData a byte array containing the DER-encoded
                      certificate.                    
                </param>
                <return>
                    an X509Certificate object initialized with the data
                      from <code>certData</code>.                    
                </return>
                <exception>
                    CertificateException if a class initialization
                      or certificate parsing error occurs.                    
                </exception>
            </javadoc>
            <method name="getInstance" type="X509Certificate" line="204">
                <params>
                    <param name="certData" type="byte[]"/>
                </params>
            </method>
            <method name="getInst" type="X509Certificate" line="209">
                <params>
                    <param name="value" type="Object"/>
                </params>
                <comment line="210">
                    This turns out not to work for now. To run under JDK1.2 we would
                     need to call beginPrivileged() but we can&apos;t do that and run
                     under JDK1.1.                    
                </comment>
                <comment line="217">
                    shouldn&apos;t happen, but assume corrupted properties file                    
                </comment>
                <comment line="218">
                    provide access to sun implementation                    
                </comment>
                <comment line="231">
                    get the appropriate constructor and instantiate it                    
                </comment>
                <comment line="234">
                    get a new instance                    
                </comment>
                <declaration name="className" type="String" line="215"/>
                <scope line="216"/>
                <scope line="221">
                    <declaration name="params" type="Class[]" line="222"/>
                    <scope line="223"/>
                    <scope line="225"/>
                    <declaration name="certClass" type="Class&lt;?&gt;" line="229"/>
                    <declaration name="cons" type="Constructor&lt;?&gt;" line="232"/>
                    <declaration name="obj" type="Object" line="235"/>
                </scope>
                <scope line="238"/>
                <scope line="240"/>
                <scope line="242"/>
                <scope line="244"/>
                <scope line="247"/>
            </method>
            <method name="checkValidity" type="void" line="253"/>
            <javadoc line="253">
                Checks that the certificate is currently valid. It is if
                  the current date and time are within the validity period given in the
                  certificate.
                  &lt;p&gt;
                  The validity period consists of two date/time values:
                  the first and last dates (and times) on which the certificate
                  is valid. It is defined in
                  ASN.1 as:
                  &lt;pre&gt;
                  validity             Validity&lt;p&gt;
                  Validity ::= SEQUENCE {
                  notBefore      CertificateValidityDate,
                  notAfter       CertificateValidityDate }&lt;p&gt;
                  CertificateValidityDate ::= CHOICE {
                  utcTime        UTCTime,
                  generalTime    GeneralizedTime }
                  &lt;/pre&gt;                
                <exception>
                    CertificateExpiredException if the certificate has expired.                    
                </exception>
                <exception>
                    CertificateNotYetValidException if the certificate is not
                      yet valid.                    
                </exception>
            </javadoc>
            <method name="checkValidity" type="void" line="279"/>
            <javadoc line="279">
                Checks that the specified date is within the certificate&apos;s
                  validity period. In other words, this determines whether the
                  certificate would be valid at the specified date/time.                
                <param>
                    date the Date to check against to see if this certificate
                      is valid at that date/time.                    
                </param>
                <exception>
                    CertificateExpiredException if the certificate has expired
                      with respect to the <code>date</code> supplied.                    
                </exception>
                <exception>
                    CertificateNotYetValidException if the certificate is not
                      yet valid with respect to the <code>date</code> supplied.                    
                </exception>
                <see>
                    #checkValidity()                    
                </see>
            </javadoc>
            <method name="getVersion" type="int" line="295"/>
            <javadoc line="295">
                Gets the &lt;code&gt;version&lt;/code&gt; (version number) value from the
                  certificate. The ASN.1 definition for this is:
                  &lt;pre&gt;
                  version         [0]  EXPLICIT Version DEFAULT v1&lt;p&gt;
                  Version  ::=  INTEGER  {  v1(0), v2(1), v3(2)  }
                  &lt;/pre&gt;                
                <return>
                    the version number from the ASN.1 encoding, i.e. 0, 1 or 2.                    
                </return>
            </javadoc>
            <method name="getSerialNumber" type="BigInteger" line="307"/>
            <javadoc line="307">
                Gets the &lt;code&gt;serialNumber&lt;/code&gt; value from the certificate.
                  The serial number is an integer assigned by the certification
                  authority to each certificate. It must be unique for each
                  certificate issued by a given CA (i.e., the issuer name and
                  serial number identify a unique certificate).
                  The ASN.1 definition for this is:
                  &lt;pre&gt;
                  serialNumber     CertificateSerialNumber&lt;p&gt;
                  CertificateSerialNumber  ::=  INTEGER
                  &lt;/pre&gt;                
                <return>
                    the serial number.                    
                </return>
            </javadoc>
            <method name="getIssuerDN" type="Principal" line="324"/>
            <javadoc line="324">
                Gets the &lt;code&gt;issuer&lt;/code&gt; (issuer distinguished name) value from
                  the certificate. The issuer name identifies the entity that signed (and
                  issued) the certificate.
                  &lt;p&gt;The issuer name field contains an
                  X.500 distinguished name (DN).
                  The ASN.1 definition for this is:
                  &lt;pre&gt;
                  issuer    Name&lt;p&gt;
                  Name ::= CHOICE { RDNSequence }
                  RDNSequence ::= SEQUENCE OF RelativeDistinguishedName
                  RelativeDistinguishedName ::=
                  SET OF AttributeValueAssertion
                  AttributeValueAssertion ::= SEQUENCE {
                  AttributeType,
                  AttributeValue }
                  AttributeType ::= OBJECT IDENTIFIER
                  AttributeValue ::= ANY
                  &lt;/pre&gt;
                  The &lt;code&gt;Name&lt;/code&gt; describes a hierarchical name composed of
                  attributes, such as country name, and corresponding values, such as US.
                  The type of the &lt;code&gt;AttributeValue&lt;/code&gt; component is determined by
                  the &lt;code&gt;AttributeType&lt;/code&gt;; in general it will be a
                  &lt;code&gt;directoryString&lt;/code&gt;. A &lt;code&gt;directoryString&lt;/code&gt; is usually
                  one of &lt;code&gt;PrintableString&lt;/code&gt;,
                  &lt;code&gt;TeletexString&lt;/code&gt; or &lt;code&gt;UniversalString&lt;/code&gt;.                
                <return>
                    a Principal whose name is the issuer distinguished name.                    
                </return>
            </javadoc>
            <method name="getSubjectDN" type="Principal" line="358"/>
            <javadoc line="358">
                Gets the &lt;code&gt;subject&lt;/code&gt; (subject distinguished name) value
                  from the certificate.
                  The ASN.1 definition for this is:
                  &lt;pre&gt;
                  subject    Name
                  &lt;/pre&gt;
                  &lt;p&gt;See {@link #getIssuerDN() getIssuerDN} for &lt;code&gt;Name&lt;/code&gt;
                  and other relevant definitions.                
                <return>
                    a Principal whose name is the subject name.                    
                </return>
                <see>
                    #getIssuerDN()                    
                </see>
            </javadoc>
            <method name="getNotBefore" type="Date" line="374"/>
            <javadoc line="374">
                Gets the &lt;code&gt;notBefore&lt;/code&gt; date from the validity period of
                  the certificate.
                  The relevant ASN.1 definitions are:
                  &lt;pre&gt;
                  validity             Validity&lt;p&gt;
                  Validity ::= SEQUENCE {
                  notBefore      CertificateValidityDate,
                  notAfter       CertificateValidityDate }&lt;p&gt;
                  CertificateValidityDate ::= CHOICE {
                  utcTime        UTCTime,
                  generalTime    GeneralizedTime }
                  &lt;/pre&gt;                
                <return>
                    the start date of the validity period.                    
                </return>
                <see>
                    #checkValidity()                    
                </see>
            </javadoc>
            <method name="getNotAfter" type="Date" line="394"/>
            <javadoc line="394">
                Gets the &lt;code&gt;notAfter&lt;/code&gt; date from the validity period of
                  the certificate. See {@link #getNotBefore() getNotBefore}for relevant ASN.1 definitions.                
                <return>
                    the end date of the validity period.                    
                </return>
                <see>
                    #checkValidity()                    
                </see>
            </javadoc>
            <method name="getSigAlgName" type="String" line="404"/>
            <javadoc line="404">
                Gets the signature algorithm name for the certificate
                  signature algorithm. An example is the string &quot;SHA-1/DSA&quot;.
                  The ASN.1 definition for this is:
                  &lt;pre&gt;
                  signatureAlgorithm   AlgorithmIdentifier&lt;p&gt;
                  AlgorithmIdentifier  ::=  SEQUENCE  {
                  algorithm               OBJECT IDENTIFIER,
                  parameters              ANY DEFINED BY algorithm OPTIONAL  }
                  -- contains a value of the type
                  -- registered for use with the
                  -- algorithm object identifier value
                  &lt;/pre&gt;
                  &lt;p&gt;The algorithm name is determined from the &lt;code&gt;algorithm&lt;/code&gt;
                  OID string.                
                <return>
                    the signature algorithm name.                    
                </return>
            </javadoc>
            <method name="getSigAlgOID" type="String" line="425"/>
            <javadoc line="425">
                Gets the signature algorithm OID string from the certificate.
                  An OID is represented by a set of positive whole numbers separated
                  by periods.
                  For example, the string &quot;1.2.840.10040.4.3&quot; identifies the SHA-1
                  with DSA signature algorithm, as per the PKIX part I.
                  &lt;p&gt;See {@link #getSigAlgName() getSigAlgName} for
                  relevant ASN.1 definitions.                
                <return>
                    the signature algorithm OID string.                    
                </return>
            </javadoc>
            <method name="getSigAlgParams" type="byte[]" line="439"/>
            <javadoc line="439">
                Gets the DER-encoded signature algorithm parameters from this
                  certificate&apos;s signature algorithm. In most cases, the signature
                  algorithm parameters are null; the parameters are usually
                  supplied with the certificate&apos;s public key.
                  &lt;p&gt;See {@link #getSigAlgName() getSigAlgName} for
                  relevant ASN.1 definitions.                
                <return>
                    the DER-encoded signature algorithm parameters, or
                      null if no parameters are present.                    
                </return>
            </javadoc>
        </class>
    </source>