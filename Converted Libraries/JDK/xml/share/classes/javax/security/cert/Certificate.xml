<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.security.cert">
        <import package="java.security.PublicKey"/>
        <import package="java.security.NoSuchAlgorithmException"/>
        <import package="java.security.NoSuchProviderException"/>
        <import package="java.security.InvalidKeyException"/>
        <import package="java.security.SignatureException"/>
        <class name="Certificate" line="7">
            <javadoc line="7">
                &lt;p&gt;Abstract class for managing a variety of identity certificates.
                  An identity certificate is a guarantee by a principal that
                  a public key is that of another principal.  (A principal represents
                  an entity such as an individual user, a group, or a corporation.)
                  &lt;p&gt;
                  This class is an abstraction for certificates that have different
                  formats but important common uses.  For example, different types of
                  certificates, such as X.509 and PGP, share general certificate
                  functionality (like encoding and verifying) and
                  some types of information (like a public key).
                  &lt;p&gt;
                  X.509, PGP, and SDSI certificates can all be implemented by
                  subclassing the Certificate class, even though they contain different
                  sets of information, and they store and retrieve the information in
                  different ways.
                  &lt;p&gt;&lt;em&gt;Note: The classes in the package &lt;code&gt;javax.security.cert&lt;/code&gt;
                  exist for compatibility with earlier versions of the
                  Java Secure Sockets Extension (JSSE). New applications should instead
                  use the standard Java SE certificate classes located in
                  &lt;code&gt;java.security.cert&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;                
                <since>
                    1.4                    
                </since>
                <see>
                    X509Certificate                    
                </see>
                <author>
                    Hemma Prafullchandra                    
                </author>
            </javadoc>
            <javadoc line="33">
                Compares this certificate for equality with the specified
                  object. If the &lt;code&gt;other&lt;/code&gt; object is an
                  &lt;code&gt;instanceof&lt;/code&gt; &lt;code&gt;Certificate&lt;/code&gt;, then
                  its encoded form is retrieved and compared with the
                  encoded form of this certificate.                
                <param>
                    other the object to test for equality with this certificate.                    
                </param>
                <return>
                    true if the encoded forms of the two certificates
                      match, false otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="43">
                <params>
                    <param name="other" type="Object"/>
                </params>
                <scope line="46">
                    <declaration name="thisCert" type="byte[]" line="47"/>
                    <declaration name="otherCert" type="byte[]" line="48"/>
                </scope>
                <scope line="53"/>
            </method>
            <javadoc line="57">
                Returns a hashcode value for this certificate from its
                  encoded form.                
                <return>
                    the hashcode value.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="62">
                <declaration name="retval" type="int" line="63"/>
                <scope line="64">
                    <declaration name="certData" type="byte[]" line="65"/>
                    <scope line="66"/>
                </scope>
                <scope line="71"/>
            </method>
            <method name="getEncoded" type="byte[]" line="75"/>
            <javadoc line="75">
                Returns the encoded form of this certificate. It is
                  assumed that each certificate type would have only a single
                  form of encoding; for example, X.509 certificates would
                  be encoded as ASN.1 DER.                
                <return>
                    encoded form of this certificate                    
                </return>
                <exception>
                    CertificateEncodingException on internal certificate
                      encoding failure                    
                </exception>
            </javadoc>
            <method name="verify" type="void" line="85"/>
            <javadoc line="85">
                Verifies that this certificate was signed using the
                  private key that corresponds to the specified public key.                
                <param>
                    key the PublicKey used to carry out the verification.                    
                </param>
                <exception>
                    NoSuchAlgorithmException on unsupported signature
                      algorithms.                    
                </exception>
                <exception>
                    InvalidKeyException on incorrect key.                    
                </exception>
                <exception>
                    NoSuchProviderException if there&apos;s no default provider.                    
                </exception>
                <exception>
                    SignatureException on signature errors.                    
                </exception>
                <exception>
                    CertificateException on encoding errors.                    
                </exception>
            </javadoc>
            <method name="verify" type="void" line="97"/>
            <javadoc line="97">
                Verifies that this certificate was signed using the
                  private key that corresponds to the specified public key.
                  This method uses the signature verification engine
                  supplied by the specified provider.                
                <param>
                    key the PublicKey used to carry out the verification.                    
                </param>
                <param>
                    sigProvider the name of the signature provider.                    
                </param>
                <exception>
                    NoSuchAlgorithmException on unsupported signature algorithms.                    
                </exception>
                <exception>
                    InvalidKeyException on incorrect key.                    
                </exception>
                <exception>
                    NoSuchProviderException on incorrect provider.                    
                </exception>
                <exception>
                    SignatureException on signature errors.                    
                </exception>
                <exception>
                    CertificateException on encoding errors.                    
                </exception>
            </javadoc>
            <method name="toString" type="String" line="111"/>
            <javadoc line="111">
                Returns a string representation of this certificate.                
                <return>
                    a string representation of this certificate.                    
                </return>
            </javadoc>
            <method name="getPublicKey" type="PublicKey" line="116"/>
            <javadoc line="116">
                Gets the public key from this certificate.                
                <return>
                    the public key.                    
                </return>
            </javadoc>
        </class>
    </source>