<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.security.sasl">
        <import package="java.util.Map"/>
        <import package="javax.security.auth.callback.CallbackHandler"/>
        <interface name="SaslClientFactory">
            <javadoc line="4">
                An interface for creating instances of &lt;tt&gt;SaslClient&lt;/tt&gt;.
                  A class that implements this interface
                  must be thread-safe and handle multiple simultaneous
                  requests. It must also have a public constructor that accepts no
                  argument.
                  &lt;p&gt;
                  This interface is not normally accessed directly by a client, which will use the
                  &lt;tt&gt;Sasl&lt;/tt&gt; static methods
                  instead. However, a particular environment may provide and install a
                  new or different &lt;tt&gt;SaslClientFactory&lt;/tt&gt;.                
                <since>
                    1.5                    
                </since>
                <see>
                    SaslClient                    
                </see>
                <see>
                    Sasl                    
                </see>
                <author>
                    Rosanna Lee                    
                </author>
                <author>
                    Rob Weltman                    
                </author>
            </javadoc>
            <method name="createSaslClient" type="SaslClient" line="22"/>
            <javadoc line="22">
                Creates a SaslClient using the parameters supplied.                
                <param>
                    mechanisms The non-null list of mechanism names to try. Each is the
                      IANA-registered name of a SASL mechanism. (e.g. &quot;GSSAPI&quot;, &quot;CRAM-MD5&quot;).                    
                </param>
                <param>
                    authorizationId The possibly null protocol-dependent
                      identification to be used for authorization.
                      If null or empty, the server derives an authorization
                      ID from the client&apos;s authentication credentials.
                      When the SASL authentication completes successfully,
                      the specified entity is granted access.                    
                </param>
                <param>
                    protocol The non-null string name of the protocol for which
                      the authentication is being performed (e.g., &quot;ldap&quot;).                    
                </param>
                <param>
                    serverName The non-null fully qualified host name
                      of the server to authenticate to.                    
                </param>
                <param>
                    props The possibly null set of properties used to select the SASL
                      mechanism and to configure the authentication exchange of the selected
                      mechanism. See the &lt;tt&gt;Sasl&lt;/tt&gt; class for a list of standard properties.
                      Other, possibly mechanism-specific, properties can be included.
                      Properties not relevant to the selected mechanism are ignored,
                      including any map entries with non-String keys.                    
                </param>
                <param>
                    cbh The possibly null callback handler to used by the SASL
                      mechanisms to get further information from the application/library
                      to complete the authentication. For example, a SASL mechanism might
                      require the authentication ID, password and realm from the caller.
                      The authentication ID is requested by using a &lt;tt&gt;NameCallback&lt;/tt&gt;.
                      The password is requested by using a &lt;tt&gt;PasswordCallback&lt;/tt&gt;.
                      The realm is requested by using a &lt;tt&gt;RealmChoiceCallback&lt;/tt&gt; if there is a list
                      of realms to choose from, and by using a &lt;tt&gt;RealmCallback&lt;/tt&gt; if
                      the realm must be entered.                    
                </param>
                <return>
                    A possibly null &lt;tt&gt;SaslClient&lt;/tt&gt; created using the parameters
                      supplied. If null, this factory cannot produce a &lt;tt&gt;SaslClient&lt;/tt&gt;
                      using the parameters supplied.                    
                </return>
                <exception>
                    SaslException If cannot create a &lt;tt&gt;SaslClient&lt;/tt&gt; because
                      of an error.                    
                </exception>
            </javadoc>
            <method name="getMechanismNames" type="String[]" line="58"/>
            <javadoc line="58">
                Returns an array of names of mechanisms that match the specified
                  mechanism selection policies.                
                <param>
                    props The possibly null set of properties used to specify the
                      security policy of the SASL mechanisms. For example, if &lt;tt&gt;props&lt;/tt&gt;
                      contains the &lt;tt&gt;Sasl.POLICY_NOPLAINTEXT&lt;/tt&gt; property with the value
                      &lt;tt&gt;&quot;true&quot;&lt;/tt&gt;, then the factory must not return any SASL mechanisms
                      that are susceptible to simple plain passive attacks.
                      See the &lt;tt&gt;Sasl&lt;/tt&gt; class for a complete list of policy properties.
                      Non-policy related properties, if present in &lt;tt&gt;props&lt;/tt&gt;, are ignored,
                      including any map entries with non-String keys.                    
                </param>
                <return>
                    A non-null array containing a IANA-registered SASL mechanism names.                    
                </return>
            </javadoc>
        </interface>
    </source>