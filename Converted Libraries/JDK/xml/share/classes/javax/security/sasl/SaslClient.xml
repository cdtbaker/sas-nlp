<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.security.sasl">
        <interface name="SaslClient">
            <javadoc line="2">
                Performs SASL authentication as a client.
                  &lt;p&gt;
                  A protocol library such as one for LDAP gets an instance of this
                  class in order to perform authentication defined by a specific SASL
                  mechanism. Invoking methods on the &lt;tt&gt;SaslClient&lt;/tt&gt; instance
                  process challenges and create responses according to the SASL
                  mechanism implemented by the &lt;tt&gt;SaslClient&lt;/tt&gt;.
                  As the authentication proceeds, the instance
                  encapsulates the state of a SASL client&apos;s authentication exchange.
                  &lt;p&gt;
                  Here&apos;s an example of how an LDAP library might use a &lt;tt&gt;SaslClient&lt;/tt&gt;.
                  It first gets an instance of a &lt;tt&gt;SaslClient&lt;/tt&gt;:
                  &lt;blockquote&gt;&lt;pre&gt;
                  SaslClient sc = Sasl.createSaslClient(mechanisms,
                  authorizationId, protocol, serverName, props, callbackHandler);
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  It can then proceed to use the client for authentication.
                  For example, an LDAP library might use the client as follows:
                  &lt;blockquote&gt;&lt;pre&gt;
                  // Get initial response and send to server
                  byte[] response = (sc.hasInitialResponse() ? sc.evaluateChallenge(new byte[0]) :
                  null);
                  LdapResult res = ldap.sendBindRequest(dn, sc.getName(), response);
                  while (!sc.isComplete() &amp;&amp;
                  (res.status == SASL_BIND_IN_PROGRESS || res.status == SUCCESS)) {
                  response = sc.evaluateChallenge(res.getBytes());
                  if (res.status == SUCCESS) {
                  // we&apos;re done; don&apos;t expect to send another BIND
                  if (response != null) {
                  throw new SaslException(
                  &quot;Protocol error: attempting to send response after completion&quot;);
                  }
                  break;
                  }
                  res = ldap.sendBindRequest(dn, sc.getName(), response);
                  }
                  if (sc.isComplete() &amp;&amp; res.status == SUCCESS) {
                  String qop = (String) sc.getNegotiatedProperty(Sasl.QOP);
                  if (qop != null
                  &amp;&amp; (qop.equalsIgnoreCase(&quot;auth-int&quot;)
                  || qop.equalsIgnoreCase(&quot;auth-conf&quot;))) {
                  // Use SaslClient.wrap() and SaslClient.unwrap() for future
                  // communication with server
                  ldap.in = new SecureInputStream(sc, ldap.in);
                  ldap.out = new SecureOutputStream(sc, ldap.out);
                  }
                  }
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  If the mechanism has an initial response, the library invokes
                  &lt;tt&gt;evaluateChallenge()&lt;/tt&gt; with an empty
                  challenge and to get initial response.
                  Protocols such as IMAP4, which do not include an initial response with
                  their first authentication command to the server, initiates the
                  authentication without first calling &lt;tt&gt;hasInitialResponse()&lt;/tt&gt;
                  or &lt;tt&gt;evaluateChallenge()&lt;/tt&gt;.
                  When the server responds to the command, it sends an initial challenge.
                  For a SASL mechanism in which the client sends data first, the server should
                  have issued a challenge with no data. This will then result in a call
                  (on the client) to &lt;tt&gt;evaluateChallenge()&lt;/tt&gt; with an empty challenge.                
                <since>
                    1.5                    
                </since>
                <see>
                    Sasl                    
                </see>
                <see>
                    SaslClientFactory                    
                </see>
                <author>
                    Rosanna Lee                    
                </author>
                <author>
                    Rob Weltman                    
                </author>
            </javadoc>
            <method name="getMechanismName" type="String" line="69"/>
            <javadoc line="69">
                Returns the IANA-registered mechanism name of this SASL client.
                  (e.g. &quot;CRAM-MD5&quot;, &quot;GSSAPI&quot;).                
                <return>
                    A non-null string representing the IANA-registered mechanism name.                    
                </return>
            </javadoc>
            <method name="hasInitialResponse" type="boolean" line="75"/>
            <javadoc line="75">
                Determines whether this mechanism has an optional initial response.
                  If true, caller should call &lt;tt&gt;evaluateChallenge()&lt;/tt&gt; with an
                  empty array to get the initial response.                
                <return>
                    true if this mechanism has an initial response.                    
                </return>
            </javadoc>
            <method name="evaluateChallenge" type="byte[]" line="82"/>
            <javadoc line="82">
                Evaluates the challenge data and generates a response.
                  If a challenge is received from the server during the authentication
                  process, this method is called to prepare an appropriate next
                  response to submit to the server.                
                <param>
                    challenge The non-null challenge sent from the server.
                      The challenge array may have zero length.                    
                </param>
                <return>
                    The possibly null reponse to send to the server.
                      It is null if the challenge accompanied a "SUCCESS" status and the challenge
                      only contains data for the client to update its state and no response
                      needs to be sent to the server. The response is a zero-length byte
                      array if the client is to send a response with no data.                    
                </return>
                <exception>
                    SaslException If an error occurred while processing
                      the challenge or generating a response.                    
                </exception>
            </javadoc>
            <method name="isComplete" type="boolean" line="98"/>
            <javadoc line="98">
                Determines whether the authentication exchange has completed.
                  This method may be called at any time, but typically, it
                  will not be called until the caller has received indication
                  from the server
                  (in a protocol-specific manner) that the exchange has completed.                
                <return>
                    true if the authentication exchange has completed; false otherwise.                    
                </return>
            </javadoc>
            <method name="unwrap" type="byte[]" line="107"/>
            <javadoc line="107">
                Unwraps a byte array received from the server.
                  This method can be called only after the authentication exchange has
                  completed (i.e., when &lt;tt&gt;isComplete()&lt;/tt&gt; returns true) and only if
                  the authentication exchange has negotiated integrity and/or privacy
                  as the quality of protection; otherwise, an
                  &lt;tt&gt;IllegalStateException&lt;/tt&gt; is thrown.
                  &lt;p&gt;
                  &lt;tt&gt;incoming&lt;/tt&gt; is the contents of the SASL buffer as defined in RFC 2222
                  without the leading four octet field that represents the length.
                  &lt;tt&gt;offset&lt;/tt&gt; and &lt;tt&gt;len&lt;/tt&gt; specify the portion of &lt;tt&gt;incoming&lt;/tt&gt;
                  to use.                
                <param>
                    incoming A non-null byte array containing the encoded bytes
                      from the server.                    
                </param>
                <param>
                    offset The starting position at <tt>incoming</tt> of the bytes to use.                    
                </param>
                <param>
                    len The number of bytes from <tt>incoming</tt> to use.                    
                </param>
                <return>
                    A non-null byte array containing the decoded bytes.                    
                </return>
                <exception>
                    SaslException if <tt>incoming</tt> cannot be successfully
                      unwrapped.                    
                </exception>
                <exception>
                    IllegalStateException if the authentication exchange has
                      not completed, or  if the negotiated quality of protection
                      has neither integrity nor privacy.                    
                </exception>
            </javadoc>
            <method name="wrap" type="byte[]" line="131"/>
            <javadoc line="131">
                Wraps a byte array to be sent to the server.
                  This method can be called only after the authentication exchange has
                  completed (i.e., when &lt;tt&gt;isComplete()&lt;/tt&gt; returns true) and only if
                  the authentication exchange has negotiated integrity and/or privacy
                  as the quality of protection; otherwise, an
                  &lt;tt&gt;IllegalStateException&lt;/tt&gt; is thrown.
                  &lt;p&gt;
                  The result of this method will make up the contents of the SASL buffer
                  as defined in RFC 2222 without the leading four octet field that
                  represents the length.
                  &lt;tt&gt;offset&lt;/tt&gt; and &lt;tt&gt;len&lt;/tt&gt; specify the portion of &lt;tt&gt;outgoing&lt;/tt&gt;
                  to use.                
                <param>
                    outgoing A non-null byte array containing the bytes to encode.                    
                </param>
                <param>
                    offset The starting position at <tt>outgoing</tt> of the bytes to use.                    
                </param>
                <param>
                    len The number of bytes from <tt>outgoing</tt> to use.                    
                </param>
                <return>
                    A non-null byte array containing the encoded bytes.                    
                </return>
                <exception>
                    SaslException if <tt>outgoing</tt> cannot be successfully
                      wrapped.                    
                </exception>
                <exception>
                    IllegalStateException if the authentication exchange has
                      not completed, or if the negotiated quality of protection
                      has neither integrity nor privacy.                    
                </exception>
            </javadoc>
            <method name="getNegotiatedProperty" type="Object" line="155"/>
            <javadoc line="155">
                Retrieves the negotiated property.
                  This method can be called only after the authentication exchange has
                  completed (i.e., when &lt;tt&gt;isComplete()&lt;/tt&gt; returns true); otherwise, an
                  &lt;tt&gt;IllegalStateException&lt;/tt&gt; is thrown.                
                <param>
                    propName The non-null property name.                    
                </param>
                <return>
                    The value of the negotiated property. If null, the property was
                      not negotiated or is not applicable to this mechanism.                    
                </return>
                <exception>
                    IllegalStateException if this authentication exchange
                      has not completed                    
                </exception>
            </javadoc>
            <method name="dispose" type="void" line="167"/>
            <javadoc line="167">
                Disposes of any system resources or security-sensitive information
                  the SaslClient might be using. Invoking this method invalidates
                  the SaslClient instance. This method is idempotent.                
                <throws>
                    SaslException If a problem was encountered while disposing
                      the resources.                    
                </throws>
            </javadoc>
        </interface>
    </source>