<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.security.sasl">
        <interface name="SaslServer">
            <javadoc line="28">
                Performs SASL authentication as a server.
                  &lt;p&gt;
                  A server such an LDAP server gets an instance of this
                  class in order to perform authentication defined by a specific SASL
                  mechanism. Invoking methods on the &lt;tt&gt;SaslServer&lt;/tt&gt; instance
                  generates challenges according to the SASL
                  mechanism implemented by the &lt;tt&gt;SaslServer&lt;/tt&gt;.
                  As the authentication proceeds, the instance
                  encapsulates the state of a SASL server&apos;s authentication exchange.
                  &lt;p&gt;
                  Here&apos;s an example of how an LDAP server might use a &lt;tt&gt;SaslServer&lt;/tt&gt;.
                  It first gets an instance of a &lt;tt&gt;SaslServer&lt;/tt&gt; for the SASL mechanism
                  requested by the client:
                  &lt;blockquote&gt;&lt;pre&gt;
                  SaslServer ss = Sasl.createSaslServer(mechanism,
                  &quot;ldap&quot;, myFQDN, props, callbackHandler);
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  It can then proceed to use the server for authentication.
                  For example, suppose the LDAP server received an LDAP BIND request
                  containing the name of the SASL mechanism and an (optional) initial
                  response. It then might use the server as follows:
                  &lt;blockquote&gt;&lt;pre&gt;
                  while (!ss.isComplete()) {
                  try {
                  byte[] challenge = ss.evaluateResponse(response);
                  if (ss.isComplete()) {
                  status = ldap.sendBindResponse(mechanism, challenge, SUCCESS);
                  } else {
                  status = ldap.sendBindResponse(mechanism, challenge,
                  SASL_BIND_IN_PROGRESS);
                  response = ldap.readBindRequest();
                  }
                  } catch (SaslException e) {
                  status = ldap.sendErrorResponse(e);
                  break;
                  }
                  }
                  if (ss.isComplete() &amp;&amp; status == SUCCESS) {
                  String qop = (String) sc.getNegotiatedProperty(Sasl.QOP);
                  if (qop != null
                  &amp;&amp; (qop.equalsIgnoreCase(&quot;auth-int&quot;)
                  || qop.equalsIgnoreCase(&quot;auth-conf&quot;))) {
                  // Use SaslServer.wrap() and SaslServer.unwrap() for future
                  // communication with client
                  ldap.in = new SecureInputStream(ss, ldap.in);
                  ldap.out = new SecureOutputStream(ss, ldap.out);
                  }
                  }
                  &lt;/pre&gt;&lt;/blockquote&gt;                
                <since>
                    1.5                    
                </since>
                <see>
                    Sasl                    
                </see>
                <see>
                    SaslServerFactory                    
                </see>
                <author>
                    Rosanna Lee                    
                </author>
                <author>
                    Rob Weltman                    
                </author>
            </javadoc>
            <method name="getMechanismName" type="String" line="90"/>
            <javadoc line="90">
                Returns the IANA-registered mechanism name of this SASL server.
                  (e.g. &quot;CRAM-MD5&quot;, &quot;GSSAPI&quot;).                
                <return>
                    A non-null string representing the IANA-registered mechanism name.                    
                </return>
            </javadoc>
            <method name="evaluateResponse" type="byte[]" line="97"/>
            <javadoc line="97">
                Evaluates the response data and generates a challenge.
                  If a response is received from the client during the authentication
                  process, this method is called to prepare an appropriate next
                  challenge to submit to the client. The challenge is null if the
                  authentication has succeeded and no more challenge data is to be sent
                  to the client. It is non-null if the authentication must be continued
                  by sending a challenge to the client, or if the authentication has
                  succeeded but challenge data needs to be processed by the client.
                  &lt;tt&gt;isComplete()&lt;/tt&gt; should be called
                  after each call to &lt;tt&gt;evaluateResponse()&lt;/tt&gt;,to determine if any further
                  response is needed from the client.                
                <param>
                    response The non-null (but possibly empty) response sent
                      by the client.                    
                </param>
                <return>
                    The possibly null challenge to send to the client.
                      It is null if the authentication has succeeded and there is
                      no more challenge data to be sent to the client.                    
                </return>
                <exception>
                    SaslException If an error occurred while processing
                      the response or generating a challenge.                    
                </exception>
            </javadoc>
            <method name="isComplete" type="boolean" line="123"/>
            <javadoc line="123">
                Determines whether the authentication exchange has completed.
                  This method is typically called after each invocation of
                  &lt;tt&gt;evaluateResponse()&lt;/tt&gt; to determine whether the
                  authentication has completed successfully or should be continued.                
                <return>
                    true if the authentication exchange has completed; false otherwise.                    
                </return>
            </javadoc>
            <method name="getAuthorizationID" type="String" line="132"/>
            <javadoc line="132">
                Reports the authorization ID in effect for the client of this
                  session.
                  This method can only be called if isComplete() returns true.                
                <return>
                    The authorization ID of the client.                    
                </return>
                <exception>
                    IllegalStateException if this authentication session has not completed                    
                </exception>
            </javadoc>
            <method name="unwrap" type="byte[]" line="141"/>
            <javadoc line="141">
                Unwraps a byte array received from the client.
                  This method can be called only after the authentication exchange has
                  completed (i.e., when &lt;tt&gt;isComplete()&lt;/tt&gt; returns true) and only if
                  the authentication exchange has negotiated integrity and/or privacy
                  as the quality of protection; otherwise,
                  an &lt;tt&gt;IllegalStateException&lt;/tt&gt; is thrown.
                  &lt;p&gt;
                  &lt;tt&gt;incoming&lt;/tt&gt; is the contents of the SASL buffer as defined in RFC 2222
                  without the leading four octet field that represents the length.
                  &lt;tt&gt;offset&lt;/tt&gt; and &lt;tt&gt;len&lt;/tt&gt; specify the portion of &lt;tt&gt;incoming&lt;/tt&gt;
                  to use.                
                <param>
                    incoming A non-null byte array containing the encoded bytes
                      from the client.                    
                </param>
                <param>
                    offset The starting position at &lt;tt&gt;incoming&lt;/tt&gt; of the bytes to use.                    
                </param>
                <param>
                    len The number of bytes from &lt;tt&gt;incoming&lt;/tt&gt; to use.                    
                </param>
                <return>
                    A non-null byte array containing the decoded bytes.                    
                </return>
                <exception>
                    SaslException if &lt;tt&gt;incoming&lt;/tt&gt; cannot be successfully
                      unwrapped.                    
                </exception>
                <exception>
                    IllegalStateException if the authentication exchange has
                      not completed, or if the negotiated quality of protection
                      has neither integrity nor privacy                    
                </exception>
            </javadoc>
            <method name="wrap" type="byte[]" line="168"/>
            <javadoc line="168">
                Wraps a byte array to be sent to the client.
                  This method can be called only after the authentication exchange has
                  completed (i.e., when &lt;tt&gt;isComplete()&lt;/tt&gt; returns true) and only if
                  the authentication exchange has negotiated integrity and/or privacy
                  as the quality of protection; otherwise, a &lt;tt&gt;SaslException&lt;/tt&gt; is thrown.
                  &lt;p&gt;
                  The result of this method
                  will make up the contents of the SASL buffer as defined in RFC 2222
                  without the leading four octet field that represents the length.
                  &lt;tt&gt;offset&lt;/tt&gt; and &lt;tt&gt;len&lt;/tt&gt; specify the portion of &lt;tt&gt;outgoing&lt;/tt&gt;
                  to use.                
                <param>
                    outgoing A non-null byte array containing the bytes to encode.                    
                </param>
                <param>
                    offset The starting position at &lt;tt&gt;outgoing&lt;/tt&gt; of the bytes to use.                    
                </param>
                <param>
                    len The number of bytes from &lt;tt&gt;outgoing&lt;/tt&gt; to use.                    
                </param>
                <return>
                    A non-null byte array containing the encoded bytes.                    
                </return>
                <exception>
                    SaslException if &lt;tt&gt;outgoing&lt;/tt&gt; cannot be successfully
                      wrapped.                    
                </exception>
                <exception>
                    IllegalStateException if the authentication exchange has
                      not completed, or if the negotiated quality of protection has
                      neither integrity nor privacy.                    
                </exception>
            </javadoc>
            <method name="getNegotiatedProperty" type="Object" line="194"/>
            <javadoc line="194">
                Retrieves the negotiated property.
                  This method can be called only after the authentication exchange has
                  completed (i.e., when &lt;tt&gt;isComplete()&lt;/tt&gt; returns true); otherwise, an
                  &lt;tt&gt;IllegalStateException&lt;/tt&gt; is thrown.                
                <param>
                    propName the property                    
                </param>
                <return>
                    The value of the negotiated property. If null, the property was
                      not negotiated or is not applicable to this mechanism.                    
                </return>
                <exception>
                    IllegalStateException if this authentication exchange has not completed                    
                </exception>
            </javadoc>
            <method name="dispose" type="void" line="208"/>
            <javadoc line="208">
                Disposes of any system resources or security-sensitive information
                  the SaslServer might be using. Invoking this method invalidates
                  the SaslServer instance. This method is idempotent.                
                <throws>
                    SaslException If a problem was encountered while disposing
                      the resources.                    
                </throws>
            </javadoc>
        </interface>
    </source>