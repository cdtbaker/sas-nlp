<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.security.sasl">
        <import package="javax.security.auth.callback.CallbackHandler"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.Map"/>
        <import package="java.util.Set"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.Collections"/>
        <import package="java.security.Provider"/>
        <import package="java.security.Security"/>
        <class name="Sasl" line="11">
            <javadoc line="11">
                A static class for creating SASL clients and servers.
                  &lt;p&gt;
                  This class defines the policy of how to locate, load, and instantiate
                  SASL clients and servers.
                  &lt;p&gt;
                  For example, an application or library gets a SASL client by doing
                  something like:
                  &lt;blockquote&gt;&lt;pre&gt;
                  SaslClient sc = Sasl.createSaslClient(mechanisms,
                  authorizationId, protocol, serverName, props, callbackHandler);
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  It can then proceed to use the instance to create an authentication connection.
                  &lt;p&gt;
                  Similarly, a server gets a SASL server by using code that looks as follows:
                  &lt;blockquote&gt;&lt;pre&gt;
                  SaslServer ss = Sasl.createSaslServer(mechanism,
                  protocol, serverName, props, callbackHandler);
                  &lt;/pre&gt;&lt;/blockquote&gt;                
                <since>
                    1.5                    
                </since>
                <author>
                    Rosanna Lee                    
                </author>
                <author>
                    Rob Weltman                    
                </author>
            </javadoc>
            <method name="Sasl" type="constructor" line="35"/>
            <declaration name="QOP" type="String" line="37"/>
            <javadoc line="37">
                The name of a property that specifies the quality-of-protection to use.
                  The property contains a comma-separated, ordered list
                  of quality-of-protection values that the
                  client or server is willing to support.  A qop value is one of
                  &lt;ul&gt;
                  &lt;li&gt;&lt;tt&gt;&quot;auth&quot;&lt;/tt&gt; - authentication only&lt;/li&gt;
                  &lt;li&gt;&lt;tt&gt;&quot;auth-int&quot;&lt;/tt&gt; - authentication plus integrity protection&lt;/li&gt;
                  &lt;li&gt;&lt;tt&gt;&quot;auth-conf&quot;&lt;/tt&gt; - authentication plus integrity and confidentiality
                  protection&lt;/li&gt;
                  &lt;/ul&gt;
                  The order of the list specifies the preference order of the client or
                  server. If this property is absent, the default qop is &lt;tt&gt;&quot;auth&quot;&lt;/tt&gt;.
                  The value of this constant is &lt;tt&gt;&quot;javax.security.sasl.qop&quot;&lt;/tt&gt;.                
            </javadoc>
            <declaration name="STRENGTH" type="String" line="53"/>
            <javadoc line="53">
                The name of a property that specifies the cipher strength to use.
                  The property contains a comma-separated, ordered list
                  of cipher strength values that
                  the client or server is willing to support. A strength value is one of
                  &lt;ul&gt;
                  &lt;li&gt;&lt;tt&gt;&quot;low&quot;&lt;/tt&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;tt&gt;&quot;medium&quot;&lt;/tt&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;tt&gt;&quot;high&quot;&lt;/tt&gt;&lt;/li&gt;
                  &lt;/ul&gt;
                  The order of the list specifies the preference order of the client or
                  server.  An implementation should allow configuration of the meaning
                  of these values.  An application may use the Java Cryptography
                  Extension (JCE) with JCE-aware mechanisms to control the selection of
                  cipher suites that match the strength values.
                  &lt;BR&gt;
                  If this property is absent, the default strength is
                  &lt;tt&gt;&quot;high,medium,low&quot;&lt;/tt&gt;.
                  The value of this constant is &lt;tt&gt;&quot;javax.security.sasl.strength&quot;&lt;/tt&gt;.                
            </javadoc>
            <declaration name="SERVER_AUTH" type="String" line="74"/>
            <javadoc line="74">
                The name of a property that specifies whether the
                  server must authenticate to the client. The property contains
                  &lt;tt&gt;&quot;true&quot;&lt;/tt&gt; if the server must
                  authenticate the to client; &lt;tt&gt;&quot;false&quot;&lt;/tt&gt; otherwise.
                  The default is &lt;tt&gt;&quot;false&quot;&lt;/tt&gt;.
                  &lt;br&gt;The value of this constant is
                  &lt;tt&gt;&quot;javax.security.sasl.server.authentication&quot;&lt;/tt&gt;.                
            </javadoc>
            <declaration name="MAX_BUFFER" type="String" line="84"/>
            <javadoc line="84">
                The name of a property that specifies the maximum size of the receive
                  buffer in bytes of &lt;tt&gt;SaslClient&lt;/tt&gt;/&lt;tt&gt;SaslServer&lt;/tt&gt;.
                  The property contains the string representation of an integer.
                  &lt;br&gt;If this property is absent, the default size
                  is defined by the mechanism.
                  &lt;br&gt;The value of this constant is &lt;tt&gt;&quot;javax.security.sasl.maxbuffer&quot;&lt;/tt&gt;.                
            </javadoc>
            <declaration name="RAW_SEND_SIZE" type="String" line="93"/>
            <javadoc line="93">
                The name of a property that specifies the maximum size of the raw send
                  buffer in bytes of &lt;tt&gt;SaslClient&lt;/tt&gt;/&lt;tt&gt;SaslServer&lt;/tt&gt;.
                  The property contains the string representation of an integer.
                  The value of this property is negotiated between the client and server
                  during the authentication exchange.
                  &lt;br&gt;The value of this constant is &lt;tt&gt;&quot;javax.security.sasl.rawsendsize&quot;&lt;/tt&gt;.                
            </javadoc>
            <declaration name="REUSE" type="String" line="102"/>
            <javadoc line="102">
                The name of a property that specifies whether to reuse previously
                  authenticated session information. The property contains &quot;true&quot; if the
                  mechanism implementation may attempt to reuse previously authenticated
                  session information; it contains &quot;false&quot; if the implementation must
                  not reuse previously authenticated session information.  A setting of
                  &quot;true&quot; serves only as a hint: it does not necessarily entail actual
                  reuse because reuse might not be possible due to a number of reasons,
                  including, but not limited to, lack of mechanism support for reuse,
                  expiration of reusable information, and the peer&apos;s refusal to support
                  reuse.
                  The property&apos;s default value is &quot;false&quot;.  The value of this constant
                  is &quot;javax.security.sasl.reuse&quot;.
                  Note that all other parameters and properties required to create a
                  SASL client/server instance must be provided regardless of whether
                  this property has been supplied. That is, you cannot supply any less
                  information in anticipation of reuse.
                  Mechanism implementations that support reuse might allow customization
                  of its implementation, for factors such as cache size, timeouts, and
                  criteria for reuseability. Such customizations are
                  implementation-dependent.                
            </javadoc>
            <declaration name="POLICY_NOPLAINTEXT" type="String" line="125"/>
            <javadoc line="125">
                The name of a property that specifies
                  whether mechanisms susceptible to simple plain passive attacks (e.g.,
                  &quot;PLAIN&quot;) are not permitted. The property
                  contains &lt;tt&gt;&quot;true&quot;&lt;/tt&gt; if such mechanisms are not permitted;
                  &lt;tt&gt;&quot;false&quot;&lt;/tt&gt; if such mechanisms are permitted.
                  The default is &lt;tt&gt;&quot;false&quot;&lt;/tt&gt;.
                  &lt;br&gt;The value of this constant is
                  &lt;tt&gt;&quot;javax.security.sasl.policy.noplaintext&quot;&lt;/tt&gt;.                
            </javadoc>
            <declaration name="POLICY_NOACTIVE" type="String" line="136"/>
            <javadoc line="136">
                The name of a property that specifies whether
                  mechanisms susceptible to active (non-dictionary) attacks
                  are not permitted.
                  The property contains &lt;tt&gt;&quot;true&quot;&lt;/tt&gt;
                  if mechanisms susceptible to active attacks
                  are not permitted; &lt;tt&gt;&quot;false&quot;&lt;/tt&gt; if such mechanisms are permitted.
                  The default is &lt;tt&gt;&quot;false&quot;&lt;/tt&gt;.
                  &lt;br&gt;The value of this constant is
                  &lt;tt&gt;&quot;javax.security.sasl.policy.noactive&quot;&lt;/tt&gt;.                
            </javadoc>
            <declaration name="POLICY_NODICTIONARY" type="String" line="148"/>
            <javadoc line="148">
                The name of a property that specifies whether
                  mechanisms susceptible to passive dictionary attacks are not permitted.
                  The property contains &lt;tt&gt;&quot;true&quot;&lt;/tt&gt;
                  if mechanisms susceptible to dictionary attacks are not permitted;
                  &lt;tt&gt;&quot;false&quot;&lt;/tt&gt; if such mechanisms are permitted.
                  The default is &lt;tt&gt;&quot;false&quot;&lt;/tt&gt;.
                  &lt;br&gt;
                  The value of this constant is
                  &lt;tt&gt;&quot;javax.security.sasl.policy.nodictionary&quot;&lt;/tt&gt;.                
            </javadoc>
            <declaration name="POLICY_NOANONYMOUS" type="String" line="160"/>
            <javadoc line="160">
                The name of a property that specifies whether mechanisms that accept
                  anonymous login are not permitted. The property contains &lt;tt&gt;&quot;true&quot;&lt;/tt&gt;
                  if mechanisms that accept anonymous login are not permitted;
                  &lt;tt&gt;&quot;false&quot;&lt;/tt&gt;
                  if such mechanisms are permitted. The default is &lt;tt&gt;&quot;false&quot;&lt;/tt&gt;.
                  &lt;br&gt;
                  The value of this constant is
                  &lt;tt&gt;&quot;javax.security.sasl.policy.noanonymous&quot;&lt;/tt&gt;.                
            </javadoc>
            <declaration name="POLICY_FORWARD_SECRECY" type="String" line="171"/>
            <javadoc line="171">
                The name of a property that specifies whether mechanisms that implement
                  forward secrecy between sessions are required. Forward secrecy
                  means that breaking into one session will not automatically
                  provide information for breaking into future sessions.
                  The property
                  contains &lt;tt&gt;&quot;true&quot;&lt;/tt&gt; if mechanisms that implement forward secrecy
                  between sessions are required; &lt;tt&gt;&quot;false&quot;&lt;/tt&gt; if such mechanisms
                  are not required. The default is &lt;tt&gt;&quot;false&quot;&lt;/tt&gt;.
                  &lt;br&gt;
                  The value of this constant is
                  &lt;tt&gt;&quot;javax.security.sasl.policy.forward&quot;&lt;/tt&gt;.                
            </javadoc>
            <declaration name="POLICY_PASS_CREDENTIALS" type="String" line="185"/>
            <javadoc line="185">
                The name of a property that specifies whether
                  mechanisms that pass client credentials are required. The property
                  contains &lt;tt&gt;&quot;true&quot;&lt;/tt&gt; if mechanisms that pass
                  client credentials are required; &lt;tt&gt;&quot;false&quot;&lt;/tt&gt;
                  if such mechanisms are not required. The default is &lt;tt&gt;&quot;false&quot;&lt;/tt&gt;.
                  &lt;br&gt;
                  The value of this constant is
                  &lt;tt&gt;&quot;javax.security.sasl.policy.credentials&quot;&lt;/tt&gt;.                
            </javadoc>
            <declaration name="CREDENTIALS" type="String" line="196"/>
            <javadoc line="196">
                The name of a property that specifies the credentials to use.
                  The property contains a mechanism-specific Java credential object.
                  Mechanism implementations may examine the value of this property
                  to determine whether it is a class that they support.
                  The property may be used to supply credentials to a mechanism that
                  supports delegated authentication.
                  &lt;br&gt;
                  The value of this constant is
                  &lt;tt&gt;&quot;javax.security.sasl.credentials&quot;&lt;/tt&gt;.                
            </javadoc>
            <javadoc line="208">
                Creates a &lt;tt&gt;SaslClient&lt;/tt&gt; using the parameters supplied.
                  This method uses the
                  &lt;a href=&quot;{@docRoot}/../technotes/guides/security/crypto/CryptoSpec.html#Provider&quot;&gt;JCA Security Provider Framework&lt;/a&gt;, described in the
                  &quot;Java Cryptography Architecture API Specification &amp; Reference&quot;, for
                  locating and selecting a &lt;tt&gt;SaslClient&lt;/tt&gt; implementation.
                  First, it
                  obtains an ordered list of &lt;tt&gt;SaslClientFactory&lt;/tt&gt; instances from
                  the registered security providers for the &quot;SaslClientFactory&quot; service
                  and the specified SASL mechanism(s). It then invokes
                  &lt;tt&gt;createSaslClient()&lt;/tt&gt; on each factory instance on the list
                  until one produces a non-null &lt;tt&gt;SaslClient&lt;/tt&gt; instance. It returns
                  the non-null &lt;tt&gt;SaslClient&lt;/tt&gt; instance, or null if the search fails
                  to produce a non-null &lt;tt&gt;SaslClient&lt;/tt&gt; instance.
                  &lt;p&gt;
                  A security provider for SaslClientFactory registers with the
                  JCA Security Provider Framework keys of the form &lt;br&gt;
                  &lt;tt&gt;SaslClientFactory.&lt;em&gt;mechanism_name&lt;/em&gt;&lt;/tt&gt;
                  &lt;br&gt;
                  and values that are class names of implementations of
                  &lt;tt&gt;javax.security.sasl.SaslClientFactory&lt;/tt&gt;.
                  For example, a provider that contains a factory class,
                  &lt;tt&gt;com.wiz.sasl.digest.ClientFactory&lt;/tt&gt;, that supports the
                  &quot;DIGEST-MD5&quot; mechanism would register the following entry with the JCA:
                  &lt;tt&gt;SaslClientFactory.DIGEST-MD5 com.wiz.sasl.digest.ClientFactory&lt;/tt&gt;
                  &lt;p&gt;
                  See the
                  &quot;Java Cryptography Architecture API Specification &amp; Reference&quot;
                  for information about how to install and configure security service
                  providers.                
                <param>
                    mechanisms The non-null list of mechanism names to try. Each is the
                      IANA-registered name of a SASL mechanism. (e.g. "GSSAPI", "CRAM-MD5").                    
                </param>
                <param>
                    authorizationId The possibly null protocol-dependent
                      identification to be used for authorization.
                      If null or empty, the server derives an authorization
                      ID from the client's authentication credentials.
                      When the SASL authentication completes successfully,
                      the specified entity is granted access.                    
                </param>
                <param>
                    protocol The non-null string name of the protocol for which
                      the authentication is being performed (e.g., "ldap").                    
                </param>
                <param>
                    serverName The non-null fully-qualified host name of the server
                      to authenticate to.                    
                </param>
                <param>
                    props The possibly null set of properties used to
                      select the SASL mechanism and to configure the authentication
                      exchange of the selected mechanism.
                      For example, if <tt>props</tt> contains the
                      <code>Sasl.POLICY_NOPLAINTEXT</code> property with the value
                      <tt>"true"</tt>, then the selected
                      SASL mechanism must not be susceptible to simple plain passive attacks.
                      In addition to the standard properties declared in this class,
                      other, possibly mechanism-specific, properties can be included.
                      Properties not relevant to the selected mechanism are ignored,
                      including any map entries with non-String keys.                    
                </param>
                <param>
                    cbh The possibly null callback handler to used by the SASL
                      mechanisms to get further information from the application/library
                      to complete the authentication. For example, a SASL mechanism might
                      require the authentication ID, password and realm from the caller.
                      The authentication ID is requested by using a <tt>NameCallback</tt>.
                      The password is requested by using a <tt>PasswordCallback</tt>.
                      The realm is requested by using a <tt>RealmChoiceCallback</tt> if there is a list
                      of realms to choose from, and by using a <tt>RealmCallback</tt> if
                      the realm must be entered.                    
                </param>
                <return>
                    A possibly null <tt>SaslClient</tt> created using the parameters
                      supplied. If null, cannot find a <tt>SaslClientFactory</tt>
                      that will produce one.                    
                </return>
                <exception>
                    SaslException If cannot create a <tt>SaslClient</tt> because
                      of an error.                    
                </exception>
            </javadoc>
            <method name="createSaslClient" type="SaslClient" line="276">
                <params>
                    <param name="mechanisms" type="String[]"/>
                    <param name="authorizationId" type="String"/>
                    <param name="protocol" type="String"/>
                    <param name="serverName" type="String"/>
                    <param name="props" type="Map<String,?>"/>
                    <param name="cbh" type="CallbackHandler"/>
                </params>
                <declaration name="mech" type="SaslClient" line="277"/>
                <declaration name="fac" type="SaslClientFactory" line="278"/>
                <declaration name="className" type="String" line="279"/>
                <declaration name="mechName" type="String" line="280"/>
                <scope line="281">
                    <scope line="282"/>
                    <scope line="285"/>
                    <declaration name="mechFilter" type="String" line="288"/>
                    <declaration name="provs" type="Provider[]" line="289"/>
                    <scope line="290">
                        <scope line="292"/>
                        <scope line="296">
                            <scope line="298"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="loadFactory" type="Object" line="306">
                <params>
                    <param name="p" type="Provider"/>
                    <param name="className" type="String"/>
                </params>
                <scope line="307">
                    <declaration name="cl" type="ClassLoader" line="308"/>
                    <declaration name="implClass" type="Class" line="309"/>
                </scope>
                <scope line="313"/>
                <scope line="316"/>
                <scope line="319"/>
                <scope line="322"/>
            </method>
            <javadoc line="326">
                Creates a &lt;tt&gt;SaslServer&lt;/tt&gt; for the specified mechanism.
                  This method uses the
                  &lt;a href=&quot;{@docRoot}/../technotes/guides/security/crypto/CryptoSpec.html#Provider&quot;&gt;JCA Security Provider Framework&lt;/a&gt;,
                  described in the
                  &quot;Java Cryptography Architecture API Specification &amp; Reference&quot;, for
                  locating and selecting a &lt;tt&gt;SaslServer&lt;/tt&gt; implementation.
                  First, it
                  obtains an ordered list of &lt;tt&gt;SaslServerFactory&lt;/tt&gt; instances from
                  the registered security providers for the &quot;SaslServerFactory&quot; service
                  and the specified mechanism. It then invokes
                  &lt;tt&gt;createSaslServer()&lt;/tt&gt; on each factory instance on the list
                  until one produces a non-null &lt;tt&gt;SaslServer&lt;/tt&gt; instance. It returns
                  the non-null &lt;tt&gt;SaslServer&lt;/tt&gt; instance, or null if the search fails
                  to produce a non-null &lt;tt&gt;SaslServer&lt;/tt&gt; instance.
                  &lt;p&gt;
                  A security provider for SaslServerFactory registers with the
                  JCA Security Provider Framework keys of the form &lt;br&gt;
                  &lt;tt&gt;SaslServerFactory.&lt;em&gt;mechanism_name&lt;/em&gt;&lt;/tt&gt;
                  &lt;br&gt;
                  and values that are class names of implementations of
                  &lt;tt&gt;javax.security.sasl.SaslServerFactory&lt;/tt&gt;.
                  For example, a provider that contains a factory class,
                  &lt;tt&gt;com.wiz.sasl.digest.ServerFactory&lt;/tt&gt;, that supports the
                  &quot;DIGEST-MD5&quot; mechanism would register the following entry with the JCA:
                  &lt;tt&gt;SaslServerFactory.DIGEST-MD5  com.wiz.sasl.digest.ServerFactory&lt;/tt&gt;
                  &lt;p&gt;
                  See the
                  &quot;Java Cryptography Architecture API Specification &amp; Reference&quot;
                  for information about how to install and configure security
                  service providers.                
                <param>
                    mechanism The non-null mechanism name. It must be an
                      IANA-registered name of a SASL mechanism. (e.g. "GSSAPI", "CRAM-MD5").                    
                </param>
                <param>
                    protocol The non-null string name of the protocol for which
                      the authentication is being performed (e.g., "ldap").                    
                </param>
                <param>
                    serverName The non-null fully qualified host name of the server.                    
                </param>
                <param>
                    props The possibly null set of properties used to
                      select the SASL mechanism and to configure the authentication
                      exchange of the selected mechanism.
                      For example, if <tt>props</tt> contains the
                      <code>Sasl.POLICY_NOPLAINTEXT</code> property with the value
                      <tt>"true"</tt>, then the selected
                      SASL mechanism must not be susceptible to simple plain passive attacks.
                      In addition to the standard properties declared in this class,
                      other, possibly mechanism-specific, properties can be included.
                      Properties not relevant to the selected mechanism are ignored,
                      including any map entries with non-String keys.                    
                </param>
                <param>
                    cbh The possibly null callback handler to used by the SASL
                      mechanisms to get further information from the application/library
                      to complete the authentication. For example, a SASL mechanism might
                      require the authentication ID, password and realm from the caller.
                      The authentication ID is requested by using a <tt>NameCallback</tt>.
                      The password is requested by using a <tt>PasswordCallback</tt>.
                      The realm is requested by using a <tt>RealmChoiceCallback</tt> if there is a list
                      of realms to choose from, and by using a <tt>RealmCallback</tt> if
                      the realm must be entered.                    
                </param>
                <return>
                    A possibly null <tt>SaslServer</tt> created using the parameters
                      supplied. If null, cannot find a <tt>SaslServerFactory</tt>
                      that will produce one.                    
                </return>
                <exception>
                    SaslException If cannot create a <tt>SaslServer</tt> because
                      of an error.                    
                </exception>
            </javadoc>
            <method name="createSaslServer" type="SaslServer" line="388">
                <params>
                    <param name="mechanism" type="String"/>
                    <param name="protocol" type="String"/>
                    <param name="serverName" type="String"/>
                    <param name="props" type="Map<String,?>"/>
                    <param name="cbh" type="javax.security.auth.callback.CallbackHandler"/>
                </params>
                <declaration name="mech" type="SaslServer" line="389"/>
                <declaration name="fac" type="SaslServerFactory" line="390"/>
                <declaration name="className" type="String" line="391"/>
                <scope line="392"/>
                <scope line="395"/>
                <declaration name="mechFilter" type="String" line="398"/>
                <declaration name="provs" type="Provider[]" line="399"/>
                <scope line="400">
                    <scope line="402"/>
                    <scope line="406">
                        <scope line="408"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="415">
                Gets an enumeration of known factories for producing &lt;tt&gt;SaslClient&lt;/tt&gt;.
                  This method uses the same algorithm for locating factories as
                  &lt;tt&gt;createSaslClient()&lt;/tt&gt;.                
                <return>
                    A non-null enumeration of known factories for producing
                      <tt>SaslClient</tt>.                    
                </return>
                <see>
                    #createSaslClient                    
                </see>
            </javadoc>
            <method name="getSaslClientFactories" type="Enumeration<SaslClientFactory>" line="423">
                <declaration name="facs" type="Set&lt;Object&gt;" line="424"/>
                <declaration name="iter" type="Iterator&lt;Object&gt;" line="425"/>
                <anonymous_class line="426">
                    <method name="hasMoreElements" type="boolean" line="427"/>
                    <method name="nextElement" type="SaslClientFactory" line="430"/>
                </anonymous_class>
            </method>
            <javadoc line="436">
                Gets an enumeration of known factories for producing &lt;tt&gt;SaslServer&lt;/tt&gt;.
                  This method uses the same algorithm for locating factories as
                  &lt;tt&gt;createSaslServer()&lt;/tt&gt;.                
                <return>
                    A non-null enumeration of known factories for producing
                      <tt>SaslServer</tt>.                    
                </return>
                <see>
                    #createSaslServer                    
                </see>
            </javadoc>
            <method name="getSaslServerFactories" type="Enumeration<SaslServerFactory>" line="444">
                <declaration name="facs" type="Set&lt;Object&gt;" line="445"/>
                <declaration name="iter" type="Iterator&lt;Object&gt;" line="446"/>
                <anonymous_class line="447">
                    <method name="hasMoreElements" type="boolean" line="448"/>
                    <method name="nextElement" type="SaslServerFactory" line="451"/>
                </anonymous_class>
            </method>
            <method name="getFactories" type="Set<Object>" line="457">
                <params>
                    <param name="serviceName" type="String"/>
                </params>
                <declaration name="result" type="HashSet&lt;Object&gt;" line="458"/>
                <scope line="459"/>
                <declaration name="providers" type="Provider[]" line="462"/>
                <declaration name="classes" type="HashSet&lt;String&gt;" line="463"/>
                <declaration name="fac" type="Object" line="464"/>
                <scope line="465">
                    <scope line="467">
                        <declaration name="currentKey" type="String" line="468"/>
                        <scope line="469">
                            <scope line="470">
                                <declaration name="className" type="String" line="471"/>
                                <scope line="472">
                                    <scope line="474">
                                        <scope line="476"/>
                                    </scope>
                                    <scope line="480"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
        </class>
    </source>