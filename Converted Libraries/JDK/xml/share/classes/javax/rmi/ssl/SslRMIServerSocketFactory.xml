<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.rmi.ssl">
        <import package="java.io.IOException"/>
        <import package="java.net.ServerSocket"/>
        <import package="java.net.Socket"/>
        <import package="java.rmi.server.RMIServerSocketFactory"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.List"/>
        <import package="javax.net.ssl.SSLContext"/>
        <import package="javax.net.ssl.SSLServerSocketFactory"/>
        <import package="javax.net.ssl.SSLSocket"/>
        <import package="javax.net.ssl.SSLSocketFactory"/>
        <class name="SslRMIServerSocketFactory" line="12">
            <implements interface="RMIServerSocketFactory"/>
            <javadoc line="12">
                &lt;p&gt;An &lt;code&gt;SslRMIServerSocketFactory&lt;/code&gt; instance is used by the RMI
                  runtime in order to obtain server sockets for RMI calls via SSL.&lt;/p&gt;
                  &lt;p&gt;This class implements &lt;code&gt;RMIServerSocketFactory&lt;/code&gt; over
                  the Secure Sockets Layer (SSL) or Transport Layer Security (TLS)
                  protocols.&lt;/p&gt;
                  &lt;p&gt;This class creates SSL sockets using the default
                  &lt;code&gt;SSLSocketFactory&lt;/code&gt; (see {@link SSLSocketFactory#getDefault}) or the default
                  &lt;code&gt;SSLServerSocketFactory&lt;/code&gt; (see {@link SSLServerSocketFactory#getDefault}) unless the
                  constructor taking an &lt;code&gt;SSLContext&lt;/code&gt; is
                  used in which case the SSL sockets are created using
                  the &lt;code&gt;SSLSocketFactory&lt;/code&gt; returned by{@link SSLContext#getSocketFactory} or the
                  &lt;code&gt;SSLServerSocketFactory&lt;/code&gt; returned by{@link SSLContext#getServerSocketFactory}.
                  When an &lt;code&gt;SSLContext&lt;/code&gt; is not supplied all the instances of this
                  class share the same keystore, and the same truststore (when client
                  authentication is required by the server). This behavior can be modified
                  by supplying an already initialized &lt;code&gt;SSLContext&lt;/code&gt; instance.                
                <see>
                    javax.net.ssl.SSLSocketFactory                    
                </see>
                <see>
                    javax.net.ssl.SSLServerSocketFactory                    
                </see>
                <see>
                    javax.rmi.ssl.SslRMIClientSocketFactory                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <javadoc line="35">
                &lt;p&gt;Creates a new &lt;code&gt;SslRMIServerSocketFactory&lt;/code&gt; with
                  the default SSL socket configuration.&lt;/p&gt;
                  &lt;p&gt;SSL connections accepted by server sockets created by this
                  factory have the default cipher suites and protocol versions
                  enabled and do not require client authentication.&lt;/p&gt;                
            </javadoc>
            <method name="SslRMIServerSocketFactory" type="constructor" line="42"/>
            <javadoc line="45">
                &lt;p&gt;Creates a new &lt;code&gt;SslRMIServerSocketFactory&lt;/code&gt; with
                  the specified SSL socket configuration.&lt;/p&gt;                
                <param>
                    enabledCipherSuites names of all the cipher suites to
                      enable on SSL connections accepted by server sockets created by
                      this factory, or &lt;code&gt;null&lt;/code&gt; to use the cipher suites
                      that are enabled by default                    
                </param>
                <param>
                    enabledProtocols names of all the protocol versions to
                      enable on SSL connections accepted by server sockets created by
                      this factory, or &lt;code&gt;null&lt;/code&gt; to use the protocol versions
                      that are enabled by default                    
                </param>
                <param>
                    needClientAuth &lt;code&gt;true&lt;/code&gt; to require client
                      authentication on SSL connections accepted by server sockets
                      created by this factory; &lt;code&gt;false&lt;/code&gt; to not require
                      client authentication                    
                </param>
                <exception>
                    IllegalArgumentException when one or more of the cipher
                      suites named by the &lt;code&gt;enabledCipherSuites&lt;/code&gt; parameter is
                      not supported, when one or more of the protocols named by the
                      &lt;code&gt;enabledProtocols&lt;/code&gt; parameter is not supported or when
                      a problem is encountered while trying to check if the supplied
                      cipher suites and protocols to be enabled are supported.                    
                </exception>
                <see>
                    SSLSocket#setEnabledCipherSuites                    
                </see>
                <see>
                    SSLSocket#setEnabledProtocols                    
                </see>
                <see>
                    SSLSocket#setNeedClientAuth                    
                </see>
            </javadoc>
            <method name="SslRMIServerSocketFactory" type="constructor" line="70">
                <params>
                    <param name="enabledCipherSuites" type="String[]"/>
                    <param name="enabledProtocols" type="String[]"/>
                    <param name="needClientAuth" type="boolean"/>
                </params>
            </method>
            <javadoc line="73">
                &lt;p&gt;Creates a new &lt;code&gt;SslRMIServerSocketFactory&lt;/code&gt; with the
                  specified &lt;code&gt;SSLContext&lt;/code&gt; and SSL socket configuration.&lt;/p&gt;                
                <param>
                    context the SSL context to be used for creating SSL sockets.
                      If &lt;code&gt;context&lt;/code&gt; is null the default &lt;code&gt;SSLSocketFactory&lt;/code&gt;
                      or the default &lt;code&gt;SSLServerSocketFactory&lt;/code&gt; will be used to
                      create SSL sockets. Otherwise, the socket factory returned by
                      &lt;code&gt;SSLContext.getSocketFactory()&lt;/code&gt; or
                      &lt;code&gt;SSLContext.getServerSocketFactory()&lt;/code&gt; will be used instead.                    
                </param>
                <param>
                    enabledCipherSuites names of all the cipher suites to
                      enable on SSL connections accepted by server sockets created by
                      this factory, or &lt;code&gt;null&lt;/code&gt; to use the cipher suites
                      that are enabled by default                    
                </param>
                <param>
                    enabledProtocols names of all the protocol versions to
                      enable on SSL connections accepted by server sockets created by
                      this factory, or &lt;code&gt;null&lt;/code&gt; to use the protocol versions
                      that are enabled by default                    
                </param>
                <param>
                    needClientAuth &lt;code&gt;true&lt;/code&gt; to require client
                      authentication on SSL connections accepted by server sockets
                      created by this factory; &lt;code&gt;false&lt;/code&gt; to not require
                      client authentication                    
                </param>
                <exception>
                    IllegalArgumentException when one or more of the cipher
                      suites named by the &lt;code&gt;enabledCipherSuites&lt;/code&gt; parameter is
                      not supported, when one or more of the protocols named by the
                      &lt;code&gt;enabledProtocols&lt;/code&gt; parameter is not supported or when
                      a problem is encountered while trying to check if the supplied
                      cipher suites and protocols to be enabled are supported.                    
                </exception>
                <see>
                    SSLSocket#setEnabledCipherSuites                    
                </see>
                <see>
                    SSLSocket#setEnabledProtocols                    
                </see>
                <see>
                    SSLSocket#setNeedClientAuth                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="SslRMIServerSocketFactory" type="constructor" line="105">
                <params>
                    <param name="context" type="SSLContext"/>
                    <param name="enabledCipherSuites" type="String[]"/>
                    <param name="enabledProtocols" type="String[]"/>
                    <param name="needClientAuth" type="boolean"/>
                </params>
                <declaration name="sslSocketFactory" type="SSLSocketFactory" line="110"/>
                <declaration name="sslSocket" type="SSLSocket" line="111"/>
                <scope line="112">
                    <scope line="113"/>
                    <scope line="116">
                        <declaration name="msg" type="String" line="117"/>
                    </scope>
                </scope>
                <scope line="121"/>
                <scope line="125"/>
            </method>
            <javadoc line="130">
                &lt;p&gt;Returns the names of the cipher suites enabled on SSL
                  connections accepted by server sockets created by this factory,
                  or &lt;code&gt;null&lt;/code&gt; if this factory uses the cipher suites
                  that are enabled by default.&lt;/p&gt;                
                <return>
                    an array of cipher suites enabled, or &lt;code&gt;null&lt;/code&gt;                    
                </return>
                <see>
                    SSLSocket#setEnabledCipherSuites                    
                </see>
            </javadoc>
            <method name="getEnabledCipherSuites" type="String[]" line="138"/>
            <javadoc line="141">
                &lt;p&gt;Returns the names of the protocol versions enabled on SSL
                  connections accepted by server sockets created by this factory,
                  or &lt;code&gt;null&lt;/code&gt; if this factory uses the protocol versions
                  that are enabled by default.&lt;/p&gt;                
                <return>
                    an array of protocol versions enabled, or
                      &lt;code&gt;null&lt;/code&gt;                    
                </return>
                <see>
                    SSLSocket#setEnabledProtocols                    
                </see>
            </javadoc>
            <method name="getEnabledProtocols" type="String[]" line="150"/>
            <javadoc line="153">
                &lt;p&gt;Returns &lt;code&gt;true&lt;/code&gt; if client authentication is
                  required on SSL connections accepted by server sockets created
                  by this factory.&lt;/p&gt;                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if client authentication is required                    
                </return>
                <see>
                    SSLSocket#setNeedClientAuth                    
                </see>
            </javadoc>
            <method name="getNeedClientAuth" type="boolean" line="160"/>
            <javadoc line="163">
                &lt;p&gt;Creates a server socket that accepts SSL connections
                  configured according to this factory&apos;s SSL socket configuration
                  parameters.&lt;/p&gt;                
            </javadoc>
            <method name="createServerSocket" type="ServerSocket" line="168">
                <params>
                    <param name="port" type="int"/>
                </params>
                <declaration name="sslSocketFactory" type="SSLSocketFactory" line="169"/>
                <anonymous_class line="170">
                    <method name="accept" type="Socket" line="171">
                        <declaration name="socket" type="Socket" line="172"/>
                        <declaration name="sslSocket" type="SSLSocket" line="173"/>
                        <scope line="175"/>
                        <scope line="178"/>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="187">
                &lt;p&gt;Indicates whether some other object is &quot;equal to&quot; this one.&lt;/p&gt;
                  &lt;p&gt;Two &lt;code&gt;SslRMIServerSocketFactory&lt;/code&gt; objects are equal
                  if they have been constructed with the same SSL context and
                  SSL socket configuration parameters.&lt;/p&gt;
                  &lt;p&gt;A subclass should override this method (as well as{@link #hashCode()}) if it adds instance state that affects
                  equality.&lt;/p&gt;                
            </javadoc>
            <method name="equals" type="boolean" line="195">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <declaration name="that" type="SslRMIServerSocketFactory" line="199"/>
            </method>
            <method name="checkParameters" type="boolean" line="202">
                <params>
                    <param name="that" type="SslRMIServerSocketFactory"/>
                </params>
                <scope line="206">
                    <declaration name="thatEnabledCipherSuitesList" type="List&amp;lt;String&amp;gt;" line="207"/>
                </scope>
                <scope line="211">
                    <declaration name="thatEnabledProtocolsList" type="List&amp;lt;String&amp;gt;" line="212"/>
                </scope>
            </method>
            <javadoc line="217">
                &lt;p&gt;Returns a hash code value for this
                  &lt;code&gt;SslRMIServerSocketFactory&lt;/code&gt;.&lt;/p&gt;                
                <return>
                    a hash code value for this
                      &lt;code&gt;SslRMIServerSocketFactory&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="223"/>
            <declaration name="defaultSSLSocketFactory" type="SSLSocketFactory" line="226"/>
            <method name="getDefaultSSLSocketFactory" type="SSLSocketFactory" line="227"/>
            <declaration name="enabledCipherSuites" type="String[]" line="231"/>
            <declaration name="enabledProtocols" type="String[]" line="232"/>
            <declaration name="needClientAuth" type="boolean" line="233"/>
            <declaration name="enabledCipherSuitesList" type="List&amp;lt;String&amp;gt;" line="234"/>
            <declaration name="enabledProtocolsList" type="List&amp;lt;String&amp;gt;" line="235"/>
            <declaration name="context" type="SSLContext" line="236"/>
        </class>
    </source>