<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.rmi.ssl">
        <import package="java.io.IOException"/>
        <import package="java.io.Serializable"/>
        <import package="java.net.Socket"/>
        <import package="java.rmi.server.RMIClientSocketFactory"/>
        <import package="java.util.StringTokenizer"/>
        <import package="javax.net.SocketFactory"/>
        <import package="javax.net.ssl.SSLSocket"/>
        <import package="javax.net.ssl.SSLSocketFactory"/>
        <class name="SslRMIClientSocketFactory" line="10">
            <implements interface="RMIClientSocketFactory"/>
            <implements interface="Serializable"/>
            <javadoc line="10">
                &lt;p&gt;An &lt;code&gt;SslRMIClientSocketFactory&lt;/code&gt; instance is used by the RMI
                  runtime in order to obtain client sockets for RMI calls via SSL.&lt;/p&gt;
                  &lt;p&gt;This class implements &lt;code&gt;RMIClientSocketFactory&lt;/code&gt; over
                  the Secure Sockets Layer (SSL) or Transport Layer Security (TLS)
                  protocols.&lt;/p&gt;
                  &lt;p&gt;This class creates SSL sockets using the default
                  &lt;code&gt;SSLSocketFactory&lt;/code&gt; (see {@link SSLSocketFactory#getDefault}).  All instances of this class are
                  functionally equivalent.  In particular, they all share the same
                  truststore, and the same keystore when client authentication is
                  required by the server.  This behavior can be modified in
                  subclasses by overriding the {@link #createSocket(String,int)}method; in that case, {@link #equals(Object) equals} and {@link #hashCode() hashCode} may also need to be overridden.&lt;/p&gt;
                  &lt;p&gt;If the system property
                  &lt;code&gt;javax.rmi.ssl.client.enabledCipherSuites&lt;/code&gt; is specified,
                  the {@link #createSocket(String,int)} method will call {@link SSLSocket#setEnabledCipherSuites(String[])} before returning the
                  socket.  The value of this system property is a string that is a
                  comma-separated list of SSL/TLS cipher suites to enable.&lt;/p&gt;
                  &lt;p&gt;If the system property
                  &lt;code&gt;javax.rmi.ssl.client.enabledProtocols&lt;/code&gt; is specified,
                  the {@link #createSocket(String,int)} method will call {@link SSLSocket#setEnabledProtocols(String[])} before returning the
                  socket.  The value of this system property is a string that is a
                  comma-separated list of SSL/TLS protocol versions to enable.&lt;/p&gt;                
                <see>
                    javax.net.ssl.SSLSocketFactory                    
                </see>
                <see>
                    javax.rmi.ssl.SslRMIServerSocketFactory                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <javadoc line="37">
                &lt;p&gt;Creates a new &lt;code&gt;SslRMIClientSocketFactory&lt;/code&gt;.&lt;/p&gt;                
            </javadoc>
            <method name="SslRMIClientSocketFactory" type="constructor" line="40"/>
            <javadoc line="42">
                &lt;p&gt;Creates an SSL socket.&lt;/p&gt;
                  &lt;p&gt;If the system property
                  &lt;code&gt;javax.rmi.ssl.client.enabledCipherSuites&lt;/code&gt; is
                  specified, this method will call {@link SSLSocket#setEnabledCipherSuites(String[])} before returning
                  the socket. The value of this system property is a string that
                  is a comma-separated list of SSL/TLS cipher suites to
                  enable.&lt;/p&gt;
                  &lt;p&gt;If the system property
                  &lt;code&gt;javax.rmi.ssl.client.enabledProtocols&lt;/code&gt; is
                  specified, this method will call {@link SSLSocket#setEnabledProtocols(String[])} before returning the
                  socket. The value of this system property is a string that is a
                  comma-separated list of SSL/TLS protocol versions to
                  enable.&lt;/p&gt;                
            </javadoc>
            <method name="createSocket" type="Socket" line="57">
                <params>
                    <param name="host" type="String"/>
                    <param name="port" type="int"/>
                </params>
                <declaration name="sslSocketFactory" type="SocketFactory" line="58"/>
                <declaration name="sslSocket" type="SSLSocket" line="59"/>
                <declaration name="enabledCipherSuites" type="String" line="60"/>
                <scope line="61">
                    <declaration name="st" type="StringTokenizer" line="62"/>
                    <declaration name="tokens" type="int" line="63"/>
                    <declaration name="enabledCipherSuitesList" type="String" line="64"/>
                    <scope line="65"/>
                    <scope line="68"/>
                    <scope line="71"/>
                </scope>
                <declaration name="enabledProtocols" type="String" line="75"/>
                <scope line="76">
                    <declaration name="st" type="StringTokenizer" line="77"/>
                    <declaration name="tokens" type="int" line="78"/>
                    <declaration name="enabledProtocolsList" type="String" line="79"/>
                    <scope line="80"/>
                    <scope line="83"/>
                    <scope line="86"/>
                </scope>
            </method>
            <javadoc line="92">
                &lt;p&gt;Indicates whether some other object is &quot;equal to&quot; this one.&lt;/p&gt;
                  &lt;p&gt;Because all instances of this class are functionally equivalent
                  (they all use the default
                  &lt;code&gt;SSLSocketFactory&lt;/code&gt;), this method simply returns
                  &lt;code&gt;this.getClass().equals(obj.getClass())&lt;/code&gt;.&lt;/p&gt;
                  &lt;p&gt;A subclass should override this method (as well
                  as {@link #hashCode()}) if its instances are not all
                  functionally equivalent.&lt;/p&gt;                
            </javadoc>
            <method name="equals" type="boolean" line="102">
                <params>
                    <param name="obj" type="Object"/>
                </params>
            </method>
            <javadoc line="107">
                &lt;p&gt;Returns a hash code value for this
                  &lt;code&gt;SslRMIClientSocketFactory&lt;/code&gt;.&lt;/p&gt;                
                <return>
                    a hash code value for this
                      &lt;code&gt;SslRMIClientSocketFactory&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="113"/>
            <declaration name="defaultSocketFactory" type="SocketFactory" line="116"/>
            <method name="getDefaultClientSocketFactory" type="SocketFactory" line="117"/>
            <declaration name="serialVersionUID" type="long" line="121"/>
        </class>
    </source>