<?xml version="1.0" encoding="UTF-8"?>
    <source package="">
        <import package="java.io"/>
        <import package="java.nio"/>
        <import package="java.nio.channels"/>
        <import package="javax.net.ssl"/>
        <import package="javax.net.ssl.SSLEngineResult"/>
        <class name="ChannelIOSecure" line="6">
            <extends class="ChannelIO"/>
            <javadoc line="6">
                A helper class which performs I/O using the SSLEngine API.
                  &lt;P&gt;
                  Each connection has a SocketChannel and a SSLEngine that is
                  used through the lifetime of the Channel.  We allocate byte buffers
                  for use as the outbound and inbound network buffers.
                  &lt;PRE&gt;
                  Application Data
                  src      requestBB
                  |           ^
                  |     |     |
                  v     |     |
                  +----+-----|-----+----+
                  |          |          |
                  |       SSL|Engine    |
                  wrap()  |          |          |  unwrap()
                  | OUTBOUND | INBOUND  |
                  |          |          |
                  +----+-----|-----+----+
                  |     |     ^
                  |     |     |
                  v           |
                  outNetBB     inNetBB
                  Net data
                  &lt;/PRE&gt;
                  These buffers handle all of the intermediary data for the SSL
                  connection.  To make things easy, we&apos;ll require outNetBB be
                  completely flushed before trying to wrap any more data, but we
                  could certainly remove that restriction by using larger buffers.
                  &lt;P&gt;
                  There are many, many ways to handle compute and I/O strategies.
                  What follows is a relatively simple one.  The reader is encouraged
                  to develop the strategy that best fits the application.
                  &lt;P&gt;
                  In most of the non-blocking operations in this class, we let the
                  Selector tell us when we&apos;re ready to attempt an I/O operation (by the
                  application repeatedly calling our methods).  Another option would be
                  to attempt the operation and return from the method when no forward
                  progress can be made.
                  &lt;P&gt;
                  There&apos;s lots of room for enhancements and improvement in this example.
                  &lt;P&gt;
                  We&apos;re checking for SSL/TLS end-of-stream truncation attacks via
                  sslEngine.closeInbound().  When you reach the end of a input stream
                  via a read() returning -1 or an IOException, we call
                  sslEngine.closeInbound() to signal to the sslEngine that no more
                  input will be available.  If the peer&apos;s close_notify message has not
                  yet been received, this could indicate a trucation attack, in which
                  an attacker is trying to prematurely close the connection.   The
                  closeInbound() will throw an exception if this condition were
                  present.                
                <author>
                    Brad R. Wetmore                    
                </author>
                <author>
                    Mark Reinhold                    
                </author>
            </javadoc>
            <declaration name="sslEngine" type="SSLEngine" line="61"/>
            <declaration name="appBBSize" type="int" line="62"/>
            <declaration name="netBBSize" type="int" line="63"/>
            <declaration name="inNetBB" type="ByteBuffer" line="64"/>
            <declaration name="outNetBB" type="ByteBuffer" line="65"/>
            <declaration name="hsBB" type="ByteBuffer" line="66"/>
            <declaration name="fileChannelBB" type="ByteBuffer" line="67"/>
            <declaration name="initialHSStatus" type="HandshakeStatus" line="68"/>
            <declaration name="initialHSComplete" type="boolean" line="69"/>
            <declaration name="shutdown" type="boolean" line="70"/>
            <method name="ChannelIOSecure" type="constructor" line="71">
                <params>
                    <param name="sc" type="SocketChannel"/>
                    <param name="blocking" type="boolean"/>
                    <param name="sslc" type="SSLContext"/>
                </params>
            </method>
            <method name="getInstance" type="ChannelIOSecure" line="83">
                <params>
                    <param name="sc" type="SocketChannel"/>
                    <param name="blocking" type="boolean"/>
                    <param name="sslc" type="SSLContext"/>
                </params>
                <declaration name="cio" type="ChannelIOSecure" line="84"/>
            </method>
            <method name="resizeRequestBB" type="void" line="89"/>
            <method name="resizeResponseBB" type="void" line="92">
                <declaration name="bb" type="ByteBuffer" line="93"/>
            </method>
            <method name="tryFlush" type="boolean" line="98">
                <params>
                    <param name="bb" type="ByteBuffer"/>
                </params>
            </method>
            <method name="doHandshake" type="boolean" line="102"/>
            <method name="doHandshake" type="boolean" line="105">
                <params>
                    <param name="sk" type="SelectionKey"/>
                </params>
                <declaration name="result" type="SSLEngineResult" line="106"/>
                <scope line="107"/>
                <scope line="110">
                    <scope line="111"/>
                    <scope line="118"/>
                </scope>
                <scope line="127"/>
                <scope line="131">
                    <scope line="152"/>
                    <scope line="155"/>
                </scope>
                <scope line="166"/>
                <scope line="176"/>
                <scope line="179"/>
            </method>
            <method name="doTasks" type="SSLEngineResult.HandshakeStatus" line="192">
                <declaration name="runnable" type="Runnable" line="193"/>
                <scope line="194"/>
            </method>
            <method name="read" type="int" line="199">
                <declaration name="result" type="SSLEngineResult" line="200"/>
                <scope line="201"/>
                <declaration name="pos" type="int" line="204"/>
                <scope line="205"/>
                <scope line="209">
                    <scope line="220"/>
                    <scope line="225"/>
                </scope>
            </method>
            <method name="write" type="int" line="236">
                <params>
                    <param name="src" type="ByteBuffer"/>
                </params>
                <scope line="237"/>
            </method>
            <method name="doWrite" type="int" line="242">
                <params>
                    <param name="src" type="ByteBuffer"/>
                </params>
                <declaration name="retValue" type="int" line="243"/>
                <scope line="244"/>
                <declaration name="result" type="SSLEngineResult" line="248"/>
                <scope line="253"/>
                <scope line="260"/>
            </method>
            <method name="transferTo" type="long" line="265">
                <params>
                    <param name="fc" type="FileChannel"/>
                    <param name="pos" type="long"/>
                    <param name="len" type="long"/>
                </params>
                <scope line="266"/>
                <scope line="269"/>
                <declaration name="fileRead" type="int" line="274"/>
            </method>
            <method name="dataFlush" type="boolean" line="279">
                <declaration name="fileFlushed" type="boolean" line="280"/>
                <scope line="281"/>
                <scope line="285"/>
            </method>
            <method name="shutdown" type="boolean" line="290">
                <scope line="291"/>
                <scope line="295"/>
                <declaration name="result" type="SSLEngineResult" line="299"/>
                <scope line="300"/>
                <scope line="304"/>
            </method>
        </class>
    </source>