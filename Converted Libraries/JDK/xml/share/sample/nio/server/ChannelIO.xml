<?xml version="1.0" encoding="UTF-8"?>
    <source package="">
        <import package="java.io"/>
        <import package="java.nio"/>
        <import package="java.nio.channels"/>
        <class name="ChannelIO" line="36">
            <comment line="52">
                All of the inbound request data lives here until we determine
                 that we&apos;ve read everything, then we pass that data back to the
                 caller.                
            </comment>
            <comment line="78">
                Return a ByteBuffer with &quot;remaining&quot; space to work.  If you have to
                 reallocate the ByteBuffer, copy the existing info into the new buffer.                
            </comment>
            <comment line="92">
                Perform any handshaking processing.
                 &lt;P&gt;
                 This variant is for Servers without SelectionKeys (e.g.
                 blocking).
                 &lt;P&gt;
                 return true when we&apos;re done with handshaking.                
            </comment>
            <comment line="104">
                Perform any handshaking processing.
                 &lt;P&gt;
                 This variant is for Servers with SelectionKeys, so that
                 we can register for selectable operations (e.g. selectable
                 non-blocking).
                 &lt;P&gt;
                 return true when we&apos;re done with handshaking.                
            </comment>
            <comment line="117">
                Resize (if necessary) the inbound data buffer, and then read more
                 data into the read buffer.                
            </comment>
            <comment line="129">
                All data has been read, pass back the request in one buffer.                
            </comment>
            <comment line="136">
                Write the src buffer into the socket channel.                
            </comment>
            <comment line="143">
                Perform a FileChannel.TransferTo on the socket channel.                
            </comment>
            <comment line="150">
                Flush any outstanding data to the network if possible.
                 &lt;P&gt;
                 This isn&apos;t really necessary for the insecure variant, but needed
                 for the secure one where intermediate buffering must take place.
                 &lt;P&gt;
                 Return true if successful.                
            </comment>
            <comment line="162">
                Start any connection shutdown processing.
                 &lt;P&gt;
                 This isn&apos;t really necessary for the insecure variant, but needed
                 for the secure one where intermediate buffering must take place.
                 &lt;P&gt;
                 Return true if successful, and the data has been flushed.                
            </comment>
            <comment line="174">
                Close the underlying connection.                
            </comment>
            <javadoc line="36">
                A helper class for properly sizing inbound byte buffers and
                  redirecting I/O calls to the proper SocketChannel call.
                  &lt;P&gt;
                  Many of these calls may seem unnecessary until you consider
                  that they are placeholders for the secure variant, which is much
                  more involved.  See ChannelIOSecure for more information.                
                <author>
                    Brad R. Wetmore                    
                </author>
                <author>
                    Mark Reinhold                    
                </author>
            </javadoc>
            <declaration name="sc" type="SocketChannel" line="49"/>
            <declaration name="requestBB" type="ByteBuffer" line="56"/>
            <declaration name="requestBBSize" type="int" line="57"/>
            <method name="ChannelIO" type="constructor" line="60">
                <params>
                    <param name="sc" type="SocketChannel"/>
                    <param name="blocking" type="boolean"/>
                </params>
            </method>
            <method name="getInstance" type="ChannelIO" line="66">
                <params>
                    <param name="sc" type="SocketChannel"/>
                    <param name="blocking" type="boolean"/>
                </params>
                <declaration name="cio" type="ChannelIO" line="67"/>
            </method>
            <method name="getSocketChannel" type="SocketChannel" line="73"/>
            <method name="resizeRequestBB" type="void" line="81">
                <params>
                    <param name="remaining" type="int"/>
                </params>
                <comment line="83">
                    Expand buffer for large request                    
                </comment>
                <scope line="82">
                    <declaration name="bb" type="ByteBuffer" line="84"/>
                </scope>
            </method>
            <method name="doHandshake" type="boolean" line="99"/>
            <method name="doHandshake" type="boolean" line="112">
                <params>
                    <param name="sk" type="SelectionKey"/>
                </params>
            </method>
            <method name="read" type="int" line="120">
                <comment line="121">
                    Allocate more space if less than 5% remains                    
                </comment>
            </method>
            <method name="getReadBuf" type="ByteBuffer" line="131"/>
            <method name="write" type="int" line="138">
                <params>
                    <param name="src" type="ByteBuffer"/>
                </params>
            </method>
            <method name="transferTo" type="long" line="145">
                <params>
                    <param name="fc" type="FileChannel"/>
                    <param name="pos" type="long"/>
                    <param name="len" type="long"/>
                </params>
            </method>
            <method name="dataFlush" type="boolean" line="157"/>
            <method name="shutdown" type="boolean" line="169"/>
            <method name="close" type="void" line="176"/>
        </class>
    </source>