<?xml version="1.0" encoding="UTF-8"?>
    <source package="">
        <import package="java.io.IOException"/>
        <import package="java.nio.ByteBuffer"/>
        <import package="java.nio.channels.AsynchronousSocketChannel"/>
        <import package="java.nio.channels.CompletionHandler"/>
        <import package="java.util.LinkedList"/>
        <import package="java.util.Queue"/>
        <import package="java.util.concurrent.atomic.AtomicReference"/>
        <class name="Client" line="8">
            <javadoc line="8">
                Client represents a remote connection to the chat server.
                  It contains methods for reading and writing messages from the
                  channel.
                  Messages are considered to be separated by newline, so incomplete
                  messages are buffered in the {@code Client}.
                  All reads and writes are asynchronous and uses the nio2 asynchronous
                  elements.                
            </javadoc>
            <declaration name="channel" type="AsynchronousSocketChannel" line="18"/>
            <declaration name="reader" type="AtomicReference&lt;ClientReader&gt;" line="19"/>
            <declaration name="userName" type="String" line="20"/>
            <declaration name="messageBuffer" type="StringBuilder" line="21"/>
            <declaration name="queue" type="Queue&lt;ByteBuffer&gt;" line="22"/>
            <declaration name="writing" type="boolean" line="23"/>
            <method name="Client" type="constructor" line="24">
                <params>
                    <param name="channel" type="AsynchronousSocketChannel"/>
                    <param name="reader" type="ClientReader"/>
                </params>
            </method>
            <javadoc line="28">
                Enqueues a write of the buffer to the channel.
                  The call is asynchronous so the buffer is not safe to modify after
                  passing the buffer here.                
                <param>
                    buffer the buffer to send to the channel                    
                </param>
            </javadoc>
            <method name="writeMessage" type="void" line="34">
                <params>
                    <param name="buffer" type="ByteBuffer"/>
                </params>
                <declaration name="threadShouldWrite" type="boolean" line="35"/>
                <scope line="36">
                    <scope line="38"/>
                </scope>
                <scope line="43"/>
            </method>
            <method name="writeFromQueue" type="void" line="47">
                <declaration name="buffer" type="ByteBuffer" line="48"/>
                <scope line="49">
                    <scope line="51"/>
                </scope>
                <scope line="55"/>
            </method>
            <method name="writeBuffer" type="void" line="59">
                <params>
                    <param name="buffer" type="ByteBuffer"/>
                </params>
                <anonymous_class line="60">
                    <method name="completed" type="void" line="61">
                        <params>
                            <param name="result" type="Integer"/>
                            <param name="buffer" type="ByteBuffer"/>
                        </params>
                        <scope line="62"/>
                        <scope line="65"/>
                    </method>
                    <method name="failed" type="void" line="69">
                        <params>
                            <param name="exc" type="Throwable"/>
                            <param name="attachment" type="ByteBuffer"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="74">
                Sends a message                
                <param>
                    string the message                    
                </param>
            </javadoc>
            <method name="writeStringMessage" type="void" line="78">
                <params>
                    <param name="string" type="String"/>
                </params>
            </method>
            <javadoc line="81">
                Send a message from a specific client                
                <param>
                    client the message is sent from                    
                </param>
                <param>
                    message to send                    
                </param>
            </javadoc>
            <method name="writeMessageFrom" type="void" line="86">
                <params>
                    <param name="client" type="Client"/>
                    <param name="message" type="String"/>
                </params>
                <scope line="87"/>
            </method>
            <javadoc line="91">
                Enqueue a read                
                <param>
                    completionHandler callback on completed read                    
                </param>
            </javadoc>
            <method name="read" type="void" line="95">
                <params>
                    <param name="completionHandler" type="CompletionHandler<Integer,? super ByteBuffer>"/>
                </params>
                <declaration name="input" type="ByteBuffer" line="96"/>
                <scope line="97"/>
            </method>
            <javadoc line="102">
                Closes the channel                
            </javadoc>
            <method name="close" type="void" line="105">
                <scope line="106"/>
                <scope line="109"/>
            </method>
            <javadoc line="113">
                Run the current states actions.                
            </javadoc>
            <method name="run" type="void" line="116"/>
            <method name="setUserName" type="void" line="119">
                <params>
                    <param name="userName" type="String"/>
                </params>
            </method>
            <method name="setReader" type="void" line="122">
                <params>
                    <param name="reader" type="ClientReader"/>
                </params>
            </method>
            <method name="getUserName" type="String" line="125"/>
            <method name="appendMessage" type="void" line="128">
                <params>
                    <param name="message" type="String"/>
                </params>
                <scope line="129"/>
            </method>
            <javadoc line="133">
                @return the next newline separated message in the buffer. null is returned if the buffer
                  doesn&apos;t contain any newline.                
            </javadoc>
            <method name="nextMessage" type="String" line="137">
                <scope line="138">
                    <declaration name="nextNewline" type="int" line="139"/>
                    <scope line="140"/>
                    <declaration name="message" type="String" line="143"/>
                </scope>
            </method>
        </class>
    </source>