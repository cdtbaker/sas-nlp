<?xml version="1.0" encoding="UTF-8"?>
    <source package="">
        <import package="java.io.IOException"/>
        <import package="java.net.InetSocketAddress"/>
        <import package="java.net.SocketAddress"/>
        <import package="java.net.StandardSocketOptions"/>
        <import package="java.nio.channels"/>
        <import package="java.util"/>
        <import package="java.util.concurrent.Executors"/>
        <import package="java.util.concurrent.TimeUnit"/>
        <class name="ChatServer" line="9">
            <implements interface="Runnable"/>
            <javadoc line="9">
                Implements a chat server, this class holds the list of {@code clients} connected to the server.
                  It sets up a server socket using AsynchronousServerSocketChannel listening to a specified port.                
            </javadoc>
            <declaration name="connections" type="List&lt;Client&gt;" line="14"/>
            <declaration name="port" type="int" line="15"/>
            <declaration name="listener" type="AsynchronousServerSocketChannel" line="16"/>
            <declaration name="channelGroup" type="AsynchronousChannelGroup" line="17"/>
            <javadoc line="18">
                @param port to listen to                
                <throws>
                    java.io.IOException when failing to start the server                    
                </throws>
            </javadoc>
            <method name="ChatServer" type="constructor" line="22">
                <params>
                    <param name="port" type="int"/>
                </params>
            </method>
            <javadoc line="27">
                @return The socket address that the server is bound to                
                <throws>
                    java.io.IOException if an I/O error occurs                    
                </throws>
            </javadoc>
            <method name="getSocketAddress" type="SocketAddress" line="31"/>
            <javadoc line="34">
                Start accepting connections                
            </javadoc>
            <method name="run" type="void" line="37">
                <anonymous_class line="38">
                    <method name="completed" type="void" line="39">
                        <params>
                            <param name="result" type="AsynchronousSocketChannel"/>
                            <param name="attachment" type="Void"/>
                        </params>
                    </method>
                    <method name="failed" type="void" line="43">
                        <params>
                            <param name="exc" type="Throwable"/>
                            <param name="attachment" type="Void"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="48">
                Shuts down the server                
                <throws>
                    InterruptedException if terminated while waiting for shutdown                    
                </throws>
                <throws>
                    IOException if failing to shutdown the channel group                    
                </throws>
            </javadoc>
            <method name="shutdown" type="void" line="53"/>
            <method name="createListener" type="AsynchronousServerSocketChannel" line="57">
                <params>
                    <param name="channelGroup" type="AsynchronousChannelGroup"/>
                </params>
                <declaration name="listener" type="AsynchronousServerSocketChannel" line="58"/>
            </method>
            <method name="openChannel" type="AsynchronousServerSocketChannel" line="63">
                <params>
                    <param name="channelGroup" type="AsynchronousChannelGroup"/>
                </params>
            </method>
            <javadoc line="66">
                Creates a new client and adds it to the list of connections.
                  Sets the clients handler to the initial state of NameReader                
                <param>
                    channel the newly accepted channel                    
                </param>
            </javadoc>
            <method name="handleNewConnection" type="void" line="71">
                <params>
                    <param name="channel" type="AsynchronousSocketChannel"/>
                </params>
                <declaration name="client" type="Client" line="72"/>
                <scope line="73"/>
                <scope line="76"/>
            </method>
            <javadoc line="81">
                Sends a message to all clients except the source.
                  The method is synchronized as it is desired that messages are sent to
                  all clients in the same order as received.                
                <param>
                    client the message source                    
                </param>
                <param>
                    message the message to be sent                    
                </param>
            </javadoc>
            <method name="writeMessageToClients" type="void" line="88">
                <params>
                    <param name="client" type="Client"/>
                    <param name="message" type="String"/>
                </params>
                <scope line="89">
                    <scope line="90">
                        <scope line="91"/>
                    </scope>
                </scope>
            </method>
            <method name="removeClient" type="void" line="97">
                <params>
                    <param name="client" type="Client"/>
                </params>
            </method>
            <method name="usage" type="void" line="100"/>
            <method name="main" type="void" line="104">
                <params>
                    <param name="args" type="String[]"/>
                </params>
                <declaration name="port" type="int" line="105"/>
                <scope line="106"/>
                <scope line="109">
                    <scope line="110">
                        <scope line="111"/>
                        <scope line="114"/>
                    </scope>
                    <scope line="118"/>
                </scope>
            </method>
        </class>
    </source>