<?xml version="1.0" encoding="UTF-8"?>
    <source package="">
        <import package="java.nio.ByteBuffer"/>
        <class name="NameReader" line="34">
            <implements interface="DataReader"/>
            <javadoc line="34">
                The first state a newly connected {@code Client} is in, this
                  handles writing out the welcoming message and reads the response
                  up to a newline. When a newline character have been received
                  it changes the handler from NameReader to MessageReader on the
                  client.                
            </javadoc>
            <declaration name="buffer" type="StringBuilder" line="42"/>
            <declaration name="chatServer" type="ChatServer" line="43"/>
            <declaration name="once" type="boolean" line="44"/>
            <declaration name="NEWLINE" type="String" line="45"/>
            <method name="NameReader" type="constructor" line="47">
                <params>
                    <param name="chatServer" type="ChatServer"/>
                </params>
            </method>
            <javadoc line="51">
                Writes the welcoming message to the client the first time this method
                  is called.                
                <param>
                    client the client to receive the message                    
                </param>
            </javadoc>
            <method name="beforeRead" type="void" line="58">
                <params>
                    <param name="client" type="Client"/>
                </params>
                <comment line="60">
                    if it is a long name that takes more than one read we only want to display Name: once.                    
                </comment>
                <scope line="60"/>
            </method>
            <method name="acceptsMessages" type="boolean" line="66"/>
            <javadoc line="70">
                Receives incoming data from the socket, searches for a newline
                  and tries to set the username if one is found                
            </javadoc>
            <method name="onData" type="void" line="75">
                <params>
                    <param name="client" type="Client"/>
                    <param name="buffer" type="ByteBuffer"/>
                    <param name="bytes" type="int"/>
                </params>
                <declaration name="name" type="String" line="77"/>
                <scope line="79"/>
            </method>
            <javadoc line="84">
                Splits the name on the newlines, takes the first as the username
                  and appends everything else to the clients message buffer.
                  Sets the clients handler to MessageReader.                
                <param>
                    client the client to set the username for                    
                </param>
                <param>
                    name the string containing the buffered input                    
                </param>
            </javadoc>
            <method name="onUserNameRead" type="void" line="92">
                <params>
                    <param name="client" type="Client"/>
                    <param name="name" type="String"/>
                </params>
                <declaration name="strings" type="String[]" line="93"/>
            </method>
            <javadoc line="100">
                Appends the remaining parts to the clients message buffer                
                <param>
                    client the client                    
                </param>
                <param>
                    strings the messages to append to the buffer                    
                </param>
            </javadoc>
            <method name="sendRemainingParts" type="void" line="106">
                <params>
                    <param name="client" type="Client"/>
                    <param name="strings" type="String[]"/>
                </params>
                <scope line="107"/>
            </method>
        </class>
    </source>