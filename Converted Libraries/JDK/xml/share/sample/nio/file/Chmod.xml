<?xml version="1.0" encoding="UTF-8"?>
    <source package="">
        <import package="java.nio.file"/>
        <import package="java.nio.file.attribute"/>
        <import package="java.nio.file.attribute.PosixFilePermission"/>
        <import package="java.nio.file.FileVisitResult"/>
        <import package="java.io.IOException"/>
        <import package="java.util"/>
        <class name="Chmod" line="39">
            <javadoc line="39">
                Sample code that changes the permissions of files in a similar manner to the
                  chmod(1) program.                
            </javadoc>
            <javadoc line="46">
                Compiles a list of one or more &lt;em&gt;symbolic mode expressions&lt;/em&gt; that
                  may be used to change a set of file permissions. This method is
                  intended for use where file permissions are required to be changed in
                  a manner similar to the UNIX &lt;i&gt;chmod&lt;/i&gt; program.
                  &lt;p&gt; The {@code exprs} parameter is a comma separated list of expressions
                  where each takes the form:
                  &lt;blockquote&gt;
                  &lt;i&gt;who operator&lt;/i&gt; [&lt;i&gt;permissions&lt;/i&gt;]
                  &lt;/blockquote&gt;
                  where &lt;i&gt;who&lt;/i&gt; is one or more of the characters {@code &apos;u&apos;}, {@code &apos;g&apos;},{@code &apos;o&apos;}, or {@code &apos;a&apos;} meaning the owner (user), group, others, or
                  all (owner, group, and others) respectively.
                  &lt;p&gt; &lt;i&gt;operator&lt;/i&gt; is the character {@code &apos;+&apos;}, {@code &apos;-&apos;}, or {@code&apos;=&apos;} signifying how permissions are to be changed. {@code &apos;+&apos;} means the
                  permissions are added, {@code &apos;-&apos;} means the permissions are removed, and{@code &apos;=&apos;} means the permissions are assigned absolutely.
                  &lt;p&gt; &lt;i&gt;permissions&lt;/i&gt; is a sequence of zero or more of the following:{@code &apos;r&apos;} for read permission, {@code &apos;w&apos;} for write permission, and{@code &apos;x&apos;} for execute permission. If &lt;i&gt;permissions&lt;/i&gt; is omitted
                  when assigned absolutely, then the permissions are cleared for
                  the owner, group, or others as identified by &lt;i&gt;who&lt;/i&gt;. When omitted
                  when adding or removing then the expression is ignored.
                  &lt;p&gt; The following examples demonstrate possible values for the {@codeexprs} parameter:
                  &lt;table border=&quot;0&quot;&gt;
                  &lt;tr&gt;
                  &lt;td&gt; {@code u=rw} &lt;/td&gt;
                  &lt;td&gt; Sets the owner permissions to be read and write. &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; {@code ug+w} &lt;/td&gt;
                  &lt;td&gt; Sets the owner write and group write permissions. &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; {@code u+w,o-rwx} &lt;/td&gt;
                  &lt;td&gt; Sets the owner write, and removes the others read, others write
                  and others execute permissions. &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt; {@code o=} &lt;/td&gt;
                  &lt;td&gt; Sets the others permission to none (others read, others write and
                  others execute permissions are removed if set) &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;                
                <param>
                    exprsList of one or more &lt;em&gt;symbolic mode expressions&lt;/em&gt;                    
                </param>
                <return>
                    A {@code Changer} that may be used to changer a set of
                      file permissions                    
                </return>
                <throws>
                    IllegalArgumentExceptionIf the value of the {@code exprs} parameter is invalid                    
                </throws>
            </javadoc>
            <method name="compile" type="Changer" line="106">
                <params>
                    <param name="exprs" type="String"/>
                </params>
                <comment line="108">
                    minimum is who and operator (u= for example)                    
                </comment>
                <comment line="112">
                    permissions that the changer will add or remove                    
                </comment>
                <comment line="116">
                    iterate over each of expression modes                    
                </comment>
                <comment line="118">
                    minimum of who and operator                    
                </comment>
                <comment line="124">
                    who                    
                </comment>
                <comment line="144">
                    get operator and permissions                    
                </comment>
                <comment line="148">
                    operator                    
                </comment>
                <comment line="155">
                    who= means remove all                    
                </comment>
                <comment line="162">
                    permissions                    
                </comment>
                <comment line="176">
                    update permissions set                    
                </comment>
                <comment line="239">
                    return changer                    
                </comment>
                <declaration name="toAdd" type="Set&lt;PosixFilePermission&gt;" line="112"/>
                <declaration name="toRemove" type="Set&lt;PosixFilePermission&gt;" line="113"/>
                <scope line="116">
                    <declaration name="pos" type="int" line="121"/>
                    <declaration name="u" type="boolean" line="124"/>
                    <declaration name="g" type="boolean" line="125"/>
                    <declaration name="o" type="boolean" line="126"/>
                    <declaration name="done" type="boolean" line="127"/>
                    <scope line="128"/>
                    <declaration name="op" type="char" line="144"/>
                    <declaration name="mask" type="String" line="145"/>
                    <declaration name="add" type="boolean" line="148"/>
                    <declaration name="remove" type="boolean" line="149"/>
                    <declaration name="assign" type="boolean" line="150"/>
                    <scope line="155"/>
                    <declaration name="r" type="boolean" line="162"/>
                    <declaration name="w" type="boolean" line="163"/>
                    <declaration name="x" type="boolean" line="164"/>
                    <scope line="165"/>
                    <scope line="176">
                        <scope line="177"/>
                        <scope line="182"/>
                        <scope line="187"/>
                    </scope>
                    <scope line="193">
                        <scope line="194"/>
                        <scope line="199"/>
                        <scope line="204"/>
                    </scope>
                    <scope line="210">
                        <scope line="211"/>
                        <scope line="219"/>
                        <scope line="227"/>
                    </scope>
                </scope>
                <anonymous_class line="239">
                    <method name="change" type="Set<PosixFilePermission>" line="241">
                        <params>
                            <param name="perms" type="Set<PosixFilePermission>"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <interface name="Changer">
                <javadoc line="249">
                    A task that &lt;i&gt;changes&lt;/i&gt; a set of {@link PosixFilePermission} elements.                    
                </javadoc>
                <method name="change" type="Set<PosixFilePermission>" line="253"/>
                <javadoc line="253">
                    Applies the changes to the given set of permissions.                    
                    <param>
                        permsThe set of permissions to change                        
                    </param>
                    <return>
                        The {@code perms} parameter                        
                    </return>
                </javadoc>
            </interface>
            <javadoc line="264">
                Changes the permissions of the file using the given Changer.                
            </javadoc>
            <method name="chmod" type="void" line="267">
                <params>
                    <param name="file" type="Path"/>
                    <param name="changer" type="Changer"/>
                </params>
                <scope line="268">
                    <declaration name="perms" type="Set&lt;PosixFilePermission&gt;" line="269"/>
                </scope>
                <scope line="271"/>
            </method>
            <class name="TreeVisitor" line="276">
                <implements interface="FileVisitor">
                    <type_params>
                        <type_param name="Path"/>
                    </type_params>
                </implements>
                <javadoc line="276">
                    Changes the permission of each file and directory visited                    
                </javadoc>
                <declaration name="changer" type="Changer" line="280"/>
                <method name="TreeVisitor" type="constructor" line="282">
                    <params>
                        <param name="changer" type="Changer"/>
                    </params>
                </method>
                <method name="preVisitDirectory" type="FileVisitResult" line="287">
                    <params>
                        <param name="dir" type="Path"/>
                        <param name="attrs" type="BasicFileAttributes"/>
                    </params>
                </method>
                <method name="visitFile" type="FileVisitResult" line="293">
                    <params>
                        <param name="file" type="Path"/>
                        <param name="attrs" type="BasicFileAttributes"/>
                    </params>
                </method>
                <method name="postVisitDirectory" type="FileVisitResult" line="299">
                    <params>
                        <param name="dir" type="Path"/>
                        <param name="exc" type="IOException"/>
                    </params>
                </method>
                <method name="visitFileFailed" type="FileVisitResult" line="306">
                    <params>
                        <param name="file" type="Path"/>
                        <param name="exc" type="IOException"/>
                    </params>
                </method>
            </class>
            <method name="usage" type="void" line="312"/>
            <method name="main" type="void" line="317">
                <params>
                    <param name="args" type="String[]"/>
                </params>
                <comment line="330">
                    compile the symbolic mode expressions                    
                </comment>
                <declaration name="argi" type="int" line="320"/>
                <declaration name="maxDepth" type="int" line="321"/>
                <scope line="322"/>
                <declaration name="changer" type="Changer" line="330"/>
                <declaration name="visitor" type="TreeVisitor" line="331"/>
                <declaration name="opts" type="Set&lt;FileVisitOption&gt;" line="333"/>
                <scope line="334">
                    <declaration name="file" type="Path" line="335"/>
                </scope>
            </method>
        </class>
    </source>