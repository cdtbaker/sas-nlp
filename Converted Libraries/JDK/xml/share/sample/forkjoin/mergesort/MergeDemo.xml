<?xml version="1.0" encoding="UTF-8"?>
    <source package="">
        <import package="java.util.Arrays"/>
        <import package="java.util.Random"/>
        <import package="java.lang.Integer.parseInt"/>
        <class name="MergeDemo" line="37">
            <comment line="47">
                Use a fixed seed to always get the same random values back                
            </comment>
            <javadoc line="37">
                MergeExample is a class that runs a demo benchmark of the {@code ForkJoin} framework
                  by benchmarking a {@link MergeSort} algorithm that is implemented using{@link java.util.concurrent.RecursiveAction}.
                  The {@code ForkJoin} framework is setup with different parallelism levels
                  and the sort is executed with arrays of different sizes to see the
                  trade offs by using multiple threads for different sizes of the array.                
            </javadoc>
            <declaration name="random" type="Random" line="47"/>
            <declaration name="ITERATIONS" type="int" line="48"/>
            <class name="Range" line="50">
                <javadoc line="50">
                    Represents the formula {@code f(n) = start + (step  n)} for n = 0 &amp; n &lt; iterations                    
                </javadoc>
                <declaration name="start" type="int" line="54"/>
                <declaration name="step" type="int" line="55"/>
                <declaration name="iterations" type="int" line="56"/>
                <method name="Range" type="constructor" line="58">
                    <params>
                        <param name="start" type="int"/>
                        <param name="step" type="int"/>
                        <param name="iterations" type="int"/>
                    </params>
                </method>
                <javadoc line="64">
                    Parses start, step and iterations from args                    
                    <param>
                        args the string array containing the arguments                        
                    </param>
                    <param>
                        start which element to start the start argument from                        
                    </param>
                    <return>
                        the constructed range                        
                    </return>
                </javadoc>
                <method name="parse" type="Range" line="70">
                    <params>
                        <param name="args" type="String[]"/>
                        <param name="start" type="int"/>
                    </params>
                    <scope line="71"/>
                </method>
                <method name="get" type="int" line="77">
                    <params>
                        <param name="iteration" type="int"/>
                    </params>
                </method>
                <method name="getIterations" type="int" line="81"/>
                <method name="toString" type="String" line="86">
                    <declaration name="builder" type="StringBuilder" line="87"/>
                </method>
            </class>
            <class name="Configuration" line="93">
                <javadoc line="93">
                    Wraps the different parameters that is used when running the MergeExample.{@code sizes} represents the different array sizes{@code parallelism} represents the different parallelism levels                    
                </javadoc>
                <declaration name="sizes" type="Range" line="99"/>
                <declaration name="parallelism" type="Range" line="100"/>
                <declaration name="defaultConfig" type="Configuration" line="102"/>
                <method name="Configuration" type="constructor" line="105">
                    <params>
                        <param name="sizes" type="Range"/>
                        <param name="parallelism" type="Range"/>
                    </params>
                </method>
                <javadoc line="110">
                    Parses the arguments and attempts to create a configuration containing the
                      parameters for creating the array sizes and parallelism sizes                    
                    <param>
                        args the input arguments                        
                    </param>
                    <return>
                        the configuration                        
                    </return>
                </javadoc>
                <method name="parse" type="Configuration" line="116">
                    <params>
                        <param name="args" type="String[]"/>
                    </params>
                    <scope line="117"/>
                    <scope line="119">
                        <scope line="120">
                            <scope line="121"/>
                        </scope>
                        <scope line="124"/>
                    </scope>
                </method>
                <javadoc line="136">
                    Creates an array for reporting the test result time in                    
                    <return>
                        an array containing {@code sizes.iterations  parallelism.iterations} elements                        
                    </return>
                </javadoc>
                <method name="createTimesArray" type="long[][]" line="140"/>
                <method name="toString" type="String" line="145">
                    <declaration name="builder" type="StringBuilder" line="146"/>
                    <scope line="147"/>
                </method>
            </class>
            <javadoc line="158">
                Generates an array of {@code elements} random elements                
                <param>
                    elements the number of elements requested in the array                    
                </param>
                <return>
                    an array of {@code elements} random elements                    
                </return>
            </javadoc>
            <method name="generateArray" type="int[]" line="163">
                <params>
                    <param name="elements" type="int"/>
                </params>
                <declaration name="array" type="int[]" line="164"/>
                <scope line="165"/>
            </method>
            <javadoc line="171">
                Runs the test                
                <param>
                    config contains the settings for the test                    
                </param>
            </javadoc>
            <method name="run" type="void" line="175">
                <params>
                    <param name="config" type="Configuration"/>
                </params>
                <comment line="180">
                    Run a couple of sorts to make the JIT compile / optimize the code
                     which should produce somewhat more fair times                    
                </comment>
                <declaration name="sizes" type="Range" line="176"/>
                <declaration name="parallelism" type="Range" line="177"/>
                <declaration name="times" type="long[][]" line="183"/>
                <scope line="185"/>
            </method>
            <javadoc line="192">
                Prints the results as a table                
                <param>
                    sizes the different sizes of the arrays                    
                </param>
                <param>
                    parallelism the different parallelism levels used                    
                </param>
                <param>
                    times the median times for the different sizes / parallelism                    
                </param>
            </javadoc>
            <method name="printResults" type="void" line="198">
                <params>
                    <param name="sizes" type="Range"/>
                    <param name="parallelism" type="Range"/>
                    <param name="times" type="long[][]"/>
                </params>
                <declaration name="sums" type="long[]" line="200"/>
                <scope line="202"/>
                <scope line="206">
                    <scope line="208"/>
                </scope>
                <scope line="215"/>
            </method>
            <method name="runForSize" type="void" line="221">
                <params>
                    <param name="parallelism" type="Range"/>
                    <param name="elements" type="int"/>
                    <param name="times" type="long[][]"/>
                    <param name="size" type="int"/>
                </params>
                <scope line="222">
                    <declaration name="time" type="long" line="223"/>
                </scope>
            </method>
            <javadoc line="228">
                Runs &lt;i&gt;iterations&lt;/i&gt; number of test sorts of a random array of &lt;i&gt;element&lt;/i&gt; length                
                <param>
                    iterations number of iterations                    
                </param>
                <param>
                    elements number of elements in the random array                    
                </param>
                <param>
                    parallelism parallelism for the ForkJoin framework                    
                </param>
                <return>
                    the median time of runs                    
                </return>
            </javadoc>
            <method name="runForParallelism" type="long" line="235">
                <params>
                    <param name="iterations" type="int"/>
                    <param name="elements" type="int"/>
                    <param name="parallelism" type="int"/>
                </params>
                <comment line="241">
                    Suggest the VM to run a garbage collection to reduce the risk of getting one
                     while running the test run                    
                </comment>
                <declaration name="mergeSort" type="MergeSort" line="236"/>
                <declaration name="times" type="long[]" line="237"/>
                <scope line="239">
                    <declaration name="start" type="long" line="243"/>
                </scope>
            </method>
            <javadoc line="251">
                Calculates the median value of the array                
                <param>
                    times array of times                    
                </param>
                <return>
                    the median value                    
                </return>
            </javadoc>
            <method name="medianValue" type="long" line="256">
                <params>
                    <param name="times" type="long[]"/>
                </params>
                <comment line="261">
                    Make a copy of times to avoid having side effects on the parameter value                    
                </comment>
                <scope line="257"/>
                <declaration name="median" type="long" line="262"/>
                <scope line="263"/>
            </method>
            <javadoc line="269">
                Generates 1000 arrays of 1000 elements and sorts them as a warmup                
            </javadoc>
            <method name="warmup" type="void" line="272">
                <declaration name="mergeSort" type="MergeSort" line="273"/>
                <scope line="274"/>
            </method>
            <method name="main" type="void" line="279">
                <params>
                    <param name="args" type="String[]"/>
                </params>
                <declaration name="configuration" type="Configuration" line="280"/>
                <scope line="281"/>
            </method>
        </class>
    </source>