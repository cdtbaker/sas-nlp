<?xml version="1.0" encoding="UTF-8"?>
    <source package="">
        <import package="java.util.Arrays"/>
        <import package="java.util.concurrent.ForkJoinPool"/>
        <import package="java.util.concurrent.ForkJoinTask"/>
        <import package="java.util.concurrent.RecursiveAction"/>
        <class name="MergeSort" line="5">
            <javadoc line="5">
                A class for sorting an array of {@code ints} in parallel.
                  A {@code ForkJoinPool} is used for the parallelism, using the merge sort
                  algorithm the array is split into halves and a new sub task is created
                  for each part. Each sub task is dispatched to the {@code ForkJoinPool}which will schedule the task to a {@code Thread}.
                  This happens until the size of the array is at most 2
                  elements long. At this point the array is sorted using a simple compare
                  and possibly a swap. The tasks then finish by using insert sort to
                  merge the two just sorted arrays.
                  The idea of this class is to demonstrate the usage of RecursiveAction not
                  to implement the best possible parallel merge sort. This version creates
                  a small array for each merge (creating a lot of objects), this could
                  be avoided by keeping a single array.                
            </javadoc>
            <declaration name="pool" type="ForkJoinPool" line="20"/>
            <class name="MergeSortTask" line="21">
                <extends class="RecursiveAction"/>
                <declaration name="array" type="int[]" line="22"/>
                <declaration name="low" type="int" line="23"/>
                <declaration name="high" type="int" line="24"/>
                <declaration name="THRESHOLD" type="int" line="25"/>
                <javadoc line="26">
                    Creates a {@code MergeSortTask} containing the array and the bounds of the array                    
                    <param>
                        array the array to sort                        
                    </param>
                    <param>
                        low the lower element to start sorting at                        
                    </param>
                    <param>
                        high the non-inclusive high element to sort to                        
                    </param>
                </javadoc>
                <method name="MergeSortTask" type="constructor" line="32">
                    <params>
                        <param name="array" type="int[]"/>
                        <param name="low" type="int"/>
                        <param name="high" type="int"/>
                    </params>
                </method>
                <method name="compute" type="void" line="37">
                    <scope line="38"/>
                    <scope line="41">
                        <declaration name="middle" type="int" line="42"/>
                    </scope>
                </method>
                <javadoc line="47">
                    Merges the two sorted arrays this.low, middle - 1 and middle, this.high - 1                    
                    <param>
                        middle the index in the array where the second sorted list begins                        
                    </param>
                </javadoc>
                <method name="merge" type="void" line="51">
                    <params>
                        <param name="middle" type="int"/>
                    </params>
                    <scope line="52"/>
                    <declaration name="copy" type="int[]" line="55"/>
                    <declaration name="copyLow" type="int" line="57"/>
                    <declaration name="copyHigh" type="int" line="58"/>
                    <declaration name="copyMiddle" type="int" line="59"/>
                    <scope line="60">
                        <scope line="61"/>
                        <scope line="64"/>
                    </scope>
                </method>
            </class>
            <javadoc line="70">
                Creates a {@code MergeSort} containing a ForkJoinPool with the indicated parallelism level                
                <param>
                    parallelism the parallelism level used                    
                </param>
            </javadoc>
            <method name="MergeSort" type="constructor" line="74">
                <params>
                    <param name="parallelism" type="int"/>
                </params>
            </method>
            <javadoc line="77">
                Sorts all the elements of the given array using the ForkJoin framework                
                <param>
                    array the array to sort                    
                </param>
            </javadoc>
            <method name="sort" type="void" line="81">
                <params>
                    <param name="array" type="int[]"/>
                </params>
                <declaration name="job" type="ForkJoinTask&lt;Void&gt;" line="82"/>
            </method>
        </class>
    </source>