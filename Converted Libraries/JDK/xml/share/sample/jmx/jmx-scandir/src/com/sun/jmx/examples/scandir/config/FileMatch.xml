<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.examples.scandir.config">
        <import package="java.io.File"/>
        <import package="java.io.FileFilter"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.Date"/>
        <import package="java.util.logging.Logger"/>
        <import package="javax.xml.bind.annotation.XmlElement"/>
        <import package="javax.xml.bind.annotation.XmlRootElement"/>
        <class name="FileMatch" line="42">
            <comment line="66">
                A logger for this class.
                
                 private static final Logger LOG =
                        Logger.getLogger(FileMatch.class.getName());                
            </comment>
            <comment line="242">
                Accepts or rejects a file with regards to the values of the fields
                 configured in this bean. The accept() method is the implementation
                 of FileFilter.accept(File);                
            </comment>
            <comment line="291">
                used by equals()                
            </comment>
            <implements interface="FileFilter"/>
            <javadoc line="42">
                The &lt;code&gt;FileMatch&lt;/code&gt; Java Bean is used to model
                  the configuration of a {@link FileFilter} which
                  matches {@link File files} against a set of criteria.
                  &lt;p&gt;
                  The &lt;code&gt;FileMatch&lt;/code&gt; class also implements{@link FileFilter} - applying an {@code AND} on all
                  its conditions. {@code OR} conditions can be obtained
                  by supplying several instances of &lt;code&gt;FileMatch&lt;/code&gt;
                  to the encapsulating {@link DirectoryScannerConfig}, which
                  respectively applies an {@code OR} on all its{@code &lt;FileFilter&gt;} elements.
                  &lt;/p&gt;
                  &lt;p&gt;
                  This class is annotated for XML binding.
                  &lt;/p&gt;                
                <author>
                    Sun Microsystems, 2006 - All rights reserved.                    
                </author>
            </javadoc>
            <declaration name="directoryPattern" type="String" line="71"/>
            <javadoc line="71">
                A regular expression against which directory names should be matched.                
            </javadoc>
            <declaration name="filePattern" type="String" line="76"/>
            <javadoc line="76">
                A regular expression against which file names should be matched.                
            </javadoc>
            <declaration name="sizeExceedsMaxBytes" type="long" line="81"/>
            <javadoc line="81">
                File whose size in bytes exceeds this limit will be selected.                
            </javadoc>
            <declaration name="lastModifiedAfter" type="Date" line="86"/>
            <javadoc line="86">
                A file which will be selected only if it was last modified after
                  this date                
            </javadoc>
            <declaration name="lastModifiedBefore" type="Date" line="92"/>
            <javadoc line="92">
                A file which will be selected only if it was last modified before
                  this date                
            </javadoc>
            <javadoc line="98">
                Creates a new instance of FileMatch                
            </javadoc>
            <method name="FileMatch" type="constructor" line="101"/>
            <javadoc line="104">
                Getter for property directoryPattern. This is a regular expression
                  against which directory names should be matched.
                  Applies only to directory, and tells whether a directory should be
                  included or excluded from the search.
                  &lt;p&gt;If File.isDirectory() &amp;&amp; directoryPattern!=null &amp;&amp;
                  File.getName().matches(directoryPattern),
                  then File matches this filter.&lt;br&gt;
                  If File.isDirectory() &amp;&amp; directoryPattern!=null &amp;&amp;
                  File.getName().matches(directoryPattern)==false,
                  then File doesn&apos;t match this filter.&lt;br&gt;
                  &lt;/p&gt;                
                <see>
                    java.util.regex.Pattern                    
                </see>
                <see>
                    java.lang.String#matches(java.lang.String)                    
                </see>
                <return>
                    Value of property directoryPattern.                    
                </return>
            </javadoc>
            <method name="getDirectoryPattern" type="String" line="121"/>
            <javadoc line="125">
                Setter for property directoryPattern.                
                <param>
                    directoryPattern New value of property directoryPattern.
                      This is a regular expression
                      against which directory names should be {@link #getDirectoryPatternmatched}.                    
                </param>
                <see>
                    java.util.regex.Pattern                    
                </see>
                <see>
                    java.lang.String#matches(java.lang.String)                    
                </see>
            </javadoc>
            <method name="setDirectoryPattern" type="void" line="134">
                <params>
                    <param name="directoryPattern" type="String"/>
                </params>
            </method>
            <javadoc line="138">
                Getter for property filePattern. This is a regular expression
                  against which file names should be matched.
                  Applies only to files.
                  &lt;p&gt;
                  If File.isDirectory()==false &amp;&amp; filePattern!=null &amp;&amp;
                  File.getName().matches(filePattern)==false,
                  then File doesn&apos;t match this filter.
                  &lt;/p&gt;                
                <see>
                    java.util.regex.Pattern                    
                </see>
                <see>
                    java.lang.String#matches(java.lang.String)                    
                </see>
                <return>
                    Value of property filePatern.                    
                </return>
            </javadoc>
            <method name="getFilePattern" type="String" line="152"/>
            <javadoc line="156">
                Setter for property filePattern.                
                <param>
                    filePattern New value of property filePattern.
                      This is a regular expression
                      against which file names should be {@link #getFilePattern matched}.                    
                </param>
                <see>
                    java.util.regex.Pattern                    
                </see>
                <see>
                    java.lang.String#matches(java.lang.String)                    
                </see>
            </javadoc>
            <method name="setFilePattern" type="void" line="164">
                <params>
                    <param name="filePattern" type="String"/>
                </params>
            </method>
            <javadoc line="168">
                Getter for property sizeExceedsMaxBytes.
                  Ignored if 0 or negative. Otherwise, files whose size in bytes does
                  not exceed this limit will be excluded by this filter.                
                <return>
                    Value of property sizeExceedsMaxBytes.                    
                </return>
            </javadoc>
            <method name="getSizeExceedsMaxBytes" type="long" line="176"/>
            <javadoc line="180">
                Setter for property sizeExceedsMaxBytes.                
                <param>
                    sizeLimitInBytes New value of property sizeExceedsMaxBytes.
                      Ignored if 0 or negative. Otherwise, files whose size in bytes does
                      not exceed this limit will be excluded by this filter.                    
                </param>
            </javadoc>
            <method name="setSizeExceedsMaxBytes" type="void" line="187">
                <params>
                    <param name="sizeLimitInBytes" type="long"/>
                </params>
            </method>
            <javadoc line="191">
                Getter for property {@code lastModifiedAfter}.
                  A file will be selected only if it was last modified after{@code lastModifiedAfter}.
                  &lt;br&gt;This condition is ignored if {@code lastModifiedAfter} is{@code null}.                
                <return>
                    Value of property {@code lastModifiedAfter}.                    
                </return>
            </javadoc>
            <method name="getLastModifiedAfter" type="Date" line="200"/>
            <javadoc line="204">
                Setter for property {@code lastModifiedAfter}.                
                <param>
                    lastModifiedAfter  A file will be selected only if it was
                      last modified after  {@code lastModifiedAfter}.
                      &lt;br&gt;This condition is ignored if {@code lastModifiedAfter} is{@code null}.                    
                </param>
            </javadoc>
            <method name="setLastModifiedAfter" type="void" line="211">
                <params>
                    <param name="lastModifiedAfter" type="Date"/>
                </params>
            </method>
            <javadoc line="216">
                Getter for property {@code lastModifiedBefore}.
                  A file will be selected only if it was last modified before{@code lastModifiedBefore}.
                  &lt;br&gt;This condition is ignored if {@code lastModifiedBefore} is{@code null}.                
                <return>
                    Value of property {@code lastModifiedBefore}.                    
                </return>
            </javadoc>
            <method name="getLastModifiedBefore" type="Date" line="225"/>
            <javadoc line="229">
                Setter for property {@code lastModifiedBefore}.                
                <param>
                    lastModifiedBefore  A file will be selected only if it was
                      last modified before {@code lastModifiedBefore}.
                      &lt;br&gt;This condition is ignored if {@code lastModifiedBefore} is{@code null}.                    
                </param>
            </javadoc>
            <method name="setLastModifiedBefore" type="void" line="236">
                <params>
                    <param name="lastModifiedBefore" type="Date"/>
                </params>
            </method>
            <javadoc line="245">
                A file is accepted when all the criteria that have been set
                  are matched.                
                <param>
                    f The file to match against the configured criteria.                    
                </param>
                <return>
                    {@code true} if the file matches all criteria,{@code false} otherwise.                    
                </return>
            </javadoc>
            <method name="accept" type="boolean" line="252">
                <params>
                    <param name="f" type="File"/>
                </params>
                <comment line="255">
                    Directories are accepted if they match against the directory pattern.                    
                </comment>
                <comment line="264">
                    If we reach here, the f is not a directory.
                    
                     Files are accepted if they match all other conditions.                    
                </comment>
                <comment line="268">
                    Check whether f matches filePattern                    
                </comment>
                <comment line="273">
                    Check whether f exceeeds size limit                    
                </comment>
                <comment line="277">
                    Check whether f was last modified after lastModifiedAfter                    
                </comment>
                <comment line="282">
                    Check whether f was last modified before lastModifiedBefore                    
                </comment>
                <comment line="287">
                    All conditions were met: accept file.                    
                </comment>
                <scope line="256"/>
            </method>
            <method name="toArray" type="Object[]" line="291">
                <declaration name="thisconfig" type="Object[]" line="292"/>
            </method>
            <method name="equals" type="boolean" line="300">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <declaration name="other" type="FileMatch" line="303"/>
                <declaration name="thisconfig" type="Object[]" line="304"/>
                <declaration name="otherconfig" type="Object[]" line="305"/>
            </method>
            <method name="hashCode" type="int" line="310"/>
        </class>
    </source>