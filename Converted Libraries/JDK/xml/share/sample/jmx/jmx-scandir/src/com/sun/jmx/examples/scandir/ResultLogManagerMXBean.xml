<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.examples.scandir">
        <import package="com.sun.jmx.examples.scandir.config.ResultRecord"/>
        <import package="java.io.IOException"/>
        <import package="javax.management.InstanceNotFoundException"/>
        <interface name="ResultLogManagerMXBean">
            <javadoc line="38">
                The &lt;code&gt;ResultLogManagerMXBean&lt;/code&gt; is in charge of managing result logs.{@link DirectoryScanner DirectoryScanners} can be configured to log a{@link ResultRecord} whenever they take action upon a file that
                  matches their set of matching criteria.
                  The &lt;code&gt;ResultLogManagerMXBean&lt;/code&gt; is responsible for storing these
                  results in its result logs.
                  &lt;p&gt;The &lt;code&gt;ResultLogManagerMXBean&lt;/code&gt;
                  will let you interactively clear these result logs, change their
                  capacity, and decide where (memory or file or both) the{@link ResultRecord ResultRecords} should be stored.
                  &lt;p&gt;The memory log is useful in so far that its content can be interactively
                  returned by the &lt;code&gt;ResultLogManagerMXBean&lt;/code&gt;.
                  The file log doesn&apos;t have this facility.
                  &lt;p&gt;The result logs are intended to be used by e.g. an offline program that
                  would take some actions on the files that were matched by the scanners
                  criteria:
                  &lt;p&gt;The &lt;i&gt;scandir&lt;/i&gt; application could be configured to only produce logs
                  (i.e. takes no action but logging the matching files), and the real
                  action (e.g. mail the result log to the engineer which maintains the lab,
                  or parse the log and prepare and send a single mail to the matching
                  files owners, containing the list of file he/she should consider deleting)
                  could be performed by such another program/module.                
                <author>
                    Sun Microsystems, 2006 - All rights reserved.                    
                </author>
            </javadoc>
            <method name="newLogFile" type="void" line="66"/>
            <javadoc line="66">
                Creates a new log file in which to store results.
                  &lt;p&gt;When this method is called, the {@link ResultLogManager} will stop
                  logging in its current log file and use the new specified file instead.
                  If that file already exists, it will be renamed by appending a &apos;~&apos; to
                  its name, and a new empty file with the name specified by
                  &lt;var&gt;basename&lt;/var&gt; will be created.
                  &lt;/p&gt;
                  &lt;p&gt;Calling this method has no side effect on the {@link com.sun.jmx.examples.scandir.config.ScanManagerConfig#getInitialResultLogConfigInitialResultLogConfig} held in the {@link ScanDirConfigMXBean}configuration. To apply these new values to the{@link ScanDirConfigMXBean}configuration, you must call {@link ScanManagerMXBean#applyCurrentResultLogConfigScanManagerMXBean.applyCurrentResultLogConfig}.
                  &lt;p&gt;                
                <param>
                    basename The name of the new log file. This will be the
                      new name returned by {@link #getLogFileName}.                    
                </param>
                <param>
                    maxRecord maximum number of records to log in the specified file
                      before creating a new file. &lt;var&gt;maxRecord&lt;/var&gt; will be the
                      new value returned by {@link #getLogFileCapacity}.
                      When that maximum number of
                      records is reached the {@link ResultLogManager} will rename
                      the file by appending a &apos;~&apos; to its name, and a new empty
                      log file will be created.                    
                </param>
                <throws>
                    IOException A connection problem occurred when accessing
                      the underlying resource.                    
                </throws>
                <throws>
                    InstanceNotFoundException The underlying MBean is not
                      registered in the MBeanServer.                    
                </throws>
            </javadoc>
            <method name="log" type="void" line="100"/>
            <javadoc line="100">
                Logs a result record to the active result logs (memory,file,both,or none)
                  depending on how this MBean is currently configured.                
                <see>
                    #getLogFileName()                    
                </see>
                <see>
                    #getMemoryLogCapacity()                    
                </see>
                <param>
                    record The result record to log.                    
                </param>
                <throws>
                    IOException A connection problem occurred when accessing
                      the underlying resource.                    
                </throws>
                <throws>
                    InstanceNotFoundException The underlying MBean is not
                      registered in the MBeanServer.                    
                </throws>
            </javadoc>
            <method name="getLogFileName" type="String" line="114"/>
            <javadoc line="114">
                Gets the name of the current result log file.
                  &lt;p&gt;&lt;code&gt;null&lt;/code&gt; means that no log file is configured: logging
                  to file is disabled.
                  &lt;/p&gt;                
                <return>
                    The name of the current result log file, or &lt;code&gt;null&lt;/code&gt;
                      if logging to file is disabled.                    
                </return>
                <throws>
                    IOException A connection problem occurred when accessing
                      the underlying resource.                    
                </throws>
                <throws>
                    InstanceNotFoundException The underlying MBean is not
                      registered in the MBeanServer.                    
                </throws>
            </javadoc>
            <method name="getMemoryLog" type="ResultRecord[]" line="129"/>
            <javadoc line="129">
                Gets the whole content of the memory log. This cannot exceed{@link #getMemoryLogCapacity} records.                
                <return>
                    the whole content of the memory log.                    
                </return>
                <throws>
                    IOException A connection problem occurred when accessing
                      the underlying resource.                    
                </throws>
                <throws>
                    InstanceNotFoundException The underlying MBean is not
                      registered in the MBeanServer.                    
                </throws>
            </javadoc>
            <method name="getMemoryLogCapacity" type="int" line="142"/>
            <javadoc line="142">
                Gets the maximum number of records that can be logged in the
                  memory log.
                  &lt;p&gt;
                  A non positive value - &lt;code&gt;0&lt;/code&gt; or negative - means that
                  logging in memory is disabled.
                  &lt;/p&gt;
                  &lt;p&gt;The memory log is a FIFO: when its maximum capacity is reached, its
                  head element is removed to make place for a new element at its tail.
                  &lt;/p&gt;                
                <return>
                    The maximum number of records that can be logged in the
                      memory log. A value {@code &lt;= 0} means that logging in memory is
                      disabled.                    
                </return>
                <throws>
                    IOException A connection problem occurred when accessing
                      the underlying resource.                    
                </throws>
                <throws>
                    InstanceNotFoundException The underlying MBean is not
                      registered in the MBeanServer.                    
                </throws>
            </javadoc>
            <method name="setMemoryLogCapacity" type="void" line="163"/>
            <javadoc line="163">
                Sets the maximum number of records that can be logged in the
                  memory log.
                  &lt;p&gt;The memory log is a FIFO: when its maximum capacity is reached, its
                  head element is removed to make place for a new element at its tail.
                  &lt;/p&gt;                
                <param>
                    size The maximum number of result records that can be logged in the memory log.  &lt;p&gt;
                      A non positive value - &lt;code&gt;0&lt;/code&gt; or negative - means that
                      logging in memory is disabled. It will also have the side
                      effect of clearing the memory log.
                      &lt;/p&gt;                    
                </param>
                <throws>
                    IOException A connection problem occurred when accessing
                      the underlying resource.                    
                </throws>
                <throws>
                    InstanceNotFoundException The underlying MBean is not
                      registered in the MBeanServer.                    
                </throws>
            </javadoc>
            <method name="setLogFileCapacity" type="void" line="183"/>
            <javadoc line="183">
                Sets the maximum number of records that can be logged in the result log
                  file.
                  &lt;p&gt;When that maximum number of
                  records is reached the {@link ResultLogManager} will rename
                  the result log file by appending a &apos;~&apos; to its name, and a new empty
                  log file will be created.
                  &lt;/p&gt;
                  &lt;p&gt;If logging to file is disabled calling this method
                  is irrelevant.
                  &lt;/p&gt;                
                <param>
                    maxRecord maximum number of records to log in the result log file.                    
                </param>
                <see>
                    #getLogFileName()                    
                </see>
                <throws>
                    IOException A connection problem occurred when accessing
                      the underlying resource.                    
                </throws>
                <throws>
                    InstanceNotFoundException The underlying MBean is not
                      registered in the MBeanServer.                    
                </throws>
            </javadoc>
            <method name="getLogFileCapacity" type="long" line="204"/>
            <javadoc line="204">
                Gets the maximum number of records that can be logged in the result log
                  file.
                  &lt;p&gt;When that maximum number of
                  records is reached the {@link ResultLogManager} will rename
                  the result log file by appending a &apos;~&apos; to its name, and a new empty
                  log file will be created.
                  &lt;/p&gt;                
                <see>
                    #getLogFileName()                    
                </see>
                <return>
                    The maximum number of records that can be logged in the result
                      log file.                    
                </return>
                <throws>
                    IOException A connection problem occurred when accessing
                      the underlying resource.                    
                </throws>
                <throws>
                    InstanceNotFoundException The underlying MBean is not
                      registered in the MBeanServer.                    
                </throws>
            </javadoc>
            <method name="getLoggedCount" type="long" line="223"/>
            <javadoc line="223">
                Gets The number of records that have been logged in the
                  current result log file. This will always be less than{@link #getLogFileCapacity()}.                
                <return>
                    The number of records in the
                      current result log file.                    
                </return>
                <throws>
                    IOException A connection problem occurred when accessing
                      the underlying resource.                    
                </throws>
                <throws>
                    InstanceNotFoundException The underlying MBean is not
                      registered in the MBeanServer.                    
                </throws>
            </javadoc>
            <method name="clearLogs" type="void" line="238"/>
            <javadoc line="238">
                Clears the memory log and result log file.                
                <throws>
                    IOException A connection problem occurred when accessing
                      the underlying resource.                    
                </throws>
                <throws>
                    InstanceNotFoundException The underlying MBean is not
                      registered in the MBeanServer.                    
                </throws>
            </javadoc>
        </interface>
    </source>