<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.examples.scandir">
        <import package="com.sun.jmx.examples.scandir.config.DirectoryScannerConfig"/>
        <import package="com.sun.jmx.examples.scandir.config.ScanManagerConfig"/>
        <import package="java.io.IOException"/>
        <import package="javax.management.InstanceNotFoundException"/>
        <interface name="ScanDirConfigMXBean">
            <javadoc line="39">
                &lt;p&gt;The &lt;code&gt;ScanDirConfigMXBean&lt;/code&gt; is in charge of the
                  &lt;i&gt;scandir&lt;/i&gt; application configuration.
                  &lt;/p&gt;
                  &lt;p&gt;The &lt;code&gt;ScanDirConfigMXBean&lt;/code&gt; is an MBean which is able to
                  load and save the &lt;i&gt;scandir&lt;/i&gt; application configuration to and from an
                  XML file.
                  &lt;/p&gt;
                  &lt;p&gt;
                  It will let you also interactively modify that configuration, which you
                  can later save to the file, by calling {@link #save}, or discard, by
                  reloading the file without saving - see {@link #load}.
                  &lt;/p&gt;
                  &lt;p&gt;
                  There can be as many &lt;code&gt;ScanDirConfigMXBean&lt;/code&gt; registered
                  in the MBeanServer as you like, but only one of them will be identified as
                  the current configuration of the {@link ScanManagerMXBean}.
                  You can switch to another configuration by calling {@link ScanManagerMXBean#setConfigurationMBeanScanManagerMXBean.setConfigurationMBean}.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Once the current configuration has been loaded (by calling {@link #load})
                  or modified (by calling one of {@link #addDirectoryScanneraddDirectoryScanner}, {@link #removeDirectoryScanner removeDirectoryScanner}or {@link #setConfiguration setConfiguration}) it can be pushed
                  to the {@link ScanManagerMXBean} by calling {@link ScanManagerMXBean#applyConfigurationScanManagerMXBean.applyConfiguration(true)} -
                  &lt;code&gt;true&lt;/code&gt; means that we apply the configuration from memory,
                  without first reloading the file.
                  &lt;/p&gt;                
                <author>
                    Sun Microsystems, 2006 - All rights reserved.                    
                </author>
            </javadoc>
            <declaration name="SaveState" type="enum" line="75"/>
            <javadoc line="75">
                This state tells whether the configuration reflected by the{@link ScanDirConfigMXBean} was loaded in memory, saved to the
                  configuration file, or modified since last saved.
                  Note that this state doesn&apos;t tell whether the configuration was
                  applied by the {@link ScanManagerMXBean}.                
            </javadoc>
            <scope line="82"/>
            <method name="load" type="void" line="108"/>
            <javadoc line="108">
                Loads the configuration from the {@link #getConfigFilename configuration file}.
                  &lt;p&gt;Any unsaved modification will be lost. The {@link #getSaveState state}is switched to {@link SaveState#LOADED LOADED}.
                  &lt;/p&gt;
                  &lt;p&gt;
                  This action has no effect on the {@link ScanManagerMXBean} until{@link ScanManagerMXBean#getConfigurationMBean ScanManagerMXBean}points to this MBean and {@link ScanManagerMXBean#applyConfigurationScanManagerMXBean.applyConfiguration} is called.
                  &lt;/p&gt;                
                <see>
                    #getSaveState()                    
                </see>
                <throws>
                    IOException The configuration couldn&apos;t be loaded from the file,
                      e.g. because the file doesn&apos;t exist or isn&apos;t
                      readable.                    
                </throws>
                <throws>
                    IOException A connection problem occurred when accessing
                      the underlying resource.                    
                </throws>
                <throws>
                    InstanceNotFoundException The underlying MBean is not
                      registered in the MBeanServer.                    
                </throws>
            </javadoc>
            <method name="save" type="void" line="132"/>
            <javadoc line="132">
                Saves the configuration to the {@link #getConfigFilename configuration file}.
                  &lt;p&gt;If the configuration file doesn&apos;t exists, this method will
                  attempt to create it. Otherwise, the existing file will
                  be renamed by appending a &apos;~&apos; to its name, and a new file
                  will be created, in which the configuration will be saved.
                  The {@link #getSaveState state}is switched to {@link SaveState#SAVED SAVED}.
                  &lt;/p&gt;
                  &lt;p&gt;
                  This action has no effect on the {@link ScanManagerMXBean}.
                  &lt;/p&gt;                
                <see>
                    #getSaveState()                    
                </see>
                <throws>
                    IOException The configuration couldn&apos;t be saved to the file,
                      e.g. because the file couldn&apos;t be created.                    
                </throws>
                <throws>
                    IOException A connection problem occurred when accessing
                      the underlying resource.                    
                </throws>
                <throws>
                    InstanceNotFoundException The underlying MBean is not
                      registered in the MBeanServer.                    
                </throws>
            </javadoc>
            <method name="getConfigFilename" type="String" line="158"/>
            <javadoc line="158">
                Gets the name of the configuration file.
                  &lt;p&gt;If the configuration file doesn&apos;t exists, {@link #load} will fail
                  and {@link #save} will attempt to create the file.
                  &lt;/p&gt;                
                <return>
                    The configuration file name for this MBean.                    
                </return>
                <throws>
                    IOException A connection problem occurred when accessing
                      the underlying resource.                    
                </throws>
                <throws>
                    InstanceNotFoundException The underlying MBean is not
                      registered in the MBeanServer.                    
                </throws>
            </javadoc>
            <method name="getConfiguration" type="ScanManagerConfig" line="173"/>
            <javadoc line="173">
                Gets the current configuration data.
                  &lt;p&gt;
                  This method returns the configuration data which is currently held
                  in memory.
                  &lt;/p&gt;
                  &lt;p&gt;Call {@link #load} to reload the data from the configuration
                  file, and {@link #save} to save the data to the configuration
                  file.
                  &lt;/p&gt;                
                <see>
                    #getSaveState()                    
                </see>
                <return>
                    The current configuration data in memory.                    
                </return>
                <throws>
                    IOException A connection problem occurred when accessing
                      the underlying resource.                    
                </throws>
                <throws>
                    InstanceNotFoundException The underlying MBean is not
                      registered in the MBeanServer.                    
                </throws>
            </javadoc>
            <method name="setConfiguration" type="void" line="193"/>
            <javadoc line="193">
                Sets the current configuration data.
                  &lt;p&gt;
                  This method replaces the configuration data in memory.
                  The {@link #getSaveState state} is switched to {@link SaveState#MODIFIED MODIFIED}.
                  &lt;/p&gt;
                  &lt;p&gt;Calling {@link #load} will reload the data from the configuration
                  file, and all modifications will be lost.
                  Calling {@link #save} will save the modified data to the configuration
                  file.
                  &lt;/p&gt;
                  &lt;p&gt;
                  This action has no effect on the {@link ScanManagerMXBean} until{@link ScanManagerMXBean#getConfigurationMBean ScanManagerMXBean}points to this MBean and {@link ScanManagerMXBean#applyConfigurationScanManagerMXBean.applyConfiguration} is called.
                  &lt;/p&gt;                
                <param>
                    config The new configuration data.                    
                </param>
                <see>
                    #getSaveState()                    
                </see>
                <throws>
                    IOException A connection problem occurred when accessing
                      the underlying resource.                    
                </throws>
                <throws>
                    InstanceNotFoundException The underlying MBean is not
                      registered in the MBeanServer.                    
                </throws>
            </javadoc>
            <method name="addDirectoryScanner" type="DirectoryScannerConfig" line="221"/>
            <javadoc line="221">
                Adds a new directory scanner to the current configuration data.
                  &lt;p&gt;
                  This method updates the configuration data in memory, adding
                  a {@link DirectoryScannerConfig} to the {@link ScanManagerConfig#getScanList directory scanner list}.
                  The {@link #getSaveState state} is switched to {@link SaveState#MODIFIED MODIFIED}.
                  &lt;/p&gt;
                  &lt;p&gt;Calling {@link #load} will reload the data from the configuration
                  file, and all modifications will be lost.
                  Calling {@link #save} will save the modified data to the configuration
                  file.
                  &lt;/p&gt;
                  &lt;p&gt;
                  This action has no effect on the {@link ScanManagerMXBean} until{@link ScanManagerMXBean#getConfigurationMBean ScanManagerMXBean}points to this MBean and {@link ScanManagerMXBean#applyConfigurationScanManagerMXBean.applyConfiguration} is called.
                  &lt;/p&gt;                
                <param>
                    name A name for the new directory scanner. This is the value
                      that will be later used in the {@link DirectoryScannerMXBean}ObjectName for the &lt;code&gt;name=&lt;/code&gt; key.                    
                </param>
                <param>
                    dir The root directory at which this scanner will start scanning.                    
                </param>
                <param>
                    filePattern A {@link java.util.regex.Pattern regular expression}to match against a selected file name.                    
                </param>
                <param>
                    sizeExceedsMaxBytes Only file whose size exceeds that limit will
                      be selected. &lt;code.0&lt;/code&gt; or  a
                      negative value means no limit.                    
                </param>
                <param>
                    sinceLastModified Select files which haven&apos;t been modified for
                      that number of milliseconds - i.e.{@code sinceLastModified=3600000} will exclude files which
                      have been modified in the last hour.
                      The date of last modification is ignored if &lt;code&gt;0&lt;/code&gt; or  a
                      negative value is provided.                    
                </param>
                <see>
                    #getSaveState()                    
                </see>
                <return>
                    The added &lt;code&gt;DirectoryScannerConfig&lt;/code&gt;.                    
                </return>
                <throws>
                    IOException A connection problem occurred when accessing
                      the underlying resource.                    
                </throws>
                <throws>
                    InstanceNotFoundException The underlying MBean is not
                      registered in the MBeanServer.                    
                </throws>
            </javadoc>
            <method name="removeDirectoryScanner" type="DirectoryScannerConfig" line="268"/>
            <javadoc line="268">
                Removes a directory scanner from the current configuration data.
                  &lt;p&gt;
                  This method updates the configuration data in memory, removing
                  a {@link DirectoryScannerConfig} from the {@link ScanManagerConfig#getScanList directory scanner list}.
                  The {@link #getSaveState state} is switched to {@link SaveState#MODIFIED MODIFIED}.
                  &lt;/p&gt;
                  &lt;p&gt;Calling {@link #load} will reload the data from the configuration
                  file, and all modifications will be lost.
                  Calling {@link #save} will save the modified data to the configuration
                  file.
                  &lt;/p&gt;
                  &lt;p&gt;
                  This action has no effect on the {@link ScanManagerMXBean} until{@link ScanManagerMXBean#getConfigurationMBean ScanManagerMXBean}points to this MBean and {@link ScanManagerMXBean#applyConfigurationScanManagerMXBean.applyConfiguration} is called.
                  &lt;/p&gt;                
                <param>
                    name The name of the new directory scanner. This is the value
                      that is used in the {@link DirectoryScannerMXBean}ObjectName for the &lt;code&gt;name=&lt;/code&gt; key.                    
                </param>
                <return>
                    The removed &lt;code&gt;DirectoryScannerConfig&lt;/code&gt;.                    
                </return>
                <throws>
                    IllegalArgumentException if there&apos;s no directory scanner by
                      that name in the current configuration data.                    
                </throws>
                <throws>
                    IOException A connection problem occurred when accessing
                      the underlying resource.                    
                </throws>
                <throws>
                    InstanceNotFoundException The underlying MBean is not
                      registered in the MBeanServer.                    
                </throws>
            </javadoc>
            <method name="getSaveState" type="SaveState" line="303"/>
            <javadoc line="303">
                Gets the save state of the current configuration data.
                  &lt;p&gt;{@link SaveState#CREATED CREATED} means that the configuration data was just
                  created. It has not been loaded from the configuration file.
                  Calling {@link #load} will load the data from the configuration file.
                  Calling {@link #save} will write the empty data to the configuration
                  file.
                  &lt;/p&gt;
                  &lt;p&gt;{@link SaveState#LOADED LOADED} means that the configuration data
                  was loaded from the configuration file.
                  &lt;/p&gt;
                  &lt;p&gt;{@link SaveState#MODIFIED MODIFIED} means that the configuration data
                  was modified since it was last loaded or saved.
                  Calling {@link #load} will reload the data from the configuration file,
                  and all modifications will be lost.
                  Calling {@link #save} will write the modified data to the configuration
                  file.
                  &lt;/p&gt;
                  &lt;p&gt;{@link SaveState#SAVED SAVED} means that the configuration data
                  was saved to the configuration file.
                  &lt;/p&gt;
                  &lt;p&gt;
                  This state doesn&apos;t indicate whether this MBean configuration data
                  was {@link ScanManagerMXBean#applyConfiguration applied} by the{@link ScanManagerMXBean}.
                  &lt;/p&gt;                
                <throws>
                    IOException A connection problem occurred when accessing
                      the underlying resource.                    
                </throws>
                <throws>
                    InstanceNotFoundException The underlying MBean is not
                      registered in the MBeanServer.                    
                </throws>
                <return>
                    The save state of the {@code ScanDirConfigMXBean}.                    
                </return>
            </javadoc>
        </interface>
    </source>