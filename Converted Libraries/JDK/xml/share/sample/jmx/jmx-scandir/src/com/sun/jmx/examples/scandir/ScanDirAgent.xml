<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.examples.scandir">
        <import package="com.sun.jmx.examples.scandir.ScanManagerMXBean.ScanState"/>
        <import package="java.io.IOException"/>
        <import package="java.lang.management.ManagementFactory"/>
        <import package="java.util.concurrent.BlockingQueue"/>
        <import package="java.util.concurrent.LinkedBlockingQueue"/>
        <import package="java.util.concurrent.TimeUnit"/>
        <import package="java.util.logging.Logger"/>
        <import package="javax.management.JMException"/>
        <import package="javax.management.Notification"/>
        <import package="javax.management.NotificationEmitter"/>
        <import package="javax.management.NotificationListener"/>
        <class name="ScanDirAgent" line="46">
            <comment line="76">
                Proxy to the ScanManagerMXBean - created by init();                
            </comment>
            <comment line="80">
                A queue to put received Notifications.                
            </comment>
            <comment line="84">
                A listener that will put notifications into the queue.                
            </comment>
            <javadoc line="46">
                &lt;p&gt;
                  The &lt;code&gt;ScanDirAgent&lt;/code&gt; is the Agent class for the &lt;i&gt;scandir&lt;/i&gt;
                  application.
                  This class contains the {@link #main} method to start a standalone
                  &lt;i&gt;scandir&lt;/i&gt; application.
                  &lt;/p&gt;
                  &lt;p&gt;
                  The {@link #main main()} method simply registers a {@link ScanManagerMXBean} in the platform MBeanServer - see {@link #init init},
                  and then waits for someone to call {@link ScanManagerMXBean#close close}on that MBean.
                  &lt;/p&gt;
                  &lt;p&gt;
                  When the {@link ScanManagerMXBean} state is switched to {@link ScanManagerMXBean.ScanState#CLOSED CLOSED}, {@link #cleanup cleanup} is
                  called, the {@link ScanManagerMXBean} is unregistered, and the application
                  terminates (i.e. the main thread completes).
                  &lt;/p&gt;                
                <author>
                    Sun Microsystems, 2006 - All rights reserved.                    
                </author>
            </javadoc>
            <declaration name="LOG" type="Logger" line="69"/>
            <javadoc line="69">
                A logger for this class.                
            </javadoc>
            <declaration name="proxy" type="ScanManagerMXBean" line="77"/>
            <declaration name="queue" type="BlockingQueue&amp;lt;Notification&amp;gt;" line="81"/>
            <declaration name="listener" type="NotificationListener" line="85"/>
            <javadoc line="87">
                Creates a new instance of ScanDirAgent
                  You will need to call {@link #init()} later on in order to initialize
                  the application.                
                <see>
                    #main                    
                </see>
            </javadoc>
            <method name="ScanDirAgent" type="constructor" line="93">
                <comment line="95">
                    Initialize the notification queue                    
                </comment>
                <comment line="98">
                    Creates the listener.                    
                </comment>
                <comment line="103">
                    Just put the received notification in the queue.
                     It will be consumed later on by &apos;waitForClose()&apos;                    
                </comment>
                <comment line="109">
                    OK                    
                </comment>
                <anonymous_class line="98">
                    <method name="handleNotification" type="void" line="100">
                        <params>
                            <param name="notification" type="Notification"/>
                            <param name="handback" type="Object"/>
                        </params>
                        <comment line="103">
                            Just put the received notification in the queue.
                             It will be consumed later on by &apos;waitForClose()&apos;                            
                        </comment>
                        <comment line="109">
                            OK                            
                        </comment>
                        <scope line="101"/>
                        <scope line="107"/>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="114">
                Initialize the application by registering a ScanManagerMXBean in
                  the platform MBeanServer                
                <throws>
                    java.io.IOException Registration failed for communication-related reasons.                    
                </throws>
                <throws>
                    javax.management.JMException Registration failed for JMX-related reasons.                    
                </throws>
            </javadoc>
            <method name="init" type="void" line="120">
                <comment line="123">
                    Registers the ScanManagerMXBean singleton in the
                     platform MBeanServer                    
                </comment>
                <comment line="128">
                    Registers a NotificationListener with the ScanManagerMXBean in
                     order to receive state changed notifications.                    
                </comment>
            </method>
            <javadoc line="133">
                Cleanup after close: unregister the ScanManagerMXBean singleton.                
                <throws>
                    java.io.IOException Cleanup failed for communication-related reasons.                    
                </throws>
                <throws>
                    javax.management.JMException Cleanup failed for JMX-related reasons.                    
                </throws>
            </javadoc>
            <method name="cleanup" type="void" line="138">
                <scope line="139"/>
                <scope line="142"/>
            </method>
            <javadoc line="148">
                Wait for someone to call &apos;close()&apos; on the ScanManagerMXBean singleton.
                  Every time its state changes, the ScanManagerMXBean emits a notification.
                  We don&apos;t rely on the notification content (if we were using a remote
                  connection, we could miss some notifications) - we simply use the
                  state change notifications to react more quickly to state changes.
                  We do so simply by polling the {@link BlockingQueue} in which our
                  listener is pushing notifications, and checking the ScanManagerMXBean
                  state every time that a notification is received.
                  &lt;p&gt;
                  We can do so because we know that once the ScanManagerMXBean state is
                  switched to &apos;CLOSED&apos;, it will remain &apos;CLOSED&apos; whatsoever. &lt;br&gt;
                  Therefore we don&apos;t need to concern ourselves with the possibility of
                  missing the window in which the ScanManagerMXBean state&apos;s will be
                  CLOSED, because that particular window stays opened forever.
                  &lt;p&gt;
                  Had we wanted to wait for &apos;RUNNING&apos;, we would have needed to apply
                  a different strategy - e.g. by taking into account the actual content
                  of the state changed notifications we received.                
                <throws>
                    java.io.IOException wait failed - a communication problem occurred.                    
                </throws>
                <throws>
                    javax.management.JMException wait failed - the MBeanServer threw an exception.                    
                </throws>
            </javadoc>
            <method name="waitForClose" type="void" line="170">
                <comment line="173">
                    Wait until state is closed                    
                </comment>
                <comment line="176">
                    Wake up at least every 30 seconds - if we missed a
                     notification - we will at least get a chance to
                     call getState(). 30 seconds is obviously quite
                     arbitrary - if this were a real daemon - id&apos;be tempted
                     to wait 30 minutes - knowing that any incoming
                     notification will wake me up anyway.
                     Note: we simply use the state change notifications to
                     react more quickly to state changes: see javadoc above.                    
                </comment>
                <comment line="187">
                    OK                    
                </comment>
                <scope line="173">
                    <scope line="174"/>
                    <scope line="185"/>
                </scope>
            </method>
            <javadoc line="191">
                The agent&apos;s main: {@link #init registers} a {@link ScanManagerMXBean},{@link #waitForClose waits} until its state is {@link ScanManagerMXBean.ScanState#CLOSED CLOSED}, {@link #cleanup cleanup}and exits.                
                <param>
                    args the command line arguments - ignored                    
                </param>
                <throws>
                    java.io.IOException A communication problem occurred.                    
                </throws>
                <throws>
                    javax.management.JMException A JMX problem occurred.                    
                </throws>
            </javadoc>
            <method name="main" type="void" line="201">
                <params>
                    <param name="args" type="String[]"/>
                </params>
                <declaration name="agent" type="ScanDirAgent" line="203"/>
                <scope line="205"/>
                <scope line="208"/>
            </method>
        </class>
    </source>