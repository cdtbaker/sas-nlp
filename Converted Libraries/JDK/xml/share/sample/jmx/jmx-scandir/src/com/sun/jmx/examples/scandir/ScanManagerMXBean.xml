<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.examples.scandir">
        <import package="java.io.IOException"/>
        <import package="java.util.Map"/>
        <import package="javax.management.InstanceNotFoundException"/>
        <import package="javax.management.JMException"/>
        <interface name="ScanManagerMXBean">
            <javadoc line="39">
                The &lt;code&gt;ScanManagerMXBean&lt;/code&gt; is responsible for applying a
                  configuration, starting and scheduling directory scans, and reporting
                  application state.
                  &lt;p&gt;
                  The &lt;code&gt;ScanManagerMXBean&lt;/code&gt; is a singleton MBean: there can be
                  at most one instance of such an MBean registered in a given MBeanServer.
                  The name of that MBean is a constant defined in{@link ScanManager#SCAN_MANAGER_NAME ScanManager.SCAN_MANAGER_NAME}.
                  &lt;/p&gt;
                  &lt;p&gt;
                  The &lt;code&gt;ScanManagerMXBean&lt;/code&gt; is the entry point of the &lt;i&gt;scandir&lt;/i&gt;
                  application management interface. It is from this MBean that all other
                  MBeans will be created and registered.
                  &lt;/p&gt;                
                <author>
                    Sun Microsystems, 2006 - All rights reserved.                    
                </author>
            </javadoc>
            <declaration name="ScanState" type="enum" line="58"/>
            <javadoc line="58">
                This state tells whether directory scans are running, scheduled,
                  successfully completed, or stopped.
                  &lt;p&gt;
                  The {@link #CLOSED} state means
                  that the {@link ScanManagerMXBean} was closed and is no longer usable.
                  This state is used when the {@link ScanManagerMXBean} needs to be
                  unregistered.
                  &lt;/p&gt;                
            </javadoc>
            <scope line="68"/>
            <method name="getState" type="ScanState" line="97"/>
            <javadoc line="97">
                Returns the current state of the application.                
                <return>
                    the current state of the application.                    
                </return>
                <throws>
                    IOException A connection problem occurred when accessing
                      the underlying resource.                    
                </throws>
                <throws>
                    InstanceNotFoundException The underlying MBean is not
                      registered in the MBeanServer.                    
                </throws>
            </javadoc>
            <method name="schedule" type="void" line="108"/>
            <javadoc line="108">
                Schedule a scan session for a later date.
                  &lt;p&gt;
                  A scan session is a background task that will sequentially call {@link DirectoryScannerMXBean#scan scan()} on every {@link DirectoryScannerMXBean} configured for this MBean.
                  &lt;/p&gt;                
                <see>
                    #getDirectoryScanners                    
                </see>
                <param>
                    delay The first scan session will be started after
                      the given delay. 0 means start now.                    
                </param>
                <param>
                    interval Scan session will be rescheduled periodically
                      at the specified interval. The interval starts at the
                      the end of the scan session: if a scan session takes
                      on average x milliseconds to complete, then a scan session will
                      be started on average every x+interval milliseconds.
                      if (interval == 0) then scan session will not be
                      rescheduled, and will run only once.                    
                </param>
                <throws>
                    IllegalStateException if a scan session is already
                      running or scheduled, or the MBean is closed.                    
                </throws>
                <throws>
                    IOException A connection problem occurred when accessing
                      the underlying resource.                    
                </throws>
                <throws>
                    InstanceNotFoundException The underlying MBean is not
                      registered in the MBeanServer.                    
                </throws>
            </javadoc>
            <method name="stop" type="void" line="136"/>
            <javadoc line="136">
                Stops current running or scheduled scan sessions if any.
                  &lt;p&gt;
                  A scan session is a background task that will sequentially call {@link DirectoryScannerMXBean#scan scan()} on every {@link DirectoryScannerMXBean} configured for this MBean.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Scan sessions are started/scheduled by calls to {@link #start start} or{@link #schedule schedule}.
                  &lt;/p&gt;
                  After this method completes the state of the application will
                  be {@link ScanState#STOPPED}.                
                <throws>
                    IOException A connection problem occurred when accessing
                      the underlying resource.                    
                </throws>
                <throws>
                    InstanceNotFoundException The underlying MBean is not
                      registered in the MBeanServer.                    
                </throws>
            </javadoc>
            <method name="close" type="void" line="157"/>
            <javadoc line="157">
                Switches the state to CLOSED.
                  When closed, this MBean cannot be used any more.                
                <throws>
                    IOException A connection problem occurred when accessing
                      the underlying resource.                    
                </throws>
                <throws>
                    InstanceNotFoundException The underlying MBean is not
                      registered in the MBeanServer.                    
                </throws>
            </javadoc>
            <method name="start" type="void" line="168"/>
            <javadoc line="168">
                Starts a scan session immediately.
                  This is equivalent to {@link #schedule(long,long) schedule(0,0)}.                
                <throws>
                    IllegalStateException if a scan session is already
                      running or scheduled, or the MBean is closed.                    
                </throws>
                <throws>
                    IOException A connection problem occurred when accessing
                      the underlying resource.                    
                </throws>
                <throws>
                    InstanceNotFoundException The underlying MBean is not
                      registered in the MBeanServer.                    
                </throws>
            </javadoc>
            <method name="getDirectoryScanners" type="Map&lt;String,DirectoryScannerMXBean&gt;" line="181"/>
            <javadoc line="181">
                Gets the list of directory scanners configured for this MBean.                
                <return>
                    A {@code Map&lt;String,DirectoryScannerMXBean&gt;} where the
                      key in the map is the value of the &lt;code&gt;name=&lt;/code&gt; key
                      of the {@link DirectoryScannerMXBean} ObjectName.                    
                </return>
                <throws>
                    IOException A connection problem occurred when accessing
                      the underlying resource.                    
                </throws>
                <throws>
                    JMException The MBeanServer failed to call the underlying MBean.                    
                </throws>
            </javadoc>
            <method name="applyConfiguration" type="void" line="193"/>
            <javadoc line="193">
                Apply the configuration handled by the {@link #getConfigurationMBean configuration MBean}.
                  &lt;p&gt;
                  When the configuration is applied, all the {@link DirectoryScannerMXBean}created by this MBean will be unregistered, and new {@link DirectoryScannerMXBean} will be created and registered from the
                  new {@link ScanDirConfigMXBean#getConfiguration configuration data}.
                  &lt;/p&gt;
                  &lt;p&gt;
                  The initial result log configuration held by the {@link #getConfigurationMBean configuration MBean} will also be pushed to the{@link ResultLogManagerMXBean}. If you don&apos;t want to lose your current{@link ResultLogManagerMXBean} configuration, you should therefore call{@link #applyCurrentResultLogConfigapplyCurrentResultLogConfig} before calling{@link #applyConfiguration applyConfiguration}&lt;/p&gt;                
                <param>
                    fromMemory if {@code true}, the configuration will be applied
                      from memory. if {@code false}, the {@code ScanManagerMXBean} will
                      ask the {@link #getConfigurationMBean configuration MBean} to {@link ScanDirConfigMXBean#load reload its configuration} before applying
                      it.                    
                </param>
                <throws>
                    IllegalStateException if a scan session is
                      running or scheduled, or the MBean is closed.                    
                </throws>
                <throws>
                    IOException A connection problem occurred when accessing
                      the underlying resource.                    
                </throws>
                <throws>
                    JMException The MBeanServer failed to call the underlying MBean.                    
                </throws>
            </javadoc>
            <method name="applyCurrentResultLogConfig" type="void" line="225"/>
            <javadoc line="225">
                Replaces the {@link #getConfigurationMBean configuration MBean}&apos;s {@link com.sun.jmx.examples.scandir.config.ScanManagerConfig#getInitialResultLogConfiginitial result log configuration} with the current {@link ResultLogManagerMXBean}configuration. This prevents the &lt;code&gt;ResultLogManagerMXBean&lt;/code&gt;
                  current configuration from being reset when {@link #applyConfigurationapplyConfiguration} is called.                
                <param>
                    toMemory if {@code true} only replaces the initial result log
                      configuration held in memory.
                      if {@code false}, the {@link #getConfigurationMBean configuration MBean} will be asked to commit
                      the whole configuration to the configuration file.                    
                </param>
                <throws>
                    IOException A connection problem occurred when accessing
                      the underlying resource.                    
                </throws>
                <throws>
                    JMException The MBeanServer failed to call the underlying MBean.                    
                </throws>
            </javadoc>
            <method name="setConfigurationMBean" type="void" line="247"/>
            <javadoc line="247">
                Instruct the {@code ScanManagerMXBean} to use another {@link ScanDirConfigMXBean configuration MBean}.
                  &lt;p&gt;This method doesn&apos;t {@link #applyConfiguration apply} the new
                  configuration. If you want to apply the new configuration, you should
                  additionally call {@link #applyConfigurationapplyConfiguration(true|false)}. Note that you cannot apply a
                  configuration as long as a scan session is scheduled or running.
                  In that case you will need to wait for that session to complete
                  or call {@link #stop} to stop it.
                  &lt;/p&gt;                
                <param>
                    config A proxy to the {@link ScanDirConfigMXBean} that holds
                      the new configuration for the application.                    
                </param>
                <throws>
                    IOException A connection problem occurred when accessing
                      the underlying resource.                    
                </throws>
                <throws>
                    InstanceNotFoundException The underlying MBean is not
                      registered in the MBeanServer.                    
                </throws>
            </javadoc>
            <method name="getConfigurationMBean" type="ScanDirConfigMXBean" line="267"/>
            <javadoc line="267">
                Gets the current configuration MBean.                
                <return>
                    A proxy to the current configuration MBean.                    
                </return>
                <throws>
                    IOException A connection problem occurred when accessing
                      the underlying resource.                    
                </throws>
                <throws>
                    InstanceNotFoundException The underlying MBean is not
                      registered in the MBeanServer.                    
                </throws>
            </javadoc>
            <method name="createOtherConfigurationMBean" type="ScanDirConfigMXBean" line="277"/>
            <javadoc line="277">
                This method creates a new alternate {@link ScanDirConfigMXBean}.
                  &lt;p&gt;You will need to call {@link #setConfigurationMBeansetConfigurationMBean} if you
                  want this new {@link ScanDirConfigMXBean} to become the
                  current configuration MBean.
                  &lt;/p&gt;
                  &lt;p&gt;
                  This new {@link ScanDirConfigMXBean} will be unregistered automatically
                  by the {@code ScanManagerMXBean} when the {@code ScanManagerMXBean}is unregistered.
                  &lt;/p&gt;                
                <param>
                    name The short name for the new {@link ScanDirConfigMXBean}.
                      This name will be used in the ObjectName &lt;code&gt;name=&lt;/code&gt; key
                      of the new {@link ScanDirConfigMXBean}.                    
                </param>
                <param>
                    filename The path of the file from which the new {@link ScanDirConfigMXBean} can {@link ScanDirConfigMXBean#load load} or{@link ScanDirConfigMXBean#save save} its configuration data.
                      Note that even if the file exists and contain a valid
                      configuration, you will still need to call {@link ScanDirConfigMXBean#load load} to make the {@link ScanDirConfigMXBean} load its configuration data.                    
                </param>
                <throws>
                    IOException A connection problem occurred when accessing
                      the underlying resource.                    
                </throws>
                <throws>
                    JMException The MBeanServer failed to call the underlying MBean.                    
                </throws>
                <return>
                    A proxy to the created {@link ScanDirConfigMXBean}.                    
                </return>
            </javadoc>
        </interface>
    </source>