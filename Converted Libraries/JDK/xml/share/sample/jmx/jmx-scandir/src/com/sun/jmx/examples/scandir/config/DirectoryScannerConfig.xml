<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.examples.scandir.config">
        <import package="java.io.File"/>
        <import package="java.io.FileFilter"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.List"/>
        <import package="java.util.logging.Logger"/>
        <import package="javax.xml.bind.annotation.XmlAttribute"/>
        <import package="javax.xml.bind.annotation.XmlElement"/>
        <import package="javax.xml.bind.annotation.XmlElementRef"/>
        <import package="javax.xml.bind.annotation.XmlElementWrapper"/>
        <import package="javax.xml.bind.annotation.XmlList"/>
        <import package="javax.xml.bind.annotation.XmlRootElement"/>
        <class name="DirectoryScannerConfig" line="47">
            <comment line="61">
                A logger for this class.
                
                 private static final Logger LOG =
                        Logger.getLogger(DirectoryScannerConfig.class.getName());                
            </comment>
            <comment line="90">
                A short name for the Directory Scanner
                 This name is used for the value of the {@code name=} key in the
                 {@code DirectoryScannerMXBean} ObjectName.                
            </comment>
            <comment line="95">
                The root directory of the Directory Scanner                
            </comment>
            <comment line="98">
                List of filters identifying files that should be selected.
                 A file is selected if at least one filter matches.                
            </comment>
            <comment line="104">
                List of filters identifying files that should be excluded.
                 A file is excluded if at least one filter matches.                
            </comment>
            <comment line="111">
                The actions that this Directory Scanner should carry out when a
                 file is selected. Default is NOTIFY and LOGRESULT.                
            </comment>
            <comment line="358">
                Used for equality - see equals().                
            </comment>
            <javadoc line="47">
                The &lt;code&gt;DirectoryScannerConfig&lt;/code&gt; Java Bean is used to model
                  the configuration of a {@link com.sun.jmx.examples.scandir.DirectoryScannerMXBean}.
                  &lt;p&gt;
                  This class is annotated for XML binding.
                  &lt;/p&gt;                
                <author>
                    Sun Microsystems, 2006 - All rights reserved.                    
                </author>
            </javadoc>
            <declaration name="Action" type="enum" line="66"/>
            <javadoc line="66">
                This enumeration is used to model the actions that a {@link com.sun.jmx.examples.scandir.DirectoryScannerMXBeanDirectoryScannerMXBean} should take when a file matches its set
                  of matching criteria.                
            </javadoc>
            <scope line="72"/>
            <declaration name="name" type="String" line="92"/>
            <javadoc line="83">
                Indicates that the {@code DirectoryScannerMXBean} should
                  log the actions that were taken on the matching files.                
            </javadoc>
            <declaration name="rootDirectory" type="String" line="95"/>
            <declaration name="includeFiles" type="List&amp;lt;FileMatch&amp;gt;" line="100"/>
            <declaration name="excludeFiles" type="List&amp;lt;FileMatch&amp;gt;" line="106"/>
            <declaration name="actions" type="Action[]" line="113"/>
            <javadoc line="115">
                Creates a new instance of {@code DirectoryScannerConfig}.
                  We keep this empty constructor to make XML binding easier.
                  You shouldn&apos;t use this constructor directly:
                  use {@link #DirectoryScannerConfig(String)DirectoryScannerConfig(String name)} instead.                
                <deprecated>
                    &lt;p&gt;Tagged deprecated so that a compiler warning is issued.
                      Use {@link #DirectoryScannerConfig(String)DirectoryScannerConfig(String name)} instead.
                      &lt;/p&gt;                    
                </deprecated>
            </javadoc>
            <method name="DirectoryScannerConfig" type="constructor" line="126"/>
            <javadoc line="130">
                Creates a new instance of {@code DirectoryScannerConfig}.                
                <param>
                    name A short name for the Directory Scanner. This name is used for
                      the value of the {@code name=} key in the{@code DirectoryScannerMXBean} ObjectName.                    
                </param>
            </javadoc>
            <method name="DirectoryScannerConfig" type="constructor" line="136">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="141">
                Gets the root directory configured for that Directory Scanner.                
                <return>
                    the root directory at which the directory scanner should start
                      scanning.                    
                </return>
            </javadoc>
            <method name="getRootDirectory" type="String" line="147"/>
            <javadoc line="151">
                Configures a root directory for that Directory Scanner.                
                <param>
                    root The root directory at which the directory scanner should
                      start scanning.                    
                </param>
            </javadoc>
            <method name="setRootDirectory" type="void" line="156">
                <params>
                    <param name="root" type="String"/>
                </params>
            </method>
            <javadoc line="161">
                Gets the short name of this directory scanner.
                  &lt;p&gt;
                  This name is used for the value of the {@code name=} key in the{@code DirectoryScannerMXBean} ObjectName.
                  &lt;/p&gt;                
                <return>
                    the short name of this directory scanner.                    
                </return>
            </javadoc>
            <method name="getName" type="String" line="172"/>
            <javadoc line="176">
                Setter for property {@link #getName() name}.
                  Once set its value cannot change.                
                <param>
                    name New value of property name.                    
                </param>
                <throws>
                    IllegalArgumentException if {@code name} is already set to a
                      different non null value.                    
                </throws>
            </javadoc>
            <method name="setName" type="void" line="183">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="192">
                Getter for property includeFiles.
                  This is an array of filters identifying files that should be selected.
                  A file is selected if at least one filter matches.                
                <return>
                    Value of property includeFiles.                    
                </return>
            </javadoc>
            <method name="getIncludeFiles" type="FileMatch[]" line="201">
                <scope line="202"/>
            </method>
            <javadoc line="207">
                Adds a filter to the includeFiles property.
                  A file is selected if at least one filter matches.                
                <param>
                    include A filter identifying files that should be selected.                    
                </param>
            </javadoc>
            <method name="addIncludeFiles" type="void" line="212">
                <params>
                    <param name="include" type="FileMatch"/>
                </params>
                <scope line="215"/>
            </method>
            <javadoc line="220">
                Setter for property includeFiles.                
                <param>
                    includeFiles New value of property includeFiles.
                      This is an array of filters identifying files
                      that should be selected. A file is selected if at least
                      one filter matches.                    
                </param>
            </javadoc>
            <method name="setIncludeFiles" type="void" line="227">
                <params>
                    <param name="includeFiles" type="FileMatch[]"/>
                </params>
                <scope line="228"/>
            </method>
            <javadoc line="235">
                Getter for property excludeFiles.
                  This is an array of filters identifying files that should be excluded.
                  A file is excluded if at least one filter matches.                
                <return>
                    Value of property excludeFiles.                    
                </return>
            </javadoc>
            <method name="getExcludeFiles" type="FileMatch[]" line="244">
                <scope line="245"/>
            </method>
            <javadoc line="250">
                Setter for property excludeFiles.                
                <param>
                    excludeFiles New value of property excludeFiles.
                      This is an array of filters identifying files
                      that should be excluded. A file is excluded if at least
                      one filter matches.                    
                </param>
            </javadoc>
            <method name="setExcludeFiles" type="void" line="257">
                <params>
                    <param name="excludeFiles" type="FileMatch[]"/>
                </params>
                <scope line="258"/>
            </method>
            <javadoc line="265">
                Adds a filter to the excludeFiles property.
                  A file is excluded if at least one filter matches.                
                <param>
                    exclude A filter identifying files that should be excluded.                    
                </param>
            </javadoc>
            <method name="addExcludeFiles" type="void" line="270">
                <params>
                    <param name="exclude" type="FileMatch"/>
                </params>
                <scope line="273"/>
            </method>
            <javadoc line="278">
                Gets the list of actions that this Directory Scanner should carry
                  out when a file is selected. Default is NOTIFY and LOGRESULT.                
                <return>
                    The list of actions that this Directory Scanner should carry
                      out when a file is selected.                    
                </return>
            </javadoc>
            <method name="getActions" type="Action[]" line="287"/>
            <javadoc line="291">
                Sets the list of actions that this Directory Scanner should carry
                  out when a file is selected. Default is NOTIFY and LOGRESULT.                
                <param>
                    actions The list of actions that this Directory Scanner should
                      carry out when a file is selected.                    
                </param>
            </javadoc>
            <method name="setActions" type="void" line="298">
                <params>
                    <param name="actions" type="Action[]"/>
                </params>
            </method>
            <javadoc line="302">
                Builds a {@code FileFilter} from the {@link #getIncludeFilesincludeFiles} and {@link #getExcludeFiles excludeFiles} lists.
                  A file will be accepted if it is selected by at least one of
                  the filters in {@link #getIncludeFiles includeFiles}, and is
                  not excluded by any of the filters in {@link #getExcludeFiles excludeFiles}. If there&apos;s no filter in{@link #getIncludeFiles includeFiles}, then a file is accepted
                  simply if it is not excluded by any of the filters in {@link #getExcludeFiles excludeFiles}.                
                <return>
                    A new {@code FileFilter}  created from the current snapshot
                      of the {@link #getIncludeFilesincludeFiles} and {@link #getExcludeFiles excludeFiles} lists.
                      Later modification of these lists will not affect the
                      returned {@code FileFilter}.                    
                </return>
            </javadoc>
            <method name="buildFileFilter" type="FileFilter" line="319">
                <comment line="326">
                    If no include filter, all files are included.                    
                </comment>
                <comment line="329">
                    if one filter accepts it, file is included                    
                </comment>
                <comment line="332">
                    file is accepted, include it                    
                </comment>
                <comment line="339">
                    The file is in the include list. Let&apos;s see if it&apos;s not
                     in the exclude list...                    
                </comment>
                <comment line="344">
                    if one filter accepts it, file is excluded                    
                </comment>
                <comment line="347">
                    file is accepted, exclude it.                    
                </comment>
                <declaration name="ins" type="FileFilter[]" line="320"/>
                <declaration name="outs" type="FileFilter[]" line="321"/>
                <anonymous_class line="322">
                    <method name="accept" type="boolean" line="323">
                        <params>
                            <param name="f" type="File"/>
                        </params>
                        <comment line="326">
                            If no include filter, all files are included.                            
                        </comment>
                        <comment line="329">
                            if one filter accepts it, file is included                            
                        </comment>
                        <comment line="332">
                            file is accepted, include it                            
                        </comment>
                        <comment line="339">
                            The file is in the include list. Let&apos;s see if it&apos;s not
                             in the exclude list...                            
                        </comment>
                        <comment line="344">
                            if one filter accepts it, file is excluded                            
                        </comment>
                        <comment line="347">
                            file is accepted, exclude it.                            
                        </comment>
                        <declaration name="result" type="boolean" line="324"/>
                        <scope line="326">
                            <scope line="327"/>
                        </scope>
                        <scope line="341">
                            <scope line="342"/>
                        </scope>
                    </method>
                </anonymous_class>
                <declaration name="filter" type="FileFilter" line="322"/>
            </method>
            <method name="toArray" type="Object[]" line="358">
                <declaration name="thisconfig" type="Object[]" line="359"/>
            </method>
            <method name="equals" type="boolean" line="366">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <declaration name="other" type="DirectoryScannerConfig" line="369"/>
                <declaration name="thisconfig" type="Object[]" line="370"/>
                <declaration name="otherconfig" type="Object[]" line="371"/>
            </method>
            <method name="hashCode" type="int" line="376">
                <declaration name="key" type="String" line="377"/>
            </method>
        </class>
    </source>