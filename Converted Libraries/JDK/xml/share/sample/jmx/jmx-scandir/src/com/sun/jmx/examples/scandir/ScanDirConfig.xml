<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.examples.scandir">
        <import package="com.sun.jmx.examples.scandir.ScanManager.getNextSeqNumber"/>
        <import package="com.sun.jmx.examples.scandir.ScanDirConfigMXBean.SaveState"/>
        <import package="com.sun.jmx.examples.scandir.config.XmlConfigUtils"/>
        <import package="com.sun.jmx.examples.scandir.config.DirectoryScannerConfig"/>
        <import package="com.sun.jmx.examples.scandir.config.FileMatch"/>
        <import package="com.sun.jmx.examples.scandir.config.ScanManagerConfig"/>
        <import package="java.io.File"/>
        <import package="java.io.IOException"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.util.Date"/>
        <import package="java.util.logging.Level"/>
        <import package="java.util.logging.Logger"/>
        <import package="javax.management"/>
        <import package="javax.xml.bind.JAXBException"/>
        <class name="ScanDirConfig" line="50">
            <extends class="NotificationBroadcasterSupport"/>
            <comment line="104">
                We will emit a notification when the save state of this object
                 chenges. We use directly the base notification class, with a
                 notification type that indicates the new state at which the
                 object has arrived.
                
                 All these notification types will have the same prefix, which is
                 &apos;com.sun.jmx.examples.scandir.config&apos;.                
            </comment>
            <comment line="135">
                The array of MBeanNotificationInfo that will be exposed in the
                 ScanDirConfigMXBean MBeanInfo.
                 We will pass this array to the NotificationBroadcasterSupport
                 constructor.                
            </comment>
            <comment line="155">
                The ScanDirConfigMXBean configuration data.                
            </comment>
            <comment line="158">
                The name of the configuration file                
            </comment>
            <comment line="161">
                The name of this configuration. This is usually both equal to
                 config.getName() and objectName.getKeyProperty(name).                
            </comment>
            <comment line="165">
                This object save state. CREATED is the initial state.                
            </comment>
            <comment line="210">
                see ScanDirConfigMXBean                
            </comment>
            <comment line="225">
                see ScanDirConfigMXBean                
            </comment>
            <comment line="236">
                see ScanDirConfigMXBean                
            </comment>
            <comment line="244">
                sends a notification indicating the new save state.                
            </comment>
            <comment line="331">
                see ScanDirConfigMXBean                
            </comment>
            <comment line="336">
                see ScanDirConfigMXBean                
            </comment>
            <comment line="353">
                see ScanDirConfigMXBean                
            </comment>
            <comment line="378">
                see ScanDirConfigMXBean                
            </comment>
            <comment line="392">
                see ScanDirConfigMXBean                
            </comment>
            <comment line="397">
                These methods are used by ScanManager to guess a configuration name from
                 a configuration filename.                
            </comment>
            <comment line="428">
                Set by preRegister()                
            </comment>
            <implements interface="ScanDirConfigMXBean"/>
            <implements interface="MBeanRegistration"/>
            <javadoc line="50">
                &lt;p&gt;The &lt;code&gt;ScanDirConfig&lt;/code&gt; MBean is in charge of the
                  &lt;i&gt;scandir&lt;/i&gt; application configuration.
                  &lt;/p&gt;
                  &lt;p&gt;The &lt;code&gt;ScanDirConfig&lt;/code&gt; MBean is able to
                  load and save the &lt;i&gt;scandir&lt;/i&gt; application configuration to and from an
                  XML file.
                  &lt;/p&gt;
                  &lt;p&gt;
                  It will let you also interactively modify that configuration, which you
                  can later save to the file, by calling {@link #save}, or discard, by
                  reloading the file without saving - see {@link #load}.
                  &lt;/p&gt;
                  &lt;p&gt;
                  There can be as many &lt;code&gt;ScanDirConfigMXBean&lt;/code&gt; registered
                  in the MBeanServer as you like, but only one of them will be identified as
                  the current configuration of the {@link ScanManagerMXBean}.
                  You can switch to another configuration by calling {@link ScanManagerMXBean#setConfigurationMBeanScanManagerMXBean.setConfigurationMBean}.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Once the current configuration has been loaded (by calling {@link #load})
                  or modified (by calling one of {@link #addDirectoryScanneraddDirectoryScanner}, {@link #removeDirectoryScanner removeDirectoryScanner}or {@link #setConfiguration setConfiguration}) it can be pushed
                  to the {@link ScanManagerMXBean} by calling {@link ScanManagerMXBean#applyConfigurationScanManagerMXBean.applyConfiguration(true)} -
                  &lt;code&gt;true&lt;/code&gt; means that we apply the configuration from memory,
                  without first reloading the file.
                  &lt;/p&gt;
                  &lt;p&gt;
                  The &lt;code&gt;ScanDirConfig&lt;/code&gt; uses the XML annotated Java Beans defined
                  in the {@link com.sun.jmx.examples.scandir.config} package.
                  &lt;/p&gt;
                  &lt;p&gt;
                  &lt;u&gt;Note:&lt;/u&gt; The &lt;code&gt;ScanDirConfig&lt;/code&gt; should probably use{@code java.nio.channels.FileLock} and lock its configuration file so that
                  two &lt;code&gt;ScanDirConfig&lt;/code&gt; object do not share the same file, but it
                  doesn&apos;t. Feel free to improve the application in that way.
                  &lt;/p&gt;                
                <author>
                    Sun Microsystems, 2006 - All rights reserved.                    
                </author>
            </javadoc>
            <declaration name="LOG" type="Logger" line="97"/>
            <javadoc line="97">
                A logger for this class.                
            </javadoc>
            <declaration name="NOTIFICATION_PREFIX" type="String" line="111"/>
            <declaration name="NOTIFICATION_SAVED" type="String" line="114"/>
            <javadoc line="114">
                The &lt;i&gt;com.sun.jmx.examples.scandir.config.saved&lt;/i&gt; notification
                  indicates that the configuration data was saved.                
            </javadoc>
            <declaration name="NOTIFICATION_LOADED" type="String" line="120"/>
            <javadoc line="120">
                The &lt;i&gt;com.sun.jmx.examples.scandir.config.loaded&lt;/i&gt; notification
                  indicates that the configuration data was loaded.                
            </javadoc>
            <declaration name="NOTIFICATION_MODIFIED" type="String" line="127"/>
            <javadoc line="127">
                The &lt;i&gt;com.sun.jmx.examples.scandir.config.modified&lt;/i&gt; notification
                  indicates that the configuration data was modified.                
            </javadoc>
            <declaration name="NOTIFICATION_INFO" type="MBeanNotificationInfo[]" line="139"/>
            <declaration name="config" type="ScanManagerConfig" line="155"/>
            <declaration name="filename" type="String" line="158"/>
            <declaration name="configname" type="String" line="162"/>
            <declaration name="status" type="SaveState" line="166"/>
            <javadoc line="168">
                Creates a new {@link ScanDirConfigMXBean}.
                  &lt;p&gt;{@code ScanDirConfigMXBean} can be created by the {@link ScanManagerMXBean}, or directly by a remote client, using{@code createMBean} or {@code registerMBean}.
                  &lt;/p&gt;
                  &lt;p&gt;{@code ScanDirConfigMXBean} created by the {@link ScanManagerMXBean} will be unregistered by the{@code ScanManagerMXBean}. {@code ScanDirConfigMXBean} created
                  directly by a remote client will not be unregistered by the{@code ScanManagerMXBean} - this will remain to the responsibility of
                  the code/client that created them.
                  &lt;/p&gt;
                  &lt;p&gt;This object is created empty, you should call load() if you want it
                  to load its data from the configuration file.
                  &lt;/p&gt;                
                <param>
                    filename The configuration file used by this MBean.
                      Can be null (in which case load() and save() will fail).
                      Can point to a file that does not exists yet (in which case
                      load() will fail if called before save(), and save() will
                      attempt to create that file). Can point to an existing file,
                      in which case load() will load that file and save() will save
                      to that file.                    
                </param>
            </javadoc>
            <method name="ScanDirConfig" type="constructor" line="193">
                <params>
                    <param name="filename" type="String"/>
                </params>
            </method>
            <javadoc line="197">
                Create a new ScanDirConfig MBean with an initial configuration.                
                <param>
                    filename The name of the configuration file.                    
                </param>
                <param>
                    initialConfig an initial configuration.                    
                </param>
            </javadoc>
            <method name="ScanDirConfig" type="constructor" line="202">
                <params>
                    <param name="filename" type="String"/>
                    <param name="initialConfig" type="ScanManagerConfig"/>
                </params>
            </method>
            <method name="load" type="void" line="210">
                <scope line="214"/>
            </method>
            <method name="save" type="void" line="225">
                <scope line="228"/>
            </method>
            <method name="getConfiguration" type="ScanManagerConfig" line="236">
                <scope line="237"/>
            </method>
            <method name="sendNotification" type="void" line="244">
                <params>
                    <param name="type" type="String"/>
                </params>
                <declaration name="source" type="Object" line="245"/>
                <declaration name="n" type="Notification" line="246"/>
            </method>
            <javadoc line="254">
                Allows the MBean to perform any operations it needs before being
                  registered in the MBean server. If the name of the MBean is not
                  specified, the MBean can provide a name for its registration. If
                  any exception is raised, the MBean will not be registered in the
                  MBean server.                
                <param>
                    server The MBean server in which the MBean will be registered.                    
                </param>
                <param>
                    name The object name of the MBean. This name is null if the
                      name parameter to one of the createMBean or registerMBean methods in
                      the MBeanServer interface is null. In that case, this method will
                      try to guess its MBean name by examining its configuration data.
                      If its configuration data is null (nothing was provided in the
                      constructor) or doesn&apos;t contain a name, this method returns {@code null},
                      and registration will fail.
                      &lt;p&gt;
                      Otherwise, if {@code name} wasn&apos;t {@code null} or if a default name could
                      be constructed, the name of the configuration will be set to
                      the value of the ObjectName&apos;s {@code name=} key, and the configuration
                      data will always be renamed to reflect this change.
                      &lt;/p&gt;                    
                </param>
                <return>
                    The name under which the MBean is to be registered.                    
                </return>
                <throws>
                    Exception This exception will be caught by the MBean server and
                      re-thrown as an MBeanRegistrationException.                    
                </throws>
            </javadoc>
            <method name="preRegister" type="ObjectName" line="280">
                <params>
                    <param name="server" type="MBeanServer"/>
                    <param name="name" type="ObjectName"/>
                </params>
                <scope line="281"/>
                <scope line="289"/>
            </method>
            <javadoc line="297">
                Allows the MBean to perform any operations needed after having
                  been registered in the MBean server or after the registration has
                  failed.
                  &lt;p&gt;This implementation does nothing&lt;/p&gt;                
                <param>
                    registrationDone Indicates whether or not the MBean has been
                      successfully registered in the MBean server. The value false means
                      that the registration has failed.                    
                </param>
            </javadoc>
            <method name="postRegister" type="void" line="306">
                <params>
                    <param name="registrationDone" type="Boolean"/>
                </params>
                <comment line="308">
                    Nothing to do here.                    
                </comment>
            </method>
            <javadoc line="310">
                Allows the MBean to perform any operations it needs before being
                  unregistered by the MBean server.
                  &lt;p&gt;This implementation does nothing&lt;/p&gt;                
                <throws>
                    Exception This exception will be caught by the MBean server and
                      re-thrown as an MBeanRegistrationException.                    
                </throws>
            </javadoc>
            <method name="preDeregister" type="void" line="317">
                <comment line="319">
                    Nothing to do here.                    
                </comment>
            </method>
            <javadoc line="321">
                Allows the MBean to perform any operations needed after having been
                  unregistered in the MBean server.
                  &lt;p&gt;This implementation does nothing&lt;/p&gt;                
            </javadoc>
            <method name="postDeregister" type="void" line="326">
                <comment line="328">
                    Nothing to do here.                    
                </comment>
            </method>
            <method name="getConfigFilename" type="String" line="331"/>
            <method name="setConfiguration" type="void" line="336">
                <params>
                    <param name="config" type="ScanManagerConfig"/>
                </params>
                <scope line="337">
                    <scope line="338"/>
                </scope>
            </method>
            <method name="addDirectoryScanner" type="DirectoryScannerConfig" line="355">
                <params>
                    <param name="name" type="String"/>
                    <param name="dir" type="String"/>
                    <param name="filePattern" type="String"/>
                    <param name="sizeExceedsMaxBytes" type="long"/>
                    <param name="sinceLastModified" type="long"/>
                </params>
                <declaration name="scanner" type="DirectoryScannerConfig" line="356"/>
                <scope line="359">
                    <declaration name="filter" type="FileMatch" line="360"/>
                </scope>
                <scope line="368"/>
            </method>
            <method name="removeDirectoryScanner" type="DirectoryScannerConfig" line="379">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="scanner" type="DirectoryScannerConfig" line="380"/>
                <scope line="381"/>
            </method>
            <method name="getSaveState" type="SaveState" line="392"/>
            <declaration name="DEFAULT" type="String" line="399"/>
            <method name="getBasename" type="String" line="401">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="dot" type="int" line="402"/>
            </method>
            <method name="guessConfigName" type="String" line="408">
                <params>
                    <param name="configFileName" type="String"/>
                    <param name="defaultFile" type="String"/>
                </params>
                <scope line="409">
                    <declaration name="f" type="File" line="411"/>
                    <scope line="412">
                        <declaration name="confname" type="String" line="413"/>
                    </scope>
                    <declaration name="f2" type="File" line="416"/>
                    <declaration name="guess" type="String" line="418"/>
                </scope>
                <scope line="422"/>
            </method>
            <declaration name="mbeanServer" type="MBeanServer" line="428"/>
            <declaration name="objectName" type="ObjectName" line="429"/>
        </class>
    </source>