<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.examples.scandir">
        <import package="com.sun.jmx.examples.scandir.ScanManager.getNextSeqNumber"/>
        <import package="com.sun.jmx.examples.scandir.config.ResultLogConfig"/>
        <import package="com.sun.jmx.examples.scandir.config.XmlConfigUtils"/>
        <import package="com.sun.jmx.examples.scandir.config.ResultRecord"/>
        <import package="java.io.File"/>
        <import package="java.io.FileOutputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.OutputStream"/>
        <import package="java.util.Collections"/>
        <import package="java.util.LinkedList"/>
        <import package="java.util.List"/>
        <import package="java.util.logging.Logger"/>
        <import package="javax.management.MBeanNotificationInfo"/>
        <import package="javax.management.MBeanRegistration"/>
        <import package="javax.management.MBeanServer"/>
        <import package="javax.management.Notification"/>
        <import package="javax.management.NotificationBroadcasterSupport"/>
        <import package="javax.management.ObjectName"/>
        <import package="javax.xml.bind.JAXBException"/>
        <class name="ResultLogManager" line="54">
            <extends class="NotificationBroadcasterSupport"/>
            <comment line="88">
                The memory log                
            </comment>
            <comment line="92">
                Whether the memory log capacity was reached. In that case every
                 new entry triggers the deletion of the eldest one.                
            </comment>
            <comment line="97">
                The maximum number of record that the memory log can
                 contain.                
            </comment>
            <comment line="102">
                The maximum number of record that the ResultLogManager can
                 log in the log file before creating a new file.                
            </comment>
            <comment line="107">
                The current log file.                
            </comment>
            <comment line="111">
                The OutputStream of the current log file.                
            </comment>
            <comment line="115">
                number of record that this object has logged in the log file
                 since the log file was created. Creating a new file or clearing
                 the log file reset this value to &apos;0&apos;                
            </comment>
            <comment line="121">
                The ResultLogManager config - modified whenever
                 ScanManager.applyConfiguration is called.                
            </comment>
            <comment line="291">
                see ResultLogManagerMXBean                
            </comment>
            <comment line="298">
                see ResultLogManagerMXBean                
            </comment>
            <comment line="303">
                see ResultLogManagerMXBean                
            </comment>
            <comment line="308">
                see ResultLogManagerMXBean                
            </comment>
            <comment line="318">
                see ResultLogManagerMXBean                
            </comment>
            <comment line="328">
                see ResultLogManagerMXBean                
            </comment>
            <comment line="333">
                see ResultLogManagerMXBean                
            </comment>
            <comment line="338">
                see ResultLogManagerMXBean                
            </comment>
            <comment line="346">
                see ResultLogManagerMXBean                
            </comment>
            <comment line="351">
                see ResultLogManagerMXBean                
            </comment>
            <comment line="357">
                Clear the memory log, sends a notification indicating that
                 the memory log was cleared.                
            </comment>
            <comment line="370">
                Clears the log file.                
            </comment>
            <comment line="377">
                Log a record to the memory log. Send a notification if the
                 maximum capacity of the memory log is reached.                
            </comment>
            <comment line="395">
                Log a record to the memory log. Send a notification if the
                 maximum capacity of the memory log is reached.                
            </comment>
            <comment line="481">
                Return the name of the log file, or null if logging to file is
                 disabled.                
            </comment>
            <comment line="491">
                This method is be called by the ScanManagerMXBean when a configuration
                 is applied.                
            </comment>
            <comment line="512">
                This method is called by the ScanManagerMXBean when
                 applyCurrentResultLogConfig() is called.                
            </comment>
            <comment line="520">
                Set by preRegister().                
            </comment>
            <implements interface="ResultLogManagerMXBean"/>
            <implements interface="MBeanRegistration"/>
            <javadoc line="54">
                The &lt;code&gt;ResultLogManager&lt;/code&gt; is in charge of managing result logs.{@link DirectoryScanner DirectoryScanners} can be configured to log a{@link ResultRecord} whenever they take action upon a file that
                  matches their set of matching criteria.
                  The &lt;code&gt;ResultLogManagerMXBean&lt;/code&gt; is responsible for storing these
                  results in its result logs.
                  &lt;p&gt;The &lt;code&gt;ResultLogManagerMXBean&lt;/code&gt; can be configured to log
                  these records to a flat file, or into a log held in memory, or both.
                  Both logs (file and memory) can be configured with a maximum capacity.
                  &lt;br&gt;When the maximum capacity of the memory log is reached - its first
                  entry (i.e. its eldest entry) is removed to make place for the latest.
                  &lt;br&gt;When the maximum capacity of the file log is reached, the file is
                  renamed by appending a tilde &apos;~&apos; to its name and a new result log is created.                
                <author>
                    Sun Microsystems, 2006 - All rights reserved.                    
                </author>
            </javadoc>
            <declaration name="RESULT_LOG_MANAGER_NAME" type="ObjectName" line="75"/>
            <javadoc line="75">
                The default singleton name of the {@link ResultLogManagerMXBean}.                
            </javadoc>
            <declaration name="LOG" type="Logger" line="81"/>
            <javadoc line="81">
                A logger for this class.                
            </javadoc>
            <declaration name="memoryLog" type="List&amp;lt;ResultRecord&amp;gt;" line="89"/>
            <declaration name="memCapacityReached" type="boolean" line="94"/>
            <declaration name="memCapacity" type="int" line="99"/>
            <declaration name="fileCapacity" type="long" line="104"/>
            <declaration name="logFile" type="File" line="108"/>
            <declaration name="logStream" type="OutputStream" line="112"/>
            <declaration name="logCount" type="long" line="118"/>
            <declaration name="config" type="ResultLogConfig" line="123"/>
            <javadoc line="125">
                Create a new ResultLogManagerMXBean. This constructor is package
                  protected: only the {@link ScanManager} can create a
                  &lt;code&gt;ResultLogManager&lt;/code&gt;.                
            </javadoc>
            <method name="ResultLogManager" type="constructor" line="130">
                <comment line="132">
                    Instantiate the memory log - override the add() method so that
                     it removes the head of the list when the maximum capacity is
                     reached. Note that add() is the only method we will be calling,
                     otherwise we would have to override all the other flavors
                     of adding methods. Note also that this implies that the memoryLog
                     will *always* remain encapsulated in this object and is *never*
                     handed over (otherwise we wouldn&apos;t be able to ensure that
                     add() is the only method ever called to add a record).                    
                </comment>
                <comment line="153">
                    default memory capacity                    
                </comment>
                <comment line="156">
                    default file capacity: 0 means infinite ;-)                    
                </comment>
                <comment line="159">
                    by default logging to file is disabled.                    
                </comment>
                <comment line="162">
                    Until the ScanManager apply a new configuration, we&apos;re going to
                     work with a default ResultLogConfig object.                    
                </comment>
                <anonymous_class line="141">
                    <method name="add" type="boolean" line="142">
                        <params>
                            <param name="e" type="ResultRecord"/>
                        </params>
                        <declaration name="max" type="int" line="143"/>
                        <scope line="144"/>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="170">
                Allows the MBean to perform any operations it needs before being
                  registered in the MBean server.
                  &lt;p&gt;If the name of the MBean is not
                  specified, the MBean can provide a name for its registration. If
                  any exception is raised, the MBean will not be registered in the
                  MBean server.&lt;/p&gt;
                  &lt;p&gt;The {@code ResultLogManager} uses this method to supply its own
                  default singleton ObjectName (if &lt;var&gt;name&lt;/var&gt; parameter is null).                
                <param>
                    server The MBean server in which the MBean will be registered.                    
                </param>
                <param>
                    name The object name of the MBean. This name is null if the
                      name parameter to one of the createMBean or registerMBean methods in
                      the MBeanServer interface is null. In that case, this method must
                      return a non-null ObjectName for the new MBean.                    
                </param>
                <return>
                    The name under which the MBean is to be registered. This value
                      must not be null. If the name parameter is not null, it will usually
                      but not necessarily be the returned value.                    
                </return>
                <throws>
                    Exception This exception will be caught by the MBean server and
                      re-thrown as an MBeanRegistrationException.                    
                </throws>
            </javadoc>
            <method name="preRegister" type="ObjectName" line="191">
                <params>
                    <param name="server" type="MBeanServer"/>
                    <param name="name" type="ObjectName"/>
                </params>
            </method>
            <javadoc line="199">
                Allows the MBean to perform any operations needed after having
                  been registered in the MBean server or after the registration has
                  failed.
                  &lt;p&gt;This implementation does nothing.&lt;/p&gt;                
                <param>
                    registrationDone Indicates whether or not the MBean has been
                      successfully registered in the MBean server. The value false means
                      that the registration has failed.                    
                </param>
            </javadoc>
            <method name="postRegister" type="void" line="208">
                <params>
                    <param name="registrationDone" type="Boolean"/>
                </params>
                <comment line="210">
                    Don&apos;t need to do anything here.                    
                </comment>
            </method>
            <javadoc line="212">
                Allows the MBean to perform any operations it needs before being
                  unregistered by the MBean server.
                  &lt;p&gt;This implementation does nothing.&lt;/p&gt;                
                <throws>
                    Exception This exception will be caught by the MBean server and
                      re-thrown as an MBeanRegistrationException.                    
                </throws>
            </javadoc>
            <method name="preDeregister" type="void" line="219">
                <comment line="221">
                    Don&apos;t need to do anything here.                    
                </comment>
            </method>
            <javadoc line="223">
                Allows the MBean to perform any operations needed after having been
                  unregistered in the MBean server.
                  &lt;p&gt;Closes the log file stream, if it is still open.&lt;/p&gt;                
            </javadoc>
            <method name="postDeregister" type="void" line="228">
                <scope line="229">
                    <scope line="230">
                        <scope line="231"/>
                    </scope>
                </scope>
                <scope line="238"/>
            </method>
            <javadoc line="243">
                Create a new empty log file from the given basename, renaming
                  previously existing file by appending &apos;~&apos; to its name.                
            </javadoc>
            <method name="createNewLogFile" type="File" line="247">
                <params>
                    <param name="basename" type="String"/>
                </params>
            </method>
            <javadoc line="251">
                Check whether a new log file should be created.
                  If a new file needs to be created, creates it, renaming
                  previously existing file by appending &apos;~&apos; to its name.
                  Also reset the log count and file capacity.
                  Sends a notification indicating that the log file was changed.
                  Returns the new log stream;
                  Creation of a new file can be forced by passing force=true.                
            </javadoc>
            <method name="checkLogFile" type="OutputStream" line="262">
                <params>
                    <param name="basename" type="String"/>
                    <param name="maxRecords" type="long"/>
                    <param name="force" type="boolean"/>
                </params>
                <comment line="270">
                    First close the stream. On some platforms you cannot rename
                     a file that has open streams...                    
                </comment>
                <declaration name="newStream" type="OutputStream" line="263"/>
                <scope line="264">
                    <declaration name="oldStream" type="OutputStream" line="267"/>
                    <scope line="272"/>
                    <declaration name="newFile" type="File" line="276"/>
                </scope>
            </method>
            <method name="log" type="void" line="292">
                <params>
                    <param name="record" type="ResultRecord"/>
                </params>
            </method>
            <method name="getMemoryLog" type="ResultRecord[]" line="298"/>
            <method name="getMemoryLogCapacity" type="int" line="303"/>
            <method name="setMemoryLogCapacity" type="void" line="308">
                <params>
                    <param name="maxRecords" type="int"/>
                </params>
                <scope line="309"/>
            </method>
            <method name="setLogFileCapacity" type="void" line="319">
                <params>
                    <param name="maxRecords" type="long"/>
                </params>
                <scope line="320"/>
            </method>
            <method name="getLogFileCapacity" type="long" line="328"/>
            <method name="getLoggedCount" type="long" line="333"/>
            <method name="newLogFile" type="void" line="339">
                <params>
                    <param name="logname" type="String"/>
                    <param name="maxRecord" type="long"/>
                </params>
            </method>
            <method name="getLogFileName" type="String" line="346"/>
            <method name="clearLogs" type="void" line="351"/>
            <method name="clearMemoryLog" type="void" line="359">
                <scope line="360"/>
            </method>
            <method name="clearLogFile" type="void" line="371">
                <comment line="373">
                    simply force the creation of a new log file.                    
                </comment>
            </method>
            <method name="logToMemory" type="void" line="379">
                <params>
                    <param name="record" type="ResultRecord"/>
                </params>
                <declaration name="before" type="boolean" line="381"/>
                <declaration name="after" type="boolean" line="382"/>
                <scope line="383"/>
            </method>
            <method name="logToFile" type="void" line="397">
                <params>
                    <param name="record" type="ResultRecord"/>
                </params>
                <comment line="407">
                    Get the stream into which we should log.                    
                </comment>
                <comment line="411">
                    logging to file now disabled - too bad.                    
                </comment>
                <comment line="418">
                    don&apos;t increment logCount if we were not logging in logStream.                    
                </comment>
                <declaration name="basename" type="String" line="398"/>
                <declaration name="maxRecords" type="long" line="399"/>
                <scope line="400"/>
                <declaration name="stream" type="OutputStream" line="407"/>
                <scope line="413">
                    <scope line="414"/>
                    <scope line="419">
                        <declaration name="iae" type="IllegalArgumentException" line="420"/>
                    </scope>
                </scope>
            </method>
            <declaration name="LOG_FILE_CHANGED" type="String" line="428"/>
            <javadoc line="428">
                The notification type which indicates that the log file was switched:
                  &lt;i&gt;com.sun.jmx.examples.scandir.log.file.switched&lt;/i&gt;.
                  The message contains the name of the new file (or null if log to file
                  is now disabled).                
            </javadoc>
            <declaration name="MEMORY_LOG_MAX_CAPACITY" type="String" line="437"/>
            <javadoc line="437">
                The notification type which indicates that the memory log capacity has
                  been reached:
                  &lt;i&gt;com.sun.jmx.examples.scandir.log.memory.full&lt;/i&gt;.                
            </javadoc>
            <declaration name="MEMORY_LOG_CLEARED" type="String" line="445"/>
            <javadoc line="445">
                The notification type which indicates that the memory log was
                  cleared:
                  &lt;i&gt;com.sun.jmx.examples.scandir.log.memory.cleared&lt;/i&gt;.                
            </javadoc>
            <javadoc line="453">
                This MBean emits three kind of notifications:
                  &lt;pre&gt;
                  &lt;i&gt;com.sun.jmx.examples.scandir.log.file.switched&lt;/i&gt;
                  &lt;i&gt;com.sun.jmx.examples.scandir.log.memory.full&lt;/i&gt;
                  &lt;i&gt;com.sun.jmx.examples.scandir.log.memory.cleared&lt;/i&gt;
                  &lt;/pre&gt;                
            </javadoc>
            <method name="getNotificationInfo" type="MBeanNotificationInfo[]" line="461"/>
            <method name="getLogFileName" type="String" line="482">
                <params>
                    <param name="absolute" type="boolean"/>
                </params>
                <scope line="483"/>
            </method>
            <method name="setConfig" type="void" line="493">
                <params>
                    <param name="logConfigBean" type="ResultLogConfig"/>
                </params>
                <scope line="496"/>
                <declaration name="filename" type="String" line="500"/>
                <declaration name="logname" type="String" line="501"/>
                <scope line="503"/>
                <scope line="506"/>
            </method>
            <method name="getConfig" type="ResultLogConfig" line="514"/>
            <declaration name="mbeanServer" type="MBeanServer" line="520"/>
            <declaration name="objectName" type="ObjectName" line="521"/>
        </class>
    </source>