<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.jmx.examples.scandir.config">
        <import package="java.io.ByteArrayInputStream"/>
        <import package="java.io.ByteArrayOutputStream"/>
        <import package="java.io.File"/>
        <import package="java.io.FileOutputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.util.logging.Logger"/>
        <import package="javax.xml.bind.JAXBContext"/>
        <import package="javax.xml.bind.JAXBException"/>
        <import package="javax.xml.bind.Marshaller"/>
        <import package="javax.xml.bind.Unmarshaller"/>
        <class name="XmlConfigUtils" line="47">
            <comment line="69">
                Our JAXBContext.                
            </comment>
            <comment line="72">
                The file name of the XML file in which an instance of this object
                 will read and write XML data.                
            </comment>
            <comment line="284">
                Creates a JAXB Unmarshaller.                
            </comment>
            <comment line="289">
                Creates a JAXB Marshaller - for nicely XML formatted output.                
            </comment>
            <comment line="296">
                Creates a JAXBContext if needed, and returns it.
                 The JAXBContext instance we create will be able to handle the
                 ScanManagerConfig and ResultRecord classes, plus all the property
                 classes they reference (DirectoryScannerBean etc...).                
            </comment>
            <comment line="309">
                Creates a new XML temporary file called &lt;basename&gt;.new
                 This method is used to implement atomic writing to file.
                 The usual sequence is:
                
                 Final tmp = newXmlTmpFile(basename);
                 boolean failed = true;
                 try {
                      ... write to &apos;tmp&apos; ...
                       no exception: set failed=false for finaly {} block.
                      failed = false;
                 } finally
                       failed==true means there was an exception and
                       commit won&apos;t be called...
                      if (failed==true) tmp.delete();
                 }
                 commit(tmp,basename)                
            </comment>
            <comment line="348">
                Commit the temporary file by renaming &lt;basename&gt; to &lt;baesname&gt;~
                 and tmpFile to &lt;basename&gt;.                
            </comment>
            <javadoc line="47">
                The class XmlConfigUtils is used to deal with XML serialization
                  and XML files.                
                <author>
                    Sun Microsystems, 2006 - All rights reserved.                    
                </author>
            </javadoc>
            <declaration name="NAMESPACE" type="String" line="55"/>
            <javadoc line="55">
                A URI for our XML configuration namespace. This doesn&apos;t start with
                  http:// because we are not going to publish this private schema
                  anywhere.                
            </javadoc>
            <declaration name="LOG" type="Logger" line="62"/>
            <javadoc line="62">
                A logger for this class.                
            </javadoc>
            <declaration name="context" type="JAXBContext" line="69"/>
            <declaration name="file" type="String" line="73"/>
            <javadoc line="75">
                Creates a new instance of XmlConfigUtils.                
                <param>
                    file The file name of the XML file in which an instance of this
                      object will read and write XML data.                    
                </param>
            </javadoc>
            <method name="XmlConfigUtils" type="constructor" line="80">
                <params>
                    <param name="file" type="String"/>
                </params>
            </method>
            <javadoc line="84">
                Write the given bean to the XML file.
                  &lt;p&gt;
                  Performs an atomic write, first writing in {@code &lt;file&gt;.new}, then
                  renaming {@code &lt;file&gt;} to {@code &lt;file&gt;~}, then renaming
                  renaming {@code &lt;file&gt;.new} to {@code &lt;file&gt;}.
                  &lt;/p&gt;                
                <param>
                    bean The configuration to write in the XML file.                    
                </param>
                <throws>
                    IOException if write to file failed.                    
                </throws>
            </javadoc>
            <method name="writeToFile" type="void" line="95">
                <params>
                    <param name="bean" type="ScanManagerConfig"/>
                </params>
                <comment line="98">
                    Creates a new file named &lt;file&gt;.new                    
                </comment>
                <comment line="104">
                    writes to &lt;file&gt;.new                    
                </comment>
                <comment line="107">
                    no exception: set failed=false for finaly {} block.                    
                </comment>
                <comment line="111">
                    An exception was raised: delete temporary file.                    
                </comment>
                <comment line="115">
                    rename &lt;file&gt; to &lt;file&gt;~ and &lt;file&gt;.new to &lt;file&gt;                    
                </comment>
                <declaration name="f" type="File" line="98"/>
                <scope line="99">
                    <declaration name="out" type="FileOutputStream" line="100"/>
                    <declaration name="failed" type="boolean" line="101"/>
                    <scope line="102"/>
                    <scope line="108"/>
                </scope>
                <scope line="116">
                    <declaration name="io" type="IOException" line="117"/>
                </scope>
            </method>
            <javadoc line="124">
                Creates an XML string representation of the given bean.                
                <throws>
                    IllegalArgumentException if the bean class is not known by the
                      underlying XMLbinding context.                    
                </throws>
                <return>
                    An XML string representation of the given bean.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="130">
                <params>
                    <param name="bean" type="Object"/>
                </params>
                <scope line="131">
                    <declaration name="baos" type="ByteArrayOutputStream" line="132"/>
                    <declaration name="m" type="Marshaller" line="133"/>
                </scope>
                <scope line="137">
                    <declaration name="iae" type="IllegalArgumentException" line="138"/>
                </scope>
            </method>
            <javadoc line="145">
                Creates an XML clone of the given bean.
                  &lt;p&gt;
                  In other words, this method XML-serializes the given bean, and
                  XML-deserializes a copy of that bean.
                  &lt;/p&gt;                
                <return>
                    A deep-clone of the given bean.                    
                </return>
                <throws>
                    IllegalArgumentException if the bean class is not known by the
                      underlying XML binding context.                    
                </throws>
                <param>
                    bean The bean to clone.                    
                </param>
            </javadoc>
            <method name="xmlClone" type="ScanManagerConfig" line="156">
                <params>
                    <param name="bean" type="ScanManagerConfig"/>
                </params>
                <declaration name="clone" type="Object" line="157"/>
            </method>
            <javadoc line="161">
                Creates an XML clone of the given bean.
                  &lt;p&gt;
                  In other words, this method XML-serializes the given bean, and
                  XML-deserializes a copy of that bean.
                  &lt;/p&gt;                
                <throws>
                    IllegalArgumentException if the bean class is not known by the
                      underlying XML binding context.                    
                </throws>
                <return>
                    A deep-clone of the given bean.                    
                </return>
            </javadoc>
            <method name="copy" type="Object" line="171">
                <params>
                    <param name="bean" type="Object"/>
                </params>
                <scope line="172">
                    <declaration name="baos" type="ByteArrayOutputStream" line="173"/>
                    <declaration name="m" type="Marshaller" line="174"/>
                    <declaration name="bais" type="ByteArrayInputStream" line="176"/>
                </scope>
                <scope line="179">
                    <declaration name="iae" type="IllegalArgumentException" line="180"/>
                </scope>
            </method>
            <javadoc line="186">
                Creates an XML clone of the given bean.
                  &lt;p&gt;
                  In other words, this method XML-serializes the given bean, and
                  XML-deserializes a copy of that bean.
                  &lt;/p&gt;                
                <return>
                    A deep-clone of the given bean.                    
                </return>
                <throws>
                    IllegalArgumentException if the bean class is not known by the
                      underlying XML binding context.                    
                </throws>
                <param>
                    bean The bean to clone.                    
                </param>
            </javadoc>
            <method name="xmlClone" type="DirectoryScannerConfig" line="197">
                <params>
                    <param name="bean" type="DirectoryScannerConfig"/>
                </params>
                <declaration name="clone" type="Object" line="198"/>
            </method>
            <javadoc line="202">
                Reads the configuration from the XML configuration file.                
                <throws>
                    IOException if it fails to read the configuration.                    
                </throws>
                <return>
                    A {@code ScanManagerConfig} bean read from the
                      XML configuration file.                    
                </return>
            </javadoc>
            <method name="readFromFile" type="ScanManagerConfig" line="208">
                <declaration name="f" type="File" line="209"/>
                <scope line="214"/>
                <scope line="216">
                    <declaration name="io" type="IOException" line="217"/>
                </scope>
            </method>
            <javadoc line="224">
                Reads the configuration from the given XML configuration file.                
                <param>
                    f the file to read from.                    
                </param>
                <return>
                    A {@code ScanManagerConfig} bean read from the
                      XML configuration file.                    
                </return>
                <throws>
                    javax.xml.bind.JAXBException if it fails to read the configuration.                    
                </throws>
            </javadoc>
            <method name="read" type="ScanManagerConfig" line="232">
                <params>
                    <param name="f" type="File"/>
                </params>
                <declaration name="u" type="Unmarshaller" line="233"/>
            </method>
            <javadoc line="238">
                Writes the given bean to the given output stream.                
                <param>
                    bean the bean to write.                    
                </param>
                <param>
                    os the output stream to write to.                    
                </param>
                <param>
                    fragment whether the {@code &lt;?xml ... ?&gt;} header should be
                      included. The header is not included if the bean is just an
                      XML fragment encapsulated in a higher level XML element.                    
                </param>
                <throws>
                    JAXBException An XML Binding exception occurred.                    
                </throws>
            </javadoc>
            <method name="write" type="void" line="249">
                <params>
                    <param name="bean" type="ScanManagerConfig"/>
                    <param name="os" type="OutputStream"/>
                    <param name="fragment" type="boolean"/>
                </params>
            </method>
            <javadoc line="253">
                Writes the given bean to the given output stream.                
                <param>
                    bean the bean to write.                    
                </param>
                <param>
                    os the output stream to write to.                    
                </param>
                <param>
                    fragment whether the {@code &lt;?xml ... ?&gt;} header should be
                      included. The header is not included if the bean is just an
                      XML fragment encapsulated in a higher level XML element.                    
                </param>
                <throws>
                    JAXBException An XML Binding exception occurred.                    
                </throws>
            </javadoc>
            <method name="write" type="void" line="263">
                <params>
                    <param name="bean" type="ResultRecord"/>
                    <param name="os" type="OutputStream"/>
                    <param name="fragment" type="boolean"/>
                </params>
            </method>
            <javadoc line="267">
                Writes the given bean to the given output stream.                
                <param>
                    bean the bean to write.                    
                </param>
                <param>
                    os the output stream to write to.                    
                </param>
                <param>
                    fragment whether the {@code &lt;?xml ... ?&gt;} header should be
                      included. The header is not included if the bean is just an
                      XML fragment encapsulated in a higher level XML element.                    
                </param>
                <throws>
                    JAXBException An XML Binding exception occurred.                    
                </throws>
            </javadoc>
            <method name="writeXml" type="void" line="277">
                <params>
                    <param name="bean" type="Object"/>
                    <param name="os" type="OutputStream"/>
                    <param name="fragment" type="boolean"/>
                </params>
                <declaration name="m" type="Marshaller" line="278"/>
            </method>
            <method name="createUnmarshaller" type="Unmarshaller" line="284"/>
            <method name="createMarshaller" type="Marshaller" line="289">
                <declaration name="m" type="Marshaller" line="290"/>
            </method>
            <method name="getContext" type="JAXBContext" line="300"/>
            <method name="newXmlTmpFile" type="File" line="325">
                <params>
                    <param name="basename" type="String"/>
                </params>
                <declaration name="f" type="File" line="326"/>
                <scope line="330">
                    <declaration name="newStream" type="OutputStream" line="331"/>
                    <scope line="332">
                        <declaration name="decl" type="String" line="333"/>
                    </scope>
                    <scope line="337"/>
                </scope>
                <scope line="340"/>
            </method>
            <method name="commit" type="File" line="350">
                <params>
                    <param name="basename" type="String"/>
                    <param name="tmpFile" type="File"/>
                </params>
                <scope line="351">
                    <declaration name="backupName" type="String" line="352"/>
                    <declaration name="desired" type="File" line="353"/>
                    <declaration name="backup" type="File" line="354"/>
                    <scope line="356"/>
                </scope>
                <scope line="362"/>
            </method>
            <javadoc line="369">
                Creates a new committed XML file for {@code &lt;basename&gt;}, containing only
                  the {@code &lt;?xml ...?&gt;} header.
                  &lt;p&gt;This method will rename {@code &lt;basename&gt;} to {@code &lt;basename&gt;~},
                  if it exists.
                  &lt;/p&gt;                
                <return>
                    A newly created XML file containing the regular{@code &lt;?xml ...?&gt;} header.                    
                </return>
                <param>
                    basename The name of the new file.                    
                </param>
                <throws>
                    IOException if the new XML file couldn&apos;t be created.                    
                </throws>
            </javadoc>
            <method name="createNewXmlFile" type="File" line="380">
                <params>
                    <param name="basename" type="String"/>
                </params>
            </method>
        </class>
    </source>