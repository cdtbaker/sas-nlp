<?xml version="1.0" encoding="UTF-8"?>
    <source package="j2dbench.tests.iio">
        <import package="java.awt.Component"/>
        <import package="java.awt.Graphics"/>
        <import package="java.awt.Image"/>
        <import package="java.awt.MediaTracker"/>
        <import package="java.awt.Toolkit"/>
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.io.BufferedInputStream"/>
        <import package="java.io.ByteArrayInputStream"/>
        <import package="java.io.ByteArrayOutputStream"/>
        <import package="java.io.File"/>
        <import package="java.io.FileInputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.OutputStream"/>
        <import package="java.net.URL"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.List"/>
        <import package="javax.imageio.ImageIO"/>
        <import package="javax.imageio.ImageReader"/>
        <import package="javax.imageio.event.IIOReadProgressListener"/>
        <import package="javax.imageio.spi.IIORegistry"/>
        <import package="javax.imageio.spi.ImageReaderSpi"/>
        <import package="javax.imageio.stream.ImageInputStream"/>
        <import package="j2dbench.Group"/>
        <import package="j2dbench.Modifier"/>
        <import package="j2dbench.Option"/>
        <import package="j2dbench.Result"/>
        <import package="j2dbench.Test"/>
        <import package="j2dbench.TestEnvironment"/>
        <class name="InputImageTests" line="65">
            <extends class="InputTests"/>
            <declaration name="TEST_TOOLKIT" type="int" line="67"/>
            <declaration name="TEST_IMAGEIO" type="int" line="68"/>
            <declaration name="TEST_IMAGEREADER" type="int" line="69"/>
            <declaration name="imageRoot" type="Group" line="71"/>
            <declaration name="toolkitRoot" type="Group" line="73"/>
            <declaration name="toolkitOptRoot" type="Group" line="74"/>
            <declaration name="toolkitReadFormatList" type="Option" line="75"/>
            <declaration name="toolkitTestRoot" type="Group" line="76"/>
            <declaration name="imageioRoot" type="Group" line="78"/>
            <declaration name="imageioOptRoot" type="Group" line="79"/>
            <declaration name="imageioReaderSpis" type="ImageReaderSpi[]" line="80"/>
            <declaration name="imageioReadFormatShortNames" type="String[]" line="81"/>
            <declaration name="imageioReadFormatList" type="Option" line="82"/>
            <declaration name="imageioTestRoot" type="Group" line="83"/>
            <declaration name="imageReaderRoot" type="Group" line="85"/>
            <declaration name="imageReaderOptRoot" type="Group" line="86"/>
            <declaration name="seekForwardOnlyTog" type="Option" line="87"/>
            <declaration name="ignoreMetadataTog" type="Option" line="88"/>
            <declaration name="installListenerTog" type="Option" line="89"/>
            <declaration name="imageReaderTestRoot" type="Group" line="90"/>
            <method name="init" type="void" line="92">
                <comment line="97">
                    Toolkit Benchmarks                    
                </comment>
                <comment line="112">
                    Image I/O Benchmarks                    
                </comment>
                <comment line="116">
                    Image I/O Options                    
                </comment>
                <comment line="129">
                    Image I/O Tests                    
                </comment>
                <comment line="134">
                    ImageReader Options                    
                </comment>
                <comment line="155">
                    ImageReader Tests                    
                </comment>
                <declaration name="tkFormats" type="String[]" line="100"/>
                <scope line="112"/>
            </method>
            <method name="initIIOReadFormats" type="void" line="162">
                <comment line="172">
                    REMIND: there could be more than one non-core plugin for
                     a particular format, as is the case for JPEG2000 in the JAI
                     IIO Tools package, so we should support that somehow                    
                </comment>
                <declaration name="spis" type="List" line="163"/>
                <declaration name="shortNames" type="List" line="164"/>
                <declaration name="registry" type="IIORegistry" line="167"/>
                <declaration name="readerspis" type="java.util.Iterator" line="168"/>
                <scope line="170">
                    <declaration name="spi" type="ImageReaderSpi" line="174"/>
                    <declaration name="klass" type="String" line="175"/>
                    <declaration name="format" type="String" line="176"/>
                    <declaration name="suffix" type="String" line="177"/>
                    <scope line="178"/>
                    <declaration name="shortName" type="String" line="181"/>
                    <scope line="182"/>
                    <scope line="184"/>
                </scope>
            </method>
            <method name="InputImageTests" type="constructor" line="200">
                <params>
                    <param name="parent" type="Group"/>
                    <param name="nodeName" type="String"/>
                    <param name="description" type="String"/>
                </params>
            </method>
            <method name="cleanupTest" type="void" line="204">
                <params>
                    <param name="env" type="TestEnvironment"/>
                    <param name="ctx" type="Object"/>
                </params>
                <declaration name="iioctx" type="Context" line="205"/>
            </method>
            <class name="Context" line="209">
                <extends class="InputTests.Context"/>
                <declaration name="format" type="String" line="210"/>
                <declaration name="image" type="BufferedImage" line="211"/>
                <declaration name="reader" type="ImageReader" line="212"/>
                <declaration name="seekForwardOnly" type="boolean" line="213"/>
                <declaration name="ignoreMetadata" type="boolean" line="214"/>
                <method name="Context" type="constructor" line="216">
                    <params>
                        <param name="env" type="TestEnvironment"/>
                        <param name="result" type="Result"/>
                        <param name="testType" type="int"/>
                    </params>
                    <comment line="224">
                        REMIND: add option for non-opaque images                        
                    </comment>
                    <comment line="249">
                        REMIND: this is a hack to create an image that the
                                 WBMPImageWriter can handle (a better approach
                                 would involve checking the ImageTypeSpecifier
                                 of the writer&apos;s default image param)                        
                    </comment>
                    <comment line="263">
                        testType == TEST_JPEGCODEC                        
                    </comment>
                    <declaration name="content" type="String" line="219"/>
                    <scope line="220"/>
                    <scope line="229">
                        <declaration name="readerspi" type="ImageReaderSpi" line="230"/>
                        <scope line="233">
                            <scope line="236"/>
                            <scope line="238"/>
                            <scope line="242"/>
                        </scope>
                        <scope line="247">
                            <declaration name="newimg" type="BufferedImage" line="252"/>
                            <declaration name="g" type="Graphics" line="255"/>
                        </scope>
                    </scope>
                    <scope line="260"/>
                    <scope line="262"/>
                </method>
                <method name="initContents" type="void" line="269">
                    <params>
                        <param name="f" type="File"/>
                    </params>
                </method>
                <method name="initContents" type="void" line="273">
                    <params>
                        <param name="out" type="OutputStream"/>
                    </params>
                </method>
                <method name="cleanup" type="void" line="277">
                    <params>
                        <param name="env" type="TestEnvironment"/>
                    </params>
                    <scope line="279"/>
                </method>
            </class>
            <class name="ToolkitCreateImage" line="286">
                <extends class="InputImageTests"/>
                <declaration name="canvas" type="Component" line="287"/>
                <anonymous_class line="287"/>
                <method name="ToolkitCreateImage" type="constructor" line="289">
                    <comment line="297">
                        Toolkit handles FILE, URL, and ARRAY, but
                         not FILECHANNEL                        
                    </comment>
                    <anonymous_class line="294">
                        <method name="isCompatible" type="boolean" line="295">
                            <params>
                                <param name="val" type="Object"/>
                            </params>
                            <comment line="297">
                                Toolkit handles FILE, URL, and ARRAY, but
                                 not FILECHANNEL                                
                            </comment>
                            <declaration name="t" type="InputType" line="298"/>
                        </method>
                    </anonymous_class>
                </method>
                <method name="initTest" type="Object" line="305">
                    <params>
                        <param name="env" type="TestEnvironment"/>
                        <param name="result" type="Result"/>
                    </params>
                </method>
                <method name="runTest" type="void" line="309">
                    <params>
                        <param name="ctx" type="Object"/>
                        <param name="numReps" type="int"/>
                    </params>
                    <declaration name="ictx" type="Context" line="310"/>
                    <declaration name="input" type="Object" line="311"/>
                    <declaration name="inputType" type="int" line="312"/>
                    <declaration name="tk" type="Toolkit" line="313"/>
                    <declaration name="mt" type="MediaTracker" line="314"/>
                    <declaration name="filename" type="String" line="317"/>
                    <scope line="318">
                        <scope line="319">
                            <declaration name="img" type="Image" line="320"/>
                        </scope>
                        <scope line="324"/>
                    </scope>
                    <scope line="330">
                        <scope line="331">
                            <declaration name="img" type="Image" line="332"/>
                        </scope>
                        <scope line="336"/>
                    </scope>
                    <scope line="342">
                        <scope line="343">
                            <declaration name="img" type="Image" line="344"/>
                        </scope>
                        <scope line="348"/>
                    </scope>
                </method>
            </class>
            <class name="ImageIORead" line="359">
                <extends class="InputImageTests"/>
                <method name="ImageIORead" type="constructor" line="360">
                    <comment line="368">
                        ImageIO.read() handles FILE, URL, and ARRAY, but
                         not FILECHANNEL (well, I suppose we could create
                         an ImageInputStream from a FileChannel source,
                         but that&apos;s not a common use case; FileChannel is
                         better handled by the ImageReader tests below)                        
                    </comment>
                    <anonymous_class line="365">
                        <method name="isCompatible" type="boolean" line="366">
                            <params>
                                <param name="val" type="Object"/>
                            </params>
                            <comment line="368">
                                ImageIO.read() handles FILE, URL, and ARRAY, but
                                 not FILECHANNEL (well, I suppose we could create
                                 an ImageInputStream from a FileChannel source,
                                 but that&apos;s not a common use case; FileChannel is
                                 better handled by the ImageReader tests below)                                
                            </comment>
                            <declaration name="t" type="InputType" line="372"/>
                        </method>
                    </anonymous_class>
                </method>
                <method name="initTest" type="Object" line="379">
                    <params>
                        <param name="env" type="TestEnvironment"/>
                        <param name="result" type="Result"/>
                    </params>
                </method>
                <method name="runTest" type="void" line="383">
                    <params>
                        <param name="ctx" type="Object"/>
                        <param name="numReps" type="int"/>
                    </params>
                    <declaration name="ictx" type="Context" line="384"/>
                    <declaration name="input" type="Object" line="385"/>
                    <declaration name="inputType" type="int" line="386"/>
                    <scope line="389">
                        <scope line="390"/>
                        <scope line="392"/>
                    </scope>
                    <scope line="398">
                        <scope line="399"/>
                        <scope line="401"/>
                    </scope>
                    <scope line="407">
                        <scope line="408">
                            <declaration name="bais" type="ByteArrayInputStream" line="409"/>
                            <declaration name="bis" type="BufferedInputStream" line="411"/>
                        </scope>
                        <scope line="415"/>
                    </scope>
                </method>
            </class>
            <class name="ImageReaderRead" line="426">
                <extends class="InputImageTests"/>
                <method name="ImageReaderRead" type="constructor" line="427"/>
                <method name="initTest" type="Object" line="437">
                    <params>
                        <param name="env" type="TestEnvironment"/>
                        <param name="result" type="Result"/>
                    </params>
                </method>
                <method name="runTest" type="void" line="441">
                    <params>
                        <param name="ctx" type="Object"/>
                        <param name="numReps" type="int"/>
                    </params>
                    <declaration name="ictx" type="Context" line="442"/>
                    <declaration name="reader" type="ImageReader" line="443"/>
                    <declaration name="seekForwardOnly" type="boolean" line="444"/>
                    <declaration name="ignoreMetadata" type="boolean" line="445"/>
                    <scope line="446">
                        <scope line="447">
                            <declaration name="iis" type="ImageInputStream" line="448"/>
                        </scope>
                        <scope line="454"/>
                    </scope>
                </method>
            </class>
            <class name="ImageReaderGetImageMetadata" line="461">
                <extends class="InputImageTests"/>
                <method name="ImageReaderGetImageMetadata" type="constructor" line="462"/>
                <method name="initTest" type="Object" line="472">
                    <params>
                        <param name="env" type="TestEnvironment"/>
                        <param name="result" type="Result"/>
                    </params>
                    <comment line="475">
                        override units since this test doesn&apos;t read &quot;pixels&quot;                        
                    </comment>
                    <declaration name="ctx" type="Context" line="473"/>
                </method>
                <method name="runTest" type="void" line="480">
                    <params>
                        <param name="ctx" type="Object"/>
                        <param name="numReps" type="int"/>
                    </params>
                    <declaration name="ictx" type="Context" line="481"/>
                    <declaration name="reader" type="ImageReader" line="482"/>
                    <declaration name="seekForwardOnly" type="boolean" line="483"/>
                    <declaration name="ignoreMetadata" type="boolean" line="484"/>
                    <scope line="485">
                        <scope line="486">
                            <declaration name="iis" type="ImageInputStream" line="487"/>
                        </scope>
                        <scope line="493"/>
                    </scope>
                </method>
            </class>
            <class name="ReadProgressListener" line="500">
                <implements interface="IIOReadProgressListener"/>
                <method name="sequenceStarted" type="void" line="503">
                    <params>
                        <param name="source" type="ImageReader"/>
                        <param name="minIndex" type="int"/>
                    </params>
                </method>
                <method name="sequenceComplete" type="void" line="504">
                    <params>
                        <param name="source" type="ImageReader"/>
                    </params>
                </method>
                <method name="imageStarted" type="void" line="505">
                    <params>
                        <param name="source" type="ImageReader"/>
                        <param name="imageIndex" type="int"/>
                    </params>
                </method>
                <method name="imageProgress" type="void" line="506">
                    <params>
                        <param name="source" type="ImageReader"/>
                        <param name="percentageDone" type="float"/>
                    </params>
                </method>
                <method name="imageComplete" type="void" line="507">
                    <params>
                        <param name="source" type="ImageReader"/>
                    </params>
                </method>
                <method name="thumbnailStarted" type="void" line="509">
                    <params>
                        <param name="source" type="ImageReader"/>
                        <param name="imageIndex" type="int"/>
                        <param name="thumbnailIndex" type="int"/>
                    </params>
                </method>
                <method name="thumbnailProgress" type="void" line="511">
                    <params>
                        <param name="source" type="ImageReader"/>
                        <param name="percentageDone" type="float"/>
                    </params>
                </method>
                <method name="thumbnailComplete" type="void" line="512">
                    <params>
                        <param name="source" type="ImageReader"/>
                    </params>
                </method>
                <method name="readAborted" type="void" line="513">
                    <params>
                        <param name="source" type="ImageReader"/>
                    </params>
                </method>
            </class>
        </class>
    </source>