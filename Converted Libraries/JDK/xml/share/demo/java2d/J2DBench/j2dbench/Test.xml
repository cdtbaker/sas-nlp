<?xml version="1.0" encoding="UTF-8"?>
    <source package="j2dbench">
        <class name="Test" line="34">
            <extends class="Option.Enable"/>
            <comment line="187">
                Finds a new width (w2) such that
                     (w-2) &lt;= w2 &lt;= w
                     and w2 is not a multiple of 3 (the X step size)
                     and GCD(w2, h) is as small as possible                
            </comment>
            <declaration name="dependencies" type="DependentLink" line="35"/>
            <method name="Test" type="constructor" line="37">
                <params>
                    <param name="parent" type="Group"/>
                    <param name="nodeName" type="String"/>
                    <param name="description" type="String"/>
                </params>
            </method>
            <method name="addDependency" type="void" line="41">
                <params>
                    <param name="mod" type="Modifier"/>
                </params>
            </method>
            <method name="addDependency" type="void" line="45">
                <params>
                    <param name="mod" type="Modifier"/>
                    <param name="filter" type="Modifier.Filter"/>
                </params>
            </method>
            <method name="addDependencies" type="void" line="49">
                <params>
                    <param name="g" type="Group"/>
                    <param name="recursive" type="boolean"/>
                </params>
            </method>
            <method name="addDependencies" type="void" line="55">
                <params>
                    <param name="g" type="Group"/>
                    <param name="recursive" type="boolean"/>
                    <param name="filter" type="Modifier.Filter"/>
                </params>
                <scope line="56"/>
                <scope line="59">
                    <scope line="60"/>
                    <scope line="62"/>
                </scope>
            </method>
            <method name="runTest" type="void" line="68">
                <params>
                    <param name="env" type="TestEnvironment"/>
                </params>
                <scope line="69"/>
            </method>
            <method name="runOneTest" type="void" line="74">
                <params>
                    <param name="env" type="TestEnvironment"/>
                </params>
                <comment line="86">
                    Skip recording results if we were interrupted before                    
                </comment>
                <comment line="87">
                    anything interesting happened...                    
                </comment>
                <comment line="96">
                    Also done after this method returns...                    
                </comment>
                <scope line="75">
                    <declaration name="result" type="Result" line="76"/>
                    <declaration name="ctx" type="Object" line="78"/>
                    <scope line="80"/>
                    <scope line="82"/>
                    <scope line="88">
                        <scope line="89"/>
                    </scope>
                </scope>
            </method>
            <method name="initTest" type="Object" line="100"/>
            <method name="runTest" type="void" line="101"/>
            <method name="cleanupTest" type="void" line="102"/>
            <method name="runTestLoop" type="void" line="104">
                <params>
                    <param name="env" type="TestEnvironment"/>
                    <param name="result" type="Result"/>
                    <param name="ctx" type="Object"/>
                </params>
                <comment line="105">
                    Prime the pump                    
                </comment>
                <comment line="108">
                    Determine the number of reps                    
                </comment>
                <declaration name="numReps" type="int" line="109"/>
                <scope line="110"/>
                <declaration name="numRuns" type="int" line="115"/>
                <scope line="116">
                    <scope line="117"/>
                </scope>
            </method>
            <method name="calibrate" type="int" line="132">
                <params>
                    <param name="env" type="TestEnvironment"/>
                    <param name="ctx" type="Object"/>
                </params>
                <comment line="137">
                    First do one at a time until we get to 1 second elapsed                    
                </comment>
                <comment line="138">
                    But, if we get to 1000 reps we&apos;ll start ramping up our                    
                </comment>
                <comment line="139">
                    reps per cycle and throwing sync() calls in to make sure                    
                </comment>
                <comment line="140">
                    we aren&apos;t spinning our gears queueing up graphics calls                    
                </comment>
                <comment line="150">
                    Time to shift gears into an exponential number of tests                    
                </comment>
                <comment line="151">
                    sync() each time in case batching at a lower level is                    
                </comment>
                <comment line="152">
                    causing us to spin our gears                    
                </comment>
                <comment line="164">
                    Now keep estimating how many reps it takes to hit our target                    
                </comment>
                <comment line="165">
                    time exactly, trying it out, and guessing again.                    
                </comment>
                <comment line="177">
                    Now make one last estimate of how many reps it takes to                    
                </comment>
                <comment line="178">
                    hit the target exactly in case we overshot.                    
                </comment>
                <declaration name="testTime" type="long" line="133"/>
                <declaration name="numReps" type="int" line="134"/>
                <declaration name="totalReps" type="int" line="135"/>
                <declaration name="now" type="long" line="142"/>
                <declaration name="startTime" type="long" line="143"/>
                <scope line="144"/>
                <declaration name="reps" type="int" line="155"/>
                <scope line="156"/>
                <scope line="166">
                    <declaration name="estimate" type="int" line="167"/>
                    <scope line="168"/>
                </scope>
                <declaration name="estimate" type="int" line="179"/>
                <scope line="180"/>
            </method>
            <declaration name="prevw" type="int" line="192"/>
            <method name="adjustWidth" type="int" line="193">
                <params>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <declaration name="bestv" type="int" line="194"/>
                <declaration name="bestw" type="int" line="195"/>
                <declaration name="verbose" type="boolean" line="196"/>
                <scope line="197">
                    <declaration name="w2" type="int" line="198"/>
                    <declaration name="u" type="int" line="199"/>
                    <declaration name="v" type="int" line="200"/>
                    <scope line="201">
                        <scope line="202">
                            <declaration name="t" type="int" line="202"/>
                        </scope>
                    </scope>
                    <scope line="205"/>
                    <scope line="210"/>
                </scope>
                <scope line="215"/>
            </method>
            <method name="toString" type="String" line="222"/>
            <class name="DependentLink" line="226">
                <method name="add" type="DependentLink" line="229">
                    <params>
                        <param name="d" type="DependentLink"/>
                        <param name="mod" type="Modifier"/>
                        <param name="filter" type="Modifier.Filter"/>
                    </params>
                    <declaration name="dl" type="DependentLink" line="230"/>
                    <scope line="231"/>
                    <scope line="233">
                        <declaration name="last" type="DependentLink" line="234"/>
                        <scope line="235"/>
                    </scope>
                </method>
                <declaration name="next" type="DependentLink" line="243"/>
                <declaration name="mod" type="Modifier" line="244"/>
                <declaration name="filter" type="Modifier.Filter" line="245"/>
                <method name="DependentLink" type="constructor" line="247">
                    <params>
                        <param name="mod" type="Modifier"/>
                        <param name="filter" type="Modifier.Filter"/>
                    </params>
                </method>
                <method name="getModifier" type="Modifier" line="252"/>
                <method name="getFilter" type="Modifier.Filter" line="256"/>
                <method name="getNext" type="DependentLink" line="260"/>
                <method name="recurseAndRun" type="void" line="264">
                    <params>
                        <param name="env" type="TestEnvironment"/>
                        <param name="test" type="Test"/>
                    </params>
                    <comment line="272">
                        One more time outside of runOneTest()                        
                    </comment>
                    <declaration name="iter" type="Modifier.Iterator" line="265"/>
                    <scope line="266">
                        <declaration name="val" type="Object" line="267"/>
                        <scope line="268">
                            <scope line="270"/>
                            <scope line="273"/>
                        </scope>
                    </scope>
                </method>
            </class>
        </class>
    </source>