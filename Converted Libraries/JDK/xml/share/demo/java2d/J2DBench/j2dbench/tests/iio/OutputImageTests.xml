<?xml version="1.0" encoding="UTF-8"?>
    <source package="j2dbench.tests.iio">
        <import package="java.awt.Graphics"/>
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.io.BufferedOutputStream"/>
        <import package="java.io.ByteArrayOutputStream"/>
        <import package="java.io.File"/>
        <import package="java.io.FileOutputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.OutputStream"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.List"/>
        <import package="javax.imageio.ImageIO"/>
        <import package="javax.imageio.ImageWriter"/>
        <import package="javax.imageio.event.IIOWriteProgressListener"/>
        <import package="javax.imageio.spi.IIORegistry"/>
        <import package="javax.imageio.spi.ImageWriterSpi"/>
        <import package="javax.imageio.stream.ImageOutputStream"/>
        <import package="j2dbench.Group"/>
        <import package="j2dbench.Modifier"/>
        <import package="j2dbench.Option"/>
        <import package="j2dbench.Result"/>
        <import package="j2dbench.Test"/>
        <import package="j2dbench.TestEnvironment"/>
        <class name="OutputImageTests" line="58">
            <extends class="OutputTests"/>
            <declaration name="TEST_IMAGEIO" type="int" line="60"/>
            <declaration name="TEST_IMAGEWRITER" type="int" line="61"/>
            <declaration name="imageRoot" type="Group" line="63"/>
            <declaration name="imageioRoot" type="Group" line="65"/>
            <declaration name="imageioOptRoot" type="Group" line="66"/>
            <declaration name="imageioWriterSpis" type="ImageWriterSpi[]" line="67"/>
            <declaration name="imageioWriteFormatShortNames" type="String[]" line="68"/>
            <declaration name="imageioWriteFormatList" type="Option" line="69"/>
            <declaration name="imageioTestRoot" type="Group" line="70"/>
            <declaration name="imageWriterRoot" type="Group" line="72"/>
            <declaration name="imageWriterOptRoot" type="Group" line="73"/>
            <declaration name="installListenerTog" type="Option" line="74"/>
            <declaration name="imageWriterTestRoot" type="Group" line="75"/>
            <method name="init" type="void" line="77">
                <comment line="81">
                    Image I/O Benchmarks                    
                </comment>
                <comment line="85">
                    Image I/O Options                    
                </comment>
                <comment line="98">
                    Image I/O Tests                    
                </comment>
                <comment line="103">
                    ImageWriter Options                    
                </comment>
                <comment line="114">
                    ImageWriter Tests                    
                </comment>
                <scope line="82"/>
            </method>
            <method name="initIIOWriteFormats" type="void" line="121">
                <comment line="130">
                    REMIND: there could be more than one non-core plugin for                    
                </comment>
                <comment line="131">
                    a particular format, as is the case for JPEG2000 in the JAI                    
                </comment>
                <comment line="132">
                    IIO Tools package, so we should support that somehow                    
                </comment>
                <declaration name="spis" type="List" line="122"/>
                <declaration name="shortNames" type="List" line="123"/>
                <declaration name="registry" type="IIORegistry" line="126"/>
                <declaration name="writerspis" type="java.util.Iterator" line="127"/>
                <scope line="129">
                    <declaration name="spi" type="ImageWriterSpi" line="133"/>
                    <declaration name="klass" type="String" line="134"/>
                    <declaration name="format" type="String" line="135"/>
                    <declaration name="suffix" type="String" line="136"/>
                    <scope line="137"/>
                    <declaration name="shortName" type="String" line="140"/>
                    <scope line="141"/>
                    <scope line="143"/>
                </scope>
            </method>
            <method name="OutputImageTests" type="constructor" line="159">
                <params>
                    <param name="parent" type="Group"/>
                    <param name="nodeName" type="String"/>
                    <param name="description" type="String"/>
                </params>
            </method>
            <method name="cleanupTest" type="void" line="163">
                <params>
                    <param name="env" type="TestEnvironment"/>
                    <param name="ctx" type="Object"/>
                </params>
                <declaration name="iioctx" type="Context" line="164"/>
            </method>
            <class name="Context" line="168">
                <extends class="OutputTests.Context"/>
                <declaration name="format" type="String" line="169"/>
                <declaration name="image" type="BufferedImage" line="170"/>
                <declaration name="writer" type="ImageWriter" line="171"/>
                <method name="Context" type="constructor" line="173">
                    <params>
                        <param name="env" type="TestEnvironment"/>
                        <param name="result" type="Result"/>
                        <param name="testType" type="int"/>
                    </params>
                    <comment line="180">
                        REMIND: add option for non-opaque images                        
                    </comment>
                    <comment line="203">
                        REMIND: this is a hack to create an image that the                        
                    </comment>
                    <comment line="204">
                        WBMPImageWriter can handle (a better approach                        
                    </comment>
                    <comment line="205">
                        would involve checking the ImageTypeSpecifier                        
                    </comment>
                    <comment line="206">
                        of the writer&apos;s default image param)                        
                    </comment>
                    <comment line="215">
                        testType == TEST_JPEGCODEC                        
                    </comment>
                    <declaration name="content" type="String" line="176"/>
                    <scope line="177"/>
                    <scope line="186">
                        <declaration name="writerspi" type="ImageWriterSpi" line="187"/>
                        <scope line="190">
                            <scope line="191"/>
                            <scope line="193"/>
                            <scope line="197"/>
                        </scope>
                        <scope line="202">
                            <declaration name="newimg" type="BufferedImage" line="207"/>
                            <declaration name="g" type="Graphics" line="210"/>
                        </scope>
                    </scope>
                    <scope line="215"/>
                </method>
                <method name="initContents" type="void" line="222">
                    <params>
                        <param name="f" type="File"/>
                    </params>
                </method>
                <method name="initContents" type="void" line="226">
                    <params>
                        <param name="out" type="OutputStream"/>
                    </params>
                </method>
                <method name="cleanup" type="void" line="230">
                    <params>
                        <param name="env" type="TestEnvironment"/>
                    </params>
                    <scope line="232"/>
                </method>
            </class>
            <class name="ImageIOWrite" line="239">
                <extends class="OutputImageTests"/>
                <method name="ImageIOWrite" type="constructor" line="240">
                    <comment line="247">
                        ImageIO.write() handles FILE and ARRAY, but                        
                    </comment>
                    <comment line="248">
                        not FILECHANNEL (well, I suppose we could create                        
                    </comment>
                    <comment line="249">
                        an ImageOutputStream from a FileChannel source,                        
                    </comment>
                    <comment line="250">
                        but that&apos;s not a common use case; FileChannel is                        
                    </comment>
                    <comment line="251">
                        better handled by the ImageWriter tests below)                        
                    </comment>
                    <anonymous_class line="245">
                        <method name="isCompatible" type="boolean" line="246">
                            <params>
                                <param name="val" type="Object"/>
                            </params>
                            <comment line="247">
                                ImageIO.write() handles FILE and ARRAY, but                                
                            </comment>
                            <comment line="248">
                                not FILECHANNEL (well, I suppose we could create                                
                            </comment>
                            <comment line="249">
                                an ImageOutputStream from a FileChannel source,                                
                            </comment>
                            <comment line="250">
                                but that&apos;s not a common use case; FileChannel is                                
                            </comment>
                            <comment line="251">
                                better handled by the ImageWriter tests below)                                
                            </comment>
                            <declaration name="t" type="OutputType" line="252"/>
                        </method>
                    </anonymous_class>
                </method>
                <method name="initTest" type="Object" line="259">
                    <params>
                        <param name="env" type="TestEnvironment"/>
                        <param name="result" type="Result"/>
                    </params>
                </method>
                <method name="runTest" type="void" line="263">
                    <params>
                        <param name="ctx" type="Object"/>
                        <param name="numReps" type="int"/>
                    </params>
                    <declaration name="ictx" type="Context" line="264"/>
                    <declaration name="output" type="Object" line="265"/>
                    <declaration name="image" type="BufferedImage" line="266"/>
                    <declaration name="format" type="String" line="267"/>
                    <declaration name="outputType" type="int" line="268"/>
                    <scope line="271">
                        <scope line="272"/>
                        <scope line="274"/>
                    </scope>
                    <scope line="280">
                        <scope line="281">
                            <declaration name="baos" type="ByteArrayOutputStream" line="282"/>
                            <declaration name="bos" type="BufferedOutputStream" line="284"/>
                        </scope>
                        <scope line="288"/>
                    </scope>
                </method>
            </class>
            <class name="ImageWriterWrite" line="299">
                <extends class="OutputImageTests"/>
                <method name="ImageWriterWrite" type="constructor" line="300"/>
                <method name="initTest" type="Object" line="310">
                    <params>
                        <param name="env" type="TestEnvironment"/>
                        <param name="result" type="Result"/>
                    </params>
                </method>
                <method name="runTest" type="void" line="314">
                    <params>
                        <param name="ctx" type="Object"/>
                        <param name="numReps" type="int"/>
                    </params>
                    <declaration name="ictx" type="Context" line="315"/>
                    <declaration name="writer" type="ImageWriter" line="316"/>
                    <declaration name="image" type="BufferedImage" line="317"/>
                    <scope line="318">
                        <scope line="319">
                            <declaration name="ios" type="ImageOutputStream" line="320"/>
                        </scope>
                        <scope line="326"/>
                    </scope>
                </method>
            </class>
            <class name="WriteProgressListener" line="333">
                <implements interface="IIOWriteProgressListener"/>
                <method name="imageStarted" type="void" line="336">
                    <params>
                        <param name="source" type="ImageWriter"/>
                        <param name="imageIndex" type="int"/>
                    </params>
                </method>
                <method name="imageProgress" type="void" line="338">
                    <params>
                        <param name="source" type="ImageWriter"/>
                        <param name="percentageDone" type="float"/>
                    </params>
                </method>
                <method name="imageComplete" type="void" line="339">
                    <params>
                        <param name="source" type="ImageWriter"/>
                    </params>
                </method>
                <method name="thumbnailStarted" type="void" line="341">
                    <params>
                        <param name="source" type="ImageWriter"/>
                        <param name="imageIndex" type="int"/>
                        <param name="thumbnailIndex" type="int"/>
                    </params>
                </method>
                <method name="thumbnailProgress" type="void" line="343">
                    <params>
                        <param name="source" type="ImageWriter"/>
                        <param name="percentageDone" type="float"/>
                    </params>
                </method>
                <method name="thumbnailComplete" type="void" line="344">
                    <params>
                        <param name="source" type="ImageWriter"/>
                    </params>
                </method>
                <method name="writeAborted" type="void" line="345">
                    <params>
                        <param name="source" type="ImageWriter"/>
                    </params>
                </method>
            </class>
        </class>
    </source>