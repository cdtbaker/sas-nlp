<?xml version="1.0" encoding="UTF-8"?>
    <source package="j2dbench.tests">
        <import package="java.awt.Graphics"/>
        <import package="java.awt.Graphics2D"/>
        <import package="java.awt.Color"/>
        <import package="java.awt.Dimension"/>
        <import package="java.awt.AlphaComposite"/>
        <import package="java.awt.Stroke"/>
        <import package="java.awt.BasicStroke"/>
        <import package="java.awt.GradientPaint"/>
        <import package="java.awt.LinearGradientPaint"/>
        <import package="java.awt.MultipleGradientPaint"/>
        <import package="java.awt.MultipleGradientPaint.CycleMethod"/>
        <import package="java.awt.MultipleGradientPaint.ColorSpaceType"/>
        <import package="java.awt.RadialGradientPaint"/>
        <import package="java.awt.RenderingHints"/>
        <import package="java.awt.TexturePaint"/>
        <import package="java.awt.geom.CubicCurve2D"/>
        <import package="java.awt.geom.Ellipse2D"/>
        <import package="java.awt.geom.Point2D"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.io.PrintWriter"/>
        <import package="java.util.ArrayList"/>
        <import package="javax.swing.JComponent"/>
        <import package="j2dbench.Group"/>
        <import package="j2dbench.Node"/>
        <import package="j2dbench.Option"/>
        <import package="j2dbench.TestEnvironment"/>
        <class name="RenderTests" line="63">
            <extends class="GraphicsTests"/>
            <declaration name="renderroot" type="Group" line="64"/>
            <declaration name="renderoptroot" type="Group" line="65"/>
            <declaration name="rendertestroot" type="Group" line="66"/>
            <declaration name="rendershaperoot" type="Group" line="67"/>
            <declaration name="paintList" type="Option" line="69"/>
            <declaration name="doAntialias" type="Option" line="70"/>
            <declaration name="doAlphaColors" type="Option" line="71"/>
            <declaration name="sizeList" type="Option" line="72"/>
            <declaration name="strokeList" type="Option" line="73"/>
            <declaration name="NUM_RANDOMCOLORS" type="int" line="75"/>
            <declaration name="NUM_RANDOMCOLORMASK" type="int" line="76"/>
            <declaration name="randAlphaColors" type="Color" line="77"/>
            <declaration name="randOpaqueColors" type="Color" line="78"/>
            <scope line="80">
                <scope line="83">
                    <declaration name="r" type="int" line="84"/>
                    <declaration name="g" type="int" line="85"/>
                    <declaration name="b" type="int" line="86"/>
                </scope>
            </scope>
            <declaration name="hasMultiGradient" type="boolean" line="92"/>
            <scope line="94">
                <scope line="95"/>
                <scope line="97"/>
            </scope>
            <method name="init" type="void" line="101">
                <comment line="143">
                    add special RandomColorOpt for backwards compatibility with
                     older options files                    
                </comment>
                <declaration name="paintStrs" type="ArrayList" line="106"/>
                <declaration name="paintDescs" type="ArrayList" line="107"/>
                <scope line="112">
                    <scope line="115"/>
                </scope>
                <declaration name="paintStrArr" type="String[]" line="130"/>
                <declaration name="paintDescArr" type="String[]" line="132"/>
                <scope line="146">
                    <declaration name="strokeStrings" type="String" line="155"/>
                    <declaration name="strokeDescriptions" type="String" line="165"/>
                    <declaration name="strokeObjects" type="BasicStroke" line="175"/>
                </scope>
                <scope line="212"/>
            </method>
            <class name="RandomColorOpt" line="223">
                <extends class="Node"/>
                <javadoc line="223">
                    This &quot;virtual Node&quot; implementation is here to maintain backward
                      compatibility with older J2DBench releases, specifically those
                      options files that were created before we added the gradient/texture
                      paint options in JDK 6.  This class will translate the color settings
                      from the old &quot;randomcolor&quot; option into the new &quot;paint&quot; option.                    
                </javadoc>
                <method name="RandomColorOpt" type="constructor" line="231"/>
                <method name="getJComponent" type="JComponent" line="236"/>
                <method name="restoreDefault" type="void" line="240">
                    <comment line="242">
                        no-op                        
                    </comment>
                </method>
                <method name="write" type="void" line="244">
                    <params>
                        <param name="pw" type="PrintWriter"/>
                    </params>
                    <comment line="246">
                        no-op (the random/single choice will be saved as part of
                         the new &quot;paint&quot; option added to J2DBench in JDK 6)                        
                    </comment>
                </method>
                <method name="setOption" type="String" line="249">
                    <params>
                        <param name="key" type="String"/>
                        <param name="value" type="String"/>
                    </params>
                    <declaration name="opts" type="String" line="250"/>
                    <scope line="251"/>
                    <scope line="253"/>
                    <scope line="255"/>
                    <scope line="257"/>
                </method>
            </class>
            <class name="Context" line="264">
                <extends class="GraphicsTests.Context"/>
                <declaration name="colorindex" type="int" line="265"/>
                <declaration name="colorlist" type="Color" line="266"/>
            </class>
            <method name="RenderTests" type="constructor" line="269">
                <params>
                    <param name="parent" type="Group"/>
                    <param name="nodeName" type="String"/>
                    <param name="description" type="String"/>
                </params>
            </method>
            <method name="createContext" type="GraphicsTests.Context" line="274"/>
            <method name="initContext" type="void" line="278">
                <params>
                    <param name="env" type="TestEnvironment"/>
                    <param name="ctx" type="GraphicsTests.Context"/>
                </params>
                <declaration name="rctx" type="RenderTests.Context" line="280"/>
                <declaration name="alphacolor" type="boolean" line="281"/>
                <scope line="283">
                    <declaration name="g2d" type="Graphics2D" line="284"/>
                    <scope line="285"/>
                </scope>
                <scope line="291"/>
                <declaration name="paint" type="String" line="295"/>
                <scope line="296">
                    <declaration name="c" type="Color" line="297"/>
                    <scope line="298"/>
                </scope>
                <scope line="302"/>
                <scope line="304">
                    <declaration name="colors" type="Color[]" line="305"/>
                    <declaration name="g2d" type="Graphics2D" line="306"/>
                </scope>
                <scope line="309">
                    <declaration name="g2d" type="Graphics2D" line="310"/>
                </scope>
                <scope line="312">
                    <declaration name="g2d" type="Graphics2D" line="313"/>
                </scope>
                <scope line="315">
                    <declaration name="g2d" type="Graphics2D" line="316"/>
                </scope>
                <scope line="318">
                    <declaration name="g2d" type="Graphics2D" line="319"/>
                </scope>
                <scope line="321">
                    <declaration name="g2d" type="Graphics2D" line="322"/>
                </scope>
                <scope line="324">
                    <declaration name="g2d" type="Graphics2D" line="325"/>
                </scope>
                <scope line="327"/>
            </method>
            <method name="makeGradientColors" type="Color[]" line="332">
                <params>
                    <param name="numColors" type="int"/>
                    <param name="alpha" type="boolean"/>
                </params>
                <declaration name="colors" type="Color[]" line="333"/>
                <declaration name="ret" type="Color[]" line="335"/>
                <scope line="336"/>
            </method>
            <method name="makeLinear" type="LinearGradientPaint" line="342">
                <params>
                    <param name="numColors" type="int"/>
                    <param name="alpha" type="boolean"/>
                </params>
                <declaration name="interval" type="float" line="343"/>
                <declaration name="fractions" type="float[]" line="344"/>
                <scope line="345"/>
                <declaration name="colors" type="Color[]" line="348"/>
            </method>
            <method name="makeRadial" type="RadialGradientPaint" line="355">
                <params>
                    <param name="numColors" type="int"/>
                    <param name="alpha" type="boolean"/>
                </params>
                <declaration name="interval" type="float" line="356"/>
                <declaration name="fractions" type="float[]" line="357"/>
                <scope line="358"/>
                <declaration name="colors" type="Color[]" line="361"/>
            </method>
            <method name="makeTexturePaint" type="TexturePaint" line="367">
                <params>
                    <param name="size" type="int"/>
                    <param name="alpha" type="boolean"/>
                </params>
                <declaration name="s2" type="int" line="368"/>
                <declaration name="type" type="int" line="369"/>
                <declaration name="img" type="BufferedImage" line="371"/>
                <declaration name="colors" type="Color[]" line="372"/>
                <declaration name="g2d" type="Graphics2D" line="373"/>
                <declaration name="bounds" type="Rectangle2D" line="384"/>
            </method>
            <class name="DrawDiagonalLines" line="388">
                <extends class="RenderTests"/>
                <method name="DrawDiagonalLines" type="constructor" line="389"/>
                <method name="pixelsTouched" type="int" line="393">
                    <params>
                        <param name="ctx" type="GraphicsTests.Context"/>
                    </params>
                </method>
                <method name="runTest" type="void" line="397">
                    <params>
                        <param name="ctx" type="Object"/>
                        <param name="numReps" type="int"/>
                    </params>
                    <declaration name="rctx" type="RenderTests.Context" line="398"/>
                    <declaration name="size" type="int" line="399"/>
                    <declaration name="x" type="int" line="400"/>
                    <declaration name="y" type="int" line="401"/>
                    <declaration name="g" type="Graphics" line="402"/>
                    <declaration name="rCArray" type="Color" line="404"/>
                    <declaration name="ci" type="int" line="405"/>
                    <scope line="406">
                        <scope line="407">
                            <scope line="408"/>
                        </scope>
                    </scope>
                    <scope line="415">
                        <scope line="416">
                            <scope line="417"/>
                        </scope>
                    </scope>
                </method>
            </class>
            <class name="DrawHorizontalLines" line="428">
                <extends class="RenderTests"/>
                <method name="DrawHorizontalLines" type="constructor" line="429"/>
                <method name="pixelsTouched" type="int" line="434">
                    <params>
                        <param name="ctx" type="GraphicsTests.Context"/>
                    </params>
                </method>
                <method name="getOutputSize" type="Dimension" line="438">
                    <params>
                        <param name="w" type="int"/>
                        <param name="h" type="int"/>
                    </params>
                </method>
                <method name="runTest" type="void" line="442">
                    <params>
                        <param name="ctx" type="Object"/>
                        <param name="numReps" type="int"/>
                    </params>
                    <declaration name="rctx" type="RenderTests.Context" line="443"/>
                    <declaration name="size" type="int" line="444"/>
                    <declaration name="x" type="int" line="445"/>
                    <declaration name="y" type="int" line="446"/>
                    <declaration name="g" type="Graphics" line="447"/>
                    <declaration name="rCArray" type="Color" line="449"/>
                    <declaration name="ci" type="int" line="450"/>
                    <scope line="451">
                        <scope line="452">
                            <scope line="453"/>
                        </scope>
                    </scope>
                    <scope line="460">
                        <scope line="461">
                            <scope line="462"/>
                        </scope>
                    </scope>
                </method>
            </class>
            <class name="DrawVerticalLines" line="473">
                <extends class="RenderTests"/>
                <method name="DrawVerticalLines" type="constructor" line="474"/>
                <method name="pixelsTouched" type="int" line="479">
                    <params>
                        <param name="ctx" type="GraphicsTests.Context"/>
                    </params>
                </method>
                <method name="getOutputSize" type="Dimension" line="483">
                    <params>
                        <param name="w" type="int"/>
                        <param name="h" type="int"/>
                    </params>
                </method>
                <method name="runTest" type="void" line="487">
                    <params>
                        <param name="ctx" type="Object"/>
                        <param name="numReps" type="int"/>
                    </params>
                    <declaration name="rctx" type="RenderTests.Context" line="488"/>
                    <declaration name="size" type="int" line="489"/>
                    <declaration name="x" type="int" line="490"/>
                    <declaration name="y" type="int" line="491"/>
                    <declaration name="g" type="Graphics" line="492"/>
                    <declaration name="rCArray" type="Color" line="494"/>
                    <declaration name="ci" type="int" line="495"/>
                    <scope line="496">
                        <scope line="497">
                            <scope line="498"/>
                        </scope>
                    </scope>
                    <scope line="505">
                        <scope line="506">
                            <scope line="507"/>
                        </scope>
                    </scope>
                </method>
            </class>
            <class name="FillRects" line="518">
                <extends class="RenderTests"/>
                <method name="FillRects" type="constructor" line="519"/>
                <method name="runTest" type="void" line="523">
                    <params>
                        <param name="ctx" type="Object"/>
                        <param name="numReps" type="int"/>
                    </params>
                    <declaration name="rctx" type="RenderTests.Context" line="524"/>
                    <declaration name="size" type="int" line="525"/>
                    <declaration name="x" type="int" line="526"/>
                    <declaration name="y" type="int" line="527"/>
                    <declaration name="g" type="Graphics" line="528"/>
                    <declaration name="rCArray" type="Color" line="530"/>
                    <declaration name="ci" type="int" line="531"/>
                    <scope line="532">
                        <scope line="533">
                            <scope line="534"/>
                        </scope>
                    </scope>
                    <scope line="541">
                        <scope line="542">
                            <scope line="543"/>
                        </scope>
                    </scope>
                </method>
            </class>
            <class name="DrawRects" line="554">
                <extends class="RenderTests"/>
                <method name="DrawRects" type="constructor" line="555"/>
                <method name="pixelsTouched" type="int" line="559">
                    <params>
                        <param name="ctx" type="GraphicsTests.Context"/>
                    </params>
                    <comment line="564">
                        If one dimension is less than 2 then there is no
                         gap in the middle, so we get a solid filled rectangle.                        
                    </comment>
                    <declaration name="w" type="int" line="560"/>
                    <declaration name="h" type="int" line="561"/>
                    <scope line="562"/>
                </method>
                <method name="runTest" type="void" line="570">
                    <params>
                        <param name="ctx" type="Object"/>
                        <param name="numReps" type="int"/>
                    </params>
                    <declaration name="rctx" type="RenderTests.Context" line="571"/>
                    <declaration name="size" type="int" line="572"/>
                    <declaration name="x" type="int" line="573"/>
                    <declaration name="y" type="int" line="574"/>
                    <declaration name="g" type="Graphics" line="575"/>
                    <declaration name="rCArray" type="Color" line="577"/>
                    <declaration name="ci" type="int" line="578"/>
                    <scope line="579">
                        <scope line="580">
                            <scope line="581"/>
                        </scope>
                    </scope>
                    <scope line="588">
                        <scope line="589">
                            <scope line="590"/>
                        </scope>
                    </scope>
                </method>
            </class>
            <class name="FillOvals" line="601">
                <extends class="RenderTests"/>
                <method name="FillOvals" type="constructor" line="602"/>
                <method name="pixelsTouched" type="int" line="606">
                    <params>
                        <param name="ctx" type="GraphicsTests.Context"/>
                    </params>
                    <comment line="608">
                        Approximated                        
                    </comment>
                    <declaration name="xaxis" type="double" line="608"/>
                    <declaration name="yaxis" type="double" line="609"/>
                </method>
                <method name="runTest" type="void" line="613">
                    <params>
                        <param name="ctx" type="Object"/>
                        <param name="numReps" type="int"/>
                    </params>
                    <declaration name="rctx" type="RenderTests.Context" line="614"/>
                    <declaration name="size" type="int" line="615"/>
                    <declaration name="x" type="int" line="616"/>
                    <declaration name="y" type="int" line="617"/>
                    <declaration name="g" type="Graphics" line="618"/>
                    <declaration name="rCArray" type="Color" line="620"/>
                    <declaration name="ci" type="int" line="621"/>
                    <scope line="622">
                        <scope line="623">
                            <scope line="624"/>
                        </scope>
                    </scope>
                    <scope line="631">
                        <scope line="632">
                            <scope line="633"/>
                        </scope>
                    </scope>
                </method>
            </class>
            <class name="DrawOvals" line="644">
                <extends class="RenderTests"/>
                <method name="DrawOvals" type="constructor" line="645"/>
                <method name="pixelsTouched" type="int" line="649">
                    <params>
                        <param name="ctx" type="GraphicsTests.Context"/>
                    </params>
                    <comment line="651">
                        Approximation: We figured that the vertical chord connecting
                         the +45 deg and -45 deg points on the ellipse is about
                         heightsqrt(2) pixels long.  Likewise, the horizontal chord
                         connecting the +45 deg and +135 deg points on the ellipse is
                         about widthsqrt(2) pixels long.  Each of these chords has
                         a parallel on the opposite side of the respective axis (there
                         are two horizontal chords and two vertical chords).  Altogether
                         this gives a reasonable approximation of the total number of
                         pixels touched by the ellipse, so we have:
                             2(wsqrt(2)) + 2(hsqrt(2))
                          == (2sqrt(2))(w+h)
                          == (sqrt(2))(w+h)                        
                    </comment>
                </method>
                <method name="runTest" type="void" line="667">
                    <params>
                        <param name="ctx" type="Object"/>
                        <param name="numReps" type="int"/>
                    </params>
                    <declaration name="rctx" type="RenderTests.Context" line="668"/>
                    <declaration name="size" type="int" line="669"/>
                    <declaration name="x" type="int" line="670"/>
                    <declaration name="y" type="int" line="671"/>
                    <declaration name="g" type="Graphics" line="672"/>
                    <declaration name="rCArray" type="Color" line="674"/>
                    <declaration name="ci" type="int" line="675"/>
                    <scope line="676">
                        <scope line="677">
                            <scope line="678"/>
                        </scope>
                    </scope>
                    <scope line="685">
                        <scope line="686">
                            <scope line="687"/>
                        </scope>
                    </scope>
                </method>
            </class>
            <class name="FillPolys" line="698">
                <extends class="RenderTests"/>
                <method name="FillPolys" type="constructor" line="699"/>
                <method name="pixelsTouched" type="int" line="703">
                    <params>
                        <param name="ctx" type="GraphicsTests.Context"/>
                    </params>
                    <comment line="705">
                        The polygon is a hexagon inscribed inside the square but
                         missing a triangle at each of the four corners of size
                         (w4) by (h2).
                        
                         Putting 2 of these triangles together gives a rectangle
                         of size (w4) by (h2).
                        
                         Putting 2 of these rectangles together gives a total
                         missing rectangle size of (w2) by (h2).
                        
                         Thus, exactly one quarter of the whole square is not
                         touched by the filled polygon.                        
                    </comment>
                    <declaration name="size" type="int" line="718"/>
                </method>
                <method name="runTest" type="void" line="722">
                    <params>
                        <param name="ctx" type="Object"/>
                        <param name="numReps" type="int"/>
                    </params>
                    <declaration name="rctx" type="RenderTests.Context" line="723"/>
                    <declaration name="size" type="int" line="724"/>
                    <declaration name="x" type="int" line="725"/>
                    <declaration name="y" type="int" line="726"/>
                    <declaration name="hexaX" type="int" line="727"/>
                    <declaration name="hexaY" type="int" line="728"/>
                    <declaration name="g" type="Graphics" line="729"/>
                    <declaration name="rCArray" type="Color" line="731"/>
                    <declaration name="ci" type="int" line="732"/>
                    <scope line="733">
                        <scope line="742"/>
                    </scope>
                </method>
            </class>
            <class name="DrawPolys" line="754">
                <extends class="RenderTests"/>
                <method name="DrawPolys" type="constructor" line="755"/>
                <method name="pixelsTouched" type="int" line="759">
                    <params>
                        <param name="ctx" type="GraphicsTests.Context"/>
                    </params>
                    <comment line="761">
                        The two horizontal segments have exactly two pixels per column.
                         Since the diagonals are more vertical than horizontal, using
                         h2 would be a good way to count the pixels in those sections.
                         We then have to figure out the size of the remainder of the
                         horizontal lines at top and bottom to get the answer:
                        
                             (diagonals less endpoints)2 + (horizontals)2
                        
                          or:
                        
                             (h-2)2 + ((x+w-1-w4)-(x+w4)+1)2
                        
                          since (w == h == size), we then have:
                        
                             (size - size4 - 1)  4                        
                    </comment>
                    <declaration name="size" type="int" line="777"/>
                    <scope line="778"/>
                    <scope line="780"/>
                </method>
                <method name="runTest" type="void" line="785">
                    <params>
                        <param name="ctx" type="Object"/>
                        <param name="numReps" type="int"/>
                    </params>
                    <comment line="788">
                        subtract 1 to account for the fact that lines are drawn to
                         and including the final coordinate...                        
                    </comment>
                    <declaration name="rctx" type="RenderTests.Context" line="786"/>
                    <declaration name="size" type="int" line="789"/>
                    <declaration name="x" type="int" line="790"/>
                    <declaration name="y" type="int" line="791"/>
                    <declaration name="hexaX" type="int" line="792"/>
                    <declaration name="hexaY" type="int" line="793"/>
                    <declaration name="g" type="Graphics" line="794"/>
                    <declaration name="rCArray" type="Color" line="796"/>
                    <declaration name="ci" type="int" line="797"/>
                    <scope line="798">
                        <scope line="807"/>
                    </scope>
                </method>
            </class>
            <class name="FillCubics" line="819">
                <extends class="RenderTests"/>
                <declaration name="relTmax" type="double" line="820"/>
                <declaration name="relYmax" type="double" line="821"/>
                <method name="FillCubics" type="constructor" line="823"/>
                <method name="pixelsTouched" type="int" line="827">
                    <params>
                        <param name="ctx" type="GraphicsTests.Context"/>
                    </params>
                    <comment line="829">
                        The cubic only touches 2 quadrants in the square, thus
                         at least half of the square is unfilled.  The integrals
                         to figure out the exact area are not trivial so for the
                         other 2 quadrants, I&apos;m going to guess that the cubic only
                         encloses somewhere between 12 and 34ths of the pixels
                         in those quadrants - we will say 58ths.  Thus only
                         516ths of the total square is filled.                        
                    </comment>
                    <comment line="838">
                        Note: 2x2 ends up hitting exactly 1 pixel...                        
                    </comment>
                    <declaration name="size" type="int" line="838"/>
                </method>
                <class name="Context" line="843">
                    <extends class="RenderTests.Context"/>
                    <declaration name="curve" type="CubicCurve2D" line="844"/>
                </class>
                <method name="createContext" type="GraphicsTests.Context" line="847"/>
                <method name="runTest" type="void" line="851">
                    <params>
                        <param name="ctx" type="Object"/>
                        <param name="numReps" type="int"/>
                    </params>
                    <comment line="855">
                        Note: 2x2 ends up hitting exactly 1 pixel...                        
                    </comment>
                    <declaration name="cctx" type="FillCubics.Context" line="852"/>
                    <declaration name="size" type="int" line="853"/>
                    <declaration name="x" type="int" line="856"/>
                    <declaration name="y" type="int" line="857"/>
                    <declaration name="cpoffset" type="int" line="858"/>
                    <declaration name="curve" type="CubicCurve2D" line="859"/>
                    <declaration name="g2d" type="Graphics2D" line="860"/>
                    <declaration name="rCArray" type="Color" line="862"/>
                    <declaration name="ci" type="int" line="863"/>
                    <scope line="864">
                        <scope line="870"/>
                    </scope>
                </method>
            </class>
            <class name="DrawCubics" line="882">
                <extends class="RenderTests"/>
                <declaration name="relTmax" type="double" line="883"/>
                <declaration name="relYmax" type="double" line="884"/>
                <method name="DrawCubics" type="constructor" line="886"/>
                <method name="pixelsTouched" type="int" line="890">
                    <params>
                        <param name="ctx" type="GraphicsTests.Context"/>
                    </params>
                    <comment line="892">
                        Gross approximation                        
                    </comment>
                    <declaration name="size" type="int" line="892"/>
                </method>
                <class name="Context" line="897">
                    <extends class="RenderTests.Context"/>
                    <declaration name="curve" type="CubicCurve2D" line="898"/>
                </class>
                <method name="createContext" type="GraphicsTests.Context" line="901"/>
                <method name="runTest" type="void" line="905">
                    <params>
                        <param name="ctx" type="Object"/>
                        <param name="numReps" type="int"/>
                    </params>
                    <comment line="909">
                        Note: 2x2 ends up hitting exactly 1 pixel...                        
                    </comment>
                    <declaration name="cctx" type="DrawCubics.Context" line="906"/>
                    <declaration name="size" type="int" line="907"/>
                    <declaration name="x" type="int" line="910"/>
                    <declaration name="y" type="int" line="911"/>
                    <declaration name="cpoffset" type="int" line="912"/>
                    <declaration name="curve" type="CubicCurve2D" line="913"/>
                    <declaration name="g2d" type="Graphics2D" line="914"/>
                    <declaration name="rCArray" type="Color" line="916"/>
                    <declaration name="ci" type="int" line="917"/>
                    <scope line="918">
                        <scope line="924"/>
                    </scope>
                </method>
            </class>
            <class name="FillEllipse2Ds" line="936">
                <extends class="RenderTests"/>
                <method name="FillEllipse2Ds" type="constructor" line="937"/>
                <method name="pixelsTouched" type="int" line="941">
                    <params>
                        <param name="ctx" type="GraphicsTests.Context"/>
                    </params>
                    <comment line="943">
                        Approximated (copied from FillOvals.pixelsTouched())                        
                    </comment>
                    <declaration name="xaxis" type="double" line="943"/>
                    <declaration name="yaxis" type="double" line="944"/>
                </method>
                <class name="Context" line="948">
                    <extends class="RenderTests.Context"/>
                    <declaration name="ellipse" type="Ellipse2D" line="949"/>
                </class>
                <method name="createContext" type="GraphicsTests.Context" line="952"/>
                <method name="runTest" type="void" line="956">
                    <params>
                        <param name="ctx" type="Object"/>
                        <param name="numReps" type="int"/>
                    </params>
                    <declaration name="cctx" type="FillEllipse2Ds.Context" line="957"/>
                    <declaration name="size" type="int" line="958"/>
                    <declaration name="x" type="int" line="959"/>
                    <declaration name="y" type="int" line="960"/>
                    <declaration name="ellipse" type="Ellipse2D" line="961"/>
                    <declaration name="g2d" type="Graphics2D" line="962"/>
                    <declaration name="rCArray" type="Color" line="964"/>
                    <declaration name="ci" type="int" line="965"/>
                    <scope line="966">
                        <scope line="967"/>
                    </scope>
                </method>
            </class>
            <class name="DrawEllipse2Ds" line="980">
                <extends class="RenderTests"/>
                <method name="DrawEllipse2Ds" type="constructor" line="981"/>
                <method name="pixelsTouched" type="int" line="985">
                    <params>
                        <param name="ctx" type="GraphicsTests.Context"/>
                    </params>
                    <comment line="987">
                        Approximated (copied from DrawOvals.pixelsTouched())                        
                    </comment>
                </method>
                <class name="Context" line="990">
                    <extends class="RenderTests.Context"/>
                    <declaration name="ellipse" type="Ellipse2D" line="991"/>
                </class>
                <method name="createContext" type="GraphicsTests.Context" line="994"/>
                <method name="runTest" type="void" line="998">
                    <params>
                        <param name="ctx" type="Object"/>
                        <param name="numReps" type="int"/>
                    </params>
                    <declaration name="cctx" type="DrawEllipse2Ds.Context" line="999"/>
                    <declaration name="size" type="int" line="1000"/>
                    <declaration name="x" type="int" line="1001"/>
                    <declaration name="y" type="int" line="1002"/>
                    <declaration name="ellipse" type="Ellipse2D" line="1003"/>
                    <declaration name="g2d" type="Graphics2D" line="1004"/>
                    <declaration name="rCArray" type="Color" line="1006"/>
                    <declaration name="ci" type="int" line="1007"/>
                    <scope line="1008">
                        <scope line="1009"/>
                    </scope>
                </method>
            </class>
        </class>
    </source>