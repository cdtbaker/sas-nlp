<?xml version="1.0" encoding="UTF-8"?>
    <source package="">
        <import package="java.awt.BorderLayout"/>
        <import package="java.awt.Color"/>
        <import package="java.awt.Cursor"/>
        <import package="java.awt.Dimension"/>
        <import package="java.awt.Font"/>
        <import package="java.awt.FontMetrics"/>
        <import package="java.awt.Graphics"/>
        <import package="java.awt.Graphics2D"/>
        <import package="java.awt.GraphicsConfiguration"/>
        <import package="java.awt.GraphicsEnvironment"/>
        <import package="java.awt.Point"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.RenderingHints"/>
        <import package="java.awt.Toolkit"/>
        <import package="java.awt.event.AdjustmentEvent"/>
        <import package="java.awt.event.AdjustmentListener"/>
        <import package="java.awt.event.ComponentAdapter"/>
        <import package="java.awt.event.ComponentEvent"/>
        <import package="java.awt.event.MouseEvent"/>
        <import package="java.awt.event.MouseListener"/>
        <import package="java.awt.event.MouseMotionListener"/>
        <import package="java.awt.font.FontRenderContext"/>
        <import package="java.awt.font.GlyphVector"/>
        <import package="java.awt.font.LineBreakMeasurer"/>
        <import package="java.awt.font.TextLayout"/>
        <import package="java.awt.geom.AffineTransform"/>
        <import package="java.awt.geom.NoninvertibleTransformException"/>
        <import package="java.awt.geom.Rectangle2D"/>
        <import package="java.awt.image.BufferedImage"/>
        <import package="java.awt.print.PageFormat"/>
        <import package="java.awt.print.Printable"/>
        <import package="java.awt.print.PrinterJob"/>
        <import package="java.io.BufferedOutputStream"/>
        <import package="java.io.FileOutputStream"/>
        <import package="java.text.AttributedString"/>
        <import package="java.util.EnumSet"/>
        <import package="java.util.Vector"/>
        <import package="javax.imageio"/>
        <import package="javax.swing"/>
        <import package="java.awt.RenderingHints"/>
        <class name="FontPanel" line="76">
            <extends class="JPanel"/>
            <comment line="84">
                / This panel is combination of the text drawing area of Font2DTest
                / and the custom controlled scroll bar                
            </comment>
            <comment line="89">
                / Drawing Option Constants                
            </comment>
            <comment line="120">
                / General Graphics Variable                
            </comment>
            <comment line="128">
                / ABP                
            </comment>
            <comment line="130">
                / Printing constants and variables                
            </comment>
            <comment line="138">
                / Text drawing variables                
            </comment>
            <comment line="155">
                / Parent Font2DTest panel                
            </comment>
            <comment line="190">
                / Functions called by the main programs to set the various parameters                
            </comment>
            <comment line="199">
                / convenience fcn to create AffineTransform of appropriate type                
            </comment>
            <comment line="306">
                / Prints out the text display area                
            </comment>
            <comment line="325">
                / Displays the page setup dialog and updates PageFormat info                
            </comment>
            <comment line="334">
                / Obtains the information about selected font                
            </comment>
            <comment line="350">
                / Accessor for the font information                
            </comment>
            <comment line="355">
                / Collects the currectly set options and returns them as string                
            </comment>
            <comment line="376">
                / Reload all options and refreshes the canvas                
            </comment>
            <comment line="399">
                / Writes the current screen to PNG file                
            </comment>
            <comment line="404">
                / When scrolled using the scroll bar, update the backbuffer                
            </comment>
            <comment line="418">
                / Inner class definition...                
            </comment>
            <comment line="420">
                / Inner panel that holds the actual drawing area and its routines                
            </comment>
            <implements interface="AdjustmentListener"/>
            <javadoc line="76">
                FontPanel.java                
                <author>
                    Shinsuke Fukuda                    
                </author>
                <author>
                    Ankit Patel [Conversion to Swing - 01/07/30]                    
                </author>
            </javadoc>
            <declaration name="STYLES" type="String" line="89"/>
            <declaration name="NONE" type="int" line="92"/>
            <declaration name="SCALE" type="int" line="93"/>
            <declaration name="SHEAR" type="int" line="94"/>
            <declaration name="ROTATE" type="int" line="95"/>
            <declaration name="TRANSFORMS" type="String" line="96"/>
            <declaration name="DRAW_STRING" type="int" line="99"/>
            <declaration name="DRAW_CHARS" type="int" line="100"/>
            <declaration name="DRAW_BYTES" type="int" line="101"/>
            <declaration name="DRAW_GLYPHV" type="int" line="102"/>
            <declaration name="TL_DRAW" type="int" line="103"/>
            <declaration name="GV_OUTLINE" type="int" line="104"/>
            <declaration name="TL_OUTLINE" type="int" line="105"/>
            <declaration name="METHODS" type="String" line="106"/>
            <declaration name="RANGE_TEXT" type="int" line="110"/>
            <declaration name="ALL_GLYPHS" type="int" line="111"/>
            <declaration name="USER_TEXT" type="int" line="112"/>
            <declaration name="FILE_TEXT" type="int" line="113"/>
            <declaration name="MS_OPENING" type="String" line="114"/>
            <declaration name="MS_CLOSING" type="String" line="116"/>
            <declaration name="verticalBar" type="JScrollBar" line="120"/>
            <declaration name="fc" type="FontCanvas" line="121"/>
            <declaration name="updateBackBuffer" type="boolean" line="122"/>
            <declaration name="updateFontMetrics" type="boolean" line="123"/>
            <declaration name="updateFont" type="boolean" line="124"/>
            <declaration name="force16Cols" type="boolean" line="125"/>
            <declaration name="showingError" type="boolean" line="126"/>
            <declaration name="g2Transform" type="int" line="127"/>
            <declaration name="ONE_PAGE" type="int" line="130"/>
            <declaration name="CUR_RANGE" type="int" line="131"/>
            <declaration name="ALL_TEXT" type="int" line="132"/>
            <declaration name="printMode" type="int" line="133"/>
            <declaration name="page" type="PageFormat" line="134"/>
            <declaration name="printer" type="PrinterJob" line="135"/>
            <declaration name="fontName" type="String" line="138"/>
            <declaration name="fontSize" type="float" line="139"/>
            <declaration name="fontStyle" type="int" line="140"/>
            <declaration name="fontTransform" type="int" line="141"/>
            <declaration name="testFont" type="Font" line="142"/>
            <declaration name="antiAliasType" type="Object" line="143"/>
            <declaration name="fractionalMetricsType" type="Object" line="144"/>
            <declaration name="lcdContrast" type="Object" line="145"/>
            <declaration name="drawMethod" type="int" line="146"/>
            <declaration name="textToUse" type="int" line="147"/>
            <declaration name="userText" type="String" line="148"/>
            <declaration name="fileText" type="String" line="149"/>
            <declaration name="drawRange" type="int" line="150"/>
            <declaration name="fontInfos" type="String" line="151"/>
            <declaration name="showGrid" type="boolean" line="152"/>
            <declaration name="f2dt" type="Font2DTest" line="155"/>
            <declaration name="parent" type="JFrame" line="156"/>
            <method name="FontPanel" type="constructor" line="158">
                <params>
                    <param name="demo" type="Font2DTest"/>
                    <param name="f" type="JFrame"/>
                </params>
                <comment line="178">
                    / Initialize font and its infos                    
                </comment>
                <anonymous_class line="170">
                    <method name="componentResized" type="void" line="171">
                        <params>
                            <param name="e" type="ComponentEvent"/>
                        </params>
                    </method>
                </anonymous_class>
                <scope line="179"/>
            </method>
            <method name="getPreferredSize" type="Dimension" line="185"/>
            <method name="setTransformG2" type="void" line="191">
                <params>
                    <param name="transform" type="int"/>
                </params>
            </method>
            <method name="getAffineTransform" type="AffineTransform" line="199">
                <params>
                    <param name="transform" type="int"/>
                </params>
                <comment line="201">
                    / ABP                    
                </comment>
                <comment line="214">
                    System.err.println( &quot;Illegal G2 Transform Arg: &quot; + transform);                    
                </comment>
                <declaration name="at" type="AffineTransform" line="201"/>
            </method>
            <method name="setFontParams" type="void" line="221">
                <params>
                    <param name="obj" type="Object"/>
                    <param name="size" type="float"/>
                    <param name="style" type="int"/>
                    <param name="transform" type="int"/>
                </params>
            </method>
            <method name="setFontParams" type="void" line="226">
                <params>
                    <param name="name" type="String"/>
                    <param name="size" type="float"/>
                    <param name="style" type="int"/>
                    <param name="transform" type="int"/>
                </params>
                <comment line="237">
                    / Recreate the font as specified                    
                </comment>
                <comment line="251">
                    / Tell main panel to update the font info                    
                </comment>
                <declaration name="fontModified" type="boolean" line="227"/>
                <scope line="238"/>
                <scope line="242">
                    <declaration name="at" type="AffineTransform" line="243"/>
                </scope>
                <scope line="249"/>
            </method>
            <method name="setRenderingHints" type="void" line="256">
                <params>
                    <param name="aa" type="Object"/>
                    <param name="fm" type="Object"/>
                    <param name="contrast" type="Object"/>
                </params>
            </method>
            <method name="setDrawMethod" type="void" line="265">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <method name="setTextToDraw" type="void" line="272">
                <params>
                    <param name="i" type="int"/>
                    <param name="range" type="int"/>
                    <param name="textSet" type="String"/>
                    <param name="fileData" type="String"/>
                </params>
                <scope line="281"/>
            </method>
            <method name="setGridDisplay" type="void" line="292">
                <params>
                    <param name="b" type="boolean"/>
                </params>
            </method>
            <method name="setForce16Columns" type="void" line="298">
                <params>
                    <param name="b" type="boolean"/>
                </params>
            </method>
            <method name="doPrint" type="void" line="306">
                <params>
                    <param name="i" type="int"/>
                </params>
                <scope line="307"/>
                <scope line="314">
                    <scope line="315"/>
                    <scope line="318"/>
                </scope>
            </method>
            <method name="doPageSetup" type="void" line="325">
                <scope line="326"/>
            </method>
            <method name="updateFontInfo" type="void" line="334">
                <declaration name="numGlyphs" type="int" line="335"/>
                <scope line="339"/>
            </method>
            <method name="getFontInfo" type="String[]" line="350"/>
            <method name="getCurrentOptions" type="String" line="355">
                <comment line="357">
                    / Create a new String to store the options
                    / The array will contain all 8 setting (font name, size...) and
                    / character range or user text data used (no file text data)                    
                </comment>
                <declaration name="userTextSize" type="int" line="359"/>
                <declaration name="options" type="String" line="360"/>
            </method>
            <method name="loadOptions" type="void" line="380">
                <params>
                    <param name="grid" type="boolean"/>
                    <param name="force16" type="boolean"/>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                    <param name="name" type="String"/>
                    <param name="size" type="float"/>
                    <param name="style" type="int"/>
                    <param name="transform" type="int"/>
                    <param name="g2transform" type="int"/>
                    <param name="text" type="int"/>
                    <param name="method" type="int"/>
                    <param name="aa" type="int"/>
                    <param name="fm" type="int"/>
                    <param name="contrast" type="int"/>
                    <param name="user" type="String"/>
                </params>
                <comment line="384">
                    / Since repaint call has a low priority, these functions will finish
                    / before the actual repainting is done                    
                </comment>
                <comment line="388">
                    previous call to readTextFile has already set the text to draw                    
                </comment>
                <comment line="393">
                    ABP                    
                </comment>
                <declaration name="range" type="int" line="381"/>
                <scope line="388"/>
            </method>
            <method name="doSavePNG" type="void" line="399">
                <params>
                    <param name="fileName" type="String"/>
                </params>
            </method>
            <method name="adjustmentValueChanged" type="void" line="404">
                <params>
                    <param name="e" type="AdjustmentEvent"/>
                </params>
            </method>
            <method name="paintComponent" type="void" line="409">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
                <comment line="411">
                    Windows does not repaint correctly, after
                     a zoom. Thus, we need to force the canvas
                     to repaint, but only once. After the first repaint,
                     everything stabilizes. [ABP]                    
                </comment>
            </method>
            <class name="FontCanvas" line="420">
                <extends class="JPanel"/>
                <comment line="423">
                    / Number of characters that will fit across and down this canvas                    
                </comment>
                <comment line="426">
                    / First and last character/line that will be drawn
                    / Limit is the end of range/text where no more draw will be done                    
                </comment>
                <comment line="430">
                    / FontMetrics variables
                    / Here, gridWidth is equivalent to maxAdvance (slightly bigger though)
                    / and gridHeight is equivalent to lineHeight                    
                </comment>
                <comment line="435">
                    / Offset from the top left edge of the canvas where the draw will start                    
                </comment>
                <comment line="438">
                    / Offscreen buffer of this canvas                    
                </comment>
                <comment line="441">
                    / LineBreak&apos;ed TextLayout vector                    
                </comment>
                <comment line="444">
                    / Whether the current draw command requested is for printing                    
                </comment>
                <comment line="447">
                    / Other printing infos                    
                </comment>
                <comment line="452">
                    / Information about zooming (used with range text draw)                    
                </comment>
                <comment line="460">
                    ABP                    
                </comment>
                <comment line="462">
                    / Status bar message backup                    
                </comment>
                <comment line="465">
                    / Error constants                    
                </comment>
                <comment line="476">
                    / Other variables                    
                </comment>
                <comment line="508">
                    / Sets the font, hints, according to the set parameters                    
                </comment>
                <comment line="535">
                    / Draws the grid (Used for unicode/glyph range drawing)                    
                </comment>
                <comment line="549">
                    / Draws one character at time onto the canvas according to
                    / the method requested (Used for RANGE_TEXT and ALL_GLYPHS)                    
                </comment>
                <comment line="635">
                    / Draws one line of text at given position                    
                </comment>
                <comment line="688">
                    / Draws one line of text at given position                    
                </comment>
                <comment line="705">
                    / If textToUse is set to range drawing, then convert
                    / int to hex string and prepends 0s to make it length 4
                    / Otherwise line number was fed; simply return number + 1 converted to String
                    / (This is because first line is 1, not 0)                    
                </comment>
                <comment line="719">
                    / Resets the scrollbar to display correct range of text currently on screen
                    / (This scrollbar is not part of a &quot;ScrollPane&quot;. It merely simulates its effect by
                    /  indicating the necessary area to be drawn within the panel.
                    /  By doing this, it prevents creating gigantic panel when large text range,
                    /  i.e. CJK Ideographs, is requested)                    
                </comment>
                <comment line="756">
                    / Calculates the font&apos;s metrics that will be used for draw                    
                </comment>
                <comment line="827">
                    / Calculates the amount of text that will be displayed on screen                    
                </comment>
                <comment line="888">
                    / Draws text according to the parameters set by Font2DTest GUI                    
                </comment>
                <comment line="982">
                    / Component paintComponent function...
                    / Draws/Refreshes canvas according to flag(s) set by other functions                    
                </comment>
                <comment line="1006">
                    / Printable interface function
                    / Component print function...                    
                </comment>
                <comment line="1079">
                    / Ouputs the current canvas into a given PNG file                    
                </comment>
                <comment line="1090">
                    / Figures out whether a character at the pointer location is valid
                    / And if so, updates mouse location informations, as well as
                    / the information on the status bar                    
                </comment>
                <comment line="1121">
                    / Shows (updates) the character zoom window                    
                </comment>
                <comment line="1185">
                    / Listener Functions                    
                </comment>
                <comment line="1187">
                    / MouseListener interface function
                    / Zooms a character when mouse is pressed above it                    
                </comment>
                <comment line="1198">
                    / MouseListener interface function
                    / Redraws the area that was drawn over by zoomed character                    
                </comment>
                <comment line="1209">
                    / MouseListener interface function
                    / Resets the status bar to display range instead of a specific character                    
                </comment>
                <comment line="1216">
                    / MouseMotionListener interface function
                    / Adjusts the status bar message when mouse moves over a character                    
                </comment>
                <comment line="1225">
                    / MouseMotionListener interface function
                    / Scrolls the zoomed character when mouse is dragged                    
                </comment>
                <comment line="1235">
                    / Empty function to comply with interface requirement                    
                </comment>
                <comment line="1241">
                    / Error ID                    
                </comment>
                <implements interface="MouseListener"/>
                <implements interface="MouseMotionListener"/>
                <implements interface="Printable"/>
                <declaration name="numCharAcross" type="int" line="423"/>
                <declaration name="drawStart" type="int" line="427"/>
                <declaration name="maxAscent" type="int" line="432"/>
                <declaration name="canvasInset_X" type="int" line="435"/>
                <declaration name="backBuffer" type="BufferedImage" line="438"/>
                <declaration name="lineBreakTLs" type="Vector" line="441"/>
                <declaration name="isPrinting" type="boolean" line="444"/>
                <declaration name="lastPage" type="int" line="447"/>
                <declaration name="PR_OFFSET" type="int" line="448"/>
                <declaration name="PR_TITLE_LINEHEIGHT" type="int" line="449"/>
                <declaration name="zoomWindow" type="JWindow" line="452"/>
                <declaration name="zoomImage" type="BufferedImage" line="453"/>
                <declaration name="mouseOverCharX" type="int" line="454"/>
                <declaration name="currMouseOverChar" type="int" line="455"/>
                <declaration name="ZOOM" type="float" line="456"/>
                <declaration name="nowZooming" type="boolean" line="457"/>
                <declaration name="firstTime" type="boolean" line="458"/>
                <declaration name="backupStatusString" type="String" line="462"/>
                <declaration name="ERRORS" type="String" line="465"/>
                <declaration name="DRAW_BYTES_ERROR" type="int" line="471"/>
                <declaration name="CANT_FIT_DRAW" type="int" line="472"/>
                <declaration name="CANT_FIT_PRINT" type="int" line="473"/>
                <declaration name="blankCursor" type="Cursor" line="476"/>
                <method name="FontCanvas" type="constructor" line="478">
                    <comment line="485">
                        / Creates an invisble pointer by giving it bogus image
                        / Possibly find a workaround for this...                        
                    </comment>
                    <declaration name="tk" type="Toolkit" line="486"/>
                    <declaration name="bogus" type="byte" line="487"/>
                    <anonymous_class line="491">
                        <method name="paint" type="void" line="492">
                            <params>
                                <param name="g" type="Graphics"/>
                            </params>
                        </method>
                    </anonymous_class>
                </method>
                <method name="firstTime" type="boolean" line="500"/>
                <method name="refresh" type="void" line="501"/>
                <method name="setParams" type="void" line="508">
                    <params>
                        <param name="g2" type="Graphics2D"/>
                    </params>
                    <comment line="514">
                        I am preserving a somewhat dubious behaviour of this program.
                         Outline text would be drawn anti-aliased by setting the
                         graphics anti-aliasing hint if the text anti-aliasing hint
                         was set. The dubious element here is that people simply
                         using this program may think this is built-in behaviour
                         but its not - at least not when the app explictly draws
                         outline text.
                         This becomes more dubious in cases such as &quot;GASP&quot; where the
                         size at which text is AA&apos;ed is not something you can easily
                         calculate, so mimicing that behaviour isn&apos;t going to be easy.
                         So I precisely preserve the behaviour : this is done only
                         if the AA value is &quot;ON&quot;. Its not applied in the other cases.                        
                    </comment>
                    <scope line="527"/>
                    <scope line="529"/>
                </method>
                <method name="drawGrid" type="void" line="535">
                    <params>
                        <param name="g2" type="Graphics2D"/>
                    </params>
                    <declaration name="totalGridWidth" type="int" line="536"/>
                    <declaration name="totalGridHeight" type="int" line="537"/>
                </method>
                <method name="modeSpecificDrawChar" type="void" line="551">
                    <params>
                        <param name="g2" type="Graphics2D"/>
                        <param name="charCode" type="int"/>
                        <param name="baseX" type="int"/>
                        <param name="baseY" type="int"/>
                    </params>
                    <comment line="560">
                        / Create GlyphVector to measure the exact visual advance
                        / Using that number, adjust the position of the character drawn                        
                    </comment>
                    <comment line="568">
                        getPixelBounds returns a result in device space.
                         we need to convert back to user space to be able to
                         calculate the shift as baseX is in user space.                        
                    </comment>
                    <comment line="582">
                        / ABP - keep track of old tform, restore it later                        
                    </comment>
                    <comment line="631">
                        / ABP - restore old tform                        
                    </comment>
                    <declaration name="gv" type="GlyphVector" line="552"/>
                    <declaration name="oneGlyph" type="int" line="553"/>
                    <declaration name="charArray" type="char" line="554"/>
                    <declaration name="frc" type="FontRenderContext" line="556"/>
                    <declaration name="oldTX" type="AffineTransform" line="557"/>
                    <declaration name="r2d2" type="Rectangle2D" line="565"/>
                    <declaration name="shiftedX" type="int" line="566"/>
                    <scope line="570">
                        <declaration name="pt" type="double" line="571"/>
                    </scope>
                    <scope line="578"/>
                    <scope line="588">
                        <scope line="591"/>
                        <declaration name="oneByte" type="byte" line="605"/>
                        <declaration name="tl" type="TextLayout" line="612"/>
                        <declaration name="tlo" type="TextLayout" line="623"/>
                    </scope>
                </method>
                <method name="modeSpecificDrawLine" type="void" line="636">
                    <params>
                        <param name="g2" type="Graphics2D"/>
                        <param name="line" type="String"/>
                        <param name="baseX" type="int"/>
                        <param name="baseY" type="int"/>
                    </params>
                    <comment line="638">
                        / ABP - keep track of old tform, restore it later                        
                    </comment>
                    <comment line="683">
                        / ABP - restore old tform                        
                    </comment>
                    <declaration name="oldTx" type="AffineTransform" line="638"/>
                    <scope line="651">
                        <declaration name="lineBytes" type="byte" line="652"/>
                    </scope>
                    <scope line="655"/>
                    <declaration name="gv" type="GlyphVector" line="660"/>
                    <declaration name="tl" type="TextLayout" line="665"/>
                    <declaration name="gvo" type="GlyphVector" line="670"/>
                    <declaration name="tlo" type="TextLayout" line="675"/>
                    <declaration name="at" type="AffineTransform" line="678"/>
                </method>
                <method name="tlDrawLine" type="void" line="689">
                    <params>
                        <param name="g2" type="Graphics2D"/>
                        <param name="tl" type="TextLayout"/>
                        <param name="baseX" type="float"/>
                        <param name="baseY" type="float"/>
                    </params>
                    <comment line="691">
                        / ABP - keep track of old tform, restore it later                        
                    </comment>
                    <comment line="699">
                        / ABP - restore old tform                        
                    </comment>
                    <declaration name="oldTx" type="AffineTransform" line="691"/>
                </method>
                <method name="modeSpecificNumStr" type="String" line="708">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                    <declaration name="s" type="StringBuffer" line="712"/>
                </method>
                <method name="resetScrollbar" type="void" line="723">
                    <params>
                        <param name="oldValue" type="int"/>
                    </params>
                    <comment line="729">
                        / textToUse == ALL_GLYPHS                        
                    </comment>
                    <comment line="744">
                        / textToUse == FILE_TEXT;                        
                    </comment>
                    <declaration name="totalNumRows" type="int" line="724"/>
                    <scope line="725"/>
                    <scope line="740"/>
                    <scope line="747"/>
                    <scope line="750"/>
                </method>
                <method name="calcFontMetrics" type="void" line="756">
                    <params>
                        <param name="g2d" type="Graphics2D"/>
                        <param name="w" type="int"/>
                        <param name="h" type="int"/>
                    </params>
                    <comment line="761">
                        / ABP                        
                    </comment>
                    <comment line="775">
                        / Give slight extra room for each character                        
                    </comment>
                    <comment line="798">
                        / gridWidth and numCharAcross will not be used in this mode...                        
                    </comment>
                    <comment line="804">
                        / If this is text loaded from file, prepares the LineBreak&apos;ed
                        / text layout at this point                        
                    </comment>
                    <declaration name="fm" type="FontMetrics" line="757"/>
                    <declaration name="g2" type="Graphics2D" line="758"/>
                    <scope line="761"/>
                    <scope line="765"/>
                    <scope line="773"/>
                    <scope line="793">
                        <scope line="805">
                            <scope line="809">
                                <declaration name="as" type="AttributedString" line="810"/>
                                <declaration name="lbm" type="LineBreakMeasurer" line="813"/>
                            </scope>
                        </scope>
                    </scope>
                </method>
                <method name="calcTextRange" type="void" line="827">
                    <comment line="835">
                        / printMode == CUR_RANGE                        
                    </comment>
                    <comment line="854">
                        / printMode == ALL_TEXT                        
                    </comment>
                    <comment line="871">
                        ABP                        
                    </comment>
                    <comment line="878">
                        / Change the status bar if not printing...                        
                    </comment>
                    <declaration name="displaying" type="String" line="828"/>
                    <scope line="830">
                        <scope line="838"/>
                    </scope>
                    <scope line="849">
                        <scope line="855"/>
                    </scope>
                    <scope line="871"/>
                    <scope line="878"/>
                </method>
                <method name="drawText" type="void" line="888">
                    <params>
                        <param name="g" type="Graphics"/>
                        <param name="w" type="int"/>
                        <param name="h" type="int"/>
                    </params>
                    <comment line="892">
                        / Create back buffer when not printing, and its Graphics2D
                        / Then set drawing parameters for that Graphics2D object                        
                    </comment>
                    <comment line="904">
                        / sets font, RenderingHints.                        
                    </comment>
                    <comment line="907">
                        / If flag is set, recalculate fontMetrics and reset the scrollbar                        
                    </comment>
                    <comment line="909">
                        / NOTE: re-calculates in case G2 transform
                        / is something other than NONE                        
                    </comment>
                    <comment line="914">
                        / Calculate the amount of text that can be drawn...                        
                    </comment>
                    <comment line="917">
                        / Draw according to the set &quot;Text to Use&quot; mode                        
                    </comment>
                    <comment line="933">
                        if ( !isPrinting ) {
                            g.setClip( gridLocX, gridLocY, gridWidth + 1, gridHeight + 1 );
                            g.drawImage( backBuffer, 0, 0, this );                        
                    </comment>
                    <comment line="936">
                        }                        
                    </comment>
                    <comment line="969">
                        yPos += oneLine.getAscent();                        
                    </comment>
                    <comment line="970">
                        ascent                        
                    </comment>
                    <comment line="971">
                        oneLine.draw( g2, xPos, yPos );                        
                    </comment>
                    <comment line="973">
                        yPos += oneLine.getDescent() + oneLine.getLeading();                        
                    </comment>
                    <comment line="974">
                        descent + leading                        
                    </comment>
                    <declaration name="g2" type="Graphics2D" line="889"/>
                    <scope line="895"/>
                    <scope line="907"/>
                    <scope line="917">
                        <declaration name="charToDraw" type="int" line="918"/>
                        <scope line="924">
                            <scope line="925">
                                <declaration name="gridLocX" type="int" line="926"/>
                                <declaration name="gridLocY" type="int" line="927"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="940">
                        <scope line="945">
                            <declaration name="lineStartX" type="int" line="946"/>
                            <declaration name="lineStartY" type="int" line="947"/>
                        </scope>
                    </scope>
                    <scope line="951">
                        <declaration name="xPos" type="float" line="952"/>
                        <scope line="957">
                            <declaration name="oneLine" type="TextLayout" line="958"/>
                            <declaration name="fmData" type="float" line="963"/>
                            <scope line="964">
                                <declaration name="at" type="AffineTransform" line="965"/>
                            </scope>
                        </scope>
                    </scope>
                </method>
                <method name="paintComponent" type="void" line="983">
                    <params>
                        <param name="g" type="Graphics"/>
                    </params>
                    <comment line="998">
                        / Screen refresh                        
                    </comment>
                    <scope line="984">
                        <declaration name="d" type="Dimension" line="985"/>
                        <scope line="987"/>
                        <scope line="990"/>
                    </scope>
                    <scope line="996"/>
                </method>
                <method name="print" type="int" line="1007">
                    <params>
                        <param name="g" type="Graphics"/>
                        <param name="pf" type="PageFormat"/>
                        <param name="pageIndex" type="int"/>
                    </params>
                    <comment line="1010">
                        / Reset the last page index to max...                        
                    </comment>
                    <comment line="1026">
                        / Back up metrics and other drawing info before printing modifies it                        
                    </comment>
                    <comment line="1035">
                        / Push the actual draw area 60 down to allow info to be printed                        
                    </comment>
                    <comment line="1045">
                        / Draw information about what is being printed                        
                    </comment>
                    <comment line="1065">
                        / This indicates that the draw will be completed with this page                        
                    </comment>
                    <comment line="1068">
                        / Restore the changed values back...
                        / This is important for JScrollBar settings and LineBreak&apos;ed TLs                        
                    </comment>
                    <scope line="1008"/>
                    <scope line="1014"/>
                    <scope line="1018"/>
                    <declaration name="pageWidth" type="int" line="1023"/>
                    <declaration name="pageHeight" type="int" line="1024"/>
                    <declaration name="backupDrawStart" type="int" line="1026"/>
                    <declaration name="backupNumCharAcross" type="int" line="1027"/>
                    <declaration name="backupLineBreakTLs" type="Vector" line="1028"/>
                    <scope line="1036"/>
                    <scope line="1039"/>
                    <declaration name="hints" type="String" line="1045"/>
                    <declaration name="infoLine1" type="String" line="1048"/>
                    <declaration name="infoLine2" type="String" line="1051"/>
                    <declaration name="infoLine3" type="String" line="1053"/>
                    <declaration name="infoLine4" type="String" line="1054"/>
                </method>
                <method name="writePNG" type="void" line="1079">
                    <params>
                        <param name="fileName" type="String"/>
                    </params>
                    <scope line="1080"/>
                    <scope line="1083"/>
                </method>
                <method name="checkMouseLoc" type="boolean" line="1092">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                    <comment line="1099">
                        / Check to make sure the mouse click location is within drawn area                        
                    </comment>
                    <comment line="1112">
                        / Update status bar                        
                    </comment>
                    <scope line="1094">
                        <declaration name="charLocX" type="int" line="1095"/>
                        <declaration name="charLocY" type="int" line="1096"/>
                        <scope line="1100">
                            <declaration name="mouseOverChar" type="int" line="1101"/>
                        </scope>
                    </scope>
                </method>
                <method name="showZoomed" type="void" line="1121">
                    <comment line="1127">
                        / Calculate the zoom area&apos;s location and size...                        
                    </comment>
                    <comment line="1137">
                        / Position and set size of zoom window as needed                        
                    </comment>
                    <comment line="1141">
                        / If this is not opened as a &quot;secure&quot; window,
                        / it has a banner below the zoom dialog which makes it look really BAD
                        / So enlarge it by a bit                        
                    </comment>
                    <comment line="1149">
                        / Prepare zoomed image                        
                    </comment>
                    <comment line="1165">
                        / This is sort of redundant... since there is a paint function
                        / inside zoomWindow definition that does the drawImage.
                        / (I should be able to call just repaint() here)
                        / However, for some reason, that paint function fails to respond
                        / from second time and on; So I have to force the paint here...                        
                    </comment>
                    <comment line="1176">
                        Windows does not repaint correctly, after
                         a zoom. Thus, we need to force the canvas
                         to repaint, but only once. After the first repaint,
                         everything stabilizes. [ABP]                        
                    </comment>
                    <declaration name="gv" type="GlyphVector" line="1122"/>
                    <declaration name="backup" type="Font" line="1123"/>
                    <declaration name="canvasLoc" type="Point" line="1124"/>
                    <declaration name="dialogOffsetX" type="int" line="1127"/>
                    <declaration name="dialogOffsetY" type="int" line="1128"/>
                    <declaration name="zoomAreaX" type="int" line="1129"/>
                    <declaration name="zoomAreaY" type="int" line="1131"/>
                    <declaration name="zoomAreaWidth" type="int" line="1133"/>
                    <declaration name="zoomAreaHeight" type="int" line="1134"/>
                    <scope line="1138"/>
                    <declaration name="g2" type="Graphics2D" line="1152"/>
                    <scope line="1179"/>
                </method>
                <method name="mousePressed" type="void" line="1188">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                    <scope line="1189">
                        <scope line="1190"/>
                    </scope>
                </method>
                <method name="mouseReleased" type="void" line="1199">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                    <scope line="1200"/>
                </method>
                <method name="mouseExited" type="void" line="1210">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
                <method name="mouseMoved" type="void" line="1217">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                    <scope line="1218"/>
                </method>
                <method name="mouseDragged" type="void" line="1226">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                    <scope line="1228"/>
                </method>
                <method name="mouseClicked" type="void" line="1235">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
                <method name="mouseEntered" type="void" line="1236">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
            </class>
            <class name="CannotDrawException" line="1239">
                <extends class="RuntimeException"/>
                <comment line="423">
                    / Number of characters that will fit across and down this canvas                    
                </comment>
                <comment line="426">
                    / First and last character/line that will be drawn
                    / Limit is the end of range/text where no more draw will be done                    
                </comment>
                <comment line="430">
                    / FontMetrics variables
                    / Here, gridWidth is equivalent to maxAdvance (slightly bigger though)
                    / and gridHeight is equivalent to lineHeight                    
                </comment>
                <comment line="435">
                    / Offset from the top left edge of the canvas where the draw will start                    
                </comment>
                <comment line="438">
                    / Offscreen buffer of this canvas                    
                </comment>
                <comment line="441">
                    / LineBreak&apos;ed TextLayout vector                    
                </comment>
                <comment line="444">
                    / Whether the current draw command requested is for printing                    
                </comment>
                <comment line="447">
                    / Other printing infos                    
                </comment>
                <comment line="452">
                    / Information about zooming (used with range text draw)                    
                </comment>
                <comment line="460">
                    ABP                    
                </comment>
                <comment line="462">
                    / Status bar message backup                    
                </comment>
                <comment line="465">
                    / Error constants                    
                </comment>
                <comment line="476">
                    / Other variables                    
                </comment>
                <comment line="508">
                    / Sets the font, hints, according to the set parameters                    
                </comment>
                <comment line="535">
                    / Draws the grid (Used for unicode/glyph range drawing)                    
                </comment>
                <comment line="549">
                    / Draws one character at time onto the canvas according to
                    / the method requested (Used for RANGE_TEXT and ALL_GLYPHS)                    
                </comment>
                <comment line="635">
                    / Draws one line of text at given position                    
                </comment>
                <comment line="688">
                    / Draws one line of text at given position                    
                </comment>
                <comment line="705">
                    / If textToUse is set to range drawing, then convert
                    / int to hex string and prepends 0s to make it length 4
                    / Otherwise line number was fed; simply return number + 1 converted to String
                    / (This is because first line is 1, not 0)                    
                </comment>
                <comment line="719">
                    / Resets the scrollbar to display correct range of text currently on screen
                    / (This scrollbar is not part of a &quot;ScrollPane&quot;. It merely simulates its effect by
                    /  indicating the necessary area to be drawn within the panel.
                    /  By doing this, it prevents creating gigantic panel when large text range,
                    /  i.e. CJK Ideographs, is requested)                    
                </comment>
                <comment line="756">
                    / Calculates the font&apos;s metrics that will be used for draw                    
                </comment>
                <comment line="827">
                    / Calculates the amount of text that will be displayed on screen                    
                </comment>
                <comment line="888">
                    / Draws text according to the parameters set by Font2DTest GUI                    
                </comment>
                <comment line="982">
                    / Component paintComponent function...
                    / Draws/Refreshes canvas according to flag(s) set by other functions                    
                </comment>
                <comment line="1006">
                    / Printable interface function
                    / Component print function...                    
                </comment>
                <comment line="1079">
                    / Ouputs the current canvas into a given PNG file                    
                </comment>
                <comment line="1090">
                    / Figures out whether a character at the pointer location is valid
                    / And if so, updates mouse location informations, as well as
                    / the information on the status bar                    
                </comment>
                <comment line="1121">
                    / Shows (updates) the character zoom window                    
                </comment>
                <comment line="1185">
                    / Listener Functions                    
                </comment>
                <comment line="1187">
                    / MouseListener interface function
                    / Zooms a character when mouse is pressed above it                    
                </comment>
                <comment line="1198">
                    / MouseListener interface function
                    / Redraws the area that was drawn over by zoomed character                    
                </comment>
                <comment line="1209">
                    / MouseListener interface function
                    / Resets the status bar to display range instead of a specific character                    
                </comment>
                <comment line="1216">
                    / MouseMotionListener interface function
                    / Adjusts the status bar message when mouse moves over a character                    
                </comment>
                <comment line="1225">
                    / MouseMotionListener interface function
                    / Scrolls the zoomed character when mouse is dragged                    
                </comment>
                <comment line="1235">
                    / Empty function to comply with interface requirement                    
                </comment>
                <comment line="1241">
                    / Error ID                    
                </comment>
                <declaration name="id" type="int" line="1241"/>
                <method name="CannotDrawException" type="constructor" line="1243">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                </method>
            </class>
            <declaration name="name" type="String" line="1253"/>
            <declaration name="hint" type="Object" line="1254"/>
            <declaration name="valArray" type="FMValues[]" line="1256"/>
            <method name="FMValues" type="constructor" line="1258">
                <params>
                    <param name="s" type="String"/>
                    <param name="o" type="Object"/>
                </params>
            </method>
            <method name="toString" type="String" line="1263"/>
            <method name="getHint" type="Object" line="1267"/>
            <method name="getValue" type="Object" line="1270">
                <params>
                    <param name="ordinal" type="int"/>
                </params>
                <scope line="1271"/>
                <scope line="1274">
                    <scope line="1275"/>
                </scope>
            </method>
            <method name="getArray" type="FMValues[]" line="1281">
                <scope line="1282"/>
            </method>
            <method name="getHintVal" type="int" line="1288">
                <params>
                    <param name="hint" type="Object"/>
                </params>
                <scope line="1290">
                    <scope line="1291"/>
                </scope>
            </method>
            <declaration name="name" type="String" line="1309"/>
            <declaration name="hint" type="Object" line="1310"/>
            <declaration name="valArray" type="AAValues[]" line="1312"/>
            <method name="AAValues" type="constructor" line="1314">
                <params>
                    <param name="s" type="String"/>
                    <param name="o" type="Object"/>
                </params>
            </method>
            <method name="toString" type="String" line="1319"/>
            <method name="getHint" type="Object" line="1323"/>
            <method name="isLCDMode" type="boolean" line="1327">
                <params>
                    <param name="o" type="Object"/>
                </params>
            </method>
            <method name="getValue" type="Object" line="1332">
                <params>
                    <param name="ordinal" type="int"/>
                </params>
                <scope line="1333"/>
                <scope line="1336">
                    <scope line="1337"/>
                </scope>
            </method>
            <method name="getArray" type="AAValues[]" line="1344">
                <scope line="1345">
                    <declaration name="oa" type="Object[]" line="1346"/>
                </scope>
            </method>
            <method name="getHintVal" type="int" line="1352">
                <params>
                    <param name="hint" type="Object"/>
                </params>
                <scope line="1354">
                    <scope line="1355"/>
                </scope>
            </method>
            <declaration name="defaultContrast" type="Integer" line="1364"/>
            <method name="getDefaultLCDContrast" type="Integer" line="1365">
                <scope line="1366">
                    <declaration name="gc" type="GraphicsConfiguration" line="1367"/>
                    <declaration name="g2d" type="Graphics2D" line="1370"/>
                </scope>
            </method>
        </class>
    </source>