<?xml version="1.0" encoding="UTF-8"?>
    <source package="">
        <import package="javax.swing"/>
        <import package="javax.swing.filechooser"/>
        <import package="java.io.File"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Map"/>
        <class name="ExampleFileView" line="6">
            <extends class="FileView"/>
            <javadoc line="6">
                A convenience implementation of the FileView interface that
                  manages name, icon, traversable, and file type information.
                  This implementation will work well with file systems that use
                  &quot;dot&quot; extensions to indicate file type. For example: &quot;picture.gif&quot;
                  as a gif image.
                  If the java.io.File ever contains some of this information, such as
                  file type, icon, and hidden file inforation, this implementation may
                  become obsolete. At minimum, it should be rewritten at that time to
                  use any new type information provided by java.io.File
                  Example:
                  JFileChooser chooser = new JFileChooser();
                  fileView = new ExampleFileView();
                  fileView.putIcon(&quot;jpg&quot;, new ImageIcon(&quot;images/jpgIcon.jpg&quot;));
                  fileView.putIcon(&quot;gif&quot;, new ImageIcon(&quot;images/gifIcon.gif&quot;));
                  chooser.setFileView(fileView);                
                <author>
                    Jeff Dinkins                    
                </author>
            </javadoc>
            <declaration name="icons" type="Map&lt;String,Icon&gt;" line="25"/>
            <declaration name="fileDescriptions" type="Map&lt;File,String&gt;" line="26"/>
            <declaration name="typeDescriptions" type="Map&lt;String,String&gt;" line="27"/>
            <javadoc line="28">
                The name of the file.  Do nothing special here. Let
                  the system file view handle this.                
                <see>
                    FileView#getName                    
                </see>
            </javadoc>
            <method name="getName" type="String" line="33">
                <params>
                    <param name="f" type="File"/>
                </params>
            </method>
            <javadoc line="36">
                Adds a human readable description of the file.                
            </javadoc>
            <method name="putDescription" type="void" line="39">
                <params>
                    <param name="f" type="File"/>
                    <param name="fileDescription" type="String"/>
                </params>
            </method>
            <javadoc line="42">
                A human readable description of the file.                
                <see>
                    FileView#getDescription                    
                </see>
            </javadoc>
            <method name="getDescription" type="String" line="46">
                <params>
                    <param name="f" type="File"/>
                </params>
            </method>
            <javadoc line="49">
                Adds a human readable type description for files. Based on &quot;dot&quot;
                  extension strings, e.g: &quot;.gif&quot;. Case is ignored.                
            </javadoc>
            <method name="putTypeDescription" type="void" line="53">
                <params>
                    <param name="extension" type="String"/>
                    <param name="typeDescription" type="String"/>
                </params>
            </method>
            <javadoc line="56">
                Adds a human readable type description for files of the type of
                  the passed in file. Based on &quot;dot&quot; extension strings, e.g: &quot;.gif&quot;.
                  Case is ignored.                
            </javadoc>
            <method name="putTypeDescription" type="void" line="61">
                <params>
                    <param name="f" type="File"/>
                    <param name="typeDescription" type="String"/>
                </params>
            </method>
            <javadoc line="64">
                A human readable description of the type of the file.                
                <see>
                    FileView#getTypeDescription                    
                </see>
            </javadoc>
            <method name="getTypeDescription" type="String" line="68">
                <params>
                    <param name="f" type="File"/>
                </params>
            </method>
            <javadoc line="71">
                Convenience method that returns the &quot;dot&quot; extension for the
                  given file.                
            </javadoc>
            <method name="getExtension" type="String" line="75">
                <params>
                    <param name="f" type="File"/>
                </params>
                <declaration name="name" type="String" line="76"/>
                <scope line="77">
                    <declaration name="extensionIndex" type="int" line="78"/>
                    <scope line="79"/>
                </scope>
            </method>
            <javadoc line="86">
                Adds an icon based on the file type &quot;dot&quot; extension
                  string, e.g: &quot;.gif&quot;. Case is ignored.                
            </javadoc>
            <method name="putIcon" type="void" line="90">
                <params>
                    <param name="extension" type="String"/>
                    <param name="icon" type="Icon"/>
                </params>
            </method>
            <javadoc line="93">
                Icon that reperesents this file. Default implementation returns
                  null. You might want to override this to return something more
                  interesting.                
                <see>
                    FileView#getIcon                    
                </see>
            </javadoc>
            <method name="getIcon" type="Icon" line="99">
                <params>
                    <param name="f" type="File"/>
                </params>
                <declaration name="icon" type="Icon" line="100"/>
                <declaration name="extension" type="String" line="101"/>
                <scope line="102"/>
            </method>
            <javadoc line="107">
                Whether the directory is traversable or not. Generic implementation
                  returns true for all directories and special folders.
                  You might want to subtype ExampleFileView to do somethimg more interesting,
                  such as recognize compound documents directories; in such a case you might
                  return a special icon for the directory that makes it look like a regular
                  document, and return false for isTraversable to not allow users to
                  descend into the directory.                
                <see>
                    FileView#isTraversable                    
                </see>
            </javadoc>
            <method name="isTraversable" type="Boolean" line="117">
                <params>
                    <param name="f" type="File"/>
                </params>
            </method>
        </class>
    </source>