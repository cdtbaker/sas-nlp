<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.inputmethods.internal.codepointim">
        <import package="java.awt.AWTEvent"/>
        <import package="java.awt.Toolkit"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.event.InputMethodEvent"/>
        <import package="java.awt.event.KeyEvent"/>
        <import package="java.awt.font.TextAttribute"/>
        <import package="java.awt.font.TextHitInfo"/>
        <import package="java.awt.im.InputMethodHighlight"/>
        <import package="java.awt.im.spi.InputMethod"/>
        <import package="java.awt.im.spi.InputMethodContext"/>
        <import package="java.io.IOException"/>
        <import package="java.text.AttributedString"/>
        <import package="java.util.Locale"/>
        <class name="CodePointInputMethod" line="15">
            <implements interface="InputMethod"/>
            <javadoc line="15">
                The Code Point Input Method is a simple input method that allows Unicode
                  characters to be entered using their code point or code unit values. See the
                  accompanying file README.txt for more information.                
                <author>
                    Brian Beck                    
                </author>
            </javadoc>
            <declaration name="UNSET" type="int" line="22"/>
            <declaration name="ESCAPE" type="int" line="23"/>
            <declaration name="SPECIAL_ESCAPE" type="int" line="24"/>
            <declaration name="SURROGATE_PAIR" type="int" line="25"/>
            <declaration name="context" type="InputMethodContext" line="26"/>
            <declaration name="locale" type="Locale" line="27"/>
            <declaration name="buffer" type="StringBuffer" line="28"/>
            <declaration name="insertionPoint" type="int" line="29"/>
            <declaration name="format" type="int" line="30"/>
            <method name="CodePointInputMethod" type="constructor" line="31"/>
            <javadoc line="33">
                This is the input method&apos;s main routine.  The composed text is stored
                  in buffer.                
            </javadoc>
            <method name="dispatchEvent" type="void" line="37">
                <params>
                    <param name="event" type="AWTEvent"/>
                </params>
                <scope line="38"/>
                <declaration name="e" type="KeyEvent" line="41"/>
                <declaration name="eventID" type="int" line="42"/>
                <declaration name="notInCompositionMode" type="boolean" line="43"/>
                <scope line="44">
                    <scope line="45"/>
                </scope>
                <scope line="57">
                    <declaration name="c" type="char" line="58"/>
                    <scope line="59">
                        <scope line="60"/>
                    </scope>
                    <scope line="65"/>
                </scope>
                <scope line="89">
                    <scope line="90"/>
                </scope>
            </method>
            <method name="composeUnicodeEscape" type="void" line="96">
                <params>
                    <param name="c" type="char"/>
                </params>
                <scope line="107"/>
                <scope line="110"/>
                <scope line="115"/>
                <scope line="118"/>
                <scope line="121"/>
                <scope line="132"/>
                <scope line="135"/>
            </method>
            <method name="waitEscapeCharacter" type="void" line="144">
                <params>
                    <param name="c" type="char"/>
                </params>
                <scope line="145"/>
                <scope line="151">
                    <scope line="152"/>
                </scope>
            </method>
            <method name="waitDigit" type="void" line="159">
                <params>
                    <param name="c" type="char"/>
                </params>
                <scope line="160"/>
                <scope line="164"/>
            </method>
            <method name="waitDigit2" type="void" line="168">
                <params>
                    <param name="c" type="char"/>
                </params>
                <scope line="169">
                    <declaration name="codePoint" type="char" line="171"/>
                    <scope line="172"/>
                    <scope line="177"/>
                </scope>
                <scope line="182"/>
            </method>
            <method name="waitBackSlashOrLowSurrogate" type="void" line="186">
                <params>
                    <param name="c" type="char"/>
                </params>
                <scope line="187">
                    <scope line="188"/>
                    <scope line="194"/>
                    <scope line="200"/>
                </scope>
                <scope line="204"/>
            </method>
            <javadoc line="208">
                Send the composed text to the client.                
            </javadoc>
            <method name="sendComposedText" type="void" line="211">
                <declaration name="as" type="AttributedString" line="212"/>
            </method>
            <javadoc line="216">
                Send the committed text to the client.                
            </javadoc>
            <method name="sendCommittedText" type="void" line="219">
                <declaration name="as" type="AttributedString" line="220"/>
            </method>
            <javadoc line="226">
                Move the insertion point one position to the left in the composed text.
                  Do not let the caret move to the left of the &quot;\\u&quot; or &quot;\\U&quot;.                
            </javadoc>
            <method name="moveCaretLeft" type="void" line="230">
                <declaration name="len" type="int" line="231"/>
                <scope line="232"/>
                <scope line="236"/>
            </method>
            <javadoc line="242">
                Move the insertion point one position to the right in the composed text.                
            </javadoc>
            <method name="moveCaretRight" type="void" line="245">
                <declaration name="len" type="int" line="246"/>
                <scope line="247"/>
            </method>
            <javadoc line="253">
                Delete the character preceding the insertion point in the composed text.
                  If the insertion point is not at the end of the composed text and the
                  preceding text is &quot;\\u&quot; or &quot;\\U&quot;, ring the bell.                
            </javadoc>
            <method name="deletePreviousCharacter" type="void" line="258">
                <scope line="259">
                    <scope line="260"/>
                    <scope line="263"/>
                </scope>
                <scope line="267">
                    <scope line="268">
                        <scope line="269"/>
                    </scope>
                    <scope line="275"/>
                </scope>
                <scope line="279">
                    <scope line="281"/>
                    <scope line="284"/>
                </scope>
            </method>
            <javadoc line="289">
                Delete the character following the insertion point in the composed text.
                  If the insertion point is at the end of the composed text, ring the bell.                
            </javadoc>
            <method name="deleteCharacter" type="void" line="293">
                <scope line="294"/>
                <scope line="298"/>
            </method>
            <method name="startComposition" type="void" line="302"/>
            <method name="cancelComposition" type="void" line="307"/>
            <method name="finishComposition" type="void" line="312">
                <declaration name="len" type="int" line="313"/>
                <scope line="314">
                    <declaration name="codePoint" type="char" line="315"/>
                    <scope line="316"/>
                </scope>
                <scope line="323">
                    <declaration name="codePoint" type="int" line="324"/>
                    <scope line="325"/>
                </scope>
                <scope line="332">
                    <declaration name="codePoint" type="char[]" line="333"/>
                    <scope line="334"/>
                </scope>
            </method>
            <method name="getCodePoint" type="int" line="343">
                <params>
                    <param name="sb" type="StringBuffer"/>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                </params>
                <declaration name="value" type="int" line="344"/>
                <scope line="345"/>
            </method>
            <method name="beep" type="void" line="350"/>
            <method name="activate" type="void" line="353">
                <scope line="354"/>
            </method>
            <method name="deactivate" type="void" line="359">
                <params>
                    <param name="isTemporary" type="boolean"/>
                </params>
                <scope line="360"/>
            </method>
            <method name="dispose" type="void" line="364"/>
            <method name="getControlObject" type="Object" line="366"/>
            <method name="endComposition" type="void" line="369"/>
            <method name="getLocale" type="Locale" line="372"/>
            <method name="hideWindows" type="void" line="375"/>
            <method name="isCompositionEnabled" type="boolean" line="377"/>
            <method name="notifyClientWindowChange" type="void" line="380">
                <params>
                    <param name="location" type="Rectangle"/>
                </params>
            </method>
            <method name="reconvert" type="void" line="382"/>
            <method name="removeNotify" type="void" line="385"/>
            <method name="setCharacterSubsets" type="void" line="387">
                <params>
                    <param name="subsets" type="Character.Subset[]"/>
                </params>
            </method>
            <method name="setCompositionEnabled" type="void" line="389">
                <params>
                    <param name="enable" type="boolean"/>
                </params>
            </method>
            <method name="setInputMethodContext" type="void" line="392">
                <params>
                    <param name="context" type="InputMethodContext"/>
                </params>
            </method>
            <method name="setLocale" type="boolean" line="395">
                <params>
                    <param name="locale" type="Locale"/>
                </params>
            </method>
        </class>
    </source>