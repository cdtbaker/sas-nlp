<?xml version="1.0" encoding="UTF-8"?>
    <source package="com.sun.inputmethods.internal.codepointim">
        <import package="java.awt.AWTEvent"/>
        <import package="java.awt.Toolkit"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.event.InputMethodEvent"/>
        <import package="java.awt.event.KeyEvent"/>
        <import package="java.awt.font.TextAttribute"/>
        <import package="java.awt.font.TextHitInfo"/>
        <import package="java.awt.im.InputMethodHighlight"/>
        <import package="java.awt.im.spi.InputMethod"/>
        <import package="java.awt.im.spi.InputMethodContext"/>
        <import package="java.io.IOException"/>
        <import package="java.text.AttributedString"/>
        <import package="java.util.Locale"/>
        <class name="CodePointInputMethod" line="49">
            <comment line="60">
                \u0000       - \uFFFF                
            </comment>
            <comment line="61">
                \U000000     - \U10FFFF                
            </comment>
            <comment line="62">
                \uD800\uDC00 - \uDBFF\uDFFF                
            </comment>
            <comment line="484">
                The Code Point Input Method supports all locales.                
            </comment>
            <implements interface="InputMethod"/>
            <javadoc line="49">
                The Code Point Input Method is a simple input method that allows Unicode
                  characters to be entered using their code point or code unit values. See the
                  accompanying file README.txt for more information.                
                <author>
                    Brian Beck                    
                </author>
            </javadoc>
            <declaration name="UNSET" type="int" line="58"/>
            <declaration name="ESCAPE" type="int" line="59"/>
            <declaration name="SPECIAL_ESCAPE" type="int" line="60"/>
            <declaration name="SURROGATE_PAIR" type="int" line="61"/>
            <declaration name="context" type="InputMethodContext" line="62"/>
            <declaration name="locale" type="Locale" line="63"/>
            <declaration name="buffer" type="StringBuffer" line="64"/>
            <declaration name="insertionPoint" type="int" line="65"/>
            <declaration name="format" type="int" line="66"/>
            <method name="CodePointInputMethod" type="constructor" line="68"/>
            <javadoc line="71">
                This is the input method&apos;s main routine.  The composed text is stored
                  in buffer.                
            </javadoc>
            <method name="dispatchEvent" type="void" line="75">
                <params>
                    <param name="event" type="AWTEvent"/>
                </params>
                <comment line="77">
                    This input method handles KeyEvent only.                    
                </comment>
                <comment line="87">
                    If we are not in composition mode, pass through                    
                </comment>
                <comment line="103">
                    If we are not in composition mode, wait a back slash                    
                </comment>
                <comment line="105">
                    If the type character is not a back slash, pass through                    
                </comment>
                <comment line="110">
                    Enter to composition mode                    
                </comment>
                <comment line="113">
                    Exit from composition mode                    
                </comment>
                <comment line="116">
                    Delete                    
                </comment>
                <comment line="119">
                    BackSpace                    
                </comment>
                <comment line="122">
                    Escape                    
                </comment>
                <comment line="125">
                    Return                    
                </comment>
                <comment line="126">
                    Tab                    
                </comment>
                <comment line="134">
                    KeyEvent.KEY_RELEASED                    
                </comment>
                <comment line="135">
                    If we are not in composition mode, pass through                    
                </comment>
                <scope line="77"/>
                <declaration name="e" type="KeyEvent" line="81"/>
                <declaration name="eventID" type="int" line="82"/>
                <declaration name="notInCompositionMode" type="boolean" line="83"/>
                <scope line="85">
                    <scope line="87"/>
                </scope>
                <scope line="99">
                    <declaration name="c" type="char" line="100"/>
                    <scope line="103">
                        <scope line="105"/>
                    </scope>
                    <scope line="110"/>
                </scope>
                <scope line="133">
                    <scope line="135"/>
                </scope>
            </method>
            <method name="composeUnicodeEscape" type="void" line="143">
                <params>
                    <param name="c" type="char"/>
                </params>
                <comment line="146">
                    \\                    
                </comment>
                <comment line="149">
                    \\u or \\U                    
                </comment>
                <comment line="150">
                    \\ux or \\Ux                    
                </comment>
                <comment line="151">
                    \\uxx or \\Uxx                    
                </comment>
                <comment line="154">
                    \\uxxx or \\Uxxx                    
                </comment>
                <comment line="161">
                    \\uxxxx or \\Uxxxx                    
                </comment>
                <comment line="170">
                    \\Uxxxxx                    
                </comment>
                <comment line="171">
                    Only SPECIAL_ESCAPE format uses this state.
                     Since the second &quot;\\u&quot; of SURROGATE_PAIR format is inserted
                     automatically, users don&apos;t have to type these keys.                    
                </comment>
                <comment line="176">
                    \\uxxxx\\u                    
                </comment>
                <comment line="177">
                    \\uxxxx\\ux                    
                </comment>
                <comment line="178">
                    \\uxxxx\\uxx                    
                </comment>
                <comment line="179">
                    \\uxxxx\\uxxx                    
                </comment>
                <scope line="154"/>
                <scope line="156"/>
                <scope line="161"/>
                <scope line="163"/>
                <scope line="165"/>
                <scope line="179"/>
                <scope line="181"/>
            </method>
            <method name="waitEscapeCharacter" type="void" line="191">
                <params>
                    <param name="c" type="char"/>
                </params>
                <scope line="192"/>
                <scope line="197">
                    <scope line="198"/>
                </scope>
            </method>
            <method name="waitDigit" type="void" line="206">
                <params>
                    <param name="c" type="char"/>
                </params>
                <scope line="207"/>
                <scope line="210"/>
            </method>
            <method name="waitDigit2" type="void" line="215">
                <params>
                    <param name="c" type="char"/>
                </params>
                <scope line="216">
                    <declaration name="codePoint" type="char" line="218"/>
                    <scope line="219"/>
                    <scope line="223"/>
                </scope>
                <scope line="227"/>
            </method>
            <method name="waitBackSlashOrLowSurrogate" type="void" line="232">
                <params>
                    <param name="c" type="char"/>
                </params>
                <scope line="233">
                    <scope line="234"/>
                    <scope line="239"/>
                    <scope line="244"/>
                </scope>
                <scope line="247"/>
            </method>
            <javadoc line="252">
                Send the composed text to the client.                
            </javadoc>
            <method name="sendComposedText" type="void" line="255">
                <declaration name="as" type="AttributedString" line="256"/>
            </method>
            <javadoc line="265">
                Send the committed text to the client.                
            </javadoc>
            <method name="sendCommittedText" type="void" line="268">
                <declaration name="as" type="AttributedString" line="269"/>
            </method>
            <javadoc line="280">
                Move the insertion point one position to the left in the composed text.
                  Do not let the caret move to the left of the &quot;\\u&quot; or &quot;\\U&quot;.                
            </javadoc>
            <method name="moveCaretLeft" type="void" line="284">
                <declaration name="len" type="int" line="285"/>
                <scope line="286"/>
                <scope line="289"/>
            </method>
            <javadoc line="300">
                Move the insertion point one position to the right in the composed text.                
            </javadoc>
            <method name="moveCaretRight" type="void" line="303">
                <declaration name="len" type="int" line="304"/>
                <scope line="305"/>
            </method>
            <javadoc line="316">
                Delete the character preceding the insertion point in the composed text.
                  If the insertion point is not at the end of the composed text and the
                  preceding text is &quot;\\u&quot; or &quot;\\U&quot;, ring the bell.                
            </javadoc>
            <method name="deletePreviousCharacter" type="void" line="321">
                <comment line="327">
                    Do not allow deletion of the leading &quot;\\u&quot; or &quot;\\U&quot; if there
                     are other digits in the composed text.                    
                </comment>
                <comment line="339">
                    Do not allow deletion of the second &quot;\\u&quot; if there are other
                     digits in the composed text.                    
                </comment>
                <scope line="322">
                    <scope line="323"/>
                    <scope line="325"/>
                </scope>
                <scope line="330">
                    <scope line="331">
                        <scope line="332"/>
                    </scope>
                    <scope line="337"/>
                </scope>
                <scope line="342">
                    <scope line="344"/>
                    <scope line="346"/>
                </scope>
            </method>
            <javadoc line="352">
                Delete the character following the insertion point in the composed text.
                  If the insertion point is at the end of the composed text, ring the bell.                
            </javadoc>
            <method name="deleteCharacter" type="void" line="356">
                <scope line="357"/>
                <scope line="360"/>
            </method>
            <method name="startComposition" type="void" line="365"/>
            <method name="cancelComposition" type="void" line="371"/>
            <method name="finishComposition" type="void" line="377">
                <declaration name="len" type="int" line="378"/>
                <scope line="379">
                    <declaration name="codePoint" type="char" line="380"/>
                    <scope line="381"/>
                </scope>
                <scope line="387">
                    <declaration name="codePoint" type="int" line="388"/>
                    <scope line="389"/>
                </scope>
                <scope line="395">
                    <declaration name="codePoint" type="char[]" line="396"/>
                    <scope line="401"/>
                </scope>
            </method>
            <method name="getCodePoint" type="int" line="412">
                <params>
                    <param name="sb" type="StringBuffer"/>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                </params>
                <declaration name="value" type="int" line="413"/>
                <scope line="414"/>
            </method>
            <method name="beep" type="void" line="420"/>
            <method name="activate" type="void" line="424">
                <scope line="425"/>
            </method>
            <method name="deactivate" type="void" line="431">
                <params>
                    <param name="isTemporary" type="boolean"/>
                </params>
                <scope line="432"/>
            </method>
            <method name="dispose" type="void" line="437"/>
            <method name="getControlObject" type="Object" line="440"/>
            <method name="endComposition" type="void" line="444"/>
            <method name="getLocale" type="Locale" line="448"/>
            <method name="hideWindows" type="void" line="452"/>
            <method name="isCompositionEnabled" type="boolean" line="455">
                <comment line="457">
                    always enabled                    
                </comment>
            </method>
            <method name="notifyClientWindowChange" type="void" line="460">
                <params>
                    <param name="location" type="Rectangle"/>
                </params>
            </method>
            <method name="reconvert" type="void" line="463">
                <comment line="465">
                    not supported yet                    
                </comment>
            </method>
            <method name="removeNotify" type="void" line="468"/>
            <method name="setCharacterSubsets" type="void" line="471">
                <params>
                    <param name="subsets" type="Character.Subset[]"/>
                </params>
            </method>
            <method name="setCompositionEnabled" type="void" line="474">
                <params>
                    <param name="enable" type="boolean"/>
                </params>
                <comment line="476">
                    not supported yet                    
                </comment>
            </method>
            <method name="setInputMethodContext" type="void" line="479">
                <params>
                    <param name="context" type="InputMethodContext"/>
                </params>
            </method>
            <method name="setLocale" type="boolean" line="486">
                <params>
                    <param name="locale" type="Locale"/>
                </params>
            </method>
        </class>
    </source>