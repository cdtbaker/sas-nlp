<?xml version="1.0" encoding="UTF-8"?>
    <source package="">
        <import package="java.lang.reflect.InvocationTargetException"/>
        <import package="java.util.logging.Level"/>
        <import package="java.util.logging.Logger"/>
        <import package="javax.swing"/>
        <import package="javax.swing.event"/>
        <import package="java.awt.BorderLayout"/>
        <import package="java.awt.Color"/>
        <import package="java.awt.Dimension"/>
        <import package="java.awt.FlowLayout"/>
        <import package="java.awt.event.ActionEvent"/>
        <import package="java.awt.event.ActionListener"/>
        <import package="java.util"/>
        <import package="javax.swing.UIManager.LookAndFeelInfo"/>
        <import package="javax.swing.border"/>
        <import package="javax.swing.tree"/>
        <class name="SampleTree" line="16">
            <javadoc line="16">
                A demo for illustrating how to do different things with JTree.
                  The data that this displays is rather boring, that is each node will
                  have 7 children that have random names based on the fonts.  Each node
                  is then drawn with that font and in a different color.
                  While the data isn&apos;t interesting the example illustrates a number
                  of things:
                  For an example of dynamicaly loading children refer to DynamicTreeNode.
                  For an example of adding/removing/inserting/reloading refer to the inner
                  classes of this class, AddAction, RemovAction, InsertAction and
                  ReloadAction.
                  For an example of creating your own cell renderer refer to
                  SampleTreeCellRenderer.
                  For an example of subclassing JTreeModel for editing refer to
                  SampleTreeModel.                
                <author>
                    Scott Violet                    
                </author>
            </javadoc>
            <declaration name="frame" type="JFrame" line="34"/>
            <javadoc line="34">
                Window for showing Tree.                
            </javadoc>
            <declaration name="tree" type="JTree" line="38"/>
            <javadoc line="38">
                Tree used for the example.                
            </javadoc>
            <declaration name="treeModel" type="DefaultTreeModel" line="42"/>
            <javadoc line="42">
                Tree model.                
            </javadoc>
            <javadoc line="46">
                Constructs a new instance of SampleTree.                
            </javadoc>
            <method name="SampleTree" type="constructor" line="49">
                <scope line="50">
                    <scope line="51">
                        <scope line="52"/>
                    </scope>
                </scope>
                <scope line="58"/>
                <declaration name="menuBar" type="JMenuBar" line="60"/>
                <declaration name="panel" type="JPanel" line="61"/>
                <declaration name="root" type="DefaultMutableTreeNode" line="66"/>
                <declaration name="sp" type="JScrollPane" line="72"/>
            </method>
            <javadoc line="82">
                Constructs a JPanel containing check boxes for the different
                  options that tree supports.                
            </javadoc>
            <method name="constructOptionsPanel" type="JPanel" line="86">
                <declaration name="aCheckbox" type="JCheckBox" line="87"/>
                <declaration name="retPanel" type="JPanel" line="88"/>
                <declaration name="borderPane" type="JPanel" line="89"/>
                <declaration name="group" type="ButtonGroup" line="106"/>
                <declaration name="buttonPane" type="JPanel" line="107"/>
                <declaration name="button" type="JRadioButton" line="108"/>
                <anonymous_class line="112">
                    <method name="isEnabled" type="boolean" line="113"/>
                    <method name="actionPerformed" type="void" line="116">
                        <params>
                            <param name="e" type="ActionEvent"/>
                        </params>
                    </method>
                </anonymous_class>
                <anonymous_class line="124">
                    <method name="isEnabled" type="boolean" line="125"/>
                    <method name="actionPerformed" type="void" line="128">
                        <params>
                            <param name="e" type="ActionEvent"/>
                        </params>
                    </method>
                </anonymous_class>
                <anonymous_class line="136">
                    <method name="isEnabled" type="boolean" line="137"/>
                    <method name="actionPerformed" type="void" line="140">
                        <params>
                            <param name="e" type="ActionEvent"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="151">
                Construct a menu.                
            </javadoc>
            <method name="constructMenuBar" type="JMenuBar" line="154">
                <declaration name="menu" type="JMenu" line="155"/>
                <declaration name="menuBar" type="JMenuBar" line="156"/>
                <declaration name="menuItem" type="JMenuItem" line="157"/>
                <anonymous_class line="161">
                    <method name="actionPerformed" type="void" line="162">
                        <params>
                            <param name="e" type="ActionEvent"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="179">
                Returns the TreeNode instance that is selected in the tree.
                  If nothing is selected, null is returned.                
            </javadoc>
            <method name="getSelectedNode" type="DefaultMutableTreeNode" line="183">
                <declaration name="selPath" type="TreePath" line="184"/>
                <scope line="185"/>
            </method>
            <javadoc line="190">
                Returns the selected TreePaths in the tree, may return null if
                  nothing is selected.                
            </javadoc>
            <method name="getSelectedPaths" type="TreePath[]" line="194"/>
            <method name="createNewNode" type="DefaultMutableTreeNode" line="197">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <class name="AddAction" line="200">
                <extends class="Object"/>
                <implements interface="ActionListener"/>
                <javadoc line="200">
                    AddAction is used to add a new item after the selected item.                    
                </javadoc>
                <declaration name="addCount" type="int" line="204"/>
                <javadoc line="204">
                    Number of nodes that have been added.                    
                </javadoc>
                <javadoc line="208">
                    Messaged when the user clicks on the Add menu item.
                      Determines the selection from the Tree and adds an item
                      after that.  If nothing is selected, an item is added to
                      the root.                    
                </javadoc>
                <method name="actionPerformed" type="void" line="214">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                    <declaration name="lastItem" type="DefaultMutableTreeNode" line="215"/>
                    <declaration name="parent" type="DefaultMutableTreeNode" line="216"/>
                    <scope line="217">
                        <scope line="219"/>
                    </scope>
                    <scope line="224"/>
                    <scope line="227"/>
                    <scope line="230">
                        <declaration name="newIndex" type="int" line="231"/>
                        <scope line="232"/>
                        <scope line="235"/>
                    </scope>
                </method>
            </class>
            <class name="InsertAction" line="242">
                <extends class="Object"/>
                <implements interface="ActionListener"/>
                <javadoc line="242">
                    InsertAction is used to insert a new item before the selected item.                    
                </javadoc>
                <declaration name="insertCount" type="int" line="246"/>
                <javadoc line="246">
                    Number of nodes that have been added.                    
                </javadoc>
                <javadoc line="250">
                    Messaged when the user clicks on the Insert menu item.
                      Determines the selection from the Tree and inserts an item
                      after that.  If nothing is selected, an item is added to
                      the root.                    
                </javadoc>
                <method name="actionPerformed" type="void" line="256">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                    <declaration name="lastItem" type="DefaultMutableTreeNode" line="257"/>
                    <declaration name="parent" type="DefaultMutableTreeNode" line="258"/>
                    <scope line="259">
                        <scope line="261"/>
                    </scope>
                    <scope line="266"/>
                    <scope line="269"/>
                    <scope line="272">
                        <declaration name="newIndex" type="int" line="273"/>
                        <scope line="274"/>
                        <scope line="277"/>
                    </scope>
                </method>
            </class>
            <class name="ReloadAction" line="284">
                <extends class="Object"/>
                <implements interface="ActionListener"/>
                <javadoc line="284">
                    ReloadAction is used to reload from the selected node.  If nothing
                      is selected, reload is not issued.                    
                </javadoc>
                <javadoc line="289">
                    Messaged when the user clicks on the Reload menu item.
                      Determines the selection from the Tree and asks the treemodel
                      to reload from that node.                    
                </javadoc>
                <method name="actionPerformed" type="void" line="294">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                    <declaration name="lastItem" type="DefaultMutableTreeNode" line="295"/>
                    <scope line="296"/>
                </method>
            </class>
            <class name="RemoveAction" line="301">
                <extends class="Object"/>
                <implements interface="ActionListener"/>
                <javadoc line="301">
                    RemoveAction removes the selected node from the tree.  If
                      The root or nothing is selected nothing is removed.                    
                </javadoc>
                <javadoc line="306">
                    Removes the selected item as long as it isn&apos;t root.                    
                </javadoc>
                <method name="actionPerformed" type="void" line="309">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                    <declaration name="selected" type="TreePath[]" line="310"/>
                    <scope line="311">
                        <declaration name="shallowest" type="TreePath" line="312"/>
                        <scope line="313"/>
                    </scope>
                </method>
                <javadoc line="318">
                    Removes the sibling TreePaths of &lt;code&gt;path&lt;/code&gt;, that are
                      located in &lt;code&gt;paths&lt;/code&gt;.                    
                </javadoc>
                <method name="removeSiblings" type="void" line="322">
                    <params>
                        <param name="path" type="TreePath"/>
                        <param name="paths" type="TreePath[]"/>
                    </params>
                    <scope line="323">
                        <scope line="324"/>
                    </scope>
                    <scope line="329">
                        <declaration name="parent" type="TreePath" line="330"/>
                        <declaration name="parentNode" type="MutableTreeNode" line="331"/>
                        <declaration name="toRemove" type="ArrayList&lt;TreePath&gt;" line="332"/>
                        <scope line="333">
                            <scope line="334"/>
                        </scope>
                        <declaration name="rCount" type="int" line="339"/>
                        <scope line="340">
                            <scope line="341">
                                <scope line="342">
                                    <scope line="343"/>
                                </scope>
                            </scope>
                        </scope>
                        <scope line="349"/>
                        <declaration name="indices" type="int[]" line="352"/>
                        <declaration name="removedNodes" type="Object[]" line="353"/>
                        <scope line="354"/>
                    </scope>
                </method>
                <javadoc line="362">
                    Returns the TreePath with the smallest path count in
                      &lt;code&gt;paths&lt;/code&gt;. Will return null if there is no non-null
                      TreePath is &lt;code&gt;paths&lt;/code&gt;.                    
                </javadoc>
                <method name="findShallowestPath" type="TreePath" line="367">
                    <params>
                        <param name="paths" type="TreePath[]"/>
                    </params>
                    <declaration name="shallowest" type="int" line="368"/>
                    <declaration name="shallowestPath" type="TreePath" line="369"/>
                    <scope line="370">
                        <scope line="371">
                            <scope line="372">
                                <scope line="373">
                                    <scope line="376"/>
                                </scope>
                            </scope>
                            <scope line="381"/>
                        </scope>
                    </scope>
                </method>
                <class name="PositionComparator" line="389">
                    <implements interface="Comparator">
                        <type_params>
                            <type_param name="TreePath"/>
                        </type_params>
                    </implements>
                    <javadoc line="389">
                        An Comparator that bases the return value on the index of the
                          passed in objects in the TreeModel.
                          &lt;p&gt;
                          This is actually rather expensive, it would be more efficient
                          to extract the indices and then do the comparision.                        
                    </javadoc>
                    <method name="compare" type="int" line="397">
                        <params>
                            <param name="p1" type="TreePath"/>
                            <param name="p2" type="TreePath"/>
                        </params>
                        <declaration name="p1Index" type="int" line="398"/>
                        <declaration name="p2Index" type="int" line="399"/>
                    </method>
                </class>
            </class>
            <class name="ShowHandlesChangeListener" line="404">
                <extends class="Object"/>
                <implements interface="ChangeListener"/>
                <javadoc line="404">
                    ShowHandlesChangeListener implements the ChangeListener interface
                      to toggle the state of showing the handles in the tree.                    
                </javadoc>
                <method name="stateChanged" type="void" line="409">
                    <params>
                        <param name="e" type="ChangeEvent"/>
                    </params>
                </method>
            </class>
            <class name="ShowRootChangeListener" line="413">
                <extends class="Object"/>
                <implements interface="ChangeListener"/>
                <javadoc line="413">
                    ShowRootChangeListener implements the ChangeListener interface
                      to toggle the state of showing the root node in the tree.                    
                </javadoc>
                <method name="stateChanged" type="void" line="418">
                    <params>
                        <param name="e" type="ChangeEvent"/>
                    </params>
                </method>
            </class>
            <class name="TreeEditableChangeListener" line="422">
                <extends class="Object"/>
                <implements interface="ChangeListener"/>
                <javadoc line="422">
                    TreeEditableChangeListener implements the ChangeListener interface
                      to toggle between allowing editing and now allowing editing in
                      the tree.                    
                </javadoc>
                <method name="stateChanged" type="void" line="428">
                    <params>
                        <param name="e" type="ChangeEvent"/>
                    </params>
                </method>
            </class>
            <method name="main" type="void" line="432">
                <params>
                    <param name="args" type="String"/>
                </params>
                <scope line="433">
                    <anonymous_class line="434">
                        <method name="run" type="void" line="435"/>
                    </anonymous_class>
                </scope>
                <scope line="441"/>
                <scope line="444"/>
            </method>
        </class>
    </source>