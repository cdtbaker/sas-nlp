<?xml version="1.0" encoding="UTF-8"?>
    <source package="">
        <import package="java.awt.BorderLayout"/>
        <import package="java.awt.Dimension"/>
        <import package="java.awt.Font"/>
        <import package="java.beans.PropertyChangeEvent"/>
        <import package="java.beans.PropertyChangeListener"/>
        <import package="java.util"/>
        <import package="javax.swing.JLabel"/>
        <import package="javax.swing.JPanel"/>
        <import package="javax.swing.JScrollPane"/>
        <import package="javax.swing.JTree"/>
        <import package="javax.swing.SwingConstants"/>
        <import package="javax.swing.event.CaretEvent"/>
        <import package="javax.swing.event.CaretListener"/>
        <import package="javax.swing.event.DocumentEvent"/>
        <import package="javax.swing.event.DocumentListener"/>
        <import package="javax.swing.event.TreeSelectionEvent"/>
        <import package="javax.swing.event.TreeSelectionListener"/>
        <import package="javax.swing.text.AttributeSet"/>
        <import package="javax.swing.text.Document"/>
        <import package="javax.swing.text.Element"/>
        <import package="javax.swing.text.JTextComponent"/>
        <import package="javax.swing.text.StyleConstants"/>
        <import package="javax.swing.tree.DefaultMutableTreeNode"/>
        <import package="javax.swing.tree.DefaultTreeCellRenderer"/>
        <import package="javax.swing.tree.DefaultTreeModel"/>
        <import package="javax.swing.tree.TreeModel"/>
        <import package="javax.swing.tree.TreeNode"/>
        <import package="javax.swing.tree.TreePath"/>
        <class name="ElementTreePanel" line="29">
            <extends class="JPanel"/>
            <implements interface="CaretListener"/>
            <implements interface="DocumentListener"/>
            <implements interface="PropertyChangeListener"/>
            <implements interface="TreeSelectionListener"/>
            <javadoc line="29">
                Displays a tree showing all the elements in a text Document. Selecting
                  a node will result in reseting the selection of the JTextComponent.
                  This also becomes a CaretListener to know when the selection has changed
                  in the text to update the selected item in the tree.                
                <author>
                    Scott Violet                    
                </author>
            </javadoc>
            <declaration name="tree" type="JTree" line="37"/>
            <javadoc line="37">
                Tree showing the documents element structure.                
            </javadoc>
            <declaration name="editor" type="JTextComponent" line="41"/>
            <javadoc line="41">
                Text component showing elemenst for.                
            </javadoc>
            <declaration name="treeModel" type="ElementTreeModel" line="45"/>
            <javadoc line="45">
                Model for the tree.                
            </javadoc>
            <declaration name="updatingSelection" type="boolean" line="49"/>
            <javadoc line="49">
                Set to true when updatin the selection.                
            </javadoc>
            <method name="ElementTreePanel" type="constructor" line="53">
                <params>
                    <param name="editor" type="JTextComponent"/>
                </params>
                <declaration name="document" type="Document" line="55"/>
                <anonymous_class line="57">
                    <method name="convertValueToText" type="String" line="58">
                        <params>
                            <param name="value" type="Object"/>
                            <param name="selected" type="boolean"/>
                            <param name="expanded" type="boolean"/>
                            <param name="leaf" type="boolean"/>
                            <param name="row" type="int"/>
                            <param name="hasFocus" type="boolean"/>
                        </params>
                        <scope line="59"/>
                        <declaration name="e" type="Element" line="62"/>
                        <declaration name="as" type="AttributeSet" line="63"/>
                        <declaration name="asString" type="String" line="64"/>
                        <scope line="65">
                            <declaration name="retBuffer" type="StringBuilder" line="66"/>
                            <declaration name="names" type="Enumeration" line="67"/>
                            <scope line="68">
                                <declaration name="nextName" type="Object" line="69"/>
                                <scope line="70"/>
                            </scope>
                        </scope>
                        <scope line="80"/>
                        <scope line="83"/>
                    </method>
                </anonymous_class>
                <anonymous_class line="93">
                    <method name="getPreferredSize" type="Dimension" line="94">
                        <declaration name="retValue" type="Dimension" line="95"/>
                        <scope line="96"/>
                    </method>
                </anonymous_class>
                <declaration name="label" type="JLabel" line="108"/>
            </method>
            <javadoc line="113">
                Resets the JTextComponent to &lt;code&gt;editor&lt;/code&gt;. This will update
                  the tree accordingly.                
            </javadoc>
            <method name="setEditor" type="void" line="117">
                <params>
                    <param name="editor" type="JTextComponent"/>
                </params>
                <scope line="118"/>
                <scope line="121">
                    <declaration name="oldDoc" type="Document" line="122"/>
                </scope>
                <scope line="128"/>
                <scope line="132">
                    <declaration name="newDoc" type="Document" line="133"/>
                </scope>
            </method>
            <javadoc line="141">
                Invoked when a property changes. We are only interested in when the
                  Document changes to reset the DocumentListener.                
            </javadoc>
            <method name="propertyChange" type="void" line="145">
                <params>
                    <param name="e" type="PropertyChangeEvent"/>
                </params>
                <scope line="146">
                    <declaration name="oldDoc" type="Document" line="147"/>
                    <declaration name="newDoc" type="Document" line="148"/>
                </scope>
            </method>
            <javadoc line="155">
                Gives notification that there was an insert into the document.  The
                  given range bounds the freshly inserted region.                
                <param>
                    e the document event                    
                </param>
            </javadoc>
            <method name="insertUpdate" type="void" line="160">
                <params>
                    <param name="e" type="DocumentEvent"/>
                </params>
            </method>
            <javadoc line="163">
                Gives notification that a portion of the document has been
                  removed.  The range is given in terms of what the view last
                  saw (that is, before updating sticky positions).                
                <param>
                    e the document event                    
                </param>
            </javadoc>
            <method name="removeUpdate" type="void" line="169">
                <params>
                    <param name="e" type="DocumentEvent"/>
                </params>
            </method>
            <javadoc line="172">
                Gives notification that an attribute or set of attributes changed.                
                <param>
                    e the document event                    
                </param>
            </javadoc>
            <method name="changedUpdate" type="void" line="176">
                <params>
                    <param name="e" type="DocumentEvent"/>
                </params>
            </method>
            <javadoc line="179">
                Messaged when the selection in the editor has changed. Will update
                  the selection in the tree.                
            </javadoc>
            <method name="caretUpdate" type="void" line="183">
                <params>
                    <param name="e" type="CaretEvent"/>
                </params>
                <scope line="184">
                    <declaration name="selBegin" type="int" line="185"/>
                    <declaration name="end" type="int" line="186"/>
                    <declaration name="paths" type="List&lt;TreePath&gt;" line="187"/>
                    <declaration name="model" type="TreeModel" line="188"/>
                    <declaration name="root" type="Object" line="189"/>
                    <declaration name="rootCount" type="int" line="190"/>
                    <scope line="191">
                        <declaration name="start" type="int" line="192"/>
                        <scope line="193">
                            <declaration name="path" type="TreePath" line="194"/>
                            <declaration name="charElement" type="Element" line="195"/>
                            <scope line="197"/>
                            <scope line="200"/>
                        </scope>
                    </scope>
                    <declaration name="numPaths" type="int" line="205"/>
                    <scope line="206">
                        <declaration name="pathArray" type="TreePath[]" line="207"/>
                        <scope line="210"/>
                        <scope line="214"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="220">
                Called whenever the value of the selection changes.                
                <param>
                    e the event that characterizes the change.                    
                </param>
            </javadoc>
            <method name="valueChanged" type="void" line="224">
                <params>
                    <param name="e" type="TreeSelectionEvent"/>
                </params>
                <scope line="225">
                    <declaration name="selPath" type="TreePath" line="226"/>
                    <declaration name="lastPathComponent" type="Object" line="227"/>
                    <scope line="228">
                        <declaration name="selElement" type="Element" line="229"/>
                        <scope line="231"/>
                        <scope line="234"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="240">
                @return tree showing elements.                
            </javadoc>
            <method name="getTree" type="JTree" line="243"/>
            <javadoc line="246">
                @return JTextComponent showing elements for.                
            </javadoc>
            <method name="getEditor" type="JTextComponent" line="249"/>
            <javadoc line="252">
                @return TreeModel implementation used to represent the elements.                
            </javadoc>
            <method name="getTreeModel" type="DefaultTreeModel" line="255"/>
            <javadoc line="258">
                Updates the tree based on the event type. This will invoke either
                  updateTree with the root element, or handleChange.                
            </javadoc>
            <method name="updateTree" type="void" line="262">
                <params>
                    <param name="event" type="DocumentEvent"/>
                </params>
                <scope line="264">
                    <declaration name="model" type="TreeModel" line="265"/>
                    <declaration name="root" type="Object" line="266"/>
                    <scope line="267"/>
                </scope>
                <scope line="271"/>
            </method>
            <javadoc line="275">
                Creates TreeModelEvents based on the DocumentEvent and messages
                  the treemodel. This recursively invokes this method with children
                  elements.                
                <param>
                    event indicates what elements in the tree hierarchy have
                      changed.                    
                </param>
                <param>
                    element Current element to check for changes against.                    
                </param>
            </javadoc>
            <method name="updateTree" type="void" line="283">
                <params>
                    <param name="event" type="DocumentEvent"/>
                    <param name="element" type="Element"/>
                </params>
                <declaration name="ec" type="DocumentEvent.ElementChange" line="284"/>
                <scope line="285">
                    <declaration name="removed" type="Element[]" line="286"/>
                    <declaration name="added" type="Element[]" line="287"/>
                    <declaration name="startIndex" type="int" line="288"/>
                    <scope line="289">
                        <declaration name="indices" type="int[]" line="290"/>
                        <scope line="291"/>
                    </scope>
                    <scope line="296">
                        <declaration name="indices" type="int[]" line="297"/>
                        <scope line="298"/>
                    </scope>
                </scope>
                <scope line="304">
                    <declaration name="startIndex" type="int" line="305"/>
                    <declaration name="elementCount" type="int" line="306"/>
                    <declaration name="endIndex" type="int" line="307"/>
                    <scope line="308"/>
                    <scope line="311">
                        <scope line="312"/>
                    </scope>
                </scope>
                <scope line="317"/>
            </method>
            <javadoc line="321">
                Returns a TreePath to the element at &lt;code&gt;position&lt;/code&gt;.                
            </javadoc>
            <method name="getPathForIndex" type="TreePath" line="324">
                <params>
                    <param name="position" type="int"/>
                    <param name="root" type="Object"/>
                    <param name="rootElement" type="Element"/>
                </params>
                <declaration name="path" type="TreePath" line="325"/>
                <declaration name="child" type="Element" line="326"/>
                <scope line="329"/>
            </method>
            <class name="ElementTreeModel" line="335">
                <extends class="DefaultTreeModel"/>
                <javadoc line="335">
                    ElementTreeModel is an implementation of TreeModel to handle displaying
                      the Elements from a Document. AbstractDocument.AbstractElement is
                      the default implementation used by the swing text package to implement
                      Element, and it implements TreeNode. This makes it trivial to create
                      a DefaultTreeModel rooted at a particular Element from the Document.
                      Unfortunately each Document can have more than one root Element.
                      Implying that to display all the root elements as a child of another
                      root a fake node has be created. This class creates a fake node as
                      the root with the children being the root elements of the Document
                      (getRootElements).
                      &lt;p&gt;This subclasses DefaultTreeModel. The majority of the TreeModel
                      methods have been subclassed, primarily to special case the root.                    
                </javadoc>
                <declaration name="rootElements" type="Element[]" line="350"/>
                <method name="ElementTreeModel" type="constructor" line="351">
                    <params>
                        <param name="document" type="Document"/>
                    </params>
                </method>
                <javadoc line="355">
                    Returns the child of &lt;I&gt;parent&lt;/I&gt; at index &lt;I&gt;index&lt;/I&gt; in
                      the parent&apos;s child array.  &lt;I&gt;parent&lt;/I&gt; must be a node
                      previously obtained from this data source. This should
                      not return null if &lt;i&gt;index&lt;/i&gt; is a valid index for
                      &lt;i&gt;parent&lt;/i&gt; (that is &lt;i&gt;index&lt;/i&gt; &gt;= 0 &amp;&amp; &lt;i&gt;index&lt;/i&gt;
                      &lt; getChildCount(&lt;i&gt;parent&lt;/i&gt;)).                    
                    <param>
                        parent  a node in the tree, obtained from this data source                        
                    </param>
                    <return>
                        the child of <I>parent</I> at index <I>index</I>                        
                    </return>
                </javadoc>
                <method name="getChild" type="Object" line="365">
                    <params>
                        <param name="parent" type="Object"/>
                        <param name="index" type="int"/>
                    </params>
                    <scope line="366"/>
                </method>
                <javadoc line="371">
                    Returns the number of children of &lt;I&gt;parent&lt;/I&gt;.  Returns 0
                      if the node is a leaf or if it has no children.
                      &lt;I&gt;parent&lt;/I&gt; must be a node previously obtained from this
                      data source.                    
                    <param>
                        parent  a node in the tree, obtained from this data source                        
                    </param>
                    <return>
                        the number of children of the node <I>parent</I>                        
                    </return>
                </javadoc>
                <method name="getChildCount" type="int" line="379">
                    <params>
                        <param name="parent" type="Object"/>
                    </params>
                    <scope line="380"/>
                </method>
                <javadoc line="385">
                    Returns true if &lt;I&gt;node&lt;/I&gt; is a leaf.  It is possible for
                      this method to return false even if &lt;I&gt;node&lt;/I&gt; has no
                      children.  A directory in a filesystem, for example, may
                      contain no files; the node representing the directory is
                      not a leaf, but it also has no children.                    
                    <param>
                        node    a node in the tree, obtained from this data source                        
                    </param>
                    <return>
                        true if <I>node</I> is a leaf                        
                    </return>
                </javadoc>
                <method name="isLeaf" type="boolean" line="394">
                    <params>
                        <param name="node" type="Object"/>
                    </params>
                    <scope line="395"/>
                </method>
                <javadoc line="400">
                    Returns the index of child in parent.                    
                </javadoc>
                <method name="getIndexOfChild" type="int" line="403">
                    <params>
                        <param name="parent" type="Object"/>
                        <param name="child" type="Object"/>
                    </params>
                    <scope line="404">
                        <scope line="405">
                            <scope line="406"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="414">
                    Invoke this method after you&apos;ve changed how node is to be
                      represented in the tree.                    
                </javadoc>
                <method name="nodeChanged" type="void" line="418">
                    <params>
                        <param name="node" type="TreeNode"/>
                    </params>
                    <scope line="419">
                        <declaration name="parent" type="TreeNode" line="420"/>
                        <scope line="421"/>
                        <scope line="424">
                            <declaration name="anIndex" type="int" line="425"/>
                            <scope line="426">
                                <declaration name="cIndexs" type="int[]" line="427"/>
                            </scope>
                        </scope>
                    </scope>
                </method>
                <javadoc line="434">
                    Returns the path to a particluar node. This is recursive.                    
                </javadoc>
                <method name="getPathToRoot" type="TreeNode[]" line="437">
                    <params>
                        <param name="aNode" type="TreeNode"/>
                        <param name="depth" type="int"/>
                    </params>
                    <declaration name="retNodes" type="TreeNode[]" line="438"/>
                    <scope line="439">
                        <scope line="440"/>
                        <scope line="443"/>
                    </scope>
                    <scope line="447">
                        <scope line="449"/>
                        <scope line="452">
                            <declaration name="parent" type="TreeNode" line="453"/>
                            <scope line="454"/>
                        </scope>
                    </scope>
                </method>
            </class>
        </class>
    </source>