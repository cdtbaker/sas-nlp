<?xml version="1.0" encoding="UTF-8"?>
    <source package="">
        <import package="java.awt.BorderLayout"/>
        <import package="java.awt.Dimension"/>
        <import package="java.awt.Font"/>
        <import package="java.beans.PropertyChangeEvent"/>
        <import package="java.beans.PropertyChangeListener"/>
        <import package="java.util"/>
        <import package="javax.swing.JLabel"/>
        <import package="javax.swing.JPanel"/>
        <import package="javax.swing.JScrollPane"/>
        <import package="javax.swing.JTree"/>
        <import package="javax.swing.SwingConstants"/>
        <import package="javax.swing.event.CaretEvent"/>
        <import package="javax.swing.event.CaretListener"/>
        <import package="javax.swing.event.DocumentEvent"/>
        <import package="javax.swing.event.DocumentListener"/>
        <import package="javax.swing.event.TreeSelectionEvent"/>
        <import package="javax.swing.event.TreeSelectionListener"/>
        <import package="javax.swing.text.AttributeSet"/>
        <import package="javax.swing.text.Document"/>
        <import package="javax.swing.text.Element"/>
        <import package="javax.swing.text.JTextComponent"/>
        <import package="javax.swing.text.StyleConstants"/>
        <import package="javax.swing.tree.DefaultMutableTreeNode"/>
        <import package="javax.swing.tree.DefaultTreeCellRenderer"/>
        <import package="javax.swing.tree.DefaultTreeModel"/>
        <import package="javax.swing.tree.TreeModel"/>
        <import package="javax.swing.tree.TreeNode"/>
        <import package="javax.swing.tree.TreePath"/>
        <class name="ElementTreePanel" line="63">
            <extends class="JPanel"/>
            <comment line="212">
                PropertyChangeListener                
            </comment>
            <comment line="233">
                DocumentListener                
            </comment>
            <comment line="264">
                CaretListener                
            </comment>
            <comment line="315">
                TreeSelectionListener                
            </comment>
            <comment line="340">
                Local methods                
            </comment>
            <implements interface="CaretListener"/>
            <implements interface="DocumentListener"/>
            <implements interface="PropertyChangeListener"/>
            <implements interface="TreeSelectionListener"/>
            <javadoc line="63">
                Displays a tree showing all the elements in a text Document. Selecting
                  a node will result in reseting the selection of the JTextComponent.
                  This also becomes a CaretListener to know when the selection has changed
                  in the text to update the selected item in the tree.                
                <author>
                    Scott Violet                    
                </author>
            </javadoc>
            <declaration name="tree" type="JTree" line="75"/>
            <javadoc line="75">
                Tree showing the documents element structure.                
            </javadoc>
            <declaration name="editor" type="JTextComponent" line="77"/>
            <javadoc line="77">
                Text component showing elemenst for.                
            </javadoc>
            <declaration name="treeModel" type="ElementTreeModel" line="79"/>
            <javadoc line="79">
                Model for the tree.                
            </javadoc>
            <declaration name="updatingSelection" type="boolean" line="81"/>
            <javadoc line="81">
                Set to true when updatin the selection.                
            </javadoc>
            <method name="ElementTreePanel" type="constructor" line="85">
                <params>
                    <param name="editor" type="JTextComponent"/>
                </params>
                <comment line="91">
                    Create the tree.                    
                </comment>
                <comment line="99">
                    Should only happen for the root                    
                </comment>
                <comment line="138">
                    Don&apos;t show the root, it is fake.                    
                </comment>
                <comment line="140">
                    Since the display value of every node after the insertion point
                     changes every time the text changes and we don&apos;t generate a change
                     event for all those nodes the display value can become off.
                     This can be seen as &apos;...&apos; instead of the complete string value.
                     This is a temporary workaround, increase the needed size by 15,
                     hoping that will be enough.                    
                </comment>
                <comment line="157">
                    become a listener on the document to update the tree.                    
                </comment>
                <comment line="160">
                    become a PropertyChangeListener to know when the Document has
                     changed.                    
                </comment>
                <comment line="164">
                    Become a CaretListener                    
                </comment>
                <comment line="167">
                    configure the panel and frame containing it.                    
                </comment>
                <comment line="171">
                    Add a label above tree to describe what is being shown                    
                </comment>
                <declaration name="document" type="Document" line="88"/>
                <anonymous_class line="92">
                    <method name="convertValueToText" type="String" line="97">
                        <params>
                            <param name="value" type="Object"/>
                            <param name="selected" type="boolean"/>
                            <param name="expanded" type="boolean"/>
                            <param name="leaf" type="boolean"/>
                            <param name="row" type="int"/>
                            <param name="hasFocus" type="boolean"/>
                        </params>
                        <comment line="99">
                            Should only happen for the root                            
                        </comment>
                        <scope line="99"/>
                        <declaration name="e" type="Element" line="103"/>
                        <declaration name="as" type="AttributeSet" line="104"/>
                        <declaration name="asString" type="String" line="105"/>
                        <scope line="107">
                            <declaration name="retBuffer" type="StringBuilder" line="108"/>
                            <declaration name="names" type="Enumeration" line="109"/>
                            <scope line="111">
                                <declaration name="nextName" type="Object" line="112"/>
                                <scope line="114"/>
                            </scope>
                        </scope>
                        <scope line="123"/>
                        <scope line="127"/>
                    </method>
                </anonymous_class>
                <anonymous_class line="145">
                    <method name="getPreferredSize" type="Dimension" line="148">
                        <declaration name="retValue" type="Dimension" line="149"/>
                        <scope line="150"/>
                    </method>
                </anonymous_class>
                <declaration name="label" type="JLabel" line="171"/>
            </method>
            <javadoc line="180">
                Resets the JTextComponent to &lt;code&gt;editor&lt;/code&gt;. This will update
                  the tree accordingly.                
            </javadoc>
            <method name="setEditor" type="void" line="184">
                <params>
                    <param name="editor" type="JTextComponent"/>
                </params>
                <scope line="185"/>
                <scope line="189">
                    <declaration name="oldDoc" type="Document" line="190"/>
                </scope>
                <scope line="197"/>
                <scope line="200">
                    <declaration name="newDoc" type="Document" line="201"/>
                </scope>
            </method>
            <javadoc line="212">
                Invoked when a property changes. We are only interested in when the
                  Document changes to reset the DocumentListener.                
            </javadoc>
            <method name="propertyChange" type="void" line="216">
                <params>
                    <param name="e" type="PropertyChangeEvent"/>
                </params>
                <comment line="223">
                    Reset the DocumentListener                    
                </comment>
                <comment line="227">
                    Recreate the TreeModel.                    
                </comment>
                <scope line="218">
                    <declaration name="oldDoc" type="Document" line="219"/>
                    <declaration name="newDoc" type="Document" line="220"/>
                </scope>
            </method>
            <javadoc line="233">
                Gives notification that there was an insert into the document.  The
                  given range bounds the freshly inserted region.                
                <param>
                    e the document event                    
                </param>
            </javadoc>
            <method name="insertUpdate" type="void" line="239">
                <params>
                    <param name="e" type="DocumentEvent"/>
                </params>
            </method>
            <javadoc line="243">
                Gives notification that a portion of the document has been
                  removed.  The range is given in terms of what the view last
                  saw (that is, before updating sticky positions).                
                <param>
                    e the document event                    
                </param>
            </javadoc>
            <method name="removeUpdate" type="void" line="250">
                <params>
                    <param name="e" type="DocumentEvent"/>
                </params>
            </method>
            <javadoc line="254">
                Gives notification that an attribute or set of attributes changed.                
                <param>
                    e the document event                    
                </param>
            </javadoc>
            <method name="changedUpdate" type="void" line="259">
                <params>
                    <param name="e" type="DocumentEvent"/>
                </params>
            </method>
            <javadoc line="264">
                Messaged when the selection in the editor has changed. Will update
                  the selection in the tree.                
            </javadoc>
            <method name="caretUpdate" type="void" line="268">
                <params>
                    <param name="e" type="CaretEvent"/>
                </params>
                <comment line="278">
                    Build an array of all the paths to all the character elements
                     in the selection.                    
                </comment>
                <comment line="297">
                    If a path was found, select it (them).                    
                </comment>
                <scope line="269">
                    <declaration name="selBegin" type="int" line="270"/>
                    <declaration name="end" type="int" line="271"/>
                    <declaration name="paths" type="List&amp;lt;TreePath&amp;gt;" line="272"/>
                    <declaration name="model" type="TreeModel" line="273"/>
                    <declaration name="root" type="Object" line="274"/>
                    <declaration name="rootCount" type="int" line="275"/>
                    <scope line="279">
                        <declaration name="start" type="int" line="280"/>
                        <scope line="282">
                            <declaration name="path" type="TreePath" line="283"/>
                            <declaration name="charElement" type="Element" line="285"/>
                            <scope line="288"/>
                            <scope line="290"/>
                        </scope>
                    </scope>
                    <declaration name="numPaths" type="int" line="297"/>
                    <scope line="299">
                        <declaration name="pathArray" type="TreePath[]" line="300"/>
                        <scope line="304"/>
                        <scope line="307"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="315">
                Called whenever the value of the selection changes.                
                <param>
                    e the event that characterizes the change.                    
                </param>
            </javadoc>
            <method name="valueChanged" type="void" line="319">
                <params>
                    <param name="e" type="TreeSelectionEvent"/>
                </params>
                <scope line="321">
                    <declaration name="selPath" type="TreePath" line="322"/>
                    <declaration name="lastPathComponent" type="Object" line="323"/>
                    <scope line="325">
                        <declaration name="selElement" type="Element" line="326"/>
                        <scope line="329"/>
                        <scope line="332"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="340">
                @return tree showing elements.                
            </javadoc>
            <method name="getTree" type="JTree" line="343"/>
            <javadoc line="347">
                @return JTextComponent showing elements for.                
            </javadoc>
            <method name="getEditor" type="JTextComponent" line="350"/>
            <javadoc line="354">
                @return TreeModel implementation used to represent the elements.                
            </javadoc>
            <method name="getTreeModel" type="DefaultTreeModel" line="357"/>
            <javadoc line="361">
                Updates the tree based on the event type. This will invoke either
                  updateTree with the root element, or handleChange.                
            </javadoc>
            <method name="updateTree" type="void" line="365">
                <params>
                    <param name="event" type="DocumentEvent"/>
                </params>
                <scope line="367">
                    <declaration name="model" type="TreeModel" line="368"/>
                    <declaration name="root" type="Object" line="369"/>
                    <scope line="372"/>
                </scope>
                <scope line="375"/>
            </method>
            <javadoc line="380">
                Creates TreeModelEvents based on the DocumentEvent and messages
                  the treemodel. This recursively invokes this method with children
                  elements.                
                <param>
                    event indicates what elements in the tree hierarchy have
                      changed.                    
                </param>
                <param>
                    element Current element to check for changes against.                    
                </param>
            </javadoc>
            <method name="updateTree" type="void" line="388">
                <params>
                    <param name="event" type="DocumentEvent"/>
                    <param name="element" type="Element"/>
                </params>
                <comment line="397">
                    Check for removed.                    
                </comment>
                <comment line="407">
                    check for added                    
                </comment>
                <comment line="426">
                    Force checking the previous element.                    
                </comment>
                <comment line="435">
                    Element is a leaf, assume it changed                    
                </comment>
                <declaration name="ec" type="DocumentEvent.ElementChange" line="389"/>
                <scope line="391">
                    <declaration name="removed" type="Element[]" line="392"/>
                    <declaration name="added" type="Element[]" line="393"/>
                    <declaration name="startIndex" type="int" line="394"/>
                    <scope line="397">
                        <declaration name="indices" type="int[]" line="398"/>
                        <scope line="400"/>
                    </scope>
                    <scope line="407">
                        <declaration name="indices" type="int[]" line="408"/>
                        <scope line="410"/>
                    </scope>
                </scope>
                <scope line="416">
                    <declaration name="startIndex" type="int" line="417"/>
                    <declaration name="elementCount" type="int" line="418"/>
                    <declaration name="endIndex" type="int" line="419"/>
                    <scope line="424"/>
                    <scope line="428">
                        <scope line="429"/>
                    </scope>
                </scope>
                <scope line="433"/>
            </method>
            <javadoc line="439">
                Returns a TreePath to the element at &lt;code&gt;position&lt;/code&gt;.                
            </javadoc>
            <method name="getPathForIndex" type="TreePath" line="443">
                <params>
                    <param name="position" type="int"/>
                    <param name="root" type="Object"/>
                    <param name="rootElement" type="Element"/>
                </params>
                <declaration name="path" type="TreePath" line="444"/>
                <declaration name="child" type="Element" line="445"/>
                <scope line="450"/>
            </method>
            <class name="ElementTreeModel" line="458">
                <extends class="DefaultTreeModel"/>
                <javadoc line="458">
                    ElementTreeModel is an implementation of TreeModel to handle displaying
                      the Elements from a Document. AbstractDocument.AbstractElement is
                      the default implementation used by the swing text package to implement
                      Element, and it implements TreeNode. This makes it trivial to create
                      a DefaultTreeModel rooted at a particular Element from the Document.
                      Unfortunately each Document can have more than one root Element.
                      Implying that to display all the root elements as a child of another
                      root a fake node has be created. This class creates a fake node as
                      the root with the children being the root elements of the Document
                      (getRootElements).
                      &lt;p&gt;This subclasses DefaultTreeModel. The majority of the TreeModel
                      methods have been subclassed, primarily to special case the root.                    
                </javadoc>
                <declaration name="rootElements" type="Element[]" line="474"/>
                <method name="ElementTreeModel" type="constructor" line="476">
                    <params>
                        <param name="document" type="Document"/>
                    </params>
                </method>
                <javadoc line="481">
                    Returns the child of &lt;I&gt;parent&lt;/I&gt; at index &lt;I&gt;index&lt;/I&gt; in
                      the parent&apos;s child array.  &lt;I&gt;parent&lt;/I&gt; must be a node
                      previously obtained from this data source. This should
                      not return null if &lt;i&gt;index&lt;/i&gt; is a valid index for
                      &lt;i&gt;parent&lt;/i&gt; (that is &lt;i&gt;index&lt;/i&gt; &gt;= 0 &amp;&amp; &lt;i&gt;index&lt;/i&gt;
                      &lt; getChildCount(&lt;i&gt;parent&lt;/i&gt;)).                    
                    <param>
                        parent  a node in the tree, obtained from this data source                        
                    </param>
                    <return>
                        the child of &lt;I&gt;parent&lt;/I&gt; at index &lt;I&gt;index&lt;/I&gt;                        
                    </return>
                </javadoc>
                <method name="getChild" type="Object" line="493">
                    <params>
                        <param name="parent" type="Object"/>
                        <param name="index" type="int"/>
                    </params>
                    <scope line="494"/>
                </method>
                <javadoc line="500">
                    Returns the number of children of &lt;I&gt;parent&lt;/I&gt;.  Returns 0
                      if the node is a leaf or if it has no children.
                      &lt;I&gt;parent&lt;/I&gt; must be a node previously obtained from this
                      data source.                    
                    <param>
                        parent  a node in the tree, obtained from this data source                        
                    </param>
                    <return>
                        the number of children of the node &lt;I&gt;parent&lt;/I&gt;                        
                    </return>
                </javadoc>
                <method name="getChildCount" type="int" line="510">
                    <params>
                        <param name="parent" type="Object"/>
                    </params>
                    <scope line="511"/>
                </method>
                <javadoc line="517">
                    Returns true if &lt;I&gt;node&lt;/I&gt; is a leaf.  It is possible for
                      this method to return false even if &lt;I&gt;node&lt;/I&gt; has no
                      children.  A directory in a filesystem, for example, may
                      contain no files; the node representing the directory is
                      not a leaf, but it also has no children.                    
                    <param>
                        node    a node in the tree, obtained from this data source                        
                    </param>
                    <return>
                        true if &lt;I&gt;node&lt;/I&gt; is a leaf                        
                    </return>
                </javadoc>
                <method name="isLeaf" type="boolean" line="528">
                    <params>
                        <param name="node" type="Object"/>
                    </params>
                    <scope line="529"/>
                </method>
                <javadoc line="535">
                    Returns the index of child in parent.                    
                </javadoc>
                <method name="getIndexOfChild" type="int" line="539">
                    <params>
                        <param name="parent" type="Object"/>
                        <param name="child" type="Object"/>
                    </params>
                    <scope line="540">
                        <scope line="542">
                            <scope line="543"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="552">
                    Invoke this method after you&apos;ve changed how node is to be
                      represented in the tree.                    
                </javadoc>
                <method name="nodeChanged" type="void" line="557">
                    <params>
                        <param name="node" type="TreeNode"/>
                    </params>
                    <scope line="558">
                        <declaration name="parent" type="TreeNode" line="559"/>
                        <scope line="561"/>
                        <scope line="564">
                            <declaration name="anIndex" type="int" line="565"/>
                            <scope line="567">
                                <declaration name="cIndexs" type="int[]" line="568"/>
                            </scope>
                        </scope>
                    </scope>
                </method>
                <javadoc line="577">
                    Returns the path to a particluar node. This is recursive.                    
                </javadoc>
                <method name="getPathToRoot" type="TreeNode[]" line="581">
                    <params>
                        <param name="aNode" type="TreeNode"/>
                        <param name="depth" type="int"/>
                    </params>
                    <comment line="585">
                        Check for null, in case someone passed in a null node, or                        
                    </comment>
                    <declaration name="retNodes" type="TreeNode[]" line="582"/>
                    <scope line="586">
                        <scope line="587"/>
                        <scope line="589"/>
                    </scope>
                    <scope line="592">
                        <scope line="594"/>
                        <scope line="596">
                            <declaration name="parent" type="TreeNode" line="597"/>
                            <scope line="599"/>
                        </scope>
                    </scope>
                </method>
            </class>
        </class>
    </source>