<?xml version="1.0" encoding="UTF-8"?>
    <source package="">
        <import package="java.awt.BorderLayout"/>
        <import package="java.awt.Color"/>
        <import package="java.awt.Component"/>
        <import package="java.awt.Container"/>
        <import package="java.awt.FileDialog"/>
        <import package="java.awt.Font"/>
        <import package="java.awt.Frame"/>
        <import package="java.awt.Graphics"/>
        <import package="java.awt.Insets"/>
        <import package="java.awt.event.ActionEvent"/>
        <import package="java.awt.event.WindowAdapter"/>
        <import package="java.awt.event.WindowEvent"/>
        <import package="java.beans.PropertyChangeEvent"/>
        <import package="java.beans.PropertyChangeListener"/>
        <import package="java.io.File"/>
        <import package="java.io.FileReader"/>
        <import package="java.io.FileWriter"/>
        <import package="java.io.IOException"/>
        <import package="java.io.Reader"/>
        <import package="java.io.Writer"/>
        <import package="java.net.URL"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.List"/>
        <import package="java.util.Locale"/>
        <import package="java.util.Map"/>
        <import package="java.util.MissingResourceException"/>
        <import package="java.util.ResourceBundle"/>
        <import package="java.util.StringTokenizer"/>
        <import package="java.util.logging.Level"/>
        <import package="java.util.logging.Logger"/>
        <import package="javax.swing.AbstractAction"/>
        <import package="javax.swing.Action"/>
        <import package="javax.swing.BorderFactory"/>
        <import package="javax.swing.Box"/>
        <import package="javax.swing.BoxLayout"/>
        <import package="javax.swing.ImageIcon"/>
        <import package="javax.swing.JButton"/>
        <import package="javax.swing.JComponent"/>
        <import package="javax.swing.JFileChooser"/>
        <import package="javax.swing.JFrame"/>
        <import package="javax.swing.JMenu"/>
        <import package="javax.swing.JMenuBar"/>
        <import package="javax.swing.JMenuItem"/>
        <import package="javax.swing.JOptionPane"/>
        <import package="javax.swing.JPanel"/>
        <import package="javax.swing.JProgressBar"/>
        <import package="javax.swing.JScrollPane"/>
        <import package="javax.swing.JTextArea"/>
        <import package="javax.swing.JToolBar"/>
        <import package="javax.swing.JViewport"/>
        <import package="javax.swing.SwingUtilities"/>
        <import package="javax.swing.UIManager"/>
        <import package="javax.swing.UIManager.LookAndFeelInfo"/>
        <import package="javax.swing.event.UndoableEditEvent"/>
        <import package="javax.swing.event.UndoableEditListener"/>
        <import package="javax.swing.text.BadLocationException"/>
        <import package="javax.swing.text.Document"/>
        <import package="javax.swing.text.JTextComponent"/>
        <import package="javax.swing.text.PlainDocument"/>
        <import package="javax.swing.text.Segment"/>
        <import package="javax.swing.text.TextAction"/>
        <import package="javax.swing.undo.CannotRedoException"/>
        <import package="javax.swing.undo.CannotUndoException"/>
        <import package="javax.swing.undo.UndoManager"/>
        <class name="Notepad" line="66">
            <extends class="JPanel"/>
            <javadoc line="66">
                Sample application using the simple text editor component that
                  supports only one font.                
                <author>
                    Timothy Prinzing                    
                </author>
            </javadoc>
            <declaration name="resources" type="ResourceBundle" line="72"/>
            <declaration name="EXIT_AFTER_PAINT" type="String" line="73"/>
            <declaration name="exitAfterFirstPaint" type="boolean" line="74"/>
            <scope line="75">
                <scope line="76"/>
                <scope line="79"/>
            </scope>
            <method name="paintChildren" type="void" line="84">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
                <scope line="86"/>
            </method>
            <method name="Notepad" type="constructor" line="90">
                <scope line="92">
                    <scope line="93">
                        <scope line="94"/>
                    </scope>
                </scope>
                <scope line="100"/>
                <declaration name="actions" type="Action[]" line="107"/>
                <scope line="108">
                    <declaration name="a" type="Action" line="109"/>
                </scope>
                <declaration name="scroller" type="JScrollPane" line="112"/>
                <declaration name="port" type="JViewport" line="113"/>
                <scope line="115">
                    <declaration name="vpFlag" type="String" line="116"/>
                    <declaration name="bs" type="Boolean" line="117"/>
                </scope>
                <scope line="120"/>
                <declaration name="panel" type="JPanel" line="123"/>
            </method>
            <method name="main" type="void" line="130">
                <params>
                    <param name="args" type="String[]"/>
                </params>
                <scope line="131">
                    <scope line="132"/>
                    <anonymous_class line="135">
                        <method name="run" type="void" line="136">
                            <declaration name="frame" type="JFrame" line="137"/>
                            <declaration name="notepad" type="Notepad" line="141"/>
                        </method>
                    </anonymous_class>
                </scope>
                <scope line="152"/>
            </method>
            <javadoc line="156">
                Fetch the list of actions supported by this
                  editor.  It is implemented to return the list
                  of actions supported by the embedded JTextComponent
                  augmented with the actions defined locally.                
            </javadoc>
            <method name="getActions" type="Action[]" line="162"/>
            <javadoc line="165">
                Create an editor to represent the given document.                
            </javadoc>
            <method name="createEditor" type="JTextComponent" line="168">
                <declaration name="c" type="JTextComponent" line="169"/>
            </method>
            <javadoc line="174">
                Fetch the editor contained in this panel                
            </javadoc>
            <method name="getEditor" type="JTextComponent" line="177"/>
            <class name="AppCloser" line="180">
                <extends class="WindowAdapter"/>
                <javadoc line="180">
                    To shutdown when run as an application.  This is a
                      fairly lame implementation.   A more self-respecting
                      implementation would at least check to see if a save
                      was needed.                    
                </javadoc>
                <method name="windowClosing" type="void" line="187">
                    <params>
                        <param name="e" type="WindowEvent"/>
                    </params>
                </method>
            </class>
            <javadoc line="191">
                Find the hosting frame, for the file-chooser dialog.                
            </javadoc>
            <method name="getFrame" type="Frame" line="194">
                <scope line="195">
                    <scope line="196"/>
                </scope>
            </method>
            <javadoc line="202">
                This is the hook through which all menu items are
                  created.  It registers the result with the menuitem
                  hashtable so that it can be fetched with getMenuItem().                
                <see>
                    #getMenuItem                    
                </see>
            </javadoc>
            <method name="createMenuItem" type="JMenuItem" line="208">
                <params>
                    <param name="cmd" type="String"/>
                </params>
                <declaration name="mi" type="JMenuItem" line="209"/>
                <declaration name="url" type="URL" line="210"/>
                <scope line="211"/>
                <declaration name="astr" type="String" line="215"/>
                <scope line="216"/>
                <declaration name="a" type="Action" line="220"/>
                <scope line="221"/>
                <scope line="226"/>
            </method>
            <javadoc line="232">
                Fetch the menu item that was created for the given
                  command.                
                <param>
                    cmd  Name of the action.                    
                </param>
                <returns>
                    item created for the given command or null
                      if one wasn't created.                    
                </returns>
            </javadoc>
            <method name="getMenuItem" type="JMenuItem" line="239">
                <params>
                    <param name="cmd" type="String"/>
                </params>
            </method>
            <method name="getAction" type="Action" line="242">
                <params>
                    <param name="cmd" type="String"/>
                </params>
            </method>
            <method name="getResourceString" type="String" line="245">
                <params>
                    <param name="nm" type="String"/>
                </params>
                <declaration name="str" type="String" line="246"/>
                <scope line="247"/>
                <scope line="250"/>
            </method>
            <method name="getResource" type="URL" line="255">
                <params>
                    <param name="key" type="String"/>
                </params>
                <declaration name="name" type="String" line="256"/>
                <scope line="257">
                    <declaration name="url" type="URL" line="258"/>
                </scope>
            </method>
            <method name="getToolbar" type="Container" line="263"/>
            <method name="getMenubar" type="JMenuBar" line="266"/>
            <javadoc line="269">
                Create a status bar                
            </javadoc>
            <method name="createStatusbar" type="Component" line="272"/>
            <javadoc line="276">
                Resets the undo manager.                
            </javadoc>
            <method name="resetUndoManager" type="void" line="279"/>
            <javadoc line="284">
                Create the toolbar.  By default this reads the
                  resource file for the definition of the toolbar.                
            </javadoc>
            <method name="createToolbar" type="Component" line="288">
                <declaration name="toolKeys" type="String[]" line="290"/>
                <scope line="291">
                    <scope line="292"/>
                    <scope line="295"/>
                </scope>
            </method>
            <javadoc line="302">
                Hook through which every toolbar item is created.                
            </javadoc>
            <method name="createTool" type="Component" line="305">
                <params>
                    <param name="key" type="String"/>
                </params>
            </method>
            <javadoc line="308">
                Create a button to go inside of the toolbar.  By default this
                  will load an image resource.  The image filename is relative to
                  the classpath (including the &apos;.&apos; directory if its a part of the
                  classpath), and may either be in a JAR file or a separate file.                
                <param>
                    key The key in the resource file to serve as the basis
                      of lookups.                    
                </param>
            </javadoc>
            <method name="createToolbarButton" type="JButton" line="316">
                <params>
                    <param name="key" type="String"/>
                </params>
                <declaration name="url" type="URL" line="317"/>
                <anonymous_class line="318">
                    <method name="getAlignmentY" type="float" line="319"/>
                </anonymous_class>
                <declaration name="b" type="JButton" line="318"/>
                <declaration name="astr" type="String" line="326"/>
                <scope line="327"/>
                <declaration name="a" type="Action" line="330"/>
                <scope line="331"/>
                <scope line="335"/>
                <declaration name="tip" type="String" line="338"/>
                <scope line="339"/>
            </method>
            <javadoc line="344">
                Take the given string and chop it up into a series
                  of strings on whitespace boundaries.  This is useful
                  for trying to get an array of strings out of the
                  resource file.                
            </javadoc>
            <method name="tokenize" type="String[]" line="350">
                <params>
                    <param name="input" type="String"/>
                </params>
                <declaration name="v" type="List&lt;String&gt;" line="351"/>
                <declaration name="t" type="StringTokenizer" line="352"/>
                <declaration name="cmd" type="String" line="353"/>
                <scope line="354"/>
                <scope line="358"/>
            </method>
            <javadoc line="363">
                Create the menubar for the app.  By default this pulls the
                  definition of the menu from the associated resource file.                
            </javadoc>
            <method name="createMenubar" type="JMenuBar" line="367">
                <declaration name="mi" type="JMenuItem" line="368"/>
                <declaration name="mb" type="JMenuBar" line="369"/>
                <declaration name="menuKeys" type="String[]" line="370"/>
                <scope line="371">
                    <declaration name="m" type="JMenu" line="372"/>
                    <scope line="373"/>
                </scope>
            </method>
            <javadoc line="380">
                Create a menu for the app.  By default this pulls the
                  definition of the menu from the associated resource file.                
            </javadoc>
            <method name="createMenu" type="JMenu" line="384">
                <params>
                    <param name="key" type="String"/>
                </params>
                <declaration name="itemKeys" type="String[]" line="385"/>
                <declaration name="menu" type="JMenu" line="386"/>
                <scope line="387">
                    <scope line="388"/>
                    <scope line="391">
                        <declaration name="mi" type="JMenuItem" line="392"/>
                    </scope>
                </scope>
            </method>
            <method name="createActionChangeListener" type="PropertyChangeListener" line="398">
                <params>
                    <param name="b" type="JMenuItem"/>
                </params>
            </method>
            <class name="ActionChangedListener" line="401">
                <implements interface="PropertyChangeListener"/>
                <declaration name="menuItem" type="JMenuItem" line="402"/>
                <method name="ActionChangedListener" type="constructor" line="403">
                    <params>
                        <param name="mi" type="JMenuItem"/>
                    </params>
                </method>
                <method name="propertyChange" type="void" line="407">
                    <params>
                        <param name="e" type="PropertyChangeEvent"/>
                    </params>
                    <declaration name="propertyName" type="String" line="408"/>
                    <scope line="409">
                        <declaration name="text" type="String" line="410"/>
                    </scope>
                    <scope line="413">
                        <declaration name="enabledState" type="Boolean" line="414"/>
                    </scope>
                </method>
            </class>
            <declaration name="editor" type="JTextComponent" line="419"/>
            <declaration name="commands" type="Map&lt;Object,Action&gt;" line="420"/>
            <declaration name="menuItems" type="Map&lt;String,JMenuItem&gt;" line="421"/>
            <declaration name="menubar" type="JMenuBar" line="422"/>
            <declaration name="toolbar" type="JToolBar" line="423"/>
            <declaration name="status" type="JComponent" line="424"/>
            <declaration name="elementTreeFrame" type="JFrame" line="425"/>
            <declaration name="elementTreePanel" type="ElementTreePanel" line="426"/>
            <declaration name="fileDialog" type="FileDialog" line="427"/>
            <declaration name="undoHandler" type="UndoableEditListener" line="428"/>
            <javadoc line="428">
                Listener for the edits on the current document.                
            </javadoc>
            <declaration name="undo" type="UndoManager" line="432"/>
            <javadoc line="432">
                UndoManager that we add edits to.                
            </javadoc>
            <declaration name="imageSuffix" type="String" line="436"/>
            <javadoc line="436">
                Suffix applied to the key used in resource file
                  lookups for an image.                
            </javadoc>
            <declaration name="labelSuffix" type="String" line="441"/>
            <javadoc line="441">
                Suffix applied to the key used in resource file
                  lookups for a label.                
            </javadoc>
            <declaration name="actionSuffix" type="String" line="446"/>
            <javadoc line="446">
                Suffix applied to the key used in resource file
                  lookups for an action.                
            </javadoc>
            <declaration name="tipSuffix" type="String" line="451"/>
            <javadoc line="451">
                Suffix applied to the key used in resource file
                  lookups for tooltip text.                
            </javadoc>
            <declaration name="openAction" type="String" line="456"/>
            <declaration name="newAction" type="String" line="457"/>
            <declaration name="saveAction" type="String" line="458"/>
            <declaration name="exitAction" type="String" line="459"/>
            <declaration name="showElementTreeAction" type="String" line="460"/>
            <class name="UndoHandler" line="461">
                <implements interface="UndoableEditListener"/>
                <javadoc line="462">
                    Messaged when the Document has created an edit, the edit is
                      added to &lt;code&gt;undo&lt;/code&gt;, an instance of UndoManager.                    
                </javadoc>
                <method name="undoableEditHappened" type="void" line="466">
                    <params>
                        <param name="e" type="UndoableEditEvent"/>
                    </params>
                </method>
            </class>
            <class name="StatusBar" line="472">
                <extends class="JComponent"/>
                <javadoc line="472">
                    FIXME - I&apos;m not very useful yet                    
                </javadoc>
                <method name="StatusBar" type="constructor" line="476"/>
                <method name="paint" type="void" line="480">
                    <params>
                        <param name="g" type="Graphics"/>
                    </params>
                </method>
            </class>
            <declaration name="undoAction" type="UndoAction" line="484"/>
            <declaration name="redoAction" type="RedoAction" line="485"/>
            <declaration name="defaultActions" type="Action[]" line="486"/>
            <javadoc line="486">
                Actions defined by the Notepad class                
            </javadoc>
            <class name="UndoAction" line="490">
                <extends class="AbstractAction"/>
                <method name="UndoAction" type="constructor" line="491"/>
                <method name="actionPerformed" type="void" line="495">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                    <scope line="496"/>
                    <scope line="499"/>
                </method>
                <method name="update" type="void" line="505">
                    <scope line="506"/>
                    <scope line="510"/>
                </method>
            </class>
            <class name="RedoAction" line="516">
                <extends class="AbstractAction"/>
                <method name="RedoAction" type="constructor" line="517"/>
                <method name="actionPerformed" type="void" line="521">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                    <scope line="522"/>
                    <scope line="525"/>
                </method>
                <method name="update" type="void" line="531">
                    <scope line="532"/>
                    <scope line="536"/>
                </method>
            </class>
            <class name="OpenAction" line="542">
                <extends class="NewAction"/>
                <method name="OpenAction" type="constructor" line="543"/>
                <method name="actionPerformed" type="void" line="546">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                    <declaration name="frame" type="Frame" line="547"/>
                    <declaration name="chooser" type="JFileChooser" line="548"/>
                    <declaration name="ret" type="int" line="549"/>
                    <scope line="550"/>
                    <declaration name="f" type="File" line="553"/>
                    <scope line="554">
                        <declaration name="oldDoc" type="Document" line="555"/>
                        <scope line="556"/>
                        <scope line="559"/>
                        <declaration name="loader" type="Thread" line="564"/>
                    </scope>
                    <scope line="567"/>
                </method>
            </class>
            <class name="SaveAction" line="572">
                <extends class="AbstractAction"/>
                <method name="SaveAction" type="constructor" line="573"/>
                <method name="actionPerformed" type="void" line="576">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                    <declaration name="frame" type="Frame" line="577"/>
                    <declaration name="chooser" type="JFileChooser" line="578"/>
                    <declaration name="ret" type="int" line="579"/>
                    <scope line="580"/>
                    <declaration name="f" type="File" line="583"/>
                    <declaration name="saver" type="Thread" line="585"/>
                </method>
            </class>
            <class name="NewAction" line="589">
                <extends class="AbstractAction"/>
                <method name="NewAction" type="constructor" line="590"/>
                <method name="NewAction" type="constructor" line="593">
                    <params>
                        <param name="nm" type="String"/>
                    </params>
                </method>
                <method name="actionPerformed" type="void" line="596">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                    <declaration name="oldDoc" type="Document" line="597"/>
                    <scope line="598"/>
                </method>
            </class>
            <class name="ExitAction" line="608">
                <extends class="AbstractAction"/>
                <javadoc line="608">
                    Really lame implementation of an exit command                    
                </javadoc>
                <method name="ExitAction" type="constructor" line="612"/>
                <method name="actionPerformed" type="void" line="615">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                </method>
            </class>
            <class name="ShowElementTreeAction" line="619">
                <extends class="AbstractAction"/>
                <javadoc line="619">
                    Action that brings up a JFrame with a JTree showing the structure
                      of the document.                    
                </javadoc>
                <method name="ShowElementTreeAction" type="constructor" line="624"/>
                <method name="ShowElementTreeAction" type="constructor" line="627">
                    <params>
                        <param name="nm" type="String"/>
                    </params>
                </method>
                <method name="actionPerformed" type="void" line="630">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                    <scope line="631">
                        <scope line="632">
                            <declaration name="title" type="String" line="633"/>
                        </scope>
                        <scope line="636"/>
                        <anonymous_class line="639">
                            <method name="windowClosing" type="void" line="640">
                                <params>
                                    <param name="weeee" type="WindowEvent"/>
                                </params>
                            </method>
                        </anonymous_class>
                        <declaration name="fContentPane" type="Container" line="645"/>
                    </scope>
                </method>
            </class>
            <class name="FileLoader" line="654">
                <extends class="Thread"/>
                <javadoc line="654">
                    Thread to load a file into the text storage model                    
                </javadoc>
                <method name="FileLoader" type="constructor" line="658">
                    <params>
                        <param name="f" type="File"/>
                        <param name="doc" type="Document"/>
                    </params>
                </method>
                <method name="run" type="void" line="663">
                    <scope line="664">
                        <declaration name="progress" type="JProgressBar" line="666"/>
                        <declaration name="in" type="Reader" line="671"/>
                        <declaration name="buff" type="char[]" line="672"/>
                        <declaration name="nch" type="int" line="673"/>
                        <scope line="674"/>
                    </scope>
                    <scope line="679">
                        <declaration name="msg" type="String" line="680"/>
                        <anonymous_class line="681">
                            <method name="run" type="void" line="682"/>
                        </anonymous_class>
                    </scope>
                    <scope line="688"/>
                    <scope line="695">
                        <anonymous_class line="696">
                            <method name="run" type="void" line="697"/>
                        </anonymous_class>
                    </scope>
                </method>
                <declaration name="doc" type="Document" line="704"/>
                <declaration name="f" type="File" line="705"/>
            </class>
            <class name="FileSaver" line="707">
                <extends class="Thread"/>
                <javadoc line="707">
                    Thread to save a document to file                    
                </javadoc>
                <declaration name="doc" type="Document" line="711"/>
                <declaration name="f" type="File" line="712"/>
                <method name="FileSaver" type="constructor" line="713">
                    <params>
                        <param name="f" type="File"/>
                        <param name="doc" type="Document"/>
                    </params>
                </method>
                <method name="run" type="void" line="718">
                    <scope line="719">
                        <declaration name="progress" type="JProgressBar" line="721"/>
                        <declaration name="out" type="Writer" line="726"/>
                        <declaration name="text" type="Segment" line="727"/>
                        <declaration name="charsLeft" type="int" line="729"/>
                        <declaration name="offset" type="int" line="730"/>
                        <scope line="731">
                            <scope line="737"/>
                            <scope line="740"/>
                        </scope>
                    </scope>
                    <scope line="747">
                        <declaration name="msg" type="String" line="748"/>
                        <anonymous_class line="749">
                            <method name="run" type="void" line="750"/>
                        </anonymous_class>
                    </scope>
                    <scope line="756"/>
                </method>
            </class>
        </class>
    </source>