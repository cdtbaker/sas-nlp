<?xml version="1.0" encoding="UTF-8"?>
    <source package="">
        <import package="java.awt.BorderLayout"/>
        <import package="java.awt.Color"/>
        <import package="java.awt.Component"/>
        <import package="java.awt.Container"/>
        <import package="java.awt.FileDialog"/>
        <import package="java.awt.Font"/>
        <import package="java.awt.Frame"/>
        <import package="java.awt.Graphics"/>
        <import package="java.awt.Insets"/>
        <import package="java.awt.event.ActionEvent"/>
        <import package="java.awt.event.WindowAdapter"/>
        <import package="java.awt.event.WindowEvent"/>
        <import package="java.beans.PropertyChangeEvent"/>
        <import package="java.beans.PropertyChangeListener"/>
        <import package="java.io.File"/>
        <import package="java.io.FileReader"/>
        <import package="java.io.FileWriter"/>
        <import package="java.io.IOException"/>
        <import package="java.io.Reader"/>
        <import package="java.io.Writer"/>
        <import package="java.net.URL"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.List"/>
        <import package="java.util.Locale"/>
        <import package="java.util.Map"/>
        <import package="java.util.MissingResourceException"/>
        <import package="java.util.ResourceBundle"/>
        <import package="java.util.StringTokenizer"/>
        <import package="java.util.logging.Level"/>
        <import package="java.util.logging.Logger"/>
        <import package="javax.swing.AbstractAction"/>
        <import package="javax.swing.Action"/>
        <import package="javax.swing.BorderFactory"/>
        <import package="javax.swing.Box"/>
        <import package="javax.swing.BoxLayout"/>
        <import package="javax.swing.ImageIcon"/>
        <import package="javax.swing.JButton"/>
        <import package="javax.swing.JComponent"/>
        <import package="javax.swing.JFileChooser"/>
        <import package="javax.swing.JFrame"/>
        <import package="javax.swing.JMenu"/>
        <import package="javax.swing.JMenuBar"/>
        <import package="javax.swing.JMenuItem"/>
        <import package="javax.swing.JOptionPane"/>
        <import package="javax.swing.JPanel"/>
        <import package="javax.swing.JProgressBar"/>
        <import package="javax.swing.JScrollPane"/>
        <import package="javax.swing.JTextArea"/>
        <import package="javax.swing.JToolBar"/>
        <import package="javax.swing.JViewport"/>
        <import package="javax.swing.SwingUtilities"/>
        <import package="javax.swing.UIManager"/>
        <import package="javax.swing.UIManager.LookAndFeelInfo"/>
        <import package="javax.swing.event.UndoableEditEvent"/>
        <import package="javax.swing.event.UndoableEditListener"/>
        <import package="javax.swing.text.BadLocationException"/>
        <import package="javax.swing.text.Document"/>
        <import package="javax.swing.text.JTextComponent"/>
        <import package="javax.swing.text.PlainDocument"/>
        <import package="javax.swing.text.Segment"/>
        <import package="javax.swing.text.TextAction"/>
        <import package="javax.swing.undo.CannotRedoException"/>
        <import package="javax.swing.undo.CannotUndoException"/>
        <import package="javax.swing.undo.UndoManager"/>
        <class name="Notepad" line="100">
            <extends class="JPanel"/>
            <comment line="482">
                Yarked from JMenu, ideally this would be public.                
            </comment>
            <comment line="487">
                Yarked from JMenu, ideally this would be public.                
            </comment>
            <comment line="580">
                --- action implementations -----------------------------------                
            </comment>
            <javadoc line="100">
                Sample application using the simple text editor component that
                  supports only one font.                
                <author>
                    Timothy Prinzing                    
                </author>
            </javadoc>
            <declaration name="resources" type="ResourceBundle" line="109"/>
            <declaration name="EXIT_AFTER_PAINT" type="String" line="110"/>
            <declaration name="exitAfterFirstPaint" type="boolean" line="111"/>
            <scope line="113">
                <scope line="114"/>
                <scope line="117"/>
            </scope>
            <method name="paintChildren" type="void" line="124">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
                <scope line="126"/>
            </method>
            <method name="Notepad" type="constructor" line="132">
                <comment line="135">
                    Trying to set Nimbus look and feel                    
                </comment>
                <comment line="149">
                    create the embedded JTextComponent                    
                </comment>
                <comment line="151">
                    Add this as a listener for undoable edits.                    
                </comment>
                <comment line="154">
                    install the command table                    
                </comment>
                <comment line="159">
                    commands.put(a.getText(Action.NAME), a);                    
                </comment>
                <comment line="173">
                    just use the viewport default                    
                </comment>
                <scope line="136">
                    <scope line="137">
                        <scope line="138"/>
                    </scope>
                </scope>
                <scope line="143"/>
                <declaration name="actions" type="Action[]" line="156"/>
                <scope line="157">
                    <declaration name="a" type="Action" line="158"/>
                </scope>
                <declaration name="scroller" type="JScrollPane" line="163"/>
                <declaration name="port" type="JViewport" line="164"/>
                <scope line="166">
                    <declaration name="vpFlag" type="String" line="167"/>
                    <declaration name="bs" type="Boolean" line="168"/>
                </scope>
                <scope line="172"/>
                <declaration name="panel" type="JPanel" line="177"/>
            </method>
            <method name="main" type="void" line="185">
                <params>
                    <param name="args" type="String[]"/>
                </params>
                <scope line="186">
                    <scope line="187"/>
                    <anonymous_class line="190">
                        <method name="run" type="void" line="192">
                            <declaration name="frame" type="JFrame" line="193"/>
                            <declaration name="notepad" type="Notepad" line="197"/>
                        </method>
                    </anonymous_class>
                </scope>
                <scope line="206"/>
            </method>
            <javadoc line="212">
                Fetch the list of actions supported by this
                  editor.  It is implemented to return the list
                  of actions supported by the embedded JTextComponent
                  augmented with the actions defined locally.                
            </javadoc>
            <method name="getActions" type="Action[]" line="218"/>
            <javadoc line="222">
                Create an editor to represent the given document.                
            </javadoc>
            <method name="createEditor" type="JTextComponent" line="225">
                <declaration name="c" type="JTextComponent" line="226"/>
            </method>
            <javadoc line="232">
                Fetch the editor contained in this panel                
            </javadoc>
            <method name="getEditor" type="JTextComponent" line="235"/>
            <class name="AppCloser" line="240">
                <extends class="WindowAdapter"/>
                <javadoc line="240">
                    To shutdown when run as an application.  This is a
                      fairly lame implementation.   A more self-respecting
                      implementation would at least check to see if a save
                      was needed.                    
                </javadoc>
                <method name="windowClosing" type="void" line="249">
                    <params>
                        <param name="e" type="WindowEvent"/>
                    </params>
                </method>
            </class>
            <javadoc line="254">
                Find the hosting frame, for the file-chooser dialog.                
            </javadoc>
            <method name="getFrame" type="Frame" line="257">
                <scope line="258">
                    <scope line="259"/>
                </scope>
            </method>
            <javadoc line="266">
                This is the hook through which all menu items are
                  created.  It registers the result with the menuitem
                  hashtable so that it can be fetched with getMenuItem().                
                <see>
                    #getMenuItem                    
                </see>
            </javadoc>
            <method name="createMenuItem" type="JMenuItem" line="272">
                <params>
                    <param name="cmd" type="String"/>
                </params>
                <declaration name="mi" type="JMenuItem" line="273"/>
                <declaration name="url" type="URL" line="274"/>
                <scope line="275"/>
                <declaration name="astr" type="String" line="279"/>
                <scope line="280"/>
                <declaration name="a" type="Action" line="284"/>
                <scope line="285"/>
                <scope line="289"/>
            </method>
            <javadoc line="296">
                Fetch the menu item that was created for the given
                  command.                
                <param>
                    cmd  Name of the action.                    
                </param>
                <returns>
                    item created for the given command or null
                      if one wasn't created.                    
                </returns>
            </javadoc>
            <method name="getMenuItem" type="JMenuItem" line="303">
                <params>
                    <param name="cmd" type="String"/>
                </params>
            </method>
            <method name="getAction" type="Action" line="307">
                <params>
                    <param name="cmd" type="String"/>
                </params>
            </method>
            <method name="getResourceString" type="String" line="311">
                <params>
                    <param name="nm" type="String"/>
                </params>
                <declaration name="str" type="String" line="312"/>
                <scope line="313"/>
                <scope line="315"/>
            </method>
            <method name="getResource" type="URL" line="321">
                <params>
                    <param name="key" type="String"/>
                </params>
                <declaration name="name" type="String" line="322"/>
                <scope line="323">
                    <declaration name="url" type="URL" line="324"/>
                </scope>
            </method>
            <method name="getToolbar" type="Container" line="330"/>
            <method name="getMenubar" type="JMenuBar" line="334"/>
            <javadoc line="338">
                Create a status bar                
            </javadoc>
            <method name="createStatusbar" type="Component" line="341">
                <comment line="342">
                    need to do something reasonable here                    
                </comment>
            </method>
            <javadoc line="347">
                Resets the undo manager.                
            </javadoc>
            <method name="resetUndoManager" type="void" line="350"/>
            <javadoc line="356">
                Create the toolbar.  By default this reads the
                  resource file for the definition of the toolbar.                
            </javadoc>
            <method name="createToolbar" type="Component" line="360">
                <declaration name="toolKeys" type="String[]" line="362"/>
                <scope line="363">
                    <scope line="364"/>
                    <scope line="366"/>
                </scope>
            </method>
            <javadoc line="374">
                Hook through which every toolbar item is created.                
            </javadoc>
            <method name="createTool" type="Component" line="377">
                <params>
                    <param name="key" type="String"/>
                </params>
            </method>
            <javadoc line="381">
                Create a button to go inside of the toolbar.  By default this
                  will load an image resource.  The image filename is relative to
                  the classpath (including the &apos;.&apos; directory if its a part of the
                  classpath), and may either be in a JAR file or a separate file.                
                <param>
                    key The key in the resource file to serve as the basis
                      of lookups.                    
                </param>
            </javadoc>
            <method name="createToolbarButton" type="JButton" line="390">
                <params>
                    <param name="key" type="String"/>
                </params>
                <declaration name="url" type="URL" line="391"/>
                <anonymous_class line="392">
                    <method name="getAlignmentY" type="float" line="395"/>
                </anonymous_class>
                <declaration name="b" type="JButton" line="392"/>
                <declaration name="astr" type="String" line="402"/>
                <scope line="403"/>
                <declaration name="a" type="Action" line="406"/>
                <scope line="407"/>
                <scope line="410"/>
                <declaration name="tip" type="String" line="414"/>
                <scope line="415"/>
            </method>
            <javadoc line="422">
                Take the given string and chop it up into a series
                  of strings on whitespace boundaries.  This is useful
                  for trying to get an array of strings out of the
                  resource file.                
            </javadoc>
            <method name="tokenize" type="String[]" line="428">
                <params>
                    <param name="input" type="String"/>
                </params>
                <declaration name="v" type="List&lt;String&gt;" line="429"/>
                <declaration name="t" type="StringTokenizer" line="430"/>
                <declaration name="cmd" type="String" line="431"/>
                <scope line="433"/>
                <scope line="437"/>
            </method>
            <javadoc line="444">
                Create the menubar for the app.  By default this pulls the
                  definition of the menu from the associated resource file.                
            </javadoc>
            <method name="createMenubar" type="JMenuBar" line="448">
                <declaration name="mi" type="JMenuItem" line="449"/>
                <declaration name="mb" type="JMenuBar" line="450"/>
                <declaration name="menuKeys" type="String[]" line="452"/>
                <scope line="453">
                    <declaration name="m" type="JMenu" line="454"/>
                    <scope line="455"/>
                </scope>
            </method>
            <javadoc line="463">
                Create a menu for the app.  By default this pulls the
                  definition of the menu from the associated resource file.                
            </javadoc>
            <method name="createMenu" type="JMenu" line="467">
                <params>
                    <param name="key" type="String"/>
                </params>
                <declaration name="itemKeys" type="String[]" line="468"/>
                <declaration name="menu" type="JMenu" line="469"/>
                <scope line="470">
                    <scope line="471"/>
                    <scope line="473">
                        <declaration name="mi" type="JMenuItem" line="474"/>
                    </scope>
                </scope>
            </method>
            <method name="createActionChangeListener" type="PropertyChangeListener" line="482">
                <params>
                    <param name="b" type="JMenuItem"/>
                </params>
            </method>
            <class name="ActionChangedListener" line="488">
                <implements interface="PropertyChangeListener"/>
                <declaration name="menuItem" type="JMenuItem" line="490"/>
                <method name="ActionChangedListener" type="constructor" line="492">
                    <params>
                        <param name="mi" type="JMenuItem"/>
                    </params>
                </method>
                <method name="propertyChange" type="void" line="497">
                    <params>
                        <param name="e" type="PropertyChangeEvent"/>
                    </params>
                    <declaration name="propertyName" type="String" line="498"/>
                    <scope line="499">
                        <declaration name="text" type="String" line="500"/>
                    </scope>
                    <scope line="502">
                        <declaration name="enabledState" type="Boolean" line="503"/>
                    </scope>
                </method>
            </class>
            <declaration name="editor" type="JTextComponent" line="508"/>
            <declaration name="commands" type="Map&lt;Object,Action&gt;" line="509"/>
            <declaration name="menuItems" type="Map&lt;String,JMenuItem&gt;" line="510"/>
            <declaration name="menubar" type="JMenuBar" line="511"/>
            <declaration name="toolbar" type="JToolBar" line="512"/>
            <declaration name="status" type="JComponent" line="513"/>
            <declaration name="elementTreeFrame" type="JFrame" line="514"/>
            <declaration name="elementTreePanel" type="ElementTreePanel" line="515"/>
            <declaration name="fileDialog" type="FileDialog" line="516"/>
            <declaration name="undoHandler" type="UndoableEditListener" line="517"/>
            <javadoc line="517">
                Listener for the edits on the current document.                
            </javadoc>
            <declaration name="undo" type="UndoManager" line="521"/>
            <javadoc line="521">
                UndoManager that we add edits to.                
            </javadoc>
            <declaration name="imageSuffix" type="String" line="523"/>
            <javadoc line="523">
                Suffix applied to the key used in resource file
                  lookups for an image.                
            </javadoc>
            <declaration name="labelSuffix" type="String" line="528"/>
            <javadoc line="528">
                Suffix applied to the key used in resource file
                  lookups for a label.                
            </javadoc>
            <declaration name="actionSuffix" type="String" line="533"/>
            <javadoc line="533">
                Suffix applied to the key used in resource file
                  lookups for an action.                
            </javadoc>
            <declaration name="tipSuffix" type="String" line="538"/>
            <javadoc line="538">
                Suffix applied to the key used in resource file
                  lookups for tooltip text.                
            </javadoc>
            <declaration name="openAction" type="String" line="543"/>
            <declaration name="newAction" type="String" line="544"/>
            <declaration name="saveAction" type="String" line="545"/>
            <declaration name="exitAction" type="String" line="546"/>
            <declaration name="showElementTreeAction" type="String" line="547"/>
            <class name="UndoHandler" line="550">
                <implements interface="UndoableEditListener"/>
                <javadoc line="552">
                    Messaged when the Document has created an edit, the edit is
                      added to &lt;code&gt;undo&lt;/code&gt;, an instance of UndoManager.                    
                </javadoc>
                <method name="undoableEditHappened" type="void" line="556">
                    <params>
                        <param name="e" type="UndoableEditEvent"/>
                    </params>
                </method>
            </class>
            <class name="StatusBar" line="564">
                <extends class="JComponent"/>
                <javadoc line="564">
                    FIXME - I&apos;m not very useful yet                    
                </javadoc>
                <method name="StatusBar" type="constructor" line="569"/>
                <method name="paint" type="void" line="575">
                    <params>
                        <param name="g" type="Graphics"/>
                    </params>
                </method>
            </class>
            <declaration name="undoAction" type="UndoAction" line="580"/>
            <declaration name="redoAction" type="RedoAction" line="581"/>
            <declaration name="defaultActions" type="Action[]" line="582"/>
            <javadoc line="582">
                Actions defined by the Notepad class                
            </javadoc>
            <class name="UndoAction" line="596">
                <extends class="AbstractAction"/>
                <method name="UndoAction" type="constructor" line="598"/>
                <method name="actionPerformed" type="void" line="603">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                    <scope line="604"/>
                    <scope line="606"/>
                </method>
                <method name="update" type="void" line="614">
                    <scope line="615"/>
                    <scope line="618"/>
                </method>
            </class>
            <class name="RedoAction" line="626">
                <extends class="AbstractAction"/>
                <method name="RedoAction" type="constructor" line="628"/>
                <method name="actionPerformed" type="void" line="633">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                    <scope line="634"/>
                    <scope line="636"/>
                </method>
                <method name="update" type="void" line="644">
                    <scope line="645"/>
                    <scope line="648"/>
                </method>
            </class>
            <class name="OpenAction" line="656">
                <extends class="NewAction"/>
                <method name="OpenAction" type="constructor" line="658"/>
                <method name="actionPerformed" type="void" line="663">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                    <declaration name="frame" type="Frame" line="664"/>
                    <declaration name="chooser" type="JFileChooser" line="665"/>
                    <declaration name="ret" type="int" line="666"/>
                    <scope line="668"/>
                    <declaration name="f" type="File" line="672"/>
                    <scope line="673">
                        <declaration name="oldDoc" type="Document" line="674"/>
                        <scope line="675"/>
                        <scope line="678"/>
                        <declaration name="loader" type="Thread" line="683"/>
                    </scope>
                    <scope line="685"/>
                </method>
            </class>
            <class name="SaveAction" line="695">
                <extends class="AbstractAction"/>
                <method name="SaveAction" type="constructor" line="697"/>
                <method name="actionPerformed" type="void" line="701">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                    <declaration name="frame" type="Frame" line="702"/>
                    <declaration name="chooser" type="JFileChooser" line="703"/>
                    <declaration name="ret" type="int" line="704"/>
                    <scope line="706"/>
                    <declaration name="f" type="File" line="710"/>
                    <declaration name="saver" type="Thread" line="712"/>
                </method>
            </class>
            <class name="NewAction" line="718">
                <extends class="AbstractAction"/>
                <method name="NewAction" type="constructor" line="720"/>
                <method name="NewAction" type="constructor" line="724">
                    <params>
                        <param name="nm" type="String"/>
                    </params>
                </method>
                <method name="actionPerformed" type="void" line="728">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                    <declaration name="oldDoc" type="Document" line="729"/>
                    <scope line="730"/>
                </method>
            </class>
            <class name="ExitAction" line="742">
                <extends class="AbstractAction"/>
                <javadoc line="742">
                    Really lame implementation of an exit command                    
                </javadoc>
                <method name="ExitAction" type="constructor" line="747"/>
                <method name="actionPerformed" type="void" line="751">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                </method>
            </class>
            <class name="ShowElementTreeAction" line="757">
                <extends class="AbstractAction"/>
                <javadoc line="757">
                    Action that brings up a JFrame with a JTree showing the structure
                      of the document.                    
                </javadoc>
                <method name="ShowElementTreeAction" type="constructor" line="763"/>
                <method name="ShowElementTreeAction" type="constructor" line="767">
                    <params>
                        <param name="nm" type="String"/>
                    </params>
                </method>
                <method name="actionPerformed" type="void" line="771">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                    <comment line="773">
                        Create a frame containing an instance of                        
                    </comment>
                    <comment line="774">
                        ElementTreePanel.                        
                    </comment>
                    <scope line="772">
                        <scope line="775">
                            <declaration name="title" type="String" line="776"/>
                        </scope>
                        <scope line="778"/>
                        <anonymous_class line="782">
                            <method name="windowClosing" type="void" line="785">
                                <params>
                                    <param name="weeee" type="WindowEvent"/>
                                </params>
                            </method>
                        </anonymous_class>
                        <declaration name="fContentPane" type="Container" line="789"/>
                    </scope>
                </method>
            </class>
            <class name="FileLoader" line="801">
                <extends class="Thread"/>
                <javadoc line="801">
                    Thread to load a file into the text storage model                    
                </javadoc>
                <method name="FileLoader" type="constructor" line="806">
                    <params>
                        <param name="f" type="File"/>
                        <param name="doc" type="Document"/>
                    </params>
                </method>
                <method name="run" type="void" line="813">
                    <comment line="815">
                        initialize the statusbar                        
                    </comment>
                    <comment line="823">
                        try to start reading                        
                    </comment>
                    <comment line="847">
                        we are done... get rid of progressbar                        
                    </comment>
                    <scope line="814">
                        <declaration name="progress" type="JProgressBar" line="817"/>
                        <declaration name="in" type="Reader" line="824"/>
                        <declaration name="buff" type="char[]" line="825"/>
                        <declaration name="nch" type="int" line="826"/>
                        <scope line="827"/>
                    </scope>
                    <scope line="832">
                        <declaration name="msg" type="String" line="833"/>
                        <anonymous_class line="834">
                            <method name="run" type="void" line="836"/>
                        </anonymous_class>
                    </scope>
                    <scope line="843"/>
                    <scope line="853">
                        <anonymous_class line="854">
                            <method name="run" type="void" line="856"/>
                        </anonymous_class>
                    </scope>
                </method>
                <declaration name="doc" type="Document" line="862"/>
                <declaration name="f" type="File" line="863"/>
            </class>
            <class name="FileSaver" line="867">
                <extends class="Thread"/>
                <javadoc line="867">
                    Thread to save a document to file                    
                </javadoc>
                <declaration name="doc" type="Document" line="872"/>
                <declaration name="f" type="File" line="873"/>
                <method name="FileSaver" type="constructor" line="875">
                    <params>
                        <param name="f" type="File"/>
                        <param name="doc" type="Document"/>
                    </params>
                </method>
                <method name="run" type="void" line="883">
                    <comment line="885">
                        initialize the statusbar                        
                    </comment>
                    <comment line="893">
                        start writing                        
                    </comment>
                    <comment line="929">
                        we are done... get rid of progressbar                        
                    </comment>
                    <scope line="884">
                        <declaration name="progress" type="JProgressBar" line="887"/>
                        <declaration name="out" type="Writer" line="894"/>
                        <declaration name="text" type="Segment" line="895"/>
                        <declaration name="charsLeft" type="int" line="897"/>
                        <declaration name="offset" type="int" line="898"/>
                        <scope line="899">
                            <scope line="905"/>
                            <scope line="907"/>
                        </scope>
                    </scope>
                    <scope line="915">
                        <declaration name="msg" type="String" line="916"/>
                        <anonymous_class line="917">
                            <method name="run" type="void" line="919"/>
                        </anonymous_class>
                    </scope>
                    <scope line="926"/>
                </method>
            </class>
        </class>
    </source>