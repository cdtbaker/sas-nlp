<?xml version="1.0" encoding="UTF-8"?>
    <source package="">
        <import package="java.util.EventObject"/>
        <import package="java.util.List"/>
        <import package="javax.swing.JTable"/>
        <import package="javax.swing.table.DefaultTableModel"/>
        <import package="javax.swing.table.TableCellEditor"/>
        <import package="javax.swing.table.TableCellRenderer"/>
        <import package="javax.swing.table.TableColumn"/>
        <class name="OldJTable" line="42">
            <extends class="JTable"/>
            <comment line="50">
                A new convenience method returning the index of the column in the
                  co-ordinate space of the view.                
            </comment>
            <comment line="58">
                Methods deleted from the JTable because they only work with the
                  DefaultTableModel.                
            </comment>
            <comment line="71">
                Override the new JTable implementation - it will not add a column to the
                 DefaultTableModel.                
            </comment>
            <comment line="96">
                Not possilble to make this work the same way ... change it so that
                 it does not delete columns from the model.                
            </comment>
            <comment line="153">
                Methods removed from JTable in the move from identifiers to ints.                
            </comment>
            <comment line="227">
                Methods that had their arguments switched.                
            </comment>
            <comment line="231">
                These won&apos;t work with the new table package.                
            </comment>
            <comment line="233">
                public Object getValueAt(int columnIndex, int rowIndex) {
                return super.getValueAt(rowIndex, columnIndex);
                }
                
                public boolean isCellEditable(int columnIndex, int rowIndex) {
                return super.isCellEditable(rowIndex, columnIndex);
                }
                
                public void setValueAt(Object aValue, int columnIndex, int rowIndex) {
                super.setValueAt(aValue, rowIndex, columnIndex);
                }                
            </comment>
            <javadoc line="42">
                The OldJTable is an unsupported class containing some methods that were
                  deleted from the JTable between releases 0.6 and 0.7                
            </javadoc>
            <method name="getColumnIndex" type="int" line="53">
                <params>
                    <param name="identifier" type="Object"/>
                </params>
            </method>
            <method name="addColumn" type="TableColumn" line="62">
                <params>
                    <param name="columnIdentifier" type="Object"/>
                    <param name="width" type="int"/>
                </params>
            </method>
            <method name="addColumn" type="TableColumn" line="66">
                <params>
                    <param name="columnIdentifier" type="Object"/>
                    <param name="columnData" type="List"/>
                </params>
            </method>
            <method name="addColumn" type="TableColumn" line="74">
                <params>
                    <param name="columnIdentifier" type="Object"/>
                    <param name="width" type="int"/>
                    <param name="renderer" type="TableCellRenderer"/>
                    <param name="editor" type="TableCellEditor"/>
                </params>
            </method>
            <method name="addColumn" type="TableColumn" line="80">
                <params>
                    <param name="columnIdentifier" type="Object"/>
                    <param name="width" type="int"/>
                    <param name="renderer" type="TableCellRenderer"/>
                    <param name="editor" type="TableCellEditor"/>
                    <param name="columnData" type="List"/>
                </params>
                <comment line="84">
                    Set up the model side first                    
                </comment>
                <comment line="88">
                    The column will have been added to the end, so the index of the
                     column in the model is the last element.                    
                </comment>
                <declaration name="m" type="DefaultTableModel" line="84"/>
                <declaration name="newColumn" type="TableColumn" line="89"/>
            </method>
            <method name="removeColumn" type="void" line="97">
                <params>
                    <param name="columnIdentifier" type="Object"/>
                </params>
            </method>
            <method name="addRow" type="void" line="101">
                <params>
                    <param name="rowData" type="Object[]"/>
                </params>
            </method>
            <method name="addRow" type="void" line="106">
                <params>
                    <param name="rowData" type="List"/>
                </params>
            </method>
            <method name="removeRow" type="void" line="111">
                <params>
                    <param name="rowIndex" type="int"/>
                </params>
            </method>
            <method name="moveRow" type="void" line="116">
                <params>
                    <param name="startIndex" type="int"/>
                    <param name="endIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                </params>
            </method>
            <method name="insertRow" type="void" line="121">
                <params>
                    <param name="rowIndex" type="int"/>
                    <param name="rowData" type="Object[]"/>
                </params>
            </method>
            <method name="insertRow" type="void" line="126">
                <params>
                    <param name="rowIndex" type="int"/>
                    <param name="rowData" type="List"/>
                </params>
            </method>
            <method name="setNumRows" type="void" line="131">
                <params>
                    <param name="newSize" type="int"/>
                </params>
            </method>
            <method name="setDataVector" type="void" line="136">
                <params>
                    <param name="newData" type="Object[][]"/>
                    <param name="columnIds" type="List"/>
                </params>
            </method>
            <method name="setDataVector" type="void" line="142">
                <params>
                    <param name="newData" type="Object[][]"/>
                    <param name="columnIds" type="Object[]"/>
                </params>
            </method>
            <method name="checkDefaultTableModel" type="void" line="147"/>
            <method name="getValueAt" type="Object" line="156">
                <params>
                    <param name="columnIdentifier" type="Object"/>
                    <param name="rowIndex" type="int"/>
                </params>
            </method>
            <method name="isCellEditable" type="boolean" line="160">
                <params>
                    <param name="columnIdentifier" type="Object"/>
                    <param name="rowIndex" type="int"/>
                </params>
            </method>
            <method name="setValueAt" type="void" line="164">
                <params>
                    <param name="aValue" type="Object"/>
                    <param name="columnIdentifier" type="Object"/>
                    <param name="rowIndex" type="int"/>
                </params>
            </method>
            <method name="editColumnRow" type="boolean" line="168">
                <params>
                    <param name="identifier" type="Object"/>
                    <param name="row" type="int"/>
                </params>
            </method>
            <method name="moveColumn" type="void" line="172">
                <params>
                    <param name="columnIdentifier" type="Object"/>
                    <param name="targetColumnIdentifier" type="Object"/>
                </params>
            </method>
            <method name="isColumnSelected" type="boolean" line="177">
                <params>
                    <param name="identifier" type="Object"/>
                </params>
            </method>
            <method name="addColumn" type="TableColumn" line="181">
                <params>
                    <param name="modelColumn" type="int"/>
                    <param name="width" type="int"/>
                </params>
            </method>
            <method name="addColumn" type="TableColumn" line="185">
                <params>
                    <param name="modelColumn" type="int"/>
                </params>
            </method>
            <javadoc line="189">
                Creates a new column with &lt;I&gt;modelColumn&lt;/I&gt;, &lt;I&gt;width&lt;/I&gt;,
                  &lt;I&gt;renderer&lt;/I&gt;, and &lt;I&gt;editor&lt;/I&gt; and adds it to the end of
                  the JTable&apos;s array of columns. This method also retrieves the
                  name of the column using the model&apos;s &lt;I&gt;getColumnName(modelColumn)&lt;/I&gt;
                  method, and sets the both the header value and the identifier
                  for this TableColumn accordingly.
                  &lt;p&gt;
                  The &lt;I&gt;modelColumn&lt;/I&gt; is the index of the column in the model which
                  will supply the data for this column in the table. This, like the
                  &lt;I&gt;columnIdentifier&lt;/I&gt; in previous releases, does not change as the
                  columns are moved in the view.
                  &lt;p&gt;
                  For the rest of the JTable API, and all of its associated classes,
                  columns are referred to in the co-ordinate system of the view, the
                  index of the column in the model is kept inside the TableColumn
                  and is used only to retrieve the information from the appropraite
                  column in the model.
                  &lt;p&gt;                
                <param>
                    modelColumn     The index of the column in the model                    
                </param>
                <param>
                    width           The new column's width.  Or -1 to use
                      the default width                    
                </param>
                <param>
                    renderer        The renderer used with the new column.
                      Or null to use the default renderer.                    
                </param>
                <param>
                    editor          The editor used with the new column.
                      Or null to use the default editor.                    
                </param>
            </javadoc>
            <method name="addColumn" type="TableColumn" line="219">
                <params>
                    <param name="modelColumn" type="int"/>
                    <param name="width" type="int"/>
                    <param name="renderer" type="TableCellRenderer"/>
                    <param name="editor" type="TableCellEditor"/>
                </params>
                <declaration name="newColumn" type="TableColumn" line="220"/>
            </method>
            <method name="editColumnRow" type="boolean" line="246">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="rowIndex" type="int"/>
                </params>
            </method>
            <method name="editColumnRow" type="boolean" line="250">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="rowIndex" type="int"/>
                    <param name="e" type="EventObject"/>
                </params>
            </method>
        </class>
    </source>