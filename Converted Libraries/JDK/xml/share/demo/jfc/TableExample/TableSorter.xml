<?xml version="1.0" encoding="UTF-8"?>
    <source package="">
        <import package="javax.swing.table.TableModel"/>
        <import package="javax.swing.event.TableModelEvent"/>
        <import package="java.awt.event.MouseAdapter"/>
        <import package="java.awt.event.MouseEvent"/>
        <import package="java.awt.event.InputEvent"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Date"/>
        <import package="java.util.List"/>
        <import package="javax.swing.JTable"/>
        <import package="javax.swing.table.JTableHeader"/>
        <import package="javax.swing.table.TableColumnModel"/>
        <class name="TableSorter" line="46">
            <extends class="TableMap"/>
            <comment line="237">
                This is a home-grown implementation which we have not had time
                 to research - it may perform poorly in some circumstances. It
                 requires twice the space of an in-place algorithm and makes
                 NlogN assigments shuttling the values between the two
                 arrays. The number of compares appears to vary between N-1 and
                 NlogN depending on the initial order but the main reason for
                 using it here is that, unlike qsort, it is stable.                
            </comment>
            <comment line="292">
                The mapping only affects the contents of the data rows.
                 Pass all requests to these rows through the mapping array: &quot;indexes&quot;.                
            </comment>
            <comment line="318">
                There is no-where else to put this.
                 Add a mouse listener to the Table to trigger a table sort
                 when a column heading is clicked in the JTable.                
            </comment>
            <javadoc line="46">
                A sorter for TableModels. The sorter has a model (conforming to TableModel)
                  and itself implements TableModel. TableSorter does not store or copy
                  the data in the TableModel, instead it maintains an array of
                  integers which it keeps the same size as the number of rows in its
                  model. When the model changes it notifies the sorter that something
                  has changed eg. &quot;rowsAdded&quot; so that its internal array of integers
                  can be reallocated. As requests are made of the sorter (like
                  getValueAt(row, col) it redirects them to its model via the mapping
                  array. That way the TableSorter appears to hold another copy of the table
                  with the rows in a different order. The sorting algorthm used is stable
                  which means that it does not move around rows when its comparison
                  function returns 0 to denote that they are equivalent.                
                <author>
                    Philip Milne                    
                </author>
            </javadoc>
            <declaration name="indexes" type="int" line="65"/>
            <declaration name="sortingColumns" type="List&amp;lt;Integer&amp;gt;" line="66"/>
            <declaration name="ascending" type="boolean" line="67"/>
            <declaration name="compares" type="int" line="68"/>
            <method name="TableSorter" type="constructor" line="70">
                <comment line="72">
                    For consistency.                    
                </comment>
            </method>
            <method name="TableSorter" type="constructor" line="74">
                <params>
                    <param name="model" type="TableModel"/>
                </params>
            </method>
            <method name="setModel" type="void" line="79">
                <params>
                    <param name="model" type="TableModel"/>
                </params>
            </method>
            <method name="compareRowsByColumn" type="int" line="84">
                <params>
                    <param name="row1" type="int"/>
                    <param name="row2" type="int"/>
                    <param name="column" type="int"/>
                </params>
                <comment line="89">
                    Check for nulls                    
                </comment>
                <comment line="94">
                    If both values are null return 0                    
                </comment>
                <comment line="97">
                    Define null less than everything.                    
                </comment>
                <comment line="103">
                    We copy all returned values from the getValue call in case
                    an optimised model is reusing one object to return many values.
                    The Number subclasses in the JDK are immutable and so will not be used
                    in this way but other subclasses of Number might want to do this to save
                    space and avoid unnecessary heap allocation.                    
                </comment>
                <comment line="155">
                    Define false &lt; true                    
                </comment>
                <declaration name="type" type="Class" line="85"/>
                <declaration name="data" type="TableModel" line="86"/>
                <declaration name="o1" type="Object" line="90"/>
                <declaration name="o2" type="Object" line="91"/>
                <scope line="94"/>
                <scope line="96"/>
                <scope line="98"/>
                <scope line="108">
                    <declaration name="n1" type="Number" line="109"/>
                    <declaration name="d1" type="double" line="110"/>
                    <declaration name="n2" type="Number" line="111"/>
                    <declaration name="d2" type="double" line="112"/>
                    <scope line="114"/>
                    <scope line="116"/>
                    <scope line="118"/>
                </scope>
                <scope line="121">
                    <declaration name="d1" type="Date" line="122"/>
                    <declaration name="n1" type="long" line="123"/>
                    <declaration name="d2" type="Date" line="124"/>
                    <declaration name="n2" type="long" line="125"/>
                    <scope line="127"/>
                    <scope line="129"/>
                    <scope line="131"/>
                </scope>
                <scope line="134">
                    <declaration name="s1" type="String" line="135"/>
                    <declaration name="s2" type="String" line="136"/>
                    <declaration name="result" type="int" line="137"/>
                    <scope line="139"/>
                    <scope line="141"/>
                    <scope line="143"/>
                </scope>
                <scope line="146">
                    <declaration name="bool1" type="Boolean" line="147"/>
                    <declaration name="b1" type="boolean" line="148"/>
                    <declaration name="bool2" type="Boolean" line="149"/>
                    <declaration name="b2" type="boolean" line="150"/>
                    <scope line="152"/>
                    <scope line="155"/>
                    <scope line="157"/>
                </scope>
                <scope line="160">
                    <declaration name="v1" type="Object" line="161"/>
                    <declaration name="s1" type="String" line="162"/>
                    <declaration name="v2" type="Object" line="163"/>
                    <declaration name="s2" type="String" line="164"/>
                    <declaration name="result" type="int" line="165"/>
                    <scope line="167"/>
                    <scope line="169"/>
                    <scope line="171"/>
                </scope>
            </method>
            <method name="compare" type="int" line="177">
                <params>
                    <param name="row1" type="int"/>
                    <param name="row2" type="int"/>
                </params>
                <scope line="179">
                    <declaration name="column" type="Integer" line="180"/>
                    <declaration name="result" type="int" line="181"/>
                    <scope line="182"/>
                </scope>
            </method>
            <method name="reallocateIndexes" type="void" line="189">
                <comment line="193">
                    Set up a new array of indexes with the right number of elements
                     for the new data model.                    
                </comment>
                <comment line="197">
                    Initialise with the identity mapping.                    
                </comment>
                <declaration name="rowCount" type="int" line="190"/>
                <scope line="197"/>
            </method>
            <method name="tableChanged" type="void" line="203">
                <params>
                    <param name="e" type="TableModelEvent"/>
                </params>
            </method>
            <method name="checkModel" type="void" line="210">
                <scope line="211"/>
            </method>
            <method name="sort" type="void" line="216">
                <params>
                    <param name="sender" type="Object"/>
                </params>
                <comment line="221">
                    n2sort();
                     qsort(0, indexes.length-1);                    
                </comment>
            </method>
            <method name="n2sort" type="void" line="226">
                <scope line="227">
                    <scope line="228">
                        <scope line="229"/>
                    </scope>
                </scope>
            </method>
            <method name="shuttlesort" type="void" line="243">
                <params>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                    <param name="low" type="int"/>
                    <param name="high" type="int"/>
                </params>
                <comment line="255">
                    This is an optional short-cut; at each recursive call,
                    check to see if the elements in this subset are already
                    ordered.  If so, no further comparisons are needed; the
                    sub-array can just be copied.  The array must be copied rather
                    than assigned otherwise sister calls in the recursion might
                    get out of sinc.  When the number of elements is three they
                    are partitioned so that the first set, [low, mid), has one
                    element and and the second, [mid, high), has two. We skip the
                    optimisation when the number of elements is three or less as
                    the first compare in the normal merge will produce the same
                    sequence of steps. This optimisation seems to be worthwhile
                    for partially ordered lists but some analysis is needed to
                    find out how the performance drops to Nlog(N) as the initial                    
                </comment>
                <comment line="275">
                    A normal merge.                    
                </comment>
                <scope line="244"/>
                <declaration name="middle" type="int" line="247"/>
                <declaration name="p" type="int" line="251"/>
                <declaration name="q" type="int" line="252"/>
                <scope line="269"/>
                <scope line="276">
                    <scope line="277"/>
                    <scope line="279"/>
                </scope>
            </method>
            <method name="swap" type="void" line="285">
                <params>
                    <param name="i" type="int"/>
                    <param name="j" type="int"/>
                </params>
                <declaration name="tmp" type="int" line="286"/>
            </method>
            <method name="getValueAt" type="Object" line="294">
                <params>
                    <param name="aRow" type="int"/>
                    <param name="aColumn" type="int"/>
                </params>
            </method>
            <method name="setValueAt" type="void" line="300">
                <params>
                    <param name="aValue" type="Object"/>
                    <param name="aRow" type="int"/>
                    <param name="aColumn" type="int"/>
                </params>
            </method>
            <method name="sortByColumn" type="void" line="305">
                <params>
                    <param name="column" type="int"/>
                </params>
            </method>
            <method name="sortByColumn" type="void" line="309">
                <params>
                    <param name="column" type="int"/>
                    <param name="ascending" type="boolean"/>
                </params>
            </method>
            <method name="addMouseListenerToHeaderInTable" type="void" line="320">
                <params>
                    <param name="table" type="JTable"/>
                </params>
                <declaration name="sorter" type="TableSorter" line="321"/>
                <declaration name="tableView" type="JTable" line="322"/>
                <anonymous_class line="324">
                    <method name="mouseClicked" type="void" line="327">
                        <params>
                            <param name="e" type="MouseEvent"/>
                        </params>
                        <declaration name="columnModel" type="TableColumnModel" line="328"/>
                        <declaration name="viewColumn" type="int" line="329"/>
                        <declaration name="column" type="int" line="330"/>
                        <scope line="331">
                            <declaration name="shiftPressed" type="int" line="333"/>
                            <declaration name="ascending" type="boolean" line="334"/>
                        </scope>
                    </method>
                </anonymous_class>
                <declaration name="listMouseListener" type="MouseAdapter" line="324"/>
                <declaration name="th" type="JTableHeader" line="339"/>
            </method>
        </class>
    </source>