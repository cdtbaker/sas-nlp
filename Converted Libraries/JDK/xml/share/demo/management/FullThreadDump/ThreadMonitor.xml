<?xml version="1.0" encoding="UTF-8"?>
    <source package="">
        <import package="java.lang.management.ManagementFactory"/>
        <import package="java.lang.management.ThreadMXBean"/>
        <import package="java.lang.management.ThreadInfo"/>
        <import package="java.lang.management.LockInfo"/>
        <import package="java.lang.management.MonitorInfo"/>
        <import package="javax.management"/>
        <import package="java.io"/>
        <class name="ThreadMonitor" line="43">
            <comment line="55">
                default - JDK 6+ VM                
            </comment>
            <javadoc line="43">
                Example of using the java.lang.management API to dump stack trace
                  and to perform deadlock detection.                
                <author>
                    Mandy Chung                    
                </author>
            </javadoc>
            <declaration name="server" type="MBeanServerConnection" line="50"/>
            <declaration name="tmbean" type="ThreadMXBean" line="51"/>
            <declaration name="objname" type="ObjectName" line="52"/>
            <declaration name="findDeadlocksMethodName" type="String" line="55"/>
            <declaration name="canDumpLocks" type="boolean" line="56"/>
            <javadoc line="58">
                Constructs a ThreadMonitor object to get thread information
                  in a remote JVM.                
            </javadoc>
            <method name="ThreadMonitor" type="constructor" line="62">
                <params>
                    <param name="server" type="MBeanServerConnection"/>
                </params>
                <comment line="70">
                    should not reach here                    
                </comment>
                <scope line="67"/>
                <scope line="69">
                    <declaration name="ie" type="InternalError" line="71"/>
                </scope>
            </method>
            <javadoc line="78">
                Constructs a ThreadMonitor object to get thread information
                  in the local JVM.                
            </javadoc>
            <method name="ThreadMonitor" type="constructor" line="82"/>
            <javadoc line="86">
                Prints the thread dump information to System.out.                
            </javadoc>
            <method name="threadDump" type="void" line="89">
                <comment line="93">
                    Print lock info if both object monitor usage                    
                </comment>
                <comment line="94">
                    and synchronizer usage are supported.                    
                </comment>
                <comment line="95">
                    This sample code can be modified to handle if                    
                </comment>
                <comment line="96">
                    either monitor usage or synchronizer usage is supported.                    
                </comment>
                <scope line="90">
                    <scope line="92"/>
                </scope>
                <scope line="99"/>
            </method>
            <method name="dumpThreadInfo" type="void" line="104">
                <declaration name="tids" type="long[]" line="106"/>
                <declaration name="tinfos" type="ThreadInfo[]" line="107"/>
                <scope line="108"/>
            </method>
            <javadoc line="113">
                Prints the thread dump information with locks info to System.out.                
            </javadoc>
            <method name="dumpThreadInfoWithLocks" type="void" line="116">
                <declaration name="tinfos" type="ThreadInfo[]" line="119"/>
                <scope line="120">
                    <declaration name="syncs" type="LockInfo[]" line="122"/>
                </scope>
            </method>
            <declaration name="INDENT" type="String" line="128"/>
            <method name="printThreadInfo" type="void" line="130">
                <params>
                    <param name="ti" type="ThreadInfo"/>
                </params>
                <comment line="131">
                    print thread information                    
                </comment>
                <comment line="134">
                    print stack trace with locks                    
                </comment>
                <declaration name="stacktrace" type="StackTraceElement[]" line="135"/>
                <declaration name="monitors" type="MonitorInfo[]" line="136"/>
                <scope line="137">
                    <declaration name="ste" type="StackTraceElement" line="138"/>
                    <scope line="140">
                        <scope line="141"/>
                    </scope>
                </scope>
            </method>
            <method name="printThread" type="void" line="149">
                <params>
                    <param name="ti" type="ThreadInfo"/>
                </params>
                <declaration name="sb" type="StringBuilder" line="150"/>
                <scope line="153"/>
                <scope line="156"/>
                <scope line="159"/>
                <scope line="163"/>
            </method>
            <method name="printMonitorInfo" type="void" line="169">
                <params>
                    <param name="ti" type="ThreadInfo"/>
                </params>
                <declaration name="monitors" type="MonitorInfo[]" line="170"/>
                <scope line="172"/>
            </method>
            <method name="printLockInfo" type="void" line="179">
                <params>
                    <param name="locks" type="LockInfo[]"/>
                </params>
                <scope line="181"/>
            </method>
            <javadoc line="187">
                Checks if any threads are deadlocked. If any, print
                  the thread dump information.                
            </javadoc>
            <method name="findDeadlock" type="boolean" line="191">
                <comment line="215">
                    print thread information                    
                </comment>
                <declaration name="tids" type="long[]" line="192"/>
                <scope line="194">
                    <scope line="196"/>
                    <declaration name="infos" type="ThreadInfo[]" line="201"/>
                    <scope line="202"/>
                </scope>
                <scope line="208">
                    <scope line="210"/>
                    <declaration name="infos" type="ThreadInfo[]" line="213"/>
                    <scope line="214"/>
                </scope>
            </method>
            <method name="parseMBeanInfo" type="void" line="224">
                <comment line="228">
                    look for findDeadlockedThreads operations;                    
                </comment>
                <comment line="237">
                    if findDeadlockedThreads operation doesn&apos;t exist,                    
                </comment>
                <comment line="238">
                    the target VM is running on JDK 5 and details about                    
                </comment>
                <comment line="239">
                    synchronizers and locks cannot be dumped.                    
                </comment>
                <scope line="225">
                    <declaration name="mopis" type="MBeanOperationInfo[]" line="226"/>
                    <declaration name="found" type="boolean" line="229"/>
                    <scope line="230">
                        <scope line="231"/>
                    </scope>
                    <scope line="236"/>
                </scope>
                <scope line="243">
                    <declaration name="ie" type="InternalError" line="244"/>
                </scope>
                <scope line="247">
                    <declaration name="ie" type="InternalError" line="248"/>
                </scope>
                <scope line="251">
                    <declaration name="ie" type="InternalError" line="252"/>
                </scope>
            </method>
        </class>
    </source>