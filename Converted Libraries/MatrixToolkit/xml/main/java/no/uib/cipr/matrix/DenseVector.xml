<?xml version="1.0" encoding="UTF-8"?>
    <source package="no.uib.cipr.matrix">
        <import package="java.io.IOException"/>
        <import package="java.io.Serializable"/>
        <import package="java.util.Arrays"/>
        <import package="no.uib.cipr.matrix.io.MatrixVectorReader"/>
        <import package="no.uib.cipr.matrix.io.VectorInfo"/>
        <import package="no.uib.cipr.matrix.io.VectorSize"/>
        <import package="no.uib.cipr.matrix.io.VectorInfo.VectorField"/>
        <class name="DenseVector" line="32">
            <extends class="AbstractVector"/>
            <implements interface="Serializable"/>
            <javadoc line="32">
                Dense vector. Stored by a &lt;code&gt;double[]&lt;/code&gt; array of the same length as
                  the vector itself.                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="38"/>
            <javadoc line="38">
                just the private data                
            </javadoc>
            <declaration name="data" type="double[]" line="41"/>
            <javadoc line="41">
                Vector data                
            </javadoc>
            <javadoc line="46">
                Constructor for DenseVector                
                <param>
                    rReader to get vector from                    
                </param>
            </javadoc>
            <method name="DenseVector" type="constructor" line="52">
                <params>
                    <param name="r" type="MatrixVectorReader"/>
                </params>
                <comment line="54">
                    Start with a zero-sized vector                    
                </comment>
                <comment line="57">
                    Get vector information. Use the header if present, else use a safe
                     default                    
                </comment>
                <comment line="66">
                    Resize the vector to correct size                    
                </comment>
                <comment line="70">
                    Check that the vector is in an acceptable format                    
                </comment>
                <comment line="78">
                    Read the entries                    
                </comment>
                <comment line="81">
                    Read coordinate data                    
                </comment>
                <comment line="87">
                    Shift indices from 1-offset to 0-offset                    
                </comment>
                <comment line="90">
                    Store them                    
                </comment>
                <comment line="95">
                    info.isArray()                    
                </comment>
                <declaration name="info" type="VectorInfo" line="58"/>
                <declaration name="size" type="VectorSize" line="63"/>
                <scope line="78">
                    <declaration name="nz" type="int" line="81"/>
                    <declaration name="index" type="int[]" line="82"/>
                    <declaration name="entry" type="double[]" line="83"/>
                </scope>
            </method>
            <javadoc line="98">
                Constructor for DenseVector                
                <param>
                    sizeSize of the vector                    
                </param>
            </javadoc>
            <method name="DenseVector" type="constructor" line="104">
                <params>
                    <param name="size" type="int"/>
                </params>
            </method>
            <javadoc line="109">
                Constructor for DenseVector                
                <param>
                    xCopies contents from this vector. A deep copy is made                    
                </param>
            </javadoc>
            <method name="DenseVector" type="constructor" line="115">
                <params>
                    <param name="x" type="Vector"/>
                </params>
            </method>
            <javadoc line="119">
                Constructor for DenseVector                
                <param>
                    xCopies contents from this vector                    
                </param>
                <param>
                    deepTrue for a deep copy. For a shallow copy, &lt;code&gt;x&lt;/code&gt;
                      must be a &lt;code&gt;DenseVector&lt;/code&gt;                    
                </param>
            </javadoc>
            <method name="DenseVector" type="constructor" line="128">
                <params>
                    <param name="x" type="Vector"/>
                    <param name="deep" type="boolean"/>
                </params>
                <scope line="131"/>
            </method>
            <javadoc line="138">
                Constructor for DenseVector                
                <param>
                    xCopies contents from this array                    
                </param>
                <param>
                    deepTrue for a deep copy. For a shallow copy, &lt;code&gt;x&lt;/code&gt; is
                      aliased with the internal storage                    
                </param>
            </javadoc>
            <method name="DenseVector" type="constructor" line="147">
                <params>
                    <param name="x" type="double[]"/>
                    <param name="deep" type="boolean"/>
                </params>
            </method>
            <javadoc line="156">
                Constructor for DenseVector                
                <param>
                    xCopies contents from this array in a deep copy                    
                </param>
            </javadoc>
            <method name="DenseVector" type="constructor" line="162">
                <params>
                    <param name="x" type="double[]"/>
                </params>
            </method>
            <method name="set" type="void" line="167">
                <params>
                    <param name="index" type="int"/>
                    <param name="value" type="double"/>
                </params>
            </method>
            <method name="add" type="void" line="173">
                <params>
                    <param name="index" type="int"/>
                    <param name="value" type="double"/>
                </params>
            </method>
            <method name="get" type="double" line="179">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="copy" type="DenseVector" line="185"/>
            <method name="zero" type="DenseVector" line="190"/>
            <method name="scale" type="DenseVector" line="196">
                <params>
                    <param name="alpha" type="double"/>
                </params>
            </method>
            <method name="set" type="Vector" line="203">
                <params>
                    <param name="y" type="Vector"/>
                </params>
                <declaration name="yd" type="double[]" line="209"/>
            </method>
            <method name="set" type="Vector" line="216">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="y" type="Vector"/>
                </params>
                <declaration name="yd" type="double[]" line="225"/>
            </method>
            <method name="add" type="Vector" line="234">
                <params>
                    <param name="y" type="Vector"/>
                </params>
                <declaration name="yd" type="double[]" line="240"/>
            </method>
            <method name="add" type="Vector" line="249">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="y" type="Vector"/>
                </params>
                <declaration name="yd" type="double[]" line="258"/>
            </method>
            <method name="dot" type="double" line="267">
                <params>
                    <param name="y" type="Vector"/>
                </params>
                <declaration name="yd" type="double[]" line="273"/>
                <declaration name="dot" type="double" line="275"/>
            </method>
            <method name="norm1" type="double" line="282">
                <declaration name="sum" type="double" line="283"/>
            </method>
            <method name="norm2" type="double" line="290">
                <declaration name="norm" type="double" line="291"/>
            </method>
            <method name="norm2_robust" type="double" line="298">
                <declaration name="scale" type="double" line="299"/>
                <scope line="301">
                    <declaration name="absxi" type="double" line="302"/>
                    <scope line="303"/>
                </scope>
            </method>
            <method name="normInf" type="double" line="313">
                <declaration name="max" type="double" line="314"/>
            </method>
            <javadoc line="320">
                Returns the internal vector contents. The array indices correspond to the
                  vector indices                
            </javadoc>
            <method name="getData" type="double[]" line="324"/>
        </class>
    </source>