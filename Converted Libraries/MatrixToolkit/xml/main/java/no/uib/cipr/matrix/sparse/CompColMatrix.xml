<?xml version="1.0" encoding="UTF-8"?>
    <source package="no.uib.cipr.matrix.sparse">
        <import package="java.io.IOException"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="java.util.Set"/>
        <import package="no.uib.cipr.matrix.AbstractMatrix"/>
        <import package="no.uib.cipr.matrix.DenseVector"/>
        <import package="no.uib.cipr.matrix.Matrix"/>
        <import package="no.uib.cipr.matrix.MatrixEntry"/>
        <import package="no.uib.cipr.matrix.Vector"/>
        <import package="no.uib.cipr.matrix.io.MatrixInfo"/>
        <import package="no.uib.cipr.matrix.io.MatrixSize"/>
        <import package="no.uib.cipr.matrix.io.MatrixVectorReader"/>
        <class name="CompColMatrix" line="17">
            <extends class="AbstractMatrix"/>
            <javadoc line="17">
                Compressed column storage (CCS) matrix                
            </javadoc>
            <declaration name="data" type="double[]" line="21"/>
            <javadoc line="21">
                Matrix data                
            </javadoc>
            <declaration name="columnPointer" type="int[]" line="25"/>
            <javadoc line="25">
                Column indices. These are kept sorted within each row.                
            </javadoc>
            <declaration name="rowIndex" type="int[]" line="29"/>
            <javadoc line="29">
                Indices to the start of each row                
            </javadoc>
            <javadoc line="33">
                Constructor for CompColMatrix                
                <param>
                    rReader to get sparse matrix from                    
                </param>
            </javadoc>
            <method name="CompColMatrix" type="constructor" line="37">
                <params>
                    <param name="r" type="MatrixVectorReader"/>
                </params>
                <declaration name="info" type="MatrixInfo" line="39"/>
                <declaration name="size" type="MatrixSize" line="45"/>
                <declaration name="numEntries" type="int" line="48"/>
                <declaration name="row" type="int[]" line="49"/>
                <declaration name="column" type="int[]" line="50"/>
                <declaration name="entry" type="double[]" line="51"/>
                <declaration name="cnz" type="List&lt;Set&lt;Integer&gt;&gt;" line="55"/>
                <declaration name="nz" type="int[][]" line="59"/>
                <scope line="60">
                    <declaration name="j" type="int" line="62"/>
                </scope>
                <scope line="67"/>
                <scope line="70"/>
            </method>
            <javadoc line="74">
                Constructor for CompColMatrix                
                <param>
                    numRowsNumber of rows                    
                </param>
                <param>
                    numColumnsNumber of columns                    
                </param>
                <param>
                    nzThe nonzero column indices on each column                    
                </param>
            </javadoc>
            <method name="CompColMatrix" type="constructor" line="80">
                <params>
                    <param name="numRows" type="int"/>
                    <param name="numColumns" type="int"/>
                    <param name="nz" type="int[][]"/>
                </params>
            </method>
            <method name="construct" type="void" line="84">
                <params>
                    <param name="nz" type="int[][]"/>
                </params>
                <declaration name="nnz" type="int" line="85"/>
                <scope line="91">
                    <scope line="93"/>
                </scope>
            </method>
            <method name="construct" type="void" line="100">
                <params>
                    <param name="A" type="Matrix"/>
                    <param name="deep" type="boolean"/>
                </params>
                <scope line="101">
                    <scope line="102">
                        <declaration name="Ac" type="CompColMatrix" line="103"/>
                    </scope>
                    <scope line="111">
                        <declaration name="cnz" type="List&lt;Set&lt;Integer&gt;&gt;" line="112"/>
                        <declaration name="nz" type="int[][]" line="115"/>
                        <scope line="116">
                            <declaration name="j" type="int" line="118"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="125">
                    <declaration name="Ac" type="CompColMatrix" line="126"/>
                </scope>
            </method>
            <javadoc line="132">
                Constructor for CompColMatrix                
                <param>
                    ACopies from this matrix                    
                </param>
                <param>
                    deepTrue if the copy is to be deep. If it is a shallow copy,
                      <code>A</code> must be a <code>CompColMatrix</code>                    
                </param>
            </javadoc>
            <method name="CompColMatrix" type="constructor" line="138">
                <params>
                    <param name="A" type="Matrix"/>
                    <param name="deep" type="boolean"/>
                </params>
            </method>
            <javadoc line="142">
                Constructor for CompColMatrix                
                <param>
                    ACopies from this matrix. The copy will be deep                    
                </param>
            </javadoc>
            <method name="CompColMatrix" type="constructor" line="146">
                <params>
                    <param name="A" type="Matrix"/>
                </params>
            </method>
            <javadoc line="149">
                Returns the column pointers                
            </javadoc>
            <method name="getColumnPointers" type="int[]" line="152"/>
            <javadoc line="155">
                Returns the row indices                
            </javadoc>
            <method name="getRowIndices" type="int[]" line="158"/>
            <javadoc line="161">
                Returns the internal data storage                
            </javadoc>
            <method name="getData" type="double[]" line="164"/>
            <method name="multAdd" type="Vector" line="167">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="x" type="Vector"/>
                    <param name="y" type="Vector"/>
                </params>
                <declaration name="xd" type="double[]" line="170"/>
            </method>
            <method name="transMult" type="Vector" line="175">
                <params>
                    <param name="x" type="Vector"/>
                    <param name="y" type="Vector"/>
                </params>
                <declaration name="xd" type="double[]" line="178"/>
                <declaration name="yd" type="double[]" line="179"/>
                <scope line="180">
                    <declaration name="dot" type="double" line="181"/>
                </scope>
            </method>
            <method name="transMultAdd" type="Vector" line="187">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="x" type="Vector"/>
                    <param name="y" type="Vector"/>
                </params>
                <declaration name="xd" type="double[]" line="190"/>
                <declaration name="yd" type="double[]" line="191"/>
                <scope line="192">
                    <declaration name="dot" type="double" line="193"/>
                </scope>
            </method>
            <method name="set" type="void" line="199">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="value" type="double"/>
                </params>
                <declaration name="index" type="int" line="201"/>
            </method>
            <method name="add" type="void" line="204">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="value" type="double"/>
                </params>
                <declaration name="index" type="int" line="206"/>
            </method>
            <method name="get" type="double" line="209">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
                <declaration name="index" type="int" line="211"/>
            </method>
            <javadoc line="215">
                Finds the insertion index                
            </javadoc>
            <method name="getIndex" type="int" line="218">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
                <declaration name="i" type="int" line="219"/>
            </method>
            <method name="copy" type="CompColMatrix" line="223"/>
            <method name="iterator" type="Iterator<MatrixEntry>" line="226"/>
            <method name="zero" type="CompColMatrix" line="229"/>
            <class name="CompColMatrixIterator" line="233">
                <implements interface="Iterator">
                    <type_params>
                        <type_param name="MatrixEntry"/>
                    </type_params>
                </implements>
                <javadoc line="233">
                    Iterator over a compressed column matrix                    
                </javadoc>
                <declaration name="column" type="int" line="237"/>
                <declaration name="entry" type="CompColMatrixEntry" line="238"/>
                <method name="CompColMatrixIterator" type="constructor" line="239"/>
                <javadoc line="242">
                    Locates the first non-empty column, starting at the current. After
                      the new column has been found, the cursor is also updated                    
                </javadoc>
                <method name="nextNonEmptyColumn" type="void" line="246"/>
                <method name="hasNext" type="boolean" line="250"/>
                <method name="next" type="MatrixEntry" line="253">
                    <scope line="256"/>
                </method>
                <method name="remove" type="void" line="262"/>
            </class>
            <class name="CompColMatrixEntry" line="266">
                <implements interface="MatrixEntry"/>
                <javadoc line="266">
                    Entry of a compressed column matrix                    
                </javadoc>
                <declaration name="column" type="int" line="270"/>
                <javadoc line="271">
                    Updates the entry                    
                </javadoc>
                <method name="update" type="void" line="274">
                    <params>
                        <param name="column" type="int"/>
                        <param name="cursor" type="int"/>
                    </params>
                </method>
                <method name="row" type="int" line="278"/>
                <method name="column" type="int" line="281"/>
                <method name="get" type="double" line="284"/>
                <method name="set" type="void" line="287">
                    <params>
                        <param name="value" type="double"/>
                    </params>
                </method>
            </class>
        </class>
    </source>