<?xml version="1.0" encoding="UTF-8"?>
    <source package="no.uib.cipr.matrix">
        <import package="java.util.Arrays"/>
        <class name="Matrices" line="25">
            <javadoc line="25">
                Static utility methods for matrices and vectors                
            </javadoc>
            <method name="Matrices" type="constructor" line="30">
                <comment line="32">
                    No need to instantiate                    
                </comment>
            </method>
            <javadoc line="34">
                &lt;code&gt;max(1, M)&lt;/code&gt; provided as a convenience for &apos;leading dimension&apos; calculations.                
                <param>
                    n                    
                </param>
            </javadoc>
            <method name="ld" type="int" line="39">
                <params>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="43">
                &lt;code&gt;max(1, max(M, N))&lt;/code&gt; provided as a convenience for &apos;leading dimension&apos;
                  calculations.                
                <param>
                    m                    
                </param>
                <param>
                    n                    
                </param>
            </javadoc>
            <method name="ld" type="int" line="50">
                <params>
                    <param name="m" type="int"/>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="54">
                Returns the number of non-zero entries in the given vector                
            </javadoc>
            <method name="cardinality" type="int" line="57">
                <params>
                    <param name="x" type="Vector"/>
                </params>
                <declaration name="nz" type="int" line="58"/>
            </method>
            <javadoc line="65">
                Returns the number of non-zero entries in the given matrix                
            </javadoc>
            <method name="cardinality" type="int" line="68">
                <params>
                    <param name="A" type="Matrix"/>
                </params>
                <declaration name="nz" type="int" line="69"/>
            </method>
            <javadoc line="76">
                Returns an array of arrays containing a copy of the given matrix. Each
                  array contains one row.                
            </javadoc>
            <method name="getArray" type="double[][]" line="80">
                <params>
                    <param name="A" type="Matrix"/>
                </params>
                <declaration name="Ad" type="double[][]" line="81"/>
            </method>
            <javadoc line="87">
                Returns a dense array containing a copy of the given vector                
            </javadoc>
            <method name="getArray" type="double[]" line="90">
                <params>
                    <param name="x" type="Vector"/>
                </params>
                <declaration name="xd" type="double[]" line="91"/>
            </method>
            <javadoc line="97">
                Returns the identity matrix of the given size                
                <param>
                    sizeNumber of rows/columns of the matrix                    
                </param>
                <return>
                    Matrix of the given size, with ones on the main diagonal                    
                </return>
            </javadoc>
            <method name="identity" type="DenseMatrix" line="104">
                <params>
                    <param name="size" type="int"/>
                </params>
                <declaration name="A" type="DenseMatrix" line="105"/>
            </method>
            <javadoc line="111">
                Creates a random vector. Numbers are drawn from a uniform distribution
                  between 0 and 1                
                <param>
                    sizeSize of the vector                    
                </param>
            </javadoc>
            <method name="random" type="Vector" line="118">
                <params>
                    <param name="size" type="int"/>
                </params>
            </method>
            <javadoc line="122">
                Populates a vector with random numbers drawn from a uniform distribution
                  between 0 and 1                
                <param>
                    xVector to populate                    
                </param>
            </javadoc>
            <method name="random" type="Vector" line="129">
                <params>
                    <param name="x" type="Vector"/>
                </params>
            </method>
            <javadoc line="135">
                Creates a random matrix. Numbers are drawn from a uniform distribution
                  between 0 and 1                
                <param>
                    numRowsNumber of rows                    
                </param>
                <param>
                    numColumnsNumber of columns                    
                </param>
            </javadoc>
            <method name="random" type="Matrix" line="144">
                <params>
                    <param name="numRows" type="int"/>
                    <param name="numColumns" type="int"/>
                </params>
            </method>
            <javadoc line="148">
                Populates a matrix with random numbers drawn from a uniform distribution
                  between 0 and 1                
                <param>
                    AMatrix to populate                    
                </param>
            </javadoc>
            <method name="random" type="Matrix" line="155">
                <params>
                    <param name="A" type="Matrix"/>
                </params>
            </method>
            <javadoc line="162">
                Returns a synchronized vector which wraps the given vector. Only the
                  &lt;code&gt;set(int, double)&lt;/code&gt; and &lt;code&gt;add(int, double)&lt;/code&gt;
                  methods and their blocked versions are synchronized.
                  &lt;p&gt;
                  &lt;b&gt;Note: &lt;/b&gt; Do not use the wrapped vector for any operations besides
                  matrix assembly, as these operations may be very slow.                
                <param>
                    xVector to be wrapped                    
                </param>
                <return>
                    A thin wrapper around <code>x</code>                    
                </return>
            </javadoc>
            <method name="synchronizedVector" type="Vector" line="174">
                <params>
                    <param name="x" type="Vector"/>
                </params>
            </method>
            <javadoc line="178">
                Returns a synchronized matrix which wraps the given matrix. Only the
                  &lt;code&gt;set(int, int, double)&lt;/code&gt; and
                  &lt;code&gt;add(int, int, double)&lt;/code&gt; methods and their blocked versions
                  are synchronized.
                  &lt;p&gt;
                  &lt;b&gt;Note: &lt;/b&gt; Do not use the wrapped matrix for any operations besides
                  matrix assembly, as these operations may be very slow.                
                <param>
                    AMatrix to be wrapped                    
                </param>
                <return>
                    A thin wrapper around <code>A</code>                    
                </return>
            </javadoc>
            <method name="synchronizedMatrix" type="Matrix" line="191">
                <params>
                    <param name="A" type="Matrix"/>
                </params>
            </method>
            <javadoc line="195">
                Returns a synchronized matrix which wraps the given matrix. Only the
                  &lt;code&gt;set(int, int, double)&lt;/code&gt; and
                  &lt;code&gt;add(int, int, double)&lt;/code&gt; methods and their blocked versions
                  are synchronized.
                  &lt;p&gt;
                  The locking provided is finer than the locking of the whole matrix, as
                  different threads can access different rows simultaneous, while only one
                  thread can access a given row at a time. Use this for row-major matrices,
                  &lt;i&gt;not &lt;/i&gt; for column-major matrices.
                  &lt;p&gt;
                  &lt;b&gt;Note: &lt;/b&gt; Do not use the wrapped matrix for any operations besides
                  matrix assembly, as these operations may be very slow.                
                <param>
                    AMatrix to be wrapped                    
                </param>
                <return>
                    A thin wrapper around <code>A</code>. Individual rows are
                      locked                    
                </return>
            </javadoc>
            <method name="synchronizedMatrixByRows" type="Matrix" line="214">
                <params>
                    <param name="A" type="Matrix"/>
                </params>
            </method>
            <javadoc line="218">
                Returns a synchronized matrix which wraps the given matrix. Only the
                  &lt;code&gt;set(int, int, double)&lt;/code&gt; and
                  &lt;code&gt;add(int, int, double)&lt;/code&gt; methods and their blocked versions
                  are synchronized.
                  &lt;p&gt;
                  The locking provided is finer than the locking of the whole matrix, as
                  different threads can access different columns simultaneous, while only
                  one thread can access a given column at a time. Use this for column-major
                  matrices, &lt;i&gt;not &lt;/i&gt; for row-major matrices.
                  &lt;p&gt;
                  &lt;b&gt;Note: &lt;/b&gt; Do not use the wrapped matrix for any operations besides
                  matrix assembly, as these operations may be very slow.                
                <param>
                    AMatrix to be wrapped                    
                </param>
                <return>
                    A thin wrapper around <code>A</code>. Individual columns are
                      locked                    
                </return>
            </javadoc>
            <method name="synchronizedMatrixByColumns" type="Matrix" line="237">
                <params>
                    <param name="A" type="Matrix"/>
                </params>
            </method>
            <javadoc line="241">
                Returns a view into the given matrix. This view is only for easing some
                  matrix-assembly cases, not for general use. To extract a more
                  higher-performing and general matrix, create a copy of the submatrix. The
                  result is a {@link no.uib.cipr.matrix.DenseMatrix DenseMatrix}.                
                <param>
                    AMatrix to create view on                    
                </param>
                <param>
                    rowRows to access. Must be within the bounds of <code>A</code>                    
                </param>
                <param>
                    columnColumns to access. Must be within the bounds of <code>A</code>                    
                </param>
                <return>
                    Submatrix of <code>A</code>. Changing it will change the
                      backing matrix                    
                </return>
            </javadoc>
            <method name="getSubMatrix" type="Matrix" line="256">
                <params>
                    <param name="A" type="Matrix"/>
                    <param name="row" type="int[]"/>
                    <param name="column" type="int[]"/>
                </params>
            </method>
            <javadoc line="260">
                Returns a view into the given vector. This view is only for easing some
                  vector-assembly cases, not for general use. To extract a more
                  higher-performing and general vector, create a copy of the subvector. The
                  result is a {@link no.uib.cipr.matrix.DenseVector DenseVector}.                
                <param>
                    xVector to create view on                    
                </param>
                <param>
                    indexIndices to access. Must be within the bounds of <code>x</code>                    
                </param>
                <return>
                    Submatrix of <code>x</code>. Changing it will change the
                      backing matrix                    
                </return>
            </javadoc>
            <method name="getSubVector" type="Vector" line="273">
                <params>
                    <param name="x" type="Vector"/>
                    <param name="index" type="int[]"/>
                </params>
            </method>
            <class name="RefMatrix" line="277">
                <extends class="AbstractMatrix"/>
                <javadoc line="277">
                    Matrix backed by another matrix. Used by &lt;code&gt;getSubMatrix&lt;/code&gt;                    
                </javadoc>
                <declaration name="A" type="Matrix" line="282"/>
                <declaration name="row" type="int[]" line="284"/>
                <method name="RefMatrix" type="constructor" line="286">
                    <params>
                        <param name="A" type="Matrix"/>
                        <param name="row" type="int[]"/>
                        <param name="column" type="int[]"/>
                    </params>
                </method>
                <method name="add" type="void" line="294">
                    <params>
                        <param name="row" type="int"/>
                        <param name="column" type="int"/>
                        <param name="value" type="double"/>
                    </params>
                </method>
                <method name="copy" type="DenseMatrix" line="299"/>
                <method name="get" type="double" line="304">
                    <params>
                        <param name="row" type="int"/>
                        <param name="column" type="int"/>
                    </params>
                </method>
                <method name="set" type="void" line="309">
                    <params>
                        <param name="row" type="int"/>
                        <param name="column" type="int"/>
                        <param name="value" type="double"/>
                    </params>
                </method>
            </class>
            <class name="RefVector" line="315">
                <extends class="AbstractVector"/>
                <javadoc line="315">
                    Vector backed by another vector. Used by &lt;code&gt;getSubVector&lt;/code&gt;                    
                </javadoc>
                <declaration name="x" type="Vector" line="320"/>
                <declaration name="index" type="int[]" line="322"/>
                <method name="RefVector" type="constructor" line="324">
                    <params>
                        <param name="x" type="Vector"/>
                        <param name="index" type="int[]"/>
                    </params>
                </method>
                <method name="add" type="void" line="331">
                    <params>
                        <param name="index" type="int"/>
                        <param name="value" type="double"/>
                    </params>
                </method>
                <method name="copy" type="DenseVector" line="336"/>
                <method name="get" type="double" line="341">
                    <params>
                        <param name="index" type="int"/>
                    </params>
                </method>
                <method name="set" type="void" line="346">
                    <params>
                        <param name="index" type="int"/>
                        <param name="value" type="double"/>
                    </params>
                </method>
            </class>
            <class name="SynchronizedVector" line="352">
                <extends class="AbstractVector"/>
                <javadoc line="352">
                    Ensures correctness in the vector assembly. Since it extends the
                      AbstractVector class, algebraic operations will be slow. It is not
                      possible to implement Vector and delegate calls to the imbedded vector,
                      since casting to the imbedded vector is not possible                    
                </javadoc>
                <declaration name="x" type="Vector" line="360"/>
                <method name="SynchronizedVector" type="constructor" line="362">
                    <params>
                        <param name="x" type="Vector"/>
                    </params>
                </method>
                <method name="add" type="void" line="368">
                    <params>
                        <param name="index" type="int"/>
                        <param name="value" type="double"/>
                    </params>
                </method>
                <method name="set" type="void" line="373">
                    <params>
                        <param name="index" type="int"/>
                        <param name="value" type="double"/>
                    </params>
                </method>
                <method name="get" type="double" line="378">
                    <params>
                        <param name="index" type="int"/>
                    </params>
                </method>
                <method name="copy" type="Vector" line="383"/>
            </class>
            <class name="SynchronizedMatrix" line="389">
                <extends class="AbstractMatrix"/>
                <javadoc line="389">
                    Ensures correctness in the matrix assembly. Since it extends the
                      AbstractMatrix class, algebraic operations will be slow. It is not
                      possible to implement Matrix and delegate calls to the imbedded matrix,
                      since casting to the imbedded matrix is not possible                    
                </javadoc>
                <declaration name="A" type="Matrix" line="397"/>
                <method name="SynchronizedMatrix" type="constructor" line="399">
                    <params>
                        <param name="A" type="Matrix"/>
                    </params>
                </method>
                <method name="add" type="void" line="405">
                    <params>
                        <param name="row" type="int"/>
                        <param name="column" type="int"/>
                        <param name="value" type="double"/>
                    </params>
                </method>
                <method name="set" type="void" line="410">
                    <params>
                        <param name="row" type="int"/>
                        <param name="column" type="int"/>
                        <param name="value" type="double"/>
                    </params>
                </method>
                <method name="get" type="double" line="415">
                    <params>
                        <param name="row" type="int"/>
                        <param name="column" type="int"/>
                    </params>
                </method>
                <method name="copy" type="Matrix" line="420"/>
            </class>
            <class name="SynchronizedRowMatrix" line="426">
                <extends class="AbstractMatrix"/>
                <javadoc line="426">
                    Ensures correctness in the matrix assembly. Since it extends the
                      AbstractMatrix class, algebraic operations will be slow. It is not
                      possible to implement Matrix and delegate calls to the imbedded matrix,
                      since casting to the imbedded matrix is not possible
                      &lt;p&gt;
                      Locks individual rows instead of the whole matrix                    
                </javadoc>
                <declaration name="A" type="Matrix" line="436"/>
                <declaration name="lock" type="Object[]" line="438"/>
                <method name="SynchronizedRowMatrix" type="constructor" line="440">
                    <params>
                        <param name="A" type="Matrix"/>
                    </params>
                </method>
                <method name="add" type="void" line="449">
                    <params>
                        <param name="row" type="int"/>
                        <param name="column" type="int"/>
                        <param name="value" type="double"/>
                    </params>
                    <scope line="450"/>
                </method>
                <method name="set" type="void" line="456">
                    <params>
                        <param name="row" type="int"/>
                        <param name="column" type="int"/>
                        <param name="value" type="double"/>
                    </params>
                    <scope line="457"/>
                </method>
                <method name="get" type="double" line="463">
                    <params>
                        <param name="row" type="int"/>
                        <param name="column" type="int"/>
                    </params>
                </method>
                <method name="copy" type="Matrix" line="468"/>
            </class>
            <class name="SynchronizedColumnMatrix" line="474">
                <extends class="AbstractMatrix"/>
                <javadoc line="474">
                    Ensures correctness in the matrix assembly. Implements matrix instead of
                      subclassing the abstract matrix in order to correctly delegate every
                      method to possbly overridden method in the encapsulated matrix.
                      &lt;p&gt;
                      Locks individual columns instead of the whole matrix                    
                </javadoc>
                <declaration name="A" type="Matrix" line="483"/>
                <declaration name="lock" type="Object[]" line="485"/>
                <method name="SynchronizedColumnMatrix" type="constructor" line="487">
                    <params>
                        <param name="A" type="Matrix"/>
                    </params>
                </method>
                <method name="add" type="void" line="496">
                    <params>
                        <param name="row" type="int"/>
                        <param name="column" type="int"/>
                        <param name="value" type="double"/>
                    </params>
                    <scope line="497"/>
                </method>
                <method name="set" type="void" line="503">
                    <params>
                        <param name="row" type="int"/>
                        <param name="column" type="int"/>
                        <param name="value" type="double"/>
                    </params>
                    <scope line="504"/>
                </method>
                <method name="get" type="double" line="510">
                    <params>
                        <param name="row" type="int"/>
                        <param name="column" type="int"/>
                    </params>
                </method>
                <method name="copy" type="Matrix" line="515"/>
            </class>
            <javadoc line="521">
                Creates a continuous linear index.                
                <param>
                    fromStart, inclusive                    
                </param>
                <param>
                    toStop, exclusive                    
                </param>
            </javadoc>
            <method name="index" type="int[]" line="529">
                <params>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                </params>
                <declaration name="length" type="int" line="530"/>
                <declaration name="index" type="int[]" line="535"/>
            </method>
            <javadoc line="541">
                Creates a strided linear index.                
                <param>
                    fromStart, inclusive                    
                </param>
                <param>
                    stride<code>stride=1</code> for continuous. Negative strides are
                      allowed                    
                </param>
                <param>
                    toStop, exclusive                    
                </param>
            </javadoc>
            <method name="index" type="int[]" line="552">
                <params>
                    <param name="from" type="int"/>
                    <param name="stride" type="int"/>
                    <param name="to" type="int"/>
                </params>
                <declaration name="length" type="int" line="563"/>
                <declaration name="index" type="int[]" line="570"/>
            </method>
            <javadoc line="576">
                Finds the number of non-zero entries on each row                
            </javadoc>
            <method name="rowBandwidth" type="int[]" line="579">
                <params>
                    <param name="A" type="Matrix"/>
                </params>
                <declaration name="nz" type="int[]" line="580"/>
            </method>
            <javadoc line="588">
                Finds the number of non-zero entries on each column                
            </javadoc>
            <method name="columnBandwidth" type="int[]" line="591">
                <params>
                    <param name="A" type="Matrix"/>
                </params>
                <declaration name="nz" type="int[]" line="592"/>
            </method>
            <javadoc line="600">
                Finds the number of diagonals below the main diagonal. Useful for
                  converting a general matrix into a banded matrix                
            </javadoc>
            <method name="getNumSubDiagonals" type="int" line="604">
                <params>
                    <param name="A" type="Matrix"/>
                </params>
                <declaration name="kl" type="int" line="605"/>
            </method>
            <javadoc line="613">
                Finds the number of diagonals above the main diagonal. Useful for
                  converting a general matrix into a banded matrix                
            </javadoc>
            <method name="getNumSuperDiagonals" type="int" line="617">
                <params>
                    <param name="A" type="Matrix"/>
                </params>
                <declaration name="ku" type="int" line="618"/>
            </method>
            <javadoc line="626">
                Sets the selected rows of &lt;code&gt;A&lt;/code&gt; equal zero, and puts
                  &lt;code&gt;diagonal&lt;/code&gt; on the diagonal of those rows. Useful for
                  enforcing boundary conditions                
            </javadoc>
            <method name="zeroRows" type="void" line="631">
                <params>
                    <param name="A" type="Matrix"/>
                    <param name="diagonal" type="double"/>
                    <param name="row" type="int"/>
                </params>
                <comment line="633">
                    Sort the rows                    
                </comment>
                <comment line="639">
                    Found                    
                </comment>
                <comment line="640">
                    Diagonal                    
                </comment>
                <comment line="643">
                    Off diagonal                    
                </comment>
                <comment line="648">
                    Ensure the diagonal is set. This is necessary in case of missing
                     rows                    
                </comment>
                <declaration name="rowS" type="int[]" line="633"/>
                <scope line="636">
                    <declaration name="j" type="int" line="637"/>
                    <scope line="638"/>
                </scope>
            </method>
            <javadoc line="654">
                Sets the selected columns of &lt;code&gt;A&lt;/code&gt; equal zero, and puts
                  &lt;code&gt;diagonal&lt;/code&gt; on the diagonal of those columns. Useful for
                  enforcing boundary conditions                
            </javadoc>
            <method name="zeroColumns" type="void" line="659">
                <params>
                    <param name="A" type="Matrix"/>
                    <param name="diagonal" type="double"/>
                    <param name="column" type="int"/>
                </params>
                <comment line="661">
                    Sort the columns                    
                </comment>
                <comment line="667">
                    Found                    
                </comment>
                <comment line="668">
                    Diagonal                    
                </comment>
                <comment line="671">
                    Off diagonal                    
                </comment>
                <comment line="676">
                    Ensure the diagonal is set. This is necessary in case of missing
                     columns                    
                </comment>
                <declaration name="columnS" type="int[]" line="661"/>
                <scope line="664">
                    <declaration name="j" type="int" line="665"/>
                    <scope line="666"/>
                </scope>
            </method>
            <method name="getColumn" type="DenseVector" line="682">
                <params>
                    <param name="m" type="Matrix"/>
                    <param name="j" type="int"/>
                </params>
                <declaration name="v" type="DenseVector" line="683"/>
                <scope line="684"/>
            </method>
        </class>
    </source>