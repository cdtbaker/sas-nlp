<?xml version="1.0" encoding="UTF-8"?>
    <source package="no.uib.cipr.matrix.sparse">
        <import package="java.io.IOException"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.Set"/>
        <import package="java.util.TreeSet"/>
        <import package="no.uib.cipr.matrix.AbstractMatrix"/>
        <import package="no.uib.cipr.matrix.DenseVector"/>
        <import package="no.uib.cipr.matrix.Matrix"/>
        <import package="no.uib.cipr.matrix.MatrixEntry"/>
        <import package="no.uib.cipr.matrix.Vector"/>
        <import package="no.uib.cipr.matrix.io.MatrixInfo"/>
        <import package="no.uib.cipr.matrix.io.MatrixSize"/>
        <import package="no.uib.cipr.matrix.io.MatrixVectorReader"/>
        <class name="CompDiagMatrix" line="15">
            <extends class="AbstractMatrix"/>
            <javadoc line="15">
                Compressed diagonal storage (CDS) matrix                
            </javadoc>
            <declaration name="diag" type="double[][]" line="19"/>
            <javadoc line="19">
                The diagonals                
            </javadoc>
            <declaration name="ind" type="int[]" line="23"/>
            <javadoc line="23">
                Indices to the start of the diagonal, relative to the main diagonal.
                  Positive means the number of diagonals shifted up, while negative is the
                  number of diagonals shifted down                
            </javadoc>
            <javadoc line="29">
                Constructor for CompDiagMatrix                
                <param>
                    rReader to get sparse matrix from                    
                </param>
            </javadoc>
            <method name="CompDiagMatrix" type="constructor" line="33">
                <params>
                    <param name="r" type="MatrixVectorReader"/>
                </params>
                <declaration name="info" type="MatrixInfo" line="35"/>
                <declaration name="size" type="MatrixSize" line="38"/>
                <declaration name="row" type="int[]" line="44"/>
                <declaration name="entry" type="double[]" line="45"/>
                <declaration name="diags" type="Set&lt;Integer&gt;" line="49"/>
                <declaration name="ind" type="int[]" line="52"/>
                <scope line="53">
                    <declaration name="ints" type="Integer[]" line="54"/>
                </scope>
                <scope line="60"/>
                <scope line="63"/>
            </method>
            <javadoc line="67">
                Creates a new sparse matrix with the given diagonals preallocated. A
                  negative index is a subdiagonal, positive is superdiagonal                
            </javadoc>
            <method name="CompDiagMatrix" type="constructor" line="71">
                <params>
                    <param name="numRows" type="int"/>
                    <param name="numColumns" type="int"/>
                    <param name="diagonal" type="int[]"/>
                </params>
            </method>
            <method name="construct" type="void" line="75">
                <params>
                    <param name="diagonal" type="int[]"/>
                </params>
                <declaration name="sortedDiagonal" type="int[]" line="78"/>
                <scope line="81"/>
            </method>
            <javadoc line="86">
                Creates a new sparse matrix without preallocation                
            </javadoc>
            <method name="CompDiagMatrix" type="constructor" line="89">
                <params>
                    <param name="numRows" type="int"/>
                    <param name="numColumns" type="int"/>
                </params>
            </method>
            <javadoc line="92">
                Creates a new sparse matrix copied from the given matrix. Can take a deep
                  copy or a shallow copy. For the latter, the supplied matrix must be a
                  CompDiagMatrix. Preallocation is also possible, but is only used for the
                  deep copy.                
            </javadoc>
            <method name="CompDiagMatrix" type="constructor" line="98">
                <params>
                    <param name="A" type="Matrix"/>
                    <param name="diagonal" type="int[]"/>
                    <param name="deep" type="boolean"/>
                </params>
                <scope line="100"/>
                <scope line="104">
                    <declaration name="Ac" type="CompDiagMatrix" line="105"/>
                </scope>
            </method>
            <javadoc line="110">
                Creates a new sparse matrix copied from the given matrix. Takes a deep
                  copy, with possibility to specify preallocation                
            </javadoc>
            <method name="CompDiagMatrix" type="constructor" line="114">
                <params>
                    <param name="A" type="Matrix"/>
                    <param name="diagonal" type="int[]"/>
                </params>
            </method>
            <javadoc line="117">
                Creates a new sparse matrix copied from the given matrix. Can take a deep
                  copy or a shallow copy. For the latter, the supplied matrix must be a
                  CompDiagMatrix. No preallocation is done                
            </javadoc>
            <method name="CompDiagMatrix" type="constructor" line="122">
                <params>
                    <param name="A" type="Matrix"/>
                    <param name="deep" type="boolean"/>
                </params>
            </method>
            <javadoc line="125">
                Creates a new sparse matrix copied from the given matrix. Takes a deep
                  copy without preallocation                
            </javadoc>
            <method name="CompDiagMatrix" type="constructor" line="129">
                <params>
                    <param name="A" type="Matrix"/>
                </params>
            </method>
            <javadoc line="132">
                Returns the internal diagonal storage                
            </javadoc>
            <method name="getDiagonals" type="double[][]" line="135"/>
            <javadoc line="138">
                Returns the diagonal offsets                
            </javadoc>
            <method name="getIndex" type="int[]" line="141"/>
            <method name="add" type="void" line="144">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="value" type="double"/>
                </params>
                <declaration name="diagonal" type="int" line="146"/>
            </method>
            <method name="get" type="double" line="149">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
                <declaration name="diagonal" type="int" line="151"/>
            </method>
            <method name="set" type="void" line="155">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="value" type="double"/>
                </params>
                <declaration name="diagonal" type="int" line="157"/>
            </method>
            <method name="getDiagonal" type="int" line="160">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
            </method>
            <method name="getOnDiagIndex" type="int" line="163">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
            </method>
            <method name="getCompDiagIndex" type="int" line="166">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
                <declaration name="diagonal" type="int" line="167"/>
                <declaration name="index" type="int" line="168"/>
                <declaration name="size" type="int" line="170"/>
                <declaration name="newDiag" type="double[]" line="171"/>
                <declaration name="newDiagArray" type="double[][]" line="172"/>
                <declaration name="newInd" type="int[]" line="173"/>
            </method>
            <javadoc line="184">
                Finds the size of the requested diagonal to be allocated                
            </javadoc>
            <method name="getDiagSize" type="int" line="187">
                <params>
                    <param name="diagonal" type="int"/>
                </params>
            </method>
            <method name="copy" type="Matrix" line="191"/>
            <method name="zero" type="Matrix" line="194"/>
            <method name="mult" type="Vector" line="198">
                <params>
                    <param name="x" type="Vector"/>
                    <param name="y" type="Vector"/>
                </params>
                <declaration name="xd" type="double[]" line="201"/>
                <declaration name="yd" type="double[]" line="202"/>
                <scope line="204">
                    <declaration name="row" type="int" line="205"/>
                    <declaration name="column" type="int" line="206"/>
                    <declaration name="locDiag" type="double[]" line="207"/>
                </scope>
            </method>
            <method name="multAdd" type="Vector" line="212">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="x" type="Vector"/>
                    <param name="y" type="Vector"/>
                </params>
                <declaration name="xd" type="double[]" line="215"/>
                <declaration name="yd" type="double[]" line="216"/>
                <scope line="217">
                    <declaration name="row" type="int" line="218"/>
                    <declaration name="column" type="int" line="219"/>
                    <declaration name="locDiag" type="double[]" line="220"/>
                </scope>
            </method>
            <method name="transMultAdd" type="Vector" line="225">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="x" type="Vector"/>
                    <param name="y" type="Vector"/>
                </params>
                <declaration name="xd" type="double[]" line="228"/>
                <declaration name="yd" type="double[]" line="229"/>
                <scope line="230">
                    <declaration name="row" type="int" line="231"/>
                    <declaration name="column" type="int" line="232"/>
                    <declaration name="locDiag" type="double[]" line="233"/>
                </scope>
            </method>
            <method name="iterator" type="Iterator<MatrixEntry>" line="238"/>
            <class name="CompDiagMatrixIterator" line="241">
                <implements interface="Iterator">
                    <type_params>
                        <type_param name="MatrixEntry"/>
                    </type_params>
                </implements>
                <javadoc line="241">
                    Iterator over a compressed diagonal matrix                    
                </javadoc>
                <declaration name="diagonal" type="int" line="245"/>
                <declaration name="entry" type="CompDiagMatrixEntry" line="246"/>
                <method name="hasNext" type="boolean" line="247"/>
                <method name="next" type="MatrixEntry" line="250">
                    <scope line="253"/>
                </method>
                <method name="remove" type="void" line="259"/>
            </class>
            <class name="CompDiagMatrixEntry" line="263">
                <implements interface="MatrixEntry"/>
                <javadoc line="263">
                    Entry of a compressed diagonal matrix                    
                </javadoc>
                <declaration name="diagonal" type="int" line="267"/>
                <method name="update" type="void" line="268">
                    <params>
                        <param name="diagonal" type="int"/>
                        <param name="index" type="int"/>
                    </params>
                </method>
                <method name="row" type="int" line="272"/>
                <method name="column" type="int" line="275"/>
                <method name="get" type="double" line="278"/>
                <method name="set" type="void" line="281">
                    <params>
                        <param name="value" type="double"/>
                    </params>
                </method>
            </class>
        </class>
    </source>