<?xml version="1.0" encoding="UTF-8"?>
    <source package="no.uib.cipr.matrix">
        <import package="java.util.Arrays"/>
        <import package="java.util.Iterator"/>
        <import package="com.github.fommil.netlib.LAPACK"/>
        <import package="org.netlib.util.intW"/>
        <class name="SymmTridiagMatrix" line="29">
            <extends class="AbstractMatrix"/>
            <javadoc line="29">
                Symmetrical tridiagonal matrix. Storage as for{@link no.uib.cipr.matrix.TridiagMatrix TridiagMatrix}, but only one
                  off-diagonal array is stored.                
            </javadoc>
            <declaration name="diag" type="double[]" line="36"/>
            <javadoc line="36">
                Diagonal and off-diagonal                
            </javadoc>
            <declaration name="n" type="int" line="41"/>
            <javadoc line="41">
                Size of the matrix                
            </javadoc>
            <javadoc line="46">
                Constructor for SymmTridiagMatrix                
                <param>
                    diagMain diagonal                    
                </param>
                <param>
                    offDiagOffdiagonals, both upper and lower                    
                </param>
                <param>
                    nSize of the matrix. The main diagonal must be at least as long
                      as n, and the off diagonal part must be at least as long as
                      n-1                    
                </param>
            </javadoc>
            <method name="SymmTridiagMatrix" type="constructor" line="58">
                <params>
                    <param name="diag" type="double[]"/>
                    <param name="offDiag" type="double[]"/>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="74">
                Constructor for SymmTridiagMatrix                
                <param>
                    diagMain diagonal                    
                </param>
                <param>
                    offDiagOffdiagonals. Must be one shorter than diag                    
                </param>
            </javadoc>
            <method name="SymmTridiagMatrix" type="constructor" line="82">
                <params>
                    <param name="diag" type="double[]"/>
                    <param name="offDiag" type="double[]"/>
                </params>
            </method>
            <javadoc line="86">
                Constructor for SymmTridiagMatrix                
                <param>
                    nSize of the matrix. Since the matrix must be square, this
                      equals both the number of rows and columns. <code>n</code>
                      cannot be zero                    
                </param>
            </javadoc>
            <method name="SymmTridiagMatrix" type="constructor" line="94">
                <params>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="105">
                Constructor for SymmTridiagMatrix                
                <param>
                    AMatrix to copy contents from. Only main and the superdiagonal
                      is copied over                    
                </param>
            </javadoc>
            <method name="SymmTridiagMatrix" type="constructor" line="112">
                <params>
                    <param name="A" type="Matrix"/>
                </params>
            </method>
            <javadoc line="116">
                Constructor for SymmTridiagMatrix                
                <param>
                    AMatrix to copy contents from. Only main and the superdiagonal
                      is copied over. It must be square and cannot have any zero
                      dimension lengths                    
                </param>
                <param>
                    deepTrue for a deep copy. For shallow copies <code>A</code> must
                      be a <code>SymmTridiagMatrix</code>                    
                </param>
            </javadoc>
            <method name="SymmTridiagMatrix" type="constructor" line="127">
                <params>
                    <param name="A" type="Matrix"/>
                    <param name="deep" type="boolean"/>
                </params>
                <scope line="137"/>
                <scope line="143">
                    <declaration name="B" type="SymmTridiagMatrix" line="144"/>
                </scope>
            </method>
            <javadoc line="150">
                Returns the diagonal entries. Length equal &lt;code&gt;n&lt;/code&gt;                
            </javadoc>
            <method name="getDiagonal" type="double[]" line="153"/>
            <javadoc line="157">
                Returns the off diagonal entries. Length equal &lt;code&gt;n-1&lt;/code&gt;                
            </javadoc>
            <method name="getOffDiagonal" type="double[]" line="160"/>
            <method name="add" type="void" line="165">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="value" type="double"/>
                </params>
            </method>
            <method name="get" type="double" line="177">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
            </method>
            <method name="set" type="void" line="190">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="value" type="double"/>
                </params>
            </method>
            <method name="copy" type="SymmTridiagMatrix" line="202"/>
            <method name="zero" type="SymmTridiagMatrix" line="207"/>
            <method name="solve" type="Matrix" line="214">
                <params>
                    <param name="B" type="Matrix"/>
                    <param name="X" type="Matrix"/>
                </params>
                <declaration name="Xd" type="double[]" line="220"/>
                <declaration name="info" type="intW" line="223"/>
            </method>
            <method name="solve" type="Vector" line="236">
                <params>
                    <param name="b" type="Vector"/>
                    <param name="x" type="Vector"/>
                </params>
                <declaration name="B" type="DenseMatrix" line="237"/>
            </method>
            <method name="transSolve" type="Matrix" line="243">
                <params>
                    <param name="B" type="Matrix"/>
                    <param name="X" type="Matrix"/>
                </params>
            </method>
            <method name="transSolve" type="Vector" line="248">
                <params>
                    <param name="b" type="Vector"/>
                    <param name="x" type="Vector"/>
                </params>
            </method>
            <method name="transpose" type="Matrix" line="253"/>
            <method name="iterator" type="Iterator<MatrixEntry>" line="258"/>
            <class name="SymmTridiagMatrixIterator" line="262">
                <extends class="RefMatrixIterator"/>
                <javadoc line="262">
                    Iterator over a symmetrical, tridiagonal matrix                    
                </javadoc>
                <declaration name="band" type="double[]" line="267"/>
                <javadoc line="267">
                    Current band, starting with the main diagonal                    
                </javadoc>
                <declaration name="bandIndex" type="int" line="272"/>
                <javadoc line="272">
                    Band index                    
                </javadoc>
                <declaration name="whichBand" type="int" line="277"/>
                <javadoc line="277">
                    Which band in use (0 for main, 1 for off)                    
                </javadoc>
                <method name="hasNext" type="boolean" line="283"/>
                <method name="next" type="MatrixEntry" line="288">
                    <comment line="292">
                        Move in the band                        
                    </comment>
                    <comment line="296">
                        Move to the off-diagonal (twice)                        
                    </comment>
                    <comment line="302">
                        If the off-diagonals are zero-sized, we are done
                         This happens if the matrix is 1*1                        
                    </comment>
                    <comment line="308">
                        Set row index                        
                    </comment>
                    <comment line="314">
                        Set column index                        
                    </comment>
                    <scope line="294"/>
                </method>
            </class>
        </class>
    </source>