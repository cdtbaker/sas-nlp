<?xml version="1.0" encoding="UTF-8"?>
    <source package="no.uib.cipr.matrix">
        <import package="com.github.fommil.netlib.LAPACK"/>
        <import package="org.netlib.util.intW"/>
        <class name="SymmTridiagEVD" line="4">
            <extends class="SymmEVD"/>
            <javadoc line="4">
                Computes eigenvalues of symmetrical, tridiagonal matrices                
            </javadoc>
            <declaration name="work" type="double[]" line="8"/>
            <javadoc line="8">
                Double work array                
            </javadoc>
            <declaration name="iwork" type="int[]" line="12"/>
            <javadoc line="12">
                Integer work array                
            </javadoc>
            <declaration name="range" type="JobEigRange" line="16"/>
            <javadoc line="16">
                Range of eigenvalues to compute                
            </javadoc>
            <declaration name="isuppz" type="int[]" line="20"/>
            <javadoc line="20">
                Eigenvector supports                
            </javadoc>
            <declaration name="abstol" type="double" line="24"/>
            <javadoc line="24">
                Tolerance criteria                
            </javadoc>
            <javadoc line="28">
                Sets up an eigenvalue decomposition for symmetrical, tridiagonal
                  matrices. Computes all eigenvalues and eigenvectors, and uses a low
                  default tolerance criteria                
                <param>
                    nSize of the matrix                    
                </param>
            </javadoc>
            <method name="SymmTridiagEVD" type="constructor" line="34">
                <params>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="37">
                Sets up an eigenvalue decomposition for symmetrical, tridiagonal
                  matrices. Computes all eigenvalues and eigenvectors                
                <param>
                    nSize of the matrix                    
                </param>
                <param>
                    abstolAbsolute tolerance criteria                    
                </param>
            </javadoc>
            <method name="SymmTridiagEVD" type="constructor" line="43">
                <params>
                    <param name="n" type="int"/>
                    <param name="abstol" type="double"/>
                </params>
            </method>
            <javadoc line="46">
                Sets up an eigenvalue decomposition for symmetrical, tridiagonal
                  matrices. Uses a low default tolerance criteria                
                <param>
                    nSize of the matrix                    
                </param>
                <param>
                    vectorsTrue to compute the eigenvectors, false for just the
                      eigenvalues                    
                </param>
            </javadoc>
            <method name="SymmTridiagEVD" type="constructor" line="53">
                <params>
                    <param name="n" type="int"/>
                    <param name="vectors" type="boolean"/>
                </params>
            </method>
            <javadoc line="56">
                Sets up an eigenvalue decomposition for symmetrical, tridiagonal matrices                
                <param>
                    nSize of the matrix                    
                </param>
                <param>
                    vectorsTrue to compute the eigenvectors, false for just the
                      eigenvalues                    
                </param>
                <param>
                    abstolAbsolute tolerance criteria                    
                </param>
            </javadoc>
            <method name="SymmTridiagEVD" type="constructor" line="63">
                <params>
                    <param name="n" type="int"/>
                    <param name="vectors" type="boolean"/>
                    <param name="abstol" type="double"/>
                </params>
                <declaration name="worksize" type="double[]" line="68"/>
                <declaration name="iworksize" type="int[]" line="69"/>
                <declaration name="info" type="intW" line="70"/>
                <declaration name="lwork" type="int" line="72"/>
                <scope line="73"/>
                <scope line="77"/>
            </method>
            <javadoc line="86">
                Convenience method for computing the full eigenvalue decomposition of the
                  given matrix                
                <param>
                    AMatrix to factorize. Main diagonal and superdiagonal is
                      copied, and the matrix is not modified                    
                </param>
                <return>
                    Newly allocated decomposition                    
                </return>
                <throws>
                    NotConvergedException                    
                </throws>
            </javadoc>
            <method name="factorize" type="SymmTridiagEVD" line="94">
                <params>
                    <param name="A" type="Matrix"/>
                </params>
            </method>
            <javadoc line="97">
                Computes the eigenvalue decomposition of the given matrix                
                <param>
                    AMatrix to factorize. Overwritten on return                    
                </param>
                <return>
                    The current eigenvalue decomposition                    
                </return>
                <throws>
                    NotConvergedException                    
                </throws>
            </javadoc>
            <method name="factor" type="SymmTridiagEVD" line="103">
                <params>
                    <param name="A" type="SymmTridiagMatrix"/>
                </params>
                <declaration name="info" type="intW" line="105"/>
            </method>
        </class>
    </source>