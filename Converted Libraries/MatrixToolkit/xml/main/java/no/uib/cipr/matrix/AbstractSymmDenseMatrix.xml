<?xml version="1.0" encoding="UTF-8"?>
    <source package="no.uib.cipr.matrix">
        <import package="com.github.fommil.netlib.BLAS"/>
        <import package="com.github.fommil.netlib.LAPACK"/>
        <import package="org.netlib.util.intW"/>
        <class name="AbstractSymmDenseMatrix" line="27">
            <extends class="AbstractDenseMatrix"/>
            <javadoc line="27">
                Partial implementation of a symmetrical, dense matrix                
            </javadoc>
            <declaration name="uplo" type="UpLo" line="32"/>
            <javadoc line="32">
                Upper or lower part stored?                
            </javadoc>
            <javadoc line="37">
                Constructor for AbstractSymmDenseMatrix                
            </javadoc>
            <method name="AbstractSymmDenseMatrix" type="constructor" line="40">
                <params>
                    <param name="n" type="int"/>
                    <param name="uplo" type="UpLo"/>
                </params>
            </method>
            <javadoc line="45">
                Constructor for AbstractSymmDenseMatrix                
            </javadoc>
            <method name="AbstractSymmDenseMatrix" type="constructor" line="48">
                <params>
                    <param name="A" type="Matrix"/>
                    <param name="uplo" type="UpLo"/>
                </params>
            </method>
            <javadoc line="52">
                Constructor for AbstractSymmDenseMatrix                
            </javadoc>
            <method name="AbstractSymmDenseMatrix" type="constructor" line="55">
                <params>
                    <param name="A" type="Matrix"/>
                    <param name="deep" type="boolean"/>
                    <param name="uplo" type="UpLo"/>
                </params>
            </method>
            <method name="multAdd" type="Matrix" line="64">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="B" type="Matrix"/>
                    <param name="C" type="Matrix"/>
                </params>
                <declaration name="Bd" type="double[]" line="70"/>
            </method>
            <method name="transAmultAdd" type="Matrix" line="81">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="B" type="Matrix"/>
                    <param name="C" type="Matrix"/>
                </params>
            </method>
            <method name="rank1" type="Matrix" line="86">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="x" type="Vector"/>
                    <param name="y" type="Vector"/>
                </params>
                <declaration name="xd" type="double[]" line="94"/>
            </method>
            <method name="rank2" type="Matrix" line="103">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="x" type="Vector"/>
                    <param name="y" type="Vector"/>
                </params>
                <declaration name="xd" type="double[]" line="109"/>
            </method>
            <method name="multAdd" type="Vector" line="119">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="x" type="Vector"/>
                    <param name="y" type="Vector"/>
                </params>
                <declaration name="xd" type="double[]" line="125"/>
            </method>
            <method name="transMultAdd" type="Vector" line="135">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="x" type="Vector"/>
                    <param name="y" type="Vector"/>
                </params>
            </method>
            <method name="rank1" type="Matrix" line="140">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="C" type="Matrix"/>
                </params>
                <declaration name="Cd" type="double[]" line="146"/>
            </method>
            <method name="transRank1" type="Matrix" line="156">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="C" type="Matrix"/>
                </params>
                <declaration name="Cd" type="double[]" line="162"/>
            </method>
            <method name="rank2" type="Matrix" line="171">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="B" type="Matrix"/>
                    <param name="C" type="Matrix"/>
                </params>
                <declaration name="Bd" type="double[]" line="177"/>
            </method>
            <method name="transRank2" type="Matrix" line="188">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="B" type="Matrix"/>
                    <param name="C" type="Matrix"/>
                </params>
                <declaration name="Bd" type="double[]" line="194"/>
            </method>
            <method name="solve" type="Matrix" line="205">
                <params>
                    <param name="B" type="Matrix"/>
                    <param name="X" type="Matrix"/>
                </params>
                <comment line="215">
                    Allocate factorization matrix                    
                </comment>
                <comment line="219">
                    Query optimal workspace                    
                </comment>
                <comment line="226">
                    Allocate workspace                    
                </comment>
                <comment line="234">
                    Solve                    
                </comment>
                <declaration name="Xd" type="double[]" line="211"/>
                <declaration name="newData" type="double[]" line="216"/>
                <declaration name="ipiv" type="int[]" line="217"/>
                <declaration name="work" type="double[]" line="220"/>
                <declaration name="info" type="intW" line="221"/>
                <declaration name="lwork" type="int" line="227"/>
            </method>
            <method name="solve" type="Vector" line="248">
                <params>
                    <param name="b" type="Vector"/>
                    <param name="x" type="Vector"/>
                </params>
                <declaration name="B" type="DenseMatrix" line="249"/>
            </method>
            <method name="transSolve" type="Matrix" line="255">
                <params>
                    <param name="B" type="Matrix"/>
                    <param name="X" type="Matrix"/>
                </params>
            </method>
            <method name="transSolve" type="Vector" line="260">
                <params>
                    <param name="b" type="Vector"/>
                    <param name="x" type="Vector"/>
                </params>
            </method>
            <method name="SPDsolve" type="Matrix" line="264">
                <params>
                    <param name="B" type="Matrix"/>
                    <param name="X" type="Matrix"/>
                </params>
                <declaration name="Xd" type="double[]" line="270"/>
                <declaration name="info" type="intW" line="274"/>
            </method>
            <method name="transpose" type="Matrix" line="287"/>
        </class>
    </source>