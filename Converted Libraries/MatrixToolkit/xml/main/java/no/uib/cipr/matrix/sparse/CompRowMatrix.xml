<?xml version="1.0" encoding="UTF-8"?>
    <source package="no.uib.cipr.matrix.sparse">
        <import package="java.io.IOException"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="java.util.Set"/>
        <import package="no.uib.cipr.matrix.AbstractMatrix"/>
        <import package="no.uib.cipr.matrix.DenseVector"/>
        <import package="no.uib.cipr.matrix.Matrix"/>
        <import package="no.uib.cipr.matrix.MatrixEntry"/>
        <import package="no.uib.cipr.matrix.Vector"/>
        <import package="no.uib.cipr.matrix.io.MatrixInfo"/>
        <import package="no.uib.cipr.matrix.io.MatrixSize"/>
        <import package="no.uib.cipr.matrix.io.MatrixVectorReader"/>
        <import package="com.github.fommil.netlib.BLAS"/>
        <class name="CompRowMatrix" line="18">
            <extends class="AbstractMatrix"/>
            <javadoc line="18">
                Compressed row storage (CRS) matrix                
            </javadoc>
            <declaration name="data" type="double[]" line="22"/>
            <javadoc line="22">
                Matrix data                
            </javadoc>
            <declaration name="columnIndex" type="int[]" line="26"/>
            <javadoc line="26">
                Column indices. These are kept sorted within each row.                
            </javadoc>
            <declaration name="rowPointer" type="int[]" line="30"/>
            <javadoc line="30">
                Indices to the start of each row                
            </javadoc>
            <javadoc line="34">
                Constructor for CompRowMatrix                
                <param>
                    rReader to get sparse matrix from                    
                </param>
            </javadoc>
            <method name="CompRowMatrix" type="constructor" line="38">
                <params>
                    <param name="r" type="MatrixVectorReader"/>
                </params>
                <declaration name="info" type="MatrixInfo" line="40"/>
                <declaration name="size" type="MatrixSize" line="46"/>
                <declaration name="numEntries" type="int" line="49"/>
                <declaration name="row" type="int[]" line="50"/>
                <declaration name="column" type="int[]" line="51"/>
                <declaration name="entry" type="double[]" line="52"/>
                <declaration name="rnz" type="List&lt;Set&lt;Integer&gt;&gt;" line="56"/>
                <declaration name="nz" type="int[][]" line="60"/>
                <scope line="61">
                    <declaration name="j" type="int" line="63"/>
                </scope>
                <scope line="68"/>
                <scope line="71"/>
            </method>
            <javadoc line="75">
                Constructor for CompRowMatrix                
                <param>
                    numRowsNumber of rows                    
                </param>
                <param>
                    numColumnsNumber of columns                    
                </param>
                <param>
                    nzThe nonzero column indices on each row                    
                </param>
            </javadoc>
            <method name="CompRowMatrix" type="constructor" line="81">
                <params>
                    <param name="numRows" type="int"/>
                    <param name="numColumns" type="int"/>
                    <param name="nz" type="int[][]"/>
                </params>
            </method>
            <method name="construct" type="void" line="85">
                <params>
                    <param name="nz" type="int[][]"/>
                </params>
                <declaration name="nnz" type="int" line="86"/>
                <scope line="92">
                    <scope line="94"/>
                </scope>
            </method>
            <method name="construct" type="void" line="101">
                <params>
                    <param name="A" type="Matrix"/>
                    <param name="deep" type="boolean"/>
                </params>
                <scope line="102">
                    <scope line="103">
                        <declaration name="Ac" type="CompRowMatrix" line="104"/>
                    </scope>
                    <scope line="112">
                        <declaration name="rnz" type="List&lt;Set&lt;Integer&gt;&gt;" line="113"/>
                        <declaration name="nz" type="int[][]" line="116"/>
                        <scope line="117">
                            <declaration name="j" type="int" line="119"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="126">
                    <declaration name="Ac" type="CompRowMatrix" line="127"/>
                </scope>
            </method>
            <javadoc line="133">
                Constructor for CompRowMatrix                
                <param>
                    ACopies from this matrix                    
                </param>
                <param>
                    deepTrue if the copy is to be deep. If it is a shallow copy,
                      <code>A</code> must be a <code>CompRowMatrix</code>                    
                </param>
            </javadoc>
            <method name="CompRowMatrix" type="constructor" line="139">
                <params>
                    <param name="A" type="Matrix"/>
                    <param name="deep" type="boolean"/>
                </params>
            </method>
            <javadoc line="143">
                Constructor for CompRowMatrix                
                <param>
                    ACopies from this matrix. The copy will be deep                    
                </param>
            </javadoc>
            <method name="CompRowMatrix" type="constructor" line="147">
                <params>
                    <param name="A" type="Matrix"/>
                </params>
            </method>
            <javadoc line="150">
                Returns the column indices                
            </javadoc>
            <method name="getColumnIndices" type="int[]" line="153"/>
            <javadoc line="156">
                Returns the row pointers                
            </javadoc>
            <method name="getRowPointers" type="int[]" line="159"/>
            <javadoc line="162">
                Returns the internal data storage                
            </javadoc>
            <method name="getData" type="double[]" line="165"/>
            <method name="mult" type="Matrix" line="168">
                <params>
                    <param name="B" type="Matrix"/>
                    <param name="C" type="Matrix"/>
                </params>
                <scope line="171">
                    <scope line="172">
                        <declaration name="dot" type="double" line="173"/>
                        <scope line="174"/>
                        <scope line="177"/>
                    </scope>
                </scope>
            </method>
            <method name="mult" type="Vector" line="184">
                <params>
                    <param name="x" type="Vector"/>
                    <param name="y" type="Vector"/>
                </params>
                <scope line="187">
                    <declaration name="xd" type="double[]" line="188"/>
                    <scope line="189">
                        <declaration name="dot" type="double" line="190"/>
                        <scope line="191"/>
                        <scope line="194"/>
                    </scope>
                </scope>
                <scope line="200">
                    <declaration name="dot" type="double" line="201"/>
                    <scope line="202"/>
                </scope>
            </method>
            <method name="multAdd" type="Vector" line="209">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="x" type="Vector"/>
                    <param name="y" type="Vector"/>
                </params>
                <declaration name="xd" type="double[]" line="212"/>
                <declaration name="yd" type="double[]" line="213"/>
                <scope line="214">
                    <declaration name="dot" type="double" line="215"/>
                </scope>
            </method>
            <method name="transMult" type="Vector" line="221">
                <params>
                    <param name="x" type="Vector"/>
                    <param name="y" type="Vector"/>
                </params>
                <declaration name="xd" type="double[]" line="224"/>
                <declaration name="yd" type="double[]" line="225"/>
            </method>
            <method name="transMultAdd" type="Vector" line="230">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="x" type="Vector"/>
                    <param name="y" type="Vector"/>
                </params>
                <declaration name="xd" type="double[]" line="233"/>
                <declaration name="yd" type="double[]" line="234"/>
            </method>
            <method name="set" type="void" line="239">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="value" type="double"/>
                </params>
                <declaration name="index" type="int" line="241"/>
            </method>
            <method name="add" type="void" line="244">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="value" type="double"/>
                </params>
                <declaration name="index" type="int" line="246"/>
            </method>
            <method name="get" type="double" line="249">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
                <declaration name="index" type="int" line="251"/>
            </method>
            <javadoc line="255">
                Finds the insertion index                
            </javadoc>
            <method name="getIndex" type="int" line="258">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
                <declaration name="i" type="int" line="259"/>
            </method>
            <method name="copy" type="CompRowMatrix" line="263"/>
            <method name="iterator" type="Iterator<MatrixEntry>" line="266"/>
            <method name="zero" type="CompRowMatrix" line="269"/>
            <method name="set" type="Matrix" line="273">
                <params>
                    <param name="B" type="Matrix"/>
                </params>
                <declaration name="Bc" type="CompRowMatrix" line="276"/>
                <scope line="277"/>
            </method>
            <class name="CompRowMatrixIterator" line="287">
                <implements interface="Iterator">
                    <type_params>
                        <type_param name="MatrixEntry"/>
                    </type_params>
                </implements>
                <javadoc line="287">
                    Iterator over a compressed row matrix                    
                </javadoc>
                <declaration name="row" type="int" line="291"/>
                <declaration name="entry" type="CompRowMatrixEntry" line="292"/>
                <method name="CompRowMatrixIterator" type="constructor" line="293"/>
                <javadoc line="296">
                    Locates the first non-empty row, starting at the current. After the
                      new row has been found, the cursor is also updated                    
                </javadoc>
                <method name="nextNonEmptyRow" type="void" line="300"/>
                <method name="hasNext" type="boolean" line="304"/>
                <method name="next" type="MatrixEntry" line="307">
                    <scope line="310"/>
                </method>
                <method name="remove" type="void" line="316"/>
            </class>
            <class name="CompRowMatrixEntry" line="320">
                <implements interface="MatrixEntry"/>
                <javadoc line="320">
                    Entry of a compressed row matrix                    
                </javadoc>
                <declaration name="row" type="int" line="324"/>
                <javadoc line="325">
                    Updates the entry                    
                </javadoc>
                <method name="update" type="void" line="328">
                    <params>
                        <param name="row" type="int"/>
                        <param name="cursor" type="int"/>
                    </params>
                </method>
                <method name="row" type="int" line="332"/>
                <method name="column" type="int" line="335"/>
                <method name="get" type="double" line="338"/>
                <method name="set" type="void" line="341">
                    <params>
                        <param name="value" type="double"/>
                    </params>
                </method>
            </class>
        </class>
    </source>