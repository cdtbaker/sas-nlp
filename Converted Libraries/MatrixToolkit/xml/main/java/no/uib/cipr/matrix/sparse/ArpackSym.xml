<?xml version="1.0" encoding="UTF-8"?>
    <source package="no.uib.cipr.matrix.sparse">
        <import package="com.github.fommil.netlib.ARPACK"/>
        <import package="lombok.extern.java.Log"/>
        <import package="no.uib.cipr.matrix"/>
        <import package="org.netlib.util.doubleW"/>
        <import package="org.netlib.util.intW"/>
        <import package="java.util.Comparator"/>
        <import package="java.util.Map"/>
        <import package="java.util.TreeMap"/>
        <class name="ArpackSym" line="10">
            <javadoc line="10">
                Uses ARPACK to partially solve symmetric eigensystems
                  (ARPACK is designed to compute a subset of eigenvalues/eigenvectors).                
                <author>
                    Sam Halliday                    
                </author>
            </javadoc>
            <declaration name="Ritz" type="enum" line="16"/>
            <scope line="16"/>
            <declaration name="arpack" type="ARPACK" line="32"/>
            <javadoc line="28">
                compute NEV eigenvalues, half from each end of the spectrum                
            </javadoc>
            <declaration name="TOL" type="double" line="33"/>
            <declaration name="EXPENSIVE_CHECKS" type="boolean" line="34"/>
            <declaration name="matrix" type="Matrix" line="35"/>
            <method name="ArpackSym" type="constructor" line="36">
                <params>
                    <param name="matrix" type="Matrix"/>
                </params>
                <scope line="38"/>
            </method>
            <javadoc line="43">
                Solve the eigensystem for the number of eigenvalues requested.
                  &lt;p&gt;
                  NOTE: The references to the eigenvectors will keep alive a reference to
                  a {@code nev  n} double array, so use the {@code copy()} method to free
                  it up if only a subset is required.                
                <param>
                    eigenvalues                    
                </param>
                <param>
                    ritz        preference for solutions                    
                </param>
                <return>
                    a map from eigenvalues to corresponding eigenvectors.                    
                </return>
            </javadoc>
            <method name="solve" type="Map<Double,DenseVectorSub>" line="53">
                <params>
                    <param name="eigenvalues" type="int"/>
                    <param name="ritz" type="Ritz"/>
                </params>
                <declaration name="n" type="int" line="56"/>
                <declaration name="nev" type="intW" line="57"/>
                <declaration name="ncv" type="int" line="58"/>
                <declaration name="bmat" type="String" line="59"/>
                <declaration name="which" type="String" line="60"/>
                <declaration name="tol" type="doubleW" line="61"/>
                <declaration name="info" type="intW" line="62"/>
                <declaration name="iparam" type="int[]" line="63"/>
                <declaration name="ido" type="intW" line="67"/>
                <declaration name="resid" type="double[]" line="68"/>
                <declaration name="v" type="double[]" line="69"/>
                <declaration name="workd" type="double[]" line="70"/>
                <declaration name="workl" type="double[]" line="71"/>
                <declaration name="ipntr" type="int[]" line="72"/>
                <declaration name="i" type="int" line="73"/>
                <scope line="74"/>
                <declaration name="d" type="double[]" line="83"/>
                <declaration name="select" type="boolean[]" line="84"/>
                <declaration name="z" type="double[]" line="85"/>
                <declaration name="computed" type="int" line="88"/>
                <anonymous_class line="90">
                    <method name="compare" type="int" line="91">
                        <params>
                            <param name="o1" type="Double"/>
                            <param name="o2" type="Double"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="solution" type="Map&lt;Double,DenseVectorSub&gt;" line="90"/>
                <declaration name="eigenvectors" type="DenseVector" line="96"/>
                <scope line="97">
                    <declaration name="eigenvalue" type="double" line="98"/>
                    <declaration name="eigenvector" type="DenseVectorSub" line="99"/>
                </scope>
            </method>
            <method name="av" type="void" line="104">
                <params>
                    <param name="work" type="double[]"/>
                    <param name="input_offset" type="int"/>
                    <param name="output_offset" type="int"/>
                </params>
                <declaration name="w" type="DenseVector" line="105"/>
                <declaration name="x" type="Vector" line="106"/>
                <declaration name="y" type="Vector" line="107"/>
            </method>
        </class>
    </source>