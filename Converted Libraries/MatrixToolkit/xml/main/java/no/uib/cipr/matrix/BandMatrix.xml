<?xml version="1.0" encoding="UTF-8"?>
    <source package="no.uib.cipr.matrix">
        <import package="java.util.Arrays"/>
        <import package="com.github.fommil.netlib.BLAS"/>
        <import package="com.github.fommil.netlib.LAPACK"/>
        <import package="org.netlib.util.intW"/>
        <class name="BandMatrix" line="6">
            <extends class="AbstractBandMatrix"/>
            <javadoc line="6">
                Banded matrix. The banded matrix is a useful sparse structure for many kinds
                  of direct computations, however it should only be used if the band is
                  sufficiently narrow as wide bands actually wastes both memory and compute
                  time. The matrix
                  &lt;p&gt;
                  &lt;table border=&quot;1&quot;&gt;
                  &lt;tr&gt;
                  &lt;td&gt;a&lt;sub&gt;11&lt;/sub&gt;&lt;/td&gt;
                  &lt;td&gt;a&lt;sub&gt;12&lt;/sub&gt;&lt;/td&gt;
                  &lt;td&gt;&amp;nbsp;&lt;/td&gt;
                  &lt;td&gt;&amp;nbsp;&lt;/td&gt;
                  &lt;td&gt;&amp;nbsp;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;a&lt;sub&gt;21&lt;/sub&gt;&lt;/td&gt;
                  &lt;td&gt;a&lt;sub&gt;22&lt;/sub&gt;&lt;/td&gt;
                  &lt;td&gt;a&lt;sub&gt;23&lt;/sub&gt;&lt;/td&gt;
                  &lt;td&gt;&amp;nbsp;&lt;/td&gt;
                  &lt;td&gt;&amp;nbsp;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;a&lt;sub&gt;31&lt;/sub&gt;&lt;/td&gt;
                  &lt;td&gt;a&lt;sub&gt;32&lt;/sub&gt;&lt;/td&gt;
                  &lt;td&gt;a&lt;sub&gt;33&lt;/sub&gt;&lt;/td&gt;
                  &lt;td&gt;a&lt;sub&gt;34&lt;/sub&gt;&lt;/td&gt;
                  &lt;td&gt;&amp;nbsp;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;&amp;nbsp;&lt;/td&gt;
                  &lt;td&gt;a&lt;sub&gt;42&lt;/sub&gt;&lt;/td&gt;
                  &lt;td&gt;a&lt;sub&gt;43&lt;/sub&gt;&lt;/td&gt;
                  &lt;td&gt;a&lt;sub&gt;44&lt;/sub&gt;&lt;/td&gt;
                  &lt;td&gt;a&lt;sub&gt;45&lt;/sub&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;&amp;nbsp;&lt;/td&gt;
                  &lt;td&gt;&amp;nbsp;&lt;/td&gt;
                  &lt;td&gt;a&lt;sub&gt;53&lt;/sub&gt;&lt;/td&gt;
                  &lt;td&gt;a&lt;sub&gt;54&lt;/sub&gt;&lt;/td&gt;
                  &lt;td&gt;a&lt;sub&gt;55&lt;/sub&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;
                  &lt;/p&gt;
                  &lt;p&gt;
                  has two lower diagonals and one upper diagonal. It will be stored in the
                  array
                  &lt;/p&gt;
                  &lt;p&gt;
                  &lt;table border=&quot;1&quot;&gt;
                  &lt;tr&gt;
                  &lt;td&gt;&amp;nbsp;&lt;/td&gt;
                  &lt;td&gt;a&lt;sub&gt;11&lt;/sub&gt;&lt;/td&gt;
                  &lt;td&gt;a&lt;sub&gt;21&lt;/sub&gt;&lt;/td&gt;
                  &lt;td&gt;a&lt;sub&gt;31&lt;/sub&gt;&lt;/td&gt;
                  &lt;td&gt;a&lt;sub&gt;21&lt;/sub&gt;&lt;/td&gt;
                  &lt;td&gt;a&lt;sub&gt;22&lt;/sub&gt;&lt;/td&gt;
                  &lt;td&gt;a&lt;sub&gt;32&lt;/sub&gt;&lt;/td&gt;
                  &lt;td&gt;a&lt;sub&gt;42&lt;/sub&gt;&lt;/td&gt;
                  &lt;td&gt;a&lt;sub&gt;23&lt;/sub&gt;&lt;/td&gt;
                  &lt;td&gt;a&lt;sub&gt;33&lt;/sub&gt;&lt;/td&gt;
                  &lt;td&gt;a&lt;sub&gt;43&lt;/sub&gt;&lt;/td&gt;
                  &lt;td&gt;a&lt;sub&gt;53&lt;/sub&gt;&lt;/td&gt;
                  &lt;td&gt;a&lt;sub&gt;34&lt;/sub&gt;&lt;/td&gt;
                  &lt;td&gt;a&lt;sub&gt;44&lt;/sub&gt;&lt;/td&gt;
                  &lt;td&gt;a&lt;sub&gt;54&lt;/sub&gt;&lt;/td&gt;
                  &lt;td&gt;&amp;nbsp;&lt;/td&gt;
                  &lt;td&gt;a&lt;sub&gt;45&lt;/sub&gt;&lt;/td&gt;
                  &lt;td&gt;a&lt;sub&gt;55&lt;/sub&gt;&lt;/td&gt;
                  &lt;td&gt;&amp;nbsp;&lt;/td&gt;
                  &lt;td&gt;&amp;nbsp;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;
                  &lt;/p&gt;
                  &lt;p&gt;
                  Empty cells are allocated, but never referenced.
                  &lt;/p&gt;                
            </javadoc>
            <javadoc line="85">
                Constructor for BandMatrix                
                <param>
                    nSize of the matrix. Since the matrix must be square, this
                      equals both the number of rows and columns                    
                </param>
                <param>
                    klNumber of bands above the main diagonal (superdiagonals)                    
                </param>
                <param>
                    kuNumber of bands below the main diagonal (subdiagonals)                    
                </param>
            </javadoc>
            <method name="BandMatrix" type="constructor" line="92">
                <params>
                    <param name="n" type="int"/>
                    <param name="kl" type="int"/>
                    <param name="ku" type="int"/>
                </params>
            </method>
            <javadoc line="95">
                Constructor for BandMatrix                
                <param>
                    AMatrix to copy contents from. Only the parts of <code>A</code>
                      that lie within the allocated band are copied over, the rest
                      is ignored                    
                </param>
                <param>
                    klNumber of bands above the main diagonal (superdiagonals)                    
                </param>
                <param>
                    kuNumber of bands below the main diagonal (subdiagonals)                    
                </param>
            </javadoc>
            <method name="BandMatrix" type="constructor" line="103">
                <params>
                    <param name="A" type="Matrix"/>
                    <param name="kl" type="int"/>
                    <param name="ku" type="int"/>
                </params>
            </method>
            <javadoc line="106">
                Constructor for BandMatrix                
                <param>
                    AMatrix to copy contents from. Only the parts of <code>A</code>
                      that lie within the allocated band are copied over, the rest
                      is ignored                    
                </param>
                <param>
                    klNumber of bands above the main diagonal (superdiagonals)                    
                </param>
                <param>
                    kuNumber of bands below the main diagonal (subdiagonals)                    
                </param>
                <param>
                    deepTrue for a deep copy. For shallow copies, <code>A</code>
                      must be a banded matrix                    
                </param>
            </javadoc>
            <method name="BandMatrix" type="constructor" line="116">
                <params>
                    <param name="A" type="Matrix"/>
                    <param name="kl" type="int"/>
                    <param name="ku" type="int"/>
                    <param name="deep" type="boolean"/>
                </params>
            </method>
            <method name="copy" type="BandMatrix" line="119"/>
            <method name="zero" type="Matrix" line="122"/>
            <method name="multAdd" type="Vector" line="126">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="x" type="Vector"/>
                    <param name="y" type="Vector"/>
                </params>
                <declaration name="xd" type="double[]" line="129"/>
            </method>
            <method name="transMultAdd" type="Vector" line="133">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="x" type="Vector"/>
                    <param name="y" type="Vector"/>
                </params>
                <declaration name="xd" type="double[]" line="136"/>
            </method>
            <method name="solve" type="Matrix" line="140">
                <params>
                    <param name="B" type="Matrix"/>
                    <param name="X" type="Matrix"/>
                </params>
                <declaration name="Xd" type="double[]" line="143"/>
                <declaration name="Af" type="BandMatrix" line="145"/>
                <declaration name="ipiv" type="int[]" line="146"/>
                <declaration name="info" type="intW" line="147"/>
            </method>
            <method name="solve" type="Vector" line="153">
                <params>
                    <param name="b" type="Vector"/>
                    <param name="x" type="Vector"/>
                </params>
                <declaration name="B" type="DenseMatrix" line="154"/>
            </method>
            <method name="transpose" type="Matrix" line="158">
                <scope line="161">
                    <declaration name="value" type="double" line="162"/>
                </scope>
            </method>
        </class>
    </source>