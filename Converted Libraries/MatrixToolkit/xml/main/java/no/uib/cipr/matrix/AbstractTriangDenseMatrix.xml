<?xml version="1.0" encoding="UTF-8"?>
    <source package="no.uib.cipr.matrix">
        <import package="java.util.Iterator"/>
        <import package="com.github.fommil.netlib.BLAS"/>
        <import package="com.github.fommil.netlib.LAPACK"/>
        <import package="org.netlib.util.intW"/>
        <class name="AbstractTriangDenseMatrix" line="6">
            <extends class="AbstractDenseMatrix"/>
            <javadoc line="6">
                Partial implementation of a triangular, dense matrix                
            </javadoc>
            <declaration name="uplo" type="UpLo" line="10"/>
            <javadoc line="10">
                If the matrix is upper triangular                
            </javadoc>
            <declaration name="diag" type="Diag" line="14"/>
            <javadoc line="14">
                If the matrix is unit diagonal or not unit                
            </javadoc>
            <declaration name="ld" type="int" line="18"/>
            <javadoc line="18">
                Leading dimension of the matrix                
            </javadoc>
            <javadoc line="22">
                Constructor for AbstractTriangDenseMatrix                
                <param>
                    nSize of the matrix. Since the matrix must be square, this
                      equals both the number of rows and columns                    
                </param>
            </javadoc>
            <method name="AbstractTriangDenseMatrix" type="constructor" line="27">
                <params>
                    <param name="n" type="int"/>
                    <param name="uplo" type="UpLo"/>
                    <param name="diag" type="Diag"/>
                </params>
            </method>
            <javadoc line="33">
                Constructor for AbstractTriangDenseMatrix                
                <param>
                    AMatrix to copy from                    
                </param>
            </javadoc>
            <method name="AbstractTriangDenseMatrix" type="constructor" line="37">
                <params>
                    <param name="A" type="Matrix"/>
                    <param name="uplo" type="UpLo"/>
                    <param name="diag" type="Diag"/>
                </params>
            </method>
            <javadoc line="40">
                Constructor for AbstractTriangDenseMatrix                
                <param>
                    AMatrix to copy from                    
                </param>
                <param>
                    deepIf true, <code>A</code> is copied, else a shallow copy is
                      made and the matrices share underlying storage. For this,
                      <code>A</code> must be a dense matrix                    
                </param>
            </javadoc>
            <method name="AbstractTriangDenseMatrix" type="constructor" line="47">
                <params>
                    <param name="A" type="Matrix"/>
                    <param name="deep" type="boolean"/>
                    <param name="uplo" type="UpLo"/>
                    <param name="diag" type="Diag"/>
                </params>
            </method>
            <javadoc line="50">
                Constructor for AbstractTriangDenseMatrix                
                <param>
                    AMatrix to copy from                    
                </param>
                <param>
                    kSize of matrix to refer.
                      <code>k&lt;min(numRows,numColumns)</code>                    
                </param>
            </javadoc>
            <method name="AbstractTriangDenseMatrix" type="constructor" line="56">
                <params>
                    <param name="A" type="Matrix"/>
                    <param name="k" type="int"/>
                    <param name="uplo" type="UpLo"/>
                    <param name="diag" type="Diag"/>
                </params>
            </method>
            <javadoc line="59">
                Constructor for AbstractTriangDenseMatrix                
                <param>
                    AMatrix to copy from                    
                </param>
                <param>
                    kSize of matrix to refer.
                      <code>k&lt;min(numRows,numColumns)</code>                    
                </param>
                <param>
                    deepIf true, <code>A</code> is copied, else a shallow copy is
                      made and the matrices share underlying storage. For this,
                      <code>A</code> must be a dense matrix                    
                </param>
            </javadoc>
            <method name="AbstractTriangDenseMatrix" type="constructor" line="68">
                <params>
                    <param name="A" type="Matrix"/>
                    <param name="k" type="int"/>
                    <param name="deep" type="boolean"/>
                    <param name="uplo" type="UpLo"/>
                    <param name="diag" type="Diag"/>
                </params>
            </method>
            <method name="mult" type="Vector" line="76">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="x" type="Vector"/>
                    <param name="y" type="Vector"/>
                </params>
                <declaration name="yd" type="double[]" line="79"/>
            </method>
            <method name="transMult" type="Vector" line="84">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="x" type="Vector"/>
                    <param name="y" type="Vector"/>
                </params>
                <declaration name="yd" type="double[]" line="87"/>
            </method>
            <method name="mult" type="Matrix" line="92">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="B" type="Matrix"/>
                    <param name="C" type="Matrix"/>
                </params>
                <declaration name="Cd" type="double[]" line="95"/>
            </method>
            <method name="transAmult" type="Matrix" line="100">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="B" type="Matrix"/>
                    <param name="C" type="Matrix"/>
                </params>
                <declaration name="Cd" type="double[]" line="103"/>
            </method>
            <method name="solve" type="Matrix" line="108">
                <params>
                    <param name="B" type="Matrix"/>
                    <param name="X" type="Matrix"/>
                </params>
            </method>
            <method name="solve" type="Vector" line="111">
                <params>
                    <param name="b" type="Vector"/>
                    <param name="x" type="Vector"/>
                </params>
                <declaration name="B" type="DenseMatrix" line="112"/>
            </method>
            <method name="transSolve" type="Matrix" line="116">
                <params>
                    <param name="B" type="Matrix"/>
                    <param name="X" type="Matrix"/>
                </params>
            </method>
            <method name="transSolve" type="Vector" line="119">
                <params>
                    <param name="b" type="Vector"/>
                    <param name="x" type="Vector"/>
                </params>
                <declaration name="B" type="DenseMatrix" line="120"/>
            </method>
            <method name="solve" type="Matrix" line="124">
                <params>
                    <param name="B" type="Matrix"/>
                    <param name="X" type="Matrix"/>
                    <param name="trans" type="Transpose"/>
                </params>
                <declaration name="Xd" type="double[]" line="129"/>
                <declaration name="info" type="intW" line="131"/>
            </method>
            <method name="getIndex" type="int" line="137">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
            </method>
            <method name="iterator" type="Iterator<MatrixEntry>" line="141"/>
            <class name="TriangDenseMatrixIterator" line="144">
                <extends class="RefMatrixIterator"/>
                <method name="next" type="MatrixEntry" line="145">
                    <scope line="148"/>
                    <scope line="152">
                        <scope line="154"/>
                    </scope>
                </method>
            </class>
        </class>
    </source>