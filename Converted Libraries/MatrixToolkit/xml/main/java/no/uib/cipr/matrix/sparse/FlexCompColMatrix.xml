<?xml version="1.0" encoding="UTF-8"?>
    <source package="no.uib.cipr.matrix.sparse">
        <import package="java.util.Arrays"/>
        <import package="java.util.Iterator"/>
        <import package="no.uib.cipr.matrix.AbstractMatrix"/>
        <import package="no.uib.cipr.matrix.DenseVector"/>
        <import package="no.uib.cipr.matrix.Matrix"/>
        <import package="no.uib.cipr.matrix.MatrixEntry"/>
        <import package="no.uib.cipr.matrix.Vector"/>
        <import package="no.uib.cipr.matrix.VectorEntry"/>
        <import package="no.uib.cipr.matrix.sparse.SuperIterator.SuperIteratorEntry"/>
        <class name="FlexCompColMatrix" line="11">
            <extends class="AbstractMatrix"/>
            <javadoc line="11">
                Matrix stored column-wise into sparse vectors                
            </javadoc>
            <declaration name="colD" type="SparseVector[]" line="15"/>
            <javadoc line="15">
                Matrix data                
            </javadoc>
            <javadoc line="19">
                Constructor for FlexCompColMatrix                
                <param>
                    numRowsNumber of rows                    
                </param>
                <param>
                    numColumnsNumber of column                    
                </param>
            </javadoc>
            <method name="FlexCompColMatrix" type="constructor" line="24">
                <params>
                    <param name="numRows" type="int"/>
                    <param name="numColumns" type="int"/>
                </params>
            </method>
            <javadoc line="29">
                Constructor for FlexCompColMatrix                
                <param>
                    AMatrix to copy contents from                    
                </param>
                <param>
                    deepTrue for a deep copy, false for a reference copy. A reference
                      copy can only be made of an <code>FlexCompColMatrix</code>                    
                </param>
            </javadoc>
            <method name="FlexCompColMatrix" type="constructor" line="35">
                <params>
                    <param name="A" type="Matrix"/>
                    <param name="deep" type="boolean"/>
                </params>
                <scope line="38"/>
                <scope line="42">
                    <declaration name="Ar" type="FlexCompColMatrix" line="43"/>
                </scope>
            </method>
            <javadoc line="47">
                Constructor for FlexCompColMatrix                
                <param>
                    AMatrix to copy contents from. The copy will be deep                    
                </param>
            </javadoc>
            <method name="FlexCompColMatrix" type="constructor" line="51">
                <params>
                    <param name="A" type="Matrix"/>
                </params>
            </method>
            <javadoc line="54">
                Returns the given column                
            </javadoc>
            <method name="getColumn" type="SparseVector" line="57">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="60">
                Sets the given column equal the passed vector                
            </javadoc>
            <method name="setColumn" type="void" line="63">
                <params>
                    <param name="i" type="int"/>
                    <param name="x" type="SparseVector"/>
                </params>
            </method>
            <method name="multAdd" type="Vector" line="67">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="x" type="Vector"/>
                    <param name="y" type="Vector"/>
                </params>
                <declaration name="xd" type="double[]" line="70"/>
                <declaration name="yd" type="double[]" line="71"/>
                <scope line="73">
                    <declaration name="v" type="SparseVector" line="74"/>
                    <declaration name="index" type="int[]" line="75"/>
                    <declaration name="data" type="double[]" line="76"/>
                    <declaration name="length" type="int" line="77"/>
                </scope>
            </method>
            <method name="transMultAdd" type="Vector" line="82">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="x" type="Vector"/>
                    <param name="y" type="Vector"/>
                </params>
            </method>
            <method name="add" type="void" line="87">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="value" type="double"/>
                </params>
            </method>
            <method name="set" type="void" line="90">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="value" type="double"/>
                </params>
            </method>
            <method name="get" type="double" line="93">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
            </method>
            <method name="iterator" type="Iterator<MatrixEntry>" line="96"/>
            <method name="copy" type="FlexCompColMatrix" line="99"/>
            <method name="zero" type="FlexCompColMatrix" line="102"/>
            <javadoc line="106">
                Tries to store the matrix as compactly as possible                
            </javadoc>
            <method name="compact" type="void" line="109"/>
            <class name="ColMatrixIterator" line="112">
                <implements interface="Iterator">
                    <type_params>
                        <type_param name="MatrixEntry"/>
                    </type_params>
                </implements>
                <javadoc line="112">
                    Iterator over a matrix stored vectorwise by columns                    
                </javadoc>
                <declaration name="iterator" type="SuperIterator&lt;SparseVector,VectorEntry&gt;" line="116"/>
                <javadoc line="116">
                    Iterates over each column vector                    
                </javadoc>
                <declaration name="entry" type="ColMatrixEntry" line="120"/>
                <javadoc line="120">
                    Entry returned                    
                </javadoc>
                <method name="hasNext" type="boolean" line="124"/>
                <method name="next" type="MatrixEntry" line="127">
                    <declaration name="se" type="SuperIteratorEntry&lt;VectorEntry&gt;" line="128"/>
                </method>
                <method name="remove" type="void" line="132"/>
            </class>
            <class name="ColMatrixEntry" line="136">
                <implements interface="MatrixEntry"/>
                <javadoc line="136">
                    Entry of a matrix stored vectorwise by columns                    
                </javadoc>
                <declaration name="column" type="int" line="140"/>
                <declaration name="entry" type="VectorEntry" line="141"/>
                <method name="update" type="void" line="142">
                    <params>
                        <param name="column" type="int"/>
                        <param name="entry" type="VectorEntry"/>
                    </params>
                </method>
                <method name="row" type="int" line="146"/>
                <method name="column" type="int" line="149"/>
                <method name="get" type="double" line="152"/>
                <method name="set" type="void" line="155">
                    <params>
                        <param name="value" type="double"/>
                    </params>
                </method>
            </class>
        </class>
    </source>