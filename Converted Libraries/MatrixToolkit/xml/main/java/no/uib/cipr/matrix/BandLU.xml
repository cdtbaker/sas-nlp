<?xml version="1.0" encoding="UTF-8"?>
    <source package="no.uib.cipr.matrix">
        <import package="no.uib.cipr.matrix.Matrix.Norm"/>
        <import package="com.github.fommil.netlib.LAPACK"/>
        <import package="org.netlib.util.doubleW"/>
        <import package="org.netlib.util.intW"/>
        <class name="BandLU" line="6">
            <javadoc line="6">
                Banded LU decomposition                
            </javadoc>
            <declaration name="n" type="int" line="10"/>
            <javadoc line="10">
                Matrix dimension                
            </javadoc>
            <declaration name="kl" type="int" line="14"/>
            <javadoc line="14">
                Number of bands in the matrix A                
            </javadoc>
            <declaration name="LU" type="BandMatrix" line="18"/>
            <javadoc line="18">
                Holds the LU factors                
            </javadoc>
            <declaration name="ipiv" type="int[]" line="22"/>
            <javadoc line="22">
                Row pivotations                
            </javadoc>
            <declaration name="singular" type="boolean" line="26"/>
            <javadoc line="26">
                True if the matrix was singular                
            </javadoc>
            <javadoc line="30">
                Constructor for BandLU                
                <param>
                    nMatrix size                    
                </param>
                <param>
                    klNumber of lower matrix bands                    
                </param>
                <param>
                    kuNumber of upper matrix bands                    
                </param>
            </javadoc>
            <method name="BandLU" type="constructor" line="36">
                <params>
                    <param name="n" type="int"/>
                    <param name="kl" type="int"/>
                    <param name="ku" type="int"/>
                </params>
            </method>
            <javadoc line="43">
                Creates an LU decomposition of the given matrix                
                <param>
                    AMatrix to decompose. Not modified                    
                </param>
                <return>
                    A LU decomposition of the matrix                    
                </return>
            </javadoc>
            <method name="factorize" type="BandLU" line="48">
                <params>
                    <param name="A" type="BandMatrix"/>
                </params>
            </method>
            <javadoc line="51">
                Creates an LU decomposition of the given matrix                
                <param>
                    AMatrix to decompose. If the decomposition is in-place, its
                      number of superdiagonals must equal <code>kl+ku</code>                    
                </param>
                <param>
                    inplaceWheter or not the decomposition should overwrite the passed
                      matrix                    
                </param>
                <return>
                    The current decomposition                    
                </return>
            </javadoc>
            <method name="factor" type="BandLU" line="59">
                <params>
                    <param name="A" type="BandMatrix"/>
                    <param name="inplace" type="boolean"/>
                </params>
            </method>
            <javadoc line="63">
                Creates an LU decomposition of the given matrix                
                <param>
                    AMatrix to decompose. It will be overwritten with the
                      decomposition. Its number of superdiagonals must equal
                      <code>kl+ku</code>                    
                </param>
                <return>
                    The current decomposition                    
                </return>
            </javadoc>
            <method name="factor" type="BandLU" line="70">
                <params>
                    <param name="A" type="BandMatrix"/>
                </params>
                <declaration name="info" type="intW" line="75"/>
            </method>
            <javadoc line="82">
                Returns the lower triangular factor                
            </javadoc>
            <method name="getL" type="UnitLowerTriangBandMatrix" line="85"/>
            <javadoc line="88">
                Returns the upper triangular factor                
            </javadoc>
            <method name="getU" type="UpperTriangBandMatrix" line="91"/>
            <javadoc line="94">
                Returns the decomposition matrix                
            </javadoc>
            <method name="getLU" type="BandMatrix" line="97"/>
            <javadoc line="100">
                Returns the row pivots                
            </javadoc>
            <method name="getPivots" type="int[]" line="103"/>
            <javadoc line="106">
                Checks for singularity                
            </javadoc>
            <method name="isSingular" type="boolean" line="109"/>
            <javadoc line="112">
                Computes the reciprocal condition number, using either the infinity norm
                  of the 1 norm.                
                <param>
                    AThe matrix this is a decomposition of                    
                </param>
                <param>
                    normEither <code>Norm.One</code> or <code>Norm.Infinity</code>                    
                </param>
                <return>
                    The reciprocal condition number. Values close to unity indicate a
                      well-conditioned system, while numbers close to zero do not.                    
                </return>
            </javadoc>
            <method name="rcond" type="double" line="120">
                <params>
                    <param name="A" type="Matrix"/>
                    <param name="norm" type="Norm"/>
                </params>
                <declaration name="anorm" type="double" line="124"/>
                <declaration name="work" type="double[]" line="125"/>
                <declaration name="lwork" type="int[]" line="126"/>
                <declaration name="info" type="intW" line="127"/>
                <declaration name="rcond" type="doubleW" line="128"/>
            </method>
            <javadoc line="133">
                Computes &lt;code&gt;A\B&lt;/code&gt;, overwriting &lt;code&gt;B&lt;/code&gt;                
            </javadoc>
            <method name="solve" type="DenseMatrix" line="136">
                <params>
                    <param name="B" type="DenseMatrix"/>
                </params>
            </method>
            <javadoc line="139">
                Computes &lt;code&gt;A&lt;sup&gt;T&lt;/sup&gt;\B&lt;/code&gt;, overwriting &lt;code&gt;B&lt;/code&gt;                
            </javadoc>
            <method name="transSolve" type="DenseMatrix" line="142">
                <params>
                    <param name="B" type="DenseMatrix"/>
                </params>
            </method>
            <method name="solve" type="DenseMatrix" line="145">
                <params>
                    <param name="B" type="DenseMatrix"/>
                    <param name="trans" type="Transpose"/>
                </params>
                <declaration name="info" type="intW" line="148"/>
            </method>
        </class>
    </source>