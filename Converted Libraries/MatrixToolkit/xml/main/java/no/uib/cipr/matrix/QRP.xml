<?xml version="1.0" encoding="UTF-8"?>
    <source package="no.uib.cipr.matrix">
        <import package="com.github.fommil.netlib.LAPACK"/>
        <import package="org.netlib.util.intW"/>
        <class name="QRP" line="4">
            <javadoc line="4">
                Computes QR decompositions with column pivoting:{@code AP = QR} where{@code A(m,n)}, {@code Q(m,m)}, and {@code R(m,n)}, more generally:{@code AP = [Q1 Q2]  [R11, R12; 0 R22]} and {@code R22} elements are
                  negligible.                
            </javadoc>
            <declaration name="jpvt" type="int" line="9"/>
            <javadoc line="9">
                Pivoting vector                
            </javadoc>
            <declaration name="tau" type="double[]" line="13"/>
            <javadoc line="13">
                Scales for the reflectors                
            </javadoc>
            <declaration name="m" type="int" line="17"/>
            <javadoc line="17">
                Factorisation sizes                
            </javadoc>
            <declaration name="rank" type="int" line="21"/>
            <javadoc line="21">
                The factored matrix rank                
            </javadoc>
            <declaration name="work" type="double[]" line="25"/>
            <javadoc line="25">
                Work array                
            </javadoc>
            <declaration name="Afact" type="DenseMatrix" line="29"/>
            <javadoc line="29">
                The factored matrix                
            </javadoc>
            <declaration name="Q" type="DenseMatrix" line="33"/>
            <javadoc line="33">
                The orthogonal matrix                
            </javadoc>
            <declaration name="R" type="DenseMatrix" line="37"/>
            <javadoc line="37">
                The general upper triangular matrix.                
            </javadoc>
            <javadoc line="41">
                Constructs an empty QR decomposition                
                <param>
                    m the number of rows.                    
                </param>
                <param>
                    n the number of columns.                    
                </param>
            </javadoc>
            <method name="QRP" type="constructor" line="46">
                <params>
                    <param name="m" type="int"/>
                    <param name="n" type="int"/>
                </params>
                <declaration name="lwork1" type="int" line="56"/>
                <declaration name="info" type="intW" line="57"/>
                <declaration name="dummy" type="double" line="58"/>
                <declaration name="ret" type="double" line="59"/>
                <declaration name="lapack" type="LAPACK" line="60"/>
            </method>
            <javadoc line="67">
                Convenience method to compute a QR decomposition                
                <param>
                    A the matrix to decompose (not modified)                    
                </param>
                <return>
                    Newly allocated decomposition                    
                </return>
            </javadoc>
            <method name="factorize" type="QRP" line="72">
                <params>
                    <param name="A" type="Matrix"/>
                </params>
            </method>
            <javadoc line="75">
                Executes a QR factorization for the given matrix.                
                <param>
                    A the matrix to be factored (not modified)                    
                </param>
                <return>
                    the factorization object                    
                </return>
            </javadoc>
            <method name="factor" type="QRP" line="80">
                <params>
                    <param name="A" type="Matrix"/>
                </params>
                <scope line="84"/>
                <declaration name="info" type="intW" line="87"/>
                <declaration name="lapack" type="LAPACK" line="88"/>
                <scope line="92">
                    <scope line="93"/>
                </scope>
                <declaration name="EPS" type="double" line="97"/>
                <scope line="98"/>
                <scope line="102"/>
                <scope line="106"/>
            </method>
            <javadoc line="111">
                Returns the upper triangular factor                
            </javadoc>
            <method name="getR" type="DenseMatrix" line="114"/>
            <javadoc line="117">
                Returns the orthogonal matrix                
            </javadoc>
            <method name="getQ" type="DenseMatrix" line="120"/>
            <javadoc line="123">
                Returns the column pivoting vector.
                  This function is cheaper than {@link #getP()}.                
            </javadoc>
            <method name="getPVector" type="int[]" line="127"/>
            <javadoc line="130">
                Returns the column pivoting matrix.
                  This function allocates a new Matrix to be returned,
                  a more cheap option is tu use {@link #getPVector()}.                
            </javadoc>
            <method name="getP" type="Matrix" line="135">
                <declaration name="P" type="Matrix" line="136"/>
                <scope line="137"/>
            </method>
            <javadoc line="142">
                Returns the rank of the factored matrix                
            </javadoc>
            <method name="getRank" type="int" line="145"/>
        </class>
    </source>