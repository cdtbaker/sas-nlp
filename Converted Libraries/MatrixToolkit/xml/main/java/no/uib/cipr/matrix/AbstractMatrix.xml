<?xml version="1.0" encoding="UTF-8"?>
    <source package="no.uib.cipr.matrix">
        <import package="java.util.Formatter"/>
        <import package="java.util.Iterator"/>
        <class name="AbstractMatrix" line="4">
            <implements interface="Matrix"/>
            <javadoc line="4">
                Partial implementation of &lt;code&gt;Matrix&lt;/code&gt;. The following methods throw
                  &lt;code&gt;UnsupportedOperationException&lt;/code&gt;, and should be overridden by a
                  subclass:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;code&gt;get(int,int)&lt;/code&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;code&gt;set(int,int,double)&lt;/code&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;code&gt;copy&lt;/code&gt;&lt;/li&gt;
                  &lt;li&gt;All the direct solution methods&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;
                  For the rest of the methods, simple default implementations using a matrix
                  iterator has been provided. There are some kernel operations which the
                  simpler operations forward to, for instance, &lt;code&gt;mult(Matrix,Matrix)&lt;/code&gt;
                  forwards to &lt;code&gt;multAdd(double,Matrix,Matrix)&lt;/code&gt;. Subclasses can
                  thus focus on overriding the kernel operations, which are:
                  &lt;ul&gt;
                  &lt;li&gt; &lt;code&gt;multAdd(double,Vector,Vector)&lt;/code&gt; and
                  &lt;code&gt;transMultAdd(double,Vector,Vector)&lt;/code&gt;. &lt;/li&gt;
                  &lt;li&gt; &lt;code&gt;rank1(double,Vector,Vector)&lt;/code&gt; and
                  &lt;code&gt;rank1(double,Vector,Vector)&lt;/code&gt;.&lt;/li&gt;
                  &lt;li&gt; &lt;code&gt;multAdd(double,Matrix,Matrix)&lt;/code&gt;,
                  &lt;code&gt;transAmultAdd(double,Matrix,Matrix)&lt;/code&gt;,
                  &lt;code&gt;transBmultAdd(double,Matrix,Matrix)&lt;/code&gt;, and
                  &lt;code&gt;transABmultAdd(double,Matrix,Matrix)&lt;/code&gt;. &lt;/li&gt;
                  &lt;li&gt; &lt;code&gt;scale(double)&lt;/code&gt;. &lt;/li&gt;
                  &lt;li&gt; &lt;code&gt;set(double,Matrix)&lt;/code&gt; and &lt;code&gt;add(double,Matrix)&lt;/code&gt;.
                  &lt;/li&gt;
                  &lt;li&gt; &lt;code&gt;transpose&lt;/code&gt; and &lt;code&gt;transpose(Matrix)&lt;/code&gt;. &lt;/li&gt;
                  &lt;li&gt; All the norms.&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;
                  Finally, a default iterator is provided by this class, which works by calling
                  the &lt;code&gt;get&lt;/code&gt; function. A tailored replacement should be used by
                  subclasses.
                  &lt;/ul&gt;                
            </javadoc>
            <declaration name="numRows" type="int" line="42"/>
            <javadoc line="42">
                Number of rows                
            </javadoc>
            <declaration name="numColumns" type="int" line="46"/>
            <javadoc line="46">
                Number of columns                
            </javadoc>
            <javadoc line="50">
                Constructor for AbstractMatrix                
            </javadoc>
            <method name="AbstractMatrix" type="constructor" line="53">
                <params>
                    <param name="numRows" type="int"/>
                    <param name="numColumns" type="int"/>
                </params>
            </method>
            <javadoc line="58">
                Constructor for AbstractMatrix, same size as A. The invoking constructor
                  should set this matrix equal the argument matrix                
            </javadoc>
            <method name="AbstractMatrix" type="constructor" line="62">
                <params>
                    <param name="A" type="Matrix"/>
                </params>
            </method>
            <method name="numRows" type="int" line="65"/>
            <method name="numColumns" type="int" line="68"/>
            <method name="isSquare" type="boolean" line="71"/>
            <method name="set" type="void" line="74">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="value" type="double"/>
                </params>
            </method>
            <method name="add" type="void" line="77">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="value" type="double"/>
                </params>
            </method>
            <method name="get" type="double" line="80">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
            </method>
            <javadoc line="83">
                Checks the passed row and column indices                
            </javadoc>
            <method name="check" type="void" line="86">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
            </method>
            <method name="copy" type="Matrix" line="92"/>
            <method name="zero" type="Matrix" line="95"/>
            <method name="mult" type="Vector" line="99">
                <params>
                    <param name="x" type="Vector"/>
                    <param name="y" type="Vector"/>
                </params>
            </method>
            <method name="mult" type="Vector" line="102">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="x" type="Vector"/>
                    <param name="y" type="Vector"/>
                </params>
            </method>
            <method name="multAdd" type="Vector" line="105">
                <params>
                    <param name="x" type="Vector"/>
                    <param name="y" type="Vector"/>
                </params>
            </method>
            <method name="multAdd" type="Vector" line="108">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="x" type="Vector"/>
                    <param name="y" type="Vector"/>
                </params>
            </method>
            <javadoc line="113">
                Checks the arguments to &lt;code&gt;mult&lt;/code&gt; and &lt;code&gt;multAdd&lt;/code&gt;                
            </javadoc>
            <method name="checkMultAdd" type="void" line="116">
                <params>
                    <param name="x" type="Vector"/>
                    <param name="y" type="Vector"/>
                </params>
            </method>
            <method name="transMult" type="Vector" line="120">
                <params>
                    <param name="x" type="Vector"/>
                    <param name="y" type="Vector"/>
                </params>
            </method>
            <method name="transMult" type="Vector" line="123">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="x" type="Vector"/>
                    <param name="y" type="Vector"/>
                </params>
            </method>
            <method name="transMultAdd" type="Vector" line="126">
                <params>
                    <param name="x" type="Vector"/>
                    <param name="y" type="Vector"/>
                </params>
            </method>
            <method name="transMultAdd" type="Vector" line="129">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="x" type="Vector"/>
                    <param name="y" type="Vector"/>
                </params>
            </method>
            <javadoc line="134">
                Checks the arguments to &lt;code&gt;transMult&lt;/code&gt; and
                  &lt;code&gt;transMultAdd&lt;/code&gt;                
            </javadoc>
            <method name="checkTransMultAdd" type="void" line="138">
                <params>
                    <param name="x" type="Vector"/>
                    <param name="y" type="Vector"/>
                </params>
            </method>
            <method name="solve" type="Vector" line="142">
                <params>
                    <param name="b" type="Vector"/>
                    <param name="x" type="Vector"/>
                </params>
            </method>
            <method name="transSolve" type="Vector" line="145">
                <params>
                    <param name="b" type="Vector"/>
                    <param name="x" type="Vector"/>
                </params>
            </method>
            <javadoc line="148">
                Checks that a matrix inversion is legal for the given arguments. This is
                  for the square case, not for least-squares problems                
            </javadoc>
            <method name="checkSolve" type="void" line="152">
                <params>
                    <param name="b" type="Vector"/>
                    <param name="x" type="Vector"/>
                </params>
            </method>
            <method name="rank1" type="Matrix" line="157">
                <params>
                    <param name="x" type="Vector"/>
                </params>
            </method>
            <method name="rank1" type="Matrix" line="160">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="x" type="Vector"/>
                </params>
            </method>
            <method name="rank1" type="Matrix" line="163">
                <params>
                    <param name="x" type="Vector"/>
                    <param name="y" type="Vector"/>
                </params>
            </method>
            <method name="rank1" type="Matrix" line="166">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="x" type="Vector"/>
                    <param name="y" type="Vector"/>
                </params>
            </method>
            <javadoc line="172">
                Checks that a vector rank1 update is possible for the given vectors                
            </javadoc>
            <method name="checkRank1" type="void" line="175">
                <params>
                    <param name="x" type="Vector"/>
                    <param name="y" type="Vector"/>
                </params>
            </method>
            <method name="rank2" type="Matrix" line="180">
                <params>
                    <param name="x" type="Vector"/>
                    <param name="y" type="Vector"/>
                </params>
            </method>
            <method name="rank2" type="Matrix" line="183">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="x" type="Vector"/>
                    <param name="y" type="Vector"/>
                </params>
                <scope line="186"/>
            </method>
            <javadoc line="192">
                Checks that a vector rank2 update is legal with the given vectors                
            </javadoc>
            <method name="checkRank2" type="void" line="195">
                <params>
                    <param name="x" type="Vector"/>
                    <param name="y" type="Vector"/>
                </params>
            </method>
            <method name="mult" type="Matrix" line="200">
                <params>
                    <param name="B" type="Matrix"/>
                    <param name="C" type="Matrix"/>
                </params>
            </method>
            <method name="mult" type="Matrix" line="203">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="B" type="Matrix"/>
                    <param name="C" type="Matrix"/>
                </params>
            </method>
            <method name="multAdd" type="Matrix" line="206">
                <params>
                    <param name="B" type="Matrix"/>
                    <param name="C" type="Matrix"/>
                </params>
            </method>
            <method name="multAdd" type="Matrix" line="209">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="B" type="Matrix"/>
                    <param name="C" type="Matrix"/>
                </params>
                <scope line="211">
                    <declaration name="dot" type="double" line="212"/>
                </scope>
            </method>
            <javadoc line="218">
                Checks the arguments to &lt;code&gt;mult&lt;/code&gt; and &lt;code&gt;multAdd&lt;/code&gt;                
            </javadoc>
            <method name="checkMultAdd" type="void" line="221">
                <params>
                    <param name="B" type="Matrix"/>
                    <param name="C" type="Matrix"/>
                </params>
            </method>
            <method name="transAmult" type="Matrix" line="226">
                <params>
                    <param name="B" type="Matrix"/>
                    <param name="C" type="Matrix"/>
                </params>
            </method>
            <method name="transAmult" type="Matrix" line="229">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="B" type="Matrix"/>
                    <param name="C" type="Matrix"/>
                </params>
            </method>
            <method name="transAmultAdd" type="Matrix" line="232">
                <params>
                    <param name="B" type="Matrix"/>
                    <param name="C" type="Matrix"/>
                </params>
            </method>
            <method name="transAmultAdd" type="Matrix" line="235">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="B" type="Matrix"/>
                    <param name="C" type="Matrix"/>
                </params>
                <scope line="237">
                    <declaration name="dot" type="double" line="238"/>
                </scope>
            </method>
            <javadoc line="244">
                Checks the arguments to &lt;code&gt;transAmult&lt;/code&gt; and
                  &lt;code&gt;transAmultAdd&lt;/code&gt;                
            </javadoc>
            <method name="checkTransAmultAdd" type="void" line="248">
                <params>
                    <param name="B" type="Matrix"/>
                    <param name="C" type="Matrix"/>
                </params>
            </method>
            <method name="transBmult" type="Matrix" line="253">
                <params>
                    <param name="B" type="Matrix"/>
                    <param name="C" type="Matrix"/>
                </params>
            </method>
            <method name="transBmult" type="Matrix" line="256">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="B" type="Matrix"/>
                    <param name="C" type="Matrix"/>
                </params>
            </method>
            <method name="transBmultAdd" type="Matrix" line="259">
                <params>
                    <param name="B" type="Matrix"/>
                    <param name="C" type="Matrix"/>
                </params>
            </method>
            <method name="transBmultAdd" type="Matrix" line="262">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="B" type="Matrix"/>
                    <param name="C" type="Matrix"/>
                </params>
                <scope line="264">
                    <declaration name="dot" type="double" line="265"/>
                </scope>
            </method>
            <javadoc line="271">
                Checks the arguments to &lt;code&gt;transBmult&lt;/code&gt; and
                  &lt;code&gt;transBmultAdd&lt;/code&gt;                
            </javadoc>
            <method name="checkTransBmultAdd" type="void" line="275">
                <params>
                    <param name="B" type="Matrix"/>
                    <param name="C" type="Matrix"/>
                </params>
            </method>
            <method name="transABmult" type="Matrix" line="280">
                <params>
                    <param name="B" type="Matrix"/>
                    <param name="C" type="Matrix"/>
                </params>
            </method>
            <method name="transABmult" type="Matrix" line="283">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="B" type="Matrix"/>
                    <param name="C" type="Matrix"/>
                </params>
            </method>
            <method name="transABmultAdd" type="Matrix" line="286">
                <params>
                    <param name="B" type="Matrix"/>
                    <param name="C" type="Matrix"/>
                </params>
            </method>
            <method name="transABmultAdd" type="Matrix" line="289">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="B" type="Matrix"/>
                    <param name="C" type="Matrix"/>
                </params>
                <scope line="291">
                    <declaration name="dot" type="double" line="292"/>
                </scope>
            </method>
            <javadoc line="298">
                Checks the arguments to &lt;code&gt;transABmultAdd&lt;/code&gt; and
                  &lt;code&gt;transABmultAdd&lt;/code&gt;                
            </javadoc>
            <method name="checkTransABmultAdd" type="void" line="302">
                <params>
                    <param name="B" type="Matrix"/>
                    <param name="C" type="Matrix"/>
                </params>
            </method>
            <method name="solve" type="Matrix" line="307">
                <params>
                    <param name="B" type="Matrix"/>
                    <param name="X" type="Matrix"/>
                </params>
            </method>
            <method name="transSolve" type="Matrix" line="310">
                <params>
                    <param name="B" type="Matrix"/>
                    <param name="X" type="Matrix"/>
                </params>
            </method>
            <javadoc line="313">
                Checks that a matrix inversion is legal for the given arguments. This is
                  for the square case, not for least-squares problems                
            </javadoc>
            <method name="checkSolve" type="void" line="317">
                <params>
                    <param name="B" type="Matrix"/>
                    <param name="X" type="Matrix"/>
                </params>
            </method>
            <method name="rank1" type="Matrix" line="323">
                <params>
                    <param name="C" type="Matrix"/>
                </params>
            </method>
            <method name="rank1" type="Matrix" line="326">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="C" type="Matrix"/>
                </params>
            </method>
            <javadoc line="331">
                Checks that a matrix rank1 update is possible for the given matrix                
            </javadoc>
            <method name="checkRank1" type="void" line="334">
                <params>
                    <param name="C" type="Matrix"/>
                </params>
            </method>
            <method name="transRank1" type="Matrix" line="338">
                <params>
                    <param name="C" type="Matrix"/>
                </params>
            </method>
            <method name="transRank1" type="Matrix" line="341">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="C" type="Matrix"/>
                </params>
            </method>
            <javadoc line="346">
                Checks that a transposed rank1 update is leagal with the given argument                
            </javadoc>
            <method name="checkTransRank1" type="void" line="349">
                <params>
                    <param name="C" type="Matrix"/>
                </params>
            </method>
            <method name="rank2" type="Matrix" line="353">
                <params>
                    <param name="B" type="Matrix"/>
                    <param name="C" type="Matrix"/>
                </params>
            </method>
            <method name="rank2" type="Matrix" line="356">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="B" type="Matrix"/>
                    <param name="C" type="Matrix"/>
                </params>
            </method>
            <javadoc line="361">
                Checks that a rank2 update is legal for the given arguments                
            </javadoc>
            <method name="checkRank2" type="void" line="364">
                <params>
                    <param name="B" type="Matrix"/>
                    <param name="C" type="Matrix"/>
                </params>
            </method>
            <method name="transRank2" type="Matrix" line="369">
                <params>
                    <param name="B" type="Matrix"/>
                    <param name="C" type="Matrix"/>
                </params>
            </method>
            <method name="transRank2" type="Matrix" line="372">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="B" type="Matrix"/>
                    <param name="C" type="Matrix"/>
                </params>
            </method>
            <javadoc line="377">
                Checks that a transposed rank2 update is leagal with the given arguments                
            </javadoc>
            <method name="checkTransRank2" type="void" line="380">
                <params>
                    <param name="B" type="Matrix"/>
                    <param name="C" type="Matrix"/>
                </params>
            </method>
            <method name="scale" type="Matrix" line="386">
                <params>
                    <param name="alpha" type="double"/>
                </params>
            </method>
            <method name="set" type="Matrix" line="392">
                <params>
                    <param name="B" type="Matrix"/>
                </params>
            </method>
            <method name="set" type="Matrix" line="395">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="B" type="Matrix"/>
                </params>
            </method>
            <method name="add" type="Matrix" line="403">
                <params>
                    <param name="B" type="Matrix"/>
                </params>
            </method>
            <method name="add" type="Matrix" line="406">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="B" type="Matrix"/>
                </params>
            </method>
            <javadoc line="411">
                Checks that the sizes of this matrix and the given conform                
            </javadoc>
            <method name="checkSize" type="void" line="414">
                <params>
                    <param name="B" type="Matrix"/>
                </params>
            </method>
            <method name="transpose" type="Matrix" line="418">
                <scope line="420">
                    <declaration name="value" type="double" line="421"/>
                </scope>
            </method>
            <javadoc line="427">
                Checks that the matrix may be transposed                
            </javadoc>
            <method name="checkTranspose" type="void" line="430"/>
            <method name="transpose" type="Matrix" line="433">
                <params>
                    <param name="B" type="Matrix"/>
                </params>
            </method>
            <javadoc line="440">
                Checks that this matrix can be transposed into the given matrix                
            </javadoc>
            <method name="checkTranspose" type="void" line="443">
                <params>
                    <param name="B" type="Matrix"/>
                </params>
            </method>
            <method name="norm" type="double" line="447">
                <params>
                    <param name="type" type="Norm"/>
                </params>
            </method>
            <javadoc line="453">
                Computes the 1 norm                
            </javadoc>
            <method name="norm1" type="double" line="456">
                <declaration name="rowSum" type="double[]" line="457"/>
            </method>
            <javadoc line="461">
                Computes the Frobenius norm. This implementation is overflow resistant                
            </javadoc>
            <method name="normF" type="double" line="464">
                <declaration name="scale" type="double" line="465"/>
                <scope line="466">
                    <declaration name="Aval" type="double" line="467"/>
                    <scope line="468">
                        <declaration name="absxi" type="double" line="469"/>
                        <scope line="470"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="479">
                Computes the infinity norm                
            </javadoc>
            <method name="normInf" type="double" line="482">
                <declaration name="columnSum" type="double[]" line="483"/>
            </method>
            <javadoc line="487">
                Returns the largest absolute value                
            </javadoc>
            <method name="max" type="double" line="490">
                <declaration name="max" type="double" line="491"/>
            </method>
            <javadoc line="495">
                Returns the largest element of the passed array                
            </javadoc>
            <method name="max" type="double" line="498">
                <params>
                    <param name="x" type="double[]"/>
                </params>
                <declaration name="max" type="double" line="499"/>
            </method>
            <method name="toString" type="String" line="503">
                <declaration name="out" type="Formatter" line="504"/>
                <declaration name="i" type="int" line="506"/>
                <scope line="507">
                    <scope line="509"/>
                </scope>
            </method>
            <method name="iterator" type="Iterator<MatrixEntry>" line="516"/>
            <class name="RefMatrixIterator" line="519">
                <implements interface="Iterator">
                    <type_params>
                        <type_param name="MatrixEntry"/>
                    </type_params>
                </implements>
                <javadoc line="519">
                    Iterator over a general matrix. Uses column-major traversal                    
                </javadoc>
                <declaration name="row" type="int" line="523"/>
                <javadoc line="523">
                    Matrix cursor                    
                </javadoc>
                <declaration name="entry" type="RefMatrixEntry" line="527"/>
                <javadoc line="527">
                    Matrix entry                    
                </javadoc>
                <method name="hasNext" type="boolean" line="531"/>
                <method name="next" type="MatrixEntry" line="534">
                    <scope line="537"/>
                </method>
                <method name="remove" type="void" line="543"/>
            </class>
            <class name="RefMatrixEntry" line="547">
                <implements interface="MatrixEntry"/>
                <javadoc line="547">
                    Matrix entry backed by the matrix. May be reused for higher performance                    
                </javadoc>
                <declaration name="row" type="int" line="551"/>
                <javadoc line="551">
                    Matrix position                    
                </javadoc>
                <javadoc line="555">
                    Updates the entry                    
                </javadoc>
                <method name="update" type="void" line="558">
                    <params>
                        <param name="row" type="int"/>
                        <param name="column" type="int"/>
                    </params>
                </method>
                <method name="row" type="int" line="562"/>
                <method name="column" type="int" line="565"/>
                <method name="get" type="double" line="568"/>
                <method name="set" type="void" line="571">
                    <params>
                        <param name="value" type="double"/>
                    </params>
                </method>
            </class>
        </class>
    </source>