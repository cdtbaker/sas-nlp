<?xml version="1.0" encoding="UTF-8"?>
    <source package="no.uib.cipr.matrix">
        <interface name="Matrix">
            <implements interface="Iterable">
                <type_params>
                    <type_param name="MatrixEntry"/>
                </type_params>
            </implements>
            <javadoc line="2">
                Basic matrix interface. It holds &lt;code&gt;double&lt;/code&gt;s in a rectangular 2D
                  array, and it is used alongside &lt;code&gt;Vector&lt;/code&gt; in numerical
                  computations. Implementing classes decides on the actual storage.
                  &lt;h4&gt;Basic operations&lt;/h4&gt;
                  &lt;p&gt;
                  Use &lt;code&gt;numRows&lt;/code&gt; and &lt;code&gt;numColumns&lt;/code&gt; to get the basic
                  size of a matrix. &lt;code&gt;get(int,int)&lt;/code&gt; gets an element, and there are
                  corresponding &lt;code&gt;set(int,int,double)&lt;/code&gt; and
                  &lt;code&gt;add(int,int,double)&lt;/code&gt; methods as well. Note that matrix indices
                  are zero-based (typical for Java and C). This means that the row-indices
                  range from 0 to &lt;code&gt;numRows-1&lt;/code&gt;, likewise for the columns. It is
                  legal to have &lt;code&gt;numRows&lt;/code&gt; or &lt;code&gt;numColumns&lt;/code&gt; equal zero.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Other basic operations are &lt;code&gt;zero&lt;/code&gt; which zeros all the entries of
                  the matrix, which can be cheaper than either zeroing the matrix manually, or
                  creating a new matrix, and the operation &lt;code&gt;copy&lt;/code&gt; which creates a
                  deep copy of the matrix. This copy has separate storage, but starts with the
                  same contents as the current matrix.
                  &lt;/p&gt;
                  &lt;h4&gt;Iterators&lt;/h4&gt;
                  &lt;p&gt;
                  The matrix interface extends &lt;code&gt;Iterable&lt;/code&gt;, and the iterator
                  returns a &lt;code&gt;MatrixEntry&lt;/code&gt; which contains current index and entry
                  value. Note that the iterator may skip non-zero entries. Using an iterator,
                  many simple and efficient algorithms can be created. The iterator also
                  permits changing values in the matrix, however only non-zero entries can be
                  changed.
                  &lt;/p&gt;
                  &lt;h4&gt;Basic linear algebra&lt;/h4&gt;
                  &lt;p&gt;
                  A large selection of basic linear algebra operations are available. To ensure
                  high efficiency, little or no internal memory allocation is done, and the
                  user is required to supply the output arguments.
                  &lt;/p&gt;
                  &lt;p&gt;
                  The operations available include:
                  &lt;/p&gt;
                  &lt;dl&gt;
                  &lt;dt&gt;&lt;i&gt;Additions &lt;/i&gt;&lt;/dt&gt;
                  &lt;dd&gt;Matrices can be added to each other, even if their underlying matrix
                  structures are different.&lt;/dd&gt;
                  &lt;dt&gt;&lt;i&gt;Multiplications &lt;/i&gt;&lt;/dt&gt;
                  &lt;dd&gt;A matrix can be multiplied with vectors and other matrices. For
                  increased efficiency, a multiplication can be combined with addition and
                  scaling, and transpose matrix multiplications are also available.&lt;/dd&gt;
                  &lt;dt&gt;&lt;i&gt;Rank-updates &lt;/i&gt;&lt;/dt&gt;
                  &lt;dd&gt;A matrix can be efficiently updated using low-rank updates. The updates
                  can be contained in both matrices or vectors.&lt;/dd&gt;
                  &lt;dt&gt;&lt;i&gt;Transpositions &lt;/i&gt;&lt;/dt&gt;
                  &lt;dd&gt;In-place transpositions of square matrices is supported, and the
                  transpose of a matrix can be stored in another matrix of compatible size
                  (possibly non-rectangular)&lt;/dd&gt;
                  &lt;dt&gt;&lt;i&gt;Solvers &lt;/i&gt;&lt;/dt&gt;
                  &lt;dd&gt;Many dense and structured sparse matrices have fast, direct solvers, and
                  can be used to solve linear systems without creating a factorization. These
                  solvers are typically backed by subroutines in LAPACK&lt;/dd&gt;
                  &lt;/dl&gt;                
            </javadoc>
            <method name="numRows" type="int" line="63"/>
            <javadoc line="63">
                Number of rows in the matrix                
            </javadoc>
            <method name="numColumns" type="int" line="67"/>
            <javadoc line="67">
                Number of columns in the matrix                
            </javadoc>
            <method name="isSquare" type="boolean" line="71"/>
            <javadoc line="71">
                Returns true if the matrix is square                
            </javadoc>
            <method name="set" type="void" line="75"/>
            <javadoc line="75">
                &lt;code&gt;A(row,column) = value&lt;/code&gt;                
            </javadoc>
            <method name="add" type="void" line="79"/>
            <javadoc line="79">
                &lt;code&gt;A(row,column) += value&lt;/code&gt;                
            </javadoc>
            <method name="get" type="double" line="83"/>
            <javadoc line="83">
                Returns &lt;code&gt;A(row,column)&lt;/code&gt;                
            </javadoc>
            <method name="copy" type="Matrix" line="87"/>
            <javadoc line="87">
                Creates a deep copy of the matrix                
                <return>
                    A                    
                </return>
            </javadoc>
            <method name="zero" type="Matrix" line="92"/>
            <javadoc line="92">
                Zeros all the entries in the matrix, while preserving any underlying
                  structure. Useful for general, unstructured matrices.                
                <return>
                    A                    
                </return>
            </javadoc>
            <method name="mult" type="Vector" line="98"/>
            <javadoc line="98">
                &lt;code&gt;y = Ax&lt;/code&gt;                
                <param>
                    xVector of size <code>A.numColumns()</code>                    
                </param>
                <param>
                    yVector of size <code>A.numRows()</code>                    
                </param>
                <return>
                    y                    
                </return>
            </javadoc>
            <method name="mult" type="Vector" line="105"/>
            <javadoc line="105">
                &lt;code&gt;y = alphaAx&lt;/code&gt;                
                <param>
                    xVector of size <code>A.numColumns()</code>                    
                </param>
                <param>
                    yVector of size <code>A.numRows()</code>                    
                </param>
                <return>
                    y                    
                </return>
            </javadoc>
            <method name="multAdd" type="Vector" line="112"/>
            <javadoc line="112">
                &lt;code&gt;y = Ax + y&lt;/code&gt;                
                <param>
                    xVector of size <code>A.numColumns()</code>                    
                </param>
                <param>
                    yVector of size <code>A.numRows()</code>                    
                </param>
                <return>
                    y                    
                </return>
            </javadoc>
            <method name="multAdd" type="Vector" line="119"/>
            <javadoc line="119">
                &lt;code&gt;y = alphaAx + y&lt;/code&gt;                
                <param>
                    xVector of size <code>A.numColumns()</code>                    
                </param>
                <param>
                    yVector of size <code>A.numRows()</code>                    
                </param>
                <return>
                    y                    
                </return>
            </javadoc>
            <method name="transMult" type="Vector" line="126"/>
            <javadoc line="126">
                &lt;code&gt;y = A&lt;sup&gt;T&lt;/sup&gt;x&lt;/code&gt;                
                <param>
                    xVector of size <code>A.numRows()</code>                    
                </param>
                <param>
                    yVector of size <code>A.numColumns()</code>                    
                </param>
                <return>
                    y                    
                </return>
            </javadoc>
            <method name="transMult" type="Vector" line="133"/>
            <javadoc line="133">
                &lt;code&gt;y = alphaA&lt;sup&gt;T&lt;/sup&gt;x&lt;/code&gt;                
                <param>
                    xVector of size <code>A.numRows()</code>                    
                </param>
                <param>
                    yVector of size <code>A.numColumns()</code>                    
                </param>
                <return>
                    y                    
                </return>
            </javadoc>
            <method name="transMultAdd" type="Vector" line="140"/>
            <javadoc line="140">
                &lt;code&gt;y = A&lt;sup&gt;T&lt;/sup&gt;x + y&lt;/code&gt;                
                <param>
                    xVector of size <code>A.numRows()</code>                    
                </param>
                <param>
                    yVector of size <code>A.numColumns()</code>                    
                </param>
                <return>
                    y                    
                </return>
            </javadoc>
            <method name="transMultAdd" type="Vector" line="147"/>
            <javadoc line="147">
                &lt;code&gt;y = alphaA&lt;sup&gt;T&lt;/sup&gt;x + y&lt;/code&gt;                
                <param>
                    xVector of size <code>A.numRows()</code>                    
                </param>
                <param>
                    yVector of size <code>A.numColumns()</code>                    
                </param>
                <return>
                    y                    
                </return>
            </javadoc>
            <method name="solve" type="Vector" line="154"/>
            <javadoc line="154">
                &lt;code&gt;x = A\b&lt;/code&gt;. Not all matrices support this operation, those
                  that do not throw &lt;code&gt;UnsupportedOperationException&lt;/code&gt;. Note
                  that it is often more efficient to use a matrix decomposition and its
                  associated solver                
                <param>
                    bVector of size <code>A.numRows()</code>                    
                </param>
                <param>
                    xVector of size <code>A.numColumns()</code>                    
                </param>
                <return>
                    x                    
                </return>
                <throws>
                    MatrixSingularExceptionIf the matrix is singular                    
                </throws>
                <throws>
                    MatrixNotSPDExceptionIf the solver assumes that the matrix is symmetrical,
                      positive definite, but that that property does not hold                    
                </throws>
            </javadoc>
            <method name="transSolve" type="Vector" line="167"/>
            <javadoc line="167">
                &lt;code&gt;x = A&lt;sup&gt;T&lt;/sup&gt;\b&lt;/code&gt;. Not all matrices support this
                  operation, those that do not throw
                  &lt;code&gt;UnsupportedOperationException&lt;/code&gt;. Note that it is often more
                  efficient to use a matrix decomposition and its associated solver                
                <param>
                    bVector of size <code>A.numColumns()</code>                    
                </param>
                <param>
                    xVector of size <code>A.numRows()</code>                    
                </param>
                <return>
                    x                    
                </return>
                <throws>
                    MatrixSingularExceptionIf the matrix is singular                    
                </throws>
                <throws>
                    MatrixNotSPDExceptionIf the solver assumes that the matrix is symmetrical,
                      positive definite, but that that property does not hold                    
                </throws>
            </javadoc>
            <method name="rank1" type="Matrix" line="180"/>
            <javadoc line="180">
                &lt;code&gt;A = xx&lt;sup&gt;T&lt;/sup&gt; + A&lt;/code&gt;. The matrix must be square, and
                  the vector of the same length                
                <return>
                    A                    
                </return>
            </javadoc>
            <method name="rank1" type="Matrix" line="186"/>
            <javadoc line="186">
                &lt;code&gt;A = alphaxx&lt;sup&gt;T&lt;/sup&gt; + A&lt;/code&gt;. The matrix must be
                  square, and the vector of the same length                
                <return>
                    A                    
                </return>
            </javadoc>
            <method name="rank1" type="Matrix" line="192"/>
            <javadoc line="192">
                &lt;code&gt;A = xy&lt;sup&gt;T&lt;/sup&gt; + A&lt;/code&gt;. The matrix must be square, and
                  the vectors of the same length                
                <return>
                    A                    
                </return>
            </javadoc>
            <method name="rank1" type="Matrix" line="198"/>
            <javadoc line="198">
                &lt;code&gt;A = alphaxy&lt;sup&gt;T&lt;/sup&gt; + A&lt;/code&gt;. The matrix must be
                  square, and the vectors of the same length                
                <return>
                    A                    
                </return>
            </javadoc>
            <method name="rank2" type="Matrix" line="204"/>
            <javadoc line="204">
                &lt;code&gt;A = xy&lt;sup&gt;T&lt;/sup&gt; + yx&lt;sup&gt;T&lt;/sup&gt; + A&lt;/code&gt;. The matrix
                  must be square, and the vectors of the same length                
                <return>
                    A                    
                </return>
            </javadoc>
            <method name="rank2" type="Matrix" line="210"/>
            <javadoc line="210">
                &lt;code&gt;A = alphaxy&lt;sup&gt;T&lt;/sup&gt; + alphayx&lt;sup&gt;T&lt;/sup&gt; + A&lt;/code&gt;.
                  The matrix must be square, and the vectors of the same length                
                <return>
                    A                    
                </return>
            </javadoc>
            <method name="mult" type="Matrix" line="216"/>
            <javadoc line="216">
                &lt;code&gt;C = AB&lt;/code&gt;                
                <param>
                    BMatrix such that <code>B.numRows() == A.numColumns()</code>
                      and <code>B.numColumns() == C.numColumns()</code>                    
                </param>
                <param>
                    CMatrix such that <code>C.numRows() == A.numRows()</code> and
                      <code>B.numColumns() == C.numColumns()</code>                    
                </param>
                <return>
                    C                    
                </return>
            </javadoc>
            <method name="mult" type="Matrix" line="225"/>
            <javadoc line="225">
                &lt;code&gt;C = alphaAB&lt;/code&gt;                
                <param>
                    BMatrix such that <code>B.numRows() == A.numColumns()</code>
                      and <code>B.numColumns() == C.numColumns()</code>                    
                </param>
                <param>
                    CMatrix such that <code>C.numRows() == A.numRows()</code> and
                      <code>B.numColumns() == C.numColumns()</code>                    
                </param>
                <return>
                    C                    
                </return>
            </javadoc>
            <method name="multAdd" type="Matrix" line="234"/>
            <javadoc line="234">
                &lt;code&gt;C = AB + C&lt;/code&gt;                
                <param>
                    BMatrix such that <code>B.numRows() == A.numColumns()</code>
                      and <code>B.numColumns() == C.numColumns()</code>                    
                </param>
                <param>
                    CMatrix such that <code>C.numRows() == A.numRows()</code> and
                      <code>B.numColumns() == C.numColumns()</code>                    
                </param>
                <return>
                    C                    
                </return>
            </javadoc>
            <method name="multAdd" type="Matrix" line="243"/>
            <javadoc line="243">
                &lt;code&gt;C = alphaAB + C&lt;/code&gt;                
                <param>
                    BMatrix such that <code>B.numRows() == A.numColumns()</code>
                      and <code>B.numColumns() == C.numColumns()</code>                    
                </param>
                <param>
                    CMatrix such that <code>C.numRows() == A.numRows()</code> and
                      <code>B.numColumns() == C.numColumns()</code>                    
                </param>
                <return>
                    C                    
                </return>
            </javadoc>
            <method name="transAmult" type="Matrix" line="252"/>
            <javadoc line="252">
                &lt;code&gt;C = A&lt;sup&gt;T&lt;/sup&gt;B&lt;/code&gt;                
                <param>
                    BMatrix such that <code>B.numRows() == A.numRows()</code> and
                      <code>B.numColumns() == C.numColumns()</code>                    
                </param>
                <param>
                    CMatrix such that <code>C.numRows() == A.numColumns()</code>
                      and <code>B.numColumns() == C.numColumns()</code>                    
                </param>
                <return>
                    C                    
                </return>
            </javadoc>
            <method name="transAmult" type="Matrix" line="261"/>
            <javadoc line="261">
                &lt;code&gt;C = alphaA&lt;sup&gt;T&lt;/sup&gt;B&lt;/code&gt;                
                <param>
                    BMatrix such that <code>B.numRows() == A.numRows()</code> and
                      <code>B.numColumns() == C.numColumns()</code>                    
                </param>
                <param>
                    CMatrix such that <code>C.numRows() == A.numColumns()</code>
                      and <code>B.numColumns() == C.numColumns()</code>                    
                </param>
                <return>
                    C                    
                </return>
            </javadoc>
            <method name="transAmultAdd" type="Matrix" line="270"/>
            <javadoc line="270">
                &lt;code&gt;C = A&lt;sup&gt;T&lt;/sup&gt;B + C&lt;/code&gt;                
                <param>
                    BMatrix such that <code>B.numRows() == A.numRows()</code> and
                      <code>B.numColumns() == C.numColumns()</code>                    
                </param>
                <param>
                    CMatrix such that <code>C.numRows() == A.numColumns()</code>
                      and <code>B.numColumns() == C.numColumns()</code>                    
                </param>
                <return>
                    C                    
                </return>
            </javadoc>
            <method name="transAmultAdd" type="Matrix" line="279"/>
            <javadoc line="279">
                &lt;code&gt;C = alphaA&lt;sup&gt;T&lt;/sup&gt;B + C&lt;/code&gt;                
                <param>
                    BMatrix such that <code>B.numRows() == A.numRows()</code> and
                      <code>B.numColumns() == C.numColumns()</code>                    
                </param>
                <param>
                    CMatrix such that <code>C.numRows() == A.numColumns()</code>
                      and <code>B.numColumns() == C.numColumns()</code>                    
                </param>
                <return>
                    C                    
                </return>
            </javadoc>
            <method name="transBmult" type="Matrix" line="288"/>
            <javadoc line="288">
                &lt;code&gt;C = AB&lt;sup&gt;T&lt;/sup&gt;&lt;/code&gt;                
                <param>
                    BMatrix such that <code>B.numRows() == A.numRows()</code> and
                      <code>B.numColumns() == C.numColumns()</code>                    
                </param>
                <param>
                    CMatrix such that <code>C.numRows() == A.numColumns()</code>
                      and <code>B.numColumns() == C.numColumns()</code>                    
                </param>
                <return>
                    C                    
                </return>
            </javadoc>
            <method name="transBmult" type="Matrix" line="297"/>
            <javadoc line="297">
                &lt;code&gt;C = alphaAB&lt;sup&gt;T&lt;/sup&gt;&lt;/code&gt;                
                <param>
                    BMatrix such that <code>B.numRows() == A.numRows()</code> and
                      <code>B.numColumns() == C.numColumns()</code>                    
                </param>
                <param>
                    CMatrix such that <code>C.numRows() == A.numColumns()</code>
                      and <code>B.numColumns() == C.numColumns()</code>                    
                </param>
                <return>
                    C                    
                </return>
            </javadoc>
            <method name="transBmultAdd" type="Matrix" line="306"/>
            <javadoc line="306">
                &lt;code&gt;C = AB&lt;sup&gt;T&lt;/sup&gt; + C&lt;/code&gt;                
                <param>
                    BMatrix such that <code>B.numRows() == A.numRows()</code> and
                      <code>B.numColumns() == C.numColumns()</code>                    
                </param>
                <param>
                    CMatrix such that <code>C.numRows() == A.numColumns()</code>
                      and <code>B.numColumns() == C.numColumns()</code>                    
                </param>
                <return>
                    C                    
                </return>
            </javadoc>
            <method name="transBmultAdd" type="Matrix" line="315"/>
            <javadoc line="315">
                &lt;code&gt;C = alphaAB&lt;sup&gt;T&lt;/sup&gt; + C&lt;/code&gt;                
                <param>
                    BMatrix such that <code>B.numRows() == A.numRows()</code> and
                      <code>B.numColumns() == C.numColumns()</code>                    
                </param>
                <param>
                    CMatrix such that <code>C.numRows() == A.numColumns()</code>
                      and <code>B.numColumns() == C.numColumns()</code>                    
                </param>
                <return>
                    C                    
                </return>
            </javadoc>
            <method name="transABmult" type="Matrix" line="324"/>
            <javadoc line="324">
                &lt;code&gt;C = A&lt;sup&gt;T&lt;/sup&gt;B&lt;sup&gt;T&lt;/sup&gt;&lt;/code&gt;                
                <param>
                    BMatrix such that <code>B.numColumns() == A.numRows()</code>
                      and <code>B.numRows() == C.numColumns()</code>                    
                </param>
                <param>
                    CMatrix such that <code>C.numRows() == A.numColumns()</code>
                      and <code>B.numRows() == C.numColumns()</code>                    
                </param>
                <return>
                    C                    
                </return>
            </javadoc>
            <method name="transABmult" type="Matrix" line="333"/>
            <javadoc line="333">
                &lt;code&gt;C = alphaA&lt;sup&gt;T&lt;/sup&gt;B&lt;sup&gt;T&lt;/sup&gt;&lt;/code&gt;                
                <param>
                    BMatrix such that <code>B.numColumns() == A.numRows()</code>
                      and <code>B.numRows() == C.numColumns()</code>                    
                </param>
                <param>
                    CMatrix such that <code>C.numRows() == A.numColumns()</code>
                      and <code>B.numRows() == C.numColumns()</code>                    
                </param>
                <return>
                    C                    
                </return>
            </javadoc>
            <method name="transABmultAdd" type="Matrix" line="342"/>
            <javadoc line="342">
                &lt;code&gt;C = A&lt;sup&gt;T&lt;/sup&gt;B&lt;sup&gt;T&lt;/sup&gt; + C&lt;/code&gt;                
                <param>
                    BMatrix such that <code>B.numColumns() == A.numRows()</code>
                      and <code>B.numRows() == C.numColumns()</code>                    
                </param>
                <param>
                    CMatrix such that <code>C.numRows() == A.numColumns()</code>
                      and <code>B.numRows() == C.numColumns()</code>                    
                </param>
                <return>
                    C                    
                </return>
            </javadoc>
            <method name="transABmultAdd" type="Matrix" line="351"/>
            <javadoc line="351">
                &lt;code&gt;C = alphaA&lt;sup&gt;T&lt;/sup&gt;B&lt;sup&gt;T&lt;/sup&gt; + C&lt;/code&gt;                
                <param>
                    BMatrix such that <code>B.numColumns() == A.numRows()</code>
                      and <code>B.numRows() == C.numColumns()</code>                    
                </param>
                <param>
                    CMatrix such that <code>C.numRows() == A.numColumns()</code>
                      and <code>B.numRows() == C.numColumns()</code>                    
                </param>
                <return>
                    C                    
                </return>
            </javadoc>
            <method name="solve" type="Matrix" line="360"/>
            <javadoc line="360">
                &lt;code&gt;X = A\B&lt;/code&gt;. Not all matrices support this operation, those
                  that do not throw &lt;code&gt;UnsupportedOperationException&lt;/code&gt;. Note
                  that it is often more efficient to use a matrix decomposition and its
                  associated solver                
                <param>
                    BMatrix with the same number of rows as <code>A</code>, and
                      the same number of columns as <code>X</code>                    
                </param>
                <param>
                    XMatrix with a number of rows equal <code>A.numColumns()</code>,
                      and the same number of columns as <code>B</code>                    
                </param>
                <return>
                    X                    
                </return>
                <throws>
                    MatrixSingularExceptionIf the matrix is singular                    
                </throws>
                <throws>
                    MatrixNotSPDExceptionIf the solver assumes that the matrix is symmetrical,
                      positive definite, but that that property does not hold                    
                </throws>
            </javadoc>
            <method name="transSolve" type="Matrix" line="375"/>
            <javadoc line="375">
                &lt;code&gt;X = A&lt;sup&gt;T&lt;/sup&gt;\B&lt;/code&gt;. Not all matrices support this
                  operation, those that do not throw
                  &lt;code&gt;UnsupportedOperationException&lt;/code&gt;. Note that it is often more
                  efficient to use a matrix decomposition and its associated transpose
                  solver                
                <param>
                    BMatrix with a number of rows equal <code>A.numColumns()</code>,
                      and the same number of columns as <code>X</code>                    
                </param>
                <param>
                    XMatrix with the same number of rows as <code>A</code>, and
                      the same number of columns as <code>B</code>                    
                </param>
                <return>
                    X                    
                </return>
                <throws>
                    MatrixSingularExceptionIf the matrix is singular                    
                </throws>
                <throws>
                    MatrixNotSPDExceptionIf the solver assumes that the matrix is symmetrical,
                      positive definite, but that that property does not hold                    
                </throws>
            </javadoc>
            <method name="rank1" type="Matrix" line="391"/>
            <javadoc line="391">
                &lt;code&gt;A = CC&lt;sup&gt;T&lt;/sup&gt; + A&lt;/code&gt;. The matrices must be square
                  and of the same size                
                <return>
                    A                    
                </return>
            </javadoc>
            <method name="rank1" type="Matrix" line="397"/>
            <javadoc line="397">
                &lt;code&gt;A = alphaCC&lt;sup&gt;T&lt;/sup&gt; + A&lt;/code&gt;. The matrices must be
                  square and of the same size                
                <return>
                    A                    
                </return>
            </javadoc>
            <method name="transRank1" type="Matrix" line="403"/>
            <javadoc line="403">
                &lt;code&gt;A = C&lt;sup&gt;T&lt;/sup&gt;C + A&lt;/code&gt; The matrices must be square and
                  of the same size                
                <return>
                    A                    
                </return>
            </javadoc>
            <method name="transRank1" type="Matrix" line="409"/>
            <javadoc line="409">
                &lt;code&gt;A = alphaC&lt;sup&gt;T&lt;/sup&gt;C + A&lt;/code&gt; The matrices must be
                  square and of the same size                
                <return>
                    A                    
                </return>
            </javadoc>
            <method name="rank2" type="Matrix" line="415"/>
            <javadoc line="415">
                &lt;code&gt;A = BC&lt;sup&gt;T&lt;/sup&gt; + CB&lt;sup&gt;T&lt;/sup&gt; + A&lt;/code&gt;. This
                  matrix must be square                
                <param>
                    BMatrix with the same number of rows as <code>A</code> and
                      the same number of columns as <code>C</code>                    
                </param>
                <param>
                    CMatrix with the same number of rows as <code>A</code> and
                      the same number of columns as <code>B</code>                    
                </param>
                <return>
                    A                    
                </return>
            </javadoc>
            <method name="rank2" type="Matrix" line="425"/>
            <javadoc line="425">
                &lt;code&gt;A = alphaBC&lt;sup&gt;T&lt;/sup&gt; + alphaCB&lt;sup&gt;T&lt;/sup&gt; + A&lt;/code&gt;.
                  This matrix must be square                
                <param>
                    BMatrix with the same number of rows as <code>A</code> and
                      the same number of columns as <code>C</code>                    
                </param>
                <param>
                    CMatrix with the same number of rows as <code>A</code> and
                      the same number of columns as <code>B</code>                    
                </param>
                <return>
                    A                    
                </return>
            </javadoc>
            <method name="transRank2" type="Matrix" line="435"/>
            <javadoc line="435">
                &lt;code&gt;A = B&lt;sup&gt;T&lt;/sup&gt;C + C&lt;sup&gt;T&lt;/sup&gt;B + A&lt;/code&gt;. This
                  matrix must be square                
                <param>
                    BMatrix with the same number of rows as <code>C</code> and
                      the same number of columns as <code>A</code>                    
                </param>
                <param>
                    CMatrix with the same number of rows as <code>B</code> and
                      the same number of columns as <code>A</code>                    
                </param>
                <return>
                    A                    
                </return>
            </javadoc>
            <method name="transRank2" type="Matrix" line="445"/>
            <javadoc line="445">
                &lt;code&gt;A = alphaB&lt;sup&gt;T&lt;/sup&gt;C + alphaC&lt;sup&gt;T&lt;/sup&gt;B + A&lt;/code&gt;.
                  This matrix must be square                
                <param>
                    BMatrix with the same number of rows as <code>C</code> and
                      the same number of columns as <code>A</code>                    
                </param>
                <param>
                    CMatrix with the same number of rows as <code>B</code> and
                      the same number of columns as <code>A</code>                    
                </param>
                <return>
                    A                    
                </return>
            </javadoc>
            <method name="scale" type="Matrix" line="455"/>
            <javadoc line="455">
                &lt;code&gt;A = alphaA&lt;/code&gt;                
                <return>
                    A                    
                </return>
            </javadoc>
            <method name="set" type="Matrix" line="460"/>
            <javadoc line="460">
                &lt;code&gt;A=B&lt;/code&gt;. The matrices must be of the same size                
                <return>
                    A                    
                </return>
            </javadoc>
            <method name="set" type="Matrix" line="465"/>
            <javadoc line="465">
                &lt;code&gt;A=alphaB&lt;/code&gt;. The matrices must be of the same size                
                <return>
                    A                    
                </return>
            </javadoc>
            <method name="add" type="Matrix" line="470"/>
            <javadoc line="470">
                &lt;code&gt;A = B + A&lt;/code&gt;. The matrices must be of the same size                
                <return>
                    A                    
                </return>
            </javadoc>
            <method name="add" type="Matrix" line="475"/>
            <javadoc line="475">
                &lt;code&gt;A = alphaB + A&lt;/code&gt;. The matrices must be of the same size                
                <return>
                    A                    
                </return>
            </javadoc>
            <method name="transpose" type="Matrix" line="480"/>
            <javadoc line="480">
                Transposes the matrix in-place. In most cases, the matrix must be square
                  for this to work.                
                <return>
                    This matrix                    
                </return>
            </javadoc>
            <method name="transpose" type="Matrix" line="486"/>
            <javadoc line="486">
                Sets the tranpose of this matrix into &lt;code&gt;B&lt;/code&gt;. Matrix
                  dimensions must be compatible                
                <param>
                    BMatrix with as many rows as this matrix has columns, and as
                      many columns as this matrix has rows                    
                </param>
                <return>
                    The matrix <code>B=A<sup>T</sup></code>                    
                </return>
            </javadoc>
            <method name="norm" type="double" line="494"/>
            <javadoc line="494">
                Computes the given norm of the matrix                
                <param>
                    typeThe type of norm to compute                    
                </param>
            </javadoc>
            <declaration name="Norm" type="enum" line="499"/>
            <javadoc line="499">
                Supported matrix-norms. Note that &lt;code&gt;Maxvalue&lt;/code&gt; is not a proper
                  matrix norm                
            </javadoc>
            <scope line="503"/>
            <javadoc line="515">
                @return the String as required by the netlib libraries to represent this norm.                
            </javadoc>
            <method name="netlib" type="String" line="518"/>
        </interface>
    </source>