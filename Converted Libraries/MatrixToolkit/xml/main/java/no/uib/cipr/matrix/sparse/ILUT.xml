<?xml version="1.0" encoding="UTF-8"?>
    <source package="no.uib.cipr.matrix.sparse">
        <import package="java.util.ArrayList"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.Collections"/>
        <import package="java.util.List"/>
        <import package="no.uib.cipr.matrix.AbstractMatrix"/>
        <import package="no.uib.cipr.matrix.DenseVector"/>
        <import package="no.uib.cipr.matrix.Matrix"/>
        <import package="no.uib.cipr.matrix.Vector"/>
        <import package="no.uib.cipr.matrix.VectorEntry"/>
        <class name="ILUT" line="11">
            <implements interface="Preconditioner"/>
            <javadoc line="11">
                ILU preconditioner with fill-in. Uses the dual threshold approach of Saad.                
            </javadoc>
            <declaration name="LU" type="FlexCompRowMatrix" line="15"/>
            <javadoc line="15">
                Factorisation matrix                
            </javadoc>
            <declaration name="L" type="Matrix" line="19"/>
            <javadoc line="19">
                The L and U factors                
            </javadoc>
            <declaration name="y" type="Vector" line="23"/>
            <javadoc line="23">
                Temporary vector for solving the factorised system                
            </javadoc>
            <declaration name="tau" type="double" line="27"/>
            <javadoc line="27">
                Drop-tolerance                
            </javadoc>
            <declaration name="diagind" type="int[]" line="31"/>
            <javadoc line="31">
                Diagonal indices                
            </javadoc>
            <declaration name="lower" type="List&lt;IntDoubleEntry&gt;" line="35"/>
            <javadoc line="35">
                Stores entries in the lower and upper part of the matrix. Used by the
                  dropping rule to determine the largest entries in the two parts of the
                  matrix                
            </javadoc>
            <declaration name="p" type="int" line="41"/>
            <javadoc line="41">
                Number of additional entries to keep in the lower and upper part of the
                  factored matrix. The entries of the original matrix are always kept,
                  unless they numerically too small                
            </javadoc>
            <javadoc line="47">
                Sets up the preconditioner for the given matrix                
                <param>
                    LUMatrix to use internally. For best performance, its non-zero
                      pattern should conform to that of the system matrix                    
                </param>
                <param>
                    tauDrop tolerance                    
                </param>
                <param>
                    pNumber of entries to keep on each row in of the factored
                      matrix. This is in addition to the entries of the original
                      matrix                    
                </param>
            </javadoc>
            <method name="ILUT" type="constructor" line="56">
                <params>
                    <param name="LU" type="FlexCompRowMatrix"/>
                    <param name="tau" type="double"/>
                    <param name="p" type="int"/>
                </params>
                <declaration name="n" type="int" line="61"/>
            </method>
            <javadoc line="67">
                Sets up the preconditioner for the given matrix. Uses a drop-tolerance of
                  10&lt;sup&gt;-6&lt;/sup&gt;, and keeps 50 entries on each row, including the main
                  diagonal and any previous entries in the matrix structure                
                <param>
                    LUMatrix to use internally. For best performance, its non-zero
                      pattern should conform to that of the system matrix                    
                </param>
            </javadoc>
            <method name="ILUT" type="constructor" line="74">
                <params>
                    <param name="LU" type="FlexCompRowMatrix"/>
                </params>
            </method>
            <method name="apply" type="Vector" line="77">
                <params>
                    <param name="b" type="Vector"/>
                    <param name="x" type="Vector"/>
                </params>
            </method>
            <method name="transApply" type="Vector" line="81">
                <params>
                    <param name="b" type="Vector"/>
                    <param name="x" type="Vector"/>
                </params>
            </method>
            <method name="setMatrix" type="void" line="85">
                <params>
                    <param name="A" type="Matrix"/>
                </params>
            </method>
            <method name="factor" type="void" line="90">
                <declaration name="n" type="int" line="91"/>
                <declaration name="LUi" type="double[]" line="92"/>
                <scope line="93">
                    <declaration name="row" type="SparseVector" line="94"/>
                </scope>
                <scope line="98">
                    <declaration name="rowi" type="SparseVector" line="99"/>
                    <declaration name="taui" type="double" line="100"/>
                    <scope line="102">
                        <declaration name="rowk" type="SparseVector" line="103"/>
                        <declaration name="rowIndex" type="int[]" line="104"/>
                        <declaration name="rowUsed" type="int" line="105"/>
                        <declaration name="rowData" type="double[]" line="106"/>
                        <declaration name="LUik" type="double" line="108"/>
                    </scope>
                    <scope line="114"/>
                </scope>
            </method>
            <method name="findDiagonalIndex" type="int" line="122">
                <params>
                    <param name="v" type="SparseVector"/>
                    <param name="k" type="int"/>
                </params>
            </method>
            <javadoc line="125">
                Copies the sparse vector into a dense array                
            </javadoc>
            <method name="scatter" type="void" line="128">
                <params>
                    <param name="v" type="SparseVector"/>
                    <param name="z" type="double[]"/>
                </params>
                <declaration name="index" type="int[]" line="129"/>
                <declaration name="used" type="int" line="130"/>
                <declaration name="data" type="double[]" line="131"/>
            </method>
            <javadoc line="135">
                Copies the dense array back into the sparse vector, applying a numerical
                  dropping rule and keeping only a given number of entries                
            </javadoc>
            <method name="gather" type="void" line="139">
                <params>
                    <param name="z" type="double[]"/>
                    <param name="v" type="SparseVector"/>
                    <param name="taui" type="double"/>
                    <param name="d" type="int"/>
                </params>
                <declaration name="nl" type="int" line="140"/>
                <scope line="141"/>
                <scope line="153">
                    <declaration name="e" type="IntDoubleEntry" line="154"/>
                </scope>
                <scope line="157">
                    <declaration name="e" type="IntDoubleEntry" line="158"/>
                </scope>
            </method>
            <class name="IntDoubleEntry" line="162">
                <implements interface="Comparable">
                    <type_params>
                        <type_param name="IntDoubleEntry"/>
                    </type_params>
                </implements>
                <javadoc line="162">
                    Stores an integer/value pair, sorted by descending order according to the
                      value                    
                </javadoc>
                <declaration name="index" type="int" line="167"/>
                <declaration name="value" type="double" line="168"/>
                <method name="IntDoubleEntry" type="constructor" line="169">
                    <params>
                        <param name="index" type="int"/>
                        <param name="value" type="double"/>
                    </params>
                </method>
                <method name="compareTo" type="int" line="173">
                    <params>
                        <param name="o" type="IntDoubleEntry"/>
                    </params>
                </method>
                <method name="toString" type="String" line="178"/>
            </class>
            <class name="UnitLowerFlexCompRowMatrix" line="182">
                <extends class="AbstractMatrix"/>
                <javadoc line="182">
                    Unit lower triangular flex-CRS matrix. Only used for triangular solves                    
                </javadoc>
                <declaration name="LU" type="FlexCompRowMatrix" line="186"/>
                <declaration name="diagind" type="int[]" line="187"/>
                <method name="UnitLowerFlexCompRowMatrix" type="constructor" line="188">
                    <params>
                        <param name="LU" type="FlexCompRowMatrix"/>
                        <param name="diagind" type="int[]"/>
                    </params>
                </method>
                <method name="solve" type="Vector" line="193">
                    <params>
                        <param name="b" type="Vector"/>
                        <param name="x" type="Vector"/>
                    </params>
                    <declaration name="bd" type="double[]" line="195"/>
                    <declaration name="xd" type="double[]" line="196"/>
                    <scope line="197">
                        <declaration name="row" type="SparseVector" line="198"/>
                        <declaration name="index" type="int[]" line="199"/>
                        <declaration name="data" type="double[]" line="200"/>
                        <declaration name="sum" type="double" line="201"/>
                    </scope>
                </method>
                <method name="transSolve" type="Vector" line="207">
                    <params>
                        <param name="b" type="Vector"/>
                        <param name="x" type="Vector"/>
                    </params>
                    <declaration name="xd" type="double[]" line="210"/>
                    <scope line="211">
                        <declaration name="row" type="SparseVector" line="212"/>
                        <declaration name="index" type="int[]" line="213"/>
                        <declaration name="data" type="double[]" line="214"/>
                    </scope>
                </method>
            </class>
            <class name="UpperFlexCompRowMatrix" line="220">
                <extends class="AbstractMatrix"/>
                <javadoc line="220">
                    Upper triangular flex-CRS matrix. Only used for triangular solves                    
                </javadoc>
                <declaration name="LU" type="FlexCompRowMatrix" line="224"/>
                <declaration name="diagind" type="int[]" line="225"/>
                <method name="UpperFlexCompRowMatrix" type="constructor" line="226">
                    <params>
                        <param name="LU" type="FlexCompRowMatrix"/>
                        <param name="diagind" type="int[]"/>
                    </params>
                </method>
                <method name="solve" type="Vector" line="231">
                    <params>
                        <param name="b" type="Vector"/>
                        <param name="x" type="Vector"/>
                    </params>
                    <declaration name="bd" type="double[]" line="233"/>
                    <declaration name="xd" type="double[]" line="234"/>
                    <scope line="235">
                        <declaration name="row" type="SparseVector" line="236"/>
                        <declaration name="index" type="int[]" line="237"/>
                        <declaration name="used" type="int" line="238"/>
                        <declaration name="data" type="double[]" line="239"/>
                        <declaration name="sum" type="double" line="240"/>
                    </scope>
                </method>
                <method name="transSolve" type="Vector" line="246">
                    <params>
                        <param name="b" type="Vector"/>
                        <param name="x" type="Vector"/>
                    </params>
                    <declaration name="xd" type="double[]" line="249"/>
                    <scope line="250">
                        <declaration name="row" type="SparseVector" line="251"/>
                        <declaration name="index" type="int[]" line="252"/>
                        <declaration name="used" type="int" line="253"/>
                        <declaration name="data" type="double[]" line="254"/>
                    </scope>
                </method>
            </class>
        </class>
    </source>