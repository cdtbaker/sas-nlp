<?xml version="1.0" encoding="UTF-8"?>
    <source package="no.uib.cipr.matrix.sparse">
        <import package="no.uib.cipr.matrix.DenseVector"/>
        <import package="no.uib.cipr.matrix.Matrix"/>
        <import package="no.uib.cipr.matrix.Vector"/>
        <class name="SSOR" line="5">
            <implements interface="Preconditioner"/>
            <javadoc line="5">
                SSOR preconditioner. Uses symmetrical sucessive overrelaxation as a
                  preconditioner. Meant for symmetrical, positive definite matrices. For best
                  performance, omega must be carefully chosen (between 0 and 2).                
            </javadoc>
            <declaration name="omegaF" type="double" line="11"/>
            <javadoc line="11">
                Overrelaxation parameter for the forward sweep                
            </javadoc>
            <declaration name="omegaR" type="double" line="15"/>
            <javadoc line="15">
                Overrelaxation parameter for the backwards sweep                
            </javadoc>
            <declaration name="F" type="CompRowMatrix" line="19"/>
            <javadoc line="19">
                Holds a copy of the matrix A in the compressed row format                
            </javadoc>
            <declaration name="diagind" type="int[]" line="23"/>
            <javadoc line="23">
                Indices to the diagonal entries of the matrix                
            </javadoc>
            <declaration name="xx" type="double[]" line="27"/>
            <javadoc line="27">
                Temporary vector for holding the half-step state                
            </javadoc>
            <declaration name="reverse" type="boolean" line="31"/>
            <javadoc line="31">
                True if the reverse (backward) sweep is to be done. Without this, the
                  method is SOR instead of SSOR                
            </javadoc>
            <javadoc line="36">
                Constructor for SSOR                
                <param>
                    FMatrix to use internally. It will not be modified, thus the
                      system matrix may be passed                    
                </param>
                <param>
                    reverseTrue to perform a reverse sweep as well as the forward sweep.
                      If false, this preconditioner becomes the SOR method instead                    
                </param>
                <param>
                    omegaFOverrelaxation parameter for the forward sweep. Between 0 and
                      2.                    
                </param>
                <param>
                    omegaROverrelaxation parameter for the backwards sweep. Between 0
                      and 2.                    
                </param>
            </javadoc>
            <method name="SSOR" type="constructor" line="47">
                <params>
                    <param name="F" type="CompRowMatrix"/>
                    <param name="reverse" type="boolean"/>
                    <param name="omegaF" type="double"/>
                    <param name="omegaR" type="double"/>
                </params>
                <declaration name="n" type="int" line="52"/>
            </method>
            <javadoc line="56">
                Constructor for SSOR. Uses &lt;code&gt;omega=1&lt;/code&gt; with a backwards sweep                
                <param>
                    FMatrix to use internally. It will not be modified, thus the
                      system matrix may be passed                    
                </param>
            </javadoc>
            <method name="SSOR" type="constructor" line="61">
                <params>
                    <param name="F" type="CompRowMatrix"/>
                </params>
            </method>
            <javadoc line="64">
                Sets the overrelaxation parameters                
                <param>
                    omegaFOverrelaxation parameter for the forward sweep. Between 0 and
                      2.                    
                </param>
                <param>
                    omegaROverrelaxation parameter for the backwards sweep. Between 0
                      and 2.                    
                </param>
            </javadoc>
            <method name="setOmega" type="void" line="71">
                <params>
                    <param name="omegaF" type="double"/>
                    <param name="omegaR" type="double"/>
                </params>
            </method>
            <method name="setMatrix" type="void" line="77">
                <params>
                    <param name="A" type="Matrix"/>
                </params>
                <declaration name="n" type="int" line="79"/>
                <declaration name="rowptr" type="int[]" line="80"/>
                <declaration name="colind" type="int[]" line="81"/>
                <scope line="82"/>
            </method>
            <method name="apply" type="Vector" line="87">
                <params>
                    <param name="b" type="Vector"/>
                    <param name="x" type="Vector"/>
                </params>
                <declaration name="rowptr" type="int[]" line="89"/>
                <declaration name="colind" type="int[]" line="90"/>
                <declaration name="data" type="double[]" line="91"/>
                <declaration name="bd" type="double[]" line="92"/>
                <declaration name="xd" type="double[]" line="93"/>
                <declaration name="n" type="int" line="94"/>
                <scope line="96">
                    <declaration name="sigma" type="double" line="97"/>
                </scope>
                <scope line="103"/>
                <scope line="107">
                    <declaration name="sigma" type="double" line="108"/>
                </scope>
            </method>
            <method name="transApply" type="Vector" line="116">
                <params>
                    <param name="b" type="Vector"/>
                    <param name="x" type="Vector"/>
                </params>
            </method>
        </class>
    </source>