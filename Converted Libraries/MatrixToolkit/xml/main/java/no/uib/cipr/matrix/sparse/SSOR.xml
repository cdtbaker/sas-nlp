<?xml version="1.0" encoding="UTF-8"?>
    <source package="no.uib.cipr.matrix.sparse">
        <import package="no.uib.cipr.matrix.DenseVector"/>
        <import package="no.uib.cipr.matrix.Matrix"/>
        <import package="no.uib.cipr.matrix.Vector"/>
        <class name="SSOR" line="27">
            <implements interface="Preconditioner"/>
            <javadoc line="27">
                SSOR preconditioner. Uses symmetrical sucessive overrelaxation as a
                  preconditioner. Meant for symmetrical, positive definite matrices. For best
                  performance, omega must be carefully chosen (between 0 and 2).                
            </javadoc>
            <declaration name="omegaF" type="double" line="34"/>
            <javadoc line="34">
                Overrelaxation parameter for the forward sweep                
            </javadoc>
            <declaration name="omegaR" type="double" line="39"/>
            <javadoc line="39">
                Overrelaxation parameter for the backwards sweep                
            </javadoc>
            <declaration name="F" type="CompRowMatrix" line="44"/>
            <javadoc line="44">
                Holds a copy of the matrix A in the compressed row format                
            </javadoc>
            <declaration name="diagind" type="int[]" line="49"/>
            <javadoc line="49">
                Indices to the diagonal entries of the matrix                
            </javadoc>
            <declaration name="xx" type="double[]" line="54"/>
            <javadoc line="54">
                Temporary vector for holding the half-step state                
            </javadoc>
            <declaration name="reverse" type="boolean" line="59"/>
            <javadoc line="59">
                True if the reverse (backward) sweep is to be done. Without this, the
                  method is SOR instead of SSOR                
            </javadoc>
            <javadoc line="65">
                Constructor for SSOR                
                <param>
                    FMatrix to use internally. It will not be modified, thus the
                      system matrix may be passed                    
                </param>
                <param>
                    reverseTrue to perform a reverse sweep as well as the forward sweep.
                      If false, this preconditioner becomes the SOR method instead                    
                </param>
                <param>
                    omegaFOverrelaxation parameter for the forward sweep. Between 0 and
                      2.                    
                </param>
                <param>
                    omegaROverrelaxation parameter for the backwards sweep. Between 0
                      and 2.                    
                </param>
            </javadoc>
            <method name="SSOR" type="constructor" line="81">
                <params>
                    <param name="F" type="CompRowMatrix"/>
                    <param name="reverse" type="boolean"/>
                    <param name="omegaF" type="double"/>
                    <param name="omegaR" type="double"/>
                </params>
                <declaration name="n" type="int" line="90"/>
            </method>
            <javadoc line="95">
                Constructor for SSOR. Uses &lt;code&gt;omega=1&lt;/code&gt; with a backwards sweep                
                <param>
                    FMatrix to use internally. It will not be modified, thus the
                      system matrix may be passed                    
                </param>
            </javadoc>
            <method name="SSOR" type="constructor" line="102">
                <params>
                    <param name="F" type="CompRowMatrix"/>
                </params>
            </method>
            <javadoc line="106">
                Sets the overrelaxation parameters                
                <param>
                    omegaFOverrelaxation parameter for the forward sweep. Between 0 and
                      2.                    
                </param>
                <param>
                    omegaROverrelaxation parameter for the backwards sweep. Between 0
                      and 2.                    
                </param>
            </javadoc>
            <method name="setOmega" type="void" line="116">
                <params>
                    <param name="omegaF" type="double"/>
                    <param name="omegaR" type="double"/>
                </params>
            </method>
            <method name="setMatrix" type="void" line="126">
                <params>
                    <param name="A" type="Matrix"/>
                </params>
                <comment line="135">
                    Find the indices to the diagonal entries                    
                </comment>
                <declaration name="n" type="int" line="129"/>
                <declaration name="rowptr" type="int[]" line="131"/>
                <declaration name="colind" type="int[]" line="132"/>
                <scope line="135"/>
            </method>
            <method name="apply" type="Vector" line="143">
                <params>
                    <param name="b" type="Vector"/>
                    <param name="x" type="Vector"/>
                </params>
                <comment line="158">
                    Forward sweep (xd oldest, xx halfiterate)                    
                </comment>
                <comment line="173">
                    Stop here if the reverse sweep was not requested                    
                </comment>
                <comment line="179">
                    Backward sweep (xx oldest, xd halfiterate)                    
                </comment>
                <declaration name="rowptr" type="int[]" line="147"/>
                <declaration name="colind" type="int[]" line="148"/>
                <declaration name="data" type="double[]" line="149"/>
                <declaration name="bd" type="double[]" line="151"/>
                <declaration name="xd" type="double[]" line="152"/>
                <declaration name="n" type="int" line="154"/>
                <scope line="158">
                    <declaration name="sigma" type="double" line="160"/>
                </scope>
                <scope line="173"/>
                <scope line="179">
                    <declaration name="sigma" type="double" line="181"/>
                </scope>
            </method>
            <method name="transApply" type="Vector" line="196">
                <params>
                    <param name="b" type="Vector"/>
                    <param name="x" type="Vector"/>
                </params>
                <comment line="198">
                    Assume a symmetric matrix                    
                </comment>
            </method>
        </class>
    </source>