<?xml version="1.0" encoding="UTF-8"?>
    <source package="no.uib.cipr.matrix.io">
        <import package="java.io.BufferedReader"/>
        <import package="java.io.EOFException"/>
        <import package="java.io.IOException"/>
        <import package="java.io.Reader"/>
        <import package="java.io.StreamTokenizer"/>
        <import package="java.util.LinkedList"/>
        <import package="java.util.List"/>
        <class name="MatrixVectorReader" line="9">
            <extends class="BufferedReader"/>
            <javadoc line="9">
                Reads matrices and vectors                
            </javadoc>
            <declaration name="st" type="StreamTokenizer" line="13"/>
            <javadoc line="13">
                Reads the entries of the matrix or vector                
            </javadoc>
            <javadoc line="17">
                Constructor for MatrixVectorReader                
                <param>
                    inA Reader                    
                </param>
            </javadoc>
            <method name="MatrixVectorReader" type="constructor" line="21">
                <params>
                    <param name="in" type="Reader"/>
                </params>
            </method>
            <javadoc line="25">
                Constructor for MatrixVectorReader                
                <param>
                    inA Reader                    
                </param>
                <param>
                    szInput buffer size                    
                </param>
            </javadoc>
            <method name="MatrixVectorReader" type="constructor" line="30">
                <params>
                    <param name="in" type="Reader"/>
                    <param name="sz" type="int"/>
                </params>
            </method>
            <javadoc line="34">
                Sets up the stream tokenizer                
            </javadoc>
            <method name="setup" type="void" line="37"/>
            <javadoc line="49">
                Shifts the indices. Useful for converting between 0- and 1-based
                  indicing.                
                <param>
                    numAdded to every index                    
                </param>
                <param>
                    indicesIndices to shift                    
                </param>
            </javadoc>
            <method name="add" type="void" line="55">
                <params>
                    <param name="num" type="int"/>
                    <param name="indices" type="int[]"/>
                </params>
            </method>
            <javadoc line="58">
                Reads a line, and trims it of surrounding whitespace                
                <throws>
                    IOExceptionIf either I/O errors occur, or there was nothing to read                    
                </throws>
            </javadoc>
            <method name="readTrimmedLine" type="String" line="62">
                <declaration name="line" type="String" line="63"/>
            </method>
            <javadoc line="67">
                Reads the matrix info for the Matrix Market exchange format. The line
                  must consist of exactly 5 space-separated entries, the first being
                  &quot;%%MatrixMarket&quot;                
            </javadoc>
            <method name="readMatrixInfo" type="MatrixInfo" line="72">
                <declaration name="component" type="String[]" line="73"/>
                <declaration name="sparse" type="boolean" line="77"/>
                <declaration name="field" type="MatrixInfo.MatrixField" line="81"/>
                <declaration name="symmetry" type="MatrixInfo.MatrixSymmetry" line="87"/>
            </method>
            <javadoc line="95">
                Reads the vector info for the Matrix Market exchange format. The line
                  must consist of exactly 4 space-separated entries, the first being
                  &quot;%%MatrixMarket&quot;                
            </javadoc>
            <method name="readVectorInfo" type="VectorInfo" line="100">
                <declaration name="component" type="String[]" line="101"/>
                <declaration name="sparse" type="boolean" line="105"/>
                <declaration name="field" type="VectorInfo.VectorField" line="109"/>
            </method>
            <javadoc line="117">
                Checks if a Matrix Market header is present (&quot;%%MatrixMarket&quot;)                
                <return>
                    True if a header was found, else false                    
                </return>
                <throws>
                    IOException                    
                </throws>
            </javadoc>
            <method name="hasInfo" type="boolean" line="122">
                <declaration name="component" type="String[]" line="124"/>
            </method>
            <javadoc line="128">
                Reads all the comments (lines starting with &apos;%&apos;). Positions the reader at
                  the first non-comment line. Can only be called after reading the matrix
                  or vector info. The comments read does not include &apos;%&apos; or the newline                
            </javadoc>
            <method name="readComments" type="String[]" line="133">
                <declaration name="list" type="List&lt;String&gt;" line="134"/>
                <scope line="135">
                    <declaration name="line" type="String" line="137"/>
                    <scope line="138"/>
                </scope>
            </method>
            <javadoc line="146">
                Reads in the size of a matrix. Skips initial comments                
            </javadoc>
            <method name="readMatrixSize" type="MatrixSize" line="149">
                <params>
                    <param name="info" type="MatrixInfo"/>
                </params>
                <declaration name="numRows" type="int" line="150"/>
                <scope line="152">
                    <declaration name="numEntries" type="int" line="153"/>
                </scope>
            </method>
            <javadoc line="157">
                Reads in the size of an array matrix. Skips initial comments                
            </javadoc>
            <method name="readArraySize" type="MatrixSize" line="160">
                <declaration name="numRows" type="int" line="161"/>
            </method>
            <javadoc line="164">
                Reads in the size of a coordinate matrix. Skips initial comments                
            </javadoc>
            <method name="readCoordinateSize" type="MatrixSize" line="167">
                <declaration name="numRows" type="int" line="168"/>
            </method>
            <javadoc line="171">
                Reads in the size of a vector. Skips initial comments                
            </javadoc>
            <method name="readVectorSize" type="VectorSize" line="174">
                <params>
                    <param name="info" type="VectorInfo"/>
                </params>
                <declaration name="size" type="int" line="175"/>
                <scope line="177">
                    <declaration name="numEntries" type="int" line="178"/>
                </scope>
            </method>
            <javadoc line="182">
                Reads in the size of a dense vector. Skips initial comments                
            </javadoc>
            <method name="readVectorArraySize" type="VectorSize" line="185">
                <declaration name="size" type="int" line="186"/>
            </method>
            <javadoc line="189">
                Reads in the size of a coordinate vector. Skips initial comments                
            </javadoc>
            <method name="readVectorCoordinateSize" type="VectorSize" line="192">
                <declaration name="size" type="int" line="193"/>
            </method>
            <javadoc line="196">
                Reads the array data                
            </javadoc>
            <method name="readArray" type="void" line="199">
                <params>
                    <param name="data" type="double[]"/>
                </params>
                <declaration name="size" type="int" line="200"/>
            </method>
            <javadoc line="203">
                Reads the array data                
            </javadoc>
            <method name="readArray" type="void" line="206">
                <params>
                    <param name="data" type="float[]"/>
                </params>
                <declaration name="size" type="int" line="207"/>
            </method>
            <javadoc line="210">
                Reads the array data                
            </javadoc>
            <method name="readArray" type="void" line="213">
                <params>
                    <param name="data" type="int[]"/>
                </params>
                <declaration name="size" type="int" line="214"/>
            </method>
            <javadoc line="217">
                Reads the array data                
            </javadoc>
            <method name="readArray" type="void" line="220">
                <params>
                    <param name="data" type="long[]"/>
                </params>
                <declaration name="size" type="int" line="221"/>
            </method>
            <javadoc line="224">
                Reads the array data. The first array will contain real entries, while
                  the second contain imaginary entries                
            </javadoc>
            <method name="readArray" type="void" line="228">
                <params>
                    <param name="dataR" type="double[]"/>
                    <param name="dataI" type="double[]"/>
                </params>
                <declaration name="size" type="int" line="229"/>
                <scope line="231"/>
            </method>
            <javadoc line="236">
                Reads the array data. The first array will contain real entries, while
                  the second contain imaginary entries                
            </javadoc>
            <method name="readArray" type="void" line="240">
                <params>
                    <param name="dataR" type="float[]"/>
                    <param name="dataI" type="float[]"/>
                </params>
                <declaration name="size" type="int" line="241"/>
                <scope line="243"/>
            </method>
            <javadoc line="248">
                Reads a coordinate vector                
            </javadoc>
            <method name="readCoordinate" type="void" line="251">
                <params>
                    <param name="index" type="int[]"/>
                    <param name="data" type="double[]"/>
                </params>
                <declaration name="size" type="int" line="252"/>
                <scope line="254"/>
            </method>
            <javadoc line="259">
                Reads a coordinate vector                
            </javadoc>
            <method name="readCoordinate" type="void" line="262">
                <params>
                    <param name="index" type="int[]"/>
                    <param name="data" type="float[]"/>
                </params>
                <declaration name="size" type="int" line="263"/>
                <scope line="265"/>
            </method>
            <javadoc line="270">
                Reads a coordinate vector                
            </javadoc>
            <method name="readCoordinate" type="void" line="273">
                <params>
                    <param name="index" type="int[]"/>
                    <param name="data" type="int[]"/>
                </params>
                <declaration name="size" type="int" line="274"/>
                <scope line="276"/>
            </method>
            <javadoc line="281">
                Reads a coordinate vector                
            </javadoc>
            <method name="readCoordinate" type="void" line="284">
                <params>
                    <param name="index" type="int[]"/>
                    <param name="data" type="long[]"/>
                </params>
                <declaration name="size" type="int" line="285"/>
                <scope line="287"/>
            </method>
            <javadoc line="292">
                Reads a coordinate vector. First data array contains real entries, and
                  the second contains imaginary entries                
            </javadoc>
            <method name="readCoordinate" type="void" line="296">
                <params>
                    <param name="index" type="int[]"/>
                    <param name="dataR" type="float[]"/>
                    <param name="dataI" type="float[]"/>
                </params>
                <declaration name="size" type="int" line="297"/>
                <scope line="299"/>
            </method>
            <javadoc line="305">
                Reads a coordinate vector. First data array contains real entries, and
                  the second contains imaginary entries                
            </javadoc>
            <method name="readCoordinate" type="void" line="309">
                <params>
                    <param name="index" type="int[]"/>
                    <param name="dataR" type="double[]"/>
                    <param name="dataI" type="double[]"/>
                </params>
                <declaration name="size" type="int" line="310"/>
                <scope line="312"/>
            </method>
            <javadoc line="318">
                Reads a pattern vector                
            </javadoc>
            <method name="readPattern" type="void" line="321">
                <params>
                    <param name="index" type="int[]"/>
                </params>
                <declaration name="size" type="int" line="322"/>
            </method>
            <javadoc line="325">
                Reads a coordinate matrix                
            </javadoc>
            <method name="readCoordinate" type="void" line="328">
                <params>
                    <param name="row" type="int[]"/>
                    <param name="column" type="int[]"/>
                    <param name="data" type="double[]"/>
                </params>
                <declaration name="size" type="int" line="329"/>
                <scope line="331"/>
            </method>
            <javadoc line="337">
                Reads a coordinate matrix                
            </javadoc>
            <method name="readCoordinate" type="void" line="340">
                <params>
                    <param name="row" type="int[]"/>
                    <param name="column" type="int[]"/>
                    <param name="data" type="float[]"/>
                </params>
                <declaration name="size" type="int" line="341"/>
                <scope line="343"/>
            </method>
            <javadoc line="349">
                Reads a coordinate matrix                
            </javadoc>
            <method name="readCoordinate" type="void" line="352">
                <params>
                    <param name="row" type="int[]"/>
                    <param name="column" type="int[]"/>
                    <param name="data" type="int[]"/>
                </params>
                <declaration name="size" type="int" line="353"/>
                <scope line="355"/>
            </method>
            <javadoc line="361">
                Reads a coordinate matrix                
            </javadoc>
            <method name="readCoordinate" type="void" line="364">
                <params>
                    <param name="row" type="int[]"/>
                    <param name="column" type="int[]"/>
                    <param name="data" type="long[]"/>
                </params>
                <declaration name="size" type="int" line="365"/>
                <scope line="367"/>
            </method>
            <javadoc line="373">
                Reads a pattern matrix                
            </javadoc>
            <method name="readPattern" type="void" line="376">
                <params>
                    <param name="row" type="int[]"/>
                    <param name="column" type="int[]"/>
                </params>
                <declaration name="size" type="int" line="377"/>
                <scope line="379"/>
            </method>
            <javadoc line="384">
                Reads a coordinate matrix. First data array contains real entries, and
                  the second contains imaginary entries                
            </javadoc>
            <method name="readCoordinate" type="void" line="388">
                <params>
                    <param name="row" type="int[]"/>
                    <param name="column" type="int[]"/>
                    <param name="dataR" type="double[]"/>
                    <param name="dataI" type="double[]"/>
                </params>
                <declaration name="size" type="int" line="389"/>
                <scope line="391"/>
            </method>
            <javadoc line="398">
                Reads a coordinate matrix. First data array contains real entries, and
                  the second contains imaginary entries                
            </javadoc>
            <method name="readCoordinate" type="void" line="402">
                <params>
                    <param name="row" type="int[]"/>
                    <param name="column" type="int[]"/>
                    <param name="dataR" type="float[]"/>
                    <param name="dataI" type="float[]"/>
                </params>
                <declaration name="size" type="int" line="403"/>
                <scope line="405"/>
            </method>
            <javadoc line="412">
                Reads an integer                
            </javadoc>
            <method name="getInt" type="int" line="415"/>
            <javadoc line="421">
                Reads a long                
            </javadoc>
            <method name="getLong" type="long" line="424"/>
            <javadoc line="430">
                Reads a double                
            </javadoc>
            <method name="getDouble" type="double" line="433"/>
            <javadoc line="439">
                Reads a float                
            </javadoc>
            <method name="getFloat" type="float" line="442"/>
        </class>
    </source>