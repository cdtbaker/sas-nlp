<?xml version="1.0" encoding="UTF-8"?>
    <source package="no.uib.cipr.matrix">
        <import package="java.io.IOException"/>
        <import package="no.uib.cipr.matrix.io.MatrixInfo"/>
        <import package="no.uib.cipr.matrix.io.MatrixSize"/>
        <import package="no.uib.cipr.matrix.io.MatrixVectorReader"/>
        <import package="com.github.fommil.netlib.BLAS"/>
        <import package="com.github.fommil.netlib.LAPACK"/>
        <import package="org.netlib.util.intW"/>
        <class name="DenseMatrix" line="33">
            <extends class="AbstractDenseMatrix"/>
            <javadoc line="33">
                Dense matrix. It is a good all-round matrix structure, with fast access and
                  efficient algebraic operations. The matrix
                  &lt;p&gt;
                  &lt;table border=&quot;1&quot;&gt;
                  &lt;tr&gt;
                  &lt;td&gt;a&lt;sub&gt;11&lt;/sub&gt;&lt;/td&gt;
                  &lt;td&gt;a&lt;sub&gt;12&lt;/sub&gt;&lt;/td&gt;
                  &lt;td&gt;a&lt;sub&gt;13&lt;/sub&gt;&lt;/td&gt;
                  &lt;td&gt;a&lt;sub&gt;14&lt;/sub&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;a&lt;sub&gt;21&lt;/sub&gt;&lt;/td&gt;
                  &lt;td&gt;a&lt;sub&gt;22&lt;/sub&gt;&lt;/td&gt;
                  &lt;td&gt;a&lt;sub&gt;23&lt;/sub&gt;&lt;/td&gt;
                  &lt;td&gt;a&lt;sub&gt;24&lt;/sub&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;a&lt;sub&gt;31&lt;/sub&gt;&lt;/td&gt;
                  &lt;td&gt;a&lt;sub&gt;32&lt;/sub&gt;&lt;/td&gt;
                  &lt;td&gt;a&lt;sub&gt;33&lt;/sub&gt;&lt;/td&gt;
                  &lt;td&gt;a&lt;sub&gt;34&lt;/sub&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;a&lt;sub&gt;41&lt;/sub&gt;&lt;/td&gt;
                  &lt;td&gt;a&lt;sub&gt;42&lt;/sub&gt;&lt;/td&gt;
                  &lt;td&gt;a&lt;sub&gt;43&lt;/sub&gt;&lt;/td&gt;
                  &lt;td&gt;a&lt;sub&gt;44&lt;/sub&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;
                  &lt;/p&gt;
                  &lt;p&gt;
                  is stored column major in a single array, as follows:
                  &lt;/p&gt;
                  &lt;p&gt;
                  &lt;table border=&quot;1&quot;&gt;
                  &lt;tr&gt;
                  &lt;td&gt;a&lt;sub&gt;11&lt;/sub&gt;&lt;/td&gt;
                  &lt;td&gt;a&lt;sub&gt;21&lt;/sub&gt;&lt;/td&gt;
                  &lt;td&gt;a&lt;sub&gt;31&lt;/sub&gt;&lt;/td&gt;
                  &lt;td&gt;a&lt;sub&gt;41&lt;/sub&gt;&lt;/td&gt;
                  &lt;td&gt;a&lt;sub&gt;12&lt;/sub&gt;&lt;/td&gt;
                  &lt;td&gt;a&lt;sub&gt;22&lt;/sub&gt;&lt;/td&gt;
                  &lt;td&gt;a&lt;sub&gt;32&lt;/sub&gt;&lt;/td&gt;
                  &lt;td&gt;a&lt;sub&gt;42&lt;/sub&gt;&lt;/td&gt;
                  &lt;td&gt;a&lt;sub&gt;13&lt;/sub&gt;&lt;/td&gt;
                  &lt;td&gt;a&lt;sub&gt;23&lt;/sub&gt;&lt;/td&gt;
                  &lt;td&gt;a&lt;sub&gt;33&lt;/sub&gt;&lt;/td&gt;
                  &lt;td&gt;a&lt;sub&gt;43&lt;/sub&gt;&lt;/td&gt;
                  &lt;td&gt;a&lt;sub&gt;14&lt;/sub&gt;&lt;/td&gt;
                  &lt;td&gt;a&lt;sub&gt;24&lt;/sub&gt;&lt;/td&gt;
                  &lt;td&gt;a&lt;sub&gt;34&lt;/sub&gt;&lt;/td&gt;
                  &lt;td&gt;a&lt;sub&gt;44&lt;/sub&gt;&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;
                  &lt;/p&gt;                
            </javadoc>
            <javadoc line="92">
                Constructor for DenseMatrix                
                <param>
                    rReader to get the matrix from                    
                </param>
            </javadoc>
            <method name="DenseMatrix" type="constructor" line="98">
                <params>
                    <param name="r" type="MatrixVectorReader"/>
                </params>
                <comment line="99">
                    Start with a zero-sized matrix                    
                </comment>
                <comment line="102">
                    Get matrix information. Use the header if present, else use a safe                    
                </comment>
                <comment line="103">
                    default                    
                </comment>
                <comment line="112">
                    Resize the matrix to correct size                    
                </comment>
                <comment line="117">
                    Check that the matrix is in an acceptable format                    
                </comment>
                <comment line="125">
                    Read the entries, in either coordinate or array format                    
                </comment>
                <comment line="128">
                    Read coordinate data                    
                </comment>
                <comment line="135">
                    Shift indices from 1-offset to 0-offset                    
                </comment>
                <comment line="139">
                    Store them                    
                </comment>
                <comment line="144">
                    info.isArray()                    
                </comment>
                <comment line="147">
                    Put in missing entries from symmetry or skew symmetry                    
                </comment>
                <declaration name="info" type="MatrixInfo" line="104"/>
                <declaration name="size" type="MatrixSize" line="110"/>
                <scope line="126">
                    <declaration name="nz" type="int" line="129"/>
                    <declaration name="row" type="int[]" line="130"/>
                    <declaration name="column" type="int[]" line="131"/>
                    <declaration name="entry" type="double[]" line="132"/>
                </scope>
            </method>
            <javadoc line="158">
                Constructor for DenseMatrix                
                <param>
                    numRowsNumber of rows                    
                </param>
                <param>
                    numColumnsNumber of columns                    
                </param>
            </javadoc>
            <method name="DenseMatrix" type="constructor" line="166">
                <params>
                    <param name="numRows" type="int"/>
                    <param name="numColumns" type="int"/>
                </params>
            </method>
            <javadoc line="170">
                Constructor for DenseMatrix                
                <param>
                    AMatrix to copy. A deep copy is made                    
                </param>
            </javadoc>
            <method name="DenseMatrix" type="constructor" line="176">
                <params>
                    <param name="A" type="Matrix"/>
                </params>
            </method>
            <javadoc line="180">
                Constructor for DenseMatrix                
                <param>
                    AMatrix to copy contents from                    
                </param>
                <param>
                    deepIf true, <code>A</code> is copied, else a shallow copy is
                      made and the matrices share underlying storage. For this,
                      <code>A</code> must be a dense matrix                    
                </param>
            </javadoc>
            <method name="DenseMatrix" type="constructor" line="190">
                <params>
                    <param name="A" type="Matrix"/>
                    <param name="deep" type="boolean"/>
                </params>
            </method>
            <javadoc line="194">
                Constructor for DenseMatrix. Builds the matrix from a vector                
                <param>
                    xVector to copy from. This will form this matrix' single column                    
                </param>
                <param>
                    deepIf true, x is copied, if false, the internal storage of this
                      matrix is the same as that of the vector. In that case,
                      <code>x</code> must be a <code>DenseVector</code>                    
                </param>
            </javadoc>
            <method name="DenseMatrix" type="constructor" line="204">
                <params>
                    <param name="x" type="Vector"/>
                    <param name="deep" type="boolean"/>
                </params>
                <scope line="210"/>
            </method>
            <javadoc line="217">
                Constructor for DenseMatrix. Builds the matrix from a vector                
                <param>
                    xThe vector which forms this matrix' single column. It is
                      copied, not referenced                    
                </param>
            </javadoc>
            <method name="DenseMatrix" type="constructor" line="224">
                <params>
                    <param name="x" type="Vector"/>
                </params>
            </method>
            <javadoc line="228">
                Constructor for DenseMatrix. Builds the matrix from vectors. Each vector
                  will correspond to a column of the matrix                
                <param>
                    xVectors which forms the columns of this matrix. Every vector
                      must have the same size                    
                </param>
            </javadoc>
            <method name="DenseMatrix" type="constructor" line="236">
                <params>
                    <param name="x" type="Vector[]"/>
                </params>
                <comment line="239">
                    Ensure correct sizes                    
                </comment>
                <comment line="245">
                    Copy the contents                    
                </comment>
            </method>
            <javadoc line="251">
                Constructor for DenseMatrix. Copies from the passed array                
                <param>
                    valuesArrays to copy from. Every sub-array must have the same size                    
                </param>
            </javadoc>
            <method name="DenseMatrix" type="constructor" line="257">
                <params>
                    <param name="values" type="double[][]"/>
                </params>
                <comment line="260">
                    Copy the contents                    
                </comment>
                <scope line="261"/>
            </method>
            <javadoc line="269">
                @param numRows                
                <param>
                    numColumns                    
                </param>
                <param>
                    values                    
                </param>
                <param>
                    deep if true the array will be cloned, if false the array is used directly.                    
                </param>
            </javadoc>
            <method name="DenseMatrix" type="constructor" line="275">
                <params>
                    <param name="numRows" type="int"/>
                    <param name="numColumns" type="int"/>
                    <param name="values" type="double[]"/>
                    <param name="deep" type="boolean"/>
                </params>
            </method>
            <method name="copy" type="DenseMatrix" line="286"/>
            <method name="copy" type="void" line="291">
                <params>
                    <param name="A" type="Matrix"/>
                </params>
            </method>
            <method name="multAdd" type="Matrix" line="297">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="B" type="Matrix"/>
                    <param name="C" type="Matrix"/>
                </params>
                <declaration name="Bd" type="double[]" line="303"/>
            </method>
            <method name="transAmultAdd" type="Matrix" line="315">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="B" type="Matrix"/>
                    <param name="C" type="Matrix"/>
                </params>
                <declaration name="Bd" type="double[]" line="321"/>
            </method>
            <method name="transBmultAdd" type="Matrix" line="333">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="B" type="Matrix"/>
                    <param name="C" type="Matrix"/>
                </params>
                <declaration name="Bd" type="double[]" line="339"/>
            </method>
            <method name="transABmultAdd" type="Matrix" line="351">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="B" type="Matrix"/>
                    <param name="C" type="Matrix"/>
                </params>
                <declaration name="Bd" type="double[]" line="357"/>
            </method>
            <method name="rank1" type="Matrix" line="369">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="x" type="Vector"/>
                    <param name="y" type="Vector"/>
                </params>
                <declaration name="xd" type="double[]" line="375"/>
            </method>
            <method name="multAdd" type="Vector" line="385">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="x" type="Vector"/>
                    <param name="y" type="Vector"/>
                </params>
                <declaration name="xd" type="double[]" line="391"/>
            </method>
            <method name="transMultAdd" type="Vector" line="401">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="x" type="Vector"/>
                    <param name="y" type="Vector"/>
                </params>
                <declaration name="xd" type="double[]" line="407"/>
            </method>
            <method name="solve" type="Matrix" line="417">
                <params>
                    <param name="B" type="Matrix"/>
                    <param name="X" type="Matrix"/>
                </params>
                <comment line="418">
                    We allow non-square matrices, as we then use a least-squares solver                    
                </comment>
            </method>
            <method name="solve" type="Vector" line="437">
                <params>
                    <param name="b" type="Vector"/>
                    <param name="x" type="Vector"/>
                </params>
                <declaration name="B" type="DenseMatrix" line="438"/>
            </method>
            <method name="transSolve" type="Matrix" line="444">
                <params>
                    <param name="B" type="Matrix"/>
                    <param name="X" type="Matrix"/>
                </params>
                <comment line="445">
                    We allow non-square matrices, as we then use a least-squares solver                    
                </comment>
            </method>
            <method name="transSolve" type="Vector" line="461">
                <params>
                    <param name="b" type="Vector"/>
                    <param name="x" type="Vector"/>
                </params>
                <declaration name="B" type="DenseMatrix" line="462"/>
            </method>
            <method name="LUsolve" type="Matrix" line="467">
                <params>
                    <param name="B" type="Matrix"/>
                    <param name="X" type="Matrix"/>
                </params>
                <declaration name="Xd" type="double[]" line="471"/>
                <declaration name="piv" type="int[]" line="475"/>
                <declaration name="info" type="intW" line="477"/>
            </method>
            <method name="QRsolve" type="Matrix" line="489">
                <params>
                    <param name="B" type="Matrix"/>
                    <param name="X" type="Matrix"/>
                    <param name="trans" type="Transpose"/>
                </params>
                <comment line="492">
                    Allocate temporary solution matrix                    
                </comment>
                <comment line="500">
                    Query optimal workspace                    
                </comment>
                <comment line="507">
                    Allocate workspace                    
                </comment>
                <comment line="516">
                    Compute the factorization                    
                </comment>
                <comment line="525">
                    Extract the solution                    
                </comment>
                <declaration name="nrhs" type="int" line="490"/>
                <declaration name="Xtmp" type="DenseMatrix" line="493"/>
                <declaration name="M" type="int" line="494"/>
                <declaration name="newData" type="double[]" line="498"/>
                <declaration name="work" type="double[]" line="501"/>
                <declaration name="info" type="intW" line="502"/>
                <declaration name="lwork" type="int" line="508"/>
                <declaration name="N" type="int" line="526"/>
            </method>
        </class>
    </source>