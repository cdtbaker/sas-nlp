<?xml version="1.0" encoding="UTF-8"?>
    <source package="no.uib.cipr.matrix">
        <class name="UnitLowerTriangDenseMatrix" line="24">
            <extends class="LowerTriangDenseMatrix"/>
            <javadoc line="24">
                Unit lower triangular dense matrix. Almost the same as the{@link no.uib.cipr.matrix.LowerTriangDenseMatrix LowerTriangDenseMatrix},
                  but additionally assumes the main diagonal to be all ones. However it does
                  not access it, so it may be actually be different.                
            </javadoc>
            <javadoc line="32">
                Constructor for UnitLowerTriangDenseMatrix                
                <param>
                    nSize of the matrix. Since the matrix must be square, this
                      equals both the number of rows and columns                    
                </param>
            </javadoc>
            <method name="UnitLowerTriangDenseMatrix" type="constructor" line="39">
                <params>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="43">
                Constructor for UnitLowerTriangDenseMatrix                
                <param>
                    AMatrix to copy from. Only the strictly lower triangular part
                      is copied                    
                </param>
            </javadoc>
            <method name="UnitLowerTriangDenseMatrix" type="constructor" line="50">
                <params>
                    <param name="A" type="Matrix"/>
                </params>
            </method>
            <javadoc line="54">
                Constructor for UnitLowerTriangDenseMatrix                
                <param>
                    AMatrix to copy from. Only the strictly lower triangular part
                      is copied                    
                </param>
                <param>
                    deepIf true, <code>A</code> is copied, else a shallow copy is
                      made and the matrices share underlying storage. For this,
                      <code>A</code> must be a dense matrix                    
                </param>
            </javadoc>
            <method name="UnitLowerTriangDenseMatrix" type="constructor" line="65">
                <params>
                    <param name="A" type="Matrix"/>
                    <param name="deep" type="boolean"/>
                </params>
            </method>
            <method name="add" type="void" line="70">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="value" type="double"/>
                </params>
            </method>
            <method name="get" type="double" line="77">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
            </method>
            <method name="set" type="void" line="84">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="value" type="double"/>
                </params>
            </method>
            <method name="copy" type="void" line="91">
                <params>
                    <param name="A" type="Matrix"/>
                </params>
            </method>
            <method name="copy" type="UnitLowerTriangDenseMatrix" line="98"/>
            <method name="zero" type="Matrix" line="103"/>
        </class>
    </source>