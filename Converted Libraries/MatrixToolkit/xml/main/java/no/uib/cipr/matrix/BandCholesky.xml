<?xml version="1.0" encoding="UTF-8"?>
    <source package="no.uib.cipr.matrix">
        <import package="no.uib.cipr.matrix.Matrix.Norm"/>
        <import package="com.github.fommil.netlib.LAPACK"/>
        <import package="org.netlib.util.doubleW"/>
        <import package="org.netlib.util.intW"/>
        <class name="BandCholesky" line="6">
            <javadoc line="6">
                Banded Cholesky decomposition                
            </javadoc>
            <declaration name="n" type="int" line="10"/>
            <javadoc line="10">
                Matrix dimension                
            </javadoc>
            <declaration name="kd" type="int" line="14"/>
            <javadoc line="14">
                Number of bands in the matrix A                
            </javadoc>
            <declaration name="Cl" type="LowerTriangBandMatrix" line="18"/>
            <javadoc line="18">
                Cholesky decomposition of a lower matrix                
            </javadoc>
            <declaration name="Cu" type="UpperTriangBandMatrix" line="22"/>
            <javadoc line="22">
                Cholesky decomposition of an upper matrix                
            </javadoc>
            <declaration name="notspd" type="boolean" line="26"/>
            <javadoc line="26">
                If the matrix is SPD or not                
            </javadoc>
            <declaration name="upper" type="boolean" line="30"/>
            <javadoc line="30">
                True for upper part, else false                
            </javadoc>
            <javadoc line="34">
                Constructor for BandCholesky                
                <param>
                    nMatrix size                    
                </param>
                <param>
                    kdNumber of matrix bands                    
                </param>
                <param>
                    upperTrue for decomposing an upper symmetrical matrix, false for a
                      lower symmetrical matrix                    
                </param>
            </javadoc>
            <method name="BandCholesky" type="constructor" line="41">
                <params>
                    <param name="n" type="int"/>
                    <param name="kd" type="int"/>
                    <param name="upper" type="boolean"/>
                </params>
            </method>
            <javadoc line="48">
                Creates a Cholesky decomposition of the given matrix                
                <param>
                    AMatrix to decompose. Not modified                    
                </param>
                <return>
                    A Cholesky decomposition of the matrix                    
                </return>
            </javadoc>
            <method name="factorize" type="BandCholesky" line="53">
                <params>
                    <param name="A" type="LowerSPDBandMatrix"/>
                </params>
            </method>
            <javadoc line="56">
                Creates a Cholesky decomposition of the given matrix                
                <param>
                    AMatrix to decompose. Not modified                    
                </param>
                <return>
                    A Cholesky decomposition of the matrix                    
                </return>
            </javadoc>
            <method name="factorize" type="BandCholesky" line="61">
                <params>
                    <param name="A" type="UpperSPDBandMatrix"/>
                </params>
            </method>
            <javadoc line="64">
                Creates a Cholesky decomposition of the given matrix                
                <param>
                    AMatrix to decompose. Overwritten on return                    
                </param>
                <return>
                    The current decomposition                    
                </return>
            </javadoc>
            <method name="factor" type="BandCholesky" line="69">
                <params>
                    <param name="A" type="LowerSPDBandMatrix"/>
                </params>
            </method>
            <javadoc line="73">
                Creates a Cholesky decomposition of the given matrix                
                <param>
                    AMatrix to decompose. Overwritten on return                    
                </param>
                <return>
                    The current decomposition                    
                </return>
            </javadoc>
            <method name="factor" type="BandCholesky" line="78">
                <params>
                    <param name="A" type="UpperSPDBandMatrix"/>
                </params>
            </method>
            <method name="decompose" type="BandCholesky" line="82">
                <params>
                    <param name="A" type="AbstractBandMatrix"/>
                </params>
                <declaration name="info" type="intW" line="87"/>
            </method>
            <javadoc line="96">
                Returns the decomposition matrix. Only valid for decomposition of a lower
                  SPD matrix                
            </javadoc>
            <method name="getL" type="LowerTriangBandMatrix" line="100"/>
            <javadoc line="104">
                Returns the decomposition matrix. Only valid for decomposition of a upper
                  SPD matrix                
            </javadoc>
            <method name="getU" type="UpperTriangBandMatrix" line="108"/>
            <javadoc line="112">
                Returns true if the matrix decomposed is symmetrical, positive definite                
            </javadoc>
            <method name="isSPD" type="boolean" line="115"/>
            <javadoc line="118">
                Computes the reciprocal condition number                
                <param>
                    AThe matrix this is a decomposition of                    
                </param>
                <return>
                    The reciprocal condition number. Values close to unity indicate a
                      well-conditioned system, while numbers close to zero do not.                    
                </return>
            </javadoc>
            <method name="rcond" type="double" line="124">
                <params>
                    <param name="A" type="Matrix"/>
                </params>
                <declaration name="anorm" type="double" line="127"/>
                <declaration name="work" type="double[]" line="128"/>
                <declaration name="lwork" type="int[]" line="129"/>
                <declaration name="info" type="intW" line="130"/>
                <declaration name="rcond" type="doubleW" line="131"/>
            </method>
            <javadoc line="137">
                Computes &lt;code&gt;A\B&lt;/code&gt;, overwriting &lt;code&gt;B&lt;/code&gt;                
            </javadoc>
            <method name="solve" type="DenseMatrix" line="140">
                <params>
                    <param name="B" type="DenseMatrix"/>
                </params>
                <declaration name="info" type="intW" line="143"/>
            </method>
        </class>
    </source>