<?xml version="1.0" encoding="UTF-8"?>
    <source package="no.uib.cipr.matrix.sparse">
        <import package="lombok.AllArgsConstructor"/>
        <import package="lombok.ToString"/>
        <import package="lombok.extern.java.Log"/>
        <import package="no.uib.cipr.matrix.AbstractMatrix"/>
        <import package="no.uib.cipr.matrix.Matrix"/>
        <import package="no.uib.cipr.matrix.MatrixEntry"/>
        <import package="no.uib.cipr.matrix.Vector"/>
        <import package="no.uib.cipr.matrix.io.MatrixInfo"/>
        <import package="no.uib.cipr.matrix.io.MatrixSize"/>
        <import package="no.uib.cipr.matrix.io.MatrixVectorReader"/>
        <import package="java.io.IOException"/>
        <import package="java.util.Iterator"/>
        <class name="LinkedSparseMatrix" line="14">
            <extends class="AbstractMatrix"/>
            <javadoc line="14">
                A Linked List (with shortcuts to important nodes)
                  implementation of an {@code n x m} Matrix with {@code z} elements that
                  has a typical {@code O(z / m)} insertion / lookup cost
                  and an iterator that traverses columns then rows:
                  a good fit for unstructured sparse matrices. A secondary
                  link maintains fast transpose iteration.
                  &lt;p/&gt;
                  However, memory requirements
                  ({@code 1 instance (8 bytes), 2 int (16 bytes), 2 ref (16 bytes), 1 double (8 bytes) = 48 bytes}per matrix element, plus {@code 8 x numcol + 8 x numrow bytes}s for the cache) are slightly higher
                  than structured sparse matrix storage. Note that on 32 bit JVMs, or on 64 bit JVMs
                  with &lt;a href=&quot;https://wikis.oracle.com/display/HotSpotInternals/CompressedOops&quot;&gt;CompressedOops&lt;/a&gt;
                  enabled, references and ints only cost 4 bytes each, bringing the cost to 28 bytes per element.                
                <author>
                    Sam Halliday                    
                </author>
            </javadoc>
            <class name="Node" line="30">
                <declaration name="row" type="int" line="31"/>
                <declaration name="val" type="double" line="32"/>
                <declaration name="rowTail" type="Node" line="33"/>
            </class>
            <class name="Linked" line="35">
                <declaration name="head" type="Node" line="36"/>
                <declaration name="rows" type="Node[]" line="37"/>
                <method name="isHead" type="boolean" line="38">
                    <params>
                        <param name="row" type="int"/>
                        <param name="col" type="int"/>
                    </params>
                </method>
                <method name="isNextByRow" type="boolean" line="41">
                    <params>
                        <param name="node" type="Node"/>
                        <param name="row" type="int"/>
                        <param name="col" type="int"/>
                    </params>
                </method>
                <method name="isNextByCol" type="boolean" line="44">
                    <params>
                        <param name="node" type="Node"/>
                        <param name="row" type="int"/>
                        <param name="col" type="int"/>
                    </params>
                </method>
                <method name="get" type="double" line="47">
                    <params>
                        <param name="row" type="int"/>
                        <param name="col" type="int"/>
                    </params>
                    <scope line="49">
                        <declaration name="node" type="Node" line="50"/>
                    </scope>
                    <scope line="53">
                        <declaration name="node" type="Node" line="54"/>
                    </scope>
                </method>
                <method name="set" type="void" line="59">
                    <params>
                        <param name="row" type="int"/>
                        <param name="col" type="int"/>
                        <param name="val" type="double"/>
                    </params>
                    <scope line="60"/>
                    <scope line="65">
                        <declaration name="prevRow" type="Node" line="66"/>
                        <scope line="68">
                            <declaration name="prevCol" type="Node" line="69"/>
                            <declaration name="nextCol" type="Node" line="70"/>
                        </scope>
                    </scope>
                </method>
                <method name="findNextByCol" type="Node" line="77">
                    <params>
                        <param name="row" type="int"/>
                        <param name="col" type="int"/>
                    </params>
                    <declaration name="cur" type="Node" line="78"/>
                    <scope line="79"/>
                </method>
                <method name="updateCache" type="void" line="85">
                    <params>
                        <param name="inserted" type="Node"/>
                    </params>
                </method>
                <method name="delete" type="void" line="89">
                    <params>
                        <param name="row" type="int"/>
                        <param name="col" type="int"/>
                    </params>
                    <scope line="90"/>
                    <declaration name="precRow" type="Node" line="94"/>
                    <declaration name="precCol" type="Node" line="95"/>
                    <scope line="96"/>
                    <scope line="100"/>
                </method>
                <method name="findPreceedingByRow" type="Node" line="105">
                    <params>
                        <param name="row" type="int"/>
                        <param name="col" type="int"/>
                    </params>
                    <declaration name="last" type="Node" line="106"/>
                    <declaration name="cur" type="Node" line="107"/>
                    <scope line="108"/>
                </method>
                <method name="cachedByRow" type="Node" line="115">
                    <params>
                        <param name="row" type="int"/>
                    </params>
                </method>
                <method name="findPreceedingByCol" type="Node" line="119">
                    <params>
                        <param name="row" type="int"/>
                        <param name="col" type="int"/>
                    </params>
                    <declaration name="last" type="Node" line="120"/>
                    <declaration name="cur" type="Node" line="121"/>
                    <scope line="122"/>
                </method>
                <method name="cachedByCol" type="Node" line="129">
                    <params>
                        <param name="col" type="int"/>
                    </params>
                </method>
                <method name="startOfRow" type="Node" line="133">
                    <params>
                        <param name="row" type="int"/>
                    </params>
                    <declaration name="prec" type="Node" line="135"/>
                </method>
                <method name="startOfCol" type="Node" line="139">
                    <params>
                        <param name="col" type="int"/>
                    </params>
                    <declaration name="prec" type="Node" line="141"/>
                </method>
            </class>
            <declaration name="links" type="Linked" line="146"/>
            <method name="LinkedSparseMatrix" type="constructor" line="147">
                <params>
                    <param name="numRows" type="int"/>
                    <param name="numColumns" type="int"/>
                </params>
            </method>
            <method name="LinkedSparseMatrix" type="constructor" line="151">
                <params>
                    <param name="A" type="Matrix"/>
                </params>
            </method>
            <method name="LinkedSparseMatrix" type="constructor" line="156">
                <params>
                    <param name="r" type="MatrixVectorReader"/>
                </params>
                <scope line="158">
                    <declaration name="info" type="MatrixInfo" line="159"/>
                    <declaration name="size" type="MatrixSize" line="162"/>
                    <declaration name="nz" type="int" line="166"/>
                    <declaration name="row" type="int[]" line="167"/>
                    <declaration name="column" type="int[]" line="168"/>
                    <declaration name="entry" type="double[]" line="169"/>
                </scope>
                <scope line="175"/>
            </method>
            <method name="zero" type="Matrix" line="179"/>
            <method name="get" type="double" line="183">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
            </method>
            <method name="set" type="void" line="186">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                    <param name="value" type="double"/>
                </params>
            </method>
            <class name="ReusableMatrixEntry" line="190">
                <implements interface="MatrixEntry"/>
                <declaration name="row" type="int" line="191"/>
                <declaration name="val" type="double" line="192"/>
                <method name="column" type="int" line="193"/>
                <method name="row" type="int" line="196"/>
                <method name="get" type="double" line="199"/>
                <method name="set" type="void" line="202">
                    <params>
                        <param name="value" type="double"/>
                    </params>
                </method>
                <method name="toString" type="String" line="205"/>
            </class>
            <method name="iterator" type="Iterator<MatrixEntry>" line="209">
                <anonymous_class line="210">
                    <declaration name="cur" type="Node" line="211"/>
                    <declaration name="entry" type="ReusableMatrixEntry" line="212"/>
                    <method name="hasNext" type="boolean" line="213"/>
                    <method name="next" type="MatrixEntry" line="216"/>
                    <method name="remove" type="void" line="223"/>
                </anonymous_class>
            </method>
            <method name="scale" type="Matrix" line="229">
                <params>
                    <param name="alpha" type="double"/>
                </params>
            </method>
            <method name="copy" type="Matrix" line="234"/>
            <method name="transpose" type="Matrix" line="237">
                <declaration name="old" type="Linked" line="238"/>
                <declaration name="node" type="Node" line="242"/>
                <scope line="243"/>
            </method>
            <method name="multAdd" type="Vector" line="249">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="x" type="Vector"/>
                    <param name="y" type="Vector"/>
                </params>
                <declaration name="node" type="Node" line="252"/>
                <scope line="253"/>
            </method>
            <method name="transMultAdd" type="Vector" line="259">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="x" type="Vector"/>
                    <param name="y" type="Vector"/>
                </params>
                <declaration name="node" type="Node" line="262"/>
                <scope line="263"/>
            </method>
            <method name="multAdd" type="Matrix" line="269">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="B" type="Matrix"/>
                    <param name="C" type="Matrix"/>
                </params>
                <scope line="272">
                    <declaration name="row" type="Node" line="273"/>
                    <scope line="274">
                        <declaration name="node" type="Node" line="275"/>
                        <declaration name="v" type="double" line="276"/>
                        <scope line="277"/>
                    </scope>
                </scope>
            </method>
            <method name="transBmultAdd" type="Matrix" line="286">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="B" type="Matrix"/>
                    <param name="C" type="Matrix"/>
                </params>
                <scope line="289">
                    <declaration name="row" type="Node" line="290"/>
                    <scope line="291">
                        <declaration name="node" type="Node" line="292"/>
                        <declaration name="v" type="double" line="293"/>
                        <scope line="294"/>
                    </scope>
                </scope>
            </method>
            <method name="transAmultAdd" type="Matrix" line="303">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="B" type="Matrix"/>
                    <param name="C" type="Matrix"/>
                </params>
                <scope line="306">
                    <declaration name="row" type="Node" line="307"/>
                    <scope line="308">
                        <declaration name="node" type="Node" line="309"/>
                        <declaration name="v" type="double" line="310"/>
                        <scope line="311"/>
                    </scope>
                </scope>
            </method>
            <method name="transABmultAdd" type="Matrix" line="320">
                <params>
                    <param name="alpha" type="double"/>
                    <param name="B" type="Matrix"/>
                    <param name="C" type="Matrix"/>
                </params>
                <scope line="323">
                    <declaration name="row" type="Node" line="324"/>
                    <scope line="325">
                        <declaration name="node" type="Node" line="326"/>
                        <declaration name="v" type="double" line="327"/>
                        <scope line="328"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>