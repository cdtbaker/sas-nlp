<?xml version="1.0" encoding="UTF-8"?>
    <source package="no.uib.cipr.matrix.sparse">
        <import package="java.util.Arrays"/>
        <import package="no.uib.cipr.matrix.DenseVector"/>
        <import package="no.uib.cipr.matrix.Matrix"/>
        <import package="no.uib.cipr.matrix.Vector"/>
        <class name="ICC" line="6">
            <implements interface="Preconditioner"/>
            <javadoc line="6">
                Incomplete Cholesky preconditioner without fill-in using a compressed row
                  matrix as internal storage                
            </javadoc>
            <declaration name="R" type="CompRowMatrix" line="11"/>
            <javadoc line="11">
                Factorisation matrix                
            </javadoc>
            <declaration name="Rt" type="Matrix" line="15"/>
            <javadoc line="15">
                Triangular view onto R for solution purposes                
            </javadoc>
            <declaration name="y" type="Vector" line="19"/>
            <javadoc line="19">
                Temporary vector for solving the factorised system                
            </javadoc>
            <javadoc line="23">
                Sets up the ICC preconditioner                
                <param>
                    RMatrix to use internally. For best performance, its non-zero
                      pattern must conform to that of the system matrix                    
                </param>
            </javadoc>
            <method name="ICC" type="constructor" line="28">
                <params>
                    <param name="R" type="CompRowMatrix"/>
                </params>
                <declaration name="n" type="int" line="31"/>
            </method>
            <method name="apply" type="Vector" line="34">
                <params>
                    <param name="b" type="Vector"/>
                    <param name="x" type="Vector"/>
                </params>
            </method>
            <method name="transApply" type="Vector" line="38">
                <params>
                    <param name="b" type="Vector"/>
                    <param name="x" type="Vector"/>
                </params>
            </method>
            <method name="setMatrix" type="void" line="41">
                <params>
                    <param name="A" type="Matrix"/>
                </params>
            </method>
            <method name="factor" type="void" line="45">
                <declaration name="n" type="int" line="46"/>
                <declaration name="colind" type="int[]" line="47"/>
                <declaration name="rowptr" type="int[]" line="48"/>
                <declaration name="data" type="double[]" line="49"/>
                <declaration name="Rk" type="double[]" line="50"/>
                <declaration name="diagind" type="int[]" line="51"/>
                <scope line="52">
                    <scope line="55">
                        <declaration name="Rii" type="double" line="56"/>
                        <declaration name="Rki" type="double" line="58"/>
                    </scope>
                    <declaration name="sqRkk" type="double" line="63"/>
                </scope>
            </method>
            <method name="findDiagonalIndices" type="int[]" line="68">
                <params>
                    <param name="m" type="int"/>
                    <param name="colind" type="int[]"/>
                    <param name="rowptr" type="int[]"/>
                </params>
                <declaration name="diagind" type="int[]" line="69"/>
                <scope line="70"/>
            </method>
        </class>
    </source>