<?xml version="1.0" encoding="UTF-8"?>
    <source package="no.uib.cipr.matrix">
        <import package="com.github.fommil.netlib.LAPACK"/>
        <import package="no.uib.cipr.matrix.Matrix.Norm"/>
        <import package="org.netlib.util.doubleW"/>
        <import package="org.netlib.util.intW"/>
        <class name="DenseLU" line="6">
            <javadoc line="6">
                Dense Partial Pivot LU decomposition: {@code A = P  L  U}.                
            </javadoc>
            <declaration name="LU" type="DenseMatrix" line="10"/>
            <javadoc line="10">
                Holds the LU factors                
            </javadoc>
            <declaration name="piv" type="int[]" line="14"/>
            <javadoc line="14">
                Row pivotations                
            </javadoc>
            <declaration name="singular" type="boolean" line="18"/>
            <javadoc line="18">
                True if the matrix was singular                
            </javadoc>
            <javadoc line="22">
                Constructor for DenseLU                
                <param>
                    mNumber of rows                    
                </param>
                <param>
                    nNumber of columns                    
                </param>
            </javadoc>
            <method name="DenseLU" type="constructor" line="27">
                <params>
                    <param name="m" type="int"/>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="31">
                Creates an LU decomposition of the given matrix                
                <param>
                    AMatrix to decompose. Not modified                    
                </param>
                <return>
                    The current decomposition                    
                </return>
            </javadoc>
            <method name="factorize" type="DenseLU" line="36">
                <params>
                    <param name="A" type="Matrix"/>
                </params>
            </method>
            <javadoc line="39">
                Creates an LU decomposition of the given matrix                
                <param>
                    AMatrix to decompose. Overwritten with the decomposition                    
                </param>
                <return>
                    The current decomposition                    
                </return>
            </javadoc>
            <method name="factor" type="DenseLU" line="44">
                <params>
                    <param name="A" type="DenseMatrix"/>
                </params>
                <declaration name="info" type="intW" line="46"/>
            </method>
            <javadoc line="53">
                Returns the permutation matrix.                
            </javadoc>
            <method name="getP" type="PermutationMatrix" line="56">
                <declaration name="perm" type="PermutationMatrix" line="57"/>
            </method>
            <javadoc line="61">
                Returns the lower triangular factor                
            </javadoc>
            <method name="getL" type="UnitLowerTriangDenseMatrix" line="64"/>
            <javadoc line="67">
                Returns the upper triangular factor                
            </javadoc>
            <method name="getU" type="UpperTriangDenseMatrix" line="70"/>
            <javadoc line="73">
                Returns the decomposition matrix                
            </javadoc>
            <method name="getLU" type="DenseMatrix" line="76"/>
            <javadoc line="79">
                Computes the reciprocal condition number, using either the infinity norm
                  of the 1 norm.                
                <param>
                    AThe matrix this is a decomposition of                    
                </param>
                <param>
                    normEither <code>Norm.One</code> or <code>Norm.Infinity</code>                    
                </param>
                <return>
                    The reciprocal condition number. Values close to unity indicate a
                      well-conditioned system, while numbers close to zero do not.                    
                </return>
            </javadoc>
            <method name="rcond" type="double" line="87">
                <params>
                    <param name="A" type="Matrix"/>
                    <param name="norm" type="Norm"/>
                </params>
                <declaration name="anorm" type="double" line="89"/>
                <declaration name="n" type="int" line="90"/>
                <declaration name="info" type="intW" line="91"/>
                <declaration name="rcond" type="doubleW" line="92"/>
            </method>
            <javadoc line="97">
                Returns the row pivots                
            </javadoc>
            <method name="getPivots" type="int[]" line="100"/>
            <javadoc line="103">
                Checks for singularity                
            </javadoc>
            <method name="isSingular" type="boolean" line="106"/>
            <javadoc line="109">
                Computes &lt;code&gt;A\B&lt;/code&gt;, overwriting &lt;code&gt;B&lt;/code&gt;                
            </javadoc>
            <method name="solve" type="DenseMatrix" line="112">
                <params>
                    <param name="B" type="DenseMatrix"/>
                </params>
            </method>
            <javadoc line="115">
                Computes &lt;code&gt;A&lt;sup&gt;T&lt;/sup&gt;\B&lt;/code&gt;, overwriting &lt;code&gt;B&lt;/code&gt;                
            </javadoc>
            <method name="transSolve" type="DenseMatrix" line="118">
                <params>
                    <param name="B" type="DenseMatrix"/>
                </params>
            </method>
            <method name="solve" type="DenseMatrix" line="121">
                <params>
                    <param name="B" type="DenseMatrix"/>
                    <param name="trans" type="Transpose"/>
                </params>
                <declaration name="info" type="intW" line="124"/>
            </method>
        </class>
    </source>