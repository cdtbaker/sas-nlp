<?xml version="1.0" encoding="UTF-8"?>
    <source package="no.uib.cipr.matrix">
        <import package="java.util.Arrays"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.Random"/>
        <import package="java.util.Set"/>
        <class name="Utilities" line="6">
            <javadoc line="6">
                Utilities for the testers
                  NOTE: many of these random matrices are not guaranteed to have solutions                
            </javadoc>
            <method name="Utilities" type="constructor" line="11"/>
            <javadoc line="13">
                Populates the sparse matrix in a symmetric fashion                
                <param>
                    AMatrix to populate                    
                </param>
                <param>
                    numNumber of entries on each symmetry band                    
                </param>
                <return>
                    The matrix data in dense format                    
                </return>
            </javadoc>
            <method name="symmetryPopulate" type="double[][]" line="19">
                <params>
                    <param name="A" type="Matrix"/>
                    <param name="num" type="int"/>
                </params>
                <declaration name="n" type="int" line="20"/>
                <declaration name="values" type="double[][]" line="22"/>
                <scope line="24">
                    <declaration name="value" type="double" line="25"/>
                    <declaration name="k" type="int" line="26"/>
                </scope>
            </method>
            <javadoc line="34">
                Populates the matrix, putting a given number of entries on each column                
                <param>
                    AMatrix to populate                    
                </param>
                <param>
                    numNumber of entries on each column                    
                </param>
                <return>
                    The matrix data in dense format                    
                </return>
            </javadoc>
            <method name="columnPopulate" type="double[][]" line="40">
                <params>
                    <param name="A" type="Matrix"/>
                    <param name="num" type="int"/>
                </params>
                <declaration name="n" type="int" line="41"/>
                <declaration name="values" type="double[][]" line="42"/>
                <scope line="44">
                    <declaration name="value" type="double" line="45"/>
                    <declaration name="k" type="int" line="46"/>
                </scope>
            </method>
            <javadoc line="52">
                Populates the matrix, putting a given number of entries on each row                
                <param>
                    AMatrix to populate                    
                </param>
                <param>
                    numNumber of entries on each row                    
                </param>
                <return>
                    The matrix data in dense format                    
                </return>
            </javadoc>
            <method name="rowPopulate" type="double[][]" line="58">
                <params>
                    <param name="A" type="Matrix"/>
                    <param name="num" type="int"/>
                </params>
                <declaration name="n" type="int" line="59"/>
                <declaration name="values" type="double[][]" line="60"/>
                <scope line="62">
                    <declaration name="value" type="double" line="63"/>
                    <declaration name="k" type="int" line="64"/>
                </scope>
            </method>
            <javadoc line="70">
                Gets a row-wise non-zero pattern suitable for creating compressed row
                  matrices                
                <param>
                    nNumber of rows                    
                </param>
                <param>
                    mNumber of columns                    
                </param>
                <param>
                    bNumber of entries on each row                    
                </param>
            </javadoc>
            <method name="getRowPattern" type="int[][]" line="77">
                <params>
                    <param name="n" type="int"/>
                    <param name="m" type="int"/>
                    <param name="b" type="int"/>
                </params>
                <declaration name="nz" type="int[][]" line="78"/>
                <scope line="79">
                    <declaration name="row" type="Set&lt;Integer&gt;" line="80"/>
                    <declaration name="j" type="int" line="83"/>
                </scope>
            </method>
            <javadoc line="88">
                Gets a column-wise non-zero pattern suitable for creating compressed
                  column matrices                
                <param>
                    nNumber of rows                    
                </param>
                <param>
                    mNumber of columns                    
                </param>
                <param>
                    bNumber of entries on each column                    
                </param>
            </javadoc>
            <method name="getColumnPattern" type="int[][]" line="95">
                <params>
                    <param name="n" type="int"/>
                    <param name="m" type="int"/>
                    <param name="b" type="int"/>
                </params>
                <declaration name="nz" type="int[][]" line="96"/>
                <scope line="97">
                    <declaration name="column" type="Set&lt;Integer&gt;" line="98"/>
                    <declaration name="j" type="int" line="101"/>
                </scope>
            </method>
            <javadoc line="106">
                Populates the matrix, using the given non-zero pattern                
                <param>
                    AMatrix to populate                    
                </param>
                <param>
                    nzColumn indices on each row                    
                </param>
                <return>
                    The matrix data in dense format                    
                </return>
            </javadoc>
            <method name="rowPopulate" type="double[][]" line="112">
                <params>
                    <param name="A" type="Matrix"/>
                    <param name="nz" type="int[][]"/>
                </params>
                <declaration name="n" type="int" line="113"/>
                <declaration name="values" type="double[][]" line="114"/>
                <scope line="116">
                    <declaration name="value" type="double" line="117"/>
                    <declaration name="k" type="int" line="118"/>
                </scope>
            </method>
            <javadoc line="124">
                Populates the matrix, using the given non-zero pattern                
                <param>
                    AMatrix to populate                    
                </param>
                <param>
                    nzRow indices on each column                    
                </param>
                <return>
                    The matrix data in dense format                    
                </return>
            </javadoc>
            <method name="columnPopulate" type="double[][]" line="130">
                <params>
                    <param name="A" type="Matrix"/>
                    <param name="nz" type="int[][]"/>
                </params>
                <declaration name="n" type="int" line="131"/>
                <declaration name="values" type="double[][]" line="132"/>
                <scope line="134">
                    <declaration name="value" type="double" line="135"/>
                    <declaration name="k" type="int" line="136"/>
                </scope>
            </method>
            <javadoc line="142">
                Populates the matrix fully                
                <param>
                    AMatrix to populate                    
                </param>
                <return>
                    The matrix data in dense format                    
                </return>
            </javadoc>
            <method name="populate" type="double[][]" line="147">
                <params>
                    <param name="A" type="Matrix"/>
                </params>
                <declaration name="random" type="Random" line="148"/>
                <declaration name="n" type="int" line="149"/>
                <declaration name="values" type="double[][]" line="150"/>
                <scope line="151">
                    <declaration name="value" type="double" line="152"/>
                </scope>
            </method>
            <javadoc line="158">
                Populates the banded matrix                
                <param>
                    AMatrix to populate                    
                </param>
                <param>
                    klNumber of subdiagonls                    
                </param>
                <param>
                    kuNumber of superdiagonals                    
                </param>
                <return>
                    The matrix data in dense format                    
                </return>
            </javadoc>
            <method name="bandPopulate" type="double[][]" line="165">
                <params>
                    <param name="A" type="Matrix"/>
                    <param name="kl" type="int"/>
                    <param name="ku" type="int"/>
                </params>
                <declaration name="n" type="int" line="166"/>
                <declaration name="values" type="double[][]" line="167"/>
                <scope line="168">
                    <declaration name="value" type="double" line="169"/>
                </scope>
            </method>
            <javadoc line="175">
                Populates the banded matrix, but not its main diagonal                
                <param>
                    AMatrix to populate                    
                </param>
                <param>
                    klNumber of subdiagonls                    
                </param>
                <param>
                    kuNumber of superdiagonals                    
                </param>
                <return>
                    The matrix data in dense format                    
                </return>
            </javadoc>
            <method name="unitBandPopulate" type="double[][]" line="182">
                <params>
                    <param name="A" type="Matrix"/>
                    <param name="kl" type="int"/>
                    <param name="ku" type="int"/>
                </params>
                <declaration name="n" type="int" line="183"/>
                <declaration name="values" type="double[][]" line="184"/>
                <scope line="185">
                    <declaration name="value" type="double" line="186"/>
                </scope>
            </method>
            <javadoc line="192">
                Populates the lower triangular part of the matrix                
                <param>
                    AMatrix to populate                    
                </param>
                <return>
                    The matrix data in dense format                    
                </return>
            </javadoc>
            <method name="lowerPopulate" type="double[][]" line="197">
                <params>
                    <param name="A" type="Matrix"/>
                </params>
                <declaration name="n" type="int" line="198"/>
                <declaration name="values" type="double[][]" line="199"/>
                <scope line="200">
                    <declaration name="value" type="double" line="201"/>
                </scope>
            </method>
            <javadoc line="207">
                Populates the upper triangular part of the matrix                
                <param>
                    AMatrix to populate                    
                </param>
                <return>
                    The matrix data in dense format                    
                </return>
            </javadoc>
            <method name="upperPopulate" type="double[][]" line="212">
                <params>
                    <param name="A" type="Matrix"/>
                </params>
                <declaration name="n" type="int" line="213"/>
                <declaration name="values" type="double[][]" line="214"/>
                <scope line="215">
                    <declaration name="value" type="double" line="216"/>
                </scope>
            </method>
            <method name="upperPopulateGauss" type="void" line="222">
                <params>
                    <param name="A" type="Matrix"/>
                </params>
                <declaration name="random" type="Random" line="223"/>
            </method>
            <javadoc line="226">
                Populates the strictly lower triangular part of the matrix                
                <param>
                    AMatrix to populate                    
                </param>
                <return>
                    The matrix data in dense format                    
                </return>
            </javadoc>
            <method name="unitLowerPopulate" type="double[][]" line="231">
                <params>
                    <param name="A" type="Matrix"/>
                </params>
                <declaration name="n" type="int" line="232"/>
                <declaration name="values" type="double[][]" line="233"/>
                <scope line="234">
                    <declaration name="value" type="double" line="235"/>
                </scope>
            </method>
            <javadoc line="241">
                Populates the strictly upper triangular part of the matrix                
                <param>
                    AMatrix to populate                    
                </param>
                <return>
                    The matrix data in dense format                    
                </return>
            </javadoc>
            <method name="unitUpperPopulate" type="double[][]" line="246">
                <params>
                    <param name="A" type="Matrix"/>
                </params>
                <declaration name="n" type="int" line="247"/>
                <declaration name="values" type="double[][]" line="248"/>
                <scope line="249">
                    <declaration name="value" type="double" line="250"/>
                </scope>
            </method>
            <javadoc line="256">
                Puts the upper triangular part into the lower triangle                
            </javadoc>
            <method name="lowerSymmetrice" type="void" line="259">
                <params>
                    <param name="Ad" type="double[][]"/>
                </params>
                <declaration name="n" type="int" line="260"/>
            </method>
            <javadoc line="263">
                Puts the lower triangular part into the upper triangle                
            </javadoc>
            <method name="upperSymmetrice" type="void" line="266">
                <params>
                    <param name="Ad" type="double[][]"/>
                </params>
                <declaration name="n" type="int" line="267"/>
                <scope line="268">
                    <declaration name="m" type="int" line="269"/>
                </scope>
            </method>
            <javadoc line="273">
                Sets one on the main diagonal                
            </javadoc>
            <method name="unitSet" type="double[][]" line="276">
                <params>
                    <param name="Ad" type="double[][]"/>
                </params>
            </method>
            <declaration name="r" type="Random" line="280"/>
            <javadoc line="281">
                Returns an integer between zero (inclusive) and max (exclusive)                
            </javadoc>
            <method name="getInt" type="int" line="284">
                <params>
                    <param name="max" type="int"/>
                </params>
            </method>
            <javadoc line="287">
                Returns an integer between min (inclusive) and max (exclusive)                
            </javadoc>
            <method name="getInt" type="int" line="290">
                <params>
                    <param name="min" type="int"/>
                    <param name="max" type="int"/>
                </params>
            </method>
            <javadoc line="293">
                Returns true if the matrix is singular                
            </javadoc>
            <method name="singular" type="boolean" line="296">
                <params>
                    <param name="A" type="Matrix"/>
                </params>
                <declaration name="svd" type="SVD" line="297"/>
                <declaration name="S" type="double[]" line="298"/>
            </method>
            <javadoc line="302">
                Returns true if the matrix is positive definite                
            </javadoc>
            <method name="spd" type="boolean" line="305">
                <params>
                    <param name="A" type="Matrix"/>
                </params>
                <declaration name="evd" type="EVD" line="306"/>
                <scope line="307">
                    <declaration name="S" type="double[]" line="308"/>
                </scope>
                <scope line="311">
                    <declaration name="S" type="double[]" line="312"/>
                </scope>
            </method>
            <javadoc line="317">
                Populates the given vector, and returns an array containing its values                
            </javadoc>
            <method name="populate" type="double[]" line="320">
                <params>
                    <param name="x" type="Vector"/>
                </params>
                <declaration name="xd" type="double[]" line="321"/>
                <scope line="322">
                    <declaration name="alpha" type="double" line="323"/>
                </scope>
            </method>
            <javadoc line="329">
                Populates the given vector, and returns an array containing its values.
                  Only m entries are inserted                
            </javadoc>
            <method name="populate" type="double[]" line="333">
                <params>
                    <param name="x" type="Vector"/>
                    <param name="m" type="int"/>
                </params>
                <declaration name="xd" type="double[]" line="334"/>
                <scope line="335">
                    <declaration name="alpha" type="double" line="336"/>
                    <declaration name="k" type="int" line="337"/>
                </scope>
            </method>
            <javadoc line="343">
                Zeros the given array                
            </javadoc>
            <method name="zero" type="void" line="346">
                <params>
                    <param name="A" type="double[][]"/>
                </params>
            </method>
            <javadoc line="349">
                Adds to the diagonal of both the matrix and the array                
            </javadoc>
            <method name="addDiagonal" type="void" line="352">
                <params>
                    <param name="A" type="Matrix"/>
                    <param name="Ad" type="double[][]"/>
                    <param name="shift" type="double"/>
                </params>
                <declaration name="n" type="int" line="353"/>
                <scope line="354"/>
            </method>
            <javadoc line="359">
                Adds to the diagonal of the matrix                
            </javadoc>
            <method name="addDiagonal" type="void" line="362">
                <params>
                    <param name="A" type="Matrix"/>
                    <param name="shift" type="double"/>
                </params>
                <declaration name="n" type="int" line="363"/>
            </method>
        </class>
    </source>