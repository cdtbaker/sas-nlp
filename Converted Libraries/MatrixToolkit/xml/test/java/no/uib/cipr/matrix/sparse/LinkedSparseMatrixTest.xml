<?xml version="1.0" encoding="UTF-8"?>
    <source package="no.uib.cipr.matrix.sparse">
        <import package="au.com.bytecode.opencsv.CSVWriter"/>
        <import package="com.google.common.base.Stopwatch"/>
        <import package="com.google.common.collect.Lists"/>
        <import package="junit.framework.Assert"/>
        <import package="lombok.Cleanup"/>
        <import package="lombok.extern.java.Log"/>
        <import package="no.uib.cipr.matrix.DenseMatrix"/>
        <import package="no.uib.cipr.matrix.Matrix"/>
        <import package="no.uib.cipr.matrix.MatrixEntry"/>
        <import package="no.uib.cipr.matrix.Utilities"/>
        <import package="java.io.File"/>
        <import package="java.io.FileWriter"/>
        <import package="java.util.concurrent.TimeUnit"/>
        <class name="LinkedSparseMatrixTest" line="15">
            <extends class="SparseMatrixTestAbstract"/>
            <javadoc line="15">
                @author Sam Halliday                
            </javadoc>
            <method name="LinkedSparseMatrixTest" type="constructor" line="19">
                <params>
                    <param name="arg0" type="String"/>
                </params>
            </method>
            <method name="createPrimary" type="void" line="22">
                <declaration name="n" type="int" line="23"/>
                <declaration name="m" type="int" line="24"/>
                <declaration name="b" type="int" line="25"/>
                <declaration name="nz" type="int[][]" line="26"/>
                <scope line="29">
                    <declaration name="row" type="int" line="30"/>
                    <declaration name="col" type="int" line="31"/>
                    <declaration name="expect" type="double" line="32"/>
                </scope>
                <scope line="36">
                    <scope line="37">
                        <declaration name="expect" type="double" line="38"/>
                    </scope>
                </scope>
                <declaration name="head" type="LinkedSparseMatrix.Node" line="42"/>
                <declaration name="node" type="LinkedSparseMatrix.Node" line="43"/>
                <scope line="44"/>
                <scope line="49"/>
            </method>
            <method name="ignoredTimedMult" type="void" line="54">
                <declaration name="watch" type="Stopwatch" line="55"/>
                <declaration name="dense" type="DenseMatrix" line="56"/>
                <declaration name="nz" type="int[][]" line="57"/>
                <declaration name="sparse" type="Matrix" line="60"/>
                <scope line="62">
                    <declaration name="t" type="Matrix" line="64"/>
                    <declaration name="o" type="Matrix" line="66"/>
                </scope>
            </method>
            <method name="ignoredTimedTransMult" type="void" line="76">
                <declaration name="watch" type="Stopwatch" line="77"/>
                <declaration name="dense" type="DenseMatrix" line="78"/>
                <declaration name="nz" type="int[][]" line="79"/>
                <declaration name="sparse" type="Matrix" line="82"/>
                <scope line="84">
                    <declaration name="t" type="Matrix" line="86"/>
                    <declaration name="o" type="Matrix" line="87"/>
                </scope>
            </method>
            <method name="testIteratorSet" type="void" line="97"/>
            <method name="testIteratorSetGet" type="void" line="99"/>
            <javadoc line="101">
                Does a naive perf test against DenseMatrix, outputting CSV
                  that we plot in R.
                  &lt;p/&gt;
                  Generate n x n matrix with m entries, on left, and
                  an n x n dense matrix with m entries on the right,
                  using the same population algo. Then we multiply
                  them and output into a dense matrix. We compare
                  dense vs linked sparse from the left, and also
                  look at memory usage. We repeat for 10 different
                  values of m (10,000 to 100,000), and in both cases
                  vary m from 1,000 to 10,000. This requires about
                  8GB heap to be on the safe side.
                  &lt;p/&gt;
                  -Xms8g -Xmx8g -Djava.util.logging.config.file=logging.properties                
                <param>
                    args                    
                </param>
            </javadoc>
            <method name="main" type="void" line="118">
                <params>
                    <param name="args" type="String[]"/>
                </params>
                <declaration name="file" type="File" line="119"/>
                <declaration name="csv" type="CSVWriter" line="121"/>
                <scope line="122">
                    <scope line="123">
                        <scope line="124">
                            <declaration name="patternA" type="int[][]" line="125"/>
                            <declaration name="origA" type="DenseMatrix" line="126"/>
                            <declaration name="patternB" type="int[][]" line="128"/>
                            <declaration name="origB" type="DenseMatrix" line="129"/>
                            <declaration name="denseMem" type="long" line="131"/>
                            <declaration name="timer" type="Stopwatch" line="132"/>
                            <scope line="133">
                                <declaration name="A" type="DenseMatrix" line="136"/>
                                <declaration name="B" type="DenseMatrix" line="141"/>
                                <declaration name="C" type="DenseMatrix" line="142"/>
                            </scope>
                            <scope line="148">
                                <declaration name="A" type="LinkedSparseMatrix" line="151"/>
                                <declaration name="B" type="DenseMatrix" line="156"/>
                                <declaration name="C" type="DenseMatrix" line="157"/>
                            </scope>
                            <declaration name="line" type="String[]" line="163"/>
                        </scope>
                    </scope>
                </scope>
            </method>
        </class>
    </source>