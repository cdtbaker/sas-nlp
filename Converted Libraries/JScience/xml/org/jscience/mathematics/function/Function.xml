<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.jscience.mathematics.function">
        <import package="java.io.Serializable"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="org.jscience.mathematics.structure.GroupAdditive"/>
        <import package="org.jscience.mathematics.structure.GroupMultiplicative"/>
        <import package="javolution.context.LocalContext"/>
        <import package="javolution.context.ObjectFactory"/>
        <import package="javolution.util.FastList"/>
        <import package="javolution.lang.Realtime"/>
        <import package="javolution.text.Text"/>
        <import package="javolution.text.TextBuilder"/>
        <class name="Function" line="25">
            <type_params>
                <type_param name="X"/>
                <type_param name="Y"/>
            </type_params>
            <comment line="66">
                TODO: Implements XMLSerializable.                
            </comment>
            <comment line="330">
                Merges the variable from the specified function into a single table.                
            </comment>
            <comment line="378">
                Function composition (default implementation).                
            </comment>
            <comment line="446">
                Function derivative (default implementation).                
            </comment>
            <comment line="504">
                Function integral (default implementation).                
            </comment>
            <comment line="562">
                Function addition (default implementation).                
            </comment>
            <comment line="637">
                Function addition (default implementation).                
            </comment>
            <comment line="717">
                Function multiplication (default implementation).                
            </comment>
            <comment line="791">
                Function multiplication (default implementation).                
            </comment>
            <implements interface="Serializable"/>
            <implements interface="Realtime"/>
            <javadoc line="25">
                &lt;p&gt; This abstract class represents a mapping between two sets such that
                  there is a unique element in the second set assigned to each element
                  in the first set.&lt;/p&gt;
                  &lt;p&gt; Functions can be discrete or continuous and multivariate functions 
                  (functions with multiple variables) are also supported as illustrated 
                  below:[code]
                  // Defines local variables.
                  Variable.Local&lt;Rational&gt; varX = new Variable.Local&lt;Rational&gt;(&quot;x&quot;);
                  Variable.Local&lt;Rational&gt; varY = new Variable.Local&lt;Rational&gt;(&quot;y&quot;);
                  // f(x, y) =  x² + x·y + 1;
                  Polynomial&lt;Rational&gt; x = Polynomial.valueOf(Rational.ONE, varX);
                  Polynomial&lt;Rational&gt; y = Polynomial.valueOf(Rational.ONE, varY);
                  Polynomial&lt;Rational&gt; fx_y = x.pow(2).plus(x.times(y)).plus(Rational.ONE);
                  System.out.println(&quot;f(x,y) = &quot; + fx_y);
                  // Evaluates f(1,0) 
                  System.out.println(&quot;f(1,0) = &quot; + fx_y.evaluate(Rational.ONE, Rational.ZERO));
                  // Calculates df(x,y)/dx
                  System.out.println(&quot;df(x,y)/dx = &quot; + fx_y.differentiate(varX));
                  &gt; f(x,y) = [1/1]x^2 + [1/1]xy + [1/1]
                  &gt; f(1,0) = 2/1
                  &gt; df(x,y)/dx = [2/1]x + [1/1]y
                  [/code]&lt;/p&gt;
                  &lt;p&gt; Functions are often given by formula (e.g. &lt;code&gt;f(x) = x²-x+1,
                  f(x,y)= x·y&lt;/code&gt;) but the general function instance might tabulate
                  the values, solve an equation, etc.&lt;/p&gt;                
                <author>
                    <a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a>                    
                </author>
                <version>
                    3.1, April 1, 2006                    
                </version>
                <see>
                    <a href="http://en.wikipedia.org/wiki/Function_%28mathematics%29">
                           Wikipedia: Functions (mathematics)</a>                    
                </see>
            </javadoc>
            <javadoc line="67">
                Default constructor.                
            </javadoc>
            <method name="Function" type="constructor" line="70"/>
            <method name="getVariables" type="List<Variable<X>>" line="73"/>
            <javadoc line="73">
                Returns a lexically ordered list of the variables (or arguments)
                  for this function (empty list for constant functions).                
                <return>
                    this function current unset variables (sorted).                    
                </return>
            </javadoc>
            <method name="evaluate" type="Y" line="81"/>
            <javadoc line="81">
                Evaluates this function using its {@link Variable variables} current
                  values.                
                <return>
                    the evaluation of this function.                    
                </return>
                <throws>
                    FunctionException if any of this function's variable is not set.                    
                </throws>
            </javadoc>
            <javadoc line="90">
                Indicates if this function is equals to the specified object.                
                <param>
                    obj the object to be compared with.                    
                </param>
                <return>
                    <code>true</code> if this function and the specified argument
                      represent the same function; <code>false</code> otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="97">
                <params>
                    <param name="obj" type="Object"/>
                </params>
            </method>
            <javadoc line="101">
                Returns the hash code for this function (consistent with {@link #equals(Object)}.                
                <return>
                    this function hash code.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="107"/>
            <javadoc line="111">
                Retrieves the variable from this function having the specified 
                  symbol (convenience method).                
                <return>
                    the variable having the specified symbol or <code>null</code>
                      if none.                    
                </return>
            </javadoc>
            <method name="getVariable" type="Variable<X>" line="118">
                <params>
                    <param name="symbol" type="String"/>
                </params>
                <scope line="119"/>
            </method>
            <javadoc line="126">
                Evaluates this function for the specified argument value
                  (convenience method). The evaluation is performed 
                  in a {@link javolution.context.LocalContext LocalContext} and 
                  can safely be called upon functions with {@link Variable.Global global
                  variables}.                
                <param>
                    arg the single variable value used for the evaluation.                    
                </param>
                <return>
                    the evaluation of this function.                    
                </return>
                <throws>
                    FunctionException if <code>getVariables().size() != 1</code>                    
                </throws>
            </javadoc>
            <method name="evaluate" type="Y" line="137">
                <params>
                    <param name="arg" type="X"/>
                </params>
                <declaration name="vars" type="List&lt;Variable&lt;X&gt;&gt;" line="138"/>
                <declaration name="x" type="Variable&lt;X&gt;" line="141"/>
                <declaration name="prev" type="X" line="142"/>
                <scope line="144"/>
                <scope line="147"/>
            </method>
            <javadoc line="153">
                Evaluates this function for the specified arguments values
                  (convenience method). The evaluation is performed 
                  in a {@link javolution.context.LocalContext LocalContext} and 
                  can safely be called upon functions with {@link Variable.Global global
                  variables}.                
                <param>
                    args the variables values used for the evaluation.                    
                </param>
                <return>
                    the evaluation of this function.                    
                </return>
                <throws>
                    IllegalArgumentException 
                      if <code>args.length != getVariables().size())</code>                    
                </throws>
            </javadoc>
            <method name="evaluate" type="Y" line="165">
                <params>
                    <param name="args" type="X"/>
                </params>
                <declaration name="vars" type="List&lt;Variable&lt;X&gt;&gt;" line="166"/>
                <scope line="171"/>
                <scope line="173"/>
            </method>
            <method name="evaluate" type="Y" line="178">
                <params>
                    <param name="args" type="X[]"/>
                    <param name="vars" type="List<Variable<X>>"/>
                    <param name="i" type="int"/>
                </params>
                <comment line="186">
                    Restores previous variable value.                    
                </comment>
                <scope line="179">
                    <declaration name="var" type="Variable&lt;X&gt;" line="180"/>
                    <declaration name="prev" type="X" line="181"/>
                    <scope line="183"/>
                    <scope line="185"/>
                </scope>
                <scope line="188"/>
            </method>
            <javadoc line="193">
                Returns the composition of this function with the one specified.                
                <param>
                    that the function for which the return value is passed as
                      argument to this function.                    
                </param>
                <return>
                    the function <code>(this o that)</code>                    
                </return>
                <throws>
                    FunctionException if this function is not monovariate.                    
                </throws>
            </javadoc>
            <method name="compose" type="Function<Z,Y>" line="201">
                <params>
                    <param name="that" type="Function<Z,X>"/>
                </params>
            </method>
            <javadoc line="207">
                Returns the first derivative of this function with respect to 
                  the specified variable.                
                <param>
                    v the variable for which the derivative is calculated.                    
                </param>
                <return>
                    <code>d[this]/dv</code>                    
                </return>
                <see>
                    <a href="http://mathworld.wolfram.com/Derivative.html">
                               Derivative -- from MathWorld</a>                    
                </see>
                <throws>
                    FunctionException if the derivative is undefined.                    
                </throws>
            </javadoc>
            <method name="differentiate" type="Function<X,Y>" line="217">
                <params>
                    <param name="v" type="Variable<X>"/>
                </params>
            </method>
            <javadoc line="221">
                Returns an integral of this function with respect to 
                  the specified variable.                
                <param>
                    v the variable for which the integral is calculated.                    
                </param>
                <return>
                    <code>S[this·dv]</code>                    
                </return>
                <see>
                    <a href="http://mathworld.wolfram.com/Integral.html">
                               Integral -- from MathWorld</a>                    
                </see>
            </javadoc>
            <method name="integrate" type="Function<X,Y>" line="230">
                <params>
                    <param name="v" type="Variable<X>"/>
                </params>
            </method>
            <javadoc line="234">
                Returns the sum of this function with the one specified.                
                <param>
                    that the function to be added.                    
                </param>
                <return>
                    <code>this + that</code>.                    
                </return>
            </javadoc>
            <method name="plus" type="Function<X,Y>" line="240">
                <params>
                    <param name="that" type="Function<X,Y>"/>
                </params>
            </method>
            <javadoc line="244">
                Returns the difference of this function with the one specified.                
                <param>
                    that the function to be subtracted.                    
                </param>
                <return>
                    <code>this - that</code>.                    
                </return>
            </javadoc>
            <method name="minus" type="Function<X,Y>" line="251">
                <params>
                    <param name="that" type="Function<X,Y>"/>
                </params>
                <scope line="252">
                    <declaration name="thatOpposite" type="Function" line="253"/>
                </scope>
            </method>
            <javadoc line="260">
                Returns the product of this function with the one specified.                
                <param>
                    that the function multiplier.                    
                </param>
                <return>
                    <code>this · that</code>.                    
                </return>
            </javadoc>
            <method name="times" type="Function<X,Y>" line="266">
                <params>
                    <param name="that" type="Function<X,Y>"/>
                </params>
            </method>
            <javadoc line="270">
                Returns the quotient of this function with the one specified.
                  Evaluation of this function may raise an exception if the 
                  function result is not a {                
                <param>
                    that the function divisor.                    
                </param>
                <return>
                    <code>this / that</code>.                    
                </return>
            </javadoc>
            <method name="divide" type="Function<X,Y>" line="279">
                <params>
                    <param name="that" type="Function<X,Y>"/>
                </params>
                <scope line="280">
                    <declaration name="thatInverse" type="Function" line="281"/>
                </scope>
            </method>
            <javadoc line="288">
                Returns this function raised at the specified exponent.                
                <param>
                    n the exponent.                    
                </param>
                <return>
                    <code>this<sup>n</sup></code>                    
                </return>
                <throws>
                    IllegalArgumentException if <code>n &lt;= 0</code>                    
                </throws>
            </javadoc>
            <method name="pow" type="Function<X,Y>" line="295">
                <params>
                    <param name="n" type="int"/>
                </params>
                <comment line="301">
                    Iteration.                    
                </comment>
                <declaration name="pow2" type="Function&lt;X,Y&gt;" line="299"/>
                <declaration name="result" type="Function&lt;X,Y&gt;" line="300"/>
                <scope line="301">
                    <scope line="302"/>
                </scope>
            </method>
            <method name="toText" type="Text" line="310"/>
            <javadoc line="310">
                Returns the textual representation of this real-time object
                  (equivalent to &lt;code&gt;toString&lt;/code&gt; except that the returned value
                  can be allocated from the local context space).                
                <return>
                    this object's textual representation.                    
                </return>
            </javadoc>
            <javadoc line="319">
                Returns the text representation of this function as a 
                  &lt;code&gt;java.lang.String&lt;/code&gt;.                
                <return>
                    <code>toText().toString()</code>                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="325"/>
            <method name="merge" type="List" line="331">
                <params>
                    <param name="left" type="List"/>
                    <param name="right" type="List"/>
                </params>
                <declaration name="result" type="FastList" line="336"/>
                <declaration name="iLeft" type="Iterator" line="337"/>
                <declaration name="iRight" type="Iterator" line="338"/>
                <declaration name="l" type="Variable" line="339"/>
                <declaration name="r" type="Variable" line="340"/>
                <scope line="341">
                    <scope line="342">
                        <scope line="343"/>
                    </scope>
                    <scope line="348">
                        <scope line="349"/>
                    </scope>
                    <scope line="356"/>
                    <declaration name="comp" type="int" line="362"/>
                    <scope line="363"/>
                    <scope line="368"/>
                </scope>
            </method>
            <class name="Compose" line="378">
                <extends class="Function"/>
                <declaration name="FACTORY" type="ObjectFactory&lt;Compose&gt;" line="380"/>
                <anonymous_class line="380">
                    <method name="create" type="Compose" line="382"/>
                    <method name="cleanup" type="void" line="386">
                        <params>
                            <param name="compose" type="Compose"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="_f" type="Function" line="392"/>
                <declaration name="_g" type="Function" line="394"/>
                <method name="newInstance" type="Function<X,Y>" line="397">
                    <params>
                        <param name="f" type="Function"/>
                        <param name="g" type="Function"/>
                    </params>
                    <declaration name="compose" type="Compose" line="398"/>
                </method>
                <method name="getVariables" type="List" line="405"/>
                <method name="evaluate" type="Object" line="411"/>
                <method name="differentiate" type="Function" line="416">
                    <params>
                        <param name="v" type="Variable"/>
                    </params>
                    <comment line="417">
                        Chain rule: http://en.wikipedia.org/wiki/Chain_rule                        
                    </comment>
                    <declaration name="fd" type="Function" line="418"/>
                    <declaration name="gd" type="Function" line="419"/>
                </method>
                <method name="toText" type="Text" line="423"/>
                <method name="equals" type="boolean" line="429">
                    <params>
                        <param name="obj" type="Object"/>
                    </params>
                    <declaration name="that" type="Compose" line="432"/>
                </method>
                <method name="hashCode" type="int" line="437"/>
                <declaration name="serialVersionUID" type="long" line="441"/>
            </class>
            <class name="Derivative" line="446">
                <extends class="Function"/>
                <declaration name="FACTORY" type="ObjectFactory&lt;Derivative&gt;" line="448"/>
                <anonymous_class line="448">
                    <method name="create" type="Derivative" line="450"/>
                    <method name="cleanup" type="void" line="454">
                        <params>
                            <param name="derivative" type="Derivative"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="_f" type="Function" line="460"/>
                <declaration name="_v" type="Variable" line="462"/>
                <method name="newInstance" type="Function<X,Y>" line="465">
                    <params>
                        <param name="f" type="Function"/>
                        <param name="v" type="Variable"/>
                    </params>
                    <declaration name="derivative" type="Derivative" line="466"/>
                </method>
                <method name="getVariables" type="List" line="473"/>
                <method name="evaluate" type="Object" line="478"/>
                <method name="toText" type="Text" line="482"/>
                <method name="equals" type="boolean" line="488">
                    <params>
                        <param name="obj" type="Object"/>
                    </params>
                    <declaration name="that" type="Derivative" line="491"/>
                </method>
                <method name="hashCode" type="int" line="496"/>
                <declaration name="serialVersionUID" type="long" line="500"/>
            </class>
            <class name="Integral" line="504">
                <extends class="Function"/>
                <declaration name="FACTORY" type="ObjectFactory&lt;Integral&gt;" line="506"/>
                <anonymous_class line="506">
                    <method name="create" type="Integral" line="508"/>
                    <method name="cleanup" type="void" line="512">
                        <params>
                            <param name="integral" type="Integral"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="_f" type="Function" line="518"/>
                <declaration name="_v" type="Variable" line="520"/>
                <method name="newInstance" type="Function<X,Y>" line="523">
                    <params>
                        <param name="f" type="Function"/>
                        <param name="v" type="Variable"/>
                    </params>
                    <declaration name="integral" type="Integral" line="524"/>
                </method>
                <method name="getVariables" type="List" line="531"/>
                <method name="evaluate" type="Object" line="536"/>
                <method name="toText" type="Text" line="540"/>
                <method name="equals" type="boolean" line="546">
                    <params>
                        <param name="obj" type="Object"/>
                    </params>
                    <declaration name="that" type="Integral" line="549"/>
                </method>
                <method name="hashCode" type="int" line="554"/>
                <declaration name="serialVersionUID" type="long" line="558"/>
            </class>
            <class name="Plus" line="562">
                <extends class="Function"/>
                <declaration name="FACTORY" type="ObjectFactory&lt;Plus&gt;" line="564"/>
                <anonymous_class line="564">
                    <method name="create" type="Plus" line="566"/>
                    <method name="cleanup" type="void" line="570">
                        <params>
                            <param name="plus" type="Plus"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="_f" type="Function" line="576"/>
                <method name="newInstance" type="Function<X,Y>" line="579">
                    <params>
                        <param name="f" type="Function"/>
                        <param name="g" type="Function"/>
                    </params>
                    <declaration name="plus" type="Plus" line="580"/>
                </method>
                <method name="getVariables" type="List" line="587"/>
                <method name="evaluate" type="Object" line="593">
                    <declaration name="y2" type="Object" line="594"/>
                    <declaration name="y1" type="Object" line="595"/>
                </method>
                <method name="differentiate" type="Function" line="605">
                    <params>
                        <param name="v" type="Variable"/>
                    </params>
                </method>
                <method name="integrate" type="Function" line="611">
                    <params>
                        <param name="v" type="Variable"/>
                    </params>
                </method>
                <method name="toText" type="Text" line="615"/>
                <method name="equals" type="boolean" line="621">
                    <params>
                        <param name="obj" type="Object"/>
                    </params>
                    <declaration name="that" type="Plus" line="624"/>
                </method>
                <method name="hashCode" type="int" line="629"/>
                <declaration name="serialVersionUID" type="long" line="633"/>
            </class>
            <class name="Minus" line="637">
                <extends class="Function"/>
                <declaration name="FACTORY" type="ObjectFactory&lt;Minus&gt;" line="639"/>
                <anonymous_class line="639">
                    <method name="create" type="Minus" line="641"/>
                    <method name="cleanup" type="void" line="645">
                        <params>
                            <param name="minus" type="Minus"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="_f" type="Function" line="651"/>
                <method name="newInstance" type="Function<X,Y>" line="654">
                    <params>
                        <param name="f" type="Function"/>
                        <param name="g" type="Function"/>
                    </params>
                    <declaration name="minus" type="Minus" line="655"/>
                </method>
                <method name="getVariables" type="List" line="662"/>
                <method name="evaluate" type="Object" line="668">
                    <declaration name="y2" type="Object" line="669"/>
                    <declaration name="y1" type="Object" line="675"/>
                </method>
                <method name="differentiate" type="Function" line="685">
                    <params>
                        <param name="v" type="Variable"/>
                    </params>
                </method>
                <method name="integrate" type="Function" line="691">
                    <params>
                        <param name="v" type="Variable"/>
                    </params>
                </method>
                <method name="toText" type="Text" line="695"/>
                <method name="equals" type="boolean" line="701">
                    <params>
                        <param name="obj" type="Object"/>
                    </params>
                    <declaration name="that" type="Minus" line="704"/>
                </method>
                <method name="hashCode" type="int" line="709"/>
                <declaration name="serialVersionUID" type="long" line="713"/>
            </class>
            <class name="Times" line="717">
                <extends class="Function"/>
                <declaration name="FACTORY" type="ObjectFactory&lt;Times&gt;" line="719"/>
                <anonymous_class line="719">
                    <method name="create" type="Times" line="721"/>
                    <method name="cleanup" type="void" line="725">
                        <params>
                            <param name="times" type="Times"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="_f" type="Function" line="731"/>
                <method name="newInstance" type="Function<X,Y>" line="734">
                    <params>
                        <param name="f" type="Function"/>
                        <param name="g" type="Function"/>
                    </params>
                    <declaration name="times" type="Times" line="735"/>
                </method>
                <method name="getVariables" type="List" line="742"/>
                <method name="evaluate" type="Object" line="748">
                    <declaration name="y2" type="Object" line="749"/>
                    <declaration name="y1" type="Object" line="750"/>
                </method>
                <method name="differentiate" type="Function" line="760">
                    <params>
                        <param name="v" type="Variable"/>
                    </params>
                    <comment line="761">
                        Product rule: http://en.wikipedia.org/wiki/Product_rule                        
                    </comment>
                    <comment line="762">
                        (support for non-commutative multiplications).                        
                    </comment>
                    <comment line="763">
                        r&apos; = d(f·g) = f&apos;g + fg&apos;                        
                    </comment>
                    <declaration name="fd" type="Function" line="764"/>
                    <declaration name="gd" type="Function" line="765"/>
                </method>
                <method name="toText" type="Text" line="769"/>
                <method name="equals" type="boolean" line="775">
                    <params>
                        <param name="obj" type="Object"/>
                    </params>
                    <declaration name="that" type="Times" line="778"/>
                </method>
                <method name="hashCode" type="int" line="783"/>
                <declaration name="serialVersionUID" type="long" line="787"/>
            </class>
            <class name="Divide" line="791">
                <extends class="Function"/>
                <declaration name="FACTORY" type="ObjectFactory&lt;Divide&gt;" line="793"/>
                <anonymous_class line="793">
                    <method name="create" type="Divide" line="795"/>
                    <method name="cleanup" type="void" line="799">
                        <params>
                            <param name="divide" type="Divide"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="_f" type="Function" line="805"/>
                <method name="newInstance" type="Function<X,Y>" line="808">
                    <params>
                        <param name="f" type="Function"/>
                        <param name="g" type="Function"/>
                    </params>
                    <declaration name="divide" type="Divide" line="809"/>
                </method>
                <method name="getVariables" type="List" line="816"/>
                <method name="evaluate" type="Object" line="822">
                    <declaration name="y2" type="Object" line="823"/>
                    <declaration name="y1" type="Object" line="828"/>
                </method>
                <method name="differentiate" type="Function" line="838">
                    <params>
                        <param name="v" type="Variable"/>
                    </params>
                    <comment line="839">
                        Quotient rule: http://en.wikipedia.org/wiki/Quotient_rule                        
                    </comment>
                    <comment line="840">
                        with support for non-commutative multiplications.                        
                    </comment>
                    <comment line="841">
                        r = f/g,  rg = f, r&apos;g + rg&apos; = f&apos; (produt rule)                        
                    </comment>
                    <comment line="842">
                        r&apos; = (f&apos; - rg&apos;)/g, r&apos; = (f&apos; - (f/g)g&apos;)/g                        
                    </comment>
                    <declaration name="fd" type="Function" line="843"/>
                    <declaration name="gd" type="Function" line="844"/>
                </method>
                <method name="toText" type="Text" line="848"/>
                <method name="equals" type="boolean" line="854">
                    <params>
                        <param name="obj" type="Object"/>
                    </params>
                    <declaration name="that" type="Divide" line="857"/>
                </method>
                <method name="hashCode" type="int" line="862"/>
                <declaration name="serialVersionUID" type="long" line="866"/>
            </class>
        </class>
    </source>