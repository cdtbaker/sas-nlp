<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.jscience.mathematics.function">
        <import package="java.io.Serializable"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="org.jscience.mathematics.structure.GroupAdditive"/>
        <import package="org.jscience.mathematics.structure.GroupMultiplicative"/>
        <import package="javolution.context.LocalContext"/>
        <import package="javolution.context.ObjectFactory"/>
        <import package="javolution.util.FastList"/>
        <import package="javolution.lang.Realtime"/>
        <import package="javolution.text.Text"/>
        <import package="javolution.text.TextBuilder"/>
        <class name="Function" line="13">
            <type_params>
                <type_param name="X"/>
                <type_param name="Y"/>
            </type_params>
            <implements interface="Serializable"/>
            <implements interface="Realtime"/>
            <javadoc line="13">
                &lt;p&gt; This abstract class represents a mapping between two sets such that
                  there is a unique element in the second set assigned to each element
                  in the first set.&lt;/p&gt;
                  &lt;p&gt; Functions can be discrete or continuous and multivariate functions 
                  (functions with multiple variables) are also supported as illustrated 
                  below:[code]
                  // Defines local variables.
                  Variable.Local&lt;Rational&gt; varX = new Variable.Local&lt;Rational&gt;(&quot;x&quot;);
                  Variable.Local&lt;Rational&gt; varY = new Variable.Local&lt;Rational&gt;(&quot;y&quot;);
                  // f(x, y) =  x² + x·y + 1;
                  Polynomial&lt;Rational&gt; x = Polynomial.valueOf(Rational.ONE, varX);
                  Polynomial&lt;Rational&gt; y = Polynomial.valueOf(Rational.ONE, varY);
                  Polynomial&lt;Rational&gt; fx_y = x.pow(2).plus(x.times(y)).plus(Rational.ONE);
                  System.out.println(&quot;f(x,y) = &quot; + fx_y);
                  // Evaluates f(1,0) 
                  System.out.println(&quot;f(1,0) = &quot; + fx_y.evaluate(Rational.ONE, Rational.ZERO));
                  // Calculates df(x,y)/dx
                  System.out.println(&quot;df(x,y)/dx = &quot; + fx_y.differentiate(varX));
                  &gt; f(x,y) = [1/1]x^2 + [1/1]xy + [1/1]
                  &gt; f(1,0) = 2/1
                  &gt; df(x,y)/dx = [2/1]x + [1/1]y
                  [/code]&lt;/p&gt;
                  &lt;p&gt; Functions are often given by formula (e.g. &lt;code&gt;f(x) = x²-x+1,
                  f(x,y)= x·y&lt;/code&gt;) but the general function instance might tabulate
                  the values, solve an equation, etc.&lt;/p&gt;                
                <author>
                    <a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a>                    
                </author>
                <version>
                    3.1, April 1, 2006                    
                </version>
                <see>
                    <a href="http://en.wikipedia.org/wiki/Function_%28mathematics%29">
                           Wikipedia: Functions (mathematics)</a>                    
                </see>
            </javadoc>
            <javadoc line="45">
                Default constructor.                
            </javadoc>
            <method name="Function" type="constructor" line="48"/>
            <method name="getVariables" type="List<Variable<X>>" line="50"/>
            <javadoc line="50">
                Returns a lexically ordered list of the variables (or arguments)
                  for this function (empty list for constant functions).                
                <return>
                    this function current unset variables (sorted).                    
                </return>
            </javadoc>
            <method name="evaluate" type="Y" line="56"/>
            <javadoc line="56">
                Evaluates this function using its {@link Variable variables} current
                  values.                
                <return>
                    the evaluation of this function.                    
                </return>
                <throws>
                    FunctionException if any of this function's variable is not set.                    
                </throws>
            </javadoc>
            <javadoc line="63">
                Indicates if this function is equals to the specified object.                
                <param>
                    obj the object to be compared with.                    
                </param>
                <return>
                    <code>true</code> if this function and the specified argument
                      represent the same function; <code>false</code> otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="69">
                <params>
                    <param name="obj" type="Object"/>
                </params>
            </method>
            <javadoc line="72">
                Returns the hash code for this function (consistent with {@link #equals(Object)}.                
                <return>
                    this function hash code.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="76"/>
            <javadoc line="79">
                Retrieves the variable from this function having the specified 
                  symbol (convenience method).                
                <return>
                    the variable having the specified symbol or <code>null</code>
                      if none.                    
                </return>
            </javadoc>
            <method name="getVariable" type="Variable<X>" line="85">
                <params>
                    <param name="symbol" type="String"/>
                </params>
                <scope line="86"/>
            </method>
            <javadoc line="91">
                Evaluates this function for the specified argument value
                  (convenience method). The evaluation is performed 
                  in a {@link javolution.context.LocalContext LocalContext} and 
                  can safely be called upon functions with {@link Variable.Global global
                  variables}.                
                <param>
                    arg the single variable value used for the evaluation.                    
                </param>
                <return>
                    the evaluation of this function.                    
                </return>
                <throws>
                    FunctionException if <code>getVariables().size() != 1</code>                    
                </throws>
            </javadoc>
            <method name="evaluate" type="Y" line="101">
                <params>
                    <param name="arg" type="X"/>
                </params>
                <declaration name="vars" type="List&lt;Variable&lt;X&gt;&gt;" line="102"/>
                <declaration name="x" type="Variable&lt;X&gt;" line="104"/>
                <declaration name="prev" type="X" line="105"/>
                <scope line="107"/>
                <scope line="111"/>
            </method>
            <javadoc line="116">
                Evaluates this function for the specified arguments values
                  (convenience method). The evaluation is performed 
                  in a {@link javolution.context.LocalContext LocalContext} and 
                  can safely be called upon functions with {@link Variable.Global global
                  variables}.                
                <param>
                    args the variables values used for the evaluation.                    
                </param>
                <return>
                    the evaluation of this function.                    
                </return>
                <throws>
                    IllegalArgumentException 
                      if <code>args.length != getVariables().size())</code>                    
                </throws>
            </javadoc>
            <method name="evaluate" type="Y" line="127">
                <params>
                    <param name="args" type="X"/>
                </params>
                <declaration name="vars" type="List&lt;Variable&lt;X&gt;&gt;" line="128"/>
                <scope line="131"/>
                <scope line="134"/>
            </method>
            <method name="evaluate" type="Y" line="138">
                <params>
                    <param name="args" type="X[]"/>
                    <param name="vars" type="List<Variable<X>>"/>
                    <param name="i" type="int"/>
                </params>
                <scope line="139">
                    <declaration name="var" type="Variable&lt;X&gt;" line="140"/>
                    <declaration name="prev" type="X" line="141"/>
                    <scope line="143"/>
                    <scope line="146"/>
                </scope>
                <scope line="150"/>
            </method>
            <javadoc line="154">
                Returns the composition of this function with the one specified.                
                <param>
                    that the function for which the return value is passed as
                      argument to this function.                    
                </param>
                <return>
                    the function <code>(this o that)</code>                    
                </return>
                <throws>
                    FunctionException if this function is not monovariate.                    
                </throws>
            </javadoc>
            <method name="compose" type="Function<Z,Y>" line="161">
                <params>
                    <param name="that" type="Function<Z,X>"/>
                </params>
            </method>
            <javadoc line="165">
                Returns the first derivative of this function with respect to 
                  the specified variable.                
                <param>
                    v the variable for which the derivative is calculated.                    
                </param>
                <return>
                    <code>d[this]/dv</code>                    
                </return>
                <see>
                    <a href="http://mathworld.wolfram.com/Derivative.html">
                               Derivative -- from MathWorld</a>                    
                </see>
                <throws>
                    FunctionException if the derivative is undefined.                    
                </throws>
            </javadoc>
            <method name="differentiate" type="Function<X,Y>" line="174">
                <params>
                    <param name="v" type="Variable<X>"/>
                </params>
            </method>
            <javadoc line="177">
                Returns an integral of this function with respect to 
                  the specified variable.                
                <param>
                    v the variable for which the integral is calculated.                    
                </param>
                <return>
                    <code>S[this·dv]</code>                    
                </return>
                <see>
                    <a href="http://mathworld.wolfram.com/Integral.html">
                               Integral -- from MathWorld</a>                    
                </see>
            </javadoc>
            <method name="integrate" type="Function<X,Y>" line="185">
                <params>
                    <param name="v" type="Variable<X>"/>
                </params>
            </method>
            <javadoc line="188">
                Returns the sum of this function with the one specified.                
                <param>
                    that the function to be added.                    
                </param>
                <return>
                    <code>this + that</code>.                    
                </return>
            </javadoc>
            <method name="plus" type="Function<X,Y>" line="193">
                <params>
                    <param name="that" type="Function<X,Y>"/>
                </params>
            </method>
            <javadoc line="196">
                Returns the difference of this function with the one specified.                
                <param>
                    that the function to be subtracted.                    
                </param>
                <return>
                    <code>this - that</code>.                    
                </return>
            </javadoc>
            <method name="minus" type="Function<X,Y>" line="201">
                <params>
                    <param name="that" type="Function<X,Y>"/>
                </params>
                <scope line="202">
                    <declaration name="thatOpposite" type="Function" line="203"/>
                </scope>
            </method>
            <javadoc line="208">
                Returns the product of this function with the one specified.                
                <param>
                    that the function multiplier.                    
                </param>
                <return>
                    <code>this · that</code>.                    
                </return>
            </javadoc>
            <method name="times" type="Function<X,Y>" line="213">
                <params>
                    <param name="that" type="Function<X,Y>"/>
                </params>
            </method>
            <javadoc line="216">
                Returns the quotient of this function with the one specified.
                  Evaluation of this function may raise an exception if the 
                  function result is not a {                
                <param>
                    that the function divisor.                    
                </param>
                <return>
                    <code>this / that</code>.                    
                </return>
            </javadoc>
            <method name="divide" type="Function<X,Y>" line="223">
                <params>
                    <param name="that" type="Function<X,Y>"/>
                </params>
                <scope line="224">
                    <declaration name="thatInverse" type="Function" line="225"/>
                </scope>
            </method>
            <javadoc line="230">
                Returns this function raised at the specified exponent.                
                <param>
                    n the exponent.                    
                </param>
                <return>
                    <code>this<sup>n</sup></code>                    
                </return>
                <throws>
                    IllegalArgumentException if <code>n &lt;= 0</code>                    
                </throws>
            </javadoc>
            <method name="pow" type="Function<X,Y>" line="236">
                <params>
                    <param name="n" type="int"/>
                </params>
                <declaration name="pow2" type="Function&lt;X,Y&gt;" line="238"/>
                <declaration name="result" type="Function&lt;X,Y&gt;" line="239"/>
                <scope line="240">
                    <scope line="241"/>
                </scope>
            </method>
            <method name="toText" type="Text" line="249"/>
            <javadoc line="249">
                Returns the textual representation of this real-time object
                  (equivalent to &lt;code&gt;toString&lt;/code&gt; except that the returned value
                  can be allocated from the local context space).                
                <return>
                    this object's textual representation.                    
                </return>
            </javadoc>
            <javadoc line="256">
                Returns the text representation of this function as a 
                  &lt;code&gt;java.lang.String&lt;/code&gt;.                
                <return>
                    <code>toText().toString()</code>                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="261"/>
            <method name="merge" type="List" line="264">
                <params>
                    <param name="left" type="List"/>
                    <param name="right" type="List"/>
                </params>
                <declaration name="result" type="FastList" line="267"/>
                <declaration name="iLeft" type="Iterator" line="268"/>
                <declaration name="iRight" type="Iterator" line="269"/>
                <declaration name="l" type="Variable" line="270"/>
                <declaration name="r" type="Variable" line="271"/>
                <scope line="272">
                    <scope line="273">
                        <scope line="274"/>
                    </scope>
                    <scope line="279">
                        <scope line="280"/>
                    </scope>
                    <scope line="287"/>
                    <declaration name="comp" type="int" line="293"/>
                    <scope line="294"/>
                    <scope line="299"/>
                </scope>
            </method>
            <class name="Compose" line="307">
                <extends class="Function"/>
                <declaration name="FACTORY" type="ObjectFactory&lt;Compose&gt;" line="308"/>
                <anonymous_class line="308">
                    <method name="create" type="Compose" line="309"/>
                    <method name="cleanup" type="void" line="312">
                        <params>
                            <param name="compose" type="Compose"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="_f" type="Function" line="318"/>
                <declaration name="_g" type="Function" line="319"/>
                <method name="newInstance" type="Function<X,Y>" line="320">
                    <params>
                        <param name="f" type="Function"/>
                        <param name="g" type="Function"/>
                    </params>
                    <declaration name="compose" type="Compose" line="321"/>
                </method>
                <method name="getVariables" type="List" line="326"/>
                <method name="evaluate" type="Object" line="329"/>
                <method name="differentiate" type="Function" line="332">
                    <params>
                        <param name="v" type="Variable"/>
                    </params>
                    <declaration name="fd" type="Function" line="333"/>
                    <declaration name="gd" type="Function" line="334"/>
                </method>
                <method name="toText" type="Text" line="337"/>
                <method name="equals" type="boolean" line="340">
                    <params>
                        <param name="obj" type="Object"/>
                    </params>
                    <declaration name="that" type="Compose" line="342"/>
                </method>
                <method name="hashCode" type="int" line="345"/>
                <declaration name="serialVersionUID" type="long" line="348"/>
            </class>
            <class name="Derivative" line="350">
                <extends class="Function"/>
                <declaration name="FACTORY" type="ObjectFactory&lt;Derivative&gt;" line="351"/>
                <anonymous_class line="351">
                    <method name="create" type="Derivative" line="352"/>
                    <method name="cleanup" type="void" line="355">
                        <params>
                            <param name="derivative" type="Derivative"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="_f" type="Function" line="361"/>
                <declaration name="_v" type="Variable" line="362"/>
                <method name="newInstance" type="Function<X,Y>" line="363">
                    <params>
                        <param name="f" type="Function"/>
                        <param name="v" type="Variable"/>
                    </params>
                    <declaration name="derivative" type="Derivative" line="364"/>
                </method>
                <method name="getVariables" type="List" line="369"/>
                <method name="evaluate" type="Object" line="372"/>
                <method name="toText" type="Text" line="375"/>
                <method name="equals" type="boolean" line="378">
                    <params>
                        <param name="obj" type="Object"/>
                    </params>
                    <declaration name="that" type="Derivative" line="380"/>
                </method>
                <method name="hashCode" type="int" line="383"/>
                <declaration name="serialVersionUID" type="long" line="386"/>
            </class>
            <class name="Integral" line="388">
                <extends class="Function"/>
                <declaration name="FACTORY" type="ObjectFactory&lt;Integral&gt;" line="389"/>
                <anonymous_class line="389">
                    <method name="create" type="Integral" line="390"/>
                    <method name="cleanup" type="void" line="393">
                        <params>
                            <param name="integral" type="Integral"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="_f" type="Function" line="399"/>
                <declaration name="_v" type="Variable" line="400"/>
                <method name="newInstance" type="Function<X,Y>" line="401">
                    <params>
                        <param name="f" type="Function"/>
                        <param name="v" type="Variable"/>
                    </params>
                    <declaration name="integral" type="Integral" line="402"/>
                </method>
                <method name="getVariables" type="List" line="407"/>
                <method name="evaluate" type="Object" line="410"/>
                <method name="toText" type="Text" line="413"/>
                <method name="equals" type="boolean" line="416">
                    <params>
                        <param name="obj" type="Object"/>
                    </params>
                    <declaration name="that" type="Integral" line="418"/>
                </method>
                <method name="hashCode" type="int" line="421"/>
                <declaration name="serialVersionUID" type="long" line="424"/>
            </class>
            <class name="Plus" line="426">
                <extends class="Function"/>
                <declaration name="FACTORY" type="ObjectFactory&lt;Plus&gt;" line="427"/>
                <anonymous_class line="427">
                    <method name="create" type="Plus" line="428"/>
                    <method name="cleanup" type="void" line="431">
                        <params>
                            <param name="plus" type="Plus"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="_f" type="Function" line="437"/>
                <method name="newInstance" type="Function<X,Y>" line="438">
                    <params>
                        <param name="f" type="Function"/>
                        <param name="g" type="Function"/>
                    </params>
                    <declaration name="plus" type="Plus" line="439"/>
                </method>
                <method name="getVariables" type="List" line="444"/>
                <method name="evaluate" type="Object" line="447">
                    <declaration name="y2" type="Object" line="448"/>
                    <declaration name="y1" type="Object" line="449"/>
                </method>
                <method name="differentiate" type="Function" line="453">
                    <params>
                        <param name="v" type="Variable"/>
                    </params>
                </method>
                <method name="integrate" type="Function" line="456">
                    <params>
                        <param name="v" type="Variable"/>
                    </params>
                </method>
                <method name="toText" type="Text" line="459"/>
                <method name="equals" type="boolean" line="462">
                    <params>
                        <param name="obj" type="Object"/>
                    </params>
                    <declaration name="that" type="Plus" line="464"/>
                </method>
                <method name="hashCode" type="int" line="467"/>
                <declaration name="serialVersionUID" type="long" line="470"/>
            </class>
            <class name="Minus" line="472">
                <extends class="Function"/>
                <declaration name="FACTORY" type="ObjectFactory&lt;Minus&gt;" line="473"/>
                <anonymous_class line="473">
                    <method name="create" type="Minus" line="474"/>
                    <method name="cleanup" type="void" line="477">
                        <params>
                            <param name="minus" type="Minus"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="_f" type="Function" line="483"/>
                <method name="newInstance" type="Function<X,Y>" line="484">
                    <params>
                        <param name="f" type="Function"/>
                        <param name="g" type="Function"/>
                    </params>
                    <declaration name="minus" type="Minus" line="485"/>
                </method>
                <method name="getVariables" type="List" line="490"/>
                <method name="evaluate" type="Object" line="493">
                    <declaration name="y2" type="Object" line="494"/>
                    <declaration name="y1" type="Object" line="497"/>
                </method>
                <method name="differentiate" type="Function" line="501">
                    <params>
                        <param name="v" type="Variable"/>
                    </params>
                </method>
                <method name="integrate" type="Function" line="504">
                    <params>
                        <param name="v" type="Variable"/>
                    </params>
                </method>
                <method name="toText" type="Text" line="507"/>
                <method name="equals" type="boolean" line="510">
                    <params>
                        <param name="obj" type="Object"/>
                    </params>
                    <declaration name="that" type="Minus" line="512"/>
                </method>
                <method name="hashCode" type="int" line="515"/>
                <declaration name="serialVersionUID" type="long" line="518"/>
            </class>
            <class name="Times" line="520">
                <extends class="Function"/>
                <declaration name="FACTORY" type="ObjectFactory&lt;Times&gt;" line="521"/>
                <anonymous_class line="521">
                    <method name="create" type="Times" line="522"/>
                    <method name="cleanup" type="void" line="525">
                        <params>
                            <param name="times" type="Times"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="_f" type="Function" line="531"/>
                <method name="newInstance" type="Function<X,Y>" line="532">
                    <params>
                        <param name="f" type="Function"/>
                        <param name="g" type="Function"/>
                    </params>
                    <declaration name="times" type="Times" line="533"/>
                </method>
                <method name="getVariables" type="List" line="538"/>
                <method name="evaluate" type="Object" line="541">
                    <declaration name="y2" type="Object" line="542"/>
                    <declaration name="y1" type="Object" line="543"/>
                </method>
                <method name="differentiate" type="Function" line="547">
                    <params>
                        <param name="v" type="Variable"/>
                    </params>
                    <declaration name="fd" type="Function" line="548"/>
                    <declaration name="gd" type="Function" line="549"/>
                </method>
                <method name="toText" type="Text" line="552"/>
                <method name="equals" type="boolean" line="555">
                    <params>
                        <param name="obj" type="Object"/>
                    </params>
                    <declaration name="that" type="Times" line="557"/>
                </method>
                <method name="hashCode" type="int" line="560"/>
                <declaration name="serialVersionUID" type="long" line="563"/>
            </class>
            <class name="Divide" line="565">
                <extends class="Function"/>
                <declaration name="FACTORY" type="ObjectFactory&lt;Divide&gt;" line="566"/>
                <anonymous_class line="566">
                    <method name="create" type="Divide" line="567"/>
                    <method name="cleanup" type="void" line="570">
                        <params>
                            <param name="divide" type="Divide"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="_f" type="Function" line="576"/>
                <method name="newInstance" type="Function<X,Y>" line="577">
                    <params>
                        <param name="f" type="Function"/>
                        <param name="g" type="Function"/>
                    </params>
                    <declaration name="divide" type="Divide" line="578"/>
                </method>
                <method name="getVariables" type="List" line="583"/>
                <method name="evaluate" type="Object" line="586">
                    <declaration name="y2" type="Object" line="587"/>
                    <declaration name="y1" type="Object" line="590"/>
                </method>
                <method name="differentiate" type="Function" line="594">
                    <params>
                        <param name="v" type="Variable"/>
                    </params>
                    <declaration name="fd" type="Function" line="595"/>
                    <declaration name="gd" type="Function" line="596"/>
                </method>
                <method name="toText" type="Text" line="599"/>
                <method name="equals" type="boolean" line="602">
                    <params>
                        <param name="obj" type="Object"/>
                    </params>
                    <declaration name="that" type="Divide" line="604"/>
                </method>
                <method name="hashCode" type="int" line="607"/>
                <declaration name="serialVersionUID" type="long" line="610"/>
            </class>
        </class>
    </source>