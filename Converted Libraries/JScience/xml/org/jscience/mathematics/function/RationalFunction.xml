<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.jscience.mathematics.function">
        <import package="java.util.List"/>
        <import package="org.jscience.mathematics.structure.Field"/>
        <import package="javolution.context.ObjectFactory"/>
        <import package="javolution.text.Text"/>
        <import package="javolution.text.TextBuilder"/>
        <class name="RationalFunction" line="18">
            <type_params>
                <type_param name="F"/>
            </type_params>
            <extends class="Function">
                <type_params>
                    <type_param name="F"/>
                    <type_param name="F"/>
                </type_params>
            </extends>
            <comment line="29">
                Holds the factory for rational functions.                
            </comment>
            <comment line="196">
                ////////////////////////////////////////////////////////////////////
                 Overrides parent method potentially returning rational functions                
            </comment>
            <implements interface="Field">
                <type_params>
                    <type_param name="RationalFunction<F>"/>
                </type_params>
            </implements>
            <javadoc line="18">
                This class represents the quotient of two {@link Polynomial}, 
                  it is also a {@link Field field} (invertible).                
                <author>
                    &lt;a href=&quot;mailto:jean-marie@dautelle.com&quot;&gt;Jean-Marie Dautelle&lt;/a&gt;                    
                </author>
                <version>
                    3.1, April 1, 2006                    
                </version>
            </javadoc>
            <declaration name="_dividend" type="Polynomial&lt;F&gt;" line="31"/>
            <javadoc line="31">
                Holds the dividend.                
            </javadoc>
            <declaration name="_divisor" type="Polynomial&lt;F&gt;" line="36"/>
            <javadoc line="36">
                Holds the divisor.                
            </javadoc>
            <javadoc line="41">
                Default constructor.                
            </javadoc>
            <method name="RationalFunction" type="constructor" line="44"/>
            <javadoc line="47">
                Returns the dividend of this rational function.                
                <return>
                    this rational function dividend.                    
                </return>
            </javadoc>
            <method name="getDividend" type="Polynomial<F>" line="52"/>
            <javadoc line="56">
                Returns the divisor of this rational function.                
                <return>
                    this rational function divisor.                    
                </return>
            </javadoc>
            <method name="getDivisor" type="Polynomial<F>" line="61"/>
            <javadoc line="65">
                Returns the rational function from the specified dividend and divisor.                
                <param>
                    dividend the dividend value.                    
                </param>
                <param>
                    divisor the divisor value.                    
                </param>
                <return>
                    &lt;code&gt;dividend / divisor&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="valueOf" type="RationalFunction<F>" line="74">
                <params>
                    <param name="dividend" type="Polynomial<F>"/>
                    <param name="divisor" type="Polynomial<F>"/>
                </params>
                <declaration name="rf" type="RationalFunction&lt;F&gt;" line="75"/>
            </method>
            <declaration name="FACTORY" type="ObjectFactory&lt;RationalFunction&gt;" line="81"/>
            <anonymous_class line="82">
                <method name="create" type="RationalFunction" line="84"/>
                <method name="cleanup" type="void" line="89">
                    <params>
                        <param name="rf" type="RationalFunction"/>
                    </params>
                </method>
            </anonymous_class>
            <javadoc line="95">
                Returns the sum of two rational functions.                
                <param>
                    that the rational function being added.                    
                </param>
                <return>
                    &lt;code&gt;this + that&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="plus" type="RationalFunction<F>" line="101">
                <params>
                    <param name="that" type="RationalFunction<F>"/>
                </params>
            </method>
            <javadoc line="107">
                Returns the opposite of this rational function.                
                <return>
                    &lt;code&gt;- this&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="opposite" type="RationalFunction<F>" line="112"/>
            <javadoc line="116">
                Returns the difference of two rational functions.                
                <param>
                    that the rational function being subtracted.                    
                </param>
                <return>
                    &lt;code&gt;this - that&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="minus" type="RationalFunction<F>" line="122">
                <params>
                    <param name="that" type="RationalFunction<F>"/>
                </params>
            </method>
            <javadoc line="126">
                Returns the product of two rational functions.                
                <param>
                    that the rational function multiplier.                    
                </param>
                <return>
                    &lt;code&gt;this Â· that&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="times" type="RationalFunction<F>" line="132">
                <params>
                    <param name="that" type="RationalFunction<F>"/>
                </params>
            </method>
            <javadoc line="137">
                Returns the inverse of this rational function.                
                <return>
                    &lt;code&gt;1 / this&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="inverse" type="RationalFunction<F>" line="142"/>
            <javadoc line="146">
                Returns the quotient of two rational functions.                
                <param>
                    that the rational function divisor.                    
                </param>
                <return>
                    &lt;code&gt;this / that&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="divide" type="RationalFunction<F>" line="152">
                <params>
                    <param name="that" type="RationalFunction<F>"/>
                </params>
            </method>
            <method name="getVariables" type="List<Variable<F>>" line="158"/>
            <method name="evaluate" type="F" line="164"/>
            <method name="toText" type="Text" line="169">
                <declaration name="tb" type="TextBuilder" line="170"/>
            </method>
            <method name="equals" type="boolean" line="180">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="181">
                    <declaration name="that" type="RationalFunction&lt;?&gt;" line="182"/>
                </scope>
                <scope line="185"/>
            </method>
            <method name="hashCode" type="int" line="191"/>
            <method name="differentiate" type="RationalFunction<F>" line="200">
                <params>
                    <param name="v" type="Variable<F>"/>
                </params>
            </method>
            <method name="plus" type="Function<F,F>" line="208">
                <params>
                    <param name="that" type="Function<F,F>"/>
                </params>
            </method>
            <method name="minus" type="Function<F,F>" line="215">
                <params>
                    <param name="that" type="Function<F,F>"/>
                </params>
            </method>
            <method name="times" type="Function<F,F>" line="222">
                <params>
                    <param name="that" type="Function<F,F>"/>
                </params>
            </method>
            <method name="divide" type="Function<F,F>" line="229">
                <params>
                    <param name="that" type="Function<F,F>"/>
                </params>
            </method>
            <method name="pow" type="RationalFunction<F>" line="236">
                <params>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="241">
                Returns a copy of this rational function. {@link javolution.context.AllocatorContext allocated} 
                  by the calling thread (possibly on the stack).                
                <return>
                    an identical and independant copy of this rational function.                    
                </return>
            </javadoc>
            <method name="copy" type="RationalFunction<F>" line="248"/>
            <declaration name="serialVersionUID" type="long" line="252"/>
        </class>
    </source>