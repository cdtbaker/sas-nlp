<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.jscience.mathematics.function">
        <import package="java.util.List"/>
        <import package="org.jscience.mathematics.structure.Field"/>
        <import package="javolution.context.ObjectFactory"/>
        <import package="javolution.text.Text"/>
        <import package="javolution.text.TextBuilder"/>
        <class name="RationalFunction" line="7">
            <type_params>
                <type_param name="F"/>
            </type_params>
            <extends class="Function">
                <type_params>
                    <type_param name="F"/>
                    <type_param name="F"/>
                </type_params>
            </extends>
            <implements interface="Field">
                <type_params>
                    <type_param name="RationalFunction<F>"/>
                </type_params>
            </implements>
            <javadoc line="7">
                This class represents the quotient of two {@link Polynomial}, 
                  it is also a {@link Field field} (invertible).                
                <author>
                    <a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a>                    
                </author>
                <version>
                    3.1, April 1, 2006                    
                </version>
            </javadoc>
            <declaration name="_dividend" type="Polynomial&lt;F&gt;" line="14"/>
            <javadoc line="14">
                Holds the dividend.                
            </javadoc>
            <declaration name="_divisor" type="Polynomial&lt;F&gt;" line="18"/>
            <javadoc line="18">
                Holds the divisor.                
            </javadoc>
            <javadoc line="22">
                Default constructor.                
            </javadoc>
            <method name="RationalFunction" type="constructor" line="25"/>
            <javadoc line="27">
                Returns the dividend of this rational function.                
                <return>
                    this rational function dividend.                    
                </return>
            </javadoc>
            <method name="getDividend" type="Polynomial<F>" line="31"/>
            <javadoc line="34">
                Returns the divisor of this rational function.                
                <return>
                    this rational function divisor.                    
                </return>
            </javadoc>
            <method name="getDivisor" type="Polynomial<F>" line="38"/>
            <javadoc line="41">
                Returns the rational function from the specified dividend and divisor.                
                <param>
                    dividend the dividend value.                    
                </param>
                <param>
                    divisor the divisor value.                    
                </param>
                <return>
                    <code>dividend / divisor</code>                    
                </return>
            </javadoc>
            <method name="valueOf" type="RationalFunction<F>" line="47">
                <params>
                    <param name="dividend" type="Polynomial<F>"/>
                    <param name="divisor" type="Polynomial<F>"/>
                </params>
                <declaration name="rf" type="RationalFunction&lt;F&gt;" line="48"/>
            </method>
            <declaration name="FACTORY" type="ObjectFactory&lt;RationalFunction&gt;" line="53"/>
            <anonymous_class line="53">
                <method name="create" type="RationalFunction" line="54"/>
                <method name="cleanup" type="void" line="57">
                    <params>
                        <param name="rf" type="RationalFunction"/>
                    </params>
                </method>
            </anonymous_class>
            <javadoc line="63">
                Returns the sum of two rational functions.                
                <param>
                    that the rational function being added.                    
                </param>
                <return>
                    <code>this + that</code>                    
                </return>
            </javadoc>
            <method name="plus" type="RationalFunction<F>" line="68">
                <params>
                    <param name="that" type="RationalFunction<F>"/>
                </params>
            </method>
            <javadoc line="71">
                Returns the opposite of this rational function.                
                <return>
                    <code>- this</code>                    
                </return>
            </javadoc>
            <method name="opposite" type="RationalFunction<F>" line="75"/>
            <javadoc line="78">
                Returns the difference of two rational functions.                
                <param>
                    that the rational function being subtracted.                    
                </param>
                <return>
                    <code>this - that</code>                    
                </return>
            </javadoc>
            <method name="minus" type="RationalFunction<F>" line="83">
                <params>
                    <param name="that" type="RationalFunction<F>"/>
                </params>
            </method>
            <javadoc line="86">
                Returns the product of two rational functions.                
                <param>
                    that the rational function multiplier.                    
                </param>
                <return>
                    <code>this Â· that</code>                    
                </return>
            </javadoc>
            <method name="times" type="RationalFunction<F>" line="91">
                <params>
                    <param name="that" type="RationalFunction<F>"/>
                </params>
            </method>
            <javadoc line="94">
                Returns the inverse of this rational function.                
                <return>
                    <code>1 / this</code>                    
                </return>
            </javadoc>
            <method name="inverse" type="RationalFunction<F>" line="98"/>
            <javadoc line="101">
                Returns the quotient of two rational functions.                
                <param>
                    that the rational function divisor.                    
                </param>
                <return>
                    <code>this / that</code>                    
                </return>
            </javadoc>
            <method name="divide" type="RationalFunction<F>" line="106">
                <params>
                    <param name="that" type="RationalFunction<F>"/>
                </params>
            </method>
            <method name="getVariables" type="List<Variable<F>>" line="109"/>
            <method name="evaluate" type="F" line="112"/>
            <method name="toText" type="Text" line="115">
                <declaration name="tb" type="TextBuilder" line="116"/>
            </method>
            <method name="equals" type="boolean" line="124">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="125">
                    <declaration name="that" type="RationalFunction&lt;?&gt;" line="126"/>
                </scope>
                <scope line="129"/>
            </method>
            <method name="hashCode" type="int" line="133"/>
            <method name="differentiate" type="RationalFunction<F>" line="136">
                <params>
                    <param name="v" type="Variable<F>"/>
                </params>
            </method>
            <method name="plus" type="Function<F,F>" line="139">
                <params>
                    <param name="that" type="Function<F,F>"/>
                </params>
            </method>
            <method name="minus" type="Function<F,F>" line="142">
                <params>
                    <param name="that" type="Function<F,F>"/>
                </params>
            </method>
            <method name="times" type="Function<F,F>" line="145">
                <params>
                    <param name="that" type="Function<F,F>"/>
                </params>
            </method>
            <method name="divide" type="Function<F,F>" line="148">
                <params>
                    <param name="that" type="Function<F,F>"/>
                </params>
            </method>
            <method name="pow" type="RationalFunction<F>" line="151">
                <params>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="154">
                Returns a copy of this rational function. {@link javolution.context.AllocatorContext allocated} 
                  by the calling thread (possibly on the stack).                
                <return>
                    an identical and independant copy of this rational function.                    
                </return>
            </javadoc>
            <method name="copy" type="RationalFunction<F>" line="159"/>
            <declaration name="serialVersionUID" type="long" line="162"/>
        </class>
    </source>