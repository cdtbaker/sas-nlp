<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.jscience.mathematics.function">
        <import package="java.util.List"/>
        <import package="java.util.Map"/>
        <import package="java.util.Set"/>
        <import package="org.jscience.mathematics.structure.GroupAdditive"/>
        <import package="org.jscience.mathematics.structure.GroupMultiplicative"/>
        <import package="org.jscience.mathematics.structure.Ring"/>
        <import package="javolution.util.FastMap"/>
        <import package="javolution.util.FastTable"/>
        <import package="javolution.context.ObjectFactory"/>
        <import package="javolution.text.Text"/>
        <import package="javolution.text.TextBuilder"/>
        <class name="Polynomial" line="25">
            <type_params>
                <type_param name="R"/>
            </type_params>
            <extends class="Function">
                <type_params>
                    <type_param name="R"/>
                    <type_param name="R"/>
                </type_params>
            </extends>
            <comment line="271">
                //////////////////////////////////////////////////////////////
                 Overrides parent method potentially returning polynomials                
            </comment>
            <implements interface="Ring">
                <type_params>
                    <type_param name="Polynomial<R>"/>
                </type_params>
            </implements>
            <javadoc line="25">
                &lt;p&gt; This class represents a mathematical expression involving a sum of powers
                  in one or more {@link Variable variables} multiplied by 
                  coefficients (such as &lt;code&gt;x² + x·y + 3y²&lt;/code&gt;).&lt;/p&gt;
                  &lt;p&gt; Polynomials are characterized by the type of variable they operate 
                  upon. For example:[code]
                  Variable&lt;Amount&lt;?&gt;&gt; varX = new Variable.Local&lt;Amount&lt;?&gt;&gt;(&quot;x&quot;);
                  Polynomial&lt;Amount&lt;?&gt;&gt; x = Polynomial.valueOf(Amount.valueOf(1, SI.METER), varX);
                  and
                  Variable&lt;Complex&gt; varX = new Variable.Local&lt;Complex&gt;(&quot;x&quot;);
                  Polynomial&lt;Complex&gt; x = Polynomial.valueOf(Complex.ONE, varX);[/code]
                  are two different polynomials, the first one operates on physical {@link org.jscience.physics.amount.Amount measures},
                  whereas the second operates on {@link org.jscience.mathematics.number.Complex complex} numbers.&lt;/p&gt;
                  &lt;p&gt; Terms (others than {@link Term#ONE ONE}) having zero (additive identity) 
                  for coefficient are automatically removed.&lt;/p&gt;                
                <author>
                    &lt;a href=&quot;mailto:jean-marie@dautelle.com&quot;&gt;Jean-Marie Dautelle&lt;/a&gt;                    
                </author>
                <version>
                    3.1, April 1, 2006                    
                </version>
            </javadoc>
            <declaration name="_termToCoef" type="FastMap&lt;Term,R&gt;" line="51"/>
            <javadoc line="51">
                Holds the terms to coefficients mapping 
                  (never empty, holds Term.ONE when constant)                
            </javadoc>
            <javadoc line="57">
                Default constructor.                
            </javadoc>
            <method name="Polynomial" type="constructor" line="60"/>
            <javadoc line="63">
                Returns an univariate polynomial of degree one with the specified 
                  coefficient multiplier.                
                <param>
                    coefficient the coefficient for the variable of degree 1.                    
                </param>
                <param>
                    variable the variable for this polynomial.                    
                </param>
                <return>
                    &lt;code&gt;valueOf(coefficient, Term.valueOf(variable, 1))&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="valueOf" type="Polynomial<R>" line="72">
                <params>
                    <param name="coefficient" type="R"/>
                    <param name="variable" type="Variable<R>"/>
                </params>
            </method>
            <javadoc line="76">
                Returns a polynomial corresponding to the specified {@link Term term}with the specified coefficient multiplier.                
                <param>
                    coefficient the coefficient multiplier.                    
                </param>
                <param>
                    term the term multiplicand.                    
                </param>
                <return>
                    &lt;code&gt;coefficient  term&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="valueOf" type="Polynomial<R>" line="85">
                <params>
                    <param name="coefficient" type="R"/>
                    <param name="term" type="Term"/>
                </params>
                <declaration name="p" type="Polynomial&lt;R&gt;" line="88"/>
            </method>
            <method name="isZero" type="boolean" line="93">
                <params>
                    <param name="coefficient" type="GroupAdditive<?>"/>
                </params>
            </method>
            <javadoc line="97">
                Returns the terms of this polynomial.                
                <return>
                    this polynomial&apos;s terms.                    
                </return>
            </javadoc>
            <method name="getTerms" type="Set<Term>" line="102"/>
            <javadoc line="106">
                Returns the coefficient for the specified term.                
                <param>
                    term the term for which the coefficient is returned.                    
                </param>
                <return>
                    the coefficient for the specified term or &lt;code&gt;null&lt;/code&gt;
                      if this polynomial does not contain the specified term.                    
                </return>
            </javadoc>
            <method name="getCoefficient" type="R" line="113">
                <params>
                    <param name="term" type="Term"/>
                </params>
            </method>
            <javadoc line="117">
                Returns the order of this polynomial for the specified variable.                
                <return>
                    the polynomial order relative to the specified variable.                    
                </return>
            </javadoc>
            <method name="getOrder" type="int" line="122">
                <params>
                    <param name="v" type="Variable<R>"/>
                </params>
                <declaration name="order" type="int" line="123"/>
                <scope line="124">
                    <declaration name="power" type="int" line="125"/>
                    <scope line="126"/>
                </scope>
            </method>
            <javadoc line="133">
                Returns the sum of this polynomial with a constant polynomial 
                  having the specified value (convenience method).                
                <param>
                    constantValue the value of the constant polynomial to add.                    
                </param>
                <return>
                    &lt;code&gt;this + Constant.valueOf(constantValue)&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="plus" type="Polynomial<R>" line="140">
                <params>
                    <param name="constantValue" type="R"/>
                </params>
            </method>
            <javadoc line="144">
                Returns the product of this polynomial with a constant polynomial 
                  having the specified value (convenience method).                
                <param>
                    constantValue the value of the constant polynomial to multiply.                    
                </param>
                <return>
                    &lt;code&gt;this · Constant.valueOf(constantValue)&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="times" type="Polynomial<R>" line="151">
                <params>
                    <param name="constantValue" type="R"/>
                </params>
            </method>
            <javadoc line="155">
                Returns the sum of two polynomials.                
                <param>
                    that the polynomial being added.                    
                </param>
                <return>
                    &lt;code&gt;this + that&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="plus" type="Polynomial<R>" line="161">
                <params>
                    <param name="that" type="Polynomial<R>"/>
                </params>
                <comment line="174">
                    Remove entry (be careful iterating)                    
                </comment>
                <comment line="177">
                    Move back to previous entry.                    
                </comment>
                <comment line="178">
                    To be used if constant polynomial.                    
                </comment>
                <comment line="182">
                    Else the current coefficient is correct.                    
                </comment>
                <declaration name="result" type="Polynomial&lt;R&gt;" line="162"/>
                <declaration name="zero" type="R" line="163"/>
                <scope line="167">
                    <declaration name="term" type="Term" line="168"/>
                    <declaration name="thisCoef" type="R" line="169"/>
                    <declaration name="thatCoef" type="R" line="170"/>
                    <scope line="171">
                        <declaration name="sum" type="R" line="172"/>
                        <scope line="173">
                            <declaration name="prev" type="FastMap.Entry&lt;Term,R&gt;" line="174"/>
                        </scope>
                        <scope line="178"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="187">
                Returns the opposite of this polynomial.                
                <return>
                    &lt;code&gt; - this&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="opposite" type="Polynomial<R>" line="192">
                <declaration name="result" type="Polynomial&lt;R&gt;" line="193"/>
                <scope line="195"/>
            </method>
            <javadoc line="201">
                Returns the difference of two polynomials.                
                <param>
                    that the polynomial being subtracted.                    
                </param>
                <return>
                    &lt;code&gt;this - that&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="minus" type="Polynomial<R>" line="207">
                <params>
                    <param name="that" type="Polynomial<R>"/>
                </params>
            </method>
            <javadoc line="211">
                Returns the product of two polynomials.                
                <param>
                    that the polynomial multiplier.                    
                </param>
                <return>
                    &lt;code&gt;this · that&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="times" type="Polynomial<R>" line="217">
                <params>
                    <param name="that" type="Polynomial<R>"/>
                </params>
                <declaration name="result" type="Polynomial&lt;R&gt;" line="218"/>
                <declaration name="zero" type="R" line="219"/>
                <scope line="220">
                    <declaration name="t1" type="Term" line="221"/>
                    <declaration name="c1" type="R" line="222"/>
                    <scope line="223">
                        <declaration name="t2" type="Term" line="224"/>
                        <declaration name="c2" type="R" line="225"/>
                        <declaration name="t" type="Term" line="226"/>
                        <declaration name="c" type="R" line="227"/>
                        <declaration name="prev" type="R" line="228"/>
                        <declaration name="coef" type="R" line="229"/>
                        <scope line="230"/>
                        <scope line="232"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="241">
                Returns the composition of this polynomial with the one specified.                
                <param>
                    that the polynomial for which the return value is passed as
                      argument to this function.                    
                </param>
                <return>
                    the polynomial &lt;code&gt;(this o that)&lt;/code&gt;                    
                </return>
                <throws>
                    FunctionException if this function is not univariate.                    
                </throws>
            </javadoc>
            <method name="compose" type="Polynomial<R>" line="249">
                <params>
                    <param name="that" type="Polynomial<R>"/>
                </params>
                <comment line="264">
                    power = 0                    
                </comment>
                <declaration name="variables" type="List&lt;Variable&lt;R&gt;&gt;" line="250"/>
                <declaration name="v" type="Variable&lt;R&gt;" line="253"/>
                <declaration name="result" type="Polynomial&lt;R&gt;" line="254"/>
                <scope line="255">
                    <declaration name="term" type="Term" line="256"/>
                    <declaration name="cst" type="Constant&lt;R&gt;" line="257"/>
                    <declaration name="power" type="int" line="258"/>
                    <scope line="259">
                        <declaration name="fn" type="Polynomial&lt;R&gt;" line="260"/>
                    </scope>
                    <scope line="263"/>
                </scope>
            </method>
            <method name="compose" type="Function<Z,R>" line="276">
                <params>
                    <param name="that" type="Function<Z,R>"/>
                </params>
            </method>
            <method name="differentiate" type="Polynomial<R>" line="282">
                <params>
                    <param name="v" type="Variable<R>"/>
                </params>
                <comment line="298">
                    Returns zero.                    
                </comment>
                <scope line="283">
                    <declaration name="result" type="Polynomial&lt;R&gt;" line="284"/>
                    <scope line="285">
                        <declaration name="term" type="Term" line="286"/>
                        <declaration name="coef" type="R" line="287"/>
                        <declaration name="power" type="int" line="288"/>
                        <scope line="289">
                            <declaration name="newCoef" type="R" line="290"/>
                            <declaration name="newTerm" type="Term" line="291"/>
                            <declaration name="p" type="Polynomial&lt;R&gt;" line="292"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="297">
                    <declaration name="coef" type="R" line="298"/>
                </scope>
            </method>
            <method name="multiply" type="R" line="303">
                <params>
                    <param name="o" type="R"/>
                    <param name="n" type="int"/>
                </params>
                <comment line="310">
                    Iteration.                    
                </comment>
                <declaration name="shift2" type="R" line="307"/>
                <declaration name="result" type="R" line="308"/>
                <scope line="309">
                    <scope line="310"/>
                </scope>
            </method>
            <method name="integrate" type="Polynomial<R>" line="321">
                <params>
                    <param name="v" type="Variable<R>"/>
                </params>
                <declaration name="result" type="Polynomial&lt;R&gt;" line="322"/>
                <scope line="323">
                    <declaration name="term" type="Term" line="324"/>
                    <declaration name="coef" type="R" line="325"/>
                    <declaration name="power" type="int" line="326"/>
                    <declaration name="newCoef" type="R" line="327"/>
                    <declaration name="newTerm" type="Term" line="328"/>
                    <declaration name="p" type="Polynomial&lt;R&gt;" line="329"/>
                </scope>
            </method>
            <method name="plus" type="Function<R,R>" line="337">
                <params>
                    <param name="that" type="Function<R,R>"/>
                </params>
            </method>
            <method name="minus" type="Function<R,R>" line="344">
                <params>
                    <param name="that" type="Function<R,R>"/>
                </params>
            </method>
            <method name="times" type="Function<R,R>" line="351">
                <params>
                    <param name="that" type="Function<R,R>"/>
                </params>
            </method>
            <method name="pow" type="Polynomial<R>" line="358">
                <params>
                    <param name="n" type="int"/>
                </params>
            </method>
            <method name="getVariables" type="List<Variable<R>>" line="364">
                <comment line="366">
                    We multiply all terms togethers, the resulting product
                     will hold all variabgles (powers are always positive).                    
                </comment>
                <declaration name="product" type="Term" line="367"/>
                <scope line="369"/>
                <declaration name="vars" type="FastTable" line="372"/>
                <scope line="373"/>
            </method>
            <method name="evaluate" type="R" line="381">
                <declaration name="sum" type="R" line="382"/>
                <scope line="383">
                    <declaration name="term" type="Term" line="384"/>
                    <declaration name="coef" type="R" line="385"/>
                    <declaration name="termValue" type="R" line="386"/>
                    <declaration name="value" type="R" line="387"/>
                </scope>
            </method>
            <method name="equals" type="boolean" line="394">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <declaration name="that" type="Polynomial&lt;?&gt;" line="397"/>
            </method>
            <method name="hashCode" type="int" line="402"/>
            <method name="toText" type="Text" line="407">
                <declaration name="terms" type="FastTable&lt;Term&gt;" line="408"/>
                <declaration name="tb" type="TextBuilder" line="411"/>
                <scope line="412">
                    <scope line="413"/>
                </scope>
            </method>
            <javadoc line="423">
                Returns a copy of this polynomial {@link javolution.context.AllocatorContext allocated} 
                  by the calling thread (possibly on the stack).                
                <return>
                    an identical and independant copy of this polynomial.                    
                </return>
            </javadoc>
            <method name="copy" type="Polynomial<R>" line="430">
                <declaration name="p" type="Polynomial&lt;R&gt;" line="431"/>
                <scope line="432"/>
            </method>
            <method name="newInstance" type="Polynomial<R>" line="439">
                <declaration name="p" type="Polynomial" line="440"/>
            </method>
            <declaration name="FACTORY" type="ObjectFactory&lt;Polynomial&gt;" line="445"/>
            <anonymous_class line="446">
                <method name="create" type="Polynomial" line="447"/>
            </anonymous_class>
            <declaration name="serialVersionUID" type="long" line="452"/>
        </class>
    </source>