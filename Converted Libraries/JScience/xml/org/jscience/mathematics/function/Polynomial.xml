<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.jscience.mathematics.function">
        <import package="java.util.List"/>
        <import package="java.util.Map"/>
        <import package="java.util.Set"/>
        <import package="org.jscience.mathematics.structure.GroupAdditive"/>
        <import package="org.jscience.mathematics.structure.GroupMultiplicative"/>
        <import package="org.jscience.mathematics.structure.Ring"/>
        <import package="javolution.util.FastMap"/>
        <import package="javolution.util.FastTable"/>
        <import package="javolution.context.ObjectFactory"/>
        <import package="javolution.text.Text"/>
        <import package="javolution.text.TextBuilder"/>
        <class name="Polynomial" line="13">
            <type_params>
                <type_param name="R"/>
            </type_params>
            <extends class="Function">
                <type_params>
                    <type_param name="R"/>
                    <type_param name="R"/>
                </type_params>
            </extends>
            <implements interface="Ring">
                <type_params>
                    <type_param name="Polynomial<R>"/>
                </type_params>
            </implements>
            <javadoc line="13">
                &lt;p&gt; This class represents a mathematical expression involving a sum of powers
                  in one or more {@link Variable variables} multiplied by 
                  coefficients (such as &lt;code&gt;x² + x·y + 3y²&lt;/code&gt;).&lt;/p&gt;
                  &lt;p&gt; Polynomials are characterized by the type of variable they operate 
                  upon. For example:[code]
                  Variable&lt;Amount&lt;?&gt;&gt; varX = new Variable.Local&lt;Amount&lt;?&gt;&gt;(&quot;x&quot;);
                  Polynomial&lt;Amount&lt;?&gt;&gt; x = Polynomial.valueOf(Amount.valueOf(1, SI.METER), varX);
                  and
                  Variable&lt;Complex&gt; varX = new Variable.Local&lt;Complex&gt;(&quot;x&quot;);
                  Polynomial&lt;Complex&gt; x = Polynomial.valueOf(Complex.ONE, varX);[/code]
                  are two different polynomials, the first one operates on physical {@link org.jscience.physics.amount.Amount measures},
                  whereas the second operates on {@link org.jscience.mathematics.number.Complex complex} numbers.&lt;/p&gt;
                  &lt;p&gt; Terms (others than {@link Term#ONE ONE}) having zero (additive identity) 
                  for coefficient are automatically removed.&lt;/p&gt;                
                <author>
                    <a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a>                    
                </author>
                <version>
                    3.1, April 1, 2006                    
                </version>
            </javadoc>
            <declaration name="_termToCoef" type="FastMap&lt;Term,R&gt;" line="32"/>
            <javadoc line="32">
                Holds the terms to coefficients mapping 
                  (never empty, holds Term.ONE when constant)                
            </javadoc>
            <javadoc line="37">
                Default constructor.                
            </javadoc>
            <method name="Polynomial" type="constructor" line="40"/>
            <javadoc line="42">
                Returns an univariate polynomial of degree one with the specified 
                  coefficient multiplier.                
                <param>
                    coefficient the coefficient for the variable of degree 1.                    
                </param>
                <param>
                    variable the variable for this polynomial.                    
                </param>
                <return>
                    <code>valueOf(coefficient, Term.valueOf(variable, 1))</code>                    
                </return>
            </javadoc>
            <method name="valueOf" type="Polynomial<R>" line="49">
                <params>
                    <param name="coefficient" type="R"/>
                    <param name="variable" type="Variable<R>"/>
                </params>
            </method>
            <javadoc line="52">
                Returns a polynomial corresponding to the specified {@link Term term}with the specified coefficient multiplier.                
                <param>
                    coefficient the coefficient multiplier.                    
                </param>
                <param>
                    term the term multiplicand.                    
                </param>
                <return>
                    <code>coefficient  term</code>                    
                </return>
            </javadoc>
            <method name="valueOf" type="Polynomial<R>" line="58">
                <params>
                    <param name="coefficient" type="R"/>
                    <param name="term" type="Term"/>
                </params>
                <declaration name="p" type="Polynomial&lt;R&gt;" line="61"/>
            </method>
            <method name="isZero" type="boolean" line="65">
                <params>
                    <param name="coefficient" type="GroupAdditive<?>"/>
                </params>
            </method>
            <javadoc line="68">
                Returns the terms of this polynomial.                
                <return>
                    this polynomial's terms.                    
                </return>
            </javadoc>
            <method name="getTerms" type="Set<Term>" line="72"/>
            <javadoc line="75">
                Returns the coefficient for the specified term.                
                <param>
                    term the term for which the coefficient is returned.                    
                </param>
                <return>
                    the coefficient for the specified term or <code>null</code>
                      if this polynomial does not contain the specified term.                    
                </return>
            </javadoc>
            <method name="getCoefficient" type="R" line="81">
                <params>
                    <param name="term" type="Term"/>
                </params>
            </method>
            <javadoc line="84">
                Returns the order of this polynomial for the specified variable.                
                <return>
                    the polynomial order relative to the specified variable.                    
                </return>
            </javadoc>
            <method name="getOrder" type="int" line="88">
                <params>
                    <param name="v" type="Variable<R>"/>
                </params>
                <declaration name="order" type="int" line="89"/>
                <scope line="90">
                    <declaration name="power" type="int" line="91"/>
                    <scope line="92"/>
                </scope>
            </method>
            <javadoc line="98">
                Returns the sum of this polynomial with a constant polynomial 
                  having the specified value (convenience method).                
                <param>
                    constantValue the value of the constant polynomial to add.                    
                </param>
                <return>
                    <code>this + Constant.valueOf(constantValue)</code>                    
                </return>
            </javadoc>
            <method name="plus" type="Polynomial<R>" line="104">
                <params>
                    <param name="constantValue" type="R"/>
                </params>
            </method>
            <javadoc line="107">
                Returns the product of this polynomial with a constant polynomial 
                  having the specified value (convenience method).                
                <param>
                    constantValue the value of the constant polynomial to multiply.                    
                </param>
                <return>
                    <code>this · Constant.valueOf(constantValue)</code>                    
                </return>
            </javadoc>
            <method name="times" type="Polynomial<R>" line="113">
                <params>
                    <param name="constantValue" type="R"/>
                </params>
            </method>
            <javadoc line="116">
                Returns the sum of two polynomials.                
                <param>
                    that the polynomial being added.                    
                </param>
                <return>
                    <code>this + that</code>                    
                </return>
            </javadoc>
            <method name="plus" type="Polynomial<R>" line="121">
                <params>
                    <param name="that" type="Polynomial<R>"/>
                </params>
                <declaration name="result" type="Polynomial&lt;R&gt;" line="122"/>
                <declaration name="zero" type="R" line="123"/>
                <scope line="126">
                    <declaration name="term" type="Term" line="127"/>
                    <declaration name="thisCoef" type="R" line="128"/>
                    <declaration name="thatCoef" type="R" line="129"/>
                    <scope line="130">
                        <declaration name="sum" type="R" line="131"/>
                        <scope line="132">
                            <declaration name="prev" type="FastMap.Entry&lt;Term,R&gt;" line="133"/>
                        </scope>
                        <scope line="138"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="146">
                Returns the opposite of this polynomial.                
                <return>
                    <code> - this</code>                    
                </return>
            </javadoc>
            <method name="opposite" type="Polynomial<R>" line="150">
                <declaration name="result" type="Polynomial&lt;R&gt;" line="151"/>
                <scope line="152"/>
            </method>
            <javadoc line="157">
                Returns the difference of two polynomials.                
                <param>
                    that the polynomial being subtracted.                    
                </param>
                <return>
                    <code>this - that</code>                    
                </return>
            </javadoc>
            <method name="minus" type="Polynomial<R>" line="162">
                <params>
                    <param name="that" type="Polynomial<R>"/>
                </params>
            </method>
            <javadoc line="165">
                Returns the product of two polynomials.                
                <param>
                    that the polynomial multiplier.                    
                </param>
                <return>
                    <code>this · that</code>                    
                </return>
            </javadoc>
            <method name="times" type="Polynomial<R>" line="170">
                <params>
                    <param name="that" type="Polynomial<R>"/>
                </params>
                <declaration name="result" type="Polynomial&lt;R&gt;" line="171"/>
                <declaration name="zero" type="R" line="172"/>
                <scope line="173">
                    <declaration name="t1" type="Term" line="174"/>
                    <declaration name="c1" type="R" line="175"/>
                    <scope line="176">
                        <declaration name="t2" type="Term" line="177"/>
                        <declaration name="c2" type="R" line="178"/>
                        <declaration name="t" type="Term" line="179"/>
                        <declaration name="c" type="R" line="180"/>
                        <declaration name="prev" type="R" line="181"/>
                        <declaration name="coef" type="R" line="182"/>
                        <scope line="183"/>
                        <scope line="186"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="194">
                Returns the composition of this polynomial with the one specified.                
                <param>
                    that the polynomial for which the return value is passed as
                      argument to this function.                    
                </param>
                <return>
                    the polynomial <code>(this o that)</code>                    
                </return>
                <throws>
                    FunctionException if this function is not univariate.                    
                </throws>
            </javadoc>
            <method name="compose" type="Polynomial<R>" line="201">
                <params>
                    <param name="that" type="Polynomial<R>"/>
                </params>
                <declaration name="variables" type="List&lt;Variable&lt;R&gt;&gt;" line="202"/>
                <declaration name="v" type="Variable&lt;R&gt;" line="204"/>
                <declaration name="result" type="Polynomial&lt;R&gt;" line="205"/>
                <scope line="206">
                    <declaration name="term" type="Term" line="207"/>
                    <declaration name="cst" type="Constant&lt;R&gt;" line="208"/>
                    <declaration name="power" type="int" line="209"/>
                    <scope line="210">
                        <declaration name="fn" type="Polynomial&lt;R&gt;" line="211"/>
                    </scope>
                    <scope line="214"/>
                </scope>
            </method>
            <method name="compose" type="Function<Z,R>" line="220">
                <params>
                    <param name="that" type="Function<Z,R>"/>
                </params>
            </method>
            <method name="differentiate" type="Polynomial<R>" line="223">
                <params>
                    <param name="v" type="Variable<R>"/>
                </params>
                <scope line="224">
                    <declaration name="result" type="Polynomial&lt;R&gt;" line="225"/>
                    <scope line="226">
                        <declaration name="term" type="Term" line="227"/>
                        <declaration name="coef" type="R" line="228"/>
                        <declaration name="power" type="int" line="229"/>
                        <scope line="230">
                            <declaration name="newCoef" type="R" line="231"/>
                            <declaration name="newTerm" type="Term" line="232"/>
                            <declaration name="p" type="Polynomial&lt;R&gt;" line="233"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="239">
                    <declaration name="coef" type="R" line="240"/>
                </scope>
            </method>
            <method name="multiply" type="R" line="244">
                <params>
                    <param name="o" type="R"/>
                    <param name="n" type="int"/>
                </params>
                <declaration name="shift2" type="R" line="246"/>
                <declaration name="result" type="R" line="247"/>
                <scope line="248">
                    <scope line="249"/>
                </scope>
            </method>
            <method name="integrate" type="Polynomial<R>" line="257">
                <params>
                    <param name="v" type="Variable<R>"/>
                </params>
                <declaration name="result" type="Polynomial&lt;R&gt;" line="258"/>
                <scope line="259">
                    <declaration name="term" type="Term" line="260"/>
                    <declaration name="coef" type="R" line="261"/>
                    <declaration name="power" type="int" line="262"/>
                    <declaration name="newCoef" type="R" line="263"/>
                    <declaration name="newTerm" type="Term" line="264"/>
                    <declaration name="p" type="Polynomial&lt;R&gt;" line="265"/>
                </scope>
            </method>
            <method name="plus" type="Function<R,R>" line="270">
                <params>
                    <param name="that" type="Function<R,R>"/>
                </params>
            </method>
            <method name="minus" type="Function<R,R>" line="273">
                <params>
                    <param name="that" type="Function<R,R>"/>
                </params>
            </method>
            <method name="times" type="Function<R,R>" line="276">
                <params>
                    <param name="that" type="Function<R,R>"/>
                </params>
            </method>
            <method name="pow" type="Polynomial<R>" line="279">
                <params>
                    <param name="n" type="int"/>
                </params>
            </method>
            <method name="getVariables" type="List<Variable<R>>" line="282">
                <declaration name="product" type="Term" line="283"/>
                <scope line="284"/>
                <declaration name="vars" type="FastTable" line="287"/>
                <scope line="288"/>
            </method>
            <method name="evaluate" type="R" line="293">
                <declaration name="sum" type="R" line="294"/>
                <scope line="295">
                    <declaration name="term" type="Term" line="296"/>
                    <declaration name="coef" type="R" line="297"/>
                    <declaration name="termValue" type="R" line="298"/>
                    <declaration name="value" type="R" line="299"/>
                </scope>
            </method>
            <method name="equals" type="boolean" line="304">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <declaration name="that" type="Polynomial&lt;?&gt;" line="306"/>
            </method>
            <method name="hashCode" type="int" line="309"/>
            <method name="toText" type="Text" line="312">
                <declaration name="terms" type="FastTable&lt;Term&gt;" line="313"/>
                <declaration name="tb" type="TextBuilder" line="316"/>
                <scope line="317">
                    <scope line="318"/>
                </scope>
            </method>
            <javadoc line="326">
                Returns a copy of this polynomial {@link javolution.context.AllocatorContext allocated} 
                  by the calling thread (possibly on the stack).                
                <return>
                    an identical and independant copy of this polynomial.                    
                </return>
            </javadoc>
            <method name="copy" type="Polynomial<R>" line="331">
                <declaration name="p" type="Polynomial&lt;R&gt;" line="332"/>
                <scope line="333"/>
            </method>
            <method name="newInstance" type="Polynomial<R>" line="338">
                <declaration name="p" type="Polynomial" line="339"/>
            </method>
            <declaration name="FACTORY" type="ObjectFactory&lt;Polynomial&gt;" line="343"/>
            <anonymous_class line="343">
                <method name="create" type="Polynomial" line="344"/>
            </anonymous_class>
            <declaration name="serialVersionUID" type="long" line="349"/>
        </class>
    </source>