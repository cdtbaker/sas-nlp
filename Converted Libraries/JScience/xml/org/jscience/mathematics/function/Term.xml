<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.jscience.mathematics.function">
        <import package="java.io.Serializable"/>
        <import package="org.jscience.mathematics.structure.Ring"/>
        <import package="javolution.context.ArrayFactory"/>
        <import package="javolution.lang.MathLib"/>
        <import package="javolution.lang.Realtime"/>
        <import package="javolution.lang.ValueType"/>
        <import package="javolution.text.Text"/>
        <import package="javolution.text.TextBuilder"/>
        <class name="Term" line="10">
            <implements interface="Serializable"/>
            <implements interface="Comparable">
                <type_params>
                    <type_param name="Term"/>
                </type_params>
            </implements>
            <implements interface="ValueType"/>
            <implements interface="Realtime"/>
            <javadoc line="10">
                This class represents the term of a {@link Polynomial polynomial} 
                  such as &lt;code&gt;x·y²&lt;/code&gt;.                
                <author>
                    <a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a>                    
                </author>
                <version>
                    3.0, February 13, 2006                    
                </version>
            </javadoc>
            <declaration name="ONE" type="Term" line="17"/>
            <javadoc line="17">
                Holds the multiplicative identity.                
            </javadoc>
            <declaration name="FACTORY" type="ArrayFactory&lt;Term&gt;" line="21"/>
            <javadoc line="21">
                Holds the term&apos;s factory.                
            </javadoc>
            <anonymous_class line="24">
                <method name="create" type="Term" line="25">
                    <params>
                        <param name="size" type="int"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="_variables" type="Variable&lt;?&gt;[]" line="30"/>
            <javadoc line="30">
                Holds the variables (ordered).                
            </javadoc>
            <declaration name="_powers" type="int[]" line="34"/>
            <javadoc line="34">
                Holds the corresponding powers (positive and different from zero).                
            </javadoc>
            <declaration name="_size" type="int" line="38"/>
            <javadoc line="38">
                Holds the number of variables.                
            </javadoc>
            <javadoc line="42">
                Creates a new term of specified capacity.                
                <param>
                    capacity the maxium number of variables.                    
                </param>
            </javadoc>
            <method name="Term" type="constructor" line="46">
                <params>
                    <param name="capacity" type="int"/>
                </params>
            </method>
            <javadoc line="50">
                Return the term corresponding to the specified variable raised to
                  the specified power.                
                <param>
                    v the variable.                    
                </param>
                <param>
                    n the power.                    
                </param>
                <return>
                    the term for <code>v<sup>n</sup></code>                    
                </return>
                <throws>
                    IllegalArgumentException if <code>n &lt; 0</code>                    
                </throws>
            </javadoc>
            <method name="valueOf" type="Term" line="58">
                <params>
                    <param name="v" type="Variable<?>"/>
                    <param name="n" type="int"/>
                </params>
                <declaration name="term" type="Term" line="61"/>
            </method>
            <javadoc line="67">
                Returns the number of variables for this term.                
                <return>
                    the number of variables.                    
                </return>
            </javadoc>
            <method name="size" type="int" line="71"/>
            <javadoc line="74">
                Returns the variable at the specified index (variables are 
                  lexically ordered).                
                <param>
                    index the variable index.                    
                </param>
                <return>
                    this term variables at specified position.                    
                </return>
                <throws>
                    IndexOutOfBoundsException if  
                      <code>(index < 0) || (index >= size())</code>                    
                </throws>
            </javadoc>
            <method name="getVariable" type="Variable<?>" line="82">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="86">
                Returns the power of the variable at the specified position.                
                <param>
                    index the variable index.                    
                </param>
                <return>
                    the power of the variable at the specified index.                    
                </return>
                <throws>
                    IndexOutOfBoundsException if  
                      <code>(index < 0) || (index >= size())</code>                    
                </throws>
            </javadoc>
            <method name="getPower" type="int" line="93">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="97">
                Returns the power of the specified variable.                
                <param>
                    v the variable for which the power is returned.                    
                </param>
                <return>
                    the power of the corresponding variable or <code>0</code> if 
                      this term does not hold the specified variable.                    
                </return>
            </javadoc>
            <method name="getPower" type="int" line="103">
                <params>
                    <param name="v" type="Variable<?>"/>
                </params>
                <scope line="104"/>
            </method>
            <javadoc line="109">
                Return the product of this term with the one specified.                
                <param>
                    that the term multiplier.                    
                </param>
                <return>
                    <code>this · that</code>                    
                </return>
                <throws>
                    IllegalArgumentException if the specified term holds a 
                      variable having the same symbol as one of the variable of
                      this term; but both variables are distinct.                    
                </throws>
            </javadoc>
            <method name="times" type="Term" line="117">
                <params>
                    <param name="that" type="Term"/>
                </params>
                <declaration name="thisSize" type="int" line="118"/>
                <declaration name="thatSize" type="int" line="119"/>
                <declaration name="result" type="Term" line="120"/>
                <scope line="122">
                    <declaration name="left" type="Variable&lt;?&gt;" line="123"/>
                    <declaration name="right" type="Variable&lt;?&gt;" line="124"/>
                    <scope line="125"/>
                    <scope line="131"/>
                    <scope line="136"/>
                    <declaration name="cmp" type="int" line="141"/>
                    <scope line="142"/>
                    <scope line="146"/>
                    <scope line="150"/>
                </scope>
            </method>
            <javadoc line="155">
                Return the division of this term with the one specified.                
                <param>
                    that the term divisor.                    
                </param>
                <return>
                    <code>this / that</code>                    
                </return>
                <throws>
                    UnsupportedOperationException if this division would 
                      result in negative power.                    
                </throws>
                <throws>
                    IllegalArgumentException if the specified term holds a 
                      variable having the same symbol as one of the variable of
                      this term; but both variables are distinct.                    
                </throws>
            </javadoc>
            <method name="divide" type="Term" line="165">
                <params>
                    <param name="that" type="Term"/>
                </params>
                <declaration name="thisSize" type="int" line="166"/>
                <declaration name="thatSize" type="int" line="167"/>
                <declaration name="result" type="Term" line="168"/>
                <scope line="170">
                    <declaration name="left" type="Variable&lt;?&gt;" line="171"/>
                    <declaration name="right" type="Variable&lt;?&gt;" line="172"/>
                    <scope line="173"/>
                    <scope line="177"/>
                    <scope line="182">
                        <declaration name="power" type="int" line="183"/>
                        <scope line="185"/>
                    </scope>
                    <declaration name="cmp" type="int" line="191"/>
                    <scope line="192"/>
                    <scope line="196"/>
                    <scope line="199"/>
                </scope>
            </method>
            <javadoc line="204">
                Indicates if this term is equal to the object specified.                
                <param>
                    obj the object to compare for equality.                    
                </param>
                <return>
                    <code>true</code> if this term and the specified object are
                      considered equal; <code>false</code> otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="210">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <declaration name="that" type="Term" line="213"/>
                <scope line="215"/>
            </method>
            <javadoc line="220">
                Returns a hash code for this term.                
                <return>
                    a hash code value for this object.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="224">
                <declaration name="h" type="int" line="225"/>
                <scope line="226"/>
            </method>
            <javadoc line="231">
                Returns the text representation of this term as a 
                  &lt;code&gt;java.lang.String&lt;/code&gt;.                
                <return>
                    <code>toText().toString()</code>                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="236"/>
            <javadoc line="239">
                Returns the text representation of this term.                
            </javadoc>
            <method name="toText" type="Text" line="242"/>
            <javadoc line="262">
                Returns an entierely new copy of this term {@link javolution.context.AllocatorContext allocated} 
                  by the calling thread (possibly on the stack).                
                <return>
                    an identical and independant copy of this term.                    
                </return>
            </javadoc>
            <method name="copy" type="Term" line="267">
                <declaration name="term" type="Term" line="268"/>
                <scope line="270"/>
            </method>
            <javadoc line="276">
                Compares this term with the one specified for order.                
                <param>
                    that the term to be compared to.                    
                </param>
                <return>
                    a negative integer, zero, or a positive integer as this term
                      is less than, equal to, or greater than the specified term.                    
                </return>
            </javadoc>
            <method name="compareTo" type="int" line="282">
                <params>
                    <param name="that" type="Term"/>
                </params>
                <declaration name="n" type="int" line="283"/>
                <scope line="284">
                    <declaration name="cmp" type="int" line="285"/>
                </scope>
            </method>
            <javadoc line="292">
                Evaluates this term by replacing its {@link Variablevariables} by their current (context-local) values.                
                <return>
                    the evaluation of this term or <code>null</code> if ONE.                    
                </return>
                <throws>
                    FunctionException if any of this term's variable is not set.                    
                </throws>
            </javadoc>
            <method name="evaluate" type="Ring" line="297">
                <declaration name="result" type="Ring" line="298"/>
                <scope line="299">
                    <declaration name="pow2" type="Ring" line="300"/>
                    <declaration name="n" type="int" line="302"/>
                    <scope line="303">
                        <scope line="304"/>
                    </scope>
                </scope>
            </method>
            <declaration name="serialVersionUID" type="long" line="313"/>
        </class>
    </source>