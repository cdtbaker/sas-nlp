<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.jscience.mathematics.number">
        <import package="org.jscience.mathematics.structure.Ring"/>
        <import package="javolution.lang.Realtime"/>
        <import package="javolution.text.Text"/>
        <import package="javolution.xml.XMLSerializable"/>
        <class name="Number" line="16">
            <type_params>
                <type_param name="T"/>
            </type_params>
            <extends class="java.lang.Number"/>
            <implements interface="Ring">
                <type_params>
                    <type_param name="T"/>
                </type_params>
            </implements>
            <implements interface="Comparable">
                <type_params>
                    <type_param name="T"/>
                </type_params>
            </implements>
            <implements interface="Realtime"/>
            <implements interface="XMLSerializable"/>
            <javadoc line="16">
                &lt;p&gt; This class represents a {@link javolution.lang.ValueType value-type}number.&lt;/p&gt;                
                <author>
                    <a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a>                    
                </author>
                <version>
                    3.0, February 13, 2006                    
                </version>
                <see>
                    <a href="http://en.wikipedia.org/wiki/Number">
                           Wikipedia: Number</a>                    
                </see>
            </javadoc>
            <method name="isLargerThan" type="boolean" line="28"/>
            <javadoc line="28">
                Compares the magnitude of this number with that number.                
                <return>
                    <code>|this| > |that|</code>                    
                </return>
            </javadoc>
            <method name="longValue" type="long" line="35"/>
            <javadoc line="35">
                Returns the value of this number as a &lt;code&gt;long&lt;/code&gt;.                
                <return>
                    the numeric value represented by this object after conversion
                      to type <code>long</code>.                    
                </return>
            </javadoc>
            <method name="doubleValue" type="double" line="43"/>
            <javadoc line="43">
                Returns the value of this number as a &lt;code&gt;double&lt;/code&gt;.                
                <return>
                    the numeric value represented by this object after conversion
                      to type <code>double</code>.                    
                </return>
            </javadoc>
            <method name="compareTo" type="int" line="51"/>
            <javadoc line="51">
                Compares this number with the specified number for order.  Returns a
                  negative integer, zero, or a positive integer as this number is less
                  than, equal to, or greater than the specified number. 
                  Implementation must ensure that this method is consistent with equals 
                  &lt;code&gt;(x.compareTo(y)==0) == (x.equals(y))&lt;/code&gt;,                
                <param>
                    that the number to be compared.                    
                </param>
                <return>
                    a negative integer, zero, or a positive integer as this number
                      is less than, equal to, or greater than the specified number.                    
                </return>
            </javadoc>
            <javadoc line="64">
                Indicates if this number is ordered before that number
                  (convenience method).                
                <param>
                    that the number to compare with.                    
                </param>
                <return>
                    <code>this.compareTo(that) < 0</code>.                    
                </return>
            </javadoc>
            <method name="isLessThan" type="boolean" line="71">
                <params>
                    <param name="that" type="T"/>
                </params>
            </method>
            <javadoc line="75">
                Indicates if this number is ordered after that number
                  (convenience method).                
                <param>
                    that the number to compare with.                    
                </param>
                <return>
                    <code>this.compareTo(that) > 0</code>.                    
                </return>
            </javadoc>
            <method name="isGreaterThan" type="boolean" line="82">
                <params>
                    <param name="that" type="T"/>
                </params>
            </method>
            <javadoc line="86">
                Returns the difference between this number and the one specified.                
                <param>
                    that the number to be subtracted.                    
                </param>
                <return>
                    <code>this - that</code>.                    
                </return>
            </javadoc>
            <method name="minus" type="T" line="92">
                <params>
                    <param name="that" type="T"/>
                </params>
            </method>
            <javadoc line="96">
                Returns this number raised at the specified positive exponent.                
                <param>
                    exp the positive exponent.                    
                </param>
                <return>
                    <code>this<sup>exp</sup></code>                    
                </return>
                <throws>
                    IllegalArgumentException if <code>exp &lt;= 0</code>                    
                </throws>
            </javadoc>
            <method name="pow" type="T" line="104">
                <params>
                    <param name="exp" type="int"/>
                </params>
                <declaration name="t" type="T" line="108"/>
                <declaration name="halfExp" type="int" line="112"/>
            </method>
            <javadoc line="116">
                Returns the value of this number as a &lt;code&gt;byte&lt;/code&gt;.
                  This may involve rounding or truncation.                
                <return>
                    the numeric value represented by this object after conversion
                      to type <code>byte</code>.                    
                </return>
            </javadoc>
            <method name="byteValue" type="byte" line="123"/>
            <javadoc line="127">
                Returns the value of this number as a &lt;code&gt;short&lt;/code&gt;.
                  This may involve rounding or truncation.                
                <return>
                    the numeric value represented by this object after conversion
                      to type <code>short</code>.                    
                </return>
            </javadoc>
            <method name="shortValue" type="short" line="134"/>
            <javadoc line="138">
                Returns the value of this number as an &lt;code&gt;int&lt;/code&gt;.
                  This may involve rounding or truncation.                
                <return>
                    the numeric value represented by this object after conversion
                      to type <code>int</code>.                    
                </return>
            </javadoc>
            <method name="intValue" type="int" line="145"/>
            <javadoc line="149">
                Returns the value of this number as a &lt;code&gt;float&lt;/code&gt;.
                  This may involve rounding.                
                <return>
                    the numeric value represented by this object after conversion
                      to type <code>float</code>.                    
                </return>
            </javadoc>
            <method name="floatValue" type="float" line="156"/>
            <method name="equals" type="boolean" line="159"/>
            <javadoc line="159">
                Indicates if this number is equals to the specified object.                
                <param>
                    obj the object to be compared with.                    
                </param>
                <return>
                    <code>true</code> if this number and the specified argument
                      represent the same number; <code>false</code> otherwise.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="168"/>
            <javadoc line="168">
                Returns the hash code for this number (consistent with {@link #equals(Object)}.                
                <return>
                    this number hash code.                    
                </return>
            </javadoc>
            <method name="toText" type="Text" line="176"/>
            <javadoc line="176">
                Returns the textual representation of this real-time object
                  (equivalent to &lt;code&gt;toString&lt;/code&gt; except that the returned value
                  can be allocated from the local context space).                
                <return>
                    this object's textual representation.                    
                </return>
            </javadoc>
            <method name="copy" type="Number<T>" line="185"/>
            <javadoc line="185">
                Returns a copy of this number {@link javolution.context.AllocatorContext allocated} 
                  by the calling thread (possibly on the stack).                
                <return>
                    an identical and independant copy of this number.                    
                </return>
            </javadoc>
            <javadoc line="194">
                Returns the text representation of this number as a 
                  &lt;code&gt;java.lang.String&lt;/code&gt;.                
                <return>
                    <code>toText().toString()</code>                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="200"/>
        </class>
    </source>