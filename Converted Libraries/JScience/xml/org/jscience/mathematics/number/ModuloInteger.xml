<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.jscience.mathematics.number">
        <import package="org.jscience.mathematics.structure.Field"/>
        <import package="javolution.context.LocalContext"/>
        <import package="javolution.context.ObjectFactory"/>
        <import package="javolution.text.Text"/>
        <import package="javolution.xml.XMLFormat"/>
        <import package="javolution.xml.stream.XMLStreamException"/>
        <class name="ModuloInteger" line="8">
            <extends class="Number">
                <type_params>
                    <type_param name="ModuloInteger"/>
                </type_params>
            </extends>
            <implements interface="Field">
                <type_params>
                    <type_param name="ModuloInteger"/>
                </type_params>
            </implements>
            <javadoc line="8">
                &lt;p&gt; This class represents a modulo integer. It can be used in conjonction 
                  with the {@link org.jscience.mathematics.vector.Matrix Matrix}class to resolve modulo equations (ref. number theory).&lt;/p&gt;                
                <author>
                    <a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a>                    
                </author>
                <version>
                    3.0, February 13, 2006                    
                </version>
                <see>
                    <a href="http://en.wikipedia.org/wiki/Modular_arithmetic">
                           Wikipedia: Modular Arithmetic</a>                    
                </see>
            </javadoc>
            <declaration name="ZERO" type="ModuloInteger" line="17"/>
            <javadoc line="17">
                The modulo integer representing the additive identity.                
            </javadoc>
            <scope line="21"/>
            <declaration name="ONE" type="ModuloInteger" line="24"/>
            <javadoc line="24">
                The modulo integer representing the multiplicative identity.                
            </javadoc>
            <scope line="28"/>
            <declaration name="XML" type="XMLFormat&lt;ModuloInteger&gt;" line="31"/>
            <javadoc line="31">
                Holds the default XML representation for modulo integers.
                  This representation consists of a simple &lt;code&gt;value&lt;/code&gt; attribute
                  holding the {@link #toText() textual} representation.                
            </javadoc>
            <anonymous_class line="36">
                <method name="newInstance" type="ModuloInteger" line="37">
                    <params>
                        <param name="cls" type="Class<ModuloInteger>"/>
                        <param name="xml" type="InputElement"/>
                    </params>
                </method>
                <method name="write" type="void" line="40">
                    <params>
                        <param name="mi" type="ModuloInteger"/>
                        <param name="xml" type="OutputElement"/>
                    </params>
                </method>
                <method name="read" type="void" line="43">
                    <params>
                        <param name="xml" type="InputElement"/>
                        <param name="mi" type="ModuloInteger"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="MODULUS" type="LocalContext.Reference&lt;LargeInteger&gt;" line="47"/>
            <javadoc line="47">
                Holds the local modulus (for modular arithmetic).                
            </javadoc>
            <declaration name="_value" type="LargeInteger" line="51"/>
            <javadoc line="51">
                Holds the large integer value.                
            </javadoc>
            <javadoc line="55">
                Returns the modulo integer having the specified value (independently of
                  the current modulo).                
                <param>
                    value the modulo integer intrinsic value.                    
                </param>
                <return>
                    the corresponding modulo number.                    
                </return>
            </javadoc>
            <method name="valueOf" type="ModuloInteger" line="61">
                <params>
                    <param name="value" type="LargeInteger"/>
                </params>
            </method>
            <javadoc line="64">
                Returns the modulo integer for the specified character sequence in
                  decimal number.                
                <param>
                    chars the character sequence.                    
                </param>
                <return>
                    the corresponding modulo number.                    
                </return>
            </javadoc>
            <method name="valueOf" type="ModuloInteger" line="70">
                <params>
                    <param name="chars" type="CharSequence"/>
                </params>
            </method>
            <javadoc line="73">
                Returns the {@link javolution.context.LocalContext local} modulus 
                  for modular arithmetic or &lt;code&gt;null&lt;/code&gt; if the arithmetic operations
                  are non-modular (default).                
                <return>
                    the local modulus or <code>null</code> if none.                    
                </return>
                <see>
                    #setModulus                    
                </see>
            </javadoc>
            <method name="getModulus" type="LargeInteger" line="80"/>
            <javadoc line="83">
                Sets the {@link javolution.context.LocalContext local} modulus 
                  for modular arithmetic.                
                <param>
                    modulus the new modulus or <code>null</code> to unset the modulus.                    
                </param>
                <throws>
                    IllegalArgumentException if <code>modulus &lt;= 0</code>                    
                </throws>
            </javadoc>
            <method name="setModulus" type="void" line="89">
                <params>
                    <param name="modulus" type="LargeInteger"/>
                </params>
            </method>
            <javadoc line="93">
                Returns the current modulo value of this number. If the modulus 
                  is {@link #setModulus set} to &lt;code&gt;null&lt;/code&gt; the intrinsic value
                  (the creation value) is returned.                
                <return>
                    the positive number equals to this number modulo modulus or
                      this modulo creation value.                    
                </return>
            </javadoc>
            <method name="moduloValue" type="LargeInteger" line="100">
                <declaration name="modulus" type="LargeInteger" line="101"/>
            </method>
            <javadoc line="104">
                Returns the text representation of the current modulo value of 
                  this number.                
                <return>
                    the representation of its modulo value.                    
                </return>
            </javadoc>
            <method name="toText" type="Text" line="109"/>
            <javadoc line="112">
                Compares this modulo integer against the specified object
                  independently of the current modulus.                
                <param>
                    that the object to compare with.                    
                </param>
                <return>
                    <code>true</code> if that is a modulo number with the same 
                      intrinsic value; <code>false</code> otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="119">
                <params>
                    <param name="that" type="Object"/>
                </params>
            </method>
            <javadoc line="122">
                Returns the hash code for this large integer number.                
                <return>
                    the hash code value.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="126"/>
            <method name="isLargerThan" type="boolean" line="129">
                <params>
                    <param name="that" type="ModuloInteger"/>
                </params>
            </method>
            <method name="longValue" type="long" line="132"/>
            <method name="doubleValue" type="double" line="135"/>
            <method name="compareTo" type="int" line="138">
                <params>
                    <param name="that" type="ModuloInteger"/>
                </params>
            </method>
            <method name="times" type="ModuloInteger" line="141">
                <params>
                    <param name="that" type="ModuloInteger"/>
                </params>
                <declaration name="value" type="LargeInteger" line="142"/>
                <declaration name="modulus" type="LargeInteger" line="143"/>
            </method>
            <method name="plus" type="ModuloInteger" line="146">
                <params>
                    <param name="that" type="ModuloInteger"/>
                </params>
                <declaration name="value" type="LargeInteger" line="147"/>
                <declaration name="modulus" type="LargeInteger" line="148"/>
            </method>
            <method name="opposite" type="ModuloInteger" line="151">
                <declaration name="value" type="LargeInteger" line="152"/>
                <declaration name="modulus" type="LargeInteger" line="153"/>
            </method>
            <method name="inverse" type="ModuloInteger" line="156">
                <declaration name="modulus" type="LargeInteger" line="157"/>
            </method>
            <method name="newInstance" type="ModuloInteger" line="161">
                <params>
                    <param name="value" type="LargeInteger"/>
                </params>
                <declaration name="m" type="ModuloInteger" line="162"/>
            </method>
            <declaration name="FACTORY" type="ObjectFactory&lt;ModuloInteger&gt;" line="166"/>
            <anonymous_class line="166">
                <method name="create" type="ModuloInteger" line="167"/>
            </anonymous_class>
            <method name="ModuloInteger" type="constructor" line="172"/>
            <method name="copy" type="ModuloInteger" line="174"/>
            <declaration name="serialVersionUID" type="long" line="177"/>
        </class>
    </source>