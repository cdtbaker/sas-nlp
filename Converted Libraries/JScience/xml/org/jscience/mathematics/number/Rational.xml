<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.jscience.mathematics.number">
        <import package="org.jscience.mathematics.structure.Field"/>
        <import package="javolution.context.ObjectFactory"/>
        <import package="javolution.text.Text"/>
        <import package="javolution.xml.XMLFormat"/>
        <import package="javolution.xml.stream.XMLStreamException"/>
        <class name="Rational" line="18">
            <extends class="Number">
                <type_params>
                    <type_param name="Rational"/>
                </type_params>
            </extends>
            <implements interface="Field">
                <type_params>
                    <type_param name="Rational"/>
                </type_params>
            </implements>
            <javadoc line="18">
                &lt;p&gt; This class represents the ratio of two {@link LargeInteger} numbers.&lt;/p&gt;
                  &lt;p&gt; Instances of this class are immutable and can be used to find exact 
                  solutions to linear equations with the {@link org.jscience.mathematics.vector.Matrix Matrix} class.&lt;/p&gt;                
                <author>
                    <a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a>                    
                </author>
                <version>
                    3.0, February 13, 2006                    
                </version>
                <see>
                    <a href="http://en.wikipedia.org/wiki/Rational_numbers">
                           Wikipedia: Rational Numbers</a>                    
                </see>
            </javadoc>
            <declaration name="XML" type="XMLFormat&lt;Rational&gt;" line="32"/>
            <javadoc line="32">
                Holds the default XML representation for rational numbers.
                  This representation consists of a simple &lt;code&gt;value&lt;/code&gt; attribute
                  holding the {@link #toText() textual} representation.                
            </javadoc>
            <anonymous_class line="37">
                <method name="newInstance" type="Rational" line="40">
                    <params>
                        <param name="cls" type="Class<Rational>"/>
                        <param name="xml" type="InputElement"/>
                    </params>
                </method>
                <method name="write" type="void" line="44">
                    <params>
                        <param name="rational" type="Rational"/>
                        <param name="xml" type="OutputElement"/>
                    </params>
                </method>
                <method name="read" type="void" line="48">
                    <params>
                        <param name="xml" type="InputElement"/>
                        <param name="rational" type="Rational"/>
                    </params>
                    <comment line="49">
                        Nothing to do, immutable.                        
                    </comment>
                </method>
            </anonymous_class>
            <declaration name="FACTORY" type="ObjectFactory&lt;Rational&gt;" line="53"/>
            <javadoc line="53">
                Holds the factory constructing rational instances.                
            </javadoc>
            <anonymous_class line="56">
                <method name="create" type="Rational" line="58"/>
            </anonymous_class>
            <declaration name="ZERO" type="Rational" line="63"/>
            <javadoc line="63">
                The {@link Rational} representing the additive identity.                
            </javadoc>
            <declaration name="ONE" type="Rational" line="69"/>
            <javadoc line="69">
                The {@link Rational} representing the multiplicative identity.                
            </javadoc>
            <declaration name="_dividend" type="LargeInteger" line="75"/>
            <javadoc line="75">
                Holds the dividend.                
            </javadoc>
            <declaration name="_divisor" type="LargeInteger" line="80"/>
            <javadoc line="80">
                Holds the divisor.                
            </javadoc>
            <javadoc line="85">
                Default constructor.                
            </javadoc>
            <method name="Rational" type="constructor" line="88"/>
            <javadoc line="91">
                Creates a rational number for the specified integer dividend and 
                  divisor.                
                <param>
                    dividend the dividend value.                    
                </param>
                <param>
                    divisor the divisor value.                    
                </param>
                <throws>
                    ArithmeticException if <code>divisor == 0</code>                    
                </throws>
            </javadoc>
            <method name="Rational" type="constructor" line="99">
                <params>
                    <param name="dividend" type="LargeInteger"/>
                    <param name="divisor" type="LargeInteger"/>
                </params>
            </method>
            <javadoc line="104">
                Returns the rational number for the specified integer dividend and 
                  divisor.                
                <param>
                    dividend the dividend value.                    
                </param>
                <param>
                    divisor the divisor value.                    
                </param>
                <return>
                    <code>dividend / divisor</code>                    
                </return>
                <throws>
                    ArithmeticException if <code>divisor == 0</code>                    
                </throws>
            </javadoc>
            <method name="valueOf" type="Rational" line="113">
                <params>
                    <param name="dividend" type="long"/>
                    <param name="divisor" type="long"/>
                </params>
                <declaration name="r" type="Rational" line="114"/>
            </method>
            <javadoc line="120">
                Returns the rational number for the specified large integer 
                  dividend and divisor.                
                <param>
                    dividend the dividend value.                    
                </param>
                <param>
                    divisor the divisor value.                    
                </param>
                <return>
                    <code>dividend / divisor</code>                    
                </return>
                <throws>
                    ArithmeticException if <code>divisor.isZero()</code>                    
                </throws>
            </javadoc>
            <method name="valueOf" type="Rational" line="129">
                <params>
                    <param name="dividend" type="LargeInteger"/>
                    <param name="divisor" type="LargeInteger"/>
                </params>
                <declaration name="r" type="Rational" line="130"/>
            </method>
            <javadoc line="136">
                Returns the rational number for the specified character sequence.                
                <param>
                    chars the character sequence.                    
                </param>
                <return>
                    the corresponding rational number.                    
                </return>
            </javadoc>
            <method name="valueOf" type="Rational" line="142">
                <params>
                    <param name="chars" type="CharSequence"/>
                </params>
                <comment line="143">
                    TODO Use TextFormat...                    
                </comment>
                <comment line="150">
                    No divisor.                    
                </comment>
                <declaration name="txt" type="Text" line="143"/>
                <declaration name="sep" type="int" line="144"/>
                <scope line="145">
                    <declaration name="dividend" type="LargeInteger" line="146"/>
                    <declaration name="divisor" type="LargeInteger" line="147"/>
                </scope>
                <scope line="150"/>
            </method>
            <javadoc line="156">
                Returns the smallest dividend of the fraction representing this
                  rational number.                
                <return>
                    this rational dividend.                    
                </return>
            </javadoc>
            <method name="getDividend" type="LargeInteger" line="162"/>
            <javadoc line="166">
                Returns the smallest divisor of the fraction representing this 
                  rational (always positive).                
                <return>
                    this rational divisor.                    
                </return>
            </javadoc>
            <method name="getDivisor" type="LargeInteger" line="172"/>
            <javadoc line="176">
                Returns the closest integer value to this rational number.                
                <return>
                    this rational rounded to the nearest integer.                    
                </return>
            </javadoc>
            <method name="round" type="LargeInteger" line="181">
                <declaration name="halfDivisor" type="LargeInteger" line="182"/>
            </method>
            <javadoc line="187">
                Returns the opposite of this rational number.                
                <return>
                    <code>-this</code>.                    
                </return>
            </javadoc>
            <method name="opposite" type="Rational" line="192"/>
            <javadoc line="196">
                Returns the sum of this rational number with the one specified.                
                <param>
                    that the rational number to be added.                    
                </param>
                <return>
                    <code>this + that</code>.                    
                </return>
            </javadoc>
            <method name="plus" type="Rational" line="202">
                <params>
                    <param name="that" type="Rational"/>
                </params>
            </method>
            <javadoc line="209">
                Returns the difference between this rational number and the one
                  specified.                
                <param>
                    that the rational number to be subtracted.                    
                </param>
                <return>
                    <code>this - that</code>.                    
                </return>
            </javadoc>
            <method name="minus" type="Rational" line="216">
                <params>
                    <param name="that" type="Rational"/>
                </params>
            </method>
            <javadoc line="223">
                Returns the product of this rational number with the specified 
                  &lt;code&gt;long&lt;/code&gt; multiplier.                
                <param>
                    multiplier the <code>long</code> multiplier.                    
                </param>
                <return>
                    <code>this · multiplier</code>.                    
                </return>
            </javadoc>
            <method name="times" type="Rational" line="230">
                <params>
                    <param name="multiplier" type="long"/>
                </params>
            </method>
            <javadoc line="234">
                Returns the product of this rational number with the one specified.                
                <param>
                    that the rational number multiplier.                    
                </param>
                <return>
                    <code>this · that</code>.                    
                </return>
            </javadoc>
            <method name="times" type="Rational" line="240">
                <params>
                    <param name="that" type="Rational"/>
                </params>
                <declaration name="r" type="Rational" line="242"/>
            </method>
            <javadoc line="248">
                Returns the inverse of this rational number.                
                <return>
                    <code>1 / this</code>.                    
                </return>
                <throws>
                    ArithmeticException if <code>dividend.isZero()</code>                    
                </throws>
            </javadoc>
            <method name="inverse" type="Rational" line="254"/>
            <javadoc line="261">
                Returns this rational number divided by the one specified.                
                <param>
                    that the rational number divisor.                    
                </param>
                <return>
                    <code>this / that</code>.                    
                </return>
                <throws>
                    ArithmeticException if <code>that.equals(ZERO)</code>                    
                </throws>
            </javadoc>
            <method name="divide" type="Rational" line="268">
                <params>
                    <param name="that" type="Rational"/>
                </params>
            </method>
            <javadoc line="273">
                Returns the absolute value of this rational number.                
                <return>
                    <code>|this|</code>.                    
                </return>
            </javadoc>
            <method name="abs" type="Rational" line="278"/>
            <javadoc line="282">
                Indicates if this rational number is equal to zero.                
                <return>
                    <code>this == 0</code>                    
                </return>
            </javadoc>
            <method name="isZero" type="boolean" line="287"/>
            <javadoc line="292">
                Indicates if this rational number is greater than zero.                
                <return>
                    <code>this > 0</code>                    
                </return>
            </javadoc>
            <method name="isPositive" type="boolean" line="297"/>
            <javadoc line="301">
                Indicates if this rational number is less than zero.                
                <return>
                    <code>this < 0</code>                    
                </return>
            </javadoc>
            <method name="isNegative" type="boolean" line="306"/>
            <javadoc line="310">
                Compares the absolute value of two rational numbers.                
                <param>
                    that the rational number to be compared with.                    
                </param>
                <return>
                    <code>|this| > |that|</code>                    
                </return>
            </javadoc>
            <method name="isLargerThan" type="boolean" line="316">
                <params>
                    <param name="that" type="Rational"/>
                </params>
            </method>
            <javadoc line="321">
                Returns the decimal text representation of this number.                
                <return>
                    the text representation of this number.                    
                </return>
            </javadoc>
            <method name="toText" type="Text" line="326"/>
            <javadoc line="331">
                Compares this rational number against the specified object.                
                <param>
                    that the object to compare with.                    
                </param>
                <return>
                    <code>true</code> if the objects are the same;
                      <code>false</code> otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="338">
                <params>
                    <param name="that" type="Object"/>
                </params>
                <scope line="339"/>
                <scope line="342"/>
            </method>
            <javadoc line="347">
                Returns the hash code for this rational number.                
                <return>
                    the hash code value.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="352"/>
            <javadoc line="356">
                Returns the value of this rational number as a &lt;code&gt;long&lt;/code&gt;.                
                <return>
                    the numeric value represented by this rational after conversion
                      to type <code>long</code>.                    
                </return>
            </javadoc>
            <method name="longValue" type="long" line="362"/>
            <javadoc line="366">
                Returns the value of this rational number as a &lt;code&gt;double&lt;/code&gt;.                
                <return>
                    the numeric value represented by this rational after conversion
                      to type <code>double</code>.                    
                </return>
            </javadoc>
            <method name="doubleValue" type="double" line="372">
                <comment line="373">
                    Avoid negative numbers (ref. bitLength)                    
                </comment>
                <comment line="376">
                    Normalize to 63 bits (minimum).                    
                </comment>
                <comment line="380">
                    Normalizes the divisor to 63 bits.                    
                </comment>
                <comment line="386">
                    Normalizes the dividend to 63 bits.                    
                </comment>
                <declaration name="dividendBitLength" type="int" line="377"/>
                <declaration name="divisorBitLength" type="int" line="378"/>
                <scope line="379">
                    <declaration name="shift" type="int" line="381"/>
                    <declaration name="divisor" type="long" line="382"/>
                    <declaration name="dividend" type="LargeInteger" line="383"/>
                </scope>
                <scope line="385">
                    <declaration name="shift" type="int" line="387"/>
                    <declaration name="dividend" type="long" line="388"/>
                    <declaration name="divisor" type="LargeInteger" line="389"/>
                </scope>
            </method>
            <javadoc line="394">
                Compares two rational number numerically.                
                <param>
                    that the rational number to compare with.                    
                </param>
                <return>
                    -1, 0 or 1 as this rational number is numerically less than, 
                      equal to, or greater than <code>that</code>.                    
                </return>
            </javadoc>
            <method name="compareTo" type="int" line="401">
                <params>
                    <param name="that" type="Rational"/>
                </params>
            </method>
            <javadoc line="406">
                Returns the normalized form of this rational.                
                <return>
                    this rational after normalization.                    
                </return>
                <throws>
                    ArithmeticException if <code>divisor.isZero()</code>                    
                </throws>
            </javadoc>
            <method name="normalize" type="Rational" line="412">
                <scope line="413">
                    <scope line="414">
                        <declaration name="gcd" type="LargeInteger" line="415"/>
                        <scope line="416"/>
                    </scope>
                    <scope line="421"/>
                </scope>
                <scope line="426"/>
            </method>
            <method name="copy" type="Rational" line="432">
                <declaration name="r" type="Rational" line="433"/>
            </method>
            <declaration name="serialVersionUID" type="long" line="439"/>
        </class>
    </source>