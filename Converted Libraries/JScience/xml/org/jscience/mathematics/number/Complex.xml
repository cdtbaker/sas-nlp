<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.jscience.mathematics.number">
        <import package="java.io.IOException"/>
        <import package="org.jscience.mathematics.structure.Field"/>
        <import package="javolution.lang.MathLib"/>
        <import package="javolution.text.Text"/>
        <import package="javolution.text.TextFormat"/>
        <import package="javolution.text.TypeFormat"/>
        <import package="javolution.context.ObjectFactory"/>
        <import package="javolution.xml.XMLFormat"/>
        <import package="javolution.xml.stream.XMLStreamException"/>
        <class name="Complex" line="11">
            <extends class="Number">
                <type_params>
                    <type_param name="Complex"/>
                </type_params>
            </extends>
            <implements interface="Field">
                <type_params>
                    <type_param name="Complex"/>
                </type_params>
            </implements>
            <javadoc line="11">
                &lt;p&gt; This class represents an immutable complex number.&lt;/p&gt;                
                <author>
                    <a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a>                    
                </author>
                <version>
                    3.0, February 13, 2006                    
                </version>
                <see>
                    <a href="http://en.wikipedia.org/wiki/Complex_number">
                           Wikipedia: Complex number</a>                    
                </see>
            </javadoc>
            <declaration name="CARTESIAN_FORMAT" type="TextFormat&lt;Complex&gt;" line="19"/>
            <javadoc line="19">
                Holds the local text format for complex numbers (cartesian form 
                  by default, e.g.&lt;code&gt; &quot;2.34 - 0.4i&quot;&lt;/code&gt;).                
            </javadoc>
            <anonymous_class line="23">
                <method name="format" type="Appendable" line="24">
                    <params>
                        <param name="complex" type="Complex"/>
                        <param name="appendable" type="Appendable"/>
                    </params>
                    <scope line="26"/>
                    <scope line="30"/>
                </method>
                <method name="parse" type="Complex" line="36">
                    <params>
                        <param name="csq" type="CharSequence"/>
                        <param name="cursor" type="Cursor"/>
                    </params>
                    <declaration name="real" type="double" line="37"/>
                    <declaration name="op" type="char" line="39"/>
                    <declaration name="imaginary" type="double" line="42"/>
                    <declaration name="i" type="char" line="43"/>
                </method>
            </anonymous_class>
            <scope line="49"/>
            <declaration name="ZERO" type="Complex" line="52"/>
            <javadoc line="52">
                The complex number zero.                
            </javadoc>
            <declaration name="ONE" type="Complex" line="56"/>
            <javadoc line="56">
                The complex number one.                
            </javadoc>
            <declaration name="I" type="Complex" line="60"/>
            <javadoc line="60">
                The imaginary unit &lt;i&gt;&lt;b&gt;i&lt;/b&gt;&lt;/i&gt;.                
            </javadoc>
            <declaration name="XML" type="XMLFormat&lt;Complex&gt;" line="64"/>
            <javadoc line="64">
                Holds the default XML representation for complex numbers.
                  This representation consists of &lt;code&gt;real&lt;/code&gt; and  
                  &lt;code&gt;imaginary&lt;/code&gt; attributes (e.g. 
                  &lt;code&gt;&amp;lt;Complex real=&quot;2.34&quot; imaginary=&quot;-0.4&quot;/&amp;gt;&lt;/code&gt;).                
            </javadoc>
            <anonymous_class line="70">
                <method name="newInstance" type="Complex" line="71">
                    <params>
                        <param name="cls" type="Class<Complex>"/>
                        <param name="xml" type="InputElement"/>
                    </params>
                </method>
                <method name="write" type="void" line="74">
                    <params>
                        <param name="complex" type="Complex"/>
                        <param name="xml" type="OutputElement"/>
                    </params>
                </method>
                <method name="read" type="void" line="78">
                    <params>
                        <param name="xml" type="InputElement"/>
                        <param name="complex" type="Complex"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="FACTORY" type="ObjectFactory&lt;Complex&gt;" line="82"/>
            <javadoc line="82">
                Holds the factory constructing complex instances.                
            </javadoc>
            <anonymous_class line="85">
                <method name="create" type="Complex" line="86"/>
            </anonymous_class>
            <declaration name="_real" type="double" line="91"/>
            <javadoc line="91">
                Holds the real component.                
            </javadoc>
            <declaration name="_imaginary" type="double" line="95"/>
            <javadoc line="95">
                Holds the imaginary component.                
            </javadoc>
            <javadoc line="99">
                Default constructor.                
            </javadoc>
            <method name="Complex" type="constructor" line="102"/>
            <javadoc line="104">
                Creates a complex number having the specified real and imaginary
                  components.                
                <param>
                    real the real component of this complex number.                    
                </param>
                <param>
                    imaginary the imaginary component of this complex number.                    
                </param>
            </javadoc>
            <method name="Complex" type="constructor" line="110">
                <params>
                    <param name="real" type="double"/>
                    <param name="imaginary" type="double"/>
                </params>
            </method>
            <javadoc line="114">
                Returns the complex number having the specified real and imaginary
                  components.                
                <param>
                    real the real component of this complex number.                    
                </param>
                <param>
                    imaginary the imaginary component of this complex number.                    
                </param>
                <return>
                    the corresponding complex number.                    
                </return>
                <see>
                    #getReal                    
                </see>
                <see>
                    #getImaginary                    
                </see>
            </javadoc>
            <method name="valueOf" type="Complex" line="123">
                <params>
                    <param name="real" type="double"/>
                    <param name="imaginary" type="double"/>
                </params>
                <declaration name="c" type="Complex" line="124"/>
            </method>
            <javadoc line="129">
                Returns the complex number for the specified character sequence.                
                <param>
                    csq the character sequence.                    
                </param>
                <return>
                    <code>TextFormat.getInstance(Complex.class).parse(csq)</code>                    
                </return>
                <throws>
                    IllegalArgumentException if the character sequence does not 
                      contain a parsable complex number.                    
                </throws>
                <see>
                    TextFormat#getInstance(Class)                    
                </see>
            </javadoc>
            <method name="valueOf" type="Complex" line="137">
                <params>
                    <param name="csq" type="CharSequence"/>
                </params>
            </method>
            <javadoc line="140">
                Indicates if either the real or imaginary component of this complex
                  is infinite.                
                <return>
                    <code>true</code> if this complex is infinite;
                      <code>false</code> otherwise.                    
                </return>
            </javadoc>
            <method name="isInfinite" type="boolean" line="146"/>
            <javadoc line="149">
                Indicates if either the real or imaginary component of this complex
                  is not a number.                
                <return>
                    <code>true</code> if this complex is NaN;
                      <code>false</code> otherwise.                    
                </return>
            </javadoc>
            <method name="isNaN" type="boolean" line="155"/>
            <javadoc line="158">
                Returns the real component of this complex number.                
                <return>
                    the real component.                    
                </return>
            </javadoc>
            <method name="getReal" type="double" line="162"/>
            <javadoc line="165">
                Returns the imaginary component of this complex number.                
                <return>
                    the imaginary component.                    
                </return>
            </javadoc>
            <method name="getImaginary" type="double" line="169"/>
            <javadoc line="172">
                Returns the negation of this complex.                
                <return>
                    <code>-this</code>.                    
                </return>
            </javadoc>
            <method name="opposite" type="Complex" line="176">
                <declaration name="c" type="Complex" line="177"/>
            </method>
            <javadoc line="182">
                Returns the sum of this complex with the one specified.                
                <param>
                    that the complex to be added.                    
                </param>
                <return>
                    <code>this + that</code>.                    
                </return>
            </javadoc>
            <method name="plus" type="Complex" line="187">
                <params>
                    <param name="that" type="Complex"/>
                </params>
                <declaration name="c" type="Complex" line="188"/>
            </method>
            <javadoc line="193">
                Returns the difference between this complex and the one specified.                
                <param>
                    that the complex to be subtracted.                    
                </param>
                <return>
                    <code>this - that</code>.                    
                </return>
            </javadoc>
            <method name="minus" type="Complex" line="198">
                <params>
                    <param name="that" type="Complex"/>
                </params>
                <declaration name="c" type="Complex" line="199"/>
            </method>
            <javadoc line="204">
                Returns this complex multiplied by the specified factor.                
                <param>
                    k the factor multiplier.                    
                </param>
                <return>
                    <code>this  k</code>.                    
                </return>
            </javadoc>
            <method name="times" type="Complex" line="209">
                <params>
                    <param name="k" type="double"/>
                </params>
                <declaration name="c" type="Complex" line="210"/>
            </method>
            <javadoc line="215">
                Returns the product of this complex with the one specified.                
                <param>
                    that the complex multiplier.                    
                </param>
                <return>
                    <code>this  that</code>.                    
                </return>
            </javadoc>
            <method name="times" type="Complex" line="220">
                <params>
                    <param name="that" type="Complex"/>
                </params>
                <declaration name="c" type="Complex" line="221"/>
            </method>
            <javadoc line="226">
                Returns the inverse of this complex.                
                <return>
                    <code>1 / this</code>.                    
                </return>
            </javadoc>
            <method name="inverse" type="Complex" line="230">
                <declaration name="c" type="Complex" line="231"/>
                <declaration name="tmp" type="double" line="232"/>
            </method>
            <javadoc line="237">
                Returns this complex divided by the specified factor.                
                <param>
                    k the factor divisor.                    
                </param>
                <return>
                    <code>this / k</code>.                    
                </return>
            </javadoc>
            <method name="divide" type="Complex" line="242">
                <params>
                    <param name="k" type="double"/>
                </params>
                <declaration name="c" type="Complex" line="243"/>
            </method>
            <javadoc line="248">
                Returns this complex divided by the specified complex.                
                <param>
                    that the complex divisor.                    
                </param>
                <return>
                    <code>this / that</code>.                    
                </return>
            </javadoc>
            <method name="divide" type="Complex" line="253">
                <params>
                    <param name="that" type="Complex"/>
                </params>
                <declaration name="tmp" type="double" line="254"/>
                <declaration name="thatInvReal" type="double" line="255"/>
                <declaration name="thatInvImaginary" type="double" line="256"/>
                <declaration name="c" type="Complex" line="257"/>
            </method>
            <javadoc line="262">
                Returns the conjugate of this complex number.                
                <return>
                    <code>(this.real(), - this.imaginary())</code>.                    
                </return>
            </javadoc>
            <method name="conjugate" type="Complex" line="266">
                <declaration name="c" type="Complex" line="267"/>
            </method>
            <javadoc line="272">
                Returns the magnitude of this complex number, also referred to
                  as the &quot;modulus&quot; or &quot;length&quot;.                
                <return>
                    the magnitude of this complex number.                    
                </return>
            </javadoc>
            <method name="magnitude" type="double" line="277"/>
            <javadoc line="280">
                Returns the argument of this complex number. It is the angle
                  in radians, measured counter-clockwise from the real axis.                
                <return>
                    argument of this complex number.                    
                </return>
            </javadoc>
            <method name="argument" type="double" line="285"/>
            <javadoc line="288">
                Returns one of the two square root of this complex number.                
                <return>
                    <code>sqrt(this)</code>.                    
                </return>
            </javadoc>
            <method name="sqrt" type="Complex" line="292">
                <declaration name="c" type="Complex" line="293"/>
                <declaration name="m" type="double" line="294"/>
                <declaration name="a" type="double" line="295"/>
            </method>
            <javadoc line="300">
                Returns the exponential number &lt;i&gt;e&lt;/i&gt; raised to the power of
                  this complex.
                  Note: &lt;code&gt;&lt;i&gt;&lt;b&gt;e&lt;/b&gt;&lt;/i&gt;&lt;sup&gt;&lt;font size=+0&gt;&lt;b&gt;PI&lt;/b&gt;&lt;i&gt;&lt;b&gt;i
                  &lt;/b&gt;&lt;/i&gt;&lt;/font&gt;&lt;/sup&gt; = -1&lt;/code&gt;                
                <return>
                    <code>exp(this)</code>.                    
                </return>
            </javadoc>
            <method name="exp" type="Complex" line="307">
                <declaration name="c" type="Complex" line="308"/>
                <declaration name="m" type="double" line="309"/>
            </method>
            <javadoc line="314">
                Returns the principal natural logarithm (base e) of this complex.
                  Note: There are an infinity of solutions.                
                <return>
                    <code>log(this)</code>.                    
                </return>
            </javadoc>
            <method name="log" type="Complex" line="319">
                <declaration name="c" type="Complex" line="320"/>
            </method>
            <javadoc line="325">
                Returns this complex raised to the specified power.                
                <param>
                    e the exponent.                    
                </param>
                <return>
                    <code>thise</code>.                    
                </return>
            </javadoc>
            <method name="pow" type="Complex" line="330">
                <params>
                    <param name="e" type="double"/>
                </params>
                <declaration name="c" type="Complex" line="331"/>
                <declaration name="m" type="double" line="332"/>
                <declaration name="a" type="double" line="333"/>
            </method>
            <javadoc line="338">
                Returns this complex raised to the power of the specified complex
                  exponent.                
                <param>
                    that the exponent.                    
                </param>
                <return>
                    <code>thisthat</code>.                    
                </return>
            </javadoc>
            <method name="pow" type="Complex" line="344">
                <params>
                    <param name="that" type="Complex"/>
                </params>
                <declaration name="c" type="Complex" line="345"/>
                <declaration name="r1" type="double" line="346"/>
                <declaration name="i1" type="double" line="347"/>
                <declaration name="r2" type="double" line="348"/>
                <declaration name="i2" type="double" line="349"/>
                <declaration name="m" type="double" line="350"/>
            </method>
            <javadoc line="355">
                Indicates if two complexes are &quot;sufficiently&quot; alike to be considered
                  equal.                
                <param>
                    that the complex to compare with.                    
                </param>
                <param>
                    tolerance the maximum magnitude of the difference between
                      them before they are considered <i>not</i> equal.                    
                </param>
                <return>
                    <code>true</code> if they are considered equal;
                      <code>false</code> otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="364">
                <params>
                    <param name="that" type="Complex"/>
                    <param name="tolerance" type="double"/>
                </params>
            </method>
            <javadoc line="367">
                Compares this complex against the specified Object.                
                <param>
                    that the object to compare with.                    
                </param>
                <return>
                    <code>true</code> if the objects are the same;
                      <code>false</code> otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="373">
                <params>
                    <param name="that" type="Object"/>
                </params>
            </method>
            <javadoc line="376">
                Returns the hash code for this complex number.                
                <return>
                    the hash code value.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="380">
                <declaration name="h" type="int" line="381"/>
            </method>
            <javadoc line="387">
                Returns the text representation of this complex number.                
                <return>
                    <code>TextFormat.getInstance(Complex.class).format(this)</code>                    
                </return>
                <see>
                    TextFormat#getInstance(Class)                    
                </see>
            </javadoc>
            <method name="toText" type="Text" line="392"/>
            <javadoc line="395">
                Returns the {@link #getReal real} component of this {@link Complex}number as a &lt;code&gt;long&lt;/code&gt;.                
                <return>
                    <code>(long) this.getReal()</code>                    
                </return>
            </javadoc>
            <method name="longValue" type="long" line="399"/>
            <javadoc line="402">
                Returns the {@link #getReal real} component of this {@link Complex}number as a &lt;code&gt;double&lt;/code&gt;.                
                <return>
                    <code>(double) this.getReal()</code>                    
                </return>
            </javadoc>
            <method name="doubleValue" type="double" line="406"/>
            <javadoc line="409">
                Compares two complex numbers, the real components are compared first,
                  then if equal, the imaginary components.                
                <param>
                    that the complex number to be compared with.                    
                </param>
                <return>
                    -1, 0, 1 based upon the ordering.                    
                </return>
            </javadoc>
            <method name="compareTo" type="int" line="415">
                <params>
                    <param name="that" type="Complex"/>
                </params>
                <declaration name="l1" type="long" line="418"/>
                <declaration name="l2" type="long" line="419"/>
            </method>
            <javadoc line="430">
                Compares the {@link #magnitude() magnitude} of this complex number
                  with the magnitude of the complex number specified.                
                <param>
                    that the complex number to be compared with.                    
                </param>
                <return>
                    <code>|this| > |that|</code>                    
                </return>
            </javadoc>
            <method name="isLargerThan" type="boolean" line="436">
                <params>
                    <param name="that" type="Complex"/>
                </params>
            </method>
            <method name="copy" type="Complex" line="439"/>
            <declaration name="serialVersionUID" type="long" line="442"/>
        </class>
    </source>