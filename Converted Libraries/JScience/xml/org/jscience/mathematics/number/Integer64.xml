<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.jscience.mathematics.number">
        <import package="javolution.context.ObjectFactory"/>
        <import package="javolution.lang.MathLib"/>
        <import package="javolution.text.Text"/>
        <import package="javolution.text.TypeFormat"/>
        <import package="javolution.xml.XMLFormat"/>
        <import package="javolution.xml.stream.XMLStreamException"/>
        <class name="Integer64" line="18">
            <extends class="Number">
                <type_params>
                    <type_param name="Integer64"/>
                </type_params>
            </extends>
            <javadoc line="18">
                &lt;p&gt; This class represents a 64 bits integer number.&lt;/p&gt;                
                <author>
                    &lt;a href=&quot;mailto:jean-marie@dautelle.com&quot;&gt;Jean-Marie Dautelle&lt;/a&gt;                    
                </author>
                <version>
                    3.0, February 13, 2006                    
                </version>
                <see>
                    &lt;a href=&quot;http://en.wikipedia.org/wiki/Integer&quot;&gt;
                           Wikipedia: Integer&lt;/a&gt;                    
                </see>
            </javadoc>
            <declaration name="XML" type="XMLFormat&lt;Integer64&gt;" line="28"/>
            <javadoc line="28">
                Holds the default XML representation for 64 bits integer numbers.
                  This representation consists of a simple &lt;code&gt;value&lt;/code&gt; attribute
                  holding the {@link #toText() textual} representation.                
            </javadoc>
            <anonymous_class line="33">
                <method name="newInstance" type="Integer64" line="37">
                    <params>
                        <param name="cls" type="Class<Integer64>"/>
                        <param name="xml" type="InputElement"/>
                    </params>
                </method>
                <method name="write" type="void" line="42">
                    <params>
                        <param name="integer64" type="Integer64"/>
                        <param name="xml" type="OutputElement"/>
                    </params>
                </method>
                <method name="read" type="void" line="46">
                    <params>
                        <param name="xml" type="InputElement"/>
                        <param name="integer64" type="Integer64"/>
                    </params>
                    <comment line="48">
                        Nothing to do, immutable.                        
                    </comment>
                </method>
            </anonymous_class>
            <declaration name="FACTORY" type="ObjectFactory&lt;Integer64&gt;" line="51"/>
            <javadoc line="51">
                Holds the factory used to produce 64 bits integer instances.                
            </javadoc>
            <anonymous_class line="54">
                <method name="create" type="Integer64" line="56"/>
            </anonymous_class>
            <declaration name="ZERO" type="Integer64" line="61"/>
            <javadoc line="61">
                The 64 bits floating point representing zero.                
            </javadoc>
            <declaration name="ONE" type="Integer64" line="66"/>
            <javadoc line="66">
                The 64 bits floating point representing one.                
            </javadoc>
            <declaration name="_value" type="long" line="71"/>
            <javadoc line="71">
                The associated long value.                
            </javadoc>
            <javadoc line="76">
                Default constructor.                
            </javadoc>
            <method name="Integer64" type="constructor" line="79"/>
            <javadoc line="82">
                Returns the 64 bits integer from the specified &lt;code&gt;long&lt;/code&gt; value.                
                <param>
                    longValue the &lt;code&gt;long&lt;/code&gt; value for this number.                    
                </param>
                <see>
                    #longValue()                    
                </see>
            </javadoc>
            <method name="Integer64" type="constructor" line="88">
                <params>
                    <param name="longValue" type="long"/>
                </params>
            </method>
            <javadoc line="92">
                Returns the 64 bits integer from the specified &lt;code&gt;long&lt;/code&gt; value.                
                <param>
                    longValue the &lt;code&gt;long&lt;/code&gt; value for this number.                    
                </param>
                <return>
                    the corresponding number.                    
                </return>
                <see>
                    #longValue()                    
                </see>
            </javadoc>
            <method name="valueOf" type="Integer64" line="99">
                <params>
                    <param name="longValue" type="long"/>
                </params>
                <declaration name="r" type="Integer64" line="100"/>
            </method>
            <javadoc line="105">
                Returns the number for the specified character sequence.                
                <param>
                    chars the character sequence.                    
                </param>
                <return>
                    the corresponding number.                    
                </return>
            </javadoc>
            <method name="valueOf" type="Integer64" line="111">
                <params>
                    <param name="chars" type="CharSequence"/>
                </params>
                <declaration name="r" type="Integer64" line="112"/>
            </method>
            <javadoc line="117">
                Returns the opposite of this number.                
                <return>
                    &lt;code&gt;-this&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="opposite" type="Integer64" line="122">
                <declaration name="r" type="Integer64" line="123"/>
            </method>
            <javadoc line="128">
                Returns the sum of this number with the one specified.                
                <param>
                    that the number to be added.                    
                </param>
                <return>
                    &lt;code&gt;this + that&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="plus" type="Integer64" line="134">
                <params>
                    <param name="that" type="Integer64"/>
                </params>
                <declaration name="r" type="Integer64" line="135"/>
            </method>
            <javadoc line="140">
                Returns the sum of this number with the specifice value.                
                <param>
                    value the value to be added.                    
                </param>
                <return>
                    &lt;code&gt;this + value&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="plus" type="Integer64" line="146">
                <params>
                    <param name="value" type="long"/>
                </params>
                <declaration name="r" type="Integer64" line="147"/>
            </method>
            <javadoc line="152">
                Returns the difference between this number and the one specified.                
                <param>
                    that the number to be subtracted.                    
                </param>
                <return>
                    &lt;code&gt;this - that&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="minus" type="Integer64" line="158">
                <params>
                    <param name="that" type="Integer64"/>
                </params>
                <declaration name="r" type="Integer64" line="159"/>
            </method>
            <javadoc line="164">
                Returns the difference between this number and the specified value                
                <param>
                    value the value to be subtracted.                    
                </param>
                <return>
                    &lt;code&gt;this - value&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="minus" type="Integer64" line="170">
                <params>
                    <param name="value" type="long"/>
                </params>
                <declaration name="r" type="Integer64" line="171"/>
            </method>
            <javadoc line="176">
                Returns the product of this number with the one specified.                
                <param>
                    that the number multiplier.                    
                </param>
                <return>
                    &lt;code&gt;this · that&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="times" type="Integer64" line="182">
                <params>
                    <param name="that" type="Integer64"/>
                </params>
                <declaration name="r" type="Integer64" line="183"/>
            </method>
            <javadoc line="188">
                Returns the product of this number with the specified value.                
                <param>
                    value the value multiplier.                    
                </param>
                <return>
                    &lt;code&gt;this · value&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="times" type="Integer64" line="194">
                <params>
                    <param name="value" type="long"/>
                </params>
                <declaration name="r" type="Integer64" line="195"/>
            </method>
            <javadoc line="200">
                Returns this number divided by the one specified.                
                <param>
                    that the number divisor.                    
                </param>
                <return>
                    &lt;code&gt;this / that&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="divide" type="Integer64" line="206">
                <params>
                    <param name="that" type="Integer64"/>
                </params>
                <declaration name="r" type="Integer64" line="207"/>
            </method>
            <javadoc line="212">
                Returns this number divided by the specified value.                
                <param>
                    value the value divisor.                    
                </param>
                <return>
                    &lt;code&gt;this / value&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="divide" type="Integer64" line="218">
                <params>
                    <param name="value" type="long"/>
                </params>
                <declaration name="r" type="Integer64" line="219"/>
            </method>
            <javadoc line="224">
                Compares the magnitude of this number with that number.                
                <return>
                    &lt;code&gt;|this| &gt; |that|&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="isLargerThan" type="boolean" line="229">
                <params>
                    <param name="that" type="Integer64"/>
                </params>
            </method>
            <javadoc line="233">
                Returns the absolute value of this number.                
                <return>
                    &lt;code&gt;|this|&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="abs" type="Integer64" line="238">
                <declaration name="r" type="Integer64" line="239"/>
            </method>
            <javadoc line="244">
                Returns the decimal text representation of this number.                
                <return>
                    the text representation of this number.                    
                </return>
            </javadoc>
            <method name="toText" type="Text" line="249"/>
            <javadoc line="253">
                Compares this number against the specified object.                
                <param>
                    that the object to compare with.                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the objects are the same;
                      &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="260">
                <params>
                    <param name="that" type="Object"/>
                </params>
            </method>
            <javadoc line="265">
                Compares this number against the specified value.                
                <param>
                    value the value to compare with.                    
                </param>
                <return>
                    &lt;code&gt;this.longValue() == value&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="271">
                <params>
                    <param name="value" type="long"/>
                </params>
            </method>
            <javadoc line="275">
                Compares this number with the specified value for order.                
                <param>
                    value the value to be compared with.                    
                </param>
                <return>
                    a negative integer, zero, or a positive integer as this number
                      is less than, equal to, or greater than the specified value.                    
                </return>
            </javadoc>
            <method name="compareTo" type="int" line="282">
                <params>
                    <param name="value" type="long"/>
                </params>
                <scope line="283"/>
                <scope line="285"/>
                <scope line="287"/>
            </method>
            <javadoc line="292">
                Returns the hash code for this number.                
                <return>
                    the hash code value.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="297">
                <declaration name="h" type="int" line="298"/>
            </method>
            <method name="longValue" type="long" line="306"/>
            <method name="doubleValue" type="double" line="311"/>
            <method name="compareTo" type="int" line="316">
                <params>
                    <param name="that" type="Integer64"/>
                </params>
            </method>
            <method name="copy" type="Integer64" line="321"/>
            <declaration name="serialVersionUID" type="long" line="325"/>
        </class>
    </source>