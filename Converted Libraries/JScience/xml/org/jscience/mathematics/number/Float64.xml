<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.jscience.mathematics.number">
        <import package="org.jscience.mathematics.structure.Field"/>
        <import package="javolution.context.ObjectFactory"/>
        <import package="javolution.lang.MathLib"/>
        <import package="javolution.text.Text"/>
        <import package="javolution.text.TypeFormat"/>
        <import package="javolution.xml.XMLFormat"/>
        <import package="javolution.xml.stream.XMLStreamException"/>
        <class name="Float64" line="9">
            <extends class="Number">
                <type_params>
                    <type_param name="Float64"/>
                </type_params>
            </extends>
            <implements interface="Field">
                <type_params>
                    <type_param name="Float64"/>
                </type_params>
            </implements>
            <javadoc line="9">
                &lt;p&gt; This class represents a 64 bits floating point number.&lt;/p&gt;                
                <author>
                    <a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a>                    
                </author>
                <version>
                    3.0, February 13, 2006                    
                </version>
            </javadoc>
            <declaration name="XML" type="XMLFormat&lt;Float64&gt;" line="15"/>
            <javadoc line="15">
                Holds the default XML representation for 64 bits floating point numbers.
                  This representation consists of a simple &lt;code&gt;value&lt;/code&gt; attribute
                  holding the {@link #toText() textual} representation.                
            </javadoc>
            <anonymous_class line="20">
                <method name="newInstance" type="Float64" line="21">
                    <params>
                        <param name="cls" type="Class<Float64>"/>
                        <param name="xml" type="InputElement"/>
                    </params>
                </method>
                <method name="write" type="void" line="24">
                    <params>
                        <param name="float64" type="Float64"/>
                        <param name="xml" type="OutputElement"/>
                    </params>
                </method>
                <method name="read" type="void" line="27">
                    <params>
                        <param name="xml" type="InputElement"/>
                        <param name="float64" type="Float64"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="FACTORY" type="ObjectFactory&lt;Float64&gt;" line="31"/>
            <javadoc line="31">
                Holds the factory used to produce 64 bits float instances.                
            </javadoc>
            <anonymous_class line="34">
                <method name="create" type="Float64" line="35"/>
            </anonymous_class>
            <declaration name="ZERO" type="Float64" line="40"/>
            <javadoc line="40">
                The 64 bits floating point representing zero.                
            </javadoc>
            <declaration name="ONE" type="Float64" line="44"/>
            <javadoc line="44">
                The 64 bits floating point representing one.                
            </javadoc>
            <declaration name="_value" type="double" line="48"/>
            <javadoc line="48">
                The associated double value.                
            </javadoc>
            <javadoc line="52">
                Default constructor.                
            </javadoc>
            <method name="Float64" type="constructor" line="55"/>
            <javadoc line="57">
                Creates a 64 bits float having the specified &lt;code&gt;double&lt;/code&gt; value.                
                <param>
                    doubleValue the <code>double</code> value for this number.                    
                </param>
            </javadoc>
            <method name="Float64" type="constructor" line="61">
                <params>
                    <param name="doubleValue" type="double"/>
                </params>
            </method>
            <javadoc line="64">
                Returns the 64 bits float from the specified &lt;code&gt;double&lt;/code&gt; value.                
                <param>
                    doubleValue the <code>double</code> value for this number.                    
                </param>
                <return>
                    the corresponding number.                    
                </return>
                <see>
                    #doubleValue()                    
                </see>
            </javadoc>
            <method name="valueOf" type="Float64" line="70">
                <params>
                    <param name="doubleValue" type="double"/>
                </params>
                <declaration name="r" type="Float64" line="71"/>
            </method>
            <javadoc line="75">
                Returns the number for the specified character sequence.                
                <param>
                    chars the character sequence.                    
                </param>
                <return>
                    the corresponding number.                    
                </return>
            </javadoc>
            <method name="valueOf" type="Float64" line="80">
                <params>
                    <param name="chars" type="CharSequence"/>
                </params>
                <declaration name="r" type="Float64" line="81"/>
            </method>
            <javadoc line="85">
                Indicates if this number is infinite.                
                <return>
                    <code>true</code> if this number is infinite;
                      <code>false</code> otherwise.                    
                </return>
            </javadoc>
            <method name="isInfinite" type="boolean" line="90"/>
            <javadoc line="93">
                Indicates if this number is not a number.                
                <return>
                    <code>true</code> if this number is NaN;
                      <code>false</code> otherwise.                    
                </return>
            </javadoc>
            <method name="isNaN" type="boolean" line="98"/>
            <javadoc line="101">
                Returns the closest integer value to this 64 bits floating point number.                
                <return>
                    this number rounded to the nearest integer.                    
                </return>
            </javadoc>
            <method name="round" type="long" line="105"/>
            <javadoc line="108">
                Returns the opposite of this number.                
                <return>
                    <code>-this</code>.                    
                </return>
            </javadoc>
            <method name="opposite" type="Float64" line="112">
                <declaration name="r" type="Float64" line="113"/>
            </method>
            <javadoc line="117">
                Returns the sum of this number with the one specified.                
                <param>
                    that the number to be added.                    
                </param>
                <return>
                    <code>this + that</code>.                    
                </return>
            </javadoc>
            <method name="plus" type="Float64" line="122">
                <params>
                    <param name="that" type="Float64"/>
                </params>
                <declaration name="r" type="Float64" line="123"/>
            </method>
            <javadoc line="127">
                Returns the sum of this number with the specified value.                
                <param>
                    value the value to be added.                    
                </param>
                <return>
                    <code>this + value</code>.                    
                </return>
            </javadoc>
            <method name="plus" type="Float64" line="132">
                <params>
                    <param name="value" type="double"/>
                </params>
                <declaration name="r" type="Float64" line="133"/>
            </method>
            <javadoc line="137">
                Returns the difference between this number and the one specified.                
                <param>
                    that the number to be subtracted.                    
                </param>
                <return>
                    <code>this - that</code>.                    
                </return>
            </javadoc>
            <method name="minus" type="Float64" line="142">
                <params>
                    <param name="that" type="Float64"/>
                </params>
                <declaration name="r" type="Float64" line="143"/>
            </method>
            <javadoc line="147">
                Returns the difference between this number and the specified value.                
                <param>
                    value the value to be subtracted.                    
                </param>
                <return>
                    <code>this - value</code>.                    
                </return>
            </javadoc>
            <method name="minus" type="Float64" line="152">
                <params>
                    <param name="value" type="double"/>
                </params>
                <declaration name="r" type="Float64" line="153"/>
            </method>
            <javadoc line="157">
                Returns the product of this number with the one specified.                
                <param>
                    that the number multiplier.                    
                </param>
                <return>
                    <code>this · that</code>.                    
                </return>
            </javadoc>
            <method name="times" type="Float64" line="162">
                <params>
                    <param name="that" type="Float64"/>
                </params>
                <declaration name="r" type="Float64" line="163"/>
            </method>
            <javadoc line="167">
                Returns the product of this number with the specified value.                
                <param>
                    value the value multiplier.                    
                </param>
                <return>
                    <code>this · value</code>.                    
                </return>
            </javadoc>
            <method name="times" type="Float64" line="172">
                <params>
                    <param name="value" type="double"/>
                </params>
                <declaration name="r" type="Float64" line="173"/>
            </method>
            <javadoc line="177">
                Returns the reciprocal of this number.                
                <return>
                    <code>1 / this</code>.                    
                </return>
            </javadoc>
            <method name="inverse" type="Float64" line="181">
                <declaration name="r" type="Float64" line="182"/>
            </method>
            <javadoc line="186">
                Returns this number divided by the one specified.                
                <param>
                    that the number divisor.                    
                </param>
                <return>
                    <code>this / that</code>.                    
                </return>
            </javadoc>
            <method name="divide" type="Float64" line="191">
                <params>
                    <param name="that" type="Float64"/>
                </params>
                <declaration name="r" type="Float64" line="192"/>
            </method>
            <javadoc line="196">
                Returns this number divided by the specified value.                
                <param>
                    value the value divisor.                    
                </param>
                <return>
                    <code>this / value</code>.                    
                </return>
            </javadoc>
            <method name="divide" type="Float64" line="201">
                <params>
                    <param name="value" type="double"/>
                </params>
                <declaration name="r" type="Float64" line="202"/>
            </method>
            <javadoc line="206">
                Compares the absolute value of this number with that number.                
                <param>
                    that the number to compare with.                    
                </param>
                <return>
                    <code>|this| > |that|</code>                    
                </return>
            </javadoc>
            <method name="isLargerThan" type="boolean" line="211">
                <params>
                    <param name="that" type="Float64"/>
                </params>
            </method>
            <javadoc line="214">
                Returns the absolute value of this number.                
                <return>
                    <code>|this|</code>.                    
                </return>
            </javadoc>
            <method name="abs" type="Float64" line="218">
                <declaration name="r" type="Float64" line="219"/>
            </method>
            <javadoc line="223">
                Returns the positive square root of this number.                
                <return>
                    <code>sqrt(this)</code>.                    
                </return>
            </javadoc>
            <method name="sqrt" type="Float64" line="227">
                <declaration name="r" type="Float64" line="228"/>
            </method>
            <javadoc line="232">
                Returns the exponential number &lt;i&gt;e&lt;/i&gt; raised to the power of this
                  number.                
                <return>
                    <code>exp(this)</code>.                    
                </return>
            </javadoc>
            <method name="exp" type="Float64" line="237">
                <declaration name="r" type="Float64" line="238"/>
            </method>
            <javadoc line="242">
                Returns the natural logarithm (base e) of this number.                
                <return>
                    <code>log(this)</code>.                    
                </return>
            </javadoc>
            <method name="log" type="Float64" line="246">
                <declaration name="r" type="Float64" line="247"/>
            </method>
            <javadoc line="251">
                Returns this number raised to the power of the specified exponent.                
                <param>
                    that the exponent.                    
                </param>
                <return>
                    <code>thisthat</code>.                    
                </return>
            </javadoc>
            <method name="pow" type="Float64" line="256">
                <params>
                    <param name="that" type="Float64"/>
                </params>
                <declaration name="r" type="Float64" line="257"/>
            </method>
            <javadoc line="261">
                Returns this number raised to the specified power.                
                <param>
                    e the exponent.                    
                </param>
                <return>
                    <code>thise</code>.                    
                </return>
            </javadoc>
            <method name="pow" type="Float64" line="266">
                <params>
                    <param name="e" type="double"/>
                </params>
                <declaration name="r" type="Float64" line="267"/>
            </method>
            <javadoc line="271">
                Returns the decimal text representation of this number.                
                <return>
                    the text representation of this number.                    
                </return>
            </javadoc>
            <method name="toText" type="Text" line="275"/>
            <javadoc line="278">
                Compares this number against the specified object.                
                <param>
                    that the object to compare with.                    
                </param>
                <return>
                    <code>true</code> if the objects are the same;
                      <code>false</code> otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="284">
                <params>
                    <param name="that" type="Object"/>
                </params>
            </method>
            <javadoc line="287">
                Indicates if this number is equal to the specified value.                
                <param>
                    value the value to compare with.                    
                </param>
                <return>
                    <code>this.doubleValue() == value</code>.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="292">
                <params>
                    <param name="value" type="double"/>
                </params>
            </method>
            <javadoc line="295">
                Compares this number with the specified value for order.                
                <param>
                    value the value to be compared with.                    
                </param>
                <return>
                    a negative integer, zero, or a positive integer as this number
                      is less than, equal to, or greater than the specified value.                    
                </return>
            </javadoc>
            <method name="compareTo" type="int" line="301">
                <params>
                    <param name="value" type="double"/>
                </params>
                <scope line="302"/>
                <scope line="305"/>
                <scope line="308">
                    <declaration name="l1" type="long" line="309"/>
                    <declaration name="l2" type="long" line="310"/>
                </scope>
            </method>
            <javadoc line="314">
                Returns the hash code for this number.                
                <return>
                    the hash code value.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="318">
                <declaration name="h" type="int" line="319"/>
            </method>
            <method name="longValue" type="long" line="325"/>
            <method name="doubleValue" type="double" line="328"/>
            <method name="compareTo" type="int" line="331">
                <params>
                    <param name="that" type="Float64"/>
                </params>
            </method>
            <method name="copy" type="Float64" line="334"/>
            <declaration name="serialVersionUID" type="long" line="337"/>
        </class>
    </source>