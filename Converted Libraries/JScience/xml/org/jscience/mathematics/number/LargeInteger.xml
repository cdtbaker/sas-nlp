<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.jscience.mathematics.number">
        <import package="java.io.IOException"/>
        <import package="javolution.context.ArrayFactory"/>
        <import package="javolution.context.ConcurrentContext"/>
        <import package="javolution.context.ObjectFactory"/>
        <import package="javolution.context.StackContext"/>
        <import package="javolution.lang.Configurable"/>
        <import package="javolution.lang.MathLib"/>
        <import package="javolution.text.Text"/>
        <import package="javolution.text.TextBuilder"/>
        <import package="javolution.text.TextFormat"/>
        <import package="javolution.text.TypeFormat"/>
        <import package="javolution.text.TextFormat.Cursor"/>
        <import package="javolution.xml.XMLFormat"/>
        <import package="javolution.xml.stream.XMLStreamException"/>
        <import package="org.jscience.mathematics.number.Calculus"/>
        <class name="LargeInteger" line="17">
            <extends class="Number">
                <type_params>
                    <type_param name="LargeInteger"/>
                </type_params>
            </extends>
            <javadoc line="17">
                &lt;p&gt; This class represents an immutable integer number of arbitrary size.&lt;/p&gt;
                  &lt;p&gt; It has the following advantages over the 
                  &lt;code&gt;java.math.BigInteger&lt;/code&gt; class:
                  &lt;ul&gt;
                  &lt;li&gt; Optimized for 64 bits architectures. But still runs significantly 
                  faster on 32 bits processors.&lt;/li&gt;
                  &lt;li&gt; Real-time compliant for improved performance and predictability
                  (no garbage generated when executing in {@link javolution.context.StackContext StackContext}).&lt;/li&gt;
                  &lt;li&gt; Improved algorithms (e.g. Concurrent Karabutsa multiplication in 
                  O(n&lt;sup&gt;Log3&lt;/sup&gt;) instead of O(n&lt;sup&gt;2&lt;/sup&gt;).&lt;/li&gt;
                  &lt;/ul&gt;&lt;/p&gt;
                  &lt;p&gt; &lt;b&gt;Note:&lt;/b&gt; This class uses {@link ConcurrentContext ConcurrentContext}to accelerate calculations on multi-cores systems.&lt;/p&gt;                
                <author>
                    <a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a>                    
                </author>
                <version>
                    3.3, January 14, 2007                    
                </version>
                <see>
                    <a href="http://en.wikipedia.org/wiki/Arbitrary-precision_arithmetic">
                           Wikipedia: Arbitrary-precision Arithmetic</a>                    
                </see>
            </javadoc>
            <declaration name="PRIME_CERTAINTY" type="Configurable&lt;Integer&gt;" line="36"/>
            <javadoc line="36">
                Holds the certainty required when testing for primality
                  (default &lt;code&gt;100&lt;/code&gt;, the probability for a composite to
                  pass the primality test is less than &lt;code&gt;2&lt;sup&gt;-100&lt;/sup&gt;&lt;/code&gt;).                
            </javadoc>
            <declaration name="DECIMAL_FORMAT" type="TextFormat&lt;LargeInteger&gt;" line="42"/>
            <javadoc line="42">
                Holds the format for large integers (decimal representation by default).                
                <see>
                    #parse(CharSequence,int,TextFormat.Cursor)                    
                </see>
                <see>
                    #format(LargeInteger,int,Appendable)                    
                </see>
            </javadoc>
            <anonymous_class line="47">
                <method name="format" type="Appendable" line="48">
                    <params>
                        <param name="li" type="LargeInteger"/>
                        <param name="out" type="Appendable"/>
                    </params>
                </method>
                <method name="parse" type="LargeInteger" line="51">
                    <params>
                        <param name="csq" type="CharSequence"/>
                        <param name="cursor" type="Cursor"/>
                    </params>
                </method>
            </anonymous_class>
            <scope line="56"/>
            <declaration name="ARRAY_FACTORY" type="ArrayFactory&lt;LargeInteger&gt;" line="59"/>
            <javadoc line="59">
                Holds factory for LargeInteger with variable size arrays.                
            </javadoc>
            <anonymous_class line="62">
                <method name="create" type="LargeInteger" line="63">
                    <params>
                        <param name="capacity" type="int"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="NO_ARRAY_FACTORY" type="ObjectFactory&lt;LargeInteger&gt;" line="68"/>
            <javadoc line="68">
                Holds the factory for LargeInteger with no intrinsic array (wrapper instances).                
            </javadoc>
            <anonymous_class line="71">
                <method name="create" type="LargeInteger" line="72"/>
            </anonymous_class>
            <declaration name="XML" type="XMLFormat&lt;LargeInteger&gt;" line="77"/>
            <javadoc line="77">
                Holds the default XML representation for large integers.
                  This representation consists of a simple &lt;code&gt;value&lt;/code&gt; attribute
                  holding the {@link #toText() textual} representation.                
            </javadoc>
            <anonymous_class line="82">
                <method name="newInstance" type="LargeInteger" line="83">
                    <params>
                        <param name="cls" type="Class<LargeInteger>"/>
                        <param name="xml" type="InputElement"/>
                    </params>
                </method>
                <method name="write" type="void" line="86">
                    <params>
                        <param name="li" type="LargeInteger"/>
                        <param name="xml" type="OutputElement"/>
                    </params>
                </method>
                <method name="read" type="void" line="89">
                    <params>
                        <param name="xml" type="InputElement"/>
                        <param name="li" type="LargeInteger"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="ZERO" type="LargeInteger" line="93"/>
            <javadoc line="93">
                The large integer representing the additive identity.                
            </javadoc>
            <declaration name="ONE" type="LargeInteger" line="97"/>
            <javadoc line="97">
                The large integer representing the multiplicative identity.                
            </javadoc>
            <scope line="101"/>
            <declaration name="LONG_MIN_VALUE" type="LargeInteger" line="105"/>
            <javadoc line="105">
                Holds Long.MIN_VALUE                
            </javadoc>
            <scope line="109"/>
            <declaration name="FIVE" type="LargeInteger" line="114"/>
            <javadoc line="114">
                Holds five.                
            </javadoc>
            <scope line="118"/>
            <declaration name="_remainder" type="LargeInteger" line="122"/>
            <javadoc line="122">
                Holds the remainder after a {@link #divide} operation.                
            </javadoc>
            <declaration name="_isNegative" type="boolean" line="126"/>
            <javadoc line="126">
                Indicates if this large integer is negative.                
            </javadoc>
            <declaration name="_size" type="int" line="130"/>
            <javadoc line="130">
                The size of this large integer in words. 
                  The most significand word different from 0 is at index: _size-1                
            </javadoc>
            <declaration name="_words" type="long[]" line="135"/>
            <javadoc line="135">
                This large integer positive words (63 bits). 
                  Least significant word first (index 0).                
            </javadoc>
            <javadoc line="140">
                Default constructor (no words array).                
            </javadoc>
            <method name="LargeInteger" type="constructor" line="143"/>
            <javadoc line="145">
                Creates a large integer with the specified 63 bits word capacity.                
                <link>
                    wordLength the internal positive <code>long</code> array length.                    
                </link>
            </javadoc>
            <method name="LargeInteger" type="constructor" line="149">
                <params>
                    <param name="wordLength" type="int"/>
                </params>
            </method>
            <javadoc line="152">
                Returns the large integer of specified &lt;code&gt;long&lt;/code&gt; value.                
                <param>
                    value the <code>long</code> value.                    
                </param>
                <return>
                    the corresponding large integer number.                    
                </return>
            </javadoc>
            <method name="valueOf" type="LargeInteger" line="157">
                <params>
                    <param name="value" type="long"/>
                </params>
                <declaration name="li" type="LargeInteger" line="160"/>
                <declaration name="negative" type="boolean" line="161"/>
            </method>
            <javadoc line="166">
                Returns the large integer of specified two&apos;s-complement binary
                  representation. The input array is assumed to be in &lt;i&gt;big-endian&lt;/i&gt;
                  byte-order: the most significant byte is at the offset position.                
                <param>
                    bytes the binary representation (two's-complement).                    
                </param>
                <param>
                    offset the offset at which to start reading the bytes.                    
                </param>
                <param>
                    length the maximum number of bytes to read.                    
                </param>
                <return>
                    the corresponding large integer number.                    
                </return>
                <throws>
                    IndexOutOfBoundsException 
                      if <code>offset + length > bytes.length</code>                    
                </throws>
                <see>
                    #toByteArray                    
                </see>
            </javadoc>
            <method name="valueOf" type="LargeInteger" line="178">
                <params>
                    <param name="bytes" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="length" type="int"/>
                </params>
                <declaration name="li" type="LargeInteger" line="179"/>
                <declaration name="isNegative" type="boolean" line="180"/>
                <declaration name="wordIndex" type="int" line="181"/>
                <declaration name="bitIndex" type="int" line="182"/>
                <scope line="184">
                    <declaration name="bits" type="long" line="185"/>
                    <scope line="186"/>
                    <scope line="189"/>
                </scope>
                <scope line="195"/>
                <scope line="201"/>
            </method>
            <javadoc line="206">
                Returns the two&apos;s-complement binary representation of this 
                  large integer. The output array is in &lt;i&gt;big-endian&lt;/i&gt;
                  byte-order: the most significant byte is at the offset position.                
                <param>
                    bytes the bytes to hold the binary representation 
                      (two's-complement) of this large integer.                    
                </param>
                <param>
                    offset the offset at which to start writing the bytes.                    
                </param>
                <return>
                    the number of bytes written.                    
                </return>
                <throws>
                    IndexOutOfBoundsException 
                      if <code>bytes.length < (bitLength() >> 3) + 1</code>                    
                </throws>
                <see>
                    #valueOf(byte[],int,int)                    
                </see>
                <see>
                    #bitLength                    
                </see>
            </javadoc>
            <method name="toByteArray" type="int" line="219">
                <params>
                    <param name="bytes" type="byte[]"/>
                    <param name="offset" type="int"/>
                </params>
                <declaration name="bytesLength" type="int" line="220"/>
                <declaration name="wordIndex" type="int" line="221"/>
                <declaration name="bitIndex" type="int" line="222"/>
                <scope line="223">
                    <declaration name="word" type="long" line="224"/>
                    <declaration name="borrow" type="long" line="225"/>
                    <scope line="227">
                        <scope line="228"/>
                        <scope line="232">
                            <declaration name="bits" type="byte" line="233"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="243">
                    <scope line="244">
                        <declaration name="word" type="long" line="245"/>
                        <scope line="246">
                            <scope line="247"/>
                            <scope line="251">
                                <declaration name="bits" type="byte" line="252"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="260"/>
                </scope>
            </method>
            <javadoc line="266">
                Returns the large integer for the specified character sequence 
                  using the current {@link TextFormat#getInstance(Class) format}.                
                <param>
                    csq the character sequence to parse.                    
                </param>
                <return>
                    <code>TextFormat.getInstance(LargeInteger.class).parse(csq)</code>                    
                </return>
                <throws>
                    NumberFormatException if error when parsing.                    
                </throws>
            </javadoc>
            <method name="valueOf" type="LargeInteger" line="273">
                <params>
                    <param name="csq" type="CharSequence"/>
                </params>
            </method>
            <javadoc line="276">
                Returns the large integer for the specified character sequence in
                  the specified radix.                
                <param>
                    csq the character sequence to parse.                    
                </param>
                <param>
                    radix the radix of the representation.                    
                </param>
                <return>
                    <code>LargeInteger.parse(csq, radix, cursor)</code>                    
                </return>
                <throws>
                    NumberFormatException if error when parsing.                    
                </throws>
            </javadoc>
            <method name="valueOf" type="LargeInteger" line="284">
                <params>
                    <param name="csq" type="CharSequence"/>
                    <param name="radix" type="int"/>
                </params>
                <declaration name="cursor" type="Cursor" line="285"/>
                <scope line="286"/>
                <scope line="289"/>
            </method>
            <javadoc line="294">
                Returns the large integer corresponding to the specified 
                  &lt;code&gt;java.math.BigInteger&lt;/code&gt; instance.                
                <param>
                    bigInteger the big integer instance.                    
                </param>
                <return>
                    the large integer having the same value.                    
                </return>
            </javadoc>
            <method name="valueOf" type="LargeInteger" line="300">
                <params>
                    <param name="bigInteger" type="java.math.BigInteger"/>
                </params>
                <declaration name="bytes" type="byte[]" line="301"/>
            </method>
            <javadoc line="304">
                Indicates if this large integer is greater than {@link #ZERO}({@link #ZERO}is not included).                
                <return>
                    <code>this > ZERO</code>                    
                </return>
            </javadoc>
            <method name="isPositive" type="boolean" line="308"/>
            <javadoc line="311">
                Indicates if this large integer is less than {@link #ZERO}.                
                <return>
                    <code>this < ZERO</code>                    
                </return>
            </javadoc>
            <method name="isNegative" type="boolean" line="315"/>
            <javadoc line="318">
                Indicates if this large integer is equal to {@link #ZERO}.                
                <return>
                    <code>this == ZERO</code>                    
                </return>
            </javadoc>
            <method name="isZero" type="boolean" line="322"/>
            <javadoc line="325">
                Indicates if this large integer is an even number.                
                <return>
                    <code>(this & 1) == ZERO</code>                    
                </return>
            </javadoc>
            <method name="isEven" type="boolean" line="329"/>
            <javadoc line="332">
                Indicates if this large integer is an odd number.                
                <return>
                    <code>(this & 1) != ZERO</code>                    
                </return>
            </javadoc>
            <method name="isOdd" type="boolean" line="336"/>
            <javadoc line="339">
                Indicates if this large integer is probably prime.                
                <return>
                    <code>true</code> if this large integer is probable prime;
                      <code>false</code> otherwise.                    
                </return>
            </javadoc>
            <method name="isProbablyPrime" type="boolean" line="344"/>
            <javadoc line="347">
                Returns the minimal number of bits to represent this large integer
                  in the minimal two&apos;s-complement (sign excluded).                
                <return>
                    the length of this integer in bits (sign excluded).                    
                </return>
            </javadoc>
            <method name="bitLength" type="int" line="352">
                <declaration name="n" type="int" line="354"/>
                <declaration name="bitLength" type="int" line="355"/>
            </method>
            <javadoc line="358">
                Returns the minimal number of decimal digits necessary to represent 
                  this large integer (sign excluded).                
                <return>
                    the maximum number of digits.                    
                </return>
            </javadoc>
            <method name="digitLength" type="int" line="363">
                <declaration name="bitLength" type="int" line="364"/>
                <declaration name="min" type="int" line="365"/>
                <declaration name="max" type="int" line="366"/>
            </method>
            <declaration name="BITS_TO_DIGITS" type="double" line="370"/>
            <javadoc line="371">
                Indicates if this number is a power of two (equals to 2&lt;sup&gt;
                  ({@link #bitLength bitLength()} - 1)&lt;/sup&gt;).                
                <return>
                    <code>true</code> if this number is a power of two; 
                      <code>false</code> otherwise.                    
                </return>
            </javadoc>
            <method name="isPowerOfTwo" type="boolean" line="377">
                <declaration name="n" type="int" line="379"/>
                <scope line="380"/>
                <declaration name="bitLength" type="int" line="383"/>
            </method>
            <javadoc line="386">
                Returns the index of the lowest-order one bit in this large integer
                  or &lt;code&gt;-1&lt;/code&gt; if &lt;code&gt;this.equals(ZERO)&lt;/code&gt;.                
                <return>
                    the index of the rightmost bit set or <code>-1</code>                    
                </return>
            </javadoc>
            <method name="getLowestSetBit" type="int" line="391">
                <scope line="393">
                    <declaration name="w" type="long" line="394"/>
                    <scope line="396"/>
                </scope>
            </method>
            <javadoc line="401">
                Returns the final undivided part after division that is less or of 
                  lower degree than the divisor. This value is only set by the {@link #divide} operation and is not considered as part of 
                  this large integer (ignored by all methods).                
                <return>
                    the remainder of the division for which this large integer
                      is the quotient.                    
                </return>
            </javadoc>
            <method name="getRemainder" type="LargeInteger" line="408"/>
            <javadoc line="411">
                Indicates if this large integer is larger than the one
                  specified in absolute value.                
                <param>
                    that the integer to be compared with.                    
                </param>
                <return>
                    <code>this.abs().compareTo(that.abs()) > 0</code>.                    
                </return>
            </javadoc>
            <method name="isLargerThan" type="boolean" line="417">
                <params>
                    <param name="that" type="LargeInteger"/>
                </params>
            </method>
            <javadoc line="420">
                Returns the absolute value of this large integer.                
                <return>
                    <code>|this|</code>.                    
                </return>
            </javadoc>
            <method name="abs" type="LargeInteger" line="424"/>
            <javadoc line="428">
                Returns the opposite of this large integer.                
                <return>
                    <code>-this</code>.                    
                </return>
            </javadoc>
            <method name="opposite" type="LargeInteger" line="432">
                <declaration name="li" type="LargeInteger" line="433"/>
            </method>
            <javadoc line="439">
                Returns the sum of this large integer with the specified 
                  &lt;code&gt;long&lt;/code&gt; integer (convenience method)                
                <param>
                    value the <code>long</code> integer being added.                    
                </param>
                <return>
                    <code>this + value</code>.                    
                </return>
            </javadoc>
            <method name="plus" type="LargeInteger" line="445">
                <params>
                    <param name="value" type="long"/>
                </params>
            </method>
            <javadoc line="448">
                Returns the sum of this large integer with the one specified.                
                <param>
                    that the integer to be added.                    
                </param>
                <return>
                    <code>this + that</code>.                    
                </return>
            </javadoc>
            <method name="plus" type="LargeInteger" line="453">
                <params>
                    <param name="that" type="LargeInteger"/>
                </params>
                <declaration name="li" type="LargeInteger" line="456"/>
            </method>
            <javadoc line="461">
                Returns the difference between this large integer and the one
                  specified.                
                <param>
                    that the integer to be subtracted.                    
                </param>
                <return>
                    <code>this - that</code>.                    
                </return>
            </javadoc>
            <method name="minus" type="LargeInteger" line="467">
                <params>
                    <param name="that" type="LargeInteger"/>
                </params>
                <declaration name="li" type="LargeInteger" line="470"/>
            </method>
            <javadoc line="475">
                Returns the difference between this large integer and the specified
                  value                
                <param>
                    value the value to be subtracted.                    
                </param>
                <return>
                    <code>this - value</code>.                    
                </return>
            </javadoc>
            <method name="minus" type="LargeInteger" line="481">
                <params>
                    <param name="value" type="long"/>
                </params>
            </method>
            <javadoc line="484">
                Returns the product of this large integer with the one specified.                
                <param>
                    that the large integer multiplier.                    
                </param>
                <return>
                    <code>this · that</code>.                    
                </return>
            </javadoc>
            <method name="times" type="LargeInteger" line="489">
                <params>
                    <param name="that" type="LargeInteger"/>
                </params>
                <scope line="492">
                    <declaration name="li" type="LargeInteger" line="493"/>
                </scope>
                <scope line="498">
                    <declaration name="n" type="int" line="499"/>
                    <declaration name="b" type="LargeInteger" line="500"/>
                    <declaration name="a" type="LargeInteger" line="501"/>
                    <declaration name="d" type="LargeInteger" line="502"/>
                    <declaration name="c" type="LargeInteger" line="503"/>
                    <declaration name="ab" type="LargeInteger" line="504"/>
                    <declaration name="cd" type="LargeInteger" line="505"/>
                    <declaration name="abcd" type="LargeInteger" line="506"/>
                    <declaration name="ac" type="LargeInteger" line="507"/>
                    <declaration name="bd" type="LargeInteger" line="508"/>
                </scope>
                <scope line="511">
                    <declaration name="n" type="int" line="512"/>
                    <declaration name="b" type="LargeInteger" line="513"/>
                    <declaration name="a" type="LargeInteger" line="514"/>
                    <declaration name="d" type="LargeInteger" line="515"/>
                    <declaration name="c" type="LargeInteger" line="516"/>
                    <declaration name="ab" type="LargeInteger" line="517"/>
                    <declaration name="cd" type="LargeInteger" line="518"/>
                    <declaration name="abcd" type="MultiplyLogic" line="519"/>
                    <declaration name="ac" type="MultiplyLogic" line="520"/>
                    <declaration name="bd" type="MultiplyLogic" line="521"/>
                    <scope line="523"/>
                    <scope line="528"/>
                    <declaration name="result" type="LargeInteger" line="531"/>
                </scope>
            </method>
            <method name="high" type="LargeInteger" line="535">
                <params>
                    <param name="w" type="int"/>
                </params>
                <declaration name="li" type="LargeInteger" line="536"/>
            </method>
            <method name="low" type="LargeInteger" line="542">
                <params>
                    <param name="w" type="int"/>
                </params>
                <declaration name="li" type="LargeInteger" line="543"/>
                <scope line="546">
                    <scope line="547"/>
                </scope>
            </method>
            <method name="shiftWordLeft" type="LargeInteger" line="554">
                <params>
                    <param name="w" type="int"/>
                </params>
                <declaration name="li" type="LargeInteger" line="556"/>
                <scope line="559"/>
            </method>
            <javadoc line="565">
                Returns the product of this large integer with the specified 
                  &lt;code&gt;long&lt;/code&gt; multiplier.                
                <param>
                    multiplier the <code>long</code> multiplier.                    
                </param>
                <return>
                    <code>this · multiplier</code>.                    
                </return>
            </javadoc>
            <method name="times" type="LargeInteger" line="571">
                <params>
                    <param name="multiplier" type="long"/>
                </params>
                <declaration name="isNegative" type="boolean" line="574"/>
                <declaration name="li" type="LargeInteger" line="576"/>
            </method>
            <javadoc line="581">
                Returns this large integer divided by the one specified (integer
                  division). The remainder of this division is accessible using {@link #getRemainder}.                
                <param>
                    that the integer divisor.                    
                </param>
                <return>
                    <code>this / that</code> and <code>this % that</code> 
                      ({@link #getRemainder})                    
                </return>
                <throws>
                    ArithmeticException if <code>that.equals(ZERO)</code>                    
                </throws>
            </javadoc>
            <method name="divide" type="LargeInteger" line="589">
                <params>
                    <param name="that" type="LargeInteger"/>
                </params>
                <declaration name="result" type="LargeInteger" line="591"/>
                <declaration name="remainder" type="LargeInteger" line="592"/>
                <declaration name="thisAbs" type="LargeInteger" line="593"/>
                <declaration name="thatAbs" type="LargeInteger" line="594"/>
                <declaration name="precision" type="int" line="595"/>
                <scope line="596"/>
                <scope line="600">
                    <declaration name="thatReciprocal" type="LargeInteger" line="601"/>
                    <scope line="605"/>
                    <scope line="610"/>
                </scope>
                <declaration name="li" type="LargeInteger" line="616"/>
            </method>
            <javadoc line="623">
                Returns this large integer divided by the specified &lt;code&gt;int&lt;/code&gt;
                  divisor. The remainder of this division is accessible using {@link #getRemainder}.                
                <param>
                    divisor the <code>int</code> divisor.                    
                </param>
                <return>
                    <code>this / divisor</code> and <code>this % divisor</code>
                      ({@link #getRemainder})                    
                </return>
                <throws>
                    ArithmeticException if <code>divisor == 0</code>                    
                </throws>
            </javadoc>
            <method name="divide" type="LargeInteger" line="631">
                <params>
                    <param name="divisor" type="int"/>
                </params>
                <scope line="633">
                    <declaration name="li" type="LargeInteger" line="634"/>
                </scope>
                <declaration name="li" type="LargeInteger" line="639"/>
                <declaration name="rem" type="long" line="640"/>
            </method>
            <javadoc line="646">
                Returns the remainder of the division of this large integer with 
                  the one specified (convenience method equivalent to 
                  &lt;code&gt;this.divide(that).getRemainder()&lt;/code&gt;).                
                <param>
                    that the value by which this integer is to be divided, and the
                      remainder returned.                    
                </param>
                <return>
                    <code>this % that</code>                    
                </return>
                <throws>
                    ArithmeticException if <code>that.equals(ZERO)</code>                    
                </throws>
                <see>
                    #divide(LargeInteger)                    
                </see>
            </javadoc>
            <method name="remainder" type="LargeInteger" line="656">
                <params>
                    <param name="that" type="LargeInteger"/>
                </params>
            </method>
            <javadoc line="659">
                Returns a scaled approximation of &lt;code&gt;1 / this&lt;/code&gt;.                
                <param>
                    precision the requested precision (reciprocal error being ± 1).                    
                </param>
                <return>
                    <code>2<sup>(precision + this.bitLength())</sup> / this</code>                    
                </return>
                <throws>
                    ArithmeticException if <code>this.isZero()</code>                    
                </throws>
            </javadoc>
            <method name="inverseScaled" type="LargeInteger" line="665">
                <params>
                    <param name="precision" type="int"/>
                </params>
                <scope line="666">
                    <declaration name="divisor" type="long" line="667"/>
                    <declaration name="dividend" type="long" line="668"/>
                </scope>
                <scope line="671">
                    <declaration name="x" type="LargeInteger" line="672"/>
                    <declaration name="thisTrunc" type="LargeInteger" line="673"/>
                    <declaration name="prod" type="LargeInteger" line="674"/>
                    <declaration name="diff" type="int" line="675"/>
                    <declaration name="prodTrunc" type="LargeInteger" line="676"/>
                    <declaration name="xPad" type="LargeInteger" line="677"/>
                    <declaration name="tmp" type="LargeInteger" line="678"/>
                </scope>
            </method>
            <javadoc line="682">
                Returns the integer square root of this integer.                
                <return>
                    <code>k<code> such as <code>k^2 <= this < (k + 1)^2</code>                    
                </return>
                <throws>
                    ArithmeticException if this integer is negative.                    
                </throws>
            </javadoc>
            <method name="sqrt" type="LargeInteger" line="687">
                <declaration name="bitLength" type="int" line="691"/>
                <scope line="693">
                    <declaration name="k" type="LargeInteger" line="694"/>
                    <scope line="695">
                        <declaration name="newK" type="LargeInteger" line="696"/>
                        <scope line="697">
                            <scope line="698"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="706"/>
            </method>
            <javadoc line="710">
                Returns this large integer modulo the specified large integer. 
                  &lt;p&gt; Note: The result as the same sign as the divisor unlike the Java 
                  remainder (%) operator (which as the same sign as the dividend).&lt;/p&gt;                
                <param>
                    m the modulus.                    
                </param>
                <return>
                    <code>this mod m</code>                    
                </return>
                <see>
                    #getRemainder()                    
                </see>
            </javadoc>
            <method name="mod" type="LargeInteger" line="718">
                <params>
                    <param name="m" type="LargeInteger"/>
                </params>
                <declaration name="li" type="LargeInteger" line="719"/>
            </method>
            <javadoc line="722">
                Returns the large integer whose value is &lt;code&gt;(this&lt;sup&gt;-1&lt;/sup&gt; mod m)
                  &lt;/code&gt;.                
                <param>
                    m the modulus.                    
                </param>
                <return>
                    <code>this<sup>-1</sup> mod m</code>.                    
                </return>
                <throws>
                    ArithmeticException <code> m &lt;= 0</code>, or this integer
                      has no multiplicative inverse mod m (that is, this integer
                      is not <i>relatively prime</i> to m).                    
                </throws>
            </javadoc>
            <method name="modInverse" type="LargeInteger" line="731">
                <params>
                    <param name="m" type="LargeInteger"/>
                </params>
                <scope line="734">
                    <declaration name="a" type="LargeInteger" line="735"/>
                    <declaration name="b" type="LargeInteger" line="736"/>
                    <declaration name="p" type="LargeInteger" line="737"/>
                    <declaration name="q" type="LargeInteger" line="738"/>
                    <declaration name="r" type="LargeInteger" line="739"/>
                    <declaration name="s" type="LargeInteger" line="740"/>
                    <scope line="741">
                        <declaration name="quot" type="LargeInteger" line="742"/>
                        <declaration name="c" type="LargeInteger" line="743"/>
                        <declaration name="new_r" type="LargeInteger" line="746"/>
                        <declaration name="new_s" type="LargeInteger" line="747"/>
                    </scope>
                </scope>
                <scope line="756"/>
            </method>
            <javadoc line="760">
                Returns this large integer raised at the specified exponent modulo 
                  the specified modulus.                
                <param>
                    exp the exponent.                    
                </param>
                <param>
                    m the modulus.                    
                </param>
                <return>
                    <code>this<sup>exp</sup> mod m</code>                    
                </return>
                <throws>
                    ArithmeticException <code>m &lt;= 0</code>                    
                </throws>
                <see>
                    #modInverse                    
                </see>
            </javadoc>
            <method name="modPow" type="LargeInteger" line="769">
                <params>
                    <param name="exp" type="LargeInteger"/>
                    <param name="m" type="LargeInteger"/>
                </params>
                <scope line="771">
                    <scope line="773">
                        <declaration name="result" type="LargeInteger" line="774"/>
                        <declaration name="pow2" type="LargeInteger" line="775"/>
                        <scope line="776">
                            <scope line="777"/>
                        </scope>
                    </scope>
                    <scope line="785"/>
                </scope>
                <scope line="789"/>
                <scope line="792"/>
            </method>
            <javadoc line="796">
                Returns the greatest common divisor of this large integer and 
                  the one specified.                
                <param>
                    that the other number to compute the GCD with.                    
                </param>
                <return>
                    a positive number or {@link #ZERO} if
                      <code>(this.isZero() && that.isZero())</code>.                    
                </return>
            </javadoc>
            <method name="gcd" type="LargeInteger" line="803">
                <params>
                    <param name="that" type="LargeInteger"/>
                </params>
                <declaration name="u" type="LargeInteger" line="806"/>
                <declaration name="v" type="LargeInteger" line="808"/>
                <scope line="810">
                    <declaration name="tmp" type="LargeInteger" line="811"/>
                    <declaration name="rem" type="LargeInteger" line="812"/>
                </scope>
                <declaration name="uShift" type="int" line="817"/>
                <declaration name="vShift" type="int" line="819"/>
                <scope line="821">
                    <scope line="822"/>
                    <scope line="825">
                        <declaration name="tmp" type="LargeInteger" line="827"/>
                    </scope>
                </scope>
            </method>
            <method name="shiftRightSelf" type="void" line="837"/>
            <method name="shiftRightSelf" type="void" line="841">
                <params>
                    <param name="n" type="int"/>
                </params>
                <declaration name="wordShift" type="int" line="843"/>
                <declaration name="bitShift" type="int" line="844"/>
            </method>
            <method name="subtract" type="void" line="847">
                <params>
                    <param name="that" type="LargeInteger"/>
                </params>
            </method>
            <javadoc line="850">
                Returns the value of this large integer after performing a binary
                  shift to left. The shift distance, &lt;code&gt;n&lt;/code&gt;, may be negative,
                  in which case this method performs a right shift.                
                <param>
                    n the shift distance, in bits.                    
                </param>
                <return>
                    <code>this &lt;&lt; n</code>.                    
                </return>
                <see>
                    #shiftRight                    
                </see>
            </javadoc>
            <method name="shiftLeft" type="LargeInteger" line="858">
                <params>
                    <param name="n" type="int"/>
                </params>
                <declaration name="wordShift" type="int" line="861"/>
                <declaration name="bitShift" type="int" line="862"/>
                <declaration name="li" type="LargeInteger" line="863"/>
            </method>
            <javadoc line="868">
                Returns the value of this large integer after performing a binary
                  shift to right with sign extension &lt;code&gt;(-1 &gt;&gt; 1 == -1)&lt;/code&gt;.
                  The shift distance, &lt;code&gt;n&lt;/code&gt;, may be negative, in which case 
                  this method performs a {@link #shiftLeft(int)}.                
                <param>
                    n the shift distance, in bits.                    
                </param>
                <return>
                    <code>this &gt;&gt; n</code>.                    
                </return>
            </javadoc>
            <method name="shiftRight" type="LargeInteger" line="876">
                <params>
                    <param name="n" type="int"/>
                </params>
                <declaration name="li" type="LargeInteger" line="877"/>
            </method>
            <method name="isShiftRightCorrection" type="boolean" line="880">
                <params>
                    <param name="n" type="int"/>
                </params>
                <declaration name="wordShift" type="int" line="881"/>
                <declaration name="bitShift" type="int" line="882"/>
                <declaration name="i" type="int" line="883"/>
                <declaration name="bitsLost" type="boolean" line="884"/>
                <scope line="885"/>
            </method>
            <javadoc line="890">
                Returns the value of this large integer after multiplication by 
                  a power of two. This method is equivalent to {@link #shiftLeft(int)}for positive &lt;code&gt;n&lt;/code&gt;; but is different from {@link #shiftRight(int)} for negative &lt;code&gt;n&lt;/code&gt; as no sign 
                  extension is performed (&lt;code&gt;-1 &gt;&gt;&gt; 1 == 0&lt;/code&gt;).                
                <param>
                    n the power of 2 exponent.                    
                </param>
                <return>
                    <code>this · 2<sup>n</sup></code>.                    
                </return>
            </javadoc>
            <method name="times2pow" type="LargeInteger" line="897">
                <params>
                    <param name="n" type="int"/>
                </params>
                <declaration name="wordShift" type="int" line="900"/>
                <declaration name="bitShift" type="int" line="901"/>
                <declaration name="li" type="LargeInteger" line="903"/>
            </method>
            <javadoc line="908">
                Returns the value of this large integer after multiplication by 
                  a power of ten. For example:[code]
                  LargeInteger billion = LargeInteger.ONE.times10pow(9); // 1E9
                  LargeInteger million = billion.times10pow(-3);[/code]                
                <param>
                    n the decimal exponent.                    
                </param>
                <return>
                    <code>this · 10<sup>n</sup></code>                    
                </return>
            </javadoc>
            <method name="times10pow" type="LargeInteger" line="916">
                <params>
                    <param name="n" type="int"/>
                </params>
                <scope line="918">
                    <declaration name="bitLength" type="int" line="919"/>
                    <declaration name="li" type="LargeInteger" line="920"/>
                    <declaration name="i" type="int" line="922"/>
                    <scope line="924"/>
                    <declaration name="wordShift" type="int" line="928"/>
                    <declaration name="bitShift" type="int" line="929"/>
                </scope>
                <scope line="933">
                    <declaration name="wordShift" type="int" line="935"/>
                    <declaration name="bitShift" type="int" line="936"/>
                    <declaration name="li" type="LargeInteger" line="938"/>
                    <scope line="940">
                        <declaration name="i" type="int" line="941"/>
                        <scope line="943"/>
                    </scope>
                </scope>
            </method>
            <declaration name="DIGITS_TO_BITS" type="double" line="952"/>
            <declaration name="INT_POW_5" type="int[]" line="953"/>
            <declaration name="LONG_POW_5" type="long[]" line="954"/>
            <javadoc line="955">
                Compares this large integer against the specified object.                
                <param>
                    that the object to compare with.                    
                </param>
                <return>
                    <code>true</code> if the objects are the same; <code>false</code>
                      otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="961">
                <params>
                    <param name="that" type="Object"/>
                </params>
                <declaration name="li" type="LargeInteger" line="963"/>
            </method>
            <javadoc line="966">
                Compares this large integer against the specified &lt;code&gt;long&lt;/code&gt;
                  value.                
                <param>
                    value <code>long</code> value to compare with.                    
                </param>
                <return>
                    <code>true</code> if this large integer has the specified value;
                      <code>false</code> otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="973">
                <params>
                    <param name="value" type="long"/>
                </params>
            </method>
            <javadoc line="977">
                Returns the hash code for this large integer number.                
                <return>
                    the hash code value.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="981">
                <declaration name="code" type="long" line="982"/>
                <scope line="983"/>
            </method>
            <javadoc line="988">
                Returns the low order bits of this large integer as a &lt;code&gt;long&lt;/code&gt;.
                  &lt;p&gt;Note: This conversion can lose information about the overall magnitude
                  of the integer value and may return a result with the opposite 
                  sign.&lt;/p&gt;                
                <return>
                    the numeric value represented by this integer after conversion
                      to type <code>long</code>.                    
                </return>
            </javadoc>
            <method name="longValue" type="long" line="996"/>
            <javadoc line="1000">
                Returns the value of this large integer as a &lt;code&gt;double&lt;/code&gt;.                
                <return>
                    the numeric value represented by this integer after conversion
                      to type <code>double</code>.                    
                </return>
            </javadoc>
            <method name="doubleValue" type="double" line="1005">
                <declaration name="n" type="int" line="1008"/>
                <declaration name="bitLength" type="int" line="1009"/>
                <declaration name="shift" type="int" line="1010"/>
                <declaration name="int63" type="LargeInteger" line="1011"/>
                <declaration name="d" type="double" line="1012"/>
            </method>
            <javadoc line="1015">
                Compares two large integers numerically.                
                <param>
                    that the integer to compare with.                    
                </param>
                <return>
                    -1, 0 or 1 as this integer is numerically less than, equal to,
                      or greater than <code>that</code>.                    
                </return>
                <throws>
                    ClassCastException <code>that</code> is not a 
                      large integer.                    
                </throws>
            </javadoc>
            <method name="compareTo" type="int" line="1023">
                <params>
                    <param name="that" type="LargeInteger"/>
                </params>
            </method>
            <javadoc line="1030">
                Compares this large integer to the specified &lt;code&gt;long&lt;/code&gt; value.                
                <param>
                    value the <code>long</code> value to compare with.                    
                </param>
                <return>
                    -1, 0 or 1 as this integer is numerically less than, equal to,
                      or greater than the specified value.                    
                </return>
            </javadoc>
            <method name="compareTo" type="int" line="1036">
                <params>
                    <param name="value" type="long"/>
                </params>
                <declaration name="thisValue" type="long" line="1038"/>
            </method>
            <method name="copy" type="LargeInteger" line="1041">
                <declaration name="li" type="LargeInteger" line="1042"/>
                <scope line="1045"/>
            </method>
            <javadoc line="1052">
                Returns the text representation of this number using the current  {@link TextFormat#getInstance(Class) format}.                
                <return>
                    <code>TextFormat.getInstance(LargeInteger.class).format(this)</code>                    
                </return>
            </javadoc>
            <method name="toText" type="Text" line="1056"/>
            <javadoc line="1059">
                Returns the text representation of this number in the specified radix.                
                <param>
                    radix the radix of the representation.                    
                </param>
                <return>
                    the text representation of this number in the specified radix.                    
                </return>
            </javadoc>
            <method name="toText" type="Text" line="1064">
                <params>
                    <param name="radix" type="int"/>
                </params>
                <declaration name="tmp" type="TextBuilder" line="1065"/>
                <scope line="1066"/>
                <scope line="1070"/>
                <scope line="1073"/>
            </method>
            <javadoc line="1077">
                Parses the specified character sequence from the specified position 
                  as a large integer in the specified radix.                
                <param>
                    csq the character sequence to parse.                    
                </param>
                <param>
                    radix the radix to be used while parsing.                    
                </param>
                <param>
                    cursor the current cursor position (being maintained).                    
                </param>
                <return>
                    the corresponding large integer.                    
                </return>
                <throws>
                    NumberFormatException if error when parsing.                    
                </throws>
            </javadoc>
            <method name="parse" type="LargeInteger" line="1086">
                <params>
                    <param name="csq" type="CharSequence"/>
                    <param name="radix" type="int"/>
                    <param name="cursor" type="Cursor"/>
                </params>
                <declaration name="end" type="int" line="1087"/>
                <declaration name="isNegative" type="boolean" line="1088"/>
                <declaration name="li" type="LargeInteger" line="1090"/>
                <declaration name="maxDigits" type="int" line="1091"/>
                <scope line="1092">
                    <declaration name="start" type="int" line="1093"/>
                    <declaration name="l" type="long" line="1095"/>
                    <declaration name="readCount" type="int" line="1096"/>
                    <scope line="1097"/>
                    <scope line="1100">
                        <scope line="1101">
                            <declaration name="tmp" type="LargeInteger" line="1102"/>
                        </scope>
                        <declaration name="factor" type="long" line="1108"/>
                    </scope>
                    <declaration name="c" type="char" line="1113"/>
                    <declaration name="digit" type="int" line="1114"/>
                </scope>
            </method>
            <method name="pow" type="long" line="1120">
                <params>
                    <param name="radix" type="int"/>
                    <param name="n" type="int"/>
                </params>
                <declaration name="l" type="long" line="1123"/>
                <scope line="1124"/>
            </method>
            <declaration name="LONG_POW_10" type="long[]" line="1129"/>
            <declaration name="LONG_POW_16" type="long[]" line="1130"/>
            <javadoc line="1131">
                Formats the specified large integer in the specified radix and into
                  the specified &lt;code&gt;Appendable&lt;/code&gt; argument.                
                <param>
                    li the large integer to format.                    
                </param>
                <param>
                    radix the radix.                    
                </param>
                <param>
                    out the <code>Appendable</code> to append.                    
                </param>
                <return>
                    the specified <code>Appendable</code> object.                    
                </return>
                <throws>
                    IllegalArgumentException if radix is not in [2 .. 36] range.                    
                </throws>
                <throws>
                    IOException if an I/O exception occurs.                    
                </throws>
            </javadoc>
            <method name="format" type="Appendable" line="1141">
                <params>
                    <param name="li" type="LargeInteger"/>
                    <param name="radix" type="int"/>
                    <param name="out" type="Appendable"/>
                </params>
                <scope line="1142"/>
                <declaration name="maxDigits" type="int" line="1145"/>
            </method>
            <method name="write" type="Appendable" line="1148">
                <params>
                    <param name="li" type="LargeInteger"/>
                    <param name="radix" type="int"/>
                    <param name="divisor" type="int"/>
                    <param name="out" type="Appendable"/>
                </params>
                <declaration name="rem" type="int" line="1150"/>
                <scope line="1151"/>
                <scope line="1156"/>
                <scope line="1160"/>
                <scope line="1163"/>
            </method>
            <declaration name="serialVersionUID" type="long" line="1167"/>
        </class>
    </source>