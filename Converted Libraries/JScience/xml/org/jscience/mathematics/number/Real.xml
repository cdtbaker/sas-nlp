<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.jscience.mathematics.number">
        <import package="org.jscience.mathematics.structure.Field"/>
        <import package="javolution.lang.MathLib"/>
        <import package="javolution.context.HeapContext"/>
        <import package="javolution.context.LocalContext"/>
        <import package="javolution.context.ObjectFactory"/>
        <import package="javolution.text.Text"/>
        <import package="javolution.text.TypeFormat"/>
        <import package="javolution.xml.XMLFormat"/>
        <import package="javolution.xml.stream.XMLStreamException"/>
        <class name="Real" line="11">
            <extends class="Number">
                <type_params>
                    <type_param name="Real"/>
                </type_params>
            </extends>
            <implements interface="Field">
                <type_params>
                    <type_param name="Real"/>
                </type_params>
            </implements>
            <javadoc line="11">
                &lt;p&gt; This class represents a real number of arbitrary precision with 
                  known/guaranteed uncertainty. A real number consists of a {@link #getSignificand significand}, a maximum {@link #getError error} 
                  (on the significand value) and a decimal {@link #getExponent exponent}: 
                  (&lt;code&gt;(significand ± error) · 10&lt;sup&gt;exponent&lt;/sup&gt;&lt;/code&gt;).&lt;/p&gt;
                  &lt;p&gt; Reals number can be {@link #isExact exact} (e.g. integer values 
                  scaled by a power of ten). Exactness is maintained for{@link org.jscience.mathematics.structure.Ring Ring} operations
                  (e.g. addition, multiplication), but typically lost when a 
                  multiplicative {@link #inverse() inverse} is calculated. The minimum 
                  precision used for exact numbers is set by {@link #setExactPrecision(int)} ({@link javolution.context.LocalContext context local} setting, default
                  &lt;code&gt;19&lt;/code&gt; digits).&lt;p&gt;
                  &lt;p&gt; The actual {@link #getPrecision precision} and {@link #getAccuracy 
                  accuracy} of any real number is available and &lt;b&gt;guaranteed&lt;/b&gt; 
                  (the true/exact value is always within the precision/accuracy range).&lt;/p&gt;
                  &lt;p&gt; Operations on instances of this class are quite fast   
                  as information substantially below the precision level (aka noise)
                  is not processed/stored. There is no limit on a real precision
                  but precision degenerates (due to numeric errors) and calculations 
                  accelerate as more and more operations are performed.&lt;/p&gt;
                  &lt;p&gt; Instances of this class can be utilized to find approximate 
                  solutions to linear equations using the {@link org.jscience.mathematics.vector.Matrix Matrix} class for which
                  high-precision reals is often required, the primitive type
                  &lt;code&gt;double&lt;/code&gt; being not accurate enough to resolve equations 
                  when the matrix&apos;s size exceeds 100x100. Furthermore, even for small 
                  matrices the &quot;qualified&quot; result is indicative of possible system 
                  singularities.&lt;/p&gt;                
                <author>
                    <a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a>                    
                </author>
                <version>
                    3.3, January 8, 2006                    
                </version>
                <see>
                    <a href="http://en.wikipedia.org/wiki/Real_number">
                           Wikipedia: Real number</a>                    
                </see>
            </javadoc>
            <declaration name="XML" type="XMLFormat&lt;Real&gt;" line="43"/>
            <javadoc line="43">
                Holds the default XML representation for real numbers.
                  This representation consists of a simple &lt;code&gt;value&lt;/code&gt; attribute
                  holding the {@link #toText() textual} representation.                
            </javadoc>
            <anonymous_class line="48">
                <method name="newInstance" type="Real" line="49">
                    <params>
                        <param name="cls" type="Class<Real>"/>
                        <param name="xml" type="InputElement"/>
                    </params>
                </method>
                <method name="write" type="void" line="52">
                    <params>
                        <param name="real" type="Real"/>
                        <param name="xml" type="OutputElement"/>
                    </params>
                </method>
                <method name="read" type="void" line="55">
                    <params>
                        <param name="xml" type="InputElement"/>
                        <param name="real" type="Real"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="NaN" type="Real" line="59"/>
            <javadoc line="59">
                Holds a Not-a-Number instance (infinite error).                
            </javadoc>
            <scope line="63"/>
            <declaration name="ZERO" type="Real" line="68"/>
            <javadoc line="68">
                Holds the exact ZERO instance.                
            </javadoc>
            <declaration name="ONE" type="Real" line="72"/>
            <javadoc line="72">
                Holds the exact ONE instance.                
            </javadoc>
            <declaration name="EXACT_PRECISION" type="LocalContext.Reference&lt;Integer&gt;" line="76"/>
            <javadoc line="76">
                Holds local precision for exact number.                
            </javadoc>
            <declaration name="_significand" type="LargeInteger" line="80"/>
            <javadoc line="80">
                The significand value.                
            </javadoc>
            <declaration name="_error" type="LargeInteger" line="84"/>
            <javadoc line="84">
                The significand error (0 for exact number).                
            </javadoc>
            <declaration name="_exponent" type="int" line="88"/>
            <javadoc line="88">
                The decimal exponent.                
            </javadoc>
            <javadoc line="92">
                Default constructor.                
            </javadoc>
            <method name="Real" type="constructor" line="95"/>
            <javadoc line="97">
                Returns the {@link javolution.context.LocalContext local} minimum 
                  precision (number of exact digits) when exact numbers have to be
                  approximated.                
                <return>
                    the minimum number of digits assumed exact for {@link #isExact 
                      exact} real numbers.                    
                </return>
            </javadoc>
            <method name="getExactPrecision" type="int" line="104"/>
            <javadoc line="107">
                Sets the {@link javolution.context.LocalContext local} minimum precision
                  (number of exact digits) when exact numbers have to be approximated.                
                <param>
                    precision the minimum number of digits assumed exact for {@link #isExact exact} numbers.                    
                </param>
            </javadoc>
            <method name="setExactPrecision" type="void" line="112">
                <params>
                    <param name="precision" type="int"/>
                </params>
            </method>
            <javadoc line="115">
                Returns a real having the specified significand, error and exponent values.
                  If the error is &lt;code&gt;0&lt;/code&gt;, the real is assumed exact. 
                  For example:[code]
                  // x = 0.0 ± 0.01 
                  Real x = Real.valueOf(LargeInteger.ZERO, 1, -2);
                  // y = -12.3 exact 
                  Real y = Real.valueOf(LargeInteger.valueOf(-123), 0, -1);
                  [/code]                
                <param>
                    significand this real significand.                    
                </param>
                <param>
                    error the maximum error on the significand.                    
                </param>
                <param>
                    exponent the decimal exponent.                    
                </param>
                <return>
                    <code>(significand ± error)·10<sup>exponent</sup>)</code>                    
                </return>
                <throws>
                    IllegalArgumentException if <code>error < 0</code>                    
                </throws>
            </javadoc>
            <method name="valueOf" type="Real" line="130">
                <params>
                    <param name="significand" type="LargeInteger"/>
                    <param name="error" type="int"/>
                    <param name="exponent" type="int"/>
                </params>
                <declaration name="real" type="Real" line="132"/>
            </method>
            <javadoc line="138">
                Returns the real number (inexact except for &lt;code&gt;0.0&lt;/code&gt;) 
                  corresponding to the specified &lt;code&gt;double&lt;/code&gt; value. 
                  The error is derived from the inexact representation of 
                  &lt;code&gt;double&lt;/code&gt; values intrinsic to the 64 bits IEEE 754 format.                
                <param>
                    doubleValue the <code>double</code> value to convert.                    
                </param>
                <return>
                    the corresponding real number.                    
                </return>
            </javadoc>
            <method name="valueOf" type="Real" line="146">
                <params>
                    <param name="doubleValue" type="double"/>
                </params>
                <declaration name="e" type="int" line="149"/>
                <declaration name="significand" type="long" line="150"/>
                <declaration name="error" type="int" line="151"/>
            </method>
            <javadoc line="154">
                Returns the exact real number corresponding to the specified 
                  &lt;code&gt;long&lt;/code&gt; value (convenience method).                
                <param>
                    longValue the exact long value.                    
                </param>
                <return>
                    <code>Real.valueOf(LargeInteger.valueOf(longValue), 0, 0)</code>                    
                </return>
            </javadoc>
            <method name="valueOf" type="Real" line="160">
                <params>
                    <param name="longValue" type="long"/>
                </params>
            </method>
            <javadoc line="163">
                Returns the real for the specified character sequence.
                  If the precision is not specified (using the &lt;code&gt;±&lt;/code&gt; symbol), 
                  the real is supposed exact. Example of valid character sequences:
                  &lt;li&gt;&quot;1.2E3&quot; (1200 exact)&lt;/li&gt;
                  &lt;li&gt;&quot;1.2E3±1E-2&quot; (1200 ± 0.01)&lt;/li&gt;&lt;/ul&gt;                
                <param>
                    chars the character sequence.                    
                </param>
                <return>
                    the corresponding real number.                    
                </return>
                <throws>
                    NumberFormatException if the character sequence does not contain
                      a parsable real.                    
                </throws>
            </javadoc>
            <method name="valueOf" type="Real" line="174">
                <params>
                    <param name="chars" type="CharSequence"/>
                </params>
                <scope line="175"/>
                <declaration name="txt" type="Text" line="178"/>
                <declaration name="exponentIndex" type="int" line="181"/>
                <scope line="182">
                    <declaration name="exponent" type="int" line="183"/>
                    <declaration name="r" type="Real" line="184"/>
                </scope>
                <declaration name="real" type="Real" line="189"/>
                <declaration name="errorIndex" type="int" line="190"/>
                <scope line="191"/>
                <declaration name="decimalPointIndex" type="int" line="198"/>
                <scope line="199">
                    <declaration name="integer" type="LargeInteger" line="200"/>
                    <declaration name="fraction" type="LargeInteger" line="201"/>
                    <declaration name="fractionDigits" type="int" line="202"/>
                </scope>
                <scope line="208"/>
            </method>
            <javadoc line="215">
                Returns this real &lt;a href=&quot;http://en.wikipedia.org/wiki/Significand&quot;&gt;
                  significand&lt;/a&gt; value.                
                <return>
                    the significand.                    
                </return>
            </javadoc>
            <method name="getSignificand" type="LargeInteger" line="220"/>
            <javadoc line="223">
                Returns the maximum error (positive) on this real significand.                
                <return>
                    the maximum error on the significand.                    
                </return>
            </javadoc>
            <method name="getError" type="int" line="227"/>
            <javadoc line="230">
                Returns the exponent of the power of 10 multiplier.                
                <return>
                    the decimal exponent.                    
                </return>
            </javadoc>
            <method name="getExponent" type="int" line="234"/>
            <javadoc line="237">
                Indicates if this real number is exact (&lt;code&gt;{@link #getError() error} 
                  == 0&lt;/code&gt;).                
                <return>
                    <code>getError() == 0</code>                    
                </return>
            </javadoc>
            <method name="isExact" type="boolean" line="242"/>
            <javadoc line="245">
                Returns the number of decimal digits guaranteed exact which appear to
                  the right of the decimal point (absolute error).                
                <return>
                    a measure of the absolute error of this real number.                    
                </return>
            </javadoc>
            <method name="getAccuracy" type="int" line="250"/>
            <javadoc line="255">
                Returns the total number of decimal digits guaranteed exact
                  (relative error).                
                <return>
                    a measure of the relative error of this real number.                    
                </return>
            </javadoc>
            <method name="getPrecision" type="int" line="260"/>
            <javadoc line="265">
                Indicates if this real is greater than zero.                
                <return>
                    <code>this > 0</code>                    
                </return>
            </javadoc>
            <method name="isPositive" type="boolean" line="269"/>
            <javadoc line="272">
                Indicates if this real is less than zero.                
                <return>
                    <code>this < 0</code>                    
                </return>
            </javadoc>
            <method name="isNegative" type="boolean" line="276"/>
            <javadoc line="279">
                Indicates if this real is Not-a-Number (unbounded value interval).                
                <return>
                    <code>true</code> if this number has unbounded value interval;
                      <code>false</code> otherwise.                    
                </return>
            </javadoc>
            <method name="isNaN" type="boolean" line="284"/>
            <javadoc line="287">
                Indicates if this real approximates the one specified. 
                  This method takes into account possible errors (e.g. numeric
                  errors) to make this determination.
                  &lt;p&gt;Note: This method returns &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;this&lt;/code&gt; or 
                  &lt;code&gt;that&lt;/code&gt; {@link #isNaN} (basically Not-A-Number 
                  approximates anything).&lt;/p&gt;                
                <param>
                    that the real to compare with.                    
                </param>
                <return>
                    <code>this &asymp; that</code>                    
                </return>
            </javadoc>
            <method name="approximates" type="boolean" line="297">
                <params>
                    <param name="that" type="Real"/>
                </params>
                <declaration name="diff" type="Real" line="298"/>
            </method>
            <javadoc line="302">
                Returns the closest integer value to this rational number.                
                <return>
                    this real rounded to the nearest integer.                    
                </return>
                <throws>
                    ArithmeticException if <code>this.isNaN()</code>                    
                </throws>
            </javadoc>
            <method name="round" type="LargeInteger" line="307">
                <declaration name="half" type="LargeInteger" line="309"/>
            </method>
            <javadoc line="312">
                Returns the negation of this real number.                
                <return>
                    <code>-this</code>.                    
                </return>
            </javadoc>
            <method name="opposite" type="Real" line="316">
                <declaration name="real" type="Real" line="318"/>
            </method>
            <javadoc line="324">
                Returns the sum of this real number with the one specified.                
                <param>
                    that the real to be added.                    
                </param>
                <return>
                    <code>this + that</code>.                    
                </return>
            </javadoc>
            <method name="plus" type="Real" line="329">
                <params>
                    <param name="that" type="Real"/>
                </params>
                <declaration name="scale" type="int" line="332"/>
                <declaration name="real" type="Real" line="333"/>
            </method>
            <javadoc line="339">
                Returns the difference between this real number and the one
                  specified.                
                <param>
                    that the real to be subtracted.                    
                </param>
                <return>
                    <code>this - that</code>.                    
                </return>
            </javadoc>
            <method name="minus" type="Real" line="345">
                <params>
                    <param name="that" type="Real"/>
                </params>
            </method>
            <javadoc line="348">
                Returns the product of this real number with the specified 
                  &lt;code&gt;long&lt;/code&gt; multiplier.                
                <param>
                    multiplier the <code>long</code> multiplier.                    
                </param>
                <return>
                    <code>this · multiplier</code>.                    
                </return>
            </javadoc>
            <method name="times" type="Real" line="354">
                <params>
                    <param name="multiplier" type="long"/>
                </params>
                <declaration name="real" type="Real" line="356"/>
            </method>
            <javadoc line="362">
                Returns the product of this real number with the one specified.                
                <param>
                    that the real multiplier.                    
                </param>
                <return>
                    <code>this · that</code>.                    
                </return>
            </javadoc>
            <method name="times" type="Real" line="367">
                <params>
                    <param name="that" type="Real"/>
                </params>
                <declaration name="exp" type="long" line="369"/>
                <declaration name="thisMin" type="LargeInteger" line="371"/>
                <declaration name="thisMax" type="LargeInteger" line="372"/>
                <declaration name="thatMin" type="LargeInteger" line="373"/>
                <declaration name="thatMax" type="LargeInteger" line="374"/>
                <declaration name="min" type="LargeInteger" line="375"/>
                <scope line="376">
                    <scope line="377"/>
                    <scope line="381"/>
                </scope>
                <scope line="386">
                    <scope line="387"/>
                    <scope line="391"/>
                </scope>
                <declaration name="real" type="Real" line="396"/>
            </method>
            <javadoc line="402">
                Returns this real number divided by the specified &lt;code&gt;int&lt;/code&gt;
                  divisor.                
                <param>
                    divisor the <code>int</code> divisor.                    
                </param>
                <return>
                    <code>this / divisor</code>                    
                </return>
            </javadoc>
            <method name="divide" type="Real" line="408">
                <params>
                    <param name="divisor" type="long"/>
                </params>
            </method>
            <javadoc line="411">
                Returns this real number divided by the one specified.                
                <param>
                    that the real divisor.                    
                </param>
                <return>
                    <code>this / that</code>.                    
                </return>
                <throws>
                    ArithmeticException if <code>that.equals(ZERO)</code>                    
                </throws>
            </javadoc>
            <method name="divide" type="Real" line="417">
                <params>
                    <param name="that" type="Real"/>
                </params>
            </method>
            <javadoc line="420">
                Returns the reciprocal (or inverse) of this real number.                
                <return>
                    <code>1 / this</code>.                    
                </return>
            </javadoc>
            <method name="inverse" type="Real" line="424">
                <declaration name="thisMin" type="LargeInteger" line="427"/>
                <declaration name="thisMax" type="LargeInteger" line="428"/>
                <declaration name="digits" type="int" line="430"/>
                <declaration name="exp" type="long" line="431"/>
                <declaration name="min" type="LargeInteger" line="433"/>
                <declaration name="max" type="LargeInteger" line="434"/>
                <declaration name="real" type="Real" line="435"/>
            </method>
            <method name="div" type="LargeInteger" line="441">
                <params>
                    <param name="exp" type="int"/>
                    <param name="significand" type="LargeInteger"/>
                </params>
                <declaration name="expBitLength" type="int" line="442"/>
                <declaration name="precision" type="int" line="443"/>
                <declaration name="reciprocal" type="LargeInteger" line="444"/>
                <declaration name="result" type="LargeInteger" line="445"/>
            </method>
            <declaration name="DIGITS_TO_BITS" type="double" line="448"/>
            <method name="toInexact" type="Real" line="449">
                <declaration name="digits" type="int" line="450"/>
                <declaration name="scale" type="int" line="451"/>
                <declaration name="z" type="Real" line="452"/>
            </method>
            <javadoc line="458">
                Returns the absolute value of this real number.                
                <return>
                    <code>|this|</code>.                    
                </return>
            </javadoc>
            <method name="abs" type="Real" line="462"/>
            <javadoc line="465">
                Compares the absolute value of two real numbers.                
                <param>
                    that the real number to be compared with.                    
                </param>
                <return>
                    <code>|this| > |that|</code>                    
                </return>
            </javadoc>
            <method name="isLargerThan" type="boolean" line="470">
                <params>
                    <param name="that" type="Real"/>
                </params>
            </method>
            <javadoc line="473">
                Returns the square root of this real number, the more accurate is this 
                  real number, the more accurate the square root.                
                <return>
                    the positive square root of this real number.                    
                </return>
            </javadoc>
            <method name="sqrt" type="Real" line="478">
                <declaration name="thisMin" type="LargeInteger" line="482"/>
                <declaration name="thisMax" type="LargeInteger" line="483"/>
                <declaration name="exponent" type="int" line="485"/>
                <scope line="486"/>
                <declaration name="minSqrt" type="LargeInteger" line="490"/>
                <declaration name="maxSqrt" type="LargeInteger" line="491"/>
                <declaration name="sqrt" type="LargeInteger" line="492"/>
                <declaration name="z" type="Real" line="493"/>
            </method>
            <javadoc line="499">
                Returns the decimal text representation of this number.                
                <return>
                    the text representation of this number.                    
                </return>
            </javadoc>
            <method name="toText" type="Text" line="503">
                <scope line="505"/>
                <declaration name="errorDigits" type="int" line="508"/>
                <declaration name="m" type="LargeInteger" line="509"/>
                <declaration name="exp" type="int" line="511"/>
                <declaration name="txt" type="Text" line="512"/>
                <declaration name="digits" type="int" line="513"/>
                <scope line="514">
                    <scope line="515"/>
                    <scope line="518"/>
                </scope>
                <scope line="523"/>
            </method>
            <javadoc line="528">
                Compares this real number against the specified object.
                  &lt;p&gt;Note: This method returns &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;this&lt;/code&gt; or 
                  &lt;code&gt;that&lt;/code&gt; {@link #isNaN is Not-A-Number}, even though
                  &lt;code&gt;Double.NaN == Double.NaN&lt;/code&gt; has the value
                  &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;                
                <param>
                    that the object to compare with.                    
                </param>
                <return>
                    <code>true</code> if the objects are two reals with same 
                      significand, error and exponent;<code>false</code> otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="538">
                <params>
                    <param name="that" type="Object"/>
                </params>
                <declaration name="thatReal" type="Real" line="541"/>
            </method>
            <javadoc line="544">
                Returns the hash code for this real number.                
                <return>
                    the hash code value.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="548"/>
            <javadoc line="551">
                Returns the value of this real number as a &lt;code&gt;long&lt;/code&gt;.                
                <return>
                    the numeric value represented by this real after conversion
                      to type <code>long</code>.                    
                </return>
            </javadoc>
            <method name="longValue" type="long" line="556"/>
            <javadoc line="559">
                Returns the value of this real number as a &lt;code&gt;double&lt;/code&gt;.                
                <return>
                    the numeric value represented by this real after conversion
                      to type <code>double</code>.                    
                </return>
            </javadoc>
            <method name="doubleValue" type="double" line="564">
                <declaration name="nbrDigits" type="int" line="567"/>
                <declaration name="digitShift" type="int" line="568"/>
                <declaration name="reducedSignificand" type="long" line="569"/>
                <declaration name="exponent" type="int" line="570"/>
            </method>
            <javadoc line="573">
                Compares two real numbers numerically.                
                <param>
                    that the real to compare with.                    
                </param>
                <return>
                    -1, 0 or 1 as this real is numerically less than, equal to,
                      or greater than <code>that</code>.                    
                </return>
                <throws>
                    ClassCastException <code>that</code> is not a {@link Real}.                    
                </throws>
            </javadoc>
            <method name="compareTo" type="int" line="580">
                <params>
                    <param name="that" type="Real"/>
                </params>
                <declaration name="diff" type="Real" line="581"/>
                <scope line="582"/>
                <scope line="585"/>
                <scope line="588"/>
            </method>
            <javadoc line="592">
                Normalizes this real (maintains error less than 31 bits).                
                <return>
                    the normalized real.                    
                </return>
            </javadoc>
            <method name="normalize" type="Real" line="596">
                <declaration name="digitError" type="int" line="597"/>
                <declaration name="scale" type="int" line="598"/>
                <declaration name="z" type="Real" line="600"/>
            </method>
            <method name="copy" type="Real" line="606"/>
            <declaration name="FACTORY" type="ObjectFactory&lt;Real&gt;" line="610"/>
            <javadoc line="610">
                Holds the factory constructing real instances.                
            </javadoc>
            <anonymous_class line="613">
                <method name="create" type="Real" line="614"/>
            </anonymous_class>
            <declaration name="FIVE" type="LargeInteger" line="619"/>
            <declaration name="MINUS_FIVE" type="LargeInteger" line="620"/>
            <scope line="621">
                <scope line="623"/>
                <scope line="629"/>
            </scope>
            <declaration name="serialVersionUID" type="long" line="633"/>
        </class>
    </source>