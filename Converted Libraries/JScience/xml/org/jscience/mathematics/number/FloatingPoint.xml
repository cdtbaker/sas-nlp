<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.jscience.mathematics.number">
        <import package="org.jscience.mathematics.structure.Field"/>
        <import package="javolution.context.LocalContext"/>
        <import package="javolution.context.ObjectFactory"/>
        <import package="javolution.lang.MathLib"/>
        <import package="javolution.text.Text"/>
        <import package="javolution.text.TextBuilder"/>
        <import package="javolution.xml.XMLFormat"/>
        <import package="javolution.xml.stream.XMLStreamException"/>
        <class name="FloatingPoint" line="10">
            <extends class="Number">
                <type_params>
                    <type_param name="FloatingPoint"/>
                </type_params>
            </extends>
            <implements interface="Field">
                <type_params>
                    <type_param name="FloatingPoint"/>
                </type_params>
            </implements>
            <javadoc line="10">
                &lt;p&gt; This class represents a floating point number of arbitrary precision.
                  A floating point number consists of a {@link #getSignificand significand}and a decimal {@link #getExponent exponent}: 
                  (&lt;code&gt;significand · 10&lt;sup&gt;exponent&lt;/sup&gt;&lt;/code&gt;).&lt;/p&gt;
                  &lt;p&gt; Unlike {@link Real} numbers, no calculation error is performed on 
                  floating point instances but the number of digits used during 
                  calculations can be specified (see {@link #setDigits(int)}). The 
                  largest the number of digits, the smallest the numeric error.
                  For example:[code]
                  FloatingPoint two = FloatingPoint.valueOf(2); 
                  FloatingPoint.setDigits(30); // 30 digits calculations.
                  System.out.println(two.sqrt());
                  &gt;   0.141421356237309504880168872420E1
                  [/code]&lt;/p&gt;
                  &lt;p&gt; Instances of this class are immutable and can be used to find  
                  accurate solutions to linear equations with the {@link org.jscience.mathematics.vector.Matrix Matrix} class.&lt;/p&gt;                
                <author>
                    <a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a>                    
                </author>
                <version>
                    4.1, June 8, 2007                    
                </version>
                <see>
                    <a href="http://en.wikipedia.org/wiki/Floating_point">
                           Wikipedia: Floating point</a>                    
                </see>
            </javadoc>
            <declaration name="XML" type="XMLFormat&lt;FloatingPoint&gt;" line="32"/>
            <javadoc line="32">
                Holds the default XML representation for floating point numbers.
                  This representation consists of a simple &lt;code&gt;value&lt;/code&gt; attribute
                  holding the {@link #toText() textual} representation.                
            </javadoc>
            <anonymous_class line="37">
                <method name="newInstance" type="FloatingPoint" line="38">
                    <params>
                        <param name="cls" type="Class<FloatingPoint>"/>
                        <param name="xml" type="InputElement"/>
                    </params>
                </method>
                <method name="write" type="void" line="41">
                    <params>
                        <param name="FloatingPoint" type="FloatingPoint"/>
                        <param name="xml" type="OutputElement"/>
                    </params>
                </method>
                <method name="read" type="void" line="44">
                    <params>
                        <param name="xml" type="InputElement"/>
                        <param name="FloatingPoint" type="FloatingPoint"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="FACTORY" type="ObjectFactory&lt;FloatingPoint&gt;" line="48"/>
            <javadoc line="48">
                Holds the factory constructing floating point instances.                
            </javadoc>
            <anonymous_class line="51">
                <method name="create" type="FloatingPoint" line="52"/>
            </anonymous_class>
            <declaration name="ZERO" type="FloatingPoint" line="57"/>
            <javadoc line="57">
                The floating point instance representing the additive identity.                
            </javadoc>
            <declaration name="ONE" type="FloatingPoint" line="61"/>
            <javadoc line="61">
                The floating point instance representing the multiplicative identity.                
            </javadoc>
            <declaration name="NaN" type="FloatingPoint" line="65"/>
            <javadoc line="65">
                The Not-a-Number instance (unique).                
            </javadoc>
            <declaration name="DIGITS" type="LocalContext.Reference&lt;Integer&gt;" line="69"/>
            <javadoc line="69">
                Holds the number of digits to be used (default 20 digits).                
            </javadoc>
            <declaration name="_significand" type="LargeInteger" line="73"/>
            <javadoc line="73">
                Holds the significand value.                
            </javadoc>
            <declaration name="_exponent" type="int" line="77"/>
            <javadoc line="77">
                Holds the power of 10 exponent.                
            </javadoc>
            <javadoc line="81">
                Default constructor.                
            </javadoc>
            <method name="FloatingPoint" type="constructor" line="84"/>
            <javadoc line="86">
                Creates a floating point number for the specified significand and 
                  exponent.                
                <param>
                    significand the significand.                    
                </param>
                <param>
                    exponent the power of two exponent.                    
                </param>
            </javadoc>
            <method name="FloatingPoint" type="constructor" line="92">
                <params>
                    <param name="significand" type="LargeInteger"/>
                    <param name="exponent" type="int"/>
                </params>
            </method>
            <javadoc line="96">
                Returns the floating point number for the specified {@link LargeInteger} significand and power of two exponent.                
                <param>
                    significand the significand value.                    
                </param>
                <param>
                    exponent the power of two exponent.                    
                </param>
                <return>
                    <code>(significand · 2<sup>exponent</sup></code>                    
                </return>
            </javadoc>
            <method name="valueOf" type="FloatingPoint" line="102">
                <params>
                    <param name="significand" type="LargeInteger"/>
                    <param name="exponent" type="int"/>
                </params>
                <declaration name="fp" type="FloatingPoint" line="103"/>
            </method>
            <javadoc line="108">
                Returns the floating point number for the specified &lt;code&gt;long&lt;/code&gt;
                  significand and power of two exponent (convenience method).                
                <param>
                    significand the significand value.                    
                </param>
                <param>
                    exponent the power of two exponent.                    
                </param>
                <return>
                    <code>(significand · 2<sup>exponent</sup></code>                    
                </return>
            </javadoc>
            <method name="valueOf" type="FloatingPoint" line="115">
                <params>
                    <param name="significand" type="long"/>
                    <param name="exponent" type="int"/>
                </params>
                <declaration name="fp" type="FloatingPoint" line="116"/>
            </method>
            <javadoc line="121">
                Returns the floating point number for the specified &lt;code&gt;long&lt;/code&gt;
                  value (convenience method).                
                <param>
                    longValue the <code>long</code> value.                    
                </param>
                <return>
                    <code>FloatingPoint.valueOf(longValue, 0)</code>                    
                </return>
            </javadoc>
            <method name="valueOf" type="FloatingPoint" line="127">
                <params>
                    <param name="longValue" type="long"/>
                </params>
            </method>
            <javadoc line="130">
                Returns the floating point number for the specified &lt;code&gt;double&lt;/code&gt;
                  value (convenience method).                
                <param>
                    doubleValue the <code>double</code> value.                    
                </param>
                <return>
                    <code>FloatingPoint.valueOf(longValue, 0)</code>                    
                </return>
            </javadoc>
            <method name="valueOf" type="FloatingPoint" line="136">
                <params>
                    <param name="doubleValue" type="double"/>
                </params>
                <declaration name="e" type="int" line="140"/>
                <declaration name="significand" type="long" line="141"/>
            </method>
            <javadoc line="144">
                Returns the floating point number for the specified character sequence.
                  The number of digits                
                <param>
                    chars the character sequence.                    
                </param>
                <return>
                    the corresponding FloatingPoint number.                    
                </return>
            </javadoc>
            <method name="valueOf" type="FloatingPoint" line="150">
                <params>
                    <param name="chars" type="CharSequence"/>
                </params>
                <declaration name="real" type="Real" line="151"/>
            </method>
            <javadoc line="155">
                Returns the {@link javolution.context.LocalContext local} number of 
                  digits used during calculations (default 20 digits).                
                <return>
                    the number of digits.                    
                </return>
            </javadoc>
            <method name="getDigits" type="int" line="160"/>
            <javadoc line="163">
                Sets the {@link javolution.context.LocalContext local} number of digits
                  to be used during calculations.                
                <param>
                    digits the number of digits.                    
                </param>
                <throws>
                    IllegalArgumentException if <code>digits &lt;= 0</code>                    
                </throws>
            </javadoc>
            <method name="setDigits" type="void" line="169">
                <params>
                    <param name="digits" type="int"/>
                </params>
            </method>
            <javadoc line="173">
                Returns the significand value.                
                <return>
                    this floating point significand.                    
                </return>
            </javadoc>
            <method name="getSignificand" type="LargeInteger" line="177"/>
            <javadoc line="180">
                Returns the decimal exponent.                
                <return>
                    this floating point decimal exponent.                    
                </return>
            </javadoc>
            <method name="getExponent" type="int" line="184"/>
            <javadoc line="187">
                Returns the closest integer to this floating point number.                
                <return>
                    this floating point rounded to the nearest integer.                    
                </return>
            </javadoc>
            <method name="round" type="LargeInteger" line="191">
                <declaration name="half" type="LargeInteger" line="193"/>
            </method>
            <javadoc line="196">
                Returns the opposite of this floating point number.                
                <return>
                    <code>-this</code>.                    
                </return>
            </javadoc>
            <method name="opposite" type="FloatingPoint" line="200"/>
            <javadoc line="203">
                Returns the sum of this floating point number with the one specified.                
                <param>
                    that the floating point number to be added.                    
                </param>
                <return>
                    <code>this + that</code>.                    
                </return>
            </javadoc>
            <method name="plus" type="FloatingPoint" line="208">
                <params>
                    <param name="that" type="FloatingPoint"/>
                </params>
                <declaration name="pow10Scaling" type="int" line="210"/>
                <declaration name="thatScaled" type="LargeInteger" line="211"/>
            </method>
            <javadoc line="214">
                Returns the difference between this FloatingPoint number and the one
                  specified.                
                <param>
                    that the floating point number to be subtracted.                    
                </param>
                <return>
                    <code>this - that</code>.                    
                </return>
            </javadoc>
            <method name="minus" type="FloatingPoint" line="220">
                <params>
                    <param name="that" type="FloatingPoint"/>
                </params>
                <declaration name="pow10Scaling" type="int" line="222"/>
                <declaration name="thatScaled" type="LargeInteger" line="223"/>
            </method>
            <javadoc line="226">
                Returns the product of this floating point number with the specified 
                  &lt;code&gt;long&lt;/code&gt; multiplier.                
                <param>
                    multiplier the <code>long</code> multiplier.                    
                </param>
                <return>
                    <code>this · multiplier</code>.                    
                </return>
            </javadoc>
            <method name="times" type="FloatingPoint" line="232">
                <params>
                    <param name="multiplier" type="long"/>
                </params>
            </method>
            <javadoc line="235">
                Returns the product of this floating point number with the one specified.                
                <param>
                    that the floating point number multiplier.                    
                </param>
                <return>
                    <code>this · that</code>.                    
                </return>
            </javadoc>
            <method name="times" type="FloatingPoint" line="240">
                <params>
                    <param name="that" type="FloatingPoint"/>
                </params>
            </method>
            <javadoc line="243">
                Returns the inverse of this floating point number.                
                <return>
                    <code>1 / this</code>.                    
                </return>
                <throws>
                    ArithmeticException if <code>dividend.isZero()</code>                    
                </throws>
            </javadoc>
            <method name="inverse" type="FloatingPoint" line="248">
                <declaration name="pow10" type="int" line="250"/>
                <declaration name="dividend" type="LargeInteger" line="251"/>
            </method>
            <javadoc line="254">
                Returns this floating point number divided by the one specified.                
                <param>
                    that the FloatingPoint number divisor.                    
                </param>
                <return>
                    <code>this / that</code>.                    
                </return>
                <throws>
                    ArithmeticException if <code>that.equals(ZERO)</code>                    
                </throws>
            </javadoc>
            <method name="divide" type="FloatingPoint" line="260">
                <params>
                    <param name="that" type="FloatingPoint"/>
                </params>
                <declaration name="pow10" type="int" line="262"/>
                <declaration name="dividend" type="LargeInteger" line="263"/>
            </method>
            <javadoc line="266">
                Returns the absolute value of this floating point  number.                
                <return>
                    <code>|this|</code>.                    
                </return>
            </javadoc>
            <method name="abs" type="FloatingPoint" line="270"/>
            <javadoc line="273">
                Returns the square root of this floating point number.                
                <return>
                    the positive square root of this floating point number.                    
                </return>
            </javadoc>
            <method name="sqrt" type="FloatingPoint" line="277">
                <declaration name="pow10" type="int" line="280"/>
                <declaration name="exp" type="int" line="281"/>
                <scope line="282"/>
                <declaration name="scaledValue" type="LargeInteger" line="286"/>
            </method>
            <javadoc line="289">
                Indicates if this floating point number is equal to zero.                
                <return>
                    <code>this == 0</code>                    
                </return>
            </javadoc>
            <method name="isZero" type="boolean" line="293"/>
            <javadoc line="296">
                Indicates if this floating point number is greater than zero.                
                <return>
                    <code>this > 0</code>                    
                </return>
            </javadoc>
            <method name="isPositive" type="boolean" line="300"/>
            <javadoc line="303">
                Indicates if this rational number is less than zero.                
                <return>
                    <code>this < 0</code>                    
                </return>
            </javadoc>
            <method name="isNegative" type="boolean" line="307"/>
            <javadoc line="310">
                Indicates if this floating point is Not-a-Number.                
                <return>
                    <code>true</code> if this number has unbounded value;
                      <code>false</code> otherwise.                    
                </return>
            </javadoc>
            <method name="isNaN" type="boolean" line="315"/>
            <javadoc line="318">
                Compares the absolute value of two FloatingPoint numbers.                
                <param>
                    that the FloatingPoint number to be compared with.                    
                </param>
                <return>
                    <code>|this| > |that|</code>                    
                </return>
            </javadoc>
            <method name="isLargerThan" type="boolean" line="323">
                <params>
                    <param name="that" type="FloatingPoint"/>
                </params>
            </method>
            <javadoc line="326">
                Returns the decimal text representation of this number.                
                <return>
                    the text representation of this number.                    
                </return>
            </javadoc>
            <method name="toText" type="Text" line="330">
                <declaration name="tb" type="TextBuilder" line="333"/>
                <declaration name="m" type="LargeInteger" line="334"/>
                <scope line="335"/>
                <declaration name="exp" type="int" line="341"/>
                <scope line="342"/>
                <declaration name="txt" type="Text" line="346"/>
            </method>
            <javadoc line="350">
                Compares this floating point number against the specified object.                
                <param>
                    that the object to compare with.                    
                </param>
                <return>
                    <code>true</code> if the objects are the same;
                      <code>false</code> otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="356">
                <params>
                    <param name="that" type="Object"/>
                </params>
                <scope line="357"/>
                <scope line="360"/>
            </method>
            <javadoc line="364">
                Returns the hash code for this floating point number.                
                <return>
                    the hash code value.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="368">
                <declaration name="p" type="long" line="371"/>
                <declaration name="code" type="long" line="372"/>
                <declaration name="exp" type="int" line="373"/>
                <declaration name="mult" type="long" line="374"/>
                <scope line="375"/>
                <scope line="379"/>
                <scope line="382">
                    <scope line="383"/>
                </scope>
            </method>
            <javadoc line="391">
                Returns the value of this floating point number as a &lt;code&gt;long&lt;/code&gt;.                
                <return>
                    the numeric value represented by this floating point 
                      after conversion to type <code>long</code>.                    
                </return>
            </javadoc>
            <method name="longValue" type="long" line="396">
                <declaration name="real" type="Real" line="397"/>
            </method>
            <javadoc line="400">
                Returns the value of this floating point number as a &lt;code&gt;double&lt;/code&gt;.                
                <return>
                    the numeric value represented by this FloatingPoint after conversion
                      to type <code>double</code>.                    
                </return>
            </javadoc>
            <method name="doubleValue" type="double" line="405">
                <declaration name="real" type="Real" line="406"/>
            </method>
            <javadoc line="409">
                Compares two floating point number numerically.                
                <param>
                    that the floating point number to compare with.                    
                </param>
                <return>
                    -1, 0 or 1 as this FloatingPoint number is numerically less than, 
                      equal to, or greater than <code>that</code>.                    
                </return>
            </javadoc>
            <method name="compareTo" type="int" line="415">
                <params>
                    <param name="that" type="FloatingPoint"/>
                </params>
                <declaration name="diff" type="FloatingPoint" line="416"/>
                <scope line="417"/>
                <scope line="420"/>
                <scope line="423"/>
            </method>
            <javadoc line="427">
                Returns this floating point number after normalization based upon 
                  the number of digits.                
                <return>
                    <code>this</code>                    
                </return>
            </javadoc>
            <method name="normalize" type="FloatingPoint" line="432">
                <declaration name="digits" type="int" line="433"/>
                <declaration name="thisDigits" type="int" line="434"/>
                <scope line="435">
                    <declaration name="pow10" type="int" line="436"/>
                    <declaration name="exponent" type="long" line="438"/>
                </scope>
            </method>
            <method name="copy" type="FloatingPoint" line="445">
                <declaration name="r" type="FloatingPoint" line="447"/>
            </method>
            <declaration name="serialVersionUID" type="long" line="452"/>
        </class>
    </source>