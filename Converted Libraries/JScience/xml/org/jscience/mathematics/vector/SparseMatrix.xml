<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.jscience.mathematics.vector">
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="javolution.context.ObjectFactory"/>
        <import package="javolution.lang.MathLib"/>
        <import package="javolution.util.FastComparator"/>
        <import package="javolution.util.FastMap"/>
        <import package="javolution.util.FastTable"/>
        <import package="javolution.util.Index"/>
        <import package="org.jscience.mathematics.structure.Field"/>
        <class name="SparseMatrix" line="23">
            <type_params>
                <type_param name="F"/>
            </type_params>
            <extends class="Matrix">
                <type_params>
                    <type_param name="F"/>
                </type_params>
            </extends>
            <comment line="506">
                /////////////////////                
            </comment>
            <comment line="507">
                Factory creation. //                
            </comment>
            <comment line="508">
                /////////////////////                
            </comment>
            <javadoc line="23">
                &lt;p&gt; This class represents a matrix made of {@link SparseVector sparse
                  vectors} (as rows). To create a sparse matrix made of column vectors the {@link #transpose} method can be used. 
                  For example:[code]
                  SparseVector&lt;Rational&gt; column0 = SparseVector.valueOf(...);
                  SparseVector&lt;Rational&gt; column1 = SparseVector.valueOf(...);
                  SparseMatrix&lt;Rational&gt; M = SparseMatrix.valueOf(column0, column1).transpose();
                  [/code]&lt;/p&gt;
                  &lt;p&gt; As for any concrete {@link org.jscience.mathematics.structure.Structurestructure}, this class is declared &lt;code&gt;final&lt;/code&gt; (otherwise most
                  operations would have to be overridden to return the appropriate type).
                  Specialized dense matrix should sub-class {@link Matrix} directly.
                  For example:[code]
                  // Extension through composition.
                  final class BandMatrix &lt;F extends Field&lt;F&gt;&gt; extends Matrix&lt;F&gt; {
                  private SparseMatrix&lt;F&gt; _value;
                  ...
                  public BandMatrix opposite() { // Returns the right type.
                  return BandMatrix.valueOf(_value.opposite());
                  }
                  ...
                  }[/code]
                  &lt;/p&gt;                
                <author>
                    <a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a>                    
                </author>
                <version>
                    3.3, January 2, 2007                    
                </version>
            </javadoc>
            <declaration name="_n" type="int" line="52"/>
            <javadoc line="52">
                Holds the number of columns n or the number of rows m if transposed.                
            </javadoc>
            <declaration name="_zero" type="F" line="57"/>
            <javadoc line="57">
                Holds the zero.                
            </javadoc>
            <declaration name="_transposed" type="boolean" line="62"/>
            <javadoc line="62">
                Indicates if this matrix is transposed (the rows are then the columns).                
            </javadoc>
            <declaration name="_rows" type="FastTable&lt;SparseVector&lt;F&gt;&gt;" line="67"/>
            <javadoc line="67">
                Holds this matrix rows (or columns when transposed).                
            </javadoc>
            <javadoc line="72">
                Returns the sparse square matrix having the specified diagonal
                  vector. This method is typically used to create an identity matrix.
                  For example:[code]
                  SparseMatrix&lt;Real&gt; IDENTITY = Matrix.valueOf(
                  DenseVector.valueOf({Real.ONE, Real.ONE, Real.ONE}), Real.ZERO);
                  [/code]                
                <param>
                    diagonal the diagonal vector.                    
                </param>
                <param>
                    zero value of non-diagonal elements.                    
                </param>
                <return>
                    a square matrix with <code>diagonal</code> on the diagonal and
                      <code>zero</code> elsewhere.                    
                </return>
            </javadoc>
            <method name="valueOf" type="SparseMatrix<F>" line="86">
                <params>
                    <param name="diagonal" type="Vector<F>"/>
                    <param name="zero" type="F"/>
                </params>
                <declaration name="n" type="int" line="87"/>
                <declaration name="M" type="SparseMatrix&lt;F&gt;" line="88"/>
                <scope line="89">
                    <declaration name="row" type="SparseVector&lt;F&gt;" line="90"/>
                </scope>
            </method>
            <javadoc line="97">
                Returns a sparse matrix holding the specified row vectors 
                  (column vectors if {@link #transpose transposed}).                
                <param>
                    rows the row vectors.                    
                </param>
                <return>
                    the matrix having the specified rows.                    
                </return>
                <throws>
                    DimensionException if the rows do not have the same dimension.                    
                </throws>
            </javadoc>
            <method name="valueOf" type="SparseMatrix<F>" line="106">
                <params>
                    <param name="rows" type="SparseVector<F>"/>
                </params>
                <declaration name="n" type="int" line="107"/>
                <declaration name="zero" type="F" line="108"/>
                <declaration name="M" type="SparseMatrix&lt;F&gt;" line="109"/>
                <scope line="110">
                    <declaration name="rowi" type="SparseVector&lt;F&gt;" line="111"/>
                </scope>
            </method>
            <javadoc line="123">
                Returns a sparse matrix holding the row vectors from the specified 
                  collection (column vectors if {@link #transpose transposed}).                
                <param>
                    rows the list of row vectors.                    
                </param>
                <return>
                    the matrix having the specified rows.                    
                </return>
                <throws>
                    DimensionException if the rows do not have the same dimension.                    
                </throws>
            </javadoc>
            <method name="valueOf" type="SparseMatrix<F>" line="132">
                <params>
                    <param name="rows" type="List<SparseVector<F>>"/>
                </params>
                <declaration name="n" type="int" line="133"/>
                <declaration name="zero" type="F" line="134"/>
                <declaration name="M" type="SparseMatrix&lt;F&gt;" line="135"/>
                <declaration name="iterator" type="Iterator&lt;SparseVector&lt;F&gt;&gt;" line="136"/>
                <scope line="137">
                    <declaration name="rowi" type="SparseVector&lt;F&gt;" line="138"/>
                </scope>
            </method>
            <javadoc line="150">
                Returns a sparse matrix equivalent to the specified matrix but with 
                  the zero elements removed using the default object equality comparator.                
                <param>
                    that the matrix to convert.                    
                </param>
                <param>
                    zero the zero element for the sparse vector to return.                    
                </param>
                <return>
                    <code>SparseMatrix.valueOf(that, zero, FastComparator.DEFAULT)</code> or a dense matrix holding the same elements                    
                </return>
            </javadoc>
            <method name="valueOf" type="SparseMatrix<F>" line="158">
                <params>
                    <param name="that" type="Matrix<F>"/>
                    <param name="zero" type="F"/>
                </params>
            </method>
            <javadoc line="162">
                Returns a sparse matrix equivalent to the specified matrix but with 
                  the zero elements removed using the specified object equality comparator.                
                <param>
                    that the matrix to convert.                    
                </param>
                <param>
                    zero the zero element for the sparse vector to return.                    
                </param>
                <param>
                    comparator the comparator used to determinate zero equality.                    
                </param>
                <return>
                    <code>that</code> or a dense matrix holding the same elements
                      as the specified matrix.                    
                </return>
            </javadoc>
            <method name="valueOf" type="SparseMatrix<F>" line="173">
                <params>
                    <param name="that" type="Matrix<F>"/>
                    <param name="zero" type="F"/>
                    <param name="comparator" type="FastComparator<? super F>"/>
                </params>
                <declaration name="n" type="int" line="176"/>
                <declaration name="m" type="int" line="177"/>
                <declaration name="M" type="SparseMatrix&lt;F&gt;" line="178"/>
                <scope line="179">
                    <declaration name="rowi" type="SparseVector&lt;F&gt;" line="180"/>
                </scope>
            </method>
            <javadoc line="187">
                Returns the value of the non-set elements for this sparse matrix.                
                <return>
                    the element corresponding to zero.                    
                </return>
            </javadoc>
            <method name="getZero" type="F" line="192"/>
            <method name="getNumberOfRows" type="int" line="197"/>
            <method name="getNumberOfColumns" type="int" line="202"/>
            <method name="get" type="F" line="207">
                <params>
                    <param name="i" type="int"/>
                    <param name="j" type="int"/>
                </params>
            </method>
            <method name="getRow" type="SparseVector<F>" line="212">
                <params>
                    <param name="i" type="int"/>
                </params>
                <comment line="215">
                    Else transposed.                    
                </comment>
                <declaration name="n" type="int" line="216"/>
                <declaration name="m" type="int" line="217"/>
                <declaration name="V" type="SparseVector&lt;F&gt;" line="220"/>
                <scope line="221">
                    <declaration name="row" type="SparseVector&lt;F&gt;" line="222"/>
                    <declaration name="e" type="F" line="223"/>
                    <scope line="224"/>
                </scope>
            </method>
            <method name="getColumn" type="SparseVector<F>" line="232">
                <params>
                    <param name="j" type="int"/>
                </params>
                <declaration name="m" type="int" line="235"/>
                <declaration name="V" type="SparseVector&lt;F&gt;" line="238"/>
                <scope line="239">
                    <declaration name="row" type="SparseVector&lt;F&gt;" line="240"/>
                    <declaration name="e" type="F" line="241"/>
                    <scope line="242"/>
                </scope>
            </method>
            <method name="getDiagonal" type="SparseVector<F>" line="250">
                <declaration name="m" type="int" line="251"/>
                <declaration name="n" type="int" line="252"/>
                <declaration name="dimension" type="int" line="253"/>
                <declaration name="V" type="SparseVector&lt;F&gt;" line="254"/>
                <scope line="255">
                    <declaration name="row" type="SparseVector&lt;F&gt;" line="256"/>
                    <declaration name="e" type="F" line="257"/>
                    <scope line="258"/>
                </scope>
            </method>
            <method name="opposite" type="SparseMatrix<F>" line="266">
                <declaration name="M" type="SparseMatrix&lt;F&gt;" line="267"/>
                <scope line="268"/>
            </method>
            <method name="plus" type="SparseMatrix<F>" line="275">
                <params>
                    <param name="that" type="Matrix<F>"/>
                </params>
                <declaration name="M" type="SparseMatrix&lt;F&gt;" line="278"/>
                <scope line="279"/>
            </method>
            <method name="minus" type="SparseMatrix<F>" line="287">
                <params>
                    <param name="that" type="Matrix<F>"/>
                </params>
                <comment line="287">
                    Returns more specialized type.                    
                </comment>
            </method>
            <method name="times" type="SparseMatrix<F>" line="292">
                <params>
                    <param name="k" type="F"/>
                </params>
                <declaration name="M" type="SparseMatrix&lt;F&gt;" line="293"/>
                <scope line="294"/>
            </method>
            <method name="times" type="SparseVector<F>" line="301">
                <params>
                    <param name="v" type="Vector<F>"/>
                </params>
                <declaration name="m" type="int" line="304"/>
                <declaration name="V" type="SparseVector&lt;F&gt;" line="305"/>
                <scope line="306">
                    <declaration name="e" type="F" line="307"/>
                    <scope line="308"/>
                </scope>
            </method>
            <method name="times" type="SparseMatrix<F>" line="316">
                <params>
                    <param name="that" type="Matrix<F>"/>
                </params>
                <comment line="322">
                    Creates a mxp matrix in transposed form (p columns vectors of size m)                    
                </comment>
                <comment line="328">
                    M is transposed.                    
                </comment>
                <declaration name="m" type="int" line="317"/>
                <declaration name="n" type="int" line="318"/>
                <declaration name="p" type="int" line="319"/>
                <declaration name="rows" type="FastTable&lt;SparseVector&lt;F&gt;&gt;" line="323"/>
                <declaration name="M" type="SparseMatrix&lt;F&gt;" line="324"/>
                <scope line="325">
                    <declaration name="thatColj" type="Vector&lt;F&gt;" line="326"/>
                    <declaration name="column" type="SparseVector&lt;F&gt;" line="327"/>
                    <scope line="329">
                        <declaration name="e" type="F" line="330"/>
                        <scope line="331"/>
                    </scope>
                </scope>
            </method>
            <method name="getRows" type="FastTable<SparseVector<F>>" line="338">
                <declaration name="rows" type="FastTable&lt;SparseVector&lt;F&gt;&gt;" line="341"/>
                <scope line="342"/>
            </method>
            <method name="inverse" type="SparseMatrix<F>" line="349">
                <comment line="354">
                    Multiply adjoint elements with 1 / determinant.                    
                </comment>
                <declaration name="detInv" type="F" line="352"/>
                <declaration name="A" type="SparseMatrix&lt;F&gt;" line="353"/>
                <scope line="355">
                    <declaration name="row" type="SparseVector&lt;F&gt;" line="356"/>
                    <scope line="358">
                        <declaration name="element" type="F" line="359"/>
                    </scope>
                </scope>
            </method>
            <method name="determinant" type="F" line="367">
                <comment line="372">
                    Expansion by minors (also known as Laplacian)                    
                </comment>
                <comment line="373">
                    This algorithm is division free but too slow for dense matrix.                    
                </comment>
                <declaration name="row0" type="SparseVector&lt;F&gt;" line="374"/>
                <declaration name="det" type="F" line="375"/>
                <scope line="377">
                    <declaration name="i" type="int" line="378"/>
                    <declaration name="d" type="F" line="379"/>
                    <scope line="380"/>
                </scope>
            </method>
            <method name="solve" type="Matrix<F>" line="389">
                <params>
                    <param name="y" type="Matrix<F>"/>
                </params>
            </method>
            <method name="transpose" type="SparseMatrix<F>" line="394">
                <declaration name="M" type="SparseMatrix&lt;F&gt;" line="395"/>
            </method>
            <method name="cofactor" type="F" line="401">
                <params>
                    <param name="i" type="int"/>
                    <param name="j" type="int"/>
                </params>
                <comment line="405">
                    Swaps i,j                    
                </comment>
                <comment line="420">
                    Position shifted (index minus one).                    
                </comment>
                <comment line="422">
                    Else don&apos;t copy element at j.                    
                </comment>
                <scope line="402">
                    <declaration name="k" type="int" line="403"/>
                </scope>
                <declaration name="m" type="int" line="407"/>
                <declaration name="M" type="SparseMatrix&lt;F&gt;" line="408"/>
                <scope line="409">
                    <declaration name="row" type="SparseVector&lt;F&gt;" line="412"/>
                    <declaration name="V" type="SparseVector&lt;F&gt;" line="413"/>
                    <scope line="416">
                        <declaration name="index" type="int" line="417"/>
                        <scope line="418"/>
                        <scope line="420"/>
                    </scope>
                </scope>
            </method>
            <method name="adjoint" type="SparseMatrix<F>" line="429">
                <declaration name="M" type="SparseMatrix&lt;F&gt;" line="430"/>
                <declaration name="m" type="int" line="431"/>
                <scope line="432">
                    <declaration name="row" type="SparseVector&lt;F&gt;" line="433"/>
                    <scope line="435">
                        <declaration name="cofactor" type="F" line="436"/>
                        <scope line="437"/>
                    </scope>
                </scope>
            </method>
            <method name="tensor" type="SparseMatrix<F>" line="449">
                <params>
                    <param name="that" type="Matrix<F>"/>
                </params>
                <comment line="454">
                    Number of columns,                    
                </comment>
                <comment line="455">
                    Number of rows.                    
                </comment>
                <comment line="457">
                    Row index.                    
                </comment>
                <declaration name="thism" type="int" line="450"/>
                <declaration name="thisn" type="int" line="451"/>
                <declaration name="thatm" type="int" line="452"/>
                <declaration name="thatn" type="int" line="453"/>
                <declaration name="n" type="int" line="454"/>
                <declaration name="m" type="int" line="455"/>
                <declaration name="M" type="SparseMatrix&lt;F&gt;" line="456"/>
                <scope line="457">
                    <declaration name="i_rem_thatm" type="int" line="458"/>
                    <declaration name="i_div_thatm" type="int" line="459"/>
                    <declaration name="row" type="SparseVector&lt;F&gt;" line="460"/>
                    <declaration name="thisRow" type="SparseVector&lt;F&gt;" line="462"/>
                    <scope line="464">
                        <declaration name="a" type="F" line="465"/>
                        <declaration name="j" type="int" line="466"/>
                        <scope line="467">
                            <declaration name="b" type="F" line="468"/>
                            <scope line="469"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="vectorization" type="SparseVector<F>" line="479">
                <declaration name="V" type="SparseVector&lt;F&gt;" line="480"/>
                <declaration name="offset" type="int" line="482"/>
                <scope line="483">
                    <declaration name="column" type="SparseVector&lt;F&gt;" line="484"/>
                    <scope line="486"/>
                </scope>
            </method>
            <method name="copy" type="SparseMatrix<F>" line="497">
                <declaration name="M" type="SparseMatrix&lt;F&gt;" line="498"/>
                <scope line="499"/>
            </method>
            <method name="newInstance" type="SparseMatrix<F>" line="511">
                <params>
                    <param name="n" type="int"/>
                    <param name="zero" type="F"/>
                    <param name="transposed" type="boolean"/>
                </params>
                <declaration name="M" type="SparseMatrix&lt;F&gt;" line="512"/>
            </method>
            <declaration name="FACTORY" type="ObjectFactory&lt;SparseMatrix&gt;" line="519"/>
            <anonymous_class line="519">
                <method name="create" type="SparseMatrix" line="521"/>
                <method name="cleanup" type="void" line="526">
                    <params>
                        <param name="matrix" type="SparseMatrix"/>
                    </params>
                </method>
            </anonymous_class>
            <method name="SparseMatrix" type="constructor" line="531"/>
            <declaration name="serialVersionUID" type="long" line="534"/>
        </class>
    </source>