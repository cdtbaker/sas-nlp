<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.jscience.mathematics.vector">
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="javolution.context.ObjectFactory"/>
        <import package="javolution.lang.MathLib"/>
        <import package="javolution.util.FastComparator"/>
        <import package="javolution.util.FastMap"/>
        <import package="javolution.util.FastTable"/>
        <import package="javolution.util.Index"/>
        <import package="org.jscience.mathematics.structure.Field"/>
        <class name="SparseMatrix" line="11">
            <type_params>
                <type_param name="F"/>
            </type_params>
            <extends class="Matrix">
                <type_params>
                    <type_param name="F"/>
                </type_params>
            </extends>
            <javadoc line="11">
                &lt;p&gt; This class represents a matrix made of {@link SparseVector sparse
                  vectors} (as rows). To create a sparse matrix made of column vectors the {@link #transpose} method can be used. 
                  For example:[code]
                  SparseVector&lt;Rational&gt; column0 = SparseVector.valueOf(...);
                  SparseVector&lt;Rational&gt; column1 = SparseVector.valueOf(...);
                  SparseMatrix&lt;Rational&gt; M = SparseMatrix.valueOf(column0, column1).transpose();
                  [/code]&lt;/p&gt;
                  &lt;p&gt; As for any concrete {@link org.jscience.mathematics.structure.Structurestructure}, this class is declared &lt;code&gt;final&lt;/code&gt; (otherwise most
                  operations would have to be overridden to return the appropriate type).
                  Specialized dense matrix should sub-class {@link Matrix} directly.
                  For example:[code]
                  // Extension through composition.
                  final class BandMatrix &lt;F extends Field&lt;F&gt;&gt; extends Matrix&lt;F&gt; {
                  private SparseMatrix&lt;F&gt; _value;
                  ...
                  public BandMatrix opposite() { // Returns the right type.
                  return BandMatrix.valueOf(_value.opposite());
                  }
                  ...
                  }[/code]
                  &lt;/p&gt;                
                <author>
                    <a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a>                    
                </author>
                <version>
                    3.3, January 2, 2007                    
                </version>
            </javadoc>
            <declaration name="_n" type="int" line="37"/>
            <javadoc line="37">
                Holds the number of columns n or the number of rows m if transposed.                
            </javadoc>
            <declaration name="_zero" type="F" line="41"/>
            <javadoc line="41">
                Holds the zero.                
            </javadoc>
            <declaration name="_transposed" type="boolean" line="45"/>
            <javadoc line="45">
                Indicates if this matrix is transposed (the rows are then the columns).                
            </javadoc>
            <declaration name="_rows" type="FastTable&lt;SparseVector&lt;F&gt;&gt;" line="49"/>
            <javadoc line="49">
                Holds this matrix rows (or columns when transposed).                
            </javadoc>
            <javadoc line="53">
                Returns the sparse square matrix having the specified diagonal
                  vector. This method is typically used to create an identity matrix.
                  For example:[code]
                  SparseMatrix&lt;Real&gt; IDENTITY = Matrix.valueOf(
                  DenseVector.valueOf({Real.ONE, Real.ONE, Real.ONE}), Real.ZERO);
                  [/code]                
                <param>
                    diagonal the diagonal vector.                    
                </param>
                <param>
                    zero value of non-diagonal elements.                    
                </param>
                <return>
                    a square matrix with <code>diagonal</code> on the diagonal and
                      <code>zero</code> elsewhere.                    
                </return>
            </javadoc>
            <method name="valueOf" type="SparseMatrix<F>" line="65">
                <params>
                    <param name="diagonal" type="Vector<F>"/>
                    <param name="zero" type="F"/>
                </params>
                <declaration name="n" type="int" line="66"/>
                <declaration name="M" type="SparseMatrix&lt;F&gt;" line="67"/>
                <scope line="68">
                    <declaration name="row" type="SparseVector&lt;F&gt;" line="69"/>
                </scope>
            </method>
            <javadoc line="74">
                Returns a sparse matrix holding the specified row vectors 
                  (column vectors if {@link #transpose transposed}).                
                <param>
                    rows the row vectors.                    
                </param>
                <return>
                    the matrix having the specified rows.                    
                </return>
                <throws>
                    DimensionException if the rows do not have the same dimension.                    
                </throws>
            </javadoc>
            <method name="valueOf" type="SparseMatrix<F>" line="81">
                <params>
                    <param name="rows" type="SparseVector<F>"/>
                </params>
                <declaration name="n" type="int" line="82"/>
                <declaration name="zero" type="F" line="83"/>
                <declaration name="M" type="SparseMatrix&lt;F&gt;" line="84"/>
                <scope line="85">
                    <declaration name="rowi" type="SparseVector&lt;F&gt;" line="86"/>
                </scope>
            </method>
            <javadoc line="93">
                Returns a sparse matrix holding the row vectors from the specified 
                  collection (column vectors if {@link #transpose transposed}).                
                <param>
                    rows the list of row vectors.                    
                </param>
                <return>
                    the matrix having the specified rows.                    
                </return>
                <throws>
                    DimensionException if the rows do not have the same dimension.                    
                </throws>
            </javadoc>
            <method name="valueOf" type="SparseMatrix<F>" line="100">
                <params>
                    <param name="rows" type="List<SparseVector<F>>"/>
                </params>
                <declaration name="n" type="int" line="101"/>
                <declaration name="zero" type="F" line="102"/>
                <declaration name="M" type="SparseMatrix&lt;F&gt;" line="103"/>
                <declaration name="iterator" type="Iterator&lt;SparseVector&lt;F&gt;&gt;" line="104"/>
                <scope line="105">
                    <declaration name="rowi" type="SparseVector&lt;F&gt;" line="106"/>
                </scope>
            </method>
            <javadoc line="113">
                Returns a sparse matrix equivalent to the specified matrix but with 
                  the zero elements removed using the default object equality comparator.                
                <param>
                    that the matrix to convert.                    
                </param>
                <param>
                    zero the zero element for the sparse vector to return.                    
                </param>
                <return>
                    <code>SparseMatrix.valueOf(that, zero, FastComparator.DEFAULT)</code> or a dense matrix holding the same elements                    
                </return>
            </javadoc>
            <method name="valueOf" type="SparseMatrix<F>" line="120">
                <params>
                    <param name="that" type="Matrix<F>"/>
                    <param name="zero" type="F"/>
                </params>
            </method>
            <javadoc line="123">
                Returns a sparse matrix equivalent to the specified matrix but with 
                  the zero elements removed using the specified object equality comparator.                
                <param>
                    that the matrix to convert.                    
                </param>
                <param>
                    zero the zero element for the sparse vector to return.                    
                </param>
                <param>
                    comparator the comparator used to determinate zero equality.                    
                </param>
                <return>
                    <code>that</code> or a dense matrix holding the same elements
                      as the specified matrix.                    
                </return>
            </javadoc>
            <method name="valueOf" type="SparseMatrix<F>" line="132">
                <params>
                    <param name="that" type="Matrix<F>"/>
                    <param name="zero" type="F"/>
                    <param name="comparator" type="FastComparator<? super F>"/>
                </params>
                <declaration name="n" type="int" line="134"/>
                <declaration name="m" type="int" line="135"/>
                <declaration name="M" type="SparseMatrix&lt;F&gt;" line="136"/>
                <scope line="137">
                    <declaration name="rowi" type="SparseVector&lt;F&gt;" line="138"/>
                </scope>
            </method>
            <javadoc line="143">
                Returns the value of the non-set elements for this sparse matrix.                
                <return>
                    the element corresponding to zero.                    
                </return>
            </javadoc>
            <method name="getZero" type="F" line="147"/>
            <method name="getNumberOfRows" type="int" line="150"/>
            <method name="getNumberOfColumns" type="int" line="153"/>
            <method name="get" type="F" line="156">
                <params>
                    <param name="i" type="int"/>
                    <param name="j" type="int"/>
                </params>
            </method>
            <method name="getRow" type="SparseVector<F>" line="159">
                <params>
                    <param name="i" type="int"/>
                </params>
                <declaration name="n" type="int" line="161"/>
                <declaration name="m" type="int" line="162"/>
                <declaration name="V" type="SparseVector&lt;F&gt;" line="164"/>
                <scope line="165">
                    <declaration name="row" type="SparseVector&lt;F&gt;" line="166"/>
                    <declaration name="e" type="F" line="167"/>
                    <scope line="168"/>
                </scope>
            </method>
            <method name="getColumn" type="SparseVector<F>" line="174">
                <params>
                    <param name="j" type="int"/>
                </params>
                <declaration name="m" type="int" line="176"/>
                <declaration name="V" type="SparseVector&lt;F&gt;" line="178"/>
                <scope line="179">
                    <declaration name="row" type="SparseVector&lt;F&gt;" line="180"/>
                    <declaration name="e" type="F" line="181"/>
                    <scope line="182"/>
                </scope>
            </method>
            <method name="getDiagonal" type="SparseVector<F>" line="188">
                <declaration name="m" type="int" line="189"/>
                <declaration name="n" type="int" line="190"/>
                <declaration name="dimension" type="int" line="191"/>
                <declaration name="V" type="SparseVector&lt;F&gt;" line="192"/>
                <scope line="193">
                    <declaration name="row" type="SparseVector&lt;F&gt;" line="194"/>
                    <declaration name="e" type="F" line="195"/>
                    <scope line="196"/>
                </scope>
            </method>
            <method name="opposite" type="SparseMatrix<F>" line="202">
                <declaration name="M" type="SparseMatrix&lt;F&gt;" line="203"/>
                <scope line="204"/>
            </method>
            <method name="plus" type="SparseMatrix<F>" line="209">
                <params>
                    <param name="that" type="Matrix<F>"/>
                </params>
                <declaration name="M" type="SparseMatrix&lt;F&gt;" line="211"/>
                <scope line="212"/>
            </method>
            <method name="minus" type="SparseMatrix<F>" line="217">
                <params>
                    <param name="that" type="Matrix<F>"/>
                </params>
            </method>
            <method name="times" type="SparseMatrix<F>" line="220">
                <params>
                    <param name="k" type="F"/>
                </params>
                <declaration name="M" type="SparseMatrix&lt;F&gt;" line="221"/>
                <scope line="222"/>
            </method>
            <method name="times" type="SparseVector<F>" line="227">
                <params>
                    <param name="v" type="Vector<F>"/>
                </params>
                <declaration name="m" type="int" line="229"/>
                <declaration name="V" type="SparseVector&lt;F&gt;" line="230"/>
                <scope line="231">
                    <declaration name="e" type="F" line="232"/>
                    <scope line="233"/>
                </scope>
            </method>
            <method name="times" type="SparseMatrix<F>" line="239">
                <params>
                    <param name="that" type="Matrix<F>"/>
                </params>
                <declaration name="m" type="int" line="240"/>
                <declaration name="n" type="int" line="241"/>
                <declaration name="p" type="int" line="242"/>
                <declaration name="rows" type="FastTable&lt;SparseVector&lt;F&gt;&gt;" line="244"/>
                <declaration name="M" type="SparseMatrix&lt;F&gt;" line="245"/>
                <scope line="246">
                    <declaration name="thatColj" type="Vector&lt;F&gt;" line="247"/>
                    <declaration name="column" type="SparseVector&lt;F&gt;" line="248"/>
                    <scope line="250">
                        <declaration name="e" type="F" line="251"/>
                        <scope line="252"/>
                    </scope>
                </scope>
            </method>
            <method name="getRows" type="FastTable<SparseVector<F>>" line="259">
                <declaration name="rows" type="FastTable&lt;SparseVector&lt;F&gt;&gt;" line="261"/>
                <scope line="262"/>
            </method>
            <method name="inverse" type="SparseMatrix<F>" line="267">
                <declaration name="detInv" type="F" line="269"/>
                <declaration name="A" type="SparseMatrix&lt;F&gt;" line="270"/>
                <scope line="271">
                    <declaration name="row" type="SparseVector&lt;F&gt;" line="272"/>
                    <scope line="273">
                        <declaration name="element" type="F" line="274"/>
                    </scope>
                </scope>
            </method>
            <method name="determinant" type="F" line="280">
                <declaration name="row0" type="SparseVector&lt;F&gt;" line="283"/>
                <declaration name="det" type="F" line="284"/>
                <scope line="285">
                    <declaration name="i" type="int" line="286"/>
                    <declaration name="d" type="F" line="287"/>
                    <scope line="288"/>
                </scope>
            </method>
            <method name="solve" type="Matrix<F>" line="295">
                <params>
                    <param name="y" type="Matrix<F>"/>
                </params>
            </method>
            <method name="transpose" type="SparseMatrix<F>" line="298">
                <declaration name="M" type="SparseMatrix&lt;F&gt;" line="299"/>
            </method>
            <method name="cofactor" type="F" line="303">
                <params>
                    <param name="i" type="int"/>
                    <param name="j" type="int"/>
                </params>
                <scope line="304">
                    <declaration name="k" type="int" line="305"/>
                </scope>
                <declaration name="m" type="int" line="309"/>
                <declaration name="M" type="SparseMatrix&lt;F&gt;" line="310"/>
                <scope line="311">
                    <declaration name="row" type="SparseVector&lt;F&gt;" line="313"/>
                    <declaration name="V" type="SparseVector&lt;F&gt;" line="314"/>
                    <scope line="316">
                        <declaration name="index" type="int" line="317"/>
                        <scope line="318"/>
                        <scope line="321"/>
                    </scope>
                </scope>
            </method>
            <method name="adjoint" type="SparseMatrix<F>" line="328">
                <declaration name="M" type="SparseMatrix&lt;F&gt;" line="329"/>
                <declaration name="m" type="int" line="330"/>
                <scope line="331">
                    <declaration name="row" type="SparseVector&lt;F&gt;" line="332"/>
                    <scope line="334">
                        <declaration name="cofactor" type="F" line="335"/>
                        <scope line="336"/>
                    </scope>
                </scope>
            </method>
            <method name="tensor" type="SparseMatrix<F>" line="343">
                <params>
                    <param name="that" type="Matrix<F>"/>
                </params>
                <declaration name="thism" type="int" line="344"/>
                <declaration name="thisn" type="int" line="345"/>
                <declaration name="thatm" type="int" line="346"/>
                <declaration name="thatn" type="int" line="347"/>
                <declaration name="n" type="int" line="348"/>
                <declaration name="m" type="int" line="349"/>
                <declaration name="M" type="SparseMatrix&lt;F&gt;" line="350"/>
                <scope line="351">
                    <declaration name="i_rem_thatm" type="int" line="352"/>
                    <declaration name="i_div_thatm" type="int" line="353"/>
                    <declaration name="row" type="SparseVector&lt;F&gt;" line="354"/>
                    <declaration name="thisRow" type="SparseVector&lt;F&gt;" line="356"/>
                    <scope line="357">
                        <declaration name="a" type="F" line="358"/>
                        <declaration name="j" type="int" line="359"/>
                        <scope line="360">
                            <declaration name="b" type="F" line="361"/>
                            <scope line="362"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="vectorization" type="SparseVector<F>" line="370">
                <declaration name="V" type="SparseVector&lt;F&gt;" line="371"/>
                <declaration name="offset" type="int" line="372"/>
                <scope line="373">
                    <declaration name="column" type="SparseVector&lt;F&gt;" line="374"/>
                    <scope line="375"/>
                </scope>
            </method>
            <method name="copy" type="SparseMatrix<F>" line="382">
                <declaration name="M" type="SparseMatrix&lt;F&gt;" line="383"/>
                <scope line="384"/>
            </method>
            <method name="newInstance" type="SparseMatrix<F>" line="389">
                <params>
                    <param name="n" type="int"/>
                    <param name="zero" type="F"/>
                    <param name="transposed" type="boolean"/>
                </params>
                <declaration name="M" type="SparseMatrix&lt;F&gt;" line="390"/>
            </method>
            <declaration name="FACTORY" type="ObjectFactory&lt;SparseMatrix&gt;" line="396"/>
            <anonymous_class line="396">
                <method name="create" type="SparseMatrix" line="397"/>
                <method name="cleanup" type="void" line="400">
                    <params>
                        <param name="matrix" type="SparseMatrix"/>
                    </params>
                </method>
            </anonymous_class>
            <method name="SparseMatrix" type="constructor" line="405"/>
            <declaration name="serialVersionUID" type="long" line="407"/>
        </class>
    </source>