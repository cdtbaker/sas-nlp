<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.jscience.mathematics.vector">
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="javolution.context.ConcurrentContext"/>
        <import package="javolution.context.ObjectFactory"/>
        <import package="javolution.lang.MathLib"/>
        <import package="javolution.util.FastTable"/>
        <import package="org.jscience.mathematics.number.Float64"/>
        <class name="Float64Matrix" line="9">
            <extends class="Matrix">
                <type_params>
                    <type_param name="Float64"/>
                </type_params>
            </extends>
            <javadoc line="9">
                &lt;p&gt; This class represents an optimized {@link Matrix matrix} implementation
                  for {@link Float64 64 bits floating-point} numbers.&lt;/p&gt;
                  &lt;p&gt; Instances of this class can be created from {@link Float64Vector}, 
                  either as rows or columns if the matrix is transposed. For example:[code]
                  Float64Vector&lt;Rational&gt; column0 = Float64Vector.valueOf(...);
                  Float64Vector&lt;Rational&gt; column1 = Float64Vector.valueOf(...);
                  Float64Matrix&lt;Rational&gt; M = Float64Matrix.valueOf(column0, column1).transpose();
                  [/code]&lt;/p&gt;                
                <author>
                    <a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a>                    
                </author>
                <version>
                    3.3, January 2, 2007                    
                </version>
            </javadoc>
            <declaration name="_n" type="int" line="22"/>
            <javadoc line="22">
                Holds the number of columns n.                
            </javadoc>
            <declaration name="_transposed" type="boolean" line="26"/>
            <javadoc line="26">
                Indicates if this matrix is transposed (the rows are then the columns).                
            </javadoc>
            <declaration name="_rows" type="FastTable&lt;Float64Vector&gt;" line="30"/>
            <javadoc line="30">
                Holds this matrix rows (or columns when transposed).                
            </javadoc>
            <javadoc line="34">
                Returns a dense matrix from a 2-dimensional array of &lt;code&gt;double&lt;/code&gt;
                  values. The first dimension being the row and the second being the 
                  column.                
                <param>
                    values the array of <code>double</code> values.                    
                </param>
                <return>
                    the matrix having the specified elements.                    
                </return>
                <throws>
                    DimensionException if rows have different length.                    
                </throws>
                <see>
                    Float64Vector                    
                </see>
            </javadoc>
            <method name="valueOf" type="Float64Matrix" line="43">
                <params>
                    <param name="values" type="double[][]"/>
                </params>
                <declaration name="m" type="int" line="44"/>
                <declaration name="n" type="int" line="45"/>
                <declaration name="M" type="Float64Matrix" line="46"/>
                <scope line="47">
                    <declaration name="row" type="Float64Vector" line="48"/>
                </scope>
            </method>
            <javadoc line="54">
                Returns a complex matrix holding the specified row vectors 
                  (column vectors if {@link #transpose transposed}).                
                <param>
                    rows the row vectors.                    
                </param>
                <return>
                    the matrix having the specified rows.                    
                </return>
                <throws>
                    DimensionException if the rows do not have the same dimension.                    
                </throws>
            </javadoc>
            <method name="valueOf" type="Float64Matrix" line="61">
                <params>
                    <param name="rows" type="Float64Vector"/>
                </params>
                <declaration name="n" type="int" line="62"/>
                <declaration name="M" type="Float64Matrix" line="63"/>
                <scope line="64">
                    <declaration name="rowi" type="Float64Vector" line="65"/>
                </scope>
            </method>
            <javadoc line="71">
                Returns a complex matrix holding the row vectors from the specified 
                  collection (column vectors if {@link #transpose transposed}).                
                <param>
                    rows the list of row vectors.                    
                </param>
                <return>
                    the matrix having the specified rows.                    
                </return>
                <throws>
                    DimensionException if the rows do not have the same dimension.                    
                </throws>
            </javadoc>
            <method name="valueOf" type="Float64Matrix" line="78">
                <params>
                    <param name="rows" type="List<Float64Vector>"/>
                </params>
                <declaration name="n" type="int" line="79"/>
                <declaration name="M" type="Float64Matrix" line="80"/>
                <declaration name="iterator" type="Iterator&lt;Float64Vector&gt;" line="81"/>
                <scope line="82">
                    <declaration name="rowi" type="Float64Vector" line="83"/>
                </scope>
            </method>
            <javadoc line="89">
                Returns a complex matrix equivalent to the specified matrix.                
                <param>
                    that the matrix to convert.                    
                </param>
                <return>
                    <code>that</code> or a complex matrix holding the same elements
                      as the specified matrix.                    
                </return>
            </javadoc>
            <method name="valueOf" type="Float64Matrix" line="95">
                <params>
                    <param name="that" type="Matrix<Float64>"/>
                </params>
                <declaration name="n" type="int" line="97"/>
                <declaration name="m" type="int" line="98"/>
                <declaration name="M" type="Float64Matrix" line="99"/>
                <scope line="100">
                    <declaration name="rowi" type="Float64Vector" line="101"/>
                </scope>
            </method>
            <method name="getNumberOfRows" type="int" line="106"/>
            <method name="getNumberOfColumns" type="int" line="109"/>
            <method name="get" type="Float64" line="112">
                <params>
                    <param name="i" type="int"/>
                    <param name="j" type="int"/>
                </params>
            </method>
            <method name="getRow" type="Float64Vector" line="115">
                <params>
                    <param name="i" type="int"/>
                </params>
                <declaration name="n" type="int" line="117"/>
                <declaration name="m" type="int" line="118"/>
                <declaration name="V" type="Float64Vector" line="120"/>
                <scope line="121"/>
            </method>
            <method name="getColumn" type="Float64Vector" line="126">
                <params>
                    <param name="j" type="int"/>
                </params>
                <declaration name="m" type="int" line="128"/>
                <declaration name="V" type="Float64Vector" line="130"/>
                <scope line="131"/>
            </method>
            <method name="getDiagonal" type="Float64Vector" line="136">
                <declaration name="m" type="int" line="137"/>
                <declaration name="n" type="int" line="138"/>
                <declaration name="dimension" type="int" line="139"/>
                <declaration name="V" type="Float64Vector" line="140"/>
                <scope line="141"/>
            </method>
            <method name="opposite" type="Float64Matrix" line="146">
                <declaration name="M" type="Float64Matrix" line="147"/>
                <scope line="148"/>
            </method>
            <method name="plus" type="Float64Matrix" line="153">
                <params>
                    <param name="that" type="Matrix<Float64>"/>
                </params>
                <declaration name="M" type="Float64Matrix" line="155"/>
                <scope line="156"/>
            </method>
            <method name="minus" type="Float64Matrix" line="161">
                <params>
                    <param name="that" type="Matrix<Float64>"/>
                </params>
            </method>
            <method name="times" type="Float64Matrix" line="164">
                <params>
                    <param name="k" type="Float64"/>
                </params>
                <declaration name="M" type="Float64Matrix" line="165"/>
                <scope line="166"/>
            </method>
            <method name="times" type="Float64Vector" line="171">
                <params>
                    <param name="v" type="Vector<Float64>"/>
                </params>
                <declaration name="m" type="int" line="173"/>
                <declaration name="V" type="Float64Vector" line="174"/>
                <scope line="175"/>
            </method>
            <method name="times" type="Float64Matrix" line="180">
                <params>
                    <param name="that" type="Matrix<Float64>"/>
                </params>
                <declaration name="n" type="int" line="181"/>
                <declaration name="m" type="int" line="182"/>
                <declaration name="p" type="int" line="183"/>
                <declaration name="M" type="Float64Matrix" line="185"/>
                <declaration name="multiply" type="Multiply" line="187"/>
            </method>
            <class name="Multiply" line="192">
                <implements interface="Runnable"/>
                <declaration name="FACTORY" type="ObjectFactory&lt;Multiply&gt;" line="193"/>
                <anonymous_class line="193">
                    <method name="create" type="Multiply" line="194"/>
                </anonymous_class>
                <declaration name="_left" type="Float64Matrix" line="199"/>
                <declaration name="_right" type="Matrix&lt;Float64&gt;" line="200"/>
                <declaration name="_rightColumnStart" type="int" line="201"/>
                <declaration name="_rightColumnEnd" type="int" line="202"/>
                <declaration name="_columnsResult" type="FastTable&lt;Float64Vector&gt;" line="203"/>
                <method name="valueOf" type="Multiply" line="204">
                    <params>
                        <param name="left" type="Float64Matrix"/>
                        <param name="right" type="Matrix<Float64>"/>
                        <param name="rightColumnStart" type="int"/>
                        <param name="rightColumnEnd" type="int"/>
                        <param name="columnsResult" type="FastTable<Float64Vector>"/>
                    </params>
                    <declaration name="multiply" type="Multiply" line="205"/>
                </method>
                <method name="recycle" type="void" line="213">
                    <params>
                        <param name="multiply" type="Multiply"/>
                    </params>
                </method>
                <method name="run" type="void" line="219">
                    <scope line="220">
                        <declaration name="rows" type="FastTable&lt;Float64Vector&gt;" line="221"/>
                        <declaration name="m" type="int" line="222"/>
                        <scope line="223">
                            <declaration name="thatColj" type="Vector&lt;Float64&gt;" line="224"/>
                            <declaration name="column" type="Float64Vector" line="225"/>
                            <scope line="227"/>
                        </scope>
                    </scope>
                    <scope line="232">
                        <declaration name="halfIndex" type="int" line="233"/>
                        <declaration name="firstHalf" type="Multiply" line="234"/>
                        <declaration name="secondHalf" type="Multiply" line="235"/>
                        <scope line="237"/>
                        <scope line="241"/>
                    </scope>
                </method>
            </class>
            <method name="getRows" type="FastTable<Float64Vector>" line="249">
                <declaration name="rows" type="FastTable&lt;Float64Vector&gt;" line="251"/>
                <scope line="252"/>
            </method>
            <method name="inverse" type="Float64Matrix" line="257"/>
            <method name="determinant" type="Float64" line="261"/>
            <method name="transpose" type="Float64Matrix" line="264">
                <declaration name="M" type="Float64Matrix" line="265"/>
            </method>
            <method name="cofactor" type="Float64" line="269">
                <params>
                    <param name="i" type="int"/>
                    <param name="j" type="int"/>
                </params>
                <scope line="270">
                    <declaration name="k" type="int" line="271"/>
                </scope>
                <declaration name="m" type="int" line="275"/>
                <declaration name="M" type="Float64Matrix" line="276"/>
                <scope line="277">
                    <declaration name="row" type="Float64Vector" line="279"/>
                    <declaration name="V" type="Float64Vector" line="280"/>
                    <scope line="282"/>
                </scope>
            </method>
            <method name="adjoint" type="Float64Matrix" line="289">
                <declaration name="M" type="Float64Matrix" line="290"/>
                <declaration name="m" type="int" line="291"/>
                <scope line="292">
                    <declaration name="row" type="Float64Vector" line="293"/>
                    <scope line="295">
                        <declaration name="cofactor" type="Float64" line="296"/>
                    </scope>
                </scope>
            </method>
            <method name="tensor" type="Float64Matrix" line="302">
                <params>
                    <param name="that" type="Matrix<Float64>"/>
                </params>
            </method>
            <method name="vectorization" type="Float64Vector" line="305"/>
            <method name="copy" type="Float64Matrix" line="308">
                <declaration name="M" type="Float64Matrix" line="309"/>
                <scope line="310"/>
            </method>
            <method name="newInstance" type="Float64Matrix" line="315">
                <params>
                    <param name="n" type="int"/>
                    <param name="transposed" type="boolean"/>
                </params>
                <declaration name="M" type="Float64Matrix" line="316"/>
            </method>
            <declaration name="FACTORY" type="ObjectFactory&lt;Float64Matrix&gt;" line="321"/>
            <anonymous_class line="321">
                <method name="create" type="Float64Matrix" line="322"/>
                <method name="cleanup" type="void" line="325">
                    <params>
                        <param name="matrix" type="Float64Matrix"/>
                    </params>
                </method>
            </anonymous_class>
            <method name="Float64Matrix" type="constructor" line="330"/>
            <declaration name="serialVersionUID" type="long" line="332"/>
        </class>
    </source>