<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.jscience.mathematics.vector">
        <import package="java.util.Comparator"/>
        <import package="javolution.context.StackContext"/>
        <import package="javolution.lang.MathLib"/>
        <import package="javolution.lang.Realtime"/>
        <import package="javolution.lang.ValueType"/>
        <import package="javolution.text.Text"/>
        <import package="javolution.text.TextBuilder"/>
        <import package="javolution.xml.XMLFormat"/>
        <import package="javolution.xml.stream.XMLStreamException"/>
        <import package="org.jscience.mathematics.structure.Field"/>
        <import package="org.jscience.mathematics.structure.Ring"/>
        <import package="org.jscience.mathematics.structure.VectorSpace"/>
        <class name="Matrix" line="26">
            <type_params>
                <type_param name="F"/>
            </type_params>
            <implements interface="VectorSpace">
                <type_params>
                    <type_param name="Matrix<F>"/>
                    <type_param name="F"/>
                </type_params>
            </implements>
            <implements interface="Ring">
                <type_params>
                    <type_param name="Matrix<F>"/>
                </type_params>
            </implements>
            <implements interface="ValueType"/>
            <implements interface="Realtime"/>
            <javadoc line="26">
                &lt;p&gt; This class represents a rectangular table of elements of a ring-like 
                  algebraic structure.&lt;/p&gt;
                  &lt;p&gt; Instances of this class can be used to resolve system of linear equations
                  involving &lt;i&gt;any kind&lt;/i&gt; of {@link Field Field} elements
                  (e.g. {@link org.jscience.mathematics.number.Real Real}, {@link org.jscience.mathematics.number.Complex Complex}, {@link org.jscience.physics.amount.Amount Amount&amp;lt;?&amp;gt;},{@link org.jscience.mathematics.function.Function Function}, etc).
                  For example:[code]
                  // Creates a dense matrix (2x2) of Rational numbers.
                  DenseMatrix&lt;Rational&gt; M = DenseMatrix.valueOf(
                  { Rational.valueOf(23, 45), Rational.valueOf(33, 75) },
                  { Rational.valueOf(15, 31), Rational.valueOf(-20, 45)});
                  // Creates a sparse matrix (16x2) of Real numbers.
                  SparseMatrix&lt;Real&gt; M = SparseMatrix.valueOf(
                  SparseVector.valueOf(16, Real.ZERO, 0, Real.valueOf(5)),
                  SparseVector.valueOf(16, Real.ZERO, 15, Real.valueOf(-3)));
                  // Creates a floating-point (64 bits) matrix (3x2).
                  Float64Matrix M = Float64Matrix.valueOf(
                  {{ 1.0, 2.0, 3.0}, { 4.0, 5.0, 6.0}});
                  // Creates a complex single column matrix (1x2).
                  ComplexMatrix M = ComplexMatrix.valueOf(
                  {{ Complex.valueOf(1.0, 2.0), Complex.valueOf(4.0, 5.0)}}).transpose();
                  // Creates an identity matrix (2x2) for modulo integer.
                  SparseMatrix&lt;ModuloInteger&gt; IDENTITY = SparseMatrix.valueOf(
                  DenseVector.valueOf(ModuloInteger.ONE, ModuloInteger.ONE), ModuloInteger.ZERO);
                  [/code]&lt;/p&gt;
                  &lt;p&gt; Non-commutative field multiplication is supported. Invertible square 
                  matrices may form a non-commutative field (also called a division
                  ring). In which case this class may be used to resolve system of linear
                  equations with matrix coefficients.&lt;/p&gt;
                  &lt;p&gt; Implementation Note: Matrices may use {@link javolution.context.StackContext StackContext} and {@link javolution.context.ConcurrentContext ConcurrentContext} in order to 
                  minimize heap allocation and accelerate calculations on multi-core 
                  systems.&lt;/p&gt;                
                <author>
                    <a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a>                    
                </author>
                <version>
                    3.3, December 24, 2006                    
                </version>
                <see>
                    <a href="http://en.wikipedia.org/wiki/Matrix_%28mathematics%29">
                           Wikipedia: Matrix (mathematics)</a>                    
                </see>
            </javadoc>
            <declaration name="XML" type="XMLFormat&lt;Matrix&gt;" line="79"/>
            <javadoc line="79">
                Holds the default XML representation for matrices. For example:[code]
                  &lt;DenseMatrix rows=&quot;2&quot; columns=&quot;2&quot;&gt;
                  &lt;Complex real=&quot;1.0&quot; imaginary=&quot;0.0&quot; /&gt;
                  &lt;Complex real=&quot;0.0&quot; imaginary=&quot;1.0&quot; /&gt;
                  &lt;Complex real=&quot;0.0&quot; imaginary=&quot;0.4&quot; /&gt;
                  &lt;Complex real=&quot;-5.0&quot; imaginary=&quot;-1.0&quot; /&gt;
                  &lt;/DenseMatrix&gt;[/code]                
            </javadoc>
            <anonymous_class line="90">
                <method name="read" type="void" line="93">
                    <params>
                        <param name="xml" type="InputElement"/>
                        <param name="M" type="Matrix"/>
                    </params>
                    <comment line="94">
                        Nothing to do.                        
                    </comment>
                </method>
                <method name="write" type="void" line="99">
                    <params>
                        <param name="M" type="Matrix"/>
                        <param name="xml" type="OutputElement"/>
                    </params>
                    <declaration name="m" type="int" line="100"/>
                    <declaration name="n" type="int" line="101"/>
                    <scope line="104">
                        <scope line="105"/>
                    </scope>
                </method>
            </anonymous_class>
            <javadoc line="112">
                Default constructor (for sub-classes).                
            </javadoc>
            <method name="Matrix" type="constructor" line="115"/>
            <method name="getNumberOfRows" type="int" line="118"/>
            <javadoc line="118">
                Returns the number of rows &lt;code&gt;m&lt;/code&gt; for this matrix.                
                <return>
                    m, the number of rows.                    
                </return>
            </javadoc>
            <method name="getNumberOfColumns" type="int" line="125"/>
            <javadoc line="125">
                Returns the number of columns &lt;code&gt;n&lt;/code&gt; for this matrix.                
                <return>
                    n, the number of columns.                    
                </return>
            </javadoc>
            <method name="get" type="F" line="132"/>
            <javadoc line="132">
                Returns a single element from this matrix.                
                <param>
                    i the row index (range [0..m[).                    
                </param>
                <param>
                    j the column index (range [0..n[).                    
                </param>
                <return>
                    the element read at [i,j].                    
                </return>
                <throws>
                    IndexOutOfBoundsException <code>
                      ((i < 0) || (i >= m)) || ((j < 0) || (j >= n))</code>                    
                </throws>
            </javadoc>
            <method name="getRow" type="Vector<F>" line="143"/>
            <javadoc line="143">
                Returns the row identified by the specified index in this matrix.                
                <param>
                    i the row index (range [0..m[).                    
                </param>
                <return>
                    the vector holding the specified row.                    
                </return>
                <throws>
                    IndexOutOfBoundsException <code>(i < 0) || (i >= m)</code>                    
                </throws>
            </javadoc>
            <method name="getColumn" type="Vector<F>" line="152"/>
            <javadoc line="152">
                Returns the column identified by the specified index in this matrix.                
                <param>
                    j the column index (range [0..n[).                    
                </param>
                <return>
                    the vector holding the specified column.                    
                </return>
                <throws>
                    IndexOutOfBoundsException <code>(j < 0) || (j >= n)</code>                    
                </throws>
            </javadoc>
            <method name="getDiagonal" type="Vector<F>" line="161"/>
            <javadoc line="161">
                Returns the diagonal vector.                
                <return>
                    the vector holding the diagonal elements.                    
                </return>
            </javadoc>
            <method name="opposite" type="Matrix<F>" line="168"/>
            <javadoc line="168">
                Returns the negation of this matrix.                
                <return>
                    <code>-this</code>.                    
                </return>
            </javadoc>
            <method name="plus" type="Matrix<F>" line="175"/>
            <javadoc line="175">
                Returns the sum of this matrix with the one specified.                
                <param>
                    that the matrix to be added.                    
                </param>
                <return>
                    <code>this + that</code>.                    
                </return>
                <throws>
                    DimensionException matrices's dimensions are different.                    
                </throws>
            </javadoc>
            <javadoc line="184">
                Returns the difference between this matrix and the one specified.                
                <param>
                    that the matrix to be subtracted.                    
                </param>
                <return>
                    <code>this - that</code>.                    
                </return>
                <throws>
                    DimensionException matrices's dimensions are different.                    
                </throws>
            </javadoc>
            <method name="minus" type="Matrix<F>" line="191">
                <params>
                    <param name="that" type="Matrix<F>"/>
                </params>
            </method>
            <method name="times" type="Matrix<F>" line="195"/>
            <javadoc line="195">
                Returns the product of this matrix by the specified factor.                
                <param>
                    k the coefficient multiplier.                    
                </param>
                <return>
                    <code>this · k</code>                    
                </return>
            </javadoc>
            <method name="times" type="Vector<F>" line="203"/>
            <javadoc line="203">
                Returns the product of this matrix by the specified vector.                
                <param>
                    v the vector.                    
                </param>
                <return>
                    <code>this · v</code>                    
                </return>
                <throws>
                    DimensionException if <code>
                      v.getDimension() != this.getNumberOfColumns()<code>                    
                </throws>
            </javadoc>
            <method name="times" type="Matrix<F>" line="213"/>
            <javadoc line="213">
                Returns the product of this matrix with the one specified.                
                <param>
                    that the matrix multiplier.                    
                </param>
                <return>
                    <code>this · that</code>.                    
                </return>
                <throws>
                    DimensionException if <code>
                      this.getNumberOfColumns() != that.getNumberOfRows()</code>.                    
                </throws>
            </javadoc>
            <method name="inverse" type="Matrix<F>" line="223"/>
            <javadoc line="223">
                Returns the inverse of this matrix (must be square).                
                <return>
                    <code>1 / this</code>                    
                </return>
                <throws>
                    DimensionException if this matrix is not square.                    
                </throws>
            </javadoc>
            <javadoc line="231">
                Returns this matrix divided by the one specified.                
                <param>
                    that the matrix divisor.                    
                </param>
                <return>
                    <code>this / that</code>.                    
                </return>
                <throws>
                    DimensionException if that matrix is not square or dimensions 
                      do not match.                    
                </throws>
            </javadoc>
            <method name="divide" type="Matrix<F>" line="239">
                <params>
                    <param name="that" type="Matrix<F>"/>
                </params>
            </method>
            <javadoc line="243">
                Returns the inverse or pseudo-inverse if this matrix if not square.
                  &lt;p&gt; Note: To resolve the equation &lt;code&gt;A  X = B&lt;/code&gt;,
                  it is usually faster to calculate &lt;code&gt;A.lu().solve(B)&lt;/code&gt;
                  rather than &lt;code&gt;A.inverse().times(B)&lt;/code&gt;.&lt;/p&gt;                
                <return>
                    the inverse or pseudo-inverse of this matrix.                    
                </return>
            </javadoc>
            <method name="pseudoInverse" type="Matrix<F>" line="252">
                <declaration name="thisTranspose" type="Matrix&lt;F&gt;" line="255"/>
            </method>
            <method name="determinant" type="F" line="259"/>
            <javadoc line="259">
                Returns the determinant of this matrix.                
                <return>
                    this matrix determinant.                    
                </return>
                <throws>
                    DimensionException if this matrix is not square.                    
                </throws>
            </javadoc>
            <method name="transpose" type="Matrix<F>" line="267"/>
            <javadoc line="267">
                Returns the transpose of this matrix.                
                <return>
                    <code>A'</code>.                    
                </return>
            </javadoc>
            <method name="cofactor" type="F" line="274"/>
            <javadoc line="274">
                Returns the cofactor of an element in this matrix. It is the value
                  obtained by evaluating the determinant formed by the elements not in
                  that particular row or column.                
                <param>
                    i the row index.                    
                </param>
                <param>
                    j the column index.                    
                </param>
                <return>
                    the cofactor of <code>THIS[i,j]</code>.                    
                </return>
                <throws>
                    DimensionException matrix is not square or its dimension
                      is less than 2.                    
                </throws>
            </javadoc>
            <method name="adjoint" type="Matrix<F>" line="287"/>
            <javadoc line="287">
                Returns the adjoint of this matrix. It is obtained by replacing each
                  element in this matrix with its cofactor and applying a + or - sign
                  according (-1)(i+j), and then finding the transpose of the resulting
                  matrix.                
                <return>
                    the adjoint of this matrix.                    
                </return>
                <throws>
                    DimensionException if this matrix is not square or if
                      its dimension is less than 2.                    
                </throws>
            </javadoc>
            <javadoc line="299">
                Indicates if this matrix is square.                
                <return>
                    <code>getNumberOfRows() == getNumberOfColumns()</code>                    
                </return>
            </javadoc>
            <method name="isSquare" type="boolean" line="304"/>
            <javadoc line="308">
                Solves this matrix for the specified vector (returns &lt;code&gt;x&lt;/code&gt;
                  such as &lt;code&gt;this · x = y&lt;/code&gt;).                
                <param>
                    y the vector for which the solution is calculated.                    
                </param>
                <return>
                    <code>x</code> such as <code>this · x = y</code>                    
                </return>
                <throws>
                    DimensionException if that matrix is not square or dimensions 
                      do not match.                    
                </throws>
            </javadoc>
            <method name="solve" type="Vector<F>" line="317">
                <params>
                    <param name="y" type="Vector<F>"/>
                </params>
                <declaration name="M" type="DenseMatrix&lt;F&gt;" line="318"/>
            </method>
            <javadoc line="323">
                Solves this matrix for the specified matrix (returns &lt;code&gt;x&lt;/code&gt;
                  such as &lt;code&gt;this · x = y&lt;/code&gt;).                
                <param>
                    y the matrix for which the solution is calculated.                    
                </param>
                <return>
                    <code>x</code> such as <code>this · x = y</code>                    
                </return>
                <throws>
                    DimensionException if that matrix is not square or dimensions 
                      do not match.                    
                </throws>
            </javadoc>
            <method name="solve" type="Matrix<F>" line="332">
                <params>
                    <param name="y" type="Matrix<F>"/>
                </params>
                <comment line="333">
                    Default implementation.                    
                </comment>
            </method>
            <javadoc line="336">
                Returns this matrix raised at the specified exponent.                
                <param>
                    exp the exponent.                    
                </param>
                <return>
                    <code>this<sup>exp</sup></code>                    
                </return>
                <throws>
                    DimensionException if this matrix is not square.                    
                </throws>
            </javadoc>
            <method name="pow" type="Matrix<F>" line="343">
                <params>
                    <param name="exp" type="int"/>
                </params>
                <comment line="349">
                    Iteration.                    
                </comment>
                <comment line="361">
                    Identity.                    
                </comment>
                <scope line="344">
                    <scope line="346">
                        <declaration name="pow2" type="Matrix&lt;F&gt;" line="347"/>
                        <declaration name="result" type="Matrix&lt;F&gt;" line="348"/>
                        <scope line="349">
                            <scope line="350"/>
                        </scope>
                    </scope>
                    <scope line="357"/>
                </scope>
                <scope line="360"/>
                <scope line="362"/>
            </method>
            <javadoc line="367">
                Returns the trace of this matrix.                
                <return>
                    the sum of the diagonal elements.                    
                </return>
            </javadoc>
            <method name="trace" type="F" line="372">
                <declaration name="sum" type="F" line="373"/>
                <scope line="374"/>
            </method>
            <method name="tensor" type="Matrix<F>" line="380"/>
            <javadoc line="380">
                Returns the linear algebraic matrix tensor product of this matrix
                  and another (Kronecker product). The default implementation returns
                  a {@link DenseMatrix}.                
                <param>
                    that the second matrix.                    
                </param>
                <return>
                    <code>this &otimes; that</code>                    
                </return>
                <see>
                    <a href="http://en.wikipedia.org/wiki/Kronecker_product">
                                  Wikipedia: Kronecker Product</a>                    
                </see>
            </javadoc>
            <method name="vectorization" type="Vector<F>" line="392"/>
            <javadoc line="392">
                Returns the vectorization of this matrix. The vectorization of 
                  a matrix is the column vector obtain by stacking the columns of the
                  matrix on top of one another. The default implementation returns 
                  a {@link DenseVector}.                
                <return>
                    the vectorization of this matrix.                    
                </return>
                <see>
                    <a href="http://en.wikipedia.org/wiki/Vectorization_%28mathematics%29">
                                  Wikipedia: Vectorization.</a>                    
                </see>
            </javadoc>
            <javadoc line="404">
                Returns the text representation of this matrix.                
                <return>
                    the text representation of this matrix.                    
                </return>
            </javadoc>
            <method name="toText" type="Text" line="409">
                <declaration name="m" type="int" line="410"/>
                <declaration name="n" type="int" line="411"/>
                <declaration name="tmp" type="TextBuilder" line="412"/>
                <scope line="414">
                    <scope line="416">
                        <scope line="418"/>
                    </scope>
                    <scope line="423"/>
                </scope>
                <declaration name="txt" type="Text" line="428"/>
            </method>
            <javadoc line="433">
                Returns the text representation of this matrix as a 
                  &lt;code&gt;java.lang.String&lt;/code&gt;.                
                <return>
                    <code>toText().toString()</code>                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="439"/>
            <javadoc line="443">
                Indicates if this matrix can be considered equals to the one 
                  specified using the specified comparator when testing for 
                  element equality. The specified comparator may allow for some 
                  tolerance in the difference between the matrix elements.                
                <param>
                    that the matrix to compare for equality.                    
                </param>
                <param>
                    cmp the comparator to use when testing for element equality.                    
                </param>
                <return>
                    <code>true</code> if this matrix and the specified matrix are
                      both matrices with equal elements according to the specified
                      comparator; <code>false</code> otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="455">
                <params>
                    <param name="that" type="Matrix<F>"/>
                    <param name="cmp" type="Comparator<F>"/>
                </params>
                <declaration name="m" type="int" line="458"/>
                <declaration name="n" type="int" line="459"/>
                <scope line="462">
                    <scope line="463"/>
                </scope>
            </method>
            <javadoc line="471">
                Indicates if this matrix is strictly equal to the object specified.                
                <param>
                    that the object to compare for equality.                    
                </param>
                <return>
                    <code>true</code> if this matrix and the specified object are
                      both matrices with equal elements; <code>false</code> otherwise.                    
                </return>
                <see>
                    #equals(Matrix,Comparator)                    
                </see>
            </javadoc>
            <method name="equals" type="boolean" line="479">
                <params>
                    <param name="that" type="Object"/>
                </params>
                <declaration name="m" type="int" line="484"/>
                <declaration name="n" type="int" line="485"/>
                <declaration name="M" type="Matrix&lt;?&gt;" line="486"/>
                <scope line="489">
                    <scope line="490"/>
                </scope>
            </method>
            <javadoc line="498">
                Returns a hash code value for this matrix.
                  Equals objects have equal hash codes.                
                <return>
                    this matrix hash code value.                    
                </return>
                <see>
                    #equals                    
                </see>
            </javadoc>
            <method name="hashCode" type="int" line="505">
                <declaration name="m" type="int" line="506"/>
                <declaration name="n" type="int" line="507"/>
                <declaration name="code" type="int" line="508"/>
                <scope line="509">
                    <scope line="510"/>
                </scope>
            </method>
            <method name="copy" type="Matrix<F>" line="517"/>
            <javadoc line="517">
                Returns a copy of this matrix {@link javolution.context.AllocatorContext allocated} 
                  by the calling thread (possibly on the stack).                
                <return>
                    an identical and independant copy of this matrix.                    
                </return>
            </javadoc>
        </class>
    </source>