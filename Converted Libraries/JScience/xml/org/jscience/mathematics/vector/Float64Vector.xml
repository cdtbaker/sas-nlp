<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.jscience.mathematics.vector">
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="javolution.context.ArrayFactory"/>
        <import package="javolution.lang.MathLib"/>
        <import package="javolution.xml.XMLFormat"/>
        <import package="javolution.xml.stream.XMLStreamException"/>
        <import package="org.jscience.mathematics.number.Float64"/>
        <import package="org.jscience.mathematics.structure.VectorSpaceNormed"/>
        <class name="Float64Vector" line="10">
            <extends class="Vector">
                <type_params>
                    <type_param name="Float64"/>
                </type_params>
            </extends>
            <implements interface="VectorSpaceNormed">
                <type_params>
                    <type_param name="Vector<Float64>"/>
                    <type_param name="Float64"/>
                </type_params>
            </implements>
            <javadoc line="10">
                &lt;p&gt; This class represents an optimized {@link Vector vector} implementation
                  for 64 bits floating point elements.&lt;/p&gt;                
                <author>
                    <a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a>                    
                </author>
                <version>
                    3.3, January 2, 2007                    
                </version>
            </javadoc>
            <declaration name="XML" type="XMLFormat&lt;Float64Vector&gt;" line="17"/>
            <javadoc line="17">
                Holds the default XML representation. For example:
                  [code]
                  &lt;Float64Vector dimension=&quot;2&quot;&gt;
                  &lt;Float64 value=&quot;1.0&quot; /&gt;
                  &lt;Float64 value=&quot;0.0&quot; /&gt;
                  &lt;/Float64Vector&gt;[/code]                
            </javadoc>
            <anonymous_class line="25">
                <method name="newInstance" type="Float64Vector" line="26">
                    <params>
                        <param name="cls" type="Class<Float64Vector>"/>
                        <param name="xml" type="InputElement"/>
                    </params>
                    <declaration name="dimension" type="int" line="27"/>
                    <declaration name="V" type="Float64Vector" line="28"/>
                </method>
                <method name="read" type="void" line="32">
                    <params>
                        <param name="xml" type="InputElement"/>
                        <param name="V" type="Float64Vector"/>
                    </params>
                    <scope line="33"/>
                </method>
                <method name="write" type="void" line="38">
                    <params>
                        <param name="V" type="Float64Vector"/>
                        <param name="xml" type="OutputElement"/>
                    </params>
                    <scope line="40"/>
                </method>
            </anonymous_class>
            <declaration name="FACTORY" type="ArrayFactory&lt;Float64Vector&gt;" line="46"/>
            <javadoc line="46">
                Holds factory for vectors with variable size arrays.                
            </javadoc>
            <anonymous_class line="49">
                <method name="create" type="Float64Vector" line="50">
                    <params>
                        <param name="capacity" type="int"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="_dimension" type="int" line="55"/>
            <javadoc line="55">
                Holds the dimension.                
            </javadoc>
            <declaration name="_values" type="double[]" line="59"/>
            <javadoc line="59">
                Holds the values.                
            </javadoc>
            <javadoc line="63">
                Creates a vector of specified capacity.                
            </javadoc>
            <method name="Float64Vector" type="constructor" line="66">
                <params>
                    <param name="capacity" type="int"/>
                </params>
            </method>
            <javadoc line="69">
                Returns a new vector holding the specified &lt;code&gt;double&lt;/code&gt; values.                
                <param>
                    values the vector values.                    
                </param>
                <return>
                    the vector having the specified values.                    
                </return>
            </javadoc>
            <method name="valueOf" type="Float64Vector" line="74">
                <params>
                    <param name="values" type="double"/>
                </params>
                <declaration name="n" type="int" line="75"/>
                <declaration name="V" type="Float64Vector" line="76"/>
            </method>
            <javadoc line="81">
                Returns a new vector holding the elements from the specified 
                  collection.                
                <param>
                    elements the collection of floating-points numbers.                    
                </param>
                <return>
                    the vector having the specified elements.                    
                </return>
            </javadoc>
            <method name="valueOf" type="Float64Vector" line="87">
                <params>
                    <param name="elements" type="List<Float64>"/>
                </params>
                <declaration name="n" type="int" line="88"/>
                <declaration name="V" type="Float64Vector" line="89"/>
                <declaration name="iterator" type="Iterator&lt;Float64&gt;" line="91"/>
                <scope line="92"/>
            </method>
            <javadoc line="97">
                Returns a {@link Float64Vector} instance equivalent to the 
                  specified vector.                
                <param>
                    that the vector to convert.                    
                </param>
                <return>
                    <code>that</code> or new equivalent Float64Vector.                    
                </return>
            </javadoc>
            <method name="valueOf" type="Float64Vector" line="103">
                <params>
                    <param name="that" type="Vector<Float64>"/>
                </params>
                <declaration name="n" type="int" line="105"/>
                <declaration name="V" type="Float64Vector" line="106"/>
                <scope line="108"/>
            </method>
            <javadoc line="113">
                Returns the value of a floating point number from this vector (fast).                
                <param>
                    i the floating point number index.                    
                </param>
                <return>
                    the value of the floating point number at <code>i</code>.                    
                </return>
                <throws>
                    IndexOutOfBoundsException <code>(i < 0) || (i >= dimension())</code>                    
                </throws>
            </javadoc>
            <method name="getValue" type="double" line="119">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="123">
                Returns the Euclidian norm of this vector (square root of the 
                  dot product of this vector and itself).                
                <return>
                    <code>sqrt(this Â· this)</code>.                    
                </return>
            </javadoc>
            <method name="norm" type="Float64" line="128"/>
            <javadoc line="131">
                Returns the {@link #norm()} value of this vector.                
                <return>
                    <code>this.norm().doubleValue()</code>.                    
                </return>
            </javadoc>
            <method name="normValue" type="double" line="135">
                <declaration name="normSquared" type="double" line="136"/>
                <scope line="137">
                    <declaration name="values" type="double" line="138"/>
                </scope>
            </method>
            <method name="getDimension" type="int" line="143"/>
            <method name="get" type="Float64" line="146">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <method name="opposite" type="Float64Vector" line="150">
                <declaration name="V" type="Float64Vector" line="151"/>
                <scope line="153"/>
            </method>
            <method name="plus" type="Float64Vector" line="158">
                <params>
                    <param name="that" type="Vector<Float64>"/>
                </params>
                <declaration name="T" type="Float64Vector" line="159"/>
                <declaration name="V" type="Float64Vector" line="161"/>
                <scope line="163"/>
            </method>
            <method name="minus" type="Float64Vector" line="168">
                <params>
                    <param name="that" type="Vector<Float64>"/>
                </params>
                <declaration name="T" type="Float64Vector" line="169"/>
                <declaration name="V" type="Float64Vector" line="171"/>
                <scope line="173"/>
            </method>
            <method name="times" type="Float64Vector" line="178">
                <params>
                    <param name="k" type="Float64"/>
                </params>
                <declaration name="V" type="Float64Vector" line="179"/>
                <declaration name="d" type="double" line="181"/>
                <scope line="182"/>
            </method>
            <javadoc line="187">
                Equivalent to &lt;code&gt;this.times(Float64.valueOf(k))&lt;/code&gt;                
                <param>
                    k the coefficient.                    
                </param>
                <return>
                    <code>this  k</code>                    
                </return>
            </javadoc>
            <method name="times" type="Float64Vector" line="192">
                <params>
                    <param name="k" type="double"/>
                </params>
                <declaration name="V" type="Float64Vector" line="193"/>
                <scope line="195"/>
            </method>
            <method name="times" type="Float64" line="200">
                <params>
                    <param name="that" type="Vector<Float64>"/>
                </params>
                <declaration name="T" type="Float64Vector" line="201"/>
                <declaration name="T_values" type="double[]" line="203"/>
                <declaration name="sum" type="double" line="204"/>
                <scope line="205"/>
            </method>
            <method name="cross" type="Float64Vector" line="210">
                <params>
                    <param name="that" type="Vector<Float64>"/>
                </params>
                <declaration name="T" type="Float64Vector" line="211"/>
                <declaration name="x" type="double" line="213"/>
                <declaration name="y" type="double" line="214"/>
                <declaration name="z" type="double" line="215"/>
            </method>
            <method name="copy" type="Float64Vector" line="218">
                <declaration name="V" type="Float64Vector" line="219"/>
                <scope line="221"/>
            </method>
            <method name="newInstance" type="Float64Vector" line="226">
                <params>
                    <param name="n" type="int"/>
                </params>
                <declaration name="V" type="Float64Vector" line="227"/>
            </method>
            <method name="set" type="void" line="231">
                <params>
                    <param name="i" type="int"/>
                    <param name="v" type="double"/>
                </params>
            </method>
            <declaration name="serialVersionUID" type="long" line="234"/>
        </class>
    </source>