<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.jscience.mathematics.vector">
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="javolution.context.ConcurrentContext"/>
        <import package="javolution.context.ObjectFactory"/>
        <import package="javolution.lang.MathLib"/>
        <import package="javolution.util.FastTable"/>
        <import package="org.jscience.mathematics.structure.Field"/>
        <class name="DenseMatrix" line="9">
            <type_params>
                <type_param name="F"/>
            </type_params>
            <extends class="Matrix">
                <type_params>
                    <type_param name="F"/>
                </type_params>
            </extends>
            <javadoc line="9">
                &lt;p&gt; This class represents a matrix made of {@link DenseVector dense
                  vectors} (as rows). To create a dense matrix made of column vectors the {@link #transpose} method can be used. 
                  For example:[code]
                  DenseVector&lt;Rational&gt; column0 = DenseVector.valueOf(...);
                  DenseVector&lt;Rational&gt; column1 = DenseVector.valueOf(...);
                  DenseMatrix&lt;Rational&gt; M = DenseMatrix.valueOf(column0, column1).transpose();
                  [/code]&lt;/p&gt;
                  &lt;p&gt; As for any concrete {@link org.jscience.mathematics.structure.Structurestructure}, this class is declared &lt;code&gt;final&lt;/code&gt; (otherwise most
                  operations would have to be overridden to return the appropriate type).
                  Specialized dense matrix should sub-class {@link Matrix} directly.
                  For example:[code]
                  // Extension through composition.
                  final class TriangularMatrix &lt;F extends Field&lt;F&gt;&gt; extends Matrix&lt;F&gt; {
                  private DenseMatrix&lt;F&gt; _value; // Possible implementation.
                  ...
                  public TriangularMatrix opposite() { // Returns the right type.
                  return TriangularMatrix.valueOf(_value.opposite());
                  }
                  ...
                  }[/code]
                  &lt;/p&gt;                
                <author>
                    <a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a>                    
                </author>
                <version>
                    3.3, January 2, 2007                    
                </version>
            </javadoc>
            <declaration name="_n" type="int" line="35"/>
            <javadoc line="35">
                Holds the number of columns n.                
            </javadoc>
            <declaration name="_transposed" type="boolean" line="39"/>
            <javadoc line="39">
                Indicates if this matrix is transposed (the rows are then the columns).                
            </javadoc>
            <declaration name="_rows" type="FastTable&lt;DenseVector&lt;F&gt;&gt;" line="43"/>
            <javadoc line="43">
                Holds this matrix rows (or columns when transposed).                
            </javadoc>
            <javadoc line="47">
                Returns a dense matrix from the specified 2-dimensional array.
                  The first dimension being the row and the second being the column.                
                <param>
                    elements this matrix elements.                    
                </param>
                <return>
                    the matrix having the specified elements.                    
                </return>
                <throws>
                    DimensionException if rows have different length.                    
                </throws>
                <see>
                    DenseMatrix                    
                </see>
            </javadoc>
            <method name="valueOf" type="DenseMatrix<F>" line="55">
                <params>
                    <param name="elements" type="F[][]"/>
                </params>
                <declaration name="m" type="int" line="56"/>
                <declaration name="n" type="int" line="57"/>
                <declaration name="M" type="DenseMatrix&lt;F&gt;" line="58"/>
                <scope line="59">
                    <declaration name="row" type="DenseVector&lt;F&gt;" line="60"/>
                </scope>
            </method>
            <javadoc line="66">
                Returns a dense matrix holding the specified row vectors 
                  (column vectors if {@link #transpose transposed}).                
                <param>
                    rows the row vectors.                    
                </param>
                <return>
                    the matrix having the specified rows.                    
                </return>
                <throws>
                    DimensionException if the rows do not have the same dimension.                    
                </throws>
            </javadoc>
            <method name="valueOf" type="DenseMatrix<F>" line="73">
                <params>
                    <param name="rows" type="DenseVector<F>"/>
                </params>
                <declaration name="n" type="int" line="74"/>
                <declaration name="M" type="DenseMatrix&lt;F&gt;" line="75"/>
                <scope line="76">
                    <declaration name="rowi" type="DenseVector&lt;F&gt;" line="77"/>
                </scope>
            </method>
            <javadoc line="83">
                Returns a dense matrix holding the row vectors from the specified 
                  collection (column vectors if {@link #transpose transposed}).                
                <param>
                    rows the list of row vectors.                    
                </param>
                <return>
                    the matrix having the specified rows.                    
                </return>
                <throws>
                    DimensionException if the rows do not have the same dimension.                    
                </throws>
            </javadoc>
            <method name="valueOf" type="DenseMatrix<F>" line="90">
                <params>
                    <param name="rows" type="List<DenseVector<F>>"/>
                </params>
                <declaration name="n" type="int" line="91"/>
                <declaration name="M" type="DenseMatrix&lt;F&gt;" line="92"/>
                <declaration name="iterator" type="Iterator&lt;DenseVector&lt;F&gt;&gt;" line="93"/>
                <scope line="94">
                    <declaration name="rowi" type="DenseVector&lt;F&gt;" line="95"/>
                </scope>
            </method>
            <javadoc line="101">
                Returns a dense matrix equivalent to the specified matrix.                
                <param>
                    that the matrix to convert.                    
                </param>
                <return>
                    <code>that</code> or a dense matrix holding the same elements
                      as the specified matrix.                    
                </return>
            </javadoc>
            <method name="valueOf" type="DenseMatrix<F>" line="107">
                <params>
                    <param name="that" type="Matrix<F>"/>
                </params>
                <declaration name="n" type="int" line="109"/>
                <declaration name="m" type="int" line="110"/>
                <declaration name="M" type="DenseMatrix&lt;F&gt;" line="111"/>
                <scope line="112">
                    <declaration name="rowi" type="DenseVector&lt;F&gt;" line="113"/>
                </scope>
            </method>
            <method name="getNumberOfRows" type="int" line="118"/>
            <method name="getNumberOfColumns" type="int" line="121"/>
            <method name="get" type="F" line="124">
                <params>
                    <param name="i" type="int"/>
                    <param name="j" type="int"/>
                </params>
            </method>
            <method name="getRow" type="DenseVector<F>" line="127">
                <params>
                    <param name="i" type="int"/>
                </params>
                <declaration name="n" type="int" line="129"/>
                <declaration name="m" type="int" line="130"/>
                <declaration name="V" type="DenseVector&lt;F&gt;" line="132"/>
                <scope line="133"/>
            </method>
            <method name="getColumn" type="DenseVector<F>" line="138">
                <params>
                    <param name="j" type="int"/>
                </params>
                <declaration name="m" type="int" line="140"/>
                <declaration name="V" type="DenseVector&lt;F&gt;" line="142"/>
                <scope line="143"/>
            </method>
            <method name="getDiagonal" type="DenseVector<F>" line="148">
                <declaration name="m" type="int" line="149"/>
                <declaration name="n" type="int" line="150"/>
                <declaration name="dimension" type="int" line="151"/>
                <declaration name="V" type="DenseVector&lt;F&gt;" line="152"/>
                <scope line="153"/>
            </method>
            <method name="opposite" type="DenseMatrix<F>" line="158">
                <declaration name="M" type="DenseMatrix&lt;F&gt;" line="159"/>
                <scope line="160"/>
            </method>
            <method name="plus" type="DenseMatrix<F>" line="165">
                <params>
                    <param name="that" type="Matrix<F>"/>
                </params>
                <declaration name="M" type="DenseMatrix&lt;F&gt;" line="167"/>
                <scope line="168"/>
            </method>
            <method name="minus" type="DenseMatrix<F>" line="173">
                <params>
                    <param name="that" type="Matrix<F>"/>
                </params>
            </method>
            <method name="times" type="DenseMatrix<F>" line="176">
                <params>
                    <param name="k" type="F"/>
                </params>
                <declaration name="M" type="DenseMatrix&lt;F&gt;" line="177"/>
                <scope line="178"/>
            </method>
            <method name="times" type="DenseVector<F>" line="183">
                <params>
                    <param name="v" type="Vector<F>"/>
                </params>
                <declaration name="m" type="int" line="185"/>
                <declaration name="V" type="DenseVector&lt;F&gt;" line="186"/>
                <scope line="187"/>
            </method>
            <method name="times" type="DenseMatrix<F>" line="192">
                <params>
                    <param name="that" type="Matrix<F>"/>
                </params>
                <declaration name="n" type="int" line="193"/>
                <declaration name="m" type="int" line="194"/>
                <declaration name="p" type="int" line="195"/>
                <declaration name="M" type="DenseMatrix&lt;F&gt;" line="197"/>
                <declaration name="multiply" type="Multiply&lt;F&gt;" line="199"/>
            </method>
            <class name="Multiply" line="204">
                <type_params>
                    <type_param name="F"/>
                </type_params>
                <implements interface="Runnable"/>
                <declaration name="FACTORY" type="ObjectFactory&lt;Multiply&gt;" line="205"/>
                <anonymous_class line="205">
                    <method name="create" type="Multiply" line="206"/>
                </anonymous_class>
                <declaration name="_left" type="DenseMatrix&lt;F&gt;" line="211"/>
                <declaration name="_right" type="Matrix&lt;F&gt;" line="212"/>
                <declaration name="_rightColumnStart" type="int" line="213"/>
                <declaration name="_rightColumnEnd" type="int" line="214"/>
                <declaration name="_columnsResult" type="FastTable&lt;DenseVector&lt;F&gt;&gt;" line="215"/>
                <method name="valueOf" type="Multiply<F>" line="216">
                    <params>
                        <param name="left" type="DenseMatrix<F>"/>
                        <param name="right" type="Matrix<F>"/>
                        <param name="rightColumnStart" type="int"/>
                        <param name="rightColumnEnd" type="int"/>
                        <param name="columnsResult" type="FastTable<DenseVector<F>>"/>
                    </params>
                    <declaration name="multiply" type="Multiply&lt;F&gt;" line="217"/>
                </method>
                <method name="recycle" type="void" line="225">
                    <params>
                        <param name="multiply" type="Multiply<F>"/>
                    </params>
                </method>
                <method name="run" type="void" line="231">
                    <scope line="232">
                        <declaration name="rows" type="FastTable&lt;DenseVector&lt;F&gt;&gt;" line="233"/>
                        <declaration name="m" type="int" line="234"/>
                        <scope line="235">
                            <declaration name="thatColj" type="Vector&lt;F&gt;" line="236"/>
                            <declaration name="column" type="DenseVector&lt;F&gt;" line="237"/>
                            <scope line="239"/>
                        </scope>
                    </scope>
                    <scope line="244">
                        <declaration name="halfIndex" type="int" line="245"/>
                        <declaration name="firstHalf" type="Multiply&lt;F&gt;" line="246"/>
                        <declaration name="secondHalf" type="Multiply&lt;F&gt;" line="247"/>
                        <scope line="249"/>
                        <scope line="253"/>
                    </scope>
                </method>
            </class>
            <method name="getRows" type="FastTable<DenseVector<F>>" line="261">
                <declaration name="rows" type="FastTable&lt;DenseVector&lt;F&gt;&gt;" line="263"/>
                <scope line="264"/>
            </method>
            <method name="inverse" type="DenseMatrix<F>" line="269"/>
            <method name="determinant" type="F" line="273"/>
            <method name="transpose" type="DenseMatrix<F>" line="276">
                <declaration name="M" type="DenseMatrix&lt;F&gt;" line="277"/>
            </method>
            <method name="cofactor" type="F" line="281">
                <params>
                    <param name="i" type="int"/>
                    <param name="j" type="int"/>
                </params>
                <scope line="282">
                    <declaration name="k" type="int" line="283"/>
                </scope>
                <declaration name="m" type="int" line="287"/>
                <declaration name="M" type="DenseMatrix&lt;F&gt;" line="288"/>
                <scope line="289">
                    <declaration name="row" type="DenseVector&lt;F&gt;" line="291"/>
                    <declaration name="V" type="DenseVector&lt;F&gt;" line="292"/>
                    <scope line="294"/>
                </scope>
            </method>
            <method name="adjoint" type="DenseMatrix<F>" line="301">
                <declaration name="M" type="DenseMatrix&lt;F&gt;" line="302"/>
                <declaration name="m" type="int" line="303"/>
                <scope line="304">
                    <declaration name="row" type="DenseVector&lt;F&gt;" line="305"/>
                    <scope line="307">
                        <declaration name="cofactor" type="F" line="308"/>
                    </scope>
                </scope>
            </method>
            <method name="tensor" type="Matrix<F>" line="314">
                <params>
                    <param name="that" type="Matrix<F>"/>
                </params>
                <declaration name="thism" type="int" line="315"/>
                <declaration name="thisn" type="int" line="316"/>
                <declaration name="thatm" type="int" line="317"/>
                <declaration name="thatn" type="int" line="318"/>
                <declaration name="n" type="int" line="319"/>
                <declaration name="m" type="int" line="320"/>
                <declaration name="M" type="DenseMatrix&lt;F&gt;" line="321"/>
                <scope line="322">
                    <declaration name="i_rem_thatm" type="int" line="323"/>
                    <declaration name="i_div_thatm" type="int" line="324"/>
                    <declaration name="row" type="DenseVector&lt;F&gt;" line="325"/>
                    <scope line="327">
                        <declaration name="a" type="F" line="328"/>
                        <scope line="329"/>
                    </scope>
                </scope>
            </method>
            <method name="vectorization" type="Vector<F>" line="336">
                <declaration name="V" type="DenseVector&lt;F&gt;" line="337"/>
                <scope line="338">
                    <declaration name="column" type="Vector&lt;F&gt;" line="339"/>
                    <scope line="340"/>
                </scope>
            </method>
            <method name="copy" type="DenseMatrix<F>" line="346">
                <declaration name="M" type="DenseMatrix&lt;F&gt;" line="347"/>
                <scope line="348"/>
            </method>
            <method name="set" type="void" line="353">
                <params>
                    <param name="i" type="int"/>
                    <param name="j" type="int"/>
                    <param name="e" type="F"/>
                </params>
                <scope line="354"/>
                <scope line="357"/>
            </method>
            <method name="newInstance" type="DenseMatrix<F>" line="361">
                <params>
                    <param name="n" type="int"/>
                    <param name="transposed" type="boolean"/>
                </params>
                <declaration name="M" type="DenseMatrix&lt;F&gt;" line="362"/>
            </method>
            <declaration name="FACTORY" type="ObjectFactory&lt;DenseMatrix&gt;" line="367"/>
            <anonymous_class line="367">
                <method name="create" type="DenseMatrix" line="368"/>
                <method name="cleanup" type="void" line="371">
                    <params>
                        <param name="matrix" type="DenseMatrix"/>
                    </params>
                </method>
            </anonymous_class>
            <method name="DenseMatrix" type="constructor" line="376"/>
            <declaration name="serialVersionUID" type="long" line="378"/>
        </class>
    </source>