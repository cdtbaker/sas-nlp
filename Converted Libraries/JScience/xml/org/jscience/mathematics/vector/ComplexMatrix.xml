<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.jscience.mathematics.vector">
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="javolution.context.ConcurrentContext"/>
        <import package="javolution.context.ObjectFactory"/>
        <import package="javolution.lang.MathLib"/>
        <import package="javolution.util.FastTable"/>
        <import package="org.jscience.mathematics.number.Complex"/>
        <class name="ComplexMatrix" line="9">
            <extends class="Matrix">
                <type_params>
                    <type_param name="Complex"/>
                </type_params>
            </extends>
            <javadoc line="9">
                &lt;p&gt; This class represents an optimized {@link Matrix matrix} implementation
                  for {@link Complex complex} numbers.&lt;/p&gt;
                  &lt;p&gt; Instances of this class can be created from {@link ComplexVector}, 
                  either as rows or columns if the matrix is transposed. For example:[code]
                  ComplexVector&lt;Rational&gt; column0 = ComplexVector.valueOf(...);
                  ComplexVector&lt;Rational&gt; column1 = ComplexVector.valueOf(...);
                  ComplexMatrix&lt;Rational&gt; M = ComplexMatrix.valueOf(column0, column1).transpose();
                  [/code]&lt;/p&gt;                
                <author>
                    <a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a>                    
                </author>
                <version>
                    3.3, January 2, 2007                    
                </version>
            </javadoc>
            <declaration name="_n" type="int" line="22"/>
            <javadoc line="22">
                Holds the number of columns n.                
            </javadoc>
            <declaration name="_transposed" type="boolean" line="26"/>
            <javadoc line="26">
                Indicates if this matrix is transposed (the rows are then the columns).                
            </javadoc>
            <declaration name="_rows" type="FastTable&lt;ComplexVector&gt;" line="30"/>
            <javadoc line="30">
                Holds this matrix rows (or columns when transposed).                
            </javadoc>
            <javadoc line="34">
                Returns a complex matrix from the specified 2-dimensional array.
                  The first dimension being the row and the second being the column.                
                <param>
                    elements this matrix elements.                    
                </param>
                <return>
                    the matrix having the specified elements.                    
                </return>
                <throws>
                    DimensionException if rows have different length.                    
                </throws>
                <see>
                    ComplexVector                    
                </see>
            </javadoc>
            <method name="valueOf" type="ComplexMatrix" line="42">
                <params>
                    <param name="elements" type="Complex[][]"/>
                </params>
                <declaration name="m" type="int" line="43"/>
                <declaration name="n" type="int" line="44"/>
                <declaration name="M" type="ComplexMatrix" line="45"/>
                <scope line="46">
                    <declaration name="row" type="ComplexVector" line="47"/>
                </scope>
            </method>
            <javadoc line="53">
                Returns a complex matrix holding the specified row vectors 
                  (column vectors if {@link #transpose transposed}).                
                <param>
                    rows the row vectors.                    
                </param>
                <return>
                    the matrix having the specified rows.                    
                </return>
                <throws>
                    DimensionException if the rows do not have the same dimension.                    
                </throws>
            </javadoc>
            <method name="valueOf" type="ComplexMatrix" line="60">
                <params>
                    <param name="rows" type="ComplexVector"/>
                </params>
                <declaration name="n" type="int" line="61"/>
                <declaration name="M" type="ComplexMatrix" line="62"/>
                <scope line="63">
                    <declaration name="rowi" type="ComplexVector" line="64"/>
                </scope>
            </method>
            <javadoc line="70">
                Returns a complex matrix holding the row vectors from the specified 
                  collection (column vectors if {@link #transpose transposed}).                
                <param>
                    rows the list of row vectors.                    
                </param>
                <return>
                    the matrix having the specified rows.                    
                </return>
                <throws>
                    DimensionException if the rows do not have the same dimension.                    
                </throws>
            </javadoc>
            <method name="valueOf" type="ComplexMatrix" line="77">
                <params>
                    <param name="rows" type="List<ComplexVector>"/>
                </params>
                <declaration name="n" type="int" line="78"/>
                <declaration name="M" type="ComplexMatrix" line="79"/>
                <declaration name="iterator" type="Iterator&lt;ComplexVector&gt;" line="80"/>
                <scope line="81">
                    <declaration name="rowi" type="ComplexVector" line="82"/>
                </scope>
            </method>
            <javadoc line="88">
                Returns a complex matrix equivalent to the specified matrix.                
                <param>
                    that the matrix to convert.                    
                </param>
                <return>
                    <code>that</code> or a complex matrix holding the same elements
                      as the specified matrix.                    
                </return>
            </javadoc>
            <method name="valueOf" type="ComplexMatrix" line="94">
                <params>
                    <param name="that" type="Matrix<Complex>"/>
                </params>
                <declaration name="n" type="int" line="96"/>
                <declaration name="m" type="int" line="97"/>
                <declaration name="M" type="ComplexMatrix" line="98"/>
                <scope line="99">
                    <declaration name="rowi" type="ComplexVector" line="100"/>
                </scope>
            </method>
            <method name="getNumberOfRows" type="int" line="105"/>
            <method name="getNumberOfColumns" type="int" line="108"/>
            <method name="get" type="Complex" line="111">
                <params>
                    <param name="i" type="int"/>
                    <param name="j" type="int"/>
                </params>
            </method>
            <method name="getRow" type="ComplexVector" line="114">
                <params>
                    <param name="i" type="int"/>
                </params>
                <declaration name="n" type="int" line="116"/>
                <declaration name="m" type="int" line="117"/>
                <declaration name="V" type="ComplexVector" line="119"/>
                <scope line="120"/>
            </method>
            <method name="getColumn" type="ComplexVector" line="125">
                <params>
                    <param name="j" type="int"/>
                </params>
                <declaration name="m" type="int" line="127"/>
                <declaration name="V" type="ComplexVector" line="129"/>
                <scope line="130"/>
            </method>
            <method name="getDiagonal" type="ComplexVector" line="135">
                <declaration name="m" type="int" line="136"/>
                <declaration name="n" type="int" line="137"/>
                <declaration name="dimension" type="int" line="138"/>
                <declaration name="V" type="ComplexVector" line="139"/>
                <scope line="140"/>
            </method>
            <method name="opposite" type="ComplexMatrix" line="145">
                <declaration name="M" type="ComplexMatrix" line="146"/>
                <scope line="147"/>
            </method>
            <method name="plus" type="ComplexMatrix" line="152">
                <params>
                    <param name="that" type="Matrix<Complex>"/>
                </params>
                <declaration name="M" type="ComplexMatrix" line="154"/>
                <scope line="155"/>
            </method>
            <method name="minus" type="ComplexMatrix" line="160">
                <params>
                    <param name="that" type="Matrix<Complex>"/>
                </params>
            </method>
            <method name="times" type="ComplexMatrix" line="163">
                <params>
                    <param name="k" type="Complex"/>
                </params>
                <declaration name="M" type="ComplexMatrix" line="164"/>
                <scope line="165"/>
            </method>
            <method name="times" type="ComplexVector" line="170">
                <params>
                    <param name="v" type="Vector<Complex>"/>
                </params>
                <declaration name="m" type="int" line="172"/>
                <declaration name="V" type="ComplexVector" line="173"/>
                <scope line="174"/>
            </method>
            <method name="times" type="ComplexMatrix" line="179">
                <params>
                    <param name="that" type="Matrix<Complex>"/>
                </params>
                <declaration name="n" type="int" line="180"/>
                <declaration name="m" type="int" line="181"/>
                <declaration name="p" type="int" line="182"/>
                <declaration name="M" type="ComplexMatrix" line="184"/>
                <declaration name="multiply" type="Multiply" line="186"/>
            </method>
            <class name="Multiply" line="191">
                <implements interface="Runnable"/>
                <declaration name="FACTORY" type="ObjectFactory&lt;Multiply&gt;" line="192"/>
                <anonymous_class line="192">
                    <method name="create" type="Multiply" line="193"/>
                </anonymous_class>
                <declaration name="_left" type="ComplexMatrix" line="198"/>
                <declaration name="_right" type="Matrix&lt;Complex&gt;" line="199"/>
                <declaration name="_rightColumnStart" type="int" line="200"/>
                <declaration name="_rightColumnEnd" type="int" line="201"/>
                <declaration name="_columnsResult" type="FastTable&lt;ComplexVector&gt;" line="202"/>
                <method name="valueOf" type="Multiply" line="203">
                    <params>
                        <param name="left" type="ComplexMatrix"/>
                        <param name="right" type="Matrix<Complex>"/>
                        <param name="rightColumnStart" type="int"/>
                        <param name="rightColumnEnd" type="int"/>
                        <param name="columnsResult" type="FastTable<ComplexVector>"/>
                    </params>
                    <declaration name="multiply" type="Multiply" line="204"/>
                </method>
                <method name="recycle" type="void" line="212">
                    <params>
                        <param name="multiply" type="Multiply"/>
                    </params>
                </method>
                <method name="run" type="void" line="218">
                    <scope line="219">
                        <declaration name="rows" type="FastTable&lt;ComplexVector&gt;" line="220"/>
                        <declaration name="m" type="int" line="221"/>
                        <scope line="222">
                            <declaration name="thatColj" type="Vector&lt;Complex&gt;" line="223"/>
                            <declaration name="column" type="ComplexVector" line="224"/>
                            <scope line="226"/>
                        </scope>
                    </scope>
                    <scope line="231">
                        <declaration name="halfIndex" type="int" line="232"/>
                        <declaration name="firstHalf" type="Multiply" line="233"/>
                        <declaration name="secondHalf" type="Multiply" line="234"/>
                        <scope line="236"/>
                        <scope line="240"/>
                    </scope>
                </method>
            </class>
            <method name="getRows" type="FastTable<ComplexVector>" line="248">
                <declaration name="rows" type="FastTable&lt;ComplexVector&gt;" line="250"/>
                <scope line="251"/>
            </method>
            <method name="inverse" type="ComplexMatrix" line="256"/>
            <method name="determinant" type="Complex" line="260"/>
            <method name="transpose" type="ComplexMatrix" line="263">
                <declaration name="M" type="ComplexMatrix" line="264"/>
            </method>
            <method name="cofactor" type="Complex" line="268">
                <params>
                    <param name="i" type="int"/>
                    <param name="j" type="int"/>
                </params>
                <scope line="269">
                    <declaration name="k" type="int" line="270"/>
                </scope>
                <declaration name="m" type="int" line="274"/>
                <declaration name="M" type="ComplexMatrix" line="275"/>
                <scope line="276">
                    <declaration name="row" type="ComplexVector" line="278"/>
                    <declaration name="V" type="ComplexVector" line="279"/>
                    <scope line="281"/>
                </scope>
            </method>
            <method name="adjoint" type="ComplexMatrix" line="288">
                <declaration name="M" type="ComplexMatrix" line="289"/>
                <declaration name="m" type="int" line="290"/>
                <scope line="291">
                    <declaration name="row" type="ComplexVector" line="292"/>
                    <scope line="294">
                        <declaration name="cofactor" type="Complex" line="295"/>
                    </scope>
                </scope>
            </method>
            <method name="tensor" type="ComplexMatrix" line="301">
                <params>
                    <param name="that" type="Matrix<Complex>"/>
                </params>
            </method>
            <method name="vectorization" type="ComplexVector" line="304"/>
            <method name="copy" type="ComplexMatrix" line="307">
                <declaration name="M" type="ComplexMatrix" line="308"/>
                <scope line="309"/>
            </method>
            <method name="newInstance" type="ComplexMatrix" line="314">
                <params>
                    <param name="n" type="int"/>
                    <param name="transposed" type="boolean"/>
                </params>
                <declaration name="M" type="ComplexMatrix" line="315"/>
            </method>
            <declaration name="FACTORY" type="ObjectFactory&lt;ComplexMatrix&gt;" line="321"/>
            <anonymous_class line="321">
                <method name="create" type="ComplexMatrix" line="322"/>
            </anonymous_class>
            <method name="ComplexMatrix" type="constructor" line="327"/>
            <declaration name="serialVersionUID" type="long" line="329"/>
        </class>
    </source>