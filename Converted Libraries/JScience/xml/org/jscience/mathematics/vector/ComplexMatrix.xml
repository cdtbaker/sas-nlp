<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.jscience.mathematics.vector">
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="javolution.context.ConcurrentContext"/>
        <import package="javolution.context.ObjectFactory"/>
        <import package="javolution.lang.MathLib"/>
        <import package="javolution.util.FastTable"/>
        <import package="org.jscience.mathematics.number.Complex"/>
        <class name="ComplexMatrix" line="21">
            <extends class="Matrix">
                <type_params>
                    <type_param name="Complex"/>
                </type_params>
            </extends>
            <comment line="258">
                Logic to multiply two matrices.                
            </comment>
            <comment line="416">
                /////////////////////                
            </comment>
            <comment line="417">
                Factory creation. //                
            </comment>
            <comment line="418">
                /////////////////////                
            </comment>
            <javadoc line="21">
                &lt;p&gt; This class represents an optimized {@link Matrix matrix} implementation
                  for {@link Complex complex} numbers.&lt;/p&gt;
                  &lt;p&gt; Instances of this class can be created from {@link ComplexVector}, 
                  either as rows or columns if the matrix is transposed. For example:[code]
                  ComplexVector&lt;Rational&gt; column0 = ComplexVector.valueOf(...);
                  ComplexVector&lt;Rational&gt; column1 = ComplexVector.valueOf(...);
                  ComplexMatrix&lt;Rational&gt; M = ComplexMatrix.valueOf(column0, column1).transpose();
                  [/code]&lt;/p&gt;                
                <author>
                    <a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a>                    
                </author>
                <version>
                    3.3, January 2, 2007                    
                </version>
            </javadoc>
            <declaration name="_n" type="int" line="37"/>
            <javadoc line="37">
                Holds the number of columns n.                
            </javadoc>
            <declaration name="_transposed" type="boolean" line="42"/>
            <javadoc line="42">
                Indicates if this matrix is transposed (the rows are then the columns).                
            </javadoc>
            <declaration name="_rows" type="FastTable&lt;ComplexVector&gt;" line="47"/>
            <javadoc line="47">
                Holds this matrix rows (or columns when transposed).                
            </javadoc>
            <javadoc line="52">
                Returns a complex matrix from the specified 2-dimensional array.
                  The first dimension being the row and the second being the column.                
                <param>
                    elements this matrix elements.                    
                </param>
                <return>
                    the matrix having the specified elements.                    
                </return>
                <throws>
                    DimensionException if rows have different length.                    
                </throws>
                <see>
                    ComplexVector                    
                </see>
            </javadoc>
            <method name="valueOf" type="ComplexMatrix" line="61">
                <params>
                    <param name="elements" type="Complex[][]"/>
                </params>
                <declaration name="m" type="int" line="62"/>
                <declaration name="n" type="int" line="63"/>
                <declaration name="M" type="ComplexMatrix" line="64"/>
                <scope line="65">
                    <declaration name="row" type="ComplexVector" line="66"/>
                </scope>
            </method>
            <javadoc line="74">
                Returns a complex matrix holding the specified row vectors 
                  (column vectors if {@link #transpose transposed}).                
                <param>
                    rows the row vectors.                    
                </param>
                <return>
                    the matrix having the specified rows.                    
                </return>
                <throws>
                    DimensionException if the rows do not have the same dimension.                    
                </throws>
            </javadoc>
            <method name="valueOf" type="ComplexMatrix" line="82">
                <params>
                    <param name="rows" type="ComplexVector"/>
                </params>
                <declaration name="n" type="int" line="83"/>
                <declaration name="M" type="ComplexMatrix" line="84"/>
                <scope line="85">
                    <declaration name="rowi" type="ComplexVector" line="86"/>
                </scope>
            </method>
            <javadoc line="95">
                Returns a complex matrix holding the row vectors from the specified 
                  collection (column vectors if {@link #transpose transposed}).                
                <param>
                    rows the list of row vectors.                    
                </param>
                <return>
                    the matrix having the specified rows.                    
                </return>
                <throws>
                    DimensionException if the rows do not have the same dimension.                    
                </throws>
            </javadoc>
            <method name="valueOf" type="ComplexMatrix" line="103">
                <params>
                    <param name="rows" type="List<ComplexVector>"/>
                </params>
                <declaration name="n" type="int" line="104"/>
                <declaration name="M" type="ComplexMatrix" line="105"/>
                <declaration name="iterator" type="Iterator&lt;ComplexVector&gt;" line="106"/>
                <scope line="107">
                    <declaration name="rowi" type="ComplexVector" line="108"/>
                </scope>
            </method>
            <javadoc line="117">
                Returns a complex matrix equivalent to the specified matrix.                
                <param>
                    that the matrix to convert.                    
                </param>
                <return>
                    <code>that</code> or a complex matrix holding the same elements
                      as the specified matrix.                    
                </return>
            </javadoc>
            <method name="valueOf" type="ComplexMatrix" line="124">
                <params>
                    <param name="that" type="Matrix<Complex>"/>
                </params>
                <declaration name="n" type="int" line="127"/>
                <declaration name="m" type="int" line="128"/>
                <declaration name="M" type="ComplexMatrix" line="129"/>
                <scope line="130">
                    <declaration name="rowi" type="ComplexVector" line="131"/>
                </scope>
            </method>
            <method name="getNumberOfRows" type="int" line="138"/>
            <method name="getNumberOfColumns" type="int" line="143"/>
            <method name="get" type="Complex" line="148">
                <params>
                    <param name="i" type="int"/>
                    <param name="j" type="int"/>
                </params>
            </method>
            <method name="getRow" type="ComplexVector" line="153">
                <params>
                    <param name="i" type="int"/>
                </params>
                <comment line="156">
                    Else transposed.                    
                </comment>
                <declaration name="n" type="int" line="157"/>
                <declaration name="m" type="int" line="158"/>
                <declaration name="V" type="ComplexVector" line="161"/>
                <scope line="162"/>
            </method>
            <method name="getColumn" type="ComplexVector" line="169">
                <params>
                    <param name="j" type="int"/>
                </params>
                <declaration name="m" type="int" line="172"/>
                <declaration name="V" type="ComplexVector" line="175"/>
                <scope line="176"/>
            </method>
            <method name="getDiagonal" type="ComplexVector" line="183">
                <declaration name="m" type="int" line="184"/>
                <declaration name="n" type="int" line="185"/>
                <declaration name="dimension" type="int" line="186"/>
                <declaration name="V" type="ComplexVector" line="187"/>
                <scope line="188"/>
            </method>
            <method name="opposite" type="ComplexMatrix" line="195">
                <declaration name="M" type="ComplexMatrix" line="196"/>
                <scope line="197"/>
            </method>
            <method name="plus" type="ComplexMatrix" line="204">
                <params>
                    <param name="that" type="Matrix<Complex>"/>
                </params>
                <declaration name="M" type="ComplexMatrix" line="207"/>
                <scope line="208"/>
            </method>
            <method name="minus" type="ComplexMatrix" line="216">
                <params>
                    <param name="that" type="Matrix<Complex>"/>
                </params>
                <comment line="216">
                    Returns more specialized type.                    
                </comment>
            </method>
            <method name="times" type="ComplexMatrix" line="221">
                <params>
                    <param name="k" type="Complex"/>
                </params>
                <declaration name="M" type="ComplexMatrix" line="222"/>
                <scope line="223"/>
            </method>
            <method name="times" type="ComplexVector" line="230">
                <params>
                    <param name="v" type="Vector<Complex>"/>
                </params>
                <declaration name="m" type="int" line="233"/>
                <declaration name="V" type="ComplexVector" line="234"/>
                <scope line="235"/>
            </method>
            <method name="times" type="ComplexMatrix" line="242">
                <params>
                    <param name="that" type="Matrix<Complex>"/>
                </params>
                <comment line="248">
                    Creates a mxp matrix in transposed form (p columns vectors of size m)                    
                </comment>
                <comment line="249">
                    Transposed.                    
                </comment>
                <declaration name="n" type="int" line="243"/>
                <declaration name="m" type="int" line="244"/>
                <declaration name="p" type="int" line="245"/>
                <declaration name="M" type="ComplexMatrix" line="249"/>
                <declaration name="multiply" type="Multiply" line="251"/>
            </method>
            <class name="Multiply" line="258">
                <implements interface="Runnable"/>
                <declaration name="FACTORY" type="ObjectFactory&lt;Multiply&gt;" line="259"/>
                <anonymous_class line="259">
                    <method name="create" type="Multiply" line="262"/>
                </anonymous_class>
                <declaration name="_left" type="ComplexMatrix" line="267"/>
                <declaration name="_right" type="Matrix&lt;Complex&gt;" line="269"/>
                <declaration name="_rightColumnStart" type="int" line="271"/>
                <declaration name="_rightColumnEnd" type="int" line="273"/>
                <declaration name="_columnsResult" type="FastTable&lt;ComplexVector&gt;" line="275"/>
                <method name="valueOf" type="Multiply" line="279">
                    <params>
                        <param name="left" type="ComplexMatrix"/>
                        <param name="right" type="Matrix<Complex>"/>
                        <param name="rightColumnStart" type="int"/>
                        <param name="rightColumnEnd" type="int"/>
                        <param name="columnsResult" type="FastTable<ComplexVector>"/>
                    </params>
                    <declaration name="multiply" type="Multiply" line="280"/>
                </method>
                <method name="recycle" type="void" line="289">
                    <params>
                        <param name="multiply" type="Multiply"/>
                    </params>
                </method>
                <method name="run" type="void" line="296">
                    <comment line="297">
                        Direct calculation.                        
                    </comment>
                    <comment line="308">
                        Concurrent/Recursive calculation.                        
                    </comment>
                    <scope line="297">
                        <declaration name="rows" type="FastTable&lt;ComplexVector&gt;" line="298"/>
                        <declaration name="m" type="int" line="299"/>
                        <scope line="300">
                            <declaration name="thatColj" type="Vector&lt;Complex&gt;" line="301"/>
                            <declaration name="column" type="ComplexVector" line="302"/>
                            <scope line="304"/>
                        </scope>
                    </scope>
                    <scope line="308">
                        <declaration name="halfIndex" type="int" line="309"/>
                        <declaration name="firstHalf" type="Multiply" line="310"/>
                        <declaration name="secondHalf" type="Multiply" line="312"/>
                        <scope line="315"/>
                        <scope line="318"/>
                    </scope>
                </method>
            </class>
            <method name="getRows" type="FastTable<ComplexVector>" line="327">
                <declaration name="rows" type="FastTable&lt;ComplexVector&gt;" line="330"/>
                <scope line="331"/>
            </method>
            <method name="inverse" type="ComplexMatrix" line="338"/>
            <method name="determinant" type="Complex" line="345"/>
            <method name="transpose" type="ComplexMatrix" line="350">
                <declaration name="M" type="ComplexMatrix" line="351"/>
            </method>
            <method name="cofactor" type="Complex" line="357">
                <params>
                    <param name="i" type="int"/>
                    <param name="j" type="int"/>
                </params>
                <comment line="361">
                    Swaps i,j                    
                </comment>
                <scope line="358">
                    <declaration name="k" type="int" line="359"/>
                </scope>
                <declaration name="m" type="int" line="363"/>
                <declaration name="M" type="ComplexMatrix" line="364"/>
                <scope line="365">
                    <declaration name="row" type="ComplexVector" line="368"/>
                    <declaration name="V" type="ComplexVector" line="369"/>
                    <scope line="371"/>
                </scope>
            </method>
            <method name="adjoint" type="ComplexMatrix" line="381">
                <declaration name="M" type="ComplexMatrix" line="382"/>
                <declaration name="m" type="int" line="383"/>
                <scope line="384">
                    <declaration name="row" type="ComplexVector" line="385"/>
                    <scope line="387">
                        <declaration name="cofactor" type="Complex" line="388"/>
                    </scope>
                </scope>
            </method>
            <method name="tensor" type="ComplexMatrix" line="397">
                <params>
                    <param name="that" type="Matrix<Complex>"/>
                </params>
            </method>
            <method name="vectorization" type="ComplexVector" line="402"/>
            <method name="copy" type="ComplexMatrix" line="407">
                <declaration name="M" type="ComplexMatrix" line="408"/>
                <scope line="409"/>
            </method>
            <method name="newInstance" type="ComplexMatrix" line="419">
                <params>
                    <param name="n" type="int"/>
                    <param name="transposed" type="boolean"/>
                </params>
                <declaration name="M" type="ComplexMatrix" line="420"/>
            </method>
            <declaration name="FACTORY" type="ObjectFactory&lt;ComplexMatrix&gt;" line="427"/>
            <anonymous_class line="427">
                <method name="create" type="ComplexMatrix" line="429"/>
            </anonymous_class>
            <method name="ComplexMatrix" type="constructor" line="434"/>
            <declaration name="serialVersionUID" type="long" line="437"/>
        </class>
    </source>