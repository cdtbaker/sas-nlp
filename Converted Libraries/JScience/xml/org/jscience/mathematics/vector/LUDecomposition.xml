<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.jscience.mathematics.vector">
        <import package="java.util.Comparator"/>
        <import package="org.jscience.mathematics.structure.Field"/>
        <import package="org.jscience.mathematics.number.Number"/>
        <import package="javolution.context.LocalContext"/>
        <import package="javolution.context.ObjectFactory"/>
        <import package="javolution.util.FastTable"/>
        <import package="javolution.util.Index"/>
        <class name="LUDecomposition" line="9">
            <type_params>
                <type_param name="F"/>
            </type_params>
            <javadoc line="9">
                &lt;p&gt; This class represents the decomposition of a {@link Matrix matrix} 
                  &lt;code&gt;A&lt;/code&gt; into a product of a {@link #getLower lower} 
                  and {@link #getUpper upper} triangular matrices, &lt;code&gt;L&lt;/code&gt;
                  and &lt;code&gt;U&lt;/code&gt; respectively, such as &lt;code&gt;A = P·L·U&lt;code&gt; with 
                  &lt;code&gt;P&lt;code&gt; a {@link #getPermutation permutation} matrix.&lt;/p&gt;
                  &lt;p&gt; This decomposition&lt;/a&gt; is typically used to resolve linear systems
                  of equations (Gaussian elimination) or to calculate the determinant
                  of a square {@link Matrix} (&lt;code&gt;O(m³)&lt;/code&gt;).&lt;/p&gt;
                  &lt;p&gt; Numerical stability is guaranteed through pivoting if the{@link Field} elements are {@link Number numbers}For others elements types, numerical stability can be ensured by setting
                  the {@link javolution.context.LocalContext context-local} pivot 
                  comparator (see {@link #setPivotComparator}).&lt;/p&gt;
                  &lt;p&gt; Pivoting can be disabled by setting the {@link #setPivotComparator 
                  pivot comparator} to &lt;code&gt;null&lt;/code&gt; ({@link #getPermutation P} 
                  is then the matrix identity).&lt;/p&gt;                
                <author>
                    <a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a>                    
                </author>
                <version>
                    3.3, January 2, 2007                    
                </version>
                <see>
                    <a href="http://en.wikipedia.org/wiki/LU_decomposition">
                           Wikipedia: LU decomposition</a>                    
                </see>
            </javadoc>
            <declaration name="NUMERIC_COMPARATOR" type="Comparator&lt;Field&gt;" line="30"/>
            <javadoc line="30">
                Holds the default comparator for pivoting.                
            </javadoc>
            <anonymous_class line="33">
                <method name="compare" type="int" line="34">
                    <params>
                        <param name="left" type="Field"/>
                        <param name="right" type="Field"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="PIVOT_COMPARATOR" type="LocalContext.Reference&lt;Comparator&lt;Field&gt;&gt;" line="42"/>
            <javadoc line="42">
                Holds the local comparator.                
            </javadoc>
            <declaration name="_n" type="int" line="46"/>
            <javadoc line="46">
                Holds the dimension of the square matrix source.                
            </javadoc>
            <declaration name="_pivots" type="FastTable&lt;Index&gt;" line="50"/>
            <javadoc line="50">
                Holds the pivots indexes.                
            </javadoc>
            <declaration name="_LU" type="DenseMatrix&lt;F&gt;" line="54"/>
            <javadoc line="54">
                Holds the LU elements.                
            </javadoc>
            <declaration name="_permutationCount" type="int" line="58"/>
            <javadoc line="58">
                Holds the number of permutation performed.                
            </javadoc>
            <javadoc line="62">
                Returns the lower/upper decomposition of the specified matrix.                
                <param>
                    source the matrix for which the decomposition is calculated.                    
                </param>
                <return>
                    the lower/upper decomposition of the specified matrix.                    
                </return>
                <throws>
                    DimensionException if the specified matrix is not square.                    
                </throws>
            </javadoc>
            <method name="valueOf" type="LUDecomposition<F>" line="68">
                <params>
                    <param name="source" type="Matrix<F>"/>
                </params>
                <declaration name="dimension" type="int" line="70"/>
                <declaration name="lu" type="LUDecomposition" line="71"/>
            </method>
            <javadoc line="77">
                Constructs the LU decomposition of the specified matrix.
                  We make the choise of Lii = ONE (diagonal elements of the
                  lower triangular matrix are multiplicative identities).                
                <param>
                    source the matrix to decompose.                    
                </param>
                <throws>
                    MatrixException if the matrix source is not square.                    
                </throws>
            </javadoc>
            <method name="construct" type="void" line="84">
                <params>
                    <param name="source" type="Matrix<F>"/>
                </params>
                <scope line="87"/>
                <declaration name="cmp" type="Comparator&lt;Field&gt;" line="90"/>
                <declaration name="n" type="int" line="91"/>
                <scope line="92">
                    <scope line="93">
                        <declaration name="pivot" type="int" line="94"/>
                        <scope line="95">
                            <scope line="96"/>
                        </scope>
                        <scope line="100">
                            <scope line="101">
                                <declaration name="tmp" type="F" line="102"/>
                            </scope>
                            <declaration name="j" type="int" line="106"/>
                        </scope>
                    </scope>
                    <declaration name="lukkInv" type="F" line="112"/>
                    <scope line="113">
                        <scope line="115"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="121">
                Sets the {@link javolution.context.LocalContext local} comparator used 
                  for pivoting or &lt;code&gt;null&lt;/code&gt; to disable pivoting.                
                <param>
                    cmp the comparator for pivoting or <code>null</code>.                    
                </param>
            </javadoc>
            <method name="setPivotComparator" type="void" line="126">
                <params>
                    <param name="cmp" type="Comparator<Field>"/>
                </params>
            </method>
            <javadoc line="129">
                Returns the {@link javolution.context.LocalContext local} 
                  comparator used for pivoting or &lt;code&gt;null&lt;/code&gt; if pivoting 
                  is not performed (default {@link #NUMERIC_COMPARATOR}).                
                <return>
                    the comparator for pivoting or <code>null</code>.                    
                </return>
            </javadoc>
            <method name="getPivotComparator" type="Comparator<Field>" line="135"/>
            <javadoc line="138">
                Returns the solution X of the equation: A  X = B  with
                  &lt;code&gt;this = A.lu()&lt;/code&gt; using back and forward substitutions.                
                <param>
                    B the input matrix.                    
                </param>
                <return>
                    the solution X = (1 / A)  B.                    
                </return>
                <throws>
                    DimensionException if the dimensions do not match.                    
                </throws>
            </javadoc>
            <method name="solve" type="DenseMatrix<F>" line="145">
                <params>
                    <param name="B" type="Matrix<F>"/>
                </params>
                <declaration name="n" type="int" line="147"/>
                <declaration name="X" type="DenseMatrix&lt;F&gt;" line="148"/>
                <scope line="149">
                    <scope line="150"/>
                </scope>
                <scope line="154">
                    <scope line="155">
                        <declaration name="luik" type="F" line="156"/>
                        <scope line="157"/>
                    </scope>
                </scope>
                <scope line="162">
                    <scope line="163"/>
                    <scope line="166">
                        <declaration name="luik" type="F" line="167"/>
                        <scope line="168"/>
                    </scope>
                </scope>
            </method>
            <method name="createNullDenseMatrix" type="DenseMatrix<F>" line="175">
                <params>
                    <param name="m" type="int"/>
                    <param name="n" type="int"/>
                </params>
                <declaration name="M" type="DenseMatrix&lt;F&gt;" line="176"/>
                <scope line="177">
                    <declaration name="V" type="DenseVector&lt;F&gt;" line="178"/>
                    <scope line="180"/>
                </scope>
            </method>
            <javadoc line="186">
                Returns the solution X of the equation: A  X = Identity  with
                  &lt;code&gt;this = A.lu()&lt;/code&gt; using back and forward substitutions.                
                <return>
                    <code>this.solve(Identity)</code>                    
                </return>
            </javadoc>
            <method name="inverse" type="DenseMatrix<F>" line="191">
                <declaration name="n" type="int" line="192"/>
                <declaration name="R" type="DenseMatrix&lt;F&gt;" line="193"/>
                <scope line="194">
                    <scope line="195"/>
                </scope>
                <scope line="199">
                    <scope line="201">
                        <declaration name="sum" type="F" line="202"/>
                        <scope line="203"/>
                    </scope>
                </scope>
                <scope line="209">
                    <scope line="210">
                        <scope line="211">
                            <declaration name="lukj" type="F" line="212"/>
                            <scope line="213"/>
                            <scope line="216"/>
                        </scope>
                    </scope>
                </scope>
                <declaration name="tmp" type="FastTable&lt;F&gt;" line="222"/>
                <scope line="223">
                    <scope line="225"/>
                    <scope line="228"/>
                </scope>
            </method>
            <javadoc line="235">
                Returns the determinant of the {@link Matrix} having this
                  decomposition.                
                <return>
                    the determinant of the matrix source.                    
                </return>
            </javadoc>
            <method name="determinant" type="F" line="240">
                <declaration name="product" type="F" line="241"/>
                <scope line="242"/>
            </method>
            <javadoc line="247">
                Returns the lower matrix decomposition (&lt;code&gt;L&lt;/code&gt;) with diagonal
                  elements equal to the multiplicative identity for F.                
                <param>
                    zero the additive identity for F.                    
                </param>
                <param>
                    one the multiplicative identity for F.                    
                </param>
                <return>
                    the lower matrix.                    
                </return>
            </javadoc>
            <method name="getLower" type="DenseMatrix<F>" line="254">
                <params>
                    <param name="zero" type="F"/>
                    <param name="one" type="F"/>
                </params>
                <declaration name="L" type="DenseMatrix&lt;F&gt;" line="255"/>
                <scope line="256">
                    <scope line="257"/>
                </scope>
            </method>
            <javadoc line="264">
                Returns the upper matrix decomposition (&lt;code&gt;U&lt;/code&gt;).                
                <param>
                    zero the additive identity for F.                    
                </param>
                <return>
                    the upper matrix.                    
                </return>
            </javadoc>
            <method name="getUpper" type="DenseMatrix<F>" line="269">
                <params>
                    <param name="zero" type="F"/>
                </params>
                <declaration name="U" type="DenseMatrix&lt;F&gt;" line="270"/>
                <scope line="271">
                    <scope line="272"/>
                </scope>
            </method>
            <javadoc line="278">
                Returns the permutation matrix (&lt;code&gt;P&lt;/code&gt;).                
                <param>
                    zero the additive identity for F.                    
                </param>
                <param>
                    one the multiplicative identity for F.                    
                </param>
                <return>
                    the permutation matrix.                    
                </return>
            </javadoc>
            <method name="getPermutation" type="SparseMatrix<F>" line="284">
                <params>
                    <param name="zero" type="F"/>
                    <param name="one" type="F"/>
                </params>
                <declaration name="P" type="SparseMatrix&lt;F&gt;" line="285"/>
                <scope line="286"/>
            </method>
            <javadoc line="291">
                Returns the lower/upper decomposition in one single matrix.                
                <return>
                    the lower/upper matrix merged in a single matrix.                    
                </return>
            </javadoc>
            <method name="getLU" type="DenseMatrix<F>" line="295"/>
            <javadoc line="298">
                Returns the pivots elements of this decomposition.                
                <return>
                    the row indices after permutation.                    
                </return>
            </javadoc>
            <method name="getPivots" type="FastTable<Index>" line="302"/>
            <declaration name="FACTORY" type="ObjectFactory&lt;LUDecomposition&gt;" line="305"/>
            <anonymous_class line="305">
                <method name="create" type="LUDecomposition" line="306"/>
                <method name="cleanup" type="void" line="309">
                    <params>
                        <param name="lu" type="LUDecomposition"/>
                    </params>
                </method>
            </anonymous_class>
            <method name="LUDecomposition" type="constructor" line="314"/>
        </class>
    </source>