<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.jscience.mathematics.vector">
        <import package="java.util.Comparator"/>
        <import package="javolution.lang.Realtime"/>
        <import package="javolution.lang.ValueType"/>
        <import package="javolution.text.Text"/>
        <import package="javolution.text.TextBuilder"/>
        <import package="javolution.util.FastTable"/>
        <import package="org.jscience.mathematics.structure.Field"/>
        <import package="org.jscience.mathematics.structure.VectorSpace"/>
        <class name="Vector" line="10">
            <type_params>
                <type_param name="F"/>
            </type_params>
            <implements interface="VectorSpace">
                <type_params>
                    <type_param name="Vector<F>"/>
                    <type_param name="F"/>
                </type_params>
            </implements>
            <implements interface="ValueType"/>
            <implements interface="Realtime"/>
            <javadoc line="10">
                &lt;p&gt; This class represents an immutable element of a vector space.&lt;/p&gt;                
                <author>
                    <a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a>                    
                </author>
                <version>
                    3.3, January 2, 2007                    
                </version>
                <see>
                    <a href="http://en.wikipedia.org/wiki/Vector_space">
                           Wikipedia: Vector Space</a>                    
                </see>
            </javadoc>
            <javadoc line="18">
                Default constructor (for sub-classes).                
            </javadoc>
            <method name="Vector" type="constructor" line="21"/>
            <method name="getDimension" type="int" line="23"/>
            <javadoc line="23">
                Returns the number of elements  held by this vector.                
                <return>
                    this vector dimension.                    
                </return>
            </javadoc>
            <method name="get" type="F" line="28"/>
            <javadoc line="28">
                Returns a single element from this vector.                
                <param>
                    i the element index (range [0..n[).                    
                </param>
                <return>
                    the element at <code>i</code>.                    
                </return>
                <throws>
                    IndexOutOfBoundsException <code>(i < 0) || (i >= size())</code>                    
                </throws>
            </javadoc>
            <method name="opposite" type="Vector<F>" line="35"/>
            <javadoc line="35">
                Returns the negation of this vector.                
                <return>
                    <code>-this</code>.                    
                </return>
            </javadoc>
            <method name="plus" type="Vector<F>" line="40"/>
            <javadoc line="40">
                Returns the sum of this vector with the one specified.                
                <param>
                    that the vector to be added.                    
                </param>
                <return>
                    <code>this + that</code>.                    
                </return>
                <throws>
                    DimensionException is vectors dimensions are different.                    
                </throws>
            </javadoc>
            <javadoc line="47">
                Returns the difference between this vector and the one specified.                
                <param>
                    that the vector to be subtracted.                    
                </param>
                <return>
                    <code>this - that</code>.                    
                </return>
            </javadoc>
            <method name="minus" type="Vector<F>" line="52">
                <params>
                    <param name="that" type="Vector<F>"/>
                </params>
            </method>
            <method name="times" type="Vector<F>" line="55"/>
            <javadoc line="55">
                Returns the product of this vector with the specified coefficient.                
                <param>
                    k the coefficient multiplier.                    
                </param>
                <return>
                    <code>this · k</code>                    
                </return>
            </javadoc>
            <method name="times" type="F" line="61"/>
            <javadoc line="61">
                Returns the dot product of this vector with the one specified.                
                <param>
                    that the vector multiplier.                    
                </param>
                <return>
                    <code>this · that</code>                    
                </return>
                <throws>
                    DimensionException if <code>this.dimension() != that.dimension()</code>                    
                </throws>
                <see>
                    <a href="http://en.wikipedia.org/wiki/Dot_product">
                               Wikipedia: Dot Product</a>                    
                </see>
            </javadoc>
            <javadoc line="70">
                Returns the cross product of two 3-dimensional vectors.                
                <param>
                    that the vector multiplier.                    
                </param>
                <return>
                    <code>this x that</code>                    
                </return>
                <throws>
                    DimensionException if 
                      <code>(this.getDimension() != 3) && (that.getDimension() != 3)</code>                    
                </throws>
            </javadoc>
            <method name="cross" type="Vector<F>" line="77">
                <params>
                    <param name="that" type="Vector<F>"/>
                </params>
                <declaration name="elements" type="FastTable&lt;F&gt;" line="79"/>
                <declaration name="V" type="DenseVector&lt;F&gt;" line="83"/>
            </method>
            <javadoc line="87">
                Returns the text representation of this vector.                
                <return>
                    the text representation of this vector.                    
                </return>
            </javadoc>
            <method name="toText" type="Text" line="91">
                <declaration name="dimension" type="int" line="92"/>
                <declaration name="tmp" type="TextBuilder" line="93"/>
                <scope line="95">
                    <scope line="97"/>
                </scope>
                <declaration name="txt" type="Text" line="102"/>
            </method>
            <javadoc line="106">
                Returns the text representation of this vector as a 
                  &lt;code&gt;java.lang.String&lt;/code&gt;.                
                <return>
                    <code>toText().toString()</code>                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="111"/>
            <javadoc line="114">
                Indicates if this vector can be considered equals to the one 
                  specified using the specified comparator when testing for 
                  element equality. The specified comparator may allow for some 
                  tolerance in the difference between the vector elements.                
                <param>
                    that the vector to compare for equality.                    
                </param>
                <param>
                    cmp the comparator to use when testing for element equality.                    
                </param>
                <return>
                    <code>true</code> if this vector and the specified matrix are
                      both vector with equal elements according to the specified
                      comparator; <code>false</code> otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="125">
                <params>
                    <param name="that" type="Vector<F>"/>
                    <param name="cmp" type="Comparator<F>"/>
                </params>
                <declaration name="dimension" type="int" line="127"/>
                <scope line="129"/>
            </method>
            <javadoc line="134">
                Indicates if this vector is equal to the object specified.                
                <param>
                    that the object to compare for equality.                    
                </param>
                <return>
                    <code>true</code> if this vector and the specified object are
                      both vectors with equal elements; <code>false</code> otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="140">
                <params>
                    <param name="that" type="Object"/>
                </params>
                <declaration name="dimension" type="int" line="143"/>
                <declaration name="v" type="Vector" line="144"/>
                <scope line="146"/>
            </method>
            <javadoc line="151">
                Returns a hash code value for this vector.
                  Equals objects have equal hash codes.                
                <return>
                    this vector hash code value.                    
                </return>
                <see>
                    #equals                    
                </see>
            </javadoc>
            <method name="hashCode" type="int" line="157">
                <declaration name="dimension" type="int" line="158"/>
                <declaration name="code" type="int" line="159"/>
                <scope line="160"/>
            </method>
            <method name="copy" type="Vector<F>" line="165"/>
            <javadoc line="165">
                Returns a copy of this vector {@link javolution.context.AllocatorContext allocated} 
                  by the calling thread (possibly on the stack).                
                <return>
                    an identical and independant copy of this matrix.                    
                </return>
            </javadoc>
        </class>
    </source>