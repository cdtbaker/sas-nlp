<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.jscience.mathematics.vector">
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="javolution.context.ArrayFactory"/>
        <import package="javolution.xml.XMLFormat"/>
        <import package="javolution.xml.stream.XMLStreamException"/>
        <import package="org.jscience.mathematics.number.Complex"/>
        <import package="org.jscience.mathematics.structure.VectorSpaceNormed"/>
        <class name="ComplexVector" line="20">
            <extends class="Vector">
                <type_params>
                    <type_param name="Complex"/>
                </type_params>
            </extends>
            <comment line="298">
                /////////////////////////////
                 Package Private Utilities 
                /                
            </comment>
            <implements interface="VectorSpaceNormed">
                <type_params>
                    <type_param name="Vector<Complex>"/>
                    <type_param name="Complex"/>
                </type_params>
            </implements>
            <javadoc line="20">
                &lt;p&gt; This class represents an optimized {@link Vector vector} implementation
                  for {@link Complex complex} numbers elements.&lt;/p&gt;                
                <author>
                    &lt;a href=&quot;mailto:jean-marie@dautelle.com&quot;&gt;Jean-Marie Dautelle&lt;/a&gt;                    
                </author>
                <version>
                    3.3, January 2, 2007                    
                </version>
            </javadoc>
            <declaration name="XML" type="XMLFormat&lt;ComplexVector&gt;" line="30"/>
            <javadoc line="30">
                Holds the default XML representation. For example:
                  [code]
                  &lt;ComplexVector dimension=&quot;2&quot;&gt;
                  &lt;Complex real=&quot;1.0&quot; imaginary=&quot;-3.0&quot; /&gt;
                  &lt;Complex real=&quot;0.0&quot; imaginary=&quot;2.0&quot; /&gt;
                  &lt;/ComplexVector&gt;[/code]                
            </javadoc>
            <anonymous_class line="39">
                <method name="newInstance" type="ComplexVector" line="43">
                    <params>
                        <param name="cls" type="Class<ComplexVector>"/>
                        <param name="xml" type="InputElement"/>
                    </params>
                    <declaration name="dimension" type="int" line="44"/>
                    <declaration name="V" type="ComplexVector" line="45"/>
                </method>
                <method name="read" type="void" line="53">
                    <params>
                        <param name="xml" type="InputElement"/>
                        <param name="V" type="ComplexVector"/>
                    </params>
                    <scope line="54"/>
                </method>
                <method name="write" type="void" line="63">
                    <params>
                        <param name="V" type="ComplexVector"/>
                        <param name="xml" type="OutputElement"/>
                    </params>
                    <scope line="65"/>
                </method>
            </anonymous_class>
            <declaration name="FACTORY" type="ArrayFactory&lt;ComplexVector&gt;" line="71"/>
            <javadoc line="71">
                Holds factory for vectors with variable size arrays.                
            </javadoc>
            <anonymous_class line="75">
                <method name="create" type="ComplexVector" line="78">
                    <params>
                        <param name="capacity" type="int"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="_dimension" type="int" line="83"/>
            <javadoc line="83">
                Holds the dimension.                
            </javadoc>
            <declaration name="_reals" type="double[]" line="88"/>
            <javadoc line="88">
                Holds the real values.                
            </javadoc>
            <declaration name="_imags" type="double[]" line="93"/>
            <javadoc line="93">
                Holds the imaginary values.                
            </javadoc>
            <javadoc line="98">
                Creates a vector of specified capacity.                
            </javadoc>
            <method name="ComplexVector" type="constructor" line="101">
                <params>
                    <param name="capacity" type="int"/>
                </params>
            </method>
            <javadoc line="106">
                Returns a new vector holding the specified complex numbers.                
                <param>
                    elements the complex numbers elements.                    
                </param>
                <return>
                    the vector having the specified complex numbers.                    
                </return>
            </javadoc>
            <method name="valueOf" type="ComplexVector" line="112">
                <params>
                    <param name="elements" type="Complex"/>
                </params>
                <declaration name="n" type="int" line="113"/>
                <declaration name="V" type="ComplexVector" line="114"/>
                <scope line="116">
                    <declaration name="complex" type="Complex" line="117"/>
                </scope>
            </method>
            <javadoc line="124">
                Returns a new vector holding the elements from the specified 
                  collection.                
                <param>
                    elements the collection of floating-points numbers.                    
                </param>
                <return>
                    the vector having the specified elements.                    
                </return>
            </javadoc>
            <method name="valueOf" type="ComplexVector" line="131">
                <params>
                    <param name="elements" type="List<Complex>"/>
                </params>
                <declaration name="n" type="int" line="132"/>
                <declaration name="V" type="ComplexVector" line="133"/>
                <declaration name="iterator" type="Iterator&lt;Complex&gt;" line="135"/>
                <scope line="136">
                    <declaration name="complex" type="Complex" line="137"/>
                </scope>
            </method>
            <javadoc line="144">
                Returns a {@link ComplexVector} instance equivalent to the 
                  specified vector.                
                <param>
                    that the vector to convert.                    
                </param>
                <return>
                    &lt;code&gt;that&lt;/code&gt; or new equivalent ComplexVector.                    
                </return>
            </javadoc>
            <method name="valueOf" type="ComplexVector" line="151">
                <params>
                    <param name="that" type="Vector<Complex>"/>
                </params>
                <declaration name="n" type="int" line="154"/>
                <declaration name="V" type="ComplexVector" line="155"/>
                <scope line="157">
                    <declaration name="complex" type="Complex" line="158"/>
                </scope>
            </method>
            <javadoc line="165">
                Returns the real value of a complex number from this vector (fast).                
                <param>
                    i the complex number index.                    
                </param>
                <return>
                    the real value of complex at &lt;code&gt;i&lt;/code&gt;.                    
                </return>
                <throws>
                    IndexOutOfBoundsException &lt;code&gt;(i &lt; 0) || (i &gt;= dimension())&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="getReal" type="double" line="172">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="178">
                Returns the imaginary value of a complex number from this vector (fast).                
                <param>
                    i the complex number index.                    
                </param>
                <return>
                    the real value of complex at &lt;code&gt;i&lt;/code&gt;.                    
                </return>
                <throws>
                    IndexOutOfBoundsException &lt;code&gt;(i &lt; 0) || (i &gt;= dimension())&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="getImaginary" type="double" line="185">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="191">
                Returns the Euclidian norm of this vector (square root of the 
                  dot product of this vector and itself).                
                <return>
                    &lt;code&gt;sqrt(this Â· this)&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="norm" type="Complex" line="197">
                <declaration name="normSquaredReal" type="double" line="198"/>
                <declaration name="normSquaredImag" type="double" line="199"/>
                <scope line="200">
                    <declaration name="real" type="double" line="201"/>
                    <declaration name="imag" type="double" line="202"/>
                </scope>
            </method>
            <method name="getDimension" type="int" line="210"/>
            <method name="get" type="Complex" line="215">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <method name="opposite" type="ComplexVector" line="222">
                <declaration name="V" type="ComplexVector" line="223"/>
                <scope line="225"/>
            </method>
            <method name="plus" type="ComplexVector" line="233">
                <params>
                    <param name="that" type="Vector<Complex>"/>
                </params>
                <declaration name="T" type="ComplexVector" line="234"/>
                <declaration name="V" type="ComplexVector" line="237"/>
                <scope line="239"/>
            </method>
            <method name="minus" type="ComplexVector" line="247">
                <params>
                    <param name="that" type="Vector<Complex>"/>
                </params>
                <declaration name="T" type="ComplexVector" line="248"/>
                <declaration name="V" type="ComplexVector" line="251"/>
                <scope line="253"/>
            </method>
            <method name="times" type="ComplexVector" line="261">
                <params>
                    <param name="k" type="Complex"/>
                </params>
                <declaration name="V" type="ComplexVector" line="262"/>
                <scope line="264">
                    <declaration name="real" type="double" line="265"/>
                    <declaration name="imag" type="double" line="266"/>
                </scope>
            </method>
            <method name="times" type="Complex" line="274">
                <params>
                    <param name="that" type="Vector<Complex>"/>
                </params>
                <declaration name="T" type="ComplexVector" line="275"/>
                <declaration name="sumReal" type="double" line="278"/>
                <declaration name="sumImag" type="double" line="279"/>
                <scope line="280"/>
            </method>
            <method name="copy" type="ComplexVector" line="288">
                <declaration name="V" type="ComplexVector" line="289"/>
                <scope line="291"/>
            </method>
            <method name="set" type="void" line="301">
                <params>
                    <param name="i" type="int"/>
                    <param name="c" type="Complex"/>
                </params>
            </method>
            <method name="newInstance" type="ComplexVector" line="306">
                <params>
                    <param name="n" type="int"/>
                </params>
                <declaration name="V" type="ComplexVector" line="307"/>
            </method>
            <declaration name="serialVersionUID" type="long" line="312"/>
        </class>
    </source>