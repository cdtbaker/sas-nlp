<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.jscience.mathematics.vector">
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="javolution.context.ArrayFactory"/>
        <import package="javolution.xml.XMLFormat"/>
        <import package="javolution.xml.stream.XMLStreamException"/>
        <import package="org.jscience.mathematics.number.Complex"/>
        <import package="org.jscience.mathematics.structure.VectorSpaceNormed"/>
        <class name="ComplexVector" line="9">
            <extends class="Vector">
                <type_params>
                    <type_param name="Complex"/>
                </type_params>
            </extends>
            <implements interface="VectorSpaceNormed">
                <type_params>
                    <type_param name="Vector<Complex>"/>
                    <type_param name="Complex"/>
                </type_params>
            </implements>
            <javadoc line="9">
                &lt;p&gt; This class represents an optimized {@link Vector vector} implementation
                  for {@link Complex complex} numbers elements.&lt;/p&gt;                
                <author>
                    <a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a>                    
                </author>
                <version>
                    3.3, January 2, 2007                    
                </version>
            </javadoc>
            <declaration name="XML" type="XMLFormat&lt;ComplexVector&gt;" line="16"/>
            <javadoc line="16">
                Holds the default XML representation. For example:
                  [code]
                  &lt;ComplexVector dimension=&quot;2&quot;&gt;
                  &lt;Complex real=&quot;1.0&quot; imaginary=&quot;-3.0&quot; /&gt;
                  &lt;Complex real=&quot;0.0&quot; imaginary=&quot;2.0&quot; /&gt;
                  &lt;/ComplexVector&gt;[/code]                
            </javadoc>
            <anonymous_class line="24">
                <method name="newInstance" type="ComplexVector" line="25">
                    <params>
                        <param name="cls" type="Class<ComplexVector>"/>
                        <param name="xml" type="InputElement"/>
                    </params>
                    <declaration name="dimension" type="int" line="26"/>
                    <declaration name="V" type="ComplexVector" line="27"/>
                </method>
                <method name="read" type="void" line="31">
                    <params>
                        <param name="xml" type="InputElement"/>
                        <param name="V" type="ComplexVector"/>
                    </params>
                    <scope line="32"/>
                </method>
                <method name="write" type="void" line="37">
                    <params>
                        <param name="V" type="ComplexVector"/>
                        <param name="xml" type="OutputElement"/>
                    </params>
                    <scope line="39"/>
                </method>
            </anonymous_class>
            <declaration name="FACTORY" type="ArrayFactory&lt;ComplexVector&gt;" line="45"/>
            <javadoc line="45">
                Holds factory for vectors with variable size arrays.                
            </javadoc>
            <anonymous_class line="48">
                <method name="create" type="ComplexVector" line="49">
                    <params>
                        <param name="capacity" type="int"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="_dimension" type="int" line="54"/>
            <javadoc line="54">
                Holds the dimension.                
            </javadoc>
            <declaration name="_reals" type="double[]" line="58"/>
            <javadoc line="58">
                Holds the real values.                
            </javadoc>
            <declaration name="_imags" type="double[]" line="62"/>
            <javadoc line="62">
                Holds the imaginary values.                
            </javadoc>
            <javadoc line="66">
                Creates a vector of specified capacity.                
            </javadoc>
            <method name="ComplexVector" type="constructor" line="69">
                <params>
                    <param name="capacity" type="int"/>
                </params>
            </method>
            <javadoc line="73">
                Returns a new vector holding the specified complex numbers.                
                <param>
                    elements the complex numbers elements.                    
                </param>
                <return>
                    the vector having the specified complex numbers.                    
                </return>
            </javadoc>
            <method name="valueOf" type="ComplexVector" line="78">
                <params>
                    <param name="elements" type="Complex"/>
                </params>
                <declaration name="n" type="int" line="79"/>
                <declaration name="V" type="ComplexVector" line="80"/>
                <scope line="82">
                    <declaration name="complex" type="Complex" line="83"/>
                </scope>
            </method>
            <javadoc line="89">
                Returns a new vector holding the elements from the specified 
                  collection.                
                <param>
                    elements the collection of floating-points numbers.                    
                </param>
                <return>
                    the vector having the specified elements.                    
                </return>
            </javadoc>
            <method name="valueOf" type="ComplexVector" line="95">
                <params>
                    <param name="elements" type="List<Complex>"/>
                </params>
                <declaration name="n" type="int" line="96"/>
                <declaration name="V" type="ComplexVector" line="97"/>
                <declaration name="iterator" type="Iterator&lt;Complex&gt;" line="99"/>
                <scope line="100">
                    <declaration name="complex" type="Complex" line="101"/>
                </scope>
            </method>
            <javadoc line="107">
                Returns a {@link ComplexVector} instance equivalent to the 
                  specified vector.                
                <param>
                    that the vector to convert.                    
                </param>
                <return>
                    <code>that</code> or new equivalent ComplexVector.                    
                </return>
            </javadoc>
            <method name="valueOf" type="ComplexVector" line="113">
                <params>
                    <param name="that" type="Vector<Complex>"/>
                </params>
                <declaration name="n" type="int" line="115"/>
                <declaration name="V" type="ComplexVector" line="116"/>
                <scope line="118">
                    <declaration name="complex" type="Complex" line="119"/>
                </scope>
            </method>
            <javadoc line="125">
                Returns the real value of a complex number from this vector (fast).                
                <param>
                    i the complex number index.                    
                </param>
                <return>
                    the real value of complex at <code>i</code>.                    
                </return>
                <throws>
                    IndexOutOfBoundsException <code>(i < 0) || (i >= dimension())</code>                    
                </throws>
            </javadoc>
            <method name="getReal" type="double" line="131">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="135">
                Returns the imaginary value of a complex number from this vector (fast).                
                <param>
                    i the complex number index.                    
                </param>
                <return>
                    the real value of complex at <code>i</code>.                    
                </return>
                <throws>
                    IndexOutOfBoundsException <code>(i < 0) || (i >= dimension())</code>                    
                </throws>
            </javadoc>
            <method name="getImaginary" type="double" line="141">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="145">
                Returns the Euclidian norm of this vector (square root of the 
                  dot product of this vector and itself).                
                <return>
                    <code>sqrt(this Â· this)</code>.                    
                </return>
            </javadoc>
            <method name="norm" type="Complex" line="150">
                <declaration name="normSquaredReal" type="double" line="151"/>
                <declaration name="normSquaredImag" type="double" line="152"/>
                <scope line="153">
                    <declaration name="real" type="double" line="154"/>
                    <declaration name="imag" type="double" line="155"/>
                </scope>
            </method>
            <method name="getDimension" type="int" line="161"/>
            <method name="get" type="Complex" line="164">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <method name="opposite" type="ComplexVector" line="168">
                <declaration name="V" type="ComplexVector" line="169"/>
                <scope line="171"/>
            </method>
            <method name="plus" type="ComplexVector" line="177">
                <params>
                    <param name="that" type="Vector<Complex>"/>
                </params>
                <declaration name="T" type="ComplexVector" line="178"/>
                <declaration name="V" type="ComplexVector" line="180"/>
                <scope line="182"/>
            </method>
            <method name="minus" type="ComplexVector" line="188">
                <params>
                    <param name="that" type="Vector<Complex>"/>
                </params>
                <declaration name="T" type="ComplexVector" line="189"/>
                <declaration name="V" type="ComplexVector" line="191"/>
                <scope line="193"/>
            </method>
            <method name="times" type="ComplexVector" line="199">
                <params>
                    <param name="k" type="Complex"/>
                </params>
                <declaration name="V" type="ComplexVector" line="200"/>
                <scope line="202">
                    <declaration name="real" type="double" line="203"/>
                    <declaration name="imag" type="double" line="204"/>
                </scope>
            </method>
            <method name="times" type="Complex" line="210">
                <params>
                    <param name="that" type="Vector<Complex>"/>
                </params>
                <declaration name="T" type="ComplexVector" line="211"/>
                <declaration name="sumReal" type="double" line="213"/>
                <declaration name="sumImag" type="double" line="214"/>
                <scope line="215"/>
            </method>
            <method name="copy" type="ComplexVector" line="221">
                <declaration name="V" type="ComplexVector" line="222"/>
                <scope line="224"/>
            </method>
            <method name="set" type="void" line="230">
                <params>
                    <param name="i" type="int"/>
                    <param name="c" type="Complex"/>
                </params>
            </method>
            <method name="newInstance" type="ComplexVector" line="234">
                <params>
                    <param name="n" type="int"/>
                </params>
                <declaration name="V" type="ComplexVector" line="235"/>
            </method>
            <declaration name="serialVersionUID" type="long" line="239"/>
        </class>
    </source>