<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.jscience.physics.amount">
        <import package="java.io.IOException"/>
        <import package="java.text.ParseException"/>
        <import package="org.jscience.economics.money.Currency"/>
        <import package="org.jscience.economics.money.Money"/>
        <import package="javax.measure.unit.Unit"/>
        <import package="javax.measure.unit.UnitFormat"/>
        <import package="javolution.lang.MathLib"/>
        <import package="javolution.text.Text"/>
        <import package="javolution.text.TextBuilder"/>
        <import package="javolution.text.TextFormat"/>
        <import package="javolution.text.TypeFormat"/>
        <import package="javolution.context.LocalContext"/>
        <class name="AmountFormat" line="29">
            <extends class="TextFormat">
                <type_params>
                    <type_param name="Amount<?>"/>
                </type_params>
            </extends>
            <javadoc line="29">
                &lt;p&gt; This class provides the interface for formatting and parsing {@link Amount measures} instances. For example:[code]
                  // Display measurements using unscaled units (e.g. base units or alternate units).
                  AmountFormat.setInstance(new AmountFormat() { // Context local.
                  public Appendable format(Amount m, Appendable a) throws IOException {
                  Unit u = m.getUnit();
                  if (u instanceof TransformedUnit)
                  u = ((TransformedUnit)u).getParentUnit();
                  return AmountFormat.getPlusMinusErrorInstance(2).format(m.to(u), a);
                  }
                  public Amount parse(CharSequence csq, Cursor c) {
                  return AmountFormat.getPlusMinusErrorInstance(2).parse(csq, c);
                  }
                  });[/code]
                  &lt;/p&gt;                
                <author>
                    <a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a>                    
                </author>
                <version>
                    3.0, February 21, 2006                    
                </version>
            </javadoc>
            <declaration name="CURRENT" type="LocalContext.Reference&lt;AmountFormat&gt;" line="51"/>
            <javadoc line="51">
                Holds current format.                
            </javadoc>
            <javadoc line="57">
                Default constructor.                
            </javadoc>
            <method name="AmountFormat" type="constructor" line="60"/>
            <javadoc line="63">
                Returns the current {@link javolution.context.LocalContext local}  
                  format (default &lt;code&gt;AmountFormat.getPlusMinusErrorInstance(2)&lt;/code&gt;).                
                <return>
                    the context local format.                    
                </return>
                <see>
                    #getPlusMinusErrorInstance(int)                    
                </see>
            </javadoc>
            <method name="getInstance" type="AmountFormat" line="70"/>
            <javadoc line="74">
                Sets the current {@link javolution.context.LocalContext local} format.                
                <param>
                    format the new format.                    
                </param>
            </javadoc>
            <method name="setInstance" type="void" line="79">
                <params>
                    <param name="format" type="AmountFormat"/>
                </params>
            </method>
            <javadoc line="83">
                Returns a format for which the error (if present) is stated using 
                  the &apos;±&apos; character; for example &lt;code&gt;&quot;(1.34 ± 0.01) m&quot;&lt;/code&gt;.
                  This format can be used for formatting as well as for parsing.                
                <param>
                    digitsInError the maximum number of digits in error.                    
                </param>
            </javadoc>
            <method name="getPlusMinusErrorInstance" type="AmountFormat" line="90">
                <params>
                    <param name="digitsInError" type="int"/>
                </params>
            </method>
            <javadoc line="94">
                Returns a format for which the error is represented by an integer 
                  value in brackets; for example &lt;code&gt;&quot;1.3456[20] m&quot;&lt;/code&gt; 
                  is equivalent to &lt;code&gt;&quot;1.3456 ± 0.0020 m&quot;&lt;/code&gt;. 
                  This format can be used for formatting as well as for parsing.                
                <param>
                    digitsInError the maximum number of digits in error.                    
                </param>
            </javadoc>
            <method name="getBracketErrorInstance" type="AmountFormat" line="102">
                <params>
                    <param name="digitsInError" type="int"/>
                </params>
            </method>
            <javadoc line="106">
                Returns a format for which only digits guaranteed to be exact are 
                  written out. In other words, the error is always on the
                  last digit and less than the last digit weight. For example,
                  &lt;code&gt;&quot;1.34 m&quot;&lt;/code&gt; means a length between &lt;code&gt;1.32 m&lt;/code&gt; and
                  &lt;code&gt;1.35 m&lt;/code&gt;. This format can be used for formatting only.                
            </javadoc>
            <method name="getExactDigitsInstance" type="AmountFormat" line="113"/>
            <class name="PlusMinusError" line="117">
                <extends class="AmountFormat"/>
                <javadoc line="117">
                    This class represents the plus minus error format.                    
                </javadoc>
                <declaration name="_errorDigits" type="int" line="122"/>
                <javadoc line="122">
                    Holds the number of digits in error.                    
                </javadoc>
                <javadoc line="127">
                    Creates a plus-minus error format having the specified 
                      number of digits in error.                    
                    <param>
                        errorDigits the number of digits in error.                        
                    </param>
                </javadoc>
                <method name="PlusMinusError" type="constructor" line="133">
                    <params>
                        <param name="errorDigits" type="int"/>
                    </params>
                </method>
                <method name="format" type="Appendable" line="140">
                    <params>
                        <param name="arg0" type="Amount"/>
                        <param name="arg1" type="Appendable"/>
                    </params>
                    <comment line="153">
                        Exact digits.                        
                    </comment>
                    <scope line="143"/>
                    <declaration name="value" type="double" line="148"/>
                    <declaration name="error" type="double" line="149"/>
                    <declaration name="log10Value" type="int" line="150"/>
                    <declaration name="log10Error" type="int" line="152"/>
                    <declaration name="digits" type="int" line="153"/>
                    <declaration name="scientific" type="boolean" line="156"/>
                    <declaration name="showZeros" type="boolean" line="158"/>
                </method>
                <method name="parse" type="Amount<?>" line="171">
                    <params>
                        <param name="arg0" type="CharSequence"/>
                        <param name="arg1" type="Cursor"/>
                    </params>
                    <comment line="176">
                        Exact!                        
                    </comment>
                    <comment line="186">
                        Error specified.                        
                    </comment>
                    <declaration name="start" type="int" line="172"/>
                    <scope line="173">
                        <declaration name="value" type="long" line="175"/>
                        <scope line="176">
                            <declaration name="unit" type="Unit&lt;?&gt;" line="178"/>
                        </scope>
                        <declaration name="amount" type="double" line="183"/>
                        <declaration name="error" type="double" line="185"/>
                        <scope line="186"/>
                        <declaration name="unit" type="Unit&lt;?&gt;" line="193"/>
                    </scope>
                    <scope line="196"/>
                </method>
            </class>
            <class name="BracketError" line="204">
                <extends class="AmountFormat"/>
                <javadoc line="204">
                    This class represents the bracket error format.                    
                </javadoc>
                <declaration name="_errorDigits" type="int" line="209"/>
                <javadoc line="209">
                    Holds the number of digits in error.                    
                </javadoc>
                <javadoc line="214">
                    Creates a bracket error format having the specified 
                      number of digits in error.                    
                    <param>
                        bracket the number of digits in error.                        
                    </param>
                </javadoc>
                <method name="BracketError" type="constructor" line="220">
                    <params>
                        <param name="errorDigits" type="int"/>
                    </params>
                </method>
                <method name="format" type="Appendable" line="227">
                    <params>
                        <param name="arg0" type="Amount"/>
                        <param name="arg1" type="Appendable"/>
                    </params>
                    <comment line="240">
                        Exact digits.                        
                    </comment>
                    <scope line="230"/>
                    <declaration name="value" type="double" line="235"/>
                    <declaration name="error" type="double" line="236"/>
                    <declaration name="log10Value" type="int" line="237"/>
                    <declaration name="log10Error" type="int" line="239"/>
                    <declaration name="digits" type="int" line="240"/>
                    <declaration name="scientific" type="boolean" line="243"/>
                    <declaration name="showZeros" type="boolean" line="245"/>
                    <declaration name="tb" type="TextBuilder" line="246"/>
                    <declaration name="endMantissa" type="int" line="248"/>
                    <scope line="249"/>
                    <declaration name="bracketError" type="int" line="253"/>
                </method>
                <method name="parse" type="Amount<?>" line="263">
                    <params>
                        <param name="arg0" type="CharSequence"/>
                        <param name="arg1" type="Cursor"/>
                    </params>
                    <comment line="264">
                        TBD                        
                    </comment>
                </method>
            </class>
            <class name="ExactDigitsOnly" line="269">
                <extends class="AmountFormat"/>
                <javadoc line="269">
                    This class represents the exact digits only format.                    
                </javadoc>
                <javadoc line="274">
                    Default constructor.                    
                </javadoc>
                <method name="ExactDigitsOnly" type="constructor" line="277"/>
                <method name="format" type="Appendable" line="283">
                    <params>
                        <param name="arg0" type="Amount"/>
                        <param name="arg1" type="Appendable"/>
                    </params>
                    <comment line="296">
                        Exact digits.                        
                    </comment>
                    <scope line="286"/>
                    <declaration name="value" type="double" line="291"/>
                    <declaration name="error" type="double" line="292"/>
                    <declaration name="log10Value" type="int" line="293"/>
                    <declaration name="log10Error" type="int" line="295"/>
                    <declaration name="digits" type="int" line="296"/>
                    <declaration name="scientific" type="boolean" line="298"/>
                    <declaration name="showZeros" type="boolean" line="300"/>
                </method>
                <method name="parse" type="Amount<?>" line="307">
                    <params>
                        <param name="arg0" type="CharSequence"/>
                        <param name="arg1" type="Cursor"/>
                    </params>
                </method>
            </class>
            <javadoc line="314">
                Provides custom formatting for money measurements.                
            </javadoc>
            <method name="formatMoney" type="Appendable" line="318">
                <params>
                    <param name="arg0" type="Amount<Money>"/>
                    <param name="arg1" type="Appendable"/>
                </params>
                <declaration name="currency" type="Currency" line="319"/>
                <declaration name="fraction" type="int" line="320"/>
                <scope line="321">
                    <declaration name="amount" type="long" line="322"/>
                </scope>
                <scope line="324">
                    <declaration name="amount" type="long" line="325"/>
                </scope>
                <scope line="330"/>
            </method>
        </class>
    </source>