<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.jscience.physics.amount">
        <import package="java.io.Serializable"/>
        <import package="javolution.context.ObjectFactory"/>
        <import package="javolution.lang.Immutable"/>
        <import package="javolution.lang.MathLib"/>
        <import package="javolution.text.Text"/>
        <import package="javolution.util.FastComparator"/>
        <import package="javolution.util.FastMap"/>
        <import package="javolution.xml.XMLFormat"/>
        <import package="javolution.xml.stream.XMLStreamException"/>
        <import package="org.jscience.mathematics.structure.Field"/>
        <import package="javax.measure.converter.ConversionException"/>
        <import package="javax.measure.converter.RationalConverter"/>
        <import package="javax.measure.converter.UnitConverter"/>
        <import package="javax.measure.quantity.Dimensionless"/>
        <import package="javax.measure.quantity.Quantity"/>
        <import package="javax.measure.unit.Unit"/>
        <import package="javax.measure.Measurable"/>
        <import package="javax.realtime.MemoryArea"/>
        <class name="Amount" line="33">
            <type_params>
                <type_param name="Q"/>
            </type_params>
            <comment line="84">
                //////////////////////////////////////////////////////////////////////////////                
            </comment>
            <comment line="85">
                Note: In the future, Amount might be abstract (with more measure types)   //                
            </comment>
            <comment line="86">
                We don&apos;t provide public constructors, factory methods should be used.//                
            </comment>
            <comment line="87">
                //////////////////////////////////////////////////////////////////////////////                
            </comment>
            <comment line="858">
                Implements Quantity.                
            </comment>
            <comment line="864">
                Implements Quantity.                
            </comment>
            <comment line="877">
                /////////////////                
            </comment>
            <comment line="878">
                Lookup tables //                
            </comment>
            <comment line="879">
                /////////////////                
            </comment>
            <comment line="985">
                ////////////////////                
            </comment>
            <comment line="986">
                Factory Creation //                
            </comment>
            <comment line="987">
                ////////////////////                
            </comment>
            <implements interface="Measurable">
                <type_params>
                    <type_param name="Q"/>
                </type_params>
            </implements>
            <implements interface="Field">
                <type_params>
                    <type_param name="Amount<?>"/>
                </type_params>
            </implements>
            <implements interface="Serializable"/>
            <implements interface="Immutable"/>
            <javadoc line="33">
                &lt;p&gt; This class represents a determinate or estimated amount for which 
                  operations such as addition, subtraction, multiplication and division
                  can be performed (it implements the {@link Field} interface).&lt;/p&gt;
                  &lt;p&gt; The nature of an amount can be deduced from its parameterization 
                  (compile time) or its {@link #getUnit() unit} (run time).
                  Its precision is given by its {@link #getAbsoluteError() error}.&lt;/p&gt;
                  &lt;p&gt; Amounts can be {@link #isExact() exact}, in which case they can be
                  expressed as an exact &lt;code&gt;long&lt;/code&gt; integer in the amount unit.
                  The framework tries to keep amount exact as much as possible.
                  For example:[code]
                  Amount&lt;Length&gt; m = Amount.valueOf(33, FOOT).divide(11).times(2);
                  System.out.println(m);
                  System.out.println(m.isExact() ? &quot;exact&quot; : &quot;inexact&quot;);
                  System.out.println(m.getExactValue());
                  &gt; 6 ft
                  &gt; exact
                  &gt; 6[/code] 
                  &lt;/p&gt;
                  &lt;p&gt; Errors (including numeric errors) are calculated using numeric intervals.
                  It is possible to resolve systems of linear equations involving {@link org.jscience.mathematics.vector.Matrix matrices}, even if the 
                  system is close to singularity; in which case the error associated with
                  some (or all) components of the solution may be large.&lt;/p&gt;
                  &lt;p&gt; By default, non-exact amounts are shown using the plus/minus  
                  character (&apos;±&apos;) (see {@link AmountFormat}). For example, 
                  &lt;code&gt;&quot;(2.0 ± 0.001) km/s&quot;&lt;/code&gt; represents a velocity of 
                  2 km/s with an absolute error of ± 1 m/s. Exact amount use an
                  integer notation (no decimal point, e.g. &lt;code&gt;&quot;2000 m&quot;&lt;/code&gt;).&lt;/p&gt;
                  &lt;p&gt; Operations between different amounts may or may not be authorized 
                  based upon the current {@link org.jscience.physics.model.PhysicalModelPhysicalModel}. For example, adding &lt;code&gt;Amount&amp;lt;Length&amp;gt; and 
                  &lt;code&gt;Amount&amp;lt;Duration&amp;gt; is not allowed by the {@link org.jscience.physics.model.StandardModel StandardModel}, 
                  but is authorized with the {@link org.jscience.physics.model.RelativisticModel RelativisticModel}.&lt;/p&gt;                
                <author>
                    <a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a>                    
                </author>
                <version>
                    4.0, June 4, 2007                    
                </version>
                <see>
                    <a href="http://en.wikipedia.org/wiki/Measuring">
                            Wikipedia: Measuring</a>                    
                </see>
            </javadoc>
            <declaration name="ZERO" type="Amount&lt;Dimensionless&gt;" line="88"/>
            <javadoc line="88">
                Holds a dimensionless measure of zero (exact).                
            </javadoc>
            <scope line="92"/>
            <declaration name="ONE" type="Amount&lt;Dimensionless&gt;" line="100"/>
            <javadoc line="100">
                Holds a dimensionless measure of one (exact).                
            </javadoc>
            <scope line="104"/>
            <declaration name="XML" type="XMLFormat&lt;Amount&gt;" line="112"/>
            <javadoc line="112">
                Holds the default XML representation for measures.
                  This representation consists of a &lt;code&gt;value&lt;/code&gt;, 
                  an &lt;code&gt;unit&lt;/code&gt; and an optional &lt;code&gt;error&lt;/code&gt; attribute 
                  when the measure is not exact.
                  The unit attribute determinates the measurement type. For example:&lt;pre&gt;
                  &amp;lt;Amount value=&quot;12&quot; unit=&quot;µA&quot;/&amp;gt;&lt;/pre&gt;
                  represents an electric current measurement.                
            </javadoc>
            <anonymous_class line="123">
                <method name="newInstance" type="Amount" line="126">
                    <params>
                        <param name="cls" type="Class<Amount>"/>
                        <param name="xml" type="InputElement"/>
                    </params>
                    <comment line="129">
                        Exact.                        
                    </comment>
                    <declaration name="unit" type="Unit" line="127"/>
                    <declaration name="m" type="Amount&lt;?&gt;" line="128"/>
                    <declaration name="estimatedValue" type="double" line="132"/>
                    <declaration name="error" type="double" line="133"/>
                </method>
                <method name="read" type="void" line="140">
                    <params>
                        <param name="arg0" type="javolution.xml.XMLFormat.InputElement"/>
                        <param name="arg1" type="Amount"/>
                    </params>
                    <comment line="141">
                        Nothing to do.                        
                    </comment>
                </method>
                <method name="write" type="void" line="145">
                    <params>
                        <param name="m" type="Amount"/>
                        <param name="xml" type="OutputElement"/>
                    </params>
                    <scope line="146"/>
                    <scope line="148"/>
                </method>
            </anonymous_class>
            <javadoc line="156">
                Returns the exact measure corresponding to the value stated in the 
                  specified unit.                
                <param>
                    value the exact value stated in the specified unit.                    
                </param>
                <param>
                    unit the unit in which the value is stated.                    
                </param>
                <return>
                    the corresponding measure object.                    
                </return>
            </javadoc>
            <method name="valueOf" type="Amount<Q>" line="165">
                <params>
                    <param name="value" type="long"/>
                    <param name="unit" type="Unit<Q>"/>
                </params>
                <declaration name="m" type="Amount&lt;Q&gt;" line="166"/>
            </method>
            <javadoc line="170">
                Returns the measure corresponding to an approximate value 
                  (&lt;code&gt;double&lt;/code&gt;) stated in the specified unit; 
                  the precision of the measure is assumed to be the 
                  &lt;code&gt;double&lt;/code&gt; precision (64 bits IEEE 754 format).                
                <param>
                    value the estimated value (± LSB) stated in the specified unit.                    
                </param>
                <param>
                    unit the unit in which the value is stated.                    
                </param>
                <return>
                    the corresponding measure object.                    
                </return>
            </javadoc>
            <method name="valueOf" type="Amount<Q>" line="181">
                <params>
                    <param name="value" type="double"/>
                    <param name="unit" type="Unit<Q>"/>
                </params>
                <declaration name="m" type="Amount&lt;Q&gt;" line="182"/>
                <declaration name="valInc" type="double" line="184"/>
                <declaration name="valDec" type="double" line="185"/>
            </method>
            <javadoc line="191">
                Returns the measure corresponding to the specified approximate value 
                  and measurement error, both stated in the specified unit.                
                <param>
                    value the estimated amount (± error) stated in the specified unit.                    
                </param>
                <param>
                    error the measurement error (absolute).                    
                </param>
                <param>
                    unit the unit in which the amount and the error are stated.                    
                </param>
                <return>
                    the corresponding measure object.                    
                </return>
                <throws>
                    IllegalArgumentException if <code>error &lt; 0.0</code>                    
                </throws>
            </javadoc>
            <method name="valueOf" type="Amount<Q>" line="202">
                <params>
                    <param name="value" type="double"/>
                    <param name="error" type="double"/>
                    <param name="unit" type="Unit<Q>"/>
                </params>
                <declaration name="m" type="Amount&lt;Q&gt;" line="206"/>
                <declaration name="min" type="double" line="207"/>
                <declaration name="max" type="double" line="208"/>
            </method>
            <javadoc line="215">
                Returns the measure corresponding to the specified interval stated 
                  in the specified unit.                
                <param>
                    minimum the lower bound for the measure value.                    
                </param>
                <param>
                    maximum the upper bound for the measure value.                    
                </param>
                <param>
                    unit the unit for both the minimum and maximum values.                    
                </param>
                <return>
                    the corresponding measure object.                    
                </return>
                <throws>
                    IllegalArgumentException if <code>minimum &gt; maximum</code>                    
                </throws>
            </javadoc>
            <method name="rangeOf" type="Amount<Q>" line="226">
                <params>
                    <param name="minimum" type="double"/>
                    <param name="maximum" type="double"/>
                    <param name="unit" type="Unit<Q>"/>
                </params>
                <declaration name="m" type="Amount&lt;Q&gt;" line="230"/>
            </method>
            <javadoc line="237">
                Returns the measure represented by the specified character sequence.                
                <param>
                    csq the character sequence.                    
                </param>
                <return>
                    <code>AmountFormat.getInstance().parse(csq)</code>                    
                </return>
            </javadoc>
            <method name="valueOf" type="Amount<?>" line="243">
                <params>
                    <param name="csq" type="CharSequence"/>
                </params>
            </method>
            <declaration name="_isExact" type="boolean" line="247"/>
            <javadoc line="247">
                Indicates if this measure is exact.                
            </javadoc>
            <declaration name="_exactValue" type="long" line="252"/>
            <javadoc line="252">
                Holds the exact value (when exact) stated in this measure unit.                
            </javadoc>
            <declaration name="_minimum" type="double" line="257"/>
            <javadoc line="257">
                Holds the minimum value stated in this measure unit.
                  For inexact measures: _minimum &lt; _maximum                
            </javadoc>
            <declaration name="_maximum" type="double" line="263"/>
            <javadoc line="263">
                Holds the maximum value stated in this measure unit.
                  For inexact measures: _maximum &gt; _minimum                
            </javadoc>
            <declaration name="_unit" type="Unit&lt;Q&gt;" line="269"/>
            <javadoc line="269">
                Holds this measure unit.                
            </javadoc>
            <javadoc line="274">
                Indicates if this measure amount is exact. An exact amount is 
                  guarantee exact only when stated in this measure unit
                  (e.g. &lt;code&gt;this.longValue()&lt;/code&gt;); stating the amount
                  in any other unit may introduce conversion errors.                
                <return>
                    <code>true</code> if this measure is exact;
                      <code>false</code> otherwise.                    
                </return>
            </javadoc>
            <method name="isExact" type="boolean" line="283"/>
            <javadoc line="287">
                Returns the unit in which the {@link #getEstimatedValue()estimated value} and {@link #getAbsoluteError() absolute error}are stated.                
                <return>
                    the measure unit.                    
                </return>
            </javadoc>
            <method name="getUnit" type="Unit<Q>" line="294"/>
            <javadoc line="298">
                Returns the exact value for this measure stated in this measure{@link #getUnit unit}.                
                <return>
                    the exact measure value (<code>long</code>) stated 
                      in this measure's {@link #getUnit unit}                    
                </return>
                <throws>
                    AmountException if this measure is not {@link #isExact()}                    
                </throws>
            </javadoc>
            <method name="getExactValue" type="long" line="306"/>
            <javadoc line="313">
                Returns the estimated value for this measure stated in this measure{@link #getUnit unit}.                
                <return>
                    the median value of the measure interval.                    
                </return>
            </javadoc>
            <method name="getEstimatedValue" type="double" line="319"/>
            <javadoc line="323">
                Returns the lower bound interval value for this measure stated in 
                  this measure unit.                
                <return>
                    the minimum value.                    
                </return>
            </javadoc>
            <method name="getMinimumValue" type="double" line="329"/>
            <javadoc line="333">
                Returns the upper bound interval value for this measure stated in 
                  this measure unit.                
                <return>
                    the maximum value.                    
                </return>
            </javadoc>
            <method name="getMaximumValue" type="double" line="339"/>
            <javadoc line="343">
                Returns the value by which the{@link #getEstimatedValue() estimated 
                  value} may differ from the true value (all stated in base units).                
                <return>
                    the absolute error stated in base units.                    
                </return>
            </javadoc>
            <method name="getAbsoluteError" type="double" line="349"/>
            <javadoc line="353">
                Returns the percentage by which the estimated amount may differ
                  from the true amount.                
                <return>
                    the relative error.                    
                </return>
            </javadoc>
            <method name="getRelativeError" type="double" line="359"/>
            <javadoc line="363">
                Returns the measure equivalent to this measure but stated in the 
                  specified unit. The returned measure may not be exact even if this 
                  measure is exact due to conversion errors.                
                <param>
                    unit the unit of the measure to be returned.                    
                </param>
                <return>
                    a measure equivalent to this measure but stated in the 
                      specified unit.                    
                </return>
                <throws>
                    ConversionException if the current model does not allows for
                      conversion to the specified unit.                    
                </throws>
            </javadoc>
            <method name="to" type="Amount<R>" line="375">
                <params>
                    <param name="unit" type="Unit<R>"/>
                </params>
                <comment line="379">
                    No conversion necessary.                    
                </comment>
                <comment line="384">
                    Exact conversion.                    
                </comment>
                <declaration name="cvtr" type="UnitConverter" line="378"/>
                <scope line="379">
                    <declaration name="result" type="Amount" line="380"/>
                </scope>
                <scope line="384">
                    <declaration name="rc" type="RationalConverter" line="385"/>
                    <declaration name="result" type="Amount" line="386"/>
                </scope>
                <declaration name="result" type="Amount&lt;R&gt;" line="390"/>
                <declaration name="min" type="double" line="391"/>
                <declaration name="max" type="double" line="392"/>
            </method>
            <javadoc line="399">
                Returns the opposite of this measure.                
                <return>
                    <code>-this</code>.                    
                </return>
            </javadoc>
            <method name="opposite" type="Amount<Q>" line="404">
                <declaration name="m" type="Amount&lt;Q&gt;" line="405"/>
            </method>
            <javadoc line="414">
                Returns the sum of this measure with the one specified.                
                <param>
                    that the measure to be added.                    
                </param>
                <return>
                    <code>this + that</code>.                    
                </return>
                <throws>
                    ConversionException if the current model does not allows for
                      these quantities to be added.                    
                </throws>
            </javadoc>
            <method name="plus" type="Amount<Q>" line="423">
                <params>
                    <param name="that" type="Amount"/>
                </params>
                <declaration name="thatToUnit" type="Amount" line="424"/>
                <declaration name="m" type="Amount&lt;Q&gt;" line="425"/>
                <scope line="426">
                    <declaration name="sumLong" type="long" line="427"/>
                    <declaration name="sumDouble" type="double" line="428"/>
                </scope>
                <declaration name="min" type="double" line="433"/>
                <declaration name="max" type="double" line="434"/>
            </method>
            <javadoc line="441">
                Returns the difference of this measure with the one specified.                
                <param>
                    that the measure to be subtracted.                    
                </param>
                <return>
                    <code>this - that</code>.                    
                </return>
                <throws>
                    ConversionException if the current model does not allows for
                      these quantities to be subtracted.                    
                </throws>
            </javadoc>
            <method name="minus" type="Amount<Q>" line="450">
                <params>
                    <param name="that" type="Amount"/>
                </params>
                <declaration name="thatToUnit" type="Amount" line="451"/>
                <declaration name="m" type="Amount&lt;Q&gt;" line="452"/>
                <scope line="453">
                    <declaration name="diffLong" type="long" line="454"/>
                    <declaration name="diffDouble" type="double" line="455"/>
                </scope>
                <declaration name="min" type="double" line="460"/>
                <declaration name="max" type="double" line="461"/>
            </method>
            <javadoc line="468">
                Returns this measure scaled by the specified exact factor 
                  (dimensionless).                
                <param>
                    factor the scaling factor.                    
                </param>
                <return>
                    <code>this · factor</code>.                    
                </return>
            </javadoc>
            <method name="times" type="Amount<Q>" line="475">
                <params>
                    <param name="factor" type="long"/>
                </params>
                <declaration name="m" type="Amount&lt;Q&gt;" line="476"/>
                <scope line="477">
                    <declaration name="productLong" type="long" line="478"/>
                    <declaration name="productDouble" type="double" line="479"/>
                </scope>
            </method>
            <javadoc line="489">
                Returns this measure scaled by the specified approximate factor
                  (dimensionless).                
                <param>
                    factor the scaling factor.                    
                </param>
                <return>
                    <code>this · factor</code>.                    
                </return>
            </javadoc>
            <method name="times" type="Amount<Q>" line="496">
                <params>
                    <param name="factor" type="double"/>
                </params>
                <declaration name="m" type="Amount&lt;Q&gt;" line="497"/>
                <declaration name="min" type="double" line="498"/>
                <declaration name="max" type="double" line="499"/>
            </method>
            <javadoc line="506">
                Returns the product of this measure with the one specified.                
                <param>
                    that the measure multiplier.                    
                </param>
                <return>
                    <code>this · that</code>.                    
                </return>
            </javadoc>
            <method name="times" type="Amount<? extends Quantity>" line="513">
                <params>
                    <param name="that" type="Amount"/>
                </params>
                <comment line="551">
                    Both around zero.                    
                </comment>
                <declaration name="unit" type="Unit&lt;?&gt;" line="514"/>
                <scope line="515">
                    <declaration name="m" type="Amount" line="516"/>
                </scope>
                <declaration name="m" type="Amount&lt;Q&gt;" line="520"/>
                <declaration name="min" type="double" line="521"/>
                <scope line="522">
                    <scope line="523"/>
                    <scope line="526"/>
                    <scope line="529"/>
                </scope>
                <scope line="533">
                    <scope line="534"/>
                    <scope line="537"/>
                    <scope line="540"/>
                </scope>
                <scope line="544">
                    <scope line="545"/>
                    <scope line="548"/>
                    <scope line="551"/>
                </scope>
            </method>
            <javadoc line="564">
                Returns the multiplicative inverse of this measure.
                  If this measure is possibly zero, then the result is unbounded
                  (]-infinity, +infinity[).                
                <return>
                    <code>1 / this</code>.                    
                </return>
            </javadoc>
            <method name="inverse" type="Amount<? extends Quantity>" line="571">
                <comment line="573">
                    Only one exact inverse: one                    
                </comment>
                <comment line="578">
                    Encompass zero.                    
                </comment>
                <declaration name="m" type="Amount&lt;? extends Quantity&gt;" line="572"/>
                <scope line="573"/>
                <scope line="578"/>
                <declaration name="min" type="double" line="583"/>
                <declaration name="max" type="double" line="584"/>
            </method>
            <javadoc line="590">
                Returns this measure divided by the specified exact divisor
                  (dimensionless).                
                <param>
                    divisor the exact divisor.                    
                </param>
                <return>
                    <code>this / divisor</code>.                    
                </return>
                <throws>
                    ArithmeticException if this measure is exact and the 
                      specified divisor is zero.                    
                </throws>
            </javadoc>
            <method name="divide" type="Amount<Q>" line="599">
                <params>
                    <param name="divisor" type="long"/>
                </params>
                <declaration name="m" type="Amount&lt;Q&gt;" line="600"/>
                <scope line="601">
                    <declaration name="quotientLong" type="long" line="602"/>
                    <declaration name="quotientDouble" type="double" line="603"/>
                </scope>
                <declaration name="min" type="double" line="607"/>
                <declaration name="max" type="double" line="608"/>
            </method>
            <javadoc line="615">
                Returns this measure divided by the specified approximate divisor
                  (dimensionless).                
                <param>
                    divisor the approximated divisor.                    
                </param>
                <return>
                    <code>this / divisor</code>.                    
                </return>
            </javadoc>
            <method name="divide" type="Amount<Q>" line="622">
                <params>
                    <param name="divisor" type="double"/>
                </params>
                <declaration name="m" type="Amount&lt;Q&gt;" line="623"/>
                <declaration name="min" type="double" line="624"/>
                <declaration name="max" type="double" line="625"/>
            </method>
            <javadoc line="632">
                Returns this measure divided by the one specified.                
                <param>
                    that the measure divisor.                    
                </param>
                <return>
                    <code>this / that</code>.                    
                </return>
            </javadoc>
            <method name="divide" type="Amount<? extends Quantity>" line="639">
                <params>
                    <param name="that" type="Amount"/>
                </params>
                <scope line="640">
                    <declaration name="m" type="Amount" line="641"/>
                </scope>
            </method>
            <javadoc line="649">
                Returns the absolute value of this measure.                
                <return>
                    <code>|this|</code>.                    
                </return>
            </javadoc>
            <method name="abs" type="Amount<Q>" line="654"/>
            <javadoc line="659">
                Returns the square root of this measure.                
                <return>
                    <code>sqrt(this)</code>                    
                </return>
            </javadoc>
            <method name="sqrt" type="Amount<? extends Quantity>" line="665">
                <declaration name="m" type="Amount&lt;Q&gt;" line="666"/>
                <scope line="667">
                    <declaration name="sqrtDouble" type="double" line="668"/>
                    <declaration name="sqrtLong" type="long" line="669"/>
                </scope>
                <declaration name="min" type="double" line="673"/>
                <declaration name="max" type="double" line="674"/>
            </method>
            <javadoc line="681">
                Returns the given root of this measure.                
                <param>
                    n the root's order (n != 0).                    
                </param>
                <return>
                    the result of taking the given root of this quantity.                    
                </return>
                <throws>
                    ArithmeticException if <code>n == 0</code>.                    
                </throws>
            </javadoc>
            <method name="root" type="Amount<? extends Quantity>" line="688">
                <params>
                    <param name="n" type="int"/>
                </params>
                <declaration name="m" type="Amount&lt;Q&gt;" line="695"/>
                <scope line="696">
                    <declaration name="rootDouble" type="double" line="697"/>
                    <declaration name="rootLong" type="long" line="698"/>
                    <declaration name="thisLong" type="long" line="699"/>
                    <scope line="700"/>
                </scope>
                <declaration name="min" type="double" line="706"/>
                <declaration name="max" type="double" line="707"/>
            </method>
            <javadoc line="714">
                Returns this measure raised at the specified exponent.                
                <param>
                    exp the exponent.                    
                </param>
                <return>
                    <code>this<sup>exp</sup></code>                    
                </return>
            </javadoc>
            <method name="pow" type="Amount<? extends Quantity>" line="720">
                <params>
                    <param name="exp" type="int"/>
                </params>
                <comment line="727">
                    Iteration.                    
                </comment>
                <declaration name="pow2" type="Amount&lt;?&gt;" line="725"/>
                <declaration name="result" type="Amount&lt;?&gt;" line="726"/>
                <scope line="727">
                    <scope line="728"/>
                </scope>
            </method>
            <javadoc line="737">
                Compares this measure with the specified measurable object.                
                <param>
                    that the measure to compare with.                    
                </param>
                <return>
                    a negative integer, zero, or a positive integer as this measure
                      is less than, equal to, or greater than that measurable.                    
                </return>
                <throws>
                    ConversionException if the current model does not allows for
                      these measure to be compared.                    
                </throws>
            </javadoc>
            <method name="compareTo" type="int" line="747">
                <params>
                    <param name="that" type="Measurable<Q>"/>
                </params>
                <declaration name="thatValue" type="double" line="748"/>
            </method>
            <javadoc line="752">
                Compares this measure against the specified object for strict 
                  equality (same value interval and same units).                
                <param>
                    that the object to compare with.                    
                </param>
                <return>
                    <code>true</code> if this measure is identical to that
                      measure; <code>false</code> otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="760">
                <params>
                    <param name="that" type="Object"/>
                </params>
                <declaration name="m" type="Amount&lt;?&gt;" line="765"/>
            </method>
            <javadoc line="779">
                Returns the hash code for this measure.                
                <return>
                    the hash code value.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="784">
                <declaration name="h" type="int" line="785"/>
            </method>
            <javadoc line="792">
                Indicates if this measure approximates that measure.
                  Measures are considered approximately equals if their value intervals
                  overlaps. It should be noted that less accurate measurements are 
                  more likely to be approximately equals. It is therefore recommended
                  to ensure that the measurement error is not too large before testing
                  for approximate equality.                
                <return>
                    <code>this ≅ that</code>                    
                </return>
            </javadoc>
            <method name="approximates" type="boolean" line="803">
                <params>
                    <param name="that" type="Amount"/>
                </params>
                <declaration name="thatToUnit" type="Amount" line="804"/>
            </method>
            <javadoc line="809">
                Indicates if this measure is ordered before that measure
                  (independently of the measure unit).                
                <return>
                    <code>this.compareTo(that) < 0</code>.                    
                </return>
            </javadoc>
            <method name="isLessThan" type="boolean" line="815">
                <params>
                    <param name="that" type="Amount<Q>"/>
                </params>
            </method>
            <javadoc line="819">
                Indicates if this measure is ordered after that measure
                  (independently of the measure unit).                
                <return>
                    <code>this.compareTo(that) > 0</code>.                    
                </return>
            </javadoc>
            <method name="isGreaterThan" type="boolean" line="825">
                <params>
                    <param name="that" type="Amount<Q>"/>
                </params>
            </method>
            <javadoc line="829">
                Compares this measure with that measure ignoring the sign.                
                <return>
                    <code>|this| > |that|</code>                    
                </return>
            </javadoc>
            <method name="isLargerThan" type="boolean" line="834">
                <params>
                    <param name="that" type="Amount<Q>"/>
                </params>
            </method>
            <javadoc line="838">
                Returns the text representation of this measure.                
                <return>
                    <code>AmountFormat.getInstance().format(this)</code>                    
                </return>
            </javadoc>
            <method name="toText" type="Text" line="843"/>
            <javadoc line="847">
                Returns the text representation of this amount as a 
                  &lt;code&gt;java.lang.String&lt;/code&gt;.                
                <return>
                    <code>toText().toString()</code>                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="853"/>
            <method name="doubleValue" type="double" line="858">
                <params>
                    <param name="unit" type="Unit<Q>"/>
                </params>
            </method>
            <method name="longValue" type="long" line="864">
                <params>
                    <param name="unit" type="Unit<Q>"/>
                </params>
                <declaration name="doubleValue" type="double" line="869"/>
            </method>
            <declaration name="MULT_LOOKUP" type="FastMap&lt;Unit&lt;?&gt;,FastMap&lt;Unit&lt;?&gt;,Unit&lt;?&gt;&gt;&gt;" line="880"/>
            <declaration name="INV_LOOKUP" type="FastMap&lt;Unit&lt;?&gt;,Unit&lt;?&gt;&gt;" line="883"/>
            <declaration name="CVTR_LOOKUP" type="FastMap&lt;Unit&lt;?&gt;,FastMap&lt;Unit&lt;?&gt;,UnitConverter&gt;&gt;" line="886"/>
            <method name="productOf" type="Unit<?>" line="889">
                <params>
                    <param name="left" type="Unit<?>"/>
                    <param name="right" type="Unit<?>"/>
                </params>
                <declaration name="leftTable" type="FastMap&lt;Unit&lt;?&gt;,Unit&lt;?&gt;&gt;" line="890"/>
                <declaration name="result" type="Unit&lt;?&gt;" line="893"/>
            </method>
            <method name="calculateProductOf" type="Unit<?>" line="899">
                <params>
                    <param name="left" type="Unit<?>"/>
                    <param name="right" type="Unit<?>"/>
                </params>
                <declaration name="memoryArea" type="MemoryArea" line="900"/>
                <anonymous_class line="901">
                    <method name="run" type="void" line="902">
                        <declaration name="leftTable" type="FastMap&lt;Unit&lt;?&gt;,Unit&lt;?&gt;&gt;" line="903"/>
                        <scope line="904"/>
                        <declaration name="result" type="Unit&lt;?&gt;" line="909"/>
                        <scope line="910"/>
                    </method>
                </anonymous_class>
            </method>
            <method name="inverseOf" type="Unit<?>" line="919">
                <params>
                    <param name="unit" type="Unit<?>"/>
                </params>
                <declaration name="inverse" type="Unit&lt;?&gt;" line="920"/>
            </method>
            <method name="calculateInverseOf" type="Unit<?>" line="926">
                <params>
                    <param name="unit" type="Unit<?>"/>
                </params>
                <declaration name="memoryArea" type="MemoryArea" line="927"/>
                <anonymous_class line="928">
                    <method name="run" type="void" line="929">
                        <declaration name="inverse" type="Unit&lt;?&gt;" line="930"/>
                        <scope line="931"/>
                    </method>
                </anonymous_class>
            </method>
            <method name="converterOf" type="UnitConverter" line="940">
                <params>
                    <param name="left" type="Unit<?>"/>
                    <param name="right" type="Unit<?>"/>
                </params>
                <declaration name="leftTable" type="FastMap&lt;Unit&lt;?&gt;,UnitConverter&gt;" line="941"/>
                <declaration name="result" type="UnitConverter" line="944"/>
            </method>
            <method name="calculateConverterOf" type="UnitConverter" line="951">
                <params>
                    <param name="left" type="Unit<?>"/>
                    <param name="right" type="Unit<?>"/>
                </params>
                <declaration name="memoryArea" type="MemoryArea" line="952"/>
                <anonymous_class line="953">
                    <method name="run" type="void" line="954">
                        <declaration name="leftTable" type="FastMap&lt;Unit&lt;?&gt;,UnitConverter&gt;" line="955"/>
                        <scope line="956">
                            <scope line="959"/>
                        </scope>
                        <declaration name="result" type="UnitConverter" line="963"/>
                        <scope line="964">
                            <scope line="966"/>
                        </scope>
                    </method>
                </anonymous_class>
            </method>
            <method name="copy" type="Amount<Q>" line="975">
                <declaration name="estimate" type="Amount&lt;Q&gt;" line="976"/>
            </method>
            <method name="newInstance" type="Amount<Q>" line="989">
                <params>
                    <param name="unit" type="Unit<?>"/>
                </params>
                <declaration name="measure" type="Amount&lt;Q&gt;" line="990"/>
            </method>
            <method name="copyOf" type="Amount<Q>" line="996">
                <params>
                    <param name="original" type="Amount"/>
                </params>
                <declaration name="measure" type="Amount&lt;Q&gt;" line="997"/>
            </method>
            <declaration name="FACTORY" type="ObjectFactory&lt;Amount&gt;" line="1006"/>
            <anonymous_class line="1007">
                <method name="create" type="Amount" line="1010"/>
            </anonymous_class>
            <method name="Amount" type="constructor" line="1015"/>
            <method name="setExact" type="Amount<Q>" line="1018">
                <params>
                    <param name="exactValue" type="long"/>
                </params>
                <declaration name="doubleValue" type="double" line="1021"/>
                <scope line="1022"/>
                <scope line="1025">
                    <declaration name="valInc" type="double" line="1026"/>
                    <declaration name="valDec" type="double" line="1027"/>
                </scope>
            </method>
            <declaration name="DOUBLE_RELATIVE_ERROR" type="double" line="1034"/>
            <declaration name="DECREMENT" type="double" line="1036"/>
            <declaration name="INCREMENT" type="double" line="1038"/>
            <declaration name="serialVersionUID" type="long" line="1040"/>
        </class>
    </source>