<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.jscience.physics.model">
        <import package="javax.measure.converter.RationalConverter"/>
        <import package="javax.measure.converter.UnitConverter"/>
        <import package="javax.measure.unit.BaseUnit"/>
        <import package="javax.measure.unit.Dimension"/>
        <import package="javax.measure.unit.SI"/>
        <class name="NaturalModel" line="17">
            <extends class="PhysicalModel"/>
            <comment line="46">
                Implements Dimension.Model                
            </comment>
            <comment line="52">
                Implements Dimension.Model                
            </comment>
            <comment line="57">
                // H_BAR (SECOND * JOULE = SECOND * (KILOGRAM / C^2 )) = 1                
            </comment>
            <comment line="58">
                // SPEED_OF_LIGHT (METRE / SECOND) = 1                
            </comment>
            <comment line="59">
                // BOLTZMANN (JOULE / KELVIN = (KILOGRAM / C^2 ) / KELVIN) = 1                
            </comment>
            <comment line="60">
                // MAGNETIC CONSTANT (NEWTON / AMPERE^2) = 1                
            </comment>
            <comment line="61">
                // GRAVITATIONAL CONSTANT (METRE^3 / KILOGRAM / SECOND^2) = 1                
            </comment>
            <comment line="62">
                SI.SECOND.setDimension(NONE, new MultiplyConverter((c * c)                
            </comment>
            <comment line="63">
                * MathLib.sqrt(c / (hBar * G))));                
            </comment>
            <comment line="64">
                SI.METRE.setDimension(NONE, new MultiplyConverter(c                
            </comment>
            <comment line="65">
                * MathLib.sqrt(c / (hBar * G))));                
            </comment>
            <comment line="66">
                SI.KILOGRAM.setDimension(NONE, new MultiplyConverter(MathLib.sqrt(G                
            </comment>
            <comment line="67">
                / (hBar * c))));                
            </comment>
            <comment line="68">
                SI.KELVIN.setDimension(NONE, new MultiplyConverter(k                
            </comment>
            <comment line="69">
                * MathLib.sqrt(G / (hBar * c)) / (c * c)));                
            </comment>
            <comment line="70">
                SI.AMPERE.setDimension(NONE, new MultiplyConverter(MathLib.sqrt(Âµ0 * G)                
            </comment>
            <comment line="71">
                / (c * c)));                
            </comment>
            <comment line="72">
                SI.MOLE.setDimension(AMOUNT_OF_SUBSTANCE, Converter.IDENTITY);                
            </comment>
            <comment line="73">
                SI.CANDELA.setDimension(LUMINOUS_INTENSITY, Converter.IDENTITY);                
            </comment>
            <javadoc line="17">
                This class represents the natural model.                
                <author>
                    <a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a>                    
                </author>
                <version>
                    3.0, February 13, 2006                    
                </version>
                <see>
                    <a href="http://en.wikipedia.org/wiki/Planck_units">
                           Wikipedia: Planck units</a>                    
                </see>
            </javadoc>
            <declaration name="INSTANCE" type="NaturalModel" line="27"/>
            <javadoc line="27">
                Holds the single instance of this class.                
            </javadoc>
            <declaration name="METRE_TO_TIME" type="RationalConverter" line="32"/>
            <javadoc line="32">
                Holds the meter to time transform.                
            </javadoc>
            <javadoc line="38">
                Selects the relativistic model as the current model.                
            </javadoc>
            <method name="select" type="void" line="41"/>
            <method name="getDimension" type="Dimension" line="46">
                <params>
                    <param name="unit" type="BaseUnit<?>"/>
                </params>
            </method>
            <method name="getTransform" type="UnitConverter" line="52">
                <params>
                    <param name="unit" type="BaseUnit<?>"/>
                </params>
            </method>
        </class>
    </source>