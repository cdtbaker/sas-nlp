<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.measure.unit">
        <import package="java.io.IOException"/>
        <import package="java.lang.CharSequence"/>
        <import package="java.text.FieldPosition"/>
        <import package="java.text.Format"/>
        <import package="java.text.ParseException"/>
        <import package="java.text.ParsePosition"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Locale"/>
        <import package="javax.measure.converter.AddConverter"/>
        <import package="javax.measure.converter.MultiplyConverter"/>
        <import package="javax.measure.converter.RationalConverter"/>
        <import package="javax.measure.converter.UnitConverter"/>
        <import package="javax.measure.quantity.Quantity"/>
        <import package="javax.measure.unit.SI"/>
        <class name="UnitFormat" line="16">
            <extends class="Format"/>
            <javadoc line="16">
                &lt;p&gt; This class provides the interface for formatting and parsing {@link Unit units}.&lt;/p&gt;
                  &lt;p&gt; For all {@link SI} units, the 20 SI prefixes used to form decimal
                  multiples and sub-multiples of SI units are recognized.{@link NonSI} units are directly recognized. For example:[code]
                  Unit.valueOf(&quot;mÂ°C&quot;).equals(SI.MILLI(SI.CELSIUS))
                  Unit.valueOf(&quot;kW&quot;).equals(SI.KILO(SI.WATT))
                  Unit.valueOf(&quot;ft&quot;).equals(SI.METER.multiply(0.3048))[/code]&lt;/p&gt;                
                <author>
                    <a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a>                    
                </author>
                <author>
                    Eric Russell                    
                </author>
                <version>
                    1.3, August 29, 2006                    
                </version>
            </javadoc>
            <declaration name="DEFAULT" type="DefaultFormat" line="28"/>
            <javadoc line="28">
                Holds the standard unit format.                
            </javadoc>
            <declaration name="ASCII" type="ASCIIFormat" line="32"/>
            <javadoc line="32">
                Holds the ASCIIFormat unit format.                
            </javadoc>
            <javadoc line="36">
                Returns the unit format for the default locale (format used by {@link Unit#valueOf(CharSequence) Unit.valueOf(CharSequence)} and {@link Unit#toString() Unit.toString()}).                
                <return>
                    the default unit format (locale sensitive).                    
                </return>
            </javadoc>
            <method name="getInstance" type="UnitFormat" line="40"/>
            <javadoc line="43">
                Returns the unit format for the specified locale.                
                <return>
                    the unit format for the specified locale.                    
                </return>
            </javadoc>
            <method name="getInstance" type="UnitFormat" line="47">
                <params>
                    <param name="inLocale" type="Locale"/>
                </params>
            </method>
            <javadoc line="50">
                Returns the &lt;a href=&quot;http://aurora.regenstrief.org/UCUM/ucum.html&quot;&gt;UCUM
                  &lt;/a&gt; international unit format; this format uses characters range
                  &lt;code&gt;0000-007F&lt;/code&gt; exclusively and &lt;b&gt;is not&lt;/b&gt; locale-sensitive.
                  For example: &lt;code&gt;kg.m/s2&lt;/code&gt;                
                <return>
                    the UCUM international format.                    
                </return>
            </javadoc>
            <method name="getUCUMInstance" type="UnitFormat" line="57"/>
            <javadoc line="60">
                Base constructor.                
            </javadoc>
            <method name="UnitFormat" type="constructor" line="63"/>
            <method name="format" type="Appendable" line="65"/>
            <javadoc line="65">
                Formats the specified unit.                
                <param>
                    unit the unit to format.                    
                </param>
                <param>
                    appendable the appendable destination.                    
                </param>
                <throws>
                    IOException if an error occurs.                    
                </throws>
            </javadoc>
            <method name="parseProductUnit" type="Unit<? extends Quantity>" line="72"/>
            <javadoc line="72">
                Parses a sequence of character to produce a unit or a rational product
                  of unit.                
                <param>
                    csq the <code>CharSequence</code> to parse.                    
                </param>
                <param>
                    pos an object holding the parsing index and error position.                    
                </param>
                <return>
                    an {@link Unit} parsed from the character sequence.                    
                </return>
                <throws>
                    IllegalArgumentException if the character sequence contains
                      an illegal syntax.                    
                </throws>
            </javadoc>
            <method name="parseSingleUnit" type="Unit<? extends Quantity>" line="82"/>
            <javadoc line="82">
                Parses a sequence of character to produce a single unit.                
                <param>
                    csq the <code>CharSequence</code> to parse.                    
                </param>
                <param>
                    pos an object holding the parsing index and error position.                    
                </param>
                <return>
                    an {@link Unit} parsed from the character sequence.                    
                </return>
                <throws>
                    IllegalArgumentException if the character sequence does not contain 
                      a valid unit identifier.                    
                </throws>
            </javadoc>
            <method name="label" type="void" line="91"/>
            <javadoc line="91">
                Attaches a system-wide label to the specified unit. For example:
                  [code]
                  UnitFormat.getInstance().label(DAY.multiply(365), &quot;year&quot;);
                  UnitFormat.getInstance().label(METER.multiply(0.3048), &quot;ft&quot;);
                  [/code]
                  If the specified label is already associated to an unit the previous 
                  association is discarded or ignored.                
                <param>
                    unit the unit being labelled.                    
                </param>
                <param>
                    label the new label for this unit.                    
                </param>
                <throws>
                    IllegalArgumentException if the label is not a {@link UnitFormat#isValidIdentifier(String)} valid identifier.                    
                </throws>
            </javadoc>
            <method name="alias" type="void" line="104"/>
            <javadoc line="104">
                Attaches a system-wide alias to this unit. Multiple aliases may
                  be attached to the same unit. Aliases are used during parsing to
                  recognize different variants of the same unit. For example:
                  [code]
                  UnitFormat.getLocaleInstance().alias(METER.multiply(0.3048), &quot;foot&quot;);
                  UnitFormat.getLocaleInstance().alias(METER.multiply(0.3048), &quot;feet&quot;);
                  UnitFormat.getLocaleInstance().alias(METER, &quot;meter&quot;);
                  UnitFormat.getLocaleInstance().alias(METER, &quot;metre&quot;);
                  [/code]
                  If the specified label is already associated to an unit the previous 
                  association is discarded or ignored.                
                <param>
                    unit the unit being aliased.                    
                </param>
                <param>
                    alias the alias attached to this unit.                    
                </param>
                <throws>
                    IllegalArgumentException if the label is not a {@link UnitFormat#isValidIdentifier(String)} valid identifier.                    
                </throws>
            </javadoc>
            <method name="isValidIdentifier" type="boolean" line="121"/>
            <javadoc line="121">
                Indicates if the specified name can be used as unit identifier.                
                <param>
                    name the identifier to be tested.                    
                </param>
                <return>
                    <code>true</code> if the name specified can be used as 
                      label or alias for this format;<code>false</code> otherwise.                    
                </return>
            </javadoc>
            <javadoc line="128">
                Formats an unit and appends the resulting text to a given string
                  buffer (implements &lt;code&gt;java.text.Format&lt;/code&gt;).                
                <param>
                    unit the unit to format.                    
                </param>
                <param>
                    toAppendTo where the text is to be appended                    
                </param>
                <param>
                    pos the field position (not used).                    
                </param>
                <return>
                    <code>toAppendTo</code>                    
                </return>
            </javadoc>
            <method name="format" type="StringBuffer" line="136">
                <params>
                    <param name="unit" type="Object"/>
                    <param name="toAppendTo" type="StringBuffer"/>
                    <param name="pos" type="FieldPosition"/>
                </params>
                <scope line="137">
                    <declaration name="dest" type="Object" line="138"/>
                    <scope line="139"/>
                    <scope line="142">
                        <anonymous_class line="143">
                            <method name="append" type="Appendable" line="144">
                                <params>
                                    <param name="arg0" type="char"/>
                                </params>
                            </method>
                            <method name="append" type="Appendable" line="148">
                                <params>
                                    <param name="arg0" type="CharSequence"/>
                                </params>
                            </method>
                            <method name="append" type="Appendable" line="152">
                                <params>
                                    <param name="arg0" type="CharSequence"/>
                                    <param name="arg1" type="int"/>
                                    <param name="arg2" type="int"/>
                                </params>
                            </method>
                        </anonymous_class>
                    </scope>
                </scope>
                <scope line="161"/>
            </method>
            <javadoc line="165">
                Parses the text from a string to produce an object
                  (implements &lt;code&gt;java.text.Format&lt;/code&gt;).                
                <param>
                    source the string source, part of which should be parsed.                    
                </param>
                <param>
                    pos the cursor position.                    
                </param>
                <return>
                    the corresponding unit or <code>null</code> if the string 
                      cannot be parsed.                    
                </return>
            </javadoc>
            <method name="parseObject" type="Unit<?>" line="173">
                <params>
                    <param name="source" type="String"/>
                    <param name="pos" type="ParsePosition"/>
                </params>
                <declaration name="start" type="int" line="174"/>
                <scope line="175"/>
                <scope line="178"/>
            </method>
            <class name="Exponent" line="184">
                <javadoc line="184">
                    This class represents an exponent with both a power (numerator)
                      and a root (denominator).                    
                </javadoc>
                <declaration name="pow" type="int" line="189"/>
                <declaration name="root" type="int" line="190"/>
                <method name="Exponent" type="constructor" line="191">
                    <params>
                        <param name="pow" type="int"/>
                        <param name="root" type="int"/>
                    </params>
                </method>
            </class>
            <class name="DefaultFormat" line="196">
                <extends class="UnitFormat"/>
                <javadoc line="196">
                    This class represents the standard format.                    
                </javadoc>
                <declaration name="_nameToUnit" type="HashMap&lt;String,Unit&lt;?&gt;&gt;" line="200"/>
                <javadoc line="200">
                    Holds the name to unit mapping.                    
                </javadoc>
                <declaration name="_unitToName" type="HashMap&lt;Unit&lt;?&gt;,String&gt;" line="204"/>
                <javadoc line="204">
                    Holds the unit to name mapping.                    
                </javadoc>
                <method name="label" type="void" line="208">
                    <params>
                        <param name="unit" type="Unit<?>"/>
                        <param name="label" type="String"/>
                    </params>
                    <scope line="210"/>
                </method>
                <method name="alias" type="void" line="215">
                    <params>
                        <param name="unit" type="Unit<?>"/>
                        <param name="alias" type="String"/>
                    </params>
                    <scope line="217"/>
                </method>
                <method name="isValidIdentifier" type="boolean" line="221">
                    <params>
                        <param name="name" type="String"/>
                    </params>
                    <scope line="223"/>
                </method>
                <method name="isUnitIdentifierPart" type="boolean" line="228">
                    <params>
                        <param name="ch" type="char"/>
                    </params>
                </method>
                <method name="nameFor" type="String" line="231">
                    <params>
                        <param name="unit" type="Unit<?>"/>
                    </params>
                </method>
                <method name="unitFor" type="Unit<?>" line="282">
                    <params>
                        <param name="name" type="String"/>
                    </params>
                    <declaration name="unit" type="Unit&lt;?&gt;" line="283"/>
                </method>
                <method name="parseSingleUnit" type="Unit<? extends Quantity>" line="288">
                    <params>
                        <param name="csq" type="CharSequence"/>
                        <param name="pos" type="ParsePosition"/>
                    </params>
                    <declaration name="startIndex" type="int" line="289"/>
                    <declaration name="name" type="String" line="290"/>
                    <declaration name="unit" type="Unit" line="291"/>
                </method>
                <method name="parseProductUnit" type="Unit<? extends Quantity>" line="295">
                    <params>
                        <param name="csq" type="CharSequence"/>
                        <param name="pos" type="ParsePosition"/>
                    </params>
                    <declaration name="result" type="Unit" line="296"/>
                    <declaration name="token" type="int" line="297"/>
                    <scope line="311">
                        <declaration name="e" type="Exponent" line="314"/>
                        <scope line="315"/>
                        <scope line="318"/>
                        <scope line="325">
                            <declaration name="n" type="long" line="326"/>
                            <scope line="327"/>
                        </scope>
                        <scope line="331">
                            <declaration name="d" type="double" line="332"/>
                            <scope line="333"/>
                        </scope>
                        <scope line="337"/>
                        <scope line="344">
                            <declaration name="n" type="long" line="345"/>
                            <scope line="346"/>
                        </scope>
                        <scope line="350">
                            <declaration name="d" type="double" line="351"/>
                            <scope line="352"/>
                        </scope>
                        <scope line="356"/>
                        <scope line="363">
                            <declaration name="n" type="long" line="364"/>
                            <scope line="365"/>
                        </scope>
                        <scope line="369">
                            <declaration name="d" type="double" line="370"/>
                            <scope line="371"/>
                        </scope>
                        <scope line="375"/>
                    </scope>
                </method>
                <declaration name="EOF" type="int" line="388"/>
                <declaration name="IDENTIFIER" type="int" line="389"/>
                <declaration name="OPEN_PAREN" type="int" line="390"/>
                <declaration name="CLOSE_PAREN" type="int" line="391"/>
                <declaration name="EXPONENT" type="int" line="392"/>
                <declaration name="MULTIPLY" type="int" line="393"/>
                <declaration name="DIVIDE" type="int" line="394"/>
                <declaration name="PLUS" type="int" line="395"/>
                <declaration name="INTEGER" type="int" line="396"/>
                <declaration name="FLOAT" type="int" line="397"/>
                <method name="nextToken" type="int" line="398">
                    <params>
                        <param name="csq" type="CharSequence"/>
                        <param name="pos" type="ParsePosition"/>
                    </params>
                </method>
                <method name="check" type="void" line="446">
                    <params>
                        <param name="expr" type="boolean"/>
                        <param name="message" type="String"/>
                        <param name="csq" type="CharSequence"/>
                        <param name="index" type="int"/>
                    </params>
                    <scope line="447"/>
                </method>
                <method name="readExponent" type="Exponent" line="451">
                    <params>
                        <param name="csq" type="CharSequence"/>
                        <param name="pos" type="ParsePosition"/>
                    </params>
                </method>
                <method name="readLong" type="long" line="519">
                    <params>
                        <param name="csq" type="CharSequence"/>
                        <param name="pos" type="ParsePosition"/>
                    </params>
                    <declaration name="length" type="int" line="520"/>
                    <declaration name="result" type="int" line="521"/>
                    <declaration name="isNegative" type="boolean" line="522"/>
                    <scope line="523">
                        <declaration name="c" type="char" line="524"/>
                        <scope line="525"/>
                        <scope line="528"/>
                        <scope line="531"/>
                    </scope>
                </method>
                <method name="readDouble" type="double" line="538">
                    <params>
                        <param name="csq" type="CharSequence"/>
                        <param name="pos" type="ParsePosition"/>
                    </params>
                    <declaration name="length" type="int" line="539"/>
                    <declaration name="start" type="int" line="540"/>
                    <declaration name="end" type="int" line="541"/>
                    <scope line="542">
                        <scope line="543"/>
                    </scope>
                </method>
                <method name="readIdentifier" type="String" line="551">
                    <params>
                        <param name="csq" type="CharSequence"/>
                        <param name="pos" type="ParsePosition"/>
                    </params>
                    <declaration name="length" type="int" line="552"/>
                    <declaration name="start" type="int" line="553"/>
                    <declaration name="i" type="int" line="554"/>
                    <scope line="555"/>
                </method>
                <method name="format" type="Appendable" line="560">
                    <params>
                        <param name="unit" type="Unit<?>"/>
                        <param name="appendable" type="Appendable"/>
                    </params>
                </method>
                <method name="append" type="void" line="609">
                    <params>
                        <param name="appendable" type="Appendable"/>
                        <param name="symbol" type="CharSequence"/>
                        <param name="pow" type="int"/>
                        <param name="root" type="int"/>
                    </params>
                </method>
                <declaration name="serialVersionUID" type="long" line="628"/>
            </class>
            <class name="ASCIIFormat" line="630">
                <extends class="DefaultFormat"/>
                <javadoc line="630">
                    This class represents the ASCIIFormat format.                    
                </javadoc>
                <method name="nameFor" type="String" line="634">
                    <params>
                        <param name="unit" type="Unit<?>"/>
                    </params>
                    <declaration name="name" type="String" line="635"/>
                </method>
                <method name="unitFor" type="Unit<?>" line="639">
                    <params>
                        <param name="name" type="String"/>
                    </params>
                    <declaration name="unit" type="Unit&lt;?&gt;" line="640"/>
                </method>
                <method name="format" type="Appendable" line="644">
                    <params>
                        <param name="unit" type="Unit<?>"/>
                        <param name="appendable" type="Appendable"/>
                    </params>
                    <declaration name="name" type="String" line="645"/>
                    <declaration name="productUnit" type="ProductUnit&lt;?&gt;" line="648"/>
                    <scope line="649">
                        <scope line="650"/>
                        <declaration name="pow" type="int" line="654"/>
                        <declaration name="root" type="int" line="655"/>
                        <scope line="657">
                            <scope line="660"/>
                        </scope>
                    </scope>
                </method>
                <declaration name="serialVersionUID" type="long" line="668"/>
            </class>
            <declaration name="SI_UNITS" type="Unit&lt;?&gt;[]" line="670"/>
            <declaration name="PREFIXES" type="String[]" line="671"/>
            <declaration name="CONVERTERS" type="UnitConverter[]" line="672"/>
            <method name="asciiPrefix" type="String" line="673">
                <params>
                    <param name="prefix" type="String"/>
                </params>
            </method>
            <scope line="676">
                <scope line="677">
                    <scope line="678">
                        <declaration name="si" type="Unit&lt;?&gt;" line="679"/>
                        <declaration name="u" type="Unit&lt;?&gt;" line="680"/>
                        <declaration name="symbol" type="String" line="681"/>
                        <scope line="683"/>
                    </scope>
                </scope>
                <scope line="689">
                    <scope line="692"/>
                </scope>
                <scope line="698"/>
                <scope line="705"/>
            </scope>
            <scope line="711">
                <scope line="800"/>
            </scope>
        </class>
    </source>