<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.measure.unit">
        <import package="java.util.Collections"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.Set"/>
        <import package="javax.measure.converter.MultiplyConverter"/>
        <import package="javax.measure.converter.RationalConverter"/>
        <import package="javax.measure.quantity"/>
        <class name="SI" line="8">
            <extends class="SystemOfUnits"/>
            <javadoc line="8">
                &lt;p&gt; This class contains SI (Système International d&apos;Unités) base units,
                  and derived units.&lt;/p&gt;
                  &lt;p&gt; It also defines the 20 SI prefixes used to form decimal multiples and
                  submultiples of SI units. For example:[code]
                  import static org.jscience.physics.units.SI.; // Static import.
                  ...
                  Unit&lt;Pressure&gt; HECTO_PASCAL = HECTO(PASCAL);
                  Unit&lt;Length&gt; KILO_METER = KILO(METER);
                  [/code]&lt;/p&gt;                
                <author>
                    <a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a>                    
                </author>
                <version>
                    4.2, August 26, 2006                    
                </version>
                <see>
                    <a href="http://en.wikipedia.org/wiki/SI">Wikipedia: SI</a>                    
                </see>
                <see>
                    <a href="http://en.wikipedia.org/wiki/SI_prefix">Wikipedia: SI prefix</a>                    
                </see>
            </javadoc>
            <declaration name="UNITS" type="HashSet&lt;Unit&lt;?&gt;&gt;" line="24"/>
            <javadoc line="24">
                Holds collection of SI units.                
            </javadoc>
            <javadoc line="28">
                Default constructor (prevents this class from being instantiated).                
            </javadoc>
            <method name="SI" type="constructor" line="31"/>
            <javadoc line="33">
                Returns the unique instance of this class.                
                <return>
                    the SI instance.                    
                </return>
            </javadoc>
            <method name="getInstance" type="SI" line="37"/>
            <declaration name="INSTANCE" type="SI" line="40"/>
            <declaration name="AMPERE" type="BaseUnit&lt;ElectricCurrent&gt;" line="41"/>
            <javadoc line="41">
                The base unit for electric current quantities (&lt;code&gt;A&lt;/code&gt;).
                  The Ampere is that constant current which, if maintained in two straight
                  parallel conductors of infinite length, of negligible circular
                  cross-section, and placed 1 metre apart in vacuum, would produce between
                  these conductors a force equal to 2 × 10-7 newton per metre of length.
                  It is named after the French physicist Andre Ampere (1775-1836).                
            </javadoc>
            <declaration name="CANDELA" type="BaseUnit&lt;LuminousIntensity&gt;" line="50"/>
            <javadoc line="50">
                The base unit for luminous intensity quantities (&lt;code&gt;cd&lt;/code&gt;).
                  The candela is the luminous intensity, in a given direction,
                  of a source that emits monochromatic radiation of frequency
                  540 × 1012 hertz and that has a radiant intensity in that
                  direction of 1/683 watt per steradian                
                <see>
                    <a href="http://en.wikipedia.org/wiki/Candela"> 
                               Wikipedia: Candela</a>                    
                </see>
            </javadoc>
            <declaration name="KELVIN" type="BaseUnit&lt;Temperature&gt;" line="60"/>
            <javadoc line="60">
                The base unit for thermodynamic temperature quantities (&lt;code&gt;K&lt;/code&gt;).
                  The kelvin is the 1/273.16th of the thermodynamic temperature of the
                  triple point of water. It is named after the Scottish mathematician and
                  physicist William Thomson 1st Lord Kelvin (1824-1907)                
            </javadoc>
            <declaration name="KILOGRAM" type="BaseUnit&lt;Mass&gt;" line="67"/>
            <javadoc line="67">
                The base unit for mass quantities (&lt;code&gt;kg&lt;/code&gt;).
                  It is the only SI unit with a prefix as part of its name and symbol.
                  The kilogram is equal to the mass of an international prototype in the
                  form of a platinum-iridium cylinder kept at Sevres in France.                
                <see>
                    #GRAM                    
                </see>
            </javadoc>
            <declaration name="METRE" type="BaseUnit&lt;Length&gt;" line="75"/>
            <javadoc line="75">
                The base unit for length quantities (&lt;code&gt;m&lt;/code&gt;).
                  One meter was redefined in 1983 as the distance traveled by light in
                  a vacuum in 1/299,792,458 of a second.                
            </javadoc>
            <declaration name="METER" type="Unit&lt;Length&gt;" line="81"/>
            <javadoc line="81">
                Equivalent to {@link #METRE} (American spelling).                
            </javadoc>
            <declaration name="MOLE" type="BaseUnit&lt;AmountOfSubstance&gt;" line="85"/>
            <javadoc line="85">
                The base unit for amount of substance quantities (&lt;code&gt;mol&lt;/code&gt;).
                  The mole is the amount of substance of a system which contains as many
                  elementary entities as there are atoms in 0.012 kilogram of carbon 12.                
            </javadoc>
            <declaration name="SECOND" type="BaseUnit&lt;Duration&gt;" line="91"/>
            <javadoc line="91">
                The base unit for duration quantities (&lt;code&gt;s&lt;/code&gt;).
                  It is defined as the duration of 9,192,631,770 cycles of radiation
                  corresponding to the transition between two hyperfine levels of
                  the ground state of cesium (1967 Standard).                
            </javadoc>
            <declaration name="GRAM" type="Unit&lt;Mass&gt;" line="98"/>
            <javadoc line="98">
                The derived unit for mass quantities (&lt;code&gt;g&lt;/code&gt;).
                  The base unit for mass quantity is {@link #KILOGRAM}.                
            </javadoc>
            <declaration name="RADIAN" type="AlternateUnit&lt;Angle&gt;" line="103"/>
            <javadoc line="103">
                The unit for plane angle quantities (&lt;code&gt;rad&lt;/code&gt;).
                  One radian is the angle between two radii of a circle such that the
                  length of the arc between them is equal to the radius.                
            </javadoc>
            <declaration name="STERADIAN" type="AlternateUnit&lt;SolidAngle&gt;" line="109"/>
            <javadoc line="109">
                The unit for solid angle quantities (&lt;code&gt;sr&lt;/code&gt;).
                  One steradian is the solid angle subtended at the center of a sphere by
                  an area on the surface of the sphere that is equal to the radius squared.
                  The total solid angle of a sphere is 4Pi steradians.                
            </javadoc>
            <declaration name="BIT" type="AlternateUnit&lt;DataAmount&gt;" line="116"/>
            <javadoc line="116">
                The unit for binary information (&lt;code&gt;bit&lt;/code&gt;).                
            </javadoc>
            <declaration name="HERTZ" type="AlternateUnit&lt;Frequency&gt;" line="120"/>
            <javadoc line="120">
                The derived unit for frequency (&lt;code&gt;Hz&lt;/code&gt;).
                  A unit of frequency equal to one cycle per second.
                  After Heinrich Rudolf Hertz (1857-1894), German physicist who was the
                  first to produce radio waves artificially.                
            </javadoc>
            <declaration name="NEWTON" type="AlternateUnit&lt;Force&gt;" line="127"/>
            <javadoc line="127">
                The derived unit for force (&lt;code&gt;N&lt;/code&gt;).
                  One newton is the force required to give a mass of 1 kilogram an Force
                  of 1 metre per second per second. It is named after the English
                  mathematician and physicist Sir Isaac Newton (1642-1727).                
            </javadoc>
            <declaration name="PASCAL" type="AlternateUnit&lt;Pressure&gt;" line="134"/>
            <javadoc line="134">
                The derived unit for pressure, stress (&lt;code&gt;Pa&lt;/code&gt;).
                  One pascal is equal to one newton per square meter. It is named after
                  the French philosopher and mathematician Blaise Pascal (1623-1662).                
            </javadoc>
            <declaration name="JOULE" type="AlternateUnit&lt;Energy&gt;" line="140"/>
            <javadoc line="140">
                The derived unit for energy, work, quantity of heat (&lt;code&gt;J&lt;/code&gt;).
                  One joule is the amount of work done when an applied force of 1 newton
                  moves through a distance of 1 metre in the direction of the force.
                  It is named after the English physicist James Prescott Joule (1818-1889).                
            </javadoc>
            <declaration name="WATT" type="AlternateUnit&lt;Power&gt;" line="147"/>
            <javadoc line="147">
                The derived unit for power, radiant, flux (&lt;code&gt;W&lt;/code&gt;).
                  One watt is equal to one joule per second. It is named after the British
                  scientist James Watt (1736-1819).                
            </javadoc>
            <declaration name="COULOMB" type="AlternateUnit&lt;ElectricCharge&gt;" line="153"/>
            <javadoc line="153">
                The derived unit for electric charge, quantity of electricity
                  (&lt;code&gt;C&lt;/code&gt;).
                  One Coulomb is equal to the quantity of charge transferred in one second
                  by a steady current of one ampere. It is named after the French physicist
                  Charles Augustin de Coulomb (1736-1806).                
            </javadoc>
            <declaration name="VOLT" type="AlternateUnit&lt;ElectricPotential&gt;" line="161"/>
            <javadoc line="161">
                The derived unit for electric potential difference, electromotive force
                  (&lt;code&gt;V&lt;/code&gt;).
                  One Volt is equal to the difference of electric potential between two
                  points on a conducting wire carrying a constant current of one ampere
                  when the power dissipated between the points is one watt. It is named
                  after the Italian physicist Count Alessandro Volta (1745-1827).                
            </javadoc>
            <declaration name="FARAD" type="AlternateUnit&lt;ElectricCapacitance&gt;" line="170"/>
            <javadoc line="170">
                The derived unit for capacitance (&lt;code&gt;F&lt;/code&gt;).
                  One Farad is equal to the capacitance of a capacitor having an equal
                  and opposite charge of 1 coulomb on each plate and a potential difference
                  of 1 volt between the plates. It is named after the British physicist
                  and chemist Michael Faraday (1791-1867).                
            </javadoc>
            <declaration name="OHM" type="AlternateUnit&lt;ElectricResistance&gt;" line="178"/>
            <javadoc line="178">
                The derived unit for electric resistance (&lt;code&gt;Ω&lt;/code&gt; or 
                  &lt;code&gt;Ohm&lt;/code&gt;).
                  One Ohm is equal to the resistance of a conductor in which a current of
                  one ampere is produced by a potential of one volt across its terminals.
                  It is named after the German physicist Georg Simon Ohm (1789-1854).                
            </javadoc>
            <declaration name="SIEMENS" type="AlternateUnit&lt;ElectricConductance&gt;" line="186"/>
            <javadoc line="186">
                The derived unit for electric conductance (&lt;code&gt;S&lt;/code&gt;).
                  One Siemens is equal to one ampere per volt. It is named after
                  the German engineer Ernst Werner von Siemens (1816-1892).                
            </javadoc>
            <declaration name="WEBER" type="AlternateUnit&lt;MagneticFlux&gt;" line="192"/>
            <javadoc line="192">
                The derived unit for magnetic flux (&lt;code&gt;Wb&lt;/code&gt;).
                  One Weber is equal to the magnetic flux that in linking a circuit of one
                  turn produces in it an electromotive force of one volt as it is uniformly
                  reduced to zero within one second. It is named after the German physicist
                  Wilhelm Eduard Weber (1804-1891).                
            </javadoc>
            <declaration name="TESLA" type="AlternateUnit&lt;MagneticFluxDensity&gt;" line="200"/>
            <javadoc line="200">
                The derived unit for magnetic flux density (&lt;code&gt;T&lt;/code&gt;).
                  One Tesla is equal equal to one weber per square meter. It is named
                  after the Serbian-born American electrical engineer and physicist
                  Nikola Tesla (1856-1943).                
            </javadoc>
            <declaration name="HENRY" type="AlternateUnit&lt;ElectricInductance&gt;" line="207"/>
            <javadoc line="207">
                The derived unit for inductance (&lt;code&gt;H&lt;/code&gt;).
                  One Henry is equal to the inductance for which an induced electromotive
                  force of one volt is produced when the current is varied at the rate of
                  one ampere per second. It is named after the American physicist
                  Joseph Henry (1791-1878).                
            </javadoc>
            <declaration name="CELSIUS" type="Unit&lt;Temperature&gt;" line="215"/>
            <javadoc line="215">
                The derived unit for Celsius temperature (&lt;code&gt;℃&lt;/code&gt;).
                  This is a unit of temperature such as the freezing point of water
                  (at one atmosphere of pressure) is 0 ℃, while the boiling point is
                  100 ℃.                
            </javadoc>
            <declaration name="LUMEN" type="AlternateUnit&lt;LuminousFlux&gt;" line="222"/>
            <javadoc line="222">
                The derived unit for luminous flux (&lt;code&gt;lm&lt;/code&gt;).
                  One Lumen is equal to the amount of light given out through a solid angle
                  by a source of one candela intensity radiating equally in all directions.                
            </javadoc>
            <declaration name="LUX" type="AlternateUnit&lt;Illuminance&gt;" line="228"/>
            <javadoc line="228">
                The derived unit for illuminance (&lt;code&gt;lx&lt;/code&gt;).
                  One Lux is equal to one lumen per square meter.                
            </javadoc>
            <declaration name="BECQUEREL" type="AlternateUnit&lt;RadioactiveActivity&gt;" line="233"/>
            <javadoc line="233">
                The derived unit for activity of a radionuclide (&lt;code&gt;Bq&lt;/code&gt;).
                  One becquerel is the radiation caused by one disintegration per second.
                  It is named after the French physicist, Antoine-Henri Becquerel
                  (1852-1908).                
            </javadoc>
            <declaration name="GRAY" type="AlternateUnit&lt;RadiationDoseAbsorbed&gt;" line="240"/>
            <javadoc line="240">
                The derived unit for absorbed dose, specific energy (imparted), kerma
                  (&lt;code&gt;Gy&lt;/code&gt;).
                  One gray is equal to the dose of one joule of energy absorbed per one
                  kilogram of matter. It is named after the British physician
                  L. H. Gray (1905-1965).                
            </javadoc>
            <declaration name="SIEVERT" type="AlternateUnit&lt;RadiationDoseEffective&gt;" line="248"/>
            <javadoc line="248">
                The derived unit for dose equivalent (&lt;code&gt;Sv&lt;/code&gt;).
                  One Sievert is equal  is equal to the actual dose, in grays, multiplied
                  by a &quot;quality factor&quot; which is larger for more dangerous forms of
                  radiation. It is named after the Swedish physicist Rolf Sievert
                  (1898-1966).                
            </javadoc>
            <declaration name="KATAL" type="AlternateUnit&lt;CatalyticActivity&gt;" line="256"/>
            <javadoc line="256">
                The derived unit for catalytic activity (&lt;code&gt;kat&lt;/code&gt;).                
            </javadoc>
            <declaration name="METRES_PER_SECOND" type="Unit&lt;Velocity&gt;" line="260"/>
            <javadoc line="260">
                The metric unit for velocity quantities (&lt;code&gt;m/s&lt;/code&gt;).                
            </javadoc>
            <declaration name="METERS_PER_SECOND" type="Unit&lt;Velocity&gt;" line="264"/>
            <javadoc line="264">
                Equivalent to {@link #METRES_PER_SECOND}.                
            </javadoc>
            <declaration name="METRES_PER_SQUARE_SECOND" type="Unit&lt;Acceleration&gt;" line="268"/>
            <javadoc line="268">
                The metric unit for acceleration quantities (&lt;code&gt;m/s²&lt;/code&gt;).                
            </javadoc>
            <declaration name="METERS_PER_SQUARE_SECOND" type="Unit&lt;Acceleration&gt;" line="272"/>
            <javadoc line="272">
                Equivalent to {@link #METRES_PER_SQUARE_SECOND}.                
            </javadoc>
            <declaration name="SQUARE_METRE" type="Unit&lt;Area&gt;" line="276"/>
            <javadoc line="276">
                The metric unit for area quantities (&lt;code&gt;m²&lt;/code&gt;).                
            </javadoc>
            <declaration name="CUBIC_METRE" type="Unit&lt;Volume&gt;" line="280"/>
            <javadoc line="280">
                The metric unit for volume quantities (&lt;code&gt;m³&lt;/code&gt;).                
            </javadoc>
            <declaration name="KILOMETRE" type="Unit&lt;Length&gt;" line="284"/>
            <javadoc line="284">
                Equivalent to &lt;code&gt;KILO(METRE)&lt;/code&gt;.                
            </javadoc>
            <declaration name="KILOMETER" type="Unit&lt;Length&gt;" line="288"/>
            <javadoc line="288">
                Equivalent to {@link #KILOMETRE}.                
            </javadoc>
            <declaration name="CENTIMETRE" type="Unit&lt;Length&gt;" line="292"/>
            <javadoc line="292">
                Equivalent to &lt;code&gt;CENTI(METRE)&lt;/code&gt;.                
            </javadoc>
            <declaration name="CENTIMETER" type="Unit&lt;Length&gt;" line="296"/>
            <javadoc line="296">
                Equivalent to {@link #CENTIMETRE}.                
            </javadoc>
            <declaration name="MILLIMETRE" type="Unit&lt;Length&gt;" line="300"/>
            <javadoc line="300">
                Equivalent to &lt;code&gt;MILLI(METRE)&lt;/code&gt;.                
            </javadoc>
            <declaration name="MILLIMETER" type="Unit&lt;Length&gt;" line="304"/>
            <javadoc line="304">
                Equivalent to {@link #MILLIMETRE}.                
            </javadoc>
            <javadoc line="308">
                Returns the specified unit multiplied by the factor
                  &lt;code&gt;10&lt;sup&gt;24&lt;/sup&gt;&lt;/code&gt;                
                <param>
                    unit any unit.                    
                </param>
                <return>
                    <code>unit.multiply(1e24)</code>.                    
                </return>
            </javadoc>
            <method name="YOTTA" type="Unit<Q>" line="314">
                <params>
                    <param name="unit" type="Unit<Q>"/>
                </params>
            </method>
            <javadoc line="317">
                Returns the specified unit multiplied by the factor
                  &lt;code&gt;10&lt;sup&gt;21&lt;/sup&gt;&lt;/code&gt;                
                <param>
                    unit any unit.                    
                </param>
                <return>
                    <code>unit.multiply(1e21)</code>.                    
                </return>
            </javadoc>
            <method name="ZETTA" type="Unit<Q>" line="323">
                <params>
                    <param name="unit" type="Unit<Q>"/>
                </params>
            </method>
            <javadoc line="326">
                Returns the specified unit multiplied by the factor
                  &lt;code&gt;10&lt;sup&gt;18&lt;/sup&gt;&lt;/code&gt;                
                <param>
                    unit any unit.                    
                </param>
                <return>
                    <code>unit.multiply(1e18)</code>.                    
                </return>
            </javadoc>
            <method name="EXA" type="Unit<Q>" line="332">
                <params>
                    <param name="unit" type="Unit<Q>"/>
                </params>
            </method>
            <javadoc line="335">
                Returns the specified unit multiplied by the factor
                  &lt;code&gt;10&lt;sup&gt;15&lt;/sup&gt;&lt;/code&gt;                
                <param>
                    unit any unit.                    
                </param>
                <return>
                    <code>unit.multiply(1e15)</code>.                    
                </return>
            </javadoc>
            <method name="PETA" type="Unit<Q>" line="341">
                <params>
                    <param name="unit" type="Unit<Q>"/>
                </params>
            </method>
            <javadoc line="344">
                Returns the specified unit multiplied by the factor
                  &lt;code&gt;10&lt;sup&gt;12&lt;/sup&gt;&lt;/code&gt;                
                <param>
                    unit any unit.                    
                </param>
                <return>
                    <code>unit.multiply(1e12)</code>.                    
                </return>
            </javadoc>
            <method name="TERA" type="Unit<Q>" line="350">
                <params>
                    <param name="unit" type="Unit<Q>"/>
                </params>
            </method>
            <javadoc line="353">
                Returns the specified unit multiplied by the factor
                  &lt;code&gt;10&lt;sup&gt;9&lt;/sup&gt;&lt;/code&gt;                
                <param>
                    unit any unit.                    
                </param>
                <return>
                    <code>unit.multiply(1e9)</code>.                    
                </return>
            </javadoc>
            <method name="GIGA" type="Unit<Q>" line="359">
                <params>
                    <param name="unit" type="Unit<Q>"/>
                </params>
            </method>
            <javadoc line="362">
                Returns the specified unit multiplied by the factor
                  &lt;code&gt;10&lt;sup&gt;6&lt;/sup&gt;&lt;/code&gt;                
                <param>
                    unit any unit.                    
                </param>
                <return>
                    <code>unit.multiply(1e6)</code>.                    
                </return>
            </javadoc>
            <method name="MEGA" type="Unit<Q>" line="368">
                <params>
                    <param name="unit" type="Unit<Q>"/>
                </params>
            </method>
            <javadoc line="371">
                Returns the specified unit multiplied by the factor
                  &lt;code&gt;10&lt;sup&gt;3&lt;/sup&gt;&lt;/code&gt;                
                <param>
                    unit any unit.                    
                </param>
                <return>
                    <code>unit.multiply(1e3)</code>.                    
                </return>
            </javadoc>
            <method name="KILO" type="Unit<Q>" line="377">
                <params>
                    <param name="unit" type="Unit<Q>"/>
                </params>
            </method>
            <javadoc line="380">
                Returns the specified unit multiplied by the factor
                  &lt;code&gt;10&lt;sup&gt;2&lt;/sup&gt;&lt;/code&gt;                
                <param>
                    unit any unit.                    
                </param>
                <return>
                    <code>unit.multiply(1e2)</code>.                    
                </return>
            </javadoc>
            <method name="HECTO" type="Unit<Q>" line="386">
                <params>
                    <param name="unit" type="Unit<Q>"/>
                </params>
            </method>
            <javadoc line="389">
                Returns the specified unit multiplied by the factor
                  &lt;code&gt;10&lt;sup&gt;1&lt;/sup&gt;&lt;/code&gt;                
                <param>
                    unit any unit.                    
                </param>
                <return>
                    <code>unit.multiply(1e1)</code>.                    
                </return>
            </javadoc>
            <method name="DEKA" type="Unit<Q>" line="395">
                <params>
                    <param name="unit" type="Unit<Q>"/>
                </params>
            </method>
            <javadoc line="398">
                Returns the specified unit multiplied by the factor
                  &lt;code&gt;10&lt;sup&gt;-1&lt;/sup&gt;&lt;/code&gt;                
                <param>
                    unit any unit.                    
                </param>
                <return>
                    <code>unit.multiply(1e-1)</code>.                    
                </return>
            </javadoc>
            <method name="DECI" type="Unit<Q>" line="404">
                <params>
                    <param name="unit" type="Unit<Q>"/>
                </params>
            </method>
            <javadoc line="407">
                Returns the specified unit multiplied by the factor
                  &lt;code&gt;10&lt;sup&gt;-2&lt;/sup&gt;&lt;/code&gt;                
                <param>
                    unit any unit.                    
                </param>
                <return>
                    <code>unit.multiply(1e-2)</code>.                    
                </return>
            </javadoc>
            <method name="CENTI" type="Unit<Q>" line="413">
                <params>
                    <param name="unit" type="Unit<Q>"/>
                </params>
            </method>
            <javadoc line="416">
                Returns the specified unit multiplied by the factor
                  &lt;code&gt;10&lt;sup&gt;-3&lt;/sup&gt;&lt;/code&gt;                
                <param>
                    unit any unit.                    
                </param>
                <return>
                    <code>unit.multiply(1e-3)</code>.                    
                </return>
            </javadoc>
            <method name="MILLI" type="Unit<Q>" line="422">
                <params>
                    <param name="unit" type="Unit<Q>"/>
                </params>
            </method>
            <javadoc line="425">
                Returns the specified unit multiplied by the factor
                  &lt;code&gt;10&lt;sup&gt;-6&lt;/sup&gt;&lt;/code&gt;                
                <param>
                    unit any unit.                    
                </param>
                <return>
                    <code>unit.multiply(1e-6)</code>.                    
                </return>
            </javadoc>
            <method name="MICRO" type="Unit<Q>" line="431">
                <params>
                    <param name="unit" type="Unit<Q>"/>
                </params>
            </method>
            <javadoc line="434">
                Returns the specified unit multiplied by the factor
                  &lt;code&gt;10&lt;sup&gt;-9&lt;/sup&gt;&lt;/code&gt;                
                <param>
                    unit any unit.                    
                </param>
                <return>
                    <code>unit.multiply(1e-9)</code>.                    
                </return>
            </javadoc>
            <method name="NANO" type="Unit<Q>" line="440">
                <params>
                    <param name="unit" type="Unit<Q>"/>
                </params>
            </method>
            <javadoc line="443">
                Returns the specified unit multiplied by the factor
                  &lt;code&gt;10&lt;sup&gt;-12&lt;/sup&gt;&lt;/code&gt;                
                <param>
                    unit any unit.                    
                </param>
                <return>
                    <code>unit.multiply(1e-12)</code>.                    
                </return>
            </javadoc>
            <method name="PICO" type="Unit<Q>" line="449">
                <params>
                    <param name="unit" type="Unit<Q>"/>
                </params>
            </method>
            <javadoc line="452">
                Returns the specified unit multiplied by the factor
                  &lt;code&gt;10&lt;sup&gt;-15&lt;/sup&gt;&lt;/code&gt;                
                <param>
                    unit any unit.                    
                </param>
                <return>
                    <code>unit.multiply(1e-15)</code>.                    
                </return>
            </javadoc>
            <method name="FEMTO" type="Unit<Q>" line="458">
                <params>
                    <param name="unit" type="Unit<Q>"/>
                </params>
            </method>
            <javadoc line="461">
                Returns the specified unit multiplied by the factor
                  &lt;code&gt;10&lt;sup&gt;-18&lt;/sup&gt;&lt;/code&gt;                
                <param>
                    unit any unit.                    
                </param>
                <return>
                    <code>unit.multiply(1e-18)</code>.                    
                </return>
            </javadoc>
            <method name="ATTO" type="Unit<Q>" line="467">
                <params>
                    <param name="unit" type="Unit<Q>"/>
                </params>
            </method>
            <javadoc line="470">
                Returns the specified unit multiplied by the factor
                  &lt;code&gt;10&lt;sup&gt;-21&lt;/sup&gt;&lt;/code&gt;                
                <param>
                    unit any unit.                    
                </param>
                <return>
                    <code>unit.multiply(1e-21)</code>.                    
                </return>
            </javadoc>
            <method name="ZEPTO" type="Unit<Q>" line="476">
                <params>
                    <param name="unit" type="Unit<Q>"/>
                </params>
            </method>
            <javadoc line="479">
                Returns the specified unit multiplied by the factor
                  &lt;code&gt;10&lt;sup&gt;-24&lt;/sup&gt;&lt;/code&gt;                
                <param>
                    unit any unit.                    
                </param>
                <return>
                    <code>unit.multiply(1e-24)</code>.                    
                </return>
            </javadoc>
            <method name="YOCTO" type="Unit<Q>" line="485">
                <params>
                    <param name="unit" type="Unit<Q>"/>
                </params>
            </method>
            <javadoc line="488">
                Returns a read only view over theunits defined in this class.                
                <return>
                    the collection of SI units.                    
                </return>
            </javadoc>
            <method name="getUnits" type="Set<Unit<?>>" line="492"/>
            <javadoc line="495">
                Adds a new unit to the collection.                
                <param>
                    unit the unit being added.                    
                </param>
                <return>
                    <code>unit</code>.                    
                </return>
            </javadoc>
            <method name="si" type="U" line="500">
                <params>
                    <param name="unit" type="U"/>
                </params>
            </method>
            <declaration name="E24" type="MultiplyConverter" line="504"/>
            <declaration name="E21" type="MultiplyConverter" line="505"/>
            <declaration name="E18" type="RationalConverter" line="506"/>
            <declaration name="E15" type="RationalConverter" line="507"/>
            <declaration name="E12" type="RationalConverter" line="508"/>
            <declaration name="E9" type="RationalConverter" line="509"/>
            <declaration name="E6" type="RationalConverter" line="510"/>
            <declaration name="E3" type="RationalConverter" line="511"/>
            <declaration name="E2" type="RationalConverter" line="512"/>
            <declaration name="E1" type="RationalConverter" line="513"/>
            <declaration name="Em1" type="RationalConverter" line="514"/>
            <declaration name="Em2" type="RationalConverter" line="515"/>
            <declaration name="Em3" type="RationalConverter" line="516"/>
            <declaration name="Em6" type="RationalConverter" line="517"/>
            <declaration name="Em9" type="RationalConverter" line="518"/>
            <declaration name="Em12" type="RationalConverter" line="519"/>
            <declaration name="Em15" type="RationalConverter" line="520"/>
            <declaration name="Em18" type="RationalConverter" line="521"/>
            <declaration name="Em21" type="MultiplyConverter" line="522"/>
            <declaration name="Em24" type="MultiplyConverter" line="523"/>
            <declaration name="METRE_PER_SECOND" type="Unit&lt;Velocity&gt;" line="524"/>
            <javadoc line="524">
                @deprecated replaced by  {@link #METRES_PER_SECOND}.                
            </javadoc>
            <declaration name="METRE_PER_SQUARE_SECOND" type="Unit&lt;Acceleration&gt;" line="528"/>
            <javadoc line="528">
                @deprecated replaced by  {@link #METRES_PER_SQUARE_SECOND}.                
            </javadoc>
        </class>
    </source>