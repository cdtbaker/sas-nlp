<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.measure.unit">
        <import package="java.io.Serializable"/>
        <import package="javax.measure.converter.ConversionException"/>
        <import package="javax.measure.converter.UnitConverter"/>
        <import package="javax.measure.quantity.Quantity"/>
        <class name="ProductUnit" line="6">
            <type_params>
                <type_param name="Q"/>
            </type_params>
            <extends class="DerivedUnit">
                <type_params>
                    <type_param name="Q"/>
                </type_params>
            </extends>
            <javadoc line="6">
                &lt;p&gt; This class represents units formed by the product of rational powers of
                  existing units.&lt;/p&gt;
                  &lt;p&gt; This class maintains the canonical form of this product (simplest
                  form after factorization). For example:
                  &lt;code&gt;METER.pow(2).divide(METER)&lt;/code&gt; returns
                  &lt;code&gt;METER&lt;/code&gt;.&lt;/p&gt;                
                <author>
                    <a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a>                    
                </author>
                <version>
                    3.1, April 22, 2006                    
                </version>
                <see>
                    Unit#times(Unit)                    
                </see>
                <see>
                    Unit#divide(Unit)                    
                </see>
                <see>
                    Unit#pow(int)                    
                </see>
                <see>
                    Unit#root(int)                    
                </see>
            </javadoc>
            <declaration name="_elements" type="Element[]" line="21"/>
            <javadoc line="21">
                Holds the units composing this product unit.                
            </javadoc>
            <declaration name="_hashCode" type="int" line="25"/>
            <javadoc line="25">
                Holds the hashcode (optimization).                
            </javadoc>
            <javadoc line="29">
                Default constructor (used solely to create &lt;code&gt;ONE&lt;/code&gt; instance).                
            </javadoc>
            <method name="ProductUnit" type="constructor" line="32"/>
            <javadoc line="35">
                Copy constructor (allows for parameterization of product units).                
                <param>
                    productUnit the product unit source.                    
                </param>
                <throws>
                    ClassCastException if the specified unit is not 
                      a product unit.                    
                </throws>
            </javadoc>
            <method name="ProductUnit" type="constructor" line="41">
                <params>
                    <param name="productUnit" type="Unit<?>"/>
                </params>
            </method>
            <javadoc line="44">
                Product unit constructor.                
                <param>
                    elements the product elements.                    
                </param>
            </javadoc>
            <method name="ProductUnit" type="constructor" line="48">
                <params>
                    <param name="elements" type="Element[]"/>
                </params>
            </method>
            <javadoc line="51">
                Returns the unit defined from the product of the specifed elements.                
                <param>
                    leftElems left multiplicand elements.                    
                </param>
                <param>
                    rightElems right multiplicand elements.                    
                </param>
                <return>
                    the corresponding unit.                    
                </return>
            </javadoc>
            <method name="getInstance" type="Unit<? extends Quantity>" line="57">
                <params>
                    <param name="leftElems" type="Element[]"/>
                    <param name="rightElems" type="Element[]"/>
                </params>
                <declaration name="result" type="Element[]" line="58"/>
                <declaration name="resultIndex" type="int" line="59"/>
                <scope line="60">
                    <declaration name="unit" type="Unit" line="61"/>
                    <declaration name="p1" type="int" line="62"/>
                    <declaration name="r1" type="int" line="63"/>
                    <declaration name="p2" type="int" line="64"/>
                    <declaration name="r2" type="int" line="65"/>
                    <scope line="66">
                        <scope line="67"/>
                    </scope>
                    <declaration name="pow" type="int" line="73"/>
                    <declaration name="root" type="int" line="74"/>
                    <scope line="75">
                        <declaration name="gcd" type="int" line="76"/>
                    </scope>
                </scope>
                <scope line="80">
                    <declaration name="unit" type="Unit" line="81"/>
                    <declaration name="hasBeenMerged" type="boolean" line="82"/>
                    <scope line="83">
                        <scope line="84"/>
                    </scope>
                    <scope line="89"/>
                </scope>
                <scope line="93"/>
                <scope line="96"/>
                <scope line="99">
                    <declaration name="elems" type="Element[]" line="100"/>
                    <scope line="101"/>
                </scope>
            </method>
            <javadoc line="107">
                Returns the product of the specified units.                
                <param>
                    left the left unit operand.                    
                </param>
                <param>
                    right the right unit operand.                    
                </param>
                <return>
                    <code>left  right</code>                    
                </return>
            </javadoc>
            <method name="getProductInstance" type="Unit<? extends Quantity>" line="113">
                <params>
                    <param name="left" type="Unit<?>"/>
                    <param name="right" type="Unit<?>"/>
                </params>
                <declaration name="leftElems" type="Element[]" line="114"/>
                <scope line="115"/>
                <scope line="118"/>
                <declaration name="rightElems" type="Element[]" line="121"/>
                <scope line="122"/>
                <scope line="125"/>
            </method>
            <javadoc line="130">
                Returns the quotient of the specified units.                
                <param>
                    left the dividend unit operand.                    
                </param>
                <param>
                    right the divisor unit operand.                    
                </param>
                <return>
                    <code>dividend / divisor</code>                    
                </return>
            </javadoc>
            <method name="getQuotientInstance" type="Unit<? extends Quantity>" line="136">
                <params>
                    <param name="left" type="Unit<?>"/>
                    <param name="right" type="Unit<?>"/>
                </params>
                <declaration name="leftElems" type="Element[]" line="137"/>
                <scope line="138"/>
                <scope line="141"/>
                <declaration name="rightElems" type="Element[]" line="144"/>
                <scope line="145">
                    <declaration name="elems" type="Element[]" line="146"/>
                    <scope line="148"/>
                </scope>
                <scope line="152"/>
            </method>
            <javadoc line="157">
                Returns the product unit corresponding to the specified root of
                  the specified unit.                
                <param>
                    unit the unit.                    
                </param>
                <param>
                    n the root's order (n &gt; 0).                    
                </param>
                <return>
                    <code>unit^(1/nn)</code>                    
                </return>
                <throws>
                    ArithmeticException if <code>n == 0</code>.                    
                </throws>
            </javadoc>
            <method name="getRootInstance" type="Unit<? extends Quantity>" line="165">
                <params>
                    <param name="unit" type="Unit<?>"/>
                    <param name="n" type="int"/>
                </params>
                <declaration name="unitElems" type="Element[]" line="166"/>
                <scope line="167">
                    <declaration name="elems" type="Element[]" line="168"/>
                    <scope line="170">
                        <declaration name="gcd" type="int" line="171"/>
                    </scope>
                </scope>
                <scope line="175"/>
            </method>
            <javadoc line="180">
                Returns the product unit corresponding to this unit raised to
                  the specified exponent.                
                <param>
                    unit the unit.                    
                </param>
                <param>
                    nn the exponent (nn &gt; 0).                    
                </param>
                <return>
                    <code>unit^n</code>                    
                </return>
            </javadoc>
            <method name="getPowInstance" type="Unit<? extends Quantity>" line="187">
                <params>
                    <param name="unit" type="Unit<?>"/>
                    <param name="n" type="int"/>
                </params>
                <declaration name="unitElems" type="Element[]" line="188"/>
                <scope line="189">
                    <declaration name="elems" type="Element[]" line="190"/>
                    <scope line="192">
                        <declaration name="gcd" type="int" line="193"/>
                    </scope>
                </scope>
                <scope line="197"/>
            </method>
            <javadoc line="202">
                Returns the number of units in this product.                
                <return>
                    the number of units being multiplied.                    
                </return>
            </javadoc>
            <method name="getUnitCount" type="int" line="206"/>
            <javadoc line="209">
                Returns the unit at the specified position.                
                <param>
                    index the index of the unit to return.                    
                </param>
                <return>
                    the unit at the specified position.                    
                </return>
                <throws>
                    IndexOutOfBoundsException if index is out of range
                      <code>(index &lt; 0 || index &gt;= size())</code>.                    
                </throws>
            </javadoc>
            <method name="getUnit" type="Unit<? extends Quantity>" line="216">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="219">
                Returns the power exponent of the unit at the specified position.                
                <param>
                    index the index of the unit to return.                    
                </param>
                <return>
                    the unit power exponent at the specified position.                    
                </return>
                <throws>
                    IndexOutOfBoundsException if index is out of range
                      <code>(index &lt; 0 || index &gt;= size())</code>.                    
                </throws>
            </javadoc>
            <method name="getUnitPow" type="int" line="226">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="229">
                Returns the root exponent of the unit at the specified position.                
                <param>
                    index the index of the unit to return.                    
                </param>
                <return>
                    the unit root exponent at the specified position.                    
                </return>
                <throws>
                    IndexOutOfBoundsException if index is out of range
                      <code>(index &lt; 0 || index &gt;= size())</code>.                    
                </throws>
            </javadoc>
            <method name="getUnitRoot" type="int" line="236">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="239">
                Indicates if this product unit is considered equals to the specified 
                  object.                
                <param>
                    that the object to compare for equality.                    
                </param>
                <return>
                    <code>true</code> if <code>this</code> and <code>that</code>
                      are considered equals; <code>false</code>otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="246">
                <params>
                    <param name="that" type="Object"/>
                </params>
                <scope line="248">
                    <declaration name="elems" type="Element[]" line="249"/>
                    <scope line="250">
                        <scope line="251">
                            <declaration name="unitFound" type="boolean" line="252"/>
                            <scope line="253">
                                <scope line="254">
                                    <scope line="255"/>
                                    <scope line="258"/>
                                </scope>
                            </scope>
                            <scope line="264"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="hashCode" type="int" line="273">
                <declaration name="code" type="int" line="275"/>
                <scope line="276"/>
            </method>
            <method name="getStandardUnit" type="Unit<? super Q>" line="282">
                <declaration name="systemUnit" type="Unit" line="284"/>
                <scope line="285">
                    <declaration name="unit" type="Unit" line="286"/>
                </scope>
            </method>
            <method name="toStandardUnit" type="UnitConverter" line="293">
                <declaration name="converter" type="UnitConverter" line="295"/>
                <scope line="296">
                    <declaration name="cvtr" type="UnitConverter" line="297"/>
                    <declaration name="pow" type="int" line="300"/>
                    <scope line="301"/>
                    <scope line="305"/>
                </scope>
            </method>
            <javadoc line="311">
                Indicates if this product unit is a standard unit.                
                <return>
                    <code>true</code> if all elements are standard units;
                      <code>false</code> otherwise.                    
                </return>
            </javadoc>
            <method name="hasOnlyStandardUnit" type="boolean" line="316">
                <scope line="317">
                    <declaration name="u" type="Unit&lt;?&gt;" line="318"/>
                </scope>
            </method>
            <javadoc line="323">
                Returns the greatest common divisor (Euclid&apos;s algorithm).                
                <param>
                    m the first number.                    
                </param>
                <param>
                    nn the second number.                    
                </param>
                <return>
                    the greatest common divisor.                    
                </return>
            </javadoc>
            <method name="gcd" type="int" line="329">
                <params>
                    <param name="m" type="int"/>
                    <param name="n" type="int"/>
                </params>
                <scope line="330"/>
                <scope line="333"/>
            </method>
            <class name="Element" line="337">
                <implements interface="Serializable"/>
                <javadoc line="337">
                    Inner product element represents a rational power of a single unit.                    
                </javadoc>
                <declaration name="_unit" type="Unit&lt;?&gt;" line="341"/>
                <javadoc line="341">
                    Holds the single unit.                    
                </javadoc>
                <declaration name="_pow" type="int" line="345"/>
                <javadoc line="345">
                    Holds the power exponent.                    
                </javadoc>
                <declaration name="_root" type="int" line="349"/>
                <javadoc line="349">
                    Holds the root exponent.                    
                </javadoc>
                <javadoc line="353">
                    Structural constructor.                    
                    <param>
                        unit the unit.                        
                    </param>
                    <param>
                        pow the power exponent.                        
                    </param>
                    <param>
                        root the root exponent.                        
                    </param>
                </javadoc>
                <method name="Element" type="constructor" line="359">
                    <params>
                        <param name="unit" type="Unit<?>"/>
                        <param name="pow" type="int"/>
                        <param name="root" type="int"/>
                    </params>
                </method>
                <javadoc line="364">
                    Returns this element&apos;s unit.                    
                    <return>
                        the single unit.                        
                    </return>
                </javadoc>
                <method name="getUnit" type="Unit<?>" line="368"/>
                <javadoc line="371">
                    Returns the power exponent. The power exponent can be negative
                      but is always different from zero.                    
                    <return>
                        the power exponent of the single unit.                        
                    </return>
                </javadoc>
                <method name="getPow" type="int" line="376"/>
                <javadoc line="379">
                    Returns the root exponent. The root exponent is always greater
                      than zero.                    
                    <return>
                        the root exponent of the single unit.                        
                    </return>
                </javadoc>
                <method name="getRoot" type="int" line="384"/>
                <declaration name="serialVersionUID" type="long" line="387"/>
            </class>
            <declaration name="serialVersionUID" type="long" line="389"/>
        </class>
    </source>