<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.measure.unit">
        <import package="javax.measure.converter.UnitConverter"/>
        <import package="javax.measure.quantity.Quantity"/>
        <class name="TransformedUnit" line="4">
            <type_params>
                <type_param name="Q"/>
            </type_params>
            <extends class="DerivedUnit">
                <type_params>
                    <type_param name="Q"/>
                </type_params>
            </extends>
            <javadoc line="4">
                &lt;p&gt; This class represents the units derived from other units using{@link UnitConverter converters}.&lt;/p&gt;
                  &lt;p&gt; Examples of transformed units:[code]
                  CELSIUS = KELVIN.add(273.15);
                  FOOT = METER.multiply(0.3048);
                  MILLISECOND = MILLI(SECOND); 
                  [/code]&lt;/p&gt;
                  &lt;p&gt; Transformed units have no label. But like any other units,
                  they may have labels attached to them:[code]
                  UnitFormat.getStandardInstance().label(FOOT, &quot;ft&quot;);
                  [/code]
                  or aliases: [code]
                  UnitFormat.getStandardInstance().alias(CENTI(METER)), &quot;centimeter&quot;);
                  UnitFormat.getStandardInstance().alias(CENTI(METER)), &quot;centimetre&quot;);
                  [/code]&lt;/p&gt;                
                <author>
                    <a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a>                    
                </author>
                <version>
                    3.1, April 22, 2006                    
                </version>
                <see>
                    Unit#plus(double)                    
                </see>
                <see>
                    Unit#times(double)                    
                </see>
                <see>
                    Unit#transform(UnitConverter)                    
                </see>
                <see>
                    UnitFormat                    
                </see>
            </javadoc>
            <declaration name="_parentUnit" type="Unit&lt;Q&gt;" line="27"/>
            <javadoc line="27">
                Holds the parent unit (not a transformed unit).                
            </javadoc>
            <declaration name="_toParentUnit" type="UnitConverter" line="31"/>
            <javadoc line="31">
                Holds the converter to the parent unit.                
            </javadoc>
            <javadoc line="35">
                Creates a transformed unit from the specified parent unit.                
                <param>
                    parentUnit the untransformed unit from which this unit is 
                      derived.                    
                </param>
                <param>
                    toParentUnit the converter to the parent units.                    
                </param>
                <throws>
                    IllegalArgumentException if <code>toParentUnit == {@link UnitConverter#IDENTITY UnitConverter.IDENTITY}</code>                    
                </throws>
            </javadoc>
            <method name="TransformedUnit" type="constructor" line="42">
                <params>
                    <param name="parentUnit" type="Unit<Q>"/>
                    <param name="toParentUnit" type="UnitConverter"/>
                </params>
            </method>
            <javadoc line="47">
                Returns the parent unit for this unit. The parent unit is the 
                  untransformed unit from which this unit is derived.                
                <return>
                    the untransformed unit from which this unit is derived.                    
                </return>
            </javadoc>
            <method name="getParentUnit" type="Unit<Q>" line="52"/>
            <javadoc line="55">
                Returns the converter to the parent unit.                
                <return>
                    the converter to the parent unit.                    
                </return>
            </javadoc>
            <method name="toParentUnit" type="UnitConverter" line="59"/>
            <javadoc line="62">
                Indicates if this transformed unit is considered equals to the specified 
                  object (both are transformed units with equal parent unit and equal
                  converter to parent unit).                
                <param>
                    that the object to compare for equality.                    
                </param>
                <return>
                    <code>true</code> if <code>this</code> and <code>that</code>
                      are considered equals; <code>false</code>otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="70">
                <params>
                    <param name="that" type="Object"/>
                </params>
                <declaration name="thatUnit" type="TransformedUnit&lt;?&gt;" line="73"/>
            </method>
            <method name="hashCode" type="int" line="76"/>
            <method name="getStandardUnit" type="Unit<? super Q>" line="79"/>
            <method name="toStandardUnit" type="UnitConverter" line="82"/>
            <declaration name="serialVersionUID" type="long" line="85"/>
        </class>
    </source>