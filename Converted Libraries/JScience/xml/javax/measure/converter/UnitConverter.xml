<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.measure.converter">
        <import package="java.io.Serializable"/>
        <class name="UnitConverter" line="13">
            <implements interface="Serializable"/>
            <javadoc line="13">
                &lt;p&gt; This class represents a converter of numeric values.&lt;/p&gt;
                  &lt;p&gt; It is not required for sub-classes to be immutable
                  (e.g. currency converter).&lt;/p&gt;
                  &lt;p&gt; Sub-classes must ensure unicity of the {@link #IDENTITY identity} 
                  converter. In other words, if the result of an operation is equivalent
                  to the identity converter, then the unique {@link #IDENTITY} instance 
                  should be returned.&lt;/p&gt;                
                <author>
                    &lt;a href=&quot;mailto:jean-marie@dautelle.com&quot;&gt;Jean-Marie Dautelle&lt;/a&gt;                    
                </author>
                <version>
                    3.1, April 22, 2006                    
                </version>
            </javadoc>
            <declaration name="IDENTITY" type="UnitConverter" line="29"/>
            <javadoc line="29">
                Holds the identity converter (unique). This converter does nothing
                  (&lt;code&gt;ONE.convert(x) == x&lt;/code&gt;).                
            </javadoc>
            <javadoc line="35">
                Default constructor.                
            </javadoc>
            <method name="UnitConverter" type="constructor" line="38"/>
            <method name="inverse" type="UnitConverter" line="41"/>
            <javadoc line="41">
                Returns the inverse of this converter. If &lt;code&gt;x&lt;/code&gt; is a valid
                  value, then &lt;code&gt;x == inverse().convert(convert(x))&lt;/code&gt; to within
                  the accuracy of computer arithmetic.                
                <return>
                    the inverse of this converter.                    
                </return>
            </javadoc>
            <method name="convert" type="double" line="50"/>
            <javadoc line="50">
                Converts a double value.                
                <param>
                    x the numeric value to convert.                    
                </param>
                <return>
                    the converted numeric value.                    
                </return>
                <throws>
                    ConversionException if an error occurs during conversion.                    
                </throws>
            </javadoc>
            <method name="isLinear" type="boolean" line="59"/>
            <javadoc line="59">
                Indicates if this converter is linear. A converter is linear if
                  &lt;code&gt;convert(u + v) == convert(u) + convert(v)&lt;/code&gt; and
                  &lt;code&gt;convert(r  u) == r  convert(u)&lt;/code&gt;.
                  For linear converters the following property always hold:[code]
                  y1 = c1.convert(x1);
                  y2 = c2.convert(x2); 
                  then y1y2 = c1.concatenate(c2).convert(x1x2)[/code]                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if this converter is linear;
                      &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
            </javadoc>
            <javadoc line="73">
                Indicates whether this converter is considered the same as the  
                  converter specified. To be considered equal this converter 
                  concatenated with the one specified must returns the {@link #IDENTITY}.                
                <param>
                    cvtr the converter with which to compare.                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the specified object is a converter 
                      considered equals to this converter;&lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="82">
                <params>
                    <param name="cvtr" type="Object"/>
                </params>
            </method>
            <javadoc line="87">
                Returns a hash code value for this converter. Equals object have equal
                  hash codes.                
                <return>
                    this converter hash code value.                    
                </return>
                <see>
                    #equals                    
                </see>
            </javadoc>
            <method name="hashCode" type="int" line="94"/>
            <javadoc line="98">
                Concatenates this converter with another converter. The resulting
                  converter is equivalent to first converting by the specified converter,
                  and then converting by this converter.
                  &lt;p&gt;Note: Implementations must ensure that the {@link #IDENTITY} instance
                  is returned if the resulting converter is an identity 
                  converter.&lt;/p&gt;                
                <param>
                    converter the other converter.                    
                </param>
                <return>
                    the concatenation of this converter with the other converter.                    
                </return>
            </javadoc>
            <method name="concatenate" type="UnitConverter" line="110">
                <params>
                    <param name="converter" type="UnitConverter"/>
                </params>
            </method>
            <class name="Identity" line="114">
                <extends class="UnitConverter"/>
                <javadoc line="114">
                    This inner class represents the identity converter (singleton).                    
                </javadoc>
                <method name="inverse" type="UnitConverter" line="120"/>
                <method name="convert" type="double" line="125">
                    <params>
                        <param name="x" type="double"/>
                    </params>
                </method>
                <method name="isLinear" type="boolean" line="130"/>
                <method name="concatenate" type="UnitConverter" line="135">
                    <params>
                        <param name="converter" type="UnitConverter"/>
                    </params>
                </method>
                <declaration name="serialVersionUID" type="long" line="139"/>
            </class>
            <class name="Compound" line="143">
                <extends class="UnitConverter"/>
                <javadoc line="143">
                    This inner class represents a compound converter.                    
                </javadoc>
                <declaration name="_first" type="UnitConverter" line="148"/>
                <javadoc line="148">
                    Holds the first converter.                    
                </javadoc>
                <declaration name="_second" type="UnitConverter" line="153"/>
                <javadoc line="153">
                    Holds the second converter.                    
                </javadoc>
                <javadoc line="158">
                    Creates a compound converter resulting from the combined
                      transformation of the specified converters.                    
                    <param>
                        first the first converter.                        
                    </param>
                    <param>
                        second the second converter.                        
                    </param>
                </javadoc>
                <method name="Compound" type="constructor" line="165">
                    <params>
                        <param name="first" type="UnitConverter"/>
                        <param name="second" type="UnitConverter"/>
                    </params>
                </method>
                <method name="inverse" type="UnitConverter" line="171"/>
                <method name="convert" type="double" line="176">
                    <params>
                        <param name="x" type="double"/>
                    </params>
                </method>
                <method name="isLinear" type="boolean" line="181"/>
                <declaration name="serialVersionUID" type="long" line="185"/>
            </class>
        </class>
    </source>