<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.measure">
        <import package="java.io.Serializable"/>
        <import package="java.math.BigDecimal"/>
        <import package="java.math.MathContext"/>
        <import package="javax.measure.quantity.Quantity"/>
        <import package="javax.measure.unit.CompoundUnit"/>
        <import package="javax.measure.unit.Unit"/>
        <class name="Measure" line="8">
            <type_params>
                <type_param name="V"/>
                <type_param name="Q"/>
            </type_params>
            <implements interface="Measurable">
                <type_params>
                    <type_param name="Q"/>
                </type_params>
            </implements>
            <implements interface="Serializable"/>
            <javadoc line="8">
                &lt;p&gt; This class represents the result of a measurement stated in a 
                  known unit.&lt;/p&gt;
                  &lt;p&gt; There is no constraint upon the measurement value itself: scalars, 
                  vectors, or even data sets are valid values as long as 
                  an aggregate magnitude can be determined (see {@link Measurable}).&lt;/p&gt;                
                <author>
                    <a href="mailto:jean-marie@dautelle.com">Jean-Marie Dautelle</a>                    
                </author>
                <version>
                    4.2, August 26, 2007                    
                </version>
            </javadoc>
            <javadoc line="18">
                Default constructor.                
            </javadoc>
            <method name="Measure" type="constructor" line="21"/>
            <javadoc line="23">
                Returns the scalar measure for the specified &lt;code&gt;double&lt;/code&gt;
                  stated in the specified unit.                
                <param>
                    doubleValue the measurement value.                    
                </param>
                <param>
                    unit the measurement unit.                    
                </param>
            </javadoc>
            <method name="valueOf" type="Measure<java.lang.Double,Q>" line="29">
                <params>
                    <param name="doubleValue" type="double"/>
                    <param name="unit" type="Unit<Q>"/>
                </params>
            </method>
            <javadoc line="32">
                Returns the scalar measure for the specified &lt;code&gt;double&lt;/code&gt;
                  stated in the specified unit.                
                <param>
                    longValue the measurement value.                    
                </param>
                <param>
                    unit the measurement unit.                    
                </param>
            </javadoc>
            <method name="valueOf" type="Measure<java.lang.Long,Q>" line="38">
                <params>
                    <param name="longValue" type="long"/>
                    <param name="unit" type="Unit<Q>"/>
                </params>
            </method>
            <javadoc line="41">
                Returns the scalar measure for the specified &lt;code&gt;float&lt;/code&gt;
                  stated in the specified unit.                
                <param>
                    floatValue the measurement value.                    
                </param>
                <param>
                    unit the measurement unit.                    
                </param>
            </javadoc>
            <method name="valueOf" type="Measure<java.lang.Float,Q>" line="47">
                <params>
                    <param name="floatValue" type="float"/>
                    <param name="unit" type="Unit<Q>"/>
                </params>
            </method>
            <javadoc line="50">
                Returns the scalar measure for the specified &lt;code&gt;int&lt;/code&gt;
                  stated in the specified unit.                
                <param>
                    intValue the measurement value.                    
                </param>
                <param>
                    unit the measurement unit.                    
                </param>
            </javadoc>
            <method name="valueOf" type="Measure<java.lang.Integer,Q>" line="56">
                <params>
                    <param name="intValue" type="int"/>
                    <param name="unit" type="Unit<Q>"/>
                </params>
            </method>
            <method name="getValue" type="V" line="59"/>
            <javadoc line="59">
                Returns the measurement value of this measure.                
                <return>
                    the measurement value.                    
                </return>
            </javadoc>
            <method name="getUnit" type="Unit<Q>" line="64"/>
            <javadoc line="64">
                Returns the measurement unit of this measure.                
                <return>
                    the measurement unit.                    
                </return>
            </javadoc>
            <method name="to" type="Measure<V,Q>" line="69"/>
            <javadoc line="69">
                Returns the measure equivalent to this measure but stated in the 
                  specified unit. This method may result in lost of precision 
                  (e.g. measure of integral value).                
                <param>
                    unit the new measurement unit.                    
                </param>
                <return>
                    the measure stated in the specified unit.                    
                </return>
            </javadoc>
            <method name="doubleValue" type="double" line="77"/>
            <javadoc line="77">
                Returns the value of this measure stated in the specified unit as 
                  a &lt;code&gt;double&lt;/code&gt;. If the measure has too great a magnitude to 
                  be represented as a &lt;code&gt;double&lt;/code&gt;, it will be converted to 
                  &lt;code&gt;Double.NEGATIVE_INFINITY&lt;/code&gt; or
                  &lt;code&gt;Double.POSITIVE_INFINITY&lt;/code&gt; as appropriate.                
                <param>
                    unit the unit in which this measure is stated.                    
                </param>
                <return>
                    the numeric value after conversion to type <code>double</code>.                    
                </return>
            </javadoc>
            <javadoc line="87">
                Returns the estimated integral value of this measure stated in 
                  the specified unit as a &lt;code&gt;long&lt;/code&gt;. 
                  &lt;p&gt; Note: This method differs from the &lt;code&gt;Number.longValue()&lt;/code&gt;
                  in the sense that the closest integer value is returned 
                  and an ArithmeticException is raised instead
                  of a bit truncation in case of overflow (safety critical).&lt;/p&gt;                
                <param>
                    unit the unit in which the measurable value is stated.                    
                </param>
                <return>
                    the numeric value after conversion to type <code>long</code>.                    
                </return>
                <throws>
                    ArithmeticException if this quantity cannot be represented 
                      as a <code>long</code> number in the specified unit.                    
                </throws>
            </javadoc>
            <method name="longValue" type="long" line="99">
                <params>
                    <param name="unit" type="Unit<Q>"/>
                </params>
                <declaration name="doubleValue" type="double" line="100"/>
            </method>
            <javadoc line="104">
                Returns the value of this measure stated in the specified unit as a 
                  &lt;code&gt;float&lt;/code&gt;. If the measure has too great a magnitude to be 
                  represented as a &lt;code&gt;float&lt;/code&gt;, it will be converted to 
                  &lt;code&gt;Float.NEGATIVE_INFINITY&lt;/code&gt; or
                  &lt;code&gt;Float.POSITIVE_INFINITY&lt;/code&gt; as appropriate.                
                <param>
                    unit the unit in which the measure is stated.                    
                </param>
                <return>
                    the numeric value after conversion to type <code>float</code>.                    
                </return>
            </javadoc>
            <method name="floatValue" type="float" line="113">
                <params>
                    <param name="unit" type="Unit<Q>"/>
                </params>
            </method>
            <javadoc line="116">
                Returns the estimated integral value of this measure stated in 
                  the specified unit as a &lt;code&gt;int&lt;/code&gt;. 
                  &lt;p&gt; Note: This method differs from the &lt;code&gt;Number.intValue()&lt;/code&gt;
                  in the sense that the closest integer value is returned 
                  and an ArithmeticException is raised instead
                  of a bit truncation in case of overflow (safety critical).&lt;/p&gt;                
                <param>
                    unit the unit in which the measurable value is stated.                    
                </param>
                <return>
                    the numeric value after conversion to type <code>int</code>.                    
                </return>
                <throws>
                    ArithmeticException if this quantity cannot be represented 
                      as a <code>int</code> number in the specified unit.                    
                </throws>
            </javadoc>
            <method name="intValue" type="int" line="128">
                <params>
                    <param name="unit" type="Unit<Q>"/>
                </params>
                <declaration name="longValue" type="long" line="129"/>
            </method>
            <javadoc line="133">
                Compares this measure against the specified object for 
                  strict equality (same unit and amount).
                  To compare measures stated using different units the  {@link #compareTo} method should be used.                
                <param>
                    obj the object to compare with.                    
                </param>
                <return>
                    <code>true</code> if both objects are identical (same 
                      unit and same amount); <code>false</code> otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="141">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <declaration name="that" type="Measure" line="143"/>
            </method>
            <javadoc line="146">
                Returns the hash code for this scalar.                
                <return>
                    the hash code value.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="150"/>
            <javadoc line="153">
                Returns the &lt;code&gt;String&lt;/code&gt; representation of this measure
                  The string produced for a given measure is always the same;
                  it is not affected by locale.  This means that it can be used
                  as a canonical string representation for exchanging data, 
                  or as a key for a Hashtable, etc.  Locale-sensitive
                  measure formatting and parsing is handled by the {@link MeasureFormat} class and its subclasses.                
                <return>
                    the string representation of this measure.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="162"/>
            <javadoc line="166">
                Compares this measure to the specified measurable quantity.
                  This method compares the {@link Measurable#doubleValue(Unit)} of 
                  both this measure and the specified measurable stated in the 
                  same unit (this measure&apos;s {@link #getUnit() unit}).                
                <return>
                    a negative integer, zero, or a positive integer as this measure
                      is less than, equal to, or greater than the specified measurable
                      quantity.                    
                </return>
                <return>
                    <code>Double.compare(this.doubleValue(getUnit()), 
                      that.doubleValue(getUnit()))</code>                    
                </return>
            </javadoc>
            <method name="compareTo" type="int" line="177">
                <params>
                    <param name="that" type="Measurable<Q>"/>
                </params>
            </method>
            <class name="Double" line="180">
                <type_params>
                    <type_param name="Q"/>
                </type_params>
                <extends class="Measure">
                    <type_params>
                        <type_param name="java.lang.Double"/>
                        <type_param name="Q"/>
                    </type_params>
                </extends>
                <javadoc line="180">
                    Holds scalar implementation for &lt;code&gt;double&lt;/code&gt; values.                    
                </javadoc>
                <declaration name="_value" type="double" line="184"/>
                <declaration name="_unit" type="Unit&lt;Q&gt;" line="185"/>
                <method name="Double" type="constructor" line="186">
                    <params>
                        <param name="value" type="double"/>
                        <param name="unit" type="Unit<Q>"/>
                    </params>
                </method>
                <method name="getUnit" type="Unit<Q>" line="190"/>
                <method name="getValue" type="java.lang.Double" line="193"/>
                <method name="to" type="Measure<java.lang.Double,Q>" line="196">
                    <params>
                        <param name="unit" type="Unit<Q>"/>
                    </params>
                </method>
                <method name="doubleValue" type="double" line="200">
                    <params>
                        <param name="unit" type="Unit<Q>"/>
                    </params>
                </method>
                <declaration name="serialVersionUID" type="long" line="204"/>
            </class>
            <class name="Long" line="206">
                <type_params>
                    <type_param name="Q"/>
                </type_params>
                <extends class="Measure">
                    <type_params>
                        <type_param name="java.lang.Long"/>
                        <type_param name="Q"/>
                    </type_params>
                </extends>
                <javadoc line="206">
                    Holds scalar implementation for &lt;code&gt;long&lt;/code&gt; values.                    
                </javadoc>
                <declaration name="_value" type="long" line="210"/>
                <declaration name="_unit" type="Unit&lt;Q&gt;" line="211"/>
                <method name="Long" type="constructor" line="212">
                    <params>
                        <param name="value" type="long"/>
                        <param name="unit" type="Unit<Q>"/>
                    </params>
                </method>
                <method name="getUnit" type="Unit<Q>" line="216"/>
                <method name="getValue" type="java.lang.Long" line="219"/>
                <method name="to" type="Measure<java.lang.Long,Q>" line="222">
                    <params>
                        <param name="unit" type="Unit<Q>"/>
                    </params>
                </method>
                <method name="doubleValue" type="double" line="226">
                    <params>
                        <param name="unit" type="Unit<Q>"/>
                    </params>
                </method>
                <method name="longValue" type="long" line="230">
                    <params>
                        <param name="unit" type="Unit<Q>"/>
                    </params>
                </method>
                <declaration name="serialVersionUID" type="long" line="234"/>
            </class>
            <class name="Float" line="236">
                <type_params>
                    <type_param name="Q"/>
                </type_params>
                <extends class="Measure">
                    <type_params>
                        <type_param name="java.lang.Float"/>
                        <type_param name="Q"/>
                    </type_params>
                </extends>
                <javadoc line="236">
                    Holds scalar implementation for &lt;code&gt;float&lt;/code&gt; values.                    
                </javadoc>
                <declaration name="_value" type="float" line="240"/>
                <declaration name="_unit" type="Unit&lt;Q&gt;" line="241"/>
                <method name="Float" type="constructor" line="242">
                    <params>
                        <param name="value" type="float"/>
                        <param name="unit" type="Unit<Q>"/>
                    </params>
                </method>
                <method name="getUnit" type="Unit<Q>" line="246"/>
                <method name="getValue" type="java.lang.Float" line="249"/>
                <method name="to" type="Measure<java.lang.Float,Q>" line="252">
                    <params>
                        <param name="unit" type="Unit<Q>"/>
                    </params>
                </method>
                <method name="doubleValue" type="double" line="256">
                    <params>
                        <param name="unit" type="Unit<Q>"/>
                    </params>
                </method>
                <declaration name="serialVersionUID" type="long" line="260"/>
            </class>
            <class name="Integer" line="262">
                <type_params>
                    <type_param name="Q"/>
                </type_params>
                <extends class="Measure">
                    <type_params>
                        <type_param name="java.lang.Integer"/>
                        <type_param name="Q"/>
                    </type_params>
                </extends>
                <javadoc line="262">
                    Holds scalar implementation for &lt;code&gt;long&lt;/code&gt; values.                    
                </javadoc>
                <declaration name="_value" type="int" line="266"/>
                <declaration name="_unit" type="Unit&lt;Q&gt;" line="267"/>
                <method name="Integer" type="constructor" line="268">
                    <params>
                        <param name="value" type="int"/>
                        <param name="unit" type="Unit<Q>"/>
                    </params>
                </method>
                <method name="getUnit" type="Unit<Q>" line="272"/>
                <method name="getValue" type="java.lang.Integer" line="275"/>
                <method name="to" type="Measure<java.lang.Integer,Q>" line="278">
                    <params>
                        <param name="unit" type="Unit<Q>"/>
                    </params>
                </method>
                <method name="doubleValue" type="double" line="282">
                    <params>
                        <param name="unit" type="Unit<Q>"/>
                    </params>
                </method>
                <method name="longValue" type="long" line="286">
                    <params>
                        <param name="unit" type="Unit<Q>"/>
                    </params>
                </method>
                <declaration name="serialVersionUID" type="long" line="290"/>
            </class>
            <javadoc line="292">
                @deprecated {@link DecimalMeasure} should be used directly.                
            </javadoc>
            <method name="valueOf" type="Measure<BigDecimal,Q>" line="295">
                <params>
                    <param name="decimal" type="BigDecimal"/>
                    <param name="unit" type="Unit<Q>"/>
                </params>
            </method>
            <javadoc line="298">
                @deprecated {@link DecimalMeasure} should be used directly and 
                  &lt;code&gt;MathContext&lt;/code&gt; specified explicitly when {@link DecimalMeasure#to(Unit,MathContext) converting}.                
            </javadoc>
            <method name="valueOf" type="Measure<BigDecimal,Q>" line="302">
                <params>
                    <param name="decimal" type="BigDecimal"/>
                    <param name="unit" type="Unit<Q>"/>
                    <param name="mathContext" type="MathContext"/>
                </params>
            </method>
            <javadoc line="305">
                @deprecated {@link VectorMeasure} should be used directly.                
            </javadoc>
            <method name="valueOf" type="Measure<double[],Q>" line="308">
                <params>
                    <param name="components" type="double[]"/>
                    <param name="unit" type="Unit<Q>"/>
                </params>
            </method>
        </class>
    </source>