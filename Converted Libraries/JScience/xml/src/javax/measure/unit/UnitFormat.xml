<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.measure.unit">
        <import package="java.io.IOException"/>
        <import package="java.lang.CharSequence"/>
        <import package="java.text.FieldPosition"/>
        <import package="java.text.Format"/>
        <import package="java.text.ParseException"/>
        <import package="java.text.ParsePosition"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Locale"/>
        <import package="javax.measure.converter.AddConverter"/>
        <import package="javax.measure.converter.MultiplyConverter"/>
        <import package="javax.measure.converter.RationalConverter"/>
        <import package="javax.measure.converter.UnitConverter"/>
        <import package="javax.measure.quantity.Quantity"/>
        <import package="javax.measure.unit.SI"/>
        <class name="UnitFormat" line="28">
            <extends class="Format"/>
            <comment line="781">
                //////////////////////////////////////////////////////////////////////////
                 Initializes the standard unit database for SI units.                
            </comment>
            <comment line="845">
                //////////////////////////////////////////////////////////////////////////
                 To be moved in resource bundle in future release (locale dependent).                
            </comment>
            <javadoc line="28">
                &lt;p&gt; This class provides the interface for formatting and parsing {@link Unit units}.&lt;/p&gt;
                  &lt;p&gt; For all {@link SI} units, the 20 SI prefixes used to form decimal
                  multiples and sub-multiples of SI units are recognized.{@link NonSI} units are directly recognized. For example:[code]
                  Unit.valueOf(&quot;mÂ°C&quot;).equals(SI.MILLI(SI.CELSIUS))
                  Unit.valueOf(&quot;kW&quot;).equals(SI.KILO(SI.WATT))
                  Unit.valueOf(&quot;ft&quot;).equals(SI.METER.multiply(0.3048))[/code]&lt;/p&gt;                
                <author>
                    &lt;a href=&quot;mailto:jean-marie@dautelle.com&quot;&gt;Jean-Marie Dautelle&lt;/a&gt;                    
                </author>
                <author>
                    Eric Russell                    
                </author>
                <version>
                    1.3, August 29, 2006                    
                </version>
            </javadoc>
            <declaration name="DEFAULT" type="DefaultFormat" line="45"/>
            <javadoc line="45">
                Holds the standard unit format.                
            </javadoc>
            <declaration name="ASCII" type="ASCIIFormat" line="50"/>
            <javadoc line="50">
                Holds the ASCIIFormat unit format.                
            </javadoc>
            <javadoc line="55">
                Returns the unit format for the default locale (format used by {@link Unit#valueOf(CharSequence) Unit.valueOf(CharSequence)} and {@link Unit#toString() Unit.toString()}).                
                <return>
                    the default unit format (locale sensitive).                    
                </return>
            </javadoc>
            <method name="getInstance" type="UnitFormat" line="62"/>
            <javadoc line="66">
                Returns the unit format for the specified locale.                
                <return>
                    the unit format for the specified locale.                    
                </return>
            </javadoc>
            <method name="getInstance" type="UnitFormat" line="71">
                <params>
                    <param name="inLocale" type="Locale"/>
                </params>
                <comment line="73">
                    TBD: Implement Locale Format.                    
                </comment>
            </method>
            <javadoc line="75">
                Returns the &lt;a href=&quot;http://aurora.regenstrief.org/UCUM/ucum.html&quot;&gt;UCUM
                  &lt;/a&gt; international unit format; this format uses characters range
                  &lt;code&gt;0000-007F&lt;/code&gt; exclusively and &lt;b&gt;is not&lt;/b&gt; locale-sensitive.
                  For example: &lt;code&gt;kg.m/s2&lt;/code&gt;                
                <return>
                    the UCUM international format.                    
                </return>
            </javadoc>
            <method name="getUCUMInstance" type="UnitFormat" line="83">
                <comment line="85">
                    TBD - Provide UCUM implementation.                    
                </comment>
            </method>
            <javadoc line="87">
                Base constructor.                
            </javadoc>
            <method name="UnitFormat" type="constructor" line="90"/>
            <method name="format" type="Appendable" line="93"/>
            <javadoc line="93">
                Formats the specified unit.                
                <param>
                    unit the unit to format.                    
                </param>
                <param>
                    appendable the appendable destination.                    
                </param>
                <throws>
                    IOException if an error occurs.                    
                </throws>
            </javadoc>
            <method name="parseProductUnit" type="Unit&lt;? extends Quantity&gt;" line="103"/>
            <javadoc line="103">
                Parses a sequence of character to produce a unit or a rational product
                  of unit.                
                <param>
                    csq the &lt;code&gt;CharSequence&lt;/code&gt; to parse.                    
                </param>
                <param>
                    pos an object holding the parsing index and error position.                    
                </param>
                <return>
                    an {@link Unit} parsed from the character sequence.                    
                </return>
                <throws>
                    IllegalArgumentException if the character sequence contains
                      an illegal syntax.                    
                </throws>
            </javadoc>
            <method name="parseSingleUnit" type="Unit&lt;? extends Quantity&gt;" line="116"/>
            <javadoc line="116">
                Parses a sequence of character to produce a single unit.                
                <param>
                    csq the &lt;code&gt;CharSequence&lt;/code&gt; to parse.                    
                </param>
                <param>
                    pos an object holding the parsing index and error position.                    
                </param>
                <return>
                    an {@link Unit} parsed from the character sequence.                    
                </return>
                <throws>
                    IllegalArgumentException if the character sequence does not contain 
                      a valid unit identifier.                    
                </throws>
            </javadoc>
            <method name="label" type="void" line="128"/>
            <javadoc line="128">
                Attaches a system-wide label to the specified unit. For example:
                  [code]
                  UnitFormat.getInstance().label(DAY.multiply(365), &quot;year&quot;);
                  UnitFormat.getInstance().label(METER.multiply(0.3048), &quot;ft&quot;);
                  [/code]
                  If the specified label is already associated to an unit the previous 
                  association is discarded or ignored.                
                <param>
                    unit the unit being labelled.                    
                </param>
                <param>
                    label the new label for this unit.                    
                </param>
                <throws>
                    IllegalArgumentException if the label is not a {@link UnitFormat#isValidIdentifier(String)} valid identifier.                    
                </throws>
            </javadoc>
            <method name="alias" type="void" line="144"/>
            <javadoc line="144">
                Attaches a system-wide alias to this unit. Multiple aliases may
                  be attached to the same unit. Aliases are used during parsing to
                  recognize different variants of the same unit. For example:
                  [code]
                  UnitFormat.getLocaleInstance().alias(METER.multiply(0.3048), &quot;foot&quot;);
                  UnitFormat.getLocaleInstance().alias(METER.multiply(0.3048), &quot;feet&quot;);
                  UnitFormat.getLocaleInstance().alias(METER, &quot;meter&quot;);
                  UnitFormat.getLocaleInstance().alias(METER, &quot;metre&quot;);
                  [/code]
                  If the specified label is already associated to an unit the previous 
                  association is discarded or ignored.                
                <param>
                    unit the unit being aliased.                    
                </param>
                <param>
                    alias the alias attached to this unit.                    
                </param>
                <throws>
                    IllegalArgumentException if the label is not a {@link UnitFormat#isValidIdentifier(String)} valid identifier.                    
                </throws>
            </javadoc>
            <method name="isValidIdentifier" type="boolean" line="164"/>
            <javadoc line="164">
                Indicates if the specified name can be used as unit identifier.                
                <param>
                    name the identifier to be tested.                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the name specified can be used as 
                      label or alias for this format;&lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
            </javadoc>
            <javadoc line="173">
                Formats an unit and appends the resulting text to a given string
                  buffer (implements &lt;code&gt;java.text.Format&lt;/code&gt;).                
                <param>
                    unit the unit to format.                    
                </param>
                <param>
                    toAppendTo where the text is to be appended                    
                </param>
                <param>
                    pos the field position (not used).                    
                </param>
                <return>
                    &lt;code&gt;toAppendTo&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="format" type="StringBuffer" line="183">
                <params>
                    <param name="unit" type="Object"/>
                    <param name="toAppendTo" type="StringBuffer"/>
                    <param name="pos" type="FieldPosition"/>
                </params>
                <comment line="189">
                    When retroweaver is used to produce 1.4 binaries.                    
                </comment>
                <comment line="209">
                    Should never happen.                    
                </comment>
                <scope line="184">
                    <declaration name="dest" type="Object" line="185"/>
                    <scope line="186"/>
                    <scope line="188">
                        <anonymous_class line="189">
                            <method name="append" type="Appendable" line="191">
                                <params>
                                    <param name="arg0" type="char"/>
                                </params>
                            </method>
                            <method name="append" type="Appendable" line="196">
                                <params>
                                    <param name="arg0" type="CharSequence"/>
                                </params>
                            </method>
                            <method name="append" type="Appendable" line="201">
                                <params>
                                    <param name="arg0" type="CharSequence"/>
                                    <param name="arg1" type="int"/>
                                    <param name="arg2" type="int"/>
                                </params>
                            </method>
                        </anonymous_class>
                    </scope>
                </scope>
                <scope line="207"/>
            </method>
            <javadoc line="212">
                Parses the text from a string to produce an object
                  (implements &lt;code&gt;java.text.Format&lt;/code&gt;).                
                <param>
                    source the string source, part of which should be parsed.                    
                </param>
                <param>
                    pos the cursor position.                    
                </param>
                <return>
                    the corresponding unit or &lt;code&gt;null&lt;/code&gt; if the string 
                      cannot be parsed.                    
                </return>
            </javadoc>
            <method name="parseObject" type="Unit&lt;?&gt;" line="221">
                <params>
                    <param name="source" type="String"/>
                    <param name="pos" type="ParsePosition"/>
                </params>
                <declaration name="start" type="int" line="222"/>
                <scope line="223"/>
                <scope line="225"/>
            </method>
            <class name="Exponent" line="233">
                <comment line="303">
                    Returns the name for the specified unit or null if product unit.                    
                </comment>
                <comment line="362">
                    Returns the unit for the specified name.                    
                </comment>
                <comment line="371">
                    //////////////////////////
                     Parsing.                    
                </comment>
                <comment line="634">
                    //////////////////////////
                     Formatting.                    
                </comment>
                <javadoc line="233">
                    This class represents an exponent with both a power (numerator)
                      and a root (denominator).                    
                </javadoc>
                <declaration name="pow" type="int" line="238"/>
                <declaration name="root" type="int" line="239"/>
                <method name="Exponent" type="constructor" line="240">
                    <params>
                        <param name="pow" type="int"/>
                        <param name="root" type="int"/>
                    </params>
                </method>
            </class>
            <class name="DefaultFormat" line="246">
                <extends class="UnitFormat"/>
                <comment line="303">
                    Returns the name for the specified unit or null if product unit.                    
                </comment>
                <comment line="362">
                    Returns the unit for the specified name.                    
                </comment>
                <comment line="371">
                    //////////////////////////
                     Parsing.                    
                </comment>
                <comment line="634">
                    //////////////////////////
                     Formatting.                    
                </comment>
                <javadoc line="246">
                    This class represents the standard format.                    
                </javadoc>
                <declaration name="_nameToUnit" type="HashMap&amp;lt;String,Unit&amp;lt;?&amp;gt;&amp;gt;" line="251"/>
                <javadoc line="251">
                    Holds the name to unit mapping.                    
                </javadoc>
                <declaration name="_unitToName" type="HashMap&amp;lt;Unit&amp;lt;?&amp;gt;,String&amp;gt;" line="256"/>
                <javadoc line="256">
                    Holds the unit to name mapping.                    
                </javadoc>
                <method name="label" type="void" line="262">
                    <params>
                        <param name="unit" type="Unit&lt;?&gt;"/>
                        <param name="label" type="String"/>
                    </params>
                    <scope line="266"/>
                </method>
                <method name="alias" type="void" line="273">
                    <params>
                        <param name="unit" type="Unit&lt;?&gt;"/>
                        <param name="alias" type="String"/>
                    </params>
                    <scope line="277"/>
                </method>
                <method name="isValidIdentifier" type="boolean" line="283">
                    <params>
                        <param name="name" type="String"/>
                    </params>
                    <scope line="286"/>
                </method>
                <method name="isUnitIdentifierPart" type="boolean" line="293">
                    <params>
                        <param name="ch" type="char"/>
                    </params>
                </method>
                <method name="nameFor" type="String" line="303">
                    <params>
                        <param name="unit" type="Unit&lt;?&gt;"/>
                    </params>
                    <comment line="305">
                        Searches label database.                        
                    </comment>
                    <comment line="322">
                        We could use parentheses whenever baseUnits is an
                         instanceof ProductUnit, but most ProductUnits have aliases,
                         so we&apos;d end up with a lot of unnecessary parentheses.                        
                    </comment>
                    <comment line="348">
                        Other converters.                        
                    </comment>
                    <comment line="353">
                        Compound unit.                        
                    </comment>
                    <comment line="359">
                        Product unit.                        
                    </comment>
                </method>
                <method name="unitFor" type="Unit&lt;?&gt;" line="362">
                    <params>
                        <param name="name" type="String"/>
                    </params>
                    <declaration name="unit" type="Unit&amp;lt;?&amp;gt;" line="363"/>
                </method>
                <method name="parseSingleUnit" type="Unit&lt;? extends Quantity&gt;" line="375">
                    <params>
                        <param name="csq" type="CharSequence"/>
                        <param name="pos" type="ParsePosition"/>
                    </params>
                    <declaration name="startIndex" type="int" line="376"/>
                    <declaration name="name" type="String" line="377"/>
                    <declaration name="unit" type="Unit" line="378"/>
                </method>
                <method name="parseProductUnit" type="Unit&lt;? extends Quantity&gt;" line="386">
                    <params>
                        <param name="csq" type="CharSequence"/>
                        <param name="pos" type="ParsePosition"/>
                    </params>
                    <declaration name="result" type="Unit" line="387"/>
                    <declaration name="token" type="int" line="388"/>
                    <scope line="402">
                        <declaration name="e" type="Exponent" line="405"/>
                        <scope line="406"/>
                        <scope line="409"/>
                        <scope line="416">
                            <declaration name="n" type="long" line="417"/>
                            <scope line="418"/>
                        </scope>
                        <scope line="421">
                            <declaration name="d" type="double" line="422"/>
                            <scope line="423"/>
                        </scope>
                        <scope line="426"/>
                        <scope line="433">
                            <declaration name="n" type="long" line="434"/>
                            <scope line="435"/>
                        </scope>
                        <scope line="438">
                            <declaration name="d" type="double" line="439"/>
                            <scope line="440"/>
                        </scope>
                        <scope line="443"/>
                        <scope line="450">
                            <declaration name="n" type="long" line="451"/>
                            <scope line="452"/>
                        </scope>
                        <scope line="455">
                            <declaration name="d" type="double" line="456"/>
                            <scope line="457"/>
                        </scope>
                        <scope line="460"/>
                    </scope>
                </method>
                <declaration name="EOF" type="int" line="474"/>
                <declaration name="IDENTIFIER" type="int" line="475"/>
                <declaration name="OPEN_PAREN" type="int" line="476"/>
                <declaration name="CLOSE_PAREN" type="int" line="477"/>
                <declaration name="EXPONENT" type="int" line="478"/>
                <declaration name="MULTIPLY" type="int" line="479"/>
                <declaration name="DIVIDE" type="int" line="480"/>
                <declaration name="PLUS" type="int" line="481"/>
                <declaration name="INTEGER" type="int" line="482"/>
                <declaration name="FLOAT" type="int" line="483"/>
                <method name="nextToken" type="int" line="485">
                    <params>
                        <param name="csq" type="CharSequence"/>
                        <param name="pos" type="ParsePosition"/>
                    </params>
                </method>
                <method name="check" type="void" line="527">
                    <params>
                        <param name="expr" type="boolean"/>
                        <param name="message" type="String"/>
                        <param name="csq" type="CharSequence"/>
                        <param name="index" type="int"/>
                    </params>
                    <scope line="528"/>
                </method>
                <method name="readExponent" type="Exponent" line="534">
                    <params>
                        <param name="csq" type="CharSequence"/>
                        <param name="pos" type="ParsePosition"/>
                    </params>
                </method>
                <method name="readLong" type="long" line="592">
                    <params>
                        <param name="csq" type="CharSequence"/>
                        <param name="pos" type="ParsePosition"/>
                    </params>
                    <declaration name="length" type="int" line="593"/>
                    <declaration name="result" type="int" line="594"/>
                    <declaration name="isNegative" type="boolean" line="595"/>
                    <scope line="596">
                        <declaration name="c" type="char" line="597"/>
                        <scope line="598"/>
                        <scope line="600"/>
                        <scope line="602"/>
                    </scope>
                </method>
                <method name="readDouble" type="double" line="610">
                    <params>
                        <param name="csq" type="CharSequence"/>
                        <param name="pos" type="ParsePosition"/>
                    </params>
                    <declaration name="length" type="int" line="611"/>
                    <declaration name="start" type="int" line="612"/>
                    <declaration name="end" type="int" line="613"/>
                    <scope line="614">
                        <scope line="615"/>
                    </scope>
                </method>
                <method name="readIdentifier" type="String" line="624">
                    <params>
                        <param name="csq" type="CharSequence"/>
                        <param name="pos" type="ParsePosition"/>
                    </params>
                    <declaration name="length" type="int" line="625"/>
                    <declaration name="start" type="int" line="626"/>
                    <declaration name="i" type="int" line="627"/>
                    <scope line="628"/>
                </method>
                <method name="format" type="Appendable" line="638">
                    <params>
                        <param name="unit" type="Unit&lt;?&gt;"/>
                        <param name="appendable" type="Appendable"/>
                    </params>
                    <comment line="646">
                        Product unit.                        
                    </comment>
                    <comment line="650">
                        Write positive exponents first.                        
                    </comment>
                    <comment line="656">
                        Separator.                        
                    </comment>
                    <comment line="667">
                        Write negative exponents.                        
                    </comment>
                    <comment line="670">
                        e.g. 1/s                        
                    </comment>
                    <comment line="683">
                        Separator.                        
                    </comment>
                </method>
                <method name="append" type="void" line="696">
                    <params>
                        <param name="appendable" type="Appendable"/>
                        <param name="symbol" type="CharSequence"/>
                        <param name="pow" type="int"/>
                        <param name="root" type="int"/>
                    </params>
                    <comment line="700">
                        Write exponent.                        
                    </comment>
                    <comment line="702">
                        Square                        
                    </comment>
                    <comment line="704">
                        Cubic                        
                    </comment>
                    <comment line="706">
                        Use general exponent form.                        
                    </comment>
                </method>
                <declaration name="serialVersionUID" type="long" line="716"/>
            </class>
            <class name="ASCIIFormat" line="719">
                <extends class="DefaultFormat"/>
                <comment line="303">
                    Returns the name for the specified unit or null if product unit.                    
                </comment>
                <comment line="362">
                    Returns the unit for the specified name.                    
                </comment>
                <comment line="371">
                    //////////////////////////
                     Parsing.                    
                </comment>
                <comment line="634">
                    //////////////////////////
                     Formatting.                    
                </comment>
                <javadoc line="719">
                    This class represents the ASCIIFormat format.                    
                </javadoc>
                <method name="nameFor" type="String" line="725">
                    <params>
                        <param name="unit" type="Unit&lt;?&gt;"/>
                    </params>
                    <comment line="727">
                        First search if specific ASCII name should be used.                        
                    </comment>
                    <comment line="731">
                        Else returns default name.                        
                    </comment>
                    <declaration name="name" type="String" line="727"/>
                </method>
                <method name="unitFor" type="Unit&lt;?&gt;" line="735">
                    <params>
                        <param name="name" type="String"/>
                    </params>
                    <comment line="737">
                        First search if specific ASCII name.                        
                    </comment>
                    <comment line="741">
                        Else returns default mapping.                        
                    </comment>
                    <declaration name="unit" type="Unit&amp;lt;?&amp;gt;" line="737"/>
                </method>
                <method name="format" type="Appendable" line="746">
                    <params>
                        <param name="unit" type="Unit&lt;?&gt;"/>
                        <param name="appendable" type="Appendable"/>
                    </params>
                    <comment line="758">
                        Separator.                        
                    </comment>
                    <comment line="765">
                        Use general exponent form.                        
                    </comment>
                    <declaration name="name" type="String" line="747"/>
                    <declaration name="productUnit" type="ProductUnit&amp;lt;?&amp;gt;" line="754"/>
                    <scope line="755">
                        <scope line="756"/>
                        <declaration name="pow" type="int" line="760"/>
                        <declaration name="root" type="int" line="761"/>
                        <scope line="763">
                            <scope line="767"/>
                        </scope>
                    </scope>
                </method>
                <declaration name="serialVersionUID" type="long" line="776"/>
            </class>
            <declaration name="SI_UNITS" type="Unit&amp;lt;?&amp;gt;[]" line="783"/>
            <declaration name="PREFIXES" type="String[]" line="789"/>
            <declaration name="CONVERTERS" type="UnitConverter[]" line="793"/>
            <method name="asciiPrefix" type="String" line="797">
                <params>
                    <param name="prefix" type="String"/>
                </params>
            </method>
            <scope line="801">
                <scope line="802">
                    <scope line="803">
                        <declaration name="si" type="Unit&amp;lt;?&amp;gt;" line="804"/>
                        <declaration name="u" type="Unit&amp;lt;?&amp;gt;" line="805"/>
                        <declaration name="symbol" type="String" line="806"/>
                        <scope line="809"/>
                    </scope>
                </scope>
                <scope line="816">
                    <scope line="820"/>
                </scope>
                <scope line="828"/>
                <scope line="837"/>
            </scope>
            <scope line="846">
                <scope line="935"/>
            </scope>
        </class>
    </source>