<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.measure">
        <import package="javax.measure.quantity.Quantity"/>
        <import package="javax.measure.unit.Unit"/>
        <interface name="Measurable">
            <type_params>
                <type_param name="Q"/>
            </type_params>
            <implements interface="Comparable">
                <type_params>
                    <type_param name="Measurable&lt;Q&gt;"/>
                </type_params>
            </implements>
            <javadoc line="14">
                &lt;p&gt; This interface represents the measurable, countable, or comparable 
                  property or aspect of a thing.&lt;/p&gt;
                  &lt;p&gt; Implementing instances are typically the result of a measurement:[code]
                  Measurable&lt;Mass&gt; weight = Measure.valueOf(180.0, POUND);
                  [/code]
                  They can also be created from custom classes:[code]
                  class Delay implements Measurable&lt;Duration&gt; {
                  private long nanoSeconds; // Implicit internal unit.
                  public double doubleValue(Unit&lt;Velocity&gt; unit) { ... }
                  public long longValue(Unit&lt;Velocity&gt; unit) { ... }
                  }
                  Thread.wait(new Delay(24, HOUR)); // Assuming Thread.wait(Measurable&lt;Duration&gt;) method.
                  [/code]&lt;/p&gt;
                  &lt;p&gt; Although measurable instances are for the most part scalar quantities; 
                  more complex implementations (e.g. vectors, data set) are allowed as 
                  long as an aggregate magnitude can be determined. For example:[code]
                  class Velocity3D implements Measurable&lt;Velocity&gt; {
                  private double x, y, z; // Meter per seconds.
                  public double doubleValue(Unit&lt;Velocity&gt; unit) { ... } // Returns vector norm.
                  ... 
                  }
                  class Sensors&lt;Q extends Quantity&gt; extends Measure&lt;double[], Q&gt; {
                  public doubleValue(Unit&lt;Q&gt; unit) { ... } // Returns median value. 
                  ...
                  } [/code]&lt;/p&gt;                
                <author>
                    &lt;a href=&quot;mailto:jean-marie@dautelle.com&quot;&gt;Jean-Marie Dautelle&lt;/a&gt;                    
                </author>
                <version>
                    4.1, June 8, 2007                    
                </version>
            </javadoc>
            <method name="doubleValue" type="double" line="48"/>
            <javadoc line="48">
                Returns the value of this measurable stated in the specified unit as 
                  a &lt;code&gt;double&lt;/code&gt;. If the measurable has too great a magnitude to 
                  be represented as a &lt;code&gt;double&lt;/code&gt;, it will be converted to 
                  &lt;code&gt;Double.NEGATIVE_INFINITY&lt;/code&gt; or
                  &lt;code&gt;Double.POSITIVE_INFINITY&lt;/code&gt; as appropriate.                
                <param>
                    unit the unit in which this measurable value is stated.                    
                </param>
                <return>
                    the numeric value after conversion to type &lt;code&gt;double&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="longValue" type="long" line="60"/>
            <javadoc line="60">
                Returns the estimated integral value of this measurable stated in 
                  the specified unit as a &lt;code&gt;long&lt;/code&gt;. 
                  &lt;p&gt; Note: This method differs from the &lt;code&gt;Number.longValue()&lt;/code&gt;
                  in the sense that the closest integer value is returned 
                  and an ArithmeticException is raised instead
                  of a bit truncation in case of overflow (safety critical).&lt;/p&gt;                
                <param>
                    unit the unit in which the measurable value is stated.                    
                </param>
                <return>
                    the numeric value after conversion to type &lt;code&gt;long&lt;/code&gt;.                    
                </return>
                <throws>
                    ArithmeticException if this quantity cannot be represented 
                      as a &lt;code&gt;long&lt;/code&gt; number in the specified unit.                    
                </throws>
            </javadoc>
        </interface>
    </source>