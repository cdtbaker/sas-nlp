<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.jscience.mathematics.vector">
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="javolution.context.ConcurrentContext"/>
        <import package="javolution.context.ObjectFactory"/>
        <import package="javolution.lang.MathLib"/>
        <import package="javolution.util.FastTable"/>
        <import package="org.jscience.mathematics.number.Float64"/>
        <class name="Float64Matrix" line="21">
            <extends class="Matrix">
                <type_params>
                    <type_param name="Float64"/>
                </type_params>
            </extends>
            <comment line="259">
                Logic to multiply two matrices.                
            </comment>
            <comment line="419">
                /////////////////////
                 Factory creation. 
                /                
            </comment>
            <javadoc line="21">
                &lt;p&gt; This class represents an optimized {@link Matrix matrix} implementation
                  for {@link Float64 64 bits floating-point} numbers.&lt;/p&gt;
                  &lt;p&gt; Instances of this class can be created from {@link Float64Vector}, 
                  either as rows or columns if the matrix is transposed. For example:[code]
                  Float64Vector&lt;Rational&gt; column0 = Float64Vector.valueOf(...);
                  Float64Vector&lt;Rational&gt; column1 = Float64Vector.valueOf(...);
                  Float64Matrix&lt;Rational&gt; M = Float64Matrix.valueOf(column0, column1).transpose();
                  [/code]&lt;/p&gt;                
                <author>
                    &lt;a href=&quot;mailto:jean-marie@dautelle.com&quot;&gt;Jean-Marie Dautelle&lt;/a&gt;                    
                </author>
                <version>
                    3.3, January 2, 2007                    
                </version>
            </javadoc>
            <declaration name="_n" type="int" line="37"/>
            <javadoc line="37">
                Holds the number of columns n.                
            </javadoc>
            <declaration name="_transposed" type="boolean" line="42"/>
            <javadoc line="42">
                Indicates if this matrix is transposed (the rows are then the columns).                
            </javadoc>
            <declaration name="_rows" type="FastTable&amp;lt;Float64Vector&amp;gt;" line="47"/>
            <javadoc line="47">
                Holds this matrix rows (or columns when transposed).                
            </javadoc>
            <javadoc line="52">
                Returns a dense matrix from a 2-dimensional array of &lt;code&gt;double&lt;/code&gt;
                  values. The first dimension being the row and the second being the 
                  column.                
                <param>
                    values the array of &lt;code&gt;double&lt;/code&gt; values.                    
                </param>
                <return>
                    the matrix having the specified elements.                    
                </return>
                <throws>
                    DimensionException if rows have different length.                    
                </throws>
                <see>
                    Float64Vector                    
                </see>
            </javadoc>
            <method name="valueOf" type="Float64Matrix" line="62">
                <params>
                    <param name="values" type="double[][]"/>
                </params>
                <declaration name="m" type="int" line="63"/>
                <declaration name="n" type="int" line="64"/>
                <declaration name="M" type="Float64Matrix" line="65"/>
                <scope line="66">
                    <declaration name="row" type="Float64Vector" line="67"/>
                </scope>
            </method>
            <javadoc line="75">
                Returns a complex matrix holding the specified row vectors 
                  (column vectors if {@link #transpose transposed}).                
                <param>
                    rows the row vectors.                    
                </param>
                <return>
                    the matrix having the specified rows.                    
                </return>
                <throws>
                    DimensionException if the rows do not have the same dimension.                    
                </throws>
            </javadoc>
            <method name="valueOf" type="Float64Matrix" line="83">
                <params>
                    <param name="rows" type="Float64Vector"/>
                </params>
                <declaration name="n" type="int" line="84"/>
                <declaration name="M" type="Float64Matrix" line="85"/>
                <scope line="86">
                    <declaration name="rowi" type="Float64Vector" line="87"/>
                </scope>
            </method>
            <javadoc line="96">
                Returns a complex matrix holding the row vectors from the specified 
                  collection (column vectors if {@link #transpose transposed}).                
                <param>
                    rows the list of row vectors.                    
                </param>
                <return>
                    the matrix having the specified rows.                    
                </return>
                <throws>
                    DimensionException if the rows do not have the same dimension.                    
                </throws>
            </javadoc>
            <method name="valueOf" type="Float64Matrix" line="104">
                <params>
                    <param name="rows" type="List&lt;Float64Vector&gt;"/>
                </params>
                <declaration name="n" type="int" line="105"/>
                <declaration name="M" type="Float64Matrix" line="106"/>
                <declaration name="iterator" type="Iterator&amp;lt;Float64Vector&amp;gt;" line="107"/>
                <scope line="108">
                    <declaration name="rowi" type="Float64Vector" line="109"/>
                </scope>
            </method>
            <javadoc line="118">
                Returns a complex matrix equivalent to the specified matrix.                
                <param>
                    that the matrix to convert.                    
                </param>
                <return>
                    &lt;code&gt;that&lt;/code&gt; or a complex matrix holding the same elements
                      as the specified matrix.                    
                </return>
            </javadoc>
            <method name="valueOf" type="Float64Matrix" line="125">
                <params>
                    <param name="that" type="Matrix&lt;Float64&gt;"/>
                </params>
                <declaration name="n" type="int" line="128"/>
                <declaration name="m" type="int" line="129"/>
                <declaration name="M" type="Float64Matrix" line="130"/>
                <scope line="131">
                    <declaration name="rowi" type="Float64Vector" line="132"/>
                </scope>
            </method>
            <method name="getNumberOfRows" type="int" line="139"/>
            <method name="getNumberOfColumns" type="int" line="144"/>
            <method name="get" type="Float64" line="149">
                <params>
                    <param name="i" type="int"/>
                    <param name="j" type="int"/>
                </params>
            </method>
            <method name="getRow" type="Float64Vector" line="154">
                <params>
                    <param name="i" type="int"/>
                </params>
                <comment line="158">
                    Else transposed.                    
                </comment>
                <declaration name="n" type="int" line="158"/>
                <declaration name="m" type="int" line="159"/>
                <declaration name="V" type="Float64Vector" line="162"/>
                <scope line="163"/>
            </method>
            <method name="getColumn" type="Float64Vector" line="170">
                <params>
                    <param name="j" type="int"/>
                </params>
                <declaration name="m" type="int" line="173"/>
                <declaration name="V" type="Float64Vector" line="176"/>
                <scope line="177"/>
            </method>
            <method name="getDiagonal" type="Float64Vector" line="184">
                <declaration name="m" type="int" line="185"/>
                <declaration name="n" type="int" line="186"/>
                <declaration name="dimension" type="int" line="187"/>
                <declaration name="V" type="Float64Vector" line="188"/>
                <scope line="189"/>
            </method>
            <method name="opposite" type="Float64Matrix" line="196">
                <declaration name="M" type="Float64Matrix" line="197"/>
                <scope line="198"/>
            </method>
            <method name="plus" type="Float64Matrix" line="205">
                <params>
                    <param name="that" type="Matrix&lt;Float64&gt;"/>
                </params>
                <declaration name="M" type="Float64Matrix" line="208"/>
                <scope line="209"/>
            </method>
            <method name="minus" type="Float64Matrix" line="217">
                <params>
                    <param name="that" type="Matrix&lt;Float64&gt;"/>
                </params>
                <comment line="218">
                    Returns more specialized type.                    
                </comment>
            </method>
            <method name="times" type="Float64Matrix" line="222">
                <params>
                    <param name="k" type="Float64"/>
                </params>
                <declaration name="M" type="Float64Matrix" line="223"/>
                <scope line="224"/>
            </method>
            <method name="times" type="Float64Vector" line="231">
                <params>
                    <param name="v" type="Vector&lt;Float64&gt;"/>
                </params>
                <declaration name="m" type="int" line="234"/>
                <declaration name="V" type="Float64Vector" line="235"/>
                <scope line="236"/>
            </method>
            <method name="times" type="Float64Matrix" line="243">
                <params>
                    <param name="that" type="Matrix&lt;Float64&gt;"/>
                </params>
                <comment line="250">
                    Creates a mxp matrix in transposed form (p columns vectors of size m)                    
                </comment>
                <comment line="251">
                    Transposed.                    
                </comment>
                <declaration name="n" type="int" line="244"/>
                <declaration name="m" type="int" line="245"/>
                <declaration name="p" type="int" line="246"/>
                <declaration name="M" type="Float64Matrix" line="250"/>
                <declaration name="multiply" type="Multiply" line="252"/>
            </method>
            <class name="Multiply" line="259">
                <implements interface="Runnable"/>
                <declaration name="FACTORY" type="ObjectFactory&amp;lt;Multiply&amp;gt;" line="260"/>
                <anonymous_class line="260">
                    <method name="create" type="Multiply" line="263"/>
                </anonymous_class>
                <declaration name="_left" type="Float64Matrix" line="268"/>
                <declaration name="_right" type="Matrix&amp;lt;Float64&amp;gt;" line="270"/>
                <declaration name="_rightColumnStart" type="int" line="272"/>
                <declaration name="_rightColumnEnd" type="int" line="274"/>
                <declaration name="_columnsResult" type="FastTable&amp;lt;Float64Vector&amp;gt;" line="276"/>
                <method name="valueOf" type="Multiply" line="280">
                    <params>
                        <param name="left" type="Float64Matrix"/>
                        <param name="right" type="Matrix&lt;Float64&gt;"/>
                        <param name="rightColumnStart" type="int"/>
                        <param name="rightColumnEnd" type="int"/>
                        <param name="columnsResult" type="FastTable&lt;Float64Vector&gt;"/>
                    </params>
                    <declaration name="multiply" type="Multiply" line="281"/>
                </method>
                <method name="recycle" type="void" line="290">
                    <params>
                        <param name="multiply" type="Multiply"/>
                    </params>
                </method>
                <method name="run" type="void" line="297">
                    <comment line="299">
                        Direct calculation.                        
                    </comment>
                    <comment line="311">
                        Concurrent/Recursive calculation.                        
                    </comment>
                    <scope line="298">
                        <declaration name="rows" type="FastTable&amp;lt;Float64Vector&amp;gt;" line="299"/>
                        <declaration name="m" type="int" line="300"/>
                        <scope line="301">
                            <declaration name="thatColj" type="Vector&amp;lt;Float64&amp;gt;" line="302"/>
                            <declaration name="column" type="Float64Vector" line="303"/>
                            <scope line="305"/>
                        </scope>
                    </scope>
                    <scope line="310">
                        <declaration name="halfIndex" type="int" line="311"/>
                        <declaration name="firstHalf" type="Multiply" line="312"/>
                        <declaration name="secondHalf" type="Multiply" line="314"/>
                        <scope line="317"/>
                        <scope line="320"/>
                    </scope>
                </method>
            </class>
            <method name="getRows" type="FastTable&lt;Float64Vector&gt;" line="329">
                <declaration name="rows" type="FastTable&amp;lt;Float64Vector&amp;gt;" line="332"/>
                <scope line="333"/>
            </method>
            <method name="inverse" type="Float64Matrix" line="340"/>
            <method name="determinant" type="Float64" line="347"/>
            <method name="transpose" type="Float64Matrix" line="352">
                <declaration name="M" type="Float64Matrix" line="353"/>
            </method>
            <method name="cofactor" type="Float64" line="359">
                <params>
                    <param name="i" type="int"/>
                    <param name="j" type="int"/>
                </params>
                <comment line="364">
                    Swaps i,j                    
                </comment>
                <scope line="360">
                    <declaration name="k" type="int" line="361"/>
                </scope>
                <declaration name="m" type="int" line="365"/>
                <declaration name="M" type="Float64Matrix" line="366"/>
                <scope line="367">
                    <declaration name="row" type="Float64Vector" line="370"/>
                    <declaration name="V" type="Float64Vector" line="371"/>
                    <scope line="373"/>
                </scope>
            </method>
            <method name="adjoint" type="Float64Matrix" line="383">
                <declaration name="M" type="Float64Matrix" line="384"/>
                <declaration name="m" type="int" line="385"/>
                <scope line="386">
                    <declaration name="row" type="Float64Vector" line="387"/>
                    <scope line="389">
                        <declaration name="cofactor" type="Float64" line="390"/>
                    </scope>
                </scope>
            </method>
            <method name="tensor" type="Float64Matrix" line="400">
                <params>
                    <param name="that" type="Matrix&lt;Float64&gt;"/>
                </params>
            </method>
            <method name="vectorization" type="Float64Vector" line="405"/>
            <method name="copy" type="Float64Matrix" line="410">
                <declaration name="M" type="Float64Matrix" line="411"/>
                <scope line="412"/>
            </method>
            <method name="newInstance" type="Float64Matrix" line="422">
                <params>
                    <param name="n" type="int"/>
                    <param name="transposed" type="boolean"/>
                </params>
                <declaration name="M" type="Float64Matrix" line="423"/>
            </method>
            <declaration name="FACTORY" type="ObjectFactory&amp;lt;Float64Matrix&amp;gt;" line="429"/>
            <anonymous_class line="429">
                <method name="create" type="Float64Matrix" line="431"/>
                <method name="cleanup" type="void" line="436">
                    <params>
                        <param name="matrix" type="Float64Matrix"/>
                    </params>
                </method>
            </anonymous_class>
            <method name="Float64Matrix" type="constructor" line="441"/>
            <declaration name="serialVersionUID" type="long" line="444"/>
        </class>
    </source>