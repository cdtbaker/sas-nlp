<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.jscience.mathematics.function">
        <import package="java.io.Serializable"/>
        <import package="org.jscience.mathematics.structure.Ring"/>
        <import package="javolution.context.ArrayFactory"/>
        <import package="javolution.lang.MathLib"/>
        <import package="javolution.lang.Realtime"/>
        <import package="javolution.lang.ValueType"/>
        <import package="javolution.text.Text"/>
        <import package="javolution.text.TextBuilder"/>
        <class name="Term" line="21">
            <implements interface="Serializable"/>
            <implements interface="Comparable">
                <type_params>
                    <type_param name="Term"/>
                </type_params>
            </implements>
            <implements interface="ValueType"/>
            <implements interface="Realtime"/>
            <javadoc line="21">
                This class represents the term of a {@link Polynomial polynomial} 
                  such as &lt;code&gt;x·y²&lt;/code&gt;.                
                <author>
                    &lt;a href=&quot;mailto:jean-marie@dautelle.com&quot;&gt;Jean-Marie Dautelle&lt;/a&gt;                    
                </author>
                <version>
                    3.0, February 13, 2006                    
                </version>
            </javadoc>
            <declaration name="ONE" type="Term" line="31"/>
            <javadoc line="31">
                Holds the multiplicative identity.                
            </javadoc>
            <declaration name="FACTORY" type="ArrayFactory&amp;lt;Term&amp;gt;" line="36"/>
            <javadoc line="36">
                Holds the term&apos;s factory.                
            </javadoc>
            <anonymous_class line="39">
                <method name="create" type="Term" line="42">
                    <params>
                        <param name="size" type="int"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="_variables" type="Variable&amp;lt;?&amp;gt;[]" line="47"/>
            <javadoc line="47">
                Holds the variables (ordered).                
            </javadoc>
            <declaration name="_powers" type="int[]" line="52"/>
            <javadoc line="52">
                Holds the corresponding powers (positive and different from zero).                
            </javadoc>
            <declaration name="_size" type="int" line="57"/>
            <javadoc line="57">
                Holds the number of variables.                
            </javadoc>
            <javadoc line="62">
                Creates a new term of specified capacity.                
                <param>
                    capacity the maxium number of variables.                    
                </param>
            </javadoc>
            <method name="Term" type="constructor" line="67">
                <params>
                    <param name="capacity" type="int"/>
                </params>
            </method>
            <javadoc line="72">
                Return the term corresponding to the specified variable raised to
                  the specified power.                
                <param>
                    v the variable.                    
                </param>
                <param>
                    n the power.                    
                </param>
                <return>
                    the term for &lt;code&gt;v&lt;sup&gt;n&lt;/sup&gt;&lt;/code&gt;                    
                </return>
                <throws>
                    IllegalArgumentException if &lt;code&gt;n &amp;lt; 0&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="valueOf" type="Term" line="81">
                <params>
                    <param name="v" type="Variable&lt;?&gt;"/>
                    <param name="n" type="int"/>
                </params>
                <declaration name="term" type="Term" line="87"/>
            </method>
            <javadoc line="94">
                Returns the number of variables for this term.                
                <return>
                    the number of variables.                    
                </return>
            </javadoc>
            <method name="size" type="int" line="99"/>
            <javadoc line="103">
                Returns the variable at the specified index (variables are 
                  lexically ordered).                
                <param>
                    index the variable index.                    
                </param>
                <return>
                    this term variables at specified position.                    
                </return>
                <throws>
                    IndexOutOfBoundsException if  
                      &lt;code&gt;(index &lt; 0) || (index &gt;= size())&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="getVariable" type="Variable&lt;?&gt;" line="112">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="118">
                Returns the power of the variable at the specified position.                
                <param>
                    index the variable index.                    
                </param>
                <return>
                    the power of the variable at the specified index.                    
                </return>
                <throws>
                    IndexOutOfBoundsException if  
                      &lt;code&gt;(index &lt; 0) || (index &gt;= size())&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="getPower" type="int" line="126">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="132">
                Returns the power of the specified variable.                
                <param>
                    v the variable for which the power is returned.                    
                </param>
                <return>
                    the power of the corresponding variable or &lt;code&gt;0&lt;/code&gt; if 
                      this term does not hold the specified variable.                    
                </return>
            </javadoc>
            <method name="getPower" type="int" line="139">
                <params>
                    <param name="v" type="Variable&lt;?&gt;"/>
                </params>
                <scope line="140"/>
            </method>
            <javadoc line="147">
                Return the product of this term with the one specified.                
                <param>
                    that the term multiplier.                    
                </param>
                <return>
                    &lt;code&gt;this · that&lt;/code&gt;                    
                </return>
                <throws>
                    IllegalArgumentException if the specified term holds a 
                      variable having the same symbol as one of the variable of
                      this term; but both variables are distinct.                    
                </throws>
            </javadoc>
            <method name="times" type="Term" line="156">
                <params>
                    <param name="that" type="Term"/>
                </params>
                <declaration name="thisSize" type="int" line="157"/>
                <declaration name="thatSize" type="int" line="158"/>
                <declaration name="result" type="Term" line="159"/>
                <scope line="161">
                    <declaration name="left" type="Variable&amp;lt;?&amp;gt;" line="162"/>
                    <declaration name="right" type="Variable&amp;lt;?&amp;gt;" line="163"/>
                    <scope line="164"/>
                    <scope line="171"/>
                    <scope line="176"/>
                    <declaration name="cmp" type="int" line="182"/>
                    <scope line="183"/>
                    <scope line="186"/>
                    <scope line="189"/>
                </scope>
            </method>
            <javadoc line="197">
                Return the division of this term with the one specified.                
                <param>
                    that the term divisor.                    
                </param>
                <return>
                    &lt;code&gt;this / that&lt;/code&gt;                    
                </return>
                <throws>
                    UnsupportedOperationException if this division would 
                      result in negative power.                    
                </throws>
                <throws>
                    IllegalArgumentException if the specified term holds a 
                      variable having the same symbol as one of the variable of
                      this term; but both variables are distinct.                    
                </throws>
            </javadoc>
            <method name="divide" type="Term" line="208">
                <params>
                    <param name="that" type="Term"/>
                </params>
                <declaration name="thisSize" type="int" line="209"/>
                <declaration name="thatSize" type="int" line="210"/>
                <declaration name="result" type="Term" line="211"/>
                <scope line="213">
                    <declaration name="left" type="Variable&amp;lt;?&amp;gt;" line="214"/>
                    <declaration name="right" type="Variable&amp;lt;?&amp;gt;" line="215"/>
                    <scope line="216"/>
                    <scope line="222"/>
                    <scope line="227">
                        <declaration name="power" type="int" line="228"/>
                        <scope line="232"/>
                    </scope>
                    <declaration name="cmp" type="int" line="238"/>
                    <scope line="239"/>
                    <scope line="242"/>
                    <scope line="245"/>
                </scope>
            </method>
            <javadoc line="253">
                Indicates if this term is equal to the object specified.                
                <param>
                    obj the object to compare for equality.                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if this term and the specified object are
                      considered equal; &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="260">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <declaration name="that" type="Term" line="265"/>
                <scope line="268"/>
            </method>
            <javadoc line="276">
                Returns a hash code for this term.                
                <return>
                    a hash code value for this object.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="281">
                <declaration name="h" type="int" line="282"/>
                <scope line="283"/>
            </method>
            <javadoc line="289">
                Returns the text representation of this term as a 
                  &lt;code&gt;java.lang.String&lt;/code&gt;.                
                <return>
                    &lt;code&gt;toText().toString()&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="295"/>
            <javadoc line="299">
                Returns the text representation of this term.                
            </javadoc>
            <method name="toText" type="Text" line="302"/>
            <javadoc line="323">
                Returns an entierely new copy of this term {@link javolution.context.AllocatorContext allocated} 
                  by the calling thread (possibly on the stack).                
                <return>
                    an identical and independant copy of this term.                    
                </return>
            </javadoc>
            <method name="copy" type="Term" line="330">
                <declaration name="term" type="Term" line="331"/>
                <scope line="333"/>
            </method>
            <javadoc line="340">
                Compares this term with the one specified for order.                
                <param>
                    that the term to be compared to.                    
                </param>
                <return>
                    a negative integer, zero, or a positive integer as this term
                      is less than, equal to, or greater than the specified term.                    
                </return>
            </javadoc>
            <method name="compareTo" type="int" line="347">
                <params>
                    <param name="that" type="Term"/>
                </params>
                <declaration name="n" type="int" line="348"/>
                <scope line="349">
                    <declaration name="cmp" type="int" line="350"/>
                </scope>
            </method>
            <javadoc line="361">
                Evaluates this term by replacing its {@link Variablevariables} by their current (context-local) values.                
                <return>
                    the evaluation of this term or &lt;code&gt;null&lt;/code&gt; if ONE.                    
                </return>
                <throws>
                    FunctionException if any of this term&apos;s variable is not set.                    
                </throws>
            </javadoc>
            <method name="evaluate" type="Ring" line="369">
                <comment line="378">
                    Iteration.                    
                </comment>
                <declaration name="result" type="Ring" line="370"/>
                <scope line="371">
                    <declaration name="pow2" type="Ring" line="372"/>
                    <declaration name="n" type="int" line="376"/>
                    <scope line="377">
                        <scope line="378"/>
                    </scope>
                </scope>
            </method>
            <declaration name="serialVersionUID" type="long" line="389"/>
        </class>
    </source>