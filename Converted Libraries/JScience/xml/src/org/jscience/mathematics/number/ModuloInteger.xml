<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.jscience.mathematics.number">
        <import package="org.jscience.mathematics.structure.Field"/>
        <import package="javolution.context.LocalContext"/>
        <import package="javolution.context.ObjectFactory"/>
        <import package="javolution.text.Text"/>
        <import package="javolution.xml.XMLFormat"/>
        <import package="javolution.xml.stream.XMLStreamException"/>
        <class name="ModuloInteger" line="19">
            <extends class="Number">
                <type_params>
                    <type_param name="ModuloInteger"/>
                </type_params>
            </extends>
            <comment line="221">
                /////////////////////
                 Factory creation. 
                /                
            </comment>
            <implements interface="Field">
                <type_params>
                    <type_param name="ModuloInteger"/>
                </type_params>
            </implements>
            <javadoc line="19">
                &lt;p&gt; This class represents a modulo integer. It can be used in conjonction 
                  with the {@link org.jscience.mathematics.vector.Matrix Matrix}class to resolve modulo equations (ref. number theory).&lt;/p&gt;                
                <author>
                    &lt;a href=&quot;mailto:jean-marie@dautelle.com&quot;&gt;Jean-Marie Dautelle&lt;/a&gt;                    
                </author>
                <version>
                    3.0, February 13, 2006                    
                </version>
                <see>
                    &lt;a href=&quot;http://en.wikipedia.org/wiki/Modular_arithmetic&quot;&gt;
                           Wikipedia: Modular Arithmetic&lt;/a&gt;                    
                </see>
            </javadoc>
            <declaration name="ZERO" type="ModuloInteger" line="31"/>
            <javadoc line="31">
                The modulo integer representing the additive identity.                
            </javadoc>
            <scope line="35"/>
            <declaration name="ONE" type="ModuloInteger" line="39"/>
            <javadoc line="39">
                The modulo integer representing the multiplicative identity.                
            </javadoc>
            <scope line="43"/>
            <declaration name="XML" type="XMLFormat&amp;lt;ModuloInteger&amp;gt;" line="47"/>
            <javadoc line="47">
                Holds the default XML representation for modulo integers.
                  This representation consists of a simple &lt;code&gt;value&lt;/code&gt; attribute
                  holding the {@link #toText() textual} representation.                
            </javadoc>
            <anonymous_class line="52">
                <method name="newInstance" type="ModuloInteger" line="55">
                    <params>
                        <param name="cls" type="Class&lt;ModuloInteger&gt;"/>
                        <param name="xml" type="InputElement"/>
                    </params>
                </method>
                <method name="write" type="void" line="59">
                    <params>
                        <param name="mi" type="ModuloInteger"/>
                        <param name="xml" type="OutputElement"/>
                    </params>
                </method>
                <method name="read" type="void" line="63">
                    <params>
                        <param name="xml" type="InputElement"/>
                        <param name="mi" type="ModuloInteger"/>
                    </params>
                    <comment line="65">
                        Nothing to do, immutable.                        
                    </comment>
                </method>
            </anonymous_class>
            <declaration name="MODULUS" type="LocalContext.Reference&amp;lt;LargeInteger&amp;gt;" line="68"/>
            <javadoc line="68">
                Holds the local modulus (for modular arithmetic).                
            </javadoc>
            <declaration name="_value" type="LargeInteger" line="74"/>
            <javadoc line="74">
                Holds the large integer value.                
            </javadoc>
            <javadoc line="79">
                Returns the modulo integer having the specified value (independently of
                  the current modulo).                
                <param>
                    value the modulo integer intrinsic value.                    
                </param>
                <return>
                    the corresponding modulo number.                    
                </return>
            </javadoc>
            <method name="valueOf" type="ModuloInteger" line="86">
                <params>
                    <param name="value" type="LargeInteger"/>
                </params>
            </method>
            <javadoc line="89">
                Returns the modulo integer for the specified character sequence in
                  decimal number.                
                <param>
                    chars the character sequence.                    
                </param>
                <return>
                    the corresponding modulo number.                    
                </return>
            </javadoc>
            <method name="valueOf" type="ModuloInteger" line="96">
                <params>
                    <param name="chars" type="CharSequence"/>
                </params>
            </method>
            <javadoc line="100">
                Returns the {@link javolution.context.LocalContext local} modulus 
                  for modular arithmetic or &lt;code&gt;null&lt;/code&gt; if the arithmetic operations
                  are non-modular (default).                
                <return>
                    the local modulus or &lt;code&gt;null&lt;/code&gt; if none.                    
                </return>
                <see>
                    #setModulus                    
                </see>
            </javadoc>
            <method name="getModulus" type="LargeInteger" line="108"/>
            <javadoc line="112">
                Sets the {@link javolution.context.LocalContext local} modulus 
                  for modular arithmetic.                
                <param>
                    modulus the new modulus or &lt;code&gt;null&lt;/code&gt; to unset the modulus.                    
                </param>
                <throws>
                    IllegalArgumentException if &lt;code&gt;modulus &amp;lt;= 0&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="setModulus" type="void" line="119">
                <params>
                    <param name="modulus" type="LargeInteger"/>
                </params>
            </method>
            <javadoc line="126">
                Returns the current modulo value of this number. If the modulus 
                  is {@link #setModulus set} to &lt;code&gt;null&lt;/code&gt; the intrinsic value
                  (the creation value) is returned.                
                <return>
                    the positive number equals to this number modulo modulus or
                      this modulo creation value.                    
                </return>
            </javadoc>
            <method name="moduloValue" type="LargeInteger" line="134">
                <declaration name="modulus" type="LargeInteger" line="135"/>
            </method>
            <javadoc line="139">
                Returns the text representation of the current modulo value of 
                  this number.                
                <return>
                    the representation of its modulo value.                    
                </return>
            </javadoc>
            <method name="toText" type="Text" line="145"/>
            <javadoc line="149">
                Compares this modulo integer against the specified object
                  independently of the current modulus.                
                <param>
                    that the object to compare with.                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if that is a modulo number with the same 
                      intrinsic value; &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="157">
                <params>
                    <param name="that" type="Object"/>
                </params>
            </method>
            <javadoc line="163">
                Returns the hash code for this large integer number.                
                <return>
                    the hash code value.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="168"/>
            <method name="isLargerThan" type="boolean" line="173">
                <params>
                    <param name="that" type="ModuloInteger"/>
                </params>
            </method>
            <method name="longValue" type="long" line="178"/>
            <method name="doubleValue" type="double" line="183"/>
            <method name="compareTo" type="int" line="188">
                <params>
                    <param name="that" type="ModuloInteger"/>
                </params>
            </method>
            <method name="times" type="ModuloInteger" line="192">
                <params>
                    <param name="that" type="ModuloInteger"/>
                </params>
                <declaration name="value" type="LargeInteger" line="193"/>
                <declaration name="modulus" type="LargeInteger" line="194"/>
            </method>
            <method name="plus" type="ModuloInteger" line="199">
                <params>
                    <param name="that" type="ModuloInteger"/>
                </params>
                <declaration name="value" type="LargeInteger" line="200"/>
                <declaration name="modulus" type="LargeInteger" line="201"/>
            </method>
            <method name="opposite" type="ModuloInteger" line="206">
                <declaration name="value" type="LargeInteger" line="207"/>
                <declaration name="modulus" type="LargeInteger" line="208"/>
            </method>
            <method name="inverse" type="ModuloInteger" line="213">
                <declaration name="modulus" type="LargeInteger" line="214"/>
            </method>
            <method name="newInstance" type="ModuloInteger" line="224">
                <params>
                    <param name="value" type="LargeInteger"/>
                </params>
                <declaration name="m" type="ModuloInteger" line="225"/>
            </method>
            <declaration name="FACTORY" type="ObjectFactory&amp;lt;ModuloInteger&amp;gt;" line="230"/>
            <anonymous_class line="230">
                <method name="create" type="ModuloInteger" line="231"/>
            </anonymous_class>
            <method name="ModuloInteger" type="constructor" line="236"/>
            <method name="copy" type="ModuloInteger" line="240"/>
            <declaration name="serialVersionUID" type="long" line="244"/>
        </class>
    </source>