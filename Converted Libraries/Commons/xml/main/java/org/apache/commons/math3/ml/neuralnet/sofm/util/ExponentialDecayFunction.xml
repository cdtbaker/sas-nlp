<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.ml.neuralnet.sofm.util">
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="ExponentialDecayFunction" line="24">
            <javadoc line="24">
                Exponential decay function: &lt;code&gt;a e&lt;sup&gt;-x / b&lt;/sup&gt;&lt;/code&gt;,
                  where {@code x} is the (integer) independent variable.
                  &lt;br/&gt;
                  Class is immutable.                
                <version>
                    $Id: ExponentialDecayFunction.java 1566092 2014-02-08 18:48:29Z tn $                    
                </version>
                <since>
                    3.3                    
                </since>
            </javadoc>
            <declaration name="a" type="double" line="34"/>
            <javadoc line="34">
                Factor {@code a}.                
            </javadoc>
            <declaration name="oneOverB" type="double" line="36"/>
            <javadoc line="36">
                Factor {@code 1 / b}.                
            </javadoc>
            <javadoc line="39">
                Creates an instance. It will be such that
                  &lt;ul&gt;
                  &lt;li&gt;{@code a = initValue}&lt;/li&gt;
                  &lt;li&gt;{@code b = -numCall / ln(valueAtNumCall / initValue)}&lt;/li&gt;
                  &lt;/ul&gt;                
                <param>
                    initValue Initial value, i.e. {@link #value(long) value(0)}.                    
                </param>
                <param>
                    valueAtNumCall Value of the function at {@code numCall}.                    
                </param>
                <param>
                    numCall Argument for which the function returns{@code valueAtNumCall}.                    
                </param>
                <throws>
                    NotStrictlyPositiveException if {@code initValue &lt;= 0}.                    
                </throws>
                <throws>
                    NotStrictlyPositiveException if {@code valueAtNumCall &lt;= 0}.                    
                </throws>
                <throws>
                    NumberIsTooLargeException if {@code valueAtNumCall &gt;= initValue}.                    
                </throws>
                <throws>
                    NotStrictlyPositiveException if {@code numCall &lt;= 0}.                    
                </throws>
            </javadoc>
            <method name="ExponentialDecayFunction" type="constructor" line="57">
                <params>
                    <param name="initValue" type="double"/>
                    <param name="valueAtNumCall" type="double"/>
                    <param name="numCall" type="long"/>
                </params>
                <scope line="58"/>
                <scope line="61"/>
                <scope line="64"/>
                <scope line="67"/>
            </method>
            <javadoc line="75">
                Computes &lt;code&gt;a e&lt;sup&gt;-numCall / b&lt;/sup&gt;&lt;/code&gt;.                
                <param>
                    numCall Current step of the training task.                    
                </param>
                <return>
                    the value of the function at {@code numCall}.                    
                </return>
            </javadoc>
            <method name="value" type="double" line="81">
                <params>
                    <param name="numCall" type="long"/>
                </params>
            </method>
        </class>
    </source>