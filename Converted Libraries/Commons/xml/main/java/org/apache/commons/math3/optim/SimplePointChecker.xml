<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optim">
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.Pair"/>
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <class name="SimplePointChecker" line="23">
            <type_params>
                <type_param name="PAIR"/>
            </type_params>
            <extends class="AbstractConvergenceChecker">
                <type_params>
                    <type_param name="PAIR"/>
                </type_params>
            </extends>
            <javadoc line="23">
                Simple implementation of the {@link ConvergenceChecker} interface using
                  only point coordinates.
                  Convergence is considered to have been reached if either the relative
                  difference between each point coordinate are smaller than a threshold
                  or if either the absolute difference between the point coordinates are
                  smaller than another threshold.
                  &lt;br/&gt;
                  The {@link #converged(int,Pair,Pair) converged} method will also return{@code true} if the number of iterations has been set (see{@link #SimplePointChecker(double,double,int) this constructor}).                
                <param>
                    <PAIR>
                       Type of the (point, value) pair.
                      The type of the "value" part of the pair (not used by this class).                    
                </param>
                <version>
                    $Id: SimplePointChecker.java 1462503 2013-03-29 15:48:27Z luc $                    
                </version>
                <since>
                    3.0                    
                </since>
            </javadoc>
            <declaration name="ITERATION_CHECK_DISABLED" type="int" line="44"/>
            <javadoc line="44">
                If {@link #maxIterationCount} is set to this value, the number of
                  iterations will never cause {@link #converged(int,Pair,Pair)}to return {@code true}.                
            </javadoc>
            <declaration name="maxIterationCount" type="int" line="50"/>
            <javadoc line="50">
                Number of iterations after which the{@link #converged(int,Pair,Pair)} method
                  will return true (unless the check is disabled).                
            </javadoc>
            <javadoc line="57">
                Build an instance with specified thresholds.
                  In order to perform only relative checks, the absolute tolerance
                  must be set to a negative value. In order to perform only absolute
                  checks, the relative tolerance must be set to a negative value.                
                <param>
                    relativeThreshold relative tolerance threshold                    
                </param>
                <param>
                    absoluteThreshold absolute tolerance threshold                    
                </param>
            </javadoc>
            <method name="SimplePointChecker" type="constructor" line="67">
                <params>
                    <param name="relativeThreshold" type="double"/>
                    <param name="absoluteThreshold" type="double"/>
                </params>
            </method>
            <javadoc line="72">
                Builds an instance with specified thresholds.
                  In order to perform only relative checks, the absolute tolerance
                  must be set to a negative value. In order to perform only absolute
                  checks, the relative tolerance must be set to a negative value.                
                <param>
                    relativeThreshold Relative tolerance threshold.                    
                </param>
                <param>
                    absoluteThreshold Absolute tolerance threshold.                    
                </param>
                <param>
                    maxIter Maximum iteration count.                    
                </param>
                <throws>
                    NotStrictlyPositiveException if {@code maxIter <= 0}.                    
                </throws>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="SimplePointChecker" type="constructor" line="87">
                <params>
                    <param name="relativeThreshold" type="double"/>
                    <param name="absoluteThreshold" type="double"/>
                    <param name="maxIter" type="int"/>
                </params>
                <scope line="90"/>
            </method>
            <javadoc line="96">
                Check if the optimization algorithm has converged considering the
                  last two points.
                  This method may be called several times from the same algorithm
                  iteration with different points. This can be detected by checking the
                  iteration number at each call if needed. Each time this method is
                  called, the previous and current point correspond to points with the
                  same role at each iteration, so they can be compared. As an example,
                  simplex-based algorithms call this method for all points of the simplex,
                  not only for the best or worst ones.                
                <param>
                    iteration Index of current iteration                    
                </param>
                <param>
                    previous Best point in the previous iteration.                    
                </param>
                <param>
                    current Best point in the current iteration.                    
                </param>
                <return>
                    {@code true} if the arguments satify the convergence criterion.                    
                </return>
            </javadoc>
            <method name="converged" type="boolean" line="115">
                <params>
                    <param name="iteration" type="int"/>
                    <param name="previous" type="PAIR"/>
                    <param name="current" type="PAIR"/>
                </params>
                <scope line="116"/>
                <declaration name="p" type="double[]" line="120"/>
                <declaration name="c" type="double[]" line="121"/>
                <scope line="122">
                    <declaration name="pi" type="double" line="123"/>
                    <declaration name="ci" type="double" line="124"/>
                    <declaration name="difference" type="double" line="125"/>
                    <declaration name="size" type="double" line="126"/>
                    <scope line="128"/>
                </scope>
            </method>
        </class>
    </source>