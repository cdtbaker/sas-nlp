<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.util">
        <import package="java.util.Arrays"/>
        <import package="org.apache.commons.math3.exception.MathArithmeticException"/>
        <import package="org.apache.commons.math3.exception.NotFiniteNumberException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.util.Localizable"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <class name="MathUtils" line="8">
            <javadoc line="8">
                Miscellaneous utility functions.                
                <see>
                    ArithmeticUtils                    
                </see>
                <see>
                    Precision                    
                </see>
                <see>
                    MathArrays                    
                </see>
                <version>
                    $Id: MathUtils.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
            </javadoc>
            <declaration name="TWO_PI" type="double" line="16"/>
            <javadoc line="16">
                2 &amp;pi;.                
                <since>
                    2.1                    
                </since>
            </javadoc>
            <javadoc line="21">
                Class contains only static methods.                
            </javadoc>
            <method name="MathUtils" type="constructor" line="24"/>
            <javadoc line="26">
                Returns an integer hash code representing the given double value.                
                <param>
                    value the value to be hashed                    
                </param>
                <return>
                    the hash code                    
                </return>
            </javadoc>
            <method name="hash" type="int" line="31">
                <params>
                    <param name="value" type="double"/>
                </params>
            </method>
            <javadoc line="34">
                Returns an integer hash code representing the given double array.                
                <param>
                    value the value to be hashed (may be null)                    
                </param>
                <return>
                    the hash code                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="hash" type="int" line="40">
                <params>
                    <param name="value" type="double[]"/>
                </params>
            </method>
            <javadoc line="43">
                Normalize an angle in a 2&amp;pi wide interval around a center value.
                  &lt;p&gt;This method has three main uses:&lt;/p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;normalize an angle between 0 and 2&amp;pi;:&lt;br/&gt;{@code a = MathUtils.normalizeAngle(a, FastMath.PI);}&lt;/li&gt;
                  &lt;li&gt;normalize an angle between -&amp;pi; and +&amp;pi;&lt;br/&gt;{@code a = MathUtils.normalizeAngle(a, 0.0);}&lt;/li&gt;
                  &lt;li&gt;compute the angle between two defining angular positions:&lt;br&gt;{@code angle = MathUtils.normalizeAngle(end, start) - start;}&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;Note that due to numerical accuracy and since &amp;pi; cannot be represented
                  exactly, the result interval is &lt;em&gt;closed&lt;/em&gt;, it cannot be half-closed
                  as would be more satisfactory in a purely mathematical view.&lt;/p&gt;                
                <param>
                    a angle to normalize                    
                </param>
                <param>
                    center center of the desired 2&pi; interval for the result                    
                </param>
                <return>
                    a-2k&pi; with integer k and center-&pi; &lt;= a-2k&pi; &lt;= center+&pi;                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="normalizeAngle" type="double" line="59">
                <params>
                    <param name="a" type="double"/>
                    <param name="center" type="double"/>
                </params>
            </method>
            <javadoc line="62">
                &lt;p&gt;Reduce {@code |a - offset|} to the primary interval{@code [0, |period|)}.&lt;/p&gt;
                  &lt;p&gt;Specifically, the value returned is &lt;br/&gt;{@code a - |period|  floor((a - offset) / |period|) - offset}.&lt;/p&gt;
                  &lt;p&gt;If any of the parameters are {@code NaN} or infinite, the result is{@code NaN}.&lt;/p&gt;                
                <param>
                    a Value to reduce.                    
                </param>
                <param>
                    period Period.                    
                </param>
                <param>
                    offset Value that will be mapped to {@code 0}.                    
                </param>
                <return>
                    the value, within the interval {@code [0 |period|)},
                      that corresponds to {@code a}.                    
                </return>
            </javadoc>
            <method name="reduce" type="double" line="72">
                <params>
                    <param name="a" type="double"/>
                    <param name="period" type="double"/>
                    <param name="offset" type="double"/>
                </params>
                <declaration name="p" type="double" line="73"/>
            </method>
            <javadoc line="76">
                Returns the first argument with the sign of the second argument.                
                <param>
                    magnitude Magnitude of the returned value.                    
                </param>
                <param>
                    sign Sign of the returned value.                    
                </param>
                <return>
                    a value with magnitude equal to {@code magnitude} and with the
                      same sign as the {@code sign} argument.                    
                </return>
                <throws>
                    MathArithmeticException if {@code magnitude == Byte.MIN_VALUE}and {@code sign >= 0}.                    
                </throws>
            </javadoc>
            <method name="copySign" type="byte" line="84">
                <params>
                    <param name="magnitude" type="byte"/>
                    <param name="sign" type="byte"/>
                </params>
                <scope line="85"/>
                <scope line="88"/>
                <scope line="91"/>
            </method>
            <javadoc line="95">
                Returns the first argument with the sign of the second argument.                
                <param>
                    magnitude Magnitude of the returned value.                    
                </param>
                <param>
                    sign Sign of the returned value.                    
                </param>
                <return>
                    a value with magnitude equal to {@code magnitude} and with the
                      same sign as the {@code sign} argument.                    
                </return>
                <throws>
                    MathArithmeticException if {@code magnitude == Short.MIN_VALUE}and {@code sign >= 0}.                    
                </throws>
            </javadoc>
            <method name="copySign" type="short" line="103">
                <params>
                    <param name="magnitude" type="short"/>
                    <param name="sign" type="short"/>
                </params>
                <scope line="104"/>
                <scope line="107"/>
                <scope line="110"/>
            </method>
            <javadoc line="114">
                Returns the first argument with the sign of the second argument.                
                <param>
                    magnitude Magnitude of the returned value.                    
                </param>
                <param>
                    sign Sign of the returned value.                    
                </param>
                <return>
                    a value with magnitude equal to {@code magnitude} and with the
                      same sign as the {@code sign} argument.                    
                </return>
                <throws>
                    MathArithmeticException if {@code magnitude == Integer.MIN_VALUE}and {@code sign >= 0}.                    
                </throws>
            </javadoc>
            <method name="copySign" type="int" line="122">
                <params>
                    <param name="magnitude" type="int"/>
                    <param name="sign" type="int"/>
                </params>
                <scope line="123"/>
                <scope line="126"/>
                <scope line="129"/>
            </method>
            <javadoc line="133">
                Returns the first argument with the sign of the second argument.                
                <param>
                    magnitude Magnitude of the returned value.                    
                </param>
                <param>
                    sign Sign of the returned value.                    
                </param>
                <return>
                    a value with magnitude equal to {@code magnitude} and with the
                      same sign as the {@code sign} argument.                    
                </return>
                <throws>
                    MathArithmeticException if {@code magnitude == Long.MIN_VALUE}and {@code sign >= 0}.                    
                </throws>
            </javadoc>
            <method name="copySign" type="long" line="141">
                <params>
                    <param name="magnitude" type="long"/>
                    <param name="sign" type="long"/>
                </params>
                <scope line="142"/>
                <scope line="145"/>
                <scope line="148"/>
            </method>
            <javadoc line="152">
                Check that the argument is a real number.                
                <param>
                    x Argument.                    
                </param>
                <throws>
                    NotFiniteNumberException if {@code x} is not a
                      finite real number.                    
                </throws>
            </javadoc>
            <method name="checkFinite" type="void" line="158">
                <params>
                    <param name="x" type="double"/>
                </params>
                <scope line="159"/>
            </method>
            <javadoc line="163">
                Check that all the elements are real numbers.                
                <param>
                    val Arguments.                    
                </param>
                <throws>
                    NotFiniteNumberException if any values of the array is not a
                      finite real number.                    
                </throws>
            </javadoc>
            <method name="checkFinite" type="void" line="169">
                <params>
                    <param name="val" type="double[]"/>
                </params>
                <scope line="170">
                    <declaration name="x" type="double" line="171"/>
                    <scope line="172"/>
                </scope>
            </method>
            <javadoc line="177">
                Checks that an object is not null.                
                <param>
                    o Object to be checked.                    
                </param>
                <param>
                    pattern Message pattern.                    
                </param>
                <param>
                    args Arguments to replace the placeholders in {@code pattern}.                    
                </param>
                <throws>
                    NullArgumentException if {@code o} is {@code null}.                    
                </throws>
            </javadoc>
            <method name="checkNotNull" type="void" line="184">
                <params>
                    <param name="o" type="Object"/>
                    <param name="pattern" type="Localizable"/>
                    <param name="args" type="Object"/>
                </params>
                <scope line="185"/>
            </method>
            <javadoc line="189">
                Checks that an object is not null.                
                <param>
                    o Object to be checked.                    
                </param>
                <throws>
                    NullArgumentException if {@code o} is {@code null}.                    
                </throws>
            </javadoc>
            <method name="checkNotNull" type="void" line="194">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <scope line="195"/>
            </method>
        </class>
    </source>