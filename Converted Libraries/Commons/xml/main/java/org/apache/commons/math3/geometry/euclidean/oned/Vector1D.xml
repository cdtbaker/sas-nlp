<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.geometry.euclidean.oned">
        <import package="java.text.NumberFormat"/>
        <import package="org.apache.commons.math3.exception.MathArithmeticException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.geometry.Space"/>
        <import package="org.apache.commons.math3.geometry.Vector"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <class name="Vector1D" line="28">
            <comment line="42">
                CHECKSTYLE: stop ConstantName                
            </comment>
            <comment line="45">
                CHECKSTYLE: resume ConstantName                
            </comment>
            <implements interface="Vector">
                <type_params>
                    <type_param name="Euclidean1D"/>
                </type_params>
            </implements>
            <javadoc line="28">
                This class represents a 1D vector.
                  &lt;p&gt;Instances of this class are guaranteed to be immutable.&lt;/p&gt;                
                <version>
                    $Id: Vector1D.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
                <since>
                    3.0                    
                </since>
            </javadoc>
            <declaration name="ZERO" type="Vector1D" line="35"/>
            <javadoc line="35">
                Origin (coordinates: 0).                
            </javadoc>
            <declaration name="ONE" type="Vector1D" line="38"/>
            <javadoc line="38">
                Unit (coordinates: 1).                
            </javadoc>
            <declaration name="NaN" type="Vector1D" line="42"/>
            <javadoc line="42">
                A vector with all coordinates set to NaN.                
            </javadoc>
            <declaration name="POSITIVE_INFINITY" type="Vector1D" line="46"/>
            <javadoc line="46">
                A vector with all coordinates set to positive infinity.                
            </javadoc>
            <declaration name="NEGATIVE_INFINITY" type="Vector1D" line="50"/>
            <javadoc line="50">
                A vector with all coordinates set to negative infinity.                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="54"/>
            <javadoc line="54">
                Serializable UID.                
            </javadoc>
            <declaration name="x" type="double" line="57"/>
            <javadoc line="57">
                Abscissa.                
            </javadoc>
            <javadoc line="60">
                Simple constructor.
                  Build a vector from its coordinates                
                <param>
                    x abscissa                    
                </param>
                <see>
                    #getX()                    
                </see>
            </javadoc>
            <method name="Vector1D" type="constructor" line="65">
                <params>
                    <param name="x" type="double"/>
                </params>
            </method>
            <javadoc line="69">
                Multiplicative constructor
                  Build a vector from another one and a scale factor.
                  The vector built will be a  u                
                <param>
                    a scale factor                    
                </param>
                <param>
                    u base (unscaled) vector                    
                </param>
            </javadoc>
            <method name="Vector1D" type="constructor" line="75">
                <params>
                    <param name="a" type="double"/>
                    <param name="u" type="Vector1D"/>
                </params>
            </method>
            <javadoc line="79">
                Linear constructor
                  Build a vector from two other ones and corresponding scale factors.
                  The vector built will be a1  u1 + a2  u2                
                <param>
                    a1 first scale factor                    
                </param>
                <param>
                    u1 first base (unscaled) vector                    
                </param>
                <param>
                    a2 second scale factor                    
                </param>
                <param>
                    u2 second base (unscaled) vector                    
                </param>
            </javadoc>
            <method name="Vector1D" type="constructor" line="87">
                <params>
                    <param name="a1" type="double"/>
                    <param name="u1" type="Vector1D"/>
                    <param name="a2" type="double"/>
                    <param name="u2" type="Vector1D"/>
                </params>
            </method>
            <javadoc line="91">
                Linear constructor
                  Build a vector from three other ones and corresponding scale factors.
                  The vector built will be a1  u1 + a2  u2 + a3  u3                
                <param>
                    a1 first scale factor                    
                </param>
                <param>
                    u1 first base (unscaled) vector                    
                </param>
                <param>
                    a2 second scale factor                    
                </param>
                <param>
                    u2 second base (unscaled) vector                    
                </param>
                <param>
                    a3 third scale factor                    
                </param>
                <param>
                    u3 third base (unscaled) vector                    
                </param>
            </javadoc>
            <method name="Vector1D" type="constructor" line="102">
                <params>
                    <param name="a1" type="double"/>
                    <param name="u1" type="Vector1D"/>
                    <param name="a2" type="double"/>
                    <param name="u2" type="Vector1D"/>
                    <param name="a3" type="double"/>
                    <param name="u3" type="Vector1D"/>
                </params>
            </method>
            <javadoc line="106">
                Linear constructor
                  Build a vector from four other ones and corresponding scale factors.
                  The vector built will be a1  u1 + a2  u2 + a3  u3 + a4  u4                
                <param>
                    a1 first scale factor                    
                </param>
                <param>
                    u1 first base (unscaled) vector                    
                </param>
                <param>
                    a2 second scale factor                    
                </param>
                <param>
                    u2 second base (unscaled) vector                    
                </param>
                <param>
                    a3 third scale factor                    
                </param>
                <param>
                    u3 third base (unscaled) vector                    
                </param>
                <param>
                    a4 fourth scale factor                    
                </param>
                <param>
                    u4 fourth base (unscaled) vector                    
                </param>
            </javadoc>
            <method name="Vector1D" type="constructor" line="119">
                <params>
                    <param name="a1" type="double"/>
                    <param name="u1" type="Vector1D"/>
                    <param name="a2" type="double"/>
                    <param name="u2" type="Vector1D"/>
                    <param name="a3" type="double"/>
                    <param name="u3" type="Vector1D"/>
                    <param name="a4" type="double"/>
                    <param name="u4" type="Vector1D"/>
                </params>
            </method>
            <javadoc line="123">
                Get the abscissa of the vector.                
                <return>
                    abscissa of the vector                    
                </return>
                <see>
                    #Vector1D(double)                    
                </see>
            </javadoc>
            <method name="getX" type="double" line="127"/>
            <javadoc line="131">
                {@inheritDoc}                
            </javadoc>
            <method name="getSpace" type="Space" line="132"/>
            <javadoc line="136">
                {@inheritDoc}                
            </javadoc>
            <method name="getZero" type="Vector1D" line="137"/>
            <javadoc line="141">
                {@inheritDoc}                
            </javadoc>
            <method name="getNorm1" type="double" line="142"/>
            <javadoc line="146">
                {@inheritDoc}                
            </javadoc>
            <method name="getNorm" type="double" line="147"/>
            <javadoc line="151">
                {@inheritDoc}                
            </javadoc>
            <method name="getNormSq" type="double" line="152"/>
            <javadoc line="156">
                {@inheritDoc}                
            </javadoc>
            <method name="getNormInf" type="double" line="157"/>
            <javadoc line="161">
                {@inheritDoc}                
            </javadoc>
            <method name="add" type="Vector1D" line="162">
                <params>
                    <param name="v" type="Vector<Euclidean1D>"/>
                </params>
                <declaration name="v1" type="Vector1D" line="163"/>
            </method>
            <javadoc line="167">
                {@inheritDoc}                
            </javadoc>
            <method name="add" type="Vector1D" line="168">
                <params>
                    <param name="factor" type="double"/>
                    <param name="v" type="Vector<Euclidean1D>"/>
                </params>
                <declaration name="v1" type="Vector1D" line="169"/>
            </method>
            <javadoc line="173">
                {@inheritDoc}                
            </javadoc>
            <method name="subtract" type="Vector1D" line="174">
                <params>
                    <param name="p" type="Vector<Euclidean1D>"/>
                </params>
                <declaration name="p3" type="Vector1D" line="175"/>
            </method>
            <javadoc line="179">
                {@inheritDoc}                
            </javadoc>
            <method name="subtract" type="Vector1D" line="180">
                <params>
                    <param name="factor" type="double"/>
                    <param name="v" type="Vector<Euclidean1D>"/>
                </params>
                <declaration name="v1" type="Vector1D" line="181"/>
            </method>
            <javadoc line="185">
                {@inheritDoc}                
            </javadoc>
            <method name="normalize" type="Vector1D" line="186">
                <declaration name="s" type="double" line="187"/>
                <scope line="188"/>
            </method>
            <javadoc line="193">
                {@inheritDoc}                
            </javadoc>
            <method name="negate" type="Vector1D" line="194"/>
            <javadoc line="198">
                {@inheritDoc}                
            </javadoc>
            <method name="scalarMultiply" type="Vector1D" line="199">
                <params>
                    <param name="a" type="double"/>
                </params>
            </method>
            <javadoc line="203">
                {@inheritDoc}                
            </javadoc>
            <method name="isNaN" type="boolean" line="204"/>
            <javadoc line="208">
                {@inheritDoc}                
            </javadoc>
            <method name="isInfinite" type="boolean" line="209"/>
            <javadoc line="213">
                {@inheritDoc}                
            </javadoc>
            <method name="distance1" type="double" line="214">
                <params>
                    <param name="p" type="Vector<Euclidean1D>"/>
                </params>
                <declaration name="p3" type="Vector1D" line="215"/>
                <declaration name="dx" type="double" line="216"/>
            </method>
            <javadoc line="220">
                {@inheritDoc}                
            </javadoc>
            <method name="distance" type="double" line="221">
                <params>
                    <param name="p" type="Vector<Euclidean1D>"/>
                </params>
                <declaration name="p3" type="Vector1D" line="222"/>
                <declaration name="dx" type="double" line="223"/>
            </method>
            <javadoc line="227">
                {@inheritDoc}                
            </javadoc>
            <method name="distanceInf" type="double" line="228">
                <params>
                    <param name="p" type="Vector<Euclidean1D>"/>
                </params>
                <declaration name="p3" type="Vector1D" line="229"/>
                <declaration name="dx" type="double" line="230"/>
            </method>
            <javadoc line="234">
                {@inheritDoc}                
            </javadoc>
            <method name="distanceSq" type="double" line="235">
                <params>
                    <param name="p" type="Vector<Euclidean1D>"/>
                </params>
                <declaration name="p3" type="Vector1D" line="236"/>
                <declaration name="dx" type="double" line="237"/>
            </method>
            <javadoc line="241">
                {@inheritDoc}                
            </javadoc>
            <method name="dotProduct" type="double" line="242">
                <params>
                    <param name="v" type="Vector<Euclidean1D>"/>
                </params>
                <declaration name="v1" type="Vector1D" line="243"/>
            </method>
            <javadoc line="247">
                Compute the distance between two vectors according to the L&lt;sub&gt;2&lt;/sub&gt; norm.
                  &lt;p&gt;Calling this method is equivalent to calling:
                  &lt;code&gt;p1.subtract(p2).getNorm()&lt;/code&gt; except that no intermediate
                  vector is built&lt;/p&gt;                
                <param>
                    p1 first vector                    
                </param>
                <param>
                    p2 second vector                    
                </param>
                <return>
                    the distance between p1 and p2 according to the L<sub>2</sub> norm                    
                </return>
            </javadoc>
            <method name="distance" type="double" line="255">
                <params>
                    <param name="p1" type="Vector1D"/>
                    <param name="p2" type="Vector1D"/>
                </params>
            </method>
            <javadoc line="259">
                Compute the distance between two vectors according to the L&lt;sub&gt;&amp;infin;&lt;/sub&gt; norm.
                  &lt;p&gt;Calling this method is equivalent to calling:
                  &lt;code&gt;p1.subtract(p2).getNormInf()&lt;/code&gt; except that no intermediate
                  vector is built&lt;/p&gt;                
                <param>
                    p1 first vector                    
                </param>
                <param>
                    p2 second vector                    
                </param>
                <return>
                    the distance between p1 and p2 according to the L<sub>&infin;</sub> norm                    
                </return>
            </javadoc>
            <method name="distanceInf" type="double" line="267">
                <params>
                    <param name="p1" type="Vector1D"/>
                    <param name="p2" type="Vector1D"/>
                </params>
            </method>
            <javadoc line="271">
                Compute the square of the distance between two vectors.
                  &lt;p&gt;Calling this method is equivalent to calling:
                  &lt;code&gt;p1.subtract(p2).getNormSq()&lt;/code&gt; except that no intermediate
                  vector is built&lt;/p&gt;                
                <param>
                    p1 first vector                    
                </param>
                <param>
                    p2 second vector                    
                </param>
                <return>
                    the square of the distance between p1 and p2                    
                </return>
            </javadoc>
            <method name="distanceSq" type="double" line="279">
                <params>
                    <param name="p1" type="Vector1D"/>
                    <param name="p2" type="Vector1D"/>
                </params>
            </method>
            <javadoc line="283">
                Test for the equality of two 1D vectors.
                  &lt;p&gt;
                  If all coordinates of two 1D vectors are exactly the same, and none are
                  &lt;code&gt;Double.NaN&lt;/code&gt;, the two 1D vectors are considered to be equal.
                  &lt;/p&gt;
                  &lt;p&gt;
                  &lt;code&gt;NaN&lt;/code&gt; coordinates are considered to affect globally the vector
                  and be equals to each other - i.e, if either (or all) coordinates of the
                  1D vector are equal to &lt;code&gt;Double.NaN&lt;/code&gt;, the 1D vector is equal to{@link #NaN}.
                  &lt;/p&gt;                
                <param>
                    other Object to test for equality to this                    
                </param>
                <return>
                    true if two 1D vector objects are equal, false if
                      object is null, not an instance of Vector1D, or
                      not equal to this Vector1D instance                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="303">
                <params>
                    <param name="other" type="Object"/>
                </params>
                <scope line="305"/>
                <scope line="309">
                    <declaration name="rhs" type="Vector1D" line="310"/>
                    <scope line="311"/>
                </scope>
            </method>
            <javadoc line="320">
                Get a hashCode for the 1D vector.
                  &lt;p&gt;
                  All NaN values have the same hash code.&lt;/p&gt;                
                <return>
                    a hash code value for this object                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="328">
                <scope line="329"/>
            </method>
            <javadoc line="335">
                Get a string representation of this vector.                
                <return>
                    a string representation of this vector                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="339"/>
            <javadoc line="343">
                {@inheritDoc}                
            </javadoc>
            <method name="toString" type="String" line="344">
                <params>
                    <param name="format" type="NumberFormat"/>
                </params>
            </method>
        </class>
    </source>