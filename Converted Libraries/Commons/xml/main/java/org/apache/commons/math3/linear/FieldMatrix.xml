<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.linear">
        <import package="org.apache.commons.math3.Field"/>
        <import package="org.apache.commons.math3.FieldElement"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.NoDataException"/>
        <import package="org.apache.commons.math3.exception.NotPositiveException"/>
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <interface name="FieldMatrix">
            <type_params>
                <type_param name="T"/>
            </type_params>
            <implements interface="AnyMatrix"/>
            <javadoc line="11">
                Interface defining field-valued matrix with basic algebraic operations.
                  &lt;p&gt;
                  Matrix element indexing is 0-based -- e.g., &lt;code&gt;getEntry(0, 0)&lt;/code&gt;
                  returns the element in the first row, first column of the matrix.&lt;/p&gt;                
                <param>
                    <T>
                      the type of the field elements                    
                </param>
                <version>
                    $Id: FieldMatrix.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
            </javadoc>
            <method name="getField" type="Field<T>" line="21"/>
            <javadoc line="21">
                Get the type of field elements of the matrix.                
                <return>
                    the type of field elements of the matrix.                    
                </return>
            </javadoc>
            <method name="createMatrix" type="FieldMatrix<T>" line="26"/>
            <javadoc line="26">
                Create a new FieldMatrix&lt;T&gt; of the same type as the instance with
                  the supplied row and column dimensions.                
                <param>
                    rowDimension  the number of rows in the new matrix                    
                </param>
                <param>
                    columnDimension  the number of columns in the new matrix                    
                </param>
                <return>
                    a new matrix of the same type as the instance                    
                </return>
                <throws>
                    NotStrictlyPositiveException if row or column dimension is not
                      positive.                    
                </throws>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <method name="copy" type="FieldMatrix<T>" line="37"/>
            <javadoc line="37">
                Make a (deep) copy of this.                
                <return>
                    a copy of this matrix.                    
                </return>
            </javadoc>
            <method name="add" type="FieldMatrix<T>" line="42"/>
            <javadoc line="42">
                Compute the sum of this and m.                
                <param>
                    m Matrix to be added.                    
                </param>
                <return>
                    {@code this} + {@code m}.                    
                </return>
                <throws>
                    MatrixDimensionMismatchException if {@code m} is not the same
                      size as {@code this} matrix.                    
                </throws>
            </javadoc>
            <method name="subtract" type="FieldMatrix<T>" line="50"/>
            <javadoc line="50">
                Subtract {@code m} from this matrix.                
                <param>
                    m Matrix to be subtracted.                    
                </param>
                <return>
                    {@code this} - {@code m}.                    
                </return>
                <throws>
                    MatrixDimensionMismatchException if {@code m} is not the same
                      size as {@code this} matrix.                    
                </throws>
            </javadoc>
            <method name="scalarAdd" type="FieldMatrix<T>" line="58"/>
            <javadoc line="58">
                Increment each entry of this matrix.                
                <param>
                    d Value to be added to each entry.                    
                </param>
                <return>
                    {@code d} + {@code this}.                    
                </return>
            </javadoc>
            <method name="scalarMultiply" type="FieldMatrix<T>" line="64"/>
            <javadoc line="64">
                Multiply each entry by {@code d}.                
                <param>
                    d Value to multiply all entries by.                    
                </param>
                <return>
                    {@code d}  {@code this}.                    
                </return>
            </javadoc>
            <method name="multiply" type="FieldMatrix<T>" line="70"/>
            <javadoc line="70">
                Postmultiply this matrix by {@code m}.                
                <param>
                    m  Matrix to postmultiply by.                    
                </param>
                <return>
                    {@code this}  {@code m}.                    
                </return>
                <throws>
                    DimensionMismatchException if the number of columns of{@code this} matrix is not equal to the number of rows of matrix{@code m}.                    
                </throws>
            </javadoc>
            <method name="preMultiply" type="FieldMatrix<T>" line="77"/>
            <javadoc line="77">
                Premultiply this matrix by {@code m}.                
                <param>
                    m Matrix to premultiply by.                    
                </param>
                <return>
                    {@code m}  {@code this}.                    
                </return>
                <throws>
                    DimensionMismatchException if the number of columns of {@code m}differs from the number of rows of {@code this} matrix.                    
                </throws>
            </javadoc>
            <method name="power" type="FieldMatrix<T>" line="84"/>
            <javadoc line="84">
                Returns the result multiplying this with itself &lt;code&gt;p&lt;/code&gt; times.
                  Depending on the type of the field elements, T, instability for high
                  powers might occur.                
                <param>
                    p raise this to power p                    
                </param>
                <return>
                    this^p                    
                </return>
                <throws>
                    NotPositiveException if {@code p < 0}                    
                </throws>
                <throws>
                    NonSquareMatrixException if {@code this matrix} is not square                    
                </throws>
            </javadoc>
            <method name="getData" type="T[][]" line="94"/>
            <javadoc line="94">
                Returns matrix entries as a two-dimensional array.                
                <return>
                    a 2-dimensional array of entries.                    
                </return>
            </javadoc>
            <method name="getSubMatrix" type="FieldMatrix<T>" line="99"/>
            <javadoc line="99">
                Get a submatrix. Rows and columns are indicated
                  counting from 0 to n - 1.                
                <param>
                    startRow Initial row index                    
                </param>
                <param>
                    endRow Final row index (inclusive)                    
                </param>
                <param>
                    startColumn Initial column index                    
                </param>
                <param>
                    endColumn Final column index (inclusive)                    
                </param>
                <return>
                    the matrix containing the data of the specified rows and columns.                    
                </return>
                <throws>
                    NumberIsTooSmallException is {@code endRow < startRow} of{@code endColumn < startColumn}.                    
                </throws>
                <throws>
                    OutOfRangeException if the indices are not valid.                    
                </throws>
            </javadoc>
            <method name="getSubMatrix" type="FieldMatrix<T>" line="111"/>
            <javadoc line="111">
                Get a submatrix. Rows and columns are indicated
                  counting from 0 to n - 1.                
                <param>
                    selectedRows Array of row indices.                    
                </param>
                <param>
                    selectedColumns Array of column indices.                    
                </param>
                <return>
                    the matrix containing the data in the
                      specified rows and columns.                    
                </return>
                <throws>
                    NoDataException if {@code selectedRows} or{@code selectedColumns} is empty                    
                </throws>
                <throws>
                    NullArgumentException if {@code selectedRows} or{@code selectedColumns} is {@code null}.                    
                </throws>
                <throws>
                    OutOfRangeException if row or column selections are not valid.                    
                </throws>
            </javadoc>
            <method name="copySubMatrix" type="void" line="123"/>
            <javadoc line="123">
                Copy a submatrix. Rows and columns are indicated
                  counting from 0 to n-1.                
                <param>
                    startRow Initial row index.                    
                </param>
                <param>
                    endRow Final row index (inclusive).                    
                </param>
                <param>
                    startColumn Initial column index.                    
                </param>
                <param>
                    endColumn Final column index (inclusive).                    
                </param>
                <param>
                    destination The arrays where the submatrix data should be copied
                      (if larger than rows/columns counts, only the upper-left part will be used).                    
                </param>
                <throws>
                    MatrixDimensionMismatchException if the dimensions of{@code destination} do not match those of {@code this}.                    
                </throws>
                <throws>
                    NumberIsTooSmallException is {@code endRow < startRow} of{@code endColumn < startColumn}.                    
                </throws>
                <throws>
                    OutOfRangeException if the indices are not valid.                    
                </throws>
                <exception>
                    IllegalArgumentException if the destination array is too small.                    
                </exception>
            </javadoc>
            <method name="copySubMatrix" type="void" line="138"/>
            <javadoc line="138">
                Copy a submatrix. Rows and columns are indicated
                  counting from 0 to n - 1.                
                <param>
                    selectedRows Array of row indices.                    
                </param>
                <param>
                    selectedColumns Array of column indices.                    
                </param>
                <param>
                    destination Arrays where the submatrix data should be copied
                      (if larger than rows/columns counts, only the upper-left part will be used)                    
                </param>
                <throws>
                    MatrixDimensionMismatchException if the dimensions of{@code destination} do not match those of {@code this}.                    
                </throws>
                <throws>
                    NoDataException if {@code selectedRows} or{@code selectedColumns} is empty                    
                </throws>
                <throws>
                    NullArgumentException if {@code selectedRows} or{@code selectedColumns} is {@code null}.                    
                </throws>
                <throws>
                    OutOfRangeException if the indices are not valid.                    
                </throws>
            </javadoc>
            <method name="setSubMatrix" type="void" line="151"/>
            <javadoc line="151">
                Replace the submatrix starting at {@code (row, column)} using data in the
                  input {@code subMatrix} array. Indexes are 0-based.
                  &lt;p&gt;
                  Example:&lt;br&gt;
                  Starting with
                  &lt;pre&gt;
                  1  2  3  4
                  5  6  7  8
                  9  0  1  2
                  &lt;/pre&gt;
                  and &lt;code&gt;subMatrix = {{3, 4} {5,6}}&lt;/code&gt;, invoking
                  &lt;code&gt;setSubMatrix(subMatrix,1,1))&lt;/code&gt; will result in
                  &lt;pre&gt;
                  1  2  3  4
                  5  3  4  8
                  9  5  6  2
                  &lt;/pre&gt;
                  &lt;/p&gt;                
                <param>
                    subMatrix Array containing the submatrix replacement data.                    
                </param>
                <param>
                    row Row coordinate of the top-left element to be replaced.                    
                </param>
                <param>
                    column Column coordinate of the top-left element to be replaced.                    
                </param>
                <throws>
                    OutOfRangeException if {@code subMatrix} does not fit into this
                      matrix from element in {@code (row, column)}.                    
                </throws>
                <throws>
                    NoDataException if a row or column of {@code subMatrix} is empty.                    
                </throws>
                <throws>
                    DimensionMismatchException if {@code subMatrix} is not
                      rectangular (not all rows have the same length).                    
                </throws>
                <throws>
                    NullArgumentException if {@code subMatrix} is {@code null}.                    
                </throws>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <method name="getRowMatrix" type="FieldMatrix<T>" line="182"/>
            <javadoc line="182">
                Get the entries in row number {@code row}as a row matrix.                
                <param>
                    row Row to be fetched.                    
                </param>
                <return>
                    a row matrix.                    
                </return>
                <throws>
                    OutOfRangeException if the specified row index is invalid.                    
                </throws>
            </javadoc>
            <method name="setRowMatrix" type="void" line="189"/>
            <javadoc line="189">
                Set the entries in row number {@code row}as a row matrix.                
                <param>
                    row Row to be set.                    
                </param>
                <param>
                    matrix Row matrix (must have one row and the same number
                      of columns as the instance).                    
                </param>
                <throws>
                    OutOfRangeException if the specified row index is invalid.                    
                </throws>
                <throws>
                    MatrixDimensionMismatchExceptionif the matrix dimensions do not match one instance row.                    
                </throws>
            </javadoc>
            <method name="getColumnMatrix" type="FieldMatrix<T>" line="198"/>
            <javadoc line="198">
                Get the entries in column number {@code column}as a column matrix.                
                <param>
                    column Column to be fetched.                    
                </param>
                <return>
                    a column matrix.                    
                </return>
                <throws>
                    OutOfRangeException if the specified column index is invalid.                    
                </throws>
            </javadoc>
            <method name="setColumnMatrix" type="void" line="205"/>
            <javadoc line="205">
                Set the entries in column number {@code column}as a column matrix.                
                <param>
                    column Column to be set.                    
                </param>
                <param>
                    matrix column matrix (must have one column and the same
                      number of rows as the instance).                    
                </param>
                <throws>
                    OutOfRangeException if the specified column index is invalid.                    
                </throws>
                <throws>
                    MatrixDimensionMismatchException if the matrix dimensions do
                      not match one instance column.                    
                </throws>
            </javadoc>
            <method name="getRowVector" type="FieldVector<T>" line="215"/>
            <javadoc line="215">
                Get the entries in row number {@code row}as a vector.                
                <param>
                    row Row to be fetched                    
                </param>
                <return>
                    a row vector.                    
                </return>
                <throws>
                    OutOfRangeException if the specified row index is invalid.                    
                </throws>
            </javadoc>
            <method name="setRowVector" type="void" line="222"/>
            <javadoc line="222">
                Set the entries in row number {@code row}as a vector.                
                <param>
                    row Row to be set.                    
                </param>
                <param>
                    vector row vector (must have the same number of columns
                      as the instance).                    
                </param>
                <throws>
                    OutOfRangeException if the specified row index is invalid.                    
                </throws>
                <throws>
                    MatrixDimensionMismatchException if the vector dimension does not
                      match one instance row.                    
                </throws>
            </javadoc>
            <method name="getColumnVector" type="FieldVector<T>" line="232"/>
            <javadoc line="232">
                Returns the entries in column number {@code column}as a vector.                
                <param>
                    column Column to be fetched.                    
                </param>
                <return>
                    a column vector.                    
                </return>
                <throws>
                    OutOfRangeException if the specified column index is invalid.                    
                </throws>
            </javadoc>
            <method name="setColumnVector" type="void" line="239"/>
            <javadoc line="239">
                Set the entries in column number {@code column}as a vector.                
                <param>
                    column Column to be set.                    
                </param>
                <param>
                    vector Column vector (must have the same number of rows
                      as the instance).                    
                </param>
                <throws>
                    OutOfRangeException if the specified column index is invalid.                    
                </throws>
                <throws>
                    MatrixDimensionMismatchException if the vector dimension does not
                      match one instance column.                    
                </throws>
            </javadoc>
            <method name="getRow" type="T[]" line="249"/>
            <javadoc line="249">
                Get the entries in row number {@code row} as an array.                
                <param>
                    row Row to be fetched.                    
                </param>
                <return>
                    array of entries in the row.                    
                </return>
                <throws>
                    OutOfRangeException if the specified row index is not valid.                    
                </throws>
            </javadoc>
            <method name="setRow" type="void" line="256"/>
            <javadoc line="256">
                Set the entries in row number {@code row}as a row matrix.                
                <param>
                    row Row to be set.                    
                </param>
                <param>
                    array Row matrix (must have the same number of columns as
                      the instance).                    
                </param>
                <throws>
                    OutOfRangeException if the specified row index is invalid.                    
                </throws>
                <throws>
                    MatrixDimensionMismatchException if the array size does not match
                      one instance row.                    
                </throws>
            </javadoc>
            <method name="getColumn" type="T[]" line="266"/>
            <javadoc line="266">
                Get the entries in column number {@code col} as an array.                
                <param>
                    column the column to be fetched                    
                </param>
                <return>
                    array of entries in the column                    
                </return>
                <throws>
                    OutOfRangeException if the specified column index is not valid.                    
                </throws>
            </javadoc>
            <method name="setColumn" type="void" line="273"/>
            <javadoc line="273">
                Set the entries in column number {@code column}as a column matrix.                
                <param>
                    column the column to be set                    
                </param>
                <param>
                    array column array (must have the same number of rows as the instance)                    
                </param>
                <throws>
                    OutOfRangeException if the specified column index is invalid.                    
                </throws>
                <throws>
                    MatrixDimensionMismatchException if the array size does not match
                      one instance column.                    
                </throws>
            </javadoc>
            <method name="getEntry" type="T" line="282"/>
            <javadoc line="282">
                Returns the entry in the specified row and column.                
                <param>
                    row  row location of entry to be fetched                    
                </param>
                <param>
                    column  column location of entry to be fetched                    
                </param>
                <return>
                    matrix entry in row,column                    
                </return>
                <throws>
                    OutOfRangeException if the row or column index is not valid.                    
                </throws>
            </javadoc>
            <method name="setEntry" type="void" line="290"/>
            <javadoc line="290">
                Set the entry in the specified row and column.                
                <param>
                    row  row location of entry to be set                    
                </param>
                <param>
                    column  column location of entry to be set                    
                </param>
                <param>
                    value matrix entry to be set in row,column                    
                </param>
                <throws>
                    OutOfRangeException if the row or column index is not valid.                    
                </throws>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <method name="addToEntry" type="void" line="299"/>
            <javadoc line="299">
                Change an entry in the specified row and column.                
                <param>
                    row Row location of entry to be set.                    
                </param>
                <param>
                    column Column location of entry to be set.                    
                </param>
                <param>
                    increment Value to add to the current matrix entry in{@code (row, column)}.                    
                </param>
                <throws>
                    OutOfRangeException if the row or column index is not valid.                    
                </throws>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <method name="multiplyEntry" type="void" line="308"/>
            <javadoc line="308">
                Change an entry in the specified row and column.                
                <param>
                    row Row location of entry to be set.                    
                </param>
                <param>
                    column Column location of entry to be set.                    
                </param>
                <param>
                    factor Multiplication factor for the current matrix entry
                      in {@code (row,column)}                    
                </param>
                <throws>
                    OutOfRangeException if the row or column index is not valid.                    
                </throws>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <method name="transpose" type="FieldMatrix<T>" line="318"/>
            <javadoc line="318">
                Returns the transpose of this matrix.                
                <return>
                    transpose matrix                    
                </return>
            </javadoc>
            <method name="getTrace" type="T" line="323"/>
            <javadoc line="323">
                Returns the &lt;a href=&quot;http://mathworld.wolfram.com/MatrixTrace.html&quot;&gt;
                  trace&lt;/a&gt; of the matrix (the sum of the elements on the main diagonal).                
                <return>
                    trace                    
                </return>
                <throws>
                    NonSquareMatrixException if the matrix is not square.                    
                </throws>
            </javadoc>
            <method name="operate" type="T[]" line="330"/>
            <javadoc line="330">
                Returns the result of multiplying this by the vector {@code v}.                
                <param>
                    v the vector to operate on                    
                </param>
                <return>
                    {@code this  v}                    
                </return>
                <throws>
                    DimensionMismatchException if the number of columns of{@code this} matrix is not equal to the size of the vector {@code v}.                    
                </throws>
            </javadoc>
            <method name="operate" type="FieldVector<T>" line="337"/>
            <javadoc line="337">
                Returns the result of multiplying this by the vector {@code v}.                
                <param>
                    v the vector to operate on                    
                </param>
                <return>
                    {@code this  v}                    
                </return>
                <throws>
                    DimensionMismatchException if the number of columns of{@code this} matrix is not equal to the size of the vector {@code v}.                    
                </throws>
            </javadoc>
            <method name="preMultiply" type="T[]" line="344"/>
            <javadoc line="344">
                Returns the (row) vector result of premultiplying this by the vector{@code v}.                
                <param>
                    v the row vector to premultiply by                    
                </param>
                <return>
                    {@code v  this}                    
                </return>
                <throws>
                    DimensionMismatchException if the number of rows of {@code this}matrix is not equal to the size of the vector {@code v}                    
                </throws>
            </javadoc>
            <method name="preMultiply" type="FieldVector<T>" line="351"/>
            <javadoc line="351">
                Returns the (row) vector result of premultiplying this by the vector{@code v}.                
                <param>
                    v the row vector to premultiply by                    
                </param>
                <return>
                    {@code v  this}                    
                </return>
                <throws>
                    DimensionMismatchException if the number of rows of {@code this}matrix is not equal to the size of the vector {@code v}                    
                </throws>
            </javadoc>
            <method name="walkInRowOrder" type="T" line="358"/>
            <javadoc line="358">
                Visit (and possibly change) all matrix entries in row order.
                  &lt;p&gt;Row order starts at upper left and iterating through all elements
                  of a row from left to right before going to the leftmost element
                  of the next row.&lt;/p&gt;                
                <param>
                    visitor visitor used to process all matrix entries                    
                </param>
                <see>
                    #walkInRowOrder(FieldMatrixPreservingVisitor)                    
                </see>
                <see>
                    #walkInRowOrder(FieldMatrixChangingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInRowOrder(FieldMatrixPreservingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInColumnOrder(FieldMatrixChangingVisitor)                    
                </see>
                <see>
                    #walkInColumnOrder(FieldMatrixPreservingVisitor)                    
                </see>
                <see>
                    #walkInColumnOrder(FieldMatrixChangingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInColumnOrder(FieldMatrixPreservingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInOptimizedOrder(FieldMatrixChangingVisitor)                    
                </see>
                <see>
                    #walkInOptimizedOrder(FieldMatrixPreservingVisitor)                    
                </see>
                <see>
                    #walkInOptimizedOrder(FieldMatrixChangingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInOptimizedOrder(FieldMatrixPreservingVisitor,int,int,int,int)                    
                </see>
                <return>
                    the value returned by {@link FieldMatrixChangingVisitor#end()} at the end
                      of the walk                    
                </return>
            </javadoc>
            <method name="walkInRowOrder" type="T" line="379"/>
            <javadoc line="379">
                Visit (but don&apos;t change) all matrix entries in row order.
                  &lt;p&gt;Row order starts at upper left and iterating through all elements
                  of a row from left to right before going to the leftmost element
                  of the next row.&lt;/p&gt;                
                <param>
                    visitor visitor used to process all matrix entries                    
                </param>
                <see>
                    #walkInRowOrder(FieldMatrixChangingVisitor)                    
                </see>
                <see>
                    #walkInRowOrder(FieldMatrixChangingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInRowOrder(FieldMatrixPreservingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInColumnOrder(FieldMatrixChangingVisitor)                    
                </see>
                <see>
                    #walkInColumnOrder(FieldMatrixPreservingVisitor)                    
                </see>
                <see>
                    #walkInColumnOrder(FieldMatrixChangingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInColumnOrder(FieldMatrixPreservingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInOptimizedOrder(FieldMatrixChangingVisitor)                    
                </see>
                <see>
                    #walkInOptimizedOrder(FieldMatrixPreservingVisitor)                    
                </see>
                <see>
                    #walkInOptimizedOrder(FieldMatrixChangingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInOptimizedOrder(FieldMatrixPreservingVisitor,int,int,int,int)                    
                </see>
                <return>
                    the value returned by {@link FieldMatrixPreservingVisitor#end()} at the end
                      of the walk                    
                </return>
            </javadoc>
            <method name="walkInRowOrder" type="T" line="400"/>
            <javadoc line="400">
                Visit (and possibly change) some matrix entries in row order.
                  &lt;p&gt;Row order starts at upper left and iterating through all elements
                  of a row from left to right before going to the leftmost element
                  of the next row.&lt;/p&gt;                
                <param>
                    visitor visitor used to process all matrix entries                    
                </param>
                <param>
                    startRow Initial row index                    
                </param>
                <param>
                    endRow Final row index (inclusive)                    
                </param>
                <param>
                    startColumn Initial column index                    
                </param>
                <param>
                    endColumn Final column index                    
                </param>
                <throws>
                    OutOfRangeException if the indices are not valid.                    
                </throws>
                <throws>
                    NumberIsTooSmallException if {@code endRow < startRow} or{@code endColumn < startColumn}.                    
                </throws>
                <see>
                    #walkInRowOrder(FieldMatrixChangingVisitor)                    
                </see>
                <see>
                    #walkInRowOrder(FieldMatrixPreservingVisitor)                    
                </see>
                <see>
                    #walkInRowOrder(FieldMatrixPreservingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInColumnOrder(FieldMatrixChangingVisitor)                    
                </see>
                <see>
                    #walkInColumnOrder(FieldMatrixPreservingVisitor)                    
                </see>
                <see>
                    #walkInColumnOrder(FieldMatrixChangingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInColumnOrder(FieldMatrixPreservingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInOptimizedOrder(FieldMatrixChangingVisitor)                    
                </see>
                <see>
                    #walkInOptimizedOrder(FieldMatrixPreservingVisitor)                    
                </see>
                <see>
                    #walkInOptimizedOrder(FieldMatrixChangingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInOptimizedOrder(FieldMatrixPreservingVisitor,int,int,int,int)                    
                </see>
                <return>
                    the value returned by {@link FieldMatrixChangingVisitor#end()} at the end
                      of the walk                    
                </return>
            </javadoc>
            <method name="walkInRowOrder" type="T" line="427"/>
            <javadoc line="427">
                Visit (but don&apos;t change) some matrix entries in row order.
                  &lt;p&gt;Row order starts at upper left and iterating through all elements
                  of a row from left to right before going to the leftmost element
                  of the next row.&lt;/p&gt;                
                <param>
                    visitor visitor used to process all matrix entries                    
                </param>
                <param>
                    startRow Initial row index                    
                </param>
                <param>
                    endRow Final row index (inclusive)                    
                </param>
                <param>
                    startColumn Initial column index                    
                </param>
                <param>
                    endColumn Final column index                    
                </param>
                <throws>
                    OutOfRangeException if the indices are not valid.                    
                </throws>
                <throws>
                    NumberIsTooSmallException if {@code endRow < startRow} or{@code endColumn < startColumn}.                    
                </throws>
                <see>
                    #walkInRowOrder(FieldMatrixChangingVisitor)                    
                </see>
                <see>
                    #walkInRowOrder(FieldMatrixPreservingVisitor)                    
                </see>
                <see>
                    #walkInRowOrder(FieldMatrixChangingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInColumnOrder(FieldMatrixChangingVisitor)                    
                </see>
                <see>
                    #walkInColumnOrder(FieldMatrixPreservingVisitor)                    
                </see>
                <see>
                    #walkInColumnOrder(FieldMatrixChangingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInColumnOrder(FieldMatrixPreservingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInOptimizedOrder(FieldMatrixChangingVisitor)                    
                </see>
                <see>
                    #walkInOptimizedOrder(FieldMatrixPreservingVisitor)                    
                </see>
                <see>
                    #walkInOptimizedOrder(FieldMatrixChangingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInOptimizedOrder(FieldMatrixPreservingVisitor,int,int,int,int)                    
                </see>
                <return>
                    the value returned by {@link FieldMatrixPreservingVisitor#end()} at the end
                      of the walk                    
                </return>
            </javadoc>
            <method name="walkInColumnOrder" type="T" line="454"/>
            <javadoc line="454">
                Visit (and possibly change) all matrix entries in column order.
                  &lt;p&gt;Column order starts at upper left and iterating through all elements
                  of a column from top to bottom before going to the topmost element
                  of the next column.&lt;/p&gt;                
                <param>
                    visitor visitor used to process all matrix entries                    
                </param>
                <see>
                    #walkInRowOrder(FieldMatrixChangingVisitor)                    
                </see>
                <see>
                    #walkInRowOrder(FieldMatrixPreservingVisitor)                    
                </see>
                <see>
                    #walkInRowOrder(FieldMatrixChangingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInRowOrder(FieldMatrixPreservingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInColumnOrder(FieldMatrixPreservingVisitor)                    
                </see>
                <see>
                    #walkInColumnOrder(FieldMatrixChangingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInColumnOrder(FieldMatrixPreservingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInOptimizedOrder(FieldMatrixChangingVisitor)                    
                </see>
                <see>
                    #walkInOptimizedOrder(FieldMatrixPreservingVisitor)                    
                </see>
                <see>
                    #walkInOptimizedOrder(FieldMatrixChangingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInOptimizedOrder(FieldMatrixPreservingVisitor,int,int,int,int)                    
                </see>
                <return>
                    the value returned by {@link FieldMatrixChangingVisitor#end()} at the end
                      of the walk                    
                </return>
            </javadoc>
            <method name="walkInColumnOrder" type="T" line="475"/>
            <javadoc line="475">
                Visit (but don&apos;t change) all matrix entries in column order.
                  &lt;p&gt;Column order starts at upper left and iterating through all elements
                  of a column from top to bottom before going to the topmost element
                  of the next column.&lt;/p&gt;                
                <param>
                    visitor visitor used to process all matrix entries                    
                </param>
                <see>
                    #walkInRowOrder(FieldMatrixChangingVisitor)                    
                </see>
                <see>
                    #walkInRowOrder(FieldMatrixPreservingVisitor)                    
                </see>
                <see>
                    #walkInRowOrder(FieldMatrixChangingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInRowOrder(FieldMatrixPreservingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInColumnOrder(FieldMatrixChangingVisitor)                    
                </see>
                <see>
                    #walkInColumnOrder(FieldMatrixChangingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInColumnOrder(FieldMatrixPreservingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInOptimizedOrder(FieldMatrixChangingVisitor)                    
                </see>
                <see>
                    #walkInOptimizedOrder(FieldMatrixPreservingVisitor)                    
                </see>
                <see>
                    #walkInOptimizedOrder(FieldMatrixChangingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInOptimizedOrder(FieldMatrixPreservingVisitor,int,int,int,int)                    
                </see>
                <return>
                    the value returned by {@link FieldMatrixPreservingVisitor#end()} at the end
                      of the walk                    
                </return>
            </javadoc>
            <method name="walkInColumnOrder" type="T" line="496"/>
            <javadoc line="496">
                Visit (and possibly change) some matrix entries in column order.
                  &lt;p&gt;Column order starts at upper left and iterating through all elements
                  of a column from top to bottom before going to the topmost element
                  of the next column.&lt;/p&gt;                
                <param>
                    visitor visitor used to process all matrix entries                    
                </param>
                <param>
                    startRow Initial row index                    
                </param>
                <param>
                    endRow Final row index (inclusive)                    
                </param>
                <param>
                    startColumn Initial column index                    
                </param>
                <param>
                    endColumn Final column index                    
                </param>
                <throws>
                    NumberIsTooSmallException if {@code endRow < startRow} or{@code endColumn < startColumn}.                    
                </throws>
                <throws>
                    OutOfRangeException if the indices are not valid.                    
                </throws>
                <see>
                    #walkInRowOrder(FieldMatrixChangingVisitor)                    
                </see>
                <see>
                    #walkInRowOrder(FieldMatrixPreservingVisitor)                    
                </see>
                <see>
                    #walkInRowOrder(FieldMatrixChangingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInRowOrder(FieldMatrixPreservingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInColumnOrder(FieldMatrixChangingVisitor)                    
                </see>
                <see>
                    #walkInColumnOrder(FieldMatrixPreservingVisitor)                    
                </see>
                <see>
                    #walkInColumnOrder(FieldMatrixPreservingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInOptimizedOrder(FieldMatrixChangingVisitor)                    
                </see>
                <see>
                    #walkInOptimizedOrder(FieldMatrixPreservingVisitor)                    
                </see>
                <see>
                    #walkInOptimizedOrder(FieldMatrixChangingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInOptimizedOrder(FieldMatrixPreservingVisitor,int,int,int,int)                    
                </see>
                <return>
                    the value returned by {@link FieldMatrixChangingVisitor#end()} at the end
                      of the walk                    
                </return>
            </javadoc>
            <method name="walkInColumnOrder" type="T" line="523"/>
            <javadoc line="523">
                Visit (but don&apos;t change) some matrix entries in column order.
                  &lt;p&gt;Column order starts at upper left and iterating through all elements
                  of a column from top to bottom before going to the topmost element
                  of the next column.&lt;/p&gt;                
                <param>
                    visitor visitor used to process all matrix entries                    
                </param>
                <param>
                    startRow Initial row index                    
                </param>
                <param>
                    endRow Final row index (inclusive)                    
                </param>
                <param>
                    startColumn Initial column index                    
                </param>
                <param>
                    endColumn Final column index                    
                </param>
                <throws>
                    NumberIsTooSmallException if {@code endRow < startRow} or{@code endColumn < startColumn}.                    
                </throws>
                <throws>
                    OutOfRangeException if the indices are not valid.                    
                </throws>
                <see>
                    #walkInRowOrder(FieldMatrixChangingVisitor)                    
                </see>
                <see>
                    #walkInRowOrder(FieldMatrixPreservingVisitor)                    
                </see>
                <see>
                    #walkInRowOrder(FieldMatrixChangingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInRowOrder(FieldMatrixPreservingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInColumnOrder(FieldMatrixChangingVisitor)                    
                </see>
                <see>
                    #walkInColumnOrder(FieldMatrixPreservingVisitor)                    
                </see>
                <see>
                    #walkInColumnOrder(FieldMatrixChangingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInOptimizedOrder(FieldMatrixChangingVisitor)                    
                </see>
                <see>
                    #walkInOptimizedOrder(FieldMatrixPreservingVisitor)                    
                </see>
                <see>
                    #walkInOptimizedOrder(FieldMatrixChangingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInOptimizedOrder(FieldMatrixPreservingVisitor,int,int,int,int)                    
                </see>
                <return>
                    the value returned by {@link FieldMatrixPreservingVisitor#end()} at the end
                      of the walk                    
                </return>
            </javadoc>
            <method name="walkInOptimizedOrder" type="T" line="550"/>
            <javadoc line="550">
                Visit (and possibly change) all matrix entries using the fastest possible order.
                  &lt;p&gt;The fastest walking order depends on the exact matrix class. It may be
                  different from traditional row or column orders.&lt;/p&gt;                
                <param>
                    visitor visitor used to process all matrix entries                    
                </param>
                <see>
                    #walkInRowOrder(FieldMatrixChangingVisitor)                    
                </see>
                <see>
                    #walkInRowOrder(FieldMatrixPreservingVisitor)                    
                </see>
                <see>
                    #walkInRowOrder(FieldMatrixChangingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInRowOrder(FieldMatrixPreservingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInColumnOrder(FieldMatrixChangingVisitor)                    
                </see>
                <see>
                    #walkInColumnOrder(FieldMatrixPreservingVisitor)                    
                </see>
                <see>
                    #walkInColumnOrder(FieldMatrixChangingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInColumnOrder(FieldMatrixPreservingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInOptimizedOrder(FieldMatrixPreservingVisitor)                    
                </see>
                <see>
                    #walkInOptimizedOrder(FieldMatrixChangingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInOptimizedOrder(FieldMatrixPreservingVisitor,int,int,int,int)                    
                </see>
                <return>
                    the value returned by {@link FieldMatrixChangingVisitor#end()} at the end
                      of the walk                    
                </return>
            </javadoc>
            <method name="walkInOptimizedOrder" type="T" line="570"/>
            <javadoc line="570">
                Visit (but don&apos;t change) all matrix entries using the fastest possible order.
                  &lt;p&gt;The fastest walking order depends on the exact matrix class. It may be
                  different from traditional row or column orders.&lt;/p&gt;                
                <param>
                    visitor visitor used to process all matrix entries                    
                </param>
                <see>
                    #walkInRowOrder(FieldMatrixChangingVisitor)                    
                </see>
                <see>
                    #walkInRowOrder(FieldMatrixPreservingVisitor)                    
                </see>
                <see>
                    #walkInRowOrder(FieldMatrixChangingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInRowOrder(FieldMatrixPreservingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInColumnOrder(FieldMatrixChangingVisitor)                    
                </see>
                <see>
                    #walkInColumnOrder(FieldMatrixPreservingVisitor)                    
                </see>
                <see>
                    #walkInColumnOrder(FieldMatrixChangingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInColumnOrder(FieldMatrixPreservingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInOptimizedOrder(FieldMatrixChangingVisitor)                    
                </see>
                <see>
                    #walkInOptimizedOrder(FieldMatrixChangingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInOptimizedOrder(FieldMatrixPreservingVisitor,int,int,int,int)                    
                </see>
                <return>
                    the value returned by {@link FieldMatrixPreservingVisitor#end()} at the end
                      of the walk                    
                </return>
            </javadoc>
            <method name="walkInOptimizedOrder" type="T" line="590"/>
            <javadoc line="590">
                Visit (and possibly change) some matrix entries using the fastest possible order.
                  &lt;p&gt;The fastest walking order depends on the exact matrix class. It may be
                  different from traditional row or column orders.&lt;/p&gt;                
                <param>
                    visitor visitor used to process all matrix entries                    
                </param>
                <param>
                    startRow Initial row index                    
                </param>
                <param>
                    endRow Final row index (inclusive)                    
                </param>
                <param>
                    startColumn Initial column index                    
                </param>
                <param>
                    endColumn Final column index (inclusive)                    
                </param>
                <throws>
                    NumberIsTooSmallException if {@code endRow < startRow} or{@code endColumn < startColumn}.                    
                </throws>
                <throws>
                    OutOfRangeException if the indices are not valid.                    
                </throws>
                <see>
                    #walkInRowOrder(FieldMatrixChangingVisitor)                    
                </see>
                <see>
                    #walkInRowOrder(FieldMatrixPreservingVisitor)                    
                </see>
                <see>
                    #walkInRowOrder(FieldMatrixChangingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInRowOrder(FieldMatrixPreservingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInColumnOrder(FieldMatrixChangingVisitor)                    
                </see>
                <see>
                    #walkInColumnOrder(FieldMatrixPreservingVisitor)                    
                </see>
                <see>
                    #walkInColumnOrder(FieldMatrixChangingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInColumnOrder(FieldMatrixPreservingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInOptimizedOrder(FieldMatrixChangingVisitor)                    
                </see>
                <see>
                    #walkInOptimizedOrder(FieldMatrixPreservingVisitor)                    
                </see>
                <see>
                    #walkInOptimizedOrder(FieldMatrixPreservingVisitor,int,int,int,int)                    
                </see>
                <return>
                    the value returned by {@link FieldMatrixChangingVisitor#end()} at the end
                      of the walk                    
                </return>
            </javadoc>
            <method name="walkInOptimizedOrder" type="T" line="616"/>
            <javadoc line="616">
                Visit (but don&apos;t change) some matrix entries using the fastest possible order.
                  &lt;p&gt;The fastest walking order depends on the exact matrix class. It may be
                  different from traditional row or column orders.&lt;/p&gt;                
                <param>
                    visitor visitor used to process all matrix entries                    
                </param>
                <param>
                    startRow Initial row index                    
                </param>
                <param>
                    endRow Final row index (inclusive)                    
                </param>
                <param>
                    startColumn Initial column index                    
                </param>
                <param>
                    endColumn Final column index (inclusive)                    
                </param>
                <throws>
                    NumberIsTooSmallException if {@code endRow < startRow} or{@code endColumn < startColumn}.                    
                </throws>
                <throws>
                    OutOfRangeException if the indices are not valid.                    
                </throws>
                <see>
                    #walkInRowOrder(FieldMatrixChangingVisitor)                    
                </see>
                <see>
                    #walkInRowOrder(FieldMatrixPreservingVisitor)                    
                </see>
                <see>
                    #walkInRowOrder(FieldMatrixChangingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInRowOrder(FieldMatrixPreservingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInColumnOrder(FieldMatrixChangingVisitor)                    
                </see>
                <see>
                    #walkInColumnOrder(FieldMatrixPreservingVisitor)                    
                </see>
                <see>
                    #walkInColumnOrder(FieldMatrixChangingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInColumnOrder(FieldMatrixPreservingVisitor,int,int,int,int)                    
                </see>
                <see>
                    #walkInOptimizedOrder(FieldMatrixChangingVisitor)                    
                </see>
                <see>
                    #walkInOptimizedOrder(FieldMatrixPreservingVisitor)                    
                </see>
                <see>
                    #walkInOptimizedOrder(FieldMatrixChangingVisitor,int,int,int,int)                    
                </see>
                <return>
                    the value returned by {@link FieldMatrixPreservingVisitor#end()} at the end
                      of the walk                    
                </return>
            </javadoc>
        </interface>
    </source>