<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.geometry.partitioning">
        <import package="org.apache.commons.math3.geometry.Space"/>
        <class name="RegionFactory" line="3">
            <type_params>
                <type_param name="S"/>
            </type_params>
            <javadoc line="3">
                This class is a factory for {@link Region}.                
                <param>
                    <S>
                      Type of the space.                    
                </param>
                <version>
                    $Id: RegionFactory.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
                <since>
                    3.0                    
                </since>
            </javadoc>
            <declaration name="nodeCleaner" type="NodesCleaner" line="11"/>
            <javadoc line="11">
                Visitor removing internal nodes attributes.                
            </javadoc>
            <javadoc line="15">
                Simple constructor.                
            </javadoc>
            <method name="RegionFactory" type="constructor" line="18"/>
            <javadoc line="21">
                Build a convex region from a collection of bounding hyperplanes.                
                <param>
                    hyperplanes collection of bounding hyperplanes                    
                </param>
                <return>
                    a new convex region, or null if the collection is empty                    
                </return>
            </javadoc>
            <method name="buildConvex" type="Region<S>" line="26">
                <params>
                    <param name="hyperplanes" type="Hyperplane<S>"/>
                </params>
                <scope line="27"/>
                <declaration name="region" type="Region&lt;S&gt;" line="30"/>
                <declaration name="node" type="BSPTree&lt;S&gt;" line="31"/>
                <scope line="33">
                    <scope line="34"/>
                </scope>
            </method>
            <javadoc line="43">
                Compute the union of two regions.                
                <param>
                    region1 first region (will be unusable after the operation as
                      parts of it will be reused in the new region)                    
                </param>
                <param>
                    region2 second region (will be unusable after the operation as
                      parts of it will be reused in the new region)                    
                </param>
                <return>
                    a new region, result of {@code region1 union region2}                    
                </return>
            </javadoc>
            <method name="union" type="Region<S>" line="51">
                <params>
                    <param name="region1" type="Region<S>"/>
                    <param name="region2" type="Region<S>"/>
                </params>
                <declaration name="tree" type="BSPTree&lt;S&gt;" line="52"/>
            </method>
            <javadoc line="56">
                Compute the intersection of two regions.                
                <param>
                    region1 first region (will be unusable after the operation as
                      parts of it will be reused in the new region)                    
                </param>
                <param>
                    region2 second region (will be unusable after the operation as
                      parts of it will be reused in the new region)                    
                </param>
                <return>
                    a new region, result of {@code region1 intersection region2}                    
                </return>
            </javadoc>
            <method name="intersection" type="Region<S>" line="64">
                <params>
                    <param name="region1" type="Region<S>"/>
                    <param name="region2" type="Region<S>"/>
                </params>
                <declaration name="tree" type="BSPTree&lt;S&gt;" line="65"/>
            </method>
            <javadoc line="69">
                Compute the symmetric difference (exclusive or) of two regions.                
                <param>
                    region1 first region (will be unusable after the operation as
                      parts of it will be reused in the new region)                    
                </param>
                <param>
                    region2 second region (will be unusable after the operation as
                      parts of it will be reused in the new region)                    
                </param>
                <return>
                    a new region, result of {@code region1 xor region2}                    
                </return>
            </javadoc>
            <method name="xor" type="Region<S>" line="77">
                <params>
                    <param name="region1" type="Region<S>"/>
                    <param name="region2" type="Region<S>"/>
                </params>
                <declaration name="tree" type="BSPTree&lt;S&gt;" line="78"/>
            </method>
            <javadoc line="82">
                Compute the difference of two regions.                
                <param>
                    region1 first region (will be unusable after the operation as
                      parts of it will be reused in the new region)                    
                </param>
                <param>
                    region2 second region (will be unusable after the operation as
                      parts of it will be reused in the new region)                    
                </param>
                <return>
                    a new region, result of {@code region1 minus region2}                    
                </return>
            </javadoc>
            <method name="difference" type="Region<S>" line="90">
                <params>
                    <param name="region1" type="Region<S>"/>
                    <param name="region2" type="Region<S>"/>
                </params>
                <declaration name="tree" type="BSPTree&lt;S&gt;" line="91"/>
            </method>
            <javadoc line="95">
                Get the complement of the region (exchanged interior/exterior).                
                <param>
                    region region to complement, it will not modified, a new
                      region independent region will be built                    
                </param>
                <return>
                    a new region, complement of the specified one                    
                </return>
            </javadoc>
            <method name="getComplement" type="Region<S>" line="101">
                <params>
                    <param name="region" type="Region<S>"/>
                </params>
            </method>
            <javadoc line="104">
                Recursively build the complement of a BSP tree.                
                <param>
                    node current node of the original tree                    
                </param>
                <return>
                    new tree, complement of the node                    
                </return>
            </javadoc>
            <method name="recurseComplement" type="BSPTree<S>" line="109">
                <params>
                    <param name="node" type="BSPTree<S>"/>
                </params>
                <scope line="110"/>
                <declaration name="attribute" type="BoundaryAttribute&lt;S&gt;" line="113"/>
                <scope line="114">
                    <declaration name="plusOutside" type="SubHyperplane&lt;S&gt;" line="115"/>
                    <declaration name="plusInside" type="SubHyperplane&lt;S&gt;" line="116"/>
                </scope>
            </method>
            <class name="UnionMerger" line="121">
                <implements interface="BSPTree.LeafMerger">
                    <type_params>
                        <type_param name="S"/>
                    </type_params>
                </implements>
                <javadoc line="121">
                    BSP tree leaf merger computing union of two regions.                    
                </javadoc>
                <javadoc line="125">
                    {@inheritDoc}                    
                </javadoc>
                <method name="merge" type="BSPTree<S>" line="128">
                    <params>
                        <param name="leaf" type="BSPTree<S>"/>
                        <param name="tree" type="BSPTree<S>"/>
                        <param name="parentTree" type="BSPTree<S>"/>
                        <param name="isPlusChild" type="boolean"/>
                        <param name="leafFromInstance" type="boolean"/>
                    </params>
                    <scope line="129"/>
                </method>
            </class>
            <class name="IntersectionMerger" line="137">
                <implements interface="BSPTree.LeafMerger">
                    <type_params>
                        <type_param name="S"/>
                    </type_params>
                </implements>
                <javadoc line="137">
                    BSP tree leaf merger computing union of two regions.                    
                </javadoc>
                <javadoc line="141">
                    {@inheritDoc}                    
                </javadoc>
                <method name="merge" type="BSPTree<S>" line="144">
                    <params>
                        <param name="leaf" type="BSPTree<S>"/>
                        <param name="tree" type="BSPTree<S>"/>
                        <param name="parentTree" type="BSPTree<S>"/>
                        <param name="isPlusChild" type="boolean"/>
                        <param name="leafFromInstance" type="boolean"/>
                    </params>
                    <scope line="145"/>
                </method>
            </class>
            <class name="XorMerger" line="153">
                <implements interface="BSPTree.LeafMerger">
                    <type_params>
                        <type_param name="S"/>
                    </type_params>
                </implements>
                <javadoc line="153">
                    BSP tree leaf merger computing union of two regions.                    
                </javadoc>
                <javadoc line="157">
                    {@inheritDoc}                    
                </javadoc>
                <method name="merge" type="BSPTree<S>" line="160">
                    <params>
                        <param name="leaf" type="BSPTree<S>"/>
                        <param name="tree" type="BSPTree<S>"/>
                        <param name="parentTree" type="BSPTree<S>"/>
                        <param name="isPlusChild" type="boolean"/>
                        <param name="leafFromInstance" type="boolean"/>
                    </params>
                    <declaration name="t" type="BSPTree&lt;S&gt;" line="161"/>
                    <scope line="162"/>
                </method>
            </class>
            <class name="DifferenceMerger" line="169">
                <implements interface="BSPTree.LeafMerger">
                    <type_params>
                        <type_param name="S"/>
                    </type_params>
                </implements>
                <javadoc line="169">
                    BSP tree leaf merger computing union of two regions.                    
                </javadoc>
                <javadoc line="173">
                    {@inheritDoc}                    
                </javadoc>
                <method name="merge" type="BSPTree<S>" line="176">
                    <params>
                        <param name="leaf" type="BSPTree<S>"/>
                        <param name="tree" type="BSPTree<S>"/>
                        <param name="parentTree" type="BSPTree<S>"/>
                        <param name="isPlusChild" type="boolean"/>
                        <param name="leafFromInstance" type="boolean"/>
                    </params>
                    <scope line="177">
                        <declaration name="argTree" type="BSPTree&lt;S&gt;" line="178"/>
                    </scope>
                    <declaration name="instanceTree" type="BSPTree&lt;S&gt;" line="182"/>
                </method>
            </class>
            <class name="NodesCleaner" line="187">
                <implements interface="BSPTreeVisitor">
                    <type_params>
                        <type_param name="S"/>
                    </type_params>
                </implements>
                <javadoc line="187">
                    Visitor removing internal nodes attributes.                    
                </javadoc>
                <javadoc line="191">
                    {@inheritDoc}                    
                </javadoc>
                <method name="visitOrder" type="Order" line="194">
                    <params>
                        <param name="node" type="BSPTree<S>"/>
                    </params>
                </method>
                <javadoc line="197">
                    {@inheritDoc}                    
                </javadoc>
                <method name="visitInternalNode" type="void" line="200">
                    <params>
                        <param name="node" type="BSPTree<S>"/>
                    </params>
                </method>
                <javadoc line="203">
                    {@inheritDoc}                    
                </javadoc>
                <method name="visitLeafNode" type="void" line="206">
                    <params>
                        <param name="node" type="BSPTree<S>"/>
                    </params>
                </method>
            </class>
        </class>
    </source>