<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optim.linear">
        <import package="java.util.ArrayList"/>
        <import package="java.util.List"/>
        <import package="org.apache.commons.math3.exception.TooManyIterationsException"/>
        <import package="org.apache.commons.math3.optim.PointValuePair"/>
        <import package="org.apache.commons.math3.util.Precision"/>
        <class name="SimplexSolver" line="7">
            <extends class="LinearOptimizer"/>
            <javadoc line="7">
                Solves a linear problem using the &quot;Two-Phase Simplex&quot; method.
                  &lt;p&gt;
                  &lt;b&gt;Note:&lt;/b&gt; Depending on the problem definition, the default convergence criteria
                  may be too strict, resulting in {@link NoFeasibleSolutionException} or{@link TooManyIterationsException}. In such a case it is advised to adjust these
                  criteria with more appropriate values, e.g. relaxing the epsilon value.
                  &lt;p&gt;
                  Default convergence criteria:
                  &lt;ul&gt;
                  &lt;li&gt;Algorithm convergence: 1e-6&lt;/li&gt;
                  &lt;li&gt;Floating-point comparisons: 10 ulp&lt;/li&gt;
                  &lt;li&gt;Cut-Off value: 1e-12&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;
                  The cut-off value has been introduced to zero out very small numbers in the Simplex tableau,
                  as these may lead to numerical instabilities due to the nature of the Simplex algorithm
                  (the pivot element is used as a denominator). If the problem definition is very tight, the
                  default cut-off value may be too small, thus it is advised to increase it to a larger value,
                  in accordance with the chosen epsilon.
                  &lt;p&gt;
                  It may also be counter-productive to provide a too large value for {@link org.apache.commons.math3.optim.MaxIter MaxIter} as parameter in the call of {@link #optimize(org.apache.commons.math3.optim.OptimizationData) optimize(OptimizationData...)},
                  as the {@link SimplexSolver} will use different strategies depending on the current iteration
                  count. After half of the allowed max iterations has already been reached, the strategy to select
                  pivot rows will change in order to break possible cycles due to degenerate problems.                
                <version>
                    $Id: SimplexSolver.java 1462503 2013-03-29 15:48:27Z luc $                    
                </version>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <declaration name="DEFAULT_ULPS" type="int" line="35"/>
            <javadoc line="35">
                Default amount of error to accept in floating point comparisons (as ulps).                
            </javadoc>
            <declaration name="DEFAULT_CUT_OFF" type="double" line="39"/>
            <javadoc line="39">
                Default cut-off value.                
            </javadoc>
            <declaration name="DEFAULT_EPSILON" type="double" line="43"/>
            <javadoc line="43">
                Default amount of error to accept for algorithm convergence.                
            </javadoc>
            <declaration name="epsilon" type="double" line="47"/>
            <javadoc line="47">
                Amount of error to accept for algorithm convergence.                
            </javadoc>
            <declaration name="maxUlps" type="int" line="51"/>
            <javadoc line="51">
                Amount of error to accept in floating point comparisons (as ulps).                
            </javadoc>
            <declaration name="cutOff" type="double" line="55"/>
            <javadoc line="55">
                Cut-off value for entries in the tableau: values smaller than the cut-off
                  are treated as zero to improve numerical stability.                
            </javadoc>
            <javadoc line="60">
                Builds a simplex solver with default settings.                
            </javadoc>
            <method name="SimplexSolver" type="constructor" line="63"/>
            <javadoc line="66">
                Builds a simplex solver with a specified accepted amount of error.                
                <param>
                    epsilon Amount of error to accept for algorithm convergence.                    
                </param>
            </javadoc>
            <method name="SimplexSolver" type="constructor" line="70">
                <params>
                    <param name="epsilon" type="double"/>
                </params>
            </method>
            <javadoc line="73">
                Builds a simplex solver with a specified accepted amount of error.                
                <param>
                    epsilon Amount of error to accept for algorithm convergence.                    
                </param>
                <param>
                    maxUlps Amount of error to accept in floating point comparisons.                    
                </param>
            </javadoc>
            <method name="SimplexSolver" type="constructor" line="78">
                <params>
                    <param name="epsilon" type="double"/>
                    <param name="maxUlps" type="int"/>
                </params>
            </method>
            <javadoc line="81">
                Builds a simplex solver with a specified accepted amount of error.                
                <param>
                    epsilon Amount of error to accept for algorithm convergence.                    
                </param>
                <param>
                    maxUlps Amount of error to accept in floating point comparisons.                    
                </param>
                <param>
                    cutOff Values smaller than the cutOff are treated as zero.                    
                </param>
            </javadoc>
            <method name="SimplexSolver" type="constructor" line="87">
                <params>
                    <param name="epsilon" type="double"/>
                    <param name="maxUlps" type="int"/>
                    <param name="cutOff" type="double"/>
                </params>
            </method>
            <javadoc line="92">
                Returns the column with the most negative coefficient in the objective function row.                
                <param>
                    tableau Simple tableau for the problem.                    
                </param>
                <return>
                    the column with the most negative coefficient.                    
                </return>
            </javadoc>
            <method name="getPivotColumn" type="Integer" line="97">
                <params>
                    <param name="tableau" type="SimplexTableau"/>
                </params>
                <declaration name="minValue" type="double" line="98"/>
                <declaration name="minPos" type="Integer" line="99"/>
                <scope line="100">
                    <declaration name="entry" type="double" line="101"/>
                    <scope line="102"/>
                </scope>
            </method>
            <javadoc line="109">
                Returns the row with the minimum ratio as given by the minimum ratio test (MRT).                
                <param>
                    tableau Simple tableau for the problem.                    
                </param>
                <param>
                    col Column to test the ratio of (see {@link #getPivotColumn(SimplexTableau)}).                    
                </param>
                <return>
                    the row with the minimum ratio.                    
                </return>
            </javadoc>
            <method name="getPivotRow" type="Integer" line="115">
                <params>
                    <param name="tableau" type="SimplexTableau"/>
                    <param name="col" type="int"/>
                </params>
                <declaration name="minRatioPositions" type="List&lt;Integer&gt;" line="116"/>
                <declaration name="minRatio" type="double" line="117"/>
                <scope line="118">
                    <declaration name="rhs" type="double" line="119"/>
                    <declaration name="entry" type="double" line="120"/>
                    <scope line="121">
                        <declaration name="ratio" type="double" line="122"/>
                        <declaration name="cmp" type="int" line="123"/>
                        <scope line="124"/>
                        <scope line="127"/>
                    </scope>
                </scope>
                <scope line="134"/>
                <scope line="137">
                    <scope line="138">
                        <scope line="139">
                            <scope line="140">
                                <declaration name="column" type="int" line="141"/>
                                <declaration name="entry" type="double" line="142"/>
                                <scope line="143"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="149">
                        <declaration name="minRow" type="Integer" line="150"/>
                        <declaration name="minIndex" type="int" line="151"/>
                        <declaration name="varStart" type="int" line="152"/>
                        <declaration name="varEnd" type="int" line="153"/>
                        <scope line="154">
                            <scope line="155">
                                <declaration name="basicRow" type="Integer" line="156"/>
                                <scope line="157"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="168">
                Runs one iteration of the Simplex method on the given model.                
                <param>
                    tableau Simple tableau for the problem.                    
                </param>
                <throws>
                    TooManyIterationsException if the allowed number of iterations has been exhausted.                    
                </throws>
                <throws>
                    UnboundedSolutionException if the model is found not to have a bounded solution.                    
                </throws>
            </javadoc>
            <method name="doIteration" type="void" line="174">
                <params>
                    <param name="tableau" type="SimplexTableau"/>
                </params>
                <declaration name="pivotCol" type="Integer" line="176"/>
                <declaration name="pivotRow" type="Integer" line="177"/>
                <scope line="178"/>
                <declaration name="pivotVal" type="double" line="181"/>
                <scope line="183">
                    <scope line="184">
                        <declaration name="multiplier" type="double" line="185"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="190">
                Solves Phase 1 of the Simplex method.                
                <param>
                    tableau Simple tableau for the problem.                    
                </param>
                <throws>
                    TooManyIterationsException if the allowed number of iterations has been exhausted.                    
                </throws>
                <throws>
                    UnboundedSolutionException if the model is found not to have a bounded solution.                    
                </throws>
                <throws>
                    NoFeasibleSolutionException if there is no feasible solution?                    
                </throws>
            </javadoc>
            <method name="solvePhase1" type="void" line="197">
                <params>
                    <param name="tableau" type="SimplexTableau"/>
                </params>
                <scope line="198"/>
                <scope line="201"/>
                <scope line="204"/>
            </method>
            <javadoc line="208">
                {@inheritDoc}                
            </javadoc>
            <method name="doOptimize" type="PointValuePair" line="211">
                <declaration name="tableau" type="SimplexTableau" line="212"/>
                <scope line="215"/>
            </method>
        </class>
    </source>