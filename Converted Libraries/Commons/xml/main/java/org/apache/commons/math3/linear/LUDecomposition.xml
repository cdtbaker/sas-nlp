<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.linear">
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="LUDecomposition" line="4">
            <javadoc line="4">
                Calculates the LUP-decomposition of a square matrix.
                  &lt;p&gt;The LUP-decomposition of a matrix A consists of three matrices L, U and
                  P that satisfy: P&amp;times;A = L&amp;times;U. L is lower triangular (with unit
                  diagonal terms), U is upper triangular and P is a permutation matrix. All
                  matrices are m&amp;times;m.&lt;/p&gt;
                  &lt;p&gt;As shown by the presence of the P matrix, this decomposition is
                  implemented using partial pivoting.&lt;/p&gt;
                  &lt;p&gt;This class is based on the class with similar name from the
                  &lt;a href=&quot;http://math.nist.gov/javanumerics/jama/&quot;&gt;JAMA&lt;/a&gt; library.&lt;/p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;a {@link #getP() getP} method has been added,&lt;/li&gt;
                  &lt;li&gt;the {@code det} method has been renamed as {@link #getDeterminant()getDeterminant},&lt;/li&gt;
                  &lt;li&gt;the {@code getDoublePivot} method has been removed (but the int based{@link #getPivot() getPivot} method has been kept),&lt;/li&gt;
                  &lt;li&gt;the {@code solve} and {@code isNonSingular} methods have been replaced
                  by a {@link #getSolver() getSolver} method and the equivalent methods
                  provided by the returned {@link DecompositionSolver}.&lt;/li&gt;
                  &lt;/ul&gt;                
                <see>
                    <a href="http://mathworld.wolfram.com/LUDecomposition.html">MathWorld</a>                    
                </see>
                <see>
                    <a href="http://en.wikipedia.org/wiki/LU_decomposition">Wikipedia</a>                    
                </see>
                <version>
                    $Id: LUDecomposition.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
                <since>
                    2.0 (changed to concrete class in 3.0)                    
                </since>
            </javadoc>
            <declaration name="DEFAULT_TOO_SMALL" type="double" line="28"/>
            <javadoc line="28">
                Default bound to determine effective singularity in LU decomposition.                
            </javadoc>
            <declaration name="lu" type="double[][]" line="32"/>
            <javadoc line="32">
                Entries of LU decomposition.                
            </javadoc>
            <declaration name="pivot" type="int[]" line="36"/>
            <javadoc line="36">
                Pivot permutation associated with LU decomposition.                
            </javadoc>
            <declaration name="even" type="boolean" line="40"/>
            <javadoc line="40">
                Parity of the permutation associated with the LU decomposition.                
            </javadoc>
            <declaration name="singular" type="boolean" line="44"/>
            <javadoc line="44">
                Singularity indicator.                
            </javadoc>
            <declaration name="cachedL" type="RealMatrix" line="48"/>
            <javadoc line="48">
                Cached value of L.                
            </javadoc>
            <declaration name="cachedU" type="RealMatrix" line="52"/>
            <javadoc line="52">
                Cached value of U.                
            </javadoc>
            <declaration name="cachedP" type="RealMatrix" line="56"/>
            <javadoc line="56">
                Cached value of P.                
            </javadoc>
            <javadoc line="60">
                Calculates the LU-decomposition of the given matrix.
                  This constructor uses 1e-11 as default value for the singularity
                  threshold.                
                <param>
                    matrix Matrix to decompose.                    
                </param>
                <throws>
                    NonSquareMatrixException if matrix is not square.                    
                </throws>
            </javadoc>
            <method name="LUDecomposition" type="constructor" line="67">
                <params>
                    <param name="matrix" type="RealMatrix"/>
                </params>
            </method>
            <javadoc line="70">
                Calculates the LU-decomposition of the given matrix.                
                <param>
                    matrix The matrix to decompose.                    
                </param>
                <param>
                    singularityThreshold threshold (based on partial row norm)
                      under which a matrix is considered singular                    
                </param>
                <throws>
                    NonSquareMatrixException if matrix is not square                    
                </throws>
            </javadoc>
            <method name="LUDecomposition" type="constructor" line="77">
                <params>
                    <param name="matrix" type="RealMatrix"/>
                    <param name="singularityThreshold" type="double"/>
                </params>
                <scope line="78"/>
                <declaration name="m" type="int" line="81"/>
                <scope line="87"/>
                <scope line="92">
                    <scope line="93">
                        <declaration name="luRow" type="double[]" line="94"/>
                        <declaration name="sum" type="double" line="95"/>
                        <scope line="96"/>
                    </scope>
                    <declaration name="max" type="int" line="101"/>
                    <declaration name="largest" type="double" line="102"/>
                    <scope line="103">
                        <declaration name="luRow" type="double[]" line="104"/>
                        <declaration name="sum" type="double" line="105"/>
                        <scope line="106"/>
                        <scope line="110"/>
                    </scope>
                    <scope line="115"/>
                    <scope line="119">
                        <declaration name="tmp" type="double" line="120"/>
                        <declaration name="luMax" type="double[]" line="121"/>
                        <declaration name="luCol" type="double[]" line="122"/>
                        <scope line="123"/>
                        <declaration name="temp" type="int" line="128"/>
                    </scope>
                    <declaration name="luDiag" type="double" line="133"/>
                    <scope line="134"/>
                </scope>
            </method>
            <javadoc line="139">
                Returns the matrix L of the decomposition.
                  &lt;p&gt;L is a lower-triangular matrix&lt;/p&gt;                
                <return>
                    the L matrix (or null if decomposed matrix is singular)                    
                </return>
            </javadoc>
            <method name="getL" type="RealMatrix" line="144">
                <scope line="145">
                    <declaration name="m" type="int" line="146"/>
                    <scope line="148">
                        <declaration name="luI" type="double[]" line="149"/>
                        <scope line="150"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="158">
                Returns the matrix U of the decomposition.
                  &lt;p&gt;U is an upper-triangular matrix&lt;/p&gt;                
                <return>
                    the U matrix (or null if decomposed matrix is singular)                    
                </return>
            </javadoc>
            <method name="getU" type="RealMatrix" line="163">
                <scope line="164">
                    <declaration name="m" type="int" line="165"/>
                    <scope line="167">
                        <declaration name="luI" type="double[]" line="168"/>
                        <scope line="169"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="176">
                Returns the P rows permutation matrix.
                  &lt;p&gt;P is a sparse matrix with exactly one element set to 1.0 in
                  each row and each column, all other elements being set to 0.0.&lt;/p&gt;
                  &lt;p&gt;The positions of the 1 elements are given by the {@link #getPivot()pivot permutation vector}.&lt;/p&gt;                
                <return>
                    the P rows permutation matrix (or null if decomposed matrix is singular)                    
                </return>
                <see>
                    #getPivot()                    
                </see>
            </javadoc>
            <method name="getP" type="RealMatrix" line="184">
                <scope line="185">
                    <declaration name="m" type="int" line="186"/>
                    <scope line="188"/>
                </scope>
            </method>
            <javadoc line="194">
                Returns the pivot permutation vector.                
                <return>
                    the pivot permutation vector                    
                </return>
                <see>
                    #getP()                    
                </see>
            </javadoc>
            <method name="getPivot" type="int[]" line="199"/>
            <javadoc line="202">
                Return the determinant of the matrix                
                <return>
                    determinant of the matrix                    
                </return>
            </javadoc>
            <method name="getDeterminant" type="double" line="206">
                <scope line="207"/>
                <scope line="210">
                    <declaration name="m" type="int" line="211"/>
                    <declaration name="determinant" type="double" line="212"/>
                    <scope line="213"/>
                </scope>
            </method>
            <javadoc line="219">
                Get a solver for finding the A &amp;times; X = B solution in exact linear
                  sense.                
                <return>
                    a solver                    
                </return>
            </javadoc>
            <method name="getSolver" type="DecompositionSolver" line="224"/>
            <class name="Solver" line="227">
                <implements interface="DecompositionSolver"/>
                <javadoc line="227">
                    Specialized solver.                    
                </javadoc>
                <declaration name="lu" type="double[][]" line="231"/>
                <javadoc line="231">
                    Entries of LU decomposition.                    
                </javadoc>
                <declaration name="pivot" type="int[]" line="235"/>
                <javadoc line="235">
                    Pivot permutation associated with LU decomposition.                    
                </javadoc>
                <declaration name="singular" type="boolean" line="239"/>
                <javadoc line="239">
                    Singularity indicator.                    
                </javadoc>
                <javadoc line="243">
                    Build a solver from decomposed matrix.                    
                    <param>
                        lu entries of LU decomposition                        
                    </param>
                    <param>
                        pivot pivot permutation associated with LU decomposition                        
                    </param>
                    <param>
                        singular singularity indicator                        
                    </param>
                </javadoc>
                <method name="Solver" type="constructor" line="249">
                    <params>
                        <param name="lu" type="double[][]"/>
                        <param name="pivot" type="int[]"/>
                        <param name="singular" type="boolean"/>
                    </params>
                </method>
                <javadoc line="254">
                    {@inheritDoc}                    
                </javadoc>
                <method name="isNonSingular" type="boolean" line="257"/>
                <javadoc line="260">
                    {@inheritDoc}                    
                </javadoc>
                <method name="solve" type="RealVector" line="263">
                    <params>
                        <param name="b" type="RealVector"/>
                    </params>
                    <declaration name="m" type="int" line="264"/>
                    <scope line="265"/>
                    <scope line="268"/>
                    <declaration name="bp" type="double[]" line="271"/>
                    <scope line="272"/>
                    <scope line="275">
                        <declaration name="bpCol" type="double" line="276"/>
                        <scope line="277"/>
                    </scope>
                    <scope line="281">
                        <declaration name="bpCol" type="double" line="283"/>
                        <scope line="284"/>
                    </scope>
                </method>
                <javadoc line="290">
                    {@inheritDoc}                    
                </javadoc>
                <method name="solve" type="RealMatrix" line="293">
                    <params>
                        <param name="b" type="RealMatrix"/>
                    </params>
                    <declaration name="m" type="int" line="294"/>
                    <scope line="295"/>
                    <scope line="298"/>
                    <declaration name="nColB" type="int" line="301"/>
                    <declaration name="bp" type="double[][]" line="302"/>
                    <scope line="303">
                        <declaration name="bpRow" type="double[]" line="304"/>
                        <declaration name="pRow" type="int" line="305"/>
                        <scope line="306"/>
                    </scope>
                    <scope line="310">
                        <declaration name="bpCol" type="double[]" line="311"/>
                        <scope line="312">
                            <declaration name="bpI" type="double[]" line="313"/>
                            <declaration name="luICol" type="double" line="314"/>
                            <scope line="315"/>
                        </scope>
                    </scope>
                    <scope line="320">
                        <declaration name="bpCol" type="double[]" line="321"/>
                        <declaration name="luDiag" type="double" line="322"/>
                        <scope line="323"/>
                        <scope line="326">
                            <declaration name="bpI" type="double[]" line="327"/>
                            <declaration name="luICol" type="double" line="328"/>
                            <scope line="329"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="336">
                    {@inheritDoc}                    
                </javadoc>
                <method name="getInverse" type="RealMatrix" line="339"/>
            </class>
        </class>
    </source>