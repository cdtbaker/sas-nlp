<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optimization.direct">
        <import package="java.util.Comparator"/>
        <import package="org.apache.commons.math3.analysis.MultivariateFunction"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.optimization.GoalType"/>
        <import package="org.apache.commons.math3.optimization.ConvergenceChecker"/>
        <import package="org.apache.commons.math3.optimization.PointValuePair"/>
        <import package="org.apache.commons.math3.optimization.SimpleValueChecker"/>
        <import package="org.apache.commons.math3.optimization.MultivariateOptimizer"/>
        <import package="org.apache.commons.math3.optimization.OptimizationData"/>
        <class name="SimplexOptimizer" line="11">
            <extends class="BaseAbstractMultivariateOptimizer">
                <type_params>
                    <type_param name="MultivariateFunction"/>
                </type_params>
            </extends>
            <implements interface="MultivariateOptimizer"/>
            <javadoc line="11">
                This class implements simplex-based direct search optimization.
                  &lt;p&gt;
                  Direct search methods only use objective function values, they do
                  not need derivatives and don&apos;t either try to compute approximation
                  of the derivatives. According to a 1996 paper by Margaret H. Wright
                  (&lt;a href=&quot;http://cm.bell-labs.com/cm/cs/doc/96/4-02.ps.gz&quot;&gt;Direct
                  Search Methods: Once Scorned, Now Respectable&lt;/a&gt;), they are used
                  when either the computation of the derivative is impossible (noisy
                  functions, unpredictable discontinuities) or difficult (complexity,
                  computation cost). In the first cases, rather than an optimum, a
                  &lt;em&gt;not too bad&lt;/em&gt; point is desired. In the latter cases, an
                  optimum is desired but cannot be reasonably found. In all cases
                  direct search methods can be useful.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Simplex-based direct search methods are based on comparison of
                  the objective function values at the vertices of a simplex (which is a
                  set of n+1 points in dimension n) that is updated by the algorithms
                  steps.
                  &lt;p&gt;
                  &lt;p&gt;
                  The {@link #setSimplex(AbstractSimplex) setSimplex} method &lt;em&gt;must&lt;/em&gt;
                  be called prior to calling the {@code optimize} method.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Each call to {@link #optimize(int,MultivariateFunction,GoalType,double[])optimize} will re-use the start configuration of the current simplex and
                  move it such that its first vertex is at the provided start point of the
                  optimization. If the {@code optimize} method is called to solve a different
                  problem and the number of parameters change, the simplex must be
                  re-initialized to one with the appropriate dimensions.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Convergence is checked by providing the &lt;em&gt;worst&lt;/em&gt; points of
                  previous and current simplex to the convergence checker, not the best
                  ones.
                  &lt;/p&gt;
                  &lt;p&gt;
                  This simplex optimizer implementation does not directly support constrained
                  optimization with simple bounds, so for such optimizations, either a more
                  dedicated method must be used like {@link CMAESOptimizer} or {@link BOBYQAOptimizer}, or the optimized method must be wrapped in an adapter like{@link MultivariateFunctionMappingAdapter} or {@link MultivariateFunctionPenaltyAdapter}.
                  &lt;/p&gt;                
                <see>
                    AbstractSimplex                    
                </see>
                <see>
                    MultivariateFunctionMappingAdapter                    
                </see>
                <see>
                    MultivariateFunctionPenaltyAdapter                    
                </see>
                <see>
                    CMAESOptimizer                    
                </see>
                <see>
                    BOBYQAOptimizer                    
                </see>
                <version>
                    $Id: SimplexOptimizer.java 1422230 2012-12-15 12:11:13Z erans $                    
                </version>
                <deprecated>
                    As of 3.1 (to be removed in 4.0).                    
                </deprecated>
                <since>
                    3.0                    
                </since>
            </javadoc>
            <declaration name="simplex" type="AbstractSimplex" line="63"/>
            <javadoc line="63">
                Simplex.                
            </javadoc>
            <javadoc line="67">
                Constructor using a default {@link SimpleValueChecker convergence
                  checker}.                
                <deprecated>
                    See {@link SimpleValueChecker#SimpleValueChecker()}                    
                </deprecated>
            </javadoc>
            <method name="SimplexOptimizer" type="constructor" line="72"/>
            <javadoc line="75">
                @param checker Convergence checker.                
            </javadoc>
            <method name="SimplexOptimizer" type="constructor" line="78">
                <params>
                    <param name="checker" type="ConvergenceChecker<PointValuePair>"/>
                </params>
            </method>
            <javadoc line="81">
                @param rel Relative threshold.                
                <param>
                    abs Absolute threshold.                    
                </param>
            </javadoc>
            <method name="SimplexOptimizer" type="constructor" line="85">
                <params>
                    <param name="rel" type="double"/>
                    <param name="abs" type="double"/>
                </params>
            </method>
            <javadoc line="88">
                Set the simplex algorithm.                
                <param>
                    simplex Simplex.                    
                </param>
                <deprecated>
                    As of 3.1. The initial simplex can now be passed as an
                      argument of the {@link #optimize(int,MultivariateFunction,GoalType,OptimizationData[])}method.                    
                </deprecated>
            </javadoc>
            <method name="setSimplex" type="void" line="94">
                <params>
                    <param name="simplex" type="AbstractSimplex"/>
                </params>
            </method>
            <javadoc line="97">
                Optimize an objective function.                
                <param>
                    maxEval Allowed number of evaluations of the objective function.                    
                </param>
                <param>
                    f Objective function.                    
                </param>
                <param>
                    goalType Optimization type.                    
                </param>
                <param>
                    optData Optimization data. The following data will be looked for:
                      <ul>
                      <li>{@link org.apache.commons.math3.optimization.InitialGuess InitialGuess}</li>
                      <li>{@link AbstractSimplex}</li>
                      </ul>                    
                </param>
                <return>
                    the point/value pair giving the optimal value for objective
                      function.                    
                </return>
            </javadoc>
            <method name="optimizeInternal" type="PointValuePair" line="110">
                <params>
                    <param name="maxEval" type="int"/>
                    <param name="f" type="MultivariateFunction"/>
                    <param name="goalType" type="GoalType"/>
                    <param name="optData" type="OptimizationData"/>
                </params>
            </method>
            <javadoc line="114">
                Scans the list of (required and optional) optimization data that
                  characterize the problem.                
                <param>
                    optData Optimization data. The following data will be looked for:
                      <ul>
                      <li>{@link AbstractSimplex}</li>
                      </ul>                    
                </param>
            </javadoc>
            <method name="parseOptimizationData" type="void" line="122">
                <params>
                    <param name="optData" type="OptimizationData"/>
                </params>
                <scope line="123">
                    <scope line="124"/>
                </scope>
            </method>
            <javadoc line="130">
                {@inheritDoc}                
            </javadoc>
            <method name="doOptimize" type="PointValuePair" line="133">
                <scope line="134"/>
                <anonymous_class line="137">
                    <method name="value" type="double" line="138">
                        <params>
                            <param name="point" type="double[]"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="evalFunc" type="MultivariateFunction" line="137"/>
                <declaration name="isMinim" type="boolean" line="143"/>
                <anonymous_class line="144">
                    <method name="compare" type="int" line="145">
                        <params>
                            <param name="o1" type="PointValuePair"/>
                            <param name="o2" type="PointValuePair"/>
                        </params>
                        <declaration name="v1" type="double" line="146"/>
                        <declaration name="v2" type="double" line="147"/>
                    </method>
                </anonymous_class>
                <declaration name="comparator" type="Comparator&lt;PointValuePair&gt;" line="144"/>
                <declaration name="previous" type="PointValuePair[]" line="154"/>
                <declaration name="iteration" type="int" line="155"/>
                <declaration name="checker" type="ConvergenceChecker&lt;PointValuePair&gt;" line="156"/>
                <scope line="157">
                    <scope line="158">
                        <declaration name="converged" type="boolean" line="159"/>
                        <scope line="160">
                            <declaration name="prev" type="PointValuePair" line="161"/>
                        </scope>
                        <scope line="164"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>