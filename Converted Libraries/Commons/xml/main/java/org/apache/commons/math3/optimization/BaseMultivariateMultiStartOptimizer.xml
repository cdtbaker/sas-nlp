<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optimization">
        <import package="java.util.Arrays"/>
        <import package="java.util.Comparator"/>
        <import package="org.apache.commons.math3.analysis.MultivariateFunction"/>
        <import package="org.apache.commons.math3.exception.MathIllegalStateException"/>
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.random.RandomVectorGenerator"/>
        <class name="BaseMultivariateMultiStartOptimizer" line="30">
            <type_params>
                <type_param name="FUNC"/>
            </type_params>
            <implements interface="BaseMultivariateOptimizer">
                <type_params>
                    <type_param name="FUNC"/>
                </type_params>
            </implements>
            <javadoc line="30">
                Base class for all implementations of a multi-start optimizer.
                  This interface is mainly intended to enforce the internal coherence of
                  Commons-Math. Users of the API are advised to base their code on{@link MultivariateMultiStartOptimizer} or on{@link DifferentiableMultivariateMultiStartOptimizer}.                
                <param>
                    &lt;FUNC&gt;
                       Type of the objective function to be optimized.                    
                </param>
                <version>
                    $Id: BaseMultivariateMultiStartOptimizer.java 1422230 2012-12-15 12:11:13Z erans $                    
                </version>
                <deprecated>
                    As of 3.1 (to be removed in 4.0).                    
                </deprecated>
                <since>
                    3.0                    
                </since>
            </javadoc>
            <declaration name="optimizer" type="BaseMultivariateOptimizer&lt;FUNC&gt;" line="47"/>
            <javadoc line="47">
                Underlying classical optimizer.                
            </javadoc>
            <declaration name="maxEvaluations" type="int" line="49"/>
            <javadoc line="49">
                Maximal number of evaluations allowed.                
            </javadoc>
            <declaration name="totalEvaluations" type="int" line="51"/>
            <javadoc line="51">
                Number of evaluations already performed for all starts.                
            </javadoc>
            <declaration name="starts" type="int" line="53"/>
            <javadoc line="53">
                Number of starts to go.                
            </javadoc>
            <declaration name="generator" type="RandomVectorGenerator" line="55"/>
            <javadoc line="55">
                Random generator for multi-start.                
            </javadoc>
            <declaration name="optima" type="PointValuePair[]" line="57"/>
            <javadoc line="57">
                Found optima.                
            </javadoc>
            <javadoc line="60">
                Create a multi-start optimizer from a single-start optimizer.                
                <param>
                    optimizer Single-start optimizer to wrap.                    
                </param>
                <param>
                    starts Number of starts to perform. If {@code starts == 1},
                      the {@link #optimize(int,MultivariateFunction,GoalType,double[])optimize} will return the same solution as {@code optimizer} would.                    
                </param>
                <param>
                    generator Random vector generator to use for restarts.                    
                </param>
                <throws>
                    NullArgumentException if {@code optimizer} or {@code generator}is {@code null}.                    
                </throws>
                <throws>
                    NotStrictlyPositiveException if {@code starts &lt; 1}.                    
                </throws>
            </javadoc>
            <method name="BaseMultivariateMultiStartOptimizer" type="constructor" line="74">
                <params>
                    <param name="optimizer" type="BaseMultivariateOptimizer<FUNC>"/>
                    <param name="starts" type="int"/>
                    <param name="generator" type="RandomVectorGenerator"/>
                </params>
                <scope line="76"/>
                <scope line="79"/>
            </method>
            <javadoc line="88">
                Get all the optima found during the last call to {@link #optimize(int,MultivariateFunction,GoalType,double[]) optimize}.
                  The optimizer stores all the optima found during a set of
                  restarts. The {@link #optimize(int,MultivariateFunction,GoalType,double[])optimize} method returns the best point only. This method
                  returns all the points found at the end of each starts,
                  including the best one already returned by the {@link #optimize(int,MultivariateFunction,GoalType,double[]) optimize} method.
                  &lt;br/&gt;
                  The returned array as one element for each start as specified
                  in the constructor. It is ordered with the results from the
                  runs that did converge first, sorted from best to worst
                  objective value (i.e in ascending order if minimizing and in
                  descending order if maximizing), followed by and null elements
                  corresponding to the runs that did not converge. This means all
                  elements will be null if the {@link #optimize(int,MultivariateFunction,GoalType,double[])optimize} method did throw an exception.
                  This also means that if the first element is not {@code null}, it
                  is the best point found across all starts.                
                <return>
                    an array containing the optima.                    
                </return>
                <throws>
                    MathIllegalStateException if {@link #optimize(int,MultivariateFunction,GoalType,double[]) optimize}has not been called.                    
                </throws>
            </javadoc>
            <method name="getOptima" type="PointValuePair[]" line="114">
                <scope line="115"/>
            </method>
            <javadoc line="121">
                {@inheritDoc}                
            </javadoc>
            <method name="getMaxEvaluations" type="int" line="122"/>
            <javadoc line="126">
                {@inheritDoc}                
            </javadoc>
            <method name="getEvaluations" type="int" line="127"/>
            <javadoc line="131">
                {@inheritDoc}                
            </javadoc>
            <method name="getConvergenceChecker" type="ConvergenceChecker<PointValuePair>" line="132"/>
            <javadoc line="136">
                {@inheritDoc}                
            </javadoc>
            <method name="optimize" type="PointValuePair" line="141">
                <params>
                    <param name="maxEval" type="int"/>
                    <param name="f" type="FUNC"/>
                    <param name="goal" type="GoalType"/>
                    <param name="startPoint" type="double[]"/>
                </params>
                <comment line="148">
                    Multi-start loop.                    
                </comment>
                <comment line="150">
                    CHECKSTYLE: stop IllegalCatch                    
                </comment>
                <comment line="158">
                    CHECKSTYLE: resume IllegalCatch                    
                </comment>
                <comment line="166">
                    cannot be null if starts &gt;=1                    
                </comment>
                <comment line="169">
                    Return the found point given the best objective function value.                    
                </comment>
                <declaration name="lastException" type="RuntimeException" line="143"/>
                <scope line="148">
                    <scope line="150"/>
                    <scope line="153"/>
                </scope>
                <scope line="164"/>
            </method>
            <javadoc line="172">
                Sort the optima from best to worst, followed by {@code null} elements.                
                <param>
                    goal Goal type.                    
                </param>
            </javadoc>
            <method name="sortPairs" type="void" line="177">
                <params>
                    <param name="goal" type="GoalType"/>
                </params>
                <anonymous_class line="178">
                    <method name="compare" type="int" line="180">
                        <params>
                            <param name="o1" type="PointValuePair"/>
                            <param name="o2" type="PointValuePair"/>
                        </params>
                        <scope line="181"/>
                        <scope line="183"/>
                        <declaration name="v1" type="double" line="186"/>
                        <declaration name="v2" type="double" line="187"/>
                    </method>
                </anonymous_class>
            </method>
        </class>
    </source>