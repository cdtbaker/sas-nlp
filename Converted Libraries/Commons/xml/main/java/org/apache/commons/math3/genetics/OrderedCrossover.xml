<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.genetics">
        <import package="java.util.ArrayList"/>
        <import package="java.util.Collections"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.List"/>
        <import package="java.util.Set"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.random.RandomGenerator"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="OrderedCrossover" line="31">
            <type_params>
                <type_param name="T"/>
            </type_params>
            <implements interface="CrossoverPolicy"/>
            <javadoc line="31">
                Order 1 Crossover [OX1] builds offspring from &lt;b&gt;ordered&lt;/b&gt; chromosomes by copying a
                  consecutive slice from one parent, and filling up the remaining genes from the other
                  parent as they appear.
                  &lt;p&gt;
                  This policy works by applying the following rules:
                  &lt;ol&gt;
                  &lt;li&gt;select a random slice of consecutive genes from parent 1&lt;/li&gt;
                  &lt;li&gt;copy the slice to child 1 and mark out the genes in parent 2&lt;/li&gt;
                  &lt;li&gt;starting from the right side of the slice, copy genes from parent 2 as they
                  appear to child 1 if they are not yet marked out.&lt;/li&gt;
                  &lt;/ol&gt;
                  &lt;p&gt;
                  Example (random sublist from index 3 to 7, underlined):
                  &lt;pre&gt;
                  p1 = (8 4 7 3 6 2 5 1 9 0)   X   c1 = (0 4 7 3 6 2 5 1 8 9)
                  ---------                        ---------
                  p2 = (0 1 2 3 4 5 6 7 8 9)   X   c2 = (8 1 2 3 4 5 6 7 9 0)
                  &lt;/pre&gt;
                  &lt;p&gt;
                  This policy works only on {@link AbstractListChromosome}, and therefore it
                  is parameterized by T. Moreover, the chromosomes must have same lengths.                
                <see>
                    &lt;a href=&quot;http://www.rubicite.com/Tutorials/GeneticAlgorithms/CrossoverOperators/Order1CrossoverOperator.aspx&quot;&gt;
                      Order 1 Crossover Operator&lt;/a&gt;                    
                </see>
                <param>
                    &lt;T&gt;
                       generic type of the {@link AbstractListChromosome}s for crossover                    
                </param>
                <since>
                    3.1                    
                </since>
                <version>
                    $Id: OrderedCrossover.java 1385297 2012-09-16 16:05:57Z tn $                    
                </version>
            </javadoc>
            <javadoc line="63">
                {@inheritDoc}                
                <throws>
                    MathIllegalArgumentException iff one of the chromosomes is
                      not an instance of {@link AbstractListChromosome}                    
                </throws>
                <throws>
                    DimensionMismatchException if the length of the two chromosomes is different                    
                </throws>
            </javadoc>
            <method name="crossover" type="ChromosomePair" line="72">
                <params>
                    <param name="first" type="Chromosome"/>
                    <param name="second" type="Chromosome"/>
                </params>
                <scope line="74"/>
            </method>
            <javadoc line="80">
                Helper for {@link #crossover(Chromosome,Chromosome)}. Performs the actual crossover.                
                <param>
                    first the first chromosome                    
                </param>
                <param>
                    second the second chromosome                    
                </param>
                <return>
                    the pair of new chromosomes that resulted from the crossover                    
                </return>
                <throws>
                    DimensionMismatchException if the length of the two chromosomes is different                    
                </throws>
            </javadoc>
            <method name="mate" type="ChromosomePair" line="89">
                <params>
                    <param name="first" type="AbstractListChromosome<T>"/>
                    <param name="second" type="AbstractListChromosome<T>"/>
                </params>
                <comment line="97">
                    array representations of the parents                    
                </comment>
                <comment line="100">
                    and of the children                    
                </comment>
                <comment line="103">
                    sets of already inserted items for quick access                    
                </comment>
                <comment line="108">
                    choose random points, making sure that lb &lt; ub.                    
                </comment>
                <comment line="114">
                    determine the lower and upper bounds                    
                </comment>
                <comment line="118">
                    add the subLists that are between lb and ub                    
                </comment>
                <comment line="124">
                    iterate over every item in the parents                    
                </comment>
                <comment line="128">
                    retrieve the current item in each parent                    
                </comment>
                <comment line="132">
                    if the first child already contains the item in the second parent add it                    
                </comment>
                <comment line="138">
                    if the second child already contains the item in the first parent add it                    
                </comment>
                <comment line="145">
                    rotate so that the original slice is in the same place as in the parents.                    
                </comment>
                <declaration name="length" type="int" line="91"/>
                <scope line="92"/>
                <declaration name="parent1Rep" type="List&lt;T&gt;" line="97"/>
                <declaration name="parent2Rep" type="List&lt;T&gt;" line="98"/>
                <declaration name="child1" type="List&lt;T&gt;" line="100"/>
                <declaration name="child2" type="List&lt;T&gt;" line="101"/>
                <declaration name="child1Set" type="Set&lt;T&gt;" line="103"/>
                <declaration name="child2Set" type="Set&lt;T&gt;" line="104"/>
                <declaration name="random" type="RandomGenerator" line="106"/>
                <declaration name="a" type="int" line="108"/>
                <declaration name="b" type="int" line="109"/>
                <scope line="110"/>
                <declaration name="lb" type="int" line="114"/>
                <declaration name="ub" type="int" line="115"/>
                <scope line="124">
                    <declaration name="idx" type="int" line="125"/>
                    <declaration name="item1" type="T" line="128"/>
                    <declaration name="item2" type="T" line="129"/>
                    <scope line="132"/>
                    <scope line="138"/>
                </scope>
            </method>
        </class>
    </source>