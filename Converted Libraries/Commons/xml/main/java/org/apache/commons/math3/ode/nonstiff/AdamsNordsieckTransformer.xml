<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.ode.nonstiff">
        <import package="java.util.Arrays"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Map"/>
        <import package="org.apache.commons.math3.fraction.BigFraction"/>
        <import package="org.apache.commons.math3.linear.Array2DRowFieldMatrix"/>
        <import package="org.apache.commons.math3.linear.Array2DRowRealMatrix"/>
        <import package="org.apache.commons.math3.linear.ArrayFieldVector"/>
        <import package="org.apache.commons.math3.linear.FieldDecompositionSolver"/>
        <import package="org.apache.commons.math3.linear.FieldLUDecomposition"/>
        <import package="org.apache.commons.math3.linear.FieldMatrix"/>
        <import package="org.apache.commons.math3.linear.MatrixUtils"/>
        <import package="org.apache.commons.math3.linear.QRDecomposition"/>
        <import package="org.apache.commons.math3.linear.RealMatrix"/>
        <class name="AdamsNordsieckTransformer" line="35">
            <javadoc line="35">
                Transformer to Nordsieck vectors for Adams integrators.
                  &lt;p&gt;This class is used by {@link AdamsBashforthIntegrator Adams-Bashforth} and{@link AdamsMoultonIntegrator Adams-Moulton} integrators to convert between
                  classical representation with several previous first derivatives and Nordsieck
                  representation with higher order scaled derivatives.&lt;/p&gt;
                  &lt;p&gt;We define scaled derivatives s&lt;sub&gt;i&lt;/sub&gt;(n) at step n as:
                  &lt;pre&gt;
                  s&lt;sub&gt;1&lt;/sub&gt;(n) = h y&apos;&lt;sub&gt;n&lt;/sub&gt; for first derivative
                  s&lt;sub&gt;2&lt;/sub&gt;(n) = h&lt;sup&gt;2&lt;/sup&gt;/2 y&apos;&apos;&lt;sub&gt;n&lt;/sub&gt; for second derivative
                  s&lt;sub&gt;3&lt;/sub&gt;(n) = h&lt;sup&gt;3&lt;/sup&gt;/6 y&apos;&apos;&apos;&lt;sub&gt;n&lt;/sub&gt; for third derivative
                  ...
                  s&lt;sub&gt;k&lt;/sub&gt;(n) = h&lt;sup&gt;k&lt;/sup&gt;/k! y&lt;sup&gt;(k)&lt;/sup&gt;&lt;sub&gt;n&lt;/sub&gt; for k&lt;sup&gt;th&lt;/sup&gt; derivative
                  &lt;/pre&gt;&lt;/p&gt;
                  &lt;p&gt;With the previous definition, the classical representation of multistep methods
                  uses first derivatives only, i.e. it handles y&lt;sub&gt;n&lt;/sub&gt;, s&lt;sub&gt;1&lt;/sub&gt;(n) and
                  q&lt;sub&gt;n&lt;/sub&gt; where q&lt;sub&gt;n&lt;/sub&gt; is defined as:
                  &lt;pre&gt;
                  q&lt;sub&gt;n&lt;/sub&gt; = [ s&lt;sub&gt;1&lt;/sub&gt;(n-1) s&lt;sub&gt;1&lt;/sub&gt;(n-2) ... s&lt;sub&gt;1&lt;/sub&gt;(n-(k-1)) ]&lt;sup&gt;T&lt;/sup&gt;
                  &lt;/pre&gt;
                  (we omit the k index in the notation for clarity).&lt;/p&gt;
                  &lt;p&gt;Another possible representation uses the Nordsieck vector with
                  higher degrees scaled derivatives all taken at the same step, i.e it handles y&lt;sub&gt;n&lt;/sub&gt;,
                  s&lt;sub&gt;1&lt;/sub&gt;(n) and r&lt;sub&gt;n&lt;/sub&gt;) where r&lt;sub&gt;n&lt;/sub&gt; is defined as:
                  &lt;pre&gt;
                  r&lt;sub&gt;n&lt;/sub&gt; = [ s&lt;sub&gt;2&lt;/sub&gt;(n), s&lt;sub&gt;3&lt;/sub&gt;(n) ... s&lt;sub&gt;k&lt;/sub&gt;(n) ]&lt;sup&gt;T&lt;/sup&gt;
                  &lt;/pre&gt;
                  (here again we omit the k index in the notation for clarity)
                  &lt;/p&gt;
                  &lt;p&gt;Taylor series formulas show that for any index offset i, s&lt;sub&gt;1&lt;/sub&gt;(n-i) can be
                  computed from s&lt;sub&gt;1&lt;/sub&gt;(n), s&lt;sub&gt;2&lt;/sub&gt;(n) ... s&lt;sub&gt;k&lt;/sub&gt;(n), the formula being exact
                  for degree k polynomials.
                  &lt;pre&gt;
                  s&lt;sub&gt;1&lt;/sub&gt;(n-i) = s&lt;sub&gt;1&lt;/sub&gt;(n) + &amp;sum;&lt;sub&gt;j&amp;gt;1&lt;/sub&gt; j (-i)&lt;sup&gt;j-1&lt;/sup&gt; s&lt;sub&gt;j&lt;/sub&gt;(n)
                  &lt;/pre&gt;
                  The previous formula can be used with several values for i to compute the transform between
                  classical representation and Nordsieck vector at step end. The transform between r&lt;sub&gt;n&lt;/sub&gt;
                  and q&lt;sub&gt;n&lt;/sub&gt; resulting from the Taylor series formulas above is:
                  &lt;pre&gt;
                  q&lt;sub&gt;n&lt;/sub&gt; = s&lt;sub&gt;1&lt;/sub&gt;(n) u + P r&lt;sub&gt;n&lt;/sub&gt;
                  &lt;/pre&gt;
                  where u is the [ 1 1 ... 1 ]&lt;sup&gt;T&lt;/sup&gt; vector and P is the (k-1)&amp;times;(k-1) matrix built
                  with the j (-i)&lt;sup&gt;j-1&lt;/sup&gt; terms:
                  &lt;pre&gt;
                  [  -2   3   -4    5  ... ]
                  [  -4  12  -32   80  ... ]
                  P =  [  -6  27 -108  405  ... ]
                  [  -8  48 -256 1280  ... ]
                  [          ...           ]
                  &lt;/pre&gt;&lt;/p&gt;
                  &lt;p&gt;Changing -i into +i in the formula above can be used to compute a similar transform between
                  classical representation and Nordsieck vector at step start. The resulting matrix is simply
                  the absolute value of matrix P.&lt;/p&gt;
                  &lt;p&gt;For {@link AdamsBashforthIntegrator Adams-Bashforth} method, the Nordsieck vector
                  at step n+1 is computed from the Nordsieck vector at step n as follows:
                  &lt;ul&gt;
                  &lt;li&gt;y&lt;sub&gt;n+1&lt;/sub&gt; = y&lt;sub&gt;n&lt;/sub&gt; + s&lt;sub&gt;1&lt;/sub&gt;(n) + u&lt;sup&gt;T&lt;/sup&gt; r&lt;sub&gt;n&lt;/sub&gt;&lt;/li&gt;
                  &lt;li&gt;s&lt;sub&gt;1&lt;/sub&gt;(n+1) = h f(t&lt;sub&gt;n+1&lt;/sub&gt;, y&lt;sub&gt;n+1&lt;/sub&gt;)&lt;/li&gt;
                  &lt;li&gt;r&lt;sub&gt;n+1&lt;/sub&gt; = (s&lt;sub&gt;1&lt;/sub&gt;(n) - s&lt;sub&gt;1&lt;/sub&gt;(n+1)) P&lt;sup&gt;-1&lt;/sup&gt; u + P&lt;sup&gt;-1&lt;/sup&gt; A P r&lt;sub&gt;n&lt;/sub&gt;&lt;/li&gt;
                  &lt;/ul&gt;
                  where A is a rows shifting matrix (the lower left part is an identity matrix):
                  &lt;pre&gt;
                  [ 0 0   ...  0 0 | 0 ]
                  [ ---------------+---]
                  [ 1 0   ...  0 0 | 0 ]
                  A = [ 0 1   ...  0 0 | 0 ]
                  [       ...      | 0 ]
                  [ 0 0   ...  1 0 | 0 ]
                  [ 0 0   ...  0 1 | 0 ]
                  &lt;/pre&gt;&lt;/p&gt;
                  &lt;p&gt;For {@link AdamsMoultonIntegrator Adams-Moulton} method, the predicted Nordsieck vector
                  at step n+1 is computed from the Nordsieck vector at step n as follows:
                  &lt;ul&gt;
                  &lt;li&gt;Y&lt;sub&gt;n+1&lt;/sub&gt; = y&lt;sub&gt;n&lt;/sub&gt; + s&lt;sub&gt;1&lt;/sub&gt;(n) + u&lt;sup&gt;T&lt;/sup&gt; r&lt;sub&gt;n&lt;/sub&gt;&lt;/li&gt;
                  &lt;li&gt;S&lt;sub&gt;1&lt;/sub&gt;(n+1) = h f(t&lt;sub&gt;n+1&lt;/sub&gt;, Y&lt;sub&gt;n+1&lt;/sub&gt;)&lt;/li&gt;
                  &lt;li&gt;R&lt;sub&gt;n+1&lt;/sub&gt; = (s&lt;sub&gt;1&lt;/sub&gt;(n) - s&lt;sub&gt;1&lt;/sub&gt;(n+1)) P&lt;sup&gt;-1&lt;/sup&gt; u + P&lt;sup&gt;-1&lt;/sup&gt; A P r&lt;sub&gt;n&lt;/sub&gt;&lt;/li&gt;
                  &lt;/ul&gt;
                  From this predicted vector, the corrected vector is computed as follows:
                  &lt;ul&gt;
                  &lt;li&gt;y&lt;sub&gt;n+1&lt;/sub&gt; = y&lt;sub&gt;n&lt;/sub&gt; + S&lt;sub&gt;1&lt;/sub&gt;(n+1) + [ -1 +1 -1 +1 ... &amp;plusmn;1 ] r&lt;sub&gt;n+1&lt;/sub&gt;&lt;/li&gt;
                  &lt;li&gt;s&lt;sub&gt;1&lt;/sub&gt;(n+1) = h f(t&lt;sub&gt;n+1&lt;/sub&gt;, y&lt;sub&gt;n+1&lt;/sub&gt;)&lt;/li&gt;
                  &lt;li&gt;r&lt;sub&gt;n+1&lt;/sub&gt; = R&lt;sub&gt;n+1&lt;/sub&gt; + (s&lt;sub&gt;1&lt;/sub&gt;(n+1) - S&lt;sub&gt;1&lt;/sub&gt;(n+1)) P&lt;sup&gt;-1&lt;/sup&gt; u&lt;/li&gt;
                  &lt;/ul&gt;
                  where the upper case Y&lt;sub&gt;n+1&lt;/sub&gt;, S&lt;sub&gt;1&lt;/sub&gt;(n+1) and R&lt;sub&gt;n+1&lt;/sub&gt; represent the
                  predicted states whereas the lower case y&lt;sub&gt;n+1&lt;/sub&gt;, s&lt;sub&gt;n+1&lt;/sub&gt; and r&lt;sub&gt;n+1&lt;/sub&gt;
                  represent the corrected states.&lt;/p&gt;
                  &lt;p&gt;We observe that both methods use similar update formulas. In both cases a P&lt;sup&gt;-1&lt;/sup&gt;u
                  vector and a P&lt;sup&gt;-1&lt;/sup&gt; A P matrix are used that do not depend on the state,
                  they only depend on k. This class handles these transformations.&lt;/p&gt;                
                <version>
                    $Id: AdamsNordsieckTransformer.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <declaration name="CACHE" type="Map&amp;lt;Integer,AdamsNordsieckTransformer&amp;gt;" line="137"/>
            <javadoc line="137">
                Cache for already computed coefficients.                
            </javadoc>
            <declaration name="update" type="Array2DRowRealMatrix" line="141"/>
            <javadoc line="141">
                Update matrix for the higher order derivatives h&lt;sup&gt;2&lt;/sup&gt;/2y&apos;&apos;, h&lt;sup&gt;3&lt;/sup&gt;/6 y&apos;&apos;&apos; ...                
            </javadoc>
            <declaration name="c1" type="double[]" line="144"/>
            <javadoc line="144">
                Update coefficients of the higher order derivatives wrt y&apos;.                
            </javadoc>
            <javadoc line="147">
                Simple constructor.                
                <param>
                    nSteps number of steps of the multistep method
                      (excluding the one being computed)                    
                </param>
            </javadoc>
            <method name="AdamsNordsieckTransformer" type="constructor" line="151">
                <params>
                    <param name="nSteps" type="int"/>
                </params>
                <comment line="154">
                    compute exact coefficients                    
                </comment>
                <comment line="164">
                    update coefficients are computed by combining transform from
                     Nordsieck to multistep, then shifting rows to represent step advance
                     then applying inverse transform                    
                </comment>
                <comment line="169">
                    shift rows                    
                </comment>
                <comment line="177">
                    convert coefficients to double                    
                </comment>
                <declaration name="bigP" type="FieldMatrix&amp;lt;BigFraction&amp;gt;" line="154"/>
                <declaration name="pSolver" type="FieldDecompositionSolver&amp;lt;BigFraction&amp;gt;" line="155"/>
                <declaration name="u" type="BigFraction[]" line="158"/>
                <declaration name="bigC1" type="BigFraction[]" line="160"/>
                <declaration name="shiftedP" type="BigFraction[][]" line="166"/>
                <scope line="167"/>
                <declaration name="bigMSupdate" type="FieldMatrix&amp;lt;BigFraction&amp;gt;" line="173"/>
                <scope line="179"/>
            </method>
            <javadoc line="185">
                Get the Nordsieck transformer for a given number of steps.                
                <param>
                    nSteps number of steps of the multistep method
                      (excluding the one being computed)                    
                </param>
                <return>
                    Nordsieck transformer for the specified number of steps                    
                </return>
            </javadoc>
            <method name="getInstance" type="AdamsNordsieckTransformer" line="190">
                <params>
                    <param name="nSteps" type="int"/>
                </params>
                <scope line="191">
                    <declaration name="t" type="AdamsNordsieckTransformer" line="192"/>
                    <scope line="193"/>
                </scope>
            </method>
            <javadoc line="201">
                Get the number of steps of the method
                  (excluding the one being computed).                
                <return>
                    number of steps of the method
                      (excluding the one being computed)                    
                </return>
            </javadoc>
            <method name="getNSteps" type="int" line="206"/>
            <javadoc line="210">
                Build the P matrix.
                  &lt;p&gt;The P matrix general terms are shifted j (-i)&lt;sup&gt;j-1&lt;/sup&gt; terms:
                  &lt;pre&gt;
                  [  -2   3   -4    5  ... ]
                  [  -4  12  -32   80  ... ]
                  P =  [  -6  27 -108  405  ... ]
                  [  -8  48 -256 1280  ... ]
                  [          ...           ]
                  &lt;/pre&gt;&lt;/p&gt;                
                <param>
                    nSteps number of steps of the multistep method
                      (excluding the one being computed)                    
                </param>
                <return>
                    P matrix                    
                </return>
            </javadoc>
            <method name="buildP" type="FieldMatrix&lt;BigFraction&gt;" line="223">
                <params>
                    <param name="nSteps" type="int"/>
                </params>
                <comment line="229">
                    build the P matrix elements from Taylor series formulas                    
                </comment>
                <declaration name="pData" type="BigFraction[][]" line="225"/>
                <scope line="227">
                    <declaration name="pI" type="BigFraction[]" line="229"/>
                    <declaration name="factor" type="int" line="230"/>
                    <declaration name="aj" type="int" line="231"/>
                    <scope line="232"/>
                </scope>
            </method>
            <javadoc line="242">
                Initialize the high order scaled derivatives at step start.                
                <param>
                    h step size to use for scaling                    
                </param>
                <param>
                    t first steps times                    
                </param>
                <param>
                    y first steps states                    
                </param>
                <param>
                    yDot first steps derivatives                    
                </param>
                <return>
                    Nordieck vector at first step (h&lt;sup&gt;2&lt;/sup&gt;/2 y&apos;&apos;&lt;sub&gt;n&lt;/sub&gt;,
                      h&lt;sup&gt;3&lt;/sup&gt;/6 y&apos;&apos;&apos;&lt;sub&gt;n&lt;/sub&gt; ... h&lt;sup&gt;k&lt;/sup&gt;/k! y&lt;sup&gt;(k)&lt;/sup&gt;&lt;sub&gt;n&lt;/sub&gt;)                    
                </return>
            </javadoc>
            <method name="initializeHighOrderDerivatives" type="Array2DRowRealMatrix" line="252">
                <params>
                    <param name="h" type="double"/>
                    <param name="t" type="double[]"/>
                    <param name="y" type="double[][]"/>
                    <param name="yDot" type="double[][]"/>
                </params>
                <comment line="255">
                    using Taylor series with di = ti - t0, we get:
                      y(ti)  - y(t0)  - di y&apos;(t0) =   di^2 / h^2 s2 + ... +   di^k     / h^k sk + O(h^(k+1))
                      y&apos;(ti) - y&apos;(t0)             = 2 di   / h^2 s2 + ... + k di^(k-1) / h^k sk + O(h^k)
                     we write these relations for i = 1 to i= n-1 as a set of 2(n-1) linear
                     equations depending on the Nordsieck vector [s2 ... sk]                    
                </comment>
                <comment line="270">
                    linear coefficients of equations
                     y(ti) - y(t0) - di y&apos;(t0) and y&apos;(ti) - y&apos;(t0)                    
                </comment>
                <comment line="280">
                    expected value of the previous equations                    
                </comment>
                <comment line="292">
                    solve the rectangular system in the least square sense
                     to get the best estimate of the Nordsieck vector [s2 ... sk]                    
                </comment>
                <declaration name="a" type="double[][]" line="259"/>
                <declaration name="b" type="double[][]" line="260"/>
                <declaration name="y0" type="double[]" line="261"/>
                <declaration name="yDot0" type="double[]" line="262"/>
                <scope line="263">
                    <declaration name="di" type="double" line="265"/>
                    <declaration name="ratio" type="double" line="266"/>
                    <declaration name="dikM1Ohk" type="double" line="267"/>
                    <declaration name="aI" type="double[]" line="271"/>
                    <declaration name="aDotI" type="double[]" line="272"/>
                    <scope line="273"/>
                    <declaration name="yI" type="double[]" line="280"/>
                    <declaration name="yDotI" type="double[]" line="281"/>
                    <declaration name="bI" type="double[]" line="282"/>
                    <declaration name="bDotI" type="double[]" line="283"/>
                    <scope line="284"/>
                </scope>
                <declaration name="decomposition" type="QRDecomposition" line="293"/>
                <declaration name="x" type="RealMatrix" line="295"/>
            </method>
            <javadoc line="299">
                Update the high order scaled derivatives for Adams integrators (phase 1).
                  &lt;p&gt;The complete update of high order derivatives has a form similar to:
                  &lt;pre&gt;
                  r&lt;sub&gt;n+1&lt;/sub&gt; = (s&lt;sub&gt;1&lt;/sub&gt;(n) - s&lt;sub&gt;1&lt;/sub&gt;(n+1)) P&lt;sup&gt;-1&lt;/sup&gt; u + P&lt;sup&gt;-1&lt;/sup&gt; A P r&lt;sub&gt;n&lt;/sub&gt;
                  &lt;/pre&gt;
                  this method computes the P&lt;sup&gt;-1&lt;/sup&gt; A P r&lt;sub&gt;n&lt;/sub&gt; part.&lt;/p&gt;                
                <param>
                    highOrder high order scaled derivatives
                      (h&lt;sup&gt;2&lt;/sup&gt;/2 y&apos;&apos;, ... h&lt;sup&gt;k&lt;/sup&gt;/k! y(k))                    
                </param>
                <return>
                    updated high order derivatives                    
                </return>
                <see>
                    #updateHighOrderDerivativesPhase2(double[],double[],Array2DRowRealMatrix)                    
                </see>
            </javadoc>
            <method name="updateHighOrderDerivativesPhase1" type="Array2DRowRealMatrix" line="310">
                <params>
                    <param name="highOrder" type="Array2DRowRealMatrix"/>
                </params>
            </method>
            <javadoc line="314">
                Update the high order scaled derivatives Adams integrators (phase 2).
                  &lt;p&gt;The complete update of high order derivatives has a form similar to:
                  &lt;pre&gt;
                  r&lt;sub&gt;n+1&lt;/sub&gt; = (s&lt;sub&gt;1&lt;/sub&gt;(n) - s&lt;sub&gt;1&lt;/sub&gt;(n+1)) P&lt;sup&gt;-1&lt;/sup&gt; u + P&lt;sup&gt;-1&lt;/sup&gt; A P r&lt;sub&gt;n&lt;/sub&gt;
                  &lt;/pre&gt;
                  this method computes the (s&lt;sub&gt;1&lt;/sub&gt;(n) - s&lt;sub&gt;1&lt;/sub&gt;(n+1)) P&lt;sup&gt;-1&lt;/sup&gt; u part.&lt;/p&gt;
                  &lt;p&gt;Phase 1 of the update must already have been performed.&lt;/p&gt;                
                <param>
                    start first order scaled derivatives at step start                    
                </param>
                <param>
                    end first order scaled derivatives at step end                    
                </param>
                <param>
                    highOrder high order scaled derivatives, will be modified
                      (h&lt;sup&gt;2&lt;/sup&gt;/2 y&apos;&apos;, ... h&lt;sup&gt;k&lt;/sup&gt;/k! y(k))                    
                </param>
                <see>
                    #updateHighOrderDerivativesPhase1(Array2DRowRealMatrix)                    
                </see>
            </javadoc>
            <method name="updateHighOrderDerivativesPhase2" type="void" line="329">
                <params>
                    <param name="start" type="double[]"/>
                    <param name="end" type="double[]"/>
                    <param name="highOrder" type="Array2DRowRealMatrix"/>
                </params>
                <declaration name="data" type="double[][]" line="330"/>
                <scope line="331">
                    <declaration name="dataI" type="double[]" line="332"/>
                    <declaration name="c1I" type="double" line="333"/>
                    <scope line="334"/>
                </scope>
            </method>
        </class>
    </source>