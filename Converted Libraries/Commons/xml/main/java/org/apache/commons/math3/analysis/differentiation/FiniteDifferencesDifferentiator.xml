<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.differentiation">
        <import package="java.io.Serializable"/>
        <import package="org.apache.commons.math3.analysis.UnivariateFunction"/>
        <import package="org.apache.commons.math3.analysis.UnivariateMatrixFunction"/>
        <import package="org.apache.commons.math3.analysis.UnivariateVectorFunction"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.NotPositiveException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="FiniteDifferencesDifferentiator" line="11">
            <implements interface="UnivariateFunctionDifferentiator"/>
            <implements interface="UnivariateVectorFunctionDifferentiator"/>
            <implements interface="UnivariateMatrixFunctionDifferentiator"/>
            <implements interface="Serializable"/>
            <javadoc line="11">
                Univariate functions differentiator using finite differences.
                  &lt;p&gt;
                  This class creates some wrapper objects around regular{@link UnivariateFunction univariate functions} (or {@link UnivariateVectorFunction univariate vector functions} or {@link UnivariateMatrixFunction univariate matrix functions}). These
                  wrapper objects compute derivatives in addition to function
                  value.
                  &lt;/p&gt;
                  &lt;p&gt;
                  The wrapper objects work by calling the underlying function on
                  a sampling grid around the current point and performing polynomial
                  interpolation. A finite differences scheme with n points is
                  theoretically able to compute derivatives up to order n-1, but
                  it is generally better to have a slight margin. The step size must
                  also be small enough in order for the polynomial approximation to
                  be good in the current point neighborhood, but it should not be too
                  small because numerical instability appears quickly (there are several
                  differences of close points). Choosing the number of points and
                  the step size is highly problem dependent.
                  &lt;/p&gt;
                  &lt;p&gt;
                  As an example of good and bad settings, lets consider the quintic
                  polynomial function {@code f(x) = (x-1)(x-0.5)x(x+0.5)(x+1)}.
                  Since it is a polynomial, finite differences with at least 6 points
                  should theoretically recover the exact same polynomial and hence
                  compute accurate derivatives for any order. However, due to numerical
                  errors, we get the following results for a 7 points finite differences
                  for abscissae in the [-10, 10] range:
                  &lt;ul&gt;
                  &lt;li&gt;step size = 0.25, second order derivative error about 9.97e-10&lt;/li&gt;
                  &lt;li&gt;step size = 0.25, fourth order derivative error about 5.43e-8&lt;/li&gt;
                  &lt;li&gt;step size = 1.0e-6, second order derivative error about 148&lt;/li&gt;
                  &lt;li&gt;step size = 1.0e-6, fourth order derivative error about 6.35e+14&lt;/li&gt;
                  &lt;/ul&gt;
                  This example shows that the small step size is really bad, even simply
                  for second order derivative!
                  &lt;/p&gt;                
                <version>
                    $Id: FiniteDifferencesDifferentiator.java 1420666 2012-12-12 13:33:20Z erans $                    
                </version>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="51"/>
            <javadoc line="51">
                Serializable UID.                
            </javadoc>
            <declaration name="nbPoints" type="int" line="55"/>
            <javadoc line="55">
                Number of points to use.                
            </javadoc>
            <declaration name="stepSize" type="double" line="59"/>
            <javadoc line="59">
                Step size.                
            </javadoc>
            <declaration name="halfSampleSpan" type="double" line="63"/>
            <javadoc line="63">
                Half sample span.                
            </javadoc>
            <declaration name="tMin" type="double" line="67"/>
            <javadoc line="67">
                Lower bound for independent variable.                
            </javadoc>
            <declaration name="tMax" type="double" line="71"/>
            <javadoc line="71">
                Upper bound for independent variable.                
            </javadoc>
            <javadoc line="75">
                Build a differentiator with number of points and step size when independent variable is unbounded.
                  &lt;p&gt;
                  Beware that wrong settings for the finite differences differentiator
                  can lead to highly unstable and inaccurate results, especially for
                  high derivation orders. Using very small step sizes is often a
                  &lt;em&gt;bad&lt;/em&gt; idea.
                  &lt;/p&gt;                
                <param>
                    nbPoints number of points to use                    
                </param>
                <param>
                    stepSize step size (gap between each point)                    
                </param>
                <exception>
                    NotPositiveException if {@code stepsize <= 0} (note that{@link NotPositiveException} extends {@link NumberIsTooSmallException})                    
                </exception>
                <exception>
                    NumberIsTooSmallException {@code nbPoint <= 1}                    
                </exception>
            </javadoc>
            <method name="FiniteDifferencesDifferentiator" type="constructor" line="88">
                <params>
                    <param name="nbPoints" type="int"/>
                    <param name="stepSize" type="double"/>
                </params>
            </method>
            <javadoc line="91">
                Build a differentiator with number of points and step size when independent variable is bounded.
                  &lt;p&gt;
                  When the independent variable is bounded (tLower &amp;lt; t &amp;lt; tUpper), the sampling
                  points used for differentiation will be adapted to ensure the constraint holds
                  even near the boundaries. This means the sample will not be centered anymore in
                  these cases. At an extreme case, computing derivatives exactly at the lower bound
                  will lead the sample to be entirely on the right side of the derivation point.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Note that the boundaries are considered to be excluded for function evaluation.
                  &lt;/p&gt;
                  &lt;p&gt;
                  Beware that wrong settings for the finite differences differentiator
                  can lead to highly unstable and inaccurate results, especially for
                  high derivation orders. Using very small step sizes is often a
                  &lt;em&gt;bad&lt;/em&gt; idea.
                  &lt;/p&gt;                
                <param>
                    nbPoints number of points to use                    
                </param>
                <param>
                    stepSize step size (gap between each point)                    
                </param>
                <param>
                    tLower lower bound for independent variable (may be {@code Double.NEGATIVE_INFINITY}if there are no lower bounds)                    
                </param>
                <param>
                    tUpper upper bound for independent variable (may be {@code Double.POSITIVE_INFINITY}if there are no upper bounds)                    
                </param>
                <exception>
                    NotPositiveException if {@code stepsize <= 0} (note that{@link NotPositiveException} extends {@link NumberIsTooSmallException})                    
                </exception>
                <exception>
                    NumberIsTooSmallException {@code nbPoint <= 1}                    
                </exception>
                <exception>
                    NumberIsTooLargeException {@code stepSize  (nbPoints - 1) >= tUpper - tLower}                    
                </exception>
            </javadoc>
            <method name="FiniteDifferencesDifferentiator" type="constructor" line="117">
                <params>
                    <param name="nbPoints" type="int"/>
                    <param name="stepSize" type="double"/>
                    <param name="tLower" type="double"/>
                    <param name="tUpper" type="double"/>
                </params>
                <scope line="118"/>
                <scope line="122"/>
                <scope line="127"/>
                <declaration name="safety" type="double" line="130"/>
            </method>
            <javadoc line="134">
                Get the number of points to use.                
                <return>
                    number of points to use                    
                </return>
            </javadoc>
            <method name="getNbPoints" type="int" line="138"/>
            <javadoc line="141">
                Get the step size.                
                <return>
                    step size                    
                </return>
            </javadoc>
            <method name="getStepSize" type="double" line="145"/>
            <javadoc line="148">
                Evaluate derivatives from a sample.
                  &lt;p&gt;
                  Evaluation is done using divided differences.
                  &lt;/p&gt;                
                <param>
                    t evaluation abscissa value and derivatives                    
                </param>
                <param>
                    t0 first sample point abscissa                    
                </param>
                <param>
                    y function values sample {@code y[i] = f(t[i]) = f(t0 + i  stepSize)}                    
                </param>
                <return>
                    value and derivatives at {@code t}                    
                </return>
                <exception>
                    NumberIsTooLargeException if the requested derivation order
                      is larger or equal to the number of points                    
                </exception>
            </javadoc>
            <method name="evaluate" type="DerivativeStructure" line="160">
                <params>
                    <param name="t" type="DerivativeStructure"/>
                    <param name="t0" type="double"/>
                    <param name="y" type="double[]"/>
                </params>
                <declaration name="top" type="double[]" line="161"/>
                <declaration name="bottom" type="double[]" line="162"/>
                <scope line="163">
                    <scope line="165"/>
                </scope>
                <declaration name="order" type="int" line="170"/>
                <declaration name="parameters" type="int" line="171"/>
                <declaration name="derivatives" type="double[]" line="172"/>
                <declaration name="dt0" type="double" line="173"/>
                <declaration name="interpolation" type="DerivativeStructure" line="174"/>
                <declaration name="monomial" type="DerivativeStructure" line="175"/>
                <scope line="176">
                    <scope line="177"/>
                    <scope line="180">
                        <declaration name="deltaX" type="DerivativeStructure" line="182"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="189">
                {@inheritDoc}&lt;p&gt;The returned object cannot compute derivatives to arbitrary orders. The
                  value function will throw a {@link NumberIsTooLargeException} if the requested
                  derivation order is larger or equal to the number of points.
                  &lt;/p&gt;                
            </javadoc>
            <method name="differentiate" type="UnivariateDifferentiableFunction" line="195">
                <params>
                    <param name="function" type="UnivariateFunction"/>
                </params>
                <anonymous_class line="196">
                    <javadoc line="197">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="value" type="double" line="200">
                        <params>
                            <param name="x" type="double"/>
                        </params>
                    </method>
                    <javadoc line="203">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="value" type="DerivativeStructure" line="206">
                        <params>
                            <param name="t" type="DerivativeStructure"/>
                        </params>
                        <scope line="207"/>
                        <declaration name="t0" type="double" line="210"/>
                        <declaration name="y" type="double[]" line="211"/>
                        <scope line="212"/>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="220">
                {@inheritDoc}&lt;p&gt;The returned object cannot compute derivatives to arbitrary orders. The
                  value function will throw a {@link NumberIsTooLargeException} if the requested
                  derivation order is larger or equal to the number of points.
                  &lt;/p&gt;                
            </javadoc>
            <method name="differentiate" type="UnivariateDifferentiableVectorFunction" line="226">
                <params>
                    <param name="function" type="UnivariateVectorFunction"/>
                </params>
                <anonymous_class line="227">
                    <javadoc line="228">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="value" type="double[]" line="231">
                        <params>
                            <param name="x" type="double"/>
                        </params>
                    </method>
                    <javadoc line="234">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="value" type="DerivativeStructure[]" line="237">
                        <params>
                            <param name="t" type="DerivativeStructure"/>
                        </params>
                        <scope line="238"/>
                        <declaration name="t0" type="double" line="241"/>
                        <declaration name="y" type="double[][]" line="242"/>
                        <scope line="243">
                            <declaration name="v" type="double[]" line="244"/>
                            <scope line="245"/>
                            <scope line="248"/>
                        </scope>
                        <declaration name="value" type="DerivativeStructure[]" line="252"/>
                        <scope line="253"/>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="261">
                {@inheritDoc}&lt;p&gt;The returned object cannot compute derivatives to arbitrary orders. The
                  value function will throw a {@link NumberIsTooLargeException} if the requested
                  derivation order is larger or equal to the number of points.
                  &lt;/p&gt;                
            </javadoc>
            <method name="differentiate" type="UnivariateDifferentiableMatrixFunction" line="267">
                <params>
                    <param name="function" type="UnivariateMatrixFunction"/>
                </params>
                <anonymous_class line="268">
                    <javadoc line="269">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="value" type="double[][]" line="272">
                        <params>
                            <param name="x" type="double"/>
                        </params>
                    </method>
                    <javadoc line="275">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="value" type="DerivativeStructure[][]" line="278">
                        <params>
                            <param name="t" type="DerivativeStructure"/>
                        </params>
                        <scope line="279"/>
                        <declaration name="t0" type="double" line="282"/>
                        <declaration name="y" type="double[][][]" line="283"/>
                        <scope line="284">
                            <declaration name="v" type="double[][]" line="285"/>
                            <scope line="286"/>
                            <scope line="289">
                                <scope line="290"/>
                            </scope>
                        </scope>
                        <declaration name="value" type="DerivativeStructure[][]" line="295"/>
                        <scope line="296">
                            <scope line="297"/>
                        </scope>
                    </method>
                </anonymous_class>
            </method>
        </class>
    </source>