<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optim.linear">
        <import package="java.util.Collection"/>
        <import package="java.util.Collections"/>
        <import package="org.apache.commons.math3.exception.TooManyIterationsException"/>
        <import package="org.apache.commons.math3.optim.OptimizationData"/>
        <import package="org.apache.commons.math3.optim.PointValuePair"/>
        <import package="org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer"/>
        <class name="LinearOptimizer" line="8">
            <extends class="MultivariateOptimizer"/>
            <javadoc line="8">
                Base class for implementing linear optimizers.                
                <version>
                    $Id: LinearOptimizer.java 1443444 2013-02-07 12:41:36Z erans $                    
                </version>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <declaration name="function" type="LinearObjectiveFunction" line="14"/>
            <javadoc line="14">
                Linear objective function.                
            </javadoc>
            <declaration name="linearConstraints" type="Collection&lt;LinearConstraint&gt;" line="18"/>
            <javadoc line="18">
                Linear constraints.                
            </javadoc>
            <declaration name="nonNegative" type="boolean" line="22"/>
            <javadoc line="22">
                Whether to restrict the variables to non-negative values.                
            </javadoc>
            <javadoc line="26">
                Simple constructor with default settings.                
            </javadoc>
            <method name="LinearOptimizer" type="constructor" line="29"/>
            <javadoc line="32">
                @return {@code true} if the variables are restricted to non-negative values.                
            </javadoc>
            <method name="isRestrictedToNonNegative" type="boolean" line="35"/>
            <javadoc line="38">
                @return the optimization type.                
            </javadoc>
            <method name="getFunction" type="LinearObjectiveFunction" line="41"/>
            <javadoc line="44">
                @return the optimization type.                
            </javadoc>
            <method name="getConstraints" type="Collection<LinearConstraint>" line="47"/>
            <javadoc line="50">
                {@inheritDoc}                
                <param>
                    optData Optimization data. In addition to those documented in{@link MultivariateOptimizer#parseOptimizationData(OptimizationData[])MultivariateOptimizer}, this method will register the following data:
                      <ul>
                      <li>{@link LinearObjectiveFunction}</li>
                      <li>{@link LinearConstraintSet}</li>
                      <li>{@link NonNegativeConstraint}</li>
                      </ul>                    
                </param>
                <return>
                    {@inheritDoc}                    
                </return>
                <throws>
                    TooManyIterationsException if the maximal number of
                      iterations is exceeded.                    
                </throws>
            </javadoc>
            <method name="optimize" type="PointValuePair" line="62">
                <params>
                    <param name="optData" type="OptimizationData"/>
                </params>
            </method>
            <javadoc line="65">
                Scans the list of (required and optional) optimization data that
                  characterize the problem.                
                <param>
                    optData Optimization data.
                      The following data will be looked for:
                      <ul>
                      <li>{@link LinearObjectiveFunction}</li>
                      <li>{@link LinearConstraintSet}</li>
                      <li>{@link NonNegativeConstraint}</li>
                      </ul>                    
                </param>
            </javadoc>
            <method name="parseOptimizationData" type="void" line="76">
                <params>
                    <param name="optData" type="OptimizationData"/>
                </params>
                <scope line="78">
                    <scope line="79"/>
                    <scope line="83"/>
                    <scope line="87"/>
                </scope>
            </method>
        </class>
    </source>