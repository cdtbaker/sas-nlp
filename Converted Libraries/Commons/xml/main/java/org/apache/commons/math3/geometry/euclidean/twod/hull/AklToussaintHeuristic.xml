<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.geometry.euclidean.twod.hull">
        <import package="java.util.ArrayList"/>
        <import package="java.util.Collection"/>
        <import package="java.util.List"/>
        <import package="org.apache.commons.math3.geometry.euclidean.twod.Vector2D"/>
        <class name="AklToussaintHeuristic" line="25">
            <javadoc line="25">
                A simple heuristic to improve the performance of convex hull algorithms.
                  &lt;p&gt;
                  The heuristic is based on the idea of a convex quadrilateral, which is formed by
                  four points with the lowest and highest x / y coordinates. Any point that lies inside
                  this quadrilateral can not be part of the convex hull and can thus be safely discarded
                  before generating the convex hull itself.
                  &lt;p&gt;
                  The complexity of the operation is O(n), and may greatly improve the time it takes to
                  construct the convex hull afterwards, depending on the point distribution.                
                <see>
                    &lt;a href=&quot;http://en.wikipedia.org/wiki/Convex_hull_algorithms#Akl-Toussaint_heuristic&quot;&gt;
                      Akl-Toussaint heuristic (Wikipedia)&lt;/a&gt;                    
                </see>
                <since>
                    3.3                    
                </since>
                <version>
                    $Id: AklToussaintHeuristic.java 1563687 2014-02-02 17:56:13Z tn $                    
                </version>
            </javadoc>
            <javadoc line="43">
                Hide utility constructor.                
            </javadoc>
            <method name="AklToussaintHeuristic" type="constructor" line="44"/>
            <javadoc line="47">
                Returns a point set that is reduced by all points for which it is safe to assume
                  that they are not part of the convex hull.                
                <param>
                    points the original point set                    
                </param>
                <return>
                    a reduced point set, useful as input for convex hull algorithms                    
                </return>
            </javadoc>
            <method name="reducePoints" type="Collection&lt;Vector2D&gt;" line="54">
                <params>
                    <param name="points" type="Collection&lt;Vector2D&gt;"/>
                </params>
                <comment line="57">
                    find the leftmost point                    
                </comment>
                <comment line="84">
                    if the quadrilateral is not well formed, e.g. only 2 points, do not attempt to reduce                    
                </comment>
                <comment line="91">
                    check all points if they are within the quadrilateral
                     in which case they can not be part of the convex hull                    
                </comment>
                <declaration name="size" type="int" line="57"/>
                <declaration name="minX" type="Vector2D" line="58"/>
                <declaration name="maxX" type="Vector2D" line="59"/>
                <declaration name="minY" type="Vector2D" line="60"/>
                <declaration name="maxY" type="Vector2D" line="61"/>
                <scope line="62">
                    <scope line="63"/>
                    <scope line="66"/>
                    <scope line="69"/>
                    <scope line="72"/>
                </scope>
                <scope line="78"/>
                <declaration name="quadrilateral" type="List&amp;lt;Vector2D&amp;gt;" line="82"/>
                <scope line="84"/>
                <declaration name="reducedPoints" type="List&amp;lt;Vector2D&amp;gt;" line="88"/>
                <scope line="89">
                    <scope line="92"/>
                </scope>
            </method>
            <javadoc line="100">
                Build the convex quadrilateral with the found corner points (with min/max x/y coordinates).                
                <param>
                    points the respective points with min/max x/y coordinate                    
                </param>
                <return>
                    the quadrilateral                    
                </return>
            </javadoc>
            <method name="buildQuadrilateral" type="List&lt;Vector2D&gt;" line="106">
                <params>
                    <param name="points" type="Vector2D"/>
                </params>
                <declaration name="quadrilateral" type="List&amp;lt;Vector2D&amp;gt;" line="107"/>
                <scope line="108">
                    <scope line="109"/>
                </scope>
            </method>
            <javadoc line="116">
                Checks if the given point is located within the convex quadrilateral.                
                <param>
                    point the point to check                    
                </param>
                <param>
                    quadrilateralPoints the convex quadrilateral, represented by 4 points                    
                </param>
                <return>
                    {@code true} if the point is inside the quadrilateral, {@code false} otherwise                    
                </return>
            </javadoc>
            <method name="insideQuadrilateral" type="boolean" line="123">
                <params>
                    <param name="point" type="Vector2D"/>
                    <param name="quadrilateralPoints" type="List&lt;Vector2D&gt;"/>
                </params>
                <comment line="133">
                    get the location of the point relative to the first two vertices                    
                </comment>
                <comment line="136">
                    loop through the rest of the vertices                    
                </comment>
                <comment line="145">
                    do side of line test: multiply the last location with this location
                     if they are the same sign then the operation will yield a positive result
                     -x * -y = +xy, x * y = +xy, -x * y = -xy, x * -y = -xy                    
                </comment>
                <declaration name="p1" type="Vector2D" line="125"/>
                <declaration name="p2" type="Vector2D" line="126"/>
                <scope line="128"/>
                <declaration name="last" type="double" line="133"/>
                <declaration name="size" type="int" line="134"/>
                <scope line="136">
                    <scope line="140"/>
                    <scope line="147"/>
                </scope>
            </method>
        </class>
    </source>