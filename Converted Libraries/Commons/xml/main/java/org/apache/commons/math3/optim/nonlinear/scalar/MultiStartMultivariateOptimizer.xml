<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optim.nonlinear.scalar">
        <import package="java.util.Collections"/>
        <import package="java.util.List"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Comparator"/>
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.random.RandomVectorGenerator"/>
        <import package="org.apache.commons.math3.optim.BaseMultiStartMultivariateOptimizer"/>
        <import package="org.apache.commons.math3.optim.PointValuePair"/>
        <class name="MultiStartMultivariateOptimizer" line="11">
            <extends class="BaseMultiStartMultivariateOptimizer">
                <type_params>
                    <type_param name="PointValuePair"/>
                </type_params>
            </extends>
            <javadoc line="11">
                Multi-start optimizer.
                  This class wraps an optimizer in order to use it several times in
                  turn with different starting points (trying to avoid being trapped
                  in a local extremum when looking for a global one).                
                <version>
                    $Id: MultiStartMultivariateOptimizer.java 1435539 2013-01-19 13:27:24Z tn $                    
                </version>
                <since>
                    3.0                    
                </since>
            </javadoc>
            <declaration name="optimizer" type="MultivariateOptimizer" line="20"/>
            <javadoc line="20">
                Underlying optimizer.                
            </javadoc>
            <declaration name="optima" type="List&lt;PointValuePair&gt;" line="24"/>
            <javadoc line="24">
                Found optima.                
            </javadoc>
            <javadoc line="28">
                Create a multi-start optimizer from a single-start optimizer.                
                <param>
                    optimizer Single-start optimizer to wrap.                    
                </param>
                <param>
                    starts Number of starts to perform.
                      If {@code starts == 1}, the result will be same as if {@code optimizer}is called directly.                    
                </param>
                <param>
                    generator Random vector generator to use for restarts.                    
                </param>
                <throws>
                    NullArgumentException if {@code optimizer} or {@code generator}is {@code null}.                    
                </throws>
                <throws>
                    NotStrictlyPositiveException if {@code starts < 1}.                    
                </throws>
            </javadoc>
            <method name="MultiStartMultivariateOptimizer" type="constructor" line="37">
                <params>
                    <param name="optimizer" type="MultivariateOptimizer"/>
                    <param name="starts" type="int"/>
                    <param name="generator" type="RandomVectorGenerator"/>
                </params>
            </method>
            <javadoc line="41">
                {@inheritDoc}                
            </javadoc>
            <method name="getOptima" type="PointValuePair[]" line="44"/>
            <javadoc line="48">
                {@inheritDoc}                
            </javadoc>
            <method name="store" type="void" line="51">
                <params>
                    <param name="optimum" type="PointValuePair"/>
                </params>
            </method>
            <javadoc line="54">
                {@inheritDoc}                
            </javadoc>
            <method name="clear" type="void" line="57"/>
            <javadoc line="60">
                @return a comparator for sorting the optima.                
            </javadoc>
            <method name="getPairComparator" type="Comparator<PointValuePair>" line="63">
                <anonymous_class line="64">
                    <method name="compare" type="int" line="65">
                        <params>
                            <param name="o1" type="PointValuePair"/>
                            <param name="o2" type="PointValuePair"/>
                        </params>
                        <scope line="66"/>
                        <scope line="69"/>
                        <declaration name="v1" type="double" line="72"/>
                        <declaration name="v2" type="double" line="73"/>
                    </method>
                </anonymous_class>
            </method>
        </class>
    </source>