<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.distribution">
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.random.RandomGenerator"/>
        <import package="org.apache.commons.math3.special.Erf"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="LevyDistribution" line="24">
            <extends class="AbstractRealDistribution"/>
            <comment line="41">
                Setting this to 1 returns a cumProb of 1.0                
            </comment>
            <javadoc line="24">
                This class implements the &lt;a href=&quot;http://en.wikipedia.org/wiki/L%C3%A9vy_distribution&quot;&gt;
                  L&amp;eacute;vy distribution&lt;/a&gt;.                
                <version>
                    $Id: LevyDistribution.java 1533974 2013-10-20 20:42:41Z psteitz $                    
                </version>
                <since>
                    3.2                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="33"/>
            <javadoc line="33">
                Serializable UID.                
            </javadoc>
            <declaration name="mu" type="double" line="36"/>
            <javadoc line="36">
                Location parameter.                
            </javadoc>
            <declaration name="c" type="double" line="39"/>
            <javadoc line="39">
                Scale parameter.                
            </javadoc>
            <declaration name="halfC" type="double" line="42"/>
            <javadoc line="42">
                Half of c (for calculations).                
            </javadoc>
            <javadoc line="45">
                Creates a LevyDistribution.                
                <param>
                    rng random generator to be used for sampling                    
                </param>
                <param>
                    mu location                    
                </param>
                <param>
                    c scale parameter                    
                </param>
            </javadoc>
            <method name="LevyDistribution" type="constructor" line="51">
                <params>
                    <param name="rng" type="RandomGenerator"/>
                    <param name="mu" type="double"/>
                    <param name="c" type="double"/>
                </params>
            </method>
            <javadoc line="58">
                {@inheritDoc}&lt;p&gt;
                  From Wikipedia: The probability density function of the L&amp;eacute;vy distribution
                  over the domain is
                  &lt;/p&gt;
                  &lt;pre&gt;
                  f(x; &amp;mu;, c) = &amp;radic;(c / 2&amp;pi;)  e&lt;sup&gt;-c / 2 (x - &amp;mu;)&lt;/sup&gt; / (x - &amp;mu;)&lt;sup&gt;3/2&lt;/sup&gt;
                  &lt;/pre&gt;
                  &lt;p&gt;
                  For this distribution, {@code X}, this method returns {@code P(X &lt; x)}.
                  If {@code x} is less than location parameter &amp;mu;, {@code Double.NaN} is
                  returned, as in these cases the distribution is not defined.
                  &lt;/p&gt;                
            </javadoc>
            <method name="density" type="double" line="72">
                <params>
                    <param name="x" type="double"/>
                </params>
                <scope line="73"/>
                <declaration name="delta" type="double" line="77"/>
                <declaration name="f" type="double" line="78"/>
            </method>
            <javadoc line="82">
                {@inheritDoc}See documentation of {@link #density(double)} for computation details.                
            </javadoc>
            <method name="logDensity" type="double" line="87">
                <params>
                    <param name="x" type="double"/>
                </params>
                <scope line="88"/>
                <declaration name="delta" type="double" line="92"/>
                <declaration name="f" type="double" line="93"/>
            </method>
            <javadoc line="97">
                {@inheritDoc}&lt;p&gt;
                  From Wikipedia: the cumulative distribution function is
                  &lt;/p&gt;
                  &lt;pre&gt;
                  f(x; u, c) = erfc (&amp;radic; (c / 2 (x - u )))
                  &lt;/pre&gt;                
            </javadoc>
            <method name="cumulativeProbability" type="double" line="105">
                <params>
                    <param name="x" type="double"/>
                </params>
                <scope line="106"/>
            </method>
            <javadoc line="112">
                {@inheritDoc}                
            </javadoc>
            <method name="inverseCumulativeProbability" type="double" line="114">
                <params>
                    <param name="p" type="double"/>
                </params>
                <scope line="115"/>
                <declaration name="t" type="double" line="118"/>
            </method>
            <javadoc line="122">
                Get the scale parameter of the distribution.                
                <return>
                    scale parameter of the distribution                    
                </return>
            </javadoc>
            <method name="getScale" type="double" line="125"/>
            <javadoc line="129">
                Get the location parameter of the distribution.                
                <return>
                    location parameter of the distribution                    
                </return>
            </javadoc>
            <method name="getLocation" type="double" line="132"/>
            <javadoc line="136">
                {@inheritDoc}                
            </javadoc>
            <method name="getNumericalMean" type="double" line="137"/>
            <javadoc line="141">
                {@inheritDoc}                
            </javadoc>
            <method name="getNumericalVariance" type="double" line="142"/>
            <javadoc line="146">
                {@inheritDoc}                
            </javadoc>
            <method name="getSupportLowerBound" type="double" line="147"/>
            <javadoc line="151">
                {@inheritDoc}                
            </javadoc>
            <method name="getSupportUpperBound" type="double" line="152"/>
            <javadoc line="156">
                {@inheritDoc}                
            </javadoc>
            <method name="isSupportLowerBoundInclusive" type="boolean" line="157">
                <comment line="159">
                    there is a division by x-mu in the computation, so density
                     is not finite at lower bound, bound must be excluded                    
                </comment>
            </method>
            <javadoc line="163">
                {@inheritDoc}                
            </javadoc>
            <method name="isSupportUpperBoundInclusive" type="boolean" line="164">
                <comment line="166">
                    upper bound is infinite, so it must be excluded                    
                </comment>
            </method>
            <javadoc line="169">
                {@inheritDoc}                
            </javadoc>
            <method name="isSupportConnected" type="boolean" line="170"/>
        </class>
    </source>