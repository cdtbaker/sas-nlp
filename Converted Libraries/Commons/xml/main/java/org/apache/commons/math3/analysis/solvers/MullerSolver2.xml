<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.solvers">
        <import package="org.apache.commons.math3.exception.NoBracketingException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <import package="org.apache.commons.math3.exception.TooManyEvaluationsException"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="MullerSolver2" line="24">
            <extends class="AbstractUnivariateSolver"/>
            <javadoc line="24">
                This class implements the &lt;a href=&quot;http://mathworld.wolfram.com/MullersMethod.html&quot;&gt;
                  Muller&apos;s Method&lt;/a&gt; for root finding of real univariate functions. For
                  reference, see &lt;b&gt;Elementary Numerical Analysis&lt;/b&gt;, ISBN 0070124477,
                  chapter 3.
                  &lt;p&gt;
                  Muller&apos;s method applies to both real and complex functions, but here we
                  restrict ourselves to real functions.
                  This class differs from {@link MullerSolver} in the way it avoids complex
                  operations.&lt;/p&gt;
                  Except for the initial [min, max], it does not require bracketing
                  condition, e.g. f(x0), f(x1), f(x2) can have the same sign. If complex
                  number arises in the computation, we simply use its modulus as real
                  approximation.&lt;/p&gt;
                  &lt;p&gt;
                  Because the interval may not be bracketing, bisection alternative is
                  not applicable here. However in practice our treatment usually works
                  well, especially near real zeroes where the imaginary part of complex
                  approximation is often negligible.&lt;/p&gt;
                  &lt;p&gt;
                  The formulas here do not use divided differences directly.&lt;/p&gt;                
                <version>
                    $Id: MullerSolver2.java 1379560 2012-08-31 19:40:30Z erans $                    
                </version>
                <since>
                    1.2                    
                </since>
                <see>
                    MullerSolver                    
                </see>
            </javadoc>
            <declaration name="DEFAULT_ABSOLUTE_ACCURACY" type="double" line="52"/>
            <javadoc line="52">
                Default absolute accuracy.                
            </javadoc>
            <javadoc line="55">
                Construct a solver with default accuracy (1e-6).                
            </javadoc>
            <method name="MullerSolver2" type="constructor" line="58"/>
            <javadoc line="61">
                Construct a solver.                
                <param>
                    absoluteAccuracy Absolute accuracy.                    
                </param>
            </javadoc>
            <method name="MullerSolver2" type="constructor" line="66">
                <params>
                    <param name="absoluteAccuracy" type="double"/>
                </params>
            </method>
            <javadoc line="69">
                Construct a solver.                
                <param>
                    relativeAccuracy Relative accuracy.                    
                </param>
                <param>
                    absoluteAccuracy Absolute accuracy.                    
                </param>
            </javadoc>
            <method name="MullerSolver2" type="constructor" line="76">
                <params>
                    <param name="relativeAccuracy" type="double"/>
                    <param name="absoluteAccuracy" type="double"/>
                </params>
            </method>
            <javadoc line="80">
                {@inheritDoc}                
            </javadoc>
            <method name="doSolve" type="double" line="87">
                <comment line="97">
                    x2 is the last root approximation                    
                </comment>
                <comment line="98">
                    x is the new approximation and new x2 for next round                    
                </comment>
                <comment line="99">
                    x0 &lt; x1 &lt; x2 does not hold here                    
                </comment>
                <comment line="121">
                    quadratic interpolation through x0, x1, x2                    
                </comment>
                <comment line="130">
                    choose a denominator larger in magnitude                    
                </comment>
                <comment line="135">
                    take the modulus of (B +/- FastMath.sqrt(delta))                    
                </comment>
                <comment line="140">
                    perturb x if it exactly coincides with x1 or x2                    
                </comment>
                <comment line="141">
                    the equality tests here are intentional                    
                </comment>
                <comment line="146">
                    extremely rare case, get a random number to skip it                    
                </comment>
                <comment line="152">
                    check for convergence                    
                </comment>
                <comment line="159">
                    prepare the next iteration                    
                </comment>
                <declaration name="min" type="double" line="88"/>
                <declaration name="max" type="double" line="89"/>
                <declaration name="relativeAccuracy" type="double" line="93"/>
                <declaration name="absoluteAccuracy" type="double" line="94"/>
                <declaration name="functionValueAccuracy" type="double" line="95"/>
                <declaration name="x0" type="double" line="101"/>
                <declaration name="y0" type="double" line="102"/>
                <scope line="103"/>
                <declaration name="x1" type="double" line="106"/>
                <declaration name="y1" type="double" line="107"/>
                <scope line="108"/>
                <scope line="112"/>
                <declaration name="x2" type="double" line="116"/>
                <declaration name="y2" type="double" line="117"/>
                <declaration name="oldx" type="double" line="119"/>
                <scope line="120">
                    <declaration name="q" type="double" line="122"/>
                    <declaration name="a" type="double" line="123"/>
                    <declaration name="b" type="double" line="124"/>
                    <declaration name="c" type="double" line="125"/>
                    <declaration name="delta" type="double" line="126"/>
                    <declaration name="x" type="double" line="127"/>
                    <declaration name="denominator" type="double" line="128"/>
                    <scope line="129">
                        <declaration name="dplus" type="double" line="131"/>
                        <declaration name="dminus" type="double" line="132"/>
                    </scope>
                    <scope line="134"/>
                    <scope line="138">
                        <scope line="142"/>
                    </scope>
                    <scope line="145"/>
                    <declaration name="y" type="double" line="150"/>
                    <declaration name="tolerance" type="double" line="153"/>
                    <scope line="155"/>
                </scope>
            </method>
        </class>
    </source>