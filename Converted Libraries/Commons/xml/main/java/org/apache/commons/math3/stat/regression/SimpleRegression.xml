<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.stat.regression">
        <import package="java.io.Serializable"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.distribution.TDistribution"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.NoDataException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.Precision"/>
        <class name="SimpleRegression" line="10">
            <implements interface="Serializable"/>
            <implements interface="UpdatingMultipleLinearRegression"/>
            <javadoc line="10">
                Estimates an ordinary least squares regression model
                  with one independent variable.
                  &lt;p&gt;
                  &lt;code&gt; y = intercept + slope  x  &lt;/code&gt;&lt;/p&gt;
                  &lt;p&gt;
                  Standard errors for &lt;code&gt;intercept&lt;/code&gt; and &lt;code&gt;slope&lt;/code&gt; are
                  available as well as ANOVA, r-square and Pearson&apos;s r statistics.&lt;/p&gt;
                  &lt;p&gt;
                  Observations (x,y pairs) can be added to the model one at a time or they
                  can be provided in a 2-dimensional array.  The observations are not stored
                  in memory, so there is no limit to the number of observations that can be
                  added to the model.&lt;/p&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Usage Notes&lt;/strong&gt;: &lt;ul&gt;
                  &lt;li&gt; When there are fewer than two observations in the model, or when
                  there is no variation in the x values (i.e. all x values are the same)
                  all statistics return &lt;code&gt;NaN&lt;/code&gt;. At least two observations with
                  different x coordinates are required to estimate a bivariate regression
                  model.
                  &lt;/li&gt;
                  &lt;li&gt; Getters for the statistics always compute values based on the current
                  set of observations -- i.e., you can get statistics, then add more data
                  and get updated statistics without using a new instance.  There is no
                  &quot;compute&quot; method that updates all statistics.  Each of the getters performs
                  the necessary computations to return the requested statistic.
                  &lt;/li&gt;
                  &lt;li&gt; The intercept term may be suppressed by passing {@code false} to
                  the {@link #SimpleRegression(boolean)} constructor.  When the{@code hasIntercept} property is false, the model is estimated without a
                  constant term and {@link #getIntercept()} returns {@code 0}.&lt;/li&gt;
                  &lt;/ul&gt;&lt;/p&gt;                
                <version>
                    $Id: SimpleRegression.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="44"/>
            <javadoc line="44">
                Serializable version identifier                
            </javadoc>
            <declaration name="sumX" type="double" line="48"/>
            <javadoc line="48">
                sum of x values                
            </javadoc>
            <declaration name="sumXX" type="double" line="52"/>
            <javadoc line="52">
                total variation in x (sum of squared deviations from xbar)                
            </javadoc>
            <declaration name="sumY" type="double" line="56"/>
            <javadoc line="56">
                sum of y values                
            </javadoc>
            <declaration name="sumYY" type="double" line="60"/>
            <javadoc line="60">
                total variation in y (sum of squared deviations from ybar)                
            </javadoc>
            <declaration name="sumXY" type="double" line="64"/>
            <javadoc line="64">
                sum of products                
            </javadoc>
            <declaration name="n" type="long" line="68"/>
            <javadoc line="68">
                number of observations                
            </javadoc>
            <declaration name="xbar" type="double" line="72"/>
            <javadoc line="72">
                mean of accumulated x values, used in updating formulas                
            </javadoc>
            <declaration name="ybar" type="double" line="76"/>
            <javadoc line="76">
                mean of accumulated y values, used in updating formulas                
            </javadoc>
            <declaration name="hasIntercept" type="boolean" line="80"/>
            <javadoc line="80">
                include an intercept or not                
            </javadoc>
            <javadoc line="84">
                Create an empty SimpleRegression instance                
            </javadoc>
            <method name="SimpleRegression" type="constructor" line="87"/>
            <javadoc line="90">
                Create a SimpleRegression instance, specifying whether or not to estimate
                  an intercept.
                  &lt;p&gt;Use {@code false} to estimate a model with no intercept.  When the{@code hasIntercept} property is false, the model is estimated without a
                  constant term and {@link #getIntercept()} returns {@code 0}.&lt;/p&gt;                
                <param>
                    includeIntercept whether or not to include an intercept term in
                      the regression model                    
                </param>
            </javadoc>
            <method name="SimpleRegression" type="constructor" line="98">
                <params>
                    <param name="includeIntercept" type="boolean"/>
                </params>
            </method>
            <javadoc line="102">
                Adds the observation (x,y) to the regression data set.
                  &lt;p&gt;
                  Uses updating formulas for means and sums of squares defined in
                  &quot;Algorithms for Computing the Sample Variance: Analysis and
                  Recommendations&quot;, Chan, T.F., Golub, G.H., and LeVeque, R.J.
                  1983, American Statistician, vol. 37, pp. 242-247, referenced in
                  Weisberg, S. &quot;Applied Linear Regression&quot;. 2nd Ed. 1985.&lt;/p&gt;                
                <param>
                    x independent variable value                    
                </param>
                <param>
                    y dependent variable value                    
                </param>
            </javadoc>
            <method name="addData" type="void" line="113">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
                <scope line="114"/>
                <scope line="118">
                    <scope line="119">
                        <declaration name="fact1" type="double" line="120"/>
                        <declaration name="fact2" type="double" line="121"/>
                        <declaration name="dx" type="double" line="122"/>
                        <declaration name="dy" type="double" line="123"/>
                    </scope>
                </scope>
                <scope line="131"/>
            </method>
            <javadoc line="140">
                Removes the observation (x,y) from the regression data set.
                  &lt;p&gt;
                  Mirrors the addData method.  This method permits the use of
                  SimpleRegression instances in streaming mode where the regression
                  is applied to a sliding &quot;window&quot; of observations, however the caller is
                  responsible for maintaining the set of observations in the window.&lt;/p&gt;
                  The method has no effect if there are no points of data (i.e. n=0)                
                <param>
                    x independent variable value                    
                </param>
                <param>
                    y dependent variable value                    
                </param>
            </javadoc>
            <method name="removeData" type="void" line="151">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
                <scope line="152">
                    <scope line="153">
                        <declaration name="fact1" type="double" line="154"/>
                        <declaration name="fact2" type="double" line="155"/>
                        <declaration name="dx" type="double" line="156"/>
                        <declaration name="dy" type="double" line="157"/>
                    </scope>
                    <scope line="164">
                        <declaration name="fact1" type="double" line="165"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="177">
                Adds the observations represented by the elements in
                  &lt;code&gt;data&lt;/code&gt;.
                  &lt;p&gt;
                  &lt;code&gt;(data[0][0],data[0][1])&lt;/code&gt; will be the first observation, then
                  &lt;code&gt;(data[1][0],data[1][1])&lt;/code&gt;, etc.&lt;/p&gt;
                  &lt;p&gt;
                  This method does not replace data that has already been added.  The
                  observations represented by &lt;code&gt;data&lt;/code&gt; are added to the existing
                  dataset.&lt;/p&gt;
                  &lt;p&gt;
                  To replace all data, use &lt;code&gt;clear()&lt;/code&gt; before adding the new
                  data.&lt;/p&gt;                
                <param>
                    data array of observations to be added                    
                </param>
                <throws>
                    ModelSpecificationException if the length of {@code data[i]} is not
                      greater than or equal to 2                    
                </throws>
            </javadoc>
            <method name="addData" type="void" line="194">
                <params>
                    <param name="data" type="double[][]"/>
                </params>
                <scope line="195">
                    <scope line="196"/>
                </scope>
            </method>
            <javadoc line="202">
                Adds one observation to the regression model.                
                <param>
                    x the independent variables which form the design matrix                    
                </param>
                <param>
                    y the dependent or response variable                    
                </param>
                <throws>
                    ModelSpecificationException if the length of {@code x} does not equal
                      the number of independent variables in the model                    
                </throws>
            </javadoc>
            <method name="addObservation" type="void" line="209">
                <params>
                    <param name="x" type="double[]"/>
                    <param name="y" type="double"/>
                </params>
                <scope line="210"/>
            </method>
            <javadoc line="215">
                Adds a series of observations to the regression model. The lengths of
                  x and y must be the same and x must be rectangular.                
                <param>
                    x a series of observations on the independent variables                    
                </param>
                <param>
                    y a series of observations on the dependent variable
                      The length of x and y must be the same                    
                </param>
                <throws>
                    ModelSpecificationException if {@code x} is not rectangular, does not match
                      the length of {@code y} or does not contain sufficient data to estimate the model                    
                </throws>
            </javadoc>
            <method name="addObservations" type="void" line="224">
                <params>
                    <param name="x" type="double[][]"/>
                    <param name="y" type="double[]"/>
                </params>
                <scope line="225"/>
                <declaration name="obsOk" type="boolean" line="228"/>
                <scope line="229">
                    <scope line="230"/>
                </scope>
                <scope line="234"/>
                <scope line="237"/>
            </method>
            <javadoc line="241">
                Removes observations represented by the elements in &lt;code&gt;data&lt;/code&gt;.
                  &lt;p&gt;
                  If the array is larger than the current n, only the first n elements are
                  processed.  This method permits the use of SimpleRegression instances in
                  streaming mode where the regression is applied to a sliding &quot;window&quot; of
                  observations, however the caller is responsible for maintaining the set
                  of observations in the window.&lt;/p&gt;
                  &lt;p&gt;
                  To remove all data, use &lt;code&gt;clear()&lt;/code&gt;.&lt;/p&gt;                
                <param>
                    data array of observations to be removed                    
                </param>
            </javadoc>
            <method name="removeData" type="void" line="253">
                <params>
                    <param name="data" type="double[][]"/>
                </params>
                <scope line="254"/>
            </method>
            <javadoc line="258">
                Clears all data from the model.                
            </javadoc>
            <method name="clear" type="void" line="261"/>
            <javadoc line="269">
                Returns the number of observations that have been added to the model.                
                <return>
                    n number of observations that have been added.                    
                </return>
            </javadoc>
            <method name="getN" type="long" line="273"/>
            <javadoc line="276">
                Returns the &quot;predicted&quot; &lt;code&gt;y&lt;/code&gt; value associated with the
                  supplied &lt;code&gt;x&lt;/code&gt; value,  based on the data that has been
                  added to the model when this method is activated.
                  &lt;p&gt;
                  &lt;code&gt; predict(x) = intercept + slope  x &lt;/code&gt;&lt;/p&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
                  &lt;li&gt;At least two observations (with at least two different x values)
                  must have been added before invoking this method. If this method is
                  invoked before a model can be estimated, &lt;code&gt;Double,NaN&lt;/code&gt; is
                  returned.
                  &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;                
                <param>
                    x input <code>x</code> value                    
                </param>
                <return>
                    predicted <code>y</code> value                    
                </return>
            </javadoc>
            <method name="predict" type="double" line="292">
                <params>
                    <param name="x" type="double"/>
                </params>
                <declaration name="b1" type="double" line="293"/>
                <scope line="294"/>
            </method>
            <javadoc line="299">
                Returns the intercept of the estimated regression line, if{@link #hasIntercept()} is true; otherwise 0.
                  &lt;p&gt;
                  The least squares estimate of the intercept is computed using the
                  &lt;a href=&quot;http://www.xycoon.com/estimation4.htm&quot;&gt;normal equations&lt;/a&gt;.
                  The intercept is sometimes denoted b0.&lt;/p&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
                  &lt;li&gt;At least two observations (with at least two different x values)
                  must have been added before invoking this method. If this method is
                  invoked before a model can be estimated, &lt;code&gt;Double,NaN&lt;/code&gt; is
                  returned.
                  &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;                
                <return>
                    the intercept of the regression line if the model includes an
                      intercept; 0 otherwise                    
                </return>
                <see>
                    #SimpleRegression(boolean)                    
                </see>
            </javadoc>
            <method name="getIntercept" type="double" line="316"/>
            <javadoc line="319">
                Returns true if the model includes an intercept term.                
                <return>
                    true if the regression includes an intercept; false otherwise                    
                </return>
                <see>
                    #SimpleRegression(boolean)                    
                </see>
            </javadoc>
            <method name="hasIntercept" type="boolean" line="324"/>
            <javadoc line="327">
                Returns the slope of the estimated regression line.
                  &lt;p&gt;
                  The least squares estimate of the slope is computed using the
                  &lt;a href=&quot;http://www.xycoon.com/estimation4.htm&quot;&gt;normal equations&lt;/a&gt;.
                  The slope is sometimes denoted b1.&lt;/p&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
                  &lt;li&gt;At least two observations (with at least two different x values)
                  must have been added before invoking this method. If this method is
                  invoked before a model can be estimated, &lt;code&gt;Double.NaN&lt;/code&gt; is
                  returned.
                  &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;                
                <return>
                    the slope of the regression line                    
                </return>
            </javadoc>
            <method name="getSlope" type="double" line="342">
                <scope line="343"/>
                <scope line="346"/>
            </method>
            <javadoc line="351">
                Returns the &lt;a href=&quot;http://www.xycoon.com/SumOfSquares.htm&quot;&gt;
                  sum of squared errors&lt;/a&gt; (SSE) associated with the regression
                  model.
                  &lt;p&gt;
                  The sum is computed using the computational formula&lt;/p&gt;
                  &lt;p&gt;
                  &lt;code&gt;SSE = SYY - (SXY  SXY / SXX)&lt;/code&gt;&lt;/p&gt;
                  &lt;p&gt;
                  where &lt;code&gt;SYY&lt;/code&gt; is the sum of the squared deviations of the y
                  values about their mean, &lt;code&gt;SXX&lt;/code&gt; is similarly defined and
                  &lt;code&gt;SXY&lt;/code&gt; is the sum of the products of x and y mean deviations.
                  &lt;/p&gt;&lt;p&gt;
                  The sums are accumulated using the updating algorithm referenced in{@link #addData}.&lt;/p&gt;
                  &lt;p&gt;
                  The return value is constrained to be non-negative - i.e., if due to
                  rounding errors the computational formula returns a negative result,
                  0 is returned.&lt;/p&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
                  &lt;li&gt;At least two observations (with at least two different x values)
                  must have been added before invoking this method. If this method is
                  invoked before a model can be estimated, &lt;code&gt;Double,NaN&lt;/code&gt; is
                  returned.
                  &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;                
                <return>
                    sum of squared errors associated with the regression model                    
                </return>
            </javadoc>
            <method name="getSumSquaredErrors" type="double" line="378"/>
            <javadoc line="381">
                Returns the sum of squared deviations of the y values about their mean.
                  &lt;p&gt;
                  This is defined as SSTO
                  &lt;a href=&quot;http://www.xycoon.com/SumOfSquares.htm&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
                  &lt;p&gt;
                  If &lt;code&gt;n &lt; 2&lt;/code&gt;, this returns &lt;code&gt;Double.NaN&lt;/code&gt;.&lt;/p&gt;                
                <return>
                    sum of squared deviations of y values                    
                </return>
            </javadoc>
            <method name="getTotalSumSquares" type="double" line="390">
                <scope line="391"/>
            </method>
            <javadoc line="396">
                Returns the sum of squared deviations of the x values about their mean.
                  If &lt;code&gt;n &lt; 2&lt;/code&gt;, this returns &lt;code&gt;Double.NaN&lt;/code&gt;.&lt;/p&gt;                
                <return>
                    sum of squared deviations of x values                    
                </return>
            </javadoc>
            <method name="getXSumSquares" type="double" line="401">
                <scope line="402"/>
            </method>
            <javadoc line="407">
                Returns the sum of crossproducts, x&lt;sub&gt;i&lt;/sub&gt;y&lt;sub&gt;i&lt;/sub&gt;.                
                <return>
                    sum of cross products                    
                </return>
            </javadoc>
            <method name="getSumOfCrossProducts" type="double" line="411"/>
            <javadoc line="414">
                Returns the sum of squared deviations of the predicted y values about
                  their mean (which equals the mean of y).
                  &lt;p&gt;
                  This is usually abbreviated SSR or SSM.  It is defined as SSM
                  &lt;a href=&quot;http://www.xycoon.com/SumOfSquares.htm&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
                  &lt;li&gt;At least two observations (with at least two different x values)
                  must have been added before invoking this method. If this method is
                  invoked before a model can be estimated, &lt;code&gt;Double.NaN&lt;/code&gt; is
                  returned.
                  &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;                
                <return>
                    sum of squared deviations of predicted y values                    
                </return>
            </javadoc>
            <method name="getRegressionSumSquares" type="double" line="429"/>
            <javadoc line="432">
                Returns the sum of squared errors divided by the degrees of freedom,
                  usually abbreviated MSE.
                  &lt;p&gt;
                  If there are fewer than &lt;strong&gt;three&lt;/strong&gt; data pairs in the model,
                  or if there is no variation in &lt;code&gt;x&lt;/code&gt;, this returns
                  &lt;code&gt;Double.NaN&lt;/code&gt;.&lt;/p&gt;                
                <return>
                    sum of squared deviations of y values                    
                </return>
            </javadoc>
            <method name="getMeanSquareError" type="double" line="441">
                <scope line="442"/>
            </method>
            <javadoc line="447">
                Returns &lt;a href=&quot;http://mathworld.wolfram.com/CorrelationCoefficient.html&quot;&gt;
                  Pearson&apos;s product moment correlation coefficient&lt;/a&gt;,
                  usually denoted r.
                  &lt;p&gt;
                  &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
                  &lt;li&gt;At least two observations (with at least two different x values)
                  must have been added before invoking this method. If this method is
                  invoked before a model can be estimated, &lt;code&gt;Double,NaN&lt;/code&gt; is
                  returned.
                  &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;                
                <return>
                    Pearson's r                    
                </return>
            </javadoc>
            <method name="getR" type="double" line="460">
                <declaration name="b1" type="double" line="461"/>
                <declaration name="result" type="double" line="462"/>
                <scope line="463"/>
            </method>
            <javadoc line="468">
                Returns the &lt;a href=&quot;http://www.xycoon.com/coefficient1.htm&quot;&gt;
                  coefficient of determination&lt;/a&gt;,
                  usually denoted r-square.
                  &lt;p&gt;
                  &lt;strong&gt;Preconditions&lt;/strong&gt;: &lt;ul&gt;
                  &lt;li&gt;At least two observations (with at least two different x values)
                  must have been added before invoking this method. If this method is
                  invoked before a model can be estimated, &lt;code&gt;Double,NaN&lt;/code&gt; is
                  returned.
                  &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;                
                <return>
                    r-square                    
                </return>
            </javadoc>
            <method name="getRSquare" type="double" line="481">
                <declaration name="ssto" type="double" line="482"/>
            </method>
            <javadoc line="485">
                Returns the &lt;a href=&quot;http://www.xycoon.com/standarderrorb0.htm&quot;&gt;
                  standard error of the intercept estimate&lt;/a&gt;,
                  usually denoted s(b0).
                  &lt;p&gt;
                  If there are fewer that &lt;strong&gt;three&lt;/strong&gt; observations in the
                  model, or if there is no variation in x, this returns
                  &lt;code&gt;Double.NaN&lt;/code&gt;.&lt;/p&gt; Additionally, a &lt;code&gt;Double.NaN&lt;/code&gt; is
                  returned when the intercept is constrained to be zero                
                <return>
                    standard error associated with intercept estimate                    
                </return>
            </javadoc>
            <method name="getInterceptStdErr" type="double" line="496">
                <scope line="497"/>
            </method>
            <javadoc line="502">
                Returns the &lt;a href=&quot;http://www.xycoon.com/standerrorb(1).htm&quot;&gt;standard
                  error of the slope estimate&lt;/a&gt;,
                  usually denoted s(b1).
                  &lt;p&gt;
                  If there are fewer that &lt;strong&gt;three&lt;/strong&gt; data pairs in the model,
                  or if there is no variation in x, this returns &lt;code&gt;Double.NaN&lt;/code&gt;.
                  &lt;/p&gt;                
                <return>
                    standard error associated with slope estimate                    
                </return>
            </javadoc>
            <method name="getSlopeStdErr" type="double" line="512"/>
            <javadoc line="515">
                Returns the half-width of a 95% confidence interval for the slope
                  estimate.
                  &lt;p&gt;
                  The 95% confidence interval is&lt;/p&gt;
                  &lt;p&gt;
                  &lt;code&gt;(getSlope() - getSlopeConfidenceInterval(),
                  getSlope() + getSlopeConfidenceInterval())&lt;/code&gt;&lt;/p&gt;
                  &lt;p&gt;
                  If there are fewer that &lt;strong&gt;three&lt;/strong&gt; observations in the
                  model, or if there is no variation in x, this returns
                  &lt;code&gt;Double.NaN&lt;/code&gt;.&lt;/p&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Usage Note&lt;/strong&gt;:&lt;br&gt;
                  The validity of this statistic depends on the assumption that the
                  observations included in the model are drawn from a
                  &lt;a href=&quot;http://mathworld.wolfram.com/BivariateNormalDistribution.html&quot;&gt;
                  Bivariate Normal Distribution&lt;/a&gt;.&lt;/p&gt;                
                <return>
                    half-width of 95% confidence interval for the slope estimate                    
                </return>
                <throws>
                    OutOfRangeException if the confidence interval can not be computed.                    
                </throws>
            </javadoc>
            <method name="getSlopeConfidenceInterval" type="double" line="536"/>
            <javadoc line="539">
                Returns the half-width of a (100-100alpha)% confidence interval for
                  the slope estimate.
                  &lt;p&gt;
                  The (100-100alpha)% confidence interval is &lt;/p&gt;
                  &lt;p&gt;
                  &lt;code&gt;(getSlope() - getSlopeConfidenceInterval(),
                  getSlope() + getSlopeConfidenceInterval())&lt;/code&gt;&lt;/p&gt;
                  &lt;p&gt;
                  To request, for example, a 99% confidence interval, use
                  &lt;code&gt;alpha = .01&lt;/code&gt;&lt;/p&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Usage Note&lt;/strong&gt;:&lt;br&gt;
                  The validity of this statistic depends on the assumption that the
                  observations included in the model are drawn from a
                  &lt;a href=&quot;http://mathworld.wolfram.com/BivariateNormalDistribution.html&quot;&gt;
                  Bivariate Normal Distribution&lt;/a&gt;.&lt;/p&gt;
                  &lt;p&gt;
                  &lt;strong&gt; Preconditions:&lt;/strong&gt;&lt;ul&gt;
                  &lt;li&gt;If there are fewer that &lt;strong&gt;three&lt;/strong&gt; observations in the
                  model, or if there is no variation in x, this returns
                  &lt;code&gt;Double.NaN&lt;/code&gt;.
                  &lt;/li&gt;
                  &lt;li&gt;&lt;code&gt;(0 &lt; alpha &lt; 1)&lt;/code&gt;; otherwise an
                  &lt;code&gt;OutOfRangeException&lt;/code&gt; is thrown.
                  &lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;                
                <param>
                    alpha the desired significance level                    
                </param>
                <return>
                    half-width of 95% confidence interval for the slope estimate                    
                </return>
                <throws>
                    OutOfRangeException if the confidence interval can not be computed.                    
                </throws>
            </javadoc>
            <method name="getSlopeConfidenceInterval" type="double" line="569">
                <params>
                    <param name="alpha" type="double"/>
                </params>
                <scope line="570"/>
                <scope line="573"/>
                <declaration name="distribution" type="TDistribution" line="576"/>
            </method>
            <javadoc line="579">
                Returns the significance level of the slope (equiv) correlation.
                  &lt;p&gt;
                  Specifically, the returned value is the smallest &lt;code&gt;alpha&lt;/code&gt;
                  such that the slope confidence interval with significance level
                  equal to &lt;code&gt;alpha&lt;/code&gt; does not include &lt;code&gt;0&lt;/code&gt;.
                  On regression output, this is often denoted &lt;code&gt;Prob(|t| &gt; 0)&lt;/code&gt;
                  &lt;/p&gt;&lt;p&gt;
                  &lt;strong&gt;Usage Note&lt;/strong&gt;:&lt;br&gt;
                  The validity of this statistic depends on the assumption that the
                  observations included in the model are drawn from a
                  &lt;a href=&quot;http://mathworld.wolfram.com/BivariateNormalDistribution.html&quot;&gt;
                  Bivariate Normal Distribution&lt;/a&gt;.&lt;/p&gt;
                  &lt;p&gt;
                  If there are fewer that &lt;strong&gt;three&lt;/strong&gt; observations in the
                  model, or if there is no variation in x, this returns
                  &lt;code&gt;Double.NaN&lt;/code&gt;.&lt;/p&gt;                
                <return>
                    significance level for slope/correlation                    
                </return>
                <throws>
                    org.apache.commons.math3.exception.MaxCountExceededExceptionif the significance level can not be computed.                    
                </throws>
            </javadoc>
            <method name="getSignificance" type="double" line="599">
                <scope line="600"/>
                <declaration name="distribution" type="TDistribution" line="603"/>
            </method>
            <javadoc line="606">
                Returns the intercept of the estimated regression line, given the slope.
                  &lt;p&gt;
                  Will return &lt;code&gt;NaN&lt;/code&gt; if slope is &lt;code&gt;NaN&lt;/code&gt;.&lt;/p&gt;                
                <param>
                    slope current slope                    
                </param>
                <return>
                    the intercept of the regression line                    
                </return>
            </javadoc>
            <method name="getIntercept" type="double" line="613">
                <params>
                    <param name="slope" type="double"/>
                </params>
                <scope line="614"/>
            </method>
            <javadoc line="619">
                Computes SSR from b1.                
                <param>
                    slope regression slope estimate                    
                </param>
                <return>
                    sum of squared deviations of predicted y values                    
                </return>
            </javadoc>
            <method name="getRegressionSumSquares" type="double" line="624">
                <params>
                    <param name="slope" type="double"/>
                </params>
            </method>
            <javadoc line="627">
                Performs a regression on data present in buffers and outputs a RegressionResults object.
                  &lt;p&gt;If there are fewer than 3 observations in the model and {@code hasIntercept} is true
                  a {@code NoDataException} is thrown.  If there is no intercept term, the model must
                  contain at least 2 observations.&lt;/p&gt;                
                <return>
                    RegressionResults acts as a container of regression output                    
                </return>
                <throws>
                    ModelSpecificationException if the model is not correctly specified                    
                </throws>
                <throws>
                    NoDataException if there is not sufficient data in the model to
                      estimate the regression parameters                    
                </throws>
            </javadoc>
            <method name="regress" type="RegressionResults" line="637">
                <scope line="638">
                    <scope line="639"/>
                    <scope line="642">
                        <declaration name="params" type="double[]" line="643"/>
                        <declaration name="mse" type="double" line="644"/>
                        <declaration name="_syy" type="double" line="645"/>
                        <declaration name="vcv" type="double[]" line="646"/>
                    </scope>
                    <scope line="649">
                        <declaration name="params" type="double[]" line="650"/>
                        <declaration name="vcv" type="double[]" line="651"/>
                    </scope>
                </scope>
                <scope line="655">
                    <scope line="656"/>
                    <scope line="659">
                        <declaration name="vcv" type="double[]" line="660"/>
                        <declaration name="params" type="double[]" line="661"/>
                    </scope>
                    <scope line="664">
                        <declaration name="vcv" type="double[]" line="665"/>
                        <declaration name="params" type="double[]" line="666"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="671">
                Performs a regression on data present in buffers including only regressors
                  indexed in variablesToInclude and outputs a RegressionResults object                
                <param>
                    variablesToInclude an array of indices of regressors to include                    
                </param>
                <return>
                    RegressionResults acts as a container of regression output                    
                </return>
                <throws>
                    MathIllegalArgumentException if the variablesToInclude array is null or zero length                    
                </throws>
                <throws>
                    OutOfRangeException if a requested variable is not present in model                    
                </throws>
            </javadoc>
            <method name="regress" type="RegressionResults" line="679">
                <params>
                    <param name="variablesToInclude" type="int[]"/>
                </params>
                <scope line="680"/>
                <scope line="683"/>
                <scope line="686">
                    <scope line="687">
                        <scope line="688"/>
                        <scope line="691"/>
                        <scope line="694"/>
                    </scope>
                    <scope line="699">
                        <scope line="700"/>
                        <declaration name="_mean" type="double" line="703"/>
                        <declaration name="_syy" type="double" line="704"/>
                        <scope line="705">
                            <declaration name="vcv" type="double[]" line="706"/>
                            <declaration name="params" type="double[]" line="707"/>
                        </scope>
                        <scope line="710">
                            <declaration name="_sxx" type="double" line="711"/>
                            <declaration name="_sxy" type="double" line="712"/>
                            <declaration name="_sse" type="double" line="713"/>
                            <declaration name="_mse" type="double" line="714"/>
                            <scope line="715">
                                <declaration name="vcv" type="double[]" line="716"/>
                                <declaration name="params" type="double[]" line="717"/>
                            </scope>
                            <scope line="720">
                                <declaration name="vcv" type="double[]" line="721"/>
                                <declaration name="params" type="double[]" line="722"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="728">
                    <scope line="729"/>
                </scope>
            </method>
        </class>
    </source>