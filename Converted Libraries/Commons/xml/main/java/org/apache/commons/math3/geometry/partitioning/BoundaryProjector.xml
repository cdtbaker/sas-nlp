<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.geometry.partitioning">
        <import package="java.util.ArrayList"/>
        <import package="java.util.List"/>
        <import package="org.apache.commons.math3.geometry.Point"/>
        <import package="org.apache.commons.math3.geometry.Space"/>
        <import package="org.apache.commons.math3.geometry.partitioning.Region.Location"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="BoundaryProjector" line="27">
            <type_params>
                <type_param name="S"/>
                <type_param name="T"/>
            </type_params>
            <implements interface="BSPTreeVisitor">
                <type_params>
                    <type_param name="S"/>
                </type_params>
            </implements>
            <javadoc line="27">
                Local tree visitor to compute projection on boundary.                
                <param>
                    &lt;S&gt;
                       Type of the space.                    
                </param>
                <param>
                    &lt;T&gt;
                       Type of the sub-space.                    
                </param>
                <version>
                    $Id: BoundaryProjector.java 1560115 2014-01-21 17:49:13Z luc $                    
                </version>
                <since>
                    3.3                    
                </since>
            </javadoc>
            <declaration name="original" type="Point&amp;lt;S&amp;gt;" line="35"/>
            <javadoc line="35">
                Original point.                
            </javadoc>
            <declaration name="projected" type="Point&amp;lt;S&amp;gt;" line="38"/>
            <javadoc line="38">
                Current best projected point.                
            </javadoc>
            <declaration name="leaf" type="BSPTree&amp;lt;S&amp;gt;" line="41"/>
            <javadoc line="41">
                Leaf node closest to the test point.                
            </javadoc>
            <declaration name="offset" type="double" line="44"/>
            <javadoc line="44">
                Current offset.                
            </javadoc>
            <javadoc line="47">
                Simple constructor.                
                <param>
                    original original point                    
                </param>
            </javadoc>
            <method name="BoundaryProjector" type="constructor" line="50">
                <params>
                    <param name="original" type="Point&lt;S&gt;"/>
                </params>
            </method>
            <javadoc line="57">
                {@inheritDoc}                
            </javadoc>
            <method name="visitOrder" type="Order" line="58">
                <params>
                    <param name="node" type="BSPTree&lt;S&gt;"/>
                </params>
                <comment line="60">
                    we want to visit the tree so that the first encountered
                     leaf is the one closest to the test point                    
                </comment>
                <scope line="61"/>
                <scope line="63"/>
            </method>
            <javadoc line="68">
                {@inheritDoc}                
            </javadoc>
            <method name="visitInternalNode" type="void" line="69">
                <params>
                    <param name="node" type="BSPTree&lt;S&gt;"/>
                </params>
                <comment line="72">
                    project the point on the cut sub-hyperplane                    
                </comment>
                <comment line="77">
                    project point                    
                </comment>
                <comment line="80">
                    get boundary parts                    
                </comment>
                <comment line="83">
                    check if regular projection really belongs to the boundary                    
                </comment>
                <comment line="87">
                    the projected point lies in the boundary                    
                </comment>
                <comment line="95">
                    the regular projected point is not on boundary,
                     so we have to check further if a singular point
                     (i.e. a vertex in 2D case) is a possible projection                    
                </comment>
                <declaration name="hyperplane" type="Hyperplane&amp;lt;S&amp;gt;" line="72"/>
                <declaration name="signedOffset" type="double" line="73"/>
                <scope line="74">
                    <declaration name="regular" type="Point&amp;lt;S&amp;gt;" line="77"/>
                    <declaration name="boundaryParts" type="List&amp;lt;Region&amp;lt;T&amp;gt;&amp;gt;" line="80"/>
                    <declaration name="regularFound" type="boolean" line="83"/>
                    <scope line="84">
                        <scope line="85"/>
                    </scope>
                    <scope line="93">
                        <scope line="97">
                            <declaration name="spI" type="Point&amp;lt;S&amp;gt;" line="98"/>
                            <scope line="99">
                                <declaration name="distance" type="double" line="100"/>
                                <scope line="101"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="114">
                {@inheritDoc}                
            </javadoc>
            <method name="visitLeafNode" type="void" line="115">
                <params>
                    <param name="node" type="BSPTree&lt;S&gt;"/>
                </params>
                <comment line="118">
                    this is the first leaf we visit,
                     it is the closest one to the original point                    
                </comment>
                <scope line="116"/>
            </method>
            <javadoc line="123">
                Get the projection.                
                <return>
                    projection                    
                </return>
            </javadoc>
            <method name="getProjection" type="BoundaryProjection&lt;S&gt;" line="126">
                <comment line="129">
                    fix offset sign                    
                </comment>
            </method>
            <javadoc line="135">
                Extract the regions of the boundary on an internal node.                
                <param>
                    node internal node                    
                </param>
                <return>
                    regions in the node sub-hyperplane                    
                </return>
            </javadoc>
            <method name="boundaryRegions" type="List&lt;Region&lt;T&gt;&gt;" line="139">
                <params>
                    <param name="node" type="BSPTree&lt;S&gt;"/>
                </params>
                <declaration name="regions" type="List&amp;lt;Region&amp;lt;T&amp;gt;&amp;gt;" line="141"/>
                <declaration name="ba" type="BoundaryAttribute&amp;lt;S&amp;gt;" line="143"/>
            </method>
            <javadoc line="152">
                Add a boundary region to a list.                
                <param>
                    sub sub-hyperplane defining the region                    
                </param>
                <param>
                    list to fill up                    
                </param>
            </javadoc>
            <method name="addRegion" type="void" line="156">
                <params>
                    <param name="sub" type="SubHyperplane&lt;S&gt;"/>
                    <param name="list" type="List&lt;Region&lt;T&gt;&gt;"/>
                </params>
                <scope line="157">
                    <declaration name="region" type="Region&amp;lt;T&amp;gt;" line="158"/>
                    <scope line="160"/>
                </scope>
            </method>
            <javadoc line="166">
                Check if a projected point lies on a boundary part.                
                <param>
                    point projected point to check                    
                </param>
                <param>
                    hyperplane hyperplane into which the point was projected                    
                </param>
                <param>
                    part boundary part                    
                </param>
                <return>
                    true if point lies on the boundary part                    
                </return>
            </javadoc>
            <method name="belongsToPart" type="boolean" line="173">
                <params>
                    <param name="point" type="Point&lt;S&gt;"/>
                    <param name="hyperplane" type="Hyperplane&lt;S&gt;"/>
                    <param name="part" type="Region&lt;T&gt;"/>
                </params>
                <comment line="176">
                    there is a non-null sub-space, we can dive into smaller dimensions                    
                </comment>
                <declaration name="embedding" type="Embedding&amp;lt;S,T&amp;gt;" line="176"/>
            </method>
            <javadoc line="182">
                Get the projection to the closest boundary singular point.                
                <param>
                    point projected point to check                    
                </param>
                <param>
                    hyperplane hyperplane into which the point was projected                    
                </param>
                <param>
                    part boundary part                    
                </param>
                <return>
                    projection to a singular point of boundary part (may be null)                    
                </return>
            </javadoc>
            <method name="singularProjection" type="Point&lt;S&gt;" line="189">
                <params>
                    <param name="point" type="Point&lt;S&gt;"/>
                    <param name="hyperplane" type="Hyperplane&lt;S&gt;"/>
                    <param name="part" type="Region&lt;T&gt;"/>
                </params>
                <comment line="192">
                    there is a non-null sub-space, we can dive into smaller dimensions                    
                </comment>
                <comment line="197">
                    back to initial dimension                    
                </comment>
                <declaration name="embedding" type="Embedding&amp;lt;S,T&amp;gt;" line="192"/>
                <declaration name="bp" type="BoundaryProjection&amp;lt;T&amp;gt;" line="194"/>
            </method>
        </class>
    </source>