<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.ml.neuralnet">
        <import package="java.io.Serializable"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.util.NoSuchElementException"/>
        <import package="java.util.List"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Set"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.Collection"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.Comparator"/>
        <import package="java.util.Collections"/>
        <import package="java.util.concurrent.ConcurrentHashMap"/>
        <import package="java.util.concurrent.atomic.AtomicLong"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.MathIllegalStateException"/>
        <class name="Network" line="36">
            <implements interface="Iterable">
                <type_params>
                    <type_param name="Neuron"/>
                </type_params>
            </implements>
            <implements interface="Serializable"/>
            <javadoc line="36">
                Neural network, composed of {@link Neuron} instances and the links
                  between them.
                  Although updating a neuron&apos;s state is thread-safe, modifying the
                  network&apos;s topology (adding or removing links) is not.                
                <version>
                    $Id: Network.java 1566092 2014-02-08 18:48:29Z tn $                    
                </version>
                <since>
                    3.3                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="49"/>
            <javadoc line="49">
                Serializable.                
            </javadoc>
            <declaration name="neuronMap" type="ConcurrentHashMap&amp;lt;Long,Neuron&amp;gt;" line="51"/>
            <javadoc line="51">
                Neurons.                
            </javadoc>
            <declaration name="nextId" type="AtomicLong" line="54"/>
            <javadoc line="54">
                Next available neuron identifier.                
            </javadoc>
            <declaration name="featureSize" type="int" line="56"/>
            <javadoc line="56">
                Neuron&apos;s features set size.                
            </javadoc>
            <declaration name="linkMap" type="ConcurrentHashMap&amp;lt;Long,Set&amp;lt;Long&amp;gt;&amp;gt;" line="58"/>
            <javadoc line="58">
                Links.                
            </javadoc>
            <class name="NeuronIdentifierComparator" line="62">
                <implements interface="Comparator">
                    <type_params>
                        <type_param name="Neuron"/>
                    </type_params>
                </implements>
                <implements interface="Serializable"/>
                <javadoc line="62">
                    Comparator that prescribes an order of the neurons according
                      to the increasing order of their identifier.                    
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="69"/>
                <javadoc line="69">
                    Version identifier.                    
                </javadoc>
                <javadoc line="72">
                    {@inheritDoc}                    
                </javadoc>
                <method name="compare" type="int" line="74">
                    <params>
                        <param name="a" type="Neuron"/>
                        <param name="b" type="Neuron"/>
                    </params>
                    <declaration name="aId" type="long" line="75"/>
                    <declaration name="bId" type="long" line="76"/>
                </method>
            </class>
            <javadoc line="82">
                Constructor with restricted access, solely used for deserialization.                
                <param>
                    nextId Next available identifier.                    
                </param>
                <param>
                    featureSize Number of features.                    
                </param>
                <param>
                    neuronList Neurons.                    
                </param>
                <param>
                    neighbourIdList Links associated to each of the neurons in{@code neuronList}.                    
                </param>
                <throws>
                    MathIllegalStateException if an inconsistency is detected
                      (which probably means that the serialized form has been corrupted).                    
                </throws>
            </javadoc>
            <method name="Network" type="constructor" line="96">
                <params>
                    <param name="nextId" type="long"/>
                    <param name="featureSize" type="int"/>
                    <param name="neuronList" type="Neuron[]"/>
                    <param name="neighbourIdList" type="long[][]"/>
                </params>
                <declaration name="numNeurons" type="int" line="97"/>
                <scope line="98"/>
                <scope line="102">
                    <declaration name="n" type="Neuron" line="103"/>
                    <declaration name="id" type="long" line="104"/>
                    <scope line="105"/>
                </scope>
                <scope line="112">
                    <declaration name="aId" type="long" line="113"/>
                    <declaration name="aLinks" type="Set&amp;lt;Long&amp;gt;" line="114"/>
                    <scope line="115">
                        <scope line="116"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="127">
                @param initialIdentifier Identifier for the first neuron that
                  will be added to this network.                
                <param>
                    featureSize Size of the neuron&apos;s features.                    
                </param>
            </javadoc>
            <method name="Network" type="constructor" line="133">
                <params>
                    <param name="initialIdentifier" type="long"/>
                    <param name="featureSize" type="int"/>
                </params>
            </method>
            <javadoc line="138">
                {@inheritDoc}                
            </javadoc>
            <method name="iterator" type="Iterator&lt;Neuron&gt;" line="141"/>
            <javadoc line="145">
                Creates a list of the neurons, sorted in a custom order.                
                <param>
                    comparator {@link Comparator} used for sorting the neurons.                    
                </param>
                <return>
                    a list of neurons, sorted in the order prescribed by the
                      given {@code comparator}.                    
                </return>
                <see>
                    NeuronIdentifierComparator                    
                </see>
            </javadoc>
            <method name="getNeurons" type="Collection&lt;Neuron&gt;" line="153">
                <params>
                    <param name="comparator" type="Comparator&lt;Neuron&gt;"/>
                </params>
                <declaration name="neurons" type="List&amp;lt;Neuron&amp;gt;" line="154"/>
            </method>
            <javadoc line="162">
                Creates a neuron and assigns it a unique identifier.                
                <param>
                    features Initial values for the neuron&apos;s features.                    
                </param>
                <return>
                    the neuron&apos;s identifier.                    
                </return>
                <throws>
                    DimensionMismatchException if the length of {@code features}is different from the expected size (as set by the{@link #Network(long,int) constructor}).                    
                </throws>
            </javadoc>
            <method name="createNeuron" type="long" line="171">
                <params>
                    <param name="features" type="double[]"/>
                </params>
                <scope line="172"/>
                <declaration name="id" type="long" line="176"/>
            </method>
            <javadoc line="182">
                Deletes a neuron.
                  Links from all neighbours to the removed neuron will also be{@link #deleteLink(Neuron,Neuron) deleted}.                
                <param>
                    neuron Neuron to be removed from this network.                    
                </param>
                <throws>
                    NoSuchElementException if {@code n} does not belong to
                      this network.                    
                </throws>
            </javadoc>
            <method name="deleteNeuron" type="void" line="191">
                <params>
                    <param name="neuron" type="Neuron"/>
                </params>
                <comment line="195">
                    Delete links to from neighbours.                    
                </comment>
                <comment line="200">
                    Remove neuron.                    
                </comment>
                <declaration name="neighbours" type="Collection&amp;lt;Neuron&amp;gt;" line="192"/>
                <scope line="195"/>
            </method>
            <javadoc line="203">
                Gets the size of the neurons&apos; features set.                
                <return>
                    the size of the features set.                    
                </return>
            </javadoc>
            <method name="getFeaturesSize" type="int" line="208"/>
            <javadoc line="212">
                Adds a link from neuron {@code a} to neuron {@code b}.
                  Note: the link is not bi-directional; if a bi-directional link is
                  required, an additional call must be made with {@code a} and{@code b} exchanged in the argument list.                
                <param>
                    a Neuron.                    
                </param>
                <param>
                    b Neuron.                    
                </param>
                <throws>
                    NoSuchElementException if the neurons do not exist in the
                      network.                    
                </throws>
            </javadoc>
            <method name="addLink" type="void" line="224">
                <params>
                    <param name="a" type="Neuron"/>
                    <param name="b" type="Neuron"/>
                </params>
                <comment line="229">
                    Check that the neurons belong to this network.                    
                </comment>
                <comment line="237">
                    Add link from &quot;a&quot; to &quot;b&quot;.                    
                </comment>
                <declaration name="aId" type="long" line="225"/>
                <declaration name="bId" type="long" line="226"/>
                <scope line="229"/>
                <scope line="232"/>
            </method>
            <javadoc line="240">
                Adds a link to neuron {@code id} in given {@code linkSet}.
                  Note: no check verifies that the identifier indeed belongs
                  to this network.                
                <param>
                    linkSet Neuron identifier.                    
                </param>
                <param>
                    id Neuron identifier.                    
                </param>
            </javadoc>
            <method name="addLinkToLinkSet" type="void" line="249">
                <params>
                    <param name="linkSet" type="Set&lt;Long&gt;"/>
                    <param name="id" type="long"/>
                </params>
            </method>
            <javadoc line="253">
                Deletes the link between neurons {@code a} and {@code b}.                
                <param>
                    a Neuron.                    
                </param>
                <param>
                    b Neuron.                    
                </param>
                <throws>
                    NoSuchElementException if the neurons do not exist in the
                      network.                    
                </throws>
            </javadoc>
            <method name="deleteLink" type="void" line="262">
                <params>
                    <param name="a" type="Neuron"/>
                    <param name="b" type="Neuron"/>
                </params>
                <comment line="267">
                    Check that the neurons belong to this network.                    
                </comment>
                <comment line="275">
                    Delete link from &quot;a&quot; to &quot;b&quot;.                    
                </comment>
                <declaration name="aId" type="long" line="263"/>
                <declaration name="bId" type="long" line="264"/>
                <scope line="267"/>
                <scope line="270"/>
            </method>
            <javadoc line="278">
                Deletes a link to neuron {@code id} in given {@code linkSet}.
                  Note: no check verifies that the identifier indeed belongs
                  to this network.                
                <param>
                    linkSet Neuron identifier.                    
                </param>
                <param>
                    id Neuron identifier.                    
                </param>
            </javadoc>
            <method name="deleteLinkFromLinkSet" type="void" line="287">
                <params>
                    <param name="linkSet" type="Set&lt;Long&gt;"/>
                    <param name="id" type="long"/>
                </params>
            </method>
            <javadoc line="291">
                Retrieves the neuron with the given (unique) {@code id}.                
                <param>
                    id Identifier.                    
                </param>
                <return>
                    the neuron associated with the given {@code id}.                    
                </return>
                <throws>
                    NoSuchElementException if the neuron does not exist in the
                      network.                    
                </throws>
            </javadoc>
            <method name="getNeuron" type="Neuron" line="299">
                <params>
                    <param name="id" type="long"/>
                </params>
                <declaration name="n" type="Neuron" line="300"/>
                <scope line="301"/>
            </method>
            <javadoc line="307">
                Retrieves the neurons in the neighbourhood of any neuron in the{@code neurons} list.                
                <param>
                    neurons Neurons for which to retrieve the neighbours.                    
                </param>
                <return>
                    the list of neighbours.                    
                </return>
                <see>
                    #getNeighbours(Iterable,Iterable)                    
                </see>
            </javadoc>
            <method name="getNeighbours" type="Collection&lt;Neuron&gt;" line="314">
                <params>
                    <param name="neurons" type="Iterable&lt;Neuron&gt;"/>
                </params>
            </method>
            <javadoc line="318">
                Retrieves the neurons in the neighbourhood of any neuron in the{@code neurons} list.
                  The {@code exclude} list allows to retrieve the &quot;concentric&quot;
                  neighbourhoods by removing the neurons that belong to the inner
                  &quot;circles&quot;.                
                <param>
                    neurons Neurons for which to retrieve the neighbours.                    
                </param>
                <param>
                    exclude Neurons to exclude from the returned list.
                      Can be {@code null}.                    
                </param>
                <return>
                    the list of neighbours.                    
                </return>
            </javadoc>
            <method name="getNeighbours" type="Collection&lt;Neuron&gt;" line="331">
                <params>
                    <param name="neurons" type="Iterable&lt;Neuron&gt;"/>
                    <param name="exclude" type="Iterable&lt;Neuron&gt;"/>
                </params>
                <declaration name="idList" type="Set&amp;lt;Long&amp;gt;" line="332"/>
                <scope line="334"/>
                <scope line="337">
                    <scope line="338"/>
                </scope>
                <declaration name="neuronList" type="List&amp;lt;Neuron&amp;gt;" line="343"/>
                <scope line="344"/>
            </method>
            <javadoc line="351">
                Retrieves the neighbours of the given neuron.                
                <param>
                    neuron Neuron for which to retrieve the neighbours.                    
                </param>
                <return>
                    the list of neighbours.                    
                </return>
                <see>
                    #getNeighbours(Neuron,Iterable)                    
                </see>
            </javadoc>
            <method name="getNeighbours" type="Collection&lt;Neuron&gt;" line="358">
                <params>
                    <param name="neuron" type="Neuron"/>
                </params>
            </method>
            <javadoc line="362">
                Retrieves the neighbours of the given neuron.                
                <param>
                    neuron Neuron for which to retrieve the neighbours.                    
                </param>
                <param>
                    exclude Neurons to exclude from the returned list.
                      Can be {@code null}.                    
                </param>
                <return>
                    the list of neighbours.                    
                </return>
            </javadoc>
            <method name="getNeighbours" type="Collection&lt;Neuron&gt;" line="371">
                <params>
                    <param name="neuron" type="Neuron"/>
                    <param name="exclude" type="Iterable&lt;Neuron&gt;"/>
                </params>
                <declaration name="idList" type="Set&amp;lt;Long&amp;gt;" line="372"/>
                <scope line="373">
                    <scope line="374"/>
                </scope>
                <declaration name="neuronList" type="List&amp;lt;Neuron&amp;gt;" line="379"/>
                <scope line="380"/>
            </method>
            <javadoc line="387">
                Creates a neuron identifier.                
                <return>
                    a value that will serve as a unique identifier.                    
                </return>
            </javadoc>
            <method name="createNextId" type="Long" line="392"/>
            <javadoc line="396">
                Prevents proxy bypass.                
                <param>
                    in Input stream.                    
                </param>
            </javadoc>
            <method name="readObject" type="void" line="401">
                <params>
                    <param name="in" type="ObjectInputStream"/>
                </params>
            </method>
            <javadoc line="405">
                Custom serialization.                
                <return>
                    the proxy instance that will be actually serialized.                    
                </return>
            </javadoc>
            <method name="writeReplace" type="Object" line="410">
                <declaration name="neuronList" type="Neuron[]" line="411"/>
                <declaration name="neighbourIdList" type="long[][]" line="412"/>
                <scope line="414">
                    <declaration name="neighbours" type="Collection&amp;lt;Neuron&amp;gt;" line="415"/>
                    <declaration name="neighboursId" type="long[]" line="416"/>
                    <declaration name="count" type="int" line="417"/>
                    <scope line="418"/>
                </scope>
            </method>
            <class name="SerializationProxy" line="431">
                <implements interface="Serializable"/>
                <javadoc line="431">
                    Serialization.                    
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="435"/>
                <javadoc line="435">
                    Serializable.                    
                </javadoc>
                <declaration name="nextId" type="long" line="437"/>
                <javadoc line="437">
                    Next identifier.                    
                </javadoc>
                <declaration name="featureSize" type="int" line="439"/>
                <javadoc line="439">
                    Number of features.                    
                </javadoc>
                <declaration name="neuronList" type="Neuron[]" line="441"/>
                <javadoc line="441">
                    Neurons.                    
                </javadoc>
                <declaration name="neighbourIdList" type="long[][]" line="443"/>
                <javadoc line="443">
                    Links.                    
                </javadoc>
                <javadoc line="446">
                    @param nextId Next available identifier.                    
                    <param>
                        featureSize Number of features.                        
                    </param>
                    <param>
                        neuronList Neurons.                        
                    </param>
                    <param>
                        neighbourIdList Links associated to each of the neurons in{@code neuronList}.                        
                    </param>
                </javadoc>
                <method name="SerializationProxy" type="constructor" line="456">
                    <params>
                        <param name="nextId" type="long"/>
                        <param name="featureSize" type="int"/>
                        <param name="neuronList" type="Neuron[]"/>
                        <param name="neighbourIdList" type="long[][]"/>
                    </params>
                </method>
                <javadoc line="463">
                    Custom serialization.                    
                    <return>
                        the {@link Network} for which this instance is the proxy.                        
                    </return>
                </javadoc>
                <method name="readResolve" type="Object" line="468"/>
            </class>
        </class>
    </source>