<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.distribution">
        <import package="java.util.List"/>
        <import package="java.util.ArrayList"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.NotPositiveException"/>
        <import package="org.apache.commons.math3.exception.MathArithmeticException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.random.RandomGenerator"/>
        <import package="org.apache.commons.math3.random.Well19937c"/>
        <import package="org.apache.commons.math3.util.Pair"/>
        <class name="MixtureMultivariateRealDistribution" line="29">
            <type_params>
                <type_param name="T"/>
            </type_params>
            <extends class="AbstractMultivariateRealDistribution"/>
            <javadoc line="29">
                Class for representing &lt;a href=&quot;http://en.wikipedia.org/wiki/Mixture_model&quot;&gt;
                  mixture model&lt;/a&gt; distributions.                
                <param>
                    &lt;T&gt;
                       Type of the mixture components.                    
                </param>
                <version>
                    $Id: MixtureMultivariateRealDistribution.java 1517418 2013-08-26 03:18:55Z dbrosius $                    
                </version>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <declaration name="weight" type="double[]" line="40"/>
            <javadoc line="40">
                Normalized weight of each mixture component.                
            </javadoc>
            <declaration name="distribution" type="List&amp;lt;T&amp;gt;" line="42"/>
            <javadoc line="42">
                Mixture components.                
            </javadoc>
            <javadoc line="45">
                Creates a mixture model from a list of distributions and their
                  associated weights.                
                <param>
                    components List of (weight, distribution) pairs from which to sample.                    
                </param>
            </javadoc>
            <method name="MixtureMultivariateRealDistribution" type="constructor" line="51">
                <params>
                    <param name="components" type="List&lt;Pair&lt;Double,T&gt;&gt;"/>
                </params>
            </method>
            <javadoc line="55">
                Creates a mixture model from a list of distributions and their
                  associated weights.                
                <param>
                    rng Random number generator.                    
                </param>
                <param>
                    components Distributions from which to sample.                    
                </param>
                <throws>
                    NotPositiveException if any of the weights is negative.                    
                </throws>
                <throws>
                    DimensionMismatchException if not all components have the same
                      number of variables.                    
                </throws>
            </javadoc>
            <method name="MixtureMultivariateRealDistribution" type="constructor" line="66">
                <params>
                    <param name="rng" type="RandomGenerator"/>
                    <param name="components" type="List&lt;Pair&lt;Double,T&gt;&gt;"/>
                </params>
                <comment line="84">
                    Check for overflow.                    
                </comment>
                <comment line="89">
                    Store each distribution and its normalized weight.                    
                </comment>
                <declaration name="numComp" type="int" line="69"/>
                <declaration name="dim" type="int" line="70"/>
                <declaration name="weightSum" type="double" line="71"/>
                <scope line="72">
                    <declaration name="comp" type="Pair&amp;lt;Double,T&amp;gt;" line="73"/>
                    <scope line="74"/>
                    <scope line="77"/>
                </scope>
                <scope line="84"/>
                <scope line="91">
                    <declaration name="comp" type="Pair&amp;lt;Double,T&amp;gt;" line="92"/>
                </scope>
            </method>
            <javadoc line="98">
                {@inheritDoc}                
            </javadoc>
            <method name="density" type="double" line="99">
                <params>
                    <param name="values" type="double[]"/>
                </params>
                <declaration name="p" type="double" line="100"/>
                <scope line="101"/>
            </method>
            <javadoc line="107">
                {@inheritDoc}                
            </javadoc>
            <method name="sample" type="double[]" line="109">
                <comment line="111">
                    Sampled values.                    
                </comment>
                <comment line="114">
                    Determine which component to sample from.                    
                </comment>
                <comment line="121">
                    pick model i                    
                </comment>
                <comment line="128">
                    This should never happen, but it ensures we won&apos;t return a null in
                     case the loop above has some floating point inequality problem on
                     the final iteration.                    
                </comment>
                <declaration name="vals" type="double[]" line="111"/>
                <declaration name="randomValue" type="double" line="114"/>
                <declaration name="sum" type="double" line="115"/>
                <scope line="117">
                    <scope line="119"/>
                </scope>
                <scope line="126"/>
            </method>
            <javadoc line="136">
                {@inheritDoc}                
            </javadoc>
            <method name="reseedRandomGenerator" type="void" line="138">
                <params>
                    <param name="seed" type="long"/>
                </params>
                <comment line="140">
                    Seed needs to be propagated to underlying components
                     in order to maintain consistency between runs.                    
                </comment>
                <comment line="145">
                    Make each component&apos;s seed different in order to avoid
                     using the same sequence of random numbers.                    
                </comment>
                <scope line="143"/>
            </method>
            <javadoc line="150">
                Gets the distributions that make up the mixture model.                
                <return>
                    the component distributions and associated weights.                    
                </return>
            </javadoc>
            <method name="getComponents" type="List&lt;Pair&lt;Double,T&gt;&gt;" line="155">
                <declaration name="list" type="List&amp;lt;Pair&amp;lt;Double,T&amp;gt;&amp;gt;" line="156"/>
                <scope line="158"/>
            </method>
        </class>
    </source>