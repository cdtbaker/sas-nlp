<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.geometry.spherical.twod">
        <import package="java.util.ArrayList"/>
        <import package="java.util.IdentityHashMap"/>
        <import package="java.util.List"/>
        <import package="java.util.Map"/>
        <import package="org.apache.commons.math3.exception.MathIllegalStateException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.geometry.euclidean.threed.Vector3D"/>
        <import package="org.apache.commons.math3.geometry.partitioning.BSPTree"/>
        <import package="org.apache.commons.math3.geometry.partitioning.BSPTreeVisitor"/>
        <import package="org.apache.commons.math3.geometry.partitioning.BoundaryAttribute"/>
        <import package="org.apache.commons.math3.geometry.spherical.oned.Arc"/>
        <import package="org.apache.commons.math3.geometry.spherical.oned.ArcsSet"/>
        <import package="org.apache.commons.math3.geometry.spherical.oned.S1Point"/>
        <class name="EdgesBuilder" line="34">
            <implements interface="BSPTreeVisitor">
                <type_params>
                    <type_param name="Sphere2D"/>
                </type_params>
            </implements>
            <javadoc line="34">
                Visitor building edges.                
                <version>
                    $Id: EdgesBuilder.java 1561506 2014-01-26 15:31:18Z luc $                    
                </version>
                <since>
                    3.3                    
                </since>
            </javadoc>
            <declaration name="root" type="BSPTree&amp;lt;Sphere2D&amp;gt;" line="40"/>
            <javadoc line="40">
                Root of the tree.                
            </javadoc>
            <declaration name="tolerance" type="double" line="43"/>
            <javadoc line="43">
                Tolerance below which points are consider to be identical.                
            </javadoc>
            <declaration name="edgeToNode" type="Map&amp;lt;Edge,BSPTree&amp;lt;Sphere2D&amp;gt;&amp;gt;" line="46"/>
            <javadoc line="46">
                Built edges and their associated nodes.                
            </javadoc>
            <declaration name="nodeToEdgesList" type="Map&amp;lt;BSPTree&amp;lt;Sphere2D&amp;gt;,List&amp;lt;Edge&amp;gt;&amp;gt;" line="49"/>
            <javadoc line="49">
                Reversed map.                
            </javadoc>
            <javadoc line="52">
                Simple constructor.                
                <param>
                    root tree root                    
                </param>
                <param>
                    tolerance below which points are consider to be identical                    
                </param>
            </javadoc>
            <method name="EdgesBuilder" type="constructor" line="56">
                <params>
                    <param name="root" type="BSPTree&lt;Sphere2D&gt;"/>
                    <param name="tolerance" type="double"/>
                </params>
            </method>
            <javadoc line="63">
                {@inheritDoc}                
            </javadoc>
            <method name="visitOrder" type="Order" line="64">
                <params>
                    <param name="node" type="BSPTree&lt;Sphere2D&gt;"/>
                </params>
            </method>
            <javadoc line="68">
                {@inheritDoc}                
            </javadoc>
            <method name="visitInternalNode" type="void" line="69">
                <params>
                    <param name="node" type="BSPTree&lt;Sphere2D&gt;"/>
                </params>
                <declaration name="attribute" type="BoundaryAttribute&amp;lt;Sphere2D&amp;gt;" line="71"/>
                <scope line="73"/>
                <scope line="76"/>
            </method>
            <javadoc line="81">
                {@inheritDoc}                
            </javadoc>
            <method name="visitLeafNode" type="void" line="82">
                <params>
                    <param name="node" type="BSPTree&lt;Sphere2D&gt;"/>
                </params>
            </method>
            <javadoc line="85">
                Add the contribution of a boundary edge.                
                <param>
                    sub boundary facet                    
                </param>
                <param>
                    reversed if true, the facet has the inside on its plus side                    
                </param>
                <param>
                    node node to which the edge belongs                    
                </param>
            </javadoc>
            <method name="addContribution" type="void" line="91">
                <params>
                    <param name="sub" type="SubCircle"/>
                    <param name="reversed" type="boolean"/>
                    <param name="node" type="BSPTree&lt;Sphere2D&gt;"/>
                </params>
                <declaration name="circle" type="Circle" line="92"/>
                <declaration name="arcs" type="List&amp;lt;Arc&amp;gt;" line="93"/>
                <scope line="94">
                    <declaration name="start" type="Vertex" line="95"/>
                    <declaration name="end" type="Vertex" line="96"/>
                    <declaration name="edge" type="Edge" line="99"/>
                    <scope line="100"/>
                    <scope line="102"/>
                </scope>
            </method>
            <javadoc line="110">
                Get the edge that should naturally follow another one.                
                <param>
                    previous edge to be continued                    
                </param>
                <return>
                    other edge, starting where the previous one ends (they
                      have not been connected yet)                    
                </return>
                <exception>
                    MathIllegalStateException if there is not a single other edge                    
                </exception>
            </javadoc>
            <method name="getFollowingEdge" type="Edge" line="117">
                <params>
                    <param name="previous" type="Edge"/>
                </params>
                <comment line="120">
                    get the candidate nodes                    
                </comment>
                <comment line="124">
                    the following edge we are looking for must start from one of the candidates nodes                    
                </comment>
                <comment line="143">
                    the edge connects back to itself                    
                </comment>
                <comment line="147">
                    this should never happen                    
                </comment>
                <declaration name="point" type="S2Point" line="120"/>
                <declaration name="candidates" type="List&amp;lt;BSPTree&amp;lt;Sphere2D&amp;gt;&amp;gt;" line="121"/>
                <declaration name="closest" type="double" line="124"/>
                <declaration name="following" type="Edge" line="125"/>
                <scope line="126">
                    <scope line="127">
                        <scope line="128">
                            <declaration name="edgeStart" type="Vector3D" line="129"/>
                            <declaration name="gap" type="double" line="130"/>
                            <scope line="131"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="139">
                    <declaration name="previousStart" type="Vector3D" line="140"/>
                    <scope line="141"/>
                </scope>
            </method>
            <javadoc line="155">
                Get the boundary edges.                
                <return>
                    boundary edges                    
                </return>
                <exception>
                    MathIllegalStateException if there is not a single other edge                    
                </exception>
            </javadoc>
            <method name="getEdges" type="List&lt;Edge&gt;" line="159">
                <comment line="162">
                    connect the edges                    
                </comment>
                <scope line="162"/>
            </method>
        </class>
    </source>