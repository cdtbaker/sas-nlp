<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.interpolation">
        <import package="java.util.ArrayList"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.List"/>
        <import package="java.util.Map"/>
        <import package="org.apache.commons.math3.analysis.MultivariateFunction"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.NoDataException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.linear.ArrayRealVector"/>
        <import package="org.apache.commons.math3.linear.RealVector"/>
        <import package="org.apache.commons.math3.random.UnitSphereRandomVectorGenerator"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="MicrosphereInterpolatingFunction" line="33">
            <implements interface="MultivariateFunction"/>
            <javadoc line="33">
                Interpolating function that implements the
                  &lt;a href=&quot;http://www.dudziak.com/microsphere.php&quot;&gt;Microsphere Projection&lt;/a&gt;.                
                <version>
                    $Id: MicrosphereInterpolatingFunction.java 1455194 2013-03-11 15:45:54Z luc $                    
                </version>
            </javadoc>
            <declaration name="dimension" type="int" line="41"/>
            <javadoc line="41">
                Space dimension.                
            </javadoc>
            <declaration name="microsphere" type="List&amp;lt;MicrosphereSurfaceElement&amp;gt;" line="45"/>
            <javadoc line="45">
                Internal accounting data for the interpolation algorithm.
                  Each element of the list corresponds to one surface element of
                  the microsphere.                
            </javadoc>
            <declaration name="brightnessExponent" type="double" line="51"/>
            <javadoc line="51">
                Exponent used in the power law that computes the weights of the
                  sample data.                
            </javadoc>
            <declaration name="samples" type="Map&amp;lt;RealVector,Double&amp;gt;" line="56"/>
            <javadoc line="56">
                Sample data.                
            </javadoc>
            <class name="MicrosphereSurfaceElement" line="61">
                <javadoc line="61">
                    Class for storing the accounting data needed to perform the
                      microsphere projection.                    
                </javadoc>
                <declaration name="normal" type="RealVector" line="66"/>
                <javadoc line="66">
                    Normal vector characterizing a surface element.                    
                </javadoc>
                <declaration name="brightestIllumination" type="double" line="68"/>
                <javadoc line="68">
                    Illumination received from the brightest sample.                    
                </javadoc>
                <declaration name="brightestSample" type="Map.Entry&amp;lt;RealVector,Double&amp;gt;" line="70"/>
                <javadoc line="70">
                    Brightest sample.                    
                </javadoc>
                <javadoc line="73">
                    @param n Normal vector characterizing a surface element
                      of the microsphere.                    
                </javadoc>
                <method name="MicrosphereSurfaceElement" type="constructor" line="77">
                    <params>
                        <param name="n" type="double[]"/>
                    </params>
                </method>
                <javadoc line="81">
                    Return the normal vector.                    
                    <return>
                        the normal vector                        
                    </return>
                </javadoc>
                <method name="normal" type="RealVector" line="85"/>
                <javadoc line="89">
                    Reset &quot;illumination&quot; and &quot;sampleIndex&quot;.                    
                </javadoc>
                <method name="reset" type="void" line="92"/>
                <javadoc line="97">
                    Store the illumination and index of the brightest sample.                    
                    <param>
                        illuminationFromSample illumination received from sample                        
                    </param>
                    <param>
                        sample current sample illuminating the element                        
                    </param>
                </javadoc>
                <method name="store" type="void" line="103">
                    <params>
                        <param name="illuminationFromSample" type="double"/>
                        <param name="sample" type="Map.Entry&lt;RealVector,Double&gt;"/>
                    </params>
                    <scope line="104"/>
                </method>
                <javadoc line="110">
                    Get the illumination of the element.                    
                    <return>
                        the illumination.                        
                    </return>
                </javadoc>
                <method name="illumination" type="double" line="114"/>
                <javadoc line="118">
                    Get the sample illuminating the element the most.                    
                    <return>
                        the sample.                        
                    </return>
                </javadoc>
                <method name="sample" type="Map.Entry&lt;RealVector,Double&gt;" line="122"/>
            </class>
            <javadoc line="127">
                @param xval Arguments for the interpolation points.{@code xval[i][0]} is the first component of interpolation point{@code i}, {@code xval[i][1]} is the second component, and so on
                  until {@code xval[i][d-1]}, the last component of that interpolation
                  point (where {@code dimension} is thus the dimension of the sampled
                  space).                
                <param>
                    yval Values for the interpolation points.                    
                </param>
                <param>
                    brightnessExponent Brightness dimming factor.                    
                </param>
                <param>
                    microsphereElements Number of surface elements of the
                      microsphere.                    
                </param>
                <param>
                    rand Unit vector generator for creating the microsphere.                    
                </param>
                <throws>
                    DimensionMismatchException if the lengths of {@code yval} and{@code xval} (equal to {@code n}, the number of interpolation points)
                      do not match, or the the arrays {@code xval[0]} ... {@code xval[n]},
                      have lengths different from {@code dimension}.                    
                </throws>
                <throws>
                    NoDataException if there an array has zero-length.                    
                </throws>
                <throws>
                    NullArgumentException if an argument is {@code null}.                    
                </throws>
            </javadoc>
            <method name="MicrosphereInterpolatingFunction" type="constructor" line="153">
                <params>
                    <param name="xval" type="double[][]"/>
                    <param name="yval" type="double[]"/>
                    <param name="brightnessExponent" type="int"/>
                    <param name="microsphereElements" type="int"/>
                    <param name="rand" type="UnitSphereRandomVectorGenerator"/>
                </params>
                <comment line="172">
                    Copy data samples.                    
                </comment>
                <comment line="187">
                    Generate the microsphere, assuming that a fairly large number of
                     randomly generated normals will represent a sphere.                    
                </comment>
                <scope line="155"/>
                <scope line="158"/>
                <scope line="161"/>
                <scope line="164"/>
                <scope line="173">
                    <declaration name="xvalI" type="double[]" line="174"/>
                    <scope line="175"/>
                    <scope line="178"/>
                </scope>
                <scope line="188"/>
            </method>
            <javadoc line="193">
                @param point Interpolation point.                
                <return>
                    the interpolated value.                    
                </return>
                <throws>
                    DimensionMismatchException if point dimension does not math sample                    
                </throws>
            </javadoc>
            <method name="value" type="double" line="198">
                <params>
                    <param name="point" type="double[]"/>
                </params>
                <comment line="202">
                    Reset.                    
                </comment>
                <comment line="207">
                    Compute contribution of each sample points to the microsphere elements illumination                    
                </comment>
                <comment line="210">
                    Vector between interpolation point and current sample point.                    
                </comment>
                <comment line="215">
                    No need to interpolate, as the interpolation point is
                     actually (very close to) one of the sampled points.                    
                </comment>
                <comment line="227">
                    Interpolation calculation.                    
                </comment>
                <declaration name="p" type="RealVector" line="199"/>
                <scope line="202"/>
                <scope line="207">
                    <declaration name="diff" type="RealVector" line="210"/>
                    <declaration name="diffNorm" type="double" line="211"/>
                    <scope line="213"/>
                    <scope line="219">
                        <declaration name="w" type="double" line="220"/>
                    </scope>
                </scope>
                <declaration name="value" type="double" line="227"/>
                <declaration name="totalWeight" type="double" line="228"/>
                <scope line="229">
                    <declaration name="iV" type="double" line="230"/>
                    <declaration name="sd" type="Map.Entry&amp;lt;RealVector,Double&amp;gt;" line="231"/>
                    <scope line="232"/>
                </scope>
            </method>
            <javadoc line="241">
                Compute the cosine of the angle between 2 vectors.                
                <param>
                    v Vector.                    
                </param>
                <param>
                    w Vector.                    
                </param>
                <return>
                    the cosine of the angle between {@code v} and {@code w}.                    
                </return>
            </javadoc>
            <method name="cosAngle" type="double" line="248">
                <params>
                    <param name="v" type="RealVector"/>
                    <param name="w" type="RealVector"/>
                </params>
            </method>
        </class>
    </source>