<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.stat.descriptive">
        <import package="java.io.Serializable"/>
        <import package="java.lang.reflect.InvocationTargetException"/>
        <import package="java.util.Arrays"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.MathIllegalStateException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.stat.descriptive.moment.GeometricMean"/>
        <import package="org.apache.commons.math3.stat.descriptive.moment.Kurtosis"/>
        <import package="org.apache.commons.math3.stat.descriptive.moment.Mean"/>
        <import package="org.apache.commons.math3.stat.descriptive.moment.Skewness"/>
        <import package="org.apache.commons.math3.stat.descriptive.moment.Variance"/>
        <import package="org.apache.commons.math3.stat.descriptive.rank.Max"/>
        <import package="org.apache.commons.math3.stat.descriptive.rank.Min"/>
        <import package="org.apache.commons.math3.stat.descriptive.rank.Percentile"/>
        <import package="org.apache.commons.math3.stat.descriptive.summary.Sum"/>
        <import package="org.apache.commons.math3.stat.descriptive.summary.SumOfSquares"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <import package="org.apache.commons.math3.util.ResizableDoubleArray"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="DescriptiveStatistics" line="22">
            <implements interface="StatisticalSummary"/>
            <implements interface="Serializable"/>
            <javadoc line="22">
                Maintains a dataset of values of a single variable and computes descriptive
                  statistics based on stored data. The {@link #getWindowSize() windowSize}property sets a limit on the number of values that can be stored in the
                  dataset.  The default value, INFINITE_WINDOW, puts no limit on the size of
                  the dataset.  This value should be used with caution, as the backing store
                  will grow without bound in this case.  For very large datasets,{@link SummaryStatistics}, which does not store the dataset, should be used
                  instead of this class. If &lt;code&gt;windowSize&lt;/code&gt; is not INFINITE_WINDOW and
                  more values are added than can be stored in the dataset, new values are
                  added in a &quot;rolling&quot; manner, with new values replacing the &quot;oldest&quot; values
                  in the dataset.
                  &lt;p&gt;Note: this class is not threadsafe.  Use{@link SynchronizedDescriptiveStatistics} if concurrent access from multiple
                  threads is required.&lt;/p&gt;                
                <version>
                    $Id: DescriptiveStatistics.java 1422354 2012-12-15 20:59:01Z psteitz $                    
                </version>
            </javadoc>
            <declaration name="INFINITE_WINDOW" type="int" line="37"/>
            <javadoc line="37">
                Represents an infinite window size.  When the {@link #getWindowSize()}returns this value, there is no limit to the number of data values
                  that can be stored in the dataset.                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="42"/>
            <javadoc line="42">
                Serialization UID                
            </javadoc>
            <declaration name="SET_QUANTILE_METHOD_NAME" type="String" line="46"/>
            <javadoc line="46">
                Name of the setQuantile method.                
            </javadoc>
            <declaration name="windowSize" type="int" line="50"/>
            <javadoc line="50">
                hold the window size                
            </javadoc>
            <declaration name="eDA" type="ResizableDoubleArray" line="54"/>
            <javadoc line="54">
                Stored data values                
            </javadoc>
            <declaration name="meanImpl" type="UnivariateStatistic" line="58"/>
            <javadoc line="58">
                Mean statistic implementation - can be reset by setter.                
            </javadoc>
            <declaration name="geometricMeanImpl" type="UnivariateStatistic" line="62"/>
            <javadoc line="62">
                Geometric mean statistic implementation - can be reset by setter.                
            </javadoc>
            <declaration name="kurtosisImpl" type="UnivariateStatistic" line="66"/>
            <javadoc line="66">
                Kurtosis statistic implementation - can be reset by setter.                
            </javadoc>
            <declaration name="maxImpl" type="UnivariateStatistic" line="70"/>
            <javadoc line="70">
                Maximum statistic implementation - can be reset by setter.                
            </javadoc>
            <declaration name="minImpl" type="UnivariateStatistic" line="74"/>
            <javadoc line="74">
                Minimum statistic implementation - can be reset by setter.                
            </javadoc>
            <declaration name="percentileImpl" type="UnivariateStatistic" line="78"/>
            <javadoc line="78">
                Percentile statistic implementation - can be reset by setter.                
            </javadoc>
            <declaration name="skewnessImpl" type="UnivariateStatistic" line="82"/>
            <javadoc line="82">
                Skewness statistic implementation - can be reset by setter.                
            </javadoc>
            <declaration name="varianceImpl" type="UnivariateStatistic" line="86"/>
            <javadoc line="86">
                Variance statistic implementation - can be reset by setter.                
            </javadoc>
            <declaration name="sumsqImpl" type="UnivariateStatistic" line="90"/>
            <javadoc line="90">
                Sum of squares statistic implementation - can be reset by setter.                
            </javadoc>
            <declaration name="sumImpl" type="UnivariateStatistic" line="94"/>
            <javadoc line="94">
                Sum statistic implementation - can be reset by setter.                
            </javadoc>
            <javadoc line="98">
                Construct a DescriptiveStatistics instance with an infinite window                
            </javadoc>
            <method name="DescriptiveStatistics" type="constructor" line="101"/>
            <javadoc line="103">
                Construct a DescriptiveStatistics instance with the specified window                
                <param>
                    window the window size.                    
                </param>
                <throws>
                    MathIllegalArgumentException if window size is less than 1 but
                      not equal to {@link #INFINITE_WINDOW}                    
                </throws>
            </javadoc>
            <method name="DescriptiveStatistics" type="constructor" line="109">
                <params>
                    <param name="window" type="int"/>
                </params>
            </method>
            <javadoc line="112">
                Construct a DescriptiveStatistics instance with an infinite window
                  and the initial data values in double[] initialDoubleArray.
                  If initialDoubleArray is null, then this constructor corresponds to
                  DescriptiveStatistics()                
                <param>
                    initialDoubleArray the initial double[].                    
                </param>
            </javadoc>
            <method name="DescriptiveStatistics" type="constructor" line="119">
                <params>
                    <param name="initialDoubleArray" type="double[]"/>
                </params>
                <scope line="120"/>
            </method>
            <javadoc line="124">
                Copy constructor.  Construct a new DescriptiveStatistics instance that
                  is a copy of original.                
                <param>
                    original DescriptiveStatistics instance to copy                    
                </param>
                <throws>
                    NullArgumentException if original is null                    
                </throws>
            </javadoc>
            <method name="DescriptiveStatistics" type="constructor" line="130">
                <params>
                    <param name="original" type="DescriptiveStatistics"/>
                </params>
            </method>
            <javadoc line="133">
                Adds the value to the dataset. If the dataset is at the maximum size
                  (i.e., the number of stored elements equals the currently configured
                  windowSize), the first (oldest) element in the dataset is discarded
                  to make room for the new value.                
                <param>
                    v the value to be added                    
                </param>
            </javadoc>
            <method name="addValue" type="void" line="140">
                <params>
                    <param name="v" type="double"/>
                </params>
                <scope line="141">
                    <scope line="142"/>
                    <scope line="145"/>
                </scope>
                <scope line="149"/>
            </method>
            <javadoc line="153">
                Removes the most recent value from the dataset.                
                <throws>
                    MathIllegalStateException if there are no elements stored                    
                </throws>
            </javadoc>
            <method name="removeMostRecentValue" type="void" line="157">
                <scope line="158"/>
                <scope line="161"/>
            </method>
            <javadoc line="165">
                Replaces the most recently stored value with the given value.
                  There must be at least one element stored to call this method.                
                <param>
                    v the value to replace the most recent stored value                    
                </param>
                <return>
                    replaced value                    
                </return>
                <throws>
                    MathIllegalStateException if there are no elements stored                    
                </throws>
            </javadoc>
            <method name="replaceMostRecentValue" type="double" line="172">
                <params>
                    <param name="v" type="double"/>
                </params>
            </method>
            <javadoc line="175">
                Returns the &lt;a href=&quot;http://www.xycoon.com/arithmetic_mean.htm&quot;&gt;
                  arithmetic mean &lt;/a&gt; of the available values                
                <return>
                    The mean or Double.NaN if no values have been added.                    
                </return>
            </javadoc>
            <method name="getMean" type="double" line="180"/>
            <javadoc line="183">
                Returns the &lt;a href=&quot;http://www.xycoon.com/geometric_mean.htm&quot;&gt;
                  geometric mean &lt;/a&gt; of the available values                
                <return>
                    The geometricMean, Double.NaN if no values have been added,
                      or if the product of the available values is less than or equal to 0.                    
                </return>
            </javadoc>
            <method name="getGeometricMean" type="double" line="189"/>
            <javadoc line="192">
                Returns the (sample) variance of the available values.
                  &lt;p&gt;This method returns the bias-corrected sample variance (using {@code n - 1} in
                  the denominator).  Use {@link #getPopulationVariance()} for the non-bias-corrected
                  population variance.&lt;/p&gt;                
                <return>
                    The variance, Double.NaN if no values have been added
                      or 0.0 for a single value set.                    
                </return>
            </javadoc>
            <method name="getVariance" type="double" line="200"/>
            <javadoc line="203">
                Returns the &lt;a href=&quot;http://en.wikibooks.org/wiki/Statistics/Summary/Variance&quot;&gt;
                  population variance&lt;/a&gt; of the available values.                
                <return>
                    The population variance, Double.NaN if no values have been added,
                      or 0.0 for a single value set.                    
                </return>
            </javadoc>
            <method name="getPopulationVariance" type="double" line="209"/>
            <javadoc line="212">
                Returns the standard deviation of the available values.                
                <return>
                    The standard deviation, Double.NaN if no values have been added
                      or 0.0 for a single value set.                    
                </return>
            </javadoc>
            <method name="getStandardDeviation" type="double" line="217">
                <declaration name="stdDev" type="double" line="218"/>
                <scope line="219">
                    <scope line="220"/>
                    <scope line="223"/>
                </scope>
            </method>
            <javadoc line="229">
                Returns the skewness of the available values. Skewness is a
                  measure of the asymmetry of a given distribution.                
                <return>
                    The skewness, Double.NaN if no values have been added
                      or 0.0 for a value set &lt;=2.                    
                </return>
            </javadoc>
            <method name="getSkewness" type="double" line="235"/>
            <javadoc line="238">
                Returns the Kurtosis of the available values. Kurtosis is a
                  measure of the &quot;peakedness&quot; of a distribution                
                <return>
                    The kurtosis, Double.NaN if no values have been added, or 0.0
                      for a value set &lt;=3.                    
                </return>
            </javadoc>
            <method name="getKurtosis" type="double" line="244"/>
            <javadoc line="247">
                Returns the maximum of the available values                
                <return>
                    The max or Double.NaN if no values have been added.                    
                </return>
            </javadoc>
            <method name="getMax" type="double" line="251"/>
            <javadoc line="254">
                Returns the minimum of the available values                
                <return>
                    The min or Double.NaN if no values have been added.                    
                </return>
            </javadoc>
            <method name="getMin" type="double" line="258"/>
            <javadoc line="261">
                Returns the number of available values                
                <return>
                    The number of available values                    
                </return>
            </javadoc>
            <method name="getN" type="long" line="265"/>
            <javadoc line="268">
                Returns the sum of the values that have been added to Univariate.                
                <return>
                    The sum or Double.NaN if no values have been added                    
                </return>
            </javadoc>
            <method name="getSum" type="double" line="272"/>
            <javadoc line="275">
                Returns the sum of the squares of the available values.                
                <return>
                    The sum of the squares or Double.NaN if no
                      values have been added.                    
                </return>
            </javadoc>
            <method name="getSumsq" type="double" line="280"/>
            <javadoc line="283">
                Resets all statistics and storage                
            </javadoc>
            <method name="clear" type="void" line="286"/>
            <javadoc line="289">
                Returns the maximum number of values that can be stored in the
                  dataset, or INFINITE_WINDOW (-1) if there is no limit.                
                <return>
                    The current window size or -1 if its Infinite.                    
                </return>
            </javadoc>
            <method name="getWindowSize" type="int" line="294"/>
            <javadoc line="297">
                WindowSize controls the number of values that contribute to the
                  reported statistics.  For example, if windowSize is set to 3 and the
                  values {1,2,3,4,5} have been added &lt;strong&gt; in that order&lt;/strong&gt; then
                  the &lt;i&gt;available values&lt;/i&gt; are {3,4,5} and all reported statistics will
                  be based on these values. If {@code windowSize} is decreased as a result
                  of this call and there are more than the new value of elements in the
                  current dataset, values from the front of the array are discarded to
                  reduce the dataset to {@code windowSize} elements.                
                <param>
                    windowSize sets the size of the window.                    
                </param>
                <throws>
                    MathIllegalArgumentException if window size is less than 1 but
                      not equal to {@link #INFINITE_WINDOW}                    
                </throws>
            </javadoc>
            <method name="setWindowSize" type="void" line="310">
                <params>
                    <param name="windowSize" type="int"/>
                </params>
                <scope line="311"/>
                <scope line="315"/>
            </method>
            <javadoc line="319">
                Returns the current set of values in an array of double primitives.
                  The order of addition is preserved.  The returned array is a fresh
                  copy of the underlying data -- i.e., it is not a reference to the
                  stored data.                
                <return>
                    returns the current set of numbers in the order in which they
                      were added to this set                    
                </return>
            </javadoc>
            <method name="getValues" type="double[]" line="327"/>
            <javadoc line="330">
                Returns the current set of values in an array of double primitives,
                  sorted in ascending order.  The returned array is a fresh
                  copy of the underlying data -- i.e., it is not a reference to the
                  stored data.                
                <return>
                    returns the current set of
                      numbers sorted in ascending order                    
                </return>
            </javadoc>
            <method name="getSortedValues" type="double[]" line="338">
                <declaration name="sort" type="double[]" line="339"/>
            </method>
            <javadoc line="343">
                Returns the element at the specified index                
                <param>
                    index The Index of the element                    
                </param>
                <return>
                    return the element at the specified index                    
                </return>
            </javadoc>
            <method name="getElement" type="double" line="348">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="351">
                Returns an estimate for the pth percentile of the stored values.
                  &lt;p&gt;
                  The implementation provided here follows the first estimation procedure presented
                  &lt;a href=&quot;http://www.itl.nist.gov/div898/handbook/prc/section2/prc252.htm&quot;&gt;here.&lt;/a&gt;
                  &lt;/p&gt;&lt;p&gt;
                  &lt;strong&gt;Preconditions&lt;/strong&gt;:&lt;ul&gt;
                  &lt;li&gt;&lt;code&gt;0 &amp;lt; p &amp;le; 100&lt;/code&gt; (otherwise an
                  &lt;code&gt;MathIllegalArgumentException&lt;/code&gt; is thrown)&lt;/li&gt;
                  &lt;li&gt;at least one value must be stored (returns &lt;code&gt;Double.NaN
                  &lt;/code&gt; otherwise)&lt;/li&gt;
                  &lt;/ul&gt;&lt;/p&gt;                
                <param>
                    p the requested percentile (scaled from 0 - 100)                    
                </param>
                <return>
                    An estimate for the pth percentile of the stored data                    
                </return>
                <throws>
                    MathIllegalStateException if percentile implementation has been
                      overridden and the supplied implementation does not support setQuantile                    
                </throws>
                <throws>
                    MathIllegalArgumentException if p is not a valid quantile                    
                </throws>
            </javadoc>
            <method name="getPercentile" type="double" line="369">
                <params>
                    <param name="p" type="double"/>
                </params>
                <scope line="370"/>
                <scope line="373">
                    <scope line="374"/>
                    <scope line="377"/>
                    <scope line="380"/>
                    <scope line="383"/>
                </scope>
            </method>
            <javadoc line="389">
                Generates a text report displaying univariate statistics from values
                  that have been added.  Each statistic is displayed on a separate
                  line.                
                <return>
                    String with line feeds displaying statistics                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="395">
                <declaration name="outBuffer" type="StringBuilder" line="396"/>
                <declaration name="endl" type="String" line="397"/>
                <scope line="404"/>
                <scope line="407"/>
            </method>
            <javadoc line="414">
                Apply the given statistic to the data associated with this set of statistics.                
                <param>
                    stat the statistic to apply                    
                </param>
                <return>
                    the computed value of the statistic.                    
                </return>
            </javadoc>
            <method name="apply" type="double" line="419">
                <params>
                    <param name="stat" type="UnivariateStatistic"/>
                </params>
            </method>
            <javadoc line="422">
                Returns the currently configured mean implementation.                
                <return>
                    the UnivariateStatistic implementing the mean                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getMeanImpl" type="UnivariateStatistic" line="427"/>
            <javadoc line="430">
                &lt;p&gt;Sets the implementation for the mean.&lt;/p&gt;                
                <param>
                    meanImpl the UnivariateStatistic instance to use
                      for computing the mean                    
                </param>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="setMeanImpl" type="void" line="436">
                <params>
                    <param name="meanImpl" type="UnivariateStatistic"/>
                </params>
            </method>
            <javadoc line="439">
                Returns the currently configured geometric mean implementation.                
                <return>
                    the UnivariateStatistic implementing the geometric mean                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getGeometricMeanImpl" type="UnivariateStatistic" line="444"/>
            <javadoc line="447">
                &lt;p&gt;Sets the implementation for the gemoetric mean.&lt;/p&gt;                
                <param>
                    geometricMeanImpl the UnivariateStatistic instance to use
                      for computing the geometric mean                    
                </param>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="setGeometricMeanImpl" type="void" line="453">
                <params>
                    <param name="geometricMeanImpl" type="UnivariateStatistic"/>
                </params>
            </method>
            <javadoc line="456">
                Returns the currently configured kurtosis implementation.                
                <return>
                    the UnivariateStatistic implementing the kurtosis                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getKurtosisImpl" type="UnivariateStatistic" line="461"/>
            <javadoc line="464">
                &lt;p&gt;Sets the implementation for the kurtosis.&lt;/p&gt;                
                <param>
                    kurtosisImpl the UnivariateStatistic instance to use
                      for computing the kurtosis                    
                </param>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="setKurtosisImpl" type="void" line="470">
                <params>
                    <param name="kurtosisImpl" type="UnivariateStatistic"/>
                </params>
            </method>
            <javadoc line="473">
                Returns the currently configured maximum implementation.                
                <return>
                    the UnivariateStatistic implementing the maximum                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getMaxImpl" type="UnivariateStatistic" line="478"/>
            <javadoc line="481">
                &lt;p&gt;Sets the implementation for the maximum.&lt;/p&gt;                
                <param>
                    maxImpl the UnivariateStatistic instance to use
                      for computing the maximum                    
                </param>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="setMaxImpl" type="void" line="487">
                <params>
                    <param name="maxImpl" type="UnivariateStatistic"/>
                </params>
            </method>
            <javadoc line="490">
                Returns the currently configured minimum implementation.                
                <return>
                    the UnivariateStatistic implementing the minimum                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getMinImpl" type="UnivariateStatistic" line="495"/>
            <javadoc line="498">
                &lt;p&gt;Sets the implementation for the minimum.&lt;/p&gt;                
                <param>
                    minImpl the UnivariateStatistic instance to use
                      for computing the minimum                    
                </param>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="setMinImpl" type="void" line="504">
                <params>
                    <param name="minImpl" type="UnivariateStatistic"/>
                </params>
            </method>
            <javadoc line="507">
                Returns the currently configured percentile implementation.                
                <return>
                    the UnivariateStatistic implementing the percentile                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getPercentileImpl" type="UnivariateStatistic" line="512"/>
            <javadoc line="515">
                Sets the implementation to be used by {@link #getPercentile(double)}.
                  The supplied &lt;code&gt;UnivariateStatistic&lt;/code&gt; must provide a
                  &lt;code&gt;setQuantile(double)&lt;/code&gt; method; otherwise
                  &lt;code&gt;IllegalArgumentException&lt;/code&gt; is thrown.                
                <param>
                    percentileImpl the percentileImpl to set                    
                </param>
                <throws>
                    MathIllegalArgumentException if the supplied implementation does not
                      provide a <code>setQuantile</code> method                    
                </throws>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="setPercentileImpl" type="void" line="525">
                <params>
                    <param name="percentileImpl" type="UnivariateStatistic"/>
                </params>
                <scope line="526"/>
                <scope line="529"/>
                <scope line="532"/>
                <scope line="535"/>
            </method>
            <javadoc line="540">
                Returns the currently configured skewness implementation.                
                <return>
                    the UnivariateStatistic implementing the skewness                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getSkewnessImpl" type="UnivariateStatistic" line="545"/>
            <javadoc line="548">
                &lt;p&gt;Sets the implementation for the skewness.&lt;/p&gt;                
                <param>
                    skewnessImpl the UnivariateStatistic instance to use
                      for computing the skewness                    
                </param>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="setSkewnessImpl" type="void" line="554">
                <params>
                    <param name="skewnessImpl" type="UnivariateStatistic"/>
                </params>
            </method>
            <javadoc line="557">
                Returns the currently configured variance implementation.                
                <return>
                    the UnivariateStatistic implementing the variance                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getVarianceImpl" type="UnivariateStatistic" line="562"/>
            <javadoc line="565">
                &lt;p&gt;Sets the implementation for the variance.&lt;/p&gt;                
                <param>
                    varianceImpl the UnivariateStatistic instance to use
                      for computing the variance                    
                </param>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="setVarianceImpl" type="void" line="571">
                <params>
                    <param name="varianceImpl" type="UnivariateStatistic"/>
                </params>
            </method>
            <javadoc line="574">
                Returns the currently configured sum of squares implementation.                
                <return>
                    the UnivariateStatistic implementing the sum of squares                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getSumsqImpl" type="UnivariateStatistic" line="579"/>
            <javadoc line="582">
                &lt;p&gt;Sets the implementation for the sum of squares.&lt;/p&gt;                
                <param>
                    sumsqImpl the UnivariateStatistic instance to use
                      for computing the sum of squares                    
                </param>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="setSumsqImpl" type="void" line="588">
                <params>
                    <param name="sumsqImpl" type="UnivariateStatistic"/>
                </params>
            </method>
            <javadoc line="591">
                Returns the currently configured sum implementation.                
                <return>
                    the UnivariateStatistic implementing the sum                    
                </return>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="getSumImpl" type="UnivariateStatistic" line="596"/>
            <javadoc line="599">
                &lt;p&gt;Sets the implementation for the sum.&lt;/p&gt;                
                <param>
                    sumImpl the UnivariateStatistic instance to use
                      for computing the sum                    
                </param>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <method name="setSumImpl" type="void" line="605">
                <params>
                    <param name="sumImpl" type="UnivariateStatistic"/>
                </params>
            </method>
            <javadoc line="608">
                Returns a copy of this DescriptiveStatistics instance with the same internal state.                
                <return>
                    a copy of this                    
                </return>
            </javadoc>
            <method name="copy" type="DescriptiveStatistics" line="612">
                <declaration name="result" type="DescriptiveStatistics" line="613"/>
            </method>
            <javadoc line="617">
                Copies source to dest.
                  &lt;p&gt;Neither source nor dest can be null.&lt;/p&gt;                
                <param>
                    source DescriptiveStatistics to copy                    
                </param>
                <param>
                    dest DescriptiveStatistics to copy to                    
                </param>
                <throws>
                    NullArgumentException if either source or dest is null                    
                </throws>
            </javadoc>
            <method name="copy" type="void" line="624">
                <params>
                    <param name="source" type="DescriptiveStatistics"/>
                    <param name="dest" type="DescriptiveStatistics"/>
                </params>
            </method>
        </class>
    </source>