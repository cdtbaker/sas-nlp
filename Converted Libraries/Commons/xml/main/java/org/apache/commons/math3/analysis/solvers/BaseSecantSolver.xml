<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.solvers">
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.analysis.UnivariateFunction"/>
        <import package="org.apache.commons.math3.exception.ConvergenceException"/>
        <import package="org.apache.commons.math3.exception.MathInternalError"/>
        <class name="BaseSecantSolver" line="25">
            <extends class="AbstractUnivariateSolver"/>
            <implements interface="BracketedUnivariateSolver">
                <type_params>
                    <type_param name="UnivariateFunction"/>
                </type_params>
            </implements>
            <javadoc line="25">
                Base class for all bracketing &lt;em&gt;Secant&lt;/em&gt;-based methods for root-finding
                  (approximating a zero of a univariate real function).
                  &lt;p&gt;Implementation of the {@link RegulaFalsiSolver &lt;em&gt;Regula Falsi&lt;/em&gt;} and{@link IllinoisSolver &lt;em&gt;Illinois&lt;/em&gt;} methods is based on the
                  following article: M. Dowell and P. Jarratt,
                  &lt;em&gt;A modified regula falsi method for computing the root of an
                  equation&lt;/em&gt;, BIT Numerical Mathematics, volume 11, number 2,
                  pages 168-174, Springer, 1971.&lt;/p&gt;
                  &lt;p&gt;Implementation of the {@link PegasusSolver &lt;em&gt;Pegasus&lt;/em&gt;} method is
                  based on the following article: M. Dowell and P. Jarratt,
                  &lt;em&gt;The &quot;Pegasus&quot; method for computing the root of an equation&lt;/em&gt;,
                  BIT Numerical Mathematics, volume 12, number 4, pages 503-508, Springer,
                  1972.&lt;/p&gt;
                  &lt;p&gt;The {@link SecantSolver &lt;em&gt;Secant&lt;/em&gt;} method is &lt;em&gt;not&lt;/em&gt; a
                  bracketing method, so it is not implemented here. It has a separate
                  implementation.&lt;/p&gt;                
                <since>
                    3.0                    
                </since>
                <version>
                    $Id: BaseSecantSolver.java 1455194 2013-03-11 15:45:54Z luc $                    
                </version>
            </javadoc>
            <declaration name="DEFAULT_ABSOLUTE_ACCURACY" type="double" line="53"/>
            <javadoc line="53">
                Default absolute accuracy.                
            </javadoc>
            <declaration name="allowed" type="AllowedSolution" line="56"/>
            <javadoc line="56">
                The kinds of solutions that the algorithm may accept.                
            </javadoc>
            <declaration name="method" type="Method" line="59"/>
            <javadoc line="59">
                The &lt;em&gt;Secant&lt;/em&gt;-based root-finding method to use.                
            </javadoc>
            <javadoc line="62">
                Construct a solver.                
                <param>
                    absoluteAccuracy Absolute accuracy.                    
                </param>
                <param>
                    method &lt;em&gt;Secant&lt;/em&gt;-based root-finding method to use.                    
                </param>
            </javadoc>
            <method name="BaseSecantSolver" type="constructor" line="68">
                <params>
                    <param name="absoluteAccuracy" type="double"/>
                    <param name="method" type="Method"/>
                </params>
            </method>
            <javadoc line="74">
                Construct a solver.                
                <param>
                    relativeAccuracy Relative accuracy.                    
                </param>
                <param>
                    absoluteAccuracy Absolute accuracy.                    
                </param>
                <param>
                    method &lt;em&gt;Secant&lt;/em&gt;-based root-finding method to use.                    
                </param>
            </javadoc>
            <method name="BaseSecantSolver" type="constructor" line="83">
                <params>
                    <param name="relativeAccuracy" type="double"/>
                    <param name="absoluteAccuracy" type="double"/>
                    <param name="method" type="Method"/>
                </params>
            </method>
            <javadoc line="89">
                Construct a solver.                
                <param>
                    relativeAccuracy Maximum relative error.                    
                </param>
                <param>
                    absoluteAccuracy Maximum absolute error.                    
                </param>
                <param>
                    functionValueAccuracy Maximum function value error.                    
                </param>
                <param>
                    method &lt;em&gt;Secant&lt;/em&gt;-based root-finding method to use                    
                </param>
            </javadoc>
            <method name="BaseSecantSolver" type="constructor" line="100">
                <params>
                    <param name="relativeAccuracy" type="double"/>
                    <param name="absoluteAccuracy" type="double"/>
                    <param name="functionValueAccuracy" type="double"/>
                    <param name="method" type="Method"/>
                </params>
            </method>
            <javadoc line="106">
                {@inheritDoc}                
            </javadoc>
            <method name="solve" type="double" line="109">
                <params>
                    <param name="maxEval" type="int"/>
                    <param name="f" type="UnivariateFunction"/>
                    <param name="min" type="double"/>
                    <param name="max" type="double"/>
                    <param name="allowedSolution" type="AllowedSolution"/>
                </params>
            </method>
            <javadoc line="113">
                {@inheritDoc}                
            </javadoc>
            <method name="solve" type="double" line="116">
                <params>
                    <param name="maxEval" type="int"/>
                    <param name="f" type="UnivariateFunction"/>
                    <param name="min" type="double"/>
                    <param name="max" type="double"/>
                    <param name="startValue" type="double"/>
                    <param name="allowedSolution" type="AllowedSolution"/>
                </params>
            </method>
            <javadoc line="121">
                {@inheritDoc}                
            </javadoc>
            <method name="solve" type="double" line="124">
                <params>
                    <param name="maxEval" type="int"/>
                    <param name="f" type="UnivariateFunction"/>
                    <param name="min" type="double"/>
                    <param name="max" type="double"/>
                    <param name="startValue" type="double"/>
                </params>
            </method>
            <javadoc line="128">
                {@inheritDoc}                
                <throws>
                    ConvergenceException if the algorithm failed due to finite
                      precision.                    
                </throws>
            </javadoc>
            <method name="doSolve" type="double" line="136">
                <comment line="138">
                    Get initial solution                    
                </comment>
                <comment line="144">
                    If one of the bounds is the exact root, return it. Since these are
                     not under-approximations or over-approximations, we can return them
                     regardless of the allowed solutions.                    
                </comment>
                <comment line="154">
                    Verify bracketing of initial solution.                    
                </comment>
                <comment line="157">
                    Get accuracies.                    
                </comment>
                <comment line="162">
                    Keep track of inverted intervals, meaning that the left bound is
                     larger than the right bound.                    
                </comment>
                <comment line="166">
                    Keep finding better approximations.                    
                </comment>
                <comment line="168">
                    Calculate the next approximation.                    
                </comment>
                <comment line="172">
                    If the new approximation is the exact root, return it. Since
                     this is not an under-approximation or an over-approximation,
                     we can return it regardless of the allowed solutions.                    
                </comment>
                <comment line="179">
                    Update the bounds with the new approximation.                    
                </comment>
                <comment line="181">
                    The value of x1 has switched to the other bound, thus inverting
                     the interval.                    
                </comment>
                <comment line="195">
                    Detect early that algorithm is stuck, instead of waiting
                     for the maximum number of iterations to be exceeded.                    
                </comment>
                <comment line="202">
                    Should never happen.                    
                </comment>
                <comment line="206">
                    Update from [x0, x1] to [x0, x].                    
                </comment>
                <comment line="210">
                    If the function value of the last approximation is too small,
                     given the function value accuracy, then we can&apos;t get closer to
                     the root than we already are.                    
                </comment>
                <comment line="242">
                    If the current interval is within the given accuracies, we
                     are satisfied with the current approximation.                    
                </comment>
                <declaration name="x0" type="double" line="138"/>
                <declaration name="x1" type="double" line="139"/>
                <declaration name="f0" type="double" line="140"/>
                <declaration name="f1" type="double" line="141"/>
                <scope line="146"/>
                <scope line="149"/>
                <declaration name="ftol" type="double" line="157"/>
                <declaration name="atol" type="double" line="158"/>
                <declaration name="rtol" type="double" line="159"/>
                <declaration name="inverted" type="boolean" line="163"/>
                <scope line="166">
                    <declaration name="x" type="double" line="168"/>
                    <declaration name="fx" type="double" line="169"/>
                    <scope line="174"/>
                    <scope line="179"/>
                    <scope line="185">
                        <scope line="196"/>
                    </scope>
                    <scope line="212">
                        <scope line="217"/>
                        <scope line="222"/>
                        <scope line="227"/>
                        <scope line="232"/>
                    </scope>
                    <scope line="244"/>
                </scope>
            </method>
            <javadoc line="263">
                &lt;em&gt;Secant&lt;/em&gt;-based root-finding methods.                
            </javadoc>
            <javadoc line="266">
                The {@link RegulaFalsiSolver &lt;em&gt;Regula Falsi&lt;/em&gt;} or
                  &lt;em&gt;False Position&lt;/em&gt; method.                
            </javadoc>
            <javadoc line="272">
                The {@link IllinoisSolver &lt;em&gt;Illinois&lt;/em&gt;} method.                
            </javadoc>
            <javadoc line="275">
                The {@link PegasusSolver &lt;em&gt;Pegasus&lt;/em&gt;} method.                
            </javadoc>
        </class>
    </source>