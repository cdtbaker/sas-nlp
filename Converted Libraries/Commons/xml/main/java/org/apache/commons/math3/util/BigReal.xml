<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.util">
        <import package="java.io.Serializable"/>
        <import package="java.math.BigDecimal"/>
        <import package="java.math.BigInteger"/>
        <import package="java.math.MathContext"/>
        <import package="java.math.RoundingMode"/>
        <import package="org.apache.commons.math3.Field"/>
        <import package="org.apache.commons.math3.FieldElement"/>
        <import package="org.apache.commons.math3.exception.MathArithmeticException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <class name="BigReal" line="11">
            <implements interface="FieldElement">
                <type_params>
                    <type_param name="BigReal"/>
                </type_params>
            </implements>
            <implements interface="Comparable">
                <type_params>
                    <type_param name="BigReal"/>
                </type_params>
            </implements>
            <implements interface="Serializable"/>
            <javadoc line="11">
                Arbitrary precision decimal number.
                  &lt;p&gt;
                  This class is a simple wrapper around the standard &lt;code&gt;BigDecimal&lt;/code&gt;
                  in order to implement the {@link FieldElement} interface.
                  &lt;/p&gt;                
                <since>
                    2.0                    
                </since>
                <version>
                    $Id: BigReal.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
            </javadoc>
            <declaration name="ZERO" type="BigReal" line="21"/>
            <javadoc line="21">
                A big real representing 0.                
            </javadoc>
            <declaration name="ONE" type="BigReal" line="25"/>
            <javadoc line="25">
                A big real representing 1.                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="29"/>
            <javadoc line="29">
                Serializable version identifier.                
            </javadoc>
            <declaration name="d" type="BigDecimal" line="33"/>
            <javadoc line="33">
                Underlying BigDecimal.                
            </javadoc>
            <declaration name="roundingMode" type="RoundingMode" line="37"/>
            <javadoc line="37">
                Rounding mode for divisions.                
            </javadoc>
            <declaration name="scale" type="int" line="41"/>
            <javadoc line="41">
                BigDecimal scale                
            </javadoc>
            <javadoc line="45">
                Build an instance from a BigDecimal.                
                <param>
                    val value of the instance                    
                </param>
            </javadoc>
            <method name="BigReal" type="constructor" line="49">
                <params>
                    <param name="val" type="BigDecimal"/>
                </params>
            </method>
            <javadoc line="52">
                Build an instance from a BigInteger.                
                <param>
                    val value of the instance                    
                </param>
            </javadoc>
            <method name="BigReal" type="constructor" line="56">
                <params>
                    <param name="val" type="BigInteger"/>
                </params>
            </method>
            <javadoc line="59">
                Build an instance from an unscaled BigInteger.                
                <param>
                    unscaledVal unscaled value                    
                </param>
                <param>
                    scale scale to use                    
                </param>
            </javadoc>
            <method name="BigReal" type="constructor" line="64">
                <params>
                    <param name="unscaledVal" type="BigInteger"/>
                    <param name="scale" type="int"/>
                </params>
            </method>
            <javadoc line="67">
                Build an instance from an unscaled BigInteger.                
                <param>
                    unscaledVal unscaled value                    
                </param>
                <param>
                    scale scale to use                    
                </param>
                <param>
                    mc to used                    
                </param>
            </javadoc>
            <method name="BigReal" type="constructor" line="73">
                <params>
                    <param name="unscaledVal" type="BigInteger"/>
                    <param name="scale" type="int"/>
                    <param name="mc" type="MathContext"/>
                </params>
            </method>
            <javadoc line="76">
                Build an instance from a BigInteger.                
                <param>
                    val value of the instance                    
                </param>
                <param>
                    mc context to use                    
                </param>
            </javadoc>
            <method name="BigReal" type="constructor" line="81">
                <params>
                    <param name="val" type="BigInteger"/>
                    <param name="mc" type="MathContext"/>
                </params>
            </method>
            <javadoc line="84">
                Build an instance from a characters representation.                
                <param>
                    in character representation of the value                    
                </param>
            </javadoc>
            <method name="BigReal" type="constructor" line="88">
                <params>
                    <param name="in" type="char[]"/>
                </params>
            </method>
            <javadoc line="91">
                Build an instance from a characters representation.                
                <param>
                    in character representation of the value                    
                </param>
                <param>
                    offset offset of the first character to analyze                    
                </param>
                <param>
                    len length of the array slice to analyze                    
                </param>
            </javadoc>
            <method name="BigReal" type="constructor" line="97">
                <params>
                    <param name="in" type="char[]"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                </params>
            </method>
            <javadoc line="100">
                Build an instance from a characters representation.                
                <param>
                    in character representation of the value                    
                </param>
                <param>
                    offset offset of the first character to analyze                    
                </param>
                <param>
                    len length of the array slice to analyze                    
                </param>
                <param>
                    mc context to use                    
                </param>
            </javadoc>
            <method name="BigReal" type="constructor" line="107">
                <params>
                    <param name="in" type="char[]"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                    <param name="mc" type="MathContext"/>
                </params>
            </method>
            <javadoc line="110">
                Build an instance from a characters representation.                
                <param>
                    in character representation of the value                    
                </param>
                <param>
                    mc context to use                    
                </param>
            </javadoc>
            <method name="BigReal" type="constructor" line="115">
                <params>
                    <param name="in" type="char[]"/>
                    <param name="mc" type="MathContext"/>
                </params>
            </method>
            <javadoc line="118">
                Build an instance from a double.                
                <param>
                    val value of the instance                    
                </param>
            </javadoc>
            <method name="BigReal" type="constructor" line="122">
                <params>
                    <param name="val" type="double"/>
                </params>
            </method>
            <javadoc line="125">
                Build an instance from a double.                
                <param>
                    val value of the instance                    
                </param>
                <param>
                    mc context to use                    
                </param>
            </javadoc>
            <method name="BigReal" type="constructor" line="130">
                <params>
                    <param name="val" type="double"/>
                    <param name="mc" type="MathContext"/>
                </params>
            </method>
            <javadoc line="133">
                Build an instance from an int.                
                <param>
                    val value of the instance                    
                </param>
            </javadoc>
            <method name="BigReal" type="constructor" line="137">
                <params>
                    <param name="val" type="int"/>
                </params>
            </method>
            <javadoc line="140">
                Build an instance from an int.                
                <param>
                    val value of the instance                    
                </param>
                <param>
                    mc context to use                    
                </param>
            </javadoc>
            <method name="BigReal" type="constructor" line="145">
                <params>
                    <param name="val" type="int"/>
                    <param name="mc" type="MathContext"/>
                </params>
            </method>
            <javadoc line="148">
                Build an instance from a long.                
                <param>
                    val value of the instance                    
                </param>
            </javadoc>
            <method name="BigReal" type="constructor" line="152">
                <params>
                    <param name="val" type="long"/>
                </params>
            </method>
            <javadoc line="155">
                Build an instance from a long.                
                <param>
                    val value of the instance                    
                </param>
                <param>
                    mc context to use                    
                </param>
            </javadoc>
            <method name="BigReal" type="constructor" line="160">
                <params>
                    <param name="val" type="long"/>
                    <param name="mc" type="MathContext"/>
                </params>
            </method>
            <javadoc line="163">
                Build an instance from a String representation.                
                <param>
                    val character representation of the value                    
                </param>
            </javadoc>
            <method name="BigReal" type="constructor" line="167">
                <params>
                    <param name="val" type="String"/>
                </params>
            </method>
            <javadoc line="170">
                Build an instance from a String representation.                
                <param>
                    val character representation of the value                    
                </param>
                <param>
                    mc context to use                    
                </param>
            </javadoc>
            <method name="BigReal" type="constructor" line="175">
                <params>
                    <param name="val" type="String"/>
                    <param name="mc" type="MathContext"/>
                </params>
            </method>
            <javadoc line="178">
                Gets the rounding mode for division operations
                  The default is {@code RoundingMode.HALF_UP}                
                <return>
                    the rounding mode.                    
                </return>
                <since>
                    2.1                    
                </since>
            </javadoc>
            <method name="getRoundingMode" type="RoundingMode" line="184"/>
            <javadoc line="187">
                Sets the rounding mode for decimal divisions.                
                <param>
                    roundingMode rounding mode for decimal divisions                    
                </param>
                <since>
                    2.1                    
                </since>
            </javadoc>
            <method name="setRoundingMode" type="void" line="192">
                <params>
                    <param name="roundingMode" type="RoundingMode"/>
                </params>
            </method>
            <javadoc line="195">
                Sets the scale for division operations.
                  The default is 64                
                <return>
                    the scale                    
                </return>
                <since>
                    2.1                    
                </since>
            </javadoc>
            <method name="getScale" type="int" line="201"/>
            <javadoc line="204">
                Sets the scale for division operations.                
                <param>
                    scale scale for division operations                    
                </param>
                <since>
                    2.1                    
                </since>
            </javadoc>
            <method name="setScale" type="void" line="209">
                <params>
                    <param name="scale" type="int"/>
                </params>
            </method>
            <javadoc line="212">
                {@inheritDoc}                
            </javadoc>
            <method name="add" type="BigReal" line="215">
                <params>
                    <param name="a" type="BigReal"/>
                </params>
            </method>
            <javadoc line="218">
                {@inheritDoc}                
            </javadoc>
            <method name="subtract" type="BigReal" line="221">
                <params>
                    <param name="a" type="BigReal"/>
                </params>
            </method>
            <javadoc line="224">
                {@inheritDoc}                
            </javadoc>
            <method name="negate" type="BigReal" line="227"/>
            <javadoc line="230">
                {@inheritDoc}                
                <throws>
                    MathArithmeticException if {@code a} is zero                    
                </throws>
            </javadoc>
            <method name="divide" type="BigReal" line="234">
                <params>
                    <param name="a" type="BigReal"/>
                </params>
                <scope line="235"/>
                <scope line="238"/>
            </method>
            <javadoc line="242">
                {@inheritDoc}                
                <throws>
                    MathArithmeticException if {@code this} is zero                    
                </throws>
            </javadoc>
            <method name="reciprocal" type="BigReal" line="246">
                <scope line="247"/>
                <scope line="250"/>
            </method>
            <javadoc line="254">
                {@inheritDoc}                
            </javadoc>
            <method name="multiply" type="BigReal" line="257">
                <params>
                    <param name="a" type="BigReal"/>
                </params>
            </method>
            <javadoc line="260">
                {@inheritDoc}                
            </javadoc>
            <method name="multiply" type="BigReal" line="263">
                <params>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="266">
                {@inheritDoc}                
            </javadoc>
            <method name="compareTo" type="int" line="269">
                <params>
                    <param name="a" type="BigReal"/>
                </params>
            </method>
            <javadoc line="272">
                Get the double value corresponding to the instance.                
                <return>
                    double value corresponding to the instance                    
                </return>
            </javadoc>
            <method name="doubleValue" type="double" line="276"/>
            <javadoc line="279">
                Get the BigDecimal value corresponding to the instance.                
                <return>
                    BigDecimal value corresponding to the instance                    
                </return>
            </javadoc>
            <method name="bigDecimalValue" type="BigDecimal" line="283"/>
            <javadoc line="286">
                {@inheritDoc}                
            </javadoc>
            <method name="equals" type="boolean" line="289">
                <params>
                    <param name="other" type="Object"/>
                </params>
                <scope line="290"/>
                <scope line="293"/>
            </method>
            <javadoc line="298">
                {@inheritDoc}                
            </javadoc>
            <method name="hashCode" type="int" line="301"/>
            <javadoc line="304">
                {@inheritDoc}                
            </javadoc>
            <method name="getField" type="Field<BigReal>" line="307"/>
        </class>
    </source>