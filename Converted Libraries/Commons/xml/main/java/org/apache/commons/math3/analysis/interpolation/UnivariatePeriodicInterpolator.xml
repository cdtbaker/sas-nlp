<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.interpolation">
        <import package="org.apache.commons.math3.analysis.UnivariateFunction"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <import package="org.apache.commons.math3.util.MathArrays"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.NonMonotonicSequenceException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <class name="UnivariatePeriodicInterpolator" line="26">
            <implements interface="UnivariateInterpolator"/>
            <javadoc line="26">
                Adapter for classes implementing the {@link UnivariateInterpolator}interface.
                  The data to be interpolated is assumed to be periodic. Thus values that are
                  outside of the range can be passed to the interpolation function: They will
                  be wrapped into the initial range before being passed to the class that
                  actually computes the interpolation.                
                <version>
                    $Id: UnivariatePeriodicInterpolator.java 1459739 2013-03-22 11:58:11Z erans $                    
                </version>
            </javadoc>
            <declaration name="DEFAULT_EXTEND" type="int" line="38"/>
            <javadoc line="38">
                Default number of extension points of the samples array.                
            </javadoc>
            <declaration name="interpolator" type="UnivariateInterpolator" line="40"/>
            <javadoc line="40">
                Interpolator.                
            </javadoc>
            <declaration name="period" type="double" line="42"/>
            <javadoc line="42">
                Period.                
            </javadoc>
            <declaration name="extend" type="int" line="44"/>
            <javadoc line="44">
                Number of extension points.                
            </javadoc>
            <javadoc line="47">
                Builds an interpolator.                
                <param>
                    interpolator Interpolator.                    
                </param>
                <param>
                    period Period.                    
                </param>
                <param>
                    extend Number of points to be appended at the beginning and
                      end of the sample arrays in order to avoid interpolation failure at
                      the (periodic) boundaries of the orginal interval. The value is the
                      number of sample points which the original {@code interpolator} needs
                      on each side of the interpolated point.                    
                </param>
            </javadoc>
            <method name="UnivariatePeriodicInterpolator" type="constructor" line="60">
                <params>
                    <param name="interpolator" type="UnivariateInterpolator"/>
                    <param name="period" type="double"/>
                    <param name="extend" type="int"/>
                </params>
            </method>
            <javadoc line="66">
                Builds an interpolator.
                  Uses {@link #DEFAULT_EXTEND} as the number of extension points on each side
                  of the original abscissae range.                
                <param>
                    interpolator Interpolator.                    
                </param>
                <param>
                    period Period.                    
                </param>
            </javadoc>
            <method name="UnivariatePeriodicInterpolator" type="constructor" line="75">
                <params>
                    <param name="interpolator" type="UnivariateInterpolator"/>
                    <param name="period" type="double"/>
                </params>
            </method>
            <javadoc line="79">
                {@inheritDoc}                
                <throws>
                    NumberIsTooSmallException if the number of extension points
                      is larger than the size of {@code xval}.                    
                </throws>
            </javadoc>
            <method name="interpolate" type="UnivariateFunction" line="87">
                <params>
                    <param name="xval" type="double[]"/>
                    <param name="yval" type="double[]"/>
                </params>
                <comment line="104">
                    Wrap to enable interpolation at the boundaries.                    
                </comment>
                <scope line="88"/>
                <declaration name="offset" type="double" line="93"/>
                <declaration name="len" type="int" line="95"/>
                <declaration name="x" type="double[]" line="96"/>
                <declaration name="y" type="double[]" line="97"/>
                <scope line="98">
                    <declaration name="index" type="int" line="99"/>
                </scope>
                <scope line="105">
                    <declaration name="index" type="int" line="106"/>
                </scope>
                <declaration name="f" type="UnivariateFunction" line="117"/>
                <anonymous_class line="118">
                    <method name="value" type="double" line="119">
                        <params>
                            <param name="x" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
        </class>
    </source>