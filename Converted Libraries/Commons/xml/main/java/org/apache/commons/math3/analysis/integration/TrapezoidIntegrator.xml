<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.integration">
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.MaxCountExceededException"/>
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.exception.TooManyEvaluationsException"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="TrapezoidIntegrator" line="9">
            <extends class="BaseAbstractUnivariateIntegrator"/>
            <javadoc line="9">
                Implements the &lt;a href=&quot;http://mathworld.wolfram.com/TrapezoidalRule.html&quot;&gt;
                  Trapezoid Rule&lt;/a&gt; for integration of real univariate functions. For
                  reference, see &lt;b&gt;Introduction to Numerical Analysis&lt;/b&gt;, ISBN 038795452X,
                  chapter 3.
                  &lt;p&gt;
                  The function should be integrable.&lt;/p&gt;                
                <version>
                    $Id: TrapezoidIntegrator.java 1455194 2013-03-11 15:45:54Z luc $                    
                </version>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="TRAPEZOID_MAX_ITERATIONS_COUNT" type="int" line="20"/>
            <javadoc line="20">
                Maximum number of iterations for trapezoid.                
            </javadoc>
            <declaration name="s" type="double" line="24"/>
            <javadoc line="24">
                Intermediate result.                
            </javadoc>
            <javadoc line="28">
                Build a trapezoid integrator with given accuracies and iterations counts.                
                <param>
                    relativeAccuracy relative accuracy of the result                    
                </param>
                <param>
                    absoluteAccuracy absolute accuracy of the result                    
                </param>
                <param>
                    minimalIterationCount minimum number of iterations                    
                </param>
                <param>
                    maximalIterationCount maximum number of iterations
                      (must be less than or equal to {@link #TRAPEZOID_MAX_ITERATIONS_COUNT}                    
                </param>
                <exception>
                    NotStrictlyPositiveException if minimal number of iterations
                      is not strictly positive                    
                </exception>
                <exception>
                    NumberIsTooSmallException if maximal number of iterations
                      is lesser than or equal to the minimal number of iterations                    
                </exception>
                <exception>
                    NumberIsTooLargeException if maximal number of iterations
                      is greater than {@link #TRAPEZOID_MAX_ITERATIONS_COUNT}                    
                </exception>
            </javadoc>
            <method name="TrapezoidIntegrator" type="constructor" line="42">
                <params>
                    <param name="relativeAccuracy" type="double"/>
                    <param name="absoluteAccuracy" type="double"/>
                    <param name="minimalIterationCount" type="int"/>
                    <param name="maximalIterationCount" type="int"/>
                </params>
                <scope line="44"/>
            </method>
            <javadoc line="48">
                Build a trapezoid integrator with given iteration counts.                
                <param>
                    minimalIterationCount minimum number of iterations                    
                </param>
                <param>
                    maximalIterationCount maximum number of iterations
                      (must be less than or equal to {@link #TRAPEZOID_MAX_ITERATIONS_COUNT}                    
                </param>
                <exception>
                    NotStrictlyPositiveException if minimal number of iterations
                      is not strictly positive                    
                </exception>
                <exception>
                    NumberIsTooSmallException if maximal number of iterations
                      is lesser than or equal to the minimal number of iterations                    
                </exception>
                <exception>
                    NumberIsTooLargeException if maximal number of iterations
                      is greater than {@link #TRAPEZOID_MAX_ITERATIONS_COUNT}                    
                </exception>
            </javadoc>
            <method name="TrapezoidIntegrator" type="constructor" line="60">
                <params>
                    <param name="minimalIterationCount" type="int"/>
                    <param name="maximalIterationCount" type="int"/>
                </params>
                <scope line="62"/>
            </method>
            <javadoc line="66">
                Construct a trapezoid integrator with default settings.
                  (max iteration count set to {@link #TRAPEZOID_MAX_ITERATIONS_COUNT})                
            </javadoc>
            <method name="TrapezoidIntegrator" type="constructor" line="70"/>
            <javadoc line="73">
                Compute the n-th stage integral of trapezoid rule. This function
                  should only be called by API &lt;code&gt;integrate()&lt;/code&gt; in the package.
                  To save time it does not verify arguments - caller does.
                  &lt;p&gt;
                  The interval is divided equally into 2^n sections rather than an
                  arbitrary m sections because this configuration can best utilize the
                  already computed values.&lt;/p&gt;                
                <param>
                    baseIntegrator integrator holding integration parameters                    
                </param>
                <param>
                    n the stage of 1/2 refinement, n = 0 is no refinement                    
                </param>
                <return>
                    the value of n-th stage integral                    
                </return>
                <throws>
                    TooManyEvaluationsException if the maximal number of evaluations
                      is exceeded.                    
                </throws>
            </javadoc>
            <method name="stage" type="double" line="87">
                <params>
                    <param name="baseIntegrator" type="BaseAbstractUnivariateIntegrator"/>
                    <param name="n" type="int"/>
                </params>
                <scope line="88">
                    <declaration name="max" type="double" line="89"/>
                    <declaration name="min" type="double" line="90"/>
                </scope>
                <scope line="94">
                    <declaration name="np" type="long" line="95"/>
                    <declaration name="sum" type="double" line="96"/>
                    <declaration name="max" type="double" line="97"/>
                    <declaration name="min" type="double" line="98"/>
                    <declaration name="spacing" type="double" line="99"/>
                    <declaration name="x" type="double" line="100"/>
                    <scope line="101"/>
                </scope>
            </method>
            <javadoc line="109">
                {@inheritDoc}                
            </javadoc>
            <method name="doIntegrate" type="double" line="112">
                <declaration name="oldt" type="double" line="113"/>
                <scope line="115">
                    <declaration name="i" type="int" line="116"/>
                    <declaration name="t" type="double" line="117"/>
                    <scope line="118">
                        <declaration name="delta" type="double" line="119"/>
                        <declaration name="rLimit" type="double" line="120"/>
                        <scope line="121"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>