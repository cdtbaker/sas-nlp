<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.interpolation">
        <import package="java.io.Serializable"/>
        <import package="org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm"/>
        <import package="org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.exception.NonMonotonicSequenceException"/>
        <class name="DividedDifferenceInterpolator" line="8">
            <implements interface="UnivariateInterpolator"/>
            <implements interface="Serializable"/>
            <javadoc line="8">
                Implements the &lt;a href=&quot;
                  http://mathworld.wolfram.com/NewtonsDividedDifferenceInterpolationFormula.html&quot;&gt;
                  Divided Difference Algorithm&lt;/a&gt; for interpolation of real univariate
                  functions. For reference, see &lt;b&gt;Introduction to Numerical Analysis&lt;/b&gt;,
                  ISBN 038795452X, chapter 2.
                  &lt;p&gt;
                  The actual code of Neville&apos;s evaluation is in PolynomialFunctionLagrangeForm,
                  this class provides an easy-to-use interface to it.&lt;/p&gt;                
                <version>
                    $Id: DividedDifferenceInterpolator.java 1385313 2012-09-16 16:35:23Z tn $                    
                </version>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="21"/>
            <javadoc line="21">
                serializable version identifier                
            </javadoc>
            <javadoc line="25">
                Compute an interpolating function for the dataset.                
                <param>
                    x Interpolating points array.                    
                </param>
                <param>
                    y Interpolating values array.                    
                </param>
                <return>
                    a function which interpolates the dataset.                    
                </return>
                <throws>
                    DimensionMismatchException if the array lengths are different.                    
                </throws>
                <throws>
                    NumberIsTooSmallException if the number of points is less than 2.                    
                </throws>
                <throws>
                    NonMonotonicSequenceException if {@code x} is not sorted in
                      strictly increasing order.                    
                </throws>
            </javadoc>
            <method name="interpolate" type="PolynomialFunctionNewtonForm" line="35">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
                <declaration name="c" type="double[]" line="37"/>
                <declaration name="a" type="double[]" line="39"/>
            </method>
            <javadoc line="42">
                Return a copy of the divided difference array.
                  &lt;p&gt;
                  The divided difference array is defined recursively by &lt;pre&gt;
                  f[x0] = f(x0)
                  f[x0,x1,...,xk] = (f[x1,...,xk] - f[x0,...,x[k-1]]) / (xk - x0)
                  &lt;/pre&gt;&lt;/p&gt;
                  &lt;p&gt;
                  The computational complexity is O(N^2).&lt;/p&gt;                
                <param>
                    x Interpolating points array.                    
                </param>
                <param>
                    y Interpolating values array.                    
                </param>
                <return>
                    a fresh copy of the divided difference array.                    
                </return>
                <throws>
                    DimensionMismatchException if the array lengths are different.                    
                </throws>
                <throws>
                    NumberIsTooSmallException if the number of points is less than 2.                    
                </throws>
                <throws>
                    NonMonotonicSequenceExceptionif {@code x} is not sorted in strictly increasing order.                    
                </throws>
            </javadoc>
            <method name="computeDividedDifference" type="double[]" line="58">
                <params>
                    <param name="x" type="double"/>
                    <param name="y" type="double"/>
                </params>
                <declaration name="divdiff" type="double[]" line="60"/>
                <declaration name="n" type="int" line="61"/>
                <declaration name="a" type="double[]" line="62"/>
                <scope line="64">
                    <scope line="65">
                        <declaration name="denominator" type="double" line="66"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>