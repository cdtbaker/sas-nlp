<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.ode.nonstiff">
        <import package="org.apache.commons.math3.ode.sampling.StepInterpolator"/>
        <class name="ClassicalRungeKuttaStepInterpolator" line="3">
            <extends class="RungeKuttaStepInterpolator"/>
            <javadoc line="3">
                This class implements a step interpolator for the classical fourth
                  order Runge-Kutta integrator.
                  &lt;p&gt;This interpolator allows to compute dense output inside the last
                  step computed. The interpolation equation is consistent with the
                  integration scheme :
                  &lt;ul&gt;
                  &lt;li&gt;Using reference point at step start:&lt;br&gt;
                  y(t&lt;sub&gt;n&lt;/sub&gt; + &amp;theta; h) = y (t&lt;sub&gt;n&lt;/sub&gt;)
                  + &amp;theta; (h/6) [  (6 - 9 &amp;theta; + 4 &amp;theta;&lt;sup&gt;2&lt;/sup&gt;) y&apos;&lt;sub&gt;1&lt;/sub&gt;
                  + (    6 &amp;theta; - 4 &amp;theta;&lt;sup&gt;2&lt;/sup&gt;) (y&apos;&lt;sub&gt;2&lt;/sub&gt; + y&apos;&lt;sub&gt;3&lt;/sub&gt;)
                  + (   -3 &amp;theta; + 4 &amp;theta;&lt;sup&gt;2&lt;/sup&gt;) y&apos;&lt;sub&gt;4&lt;/sub&gt;
                  ]
                  &lt;/li&gt;
                  &lt;li&gt;Using reference point at step end:&lt;br&gt;
                  y(t&lt;sub&gt;n&lt;/sub&gt; + &amp;theta; h) = y (t&lt;sub&gt;n&lt;/sub&gt; + h)
                  + (1 - &amp;theta;) (h/6) [ (-4 &amp;theta;^2 + 5 &amp;theta; - 1) y&apos;&lt;sub&gt;1&lt;/sub&gt;
                  +(4 &amp;theta;^2 - 2 &amp;theta; - 2) (y&apos;&lt;sub&gt;2&lt;/sub&gt; + y&apos;&lt;sub&gt;3&lt;/sub&gt;)
                  -(4 &amp;theta;^2 +   &amp;theta; + 1) y&apos;&lt;sub&gt;4&lt;/sub&gt;
                  ]
                  &lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/p&gt;
                  where &amp;theta; belongs to [0 ; 1] and where y&apos;&lt;sub&gt;1&lt;/sub&gt; to y&apos;&lt;sub&gt;4&lt;/sub&gt; are the four
                  evaluations of the derivatives already computed during the
                  step.&lt;/p&gt;                
                <see>
                    ClassicalRungeKuttaIntegrator                    
                </see>
                <version>
                    $Id: ClassicalRungeKuttaStepInterpolator.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="34"/>
            <javadoc line="34">
                Serializable version identifier.                
            </javadoc>
            <javadoc line="38">
                Simple constructor.
                  This constructor builds an instance that is not usable yet, the{@link RungeKuttaStepInterpolator#reinitialize} method should be
                  called before using the instance in order to initialize the
                  internal arrays. This constructor is used only in order to delay
                  the initialization in some cases. The {@link RungeKuttaIntegrator}class uses the prototyping design pattern to create the step
                  interpolators by cloning an uninitialized model and latter initializing
                  the copy.                
            </javadoc>
            <method name="ClassicalRungeKuttaStepInterpolator" type="constructor" line="47"/>
            <javadoc line="49">
                Copy constructor.                
                <param>
                    interpolator interpolator to copy from. The copy is a deep
                      copy: its arrays are separated from the original arrays of the
                      instance                    
                </param>
            </javadoc>
            <method name="ClassicalRungeKuttaStepInterpolator" type="constructor" line="55">
                <params>
                    <param name="interpolator" type="ClassicalRungeKuttaStepInterpolator"/>
                </params>
            </method>
            <javadoc line="58">
                {@inheritDoc}                
            </javadoc>
            <method name="doCopy" type="StepInterpolator" line="61"/>
            <javadoc line="64">
                {@inheritDoc}                
            </javadoc>
            <method name="computeInterpolatedStateAndDerivatives" type="void" line="67">
                <params>
                    <param name="theta" type="double"/>
                    <param name="oneMinusThetaH" type="double"/>
                </params>
                <declaration name="oneMinusTheta" type="double" line="68"/>
                <declaration name="oneMinus2Theta" type="double" line="69"/>
                <declaration name="coeffDot1" type="double" line="70"/>
                <declaration name="coeffDot23" type="double" line="71"/>
                <declaration name="coeffDot4" type="double" line="72"/>
                <scope line="73">
                    <declaration name="fourTheta2" type="double" line="74"/>
                    <declaration name="s" type="double" line="75"/>
                    <declaration name="coeff1" type="double" line="76"/>
                    <declaration name="coeff23" type="double" line="77"/>
                    <declaration name="coeff4" type="double" line="78"/>
                    <scope line="79">
                        <declaration name="yDot1" type="double" line="80"/>
                        <declaration name="yDot23" type="double" line="81"/>
                        <declaration name="yDot4" type="double" line="82"/>
                    </scope>
                </scope>
                <scope line="87">
                    <declaration name="fourTheta" type="double" line="88"/>
                    <declaration name="s" type="double" line="89"/>
                    <declaration name="coeff1" type="double" line="90"/>
                    <declaration name="coeff23" type="double" line="91"/>
                    <declaration name="coeff4" type="double" line="92"/>
                    <scope line="93">
                        <declaration name="yDot1" type="double" line="94"/>
                        <declaration name="yDot23" type="double" line="95"/>
                        <declaration name="yDot4" type="double" line="96"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>