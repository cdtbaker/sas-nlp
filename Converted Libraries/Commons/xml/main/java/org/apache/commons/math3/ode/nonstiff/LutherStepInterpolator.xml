<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.ode.nonstiff">
        <import package="org.apache.commons.math3.ode.sampling.StepInterpolator"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="LutherStepInterpolator" line="23">
            <extends class="RungeKuttaStepInterpolator"/>
            <javadoc line="23">
                This class represents an interpolator over the last step during an
                  ODE integration for the 6th order Luther integrator.
                  &lt;p&gt;This interpolator computes dense output inside the last
                  step computed. The interpolation equation is consistent with the
                  integration scheme.&lt;/p&gt;                
                <see>
                    LutherIntegrator                    
                </see>
                <version>
                    $Id: LutherStepInterpolator.java 1590561 2014-04-28 06:39:21Z luc $                    
                </version>
                <since>
                    3.3                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="38"/>
            <javadoc line="38">
                Serializable version identifier                
            </javadoc>
            <declaration name="Q" type="double" line="41"/>
            <javadoc line="41">
                Square root.                
            </javadoc>
            <javadoc line="44">
                Simple constructor.
                  This constructor builds an instance that is not usable yet, the{@link org.apache.commons.math3.ode.sampling.AbstractStepInterpolator#reinitialize}method should be called before using the instance in order to
                  initialize the internal arrays. This constructor is used only
                  in order to delay the initialization in some cases. The {@link RungeKuttaIntegrator} class uses the prototyping design pattern
                  to create the step interpolators by cloning an uninitialized model
                  and later initializing the copy.                
            </javadoc>
            <method name="LutherStepInterpolator" type="constructor" line="55"/>
            <javadoc line="58">
                Copy constructor.                
                <param>
                    interpolator interpolator to copy from. The copy is a deep
                      copy: its arrays are separated from the original arrays of the
                      instance                    
                </param>
            </javadoc>
            <method name="LutherStepInterpolator" type="constructor" line="63">
                <params>
                    <param name="interpolator" type="LutherStepInterpolator"/>
                </params>
            </method>
            <javadoc line="67">
                {@inheritDoc}                
            </javadoc>
            <method name="doCopy" type="StepInterpolator" line="69"/>
            <javadoc line="74">
                {@inheritDoc}                
            </javadoc>
            <method name="computeInterpolatedStateAndDerivatives" type="void" line="77">
                <params>
                    <param name="theta" type="double"/>
                    <param name="oneMinusThetaH" type="double"/>
                </params>
                <comment line="80">
                    the coefficients below have been computed by solving the
                     order conditions from a theorem from Butcher (1963), using
                     the method explained in Folkmar Bornemann paper &quot;Runge-Kutta
                     Methods, Trees, and Maple&quot;, Center of Mathematical Sciences, Munich
                     University of Technology, February 9, 2001
                    &lt;http:wwwzenger.informatik.tu-muenchen.de/selcuk/sjam012101.html&gt;                    
                </comment>
                <comment line="87">
                    the method is implemented in the rkcheck tool
                     &lt;https:www.spaceroots.org/software/rkcheck/index.html&gt;.
                     Running it for order 5 gives the following order conditions
                     for an interpolator:
                     order 1 conditions
                     \sum_{i=1}^{i=s}\left(b_{i} \right) =1
                     order 2 conditions
                     \sum_{i=1}^{i=s}\left(b_{i} c_{i}\right) = \frac{\theta}{2}
                     order 3 conditions
                     \sum_{i=2}^{i=s}\left(b_{i} \sum_{j=1}^{j=i-1}{\left(a_{i,j} c_{j} \right)}\right) = \frac{\theta^{2}}{6}
                     \sum_{i=1}^{i=s}\left(b_{i} c_{i}^{2}\right) = \frac{\theta^{2}}{3}
                     order 4 conditions
                     \sum_{i=3}^{i=s}\left(b_{i} \sum_{j=2}^{j=i-1}{\left(a_{i,j} \sum_{k=1}^{k=j-1}{\left(a_{j,k} c_{k} \right)} \right)}\right) = \frac{\theta^{3}}{24}
                     \sum_{i=2}^{i=s}\left(b_{i} \sum_{j=1}^{j=i-1}{\left(a_{i,j} c_{j}^{2} \right)}\right) = \frac{\theta^{3}}{12}
                     \sum_{i=2}^{i=s}\left(b_{i} c_{i}\sum_{j=1}^{j=i-1}{\left(a_{i,j} c_{j} \right)}\right) = \frac{\theta^{3}}{8}
                     \sum_{i=1}^{i=s}\left(b_{i} c_{i}^{3}\right) = \frac{\theta^{3}}{4}
                     order 5 conditions
                     \sum_{i=4}^{i=s}\left(b_{i} \sum_{j=3}^{j=i-1}{\left(a_{i,j} \sum_{k=2}^{k=j-1}{\left(a_{j,k} \sum_{l=1}^{l=k-1}{\left(a_{k,l} c_{l} \right)} \right)} \right)}\right) = \frac{\theta^{4}}{120}
                     \sum_{i=3}^{i=s}\left(b_{i} \sum_{j=2}^{j=i-1}{\left(a_{i,j} \sum_{k=1}^{k=j-1}{\left(a_{j,k} c_{k}^{2} \right)} \right)}\right) = \frac{\theta^{4}}{60}
                     \sum_{i=3}^{i=s}\left(b_{i} \sum_{j=2}^{j=i-1}{\left(a_{i,j} c_{j}\sum_{k=1}^{k=j-1}{\left(a_{j,k} c_{k} \right)} \right)}\right) = \frac{\theta^{4}}{40}
                     \sum_{i=2}^{i=s}\left(b_{i} \sum_{j=1}^{j=i-1}{\left(a_{i,j} c_{j}^{3} \right)}\right) = \frac{\theta^{4}}{20}
                     \sum_{i=3}^{i=s}\left(b_{i} c_{i}\sum_{j=2}^{j=i-1}{\left(a_{i,j} \sum_{k=1}^{k=j-1}{\left(a_{j,k} c_{k} \right)} \right)}\right) = \frac{\theta^{4}}{30}
                     \sum_{i=2}^{i=s}\left(b_{i} c_{i}\sum_{j=1}^{j=i-1}{\left(a_{i,j} c_{j}^{2} \right)}\right) = \frac{\theta^{4}}{15}
                     \sum_{i=2}^{i=s}\left(b_{i} \left(\sum_{j=1}^{j=i-1}{\left(a_{i,j} c_{j} \right)} \right)^{2}\right) = \frac{\theta^{4}}{20}
                     \sum_{i=2}^{i=s}\left(b_{i} c_{i}^{2}\sum_{j=1}^{j=i-1}{\left(a_{i,j} c_{j} \right)}\right) = \frac{\theta^{4}}{10}
                     \sum_{i=1}^{i=s}\left(b_{i} c_{i}^{4}\right) = \frac{\theta^{4}}{5}                    
                </comment>
                <comment line="114">
                    The a_{j,k} and c_{k} are given by the integrator Butcher arrays. What remains to solve
                     are the b_i for the interpolator. They are found by solving the above equations.
                     For a given interpolator, some equations are redundant, so in our case when we select
                     all equations from order 1 to 4, we still don&apos;t have enough independent equations
                     to solve from b_1 to b_7. We need to also select one equation from order 5. Here,
                     we selected the last equation. It appears this choice implied at least the last 3 equations
                     are fulfilled, but some of the former ones are not, so the resulting interpolator is order 5.
                     At the end, we get the b_i as polynomials in theta.                    
                </comment>
                <declaration name="coeffDot1" type="double" line="122"/>
                <declaration name="coeffDot2" type="double" line="123"/>
                <declaration name="coeffDot3" type="double" line="124"/>
                <declaration name="coeffDot4" type="double" line="125"/>
                <declaration name="coeffDot5" type="double" line="126"/>
                <declaration name="coeffDot6" type="double" line="127"/>
                <declaration name="coeffDot7" type="double" line="128"/>
                <scope line="130">
                    <declaration name="coeff1" type="double" line="132"/>
                    <declaration name="coeff2" type="double" line="133"/>
                    <declaration name="coeff3" type="double" line="134"/>
                    <declaration name="coeff4" type="double" line="135"/>
                    <declaration name="coeff5" type="double" line="136"/>
                    <declaration name="coeff6" type="double" line="137"/>
                    <declaration name="coeff7" type="double" line="138"/>
                    <scope line="139">
                        <declaration name="yDot1" type="double" line="140"/>
                        <declaration name="yDot2" type="double" line="141"/>
                        <declaration name="yDot3" type="double" line="142"/>
                        <declaration name="yDot4" type="double" line="143"/>
                        <declaration name="yDot5" type="double" line="144"/>
                        <declaration name="yDot6" type="double" line="145"/>
                        <declaration name="yDot7" type="double" line="146"/>
                    </scope>
                </scope>
                <scope line="153">
                    <declaration name="coeff1" type="double" line="155"/>
                    <declaration name="coeff2" type="double" line="156"/>
                    <declaration name="coeff3" type="double" line="157"/>
                    <declaration name="coeff4" type="double" line="158"/>
                    <declaration name="coeff5" type="double" line="159"/>
                    <declaration name="coeff6" type="double" line="160"/>
                    <declaration name="coeff7" type="double" line="161"/>
                    <scope line="162">
                        <declaration name="yDot1" type="double" line="163"/>
                        <declaration name="yDot2" type="double" line="164"/>
                        <declaration name="yDot3" type="double" line="165"/>
                        <declaration name="yDot4" type="double" line="166"/>
                        <declaration name="yDot5" type="double" line="167"/>
                        <declaration name="yDot6" type="double" line="168"/>
                        <declaration name="yDot7" type="double" line="169"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>