<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.linear">
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.util.Arrays"/>
        <import package="org.apache.commons.math3.Field"/>
        <import package="org.apache.commons.math3.FieldElement"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.MathArithmeticException"/>
        <import package="org.apache.commons.math3.exception.NoDataException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.exception.ZeroException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.fraction.BigFraction"/>
        <import package="org.apache.commons.math3.fraction.Fraction"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.MathArrays"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <import package="org.apache.commons.math3.util.Precision"/>
        <class name="MatrixUtils" line="42">
            <javadoc line="42">
                A collection of static methods that operate on or return matrices.                
                <version>
                    $Id: MatrixUtils.java 1533638 2013-10-18 21:19:18Z tn $                    
                </version>
            </javadoc>
            <declaration name="DEFAULT_FORMAT" type="RealMatrixFormat" line="49"/>
            <javadoc line="49">
                The default format for {@link RealMatrix} objects.                
                <since>
                    3.1                    
                </since>
            </javadoc>
            <declaration name="OCTAVE_FORMAT" type="RealMatrixFormat" line="55"/>
            <javadoc line="55">
                A format for {@link RealMatrix} objects compatible with octave.                
                <since>
                    3.1                    
                </since>
            </javadoc>
            <javadoc line="61">
                Private constructor.                
            </javadoc>
            <method name="MatrixUtils" type="constructor" line="64"/>
            <javadoc line="68">
                Returns a {@link RealMatrix} with specified dimensions.
                  &lt;p&gt;The type of matrix returned depends on the dimension. Below
                  2&lt;sup&gt;12&lt;/sup&gt; elements (i.e. 4096 elements or 64&amp;times;64 for a
                  square matrix) which can be stored in a 32kB array, a {@link Array2DRowRealMatrix} instance is built. Above this threshold a {@link BlockRealMatrix} instance is built.&lt;/p&gt;
                  &lt;p&gt;The matrix elements are all set to 0.0.&lt;/p&gt;                
                <param>
                    rows number of rows of the matrix                    
                </param>
                <param>
                    columns number of columns of the matrix                    
                </param>
                <return>
                    RealMatrix with specified dimensions                    
                </return>
                <see>
                    #createRealMatrix(double[][])                    
                </see>
            </javadoc>
            <method name="createRealMatrix" type="RealMatrix" line="81">
                <params>
                    <param name="rows" type="int"/>
                    <param name="columns" type="int"/>
                </params>
            </method>
            <javadoc line="86">
                Returns a {@link FieldMatrix} with specified dimensions.
                  &lt;p&gt;The type of matrix returned depends on the dimension. Below
                  2&lt;sup&gt;12&lt;/sup&gt; elements (i.e. 4096 elements or 64&amp;times;64 for a
                  square matrix), a {@link FieldMatrix} instance is built. Above
                  this threshold a {@link BlockFieldMatrix} instance is built.&lt;/p&gt;
                  &lt;p&gt;The matrix elements are all set to field.getZero().&lt;/p&gt;                
                <param>
                    &lt;T&gt;
                       the type of the field elements                    
                </param>
                <param>
                    field field to which the matrix elements belong                    
                </param>
                <param>
                    rows number of rows of the matrix                    
                </param>
                <param>
                    columns number of columns of the matrix                    
                </param>
                <return>
                    FieldMatrix with specified dimensions                    
                </return>
                <see>
                    #createFieldMatrix(FieldElement[][])                    
                </see>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <method name="createFieldMatrix" type="FieldMatrix&lt;T&gt;" line="103">
                <params>
                    <param name="field" type="Field&lt;T&gt;"/>
                    <param name="rows" type="int"/>
                    <param name="columns" type="int"/>
                </params>
            </method>
            <javadoc line="108">
                Returns a {@link RealMatrix} whose entries are the the values in the
                  the input array.
                  &lt;p&gt;The type of matrix returned depends on the dimension. Below
                  2&lt;sup&gt;12&lt;/sup&gt; elements (i.e. 4096 elements or 64&amp;times;64 for a
                  square matrix) which can be stored in a 32kB array, a {@link Array2DRowRealMatrix} instance is built. Above this threshold a {@link BlockRealMatrix} instance is built.&lt;/p&gt;
                  &lt;p&gt;The input array is copied, not referenced.&lt;/p&gt;                
                <param>
                    data input array                    
                </param>
                <return>
                    RealMatrix containing the values of the array                    
                </return>
                <throws>
                    org.apache.commons.math3.exception.DimensionMismatchExceptionif {@code data} is not rectangular (not all rows have the same length).                    
                </throws>
                <throws>
                    NoDataException if a row or column is empty.                    
                </throws>
                <throws>
                    NullArgumentException if either {@code data} or {@code data[0]}is {@code null}.                    
                </throws>
                <throws>
                    DimensionMismatchException if {@code data} is not rectangular.                    
                </throws>
                <see>
                    #createRealMatrix(int,int)                    
                </see>
            </javadoc>
            <method name="createRealMatrix" type="RealMatrix" line="130">
                <params>
                    <param name="data" type="double[][]"/>
                </params>
                <scope line="132"/>
            </method>
            <javadoc line="139">
                Returns a {@link FieldMatrix} whose entries are the the values in the
                  the input array.
                  &lt;p&gt;The type of matrix returned depends on the dimension. Below
                  2&lt;sup&gt;12&lt;/sup&gt; elements (i.e. 4096 elements or 64&amp;times;64 for a
                  square matrix), a {@link FieldMatrix} instance is built. Above
                  this threshold a {@link BlockFieldMatrix} instance is built.&lt;/p&gt;
                  &lt;p&gt;The input array is copied, not referenced.&lt;/p&gt;                
                <param>
                    &lt;T&gt;
                       the type of the field elements                    
                </param>
                <param>
                    data input array                    
                </param>
                <return>
                    a matrix containing the values of the array.                    
                </return>
                <throws>
                    org.apache.commons.math3.exception.DimensionMismatchExceptionif {@code data} is not rectangular (not all rows have the same length).                    
                </throws>
                <throws>
                    NoDataException if a row or column is empty.                    
                </throws>
                <throws>
                    NullArgumentException if either {@code data} or {@code data[0]}is {@code null}.                    
                </throws>
                <see>
                    #createFieldMatrix(Field,int,int)                    
                </see>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <method name="createFieldMatrix" type="FieldMatrix&lt;T&gt;" line="159">
                <params>
                    <param name="data" type="T[][]"/>
                </params>
                <scope line="161"/>
            </method>
            <javadoc line="168">
                Returns &lt;code&gt;dimension x dimension&lt;/code&gt; identity matrix.                
                <param>
                    dimension dimension of identity matrix to generate                    
                </param>
                <return>
                    identity matrix                    
                </return>
                <throws>
                    IllegalArgumentException if dimension is not positive                    
                </throws>
                <since>
                    1.1                    
                </since>
            </javadoc>
            <method name="createRealIdentityMatrix" type="RealMatrix" line="176">
                <params>
                    <param name="dimension" type="int"/>
                </params>
                <declaration name="m" type="RealMatrix" line="177"/>
                <scope line="178"/>
            </method>
            <javadoc line="184">
                Returns &lt;code&gt;dimension x dimension&lt;/code&gt; identity matrix.                
                <param>
                    &lt;T&gt;
                       the type of the field elements                    
                </param>
                <param>
                    field field to which the elements belong                    
                </param>
                <param>
                    dimension dimension of identity matrix to generate                    
                </param>
                <return>
                    identity matrix                    
                </return>
                <throws>
                    IllegalArgumentException if dimension is not positive                    
                </throws>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <method name="createFieldIdentityMatrix" type="FieldMatrix&lt;T&gt;" line="195">
                <params>
                    <param name="field" type="Field&lt;T&gt;"/>
                    <param name="dimension" type="int"/>
                </params>
                <declaration name="zero" type="T" line="196"/>
                <declaration name="one" type="T" line="197"/>
                <declaration name="d" type="T[][]" line="198"/>
                <scope line="199">
                    <declaration name="dRow" type="T[]" line="200"/>
                </scope>
            </method>
            <javadoc line="207">
                Returns a diagonal matrix with specified elements.                
                <param>
                    diagonal diagonal elements of the matrix (the array elements
                      will be copied)                    
                </param>
                <return>
                    diagonal matrix                    
                </return>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <method name="createRealDiagonalMatrix" type="RealMatrix" line="215">
                <params>
                    <param name="diagonal" type="double[]"/>
                </params>
                <declaration name="m" type="RealMatrix" line="216"/>
                <scope line="217"/>
            </method>
            <javadoc line="223">
                Returns a diagonal matrix with specified elements.                
                <param>
                    &lt;T&gt;
                       the type of the field elements                    
                </param>
                <param>
                    diagonal diagonal elements of the matrix (the array elements
                      will be copied)                    
                </param>
                <return>
                    diagonal matrix                    
                </return>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <method name="createFieldDiagonalMatrix" type="FieldMatrix&lt;T&gt;" line="233">
                <params>
                    <param name="diagonal" type="T[]"/>
                </params>
                <declaration name="m" type="FieldMatrix&amp;lt;T&amp;gt;" line="234"/>
                <scope line="236"/>
            </method>
            <javadoc line="242">
                Creates a {@link RealVector} using the data from the input array.                
                <param>
                    data the input data                    
                </param>
                <return>
                    a data.length RealVector                    
                </return>
                <throws>
                    NoDataException if {@code data} is empty.                    
                </throws>
                <throws>
                    NullArgumentException if {@code data} is {@code null}.                    
                </throws>
            </javadoc>
            <method name="createRealVector" type="RealVector" line="251">
                <params>
                    <param name="data" type="double[]"/>
                </params>
                <scope line="252"/>
            </method>
            <javadoc line="258">
                Creates a {@link FieldVector} using the data from the input array.                
                <param>
                    &lt;T&gt;
                       the type of the field elements                    
                </param>
                <param>
                    data the input data                    
                </param>
                <return>
                    a data.length FieldVector                    
                </return>
                <throws>
                    NoDataException if {@code data} is empty.                    
                </throws>
                <throws>
                    NullArgumentException if {@code data} is {@code null}.                    
                </throws>
                <throws>
                    ZeroException if {@code data} has 0 elements                    
                </throws>
            </javadoc>
            <method name="createFieldVector" type="FieldVector&lt;T&gt;" line="269">
                <params>
                    <param name="data" type="T[]"/>
                </params>
                <scope line="270"/>
                <scope line="273"/>
            </method>
            <javadoc line="279">
                Create a row {@link RealMatrix} using the data from the input
                  array.                
                <param>
                    rowData the input row data                    
                </param>
                <return>
                    a 1 x rowData.length RealMatrix                    
                </return>
                <throws>
                    NoDataException if {@code rowData} is empty.                    
                </throws>
                <throws>
                    NullArgumentException if {@code rowData} is {@code null}.                    
                </throws>
            </javadoc>
            <method name="createRowRealMatrix" type="RealMatrix" line="289">
                <params>
                    <param name="rowData" type="double[]"/>
                </params>
                <scope line="290"/>
                <declaration name="nCols" type="int" line="293"/>
                <declaration name="m" type="RealMatrix" line="294"/>
                <scope line="295"/>
            </method>
            <javadoc line="301">
                Create a row {@link FieldMatrix} using the data from the input
                  array.                
                <param>
                    &lt;T&gt;
                       the type of the field elements                    
                </param>
                <param>
                    rowData the input row data                    
                </param>
                <return>
                    a 1 x rowData.length FieldMatrix                    
                </return>
                <throws>
                    NoDataException if {@code rowData} is empty.                    
                </throws>
                <throws>
                    NullArgumentException if {@code rowData} is {@code null}.                    
                </throws>
            </javadoc>
            <method name="createRowFieldMatrix" type="FieldMatrix&lt;T&gt;" line="313">
                <params>
                    <param name="rowData" type="T[]"/>
                </params>
                <scope line="314"/>
                <declaration name="nCols" type="int" line="317"/>
                <scope line="318"/>
                <declaration name="m" type="FieldMatrix&amp;lt;T&amp;gt;" line="321"/>
                <scope line="322"/>
            </method>
            <javadoc line="328">
                Creates a column {@link RealMatrix} using the data from the input
                  array.                
                <param>
                    columnData  the input column data                    
                </param>
                <return>
                    a columnData x 1 RealMatrix                    
                </return>
                <throws>
                    NoDataException if {@code columnData} is empty.                    
                </throws>
                <throws>
                    NullArgumentException if {@code columnData} is {@code null}.                    
                </throws>
            </javadoc>
            <method name="createColumnRealMatrix" type="RealMatrix" line="338">
                <params>
                    <param name="columnData" type="double[]"/>
                </params>
                <scope line="339"/>
                <declaration name="nRows" type="int" line="342"/>
                <declaration name="m" type="RealMatrix" line="343"/>
                <scope line="344"/>
            </method>
            <javadoc line="350">
                Creates a column {@link FieldMatrix} using the data from the input
                  array.                
                <param>
                    &lt;T&gt;
                       the type of the field elements                    
                </param>
                <param>
                    columnData  the input column data                    
                </param>
                <return>
                    a columnData x 1 FieldMatrix                    
                </return>
                <throws>
                    NoDataException if {@code data} is empty.                    
                </throws>
                <throws>
                    NullArgumentException if {@code columnData} is {@code null}.                    
                </throws>
            </javadoc>
            <method name="createColumnFieldMatrix" type="FieldMatrix&lt;T&gt;" line="362">
                <params>
                    <param name="columnData" type="T[]"/>
                </params>
                <scope line="363"/>
                <declaration name="nRows" type="int" line="366"/>
                <scope line="367"/>
                <declaration name="m" type="FieldMatrix&amp;lt;T&amp;gt;" line="370"/>
                <scope line="371"/>
            </method>
            <javadoc line="377">
                Checks whether a matrix is symmetric, within a given relative tolerance.                
                <param>
                    matrix Matrix to check.                    
                </param>
                <param>
                    relativeTolerance Tolerance of the symmetry check.                    
                </param>
                <param>
                    raiseException If {@code true}, an exception will be raised if
                      the matrix is not symmetric.                    
                </param>
                <return>
                    {@code true} if {@code matrix} is symmetric.                    
                </return>
                <throws>
                    NonSquareMatrixException if the matrix is not square.                    
                </throws>
                <throws>
                    NonSymmetricMatrixException if the matrix is not symmetric.                    
                </throws>
            </javadoc>
            <method name="isSymmetricInternal" type="boolean" line="390">
                <params>
                    <param name="matrix" type="RealMatrix"/>
                    <param name="relativeTolerance" type="double"/>
                    <param name="raiseException" type="boolean"/>
                </params>
                <declaration name="rows" type="int" line="391"/>
                <scope line="392">
                    <scope line="393"/>
                    <scope line="395"/>
                </scope>
                <scope line="399">
                    <scope line="400">
                        <declaration name="mij" type="double" line="401"/>
                        <declaration name="mji" type="double" line="402"/>
                        <scope line="404">
                            <scope line="405"/>
                            <scope line="407"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="416">
                Checks whether a matrix is symmetric.                
                <param>
                    matrix Matrix to check.                    
                </param>
                <param>
                    eps Relative tolerance.                    
                </param>
                <throws>
                    NonSquareMatrixException if the matrix is not square.                    
                </throws>
                <throws>
                    NonSymmetricMatrixException if the matrix is not symmetric.                    
                </throws>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="checkSymmetric" type="void" line="426">
                <params>
                    <param name="matrix" type="RealMatrix"/>
                    <param name="eps" type="double"/>
                </params>
            </method>
            <javadoc line="430">
                Checks whether a matrix is symmetric.                
                <param>
                    matrix Matrix to check.                    
                </param>
                <param>
                    eps Relative tolerance.                    
                </param>
                <return>
                    {@code true} if {@code matrix} is symmetric.                    
                </return>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="isSymmetric" type="boolean" line="439">
                <params>
                    <param name="matrix" type="RealMatrix"/>
                    <param name="eps" type="double"/>
                </params>
            </method>
            <javadoc line="443">
                Check if matrix indices are valid.                
                <param>
                    m Matrix.                    
                </param>
                <param>
                    row Row index to check.                    
                </param>
                <param>
                    column Column index to check.                    
                </param>
                <throws>
                    OutOfRangeException if {@code row} or {@code column} is not
                      a valid index.                    
                </throws>
            </javadoc>
            <method name="checkMatrixIndex" type="void" line="454">
                <params>
                    <param name="m" type="AnyMatrix"/>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
            </method>
            <javadoc line="459">
                Check if a row index is valid.                
                <param>
                    m Matrix.                    
                </param>
                <param>
                    row Row index to check.                    
                </param>
                <throws>
                    OutOfRangeException if {@code row} is not a valid index.                    
                </throws>
            </javadoc>
            <method name="checkRowIndex" type="void" line="467">
                <params>
                    <param name="m" type="AnyMatrix"/>
                    <param name="row" type="int"/>
                </params>
                <scope line="469"/>
            </method>
            <javadoc line="475">
                Check if a column index is valid.                
                <param>
                    m Matrix.                    
                </param>
                <param>
                    column Column index to check.                    
                </param>
                <throws>
                    OutOfRangeException if {@code column} is not a valid index.                    
                </throws>
            </javadoc>
            <method name="checkColumnIndex" type="void" line="483">
                <params>
                    <param name="m" type="AnyMatrix"/>
                    <param name="column" type="int"/>
                </params>
                <scope line="484"/>
            </method>
            <javadoc line="490">
                Check if submatrix ranges indices are valid.
                  Rows and columns are indicated counting from 0 to {@code n - 1}.                
                <param>
                    m Matrix.                    
                </param>
                <param>
                    startRow Initial row index.                    
                </param>
                <param>
                    endRow Final row index.                    
                </param>
                <param>
                    startColumn Initial column index.                    
                </param>
                <param>
                    endColumn Final column index.                    
                </param>
                <throws>
                    OutOfRangeException if the indices are invalid.                    
                </throws>
                <throws>
                    NumberIsTooSmallException if {@code endRow &lt; startRow} or{@code endColumn &lt; startColumn}.                    
                </throws>
            </javadoc>
            <method name="checkSubMatrixIndex" type="void" line="506">
                <params>
                    <param name="m" type="AnyMatrix"/>
                    <param name="startRow" type="int"/>
                    <param name="endRow" type="int"/>
                    <param name="startColumn" type="int"/>
                    <param name="endColumn" type="int"/>
                </params>
                <scope line="509"/>
                <scope line="516"/>
            </method>
            <javadoc line="524">
                Check if submatrix ranges indices are valid.
                  Rows and columns are indicated counting from 0 to n-1.                
                <param>
                    m Matrix.                    
                </param>
                <param>
                    selectedRows Array of row indices.                    
                </param>
                <param>
                    selectedColumns Array of column indices.                    
                </param>
                <throws>
                    NullArgumentException if {@code selectedRows} or{@code selectedColumns} are {@code null}.                    
                </throws>
                <throws>
                    NoDataException if the row or column selections are empty (zero
                      length).                    
                </throws>
                <throws>
                    OutOfRangeException if row or column selections are not valid.                    
                </throws>
            </javadoc>
            <method name="checkSubMatrixIndex" type="void" line="540">
                <params>
                    <param name="m" type="AnyMatrix"/>
                    <param name="selectedRows" type="int[]"/>
                    <param name="selectedColumns" type="int[]"/>
                </params>
                <scope line="541"/>
                <scope line="544"/>
                <scope line="547"/>
                <scope line="550"/>
                <scope line="554"/>
                <scope line="557"/>
            </method>
            <javadoc line="562">
                Check if matrices are addition compatible.                
                <param>
                    left Left hand side matrix.                    
                </param>
                <param>
                    right Right hand side matrix.                    
                </param>
                <throws>
                    MatrixDimensionMismatchException if the matrices are not addition
                      compatible.                    
                </throws>
            </javadoc>
            <method name="checkAdditionCompatible" type="void" line="571">
                <params>
                    <param name="left" type="AnyMatrix"/>
                    <param name="right" type="AnyMatrix"/>
                </params>
                <scope line="573"/>
            </method>
            <javadoc line="579">
                Check if matrices are subtraction compatible                
                <param>
                    left Left hand side matrix.                    
                </param>
                <param>
                    right Right hand side matrix.                    
                </param>
                <throws>
                    MatrixDimensionMismatchException if the matrices are not addition
                      compatible.                    
                </throws>
            </javadoc>
            <method name="checkSubtractionCompatible" type="void" line="588">
                <params>
                    <param name="left" type="AnyMatrix"/>
                    <param name="right" type="AnyMatrix"/>
                </params>
                <scope line="590"/>
            </method>
            <javadoc line="596">
                Check if matrices are multiplication compatible                
                <param>
                    left Left hand side matrix.                    
                </param>
                <param>
                    right Right hand side matrix.                    
                </param>
                <throws>
                    DimensionMismatchException if matrices are not multiplication
                      compatible.                    
                </throws>
            </javadoc>
            <method name="checkMultiplicationCompatible" type="void" line="605">
                <params>
                    <param name="left" type="AnyMatrix"/>
                    <param name="right" type="AnyMatrix"/>
                </params>
                <scope line="607"/>
            </method>
            <javadoc line="613">
                Convert a {@link FieldMatrix}/{@link Fraction} matrix to a {@link RealMatrix}.                
                <param>
                    m Matrix to convert.                    
                </param>
                <return>
                    the converted matrix.                    
                </return>
            </javadoc>
            <method name="fractionMatrixToRealMatrix" type="Array2DRowRealMatrix" line="618">
                <params>
                    <param name="m" type="FieldMatrix&lt;Fraction&gt;"/>
                </params>
                <declaration name="converter" type="FractionMatrixConverter" line="619"/>
            </method>
            <class name="FractionMatrixConverter" line="624">
                <extends class="DefaultFieldMatrixPreservingVisitor">
                    <type_params>
                        <type_param name="Fraction"/>
                    </type_params>
                </extends>
                <javadoc line="624">
                    Converter for {@link FieldMatrix}/{@link Fraction}.                    
                </javadoc>
                <declaration name="data" type="double[][]" line="626"/>
                <javadoc line="626">
                    Converted array.                    
                </javadoc>
                <javadoc line="628">
                    Simple constructor.                    
                </javadoc>
                <method name="FractionMatrixConverter" type="constructor" line="629"/>
                <javadoc line="633">
                    {@inheritDoc}                    
                </javadoc>
                <method name="start" type="void" line="636">
                    <params>
                        <param name="rows" type="int"/>
                        <param name="columns" type="int"/>
                        <param name="startRow" type="int"/>
                        <param name="endRow" type="int"/>
                        <param name="startColumn" type="int"/>
                        <param name="endColumn" type="int"/>
                    </params>
                </method>
                <javadoc line="640">
                    {@inheritDoc}                    
                </javadoc>
                <method name="visit" type="void" line="642">
                    <params>
                        <param name="row" type="int"/>
                        <param name="column" type="int"/>
                        <param name="value" type="Fraction"/>
                    </params>
                </method>
                <javadoc line="646">
                    Get the converted matrix.                    
                    <return>
                        the converted matrix.                        
                    </return>
                </javadoc>
                <method name="getConvertedMatrix" type="Array2DRowRealMatrix" line="651"/>
            </class>
            <javadoc line="657">
                Convert a {@link FieldMatrix}/{@link BigFraction} matrix to a {@link RealMatrix}.                
                <param>
                    m Matrix to convert.                    
                </param>
                <return>
                    the converted matrix.                    
                </return>
            </javadoc>
            <method name="bigFractionMatrixToRealMatrix" type="Array2DRowRealMatrix" line="663">
                <params>
                    <param name="m" type="FieldMatrix&lt;BigFraction&gt;"/>
                </params>
                <declaration name="converter" type="BigFractionMatrixConverter" line="664"/>
            </method>
            <class name="BigFractionMatrixConverter" line="669">
                <extends class="DefaultFieldMatrixPreservingVisitor">
                    <type_params>
                        <type_param name="BigFraction"/>
                    </type_params>
                </extends>
                <javadoc line="669">
                    Converter for {@link FieldMatrix}/{@link BigFraction}.                    
                </javadoc>
                <declaration name="data" type="double[][]" line="671"/>
                <javadoc line="671">
                    Converted array.                    
                </javadoc>
                <javadoc line="673">
                    Simple constructor.                    
                </javadoc>
                <method name="BigFractionMatrixConverter" type="constructor" line="674"/>
                <javadoc line="678">
                    {@inheritDoc}                    
                </javadoc>
                <method name="start" type="void" line="681">
                    <params>
                        <param name="rows" type="int"/>
                        <param name="columns" type="int"/>
                        <param name="startRow" type="int"/>
                        <param name="endRow" type="int"/>
                        <param name="startColumn" type="int"/>
                        <param name="endColumn" type="int"/>
                    </params>
                </method>
                <javadoc line="685">
                    {@inheritDoc}                    
                </javadoc>
                <method name="visit" type="void" line="687">
                    <params>
                        <param name="row" type="int"/>
                        <param name="column" type="int"/>
                        <param name="value" type="BigFraction"/>
                    </params>
                </method>
                <javadoc line="691">
                    Get the converted matrix.                    
                    <return>
                        the converted matrix.                        
                    </return>
                </javadoc>
                <method name="getConvertedMatrix" type="Array2DRowRealMatrix" line="696"/>
            </class>
            <javadoc line="701">
                Serialize a {@link RealVector}.
                  &lt;p&gt;
                  This method is intended to be called from within a private
                  &lt;code&gt;writeObject&lt;/code&gt; method (after a call to
                  &lt;code&gt;oos.defaultWriteObject()&lt;/code&gt;) in a class that has a{@link RealVector} field, which should be declared &lt;code&gt;transient&lt;/code&gt;.
                  This way, the default handling does not serialize the vector (the {@link RealVector} interface is not serializable by default) but this method does
                  serialize it specifically.
                  &lt;/p&gt;
                  &lt;p&gt;
                  The following example shows how a simple class with a name and a real vector
                  should be written:
                  &lt;pre&gt;&lt;code&gt;
                  public class NamedVector implements Serializable {
                  private final String name;
                  private final transient RealVector coefficients;
                  // omitted constructors, getters ...
                  private void writeObject(ObjectOutputStream oos) throws IOException {
                  oos.defaultWriteObject();  // takes care of name field
                  MatrixUtils.serializeRealVector(coefficients, oos);
                  }
                  private void readObject(ObjectInputStream ois) throws ClassNotFoundException, IOException {
                  ois.defaultReadObject();  // takes care of name field
                  MatrixUtils.deserializeRealVector(this, &quot;coefficients&quot;, ois);
                  }
                  }
                  &lt;/code&gt;&lt;/pre&gt;
                  &lt;/p&gt;                
                <param>
                    vector real vector to serialize                    
                </param>
                <param>
                    oos stream where the real vector should be written                    
                </param>
                <exception>
                    IOException if object cannot be written to stream                    
                </exception>
                <see>
                    #deserializeRealVector(Object,String,ObjectInputStream)                    
                </see>
            </javadoc>
            <method name="serializeRealVector" type="void" line="743">
                <params>
                    <param name="vector" type="RealVector"/>
                    <param name="oos" type="ObjectOutputStream"/>
                </params>
                <declaration name="n" type="int" line="744"/>
                <scope line="746"/>
            </method>
            <javadoc line="751">
                Deserialize  a {@link RealVector} field in a class.
                  &lt;p&gt;
                  This method is intended to be called from within a private
                  &lt;code&gt;readObject&lt;/code&gt; method (after a call to
                  &lt;code&gt;ois.defaultReadObject()&lt;/code&gt;) in a class that has a{@link RealVector} field, which should be declared &lt;code&gt;transient&lt;/code&gt;.
                  This way, the default handling does not deserialize the vector (the {@link RealVector} interface is not serializable by default) but this method does
                  deserialize it specifically.
                  &lt;/p&gt;                
                <param>
                    instance instance in which the field must be set up                    
                </param>
                <param>
                    fieldName name of the field within the class (may be private and final)                    
                </param>
                <param>
                    ois stream from which the real vector should be read                    
                </param>
                <exception>
                    ClassNotFoundException if a class in the stream cannot be found                    
                </exception>
                <exception>
                    IOException if object cannot be read from the stream                    
                </exception>
                <see>
                    #serializeRealVector(RealVector,ObjectOutputStream)                    
                </see>
            </javadoc>
            <method name="deserializeRealVector" type="void" line="771">
                <params>
                    <param name="instance" type="Object"/>
                    <param name="fieldName" type="String"/>
                    <param name="ois" type="ObjectInputStream"/>
                </params>
                <comment line="775">
                    read the vector data                    
                </comment>
                <comment line="782">
                    create the instance                    
                </comment>
                <comment line="785">
                    set up the field                    
                </comment>
                <scope line="772">
                    <declaration name="n" type="int" line="775"/>
                    <declaration name="data" type="double[]" line="776"/>
                    <scope line="777"/>
                    <declaration name="vector" type="RealVector" line="782"/>
                    <declaration name="f" type="java.lang.reflect.Field" line="785"/>
                </scope>
                <scope line="790">
                    <declaration name="ioe" type="IOException" line="791"/>
                </scope>
                <scope line="794">
                    <declaration name="ioe" type="IOException" line="795"/>
                </scope>
            </method>
            <javadoc line="802">
                Serialize a {@link RealMatrix}.
                  &lt;p&gt;
                  This method is intended to be called from within a private
                  &lt;code&gt;writeObject&lt;/code&gt; method (after a call to
                  &lt;code&gt;oos.defaultWriteObject()&lt;/code&gt;) in a class that has a{@link RealMatrix} field, which should be declared &lt;code&gt;transient&lt;/code&gt;.
                  This way, the default handling does not serialize the matrix (the {@link RealMatrix} interface is not serializable by default) but this method does
                  serialize it specifically.
                  &lt;/p&gt;
                  &lt;p&gt;
                  The following example shows how a simple class with a name and a real matrix
                  should be written:
                  &lt;pre&gt;&lt;code&gt;
                  public class NamedMatrix implements Serializable {
                  private final String name;
                  private final transient RealMatrix coefficients;
                  // omitted constructors, getters ...
                  private void writeObject(ObjectOutputStream oos) throws IOException {
                  oos.defaultWriteObject();  // takes care of name field
                  MatrixUtils.serializeRealMatrix(coefficients, oos);
                  }
                  private void readObject(ObjectInputStream ois) throws ClassNotFoundException, IOException {
                  ois.defaultReadObject();  // takes care of name field
                  MatrixUtils.deserializeRealMatrix(this, &quot;coefficients&quot;, ois);
                  }
                  }
                  &lt;/code&gt;&lt;/pre&gt;
                  &lt;/p&gt;                
                <param>
                    matrix real matrix to serialize                    
                </param>
                <param>
                    oos stream where the real matrix should be written                    
                </param>
                <exception>
                    IOException if object cannot be written to stream                    
                </exception>
                <see>
                    #deserializeRealMatrix(Object,String,ObjectInputStream)                    
                </see>
            </javadoc>
            <method name="serializeRealMatrix" type="void" line="844">
                <params>
                    <param name="matrix" type="RealMatrix"/>
                    <param name="oos" type="ObjectOutputStream"/>
                </params>
                <declaration name="n" type="int" line="845"/>
                <declaration name="m" type="int" line="846"/>
                <scope line="849">
                    <scope line="850"/>
                </scope>
            </method>
            <javadoc line="856">
                Deserialize  a {@link RealMatrix} field in a class.
                  &lt;p&gt;
                  This method is intended to be called from within a private
                  &lt;code&gt;readObject&lt;/code&gt; method (after a call to
                  &lt;code&gt;ois.defaultReadObject()&lt;/code&gt;) in a class that has a{@link RealMatrix} field, which should be declared &lt;code&gt;transient&lt;/code&gt;.
                  This way, the default handling does not deserialize the matrix (the {@link RealMatrix} interface is not serializable by default) but this method does
                  deserialize it specifically.
                  &lt;/p&gt;                
                <param>
                    instance instance in which the field must be set up                    
                </param>
                <param>
                    fieldName name of the field within the class (may be private and final)                    
                </param>
                <param>
                    ois stream from which the real matrix should be read                    
                </param>
                <exception>
                    ClassNotFoundException if a class in the stream cannot be found                    
                </exception>
                <exception>
                    IOException if object cannot be read from the stream                    
                </exception>
                <see>
                    #serializeRealMatrix(RealMatrix,ObjectOutputStream)                    
                </see>
            </javadoc>
            <method name="deserializeRealMatrix" type="void" line="876">
                <params>
                    <param name="instance" type="Object"/>
                    <param name="fieldName" type="String"/>
                    <param name="ois" type="ObjectInputStream"/>
                </params>
                <comment line="880">
                    read the matrix data                    
                </comment>
                <comment line="891">
                    create the instance                    
                </comment>
                <comment line="894">
                    set up the field                    
                </comment>
                <scope line="877">
                    <declaration name="n" type="int" line="880"/>
                    <declaration name="m" type="int" line="881"/>
                    <declaration name="data" type="double[][]" line="882"/>
                    <scope line="883">
                        <declaration name="dataI" type="double[]" line="884"/>
                        <scope line="885"/>
                    </scope>
                    <declaration name="matrix" type="RealMatrix" line="891"/>
                    <declaration name="f" type="java.lang.reflect.Field" line="894"/>
                </scope>
                <scope line="899">
                    <declaration name="ioe" type="IOException" line="900"/>
                </scope>
                <scope line="903">
                    <declaration name="ioe" type="IOException" line="904"/>
                </scope>
            </method>
            <javadoc line="910">
                Solve  a  system of composed of a Lower Triangular Matrix{@link RealMatrix}.
                  &lt;p&gt;
                  This method is called to solve systems of equations which are
                  of the lower triangular form. The matrix {@link RealMatrix}is assumed, though not checked, to be in lower triangular form.
                  The vector {@link RealVector} is overwritten with the solution.
                  The matrix is checked that it is square and its dimensions match
                  the length of the vector.
                  &lt;/p&gt;                
                <param>
                    rm RealMatrix which is lower triangular                    
                </param>
                <param>
                    b  RealVector this is overwritten                    
                </param>
                <throws>
                    DimensionMismatchException if the matrix and vector are not
                      conformable                    
                </throws>
                <throws>
                    NonSquareMatrixException if the matrix {@code rm} is not square                    
                </throws>
                <throws>
                    MathArithmeticException if the absolute value of one of the diagonal
                      coefficient of {@code rm} is lower than {@link Precision#SAFE_MIN}                    
                </throws>
            </javadoc>
            <method name="solveLowerTriangularSystem" type="void" line="930">
                <params>
                    <param name="rm" type="RealMatrix"/>
                    <param name="b" type="RealVector"/>
                </params>
                <scope line="931"/>
                <scope line="936"/>
                <declaration name="rows" type="int" line="940"/>
                <scope line="941">
                    <declaration name="diag" type="double" line="942"/>
                    <scope line="943"/>
                    <declaration name="bi" type="double" line="946"/>
                    <scope line="948"/>
                </scope>
            </method>
            <javadoc line="954">
                Solver a  system composed  of an Upper Triangular Matrix{@link RealMatrix}.
                  &lt;p&gt;
                  This method is called to solve systems of equations which are
                  of the lower triangular form. The matrix {@link RealMatrix}is assumed, though not checked, to be in upper triangular form.
                  The vector {@link RealVector} is overwritten with the solution.
                  The matrix is checked that it is square and its dimensions match
                  the length of the vector.
                  &lt;/p&gt;                
                <param>
                    rm RealMatrix which is upper triangular                    
                </param>
                <param>
                    b  RealVector this is overwritten                    
                </param>
                <throws>
                    DimensionMismatchException if the matrix and vector are not
                      conformable                    
                </throws>
                <throws>
                    NonSquareMatrixException if the matrix {@code rm} is not
                      square                    
                </throws>
                <throws>
                    MathArithmeticException if the absolute value of one of the diagonal
                      coefficient of {@code rm} is lower than {@link Precision#SAFE_MIN}                    
                </throws>
            </javadoc>
            <method name="solveUpperTriangularSystem" type="void" line="975">
                <params>
                    <param name="rm" type="RealMatrix"/>
                    <param name="b" type="RealVector"/>
                </params>
                <scope line="976"/>
                <scope line="981"/>
                <declaration name="rows" type="int" line="985"/>
                <scope line="986">
                    <declaration name="diag" type="double" line="987"/>
                    <scope line="988"/>
                    <declaration name="bi" type="double" line="991"/>
                    <scope line="993"/>
                </scope>
            </method>
            <javadoc line="999">
                Computes the inverse of the given matrix by splitting it into
                  4 sub-matrices.                
                <param>
                    m Matrix whose inverse must be computed.                    
                </param>
                <param>
                    splitIndex Index that determines the &quot;split&quot; line and
                      column.
                      The element corresponding to this index will part of the
                      upper-left sub-matrix.                    
                </param>
                <return>
                    the inverse of {@code m}.                    
                </return>
                <throws>
                    NonSquareMatrixException if {@code m} is not square.                    
                </throws>
            </javadoc>
            <method name="blockInverse" type="RealMatrix" line="1012">
                <params>
                    <param name="m" type="RealMatrix"/>
                    <param name="splitIndex" type="int"/>
                </params>
                <declaration name="n" type="int" line="1013"/>
                <scope line="1014"/>
                <declaration name="splitIndex1" type="int" line="1019"/>
                <declaration name="a" type="RealMatrix" line="1021"/>
                <declaration name="b" type="RealMatrix" line="1022"/>
                <declaration name="c" type="RealMatrix" line="1023"/>
                <declaration name="d" type="RealMatrix" line="1024"/>
                <declaration name="aDec" type="SingularValueDecomposition" line="1026"/>
                <declaration name="aSolver" type="DecompositionSolver" line="1027"/>
                <scope line="1028"/>
                <declaration name="aInv" type="RealMatrix" line="1031"/>
                <declaration name="dDec" type="SingularValueDecomposition" line="1033"/>
                <declaration name="dSolver" type="DecompositionSolver" line="1034"/>
                <scope line="1035"/>
                <declaration name="dInv" type="RealMatrix" line="1038"/>
                <declaration name="tmp1" type="RealMatrix" line="1040"/>
                <declaration name="tmp1Dec" type="SingularValueDecomposition" line="1041"/>
                <declaration name="tmp1Solver" type="DecompositionSolver" line="1042"/>
                <scope line="1043"/>
                <declaration name="result00" type="RealMatrix" line="1046"/>
                <declaration name="tmp2" type="RealMatrix" line="1048"/>
                <declaration name="tmp2Dec" type="SingularValueDecomposition" line="1049"/>
                <declaration name="tmp2Solver" type="DecompositionSolver" line="1050"/>
                <scope line="1051"/>
                <declaration name="result11" type="RealMatrix" line="1054"/>
                <declaration name="result01" type="RealMatrix" line="1056"/>
                <declaration name="result10" type="RealMatrix" line="1057"/>
                <declaration name="result" type="RealMatrix" line="1059"/>
            </method>
            <javadoc line="1068">
                Computes the inverse of the given matrix.
                  &lt;p&gt;
                  By default, the inverse of the matrix is computed using the QR-decomposition,
                  unless a more efficient method can be determined for the input matrix.
                  &lt;p&gt;
                  Note: this method will use a singularity threshold of 0,
                  use {@link #inverse(RealMatrix,double)} if a different threshold is needed.                
                <param>
                    matrix Matrix whose inverse shall be computed                    
                </param>
                <return>
                    the inverse of {@code matrix}                    
                </return>
                <throws>
                    NullArgumentException if {@code matrix} is {@code null}                    
                </throws>
                <throws>
                    SingularMatrixException if m is singular                    
                </throws>
                <throws>
                    NonSquareMatrixException if matrix is not square                    
                </throws>
                <since>
                    3.3                    
                </since>
            </javadoc>
            <method name="inverse" type="RealMatrix" line="1085">
                <params>
                    <param name="matrix" type="RealMatrix"/>
                </params>
            </method>
            <javadoc line="1089">
                Computes the inverse of the given matrix.
                  &lt;p&gt;
                  By default, the inverse of the matrix is computed using the QR-decomposition,
                  unless a more efficient method can be determined for the input matrix.                
                <param>
                    matrix Matrix whose inverse shall be computed                    
                </param>
                <param>
                    threshold Singularity threshold                    
                </param>
                <return>
                    the inverse of {@code m}                    
                </return>
                <throws>
                    NullArgumentException if {@code matrix} is {@code null}                    
                </throws>
                <throws>
                    SingularMatrixException if matrix is singular                    
                </throws>
                <throws>
                    NonSquareMatrixException if matrix is not square                    
                </throws>
                <since>
                    3.3                    
                </since>
            </javadoc>
            <method name="inverse" type="RealMatrix" line="1104">
                <params>
                    <param name="matrix" type="RealMatrix"/>
                    <param name="threshold" type="double"/>
                </params>
                <scope line="1108"/>
                <scope line="1113"/>
                <scope line="1115">
                    <declaration name="decomposition" type="QRDecomposition" line="1116"/>
                </scope>
            </method>
        </class>
    </source>