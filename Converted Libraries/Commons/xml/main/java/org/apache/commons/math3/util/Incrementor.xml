<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.util">
        <import package="org.apache.commons.math3.exception.MaxCountExceededException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <class name="Incrementor" line="4">
            <javadoc line="4">
                Utility that increments a counter until a maximum is reached, at
                  which point, the instance will by default throw a{@link MaxCountExceededException}.
                  However, the user is able to override this behaviour by defining a
                  custom {@link MaxCountExceededCallback callback}, in order to e.g.
                  select which exception must be thrown.                
                <since>
                    3.0                    
                </since>
                <version>
                    $Id: Incrementor.java 1455194 2013-03-11 15:45:54Z luc $                    
                </version>
            </javadoc>
            <declaration name="maximalCount" type="int" line="14"/>
            <javadoc line="14">
                Upper limit for the counter.                
            </javadoc>
            <declaration name="count" type="int" line="18"/>
            <javadoc line="18">
                Current count.                
            </javadoc>
            <declaration name="maxCountCallback" type="MaxCountExceededCallback" line="22"/>
            <javadoc line="22">
                Function called at counter exhaustion.                
            </javadoc>
            <javadoc line="26">
                Default constructor.
                  For the new instance to be useful, the maximal count must be set
                  by calling {@link #setMaximalCount(int) setMaximalCount}.                
            </javadoc>
            <method name="Incrementor" type="constructor" line="31"/>
            <javadoc line="34">
                Defines a maximal count.                
                <param>
                    max Maximal count.                    
                </param>
            </javadoc>
            <method name="Incrementor" type="constructor" line="38">
                <params>
                    <param name="max" type="int"/>
                </params>
                <anonymous_class line="39">
                    <javadoc line="40">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="trigger" type="void" line="43">
                        <params>
                            <param name="max" type="int"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="49">
                Defines a maximal count and a callback method to be triggered at
                  counter exhaustion.                
                <param>
                    max Maximal count.                    
                </param>
                <param>
                    cb Function to be called when the maximal count has been reached.                    
                </param>
                <throws>
                    NullArgumentException if {@code cb} is {@code null}                    
                </throws>
            </javadoc>
            <method name="Incrementor" type="constructor" line="56">
                <params>
                    <param name="max" type="int"/>
                    <param name="cb" type="MaxCountExceededCallback"/>
                </params>
                <scope line="57"/>
            </method>
            <javadoc line="63">
                Sets the upper limit for the counter.
                  This does not automatically reset the current count to zero (see{@link #resetCount()}).                
                <param>
                    max Upper limit of the counter.                    
                </param>
            </javadoc>
            <method name="setMaximalCount" type="void" line="68">
                <params>
                    <param name="max" type="int"/>
                </params>
            </method>
            <javadoc line="71">
                Gets the upper limit of the counter.                
                <return>
                    the counter upper limit.                    
                </return>
            </javadoc>
            <method name="getMaximalCount" type="int" line="75"/>
            <javadoc line="78">
                Gets the current count.                
                <return>
                    the current count.                    
                </return>
            </javadoc>
            <method name="getCount" type="int" line="82"/>
            <javadoc line="85">
                Checks whether a single increment is allowed.                
                <return>
                    {@code false} if the next call to {@link #incrementCount(int)incrementCount} will trigger a {@code MaxCountExceededException},{@code true} otherwise.                    
                </return>
            </javadoc>
            <method name="canIncrement" type="boolean" line="89"/>
            <javadoc line="92">
                Performs multiple increments.
                  See the other {@link #incrementCount() incrementCount} method).                
                <param>
                    value Number of increments.                    
                </param>
                <throws>
                    MaxCountExceededException at counter exhaustion.                    
                </throws>
            </javadoc>
            <method name="incrementCount" type="void" line="98">
                <params>
                    <param name="value" type="int"/>
                </params>
                <scope line="99"/>
            </method>
            <javadoc line="103">
                Adds one to the current iteration count.
                  At counter exhaustion, this method will call the{@link MaxCountExceededCallback#trigger(int) trigger} method of the
                  callback object passed to the{@link #Incrementor(int,MaxCountExceededCallback) constructor}.
                  If not explictly set, a default callback is used that will throw
                  a {@code MaxCountExceededException}.                
                <throws>
                    MaxCountExceededException at counter exhaustion, unless a
                      custom {@link MaxCountExceededCallback callback} has been set at
                      construction.                    
                </throws>
            </javadoc>
            <method name="incrementCount" type="void" line="113">
                <scope line="114"/>
            </method>
            <javadoc line="118">
                Resets the counter to 0.                
            </javadoc>
            <method name="resetCount" type="void" line="121"/>
            <interface name="MaxCountExceededCallback">
                <javadoc line="124">
                    Defines a method to be called at counter exhaustion.
                      The {@link #trigger(int) trigger} method should usually throw an exception.                    
                </javadoc>
                <method name="trigger" type="void" line="129"/>
                <javadoc line="129">
                    Function called when the maximal count has been reached.                    
                    <param>
                        maximalCount Maximal count.                        
                    </param>
                    <throws>
                        MaxCountExceededException at counter exhaustion                        
                    </throws>
                </javadoc>
            </interface>
        </class>
    </source>