<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.geometry.spherical.twod">
        <import package="java.util.ArrayList"/>
        <import package="java.util.Collection"/>
        <import package="java.util.Collections"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="org.apache.commons.math3.exception.MathIllegalStateException"/>
        <import package="org.apache.commons.math3.geometry.enclosing.EnclosingBall"/>
        <import package="org.apache.commons.math3.geometry.enclosing.WelzlEncloser"/>
        <import package="org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D"/>
        <import package="org.apache.commons.math3.geometry.euclidean.threed.Rotation"/>
        <import package="org.apache.commons.math3.geometry.euclidean.threed.SphereGenerator"/>
        <import package="org.apache.commons.math3.geometry.euclidean.threed.Vector3D"/>
        <import package="org.apache.commons.math3.geometry.partitioning.AbstractRegion"/>
        <import package="org.apache.commons.math3.geometry.partitioning.BSPTree"/>
        <import package="org.apache.commons.math3.geometry.partitioning.BoundaryProjection"/>
        <import package="org.apache.commons.math3.geometry.partitioning.RegionFactory"/>
        <import package="org.apache.commons.math3.geometry.partitioning.SubHyperplane"/>
        <import package="org.apache.commons.math3.geometry.spherical.oned.Sphere1D"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <class name="SphericalPolygonsSet" line="41">
            <extends class="AbstractRegion">
                <type_params>
                    <type_param name="Sphere2D"/>
                    <type_param name="Sphere1D"/>
                </type_params>
            </extends>
            <javadoc line="41">
                This class represents a region on the 2-sphere: a set of spherical polygons.                
                <version>
                    $Id: SphericalPolygonsSet.java 1591835 2014-05-02 09:04:01Z tn $                    
                </version>
                <since>
                    3.3                    
                </since>
            </javadoc>
            <declaration name="loops" type="List&amp;lt;Vertex&amp;gt;" line="47"/>
            <javadoc line="47">
                Boundary defined as an array of closed loops start vertices.                
            </javadoc>
            <javadoc line="50">
                Build a polygons set representing the whole real 2-sphere.                
                <param>
                    tolerance below which points are consider to be identical                    
                </param>
            </javadoc>
            <method name="SphericalPolygonsSet" type="constructor" line="53">
                <params>
                    <param name="tolerance" type="double"/>
                </params>
            </method>
            <javadoc line="57">
                Build a polygons set representing a hemisphere.                
                <param>
                    pole pole of the hemisphere (the pole is in the inside half)                    
                </param>
                <param>
                    tolerance below which points are consider to be identical                    
                </param>
            </javadoc>
            <method name="SphericalPolygonsSet" type="constructor" line="61">
                <params>
                    <param name="pole" type="Vector3D"/>
                    <param name="tolerance" type="double"/>
                </params>
            </method>
            <javadoc line="69">
                Build a polygons set representing a regular polygon.                
                <param>
                    center center of the polygon (the center is in the inside half)                    
                </param>
                <param>
                    meridian point defining the reference meridian for first polygon vertex                    
                </param>
                <param>
                    outsideRadius distance of the vertices to the center                    
                </param>
                <param>
                    n number of sides of the polygon                    
                </param>
                <param>
                    tolerance below which points are consider to be identical                    
                </param>
            </javadoc>
            <method name="SphericalPolygonsSet" type="constructor" line="78">
                <params>
                    <param name="center" type="Vector3D"/>
                    <param name="meridian" type="Vector3D"/>
                    <param name="outsideRadius" type="double"/>
                    <param name="n" type="int"/>
                    <param name="tolerance" type="double"/>
                </params>
            </method>
            <javadoc line="82">
                Build a polygons set from a BSP tree.
                  &lt;p&gt;The leaf nodes of the BSP tree &lt;em&gt;must&lt;/em&gt; have a{@code Boolean} attribute representing the inside status of
                  the corresponding cell (true for inside cells, false for outside
                  cells). In order to avoid building too many small objects, it is
                  recommended to use the predefined constants{@code Boolean.TRUE} and {@code Boolean.FALSE}&lt;/p&gt;                
                <param>
                    tree inside/outside BSP tree representing the region                    
                </param>
                <param>
                    tolerance below which points are consider to be identical                    
                </param>
            </javadoc>
            <method name="SphericalPolygonsSet" type="constructor" line="92">
                <params>
                    <param name="tree" type="BSPTree&lt;Sphere2D&gt;"/>
                    <param name="tolerance" type="double"/>
                </params>
            </method>
            <javadoc line="96">
                Build a polygons set from a Boundary REPresentation (B-rep).
                  &lt;p&gt;The boundary is provided as a collection of {@link SubHyperplane sub-hyperplanes}. Each sub-hyperplane has the
                  interior part of the region on its minus side and the exterior on
                  its plus side.&lt;/p&gt;
                  &lt;p&gt;The boundary elements can be in any order, and can form
                  several non-connected sets (like for example polygons with holes
                  or a set of disjoint polygons considered as a whole). In
                  fact, the elements do not even need to be connected together
                  (their topological connections are not used here). However, if the
                  boundary does not really separate an inside open from an outside
                  open (open having here its topological meaning), then subsequent
                  calls to the {@link org.apache.commons.math3.geometry.partitioning.Region#checkPoint(org.apache.commons.math3.geometry.Point)checkPoint} method will not be meaningful anymore.&lt;/p&gt;
                  &lt;p&gt;If the boundary is empty, the region will represent the whole
                  space.&lt;/p&gt;                
                <param>
                    boundary collection of boundary elements, as a
                      collection of {@link SubHyperplane SubHyperplane} objects                    
                </param>
                <param>
                    tolerance below which points are consider to be identical                    
                </param>
            </javadoc>
            <method name="SphericalPolygonsSet" type="constructor" line="117">
                <params>
                    <param name="boundary" type="Collection&lt;SubHyperplane&lt;Sphere2D&gt;&gt;"/>
                    <param name="tolerance" type="double"/>
                </params>
            </method>
            <javadoc line="121">
                Build a polygon from a simple list of vertices.
                  &lt;p&gt;The boundary is provided as a list of points considering to
                  represent the vertices of a simple loop. The interior part of the
                  region is on the left side of this path and the exterior is on its
                  right side.&lt;/p&gt;
                  &lt;p&gt;This constructor does not handle polygons with a boundary
                  forming several disconnected paths (such as polygons with holes).&lt;/p&gt;
                  &lt;p&gt;For cases where this simple constructor applies, it is expected to
                  be numerically more robust than the {@link #SphericalPolygonsSet(Collection,double) general constructor} using {@link SubHyperplane subhyperplanes}.&lt;/p&gt;
                  &lt;p&gt;If the list is empty, the region will represent the whole
                  space.&lt;/p&gt;
                  &lt;p&gt;
                  Polygons with thin pikes or dents are inherently difficult to handle because
                  they involve circles with almost opposite directions at some vertices. Polygons
                  whose vertices come from some physical measurement with noise are also
                  difficult because an edge that should be straight may be broken in lots of
                  different pieces with almost equal directions. In both cases, computing the
                  circles intersections is not numerically robust due to the almost 0 or almost
                  &amp;pi; angle. Such cases need to carefully adjust the {@code hyperplaneThickness}parameter. A too small value would often lead to completely wrong polygons
                  with large area wrongly identified as inside or outside. Large values are
                  often much safer. As a rule of thumb, a value slightly below the size of the
                  most accurate detail needed is a good value for the {@code hyperplaneThickness}parameter.
                  &lt;/p&gt;                
                <param>
                    hyperplaneThickness tolerance below which points are considered to
                      belong to the hyperplane (which is therefore more a slab)                    
                </param>
                <param>
                    vertices vertices of the simple loop boundary                    
                </param>
            </javadoc>
            <method name="SphericalPolygonsSet" type="constructor" line="151">
                <params>
                    <param name="hyperplaneThickness" type="double"/>
                    <param name="vertices" type="S2Point"/>
                </params>
            </method>
            <javadoc line="155">
                Build the vertices representing a regular polygon.                
                <param>
                    center center of the polygon (the center is in the inside half)                    
                </param>
                <param>
                    meridian point defining the reference meridian for first polygon vertex                    
                </param>
                <param>
                    outsideRadius distance of the vertices to the center                    
                </param>
                <param>
                    n number of sides of the polygon                    
                </param>
                <return>
                    vertices array                    
                </return>
            </javadoc>
            <method name="createRegularPolygonVertices" type="S2Point[]" line="163">
                <params>
                    <param name="center" type="Vector3D"/>
                    <param name="meridian" type="Vector3D"/>
                    <param name="outsideRadius" type="double"/>
                    <param name="n" type="int"/>
                </params>
                <declaration name="array" type="S2Point[]" line="164"/>
                <declaration name="r0" type="Rotation" line="165"/>
                <declaration name="r" type="Rotation" line="168"/>
                <scope line="169"/>
            </method>
            <javadoc line="176">
                Build the BSP tree of a polygons set from a simple list of vertices.
                  &lt;p&gt;The boundary is provided as a list of points considering to
                  represent the vertices of a simple loop. The interior part of the
                  region is on the left side of this path and the exterior is on its
                  right side.&lt;/p&gt;
                  &lt;p&gt;This constructor does not handle polygons with a boundary
                  forming several disconnected paths (such as polygons with holes).&lt;/p&gt;
                  &lt;p&gt;This constructor handles only polygons with edges strictly shorter
                  than \( \pi \). If longer edges are needed, they need to be broken up
                  in smaller sub-edges so this constraint holds.&lt;/p&gt;
                  &lt;p&gt;For cases where this simple constructor applies, it is expected to
                  be numerically more robust than the {@link #PolygonsSet(Collection) general
                  constructor} using {@link SubHyperplane subhyperplanes}.&lt;/p&gt;                
                <param>
                    hyperplaneThickness tolerance below which points are consider to
                      belong to the hyperplane (which is therefore more a slab)                    
                </param>
                <param>
                    vertices vertices of the simple loop boundary                    
                </param>
                <return>
                    the BSP tree of the input vertices                    
                </return>
            </javadoc>
            <method name="verticesToTree" type="BSPTree&lt;Sphere2D&gt;" line="195">
                <params>
                    <param name="hyperplaneThickness" type="double"/>
                    <param name="vertices" type="S2Point"/>
                </params>
                <comment line="200">
                    the tree represents the whole space                    
                </comment>
                <comment line="204">
                    build the vertices                    
                </comment>
                <comment line="210">
                    build the edges                    
                </comment>
                <comment line="215">
                    get the endpoints of the edge                    
                </comment>
                <comment line="219">
                    get the circle supporting the edge, taking care not to recreate it
                     if it was already created earlier due to another edge being aligned
                     with the current one                    
                </comment>
                <comment line="227">
                    create the edge and store it                    
                </comment>
                <comment line="233">
                    check if another vertex also happens to be on this circle                    
                </comment>
                <comment line="243">
                    build the tree top-down                    
                </comment>
                <declaration name="n" type="int" line="197"/>
                <scope line="198"/>
                <declaration name="vArray" type="Vertex[]" line="204"/>
                <scope line="205"/>
                <declaration name="edges" type="List&amp;lt;Edge&amp;gt;" line="210"/>
                <declaration name="end" type="Vertex" line="211"/>
                <scope line="212">
                    <declaration name="start" type="Vertex" line="215"/>
                    <declaration name="circle" type="Circle" line="221"/>
                    <scope line="222"/>
                    <scope line="233">
                        <scope line="235"/>
                    </scope>
                </scope>
                <declaration name="tree" type="BSPTree&amp;lt;Sphere2D&amp;gt;" line="243"/>
            </method>
            <javadoc line="250">
                Recursively build a tree by inserting cut sub-hyperplanes.                
                <param>
                    hyperplaneThickness tolerance below which points are considered to
                      belong to the hyperplane (which is therefore more a slab)                    
                </param>
                <param>
                    node current tree node (it is a leaf node at the beginning
                      of the call)                    
                </param>
                <param>
                    edges list of edges to insert in the cell defined by this node
                      (excluding edges not belonging to the cell defined by this node)                    
                </param>
            </javadoc>
            <method name="insertEdges" type="void" line="260">
                <params>
                    <param name="hyperplaneThickness" type="double"/>
                    <param name="node" type="BSPTree&lt;Sphere2D&gt;"/>
                    <param name="edges" type="List&lt;Edge&gt;"/>
                </params>
                <comment line="263">
                    find an edge with an hyperplane that can be inserted in the node                    
                </comment>
                <comment line="274">
                    no suitable edge was found, the node remains a leaf node
                     we need to set its inside/outside boolean indicator                    
                </comment>
                <comment line="285">
                    we have split the node by inserting an edge as a cut sub-hyperplane
                     distribute the remaining edges in the two sub-trees                    
                </comment>
                <comment line="295">
                    recurse through lower levels                    
                </comment>
                <declaration name="index" type="int" line="263"/>
                <declaration name="inserted" type="Edge" line="264"/>
                <scope line="265">
                    <scope line="267"/>
                </scope>
                <scope line="272">
                    <declaration name="parent" type="BSPTree&amp;lt;Sphere2D&amp;gt;" line="275"/>
                    <scope line="276"/>
                    <scope line="278"/>
                </scope>
                <declaration name="outsideList" type="List&amp;lt;Edge&amp;gt;" line="286"/>
                <declaration name="insideList" type="List&amp;lt;Edge&amp;gt;" line="287"/>
                <scope line="288">
                    <scope line="289"/>
                </scope>
                <scope line="295"/>
                <scope line="297"/>
                <scope line="300"/>
                <scope line="302"/>
            </method>
            <javadoc line="308">
                {@inheritDoc}                
            </javadoc>
            <method name="buildNew" type="SphericalPolygonsSet" line="310">
                <params>
                    <param name="tree" type="BSPTree&lt;Sphere2D&gt;"/>
                </params>
            </method>
            <javadoc line="314">
                {@inheritDoc}                
                <exception>
                    MathIllegalStateException if the tolerance setting does not allow to build
                      a clean non-ambiguous boundary                    
                </exception>
            </javadoc>
            <method name="computeGeometricalProperties" type="void" line="319">
                <comment line="326">
                    the instance has a single cell without any boundaries                    
                </comment>
                <comment line="329">
                    the instance covers the whole space                    
                </comment>
                <comment line="339">
                    the instance has a boundary                    
                </comment>
                <declaration name="tree" type="BSPTree&amp;lt;Sphere2D&amp;gt;" line="321"/>
                <scope line="323">
                    <scope line="327"/>
                    <scope line="331"/>
                </scope>
                <scope line="336">
                    <declaration name="pc" type="PropertiesComputer" line="339"/>
                </scope>
            </method>
            <javadoc line="348">
                Get the boundary loops of the polygon.
                  &lt;p&gt;The polygon boundary can be represented as a list of closed loops,
                  each loop being given by exactly one of its vertices. From each loop
                  start vertex, one can follow the loop by finding the outgoing edge,
                  then the end vertex, then the next outgoing edge ... until the start
                  vertex of the loop (exactly the same instance) is found again once
                  the full loop has been visited.&lt;/p&gt;
                  &lt;p&gt;If the polygon has no boundary at all, a zero length loop
                  array will be returned.&lt;/p&gt;
                  &lt;p&gt;If the polygon is a simple one-piece polygon, then the returned
                  array will contain a single vertex.
                  &lt;/p&gt;
                  &lt;p&gt;All edges in the various loops have the inside of the region on
                  their left side (i.e. toward their pole) and the outside on their
                  right side (i.e. away from their pole) when moving in the underlying
                  circle direction. This means that the closed loops obey the direct
                  trigonometric orientation.&lt;/p&gt;                
                <return>
                    boundary of the polygon, organized as an unmodifiable list of loops start vertices.                    
                </return>
                <exception>
                    MathIllegalStateException if the tolerance setting does not allow to build
                      a clean non-ambiguous boundary                    
                </exception>
                <see>
                    Vertex                    
                </see>
                <see>
                    Edge                    
                </see>
            </javadoc>
            <method name="getBoundaryLoops" type="List&lt;Vertex&gt;" line="371">
                <comment line="379">
                    sort the arcs according to their start point                    
                </comment>
                <comment line="386">
                    convert the list of all edges into a list of start vertices                    
                </comment>
                <comment line="390">
                    this is an edge belonging to a new loop, store it                    
                </comment>
                <comment line="395">
                    remove all remaining edges in the same loop                    
                </comment>
                <comment line="398">
                    remove one edge                    
                </comment>
                <comment line="406">
                    go to next edge following the boundary loop                    
                </comment>
                <scope line="373">
                    <scope line="374"/>
                    <scope line="376">
                        <declaration name="root" type="BSPTree&amp;lt;Sphere2D&amp;gt;" line="379"/>
                        <declaration name="visitor" type="EdgesBuilder" line="380"/>
                        <declaration name="edges" type="List&amp;lt;Edge&amp;gt;" line="382"/>
                        <scope line="387">
                            <declaration name="edge" type="Edge" line="390"/>
                            <declaration name="startVertex" type="Vertex" line="391"/>
                            <scope line="395">
                                <scope line="398">
                                    <scope line="399"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="419">
                Get a spherical cap enclosing the polygon.
                  &lt;p&gt;
                  This method is intended as a first test to quickly identify points
                  that are guaranteed to be outside of the region, hence performing a full{@link #checkPoint(org.apache.commons.math3.geometry.Vector) checkPoint}only if the point status remains undecided after the quick check. It is
                  is therefore mostly useful to speed up computation for small polygons with
                  complex shapes (say a country boundary on Earth), as the spherical cap will
                  be small and hence will reliably identify a large part of the sphere as outside,
                  whereas the full check can be more computing intensive. A typical use case is
                  therefore:
                  &lt;/p&gt;
                  &lt;pre&gt;
                  // compute region, plus an enclosing spherical cap
                  SphericalPolygonsSet complexShape = ...;
                  EnclosingBall&lt;Sphere2D, S2Point&gt; cap = complexShape.getEnclosingCap();
                  // check lots of points
                  for (Vector3D p : points) {
                  final Location l;
                  if (cap.contains(p)) {
                  // we cannot be sure where the point is
                  // we need to perform the full computation
                  l = complexShape.checkPoint(v);
                  } else {
                  // no need to do further computation,
                  // we already know the point is outside
                  l = Location.OUTSIDE;
                  }
                  // use l ...
                  }
                  &lt;/pre&gt;
                  &lt;p&gt;
                  In the special cases of empty or whole sphere polygons, special
                  spherical caps are returned, with angular radius set to negative
                  or positive infinity so the {@link EnclosingBall#contains(org.apache.commons.math3.geometry.Point) ball.contains(point)}method return always false or true.
                  &lt;/p&gt;
                  &lt;p&gt;
                  This method is &lt;em&gt;not&lt;/em&gt; guaranteed to return the smallest enclosing cap.
                  &lt;/p&gt;                
                <return>
                    a spherical cap enclosing the polygon                    
                </return>
            </javadoc>
            <method name="getEnclosingCap" type="EnclosingBall&lt;Sphere2D,S2Point&gt;" line="466">
                <comment line="469">
                    handle special cases first                    
                </comment>
                <comment line="477">
                    as the polygons is neither empty nor full, it has some boundaries and cut hyperplanes                    
                </comment>
                <comment line="480">
                    the polygon covers an hemisphere, and its boundary is one 2π long edge                    
                </comment>
                <comment line="486">
                    the polygon covers an hemisphere, and its boundary is one 2π long edge                    
                </comment>
                <comment line="492">
                    gather some inside points, to be used by the encloser                    
                </comment>
                <comment line="495">
                    extract points from the boundary loops, to be used by the encloser as well                    
                </comment>
                <comment line="505">
                    find the smallest enclosing 3D sphere                    
                </comment>
                <comment line="512">
                    convert to 3D sphere to spherical cap                    
                </comment>
                <comment line="516">
                    the 3D sphere is centered on the unit sphere and covers it
                     fall back to a crude approximation, based only on outside convex cells                    
                </comment>
                <scope line="469"/>
                <scope line="472"/>
                <declaration name="root" type="BSPTree&amp;lt;Sphere2D&amp;gt;" line="477"/>
                <scope line="478">
                    <declaration name="circle" type="Circle" line="480"/>
                </scope>
                <scope line="484">
                    <declaration name="circle" type="Circle" line="486"/>
                </scope>
                <declaration name="points" type="List&amp;lt;Vector3D&amp;gt;" line="492"/>
                <declaration name="boundary" type="List&amp;lt;Vertex&amp;gt;" line="495"/>
                <scope line="496">
                    <declaration name="count" type="int" line="497"/>
                    <scope line="498"/>
                </scope>
                <declaration name="generator" type="SphereGenerator" line="505"/>
                <declaration name="encloser" type="WelzlEncloser&amp;lt;Euclidean3D,Vector3D&amp;gt;" line="506"/>
                <declaration name="enclosing3D" type="EnclosingBall&amp;lt;Euclidean3D,Vector3D&amp;gt;" line="508"/>
                <declaration name="support3D" type="Vector3D[]" line="509"/>
                <declaration name="r" type="double" line="512"/>
                <declaration name="h" type="double" line="513"/>
                <scope line="514">
                    <declaration name="enclosingS2" type="EnclosingBall&amp;lt;Sphere2D,S2Point&amp;gt;" line="517"/>
                    <scope line="519">
                        <declaration name="outsideS2" type="S2Point" line="520"/>
                        <declaration name="projection" type="BoundaryProjection&amp;lt;Sphere2D&amp;gt;" line="521"/>
                        <scope line="522"/>
                    </scope>
                </scope>
                <declaration name="support" type="S2Point[]" line="530"/>
                <scope line="531"/>
                <declaration name="enclosingS2" type="EnclosingBall&amp;lt;Sphere2D,S2Point&amp;gt;" line="535"/>
            </method>
            <javadoc line="544">
                Gather some inside points.                
                <return>
                    list of points known to be strictly in all inside convex cells                    
                </return>
            </javadoc>
            <method name="getInsidePoints" type="List&lt;Vector3D&gt;" line="547">
                <declaration name="pc" type="PropertiesComputer" line="548"/>
            </method>
            <javadoc line="553">
                Gather some outside points.                
                <return>
                    list of points known to be strictly in all outside convex cells                    
                </return>
            </javadoc>
            <method name="getOutsidePoints" type="List&lt;Vector3D&gt;" line="556">
                <declaration name="complement" type="SphericalPolygonsSet" line="557"/>
                <declaration name="pc" type="PropertiesComputer" line="559"/>
            </method>
        </class>
    </source>