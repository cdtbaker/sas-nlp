<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.ml.neuralnet">
        <import package="java.io.Serializable"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.util.concurrent.atomic.AtomicReference"/>
        <import package="org.apache.commons.math3.util.Precision"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <class name="Neuron" line="27">
            <implements interface="Serializable"/>
            <javadoc line="27">
                Describes a neuron element of a neural network.
                  This class aims to be thread-safe.                
                <version>
                    $Id: Neuron.java 1566092 2014-02-08 18:48:29Z tn $                    
                </version>
                <since>
                    3.3                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="36"/>
            <javadoc line="36">
                Serializable.                
            </javadoc>
            <declaration name="identifier" type="long" line="38"/>
            <javadoc line="38">
                Identifier.                
            </javadoc>
            <declaration name="size" type="int" line="40"/>
            <javadoc line="40">
                Length of the feature set.                
            </javadoc>
            <declaration name="features" type="AtomicReference&amp;lt;double[]&amp;gt;" line="42"/>
            <javadoc line="42">
                Neuron data.                
            </javadoc>
            <javadoc line="45">
                Creates a neuron.
                  The size of the feature set is fixed to the length of the given
                  argument.
                  &lt;br/&gt;
                  Constructor is package-private: Neurons must be{@link Network#createNeuron(double[]) created} by the network
                  instance to which they will belong.                
                <param>
                    identifier Identifier (assigned by the {@link Network}).                    
                </param>
                <param>
                    features Initial values of the feature set.                    
                </param>
            </javadoc>
            <method name="Neuron" type="constructor" line="58">
                <params>
                    <param name="identifier" type="long"/>
                    <param name="features" type="double[]"/>
                </params>
            </method>
            <javadoc line="64">
                Gets the neuron&apos;s identifier.                
                <return>
                    the identifier.                    
                </return>
            </javadoc>
            <method name="getIdentifier" type="long" line="69"/>
            <javadoc line="73">
                Gets the length of the feature set.                
                <return>
                    the number of features.                    
                </return>
            </javadoc>
            <method name="getSize" type="int" line="78"/>
            <javadoc line="82">
                Gets the neuron&apos;s features.                
                <return>
                    a copy of the neuron&apos;s features.                    
                </return>
            </javadoc>
            <method name="getFeatures" type="double[]" line="87"/>
            <javadoc line="91">
                Tries to atomically update the neuron&apos;s features.
                  Update will be performed only if the expected values match the
                  current values.&lt;br/&gt;
                  In effect, when concurrent threads call this method, the state
                  could be modified by one, so that it does not correspond to the
                  the state assumed by another.
                  Typically, a caller {@link #getFeatures() retrieves the current state},
                  and uses it to compute the new state.
                  During this computation, another thread might have done the same
                  thing, and updated the state: If the current thread were to proceed
                  with its own update, it would overwrite the new state (which might
                  already have been used by yet other threads).
                  To prevent this, the method does not perform the update when a
                  concurrent modification has been detected, and returns {@code false}.
                  When this happens, the caller should fetch the new current state,
                  redo its computation, and call this method again.                
                <param>
                    expect Current values of the features, as assumed by the caller.
                      Update will never succeed if the contents of this array does not match
                      the values returned by {@link #getFeatures()}.                    
                </param>
                <param>
                    update Features&apos;s new values.                    
                </param>
                <return>
                    {@code true} if the update was successful, {@code false}otherwise.                    
                </return>
                <throws>
                    DimensionMismatchException if the length of {@code update} is
                      not the same as specified in the {@link #Neuron(long,double[])constructor}.                    
                </throws>
            </javadoc>
            <method name="compareAndSetFeatures" type="boolean" line="120">
                <params>
                    <param name="expect" type="double[]"/>
                    <param name="update" type="double[]"/>
                </params>
                <comment line="126">
                    Get the internal reference. Note that this must not be a copy;
                     otherwise the &quot;compareAndSet&quot; below will always fail.                    
                </comment>
                <comment line="130">
                    Some other thread already modified the state.                    
                </comment>
                <comment line="135">
                    The current thread could atomically update the state.                    
                </comment>
                <comment line="138">
                    Some other thread came first.                    
                </comment>
                <scope line="121"/>
                <declaration name="current" type="double[]" line="127"/>
                <scope line="128"/>
                <scope line="133"/>
                <scope line="136"/>
            </method>
            <javadoc line="142">
                Checks whether the contents of both arrays is the same.                
                <param>
                    current Current values.                    
                </param>
                <param>
                    expect Expected values.                    
                </param>
                <throws>
                    DimensionMismatchException if the length of {@code expected}is not the same as specified in the {@link #Neuron(long,double[])constructor}.                    
                </throws>
                <return>
                    {@code true} if the arrays contain the same values.                    
                </return>
            </javadoc>
            <method name="containSameValues" type="boolean" line="153">
                <params>
                    <param name="current" type="double[]"/>
                    <param name="expect" type="double[]"/>
                </params>
                <scope line="154"/>
                <scope line="158">
                    <scope line="159"/>
                </scope>
            </method>
            <javadoc line="166">
                Prevents proxy bypass.                
                <param>
                    in Input stream.                    
                </param>
            </javadoc>
            <method name="readObject" type="void" line="171">
                <params>
                    <param name="in" type="ObjectInputStream"/>
                </params>
            </method>
            <javadoc line="175">
                Custom serialization.                
                <return>
                    the proxy instance that will be actually serialized.                    
                </return>
            </javadoc>
            <method name="writeReplace" type="Object" line="180"/>
            <class name="SerializationProxy" line="185">
                <implements interface="Serializable"/>
                <javadoc line="185">
                    Serialization.                    
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="189"/>
                <javadoc line="189">
                    Serializable.                    
                </javadoc>
                <declaration name="features" type="double[]" line="191"/>
                <javadoc line="191">
                    Features.                    
                </javadoc>
                <declaration name="identifier" type="long" line="193"/>
                <javadoc line="193">
                    Identifier.                    
                </javadoc>
                <javadoc line="196">
                    @param identifier Identifier.                    
                    <param>
                        features Features.                        
                    </param>
                </javadoc>
                <method name="SerializationProxy" type="constructor" line="201">
                    <params>
                        <param name="identifier" type="long"/>
                        <param name="features" type="double[]"/>
                    </params>
                </method>
                <javadoc line="206">
                    Custom serialization.                    
                    <return>
                        the {@link Neuron} for which this instance is the proxy.                        
                    </return>
                </javadoc>
                <method name="readResolve" type="Object" line="211"/>
            </class>
        </class>
    </source>