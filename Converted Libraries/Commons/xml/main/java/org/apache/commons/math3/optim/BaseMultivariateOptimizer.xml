<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optim">
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <class name="BaseMultivariateOptimizer" line="23">
            <type_params>
                <type_param name="PAIR"/>
            </type_params>
            <extends class="BaseOptimizer">
                <type_params>
                    <type_param name="PAIR"/>
                </type_params>
            </extends>
            <javadoc line="23">
                Base class for implementing optimizers for multivariate functions.
                  It contains the boiler-plate code for initial guess and bounds
                  specifications.
                  &lt;em&gt;It is not a &quot;user&quot; class.&lt;/em&gt;                
                <param>
                    <PAIR>
                       Type of the point/value pair returned by the optimization
                      algorithm.                    
                </param>
                <version>
                    $Id: BaseMultivariateOptimizer.java 1443444 2013-02-07 12:41:36Z erans $                    
                </version>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <declaration name="start" type="double[]" line="37"/>
            <javadoc line="37">
                Initial guess.                
            </javadoc>
            <declaration name="lowerBound" type="double[]" line="39"/>
            <javadoc line="39">
                Lower bounds.                
            </javadoc>
            <declaration name="upperBound" type="double[]" line="41"/>
            <javadoc line="41">
                Upper bounds.                
            </javadoc>
            <javadoc line="44">
                @param checker Convergence checker.                
            </javadoc>
            <method name="BaseMultivariateOptimizer" type="constructor" line="47">
                <params>
                    <param name="checker" type="ConvergenceChecker<PAIR>"/>
                </params>
            </method>
            <javadoc line="51">
                {@inheritDoc}                
                <param>
                    optData Optimization data. In addition to those documented in{@link BaseOptimizer#parseOptimizationData(OptimizationData[]) BaseOptimizer},
                      this method will register the following data:
                      <ul>
                      <li>{@link InitialGuess}</li>
                      <li>{@link SimpleBounds}</li>
                      </ul>                    
                </param>
                <return>
                    {@inheritDoc}                    
                </return>
            </javadoc>
            <method name="optimize" type="PAIR" line="64">
                <params>
                    <param name="optData" type="OptimizationData"/>
                </params>
                <comment line="66">
                    Perform optimization.                    
                </comment>
            </method>
            <javadoc line="69">
                Scans the list of (required and optional) optimization data that
                  characterize the problem.                
                <param>
                    optData Optimization data. The following data will be looked for:
                      <ul>
                      <li>{@link InitialGuess}</li>
                      <li>{@link SimpleBounds}</li>
                      </ul>                    
                </param>
            </javadoc>
            <method name="parseOptimizationData" type="void" line="80">
                <params>
                    <param name="optData" type="OptimizationData"/>
                </params>
                <comment line="82">
                    Allow base class to register its own data.                    
                </comment>
                <comment line="85">
                    The existing values (as set by the previous call) are reused if
                     not provided in the argument list.                    
                </comment>
                <comment line="100">
                    Check input consistency.                    
                </comment>
                <scope line="86">
                    <scope line="87"/>
                    <scope line="91">
                        <declaration name="bounds" type="SimpleBounds" line="92"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="103">
                Gets the initial guess.                
                <return>
                    the initial guess, or {@code null} if not set.                    
                </return>
            </javadoc>
            <method name="getStartPoint" type="double[]" line="108"/>
            <javadoc line="111">
                @return the lower bounds, or {@code null} if not set.                
            </javadoc>
            <method name="getLowerBound" type="double[]" line="114"/>
            <javadoc line="117">
                @return the upper bounds, or {@code null} if not set.                
            </javadoc>
            <method name="getUpperBound" type="double[]" line="120"/>
            <javadoc line="124">
                Check parameters consistency.                
            </javadoc>
            <method name="checkParameters" type="void" line="127">
                <scope line="128">
                    <declaration name="dim" type="int" line="129"/>
                    <scope line="130">
                        <scope line="131"/>
                        <scope line="134">
                            <declaration name="v" type="double" line="135"/>
                            <declaration name="lo" type="double" line="136"/>
                            <scope line="137"/>
                        </scope>
                    </scope>
                    <scope line="142">
                        <scope line="143"/>
                        <scope line="146">
                            <declaration name="v" type="double" line="147"/>
                            <declaration name="hi" type="double" line="148"/>
                            <scope line="149"/>
                        </scope>
                    </scope>
                </scope>
            </method>
        </class>
    </source>