<?xml version="1.0" encoding="UTF-8"?>
    <source package="
 * Decimal floating point library for Java
 * <p>Another floating point class.  This one is built using radix 10000
 * which is 10<sup>4</sup>, so its almost decimal.</p>
 * <p>The design goals here are:
 * <ol>
 * <li>Decimal math, or close to it</li>
 * <li>Settable precision (but no mix between numbers using different settings)</li>
 * <li>Portability.  Code should be keep as portable as possible.</li>
 * <li>Performance</li>
 * <li>Accuracy  - Results should always be +/- 1 ULP for basic
 * algebraic operation</li>
 * <li>Comply with IEEE 854-1987 as much as possible.
 * (See IEEE 854-1987 notes below)</li>
 * </ol></p>
 * <p>Trade offs:
 * <ol>
 * <li>Memory foot print.  I'm using more memory than necessary to
 * represent numbers to get better performance.</li>
 * <li>Digits are bigger, so rounding is a greater loss.  So, if you
 * really need 12 decimal digits, better use 4 base 10000 digits
 * there can be one partially filled.</li>
 * </ol></p>
 * <p>Numbers are represented  in the following form:
 * <pre>
 * n  =  sign &times">
        <javadoc line="17">
            Decimal floating point library for Java
              &lt;p&gt;Another floating point class.  This one is built using radix 10000
              which is 10&lt;sup&gt;4&lt;/sup&gt;, so its almost decimal.&lt;/p&gt;
              &lt;p&gt;The design goals here are:
              &lt;ol&gt;
              &lt;li&gt;Decimal math, or close to it&lt;/li&gt;
              &lt;li&gt;Settable precision (but no mix between numbers using different settings)&lt;/li&gt;
              &lt;li&gt;Portability.  Code should be keep as portable as possible.&lt;/li&gt;
              &lt;li&gt;Performance&lt;/li&gt;
              &lt;li&gt;Accuracy  - Results should always be +/- 1 ULP for basic
              algebraic operation&lt;/li&gt;
              &lt;li&gt;Comply with IEEE 854-1987 as much as possible.
              (See IEEE 854-1987 notes below)&lt;/li&gt;
              &lt;/ol&gt;&lt;/p&gt;
              &lt;p&gt;Trade offs:
              &lt;ol&gt;
              &lt;li&gt;Memory foot print.  I&apos;m using more memory than necessary to
              represent numbers to get better performance.&lt;/li&gt;
              &lt;li&gt;Digits are bigger, so rounding is a greater loss.  So, if you
              really need 12 decimal digits, better use 4 base 10000 digits
              there can be one partially filled.&lt;/li&gt;
              &lt;/ol&gt;&lt;/p&gt;
              &lt;p&gt;Numbers are represented  in the following form:
              &lt;pre&gt;
              n  =  sign &amp;times; mant &amp;times; (radix)&lt;sup&gt;exp&lt;/sup&gt;;&lt;/p&gt;
              &lt;/pre&gt;
              where sign is &amp;plusmn;1, mantissa represents a fractional number between
              zero and one.  mant[0] is the least significant digit.
              exp is in the range of -32767 to 32768&lt;/p&gt;
              &lt;p&gt;IEEE 854-1987  Notes and differences&lt;/p&gt;
              &lt;p&gt;IEEE 854 requires the radix to be either 2 or 10.  The radix here is
              10000, so that requirement is not met, but  it is possible that a
              subclassed can be made to make it behave as a radix 10
              number.  It is my opinion that if it looks and behaves as a radix
              10 number then it is one and that requirement would be met.&lt;/p&gt;
              &lt;p&gt;The radix of 10000 was chosen because it should be faster to operate
              on 4 decimal digits at once instead of one at a time.  Radix 10 behavior
              can be realized by add an additional rounding step to ensure that
              the number of decimal digits represented is constant.&lt;/p&gt;
              &lt;p&gt;The IEEE standard specifically leaves out internal data encoding,
              so it is reasonable to conclude that such a subclass of this radix
              10000 system is merely an encoding of a radix 10 system.&lt;/p&gt;
              &lt;p&gt;IEEE 854 also specifies the existence of &quot;sub-normal&quot; numbers.  This
              class does not contain any such entities.  The most significant radix
              10000 digit is always non-zero.  Instead, we support &quot;gradual underflow&quot;
              by raising the underflow flag for numbers less with exponent less than
              expMin, but don&apos;t flush to zero until the exponent reaches MIN_EXP-digits.
              Thus the smallest number we can represent would be:
              1E(-(MIN_EXP-digits-1)&amp;lowast;4),  eg, for digits=5, MIN_EXP=-32767, that would
              be 1e-131092.&lt;/p&gt;
              &lt;p&gt;IEEE 854 defines that the implied radix point lies just to the right
              of the most significant digit and to the left of the remaining digits.
              This implementation puts the implied radix point to the left of all
              digits including the most significant one.  The most significant digit
              here is the one just to the right of the radix point.  This is a fine
              detail and is really only a matter of definition.  Any side effects of
              this can be rendered invisible by a subclass.&lt;/p&gt;            
        </javadoc>
    </source>