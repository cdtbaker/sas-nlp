<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optimization.fitting">
        <import package="java.util.Arrays"/>
        <import package="java.util.Comparator"/>
        <import package="org.apache.commons.math3.analysis.function.Gaussian"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.exception.ZeroException"/>
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="GaussianFitter" line="33">
            <extends class="CurveFitter">
                <type_params>
                    <type_param name="Gaussian.Parametric"/>
                </type_params>
            </extends>
            <javadoc line="33">
                Fits points to a {@link org.apache.commons.math3.analysis.function.Gaussian.Parametric Gaussian} function.
                  &lt;p&gt;
                  Usage example:
                  &lt;pre&gt;
                  GaussianFitter fitter = new GaussianFitter(
                  new LevenbergMarquardtOptimizer());
                  fitter.addObservedPoint(4.0254623,  531026.0);
                  fitter.addObservedPoint(4.03128248, 984167.0);
                  fitter.addObservedPoint(4.03839603, 1887233.0);
                  fitter.addObservedPoint(4.04421621, 2687152.0);
                  fitter.addObservedPoint(4.05132976, 3461228.0);
                  fitter.addObservedPoint(4.05326982, 3580526.0);
                  fitter.addObservedPoint(4.05779662, 3439750.0);
                  fitter.addObservedPoint(4.0636168,  2877648.0);
                  fitter.addObservedPoint(4.06943698, 2175960.0);
                  fitter.addObservedPoint(4.07525716, 1447024.0);
                  fitter.addObservedPoint(4.08237071, 717104.0);
                  fitter.addObservedPoint(4.08366408, 620014.0);
                  double[] parameters = fitter.fit();
                  &lt;/pre&gt;                
                <since>
                    2.2                    
                </since>
                <version>
                    $Id: GaussianFitter.java 1422230 2012-12-15 12:11:13Z erans $                    
                </version>
                <deprecated>
                    As of 3.1 (to be removed in 4.0).                    
                </deprecated>
            </javadoc>
            <javadoc line="62">
                Constructs an instance using the specified optimizer.                
                <param>
                    optimizer Optimizer to use for the fitting.                    
                </param>
            </javadoc>
            <method name="GaussianFitter" type="constructor" line="67">
                <params>
                    <param name="optimizer" type="DifferentiableMultivariateVectorOptimizer"/>
                </params>
            </method>
            <javadoc line="71">
                Fits a Gaussian function to the observed points.                
                <param>
                    initialGuess First guess values in the following order:
                      &lt;ul&gt;
                      &lt;li&gt;Norm&lt;/li&gt;
                      &lt;li&gt;Mean&lt;/li&gt;
                      &lt;li&gt;Sigma&lt;/li&gt;
                      &lt;/ul&gt;                    
                </param>
                <return>
                    the parameters of the Gaussian function that best fits the
                      observed points (in the same order as above).                    
                </return>
                <since>
                    3.0                    
                </since>
            </javadoc>
            <method name="fit" type="double[]" line="84">
                <params>
                    <param name="initialGuess" type="double[]"/>
                </params>
                <comment line="92">
                    NOPMD                    
                </comment>
                <comment line="93">
                    Do nothing.                    
                </comment>
                <comment line="105">
                    NOPMD                    
                </comment>
                <comment line="106">
                    Do nothing.                    
                </comment>
                <anonymous_class line="85">
                    <method name="value" type="double" line="87">
                        <params>
                            <param name="x" type="double"/>
                            <param name="p" type="double"/>
                        </params>
                        <comment line="92">
                            NOPMD                            
                        </comment>
                        <comment line="93">
                            Do nothing.                            
                        </comment>
                        <declaration name="v" type="double" line="88"/>
                        <scope line="89"/>
                        <scope line="91"/>
                    </method>
                    <method name="gradient" type="double[]" line="98">
                        <params>
                            <param name="x" type="double"/>
                            <param name="p" type="double"/>
                        </params>
                        <comment line="105">
                            NOPMD                            
                        </comment>
                        <comment line="106">
                            Do nothing.                            
                        </comment>
                        <declaration name="v" type="double[]" line="99"/>
                        <scope line="102"/>
                        <scope line="104"/>
                    </method>
                </anonymous_class>
                <declaration name="f" type="Gaussian.Parametric" line="85"/>
            </method>
            <javadoc line="114">
                Fits a Gaussian function to the observed points.                
                <return>
                    the parameters of the Gaussian function that best fits the
                      observed points (in the same order as above).                    
                </return>
            </javadoc>
            <method name="fit" type="double[]" line="120">
                <declaration name="guess" type="double[]" line="121"/>
            </method>
            <class name="ParameterGuesser" line="125">
                <javadoc line="125">
                    Guesses the parameters {@code norm}, {@code mean}, and {@code sigma}of a {@link org.apache.commons.math3.analysis.function.Gaussian.Parametric}based on the specified observed points.                    
                </javadoc>
                <declaration name="norm" type="double" line="131"/>
                <javadoc line="131">
                    Normalization factor.                    
                </javadoc>
                <declaration name="mean" type="double" line="133"/>
                <javadoc line="133">
                    Mean.                    
                </javadoc>
                <declaration name="sigma" type="double" line="135"/>
                <javadoc line="135">
                    Standard deviation.                    
                </javadoc>
                <javadoc line="138">
                    Constructs instance with the specified observed points.                    
                    <param>
                        observations Observed points from which to guess the
                          parameters of the Gaussian.                        
                    </param>
                    <throws>
                        NullArgumentException if {@code observations} is{@code null}.                        
                    </throws>
                    <throws>
                        NumberIsTooSmallException if there are less than 3
                          observations.                        
                    </throws>
                </javadoc>
                <method name="ParameterGuesser" type="constructor" line="148">
                    <params>
                        <param name="observations" type="WeightedObservedPoint[]"/>
                    </params>
                    <scope line="149"/>
                    <scope line="152"/>
                    <declaration name="sorted" type="WeightedObservedPoint[]" line="156"/>
                    <declaration name="params" type="double[]" line="157"/>
                </method>
                <javadoc line="164">
                    Gets an estimation of the parameters.                    
                    <return>
                        the guessed parameters, in the following order:
                          &lt;ul&gt;
                          &lt;li&gt;Normalization factor&lt;/li&gt;
                          &lt;li&gt;Mean&lt;/li&gt;
                          &lt;li&gt;Standard deviation&lt;/li&gt;
                          &lt;/ul&gt;                        
                    </return>
                </javadoc>
                <method name="guess" type="double[]" line="174"/>
                <javadoc line="178">
                    Sort the observations.                    
                    <param>
                        unsorted Input observations.                        
                    </param>
                    <return>
                        the input observations, sorted.                        
                    </return>
                </javadoc>
                <method name="sortObservations" type="WeightedObservedPoint[]" line="184">
                    <params>
                        <param name="unsorted" type="WeightedObservedPoint[]"/>
                    </params>
                    <declaration name="observations" type="WeightedObservedPoint[]" line="185"/>
                    <anonymous_class line="187">
                        <method name="compare" type="int" line="189">
                            <params>
                                <param name="p1" type="WeightedObservedPoint"/>
                                <param name="p2" type="WeightedObservedPoint"/>
                            </params>
                            <scope line="190"/>
                            <scope line="193"/>
                            <scope line="196"/>
                            <scope line="199"/>
                            <scope line="202"/>
                            <scope line="205"/>
                            <scope line="208"/>
                            <scope line="211"/>
                            <scope line="214"/>
                        </method>
                    </anonymous_class>
                    <declaration name="cmp" type="Comparator&amp;lt;WeightedObservedPoint&amp;gt;" line="186"/>
                </method>
                <javadoc line="225">
                    Guesses the parameters based on the specified observed points.                    
                    <param>
                        points Observed points, sorted.                        
                    </param>
                    <return>
                        the guessed parameters (normalization factor, mean and
                          sigma).                        
                    </return>
                </javadoc>
                <method name="basicGuess" type="double[]" line="232">
                    <params>
                        <param name="points" type="WeightedObservedPoint[]"/>
                    </params>
                    <comment line="245">
                        TODO: Exceptions should not be used for flow control.                        
                    </comment>
                    <declaration name="maxYIdx" type="int" line="233"/>
                    <declaration name="n" type="double" line="234"/>
                    <declaration name="m" type="double" line="235"/>
                    <declaration name="fwhmApprox" type="double" line="237"/>
                    <scope line="238">
                        <declaration name="halfY" type="double" line="239"/>
                        <declaration name="fwhmX1" type="double" line="240"/>
                        <declaration name="fwhmX2" type="double" line="241"/>
                    </scope>
                    <scope line="243"/>
                    <declaration name="s" type="double" line="247"/>
                </method>
                <javadoc line="252">
                    Finds index of point in specified points with the largest Y.                    
                    <param>
                        points Points to search.                        
                    </param>
                    <return>
                        the index in specified points array.                        
                    </return>
                </javadoc>
                <method name="findMaxY" type="int" line="258">
                    <params>
                        <param name="points" type="WeightedObservedPoint[]"/>
                    </params>
                    <declaration name="maxYIdx" type="int" line="259"/>
                    <scope line="260">
                        <scope line="261"/>
                    </scope>
                </method>
                <javadoc line="268">
                    Interpolates using the specified points to determine X at the
                      specified Y.                    
                    <param>
                        points Points to use for interpolation.                        
                    </param>
                    <param>
                        startIdx Index within points from which to start the search for
                          interpolation bounds points.                        
                    </param>
                    <param>
                        idxStep Index step for searching interpolation bounds points.                        
                    </param>
                    <param>
                        y Y value for which X should be determined.                        
                    </param>
                    <return>
                        the value of X for the specified Y.                        
                    </return>
                    <throws>
                        ZeroException if {@code idxStep} is 0.                        
                    </throws>
                    <throws>
                        OutOfRangeException if specified {@code y} is not within the
                          range of the specified {@code points}.                        
                    </throws>
                </javadoc>
                <method name="interpolateXAtY" type="double" line="286">
                    <params>
                        <param name="points" type="WeightedObservedPoint[]"/>
                        <param name="startIdx" type="int"/>
                        <param name="idxStep" type="int"/>
                        <param name="y" type="double"/>
                    </params>
                    <scope line="287"/>
                    <declaration name="twoPoints" type="WeightedObservedPoint[]" line="290"/>
                    <declaration name="p1" type="WeightedObservedPoint" line="292"/>
                    <declaration name="p2" type="WeightedObservedPoint" line="293"/>
                    <scope line="294"/>
                    <scope line="297"/>
                </method>
                <javadoc line="304">
                    Gets the two bounding interpolation points from the specified points
                      suitable for determining X at the specified Y.                    
                    <param>
                        points Points to use for interpolation.                        
                    </param>
                    <param>
                        startIdx Index within points from which to start search for
                          interpolation bounds points.                        
                    </param>
                    <param>
                        idxStep Index step for search for interpolation bounds points.                        
                    </param>
                    <param>
                        y Y value for which X should be determined.                        
                    </param>
                    <return>
                        the array containing two points suitable for determining X at
                          the specified Y.                        
                    </return>
                    <throws>
                        ZeroException if {@code idxStep} is 0.                        
                    </throws>
                    <throws>
                        OutOfRangeException if specified {@code y} is not within the
                          range of the specified {@code points}.                        
                    </throws>
                </javadoc>
                <method name="getInterpolationPointsForY" type="WeightedObservedPoint[]" line="323">
                    <params>
                        <param name="points" type="WeightedObservedPoint[]"/>
                        <param name="startIdx" type="int"/>
                        <param name="idxStep" type="int"/>
                        <param name="y" type="double"/>
                    </params>
                    <comment line="342">
                        Boundaries are replaced by dummy values because the raised
                         exception is caught and the message never displayed.
                         TODO: Exceptions should not be used for flow control.                        
                    </comment>
                    <scope line="324"/>
                    <scope line="329">
                        <declaration name="p1" type="WeightedObservedPoint" line="330"/>
                        <declaration name="p2" type="WeightedObservedPoint" line="331"/>
                        <scope line="332">
                            <scope line="333"/>
                            <scope line="335"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="349">
                    Determines whether a value is between two other values.                    
                    <param>
                        value Value to test whether it is between {@code boundary1}and {@code boundary2}.                        
                    </param>
                    <param>
                        boundary1 One end of the range.                        
                    </param>
                    <param>
                        boundary2 Other end of the range.                        
                    </param>
                    <return>
                        {@code true} if {@code value} is between {@code boundary1} and{@code boundary2} (inclusive), {@code false} otherwise.                        
                    </return>
                </javadoc>
                <method name="isBetween" type="boolean" line="361">
                    <params>
                        <param name="value" type="double"/>
                        <param name="boundary1" type="double"/>
                        <param name="boundary2" type="double"/>
                    </params>
                </method>
            </class>
        </class>
    </source>