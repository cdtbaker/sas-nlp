<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.integration">
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.MaxCountExceededException"/>
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.exception.TooManyEvaluationsException"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="MidPointIntegrator" line="27">
            <extends class="BaseAbstractUnivariateIntegrator"/>
            <javadoc line="27">
                Implements the &lt;a href=&quot;http://en.wikipedia.org/wiki/Midpoint_method&quot;&gt;
                  Midpoint Rule&lt;/a&gt; for integration of real univariate functions. For
                  reference, see &lt;b&gt;Numerical Mathematics&lt;/b&gt;, ISBN 0387989595,
                  chapter 9.2.
                  &lt;p&gt;
                  The function should be integrable.&lt;/p&gt;                
                <version>
                    $Id: MidPointIntegrator.java 1499813 2013-07-04 17:24:47Z sebb $                    
                </version>
                <since>
                    3.3                    
                </since>
            </javadoc>
            <declaration name="MIDPOINT_MAX_ITERATIONS_COUNT" type="int" line="40"/>
            <javadoc line="40">
                Maximum number of iterations for midpoint.                
            </javadoc>
            <javadoc line="43">
                Build a midpoint integrator with given accuracies and iterations counts.                
                <param>
                    relativeAccuracy relative accuracy of the result                    
                </param>
                <param>
                    absoluteAccuracy absolute accuracy of the result                    
                </param>
                <param>
                    minimalIterationCount minimum number of iterations                    
                </param>
                <param>
                    maximalIterationCount maximum number of iterations
                      (must be less than or equal to {@link #MIDPOINT_MAX_ITERATIONS_COUNT}                    
                </param>
                <exception>
                    NotStrictlyPositiveException if minimal number of iterations
                      is not strictly positive                    
                </exception>
                <exception>
                    NumberIsTooSmallException if maximal number of iterations
                      is lesser than or equal to the minimal number of iterations                    
                </exception>
                <exception>
                    NumberIsTooLargeException if maximal number of iterations
                      is greater than {@link #MIDPOINT_MAX_ITERATIONS_COUNT}                    
                </exception>
            </javadoc>
            <method name="MidPointIntegrator" type="constructor" line="61">
                <params>
                    <param name="relativeAccuracy" type="double"/>
                    <param name="absoluteAccuracy" type="double"/>
                    <param name="minimalIterationCount" type="int"/>
                    <param name="maximalIterationCount" type="int"/>
                </params>
                <scope line="63"/>
            </method>
            <javadoc line="69">
                Build a midpoint integrator with given iteration counts.                
                <param>
                    minimalIterationCount minimum number of iterations                    
                </param>
                <param>
                    maximalIterationCount maximum number of iterations
                      (must be less than or equal to {@link #MIDPOINT_MAX_ITERATIONS_COUNT}                    
                </param>
                <exception>
                    NotStrictlyPositiveException if minimal number of iterations
                      is not strictly positive                    
                </exception>
                <exception>
                    NumberIsTooSmallException if maximal number of iterations
                      is lesser than or equal to the minimal number of iterations                    
                </exception>
                <exception>
                    NumberIsTooLargeException if maximal number of iterations
                      is greater than {@link #MIDPOINT_MAX_ITERATIONS_COUNT}                    
                </exception>
            </javadoc>
            <method name="MidPointIntegrator" type="constructor" line="83">
                <params>
                    <param name="minimalIterationCount" type="int"/>
                    <param name="maximalIterationCount" type="int"/>
                </params>
                <scope line="85"/>
            </method>
            <javadoc line="91">
                Construct a midpoint integrator with default settings.
                  (max iteration count set to {@link #MIDPOINT_MAX_ITERATIONS_COUNT})                
            </javadoc>
            <method name="MidPointIntegrator" type="constructor" line="95"/>
            <javadoc line="99">
                Compute the n-th stage integral of midpoint rule.
                  This function should only be called by API &lt;code&gt;integrate()&lt;/code&gt; in the package.
                  To save time it does not verify arguments - caller does.
                  &lt;p&gt;
                  The interval is divided equally into 2^n sections rather than an
                  arbitrary m sections because this configuration can best utilize the
                  already computed values.&lt;/p&gt;                
                <param>
                    n the stage of 1/2 refinement. Must be larger than 0.                    
                </param>
                <param>
                    previousStageResult Result from the previous call to the{@code stage} method.                    
                </param>
                <param>
                    min Lower bound of the integration interval.                    
                </param>
                <param>
                    diffMaxMin Difference between the lower bound and upper bound
                      of the integration interval.                    
                </param>
                <return>
                    the value of n-th stage integral                    
                </return>
                <throws>
                    TooManyEvaluationsException if the maximal number of evaluations
                      is exceeded.                    
                </throws>
            </javadoc>
            <method name="stage" type="double" line="122">
                <params>
                    <param name="n" type="int"/>
                    <param name="previousStageResult" type="double"/>
                    <param name="min" type="double"/>
                    <param name="diffMaxMin" type="double"/>
                </params>
                <comment line="125">
                    number of new points in this stage                    
                </comment>
                <comment line="129">
                    spacing between adjacent new points                    
                </comment>
                <comment line="132">
                    the first new point                    
                </comment>
                <comment line="138">
                    add the new sum to previously calculated result                    
                </comment>
                <declaration name="np" type="long" line="125"/>
                <declaration name="sum" type="double" line="126"/>
                <declaration name="spacing" type="double" line="129"/>
                <declaration name="x" type="double" line="132"/>
                <scope line="133"/>
            </method>
            <javadoc line="142">
                {@inheritDoc}                
            </javadoc>
            <method name="doIntegrate" type="double" line="145">
                <declaration name="min" type="double" line="147"/>
                <declaration name="diff" type="double" line="148"/>
                <declaration name="midPoint" type="double" line="149"/>
                <declaration name="oldt" type="double" line="151"/>
                <scope line="153">
                    <declaration name="i" type="int" line="155"/>
                    <declaration name="t" type="double" line="156"/>
                    <scope line="157">
                        <declaration name="delta" type="double" line="158"/>
                        <declaration name="rLimit" type="double" line="159"/>
                        <scope line="161"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>