<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optimization.general">
        <import package="org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction"/>
        <import package="org.apache.commons.math3.analysis.FunctionUtils"/>
        <import package="org.apache.commons.math3.analysis.differentiation.DerivativeStructure"/>
        <import package="org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.linear.ArrayRealVector"/>
        <import package="org.apache.commons.math3.linear.RealMatrix"/>
        <import package="org.apache.commons.math3.linear.DiagonalMatrix"/>
        <import package="org.apache.commons.math3.linear.DecompositionSolver"/>
        <import package="org.apache.commons.math3.linear.MatrixUtils"/>
        <import package="org.apache.commons.math3.linear.QRDecomposition"/>
        <import package="org.apache.commons.math3.linear.EigenDecomposition"/>
        <import package="org.apache.commons.math3.optimization.OptimizationData"/>
        <import package="org.apache.commons.math3.optimization.InitialGuess"/>
        <import package="org.apache.commons.math3.optimization.Target"/>
        <import package="org.apache.commons.math3.optimization.Weight"/>
        <import package="org.apache.commons.math3.optimization.ConvergenceChecker"/>
        <import package="org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer"/>
        <import package="org.apache.commons.math3.optimization.PointVectorValuePair"/>
        <import package="org.apache.commons.math3.optimization.direct.BaseAbstractMultivariateVectorOptimizer"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="AbstractLeastSquaresOptimizer" line="25">
            <extends class="BaseAbstractMultivariateVectorOptimizer">
                <type_params>
                    <type_param name="DifferentiableMultivariateVectorFunction"/>
                </type_params>
            </extends>
            <implements interface="DifferentiableMultivariateVectorOptimizer"/>
            <javadoc line="25">
                Base class for implementing least squares optimizers.
                  It handles the boilerplate methods associated to thresholds settings,
                  Jacobian and error estimation.
                  &lt;br/&gt;
                  This class constructs the Jacobian matrix of the function argument in method{@link BaseAbstractMultivariateVectorOptimizer#optimize(int,MultivariateVectorFunction,OptimizationData[])optimize} and assumes that the rows of that matrix iterate on the model
                  functions while the columns iterate on the parameters; thus, the numbers
                  of rows is equal to the dimension of the{@link org.apache.commons.math3.optimization.Target Target} while
                  the number of columns is equal to the dimension of the{@link org.apache.commons.math3.optimization.InitialGuess InitialGuess}.                
                <version>
                    $Id: AbstractLeastSquaresOptimizer.java 1426759 2012-12-29 13:26:44Z erans $                    
                </version>
                <deprecated>
                    As of 3.1 (to be removed in 4.0).                    
                </deprecated>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="DEFAULT_SINGULARITY_THRESHOLD" type="double" line="39"/>
            <javadoc line="39">
                Singularity threshold (cf. {@link #getCovariances(double)}).                
                <deprecated>
                    As of 3.1.                    
                </deprecated>
            </javadoc>
            <declaration name="weightedResidualJacobian" type="double[][]" line="44"/>
            <javadoc line="44">
                Jacobian matrix of the weighted residuals.
                  This matrix is in canonical form just after the calls to{@link #updateJacobian()}, but may be modified by the solver
                  in the derived class (the {@link LevenbergMarquardtOptimizerLevenberg-Marquardt optimizer} does this).                
                <deprecated>
                    As of 3.1. To be removed in 4.0. Please use{@link #computeWeightedJacobian(double[])} instead.                    
                </deprecated>
            </javadoc>
            <declaration name="cols" type="int" line="51"/>
            <javadoc line="51">
                Number of columns of the jacobian matrix.                
                <deprecated>
                    As of 3.1.                    
                </deprecated>
            </javadoc>
            <declaration name="rows" type="int" line="56"/>
            <javadoc line="56">
                Number of rows of the jacobian matrix.                
                <deprecated>
                    As of 3.1.                    
                </deprecated>
            </javadoc>
            <declaration name="point" type="double[]" line="61"/>
            <javadoc line="61">
                Current point.                
                <deprecated>
                    As of 3.1.                    
                </deprecated>
            </javadoc>
            <declaration name="objective" type="double[]" line="66"/>
            <javadoc line="66">
                Current objective function value.                
                <deprecated>
                    As of 3.1.                    
                </deprecated>
            </javadoc>
            <declaration name="weightedResiduals" type="double[]" line="71"/>
            <javadoc line="71">
                Weighted residuals                
                <deprecated>
                    As of 3.1.                    
                </deprecated>
            </javadoc>
            <declaration name="cost" type="double" line="76"/>
            <javadoc line="76">
                Cost value (square root of the sum of the residuals).                
                <deprecated>
                    As of 3.1. Field to become "private" in 4.0.
                      Please use {@link #setCost(double)}.                    
                </deprecated>
            </javadoc>
            <declaration name="jF" type="MultivariateDifferentiableVectorFunction" line="82"/>
            <javadoc line="82">
                Objective function derivatives.                
            </javadoc>
            <declaration name="jacobianEvaluations" type="int" line="86"/>
            <javadoc line="86">
                Number of evaluations of the Jacobian.                
            </javadoc>
            <declaration name="weightMatrixSqrt" type="RealMatrix" line="90"/>
            <javadoc line="90">
                Square-root of the weight matrix.                
            </javadoc>
            <javadoc line="94">
                Simple constructor with default settings.
                  The convergence check is set to a {@link org.apache.commons.math3.optimization.SimpleVectorValueChecker}.                
                <deprecated>
                    See {@link org.apache.commons.math3.optimization.SimpleValueChecker#SimpleValueChecker()}                    
                </deprecated>
            </javadoc>
            <method name="AbstractLeastSquaresOptimizer" type="constructor" line="99"/>
            <javadoc line="101">
                @param checker Convergence checker.                
            </javadoc>
            <method name="AbstractLeastSquaresOptimizer" type="constructor" line="104">
                <params>
                    <param name="checker" type="ConvergenceChecker<PointVectorValuePair>"/>
                </params>
            </method>
            <javadoc line="107">
                @return the number of evaluations of the Jacobian function.                
            </javadoc>
            <method name="getJacobianEvaluations" type="int" line="110"/>
            <javadoc line="113">
                Update the jacobian matrix.                
                <throws>
                    DimensionMismatchException if the Jacobian dimension does not
                      match problem dimension.                    
                </throws>
                <deprecated>
                    As of 3.1. Please use {@link #computeWeightedJacobian(double[])}instead.                    
                </deprecated>
            </javadoc>
            <method name="updateJacobian" type="void" line="119">
                <declaration name="weightedJacobian" type="RealMatrix" line="120"/>
            </method>
            <javadoc line="123">
                Computes the Jacobian matrix.                
                <param>
                    params Model parameters at which to compute the Jacobian.                    
                </param>
                <return>
                    the weighted Jacobian: W<sup>1/2</sup> J.                    
                </return>
                <throws>
                    DimensionMismatchException if the Jacobian dimension does not
                      match problem dimension.                    
                </throws>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="computeWeightedJacobian" type="RealMatrix" line="131">
                <params>
                    <param name="params" type="double[]"/>
                </params>
                <declaration name="dsPoint" type="DerivativeStructure[]" line="133"/>
                <declaration name="nC" type="int" line="134"/>
                <scope line="135"/>
                <declaration name="dsValue" type="DerivativeStructure[]" line="138"/>
                <declaration name="nR" type="int" line="139"/>
                <scope line="140"/>
                <declaration name="jacobianData" type="double[][]" line="143"/>
                <scope line="144">
                    <declaration name="orders" type="int[]" line="145"/>
                    <scope line="146"/>
                </scope>
            </method>
            <javadoc line="154">
                Update the residuals array and cost function value.                
                <throws>
                    DimensionMismatchException if the dimension does not match the
                      problem dimension.                    
                </throws>
                <throws>
                    org.apache.commons.math3.exception.TooManyEvaluationsExceptionif the maximal number of evaluations is exceeded.                    
                </throws>
                <deprecated>
                    As of 3.1. Please use {@link #computeResiduals(double[])},{@link #computeObjectiveValue(double[])}, {@link #computeCost(double[])}and {@link #setCost(double)} instead.                    
                </deprecated>
            </javadoc>
            <method name="updateResidualsAndCost" type="void" line="161">
                <declaration name="res" type="double[]" line="163"/>
                <declaration name="residuals" type="ArrayRealVector" line="165"/>
            </method>
            <javadoc line="168">
                Computes the cost.                
                <param>
                    residuals Residuals.                    
                </param>
                <return>
                    the cost.                    
                </return>
                <see>
                    #computeResiduals(double[])                    
                </see>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="computeCost" type="double" line="175">
                <params>
                    <param name="residuals" type="double[]"/>
                </params>
                <declaration name="r" type="ArrayRealVector" line="176"/>
            </method>
            <javadoc line="179">
                Get the Root Mean Square value.
                  Get the Root Mean Square value, i.e. the root of the arithmetic
                  mean of the square of all weighted residuals. This is related to the
                  criterion that is minimized by the optimizer as follows: if
                  &lt;em&gt;c&lt;/em&gt; if the criterion, and &lt;em&gt;n&lt;/em&gt; is the number of
                  measurements, then the RMS is &lt;em&gt;sqrt (c/n)&lt;/em&gt;.                
                <return>
                    RMS value                    
                </return>
            </javadoc>
            <method name="getRMS" type="double" line="188"/>
            <javadoc line="191">
                Get a Chi-Square-like value assuming the N residuals follow N
                  distinct normal distributions centered on 0 and whose variances are
                  the reciprocal of the weights.                
                <return>
                    chi-square value                    
                </return>
            </javadoc>
            <method name="getChiSquare" type="double" line="197"/>
            <javadoc line="200">
                Gets the square-root of the weight matrix.                
                <return>
                    the square-root of the weight matrix.                    
                </return>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="getWeightSquareRoot" type="RealMatrix" line="205"/>
            <javadoc line="208">
                Sets the cost.                
                <param>
                    cost Cost value.                    
                </param>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="setCost" type="void" line="213">
                <params>
                    <param name="cost" type="double"/>
                </params>
            </method>
            <javadoc line="216">
                Get the covariance matrix of the optimized parameters.                
                <return>
                    the covariance matrix.                    
                </return>
                <throws>
                    org.apache.commons.math3.linear.SingularMatrixExceptionif the covariance matrix cannot be computed (singular problem).                    
                </throws>
                <see>
                    #getCovariances(double)                    
                </see>
                <deprecated>
                    As of 3.1. Please use {@link #computeCovariances(double[],double)}instead.                    
                </deprecated>
            </javadoc>
            <method name="getCovariances" type="double[][]" line="223"/>
            <javadoc line="226">
                Get the covariance matrix of the optimized parameters.
                  &lt;br/&gt;
                  Note that this operation involves the inversion of the
                  &lt;code&gt;J&lt;sup&gt;T&lt;/sup&gt;J&lt;/code&gt; matrix, where {@code J} is the
                  Jacobian matrix.
                  The {@code threshold} parameter is a way for the caller to specify
                  that the result of this computation should be considered meaningless,
                  and thus trigger an exception.                
                <param>
                    threshold Singularity threshold.                    
                </param>
                <return>
                    the covariance matrix.                    
                </return>
                <throws>
                    org.apache.commons.math3.linear.SingularMatrixExceptionif the covariance matrix cannot be computed (singular problem).                    
                </throws>
                <deprecated>
                    As of 3.1. Please use {@link #computeCovariances(double[],double)}instead.                    
                </deprecated>
            </javadoc>
            <method name="getCovariances" type="double[][]" line="240">
                <params>
                    <param name="threshold" type="double"/>
                </params>
            </method>
            <javadoc line="243">
                Get the covariance matrix of the optimized parameters.
                  &lt;br/&gt;
                  Note that this operation involves the inversion of the
                  &lt;code&gt;J&lt;sup&gt;T&lt;/sup&gt;J&lt;/code&gt; matrix, where {@code J} is the
                  Jacobian matrix.
                  The {@code threshold} parameter is a way for the caller to specify
                  that the result of this computation should be considered meaningless,
                  and thus trigger an exception.                
                <param>
                    params Model parameters.                    
                </param>
                <param>
                    threshold Singularity threshold.                    
                </param>
                <return>
                    the covariance matrix.                    
                </return>
                <throws>
                    org.apache.commons.math3.linear.SingularMatrixExceptionif the covariance matrix cannot be computed (singular problem).                    
                </throws>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="computeCovariances" type="double[][]" line="258">
                <params>
                    <param name="params" type="double[]"/>
                    <param name="threshold" type="double"/>
                </params>
                <declaration name="j" type="RealMatrix" line="259"/>
                <declaration name="jTj" type="RealMatrix" line="260"/>
                <declaration name="solver" type="DecompositionSolver" line="261"/>
            </method>
            <javadoc line="264">
                &lt;p&gt;
                  Returns an estimate of the standard deviation of each parameter. The
                  returned values are the so-called (asymptotic) standard errors on the
                  parameters, defined as {@code sd(a[i]) = sqrt(S / (n - m)  C[i][i])},
                  where {@code a[i]} is the optimized value of the {@code i}-th parameter,{@code S} is the minimized value of the sum of squares objective function
                  (as returned by {@link #getChiSquare()}), {@code n} is the number of
                  observations, {@code m} is the number of parameters and {@code C} is the
                  covariance matrix.
                  &lt;/p&gt;
                  &lt;p&gt;
                  See also
                  &lt;a href=&quot;http://en.wikipedia.org/wiki/Least_squares&quot;&gt;Wikipedia&lt;/a&gt;,
                  or
                  &lt;a href=&quot;http://mathworld.wolfram.com/LeastSquaresFitting.html&quot;&gt;MathWorld&lt;/a&gt;,
                  equations (34) and (35) for a particular case.
                  &lt;/p&gt;                
                <return>
                    an estimate of the standard deviation of the optimized parameters                    
                </return>
                <throws>
                    org.apache.commons.math3.linear.SingularMatrixExceptionif the covariance matrix cannot be computed.                    
                </throws>
                <throws>
                    NumberIsTooSmallException if the number of degrees of freedom is not
                      positive, i.e. the number of measurements is less or equal to the number of
                      parameters.                    
                </throws>
                <deprecated>
                    as of version 3.1, {@link #computeSigma(double[],double)} should be used
                      instead. It should be emphasized that {@code guessParametersErrors} and{@code computeSigma} are <em>not</em> strictly equivalent.                    
                </deprecated>
            </javadoc>
            <method name="guessParametersErrors" type="double[]" line="289">
                <scope line="290"/>
                <declaration name="errors" type="double[]" line="293"/>
                <declaration name="c" type="double" line="294"/>
                <declaration name="covar" type="double[][]" line="295"/>
                <scope line="296"/>
            </method>
            <javadoc line="301">
                Computes an estimate of the standard deviation of the parameters. The
                  returned values are the square root of the diagonal coefficients of the
                  covariance matrix, {@code sd(a[i]) ~= sqrt(C[i][i])}, where {@code a[i]}is the optimized value of the {@code i}-th parameter, and {@code C} is
                  the covariance matrix.                
                <param>
                    params Model parameters.                    
                </param>
                <param>
                    covarianceSingularityThreshold Singularity threshold (see{@link #computeCovariances(double[],double) computeCovariances}).                    
                </param>
                <return>
                    an estimate of the standard deviation of the optimized parameters                    
                </return>
                <throws>
                    org.apache.commons.math3.linear.SingularMatrixExceptionif the covariance matrix cannot be computed.                    
                </throws>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="computeSigma" type="double[]" line="312">
                <params>
                    <param name="params" type="double[]"/>
                    <param name="covarianceSingularityThreshold" type="double"/>
                </params>
                <declaration name="nC" type="int" line="313"/>
                <declaration name="sig" type="double[]" line="314"/>
                <declaration name="cov" type="double[][]" line="315"/>
                <scope line="316"/>
            </method>
            <javadoc line="321">
                {@inheritDoc}                
                <deprecated>
                    As of 3.1. Please use{@link BaseAbstractMultivariateVectorOptimizer#optimize(int,MultivariateVectorFunction,OptimizationData[])optimize(int,MultivariateDifferentiableVectorFunction,OptimizationData...)}instead.                    
                </deprecated>
            </javadoc>
            <method name="optimize" type="PointVectorValuePair" line="325">
                <params>
                    <param name="maxEval" type="int"/>
                    <param name="f" type="DifferentiableMultivariateVectorFunction"/>
                    <param name="target" type="double[]"/>
                    <param name="weights" type="double[]"/>
                    <param name="startPoint" type="double[]"/>
                </params>
            </method>
            <javadoc line="328">
                Optimize an objective function.
                  Optimization is considered to be a weighted least-squares minimization.
                  The cost function to be minimized is
                  &lt;code&gt;&amp;sum;weight&lt;sub&gt;i&lt;/sub&gt;(objective&lt;sub&gt;i&lt;/sub&gt; - target&lt;sub&gt;i&lt;/sub&gt;)&lt;sup&gt;2&lt;/sup&gt;&lt;/code&gt;                
                <param>
                    f Objective function.                    
                </param>
                <param>
                    target Target value for the objective functions at optimum.                    
                </param>
                <param>
                    weights Weights for the least squares cost computation.                    
                </param>
                <param>
                    startPoint Start point for optimization.                    
                </param>
                <return>
                    the point/value pair giving the optimal value for objective
                      function.                    
                </return>
                <param>
                    maxEval Maximum number of function evaluations.                    
                </param>
                <throws>
                    org.apache.commons.math3.exception.DimensionMismatchExceptionif the start point dimension is wrong.                    
                </throws>
                <throws>
                    org.apache.commons.math3.exception.TooManyEvaluationsExceptionif the maximal number of evaluations is exceeded.                    
                </throws>
                <throws>
                    org.apache.commons.math3.exception.NullArgumentException if
                      any argument is {@code null}.                    
                </throws>
                <deprecated>
                    As of 3.1. Please use{@link BaseAbstractMultivariateVectorOptimizer#optimize(int,MultivariateVectorFunction,OptimizationData[])optimize(int,MultivariateDifferentiableVectorFunction,OptimizationData...)}instead.                    
                </deprecated>
            </javadoc>
            <method name="optimize" type="PointVectorValuePair" line="346">
                <params>
                    <param name="maxEval" type="int"/>
                    <param name="f" type="MultivariateDifferentiableVectorFunction"/>
                    <param name="target" type="double[]"/>
                    <param name="weights" type="double[]"/>
                    <param name="startPoint" type="double[]"/>
                </params>
            </method>
            <javadoc line="349">
                Optimize an objective function.
                  Optimization is considered to be a weighted least-squares minimization.
                  The cost function to be minimized is
                  &lt;code&gt;&amp;sum;weight&lt;sub&gt;i&lt;/sub&gt;(objective&lt;sub&gt;i&lt;/sub&gt; - target&lt;sub&gt;i&lt;/sub&gt;)&lt;sup&gt;2&lt;/sup&gt;&lt;/code&gt;                
                <param>
                    maxEval Allowed number of evaluations of the objective function.                    
                </param>
                <param>
                    f Objective function.                    
                </param>
                <param>
                    optData Optimization data. The following data will be looked for:
                      <ul>
                      <li>{@link Target}</li>
                      <li>{@link Weight}</li>
                      <li>{@link InitialGuess}</li>
                      </ul>                    
                </param>
                <return>
                    the point/value pair giving the optimal value of the objective
                      function.                    
                </return>
                <throws>
                    org.apache.commons.math3.exception.TooManyEvaluationsException if
                      the maximal number of evaluations is exceeded.                    
                </throws>
                <throws>
                    DimensionMismatchException if the target, and weight arguments
                      have inconsistent dimensions.                    
                </throws>
                <see>
                    BaseAbstractMultivariateVectorOptimizer#optimizeInternal(int,MultivariateVectorFunction,OptimizationData[])                    
                </see>
                <since>
                    3.1                    
                </since>
                <deprecated>
                    As of 3.1. Override is necessary only until this class's generic
                      argument is changed to {@code MultivariateDifferentiableVectorFunction}.                    
                </deprecated>
            </javadoc>
            <method name="optimizeInternal" type="PointVectorValuePair" line="373">
                <params>
                    <param name="maxEval" type="int"/>
                    <param name="f" type="MultivariateDifferentiableVectorFunction"/>
                    <param name="optData" type="OptimizationData"/>
                </params>
            </method>
            <javadoc line="376">
                {@inheritDoc}                
            </javadoc>
            <method name="setUp" type="void" line="379"/>
            <javadoc line="388">
                Computes the residuals.
                  The residual is the difference between the observed (target)
                  values and the model (objective function) value.
                  There is one residual for each element of the vector-valued
                  function.                
                <param>
                    objectiveValue Value of the the objective function. This is
                      the value returned from a call to{@link #computeObjectiveValue(double[]) computeObjectiveValue}(whose array argument contains the model parameters).                    
                </param>
                <return>
                    the residuals.                    
                </return>
                <throws>
                    DimensionMismatchException if {@code params} has a wrong
                      length.                    
                </throws>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="computeResiduals" type="double[]" line="401">
                <params>
                    <param name="objectiveValue" type="double[]"/>
                </params>
                <declaration name="target" type="double[]" line="402"/>
                <scope line="403"/>
                <declaration name="residuals" type="double[]" line="406"/>
                <scope line="407"/>
            </method>
            <javadoc line="412">
                Computes the square-root of the weight matrix.                
                <param>
                    m Symmetric, positive-definite (weight) matrix.                    
                </param>
                <return>
                    the square-root of the weight matrix.                    
                </return>
            </javadoc>
            <method name="squareRoot" type="RealMatrix" line="417">
                <params>
                    <param name="m" type="RealMatrix"/>
                </params>
                <scope line="418">
                    <declaration name="dim" type="int" line="419"/>
                    <declaration name="sqrtM" type="RealMatrix" line="420"/>
                    <scope line="421"/>
                </scope>
                <scope line="426">
                    <declaration name="dec" type="EigenDecomposition" line="427"/>
                </scope>
            </method>
        </class>
    </source>