<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.random">
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.linear.RealMatrix"/>
        <import package="org.apache.commons.math3.linear.RectangularCholeskyDecomposition"/>
        <class name="CorrelatedRandomVectorGenerator" line="5">
            <implements interface="RandomVectorGenerator"/>
            <javadoc line="5">
                A {@link RandomVectorGenerator} that generates vectors with with
                  correlated components.
                  &lt;p&gt;Random vectors with correlated components are built by combining
                  the uncorrelated components of another random vector in such a way that
                  the resulting correlations are the ones specified by a positive
                  definite covariance matrix.&lt;/p&gt;
                  &lt;p&gt;The main use for correlated random vector generation is for Monte-Carlo
                  simulation of physical problems with several variables, for example to
                  generate error vectors to be added to a nominal vector. A particularly
                  interesting case is when the generated vector should be drawn from a &lt;a
                  href=&quot;http://en.wikipedia.org/wiki/Multivariate_normal_distribution&quot;&gt;
                  Multivariate Normal Distribution&lt;/a&gt;. The approach using a Cholesky
                  decomposition is quite usual in this case. However, it can be extended
                  to other cases as long as the underlying random generator provides{@link NormalizedRandomGenerator normalized values} like {@link GaussianRandomGenerator} or {@link UniformRandomGenerator}.&lt;/p&gt;
                  &lt;p&gt;Sometimes, the covariance matrix for a given simulation is not
                  strictly positive definite. This means that the correlations are
                  not all independent from each other. In this case, however, the non
                  strictly positive elements found during the Cholesky decomposition
                  of the covariance matrix should not be negative either, they
                  should be null. Another non-conventional extension handling this case
                  is used here. Rather than computing &lt;code&gt;C = U&lt;sup&gt;T&lt;/sup&gt;.U&lt;/code&gt;
                  where &lt;code&gt;C&lt;/code&gt; is the covariance matrix and &lt;code&gt;U&lt;/code&gt;
                  is an upper-triangular matrix, we compute &lt;code&gt;C = B.B&lt;sup&gt;T&lt;/sup&gt;&lt;/code&gt;
                  where &lt;code&gt;B&lt;/code&gt; is a rectangular matrix having
                  more rows than columns. The number of columns of &lt;code&gt;B&lt;/code&gt; is
                  the rank of the covariance matrix, and it is the dimension of the
                  uncorrelated random vector that is needed to compute the component
                  of the correlated vector. This class handles this situation
                  automatically.&lt;/p&gt;                
                <version>
                    $Id: CorrelatedRandomVectorGenerator.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="mean" type="double[]" line="39"/>
            <javadoc line="39">
                Mean vector.                
            </javadoc>
            <declaration name="generator" type="NormalizedRandomGenerator" line="43"/>
            <javadoc line="43">
                Underlying generator.                
            </javadoc>
            <declaration name="normalized" type="double[]" line="47"/>
            <javadoc line="47">
                Storage for the normalized vector.                
            </javadoc>
            <declaration name="root" type="RealMatrix" line="51"/>
            <javadoc line="51">
                Root of the covariance matrix.                
            </javadoc>
            <javadoc line="55">
                Builds a correlated random vector generator from its mean
                  vector and covariance matrix.                
                <param>
                    mean Expected mean values for all components.                    
                </param>
                <param>
                    covariance Covariance matrix.                    
                </param>
                <param>
                    small Diagonal elements threshold under which  column are
                      considered to be dependent on previous ones and are discarded                    
                </param>
                <param>
                    generator underlying generator for uncorrelated normalized
                      components.                    
                </param>
                <throws>
                    org.apache.commons.math3.linear.NonPositiveDefiniteMatrixExceptionif the covariance matrix is not strictly positive definite.                    
                </throws>
                <throws>
                    DimensionMismatchException if the mean and covariance
                      arrays dimensions do not match.                    
                </throws>
            </javadoc>
            <method name="CorrelatedRandomVectorGenerator" type="constructor" line="68">
                <params>
                    <param name="mean" type="double[]"/>
                    <param name="covariance" type="RealMatrix"/>
                    <param name="small" type="double"/>
                    <param name="generator" type="NormalizedRandomGenerator"/>
                </params>
                <declaration name="order" type="int" line="69"/>
                <scope line="70"/>
                <declaration name="decomposition" type="RectangularCholeskyDecomposition" line="74"/>
            </method>
            <javadoc line="79">
                Builds a null mean random correlated vector generator from its
                  covariance matrix.                
                <param>
                    covariance Covariance matrix.                    
                </param>
                <param>
                    small Diagonal elements threshold under which  column are
                      considered to be dependent on previous ones and are discarded.                    
                </param>
                <param>
                    generator Underlying generator for uncorrelated normalized
                      components.                    
                </param>
                <throws>
                    org.apache.commons.math3.linear.NonPositiveDefiniteMatrixExceptionif the covariance matrix is not strictly positive definite.                    
                </throws>
            </javadoc>
            <method name="CorrelatedRandomVectorGenerator" type="constructor" line="89">
                <params>
                    <param name="covariance" type="RealMatrix"/>
                    <param name="small" type="double"/>
                    <param name="generator" type="NormalizedRandomGenerator"/>
                </params>
                <declaration name="order" type="int" line="90"/>
                <scope line="92"/>
                <declaration name="decomposition" type="RectangularCholeskyDecomposition" line="95"/>
            </method>
            <javadoc line="100">
                Get the underlying normalized components generator.                
                <return>
                    underlying uncorrelated components generator                    
                </return>
            </javadoc>
            <method name="getGenerator" type="NormalizedRandomGenerator" line="104"/>
            <javadoc line="107">
                Get the rank of the covariance matrix.
                  The rank is the number of independent rows in the covariance
                  matrix, it is also the number of columns of the root matrix.                
                <return>
                    rank of the square matrix.                    
                </return>
                <see>
                    #getRootMatrix()                    
                </see>
            </javadoc>
            <method name="getRank" type="int" line="114"/>
            <javadoc line="117">
                Get the root of the covariance matrix.
                  The root is the rectangular matrix &lt;code&gt;B&lt;/code&gt; such that
                  the covariance matrix is equal to &lt;code&gt;B.B&lt;sup&gt;T&lt;/sup&gt;&lt;/code&gt;                
                <return>
                    root of the square matrix                    
                </return>
                <see>
                    #getRank()                    
                </see>
            </javadoc>
            <method name="getRootMatrix" type="RealMatrix" line="124"/>
            <javadoc line="127">
                Generate a correlated random vector.                
                <return>
                    a random vector as an array of double. The returned array
                      is created at each call, the caller can do what it wants with it.                    
                </return>
            </javadoc>
            <method name="nextVector" type="double[]" line="132">
                <scope line="133"/>
                <declaration name="correlated" type="double[]" line="136"/>
                <scope line="137">
                    <scope line="139"/>
                </scope>
            </method>
        </class>
    </source>