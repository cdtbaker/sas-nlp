<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.integration">
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.MaxCountExceededException"/>
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.exception.TooManyEvaluationsException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="LegendreGaussIntegrator" line="27">
            <extends class="BaseAbstractUnivariateIntegrator"/>
            <javadoc line="27">
                Implements the &lt;a href=&quot;http://mathworld.wolfram.com/Legendre-GaussQuadrature.html&quot;&gt;
                  Legendre-Gauss&lt;/a&gt; quadrature formula.
                  &lt;p&gt;
                  Legendre-Gauss integrators are efficient integrators that can
                  accurately integrate functions with few function evaluations. A
                  Legendre-Gauss integrator using an n-points quadrature formula can
                  integrate 2n-1 degree polynomials exactly.
                  &lt;/p&gt;
                  &lt;p&gt;
                  These integrators evaluate the function on n carefully chosen
                  abscissas in each step interval (mapped to the canonical [-1,1] interval).
                  The evaluation abscissas are not evenly spaced and none of them are
                  at the interval endpoints. This implies the function integrated can be
                  undefined at integration interval endpoints.
                  &lt;/p&gt;
                  &lt;p&gt;
                  The evaluation abscissas x&lt;sub&gt;i&lt;/sub&gt; are the roots of the degree n
                  Legendre polynomial. The weights a&lt;sub&gt;i&lt;/sub&gt; of the quadrature formula
                  integrals from -1 to +1 &amp;int; Li&lt;sup&gt;2&lt;/sup&gt; where Li (x) =
                  &amp;prod; (x-x&lt;sub&gt;k&lt;/sub&gt;)/(x&lt;sub&gt;i&lt;/sub&gt;-x&lt;sub&gt;k&lt;/sub&gt;) for k != i.
                  &lt;/p&gt;
                  &lt;p&gt;                
                <version>
                    $Id: LegendreGaussIntegrator.java 1455194 2013-03-11 15:45:54Z luc $                    
                </version>
                <since>
                    1.2                    
                </since>
                <deprecated>
                    As of 3.1 (to be removed in 4.0). Please use{@link IterativeLegendreGaussIntegrator} instead.                    
                </deprecated>
            </javadoc>
            <declaration name="ABSCISSAS_2" type="double[]" line="58"/>
            <javadoc line="58">
                Abscissas for the 2 points method.                
            </javadoc>
            <declaration name="WEIGHTS_2" type="double[]" line="64"/>
            <javadoc line="64">
                Weights for the 2 points method.                
            </javadoc>
            <declaration name="ABSCISSAS_3" type="double[]" line="70"/>
            <javadoc line="70">
                Abscissas for the 3 points method.                
            </javadoc>
            <declaration name="WEIGHTS_3" type="double[]" line="77"/>
            <javadoc line="77">
                Weights for the 3 points method.                
            </javadoc>
            <declaration name="ABSCISSAS_4" type="double[]" line="84"/>
            <javadoc line="84">
                Abscissas for the 4 points method.                
            </javadoc>
            <declaration name="WEIGHTS_4" type="double[]" line="92"/>
            <javadoc line="92">
                Weights for the 4 points method.                
            </javadoc>
            <declaration name="ABSCISSAS_5" type="double[]" line="100"/>
            <javadoc line="100">
                Abscissas for the 5 points method.                
            </javadoc>
            <declaration name="WEIGHTS_5" type="double[]" line="109"/>
            <javadoc line="109">
                Weights for the 5 points method.                
            </javadoc>
            <declaration name="abscissas" type="double[]" line="118"/>
            <javadoc line="118">
                Abscissas for the current method.                
            </javadoc>
            <declaration name="weights" type="double[]" line="121"/>
            <javadoc line="121">
                Weights for the current method.                
            </javadoc>
            <javadoc line="124">
                Build a Legendre-Gauss integrator with given accuracies and iterations counts.                
                <param>
                    n number of points desired (must be between 2 and 5 inclusive)                    
                </param>
                <param>
                    relativeAccuracy relative accuracy of the result                    
                </param>
                <param>
                    absoluteAccuracy absolute accuracy of the result                    
                </param>
                <param>
                    minimalIterationCount minimum number of iterations                    
                </param>
                <param>
                    maximalIterationCount maximum number of iterations                    
                </param>
                <exception>
                    MathIllegalArgumentException if number of points is out of [2; 5]                    
                </exception>
                <exception>
                    NotStrictlyPositiveException if minimal number of iterations
                      is not strictly positive                    
                </exception>
                <exception>
                    NumberIsTooSmallException if maximal number of iterations
                      is lesser than or equal to the minimal number of iterations                    
                </exception>
            </javadoc>
            <method name="LegendreGaussIntegrator" type="constructor" line="142">
                <params>
                    <param name="n" type="int"/>
                    <param name="relativeAccuracy" type="double"/>
                    <param name="absoluteAccuracy" type="double"/>
                    <param name="minimalIterationCount" type="int"/>
                    <param name="maximalIterationCount" type="int"/>
                </params>
            </method>
            <javadoc line="169">
                Build a Legendre-Gauss integrator with given accuracies.                
                <param>
                    n number of points desired (must be between 2 and 5 inclusive)                    
                </param>
                <param>
                    relativeAccuracy relative accuracy of the result                    
                </param>
                <param>
                    absoluteAccuracy absolute accuracy of the result                    
                </param>
                <exception>
                    MathIllegalArgumentException if number of points is out of [2; 5]                    
                </exception>
            </javadoc>
            <method name="LegendreGaussIntegrator" type="constructor" line="179">
                <params>
                    <param name="n" type="int"/>
                    <param name="relativeAccuracy" type="double"/>
                    <param name="absoluteAccuracy" type="double"/>
                </params>
            </method>
            <javadoc line="184">
                Build a Legendre-Gauss integrator with given iteration counts.                
                <param>
                    n number of points desired (must be between 2 and 5 inclusive)                    
                </param>
                <param>
                    minimalIterationCount minimum number of iterations                    
                </param>
                <param>
                    maximalIterationCount maximum number of iterations                    
                </param>
                <exception>
                    MathIllegalArgumentException if number of points is out of [2; 5]                    
                </exception>
                <exception>
                    NotStrictlyPositiveException if minimal number of iterations
                      is not strictly positive                    
                </exception>
                <exception>
                    NumberIsTooSmallException if maximal number of iterations
                      is lesser than or equal to the minimal number of iterations                    
                </exception>
            </javadoc>
            <method name="LegendreGaussIntegrator" type="constructor" line="198">
                <params>
                    <param name="n" type="int"/>
                    <param name="minimalIterationCount" type="int"/>
                    <param name="maximalIterationCount" type="int"/>
                </params>
            </method>
            <javadoc line="203">
                {@inheritDoc}                
            </javadoc>
            <method name="doIntegrate" type="double" line="206">
                <comment line="208">
                    compute first estimate with a single step                    
                </comment>
                <comment line="214">
                    improve integral with a larger number of steps                    
                </comment>
                <comment line="217">
                    estimate error                    
                </comment>
                <comment line="223">
                    check convergence                    
                </comment>
                <comment line="228">
                    prepare next iteration                    
                </comment>
                <declaration name="oldt" type="double" line="209"/>
                <declaration name="n" type="int" line="211"/>
                <scope line="212">
                    <declaration name="t" type="double" line="215"/>
                    <declaration name="delta" type="double" line="218"/>
                    <declaration name="limit" type="double" line="219"/>
                    <scope line="224"/>
                    <declaration name="ratio" type="double" line="229"/>
                </scope>
            </method>
            <javadoc line="238">
                Compute the n-th stage integral.                
                <param>
                    n number of steps                    
                </param>
                <return>
                    the value of n-th stage integral                    
                </return>
                <throws>
                    TooManyEvaluationsException if the maximum number of evaluations
                      is exceeded.                    
                </throws>
            </javadoc>
            <method name="stage" type="double" line="246">
                <params>
                    <param name="n" type="int"/>
                </params>
                <comment line="248">
                    set up the step for the current stage                    
                </comment>
                <comment line="252">
                    integrate over all elementary steps                    
                </comment>
                <declaration name="step" type="double" line="249"/>
                <declaration name="halfStep" type="double" line="250"/>
                <declaration name="midPoint" type="double" line="253"/>
                <declaration name="sum" type="double" line="254"/>
                <scope line="255">
                    <scope line="256"/>
                </scope>
            </method>
        </class>
    </source>