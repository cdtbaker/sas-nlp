<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.distribution">
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <import package="org.apache.commons.math3.exception.OutOfRangeException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.special.Erf"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.random.RandomGenerator"/>
        <import package="org.apache.commons.math3.random.Well19937c"/>
        <class name="NormalDistribution" line="29">
            <extends class="AbstractRealDistribution"/>
            <javadoc line="29">
                Implementation of the normal (gaussian) distribution.                
                <see>
                    &lt;a href=&quot;http://en.wikipedia.org/wiki/Normal_distribution&quot;&gt;Normal distribution (Wikipedia)&lt;/a&gt;                    
                </see>
                <see>
                    &lt;a href=&quot;http://mathworld.wolfram.com/NormalDistribution.html&quot;&gt;Normal distribution (MathWorld)&lt;/a&gt;                    
                </see>
                <version>
                    $Id: NormalDistribution.java 1462423 2013-03-29 07:25:18Z luc $                    
                </version>
            </javadoc>
            <declaration name="DEFAULT_INVERSE_ABSOLUTE_ACCURACY" type="double" line="37"/>
            <javadoc line="37">
                Default inverse cumulative probability accuracy.                
                <since>
                    2.1                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="42"/>
            <javadoc line="42">
                Serializable version identifier.                
            </javadoc>
            <declaration name="SQRT2PI" type="double" line="44"/>
            <javadoc line="44">
                &amp;radic;(2 &amp;pi;)                
            </javadoc>
            <declaration name="SQRT2" type="double" line="46"/>
            <javadoc line="46">
                &amp;radic;(2)                
            </javadoc>
            <declaration name="mean" type="double" line="48"/>
            <javadoc line="48">
                Mean of this distribution.                
            </javadoc>
            <declaration name="standardDeviation" type="double" line="50"/>
            <javadoc line="50">
                Standard deviation of this distribution.                
            </javadoc>
            <declaration name="solverAbsoluteAccuracy" type="double" line="52"/>
            <javadoc line="52">
                Inverse cumulative probability accuracy.                
            </javadoc>
            <javadoc line="55">
                Create a normal distribution with mean equal to zero and standard
                  deviation equal to one.                
            </javadoc>
            <method name="NormalDistribution" type="constructor" line="59"/>
            <javadoc line="63">
                Create a normal distribution using the given mean and standard deviation.                
                <param>
                    mean Mean for this distribution.                    
                </param>
                <param>
                    sd Standard deviation for this distribution.                    
                </param>
                <throws>
                    NotStrictlyPositiveException if {@code sd &lt;= 0}.                    
                </throws>
            </javadoc>
            <method name="NormalDistribution" type="constructor" line="71">
                <params>
                    <param name="mean" type="double"/>
                    <param name="sd" type="double"/>
                </params>
            </method>
            <javadoc line="75">
                Create a normal distribution using the given mean, standard deviation and
                  inverse cumulative distribution accuracy.                
                <param>
                    mean Mean for this distribution.                    
                </param>
                <param>
                    sd Standard deviation for this distribution.                    
                </param>
                <param>
                    inverseCumAccuracy Inverse cumulative probability accuracy.                    
                </param>
                <throws>
                    NotStrictlyPositiveException if {@code sd &lt;= 0}.                    
                </throws>
                <since>
                    2.1                    
                </since>
            </javadoc>
            <method name="NormalDistribution" type="constructor" line="86">
                <params>
                    <param name="mean" type="double"/>
                    <param name="sd" type="double"/>
                    <param name="inverseCumAccuracy" type="double"/>
                </params>
            </method>
            <javadoc line="90">
                Creates a normal distribution.                
                <param>
                    rng Random number generator.                    
                </param>
                <param>
                    mean Mean for this distribution.                    
                </param>
                <param>
                    sd Standard deviation for this distribution.                    
                </param>
                <param>
                    inverseCumAccuracy Inverse cumulative probability accuracy.                    
                </param>
                <throws>
                    NotStrictlyPositiveException if {@code sd &lt;= 0}.                    
                </throws>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="NormalDistribution" type="constructor" line="104">
                <params>
                    <param name="rng" type="RandomGenerator"/>
                    <param name="mean" type="double"/>
                    <param name="sd" type="double"/>
                    <param name="inverseCumAccuracy" type="double"/>
                </params>
                <scope line="107"/>
            </method>
            <javadoc line="116">
                Access the mean.                
                <return>
                    the mean for this distribution.                    
                </return>
            </javadoc>
            <method name="getMean" type="double" line="121"/>
            <javadoc line="125">
                Access the standard deviation.                
                <return>
                    the standard deviation for this distribution.                    
                </return>
            </javadoc>
            <method name="getStandardDeviation" type="double" line="130"/>
            <javadoc line="134">
                {@inheritDoc}                
            </javadoc>
            <method name="density" type="double" line="135">
                <params>
                    <param name="x" type="double"/>
                </params>
                <declaration name="x0" type="double" line="136"/>
                <declaration name="x1" type="double" line="137"/>
            </method>
            <javadoc line="141">
                {@inheritDoc}If {@code x} is more than 40 standard deviations from the mean, 0 or 1
                  is returned, as in these cases the actual value is within{@code Double.MIN_VALUE} of 0 or 1.                
            </javadoc>
            <method name="cumulativeProbability" type="double" line="148">
                <params>
                    <param name="x" type="double"/>
                </params>
                <declaration name="dev" type="double" line="149"/>
                <scope line="150"/>
            </method>
            <javadoc line="156">
                {@inheritDoc}                
                <since>
                    3.2                    
                </since>
            </javadoc>
            <method name="inverseCumulativeProbability" type="double" line="160">
                <params>
                    <param name="p" type="double"/>
                </params>
                <scope line="161"/>
            </method>
            <javadoc line="167">
                {@inheritDoc}                
                <deprecated>
                    See {@link RealDistribution#cumulativeProbability(double,double)}                    
                </deprecated>
            </javadoc>
            <method name="cumulativeProbability" type="double" line="174">
                <params>
                    <param name="x0" type="double"/>
                    <param name="x1" type="double"/>
                </params>
            </method>
            <javadoc line="178">
                {@inheritDoc}                
            </javadoc>
            <method name="probability" type="double" line="182">
                <params>
                    <param name="x0" type="double"/>
                    <param name="x1" type="double"/>
                </params>
                <scope line="183"/>
                <declaration name="denom" type="double" line="187"/>
                <declaration name="v0" type="double" line="188"/>
                <declaration name="v1" type="double" line="189"/>
            </method>
            <javadoc line="193">
                {@inheritDoc}                
            </javadoc>
            <method name="getSolverAbsoluteAccuracy" type="double" line="195"/>
            <javadoc line="199">
                {@inheritDoc}For mean parameter {@code mu}, the mean is {@code mu}.                
            </javadoc>
            <method name="getNumericalMean" type="double" line="204"/>
            <javadoc line="208">
                {@inheritDoc}For standard deviation parameter {@code s}, the variance is {@code s^2}.                
            </javadoc>
            <method name="getNumericalVariance" type="double" line="213">
                <declaration name="s" type="double" line="214"/>
            </method>
            <javadoc line="218">
                {@inheritDoc}The lower bound of the support is always negative infinity
                  no matter the parameters.                
                <return>
                    lower bound of the support (always{@code Double.NEGATIVE_INFINITY})                    
                </return>
            </javadoc>
            <method name="getSupportLowerBound" type="double" line="227"/>
            <javadoc line="231">
                {@inheritDoc}The upper bound of the support is always positive infinity
                  no matter the parameters.                
                <return>
                    upper bound of the support (always{@code Double.POSITIVE_INFINITY})                    
                </return>
            </javadoc>
            <method name="getSupportUpperBound" type="double" line="240"/>
            <javadoc line="244">
                {@inheritDoc}                
            </javadoc>
            <method name="isSupportLowerBoundInclusive" type="boolean" line="245"/>
            <javadoc line="249">
                {@inheritDoc}                
            </javadoc>
            <method name="isSupportUpperBoundInclusive" type="boolean" line="250"/>
            <javadoc line="254">
                {@inheritDoc}The support of this distribution is connected.                
                <return>
                    {@code true}                    
                </return>
            </javadoc>
            <method name="isSupportConnected" type="boolean" line="261"/>
            <javadoc line="265">
                {@inheritDoc}                
            </javadoc>
            <method name="sample" type="double" line="267"/>
        </class>
    </source>