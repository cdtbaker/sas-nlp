<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.geometry.euclidean.twod">
        <import package="java.util.ArrayList"/>
        <import package="java.util.Iterator"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet"/>
        <import package="org.apache.commons.math3.geometry.partitioning.Region"/>
        <import package="org.apache.commons.math3.geometry.partitioning.RegionFactory"/>
        <import package="org.apache.commons.math3.geometry.partitioning.SubHyperplane"/>
        <class name="NestedLoops" line="10">
            <javadoc line="10">
                This class represent a tree of nested 2D boundary loops.
                  &lt;p&gt;This class is used for piecewise polygons construction.
                  Polygons are built using the outline edges as
                  representative of boundaries, the orientation of these lines are
                  meaningful. However, we want to allow the user to specify its
                  outline loops without having to take care of this orientation. This
                  class is devoted to correct mis-oriented loops.&lt;p&gt;
                  &lt;p&gt;Orientation is computed assuming the piecewise polygon is finite,
                  i.e. the outermost loops have their exterior side facing points at
                  infinity, and hence are oriented counter-clockwise. The orientation of
                  internal loops is computed as the reverse of the orientation of
                  their immediate surrounding loop.&lt;/p&gt;                
                <version>
                    $Id: NestedLoops.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
                <since>
                    3.0                    
                </since>
            </javadoc>
            <declaration name="loop" type="Vector2D[]" line="27"/>
            <javadoc line="27">
                Boundary loop.                
            </javadoc>
            <declaration name="surrounded" type="ArrayList&lt;NestedLoops&gt;" line="31"/>
            <javadoc line="31">
                Surrounded loops.                
            </javadoc>
            <declaration name="polygon" type="Region&lt;Euclidean2D&gt;" line="35"/>
            <javadoc line="35">
                Polygon enclosing a finite region.                
            </javadoc>
            <declaration name="originalIsClockwise" type="boolean" line="39"/>
            <javadoc line="39">
                Indicator for original loop orientation.                
            </javadoc>
            <javadoc line="43">
                Simple Constructor.
                  &lt;p&gt;Build an empty tree of nested loops. This instance will become
                  the root node of a complete tree, it is not associated with any
                  loop by itself, the outermost loops are in the root tree child
                  nodes.&lt;/p&gt;                
            </javadoc>
            <method name="NestedLoops" type="constructor" line="50"/>
            <javadoc line="53">
                Constructor.
                  &lt;p&gt;Build a tree node with neither parent nor children&lt;/p&gt;                
                <param>
                    loop boundary loop (will be reversed in place if needed)                    
                </param>
                <exception>
                    MathIllegalArgumentException if an outline has an open boundary loop                    
                </exception>
            </javadoc>
            <method name="NestedLoops" type="constructor" line="59">
                <params>
                    <param name="loop" type="Vector2D[]"/>
                </params>
                <scope line="60"/>
                <declaration name="edges" type="ArrayList&lt;SubHyperplane&lt;Euclidean2D&gt;&gt;" line="65"/>
                <declaration name="current" type="Vector2D" line="66"/>
                <scope line="67">
                    <declaration name="previous" type="Vector2D" line="68"/>
                    <declaration name="line" type="Line" line="70"/>
                    <declaration name="region" type="IntervalsSet" line="71"/>
                </scope>
                <scope line="75"/>
                <scope line="79"/>
            </method>
            <javadoc line="83">
                Add a loop in a tree.                
                <param>
                    bLoop boundary loop (will be reversed in place if needed)                    
                </param>
                <exception>
                    MathIllegalArgumentException if an outline has crossing
                      boundary loops or open boundary loops                    
                </exception>
            </javadoc>
            <method name="add" type="void" line="89">
                <params>
                    <param name="bLoop" type="Vector2D[]"/>
                </params>
            </method>
            <javadoc line="92">
                Add a loop in a tree.                
                <param>
                    node boundary loop (will be reversed in place if needed)                    
                </param>
                <exception>
                    MathIllegalArgumentException if an outline has boundary
                      loops that cross each other                    
                </exception>
            </javadoc>
            <method name="add" type="void" line="98">
                <params>
                    <param name="node" type="NestedLoops"/>
                </params>
                <scope line="99">
                    <scope line="100"/>
                </scope>
                <scope line="105">
                    <declaration name="child" type="NestedLoops" line="106"/>
                    <scope line="107"/>
                </scope>
                <declaration name="factory" type="RegionFactory&lt;Euclidean2D&gt;" line="112"/>
                <scope line="113">
                    <scope line="114"/>
                </scope>
            </method>
            <javadoc line="120">
                Correct the orientation of the loops contained in the tree.
                  &lt;p&gt;This is this method that really inverts the loops that where
                  provided through the {@link #add(Vector2D[]) add} method if
                  they are mis-oriented&lt;/p&gt;                
            </javadoc>
            <method name="correctOrientation" type="void" line="126">
                <scope line="127"/>
            </method>
            <javadoc line="131">
                Set the loop orientation.                
                <param>
                    clockwise if true, the loop should be set to clockwise
                      orientation                    
                </param>
            </javadoc>
            <method name="setClockWise" type="void" line="136">
                <params>
                    <param name="clockwise" type="boolean"/>
                </params>
                <scope line="137">
                    <declaration name="min" type="int" line="138"/>
                    <declaration name="max" type="int" line="139"/>
                    <scope line="140">
                        <declaration name="tmp" type="Vector2D" line="141"/>
                    </scope>
                </scope>
                <scope line="146"/>
            </method>
        </class>
    </source>