<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis.solvers">
        <import package="org.apache.commons.math3.analysis.UnivariateFunction"/>
        <import package="org.apache.commons.math3.exception.MathInternalError"/>
        <import package="org.apache.commons.math3.exception.NoBracketingException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <import package="org.apache.commons.math3.exception.TooManyEvaluationsException"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.Precision"/>
        <class name="BracketingNthOrderBrentSolver" line="10">
            <extends class="AbstractUnivariateSolver"/>
            <implements interface="BracketedUnivariateSolver">
                <type_params>
                    <type_param name="UnivariateFunction"/>
                </type_params>
            </implements>
            <javadoc line="10">
                This class implements a modification of the &lt;a
                  href=&quot;http://mathworld.wolfram.com/BrentsMethod.html&quot;&gt; Brent algorithm&lt;/a&gt;.
                  &lt;p&gt;
                  The changes with respect to the original Brent algorithm are:
                  &lt;ul&gt;
                  &lt;li&gt;the returned value is chosen in the current interval according
                  to user specified {@link AllowedSolution},&lt;/li&gt;
                  &lt;li&gt;the maximal order for the invert polynomial root search is
                  user-specified instead of being invert quadratic only&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/p&gt;
                  The given interval must bracket the root.                
                <version>
                    $Id: BracketingNthOrderBrentSolver.java 1379560 2012-08-31 19:40:30Z erans $                    
                </version>
            </javadoc>
            <declaration name="DEFAULT_ABSOLUTE_ACCURACY" type="double" line="26"/>
            <javadoc line="26">
                Default absolute accuracy.                
            </javadoc>
            <declaration name="DEFAULT_MAXIMAL_ORDER" type="int" line="30"/>
            <javadoc line="30">
                Default maximal order.                
            </javadoc>
            <declaration name="MAXIMAL_AGING" type="int" line="34"/>
            <javadoc line="34">
                Maximal aging triggering an attempt to balance the bracketing interval.                
            </javadoc>
            <declaration name="REDUCTION_FACTOR" type="double" line="38"/>
            <javadoc line="38">
                Reduction factor for attempts to balance the bracketing interval.                
            </javadoc>
            <declaration name="maximalOrder" type="int" line="42"/>
            <javadoc line="42">
                Maximal order.                
            </javadoc>
            <declaration name="allowed" type="AllowedSolution" line="46"/>
            <javadoc line="46">
                The kinds of solutions that the algorithm may accept.                
            </javadoc>
            <javadoc line="50">
                Construct a solver with default accuracy and maximal order (1e-6 and 5 respectively)                
            </javadoc>
            <method name="BracketingNthOrderBrentSolver" type="constructor" line="53"/>
            <javadoc line="56">
                Construct a solver.                
                <param>
                    absoluteAccuracy Absolute accuracy.                    
                </param>
                <param>
                    maximalOrder maximal order.                    
                </param>
                <exception>
                    NumberIsTooSmallException if maximal order is lower than 2                    
                </exception>
            </javadoc>
            <method name="BracketingNthOrderBrentSolver" type="constructor" line="62">
                <params>
                    <param name="absoluteAccuracy" type="double"/>
                    <param name="maximalOrder" type="int"/>
                </params>
                <scope line="64"/>
            </method>
            <javadoc line="70">
                Construct a solver.                
                <param>
                    relativeAccuracy Relative accuracy.                    
                </param>
                <param>
                    absoluteAccuracy Absolute accuracy.                    
                </param>
                <param>
                    maximalOrder maximal order.                    
                </param>
                <exception>
                    NumberIsTooSmallException if maximal order is lower than 2                    
                </exception>
            </javadoc>
            <method name="BracketingNthOrderBrentSolver" type="constructor" line="77">
                <params>
                    <param name="relativeAccuracy" type="double"/>
                    <param name="absoluteAccuracy" type="double"/>
                    <param name="maximalOrder" type="int"/>
                </params>
                <scope line="79"/>
            </method>
            <javadoc line="85">
                Construct a solver.                
                <param>
                    relativeAccuracy Relative accuracy.                    
                </param>
                <param>
                    absoluteAccuracy Absolute accuracy.                    
                </param>
                <param>
                    functionValueAccuracy Function value accuracy.                    
                </param>
                <param>
                    maximalOrder maximal order.                    
                </param>
                <exception>
                    NumberIsTooSmallException if maximal order is lower than 2                    
                </exception>
            </javadoc>
            <method name="BracketingNthOrderBrentSolver" type="constructor" line="93">
                <params>
                    <param name="relativeAccuracy" type="double"/>
                    <param name="absoluteAccuracy" type="double"/>
                    <param name="functionValueAccuracy" type="double"/>
                    <param name="maximalOrder" type="int"/>
                </params>
                <scope line="95"/>
            </method>
            <javadoc line="101">
                Get the maximal order.                
                <return>
                    maximal order                    
                </return>
            </javadoc>
            <method name="getMaximalOrder" type="int" line="105"/>
            <javadoc line="108">
                {@inheritDoc}                
            </javadoc>
            <method name="doSolve" type="double" line="111">
                <declaration name="x" type="double[]" line="112"/>
                <declaration name="y" type="double[]" line="113"/>
                <scope line="119"/>
                <scope line="123"/>
                <declaration name="nbPoints" type="int" line="126"/>
                <declaration name="signChangeIndex" type="int" line="127"/>
                <scope line="128"/>
                <scope line="132">
                    <scope line="134"/>
                    <scope line="137"/>
                    <scope line="141"/>
                </scope>
                <declaration name="tmpX" type="double[]" line="145"/>
                <declaration name="xA" type="double" line="146"/>
                <declaration name="yA" type="double" line="147"/>
                <declaration name="absYA" type="double" line="148"/>
                <declaration name="agingA" type="int" line="149"/>
                <declaration name="xB" type="double" line="150"/>
                <declaration name="yB" type="double" line="151"/>
                <declaration name="absYB" type="double" line="152"/>
                <declaration name="agingB" type="int" line="153"/>
                <scope line="154">
                    <declaration name="xTol" type="double" line="155"/>
                    <scope line="156"/>
                    <declaration name="targetY" type="double" line="172"/>
                    <scope line="173">
                        <declaration name="p" type="int" line="174"/>
                        <declaration name="weightA" type="double" line="175"/>
                        <declaration name="weightB" type="double" line="176"/>
                    </scope>
                    <scope line="179">
                        <declaration name="p" type="int" line="180"/>
                        <declaration name="weightA" type="double" line="181"/>
                        <declaration name="weightB" type="double" line="182"/>
                    </scope>
                    <scope line="185"/>
                    <declaration name="nextX" type="double" line="188"/>
                    <declaration name="start" type="int" line="189"/>
                    <declaration name="end" type="int" line="190"/>
                    <scope line="191">
                        <scope line="194">
                            <scope line="195"/>
                            <scope line="198"/>
                        </scope>
                    </scope>
                    <scope line="205"/>
                    <declaration name="nextY" type="double" line="210"/>
                    <scope line="211"/>
                    <scope line="214"/>
                    <scope line="220">
                        <scope line="222"/>
                    </scope>
                    <scope line="233"/>
                    <scope line="240"/>
                </scope>
            </method>
            <javadoc line="250">
                Guess an x value by n&lt;sup&gt;th&lt;/sup&gt; order inverse polynomial interpolation.
                  &lt;p&gt;
                  The x value is guessed by evaluating polynomial Q(y) at y = targetY, where Q
                  is built such that for all considered points (x&lt;sub&gt;i&lt;/sub&gt;, y&lt;sub&gt;i&lt;/sub&gt;),
                  Q(y&lt;sub&gt;i&lt;/sub&gt;) = x&lt;sub&gt;i&lt;/sub&gt;.
                  &lt;/p&gt;                
                <param>
                    targetY target value for y                    
                </param>
                <param>
                    x reference points abscissas for interpolation,
                      note that this array <em>is</em> modified during computation                    
                </param>
                <param>
                    y reference points ordinates for interpolation                    
                </param>
                <param>
                    start start index of the points to consider (inclusive)                    
                </param>
                <param>
                    end end index of the points to consider (exclusive)                    
                </param>
                <return>
                    guessed root (will be a NaN if two points share the same y)                    
                </return>
            </javadoc>
            <method name="guessX" type="double" line="265">
                <params>
                    <param name="targetY" type="double"/>
                    <param name="x" type="double[]"/>
                    <param name="y" type="double[]"/>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                </params>
                <scope line="266">
                    <declaration name="delta" type="int" line="267"/>
                    <scope line="268"/>
                </scope>
                <declaration name="x0" type="double" line="272"/>
                <scope line="273"/>
            </method>
            <javadoc line="278">
                {@inheritDoc}                
            </javadoc>
            <method name="solve" type="double" line="281">
                <params>
                    <param name="maxEval" type="int"/>
                    <param name="f" type="UnivariateFunction"/>
                    <param name="min" type="double"/>
                    <param name="max" type="double"/>
                    <param name="allowedSolution" type="AllowedSolution"/>
                </params>
            </method>
            <javadoc line="285">
                {@inheritDoc}                
            </javadoc>
            <method name="solve" type="double" line="288">
                <params>
                    <param name="maxEval" type="int"/>
                    <param name="f" type="UnivariateFunction"/>
                    <param name="min" type="double"/>
                    <param name="max" type="double"/>
                    <param name="startValue" type="double"/>
                    <param name="allowedSolution" type="AllowedSolution"/>
                </params>
            </method>
        </class>
    </source>