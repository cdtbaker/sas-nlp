<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.complex">
        <import package="java.io.Serializable"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.MathUtils"/>
        <import package="org.apache.commons.math3.util.Precision"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.ZeroException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <class name="Quaternion" line="28">
            <implements interface="Serializable"/>
            <javadoc line="28">
                This class implements &lt;a href=&quot;http://mathworld.wolfram.com/Quaternion.html&quot;&gt;
                  quaternions&lt;/a&gt; (Hamilton&apos;s hypercomplex numbers).
                  &lt;br/&gt;
                  Instance of this class are guaranteed to be immutable.                
                <since>
                    3.1                    
                </since>
                <version>
                    $Id: Quaternion.java 1421249 2012-12-13 12:32:03Z erans $                    
                </version>
            </javadoc>
            <declaration name="IDENTITY" type="Quaternion" line="38"/>
            <javadoc line="38">
                Identity quaternion.                
            </javadoc>
            <declaration name="ZERO" type="Quaternion" line="40"/>
            <javadoc line="40">
                Zero quaternion.                
            </javadoc>
            <declaration name="I" type="Quaternion" line="42"/>
            <javadoc line="42">
                i                
            </javadoc>
            <declaration name="J" type="Quaternion" line="44"/>
            <javadoc line="44">
                j                
            </javadoc>
            <declaration name="K" type="Quaternion" line="46"/>
            <javadoc line="46">
                k                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="49"/>
            <javadoc line="49">
                Serializable version identifier.                
            </javadoc>
            <declaration name="q0" type="double" line="52"/>
            <javadoc line="52">
                First component (scalar part).                
            </javadoc>
            <declaration name="q1" type="double" line="54"/>
            <javadoc line="54">
                Second component (first vector part).                
            </javadoc>
            <declaration name="q2" type="double" line="56"/>
            <javadoc line="56">
                Third component (second vector part).                
            </javadoc>
            <declaration name="q3" type="double" line="58"/>
            <javadoc line="58">
                Fourth component (third vector part).                
            </javadoc>
            <javadoc line="61">
                Builds a quaternion from its components.                
                <param>
                    a Scalar component.                    
                </param>
                <param>
                    b First vector component.                    
                </param>
                <param>
                    c Second vector component.                    
                </param>
                <param>
                    d Third vector component.                    
                </param>
            </javadoc>
            <method name="Quaternion" type="constructor" line="72">
                <params>
                    <param name="a" type="double"/>
                    <param name="b" type="double"/>
                    <param name="c" type="double"/>
                    <param name="d" type="double"/>
                </params>
            </method>
            <javadoc line="79">
                Builds a quaternion from scalar and vector parts.                
                <param>
                    scalar Scalar part of the quaternion.                    
                </param>
                <param>
                    v Components of the vector part of the quaternion.                    
                </param>
                <throws>
                    DimensionMismatchException if the array length is not 3.                    
                </throws>
            </javadoc>
            <method name="Quaternion" type="constructor" line="89">
                <params>
                    <param name="scalar" type="double"/>
                    <param name="v" type="double[]"/>
                </params>
                <scope line="90"/>
            </method>
            <javadoc line="99">
                Builds a pure quaternion from a vector (assuming that the scalar
                  part is zero).                
                <param>
                    v Components of the vector part of the pure quaternion.                    
                </param>
            </javadoc>
            <method name="Quaternion" type="constructor" line="105">
                <params>
                    <param name="v" type="double[]"/>
                </params>
            </method>
            <javadoc line="109">
                Returns the conjugate quaternion of the instance.                
                <return>
                    the conjugate quaternion                    
                </return>
            </javadoc>
            <method name="getConjugate" type="Quaternion" line="114"/>
            <javadoc line="118">
                Returns the Hamilton product of two quaternions.                
                <param>
                    q1 First quaternion.                    
                </param>
                <param>
                    q2 Second quaternion.                    
                </param>
                <return>
                    the product {@code q1} and {@code q2}, in that order.                    
                </return>
            </javadoc>
            <method name="multiply" type="Quaternion" line="125">
                <params>
                    <param name="q1" type="Quaternion"/>
                    <param name="q2" type="Quaternion"/>
                </params>
                <comment line="127">
                    Components of the first quaternion.                    
                </comment>
                <comment line="133">
                    Components of the second quaternion.                    
                </comment>
                <comment line="139">
                    Components of the product.                    
                </comment>
                <declaration name="q1a" type="double" line="127"/>
                <declaration name="q1b" type="double" line="128"/>
                <declaration name="q1c" type="double" line="129"/>
                <declaration name="q1d" type="double" line="130"/>
                <declaration name="q2a" type="double" line="133"/>
                <declaration name="q2b" type="double" line="134"/>
                <declaration name="q2c" type="double" line="135"/>
                <declaration name="q2d" type="double" line="136"/>
                <declaration name="w" type="double" line="139"/>
                <declaration name="x" type="double" line="140"/>
                <declaration name="y" type="double" line="141"/>
                <declaration name="z" type="double" line="142"/>
            </method>
            <javadoc line="147">
                Returns the Hamilton product of the instance by a quaternion.                
                <param>
                    q Quaternion.                    
                </param>
                <return>
                    the product of this instance with {@code q}, in that order.                    
                </return>
            </javadoc>
            <method name="multiply" type="Quaternion" line="153">
                <params>
                    <param name="q" type="Quaternion"/>
                </params>
            </method>
            <javadoc line="157">
                Computes the sum of two quaternions.                
                <param>
                    q1 Quaternion.                    
                </param>
                <param>
                    q2 Quaternion.                    
                </param>
                <return>
                    the sum of {@code q1} and {@code q2}.                    
                </return>
            </javadoc>
            <method name="add" type="Quaternion" line="165">
                <params>
                    <param name="q1" type="Quaternion"/>
                    <param name="q2" type="Quaternion"/>
                </params>
            </method>
            <javadoc line="172">
                Computes the sum of the instance and another quaternion.                
                <param>
                    q Quaternion.                    
                </param>
                <return>
                    the sum of this instance and {@code q}                    
                </return>
            </javadoc>
            <method name="add" type="Quaternion" line="178">
                <params>
                    <param name="q" type="Quaternion"/>
                </params>
            </method>
            <javadoc line="182">
                Subtracts two quaternions.                
                <param>
                    q1 First Quaternion.                    
                </param>
                <param>
                    q2 Second quaternion.                    
                </param>
                <return>
                    the difference between {@code q1} and {@code q2}.                    
                </return>
            </javadoc>
            <method name="subtract" type="Quaternion" line="190">
                <params>
                    <param name="q1" type="Quaternion"/>
                    <param name="q2" type="Quaternion"/>
                </params>
            </method>
            <javadoc line="197">
                Subtracts a quaternion from the instance.                
                <param>
                    q Quaternion.                    
                </param>
                <return>
                    the difference between this instance and {@code q}.                    
                </return>
            </javadoc>
            <method name="subtract" type="Quaternion" line="203">
                <params>
                    <param name="q" type="Quaternion"/>
                </params>
            </method>
            <javadoc line="207">
                Computes the dot-product of two quaternions.                
                <param>
                    q1 Quaternion.                    
                </param>
                <param>
                    q2 Quaternion.                    
                </param>
                <return>
                    the dot product of {@code q1} and {@code q2}.                    
                </return>
            </javadoc>
            <method name="dotProduct" type="double" line="215">
                <params>
                    <param name="q1" type="Quaternion"/>
                    <param name="q2" type="Quaternion"/>
                </params>
            </method>
            <javadoc line="222">
                Computes the dot-product of the instance by a quaternion.                
                <param>
                    q Quaternion.                    
                </param>
                <return>
                    the dot product of this instance and {@code q}.                    
                </return>
            </javadoc>
            <method name="dotProduct" type="double" line="228">
                <params>
                    <param name="q" type="Quaternion"/>
                </params>
            </method>
            <javadoc line="232">
                Computes the norm of the quaternion.                
                <return>
                    the norm.                    
                </return>
            </javadoc>
            <method name="getNorm" type="double" line="237"/>
            <javadoc line="244">
                Computes the normalized quaternion (the versor of the instance).
                  The norm of the quaternion must not be zero.                
                <return>
                    a normalized quaternion.                    
                </return>
                <throws>
                    ZeroException if the norm of the quaternion is zero.                    
                </throws>
            </javadoc>
            <method name="normalize" type="Quaternion" line="251">
                <declaration name="norm" type="double" line="252"/>
                <scope line="254"/>
            </method>
            <javadoc line="264">
                {@inheritDoc}                
            </javadoc>
            <method name="equals" type="boolean" line="268">
                <params>
                    <param name="other" type="Object"/>
                </params>
                <scope line="269"/>
                <scope line="272">
                    <declaration name="q" type="Quaternion" line="273"/>
                </scope>
            </method>
            <javadoc line="283">
                {@inheritDoc}                
            </javadoc>
            <method name="hashCode" type="int" line="287">
                <comment line="289">
                    &quot;Effective Java&quot; (second edition, p. 47).                    
                </comment>
                <declaration name="result" type="int" line="289"/>
                <scope line="290">
                    <declaration name="c" type="int" line="291"/>
                </scope>
            </method>
            <javadoc line="297">
                Checks whether this instance is equal to another quaternion
                  within a given tolerance.                
                <param>
                    q Quaternion with which to compare the current quaternion.                    
                </param>
                <param>
                    eps Tolerance.                    
                </param>
                <return>
                    {@code true} if the each of the components are equal
                      within the allowed absolute error.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="307">
                <params>
                    <param name="q" type="Quaternion"/>
                    <param name="eps" type="double"/>
                </params>
            </method>
            <javadoc line="314">
                Checks whether the instance is a unit quaternion within a given
                  tolerance.                
                <param>
                    eps Tolerance (absolute error).                    
                </param>
                <return>
                    {@code true} if the norm is 1 within the given tolerance,{@code false} otherwise                    
                </return>
            </javadoc>
            <method name="isUnitQuaternion" type="boolean" line="322">
                <params>
                    <param name="eps" type="double"/>
                </params>
            </method>
            <javadoc line="326">
                Checks whether the instance is a pure quaternion within a given
                  tolerance.                
                <param>
                    eps Tolerance (absolute error).                    
                </param>
                <return>
                    {@code true} if the scalar part of the quaternion is zero.                    
                </return>
            </javadoc>
            <method name="isPureQuaternion" type="boolean" line="333">
                <params>
                    <param name="eps" type="double"/>
                </params>
            </method>
            <javadoc line="337">
                Returns the polar form of the quaternion.                
                <return>
                    the unit quaternion with positive scalar part.                    
                </return>
            </javadoc>
            <method name="getPositivePolarForm" type="Quaternion" line="342">
                <comment line="346">
                    The quaternion of rotation (normalized quaternion) q and -q
                     are equivalent (i.e. represent the same rotation).                    
                </comment>
                <scope line="343">
                    <declaration name="unitQ" type="Quaternion" line="344"/>
                </scope>
                <scope line="351"/>
            </method>
            <javadoc line="356">
                Returns the inverse of this instance.
                  The norm of the quaternion must not be zero.                
                <return>
                    the inverse.                    
                </return>
                <throws>
                    ZeroException if the norm (squared) of the quaternion is zero.                    
                </throws>
            </javadoc>
            <method name="getInverse" type="Quaternion" line="363">
                <declaration name="squareNorm" type="double" line="364"/>
                <scope line="365"/>
            </method>
            <javadoc line="375">
                Gets the first component of the quaternion (scalar part).                
                <return>
                    the scalar part.                    
                </return>
            </javadoc>
            <method name="getQ0" type="double" line="380"/>
            <javadoc line="384">
                Gets the second component of the quaternion (first component
                  of the vector part).                
                <return>
                    the first component of the vector part.                    
                </return>
            </javadoc>
            <method name="getQ1" type="double" line="390"/>
            <javadoc line="394">
                Gets the third component of the quaternion (second component
                  of the vector part).                
                <return>
                    the second component of the vector part.                    
                </return>
            </javadoc>
            <method name="getQ2" type="double" line="400"/>
            <javadoc line="404">
                Gets the fourth component of the quaternion (third component
                  of the vector part).                
                <return>
                    the third component of the vector part.                    
                </return>
            </javadoc>
            <method name="getQ3" type="double" line="410"/>
            <javadoc line="414">
                Gets the scalar part of the quaternion.                
                <return>
                    the scalar part.                    
                </return>
                <see>
                    #getQ0()                    
                </see>
            </javadoc>
            <method name="getScalarPart" type="double" line="420"/>
            <javadoc line="424">
                Gets the three components of the vector part of the quaternion.                
                <return>
                    the vector part.                    
                </return>
                <see>
                    #getQ1()                    
                </see>
                <see>
                    #getQ2()                    
                </see>
                <see>
                    #getQ3()                    
                </see>
            </javadoc>
            <method name="getVectorPart" type="double[]" line="432"/>
            <javadoc line="436">
                Multiplies the instance by a scalar.                
                <param>
                    alpha Scalar factor.                    
                </param>
                <return>
                    a scaled quaternion.                    
                </return>
            </javadoc>
            <method name="multiply" type="Quaternion" line="442">
                <params>
                    <param name="alpha" type="double"/>
                </params>
            </method>
            <javadoc line="449">
                {@inheritDoc}                
            </javadoc>
            <method name="toString" type="String" line="453">
                <declaration name="sp" type="String" line="454"/>
                <declaration name="s" type="StringBuilder" line="455"/>
            </method>
        </class>
    </source>