<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.distribution">
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.linear.Array2DRowRealMatrix"/>
        <import package="org.apache.commons.math3.linear.EigenDecomposition"/>
        <import package="org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException"/>
        <import package="org.apache.commons.math3.linear.RealMatrix"/>
        <import package="org.apache.commons.math3.linear.SingularMatrixException"/>
        <import package="org.apache.commons.math3.random.RandomGenerator"/>
        <import package="org.apache.commons.math3.random.Well19937c"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.MathArrays"/>
        <class name="MultivariateNormalDistribution" line="12">
            <extends class="AbstractMultivariateRealDistribution"/>
            <javadoc line="12">
                Implementation of the multivariate normal (Gaussian) distribution.                
                <see>
                    <a href="http://en.wikipedia.org/wiki/Multivariate_normal_distribution">
                      Multivariate normal distribution (Wikipedia)</a>                    
                </see>
                <see>
                    <a href="http://mathworld.wolfram.com/MultivariateNormalDistribution.html">
                      Multivariate normal distribution (MathWorld)</a>                    
                </see>
                <version>
                    $Id: MultivariateNormalDistribution.java 1433367 2013-01-15 12:15:50Z erans $                    
                </version>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <declaration name="means" type="double[]" line="22"/>
            <javadoc line="22">
                Vector of means.                
            </javadoc>
            <declaration name="covarianceMatrix" type="RealMatrix" line="26"/>
            <javadoc line="26">
                Covariance matrix.                
            </javadoc>
            <declaration name="covarianceMatrixInverse" type="RealMatrix" line="30"/>
            <javadoc line="30">
                The matrix inverse of the covariance matrix.                
            </javadoc>
            <declaration name="covarianceMatrixDeterminant" type="double" line="34"/>
            <javadoc line="34">
                The determinant of the covariance matrix.                
            </javadoc>
            <declaration name="samplingMatrix" type="RealMatrix" line="38"/>
            <javadoc line="38">
                Matrix used in computation of samples.                
            </javadoc>
            <javadoc line="42">
                Creates a multivariate normal distribution with the given mean vector and
                  covariance matrix.
                  &lt;br/&gt;
                  The number of dimensions is equal to the length of the mean vector
                  and to the number of rows and columns of the covariance matrix.
                  It is frequently written as &quot;p&quot; in formulae.                
                <param>
                    means Vector of means.                    
                </param>
                <param>
                    covariances Covariance matrix.                    
                </param>
                <throws>
                    DimensionMismatchException if the arrays length are
                      inconsistent.                    
                </throws>
                <throws>
                    SingularMatrixException if the eigenvalue decomposition cannot
                      be performed on the provided covariance matrix.                    
                </throws>
                <throws>
                    NonPositiveDefiniteMatrixException if any of the eigenvalues is
                      negative.                    
                </throws>
            </javadoc>
            <method name="MultivariateNormalDistribution" type="constructor" line="58">
                <params>
                    <param name="means" type="double[]"/>
                    <param name="covariances" type="double[][]"/>
                </params>
            </method>
            <javadoc line="61">
                Creates a multivariate normal distribution with the given mean vector and
                  covariance matrix.
                  &lt;br/&gt;
                  The number of dimensions is equal to the length of the mean vector
                  and to the number of rows and columns of the covariance matrix.
                  It is frequently written as &quot;p&quot; in formulae.                
                <param>
                    rng Random Number Generator.                    
                </param>
                <param>
                    means Vector of means.                    
                </param>
                <param>
                    covariances Covariance matrix.                    
                </param>
                <throws>
                    DimensionMismatchException if the arrays length are
                      inconsistent.                    
                </throws>
                <throws>
                    SingularMatrixException if the eigenvalue decomposition cannot
                      be performed on the provided covariance matrix.                    
                </throws>
                <throws>
                    NonPositiveDefiniteMatrixException if any of the eigenvalues is
                      negative.                    
                </throws>
            </javadoc>
            <method name="MultivariateNormalDistribution" type="constructor" line="78">
                <params>
                    <param name="rng" type="RandomGenerator"/>
                    <param name="means" type="double[]"/>
                    <param name="covariances" type="double[][]"/>
                </params>
                <declaration name="dim" type="int" line="80"/>
                <scope line="81"/>
                <scope line="84">
                    <scope line="85"/>
                </scope>
                <declaration name="covMatDec" type="EigenDecomposition" line="91"/>
                <declaration name="covMatEigenvalues" type="double[]" line="94"/>
                <scope line="95">
                    <scope line="96"/>
                </scope>
                <declaration name="covMatEigenvectors" type="Array2DRowRealMatrix" line="100"/>
                <scope line="101">
                    <declaration name="evec" type="double[]" line="102"/>
                </scope>
                <declaration name="tmpMatrix" type="RealMatrix" line="105"/>
                <scope line="106">
                    <declaration name="factor" type="double" line="107"/>
                    <scope line="108"/>
                </scope>
            </method>
            <javadoc line="114">
                Gets the mean vector.                
                <return>
                    the mean vector.                    
                </return>
            </javadoc>
            <method name="getMeans" type="double[]" line="118"/>
            <javadoc line="121">
                Gets the covariance matrix.                
                <return>
                    the covariance matrix.                    
                </return>
            </javadoc>
            <method name="getCovariances" type="RealMatrix" line="125"/>
            <javadoc line="128">
                {@inheritDoc}                
            </javadoc>
            <method name="density" type="double" line="131">
                <params>
                    <param name="vals" type="double[]"/>
                </params>
                <declaration name="dim" type="int" line="132"/>
                <scope line="133"/>
            </method>
            <javadoc line="138">
                Gets the square root of each element on the diagonal of the covariance
                  matrix.                
                <return>
                    the standard deviations.                    
                </return>
            </javadoc>
            <method name="getStandardDeviations" type="double[]" line="143">
                <declaration name="dim" type="int" line="144"/>
                <declaration name="std" type="double[]" line="145"/>
                <declaration name="s" type="double[][]" line="146"/>
                <scope line="147"/>
            </method>
            <javadoc line="152">
                {@inheritDoc}                
            </javadoc>
            <method name="sample" type="double[]" line="155">
                <declaration name="dim" type="int" line="156"/>
                <declaration name="normalVals" type="double[]" line="157"/>
                <scope line="158"/>
                <declaration name="vals" type="double[]" line="161"/>
                <scope line="162"/>
            </method>
            <javadoc line="167">
                Computes the term used in the exponent (see definition of the distribution).                
                <param>
                    values Values at which to compute density.                    
                </param>
                <return>
                    the multiplication factor of density calculations.                    
                </return>
            </javadoc>
            <method name="getExponentTerm" type="double" line="172">
                <params>
                    <param name="values" type="double[]"/>
                </params>
                <declaration name="centered" type="double[]" line="173"/>
                <scope line="174"/>
                <declaration name="preMultiplied" type="double[]" line="177"/>
                <declaration name="sum" type="double" line="178"/>
                <scope line="179"/>
            </method>
        </class>
    </source>