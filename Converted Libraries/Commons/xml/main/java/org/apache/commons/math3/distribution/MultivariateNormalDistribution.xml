<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.distribution">
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.linear.Array2DRowRealMatrix"/>
        <import package="org.apache.commons.math3.linear.EigenDecomposition"/>
        <import package="org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException"/>
        <import package="org.apache.commons.math3.linear.RealMatrix"/>
        <import package="org.apache.commons.math3.linear.SingularMatrixException"/>
        <import package="org.apache.commons.math3.random.RandomGenerator"/>
        <import package="org.apache.commons.math3.random.Well19937c"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <import package="org.apache.commons.math3.util.MathArrays"/>
        <class name="MultivariateNormalDistribution" line="30">
            <extends class="AbstractMultivariateRealDistribution"/>
            <javadoc line="30">
                Implementation of the multivariate normal (Gaussian) distribution.                
                <see>
                    <a href="http://en.wikipedia.org/wiki/Multivariate_normal_distribution">
                      Multivariate normal distribution (Wikipedia)</a>                    
                </see>
                <see>
                    <a href="http://mathworld.wolfram.com/MultivariateNormalDistribution.html">
                      Multivariate normal distribution (MathWorld)</a>                    
                </see>
                <version>
                    $Id: MultivariateNormalDistribution.java 1433367 2013-01-15 12:15:50Z erans $                    
                </version>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <declaration name="means" type="double[]" line="43"/>
            <javadoc line="43">
                Vector of means.                
            </javadoc>
            <declaration name="covarianceMatrix" type="RealMatrix" line="45"/>
            <javadoc line="45">
                Covariance matrix.                
            </javadoc>
            <declaration name="covarianceMatrixInverse" type="RealMatrix" line="47"/>
            <javadoc line="47">
                The matrix inverse of the covariance matrix.                
            </javadoc>
            <declaration name="covarianceMatrixDeterminant" type="double" line="49"/>
            <javadoc line="49">
                The determinant of the covariance matrix.                
            </javadoc>
            <declaration name="samplingMatrix" type="RealMatrix" line="51"/>
            <javadoc line="51">
                Matrix used in computation of samples.                
            </javadoc>
            <javadoc line="54">
                Creates a multivariate normal distribution with the given mean vector and
                  covariance matrix.
                  &lt;br/&gt;
                  The number of dimensions is equal to the length of the mean vector
                  and to the number of rows and columns of the covariance matrix.
                  It is frequently written as &quot;p&quot; in formulae.                
                <param>
                    means Vector of means.                    
                </param>
                <param>
                    covariances Covariance matrix.                    
                </param>
                <throws>
                    DimensionMismatchException if the arrays length are
                      inconsistent.                    
                </throws>
                <throws>
                    SingularMatrixException if the eigenvalue decomposition cannot
                      be performed on the provided covariance matrix.                    
                </throws>
                <throws>
                    NonPositiveDefiniteMatrixException if any of the eigenvalues is
                      negative.                    
                </throws>
            </javadoc>
            <method name="MultivariateNormalDistribution" type="constructor" line="75">
                <params>
                    <param name="means" type="double[]"/>
                    <param name="covariances" type="double[][]"/>
                </params>
            </method>
            <javadoc line="79">
                Creates a multivariate normal distribution with the given mean vector and
                  covariance matrix.
                  &lt;br/&gt;
                  The number of dimensions is equal to the length of the mean vector
                  and to the number of rows and columns of the covariance matrix.
                  It is frequently written as &quot;p&quot; in formulae.                
                <param>
                    rng Random Number Generator.                    
                </param>
                <param>
                    means Vector of means.                    
                </param>
                <param>
                    covariances Covariance matrix.                    
                </param>
                <throws>
                    DimensionMismatchException if the arrays length are
                      inconsistent.                    
                </throws>
                <throws>
                    SingularMatrixException if the eigenvalue decomposition cannot
                      be performed on the provided covariance matrix.                    
                </throws>
                <throws>
                    NonPositiveDefiniteMatrixException if any of the eigenvalues is
                      negative.                    
                </throws>
            </javadoc>
            <method name="MultivariateNormalDistribution" type="constructor" line="102">
                <params>
                    <param name="rng" type="RandomGenerator"/>
                    <param name="means" type="double[]"/>
                    <param name="covariances" type="double[][]"/>
                </params>
                <comment line="122">
                    Covariance matrix eigen decomposition.                    
                </comment>
                <comment line="125">
                    Compute and store the inverse.                    
                </comment>
                <comment line="127">
                    Compute and store the determinant.                    
                </comment>
                <comment line="130">
                    Eigenvalues of the covariance matrix.                    
                </comment>
                <comment line="139">
                    Matrix where each column is an eigenvector of the covariance matrix.                    
                </comment>
                <comment line="148">
                    Scale each eigenvector by the square root of its eigenvalue.                    
                </comment>
                <declaration name="dim" type="int" line="105"/>
                <scope line="107"/>
                <scope line="111">
                    <scope line="112"/>
                </scope>
                <declaration name="covMatDec" type="EigenDecomposition" line="122"/>
                <declaration name="covMatEigenvalues" type="double[]" line="130"/>
                <scope line="132">
                    <scope line="133"/>
                </scope>
                <declaration name="covMatEigenvectors" type="Array2DRowRealMatrix" line="139"/>
                <scope line="140">
                    <declaration name="evec" type="double[]" line="141"/>
                </scope>
                <declaration name="tmpMatrix" type="RealMatrix" line="145"/>
                <scope line="148">
                    <declaration name="factor" type="double" line="149"/>
                    <scope line="150"/>
                </scope>
            </method>
            <javadoc line="158">
                Gets the mean vector.                
                <return>
                    the mean vector.                    
                </return>
            </javadoc>
            <method name="getMeans" type="double[]" line="163"/>
            <javadoc line="167">
                Gets the covariance matrix.                
                <return>
                    the covariance matrix.                    
                </return>
            </javadoc>
            <method name="getCovariances" type="RealMatrix" line="172"/>
            <javadoc line="176">
                {@inheritDoc}                
            </javadoc>
            <method name="density" type="double" line="177">
                <params>
                    <param name="vals" type="double[]"/>
                </params>
                <declaration name="dim" type="int" line="178"/>
                <scope line="179"/>
            </method>
            <javadoc line="188">
                Gets the square root of each element on the diagonal of the covariance
                  matrix.                
                <return>
                    the standard deviations.                    
                </return>
            </javadoc>
            <method name="getStandardDeviations" type="double[]" line="194">
                <declaration name="dim" type="int" line="195"/>
                <declaration name="std" type="double[]" line="196"/>
                <declaration name="s" type="double[][]" line="197"/>
                <scope line="198"/>
            </method>
            <javadoc line="204">
                {@inheritDoc}                
            </javadoc>
            <method name="sample" type="double[]" line="205">
                <declaration name="dim" type="int" line="206"/>
                <declaration name="normalVals" type="double[]" line="207"/>
                <scope line="209"/>
                <declaration name="vals" type="double[]" line="213"/>
                <scope line="215"/>
            </method>
            <javadoc line="222">
                Computes the term used in the exponent (see definition of the distribution).                
                <param>
                    values Values at which to compute density.                    
                </param>
                <return>
                    the multiplication factor of density calculations.                    
                </return>
            </javadoc>
            <method name="getExponentTerm" type="double" line="228">
                <params>
                    <param name="values" type="double[]"/>
                </params>
                <declaration name="centered" type="double[]" line="229"/>
                <scope line="230"/>
                <declaration name="preMultiplied" type="double[]" line="233"/>
                <declaration name="sum" type="double" line="234"/>
                <scope line="235"/>
            </method>
        </class>
    </source>