<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.genetics">
        <import package="java.util.ArrayList"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.List"/>
        <import package="java.util.Set"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <class name="CycleCrossover" line="9">
            <type_params>
                <type_param name="T"/>
            </type_params>
            <implements interface="CrossoverPolicy"/>
            <javadoc line="9">
                Cycle Crossover [CX] builds offspring from &lt;b&gt;ordered&lt;/b&gt; chromosomes by identifying cycles
                  between two parent chromosomes. To form the children, the cycles are copied from the
                  respective parents.
                  &lt;p&gt;
                  To form a cycle the following procedure is applied:
                  &lt;ol&gt;
                  &lt;li&gt;start with the first gene of parent 1&lt;/li&gt;
                  &lt;li&gt;look at the gene at the same position of parent 2&lt;/li&gt;
                  &lt;li&gt;go to the position with the same gene in parent 1&lt;/li&gt;
                  &lt;li&gt;add this gene index to the cycle&lt;/li&gt;
                  &lt;li&gt;repeat the steps 2-5 until we arrive at the starting gene of this cycle&lt;/li&gt;
                  &lt;/ol&gt;
                  The indices that form a cycle are then used to form the children in alternating order, i.e.
                  in cycle 1, the genes of parent 1 are copied to child 1, while in cycle 2 the genes of parent 1
                  are copied to child 2, and so forth ...
                  &lt;/p&gt;
                  Example (zero-start cycle):
                  &lt;pre&gt;
                  p1 = (8 4 7 3 6 2 5 1 9 0)    X   c1 = (8 1 2 3 4 5 6 7 9 0)
                  p2 = (0 1 2 3 4 5 6 7 8 9)    X   c2 = (0 4 7 3 6 2 5 1 8 9)
                  cycle 1: 8 0 9
                  cycle 2: 4 1 7 2 5 6
                  cycle 3: 3
                  &lt;/pre&gt;
                  This policy works only on {@link AbstractListChromosome}, and therefore it
                  is parameterized by T. Moreover, the chromosomes must have same lengths.                
                <see>
                    <a href="http://www.rubicite.com/Tutorials/GeneticAlgorithms/CrossoverOperators/CycleCrossoverOperator.aspx">
                      Cycle Crossover Operator</a>                    
                </see>
                <param>
                    <T>
                      generic type of the {@link AbstractListChromosome}s for crossover                    
                </param>
                <since>
                    3.1                    
                </since>
                <version>
                    $Id: CycleCrossover.java 1385297 2012-09-16 16:05:57Z tn $                    
                </version>
            </javadoc>
            <declaration name="randomStart" type="boolean" line="44"/>
            <javadoc line="44">
                If the start index shall be chosen randomly.                
            </javadoc>
            <javadoc line="48">
                Creates a new {@link CycleCrossover} policy.                
            </javadoc>
            <method name="CycleCrossover" type="constructor" line="51"/>
            <javadoc line="54">
                Creates a new {@link CycleCrossover} policy using the given {@code randomStart} behavior.                
                <param>
                    randomStart whether the start index shall be chosen randomly or be set to 0                    
                </param>
            </javadoc>
            <method name="CycleCrossover" type="constructor" line="58">
                <params>
                    <param name="randomStart" type="boolean"/>
                </params>
            </method>
            <javadoc line="61">
                Returns whether the starting index is chosen randomly or set to zero.                
                <return>
                    {@code true} if the starting index is chosen randomly, {@code false} otherwise                    
                </return>
            </javadoc>
            <method name="isRandomStart" type="boolean" line="65"/>
            <javadoc line="68">
                {@inheritDoc}                
                <throws>
                    MathIllegalArgumentException if the chromosomes are not an instance of {@link AbstractListChromosome}                    
                </throws>
                <throws>
                    DimensionMismatchException if the length of the two chromosomes is different                    
                </throws>
            </javadoc>
            <method name="crossover" type="ChromosomePair" line="73">
                <params>
                    <param name="first" type="Chromosome"/>
                    <param name="second" type="Chromosome"/>
                </params>
                <scope line="74"/>
            </method>
            <javadoc line="79">
                Helper for {@link #crossover(Chromosome,Chromosome)}. Performs the actual crossover.                
                <param>
                    first the first chromosome                    
                </param>
                <param>
                    second the second chromosome                    
                </param>
                <return>
                    the pair of new chromosomes that resulted from the crossover                    
                </return>
                <throws>
                    DimensionMismatchException if the length of the two chromosomes is different                    
                </throws>
            </javadoc>
            <method name="mate" type="ChromosomePair" line="86">
                <params>
                    <param name="first" type="AbstractListChromosome<T>"/>
                    <param name="second" type="AbstractListChromosome<T>"/>
                </params>
                <declaration name="length" type="int" line="87"/>
                <scope line="88"/>
                <declaration name="parent1Rep" type="List&lt;T&gt;" line="91"/>
                <declaration name="parent2Rep" type="List&lt;T&gt;" line="92"/>
                <declaration name="child1Rep" type="List&lt;T&gt;" line="93"/>
                <declaration name="child2Rep" type="List&lt;T&gt;" line="94"/>
                <declaration name="visitedIndices" type="Set&lt;Integer&gt;" line="95"/>
                <declaration name="indices" type="List&lt;Integer&gt;" line="96"/>
                <declaration name="idx" type="int" line="97"/>
                <declaration name="cycle" type="int" line="98"/>
                <scope line="99">
                    <declaration name="item" type="T" line="101"/>
                    <scope line="103"/>
                    <scope line="108">
                        <scope line="109">
                            <declaration name="tmp" type="T" line="110"/>
                        </scope>
                    </scope>
                    <scope line="117">
                        <scope line="119"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>