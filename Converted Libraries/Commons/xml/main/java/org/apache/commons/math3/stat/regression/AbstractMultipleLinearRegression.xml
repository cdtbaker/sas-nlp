<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.stat.regression">
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.NoDataException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.linear.NonSquareMatrixException"/>
        <import package="org.apache.commons.math3.linear.RealMatrix"/>
        <import package="org.apache.commons.math3.linear.Array2DRowRealMatrix"/>
        <import package="org.apache.commons.math3.linear.RealVector"/>
        <import package="org.apache.commons.math3.linear.ArrayRealVector"/>
        <import package="org.apache.commons.math3.stat.descriptive.moment.Variance"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="AbstractMultipleLinearRegression" line="33">
            <implements interface="MultipleLinearRegression"/>
            <javadoc line="33">
                Abstract base class for implementations of MultipleLinearRegression.                
                <version>
                    $Id: AbstractMultipleLinearRegression.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <declaration name="xMatrix" type="RealMatrix" line="41"/>
            <javadoc line="41">
                X sample data.                
            </javadoc>
            <declaration name="yVector" type="RealVector" line="44"/>
            <javadoc line="44">
                Y sample data.                
            </javadoc>
            <declaration name="noIntercept" type="boolean" line="47"/>
            <javadoc line="47">
                Whether or not the regression model includes an intercept.  True means no intercept.                
            </javadoc>
            <javadoc line="50">
                @return the X sample data.                
            </javadoc>
            <method name="getX" type="RealMatrix" line="53"/>
            <javadoc line="57">
                @return the Y sample data.                
            </javadoc>
            <method name="getY" type="RealVector" line="60"/>
            <javadoc line="64">
                @return true if the model has no intercept term; false otherwise                
                <since>
                    2.2                    
                </since>
            </javadoc>
            <method name="isNoIntercept" type="boolean" line="68"/>
            <javadoc line="72">
                @param noIntercept true means the model is to be estimated without an intercept term                
                <since>
                    2.2                    
                </since>
            </javadoc>
            <method name="setNoIntercept" type="void" line="76">
                <params>
                    <param name="noIntercept" type="boolean"/>
                </params>
            </method>
            <javadoc line="80">
                &lt;p&gt;Loads model x and y sample data from a flat input array, overriding any previous sample.
                  &lt;/p&gt;
                  &lt;p&gt;Assumes that rows are concatenated with y values first in each row.  For example, an input
                  &lt;code&gt;data&lt;/code&gt; array containing the sequence of values (1, 2, 3, 4, 5, 6, 7, 8, 9) with
                  &lt;code&gt;nobs = 3&lt;/code&gt; and &lt;code&gt;nvars = 2&lt;/code&gt; creates a regression dataset with two
                  independent variables, as below:
                  &lt;pre&gt;
                  y   x[0]  x[1]
                  --------------
                  1     2     3
                  4     5     6
                  7     8     9
                  &lt;/pre&gt;
                  &lt;/p&gt;
                  &lt;p&gt;Note that there is no need to add an initial unitary column (column of 1&apos;s) when
                  specifying a model including an intercept term.  If {@link #isNoIntercept()} is &lt;code&gt;true&lt;/code&gt;,
                  the X matrix will be created without an initial column of &quot;1&quot;s; otherwise this column will
                  be added.
                  &lt;/p&gt;
                  &lt;p&gt;Throws IllegalArgumentException if any of the following preconditions fail:
                  &lt;ul&gt;&lt;li&gt;&lt;code&gt;data&lt;/code&gt; cannot be null&lt;/li&gt;
                  &lt;li&gt;&lt;code&gt;data.length = nobs  (nvars + 1)&lt;/li&gt;
                  &lt;li&gt;&lt;code&gt;nobs &gt; nvars&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;
                  &lt;/p&gt;                
                <param>
                    data input data array                    
                </param>
                <param>
                    nobs number of observations (rows)                    
                </param>
                <param>
                    nvars number of independent variables (columns, not counting y)                    
                </param>
                <throws>
                    NullArgumentException if the data array is null                    
                </throws>
                <throws>
                    DimensionMismatchException if the length of the data array is not equal
                      to <code>nobs  (nvars + 1)</code>                    
                </throws>
                <throws>
                    NumberIsTooSmallException if <code>nobs</code> is smaller than
                      <code>nvars</code>                    
                </throws>
            </javadoc>
            <method name="newSampleData" type="void" line="115">
                <params>
                    <param name="data" type="double[]"/>
                    <param name="nobs" type="int"/>
                    <param name="nvars" type="int"/>
                </params>
                <scope line="116"/>
                <scope line="119"/>
                <scope line="122"/>
                <declaration name="y" type="double[]" line="125"/>
                <declaration name="cols" type="int" line="126"/>
                <declaration name="x" type="double[][]" line="127"/>
                <declaration name="pointer" type="int" line="128"/>
                <scope line="129">
                    <scope line="131"/>
                    <scope line="134"/>
                </scope>
            </method>
            <javadoc line="142">
                Loads new y sample data, overriding any previous data.                
                <param>
                    y the array representing the y sample                    
                </param>
                <throws>
                    NullArgumentException if y is null                    
                </throws>
                <throws>
                    NoDataException if y is empty                    
                </throws>
            </javadoc>
            <method name="newYSampleData" type="void" line="149">
                <params>
                    <param name="y" type="double[]"/>
                </params>
                <scope line="150"/>
                <scope line="153"/>
            </method>
            <javadoc line="159">
                &lt;p&gt;Loads new x sample data, overriding any previous data.
                  &lt;/p&gt;
                  The input &lt;code&gt;x&lt;/code&gt; array should have one row for each sample
                  observation, with columns corresponding to independent variables.
                  For example, if &lt;pre&gt;
                  &lt;code&gt; x = new double[][] {{1, 2}, {3, 4}, {5, 6}} &lt;/code&gt;&lt;/pre&gt;
                  then &lt;code&gt;setXSampleData(x) &lt;/code&gt; results in a model with two independent
                  variables and 3 observations:
                  &lt;pre&gt;
                  x[0]  x[1]
                  ----------
                  1    2
                  3    4
                  5    6
                  &lt;/pre&gt;
                  &lt;/p&gt;
                  &lt;p&gt;Note that there is no need to add an initial unitary column (column of 1&apos;s) when
                  specifying a model including an intercept term.
                  &lt;/p&gt;                
                <param>
                    x the rectangular array representing the x sample                    
                </param>
                <throws>
                    NullArgumentException if x is null                    
                </throws>
                <throws>
                    NoDataException if x is empty                    
                </throws>
                <throws>
                    DimensionMismatchException if x is not rectangular                    
                </throws>
            </javadoc>
            <method name="newXSampleData" type="void" line="184">
                <params>
                    <param name="x" type="double[][]"/>
                </params>
                <comment line="193">
                    Augment design matrix with initial unitary column                    
                </comment>
                <scope line="185"/>
                <scope line="188"/>
                <scope line="191"/>
                <scope line="193">
                    <declaration name="nVars" type="int" line="194"/>
                    <declaration name="xAug" type="double[][]" line="195"/>
                    <scope line="196">
                        <scope line="197"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="207">
                Validates sample data.  Checks that
                  &lt;ul&gt;&lt;li&gt;Neither x nor y is null or empty;&lt;/li&gt;
                  &lt;li&gt;The length (i.e. number of rows) of x equals the length of y&lt;/li&gt;
                  &lt;li&gt;x has at least one more row than it has columns (i.e. there is
                  sufficient data to estimate regression coefficients for each of the
                  columns in x plus an intercept.&lt;/li&gt;
                  &lt;/ul&gt;                
                <param>
                    x the [n,k] array representing the x data                    
                </param>
                <param>
                    y the [n,1] array representing the y data                    
                </param>
                <throws>
                    NullArgumentException if {@code x} or {@code y} is null                    
                </throws>
                <throws>
                    DimensionMismatchException if {@code x} and {@code y} do not
                      have the same length                    
                </throws>
                <throws>
                    NoDataException if {@code x} or {@code y} are zero-length                    
                </throws>
                <throws>
                    MathIllegalArgumentException if the number of rows of {@code x}is not larger than the number of columns + 1                    
                </throws>
            </javadoc>
            <method name="validateSampleData" type="void" line="225">
                <params>
                    <param name="x" type="double[][]"/>
                    <param name="y" type="double[]"/>
                </params>
                <comment line="232">
                    Must be no y data either                    
                </comment>
                <scope line="226"/>
                <scope line="229"/>
                <scope line="232"/>
                <scope line="235"/>
            </method>
            <javadoc line="242">
                Validates that the x data and covariance matrix have the same
                  number of rows and that the covariance matrix is square.                
                <param>
                    x the [n,k] array representing the x sample                    
                </param>
                <param>
                    covariance the [n,n] array representing the covariance matrix                    
                </param>
                <throws>
                    DimensionMismatchException if the number of rows in x is not equal
                      to the number of rows in covariance                    
                </throws>
                <throws>
                    NonSquareMatrixException if the covariance matrix is not square                    
                </throws>
            </javadoc>
            <method name="validateCovarianceData" type="void" line="252">
                <params>
                    <param name="x" type="double[][]"/>
                    <param name="covariance" type="double[][]"/>
                </params>
                <scope line="253"/>
                <scope line="256"/>
            </method>
            <javadoc line="261">
                {@inheritDoc}                
            </javadoc>
            <method name="estimateRegressionParameters" type="double[]" line="264">
                <declaration name="b" type="RealVector" line="265"/>
            </method>
            <javadoc line="269">
                {@inheritDoc}                
            </javadoc>
            <method name="estimateResiduals" type="double[]" line="272">
                <declaration name="b" type="RealVector" line="273"/>
                <declaration name="e" type="RealVector" line="274"/>
            </method>
            <javadoc line="278">
                {@inheritDoc}                
            </javadoc>
            <method name="estimateRegressionParametersVariance" type="double[][]" line="281"/>
            <javadoc line="285">
                {@inheritDoc}                
            </javadoc>
            <method name="estimateRegressionParametersStandardErrors" type="double[]" line="288">
                <declaration name="betaVariance" type="double[][]" line="289"/>
                <declaration name="sigma" type="double" line="290"/>
                <declaration name="length" type="int" line="291"/>
                <declaration name="result" type="double[]" line="292"/>
                <scope line="293"/>
            </method>
            <javadoc line="299">
                {@inheritDoc}                
            </javadoc>
            <method name="estimateRegressandVariance" type="double" line="302"/>
            <javadoc line="306">
                Estimates the variance of the error.                
                <return>
                    estimate of the error variance                    
                </return>
                <since>
                    2.2                    
                </since>
            </javadoc>
            <method name="estimateErrorVariance" type="double" line="312"/>
            <javadoc line="317">
                Estimates the standard error of the regression.                
                <return>
                    regression standard error                    
                </return>
                <since>
                    2.2                    
                </since>
            </javadoc>
            <method name="estimateRegressionStandardError" type="double" line="323"/>
            <method name="calculateBeta" type="RealVector" line="327"/>
            <javadoc line="327">
                Calculates the beta of multiple linear regression in matrix notation.                
                <return>
                    beta                    
                </return>
            </javadoc>
            <method name="calculateBetaVariance" type="RealMatrix" line="334"/>
            <javadoc line="334">
                Calculates the beta variance of multiple linear regression in matrix
                  notation.                
                <return>
                    beta variance                    
                </return>
            </javadoc>
            <javadoc line="343">
                Calculates the variance of the y values.                
                <return>
                    Y variance                    
                </return>
            </javadoc>
            <method name="calculateYVariance" type="double" line="348"/>
            <javadoc line="352">
                &lt;p&gt;Calculates the variance of the error term.&lt;/p&gt;
                  Uses the formula &lt;pre&gt;
                  var(u) = u &amp;middot; u / (n - k)
                  &lt;/pre&gt;
                  where n and k are the row and column dimensions of the design
                  matrix X.                
                <return>
                    error variance estimate                    
                </return>
                <since>
                    2.2                    
                </since>
            </javadoc>
            <method name="calculateErrorVariance" type="double" line="363">
                <declaration name="residuals" type="RealVector" line="364"/>
            </method>
            <javadoc line="369">
                Calculates the residuals of multiple linear regression in matrix
                  notation.
                  &lt;pre&gt;
                  u = y - X  b
                  &lt;/pre&gt;                
                <return>
                    The residuals [n,1] matrix                    
                </return>
            </javadoc>
            <method name="calculateResiduals" type="RealVector" line="379">
                <declaration name="b" type="RealVector" line="380"/>
            </method>
        </class>
    </source>