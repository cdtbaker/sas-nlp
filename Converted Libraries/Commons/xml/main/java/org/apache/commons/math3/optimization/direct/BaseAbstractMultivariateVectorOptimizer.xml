<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optimization.direct">
        <import package="org.apache.commons.math3.util.Incrementor"/>
        <import package="org.apache.commons.math3.exception.MaxCountExceededException"/>
        <import package="org.apache.commons.math3.exception.TooManyEvaluationsException"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.NullArgumentException"/>
        <import package="org.apache.commons.math3.analysis.MultivariateVectorFunction"/>
        <import package="org.apache.commons.math3.optimization.OptimizationData"/>
        <import package="org.apache.commons.math3.optimization.InitialGuess"/>
        <import package="org.apache.commons.math3.optimization.Target"/>
        <import package="org.apache.commons.math3.optimization.Weight"/>
        <import package="org.apache.commons.math3.optimization.BaseMultivariateVectorOptimizer"/>
        <import package="org.apache.commons.math3.optimization.ConvergenceChecker"/>
        <import package="org.apache.commons.math3.optimization.PointVectorValuePair"/>
        <import package="org.apache.commons.math3.optimization.SimpleVectorValueChecker"/>
        <import package="org.apache.commons.math3.linear.RealMatrix"/>
        <class name="BaseAbstractMultivariateVectorOptimizer" line="36">
            <type_params>
                <type_param name="FUNC"/>
            </type_params>
            <implements interface="BaseMultivariateVectorOptimizer">
                <type_params>
                    <type_param name="FUNC"/>
                </type_params>
            </implements>
            <javadoc line="36">
                Base class for implementing optimizers for multivariate scalar functions.
                  This base class handles the boiler-plate methods associated to thresholds
                  settings, iterations and evaluations counting.                
                <param>
                    &lt;FUNC&gt;
                       the type of the objective function to be optimized                    
                </param>
                <version>
                    $Id: BaseAbstractMultivariateVectorOptimizer.java 1499808 2013-07-04 17:00:42Z sebb $                    
                </version>
                <deprecated>
                    As of 3.1 (to be removed in 4.0).                    
                </deprecated>
                <since>
                    3.0                    
                </since>
            </javadoc>
            <declaration name="evaluations" type="Incrementor" line="50"/>
            <javadoc line="50">
                Evaluations counter.                
            </javadoc>
            <declaration name="checker" type="ConvergenceChecker&amp;lt;PointVectorValuePair&amp;gt;" line="52"/>
            <javadoc line="52">
                Convergence checker.                
            </javadoc>
            <declaration name="target" type="double[]" line="54"/>
            <javadoc line="54">
                Target value for the objective functions at optimum.                
            </javadoc>
            <declaration name="weightMatrix" type="RealMatrix" line="56"/>
            <javadoc line="56">
                Weight matrix.                
            </javadoc>
            <declaration name="weight" type="double[]" line="58"/>
            <javadoc line="58">
                Weight for the least squares cost computation.                
                <deprecated>
                                        
                </deprecated>
            </javadoc>
            <declaration name="start" type="double[]" line="63"/>
            <javadoc line="63">
                Initial guess.                
            </javadoc>
            <declaration name="function" type="FUNC" line="65"/>
            <javadoc line="65">
                Objective function.                
            </javadoc>
            <javadoc line="68">
                Simple constructor with default settings.
                  The convergence check is set to a {@link SimpleVectorValueChecker}.                
                <deprecated>
                    See {@link SimpleVectorValueChecker#SimpleVectorValueChecker()}                    
                </deprecated>
            </javadoc>
            <method name="BaseAbstractMultivariateVectorOptimizer" type="constructor" line="74"/>
            <javadoc line="77">
                @param checker Convergence checker.                
            </javadoc>
            <method name="BaseAbstractMultivariateVectorOptimizer" type="constructor" line="80">
                <params>
                    <param name="checker" type="ConvergenceChecker&lt;PointVectorValuePair&gt;"/>
                </params>
            </method>
            <javadoc line="84">
                {@inheritDoc}                
            </javadoc>
            <method name="getMaxEvaluations" type="int" line="85"/>
            <javadoc line="89">
                {@inheritDoc}                
            </javadoc>
            <method name="getEvaluations" type="int" line="90"/>
            <javadoc line="94">
                {@inheritDoc}                
            </javadoc>
            <method name="getConvergenceChecker" type="ConvergenceChecker&lt;PointVectorValuePair&gt;" line="95"/>
            <javadoc line="99">
                Compute the objective function value.                
                <param>
                    point Point at which the objective function must be evaluated.                    
                </param>
                <return>
                    the objective function value at the specified point.                    
                </return>
                <throws>
                    TooManyEvaluationsException if the maximal number of evaluations is
                      exceeded.                    
                </throws>
            </javadoc>
            <method name="computeObjectiveValue" type="double[]" line="107">
                <params>
                    <param name="point" type="double[]"/>
                </params>
                <scope line="108"/>
                <scope line="110"/>
            </method>
            <javadoc line="116">
                {@inheritDoc}                
                <deprecated>
                    As of 3.1. Please use{@link #optimize(int,MultivariateVectorFunction,OptimizationData[])}instead.                    
                </deprecated>
            </javadoc>
            <method name="optimize" type="PointVectorValuePair" line="124">
                <params>
                    <param name="maxEval" type="int"/>
                    <param name="f" type="FUNC"/>
                    <param name="t" type="double[]"/>
                    <param name="w" type="double[]"/>
                    <param name="startPoint" type="double[]"/>
                </params>
            </method>
            <javadoc line="128">
                Optimize an objective function.                
                <param>
                    maxEval Allowed number of evaluations of the objective function.                    
                </param>
                <param>
                    f Objective function.                    
                </param>
                <param>
                    optData Optimization data. The following data will be looked for:
                      &lt;ul&gt;
                      &lt;li&gt;{@link Target}&lt;/li&gt;
                      &lt;li&gt;{@link Weight}&lt;/li&gt;
                      &lt;li&gt;{@link InitialGuess}&lt;/li&gt;
                      &lt;/ul&gt;                    
                </param>
                <return>
                    the point/value pair giving the optimal value of the objective
                      function.                    
                </return>
                <throws>
                    TooManyEvaluationsException if the maximal number of
                      evaluations is exceeded.                    
                </throws>
                <throws>
                    DimensionMismatchException if the initial guess, target, and weight
                      arguments have inconsistent dimensions.                    
                </throws>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="optimize" type="PointVectorValuePair" line="152">
                <params>
                    <param name="maxEval" type="int"/>
                    <param name="f" type="FUNC"/>
                    <param name="optData" type="OptimizationData"/>
                </params>
            </method>
            <javadoc line="156">
                Optimize an objective function.
                  Optimization is considered to be a weighted least-squares minimization.
                  The cost function to be minimized is
                  &lt;code&gt;&amp;sum;weight&lt;sub&gt;i&lt;/sub&gt;(objective&lt;sub&gt;i&lt;/sub&gt; - target&lt;sub&gt;i&lt;/sub&gt;)&lt;sup&gt;2&lt;/sup&gt;&lt;/code&gt;                
                <param>
                    f Objective function.                    
                </param>
                <param>
                    t Target value for the objective functions at optimum.                    
                </param>
                <param>
                    w Weights for the least squares cost computation.                    
                </param>
                <param>
                    startPoint Start point for optimization.                    
                </param>
                <return>
                    the point/value pair giving the optimal value for objective
                      function.                    
                </return>
                <param>
                    maxEval Maximum number of function evaluations.                    
                </param>
                <throws>
                    org.apache.commons.math3.exception.DimensionMismatchExceptionif the start point dimension is wrong.                    
                </throws>
                <throws>
                    org.apache.commons.math3.exception.TooManyEvaluationsExceptionif the maximal number of evaluations is exceeded.                    
                </throws>
                <throws>
                    org.apache.commons.math3.exception.NullArgumentException if
                      any argument is {@code null}.                    
                </throws>
                <deprecated>
                    As of 3.1. Please use{@link #optimizeInternal(int,MultivariateVectorFunction,OptimizationData[])}instead.                    
                </deprecated>
            </javadoc>
            <method name="optimizeInternal" type="PointVectorValuePair" line="182">
                <params>
                    <param name="maxEval" type="int"/>
                    <param name="f" type="FUNC"/>
                    <param name="t" type="double[]"/>
                    <param name="w" type="double[]"/>
                    <param name="startPoint" type="double[]"/>
                </params>
                <comment line="184">
                    Checks.                    
                </comment>
                <scope line="184"/>
                <scope line="187"/>
                <scope line="190"/>
                <scope line="193"/>
                <scope line="196"/>
            </method>
            <javadoc line="206">
                Optimize an objective function.                
                <param>
                    maxEval Allowed number of evaluations of the objective function.                    
                </param>
                <param>
                    f Objective function.                    
                </param>
                <param>
                    optData Optimization data. The following data will be looked for:
                      &lt;ul&gt;
                      &lt;li&gt;{@link Target}&lt;/li&gt;
                      &lt;li&gt;{@link Weight}&lt;/li&gt;
                      &lt;li&gt;{@link InitialGuess}&lt;/li&gt;
                      &lt;/ul&gt;                    
                </param>
                <return>
                    the point/value pair giving the optimal value of the objective
                      function.                    
                </return>
                <throws>
                    TooManyEvaluationsException if the maximal number of
                      evaluations is exceeded.                    
                </throws>
                <throws>
                    DimensionMismatchException if the initial guess, target, and weight
                      arguments have inconsistent dimensions.                    
                </throws>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="optimizeInternal" type="PointVectorValuePair" line="230">
                <params>
                    <param name="maxEval" type="int"/>
                    <param name="f" type="FUNC"/>
                    <param name="optData" type="OptimizationData"/>
                </params>
                <comment line="232">
                    Set internal state.                    
                </comment>
                <comment line="236">
                    Retrieve other settings.                    
                </comment>
                <comment line="238">
                    Check input consistency.                    
                </comment>
                <comment line="240">
                    Allow subclasses to reset their own internal state.                    
                </comment>
                <comment line="242">
                    Perform computation.                    
                </comment>
            </method>
            <javadoc line="245">
                Gets the initial values of the optimized parameters.                
                <return>
                    the initial guess.                    
                </return>
            </javadoc>
            <method name="getStartPoint" type="double[]" line="250"/>
            <javadoc line="254">
                Gets the weight matrix of the observations.                
                <return>
                    the weight matrix.                    
                </return>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="getWeight" type="RealMatrix" line="260"/>
            <javadoc line="263">
                Gets the observed values to be matched by the objective vector
                  function.                
                <return>
                    the target values.                    
                </return>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="getTarget" type="double[]" line="270"/>
            <javadoc line="274">
                Gets the objective vector function.
                  Note that this access bypasses the evaluation counter.                
                <return>
                    the objective vector function.                    
                </return>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="getObjectiveFunction" type="FUNC" line="281"/>
            <method name="doOptimize" type="PointVectorValuePair" line="285"/>
            <javadoc line="285">
                Perform the bulk of the optimization algorithm.                
                <return>
                    the point/value pair giving the optimal value for the
                      objective function.                    
                </return>
            </javadoc>
            <javadoc line="293">
                @return a reference to the {@link #target array}.                
                <deprecated>
                    As of 3.1.                    
                </deprecated>
            </javadoc>
            <method name="getTargetRef" type="double[]" line="298"/>
            <javadoc line="301">
                @return a reference to the {@link #weight array}.                
                <deprecated>
                    As of 3.1.                    
                </deprecated>
            </javadoc>
            <method name="getWeightRef" type="double[]" line="306"/>
            <javadoc line="310">
                Method which a subclass &lt;em&gt;must&lt;/em&gt; override whenever its internal
                  state depend on the {@link OptimizationData input} parsed by this base
                  class.
                  It will be called after the parsing step performed in the{@link #optimize(int,MultivariateVectorFunction,OptimizationData[])optimize} method and just before {@link #doOptimize()}.                
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="setUp" type="void" line="320">
                <comment line="322">
                    XXX Temporary code until the new internal data is used everywhere.                    
                </comment>
                <declaration name="dim" type="int" line="322"/>
                <scope line="324"/>
            </method>
            <javadoc line="329">
                Scans the list of (required and optional) optimization data that
                  characterize the problem.                
                <param>
                    optData Optimization data. The following data will be looked for:
                      &lt;ul&gt;
                      &lt;li&gt;{@link Target}&lt;/li&gt;
                      &lt;li&gt;{@link Weight}&lt;/li&gt;
                      &lt;li&gt;{@link InitialGuess}&lt;/li&gt;
                      &lt;/ul&gt;                    
                </param>
            </javadoc>
            <method name="parseOptimizationData" type="void" line="340">
                <params>
                    <param name="optData" type="OptimizationData"/>
                </params>
                <comment line="342">
                    The existing values (as set by the previous call) are reused if
                     not provided in the argument list.                    
                </comment>
                <scope line="343">
                    <scope line="344"/>
                    <scope line="348"/>
                    <scope line="352"/>
                </scope>
            </method>
            <javadoc line="359">
                Check parameters consistency.                
                <throws>
                    DimensionMismatchException if {@link #target} and{@link #weightMatrix} have inconsistent dimensions.                    
                </throws>
            </javadoc>
            <method name="checkParameters" type="void" line="365">
                <scope line="366"/>
            </method>
        </class>
    </source>