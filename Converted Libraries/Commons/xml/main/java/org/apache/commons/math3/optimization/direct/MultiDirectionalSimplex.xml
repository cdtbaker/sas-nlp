<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optimization.direct">
        <import package="java.util.Comparator"/>
        <import package="org.apache.commons.math3.analysis.MultivariateFunction"/>
        <import package="org.apache.commons.math3.optimization.PointValuePair"/>
        <class name="MultiDirectionalSimplex" line="5">
            <extends class="AbstractSimplex"/>
            <javadoc line="5">
                This class implements the multi-directional direct search method.                
                <version>
                    $Id: MultiDirectionalSimplex.java 1422230 2012-12-15 12:11:13Z erans $                    
                </version>
                <deprecated>
                    As of 3.1 (to be removed in 4.0).                    
                </deprecated>
                <since>
                    3.0                    
                </since>
            </javadoc>
            <declaration name="DEFAULT_KHI" type="double" line="12"/>
            <javadoc line="12">
                Default value for {@link #khi}: {@value}.                
            </javadoc>
            <declaration name="DEFAULT_GAMMA" type="double" line="16"/>
            <javadoc line="16">
                Default value for {@link #gamma}: {@value}.                
            </javadoc>
            <declaration name="khi" type="double" line="20"/>
            <javadoc line="20">
                Expansion coefficient.                
            </javadoc>
            <declaration name="gamma" type="double" line="24"/>
            <javadoc line="24">
                Contraction coefficient.                
            </javadoc>
            <javadoc line="28">
                Build a multi-directional simplex with default coefficients.
                  The default values are 2.0 for khi and 0.5 for gamma.                
                <param>
                    n Dimension of the simplex.                    
                </param>
            </javadoc>
            <method name="MultiDirectionalSimplex" type="constructor" line="33">
                <params>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="36">
                Build a multi-directional simplex with default coefficients.
                  The default values are 2.0 for khi and 0.5 for gamma.                
                <param>
                    n Dimension of the simplex.                    
                </param>
                <param>
                    sideLength Length of the sides of the default (hypercube)
                      simplex. See {@link AbstractSimplex#AbstractSimplex(int,double)}.                    
                </param>
            </javadoc>
            <method name="MultiDirectionalSimplex" type="constructor" line="43">
                <params>
                    <param name="n" type="int"/>
                    <param name="sideLength" type="double"/>
                </params>
            </method>
            <javadoc line="46">
                Build a multi-directional simplex with specified coefficients.                
                <param>
                    n Dimension of the simplex. See{@link AbstractSimplex#AbstractSimplex(int,double)}.                    
                </param>
                <param>
                    khi Expansion coefficient.                    
                </param>
                <param>
                    gamma Contraction coefficient.                    
                </param>
            </javadoc>
            <method name="MultiDirectionalSimplex" type="constructor" line="52">
                <params>
                    <param name="n" type="int"/>
                    <param name="khi" type="double"/>
                    <param name="gamma" type="double"/>
                </params>
            </method>
            <javadoc line="55">
                Build a multi-directional simplex with specified coefficients.                
                <param>
                    n Dimension of the simplex. See{@link AbstractSimplex#AbstractSimplex(int,double)}.                    
                </param>
                <param>
                    sideLength Length of the sides of the default (hypercube)
                      simplex. See {@link AbstractSimplex#AbstractSimplex(int,double)}.                    
                </param>
                <param>
                    khi Expansion coefficient.                    
                </param>
                <param>
                    gamma Contraction coefficient.                    
                </param>
            </javadoc>
            <method name="MultiDirectionalSimplex" type="constructor" line="63">
                <params>
                    <param name="n" type="int"/>
                    <param name="sideLength" type="double"/>
                    <param name="khi" type="double"/>
                    <param name="gamma" type="double"/>
                </params>
            </method>
            <javadoc line="68">
                Build a multi-directional simplex with default coefficients.
                  The default values are 2.0 for khi and 0.5 for gamma.                
                <param>
                    steps Steps along the canonical axes representing box edges.
                      They may be negative but not zero. See                    
                </param>
            </javadoc>
            <method name="MultiDirectionalSimplex" type="constructor" line="74">
                <params>
                    <param name="steps" type="double[]"/>
                </params>
            </method>
            <javadoc line="77">
                Build a multi-directional simplex with specified coefficients.                
                <param>
                    steps Steps along the canonical axes representing box edges.
                      They may be negative but not zero. See{@link AbstractSimplex#AbstractSimplex(double[])}.                    
                </param>
                <param>
                    khi Expansion coefficient.                    
                </param>
                <param>
                    gamma Contraction coefficient.                    
                </param>
            </javadoc>
            <method name="MultiDirectionalSimplex" type="constructor" line="84">
                <params>
                    <param name="steps" type="double[]"/>
                    <param name="khi" type="double"/>
                    <param name="gamma" type="double"/>
                </params>
            </method>
            <javadoc line="89">
                Build a multi-directional simplex with default coefficients.
                  The default values are 2.0 for khi and 0.5 for gamma.                
                <param>
                    referenceSimplex Reference simplex. See{@link AbstractSimplex#AbstractSimplex(double[][])}.                    
                </param>
            </javadoc>
            <method name="MultiDirectionalSimplex" type="constructor" line="94">
                <params>
                    <param name="referenceSimplex" type="double[][]"/>
                </params>
            </method>
            <javadoc line="97">
                Build a multi-directional simplex with specified coefficients.                
                <param>
                    referenceSimplex Reference simplex. See{@link AbstractSimplex#AbstractSimplex(double[][])}.                    
                </param>
                <param>
                    khi Expansion coefficient.                    
                </param>
                <param>
                    gamma Contraction coefficient.                    
                </param>
                <throws>
                    org.apache.commons.math3.exception.NotStrictlyPositiveExceptionif the reference simplex does not contain at least one point.                    
                </throws>
                <throws>
                    org.apache.commons.math3.exception.DimensionMismatchExceptionif there is a dimension mismatch in the reference simplex.                    
                </throws>
            </javadoc>
            <method name="MultiDirectionalSimplex" type="constructor" line="105">
                <params>
                    <param name="referenceSimplex" type="double[][]"/>
                    <param name="khi" type="double"/>
                    <param name="gamma" type="double"/>
                </params>
            </method>
            <javadoc line="110">
                {@inheritDoc}                
            </javadoc>
            <method name="iterate" type="void" line="113">
                <params>
                    <param name="evaluationFunction" type="MultivariateFunction"/>
                    <param name="comparator" type="Comparator<PointValuePair>"/>
                </params>
                <declaration name="original" type="PointValuePair[]" line="114"/>
                <declaration name="best" type="PointValuePair" line="115"/>
                <declaration name="reflected" type="PointValuePair" line="116"/>
                <scope line="117">
                    <declaration name="reflectedSimplex" type="PointValuePair[]" line="118"/>
                    <declaration name="expanded" type="PointValuePair" line="119"/>
                    <scope line="120"/>
                </scope>
            </method>
            <javadoc line="127">
                Compute and evaluate a new simplex.                
                <param>
                    evaluationFunction Evaluation function.                    
                </param>
                <param>
                    original Original simplex (to be preserved).                    
                </param>
                <param>
                    coeff Linear coefficient.                    
                </param>
                <param>
                    comparator Comparator to use to sort simplex vertices from best
                      to poorest.                    
                </param>
                <return>
                    the best point in the transformed simplex.                    
                </return>
                <throws>
                    org.apache.commons.math3.exception.TooManyEvaluationsExceptionif the maximal number of evaluations is exceeded.                    
                </throws>
            </javadoc>
            <method name="evaluateNewSimplex" type="PointValuePair" line="137">
                <params>
                    <param name="evaluationFunction" type="MultivariateFunction"/>
                    <param name="original" type="PointValuePair[]"/>
                    <param name="coeff" type="double"/>
                    <param name="comparator" type="Comparator<PointValuePair>"/>
                </params>
                <declaration name="xSmallest" type="double[]" line="138"/>
                <declaration name="dim" type="int" line="140"/>
                <scope line="141">
                    <declaration name="xOriginal" type="double[]" line="142"/>
                    <declaration name="xTransformed" type="double[]" line="143"/>
                    <scope line="144"/>
                </scope>
            </method>
        </class>
    </source>