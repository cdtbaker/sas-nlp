<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.geometry.euclidean.threed">
        <import package="java.util.ArrayList"/>
        <import package="java.util.List"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.geometry.Point"/>
        <import package="org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D"/>
        <import package="org.apache.commons.math3.geometry.euclidean.oned.Interval"/>
        <import package="org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet"/>
        <import package="org.apache.commons.math3.geometry.euclidean.oned.Vector1D"/>
        <import package="org.apache.commons.math3.geometry.partitioning.Region.Location"/>
        <class name="SubLine" line="30">
            <javadoc line="30">
                This class represents a subset of a {@link Line}.                
                <version>
                    $Id: SubLine.java 1555176 2014-01-03 18:07:59Z luc $                    
                </version>
                <since>
                    3.0                    
                </since>
            </javadoc>
            <declaration name="DEFAULT_TOLERANCE" type="double" line="36"/>
            <javadoc line="36">
                Default value for tolerance.                
            </javadoc>
            <declaration name="line" type="Line" line="39"/>
            <javadoc line="39">
                Underlying line.                
            </javadoc>
            <declaration name="remainingRegion" type="IntervalsSet" line="42"/>
            <javadoc line="42">
                Remaining region of the hyperplane.                
            </javadoc>
            <javadoc line="45">
                Simple constructor.                
                <param>
                    line underlying line                    
                </param>
                <param>
                    remainingRegion remaining region of the line                    
                </param>
            </javadoc>
            <method name="SubLine" type="constructor" line="49">
                <params>
                    <param name="line" type="Line"/>
                    <param name="remainingRegion" type="IntervalsSet"/>
                </params>
            </method>
            <javadoc line="54">
                Create a sub-line from two endpoints.                
                <param>
                    start start point                    
                </param>
                <param>
                    end end point                    
                </param>
                <param>
                    tolerance tolerance below which points are considered identical                    
                </param>
                <exception>
                    MathIllegalArgumentException if the points are equal                    
                </exception>
                <since>
                    3.3                    
                </since>
            </javadoc>
            <method name="SubLine" type="constructor" line="62">
                <params>
                    <param name="start" type="Vector3D"/>
                    <param name="end" type="Vector3D"/>
                    <param name="tolerance" type="double"/>
                </params>
            </method>
            <javadoc line="66">
                Create a sub-line from two endpoints.                
                <param>
                    start start point                    
                </param>
                <param>
                    end end point                    
                </param>
                <exception>
                    MathIllegalArgumentException if the points are equal                    
                </exception>
                <deprecated>
                    as of 3.3, replaced with {@link #SubLine(Vector3D,Vector3D,double)}                    
                </deprecated>
            </javadoc>
            <method name="SubLine" type="constructor" line="73">
                <params>
                    <param name="start" type="Vector3D"/>
                    <param name="end" type="Vector3D"/>
                </params>
            </method>
            <javadoc line="77">
                Create a sub-line from a segment.                
                <param>
                    segment single segment forming the sub-line                    
                </param>
                <exception>
                    MathIllegalArgumentException if the segment endpoints are equal                    
                </exception>
            </javadoc>
            <method name="SubLine" type="constructor" line="81">
                <params>
                    <param name="segment" type="Segment"/>
                </params>
            </method>
            <javadoc line="86">
                Get the endpoints of the sub-line.
                  &lt;p&gt;
                  A subline may be any arbitrary number of disjoints segments, so the endpoints
                  are provided as a list of endpoint pairs. Each element of the list represents
                  one segment, and each segment contains a start point at index 0 and an end point
                  at index 1. If the sub-line is unbounded in the negative infinity direction,
                  the start point of the first segment will have infinite coordinates. If the
                  sub-line is unbounded in the positive infinity direction, the end point of the
                  last segment will have infinite coordinates. So a sub-line covering the whole
                  line will contain just one row and both elements of this row will have infinite
                  coordinates. If the sub-line is empty, the returned list will contain 0 segments.
                  &lt;/p&gt;                
                <return>
                    list of segments endpoints                    
                </return>
            </javadoc>
            <method name="getSegments" type="List&lt;Segment&gt;" line="100">
                <declaration name="list" type="List&amp;lt;Interval&amp;gt;" line="102"/>
                <declaration name="segments" type="List&amp;lt;Segment&amp;gt;" line="103"/>
                <scope line="105">
                    <declaration name="start" type="Vector3D" line="106"/>
                    <declaration name="end" type="Vector3D" line="107"/>
                </scope>
            </method>
            <javadoc line="115">
                Get the intersection of the instance and another sub-line.
                  &lt;p&gt;
                  This method is related to the {@link Line#intersection(Line)intersection} method in the {@link Line Line} class, but in addition
                  to compute the point along infinite lines, it also checks the point
                  lies on both sub-line ranges.
                  &lt;/p&gt;                
                <param>
                    subLine other sub-line which may intersect instance                    
                </param>
                <param>
                    includeEndPoints if true, endpoints are considered to belong to
                      instance (i.e. they are closed sets) and may be returned, otherwise endpoints
                      are considered to not belong to instance (i.e. they are open sets) and intersection
                      occurring on endpoints lead to null being returned                    
                </param>
                <return>
                    the intersection point if there is one, null if the sub-lines don&apos;t intersect                    
                </return>
            </javadoc>
            <method name="intersection" type="Vector3D" line="129">
                <params>
                    <param name="subLine" type="SubLine"/>
                    <param name="includeEndPoints" type="boolean"/>
                </params>
                <comment line="132">
                    compute the intersection on infinite line                    
                </comment>
                <comment line="138">
                    check location of point with respect to first sub-line                    
                </comment>
                <comment line="141">
                    check location of point with respect to second sub-line                    
                </comment>
                <declaration name="v1D" type="Vector3D" line="132"/>
                <scope line="133"/>
                <declaration name="loc1" type="Location" line="138"/>
                <declaration name="loc2" type="Location" line="141"/>
                <scope line="143"/>
                <scope line="145"/>
            </method>
            <javadoc line="151">
                Build an interval set from two points.                
                <param>
                    start start point                    
                </param>
                <param>
                    end end point                    
                </param>
                <return>
                    an interval set                    
                </return>
                <param>
                    tolerance tolerance below which points are considered identical                    
                </param>
                <exception>
                    MathIllegalArgumentException if the points are equal                    
                </exception>
            </javadoc>
            <method name="buildIntervalSet" type="IntervalsSet" line="159">
                <params>
                    <param name="start" type="Vector3D"/>
                    <param name="end" type="Vector3D"/>
                    <param name="tolerance" type="double"/>
                </params>
                <declaration name="line" type="Line" line="160"/>
            </method>
        </class>
    </source>