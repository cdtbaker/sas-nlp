<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.analysis">
        <import package="org.apache.commons.math3.analysis.differentiation.DerivativeStructure"/>
        <import package="org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableFunction"/>
        <import package="org.apache.commons.math3.analysis.differentiation.MultivariateDifferentiableVectorFunction"/>
        <import package="org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction"/>
        <import package="org.apache.commons.math3.analysis.function.Identity"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <class name="FunctionUtils" line="30">
            <javadoc line="30">
                Utilities for manipulating function objects.                
                <version>
                    $Id: FunctionUtils.java 1499808 2013-07-04 17:00:42Z sebb $                    
                </version>
                <since>
                    3.0                    
                </since>
            </javadoc>
            <javadoc line="37">
                Class only contains static methods.                
            </javadoc>
            <method name="FunctionUtils" type="constructor" line="40"/>
            <javadoc line="42">
                Composes functions.
                  &lt;br/&gt;
                  The functions in the argument list are composed sequentially, in the
                  given order.  For example, compose(f1,f2,f3) acts like f1(f2(f3(x))).                
                <param>
                    f List of functions.                    
                </param>
                <return>
                    the composite function.                    
                </return>
            </javadoc>
            <method name="compose" type="UnivariateFunction" line="51">
                <params>
                    <param name="f" type="UnivariateFunction"/>
                </params>
                <anonymous_class line="52">
                    <javadoc line="53">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="value" type="double" line="54">
                        <params>
                            <param name="x" type="double"/>
                        </params>
                        <declaration name="r" type="double" line="55"/>
                        <scope line="56"/>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="64">
                Composes functions.
                  &lt;br/&gt;
                  The functions in the argument list are composed sequentially, in the
                  given order.  For example, compose(f1,f2,f3) acts like f1(f2(f3(x))).                
                <param>
                    f List of functions.                    
                </param>
                <return>
                    the composite function.                    
                </return>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="compose" type="UnivariateDifferentiableFunction" line="74">
                <params>
                    <param name="f" type="UnivariateDifferentiableFunction"/>
                </params>
                <anonymous_class line="75">
                    <javadoc line="77">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="value" type="double" line="78">
                        <params>
                            <param name="t" type="double"/>
                        </params>
                        <declaration name="r" type="double" line="79"/>
                        <scope line="80"/>
                    </method>
                    <javadoc line="86">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="value" type="DerivativeStructure" line="87">
                        <params>
                            <param name="t" type="DerivativeStructure"/>
                        </params>
                        <declaration name="r" type="DerivativeStructure" line="88"/>
                        <scope line="89"/>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="98">
                Composes functions.
                  &lt;br/&gt;
                  The functions in the argument list are composed sequentially, in the
                  given order.  For example, compose(f1,f2,f3) acts like f1(f2(f3(x))).                
                <param>
                    f List of functions.                    
                </param>
                <return>
                    the composite function.                    
                </return>
                <deprecated>
                    as of 3.1 replaced by {@link #compose(UnivariateDifferentiableFunction)}                    
                </deprecated>
            </javadoc>
            <method name="compose" type="DifferentiableUnivariateFunction" line="109">
                <params>
                    <param name="f" type="DifferentiableUnivariateFunction"/>
                </params>
                <anonymous_class line="110">
                    <javadoc line="111">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="value" type="double" line="112">
                        <params>
                            <param name="x" type="double"/>
                        </params>
                        <declaration name="r" type="double" line="113"/>
                        <scope line="114"/>
                    </method>
                    <javadoc line="120">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="derivative" type="UnivariateFunction" line="121">
                        <anonymous_class line="122">
                            <javadoc line="123">
                                {@inheritDoc}                                
                            </javadoc>
                            <method name="value" type="double" line="124">
                                <params>
                                    <param name="x" type="double"/>
                                </params>
                                <declaration name="p" type="double" line="125"/>
                                <declaration name="r" type="double" line="126"/>
                                <scope line="127"/>
                            </method>
                        </anonymous_class>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="138">
                Adds functions.                
                <param>
                    f List of functions.                    
                </param>
                <return>
                    a function that computes the sum of the functions.                    
                </return>
            </javadoc>
            <method name="add" type="UnivariateFunction" line="144">
                <params>
                    <param name="f" type="UnivariateFunction"/>
                </params>
                <anonymous_class line="145">
                    <javadoc line="146">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="value" type="double" line="147">
                        <params>
                            <param name="x" type="double"/>
                        </params>
                        <declaration name="r" type="double" line="148"/>
                        <scope line="149"/>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="157">
                Adds functions.                
                <param>
                    f List of functions.                    
                </param>
                <return>
                    a function that computes the sum of the functions.                    
                </return>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="add" type="UnivariateDifferentiableFunction" line="164">
                <params>
                    <param name="f" type="UnivariateDifferentiableFunction"/>
                </params>
                <anonymous_class line="165">
                    <javadoc line="167">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="value" type="double" line="168">
                        <params>
                            <param name="t" type="double"/>
                        </params>
                        <declaration name="r" type="double" line="169"/>
                        <scope line="170"/>
                    </method>
                    <javadoc line="176">
                        {@inheritDoc}                        
                        <throws>
                            DimensionMismatchException if functions are not consistent with each other                            
                        </throws>
                    </javadoc>
                    <method name="value" type="DerivativeStructure" line="180">
                        <params>
                            <param name="t" type="DerivativeStructure"/>
                        </params>
                        <declaration name="r" type="DerivativeStructure" line="181"/>
                        <scope line="182"/>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="191">
                Adds functions.                
                <param>
                    f List of functions.                    
                </param>
                <return>
                    a function that computes the sum of the functions.                    
                </return>
                <deprecated>
                    as of 3.1 replaced by {@link #add(UnivariateDifferentiableFunction)}                    
                </deprecated>
            </javadoc>
            <method name="add" type="DifferentiableUnivariateFunction" line="199">
                <params>
                    <param name="f" type="DifferentiableUnivariateFunction"/>
                </params>
                <anonymous_class line="200">
                    <javadoc line="201">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="value" type="double" line="202">
                        <params>
                            <param name="x" type="double"/>
                        </params>
                        <declaration name="r" type="double" line="203"/>
                        <scope line="204"/>
                    </method>
                    <javadoc line="210">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="derivative" type="UnivariateFunction" line="211">
                        <anonymous_class line="212">
                            <javadoc line="213">
                                {@inheritDoc}                                
                            </javadoc>
                            <method name="value" type="double" line="214">
                                <params>
                                    <param name="x" type="double"/>
                                </params>
                                <declaration name="r" type="double" line="215"/>
                                <scope line="216"/>
                            </method>
                        </anonymous_class>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="226">
                Multiplies functions.                
                <param>
                    f List of functions.                    
                </param>
                <return>
                    a function that computes the product of the functions.                    
                </return>
            </javadoc>
            <method name="multiply" type="UnivariateFunction" line="232">
                <params>
                    <param name="f" type="UnivariateFunction"/>
                </params>
                <anonymous_class line="233">
                    <javadoc line="234">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="value" type="double" line="235">
                        <params>
                            <param name="x" type="double"/>
                        </params>
                        <declaration name="r" type="double" line="236"/>
                        <scope line="237"/>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="245">
                Multiplies functions.                
                <param>
                    f List of functions.                    
                </param>
                <return>
                    a function that computes the product of the functions.                    
                </return>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="multiply" type="UnivariateDifferentiableFunction" line="252">
                <params>
                    <param name="f" type="UnivariateDifferentiableFunction"/>
                </params>
                <anonymous_class line="253">
                    <javadoc line="255">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="value" type="double" line="256">
                        <params>
                            <param name="t" type="double"/>
                        </params>
                        <declaration name="r" type="double" line="257"/>
                        <scope line="258"/>
                    </method>
                    <javadoc line="264">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="value" type="DerivativeStructure" line="265">
                        <params>
                            <param name="t" type="DerivativeStructure"/>
                        </params>
                        <declaration name="r" type="DerivativeStructure" line="266"/>
                        <scope line="267"/>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="276">
                Multiplies functions.                
                <param>
                    f List of functions.                    
                </param>
                <return>
                    a function that computes the product of the functions.                    
                </return>
                <deprecated>
                    as of 3.1 replaced by {@link #multiply(UnivariateDifferentiableFunction)}                    
                </deprecated>
            </javadoc>
            <method name="multiply" type="DifferentiableUnivariateFunction" line="284">
                <params>
                    <param name="f" type="DifferentiableUnivariateFunction"/>
                </params>
                <anonymous_class line="285">
                    <javadoc line="286">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="value" type="double" line="287">
                        <params>
                            <param name="x" type="double"/>
                        </params>
                        <declaration name="r" type="double" line="288"/>
                        <scope line="289"/>
                    </method>
                    <javadoc line="295">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="derivative" type="UnivariateFunction" line="296">
                        <anonymous_class line="297">
                            <javadoc line="298">
                                {@inheritDoc}                                
                            </javadoc>
                            <method name="value" type="double" line="299">
                                <params>
                                    <param name="x" type="double"/>
                                </params>
                                <declaration name="sum" type="double" line="300"/>
                                <scope line="301">
                                    <declaration name="prod" type="double" line="302"/>
                                    <scope line="303">
                                        <scope line="304"/>
                                    </scope>
                                </scope>
                            </method>
                        </anonymous_class>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="317">
                Returns the univariate function &lt;br/&gt;{@code h(x) = combiner(f(x), g(x))}.                
                <param>
                    combiner Combiner function.                    
                </param>
                <param>
                    f Function.                    
                </param>
                <param>
                    g Function.                    
                </param>
                <return>
                    the composite function.                    
                </return>
            </javadoc>
            <method name="combine" type="UnivariateFunction" line="328">
                <params>
                    <param name="combiner" type="BivariateFunction"/>
                    <param name="f" type="UnivariateFunction"/>
                    <param name="g" type="UnivariateFunction"/>
                </params>
                <anonymous_class line="329">
                    <javadoc line="330">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="value" type="double" line="331">
                        <params>
                            <param name="x" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="337">
                Returns a MultivariateFunction h(x[]) defined by &lt;pre&gt; &lt;code&gt;
                  h(x[]) = combiner(...combiner(combiner(initialValue,f(x[0])),f(x[1]))...),f(x[x.length-1]))
                  &lt;/code&gt;&lt;/pre&gt;                
                <param>
                    combiner Combiner function.                    
                </param>
                <param>
                    f Function.                    
                </param>
                <param>
                    initialValue Initial value.                    
                </param>
                <return>
                    a collector function.                    
                </return>
            </javadoc>
            <method name="collector" type="MultivariateFunction" line="349">
                <params>
                    <param name="combiner" type="BivariateFunction"/>
                    <param name="f" type="UnivariateFunction"/>
                    <param name="initialValue" type="double"/>
                </params>
                <anonymous_class line="350">
                    <javadoc line="351">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="value" type="double" line="352">
                        <params>
                            <param name="point" type="double[]"/>
                        </params>
                        <declaration name="result" type="double" line="353"/>
                        <scope line="354"/>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="362">
                Returns a MultivariateFunction h(x[]) defined by &lt;pre&gt; &lt;code&gt;
                  h(x[]) = combiner(...combiner(combiner(initialValue,x[0]),x[1])...),x[x.length-1])
                  &lt;/code&gt;&lt;/pre&gt;                
                <param>
                    combiner Combiner function.                    
                </param>
                <param>
                    initialValue Initial value.                    
                </param>
                <return>
                    a collector function.                    
                </return>
            </javadoc>
            <method name="collector" type="MultivariateFunction" line="372">
                <params>
                    <param name="combiner" type="BivariateFunction"/>
                    <param name="initialValue" type="double"/>
                </params>
            </method>
            <javadoc line="376">
                Creates a unary function by fixing the first argument of a binary function.                
                <param>
                    f Binary function.                    
                </param>
                <param>
                    fixed Value to which the first argument of {@code f} is set.                    
                </param>
                <return>
                    the unary function h(x) = f(fixed, x)                    
                </return>
            </javadoc>
            <method name="fix1stArgument" type="UnivariateFunction" line="384">
                <params>
                    <param name="f" type="BivariateFunction"/>
                    <param name="fixed" type="double"/>
                </params>
                <anonymous_class line="385">
                    <javadoc line="386">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="value" type="double" line="387">
                        <params>
                            <param name="x" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="392">
                Creates a unary function by fixing the second argument of a binary function.                
                <param>
                    f Binary function.                    
                </param>
                <param>
                    fixed Value to which the second argument of {@code f} is set.                    
                </param>
                <return>
                    the unary function h(x) = f(x, fixed)                    
                </return>
            </javadoc>
            <method name="fix2ndArgument" type="UnivariateFunction" line="400">
                <params>
                    <param name="f" type="BivariateFunction"/>
                    <param name="fixed" type="double"/>
                </params>
                <anonymous_class line="401">
                    <javadoc line="402">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="value" type="double" line="403">
                        <params>
                            <param name="x" type="double"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="409">
                Samples the specified univariate real function on the specified interval.
                  &lt;br/&gt;
                  The interval is divided equally into {@code n} sections and sample points
                  are taken from {@code min} to {@code max - (max - min) / n}; therefore{@code f} is not sampled at the upper bound {@code max}.                
                <param>
                    f Function to be sampled                    
                </param>
                <param>
                    min Lower bound of the interval (included).                    
                </param>
                <param>
                    max Upper bound of the interval (excluded).                    
                </param>
                <param>
                    n Number of sample points.                    
                </param>
                <return>
                    the array of samples.                    
                </return>
                <throws>
                    NumberIsTooLargeException if the lower bound {@code min} is
                      greater than, or equal to the upper bound {@code max}.                    
                </throws>
                <throws>
                    NotStrictlyPositiveException if the number of sample points{@code n} is negative.                    
                </throws>
            </javadoc>
            <method name="sample" type="double[]" line="427">
                <params>
                    <param name="f" type="UnivariateFunction"/>
                    <param name="min" type="double"/>
                    <param name="max" type="double"/>
                    <param name="n" type="int"/>
                </params>
                <scope line="429"/>
                <scope line="434"/>
                <declaration name="s" type="double[]" line="438"/>
                <declaration name="h" type="double" line="439"/>
                <scope line="440"/>
            </method>
            <javadoc line="446">
                Convert a {@link UnivariateDifferentiableFunction} into a {@link DifferentiableUnivariateFunction}.                
                <param>
                    f function to convert                    
                </param>
                <return>
                    converted function                    
                </return>
                <deprecated>
                    this conversion method is temporary in version 3.1, as the {@link DifferentiableUnivariateFunction} interface itself is deprecated                    
                </deprecated>
            </javadoc>
            <method name="toDifferentiableUnivariateFunction" type="DifferentiableUnivariateFunction" line="453">
                <params>
                    <param name="f" type="UnivariateDifferentiableFunction"/>
                </params>
                <anonymous_class line="454">
                    <javadoc line="456">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="value" type="double" line="457">
                        <params>
                            <param name="x" type="double"/>
                        </params>
                    </method>
                    <javadoc line="461">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="derivative" type="UnivariateFunction" line="462">
                        <anonymous_class line="463">
                            <javadoc line="464">
                                {@inheritDoc}                                
                            </javadoc>
                            <method name="value" type="double" line="465">
                                <params>
                                    <param name="x" type="double"/>
                                </params>
                            </method>
                        </anonymous_class>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="474">
                Convert a {@link DifferentiableUnivariateFunction} into a {@link UnivariateDifferentiableFunction}.
                  &lt;p&gt;
                  Note that the converted function is able to handle {@link DerivativeStructure} up to order one.
                  If the function is called with higher order, a {@link NumberIsTooLargeException} will be thrown.
                  &lt;/p&gt;                
                <param>
                    f function to convert                    
                </param>
                <return>
                    converted function                    
                </return>
                <deprecated>
                    this conversion method is temporary in version 3.1, as the {@link DifferentiableUnivariateFunction} interface itself is deprecated                    
                </deprecated>
            </javadoc>
            <method name="toUnivariateDifferential" type="UnivariateDifferentiableFunction" line="485">
                <params>
                    <param name="f" type="DifferentiableUnivariateFunction"/>
                </params>
                <anonymous_class line="486">
                    <javadoc line="488">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="value" type="double" line="489">
                        <params>
                            <param name="x" type="double"/>
                        </params>
                    </method>
                    <javadoc line="493">
                        {@inheritDoc}                        
                        <exception>
                            NumberIsTooLargeException if derivation order is greater than 1                            
                        </exception>
                    </javadoc>
                    <method name="value" type="DerivativeStructure" line="497">
                        <params>
                            <param name="t" type="DerivativeStructure"/>
                        </params>
                        <scope line="501">
                            <declaration name="parameters" type="int" line="502"/>
                            <declaration name="derivatives" type="double[]" line="503"/>
                            <declaration name="fPrime" type="double" line="505"/>
                            <declaration name="orders" type="int[]" line="506"/>
                            <scope line="507"/>
                        </scope>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="522">
                Convert a {@link MultivariateDifferentiableFunction} into a {@link DifferentiableMultivariateFunction}.                
                <param>
                    f function to convert                    
                </param>
                <return>
                    converted function                    
                </return>
                <deprecated>
                    this conversion method is temporary in version 3.1, as the {@link DifferentiableMultivariateFunction} interface itself is deprecated                    
                </deprecated>
            </javadoc>
            <method name="toDifferentiableMultivariateFunction" type="DifferentiableMultivariateFunction" line="529">
                <params>
                    <param name="f" type="MultivariateDifferentiableFunction"/>
                </params>
                <comment line="546">
                    delegate computation to underlying function                    
                </comment>
                <comment line="557">
                    extract partial derivative                    
                </comment>
                <comment line="571">
                    delegate computation to underlying function                    
                </comment>
                <comment line="578">
                    extract gradient                    
                </comment>
                <anonymous_class line="530">
                    <javadoc line="532">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="value" type="double" line="533">
                        <params>
                            <param name="x" type="double[]"/>
                        </params>
                    </method>
                    <javadoc line="537">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="partialDerivative" type="MultivariateFunction" line="538">
                        <params>
                            <param name="k" type="int"/>
                        </params>
                        <comment line="546">
                            delegate computation to underlying function                            
                        </comment>
                        <comment line="557">
                            extract partial derivative                            
                        </comment>
                        <anonymous_class line="539">
                            <javadoc line="540">
                                {@inheritDoc}                                
                            </javadoc>
                            <method name="value" type="double" line="541">
                                <params>
                                    <param name="x" type="double[]"/>
                                </params>
                                <comment line="546">
                                    delegate computation to underlying function                                    
                                </comment>
                                <comment line="557">
                                    extract partial derivative                                    
                                </comment>
                                <declaration name="n" type="int" line="543"/>
                                <declaration name="dsX" type="DerivativeStructure[]" line="546"/>
                                <scope line="547">
                                    <scope line="548"/>
                                    <scope line="550"/>
                                </scope>
                                <declaration name="y" type="DerivativeStructure" line="554"/>
                            </method>
                        </anonymous_class>
                    </method>
                    <method name="gradient" type="MultivariateVectorFunction" line="563">
                        <comment line="571">
                            delegate computation to underlying function                            
                        </comment>
                        <comment line="578">
                            extract gradient                            
                        </comment>
                        <anonymous_class line="564">
                            <javadoc line="565">
                                {@inheritDoc}                                
                            </javadoc>
                            <method name="value" type="double[]" line="566">
                                <params>
                                    <param name="x" type="double[]"/>
                                </params>
                                <comment line="571">
                                    delegate computation to underlying function                                    
                                </comment>
                                <comment line="578">
                                    extract gradient                                    
                                </comment>
                                <declaration name="n" type="int" line="568"/>
                                <declaration name="dsX" type="DerivativeStructure[]" line="571"/>
                                <scope line="572"/>
                                <declaration name="y" type="DerivativeStructure" line="575"/>
                                <declaration name="gradient" type="double[]" line="578"/>
                                <declaration name="orders" type="int[]" line="579"/>
                                <scope line="580"/>
                            </method>
                        </anonymous_class>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="595">
                Convert a {@link DifferentiableMultivariateFunction} into a {@link MultivariateDifferentiableFunction}.
                  &lt;p&gt;
                  Note that the converted function is able to handle {@link DerivativeStructure} elements
                  that all have the same number of free parameters and order, and with order at most 1.
                  If the function is called with inconsistent numbers of free parameters or higher order, a{@link DimensionMismatchException} or a {@link NumberIsTooLargeException} will be thrown.
                  &lt;/p&gt;                
                <param>
                    f function to convert                    
                </param>
                <return>
                    converted function                    
                </return>
                <deprecated>
                    this conversion method is temporary in version 3.1, as the {@link DifferentiableMultivariateFunction} interface itself is deprecated                    
                </deprecated>
            </javadoc>
            <method name="toMultivariateDifferentiableFunction" type="MultivariateDifferentiableFunction" line="608">
                <params>
                    <param name="f" type="DifferentiableMultivariateFunction"/>
                </params>
                <comment line="624">
                    check parameters and orders limits                    
                </comment>
                <comment line="632">
                    check all elements in the array are consistent                    
                </comment>
                <comment line="643">
                    delegate computation to underlying function                    
                </comment>
                <comment line="651">
                    merge value and gradient into one DerivativeStructure                    
                </comment>
                <anonymous_class line="609">
                    <javadoc line="611">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="value" type="double" line="612">
                        <params>
                            <param name="x" type="double[]"/>
                        </params>
                    </method>
                    <javadoc line="616">
                        {@inheritDoc}                        
                        <exception>
                            NumberIsTooLargeException if derivation order is higher than 1                            
                        </exception>
                        <exception>
                            DimensionMismatchException if numbers of free parameters are inconsistent                            
                        </exception>
                    </javadoc>
                    <method name="value" type="DerivativeStructure" line="621">
                        <params>
                            <param name="t" type="DerivativeStructure[]"/>
                        </params>
                        <comment line="624">
                            check parameters and orders limits                            
                        </comment>
                        <comment line="632">
                            check all elements in the array are consistent                            
                        </comment>
                        <comment line="643">
                            delegate computation to underlying function                            
                        </comment>
                        <comment line="651">
                            merge value and gradient into one DerivativeStructure                            
                        </comment>
                        <declaration name="parameters" type="int" line="624"/>
                        <declaration name="order" type="int" line="625"/>
                        <declaration name="n" type="int" line="626"/>
                        <scope line="627"/>
                        <scope line="632">
                            <scope line="633"/>
                            <scope line="637"/>
                        </scope>
                        <declaration name="point" type="double[]" line="643"/>
                        <scope line="644"/>
                        <declaration name="value" type="double" line="647"/>
                        <declaration name="gradient" type="double[]" line="648"/>
                        <declaration name="derivatives" type="double[]" line="651"/>
                        <declaration name="orders" type="int[]" line="653"/>
                        <scope line="654">
                            <scope line="656"/>
                        </scope>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="669">
                Convert a {@link MultivariateDifferentiableVectorFunction} into a {@link DifferentiableMultivariateVectorFunction}.                
                <param>
                    f function to convert                    
                </param>
                <return>
                    converted function                    
                </return>
                <deprecated>
                    this conversion method is temporary in version 3.1, as the {@link DifferentiableMultivariateVectorFunction} interface itself is deprecated                    
                </deprecated>
            </javadoc>
            <method name="toDifferentiableMultivariateVectorFunction" type="DifferentiableMultivariateVectorFunction" line="676">
                <params>
                    <param name="f" type="MultivariateDifferentiableVectorFunction"/>
                </params>
                <comment line="692">
                    delegate computation to underlying function                    
                </comment>
                <comment line="699">
                    extract Jacobian                    
                </comment>
                <anonymous_class line="677">
                    <javadoc line="679">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="value" type="double[]" line="680">
                        <params>
                            <param name="x" type="double[]"/>
                        </params>
                    </method>
                    <method name="jacobian" type="MultivariateMatrixFunction" line="684">
                        <comment line="692">
                            delegate computation to underlying function                            
                        </comment>
                        <comment line="699">
                            extract Jacobian                            
                        </comment>
                        <anonymous_class line="685">
                            <javadoc line="686">
                                {@inheritDoc}                                
                            </javadoc>
                            <method name="value" type="double[][]" line="687">
                                <params>
                                    <param name="x" type="double[]"/>
                                </params>
                                <comment line="692">
                                    delegate computation to underlying function                                    
                                </comment>
                                <comment line="699">
                                    extract Jacobian                                    
                                </comment>
                                <declaration name="n" type="int" line="689"/>
                                <declaration name="dsX" type="DerivativeStructure[]" line="692"/>
                                <scope line="693"/>
                                <declaration name="y" type="DerivativeStructure[]" line="696"/>
                                <declaration name="jacobian" type="double[][]" line="699"/>
                                <declaration name="orders" type="int[]" line="700"/>
                                <scope line="701">
                                    <scope line="702"/>
                                </scope>
                            </method>
                        </anonymous_class>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="718">
                Convert a {@link DifferentiableMultivariateVectorFunction} into a {@link MultivariateDifferentiableVectorFunction}.
                  &lt;p&gt;
                  Note that the converted function is able to handle {@link DerivativeStructure} elements
                  that all have the same number of free parameters and order, and with order at most 1.
                  If the function is called with inconsistent numbers of free parameters or higher order, a{@link DimensionMismatchException} or a {@link NumberIsTooLargeException} will be thrown.
                  &lt;/p&gt;                
                <param>
                    f function to convert                    
                </param>
                <return>
                    converted function                    
                </return>
                <deprecated>
                    this conversion method is temporary in version 3.1, as the {@link DifferentiableMultivariateFunction} interface itself is deprecated                    
                </deprecated>
            </javadoc>
            <method name="toMultivariateDifferentiableVectorFunction" type="MultivariateDifferentiableVectorFunction" line="731">
                <params>
                    <param name="f" type="DifferentiableMultivariateVectorFunction"/>
                </params>
                <comment line="747">
                    check parameters and orders limits                    
                </comment>
                <comment line="755">
                    check all elements in the array are consistent                    
                </comment>
                <comment line="766">
                    delegate computation to underlying function                    
                </comment>
                <comment line="774">
                    merge value and Jacobian into a DerivativeStructure array                    
                </comment>
                <anonymous_class line="732">
                    <javadoc line="734">
                        {@inheritDoc}                        
                    </javadoc>
                    <method name="value" type="double[]" line="735">
                        <params>
                            <param name="x" type="double[]"/>
                        </params>
                    </method>
                    <javadoc line="739">
                        {@inheritDoc}                        
                        <exception>
                            NumberIsTooLargeException if derivation order is higher than 1                            
                        </exception>
                        <exception>
                            DimensionMismatchException if numbers of free parameters are inconsistent                            
                        </exception>
                    </javadoc>
                    <method name="value" type="DerivativeStructure[]" line="744">
                        <params>
                            <param name="t" type="DerivativeStructure[]"/>
                        </params>
                        <comment line="747">
                            check parameters and orders limits                            
                        </comment>
                        <comment line="755">
                            check all elements in the array are consistent                            
                        </comment>
                        <comment line="766">
                            delegate computation to underlying function                            
                        </comment>
                        <comment line="774">
                            merge value and Jacobian into a DerivativeStructure array                            
                        </comment>
                        <declaration name="parameters" type="int" line="747"/>
                        <declaration name="order" type="int" line="748"/>
                        <declaration name="n" type="int" line="749"/>
                        <scope line="750"/>
                        <scope line="755">
                            <scope line="756"/>
                            <scope line="760"/>
                        </scope>
                        <declaration name="point" type="double[]" line="766"/>
                        <scope line="767"/>
                        <declaration name="value" type="double[]" line="770"/>
                        <declaration name="jacobian" type="double[][]" line="771"/>
                        <declaration name="merged" type="DerivativeStructure[]" line="774"/>
                        <scope line="775">
                            <declaration name="derivatives" type="double[]" line="776"/>
                            <declaration name="orders" type="int[]" line="778"/>
                            <scope line="779">
                                <scope line="781"/>
                            </scope>
                        </scope>
                    </method>
                </anonymous_class>
            </method>
        </class>
    </source>