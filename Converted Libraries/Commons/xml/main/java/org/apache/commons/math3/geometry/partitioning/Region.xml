<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.geometry.partitioning">
        <import package="org.apache.commons.math3.geometry.Space"/>
        <import package="org.apache.commons.math3.geometry.Vector"/>
        <interface name="Region">
            <type_params>
                <type_param name="S"/>
            </type_params>
            <javadoc line="22">
                This interface represents a region of a space as a partition.
                  &lt;p&gt;Region are subsets of a space, they can be infinite (whole
                  space, half space, infinite stripe ...) or finite (polygons in 2D,
                  polyhedrons in 3D ...). Their main characteristic is to separate
                  points that are considered to be &lt;em&gt;inside&lt;/em&gt; the region from
                  points considered to be &lt;em&gt;outside&lt;/em&gt; of it. In between, there
                  may be points on the &lt;em&gt;boundary&lt;/em&gt; of the region.&lt;/p&gt;
                  &lt;p&gt;This implementation is limited to regions for which the boundary
                  is composed of several {@link SubHyperplane sub-hyperplanes},
                  including regions with no boundary at all: the whole space and the
                  empty region. They are not necessarily finite and not necessarily
                  path-connected. They can contain holes.&lt;/p&gt;
                  &lt;p&gt;Regions can be combined using the traditional sets operations :
                  union, intersection, difference and symetric difference (exclusive
                  or) for the binary operations, complement for the unary
                  operation.&lt;/p&gt;                
                <param>
                    <S>
                       Type of the space.                    
                </param>
                <version>
                    $Id: Region.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
                <since>
                    3.0                    
                </since>
            </javadoc>
            <javadoc line="49">
                Enumerate for the location of a point with respect to the region.                
            </javadoc>
            <javadoc line="51">
                Code for points inside the partition.                
            </javadoc>
            <javadoc line="54">
                Code for points outside of the partition.                
            </javadoc>
            <javadoc line="57">
                Code for points on the partition boundary.                
            </javadoc>
            <method name="buildNew" type="Region<S>" line="61"/>
            <javadoc line="61">
                Build a region using the instance as a prototype.
                  &lt;p&gt;This method allow to create new instances without knowing
                  exactly the type of the region. It is an application of the
                  prototype design pattern.&lt;/p&gt;
                  &lt;p&gt;The leaf nodes of the BSP tree &lt;em&gt;must&lt;/em&gt; have a{@code Boolean} attribute representing the inside status of
                  the corresponding cell (true for inside cells, false for outside
                  cells). In order to avoid building too many small objects, it is
                  recommended to use the predefined constants{@code Boolean.TRUE} and {@code Boolean.FALSE}. The
                  tree also &lt;em&gt;must&lt;/em&gt; have either null internal nodes or
                  internal nodes representing the boundary as specified in the{@link #getTree getTree} method).&lt;/p&gt;                
                <param>
                    newTree inside/outside BSP tree representing the new region                    
                </param>
                <return>
                    the built region                    
                </return>
            </javadoc>
            <method name="copySelf" type="Region<S>" line="79"/>
            <javadoc line="79">
                Copy the instance.
                  &lt;p&gt;The instance created is completely independant of the original
                  one. A deep copy is used, none of the underlying objects are
                  shared (except for the underlying tree {@code Boolean}attributes and immutable objects).&lt;/p&gt;                
                <return>
                    a new region, copy of the instance                    
                </return>
            </javadoc>
            <method name="isEmpty" type="boolean" line="88"/>
            <javadoc line="88">
                Check if the instance is empty.                
                <return>
                    true if the instance is empty                    
                </return>
            </javadoc>
            <method name="isEmpty" type="boolean" line="93"/>
            <javadoc line="93">
                Check if the sub-tree starting at a given node is empty.                
                <param>
                    node root node of the sub-tree (<em>must</em> have {@link Region Region} tree semantics, i.e. the leaf nodes must have{@code Boolean} attributes representing an inside/outside
                      property)                    
                </param>
                <return>
                    true if the sub-tree starting at the given node is empty                    
                </return>
            </javadoc>
            <method name="contains" type="boolean" line="102"/>
            <javadoc line="102">
                Check if the instance entirely contains another region.                
                <param>
                    region region to check against the instance                    
                </param>
                <return>
                    true if the instance contains the specified tree                    
                </return>
            </javadoc>
            <method name="checkPoint" type="Location" line="108"/>
            <javadoc line="108">
                Check a point with respect to the region.                
                <param>
                    point point to check                    
                </param>
                <return>
                    a code representing the point status: either {@link Location#INSIDE}, {@link Location#OUTSIDE} or {@link Location#BOUNDARY}                    
                </return>
            </javadoc>
            <method name="getTree" type="BSPTree<S>" line="115"/>
            <javadoc line="115">
                Get the underlying BSP tree.
                  &lt;p&gt;Regions are represented by an underlying inside/outside BSP
                  tree whose leaf attributes are {@code Boolean} instances
                  representing inside leaf cells if the attribute value is{@code true} and outside leaf cells if the attribute is{@code false}. These leaf attributes are always present and
                  guaranteed to be non null.&lt;/p&gt;
                  &lt;p&gt;In addition to the leaf attributes, the internal nodes which
                  correspond to cells split by cut sub-hyperplanes may contain{@link BoundaryAttribute BoundaryAttribute} objects representing
                  the parts of the corresponding cut sub-hyperplane that belong to
                  the boundary. When the boundary attributes have been computed,
                  all internal nodes are guaranteed to have non-null
                  attributes, however some {@link BoundaryAttributeBoundaryAttribute} instances may have their {@link BoundaryAttribute#plusInside plusInside} and {@link BoundaryAttribute#plusOutside plusOutside} fields both null if
                  the corresponding cut sub-hyperplane does not have any parts
                  belonging to the boundary.&lt;/p&gt;
                  &lt;p&gt;Since computing the boundary is not always required and can be
                  time-consuming for large trees, these internal nodes attributes
                  are computed using lazy evaluation only when required by setting
                  the {@code includeBoundaryAttributes} argument to{@code true}. Once computed, these attributes remain in the
                  tree, which implies that in this case, further calls to the
                  method for the same region will always include these attributes
                  regardless of the value of the{@code includeBoundaryAttributes} argument.&lt;/p&gt;                
                <param>
                    includeBoundaryAttributes if true, the boundary attributes
                      at internal nodes are guaranteed to be included (they may be
                      included even if the argument is false, if they have already been
                      computed due to a previous call)                    
                </param>
                <return>
                    underlying BSP tree                    
                </return>
                <see>
                    BoundaryAttribute                    
                </see>
            </javadoc>
            <method name="getBoundarySize" type="double" line="156"/>
            <javadoc line="156">
                Get the size of the boundary.                
                <return>
                    the size of the boundary (this is 0 in 1D, a length in
                      2D, an area in 3D ...)                    
                </return>
            </javadoc>
            <method name="getSize" type="double" line="162"/>
            <javadoc line="162">
                Get the size of the instance.                
                <return>
                    the size of the instance (this is a length in 1D, an area
                      in 2D, a volume in 3D ...)                    
                </return>
            </javadoc>
            <method name="getBarycenter" type="Vector<S>" line="168"/>
            <javadoc line="168">
                Get the barycenter of the instance.                
                <return>
                    an object representing the barycenter                    
                </return>
            </javadoc>
            <method name="side" type="Side" line="173"/>
            <javadoc line="173">
                Compute the relative position of the instance with respect to an
                  hyperplane.                
                <param>
                    hyperplane reference hyperplane                    
                </param>
                <return>
                    one of {@link Side#PLUS Side.PLUS}, {@link Side#MINUSSide.MINUS}, {@link Side#BOTH Side.BOTH} or {@link Side#HYPERSide.HYPER} (the latter result can occur only if the tree
                      contains only one cut hyperplane)                    
                </return>
            </javadoc>
            <method name="intersection" type="SubHyperplane<S>" line="183"/>
            <javadoc line="183">
                Get the parts of a sub-hyperplane that are contained in the region.
                  &lt;p&gt;The parts of the sub-hyperplane that belong to the boundary are
                  &lt;em&gt;not&lt;/em&gt; included in the resulting parts.&lt;/p&gt;                
                <param>
                    sub sub-hyperplane traversing the region                    
                </param>
                <return>
                    filtered sub-hyperplane                    
                </return>
            </javadoc>
        </interface>
    </source>