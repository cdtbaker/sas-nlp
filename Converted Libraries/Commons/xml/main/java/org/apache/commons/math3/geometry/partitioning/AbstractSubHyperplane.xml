<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.geometry.partitioning">
        <import package="org.apache.commons.math3.geometry.Space"/>
        <class name="AbstractSubHyperplane" line="21">
            <type_params>
                <type_param name="S"/>
                <type_param name="T"/>
            </type_params>
            <implements interface="SubHyperplane">
                <type_params>
                    <type_param name="S"/>
                </type_params>
            </implements>
            <javadoc line="21">
                This class implements the dimension-independent parts of {@link SubHyperplane}.
                  &lt;p&gt;sub-hyperplanes are obtained when parts of an {@link Hyperplane hyperplane} are chopped off by other hyperplanes that
                  intersect it. The remaining part is a convex region. Such objects
                  appear in {@link BSPTree BSP trees} as the intersection of a cut
                  hyperplane with the convex region which it splits, the chopping
                  hyperplanes are the cut hyperplanes closer to the tree root.&lt;/p&gt;                
                <param>
                    &lt;S&gt;
                       Type of the embedding space.                    
                </param>
                <param>
                    &lt;T&gt;
                       Type of the embedded sub-space.                    
                </param>
                <version>
                    $Id: AbstractSubHyperplane.java 1555050 2014-01-03 11:22:04Z luc $                    
                </version>
                <since>
                    3.0                    
                </since>
            </javadoc>
            <declaration name="hyperplane" type="Hyperplane&amp;lt;S&amp;gt;" line="39"/>
            <javadoc line="39">
                Underlying hyperplane.                
            </javadoc>
            <declaration name="remainingRegion" type="Region&amp;lt;T&amp;gt;" line="42"/>
            <javadoc line="42">
                Remaining region of the hyperplane.                
            </javadoc>
            <javadoc line="45">
                Build a sub-hyperplane from an hyperplane and a region.                
                <param>
                    hyperplane underlying hyperplane                    
                </param>
                <param>
                    remainingRegion remaining region of the hyperplane                    
                </param>
            </javadoc>
            <method name="AbstractSubHyperplane" type="constructor" line="50">
                <params>
                    <param name="hyperplane" type="Hyperplane&lt;S&gt;"/>
                    <param name="remainingRegion" type="Region&lt;T&gt;"/>
                </params>
            </method>
            <method name="buildNew" type="AbstractSubHyperplane&lt;S,T&gt;" line="55"/>
            <javadoc line="55">
                Build a sub-hyperplane from an hyperplane and a region.                
                <param>
                    hyper underlying hyperplane                    
                </param>
                <param>
                    remaining remaining region of the hyperplane                    
                </param>
                <return>
                    a new sub-hyperplane                    
                </return>
            </javadoc>
            <javadoc line="63">
                {@inheritDoc}                
            </javadoc>
            <method name="copySelf" type="AbstractSubHyperplane&lt;S,T&gt;" line="64"/>
            <javadoc line="68">
                Get the underlying hyperplane.                
                <return>
                    underlying hyperplane                    
                </return>
            </javadoc>
            <method name="getHyperplane" type="Hyperplane&lt;S&gt;" line="71"/>
            <javadoc line="75">
                Get the remaining region of the hyperplane.
                  &lt;p&gt;The returned region is expressed in the canonical hyperplane
                  frame and has the hyperplane dimension. For example a chopped
                  hyperplane in the 3D euclidean is a 2D plane and the
                  corresponding region is a convex 2D polygon.&lt;/p&gt;                
                <return>
                    remaining region of the hyperplane                    
                </return>
            </javadoc>
            <method name="getRemainingRegion" type="Region&lt;T&gt;" line="82"/>
            <javadoc line="86">
                {@inheritDoc}                
            </javadoc>
            <method name="getSize" type="double" line="87"/>
            <javadoc line="91">
                {@inheritDoc}                
            </javadoc>
            <method name="reunite" type="AbstractSubHyperplane&lt;S,T&gt;" line="92">
                <params>
                    <param name="other" type="SubHyperplane&lt;S&gt;"/>
                </params>
                <declaration name="o" type="AbstractSubHyperplane&amp;lt;S,T&amp;gt;" line="93"/>
            </method>
            <javadoc line="99">
                Apply a transform to the instance.
                  &lt;p&gt;The instance must be a (D-1)-dimension sub-hyperplane with
                  respect to the transform &lt;em&gt;not&lt;/em&gt; a (D-2)-dimension
                  sub-hyperplane the transform knows how to transform by
                  itself. The transform will consist in transforming first the
                  hyperplane and then the all region using the various methods
                  provided by the transform.&lt;/p&gt;                
                <param>
                    transform D-dimension transform to apply                    
                </param>
                <return>
                    the transformed instance                    
                </return>
            </javadoc>
            <method name="applyTransform" type="AbstractSubHyperplane&lt;S,T&gt;" line="109">
                <params>
                    <param name="transform" type="Transform&lt;S,T&gt;"/>
                </params>
                <declaration name="tHyperplane" type="Hyperplane&amp;lt;S&amp;gt;" line="110"/>
                <declaration name="tTree" type="BSPTree&amp;lt;T&amp;gt;" line="111"/>
            </method>
            <javadoc line="116">
                Recursively transform a BSP-tree from a sub-hyperplane.                
                <param>
                    node current BSP tree node                    
                </param>
                <param>
                    transformed image of the instance hyperplane by the transform                    
                </param>
                <param>
                    transform transform to apply                    
                </param>
                <return>
                    a new tree                    
                </return>
            </javadoc>
            <method name="recurseTransform" type="BSPTree&lt;T&gt;" line="124">
                <params>
                    <param name="node" type="BSPTree&lt;T&gt;"/>
                    <param name="transformed" type="Hyperplane&lt;S&gt;"/>
                    <param name="transform" type="Transform&lt;S,T&gt;"/>
                </params>
                <scope line="125"/>
                <declaration name="attribute" type="BoundaryAttribute&amp;lt;T&amp;gt;" line="129"/>
                <scope line="132">
                    <declaration name="tPO" type="SubHyperplane&amp;lt;T&amp;gt;" line="133"/>
                    <declaration name="tPI" type="SubHyperplane&amp;lt;T&amp;gt;" line="135"/>
                </scope>
            </method>
            <method name="side" type="Side" line="147"/>
            <javadoc line="147">
                {@inheritDoc}                
            </javadoc>
            <method name="split" type="SplitSubHyperplane&lt;S&gt;" line="150"/>
            <javadoc line="150">
                {@inheritDoc}                
            </javadoc>
            <javadoc line="153">
                {@inheritDoc}                
            </javadoc>
            <method name="isEmpty" type="boolean" line="154"/>
        </class>
    </source>