<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optimization.linear">
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.Serializable"/>
        <import package="org.apache.commons.math3.linear.MatrixUtils"/>
        <import package="org.apache.commons.math3.linear.RealVector"/>
        <import package="org.apache.commons.math3.linear.ArrayRealVector"/>
        <class name="LinearConstraint" line="30">
            <implements interface="Serializable"/>
            <javadoc line="30">
                A linear constraint for a linear optimization problem.
                  &lt;p&gt;
                  A linear constraint has one of the forms:
                  &lt;ul&gt;
                  &lt;li&gt;c&lt;sub&gt;1&lt;/sub&gt;x&lt;sub&gt;1&lt;/sub&gt; + ... c&lt;sub&gt;n&lt;/sub&gt;x&lt;sub&gt;n&lt;/sub&gt; = v&lt;/li&gt;
                  &lt;li&gt;c&lt;sub&gt;1&lt;/sub&gt;x&lt;sub&gt;1&lt;/sub&gt; + ... c&lt;sub&gt;n&lt;/sub&gt;x&lt;sub&gt;n&lt;/sub&gt; &amp;lt;= v&lt;/li&gt;
                  &lt;li&gt;c&lt;sub&gt;1&lt;/sub&gt;x&lt;sub&gt;1&lt;/sub&gt; + ... c&lt;sub&gt;n&lt;/sub&gt;x&lt;sub&gt;n&lt;/sub&gt; &gt;= v&lt;/li&gt;
                  &lt;li&gt;l&lt;sub&gt;1&lt;/sub&gt;x&lt;sub&gt;1&lt;/sub&gt; + ... l&lt;sub&gt;n&lt;/sub&gt;x&lt;sub&gt;n&lt;/sub&gt; + l&lt;sub&gt;cst&lt;/sub&gt; =
                  r&lt;sub&gt;1&lt;/sub&gt;x&lt;sub&gt;1&lt;/sub&gt; + ... r&lt;sub&gt;n&lt;/sub&gt;x&lt;sub&gt;n&lt;/sub&gt; + r&lt;sub&gt;cst&lt;/sub&gt;&lt;/li&gt;
                  &lt;li&gt;l&lt;sub&gt;1&lt;/sub&gt;x&lt;sub&gt;1&lt;/sub&gt; + ... l&lt;sub&gt;n&lt;/sub&gt;x&lt;sub&gt;n&lt;/sub&gt; + l&lt;sub&gt;cst&lt;/sub&gt; &amp;lt;=
                  r&lt;sub&gt;1&lt;/sub&gt;x&lt;sub&gt;1&lt;/sub&gt; + ... r&lt;sub&gt;n&lt;/sub&gt;x&lt;sub&gt;n&lt;/sub&gt; + r&lt;sub&gt;cst&lt;/sub&gt;&lt;/li&gt;
                  &lt;li&gt;l&lt;sub&gt;1&lt;/sub&gt;x&lt;sub&gt;1&lt;/sub&gt; + ... l&lt;sub&gt;n&lt;/sub&gt;x&lt;sub&gt;n&lt;/sub&gt; + l&lt;sub&gt;cst&lt;/sub&gt; &gt;=
                  r&lt;sub&gt;1&lt;/sub&gt;x&lt;sub&gt;1&lt;/sub&gt; + ... r&lt;sub&gt;n&lt;/sub&gt;x&lt;sub&gt;n&lt;/sub&gt; + r&lt;sub&gt;cst&lt;/sub&gt;&lt;/li&gt;
                  &lt;/ul&gt;
                  The c&lt;sub&gt;i&lt;/sub&gt;, l&lt;sub&gt;i&lt;/sub&gt; or r&lt;sub&gt;i&lt;/sub&gt; are the coefficients of the constraints, the x&lt;sub&gt;i&lt;/sub&gt;
                  are the coordinates of the current point and v is the value of the constraint.
                  &lt;/p&gt;                
                <version>
                    $Id: LinearConstraint.java 1422230 2012-12-15 12:11:13Z erans $                    
                </version>
                <deprecated>
                    As of 3.1 (to be removed in 4.0).                    
                </deprecated>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="55"/>
            <javadoc line="55">
                Serializable version identifier.                
            </javadoc>
            <declaration name="coefficients" type="RealVector" line="58"/>
            <javadoc line="58">
                Coefficients of the constraint (left hand side).                
            </javadoc>
            <declaration name="relationship" type="Relationship" line="61"/>
            <javadoc line="61">
                Relationship between left and right hand sides (=, &amp;lt;=, &gt;=).                
            </javadoc>
            <declaration name="value" type="double" line="64"/>
            <javadoc line="64">
                Value of the constraint (right hand side).                
            </javadoc>
            <javadoc line="67">
                Build a constraint involving a single linear equation.
                  &lt;p&gt;
                  A linear constraint with a single linear equation has one of the forms:
                  &lt;ul&gt;
                  &lt;li&gt;c&lt;sub&gt;1&lt;/sub&gt;x&lt;sub&gt;1&lt;/sub&gt; + ... c&lt;sub&gt;n&lt;/sub&gt;x&lt;sub&gt;n&lt;/sub&gt; = v&lt;/li&gt;
                  &lt;li&gt;c&lt;sub&gt;1&lt;/sub&gt;x&lt;sub&gt;1&lt;/sub&gt; + ... c&lt;sub&gt;n&lt;/sub&gt;x&lt;sub&gt;n&lt;/sub&gt; &amp;lt;= v&lt;/li&gt;
                  &lt;li&gt;c&lt;sub&gt;1&lt;/sub&gt;x&lt;sub&gt;1&lt;/sub&gt; + ... c&lt;sub&gt;n&lt;/sub&gt;x&lt;sub&gt;n&lt;/sub&gt; &gt;= v&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/p&gt;                
                <param>
                    coefficients The coefficients of the constraint (left hand side)                    
                </param>
                <param>
                    relationship The type of (in)equality used in the constraint                    
                </param>
                <param>
                    value The value of the constraint (right hand side)                    
                </param>
            </javadoc>
            <method name="LinearConstraint" type="constructor" line="82">
                <params>
                    <param name="coefficients" type="double[]"/>
                    <param name="relationship" type="Relationship"/>
                    <param name="value" type="double"/>
                </params>
            </method>
            <javadoc line="86">
                Build a constraint involving a single linear equation.
                  &lt;p&gt;
                  A linear constraint with a single linear equation has one of the forms:
                  &lt;ul&gt;
                  &lt;li&gt;c&lt;sub&gt;1&lt;/sub&gt;x&lt;sub&gt;1&lt;/sub&gt; + ... c&lt;sub&gt;n&lt;/sub&gt;x&lt;sub&gt;n&lt;/sub&gt; = v&lt;/li&gt;
                  &lt;li&gt;c&lt;sub&gt;1&lt;/sub&gt;x&lt;sub&gt;1&lt;/sub&gt; + ... c&lt;sub&gt;n&lt;/sub&gt;x&lt;sub&gt;n&lt;/sub&gt; &amp;lt;= v&lt;/li&gt;
                  &lt;li&gt;c&lt;sub&gt;1&lt;/sub&gt;x&lt;sub&gt;1&lt;/sub&gt; + ... c&lt;sub&gt;n&lt;/sub&gt;x&lt;sub&gt;n&lt;/sub&gt; &gt;= v&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/p&gt;                
                <param>
                    coefficients The coefficients of the constraint (left hand side)                    
                </param>
                <param>
                    relationship The type of (in)equality used in the constraint                    
                </param>
                <param>
                    value The value of the constraint (right hand side)                    
                </param>
            </javadoc>
            <method name="LinearConstraint" type="constructor" line="101">
                <params>
                    <param name="coefficients" type="RealVector"/>
                    <param name="relationship" type="Relationship"/>
                    <param name="value" type="double"/>
                </params>
            </method>
            <javadoc line="107">
                Build a constraint involving two linear equations.
                  &lt;p&gt;
                  A linear constraint with two linear equation has one of the forms:
                  &lt;ul&gt;
                  &lt;li&gt;l&lt;sub&gt;1&lt;/sub&gt;x&lt;sub&gt;1&lt;/sub&gt; + ... l&lt;sub&gt;n&lt;/sub&gt;x&lt;sub&gt;n&lt;/sub&gt; + l&lt;sub&gt;cst&lt;/sub&gt; =
                  r&lt;sub&gt;1&lt;/sub&gt;x&lt;sub&gt;1&lt;/sub&gt; + ... r&lt;sub&gt;n&lt;/sub&gt;x&lt;sub&gt;n&lt;/sub&gt; + r&lt;sub&gt;cst&lt;/sub&gt;&lt;/li&gt;
                  &lt;li&gt;l&lt;sub&gt;1&lt;/sub&gt;x&lt;sub&gt;1&lt;/sub&gt; + ... l&lt;sub&gt;n&lt;/sub&gt;x&lt;sub&gt;n&lt;/sub&gt; + l&lt;sub&gt;cst&lt;/sub&gt; &amp;lt;=
                  r&lt;sub&gt;1&lt;/sub&gt;x&lt;sub&gt;1&lt;/sub&gt; + ... r&lt;sub&gt;n&lt;/sub&gt;x&lt;sub&gt;n&lt;/sub&gt; + r&lt;sub&gt;cst&lt;/sub&gt;&lt;/li&gt;
                  &lt;li&gt;l&lt;sub&gt;1&lt;/sub&gt;x&lt;sub&gt;1&lt;/sub&gt; + ... l&lt;sub&gt;n&lt;/sub&gt;x&lt;sub&gt;n&lt;/sub&gt; + l&lt;sub&gt;cst&lt;/sub&gt; &gt;=
                  r&lt;sub&gt;1&lt;/sub&gt;x&lt;sub&gt;1&lt;/sub&gt; + ... r&lt;sub&gt;n&lt;/sub&gt;x&lt;sub&gt;n&lt;/sub&gt; + r&lt;sub&gt;cst&lt;/sub&gt;&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/p&gt;                
                <param>
                    lhsCoefficients The coefficients of the linear expression on the left hand side of the constraint                    
                </param>
                <param>
                    lhsConstant The constant term of the linear expression on the left hand side of the constraint                    
                </param>
                <param>
                    relationship The type of (in)equality used in the constraint                    
                </param>
                <param>
                    rhsCoefficients The coefficients of the linear expression on the right hand side of the constraint                    
                </param>
                <param>
                    rhsConstant The constant term of the linear expression on the right hand side of the constraint                    
                </param>
            </javadoc>
            <method name="LinearConstraint" type="constructor" line="128">
                <params>
                    <param name="lhsCoefficients" type="double[]"/>
                    <param name="lhsConstant" type="double"/>
                    <param name="relationship" type="Relationship"/>
                    <param name="rhsCoefficients" type="double[]"/>
                    <param name="rhsConstant" type="double"/>
                </params>
                <declaration name="sub" type="double[]" line="129"/>
                <scope line="130"/>
            </method>
            <javadoc line="138">
                Build a constraint involving two linear equations.
                  &lt;p&gt;
                  A linear constraint with two linear equation has one of the forms:
                  &lt;ul&gt;
                  &lt;li&gt;l&lt;sub&gt;1&lt;/sub&gt;x&lt;sub&gt;1&lt;/sub&gt; + ... l&lt;sub&gt;n&lt;/sub&gt;x&lt;sub&gt;n&lt;/sub&gt; + l&lt;sub&gt;cst&lt;/sub&gt; =
                  r&lt;sub&gt;1&lt;/sub&gt;x&lt;sub&gt;1&lt;/sub&gt; + ... r&lt;sub&gt;n&lt;/sub&gt;x&lt;sub&gt;n&lt;/sub&gt; + r&lt;sub&gt;cst&lt;/sub&gt;&lt;/li&gt;
                  &lt;li&gt;l&lt;sub&gt;1&lt;/sub&gt;x&lt;sub&gt;1&lt;/sub&gt; + ... l&lt;sub&gt;n&lt;/sub&gt;x&lt;sub&gt;n&lt;/sub&gt; + l&lt;sub&gt;cst&lt;/sub&gt; &amp;lt;=
                  r&lt;sub&gt;1&lt;/sub&gt;x&lt;sub&gt;1&lt;/sub&gt; + ... r&lt;sub&gt;n&lt;/sub&gt;x&lt;sub&gt;n&lt;/sub&gt; + r&lt;sub&gt;cst&lt;/sub&gt;&lt;/li&gt;
                  &lt;li&gt;l&lt;sub&gt;1&lt;/sub&gt;x&lt;sub&gt;1&lt;/sub&gt; + ... l&lt;sub&gt;n&lt;/sub&gt;x&lt;sub&gt;n&lt;/sub&gt; + l&lt;sub&gt;cst&lt;/sub&gt; &gt;=
                  r&lt;sub&gt;1&lt;/sub&gt;x&lt;sub&gt;1&lt;/sub&gt; + ... r&lt;sub&gt;n&lt;/sub&gt;x&lt;sub&gt;n&lt;/sub&gt; + r&lt;sub&gt;cst&lt;/sub&gt;&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/p&gt;                
                <param>
                    lhsCoefficients The coefficients of the linear expression on the left hand side of the constraint                    
                </param>
                <param>
                    lhsConstant The constant term of the linear expression on the left hand side of the constraint                    
                </param>
                <param>
                    relationship The type of (in)equality used in the constraint                    
                </param>
                <param>
                    rhsCoefficients The coefficients of the linear expression on the right hand side of the constraint                    
                </param>
                <param>
                    rhsConstant The constant term of the linear expression on the right hand side of the constraint                    
                </param>
            </javadoc>
            <method name="LinearConstraint" type="constructor" line="159">
                <params>
                    <param name="lhsCoefficients" type="RealVector"/>
                    <param name="lhsConstant" type="double"/>
                    <param name="relationship" type="Relationship"/>
                    <param name="rhsCoefficients" type="RealVector"/>
                    <param name="rhsConstant" type="double"/>
                </params>
            </method>
            <javadoc line="165">
                Get the coefficients of the constraint (left hand side).                
                <return>
                    coefficients of the constraint (left hand side)                    
                </return>
            </javadoc>
            <method name="getCoefficients" type="RealVector" line="169"/>
            <javadoc line="173">
                Get the relationship between left and right hand sides.                
                <return>
                    relationship between left and right hand sides                    
                </return>
            </javadoc>
            <method name="getRelationship" type="Relationship" line="177"/>
            <javadoc line="181">
                Get the value of the constraint (right hand side).                
                <return>
                    value of the constraint (right hand side)                    
                </return>
            </javadoc>
            <method name="getValue" type="double" line="185"/>
            <method name="equals" type="boolean" line="190">
                <params>
                    <param name="other" type="Object"/>
                </params>
                <scope line="192"/>
                <scope line="196">
                    <declaration name="rhs" type="LinearConstraint" line="197"/>
                </scope>
            </method>
            <method name="hashCode" type="int" line="206"/>
            <javadoc line="212">
                Serialize the instance.                
                <param>
                    oos stream where object should be written                    
                </param>
                <throws>
                    IOException if object cannot be written to stream                    
                </throws>
            </javadoc>
            <method name="writeObject" type="void" line="218">
                <params>
                    <param name="oos" type="ObjectOutputStream"/>
                </params>
            </method>
            <javadoc line="223">
                Deserialize the instance.                
                <param>
                    ois stream from which the object should be read                    
                </param>
                <throws>
                    ClassNotFoundException if a class in the stream cannot be found                    
                </throws>
                <throws>
                    IOException if object cannot be read from the stream                    
                </throws>
            </javadoc>
            <method name="readObject" type="void" line="230">
                <params>
                    <param name="ois" type="ObjectInputStream"/>
                </params>
            </method>
        </class>
    </source>