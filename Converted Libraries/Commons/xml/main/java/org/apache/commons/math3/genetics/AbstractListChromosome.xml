<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.genetics">
        <import package="java.util.ArrayList"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.Collections"/>
        <import package="java.util.List"/>
        <class name="AbstractListChromosome" line="6">
            <type_params>
                <type_param name="T"/>
            </type_params>
            <extends class="Chromosome"/>
            <javadoc line="6">
                Chromosome represented by an immutable list of a fixed length.                
                <param>
                    <T>
                      type of the representation list                    
                </param>
                <version>
                    $Id: AbstractListChromosome.java 1416643 2012-12-03 19:37:14Z tn $                    
                </version>
                <since>
                    2.0                    
                </since>
            </javadoc>
            <declaration name="representation" type="List&lt;T&gt;" line="14"/>
            <javadoc line="14">
                List representing the chromosome                
            </javadoc>
            <javadoc line="18">
                Constructor.                
                <param>
                    representation inner representation of the chromosome                    
                </param>
                <throws>
                    InvalidRepresentationException iff the <code>representation</code> can not represent a valid chromosome                    
                </throws>
            </javadoc>
            <method name="AbstractListChromosome" type="constructor" line="23">
                <params>
                    <param name="representation" type="List<T>"/>
                </params>
            </method>
            <javadoc line="27">
                Constructor.                
                <param>
                    representation inner representation of the chromosome                    
                </param>
                <throws>
                    InvalidRepresentationException iff the <code>representation</code> can not represent a valid chromosome                    
                </throws>
            </javadoc>
            <method name="AbstractListChromosome" type="constructor" line="32">
                <params>
                    <param name="representation" type="T[]"/>
                </params>
            </method>
            <method name="checkValidity" type="void" line="35"/>
            <javadoc line="35">
                Asserts that &lt;code&gt;representation&lt;/code&gt; can represent a valid chromosome.                
                <param>
                    chromosomeRepresentation representation of the chromosome                    
                </param>
                <throws>
                    InvalidRepresentationException iff the <code>representation</code> can not represent a valid chromosome                    
                </throws>
            </javadoc>
            <javadoc line="41">
                Returns the (immutable) inner representation of the chromosome.                
                <return>
                    the representation of the chromosome                    
                </return>
            </javadoc>
            <method name="getRepresentation" type="List<T>" line="45"/>
            <javadoc line="48">
                Returns the length of the chromosome.                
                <return>
                    the length of the chromosome                    
                </return>
            </javadoc>
            <method name="getLength" type="int" line="52"/>
            <method name="newFixedLengthChromosome" type="AbstractListChromosome<T>" line="55"/>
            <javadoc line="55">
                Creates a new instance of the same class as &lt;code&gt;this&lt;/code&gt; is, with a given &lt;code&gt;arrayRepresentation&lt;/code&gt;.
                  This is needed in crossover and mutation operators, where we need a new instance of the same class, but with
                  different array representation.
                  &lt;p&gt;
                  Usually, this method just calls a constructor of the class.                
                <param>
                    chromosomeRepresentation the inner array representation of the new chromosome.                    
                </param>
                <return>
                    new instance extended from FixedLengthChromosome with the given arrayRepresentation                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="65"/>
        </class>
    </source>