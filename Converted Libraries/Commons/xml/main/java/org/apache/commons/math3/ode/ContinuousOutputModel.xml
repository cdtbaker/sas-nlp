<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.ode">
        <import package="java.io.Serializable"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.List"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.MathIllegalArgumentException"/>
        <import package="org.apache.commons.math3.exception.MaxCountExceededException"/>
        <import package="org.apache.commons.math3.exception.util.LocalizedFormats"/>
        <import package="org.apache.commons.math3.ode.sampling.StepHandler"/>
        <import package="org.apache.commons.math3.ode.sampling.StepInterpolator"/>
        <import package="org.apache.commons.math3.util.FastMath"/>
        <class name="ContinuousOutputModel" line="12">
            <implements interface="StepHandler"/>
            <implements interface="Serializable"/>
            <javadoc line="12">
                This class stores all information provided by an ODE integrator
                  during the integration process and build a continuous model of the
                  solution from this.
                  &lt;p&gt;This class act as a step handler from the integrator point of
                  view. It is called iteratively during the integration process and
                  stores a copy of all steps information in a sorted collection for
                  later use. Once the integration process is over, the user can use
                  the {@link #setInterpolatedTime setInterpolatedTime} and {@link #getInterpolatedState getInterpolatedState} to retrieve this
                  information at any time. It is important to wait for the
                  integration to be over before attempting to call {@link #setInterpolatedTime setInterpolatedTime} because some internal
                  variables are set only once the last step has been handled.&lt;/p&gt;
                  &lt;p&gt;This is useful for example if the main loop of the user
                  application should remain independent from the integration process
                  or if one needs to mimic the behaviour of an analytical model
                  despite a numerical model is used (i.e. one needs the ability to
                  get the model value at any time or to navigate through the
                  data).&lt;/p&gt;
                  &lt;p&gt;If problem modeling is done with several separate
                  integration phases for contiguous intervals, the same
                  ContinuousOutputModel can be used as step handler for all
                  integration phases as long as they are performed in order and in
                  the same direction. As an example, one can extrapolate the
                  trajectory of a satellite with one model (i.e. one set of
                  differential equations) up to the beginning of a maneuver, use
                  another more complex model including thrusters modeling and
                  accurate attitude control during the maneuver, and revert to the
                  first model after the end of the maneuver. If the same continuous
                  output model handles the steps of all integration phases, the user
                  do not need to bother when the maneuver begins or ends, he has all
                  the data available in a transparent manner.&lt;/p&gt;
                  &lt;p&gt;An important feature of this class is that it implements the
                  &lt;code&gt;Serializable&lt;/code&gt; interface. This means that the result of
                  an integration can be serialized and reused later (if stored into a
                  persistent medium like a filesystem or a database) or elsewhere (if
                  sent to another application). Only the result of the integration is
                  stored, there is no reference to the integrated problem by
                  itself.&lt;/p&gt;
                  &lt;p&gt;One should be aware that the amount of data stored in a
                  ContinuousOutputModel instance can be important if the state vector
                  is large, if the integration interval is long or if the steps are
                  small (which can result from small tolerance settings in {@link org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator adaptive
                  step size integrators}).&lt;/p&gt;                
                <see>
                    StepHandler                    
                </see>
                <see>
                    StepInterpolator                    
                </see>
                <version>
                    $Id: ContinuousOutputModel.java 1463684 2013-04-02 19:04:13Z luc $                    
                </version>
                <since>
                    1.2                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="61"/>
            <javadoc line="61">
                Serializable version identifier                
            </javadoc>
            <declaration name="initialTime" type="double" line="65"/>
            <javadoc line="65">
                Initial integration time.                
            </javadoc>
            <declaration name="finalTime" type="double" line="69"/>
            <javadoc line="69">
                Final integration time.                
            </javadoc>
            <declaration name="forward" type="boolean" line="73"/>
            <javadoc line="73">
                Integration direction indicator.                
            </javadoc>
            <declaration name="index" type="int" line="77"/>
            <javadoc line="77">
                Current interpolator index.                
            </javadoc>
            <declaration name="steps" type="List&lt;StepInterpolator&gt;" line="81"/>
            <javadoc line="81">
                Steps table.                
            </javadoc>
            <javadoc line="85">
                Simple constructor.
                  Build an empty continuous output model.                
            </javadoc>
            <method name="ContinuousOutputModel" type="constructor" line="89"/>
            <javadoc line="96">
                Append another model at the end of the instance.                
                <param>
                    model model to add at the end of the instance                    
                </param>
                <exception>
                    MathIllegalArgumentException if the model to append is not
                      compatible with the instance (dimension of the state vector,
                      propagation direction, hole between the dates)                    
                </exception>
                <exception>
                    MaxCountExceededException if the number of functions evaluations is exceeded
                      during step finalization                    
                </exception>
            </javadoc>
            <method name="append" type="void" line="105">
                <params>
                    <param name="model" type="ContinuousOutputModel"/>
                </params>
                <scope line="106"/>
                <scope line="109"/>
                <scope line="113">
                    <scope line="114"/>
                    <scope line="117"/>
                    <declaration name="lastInterpolator" type="StepInterpolator" line="120"/>
                    <declaration name="current" type="double" line="121"/>
                    <declaration name="previous" type="double" line="122"/>
                    <declaration name="step" type="double" line="123"/>
                    <declaration name="gap" type="double" line="124"/>
                    <scope line="125"/>
                </scope>
                <scope line="129"/>
            </method>
            <javadoc line="135">
                {@inheritDoc}                
            </javadoc>
            <method name="init" type="void" line="138">
                <params>
                    <param name="t0" type="double"/>
                    <param name="y0" type="double[]"/>
                    <param name="t" type="double"/>
                </params>
            </method>
            <javadoc line="145">
                Handle the last accepted step.
                  A copy of the information provided by the last step is stored in
                  the instance for later use.                
                <param>
                    interpolator interpolator for the last accepted step.                    
                </param>
                <param>
                    isLast true if the step is the last one                    
                </param>
                <exception>
                    MaxCountExceededException if the number of functions evaluations is exceeded
                      during step finalization                    
                </exception>
            </javadoc>
            <method name="handleStep" type="void" line="154">
                <params>
                    <param name="interpolator" type="StepInterpolator"/>
                    <param name="isLast" type="boolean"/>
                </params>
                <scope line="155"/>
                <scope line="160"/>
            </method>
            <javadoc line="165">
                Get the initial integration time.                
                <return>
                    initial integration time                    
                </return>
            </javadoc>
            <method name="getInitialTime" type="double" line="169"/>
            <javadoc line="172">
                Get the final integration time.                
                <return>
                    final integration time                    
                </return>
            </javadoc>
            <method name="getFinalTime" type="double" line="176"/>
            <javadoc line="179">
                Get the time of the interpolated point.
                  If {@link #setInterpolatedTime} has not been called, it returns
                  the final integration time.                
                <return>
                    interpolation point time                    
                </return>
            </javadoc>
            <method name="getInterpolatedTime" type="double" line="185"/>
            <javadoc line="188">
                Set the time of the interpolated point.
                  &lt;p&gt;This method should &lt;strong&gt;not&lt;/strong&gt; be called before the
                  integration is over because some internal variables are set only
                  once the last step has been handled.&lt;/p&gt;
                  &lt;p&gt;Setting the time outside of the integration interval is now
                  allowed (it was not allowed up to version 5.9 of Mantissa), but
                  should be used with care since the accuracy of the interpolator
                  will probably be very poor far from this interval. This allowance
                  has been added to simplify implementation of search algorithms
                  near the interval endpoints.&lt;/p&gt;                
                <param>
                    time time of the interpolated point                    
                </param>
            </javadoc>
            <method name="setInterpolatedTime" type="void" line="201">
                <params>
                    <param name="time" type="double"/>
                </params>
                <declaration name="iMin" type="int" line="202"/>
                <declaration name="sMin" type="StepInterpolator" line="203"/>
                <declaration name="tMin" type="double" line="204"/>
                <declaration name="iMax" type="int" line="205"/>
                <declaration name="sMax" type="StepInterpolator" line="206"/>
                <declaration name="tMax" type="double" line="207"/>
                <scope line="208"/>
                <scope line="213"/>
                <scope line="218">
                    <declaration name="si" type="StepInterpolator" line="219"/>
                    <declaration name="location" type="int" line="220"/>
                    <scope line="221"/>
                    <scope line="225"/>
                    <scope line="229"/>
                    <declaration name="iMed" type="int" line="233"/>
                    <declaration name="sMed" type="StepInterpolator" line="234"/>
                    <declaration name="tMed" type="double" line="235"/>
                    <scope line="236"/>
                    <scope line="239">
                        <declaration name="d12" type="double" line="240"/>
                        <declaration name="d23" type="double" line="241"/>
                        <declaration name="d13" type="double" line="242"/>
                        <declaration name="dt1" type="double" line="243"/>
                        <declaration name="dt2" type="double" line="244"/>
                        <declaration name="dt3" type="double" line="245"/>
                        <declaration name="iLagrange" type="double" line="246"/>
                    </scope>
                    <declaration name="low" type="int" line="249"/>
                    <declaration name="high" type="int" line="250"/>
                    <scope line="251"/>
                    <scope line="254"/>
                </scope>
                <scope line="259"/>
            </method>
            <javadoc line="264">
                Get the state vector of the interpolated point.                
                <return>
                    state vector at time {@link #getInterpolatedTime}                    
                </return>
                <exception>
                    MaxCountExceededException if the number of functions evaluations is exceeded                    
                </exception>
                <see>
                    #getInterpolatedSecondaryState(int)                    
                </see>
            </javadoc>
            <method name="getInterpolatedState" type="double[]" line="270"/>
            <javadoc line="273">
                Get the interpolated secondary state corresponding to the secondary equations.                
                <param>
                    secondaryStateIndex index of the secondary set, as returned by {@link org.apache.commons.math3.ode.ExpandableStatefulODE#addSecondaryEquations(org.apache.commons.math3.ode.SecondaryEquations)ExpandableStatefulODE.addSecondaryEquations(SecondaryEquations)}                    
                </param>
                <return>
                    interpolated secondary state at the current interpolation date                    
                </return>
                <see>
                    #getInterpolatedState()                    
                </see>
                <since>
                    3.2                    
                </since>
                <exception>
                    MaxCountExceededException if the number of functions evaluations is exceeded                    
                </exception>
            </javadoc>
            <method name="getInterpolatedSecondaryState" type="double[]" line="281">
                <params>
                    <param name="secondaryStateIndex" type="int"/>
                </params>
            </method>
            <javadoc line="284">
                Compare a step interval and a double.                
                <param>
                    time point to locate                    
                </param>
                <param>
                    interval step interval                    
                </param>
                <return>
                    -1 if the double is before the interval, 0 if it is in
                      the interval, and +1 if it is after the interval, according to
                      the interval direction                    
                </return>
            </javadoc>
            <method name="locatePoint" type="int" line="292">
                <params>
                    <param name="time" type="double"/>
                    <param name="interval" type="StepInterpolator"/>
                </params>
                <scope line="293">
                    <scope line="294"/>
                    <scope line="297"/>
                    <scope line="300"/>
                </scope>
                <scope line="304"/>
                <scope line="307"/>
                <scope line="310"/>
            </method>
        </class>
    </source>