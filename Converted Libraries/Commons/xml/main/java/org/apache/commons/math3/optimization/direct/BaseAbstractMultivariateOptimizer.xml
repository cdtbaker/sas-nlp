<?xml version="1.0" encoding="UTF-8"?>
    <source package="org.apache.commons.math3.optimization.direct">
        <import package="org.apache.commons.math3.util.Incrementor"/>
        <import package="org.apache.commons.math3.exception.MaxCountExceededException"/>
        <import package="org.apache.commons.math3.exception.TooManyEvaluationsException"/>
        <import package="org.apache.commons.math3.analysis.MultivariateFunction"/>
        <import package="org.apache.commons.math3.optimization.BaseMultivariateOptimizer"/>
        <import package="org.apache.commons.math3.optimization.OptimizationData"/>
        <import package="org.apache.commons.math3.optimization.GoalType"/>
        <import package="org.apache.commons.math3.optimization.InitialGuess"/>
        <import package="org.apache.commons.math3.optimization.SimpleBounds"/>
        <import package="org.apache.commons.math3.optimization.ConvergenceChecker"/>
        <import package="org.apache.commons.math3.optimization.PointValuePair"/>
        <import package="org.apache.commons.math3.optimization.SimpleValueChecker"/>
        <import package="org.apache.commons.math3.exception.DimensionMismatchException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
        <import package="org.apache.commons.math3.exception.NumberIsTooLargeException"/>
        <class name="BaseAbstractMultivariateOptimizer" line="36">
            <type_params>
                <type_param name="FUNC"/>
            </type_params>
            <implements interface="BaseMultivariateOptimizer">
                <type_params>
                    <type_param name="FUNC"/>
                </type_params>
            </implements>
            <javadoc line="36">
                Base class for implementing optimizers for multivariate scalar functions.
                  This base class handles the boiler-plate methods associated to thresholds,
                  evaluations counting, initial guess and simple bounds settings.                
                <param>
                    <FUNC>
                       Type of the objective function to be optimized.                    
                </param>
                <version>
                    $Id: BaseAbstractMultivariateOptimizer.java 1422313 2012-12-15 18:53:41Z psteitz $                    
                </version>
                <deprecated>
                    As of 3.1 (to be removed in 4.0).                    
                </deprecated>
                <since>
                    2.2                    
                </since>
            </javadoc>
            <declaration name="evaluations" type="Incrementor" line="50"/>
            <javadoc line="50">
                Evaluations counter.                
            </javadoc>
            <declaration name="checker" type="ConvergenceChecker&lt;PointValuePair&gt;" line="52"/>
            <javadoc line="52">
                Convergence checker.                
            </javadoc>
            <declaration name="goal" type="GoalType" line="54"/>
            <javadoc line="54">
                Type of optimization.                
            </javadoc>
            <declaration name="start" type="double[]" line="56"/>
            <javadoc line="56">
                Initial guess.                
            </javadoc>
            <declaration name="lowerBound" type="double[]" line="58"/>
            <javadoc line="58">
                Lower bounds.                
            </javadoc>
            <declaration name="upperBound" type="double[]" line="60"/>
            <javadoc line="60">
                Upper bounds.                
            </javadoc>
            <declaration name="function" type="MultivariateFunction" line="62"/>
            <javadoc line="62">
                Objective function.                
            </javadoc>
            <javadoc line="65">
                Simple constructor with default settings.
                  The convergence check is set to a {@link SimpleValueChecker}.                
                <deprecated>
                    See {@link SimpleValueChecker#SimpleValueChecker()}                    
                </deprecated>
            </javadoc>
            <method name="BaseAbstractMultivariateOptimizer" type="constructor" line="71"/>
            <javadoc line="74">
                @param checker Convergence checker.                
            </javadoc>
            <method name="BaseAbstractMultivariateOptimizer" type="constructor" line="77">
                <params>
                    <param name="checker" type="ConvergenceChecker<PointValuePair>"/>
                </params>
            </method>
            <javadoc line="81">
                {@inheritDoc}                
            </javadoc>
            <method name="getMaxEvaluations" type="int" line="82"/>
            <javadoc line="86">
                {@inheritDoc}                
            </javadoc>
            <method name="getEvaluations" type="int" line="87"/>
            <javadoc line="91">
                {@inheritDoc}                
            </javadoc>
            <method name="getConvergenceChecker" type="ConvergenceChecker<PointValuePair>" line="92"/>
            <javadoc line="96">
                Compute the objective function value.                
                <param>
                    point Point at which the objective function must be evaluated.                    
                </param>
                <return>
                    the objective function value at the specified point.                    
                </return>
                <throws>
                    TooManyEvaluationsException if the maximal number of
                      evaluations is exceeded.                    
                </throws>
            </javadoc>
            <method name="computeObjectiveValue" type="double" line="104">
                <params>
                    <param name="point" type="double[]"/>
                </params>
                <scope line="105"/>
                <scope line="107"/>
            </method>
            <javadoc line="113">
                {@inheritDoc}                
                <deprecated>
                    As of 3.1. Please use{@link #optimize(int,MultivariateFunction,GoalType,OptimizationData[])}instead.                    
                </deprecated>
            </javadoc>
            <method name="optimize" type="PointValuePair" line="122">
                <params>
                    <param name="maxEval" type="int"/>
                    <param name="f" type="FUNC"/>
                    <param name="goalType" type="GoalType"/>
                    <param name="startPoint" type="double[]"/>
                </params>
            </method>
            <javadoc line="126">
                Optimize an objective function.                
                <param>
                    maxEval Allowed number of evaluations of the objective function.                    
                </param>
                <param>
                    f Objective function.                    
                </param>
                <param>
                    goalType Optimization type.                    
                </param>
                <param>
                    optData Optimization data. The following data will be looked for:
                      <ul>
                      <li>{@link InitialGuess}</li>
                      <li>{@link SimpleBounds}</li>
                      </ul>                    
                </param>
                <return>
                    the point/value pair giving the optimal value of the objective
                      function.                    
                </return>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="optimize" type="PointValuePair" line="144">
                <params>
                    <param name="maxEval" type="int"/>
                    <param name="f" type="FUNC"/>
                    <param name="goalType" type="GoalType"/>
                    <param name="optData" type="OptimizationData"/>
                </params>
            </method>
            <javadoc line="148">
                Optimize an objective function.                
                <param>
                    f Objective function.                    
                </param>
                <param>
                    goalType Type of optimization goal: either{@link GoalType#MAXIMIZE} or {@link GoalType#MINIMIZE}.                    
                </param>
                <param>
                    startPoint Start point for optimization.                    
                </param>
                <param>
                    maxEval Maximum number of function evaluations.                    
                </param>
                <return>
                    the point/value pair giving the optimal value for objective
                      function.                    
                </return>
                <throws>
                    org.apache.commons.math3.exception.DimensionMismatchExceptionif the start point dimension is wrong.                    
                </throws>
                <throws>
                    org.apache.commons.math3.exception.TooManyEvaluationsExceptionif the maximal number of evaluations is exceeded.                    
                </throws>
                <throws>
                    org.apache.commons.math3.exception.NullArgumentException if
                      any argument is {@code null}.                    
                </throws>
                <deprecated>
                    As of 3.1. Please use{@link #optimize(int,MultivariateFunction,GoalType,OptimizationData[])}instead.                    
                </deprecated>
            </javadoc>
            <method name="optimizeInternal" type="PointValuePair" line="170">
                <params>
                    <param name="maxEval" type="int"/>
                    <param name="f" type="FUNC"/>
                    <param name="goalType" type="GoalType"/>
                    <param name="startPoint" type="double[]"/>
                </params>
            </method>
            <javadoc line="174">
                Optimize an objective function.                
                <param>
                    maxEval Allowed number of evaluations of the objective function.                    
                </param>
                <param>
                    f Objective function.                    
                </param>
                <param>
                    goalType Optimization type.                    
                </param>
                <param>
                    optData Optimization data. The following data will be looked for:
                      <ul>
                      <li>{@link InitialGuess}</li>
                      <li>{@link SimpleBounds}</li>
                      </ul>                    
                </param>
                <return>
                    the point/value pair giving the optimal value of the objective
                      function.                    
                </return>
                <throws>
                    TooManyEvaluationsException if the maximal number of
                      evaluations is exceeded.                    
                </throws>
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="optimizeInternal" type="PointValuePair" line="195">
                <params>
                    <param name="maxEval" type="int"/>
                    <param name="f" type="FUNC"/>
                    <param name="goalType" type="GoalType"/>
                    <param name="optData" type="OptimizationData"/>
                </params>
                <comment line="196">
                    Set internal state.                    
                </comment>
                <comment line="201">
                    Retrieve other settings.                    
                </comment>
                <comment line="203">
                    Check input consistency.                    
                </comment>
                <comment line="205">
                    Perform computation.                    
                </comment>
            </method>
            <javadoc line="209">
                Scans the list of (required and optional) optimization data that
                  characterize the problem.                
                <param>
                    optData Optimization data. The following data will be looked for:
                      <ul>
                      <li>{@link InitialGuess}</li>
                      <li>{@link SimpleBounds}</li>
                      </ul>                    
                </param>
            </javadoc>
            <method name="parseOptimizationData" type="void" line="219">
                <params>
                    <param name="optData" type="OptimizationData"/>
                </params>
                <comment line="220">
                    The existing values (as set by the previous call) are reused if                    
                </comment>
                <comment line="221">
                    not provided in the argument list.                    
                </comment>
                <scope line="222">
                    <scope line="223"/>
                    <scope line="227">
                        <declaration name="bounds" type="SimpleBounds" line="228"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="236">
                @return the optimization type.                
            </javadoc>
            <method name="getGoalType" type="GoalType" line="239"/>
            <javadoc line="243">
                @return the initial guess.                
            </javadoc>
            <method name="getStartPoint" type="double[]" line="246"/>
            <javadoc line="249">
                @return the lower bounds.                
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="getLowerBound" type="double[]" line="253"/>
            <javadoc line="256">
                @return the upper bounds.                
                <since>
                    3.1                    
                </since>
            </javadoc>
            <method name="getUpperBound" type="double[]" line="260"/>
            <method name="doOptimize" type="PointValuePair" line="264"/>
            <javadoc line="264">
                Perform the bulk of the optimization algorithm.                
                <return>
                    the point/value pair giving the optimal value of the
                      objective function.                    
                </return>
            </javadoc>
            <javadoc line="272">
                Check parameters consistency.                
            </javadoc>
            <method name="checkParameters" type="void" line="275">
                <comment line="303">
                    If the bounds were not specified, the allowed interval is                    
                </comment>
                <comment line="304">
                    assumed to be [-inf, +inf].                    
                </comment>
                <scope line="276">
                    <declaration name="dim" type="int" line="277"/>
                    <scope line="278">
                        <scope line="279"/>
                        <scope line="282">
                            <declaration name="v" type="double" line="283"/>
                            <declaration name="lo" type="double" line="284"/>
                            <scope line="285"/>
                        </scope>
                    </scope>
                    <scope line="290">
                        <scope line="291"/>
                        <scope line="294">
                            <declaration name="v" type="double" line="295"/>
                            <declaration name="hi" type="double" line="296"/>
                            <scope line="297"/>
                        </scope>
                    </scope>
                    <scope line="305">
                        <scope line="307"/>
                    </scope>
                    <scope line="311">
                        <scope line="313"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>